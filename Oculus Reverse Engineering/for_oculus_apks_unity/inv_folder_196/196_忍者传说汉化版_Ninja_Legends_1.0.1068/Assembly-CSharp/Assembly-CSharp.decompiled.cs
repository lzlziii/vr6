using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using Il2CppDummyDll;
using MeshCutter;
using Oculus.Platform;
using Oculus.Platform.Models;
using Oculus.Spatializer.Propagation;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using VRTK;
using VRTK.Controllables;
using VRTK.Controllables.ArtificialBased;
using VRTK.Controllables.PhysicsBased;
using VRTK.GrabAttachMechanics;
using VRTK.Highlighters;
using VRTK.SecondaryControllerGrabActions;
using VRTK.UnityEventHelper;
using Valve.VR;
using Valve.VR.InteractionSystem;
using Viveport;
using Viveport.Internal;

[assembly: AssemblyVersion("3.7.1.6")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6554F4", Offset = "0x6554F4")]
internal sealed class <>f__AnonymousType0<<pose>j__TPar, <index>j__TPar>
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CEE0", Offset = "0x65CEE0")]
	private readonly <pose>j__TPar <pose>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CEF4", Offset = "0x65CEF4")]
	private readonly <index>j__TPar <index>i__Field;

	public <pose>j__TPar pose => (<pose>j__TPar)null;

	public <index>j__TPar index => (<index>j__TPar)null;

	[DebuggerHidden]
	public <>f__AnonymousType0(<pose>j__TPar pose, <index>j__TPar index)
	{
	}

	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x655504", Offset = "0x655504")]
internal sealed class <>f__AnonymousType1<<pose>j__TPar, <index>j__TPar, <deviceClass>j__TPar>
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF08", Offset = "0x65CF08")]
	private readonly <pose>j__TPar <pose>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF1C", Offset = "0x65CF1C")]
	private readonly <index>j__TPar <index>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF30", Offset = "0x65CF30")]
	private readonly <deviceClass>j__TPar <deviceClass>i__Field;

	public <pose>j__TPar pose => (<pose>j__TPar)null;

	public <index>j__TPar index => (<index>j__TPar)null;

	public <deviceClass>j__TPar deviceClass => (<deviceClass>j__TPar)null;

	[DebuggerHidden]
	public <>f__AnonymousType1(<pose>j__TPar pose, <index>j__TPar index, <deviceClass>j__TPar deviceClass)
	{
	}

	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x655514", Offset = "0x655514")]
internal sealed class <>f__AnonymousType2<<pose>j__TPar, <index>j__TPar, <deviceClass>j__TPar, <deviceRole>j__TPar, <modelNumber>j__TPar, <renderModel>j__TPar>
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF44", Offset = "0x65CF44")]
	private readonly <pose>j__TPar <pose>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF58", Offset = "0x65CF58")]
	private readonly <index>j__TPar <index>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF6C", Offset = "0x65CF6C")]
	private readonly <deviceClass>j__TPar <deviceClass>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF80", Offset = "0x65CF80")]
	private readonly <deviceRole>j__TPar <deviceRole>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CF94", Offset = "0x65CF94")]
	private readonly <modelNumber>j__TPar <modelNumber>i__Field;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x65CFA8", Offset = "0x65CFA8")]
	private readonly <renderModel>j__TPar <renderModel>i__Field;

	public <pose>j__TPar pose => (<pose>j__TPar)null;

	public <index>j__TPar index => (<index>j__TPar)null;

	public <deviceClass>j__TPar deviceClass => (<deviceClass>j__TPar)null;

	public <deviceRole>j__TPar deviceRole => (<deviceRole>j__TPar)null;

	public <modelNumber>j__TPar modelNumber => (<modelNumber>j__TPar)null;

	public <renderModel>j__TPar renderModel => (<renderModel>j__TPar)null;

	[DebuggerHidden]
	public <>f__AnonymousType2(<pose>j__TPar pose, <index>j__TPar index, <deviceClass>j__TPar deviceClass, <deviceRole>j__TPar deviceRole, <modelNumber>j__TPar modelNumber, <renderModel>j__TPar renderModel)
	{
	}

	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
public class FSPStaticMeshHolder : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FSPStaticMeshHolder _instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<int, Mesh> _meshLinks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public int receiverID;

	[Address(RVA = "0x7CA5E4", Offset = "0x7CA5E4", VA = "0x7CA5E4")]
	public static FSPStaticMeshHolder Get()
	{
		return null;
	}

	[Address(RVA = "0x7CA634", Offset = "0x7CA634", VA = "0x7CA634")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7CA7F8", Offset = "0x7CA7F8", VA = "0x7CA7F8")]
	public Mesh GetMesh(int receiverID)
	{
		return null;
	}

	[Address(RVA = "0x7CA68C", Offset = "0x7CA68C", VA = "0x7CA68C")]
	private void LinkMeshes()
	{
	}

	[Address(RVA = "0x7CA868", Offset = "0x7CA868", VA = "0x7CA868")]
	public FSPStaticMeshHolder()
	{
	}
}
public class GlobalProjectorLightCamera : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action PreCullCallback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action PostRenderCallback;

	[Address(RVA = "0x6FD6C4", Offset = "0x6FD6C4", VA = "0x6FD6C4")]
	private void OnPreCull()
	{
	}

	[Address(RVA = "0x6FD6D8", Offset = "0x6FD6D8", VA = "0x6FD6D8")]
	private void OnPostRender()
	{
	}

	[Address(RVA = "0x6FD6EC", Offset = "0x6FD6EC", VA = "0x6FD6EC")]
	public GlobalProjectorLightCamera()
	{
	}
}
public class GlobalProjectorManager : MonoBehaviour
{
	public enum ProjectionCulling
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ProjectorBounds,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ProjectionVolumeBounds
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ProjectorEyeTexture _Tex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ProjectorEyeTexture _TexLight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material _ProjectorMaterialShadow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material _ProjectorMaterialLight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Matrix4x4 _ProjectorMatrix;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Matrix4x4 _ProjectorClipMatrix;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Matrix4x4 _BiasMatrix;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Matrix4x4 _ViewMatrix;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Matrix4x4 _BPV;

	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Matrix4x4 _BPVClip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private Matrix4x4 _ModelMatrix;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private Matrix4x4 _FinalMatrix;

	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private Matrix4x4 _FinalClipMatrix;

	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private MaterialPropertyBlock _MBP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private int[] _ShadowResolutions;

	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	public bool useNonAllocCulling;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string GlobalProjectorLayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	private float _BatchBreak;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GlobalProjectorManager _Instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private Vector3 _GlobalProjectionDir;

	[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
	private int _GlobalShadowResolution;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private ProjectionCulling _GlobalShadowCullingMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	private float _GlobalCutOffDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private bool _GlobalFlipX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2A9")]
	private bool _GlobalFlipY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2AA")]
	private bool _renderShadows;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private Camera _ProjectorCamera;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private Camera _ProjectorCameraLight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private List<ShadowProjector> _ShadowProjectors;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private List<ShadowProjector> _LightProjectors;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private List<ShadowReceiver> _ShadowReceivers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	private List<ShadowTrigger> _ShadowTriggers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private Texture2D _textureRead;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	private bool _anyTriggersAlive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2E9")]
	private bool _shouldCheckTriggers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	private Plane[] _mainCameraPlanes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private bool _cameraPlainsCalculated;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
	private Bounds _projectorBounds;

	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	public Shader _globalProjectorShader;

	public static Vector3 GlobalProjectionDir
	{
		[Address(RVA = "0x6FD9AC", Offset = "0x6FD9AC", VA = "0x6FD9AC")]
		get
		{
			return default(Vector3);
		}
		[Address(RVA = "0x6FD6F4", Offset = "0x6FD6F4", VA = "0x6FD6F4")]
		set
		{
		}
	}

	public static int GlobalShadowResolution
	{
		[Address(RVA = "0x6FDB9C", Offset = "0x6FDB9C", VA = "0x6FDB9C")]
		get
		{
			return default(int);
		}
		[Address(RVA = "0x6FDA2C", Offset = "0x6FDA2C", VA = "0x6FDA2C")]
		set
		{
		}
	}

	public static ProjectionCulling GlobalShadowCullingMode
	{
		[Address(RVA = "0x6FDC90", Offset = "0x6FDC90", VA = "0x6FDC90")]
		get
		{
			return default(ProjectionCulling);
		}
		[Address(RVA = "0x6FDC14", Offset = "0x6FDC14", VA = "0x6FDC14")]
		set
		{
		}
	}

	public static float GlobalCutOffDistance
	{
		[Address(RVA = "0x6FDD8C", Offset = "0x6FDD8C", VA = "0x6FDD8C")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x6FDD08", Offset = "0x6FDD08", VA = "0x6FDD08")]
		set
		{
		}
	}

	public static bool GlobalFlipX
	{
		[Address(RVA = "0x6FDF40", Offset = "0x6FDF40", VA = "0x6FDF40")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x6FDE04", Offset = "0x6FDE04", VA = "0x6FDE04")]
		set
		{
		}
	}

	public static bool GlobalFlipY
	{
		[Address(RVA = "0x6FE0D0", Offset = "0x6FE0D0", VA = "0x6FE0D0")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x6FDFB8", Offset = "0x6FDFB8", VA = "0x6FDFB8")]
		set
		{
		}
	}

	public bool ShadowsOn
	{
		[Address(RVA = "0x6FE154", Offset = "0x6FE154", VA = "0x6FE154")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x6FE148", Offset = "0x6FE148", VA = "0x6FE148")]
		set
		{
		}
	}

	[Address(RVA = "0x6FE15C", Offset = "0x6FE15C", VA = "0x6FE15C")]
	public static GlobalProjectorManager Get()
	{
		return null;
	}

	[Address(RVA = "0x6FE2B0", Offset = "0x6FE2B0", VA = "0x6FE2B0")]
	private void Initialize()
	{
	}

	[Address(RVA = "0x6FE83C", Offset = "0x6FE83C", VA = "0x6FE83C")]
	private void CreateLightCamera()
	{
	}

	[Address(RVA = "0x6FEC8C", Offset = "0x6FEC8C", VA = "0x6FEC8C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x6FEC90", Offset = "0x6FEC90", VA = "0x6FEC90")]
	private void Start()
	{
	}

	[Address(RVA = "0x6FEC94", Offset = "0x6FEC94", VA = "0x6FEC94")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x6FECFC", Offset = "0x6FECFC", VA = "0x6FECFC")]
	public static bool Exists()
	{
		return default(bool);
	}

	[Address(RVA = "0x6FED94", Offset = "0x6FED94", VA = "0x6FED94")]
	public Texture GetShadowTexture()
	{
		return null;
	}

	[Address(RVA = "0x6FEDC4", Offset = "0x6FEDC4", VA = "0x6FEDC4")]
	public void AddProjector(ShadowProjector projector)
	{
	}

	[Address(RVA = "0x6FF0D8", Offset = "0x6FF0D8", VA = "0x6FF0D8")]
	public void RemoveProjector(ShadowProjector projector)
	{
	}

	[Address(RVA = "0x6FF270", Offset = "0x6FF270", VA = "0x6FF270")]
	public void AddReceiver(ShadowReceiver receiver)
	{
	}

	[Address(RVA = "0x6FF328", Offset = "0x6FF328", VA = "0x6FF328")]
	private void CheckForTerrain(ShadowReceiver receiver)
	{
	}

	[Address(RVA = "0x6FF484", Offset = "0x6FF484", VA = "0x6FF484")]
	public void AddShadowTrigger(ShadowTrigger trigger)
	{
	}

	[Address(RVA = "0x6FF52C", Offset = "0x6FF52C", VA = "0x6FF52C")]
	public void RemoveShadowTrigger(ShadowTrigger trigger)
	{
	}

	[Address(RVA = "0x6FF5F8", Offset = "0x6FF5F8", VA = "0x6FF5F8")]
	public void RemoveReceiver(ShadowReceiver receiver)
	{
	}

	[Address(RVA = "0x6FD84C", Offset = "0x6FD84C", VA = "0x6FD84C")]
	private void OnProjectionDirChange()
	{
	}

	[Address(RVA = "0x6FDB18", Offset = "0x6FDB18", VA = "0x6FDB18")]
	private void OnShadowResolutionChange()
	{
	}

	[Address(RVA = "0x6FEA90", Offset = "0x6FEA90", VA = "0x6FEA90")]
	private void CreateProjectorEyeTexture()
	{
	}

	[Address(RVA = "0x6FEA9C", Offset = "0x6FEA9C", VA = "0x6FEA9C")]
	private void CreateProjectorEyeTexture(bool shadow, bool light)
	{
	}

	[Address(RVA = "0x6FDF1C", Offset = "0x6FDF1C", VA = "0x6FDF1C")]
	private void ForceShadowDummyRebuild()
	{
	}

	[Address(RVA = "0x6FF6A4", Offset = "0x6FF6A4", VA = "0x6FF6A4")]
	private void ForceShadowDummyRebuild(List<ShadowProjector> projectors)
	{
	}

	[Address(RVA = "0x6FF76C", Offset = "0x6FF76C", VA = "0x6FF76C")]
	private void CalculateShadowBounds(Camera targetCamera, List<ShadowProjector> projectors)
	{
	}

	[Address(RVA = "0x6FFE20", Offset = "0x6FFE20", VA = "0x6FFE20")]
	private void CheckMainCameraPlains()
	{
	}

	[Address(RVA = "0x6FFE88", Offset = "0x6FFE88", VA = "0x6FFE88")]
	private bool IsProjectionVolumeVisible(Plane[] planes, ShadowProjector projector)
	{
		return default(bool);
	}

	[Address(RVA = "0x700180", Offset = "0x700180", VA = "0x700180")]
	public void SetTriggerTexPixel(Vector3 point, bool checkShadow, bool checkLight, int triggerID)
	{
	}

	[Address(RVA = "0x7001A4", Offset = "0x7001A4", VA = "0x7001A4")]
	private void SetTriggerTexPixel(Camera camera, ProjectorEyeTexture tex, Vector3 point, int triggerID)
	{
	}

	[Address(RVA = "0x7004D8", Offset = "0x7004D8", VA = "0x7004D8")]
	private void Update()
	{
	}

	[Address(RVA = "0x7005F4", Offset = "0x7005F4", VA = "0x7005F4")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x70065C", Offset = "0x70065C", VA = "0x70065C")]
	private void RenderProjectors(Camera targetCamera, List<ShadowProjector> projectors, Material material)
	{
	}

	[Address(RVA = "0x700C44", Offset = "0x700C44", VA = "0x700C44")]
	private void Render(Material material)
	{
	}

	[Address(RVA = "0x70143C", Offset = "0x70143C", VA = "0x70143C")]
	private void PreventDynamicBatchUnity5()
	{
	}

	[Address(RVA = "0x7014FC", Offset = "0x7014FC", VA = "0x7014FC")]
	private void CheckTriggers(bool shadow)
	{
	}

	[Address(RVA = "0x7010F8", Offset = "0x7010F8", VA = "0x7010F8")]
	private void ApplyTerrainTextureMatrix(ShadowReceiver receiver)
	{
	}

	[Address(RVA = "0x7018E4", Offset = "0x7018E4", VA = "0x7018E4")]
	private void OnPreCull()
	{
	}

	[Address(RVA = "0x701A00", Offset = "0x701A00", VA = "0x701A00")]
	private void OnPostRender()
	{
	}

	[Address(RVA = "0x701AF4", Offset = "0x701AF4", VA = "0x701AF4")]
	private void OnLightPreCull()
	{
	}

	[Address(RVA = "0x701C10", Offset = "0x701C10", VA = "0x701C10")]
	private void OnLightPostRender()
	{
	}

	[Address(RVA = "0x701D04", Offset = "0x701D04", VA = "0x701D04")]
	public GlobalProjectorManager()
	{
	}
}
[Serializable]
public class ProjectorEyeTexture
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private RenderTexture _RenderTexture;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Texture2D _RenderTextureDummy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera _Camera;

	[Address(RVA = "0x155A844", Offset = "0x155A844", VA = "0x155A844")]
	public ProjectorEyeTexture(Camera camera, int size)
	{
	}

	[Address(RVA = "0x155A9CC", Offset = "0x155A9CC", VA = "0x155A9CC")]
	public void CleanUp()
	{
	}

	[Address(RVA = "0x155AAA0", Offset = "0x155AAA0", VA = "0x155AAA0")]
	public Texture GetTexture()
	{
		return null;
	}

	[Address(RVA = "0x155AAA8", Offset = "0x155AAA8", VA = "0x155AAA8")]
	public RenderTexture GetRenderTexture()
	{
		return null;
	}

	[Address(RVA = "0x155AAB0", Offset = "0x155AAB0", VA = "0x155AAB0")]
	public void GrabScreenIfNeeded()
	{
	}

	[Address(RVA = "0x155A9C4", Offset = "0x155A9C4", VA = "0x155A9C4")]
	public bool RenderTextureSupported()
	{
		return default(bool);
	}
}
public class ProjectorShadowDummy : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 _ShadowLocalOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Quaternion _RotationAngleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _freezeXRot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool _freezeYRot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool _freezeZRot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion _AngleOffset;

	[Address(RVA = "0x155AAB4", Offset = "0x155AAB4", VA = "0x155AAB4")]
	public void OnPreRenderShadowDummy(Camera camera)
	{
	}

	[Address(RVA = "0x155B18C", Offset = "0x155B18C", VA = "0x155B18C")]
	public ProjectorShadowDummy()
	{
	}
}
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x655524", Offset = "0x655524")]
public class ShadowProjector : MonoBehaviour
{
	private static class MeshGen
	{
		[Address(RVA = "0x15698C4", Offset = "0x15698C4", VA = "0x15698C4")]
		public static Mesh CreatePlane(Vector3 up, Vector3 right, Rect uvRect, Color color, ShadowProjector parent)
		{
			return null;
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Vector3 _GlobalProjectionDir;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	protected int _GlobalShadowResolution;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected GlobalProjectorManager.ProjectionCulling _GlobalShadowCullingMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool _EnableCutOff;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected float _GlobalCutOffDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected bool _GlobalFlipX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SerializeField]
	protected bool _GlobalFlipY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float _ShadowSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private Color _ShadowColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float _ShadowOpacity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material _Material;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool _IsLight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private Vector3 _ShadowLocalOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Quaternion _RotationAngleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private bool _FreezeXRot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	[SerializeField]
	private bool _FreezeYRot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	[SerializeField]
	private bool _FreezeZRot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private Rect _UVRect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	private bool _AutoSizeOpacity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float _AutoSOCutOffDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private float _AutoSORayOriginOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private float _AutoSOMaxScaleMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private int _AutoSORaycastLayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private MeshRenderer _Renderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private MeshFilter _MeshFilter;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Mesh _ShadowDummyMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private ProjectorShadowDummy _ShadowDummy;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float _initialSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float _initialOpacity;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool _discarded;

	public Vector3 GlobalProjectionDir
	{
		[Address(RVA = "0x15686CC", Offset = "0x15686CC", VA = "0x15686CC")]
		get
		{
			return default(Vector3);
		}
		[Address(RVA = "0x15685F8", Offset = "0x15685F8", VA = "0x15685F8")]
		set
		{
		}
	}

	public int GlobalShadowResolution
	{
		[Address(RVA = "0x1568788", Offset = "0x1568788", VA = "0x1568788")]
		get
		{
			return default(int);
		}
		[Address(RVA = "0x15686D8", Offset = "0x15686D8", VA = "0x15686D8")]
		set
		{
		}
	}

	public GlobalProjectorManager.ProjectionCulling GlobalShadowCullingMode
	{
		[Address(RVA = "0x1568840", Offset = "0x1568840", VA = "0x1568840")]
		get
		{
			return default(GlobalProjectorManager.ProjectionCulling);
		}
		[Address(RVA = "0x1568790", Offset = "0x1568790", VA = "0x1568790")]
		set
		{
		}
	}

	public bool EnableCutOff
	{
		[Address(RVA = "0x1568868", Offset = "0x1568868", VA = "0x1568868")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x1568848", Offset = "0x1568848", VA = "0x1568848")]
		set
		{
		}
	}

	public float GlobalCutOffDistance
	{
		[Address(RVA = "0x1568920", Offset = "0x1568920", VA = "0x1568920")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x1568870", Offset = "0x1568870", VA = "0x1568870")]
		set
		{
		}
	}

	public bool GlobalFlipX
	{
		[Address(RVA = "0x15689E0", Offset = "0x15689E0", VA = "0x15689E0")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x1568928", Offset = "0x1568928", VA = "0x1568928")]
		set
		{
		}
	}

	public bool GlobalFlipY
	{
		[Address(RVA = "0x1568AA0", Offset = "0x1568AA0", VA = "0x1568AA0")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x15689E8", Offset = "0x15689E8", VA = "0x15689E8")]
		set
		{
		}
	}

	public float ShadowSize
	{
		[Address(RVA = "0x1568BD4", Offset = "0x1568BD4", VA = "0x1568BD4")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x1568AA8", Offset = "0x1568AA8", VA = "0x1568AA8")]
		set
		{
		}
	}

	public Color ShadowColor
	{
		[Address(RVA = "0x1568E18", Offset = "0x1568E18", VA = "0x1568E18")]
		get
		{
			return default(Color);
		}
		[Address(RVA = "0x1568BDC", Offset = "0x1568BDC", VA = "0x1568BDC")]
		set
		{
		}
	}

	public float ShadowOpacity
	{
		[Address(RVA = "0x1568ECC", Offset = "0x1568ECC", VA = "0x1568ECC")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x1568E24", Offset = "0x1568E24", VA = "0x1568E24")]
		set
		{
		}
	}

	public bool IsLight
	{
		[Address(RVA = "0x1568EE0", Offset = "0x1568EE0", VA = "0x1568EE0")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x1568ED4", Offset = "0x1568ED4", VA = "0x1568ED4")]
		set
		{
		}
	}

	public Vector3 ShadowLocalOffset
	{
		[Address(RVA = "0x1568FAC", Offset = "0x1568FAC", VA = "0x1568FAC")]
		get
		{
			return default(Vector3);
		}
		[Address(RVA = "0x1568EE8", Offset = "0x1568EE8", VA = "0x1568EE8")]
		set
		{
		}
	}

	public Quaternion RotationAngleOffset
	{
		[Address(RVA = "0x1569088", Offset = "0x1569088", VA = "0x1569088")]
		get
		{
			return default(Quaternion);
		}
		[Address(RVA = "0x1568FB8", Offset = "0x1568FB8", VA = "0x1568FB8")]
		set
		{
		}
	}

	public bool FreezeXRot
	{
		[Address(RVA = "0x1569138", Offset = "0x1569138", VA = "0x1569138")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x1569094", Offset = "0x1569094", VA = "0x1569094")]
		set
		{
		}
	}

	public bool FreezeYRot
	{
		[Address(RVA = "0x15691E4", Offset = "0x15691E4", VA = "0x15691E4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x1569140", Offset = "0x1569140", VA = "0x1569140")]
		set
		{
		}
	}

	public bool FreezeZRot
	{
		[Address(RVA = "0x1569290", Offset = "0x1569290", VA = "0x1569290")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x15691EC", Offset = "0x15691EC", VA = "0x15691EC")]
		set
		{
		}
	}

	public Rect UVRect
	{
		[Address(RVA = "0x1569354", Offset = "0x1569354", VA = "0x1569354")]
		get
		{
			return default(Rect);
		}
		[Address(RVA = "0x1569298", Offset = "0x1569298", VA = "0x1569298")]
		set
		{
		}
	}

	public bool AutoSizeOpacity
	{
		[Address(RVA = "0x156936C", Offset = "0x156936C", VA = "0x156936C")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x1569360", Offset = "0x1569360", VA = "0x1569360")]
		set
		{
		}
	}

	public float AutoSOCutOffDistance
	{
		[Address(RVA = "0x156937C", Offset = "0x156937C", VA = "0x156937C")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x1569374", Offset = "0x1569374", VA = "0x1569374")]
		set
		{
		}
	}

	public float AutoSORayOriginOffset
	{
		[Address(RVA = "0x156938C", Offset = "0x156938C", VA = "0x156938C")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x1569384", Offset = "0x1569384", VA = "0x1569384")]
		set
		{
		}
	}

	public float AutoSOMaxScaleMultiplier
	{
		[Address(RVA = "0x156939C", Offset = "0x156939C", VA = "0x156939C")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x1569394", Offset = "0x1569394", VA = "0x1569394")]
		set
		{
		}
	}

	public int AutoSORaycastLayer
	{
		[Address(RVA = "0x15693AC", Offset = "0x15693AC", VA = "0x15693AC")]
		get
		{
			return default(int);
		}
		[Address(RVA = "0x15693A4", Offset = "0x15693A4", VA = "0x15693A4")]
		set
		{
		}
	}

	[Address(RVA = "0x15693B4", Offset = "0x15693B4", VA = "0x15693B4")]
	private void Awake()
	{
	}

	[Address(RVA = "0x156A270", Offset = "0x156A270", VA = "0x156A270")]
	private void Start()
	{
	}

	[Address(RVA = "0x156A310", Offset = "0x156A310", VA = "0x156A310")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x156A3B0", Offset = "0x156A3B0", VA = "0x156A3B0")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x156A4B8", Offset = "0x156A4B8", VA = "0x156A4B8")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x156A568", Offset = "0x156A568", VA = "0x156A568")]
	public Bounds GetBounds()
	{
		return default(Bounds);
	}

	[Address(RVA = "0x156A5A0", Offset = "0x156A5A0", VA = "0x156A5A0")]
	public bool IsVisible()
	{
		return default(bool);
	}

	[Address(RVA = "0x156A5D0", Offset = "0x156A5D0", VA = "0x156A5D0")]
	public void SetVisible(bool visible)
	{
	}

	[Address(RVA = "0x156A608", Offset = "0x156A608", VA = "0x156A608")]
	public void Discard(bool discard)
	{
	}

	[Address(RVA = "0x156A61C", Offset = "0x156A61C", VA = "0x156A61C")]
	public bool IsDiscarded()
	{
		return default(bool);
	}

	[Address(RVA = "0x156A624", Offset = "0x156A624", VA = "0x156A624")]
	private void Update()
	{
	}

	[Address(RVA = "0x156A7B0", Offset = "0x156A7B0", VA = "0x156A7B0")]
	public void OnPreRenderShadowProjector(Camera camera)
	{
	}

	[Address(RVA = "0x156A85C", Offset = "0x156A85C", VA = "0x156A85C")]
	public Matrix4x4 ShadowDummyLocalToWorldMatrix()
	{
		return default(Matrix4x4);
	}

	[Address(RVA = "0x156A8AC", Offset = "0x156A8AC", VA = "0x156A8AC")]
	public float GetShadowWorldSize()
	{
		return default(float);
	}

	[Address(RVA = "0x156AAA4", Offset = "0x156AAA4", VA = "0x156AAA4")]
	public Vector3 GetShadowPos()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x1568B50", Offset = "0x1568B50", VA = "0x1568B50")]
	private void OnShadowSizeChanged()
	{
	}

	[Address(RVA = "0x1569350", Offset = "0x1569350", VA = "0x1569350")]
	public void OnUVRectChanged()
	{
	}

	[Address(RVA = "0x1568CB8", Offset = "0x1568CB8", VA = "0x1568CB8")]
	public void OnShadowColorChanged()
	{
	}

	[Address(RVA = "0x156AAEC", Offset = "0x156AAEC", VA = "0x156AAEC")]
	private void RebuildMesh()
	{
	}

	[Address(RVA = "0x156ABEC", Offset = "0x156ABEC", VA = "0x156ABEC")]
	public ShadowProjector()
	{
	}
}
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65555C", Offset = "0x65555C")]
public class ShadowReceiver : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MeshFilter _meshFilter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Mesh _mesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Mesh _meshCopy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer _meshRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Terrain _terrain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material _terrainMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _isTerrain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _standardTerrain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int _id;

	[Address(RVA = "0x156ACF0", Offset = "0x156ACF0", VA = "0x156ACF0")]
	private void Awake()
	{
	}

	[Address(RVA = "0x156AFB4", Offset = "0x156AFB4", VA = "0x156AFB4")]
	private void Start()
	{
	}

	[Address(RVA = "0x156B214", Offset = "0x156B214", VA = "0x156B214")]
	public Mesh GetMesh()
	{
		return null;
	}

	[Address(RVA = "0x156B2A4", Offset = "0x156B2A4", VA = "0x156B2A4")]
	public bool IsTerrain()
	{
		return default(bool);
	}

	[Address(RVA = "0x156B358", Offset = "0x156B358", VA = "0x156B358")]
	public bool IsStandardTerrain()
	{
		return default(bool);
	}

	[Address(RVA = "0x156B360", Offset = "0x156B360", VA = "0x156B360")]
	public Terrain GetTerrain()
	{
		return null;
	}

	[Address(RVA = "0x156B368", Offset = "0x156B368", VA = "0x156B368")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x156B36C", Offset = "0x156B36C", VA = "0x156B36C")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x156B4C0", Offset = "0x156B4C0", VA = "0x156B4C0")]
	private void OnBecameVisible()
	{
	}

	[Address(RVA = "0x156B4C4", Offset = "0x156B4C4", VA = "0x156B4C4")]
	private void OnBecameInvisible()
	{
	}

	[Address(RVA = "0x156B4C8", Offset = "0x156B4C8", VA = "0x156B4C8")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x156B0E8", Offset = "0x156B0E8", VA = "0x156B0E8")]
	private void AddReceiver()
	{
	}

	[Address(RVA = "0x156B370", Offset = "0x156B370", VA = "0x156B370")]
	private void RemoveReceiver()
	{
	}

	[Address(RVA = "0x156B4CC", Offset = "0x156B4CC", VA = "0x156B4CC")]
	public ShadowReceiver()
	{
	}
}
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x655594", Offset = "0x655594")]
public class ShadowTrigger : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnShadowEnter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action OnShadowStay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action OnShadowExit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _InShadow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	private bool _DetectShadow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[SerializeField]
	private bool _DetectLight;

	public bool DetectShadow
	{
		[Address(RVA = "0x156E2E4", Offset = "0x156E2E4", VA = "0x156E2E4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x156E2D8", Offset = "0x156E2D8", VA = "0x156E2D8")]
		set
		{
		}
	}

	public bool DetectLight
	{
		[Address(RVA = "0x156E2F8", Offset = "0x156E2F8", VA = "0x156E2F8")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x156E2EC", Offset = "0x156E2EC", VA = "0x156E2EC")]
		set
		{
		}
	}

	[Address(RVA = "0x156E300", Offset = "0x156E300", VA = "0x156E300")]
	private void Awake()
	{
	}

	[Address(RVA = "0x156E304", Offset = "0x156E304", VA = "0x156E304")]
	private void Start()
	{
	}

	[Address(RVA = "0x156E3B8", Offset = "0x156E3B8", VA = "0x156E3B8")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x156E3BC", Offset = "0x156E3BC", VA = "0x156E3BC")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x156E470", Offset = "0x156E470", VA = "0x156E470")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x156E308", Offset = "0x156E308", VA = "0x156E308")]
	private void AddShadowTrigger()
	{
	}

	[Address(RVA = "0x156E3C0", Offset = "0x156E3C0", VA = "0x156E3C0")]
	private void RemoveShadowTrigger()
	{
	}

	[Address(RVA = "0x156E474", Offset = "0x156E474", VA = "0x156E474")]
	public void OnTriggerCheckDone(bool pointInShadow)
	{
	}

	[Address(RVA = "0x156E4BC", Offset = "0x156E4BC", VA = "0x156E4BC")]
	public ShadowTrigger()
	{
	}
}
public class DissolveSphere : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material mat;

	[Address(RVA = "0x7BF1F4", Offset = "0x7BF1F4", VA = "0x7BF1F4")]
	private void Start()
	{
	}

	[Address(RVA = "0x7BF264", Offset = "0x7BF264", VA = "0x7BF264")]
	private void Update()
	{
	}

	[Address(RVA = "0x7BF314", Offset = "0x7BF314", VA = "0x7BF314")]
	public DissolveSphere()
	{
	}
}
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x6555CC", Offset = "0x6555CC")]
public class FastList<T>
{
	public delegate int CompareFunc(T left, T right);

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659D38", Offset = "0x659D38")]
	private sealed class <GetEnumerator>d__25 : IEnumerator<T>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastList<T> <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <i>5__2;

		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[DebuggerHidden]
		public <GetEnumerator>d__25(int <>1__state)
		{
		}

		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		private bool MoveNext()
		{
			return default(bool);
		}

		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T[] array;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int size;

	public int Count
	{
		get
		{
			return default(int);
		}
		set
		{
		}
	}

	public T Item
	{
		get
		{
			return (T)null;
		}
		set
		{
		}
	}

	public FastList()
	{
	}

	public FastList(int size)
	{
	}

	public void Add(T item)
	{
	}

	public void AddUnique(T item)
	{
	}

	public void AddRange(IEnumerable<T> items)
	{
	}

	public void Insert(int index, T item)
	{
	}

	public bool Remove(T item)
	{
		return default(bool);
	}

	public void RemoveAt(int index)
	{
	}

	public bool RemoveFast(T item)
	{
		return default(bool);
	}

	public void RemoveAtFast(int index)
	{
	}

	public bool Contains(T item)
	{
		return default(bool);
	}

	public int IndexOf(T item)
	{
		return default(int);
	}

	public T Pop()
	{
		return (T)null;
	}

	public T[] ToArray()
	{
		return null;
	}

	public void Sort(CompareFunc comparer)
	{
	}

	public void InsertionSort(CompareFunc comparer)
	{
	}

	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67445C", Offset = "0x67445C")]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	public T Find(Predicate<T> match)
	{
		return (T)null;
	}

	private void Allocate()
	{
	}

	private void Trim()
	{
	}

	public void Clear()
	{
	}

	public void Release()
	{
	}
}
public class InspectorNoteAttribute : PropertyAttribute
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string header;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public readonly string message;

	[Address(RVA = "0x709BD8", Offset = "0x709BD8", VA = "0x709BD8")]
	public InspectorNoteAttribute(string header, string message = "")
	{
	}
}
public class InspectorCommentAttribute : PropertyAttribute
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string message;

	[Address(RVA = "0x709BAC", Offset = "0x709BAC", VA = "0x709BAC")]
	public InspectorCommentAttribute(string message = "")
	{
	}
}
public class OvrAvatarTestDriver : OvrAvatarDriver
{
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 headPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Quaternion headRot;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float voiceAmplitude;

	[Address(RVA = "0x753718", Offset = "0x753718", VA = "0x753718")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Address(RVA = "0x753844", Offset = "0x753844", VA = "0x753844")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Address(RVA = "0x753BA0", Offset = "0x753BA0", VA = "0x753BA0")]
	private void CalculateCurrentPose()
	{
	}

	[Address(RVA = "0x753DFC", Offset = "0x753DFC", VA = "0x753DFC", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Address(RVA = "0x753E28", Offset = "0x753E28", VA = "0x753E28")]
	public OvrAvatarTestDriver()
	{
	}
}
public class PoseEditHelper : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform poseRoot;

	[Address(RVA = "0x1559420", Offset = "0x1559420", VA = "0x1559420")]
	private void OnDrawGizmos()
	{
	}

	[Address(RVA = "0x15594AC", Offset = "0x15594AC", VA = "0x15594AC")]
	private void DrawJoints(Transform joint)
	{
	}

	[Address(RVA = "0x1559670", Offset = "0x1559670", VA = "0x1559670")]
	public PoseEditHelper()
	{
	}
}
public class GazeTargetSpawner : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GazeTargetPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfDummyTargets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RadiusMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isVisible;

	public bool IsVisible
	{
		[Address(RVA = "0x6FCD88", Offset = "0x6FCD88", VA = "0x6FCD88")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x6FCD90", Offset = "0x6FCD90", VA = "0x6FCD90")]
		set
		{
		}
	}

	[Address(RVA = "0x6FCEEC", Offset = "0x6FCEEC", VA = "0x6FCEEC")]
	private void Start()
	{
	}

	[Address(RVA = "0x6FD1B4", Offset = "0x6FD1B4", VA = "0x6FD1B4")]
	private void OnValidate()
	{
	}

	[Address(RVA = "0x6FD1BC", Offset = "0x6FD1BC", VA = "0x6FD1BC")]
	public GazeTargetSpawner()
	{
	}
}
public class RemoteLoopbackManager : MonoBehaviour
{
	private class PacketLatencyPair
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] PacketData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FakeLatency;

		[Address(RVA = "0x155C888", Offset = "0x155C888", VA = "0x155C888")]
		public PacketLatencyPair()
		{
		}
	}

	[Serializable]
	public class SimulatedLatencySettings
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673EF4", Offset = "0x673EF4")]
		public float FakeLatencyMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673F0C", Offset = "0x673F0C")]
		public float FakeLatencyMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673F24", Offset = "0x673F24")]
		public float LatencyWeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673F3C", Offset = "0x673F3C")]
		public int MaxSamples;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float AverageWindow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float LatencySum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LinkedList<float> LatencyValues;

		[Address(RVA = "0x155C890", Offset = "0x155C890", VA = "0x155C890")]
		public float NextValue()
		{
			return default(float);
		}

		[Address(RVA = "0x155CA9C", Offset = "0x155CA9C", VA = "0x155CA9C")]
		public SimulatedLatencySettings()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatar LocalAvatar;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar LoopbackAvatar;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimulatedLatencySettings LatencySettings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int PacketSequence;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LinkedList<PacketLatencyPair> packetQueue;

	[Address(RVA = "0x155BD68", Offset = "0x155BD68", VA = "0x155BD68")]
	private void Start()
	{
	}

	[Address(RVA = "0x155BF48", Offset = "0x155BF48", VA = "0x155BF48")]
	private void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Address(RVA = "0x155C2FC", Offset = "0x155C2FC", VA = "0x155C2FC")]
	private void Update()
	{
	}

	[Address(RVA = "0x155C244", Offset = "0x155C244", VA = "0x155C244")]
	private void SendPacketData(byte[] data)
	{
	}

	[Address(RVA = "0x155C5E0", Offset = "0x155C5E0", VA = "0x155C5E0")]
	private void ReceivePacketData(byte[] data)
	{
	}

	[Address(RVA = "0x155CA10", Offset = "0x155CA10", VA = "0x155CA10")]
	public RemoteLoopbackManager()
	{
	}
}
public class P2PManager
{
	private enum MessageType : byte
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Update = 1
	}

	[Address(RVA = "0x754410", Offset = "0x754410", VA = "0x754410")]
	public P2PManager()
	{
	}

	[Address(RVA = "0x7544D0", Offset = "0x7544D0", VA = "0x7544D0")]
	public void ConnectTo(ulong userID)
	{
	}

	[Address(RVA = "0x7545B4", Offset = "0x7545B4", VA = "0x7545B4")]
	public void Disconnect(ulong userID)
	{
	}

	[Address(RVA = "0x754638", Offset = "0x754638", VA = "0x754638")]
	private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Address(RVA = "0x75482C", Offset = "0x75482C", VA = "0x75482C")]
	private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}

	[Address(RVA = "0x754C8C", Offset = "0x754C8C", VA = "0x754C8C")]
	public void SendAvatarUpdate(ulong userID, Transform rootTransform, uint sequence, byte[] avatarPacket)
	{
	}

	[Address(RVA = "0x755148", Offset = "0x755148", VA = "0x755148")]
	public void GetRemotePackets()
	{
	}

	[Address(RVA = "0x755438", Offset = "0x755438", VA = "0x755438")]
	public void processAvatarPacket(RemotePlayer remote, ref byte[] packet, ref int offset)
	{
	}

	[Address(RVA = "0x754EF4", Offset = "0x754EF4", VA = "0x754EF4")]
	private void PackByte(byte b, byte[] buf, ref int offset)
	{
	}

	[Address(RVA = "0x755344", Offset = "0x755344", VA = "0x755344")]
	private byte ReadByte(byte[] buf, ref int offset)
	{
		return default(byte);
	}

	[Address(RVA = "0x755000", Offset = "0x755000", VA = "0x755000")]
	private void PackFloat(float f, byte[] buf, ref int offset)
	{
	}

	[Address(RVA = "0x7556E0", Offset = "0x7556E0", VA = "0x7556E0")]
	private float ReadFloat(byte[] buf, ref int offset)
	{
		return default(float);
	}

	[Address(RVA = "0x754F60", Offset = "0x754F60", VA = "0x754F60")]
	private void PackULong(ulong u, byte[] buf, ref int offset)
	{
	}

	[Address(RVA = "0x7553AC", Offset = "0x7553AC", VA = "0x7553AC")]
	private ulong ReadULong(byte[] buf, ref int offset)
	{
		return default(ulong);
	}

	[Address(RVA = "0x7550A8", Offset = "0x7550A8", VA = "0x7550A8")]
	private void PackUInt32(uint u, byte[] buf, ref int offset)
	{
	}

	[Address(RVA = "0x75576C", Offset = "0x75576C", VA = "0x75576C")]
	private uint ReadUInt32(byte[] buf, ref int offset)
	{
		return default(uint);
	}
}
public class PlayerController : SocialPlatformManager
{
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Camera spyCamera;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject cameraRig;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool showUI;

	[Address(RVA = "0x1557670", Offset = "0x1557670", VA = "0x1557670", Slot = "5")]
	public override void Awake()
	{
	}

	[Address(RVA = "0x15576B4", Offset = "0x15576B4", VA = "0x15576B4", Slot = "6")]
	public override void Start()
	{
	}

	[Address(RVA = "0x15576F4", Offset = "0x15576F4", VA = "0x15576F4", Slot = "4")]
	public override void Update()
	{
	}

	[Address(RVA = "0x155771C", Offset = "0x155771C", VA = "0x155771C")]
	private void checkInput()
	{
	}

	[Address(RVA = "0x15578D8", Offset = "0x15578D8", VA = "0x15578D8")]
	private void ToggleCamera()
	{
	}

	[Address(RVA = "0x15579C8", Offset = "0x15579C8", VA = "0x15579C8")]
	private void ToggleUI()
	{
	}

	[Address(RVA = "0x1557A40", Offset = "0x1557A40", VA = "0x1557A40")]
	public PlayerController()
	{
	}
}
public class RemotePlayer
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong remoteUserID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool stillInRoom;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PeerConnectionState p2pConnectionState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PeerConnectionState voipConnectionState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar RemoteAvatar;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 receivedRootPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 receivedRootPositionPrior;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Quaternion receivedRootRotation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Quaternion receivedRootRotationPrior;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoipAudioSourceHiLevel voipSource;

	[Address(RVA = "0x155CB24", Offset = "0x155CB24", VA = "0x155CB24")]
	public RemotePlayer()
	{
	}
}
public class RoomManager
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong roomID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong invitedRoomID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool amIServer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool startupDone;

	[Address(RVA = "0x155CFF8", Offset = "0x155CFF8", VA = "0x155CFF8")]
	public RoomManager()
	{
	}

	[Address(RVA = "0x155D0C4", Offset = "0x155D0C4", VA = "0x155D0C4")]
	private void AcceptingInviteCallback(Message<string> msg)
	{
	}

	[Address(RVA = "0x155D25C", Offset = "0x155D25C", VA = "0x155D25C")]
	public bool CheckForInvite()
	{
		return default(bool);
	}

	[Address(RVA = "0x155D370", Offset = "0x155D370", VA = "0x155D370")]
	public void CreateRoom()
	{
	}

	[Address(RVA = "0x155D428", Offset = "0x155D428", VA = "0x155D428")]
	private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
	{
	}

	[Address(RVA = "0x155D5C8", Offset = "0x155D5C8", VA = "0x155D5C8")]
	private void OnLaunchInviteWorkflowComplete(Message msg)
	{
	}

	[Address(RVA = "0x155D28C", Offset = "0x155D28C", VA = "0x155D28C")]
	public void JoinExistingRoom(ulong roomID)
	{
	}

	[Address(RVA = "0x155D658", Offset = "0x155D658", VA = "0x155D658")]
	private void JoinRoomCallback(Message<Room> msg)
	{
	}

	[Address(RVA = "0x155DFA4", Offset = "0x155DFA4", VA = "0x155DFA4")]
	private void RoomUpdateCallback(Message<Room> msg)
	{
	}

	[Address(RVA = "0x155E400", Offset = "0x155E400", VA = "0x155E400")]
	public void LeaveCurrentRoom()
	{
	}

	[Address(RVA = "0x155DA9C", Offset = "0x155DA9C", VA = "0x155DA9C")]
	private void ProcessRoomData(Message<Room> msg)
	{
	}
}
public class SocialPlatformManager : MonoBehaviour
{
	public enum State
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		INITIALIZING,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CHECKING_LAUNCH_STATE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CREATING_A_ROOM,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WAITING_IN_A_ROOM,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		JOINING_A_ROOM,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CONNECTED_IN_A_ROOM,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LEAVING_A_ROOM,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SHUTDOWN
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 START_ROTATION_ONE;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly Vector3 START_POSITION_ONE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 START_ROTATION_TWO;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly Vector3 START_POSITION_TWO;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly Vector3 START_ROTATION_THREE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly Vector3 START_POSITION_THREE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly Vector3 START_ROTATION_FOUR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static readonly Vector3 START_POSITION_FOUR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Color BLACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly Color WHITE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly Color CYAN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static readonly Color BLUE;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static readonly Color GREEN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float voiceCurrent;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private uint packetSequence;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar localAvatarPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar remoteAvatarPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject helpPanel;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MeshRenderer helpMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material riftMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material gearMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected OvrAvatar localAvatar;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected GameObject localTrackingSpace;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected GameObject localPlayerHead;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<ulong, RemotePlayer> remoteUsers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject roomSphere;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected MeshRenderer sphereMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject roomFloor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MeshRenderer floorMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected State currentState;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected static SocialPlatformManager s_instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected RoomManager roomManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected P2PManager p2pManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected VoipManager voipManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ulong myID;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected string myOculusID;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly float VOIP_SCALE;

	public static State CurrentState
	{
		[Address(RVA = "0x983F40", Offset = "0x983F40", VA = "0x983F40")]
		get
		{
			return default(State);
		}
	}

	public static ulong MyID
	{
		[Address(RVA = "0x983FB8", Offset = "0x983FB8", VA = "0x983FB8")]
		get
		{
			return default(ulong);
		}
	}

	public static string MyOculusID
	{
		[Address(RVA = "0x984094", Offset = "0x984094", VA = "0x984094")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x981BC0", Offset = "0x981BC0", VA = "0x981BC0", Slot = "4")]
	public virtual void Update()
	{
	}

	[Address(RVA = "0x9820DC", Offset = "0x9820DC", VA = "0x9820DC", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Address(RVA = "0x98289C", Offset = "0x98289C", VA = "0x98289C")]
	private void InitCallback(Message<PlatformInitialize> msg)
	{
	}

	[Address(RVA = "0x982B98", Offset = "0x982B98", VA = "0x982B98", Slot = "6")]
	public virtual void Start()
	{
	}

	[Address(RVA = "0x982B9C", Offset = "0x982B9C", VA = "0x982B9C")]
	private void IsEntitledCallback(Message msg)
	{
	}

	[Address(RVA = "0x982C9C", Offset = "0x982C9C", VA = "0x982C9C")]
	private void GetLoggedInUserCallback(Message<Oculus.Platform.Models.User> msg)
	{
	}

	[Address(RVA = "0x9835A8", Offset = "0x9835A8", VA = "0x9835A8")]
	private void GetLoggedInUserFriendsAndRoomsCallback(Message<UserAndRoomList> msg)
	{
	}

	[Address(RVA = "0x983AE0", Offset = "0x983AE0", VA = "0x983AE0")]
	public void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Address(RVA = "0x983D00", Offset = "0x983D00", VA = "0x983D00")]
	public void OnApplicationQuit()
	{
	}

	[Address(RVA = "0x983EC4", Offset = "0x983EC4", VA = "0x983EC4")]
	public void AddUser(ulong userID, ref RemotePlayer remoteUser)
	{
	}

	[Address(RVA = "0x98242C", Offset = "0x98242C", VA = "0x98242C")]
	public void LogOutputLine(string line)
	{
	}

	[Address(RVA = "0x982A0C", Offset = "0x982A0C", VA = "0x982A0C")]
	public static void TerminateWithError(Message msg)
	{
	}

	[Address(RVA = "0x9824E0", Offset = "0x9824E0", VA = "0x9824E0")]
	public static void TransitionToState(State newState)
	{
	}

	[Address(RVA = "0x9841B8", Offset = "0x9841B8", VA = "0x9841B8")]
	private static void SetSphereColorForState()
	{
	}

	[Address(RVA = "0x9843B0", Offset = "0x9843B0", VA = "0x9843B0")]
	public static void SetFloorColorForState(bool host)
	{
	}

	[Address(RVA = "0x9844E8", Offset = "0x9844E8", VA = "0x9844E8")]
	public static void MarkAllRemoteUsersAsNotInRoom()
	{
	}

	[Address(RVA = "0x984668", Offset = "0x984668", VA = "0x984668")]
	public static void MarkRemoteUserInRoom(ulong userID)
	{
	}

	[Address(RVA = "0x984750", Offset = "0x984750", VA = "0x984750")]
	public static void ForgetRemoteUsersNotInRoom()
	{
	}

	[Address(RVA = "0x982AD4", Offset = "0x982AD4", VA = "0x982AD4")]
	public static void LogOutput(string line)
	{
	}

	[Address(RVA = "0x984C94", Offset = "0x984C94", VA = "0x984C94")]
	public static bool IsUserInRoom(ulong userID)
	{
		return default(bool);
	}

	[Address(RVA = "0x984D30", Offset = "0x984D30", VA = "0x984D30")]
	public static void AddRemoteUser(ulong userID)
	{
	}

	[Address(RVA = "0x984A58", Offset = "0x984A58", VA = "0x984A58")]
	public static void RemoveRemoteUser(ulong userID)
	{
	}

	[Address(RVA = "0x984FF8", Offset = "0x984FF8", VA = "0x984FF8")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Address(RVA = "0x981B30", Offset = "0x981B30", VA = "0x981B30")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x6744C0", Offset = "0x6744C0")]
	public static void MicFilter(short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels)
	{
	}

	[Address(RVA = "0x985174", Offset = "0x985174", VA = "0x985174")]
	public static RemotePlayer GetRemoteUser(ulong userID)
	{
		return null;
	}

	[Address(RVA = "0x98524C", Offset = "0x98524C", VA = "0x98524C")]
	public SocialPlatformManager()
	{
	}
}
public class VoipManager
{
	[Address(RVA = "0x8191A8", Offset = "0x8191A8", VA = "0x8191A8")]
	public VoipManager()
	{
	}

	[Address(RVA = "0x819268", Offset = "0x819268", VA = "0x819268")]
	public void ConnectTo(ulong userID)
	{
	}

	[Address(RVA = "0x81934C", Offset = "0x81934C", VA = "0x81934C")]
	public void Disconnect(ulong userID)
	{
	}

	[Address(RVA = "0x8193D0", Offset = "0x8193D0", VA = "0x8193D0")]
	private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Address(RVA = "0x8195C4", Offset = "0x8195C4", VA = "0x8195C4")]
	private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}
}
public class GazeTarget : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Address(RVA = "0x6FCA00", Offset = "0x6FCA00", VA = "0x6FCA00")]
	static GazeTarget()
	{
	}

	[Address(RVA = "0x6FCA70", Offset = "0x6FCA70", VA = "0x6FCA70")]
	private void Start()
	{
	}

	[Address(RVA = "0x6FCBF4", Offset = "0x6FCBF4", VA = "0x6FCBF4")]
	private void Update()
	{
	}

	[Address(RVA = "0x6FCC6C", Offset = "0x6FCC6C", VA = "0x6FCC6C")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x6FCAB4", Offset = "0x6FCAB4", VA = "0x6FCAB4")]
	private void UpdateGazeTarget()
	{
	}

	[Address(RVA = "0x6FCD20", Offset = "0x6FCD20", VA = "0x6FCD20")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Address(RVA = "0x6FCD80", Offset = "0x6FCD80", VA = "0x6FCD80")]
	public GazeTarget()
	{
	}
}
[Serializable]
public class AvatarLayer
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Address(RVA = "0x8AA094", Offset = "0x8AA094", VA = "0x8AA094")]
	public AvatarLayer()
	{
	}
}
[Serializable]
public class PacketRecordSettings
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Address(RVA = "0x743530", Offset = "0x743530", VA = "0x743530")]
	public PacketRecordSettings()
	{
	}
}
public class OvrAvatar : MonoBehaviour
{
	public class PacketEventArgs : EventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Address(RVA = "0x7413F8", Offset = "0x7413F8", VA = "0x7413F8")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	public enum HandType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Right,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Left,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Max
	}

	public enum HandJoint
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		HandBase,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IndexBase,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IndexTip,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ThumbBase,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ThumbTip,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Max
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659D48", Offset = "0x659D48")]
	private sealed class <WaitForMouthAudioSource>d__135 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7437A8", Offset = "0x7437A8", VA = "0x7437A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x743818", Offset = "0x743818", VA = "0x743818", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7430A0", Offset = "0x7430A0", VA = "0x7430A0")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__135(int <>1__state)
		{
		}

		[Address(RVA = "0x743544", Offset = "0x743544", VA = "0x743544", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x743548", Offset = "0x743548", VA = "0x743548", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7437B0", Offset = "0x7437B0", VA = "0x7437B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatarMaterialManager DefaultBodyMaterialManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatarMaterialManager DefaultHandMaterialManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	internal OvrAvatarBase Base;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	internal OvrAvatarTouchController ControllerLeft;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	internal OvrAvatarTouchController ControllerRight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	internal OvrAvatarBody Body;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	internal OvrAvatarHand HandLeft;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	internal OvrAvatarHand HandRight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65D15C", Offset = "0x65D15C")]
	public string oculusUserID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	internal ulong oculusUserIDInternal;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65D194", Offset = "0x65D194")]
	public bool EnableBody;

	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool EnableHands;

	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool EnableBase;

	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	public bool EnableExpressive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65D1CC", Offset = "0x65D1CC")]
	public bool RecordPackets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	public bool UseSDKPackets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public PacketRecordSettings PacketSettings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65D204", Offset = "0x65D204")]
	public bool StartWithControllers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AvatarLayer FirstPersonLayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AvatarLayer ThirdPersonLayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool ShowFirstPerson;

	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool ShowThirdPerson;

	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	public bool CanOwnMicrophone;

	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	internal ovrAvatarCapabilities Capabilities;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65D23C", Offset = "0x65D23C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D23C", Offset = "0x65D23C")]
	public bool UseTransparentRenderQueue;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Monochrome_SurfaceShader;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Shader EyeLens;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 MOUTH_HEAD_OFFSET;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private OVRLipSyncMicInput micInput;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private OVRLipSyncContext lipsyncContext;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private OVRLipSync.Frame currentFrame;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float[] visemes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private ONSPAudioSource spatializedSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int renderPartCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private bool showLeftController;

	[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
	private bool showRightController;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private List<float[]> voiceUpdates;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private bool CombineMeshes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
	private bool ForceMobileTextureFormat;

	[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
	private bool WaitingForCombinedMesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public IntPtr sdkAvatar;

	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private HashSet<ulong> assetLoadingIds;

	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Dictionary<string, OvrAvatarComponent> trackedComponents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private bool assetsFinishedLoading;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static bool doneExpressiveGlobalInit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65D29C", Offset = "0x65D29C")]
	public GameObject MouthAnchor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Transform LeftHandCustomPose;

	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public Transform RightHandCustomPose;

	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private Transform cachedLeftHandCustomPose;

	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private Transform[] cachedCustomLeftHandJoints;

	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Transform cachedRightHandCustomPose;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private Transform[] cachedCustomRightHandJoints;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Vector4 clothingAlphaOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private ulong clothingAlphaTexture;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string[,] HandJoints;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Vector3 MOUTH_POSITION_OFFSET;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static string VOICE_PROPERTY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string MOUTH_POSITION_PROPERTY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_SCALE_PROPERTY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static float MOUTH_SCALE_GLOBAL;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private static float MOUTH_MAX_GLOBAL;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static string NECK_JONT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public float VoiceAmplitude;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	public bool EnableMouthVertexAnimation;

	[Address(RVA = "0x73A52C", Offset = "0x73A52C", VA = "0x73A52C")]
	static OvrAvatar()
	{
	}

	[Address(RVA = "0x73AA0C", Offset = "0x73AA0C", VA = "0x73AA0C")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x73AA74", Offset = "0x73AA74", VA = "0x73AA74")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Address(RVA = "0x73AAF4", Offset = "0x73AAF4", VA = "0x73AAF4")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Address(RVA = "0x73ABE8", Offset = "0x73ABE8", VA = "0x73ABE8")]
	private void AddAvatarComponent(GameObject componentObject, ovrAvatarComponent component)
	{
	}

	[Address(RVA = "0x73B1F8", Offset = "0x73B1F8", VA = "0x73B1F8")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Address(RVA = "0x73B468", Offset = "0x73B468", VA = "0x73B468")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Address(RVA = "0x73B6D8", Offset = "0x73B6D8", VA = "0x73B6D8")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, OvrAvatarMaterialManager materialManager, bool isBodyPartZero)
	{
		return null;
	}

	[Address(RVA = "0x73C34C", Offset = "0x73C34C", VA = "0x73C34C")]
	private OvrAvatarProjectorRenderComponent AddProjectorRenderComponent(GameObject gameObject, ovrAvatarRenderPart_ProjectorRender projectorRender)
	{
		return null;
	}

	[Address(RVA = "0x73C700", Offset = "0x73C700", VA = "0x73C700")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Address(RVA = "0x73C8BC", Offset = "0x73C8BC", VA = "0x73C8BC")]
	private void UpdateAvatarComponent(ovrAvatarComponent component)
	{
	}

	[Address(RVA = "0x73D088", Offset = "0x73D088", VA = "0x73D088")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Address(RVA = "0x73D10C", Offset = "0x73D10C", VA = "0x73D10C")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Address(RVA = "0x73D1F4", Offset = "0x73D1F4", VA = "0x73D1F4")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(Vector3 position, Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Address(RVA = "0x73D320", Offset = "0x73D320", VA = "0x73D320")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Address(RVA = "0x73D380", Offset = "0x73D380", VA = "0x73D380")]
	private void BuildRenderComponents()
	{
	}

	[Address(RVA = "0x73D938", Offset = "0x73D938", VA = "0x73D938")]
	private void UpdateSDKAvatarUnityState()
	{
	}

	[Address(RVA = "0x73DF6C", Offset = "0x73DF6C", VA = "0x73DF6C")]
	private void UpdateCustomPoses()
	{
	}

	[Address(RVA = "0x73F258", Offset = "0x73F258", VA = "0x73F258")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Address(RVA = "0x73F3FC", Offset = "0x73F3FC", VA = "0x73F3FC")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Address(RVA = "0x73F710", Offset = "0x73F710", VA = "0x73F710")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Address(RVA = "0x73F804", Offset = "0x73F804", VA = "0x73F804")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Address(RVA = "0x73FED4", Offset = "0x73FED4", VA = "0x73FED4")]
	private void Start()
	{
	}

	[Address(RVA = "0x7402C0", Offset = "0x7402C0", VA = "0x7402C0")]
	private void Update()
	{
	}

	[Address(RVA = "0x740730", Offset = "0x740730", VA = "0x740730")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Address(RVA = "0x740778", Offset = "0x740778", VA = "0x740778")]
	public void ShowControllers(bool show)
	{
	}

	[Address(RVA = "0x73F9E8", Offset = "0x73F9E8", VA = "0x73F9E8")]
	public void ShowLeftController(bool show)
	{
	}

	[Address(RVA = "0x73FA60", Offset = "0x73FA60", VA = "0x73FA60")]
	public void ShowRightController(bool show)
	{
	}

	[Address(RVA = "0x7407A8", Offset = "0x7407A8", VA = "0x7407A8")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Address(RVA = "0x740504", Offset = "0x740504", VA = "0x740504")]
	private void RecordFrame()
	{
	}

	[Address(RVA = "0x740A0C", Offset = "0x740A0C", VA = "0x740A0C")]
	private void RecordUnityFrame()
	{
	}

	[Address(RVA = "0x740818", Offset = "0x740818", VA = "0x740818")]
	private void RecordSDKFrame()
	{
	}

	[Address(RVA = "0x73AD68", Offset = "0x73AD68", VA = "0x73AD68")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Address(RVA = "0x741560", Offset = "0x741560", VA = "0x741560")]
	public void RefreshBodyParts()
	{
	}

	[Address(RVA = "0x741910", Offset = "0x741910", VA = "0x741910")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Address(RVA = "0x74191C", Offset = "0x74191C", VA = "0x74191C")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Address(RVA = "0x741B5C", Offset = "0x741B5C", VA = "0x741B5C")]
	public void GetPointingDirection(HandType hand, ref Vector3 forward, ref Vector3 up)
	{
	}

	[Address(RVA = "0x741C58", Offset = "0x741C58", VA = "0x741C58")]
	public Transform GetMouthTransform()
	{
		return null;
	}

	[Address(RVA = "0x73DA8C", Offset = "0x73DA8C", VA = "0x73DA8C")]
	private void UpdateVoiceBehavior()
	{
	}

	[Address(RVA = "0x741D70", Offset = "0x741D70", VA = "0x741D70")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Address(RVA = "0x740514", Offset = "0x740514", VA = "0x740514")]
	private void InitPostLoad()
	{
	}

	[Address(RVA = "0x741D78", Offset = "0x741D78", VA = "0x741D78")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Address(RVA = "0x742A20", Offset = "0x742A20", VA = "0x742A20")]
	private static ovrAvatarLight CreateLightDirectional(uint id, Vector3 direction, float intensity)
	{
		return default(ovrAvatarLight);
	}

	[Address(RVA = "0x742A90", Offset = "0x742A90", VA = "0x742A90")]
	private static ovrAvatarLight CreateLightPoint(uint id, Vector3 position, float range, float intensity)
	{
		return default(ovrAvatarLight);
	}

	[Address(RVA = "0x742B08", Offset = "0x742B08", VA = "0x742B08")]
	private static ovrAvatarLight CreateLightSpot(uint id, Vector3 position, Vector3 direction, float spotAngleDeg, float range, float intensity)
	{
		return default(ovrAvatarLight);
	}

	[Address(RVA = "0x7405E4", Offset = "0x7405E4", VA = "0x7405E4")]
	private void UpdateExpressive()
	{
	}

	[Address(RVA = "0x74240C", Offset = "0x74240C", VA = "0x74240C")]
	private void ConfigureHelpers()
	{
	}

	[Address(RVA = "0x74302C", Offset = "0x74302C", VA = "0x74302C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674524", Offset = "0x674524")]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Address(RVA = "0x7430CC", Offset = "0x7430CC", VA = "0x7430CC")]
	public void DestroyHelperObjects()
	{
	}

	[Address(RVA = "0x742E4C", Offset = "0x742E4C", VA = "0x742E4C")]
	public GameObject CreateHelperObject(Transform parent, Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Address(RVA = "0x74319C", Offset = "0x74319C", VA = "0x74319C")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Address(RVA = "0x743290", Offset = "0x743290", VA = "0x743290")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Address(RVA = "0x742BD0", Offset = "0x742BD0", VA = "0x742BD0")]
	private void UpdateFacewave()
	{
	}

	[Address(RVA = "0x743384", Offset = "0x743384", VA = "0x743384")]
	public OvrAvatar()
	{
	}
}
public class OvrAvatarAsset
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Address(RVA = "0x743820", Offset = "0x743820", VA = "0x743820")]
	public OvrAvatarAsset()
	{
	}
}
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Address(RVA = "0x743888", Offset = "0x743888", VA = "0x743888")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Address(RVA = "0x744F5C", Offset = "0x744F5C", VA = "0x744F5C")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Address(RVA = "0x744ACC", Offset = "0x744ACC", VA = "0x744ACC")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Address(RVA = "0x744910", Offset = "0x744910", VA = "0x744910")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Address(RVA = "0x744974", Offset = "0x744974", VA = "0x744974")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Address(RVA = "0x74523C", Offset = "0x74523C", VA = "0x74523C")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(GameObject target)
	{
		return null;
	}
}
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int ASTCHeaderSize = 16;

	[Address(RVA = "0x745A0C", Offset = "0x745A0C", VA = "0x745A0C")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
public class OvrAvatarBase : MonoBehaviour
{
	[Address(RVA = "0x745C50", Offset = "0x745C50", VA = "0x745C50")]
	public OvrAvatarBase()
	{
	}
}
public class OvrAvatarBody : MonoBehaviour
{
	[Address(RVA = "0x745C58", Offset = "0x745C58", VA = "0x745C58", Slot = "4")]
	public virtual void UpdatePose(float voiceAmplitude)
	{
	}

	[Address(RVA = "0x745C5C", Offset = "0x745C5C", VA = "0x745C5C")]
	public OvrAvatarBody()
	{
	}
}
public class OvrAvatarComponent : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong ClothingAlphaTexture;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 ClothingAlphaOffset;

	[Address(RVA = "0x73C9F4", Offset = "0x73C9F4", VA = "0x73C9F4")]
	public void UpdateAvatar(ovrAvatarComponent component, OvrAvatar avatar)
	{
	}

	[Address(RVA = "0x7462A8", Offset = "0x7462A8", VA = "0x7462A8")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Address(RVA = "0x746348", Offset = "0x746348", VA = "0x746348")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Address(RVA = "0x746F58", Offset = "0x746F58", VA = "0x746F58")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Address(RVA = "0x747044", Offset = "0x747044", VA = "0x747044")]
	public OvrAvatarComponent()
	{
	}
}
public abstract class OvrAvatarDriver : MonoBehaviour
{
	public enum PacketMode
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SDK,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Unity
	}

	public struct ControllerPose
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 joystickPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Address(RVA = "0x748DF4", Offset = "0x748DF4", VA = "0x748DF4")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	public struct PoseFrame
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 headPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion headRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 handLeftPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion handLeftRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 handRightPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion handRightRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Address(RVA = "0x741034", Offset = "0x741034", VA = "0x741034")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const ovrAvatarControllerType Desired6DofController = ovrAvatarControllerType.Touch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Address(RVA = "0x740CA4", Offset = "0x740CA4", VA = "0x740CA4")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Address(RVA = "0x748A44", Offset = "0x748A44", VA = "0x748A44")]
	protected void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Address(RVA = "0x748CDC", Offset = "0x748CDC", VA = "0x748CDC")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Address(RVA = "0x748C48", Offset = "0x748C48", VA = "0x748C48")]
	private ovrAvatarControllerType GetControllerType()
	{
		return default(ovrAvatarControllerType);
	}

	[Address(RVA = "0x748D78", Offset = "0x748D78", VA = "0x748D78")]
	protected OvrAvatarDriver()
	{
	}
}
public class OvrAvatarHand : MonoBehaviour
{
	[Address(RVA = "0x7490CC", Offset = "0x7490CC", VA = "0x7490CC")]
	public OvrAvatarHand()
	{
	}
}
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float voiceAmplitude;

	[Address(RVA = "0x7490D4", Offset = "0x7490D4", VA = "0x7490D4")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Address(RVA = "0x749200", Offset = "0x749200", VA = "0x749200")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Address(RVA = "0x74955C", Offset = "0x74955C", VA = "0x74955C")]
	private void CalculateCurrentPose()
	{
	}

	[Address(RVA = "0x7498EC", Offset = "0x7498EC", VA = "0x7498EC", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Address(RVA = "0x749918", Offset = "0x749918", VA = "0x749918")]
	public OvrAvatarLocalDriver()
	{
	}
}
public class OvrAvatarMaterialManager : MonoBehaviour
{
	public enum TextureType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DiffuseTextures,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NormalMaps,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RoughnessMaps,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Count
	}

	[Serializable]
	public struct AvatarComponentMaterialProperties
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color Color;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673F54", Offset = "0x673F54")]
		public float DiffuseIntensity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673F6C", Offset = "0x673F6C")]
		public float RimIntensity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673F84", Offset = "0x673F84")]
		public float ReflectionIntensity;
	}

	[Serializable]
	public struct AvatarTextureArrayProperties
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Serializable]
	public struct AvatarMaterialPropertyBlock
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4[] Colors;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	public class AvatarMaterialConfig
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Address(RVA = "0x74C240", Offset = "0x74C240", VA = "0x74C240")]
		public AvatarMaterialConfig()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659D58", Offset = "0x659D58")]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <srcBlend>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <dstBlend>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <transparentQueue>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <renderQueue>5__5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <renderTag>5__6;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x74C17C", Offset = "0x74C17C", VA = "0x74C17C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x74C1EC", Offset = "0x74C1EC", VA = "0x74C1EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x74B668", Offset = "0x74B668", VA = "0x74B668")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Address(RVA = "0x74B9F0", Offset = "0x74B9F0", VA = "0x74B9F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x74B9F4", Offset = "0x74B9F4", VA = "0x74B9F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x74C184", Offset = "0x74C184", VA = "0x74C184", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D[] DiffuseFallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D[] NormalFallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer TargetRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarTextureCopyManager TextureCopyManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly string[] TextureTypeToShaderProperties;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AvatarMaterialConfig DefaultAvatarConfig;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AvatarMaterialPropertyBlock LocalAvatarMaterialPropertyBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Shader CombinedShader;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Address(RVA = "0x749920", Offset = "0x749920", VA = "0x749920")]
	private void Awake()
	{
	}

	[Address(RVA = "0x749990", Offset = "0x749990", VA = "0x749990")]
	public void CreateTextureArrays()
	{
	}

	[Address(RVA = "0x749B00", Offset = "0x749B00", VA = "0x749B00")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Address(RVA = "0x749B3C", Offset = "0x749B3C", VA = "0x749B3C")]
	public void OnCombinedMeshReady()
	{
	}

	[Address(RVA = "0x749B78", Offset = "0x749B78", VA = "0x749B78")]
	public void InitTextureArrays()
	{
	}

	[Address(RVA = "0x74A494", Offset = "0x74A494", VA = "0x74A494")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Address(RVA = "0x74A0CC", Offset = "0x74A0CC", VA = "0x74A0CC")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Address(RVA = "0x74A76C", Offset = "0x74A76C", VA = "0x74A76C")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Address(RVA = "0x74AB08", Offset = "0x74AB08", VA = "0x74AB08")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Address(RVA = "0x74AC38", Offset = "0x74AC38", VA = "0x74AC38")]
	public void ValidateTextures()
	{
	}

	[Address(RVA = "0x74A3DC", Offset = "0x74A3DC", VA = "0x74A3DC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674588", Offset = "0x674588")]
	private IEnumerator RunLoadingAnimation()
	{
		return null;
	}

	[Address(RVA = "0x74B694", Offset = "0x74B694", VA = "0x74B694")]
	public OvrAvatarMaterialManager()
	{
	}
}
public class OvrAvatarMeshInstance : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HashSet<ulong> AssetsToLoad;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ulong MeshID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ulong MaterialID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ulong FadeTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarBodyPartType MeshType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ovrAvatarMaterialState MaterialState;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private MeshFilter Mesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private MeshRenderer MeshInstance;

	[Address(RVA = "0x74C6B0", Offset = "0x74C6B0", VA = "0x74C6B0")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Address(RVA = "0x74D710", Offset = "0x74D710", VA = "0x74D710")]
	public void SetMeshAssets(ulong fadeTexture, ulong meshID, ulong materialID, ovrAvatarBodyPartType type)
	{
	}

	[Address(RVA = "0x74C780", Offset = "0x74C780", VA = "0x74C780")]
	private void HandleAssetAvailable(OvrAvatarAsset asset)
	{
	}

	[Address(RVA = "0x74D980", Offset = "0x74D980", VA = "0x74D980")]
	public void ChangeMaterial(ulong assetID)
	{
	}

	[Address(RVA = "0x74D7C4", Offset = "0x74D7C4", VA = "0x74D7C4")]
	private void RequestAsset(ulong assetID)
	{
	}

	[Address(RVA = "0x74D8DC", Offset = "0x74D8DC", VA = "0x74D8DC")]
	private void RequestMaterialTextures()
	{
	}

	[Address(RVA = "0x74D988", Offset = "0x74D988", VA = "0x74D988")]
	public void SetActive(bool active)
	{
	}

	[Address(RVA = "0x74CB04", Offset = "0x74CB04", VA = "0x74CB04")]
	private void UpdateMaterial()
	{
	}

	[Address(RVA = "0x74D9EC", Offset = "0x74D9EC", VA = "0x74D9EC")]
	public OvrAvatarMeshInstance()
	{
	}
}
public class OvrAvatarPacket
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	public float Duration
	{
		[Address(RVA = "0x740E04", Offset = "0x740E04", VA = "0x740E04")]
		get
		{
			return default(float);
		}
	}

	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Address(RVA = "0x740F84", Offset = "0x740F84", VA = "0x740F84")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Address(RVA = "0x741474", Offset = "0x741474", VA = "0x741474")]
	public OvrAvatarPacket()
	{
	}

	[Address(RVA = "0x740CB4", Offset = "0x740CB4", VA = "0x740CB4")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Address(RVA = "0x74D9F4", Offset = "0x74D9F4", VA = "0x74D9F4")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Address(RVA = "0x740EA4", Offset = "0x740EA4", VA = "0x740EA4")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Address(RVA = "0x74DAD0", Offset = "0x74DAD0", VA = "0x74DAD0")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Address(RVA = "0x74DD00", Offset = "0x74DD00", VA = "0x74DD00")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Address(RVA = "0x74DF80", Offset = "0x74DF80", VA = "0x74DF80")]
	public void Write(Stream stream)
	{
	}
}
internal static class BinaryWriterExtensions
{
	[Address(RVA = "0x8AB2F0", Offset = "0x8AB2F0", VA = "0x8AB2F0")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Address(RVA = "0x8AB414", Offset = "0x8AB414", VA = "0x8AB414")]
	public static void Write(this BinaryWriter writer, Vector3 vec3)
	{
	}

	[Address(RVA = "0x8AB6A0", Offset = "0x8AB6A0", VA = "0x8AB6A0")]
	public static void Write(this BinaryWriter writer, Vector2 vec2)
	{
	}

	[Address(RVA = "0x8AB4C8", Offset = "0x8AB4C8", VA = "0x8AB4C8")]
	public static void Write(this BinaryWriter writer, Quaternion quat)
	{
	}

	[Address(RVA = "0x8AB5A4", Offset = "0x8AB5A4", VA = "0x8AB5A4")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
internal static class BinaryReaderExtensions
{
	[Address(RVA = "0x8AAE60", Offset = "0x8AAE60", VA = "0x8AAE60")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Address(RVA = "0x8AB284", Offset = "0x8AB284", VA = "0x8AB284")]
	public static Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(Vector2);
	}

	[Address(RVA = "0x8AB008", Offset = "0x8AB008", VA = "0x8AB008")]
	public static Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x8AB09C", Offset = "0x8AB09C", VA = "0x8AB09C")]
	public static Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(Quaternion);
	}

	[Address(RVA = "0x8AB160", Offset = "0x8AB160", VA = "0x8AB160")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
public class OvrAvatarProjectorRenderComponent : OvrAvatarRenderComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material material;

	[Address(RVA = "0x73C4C4", Offset = "0x73C4C4", VA = "0x73C4C4")]
	internal void InitializeProjectorRender(ovrAvatarRenderPart_ProjectorRender render, Shader shader, OvrAvatarRenderComponent target)
	{
	}

	[Address(RVA = "0x745FBC", Offset = "0x745FBC", VA = "0x745FBC")]
	internal void UpdateProjectorRender(OvrAvatarComponent component, ovrAvatarRenderPart_ProjectorRender render)
	{
	}

	[Address(RVA = "0x74F2D0", Offset = "0x74F2D0", VA = "0x74F2D0")]
	private void OnDrawGizmos()
	{
	}

	[Address(RVA = "0x74F898", Offset = "0x74F898", VA = "0x74F898")]
	public OvrAvatarProjectorRenderComponent()
	{
	}
}
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int MinPacketQueue = 1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int MaxPacketQueue = 4;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Address(RVA = "0x74F8B8", Offset = "0x74F8B8", VA = "0x74F8B8")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Address(RVA = "0x74F94C", Offset = "0x74F94C", VA = "0x74F94C", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Address(RVA = "0x74F968", Offset = "0x74F968", VA = "0x74F968")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Address(RVA = "0x74FB2C", Offset = "0x74FB2C", VA = "0x74FB2C")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Address(RVA = "0x74FD74", Offset = "0x74FD74", VA = "0x74FD74")]
	public OvrAvatarRemoteDriver()
	{
	}
}
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Address(RVA = "0x74FDEC", Offset = "0x74FDEC", VA = "0x74FDEC")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Address(RVA = "0x74FF84", Offset = "0x74FF84", VA = "0x74FF84")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer, int sortingOrder)
	{
		return null;
	}

	[Address(RVA = "0x7511F4", Offset = "0x7511F4", VA = "0x7511F4")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Address(RVA = "0x74F1CC", Offset = "0x74F1CC", VA = "0x74F1CC")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Address(RVA = "0x74F8A8", Offset = "0x74F8A8", VA = "0x74F8A8")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Flags]
public enum ovrAvatarCapabilities
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Body = 1,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Hands = 2,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Base = 4,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	BodyTilt = 0x10,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Expressive = 0x20,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	All = -1
}
public enum ovrAvatarMessageType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	AvatarSpecification,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	AssetLoaded,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public struct ovrAvatarMessage_AvatarSpecification
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
public struct ovrAvatarMessage_AssetLoaded
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
public enum ovrAvatarAssetType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Mesh,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Texture,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Pose,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Material,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	CombinedMesh,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	PBSMaterial,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public struct ovrAvatarMeshVertex
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
public struct ovrAvatarMeshVertexV2
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
public struct ovrAvatarBlendVertex
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
public struct ovrAvatarMeshAssetData
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
public struct ovrAvatarMeshAssetDataV2
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
public enum ovrAvatarTextureFormat
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	RGB24,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	DXT1,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	DXT5,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ASTC_RGB_6x6,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ASTC_RGB_6x6_MIPMAPS,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public struct ovrAvatarTextureAssetData
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
public enum ovrAvatarRenderPartType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SkinnedMeshRender,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SkinnedMeshRenderPBS,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ProjectorRender,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SkinnedMeshRenderPBS_V2,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public struct ovrAvatarTransform
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 position;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 scale;
}
[Flags]
public enum ovrAvatarButton
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	One = 1,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Two = 2,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Three = 4,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Joystick = 8
}
[Flags]
public enum ovrAvatarTouch
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	One = 1,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Two = 2,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Joystick = 4,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ThumbRest = 8,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Index = 0x10,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Pointing = 0x40,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ThumbUp = 0x80
}
public struct ovrAvatarHandInputState
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
public struct ovrAvatarComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
public struct ovrAvatarBaseComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 basePosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
public struct ovrAvatarBodyComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
public struct ovrAvatarControllerComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
public struct ovrAvatarHandComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
public enum ovrAvatarMaterialLayerBlendMode
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Add,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Multiply,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public enum ovrAvatarMaterialLayerSampleMode
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Color,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Texture,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	TextureSingleChannel,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Parallax,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public enum ovrAvatarMaterialMaskType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	None,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Positional,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ViewReflection,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Fresnel,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Pulse,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public enum ovrAvatarControllerType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Touch,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Malibu,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Go,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Quest,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public enum ovrAvatarAssetLevelOfDetail
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Lowest = 1,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Medium = 3,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Highest = 5
}
public enum ovrAvatarLookAndFeelVersion
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Unknown = -1,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	One,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Two
}
public struct ovrAvatarMaterialLayerState
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector4 layerColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector4 sampleParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 sampleScaleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector4 maskParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 maskAxis;

	[Address(RVA = "0x14B6C68", Offset = "0x14B6C68", VA = "0x14B6C68")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B6EB4", Offset = "0x14B6EB4", VA = "0x14B6EB4", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B6FA0", Offset = "0x14B6FA0", VA = "0x14B6FA0", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
public struct ovrAvatarMaterialState
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector4 baseMaskParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector4 baseMaskAxis;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 alphaMaskScaleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 normalMapScaleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector4 parallaxMapScaleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector4 roughnessMapScaleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Address(RVA = "0x14B7240", Offset = "0x14B7240", VA = "0x14B7240")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B7630", Offset = "0x14B7630", VA = "0x14B7630", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B77A8", Offset = "0x14B77A8", VA = "0x14B77A8", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
public struct ovrAvatarExpressiveParameters
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 irisColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector4 scleraColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 lashColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 browColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 lipColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 teethColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 gumColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Address(RVA = "0x14B6608", Offset = "0x14B6608", VA = "0x14B6608")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B68CC", Offset = "0x14B68CC", VA = "0x14B68CC", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B69B8", Offset = "0x14B69B8", VA = "0x14B69B8", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
public struct ovrAvatarPBSMaterialState
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector4 albedoMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 emissionMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Address(RVA = "0x14B8058", Offset = "0x14B8058", VA = "0x14B8058")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B827C", Offset = "0x14B827C", VA = "0x14B827C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Address(RVA = "0x14B83C8", Offset = "0x14B83C8", VA = "0x14B83C8", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Address(RVA = "0x743828", Offset = "0x743828", VA = "0x743828")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
public struct ovrAvatarSkinnedMeshPose
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	FirstPerson = 1,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ThirdPerson = 2,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SelfOccluding = 4
}
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
public enum ovrAvatarHandGesture
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Default,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	GripSphere,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	GripCube,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public enum ovrAvatarBodyPartType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Body,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Clothing,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Eyewear,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Hair,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Beard,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public struct ovrAvatarBlendShapeParams
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
public struct ovrAvatarVisemes
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
public enum ovrAvatarGazeTargetType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	AvatarHead,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	AvatarHand,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Object,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ObjectStatic,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public struct ovrAvatarGazeTarget
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 worldPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
public struct ovrAvatarGazeTargets
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
public enum ovrAvatarLightType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Point,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Direction,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Spot,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Count
}
public struct ovrAvatarLight
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 worldDirection;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 worldPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
public struct ovrAvatarLights
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
public delegate void specificationCallback(IntPtr specification);
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
public delegate void combinedMeshLoadedCallback(IntPtr asset);
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	public static OvrAvatarSDKManager Instance
	{
		[Address(RVA = "0x73FAD8", Offset = "0x73FAD8", VA = "0x73FAD8")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x751574", Offset = "0x751574", VA = "0x751574")]
	private void Initialize()
	{
	}

	[Address(RVA = "0x7516B4", Offset = "0x7516B4", VA = "0x7516B4")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x7516BC", Offset = "0x7516BC", VA = "0x7516BC")]
	private void Update()
	{
	}

	[Address(RVA = "0x740110", Offset = "0x740110", VA = "0x740110")]
	public void RequestAvatarSpecification(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
	{
	}

	[Address(RVA = "0x73FCBC", Offset = "0x73FCBC", VA = "0x73FCBC")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Address(RVA = "0x73FDD8", Offset = "0x73FDD8", VA = "0x73FDD8")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Address(RVA = "0x73FC34", Offset = "0x73FC34", VA = "0x73FC34")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Address(RVA = "0x75168C", Offset = "0x75168C", VA = "0x75168C")]
	public string GetAppId()
	{
		return null;
	}

	[Address(RVA = "0x751D1C", Offset = "0x751D1C", VA = "0x751D1C")]
	public OvrAvatarSDKManager()
	{
	}
}
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	public static string AppID
	{
		[Address(RVA = "0x751CC4", Offset = "0x751CC4", VA = "0x751CC4")]
		get
		{
			return null;
		}
		[Address(RVA = "0x751E38", Offset = "0x751E38", VA = "0x751E38")]
		set
		{
		}
	}

	public static string MobileAppID
	{
		[Address(RVA = "0x751CF0", Offset = "0x751CF0", VA = "0x751CF0")]
		get
		{
			return null;
		}
		[Address(RVA = "0x751E68", Offset = "0x751E68", VA = "0x751E68")]
		set
		{
		}
	}

	public static OvrAvatarSettings Instance
	{
		[Address(RVA = "0x751D24", Offset = "0x751D24", VA = "0x751D24")]
		get
		{
			return null;
		}
		[Address(RVA = "0x751E98", Offset = "0x751E98", VA = "0x751E98")]
		set
		{
		}
	}

	[Address(RVA = "0x751EEC", Offset = "0x751EEC", VA = "0x751EEC")]
	public OvrAvatarSettings()
	{
	}
}
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Shader surface;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surfaceSelfOccluding;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Address(RVA = "0x73B30C", Offset = "0x73B30C", VA = "0x73B30C")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer, int sortOrder)
	{
	}

	[Address(RVA = "0x745C64", Offset = "0x745C64", VA = "0x745C64")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Address(RVA = "0x753560", Offset = "0x753560", VA = "0x753560")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Address(RVA = "0x7536F8", Offset = "0x7536F8", VA = "0x7536F8")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Address(RVA = "0x73B578", Offset = "0x73B578", VA = "0x73B578")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer, int sortOrder)
	{
	}

	[Address(RVA = "0x745E5C", Offset = "0x745E5C", VA = "0x745E5C")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Address(RVA = "0x753708", Offset = "0x753708", VA = "0x753708")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OvrAvatarMaterialManager AvatarMaterialManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool PreviouslyActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool IsCombinedMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool EnableExpressive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Address(RVA = "0x73B8DC", Offset = "0x73B8DC", VA = "0x73B8DC")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, int sortOrder, bool isCombinedMaterial, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar)
	{
	}

	[Address(RVA = "0x746148", Offset = "0x746148", VA = "0x746148")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Address(RVA = "0x752934", Offset = "0x752934", VA = "0x752934")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Address(RVA = "0x751F44", Offset = "0x751F44", VA = "0x751F44")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Address(RVA = "0x753550", Offset = "0x753550", VA = "0x753550")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	private struct CopyTextureParams
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Address(RVA = "0x7543F8", Offset = "0x7543F8", VA = "0x7543F8")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659D68", Offset = "0x659D68")]
	private sealed class <CopyTextureCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CopyTextureParams copyTextureParams;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x754334", Offset = "0x754334", VA = "0x754334", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7543A4", Offset = "0x7543A4", VA = "0x7543A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7541F8", Offset = "0x7541F8", VA = "0x7541F8")]
		[DebuggerHidden]
		public <CopyTextureCoroutine>d__7(int <>1__state)
		{
		}

		[Address(RVA = "0x754224", Offset = "0x754224", VA = "0x754224", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x754228", Offset = "0x754228", VA = "0x754228", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x75433C", Offset = "0x75433C", VA = "0x75433C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Address(RVA = "0x753EE0", Offset = "0x753EE0", VA = "0x753EE0")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Address(RVA = "0x753F58", Offset = "0x753F58", VA = "0x753F58")]
	public void Update()
	{
	}

	[Address(RVA = "0x74C11C", Offset = "0x74C11C", VA = "0x74C11C")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Address(RVA = "0x74A5B8", Offset = "0x74A5B8", VA = "0x74A5B8")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Address(RVA = "0x7540A4", Offset = "0x7540A4", VA = "0x7540A4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67468C", Offset = "0x67468C")]
	private IEnumerator CopyTextureCoroutine(CopyTextureParams copyTextureParams)
	{
		return null;
	}

	[Address(RVA = "0x75413C", Offset = "0x75413C", VA = "0x75413C")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}
}
public class OvrAvatarTouchController : MonoBehaviour
{
	[Address(RVA = "0x754408", Offset = "0x754408", VA = "0x754408")]
	public OvrAvatarTouchController()
	{
	}
}
public class EnableSwitch : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] SwitchTargets;

	public bool SetActive<T>(int target) where T : MonoBehaviour
	{
		return default(bool);
	}

	[Address(RVA = "0x7C5250", Offset = "0x7C5250", VA = "0x7C5250")]
	public EnableSwitch()
	{
	}
}
public class LipSyncDemo_Control : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D2F4", Offset = "0x65D2F4")]
	public KeyCode rotateLeftKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D32C", Offset = "0x65D32C")]
	public KeyCode rotateRightKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D364", Offset = "0x65D364")]
	public KeyCode resetRotationKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float resetRotation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationAmount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rotationMax;

	[Address(RVA = "0x81E994", Offset = "0x81E994", VA = "0x81E994")]
	private void Start()
	{
	}

	[Address(RVA = "0x81E998", Offset = "0x81E998", VA = "0x81E998")]
	private void Update()
	{
	}

	[Address(RVA = "0x81EA18", Offset = "0x81EA18", VA = "0x81EA18")]
	private void RotateObject(float amountDegrees, bool absolute = false)
	{
	}

	[Address(RVA = "0x81EC8C", Offset = "0x81EC8C", VA = "0x81EC8C")]
	public LipSyncDemo_Control()
	{
	}
}
public class LipSyncDemo_SetCurrentTarget : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnableSwitch[] SwitchTargets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int targetSet;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int maxTarget;

	[Address(RVA = "0x81ECB4", Offset = "0x81ECB4", VA = "0x81ECB4")]
	private void Start()
	{
	}

	[Address(RVA = "0x81EDF8", Offset = "0x81EDF8", VA = "0x81EDF8")]
	private void Update()
	{
	}

	[Address(RVA = "0x81EECC", Offset = "0x81EECC", VA = "0x81EECC")]
	private void SetCurrentTarget()
	{
	}

	[Address(RVA = "0x81F2F0", Offset = "0x81F2F0", VA = "0x81F2F0")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Address(RVA = "0x81F340", Offset = "0x81F340", VA = "0x81F340")]
	public LipSyncDemo_SetCurrentTarget()
	{
	}
}
public class OVRLipSyncDebugConsole : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArrayList messages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxMessages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text textMsg;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OVRLipSyncDebugConsole s_Instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool clearTimeoutOn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float clearTimeout;

	public static OVRLipSyncDebugConsole instance
	{
		[Address(RVA = "0xE687A0", Offset = "0xE687A0", VA = "0xE687A0")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0xE68A7C", Offset = "0xE68A7C", VA = "0xE68A7C")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE68BB8", Offset = "0xE68BB8", VA = "0xE68BB8")]
	private void Update()
	{
	}

	[Address(RVA = "0xE68AEC", Offset = "0xE68AEC", VA = "0xE68AEC")]
	public void Init()
	{
	}

	[Address(RVA = "0xE665EC", Offset = "0xE665EC", VA = "0xE665EC")]
	public static void Log(string message)
	{
	}

	[Address(RVA = "0xE68D54", Offset = "0xE68D54", VA = "0xE68D54")]
	public static void Log(string message, Color color)
	{
	}

	[Address(RVA = "0xE6657C", Offset = "0xE6657C", VA = "0xE6657C")]
	public static void Clear()
	{
	}

	[Address(RVA = "0xE666A0", Offset = "0xE666A0", VA = "0xE666A0")]
	public static void ClearTimeout(float timeToClear)
	{
	}

	[Address(RVA = "0xE68C50", Offset = "0xE68C50", VA = "0xE68C50")]
	public void AddMessage(string message, Color color)
	{
	}

	[Address(RVA = "0xE68DFC", Offset = "0xE68DFC", VA = "0xE68DFC")]
	public void ClearMessages()
	{
	}

	[Address(RVA = "0xE68E40", Offset = "0xE68E40", VA = "0xE68E40")]
	public void SetClearTimeout(float timeout)
	{
	}

	[Address(RVA = "0xE690C0", Offset = "0xE690C0", VA = "0xE690C0")]
	private void Prune()
	{
	}

	[Address(RVA = "0xE68E50", Offset = "0xE68E50", VA = "0xE68E50")]
	private void Display()
	{
	}

	[Address(RVA = "0xE691A0", Offset = "0xE691A0", VA = "0xE691A0")]
	public OVRLipSyncDebugConsole()
	{
	}
}
public class OVRNamedArrayAttribute : PropertyAttribute
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string[] names;

	[Address(RVA = "0xE6B26C", Offset = "0xE6B26C", VA = "0xE6B26C")]
	public OVRNamedArrayAttribute(string[] names)
	{
	}
}
public static class OVRTouchpad
{
	public enum TouchEvent
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SingleTap,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DoubleTap,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Left,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Right,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Up,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Down
	}

	public delegate void OVRTouchpadCallback<TouchEvent>(TouchEvent arg);

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 moveAmountMouse;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float minMovMagnitudeMouse;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Delegate touchPadCallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static OVRTouchpadHelper touchpadHelper;

	[Address(RVA = "0xE6F250", Offset = "0xE6F250", VA = "0xE6F250")]
	public static void Create()
	{
	}

	[Address(RVA = "0xE6F254", Offset = "0xE6F254", VA = "0xE6F254")]
	public static void Update()
	{
	}

	[Address(RVA = "0xE6F588", Offset = "0xE6F588", VA = "0xE6F588")]
	public static void OnDisable()
	{
	}

	[Address(RVA = "0xE6F3C4", Offset = "0xE6F3C4", VA = "0xE6F3C4")]
	private static void HandleInputMouse(ref Vector3 move)
	{
	}

	[Address(RVA = "0xE6F58C", Offset = "0xE6F58C", VA = "0xE6F58C")]
	public static void AddListener(OVRTouchpadCallback<TouchEvent> handler)
	{
	}
}
public sealed class OVRTouchpadHelper : MonoBehaviour
{
	[Address(RVA = "0xE6F784", Offset = "0xE6F784", VA = "0xE6F784")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE6F800", Offset = "0xE6F800", VA = "0xE6F800")]
	private void Start()
	{
	}

	[Address(RVA = "0xE6F898", Offset = "0xE6F898", VA = "0xE6F898")]
	private void Update()
	{
	}

	[Address(RVA = "0xE6F8F4", Offset = "0xE6F8F4", VA = "0xE6F8F4")]
	public void OnDisable()
	{
	}

	[Address(RVA = "0xE6F958", Offset = "0xE6F958", VA = "0xE6F958")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Address(RVA = "0xE6F95C", Offset = "0xE6F95C", VA = "0xE6F95C")]
	public OVRTouchpadHelper()
	{
	}
}
public class OVRLipSync : MonoBehaviour
{
	public enum Result
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Success = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Unknown = -2200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CannotCreateContext = -2201,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidParam = -2202,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BadSampleRate = -2203,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MissingDLL = -2204,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BadVersion = -2205,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UndefinedFunction = -2206
	}

	public enum AudioDataType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		S16_Mono,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		S16_Stereo,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		F32_Mono,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		F32_Stereo
	}

	public enum Viseme
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		sil,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PP,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FF,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TH,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DD,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		kk,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CH,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SS,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		nn,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RR,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		aa,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		E,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ih,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		oh,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ou
	}

	public enum Signals
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VisemeOn,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VisemeOff,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VisemeAmount,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VisemeSmoothing,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LaughterAmount
	}

	public enum ContextProviders
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Original,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Enhanced,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Enhanced_with_Laughter
	}

	[Serializable]
	public class Frame
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameNumber;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int frameDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] Visemes;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float laughterScore;

		[Address(RVA = "0xE65E9C", Offset = "0xE65E9C", VA = "0xE65E9C")]
		public void CopyInput(Frame input)
		{
		}

		[Address(RVA = "0xE65F3C", Offset = "0xE65F3C", VA = "0xE65F3C")]
		public void Reset()
		{
		}

		[Address(RVA = "0xE65FCC", Offset = "0xE65FCC", VA = "0xE65FCC")]
		public Frame()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int VisemeCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int SignalCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const string strOVRLS = "OVRLipSync";

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Result sInitialized;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static OVRLipSync sInstance;

	[PreserveSig]
	[Address(RVA = "0xE64998", Offset = "0xE64998", VA = "0xE64998")]
	private static extern int ovrLipSyncDll_Initialize(int samplerate, int buffersize);

	[PreserveSig]
	[Address(RVA = "0xE64A44", Offset = "0xE64A44", VA = "0xE64A44")]
	private static extern void ovrLipSyncDll_Shutdown();

	[PreserveSig]
	[Address(RVA = "0xE64AD0", Offset = "0xE64AD0", VA = "0xE64AD0")]
	private static extern IntPtr ovrLipSyncDll_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[PreserveSig]
	[Address(RVA = "0xE64B80", Offset = "0xE64B80", VA = "0xE64B80")]
	private static extern int ovrLipSyncDll_CreateContextEx(ref uint context, ContextProviders provider, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Address(RVA = "0xE64C44", Offset = "0xE64C44", VA = "0xE64C44")]
	private static extern int ovrLipSyncDll_CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Address(RVA = "0xE64D2C", Offset = "0xE64D2C", VA = "0xE64D2C")]
	private static extern int ovrLipSyncDll_DestroyContext(uint context);

	[PreserveSig]
	[Address(RVA = "0xE64DC8", Offset = "0xE64DC8", VA = "0xE64DC8")]
	private static extern int ovrLipSyncDll_ResetContext(uint context);

	[PreserveSig]
	[Address(RVA = "0xE64E64", Offset = "0xE64E64", VA = "0xE64E64")]
	private static extern int ovrLipSyncDll_SendSignal(uint context, Signals signal, int arg1, int arg2);

	[PreserveSig]
	[Address(RVA = "0xE64F28", Offset = "0xE64F28", VA = "0xE64F28")]
	private static extern int ovrLipSyncDll_ProcessFrameEx(uint context, IntPtr audioBuffer, uint bufferSize, AudioDataType dataType, ref int frameNumber, ref int frameDelay, float[] visemes, int visemeCount, ref float laughterScore, float[] laughterCategories, int laughterCategoriesLength);

	[Address(RVA = "0xE65040", Offset = "0xE65040", VA = "0xE65040")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE653F0", Offset = "0xE653F0", VA = "0xE653F0")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0xE652B8", Offset = "0xE652B8", VA = "0xE652B8")]
	public static Result Initialize()
	{
		return default(Result);
	}

	[Address(RVA = "0xE654D0", Offset = "0xE654D0", VA = "0xE654D0")]
	public static Result Initialize(int sampleRate, int bufferSize)
	{
		return default(Result);
	}

	[Address(RVA = "0xE655E4", Offset = "0xE655E4", VA = "0xE655E4")]
	public static void Shutdown()
	{
	}

	[Address(RVA = "0xE65250", Offset = "0xE65250", VA = "0xE65250")]
	public static Result IsInitialized()
	{
		return default(Result);
	}

	[Address(RVA = "0xE65654", Offset = "0xE65654", VA = "0xE65654")]
	public static Result CreateContext(ref uint context, ContextProviders provider, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Address(RVA = "0xE65738", Offset = "0xE65738", VA = "0xE65738")]
	public static Result CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Address(RVA = "0xE65824", Offset = "0xE65824", VA = "0xE65824")]
	public static Result DestroyContext(uint context)
	{
		return default(Result);
	}

	[Address(RVA = "0xE658B8", Offset = "0xE658B8", VA = "0xE658B8")]
	public static Result ResetContext(uint context)
	{
		return default(Result);
	}

	[Address(RVA = "0xE6594C", Offset = "0xE6594C", VA = "0xE6594C")]
	public static Result SendSignal(uint context, Signals signal, int arg1, int arg2)
	{
		return default(Result);
	}

	[Address(RVA = "0xE65A10", Offset = "0xE65A10", VA = "0xE65A10")]
	public static Result ProcessFrame(uint context, float[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Address(RVA = "0xE65BC8", Offset = "0xE65BC8", VA = "0xE65BC8")]
	public static Result ProcessFrame(uint context, short[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Address(RVA = "0xE65D78", Offset = "0xE65D78", VA = "0xE65D78")]
	public OVRLipSync()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655664", Offset = "0x655664")]
public class OVRLipSyncContext : OVRLipSyncContextBase
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D39C", Offset = "0x65D39C")]
	public bool enableKeyboardInput;

	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D3D4", Offset = "0x65D3D4")]
	public bool enableTouchInput;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D40C", Offset = "0x65D40C")]
	public bool audioLoopback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D444", Offset = "0x65D444")]
	public KeyCode loopbackKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D47C", Offset = "0x65D47C")]
	public bool showVisemes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D4B4", Offset = "0x65D4B4")]
	public KeyCode debugVisemesKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D4EC", Offset = "0x65D4EC")]
	public bool skipAudioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D524", Offset = "0x65D524")]
	public float gain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool hasDebugConsole;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public KeyCode debugLaughterKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool showLaughter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float laughterScore;

	[Address(RVA = "0xE66054", Offset = "0xE66054", VA = "0xE66054")]
	private void Start()
	{
	}

	[Address(RVA = "0xE6618C", Offset = "0xE6618C", VA = "0xE6618C")]
	private void HandleKeyboard()
	{
	}

	[Address(RVA = "0xE66724", Offset = "0xE66724", VA = "0xE66724")]
	private void Update()
	{
	}

	[Address(RVA = "0xE66A38", Offset = "0xE66A38", VA = "0xE66A38")]
	public void PreprocessAudioSamples(float[] data, int channels)
	{
	}

	[Address(RVA = "0xE66AD8", Offset = "0xE66AD8", VA = "0xE66AD8")]
	public void PostprocessAudioSamples(float[] data, int channels)
	{
	}

	[Address(RVA = "0xE66B7C", Offset = "0xE66B7C", VA = "0xE66B7C")]
	public void ProcessAudioSamplesRaw(float[] data, int channels)
	{
	}

	[Address(RVA = "0xE66CB8", Offset = "0xE66CB8", VA = "0xE66CB8")]
	public void ProcessAudioSamplesRaw(short[] data, int channels)
	{
	}

	[Address(RVA = "0xE66DEC", Offset = "0xE66DEC", VA = "0xE66DEC")]
	public void ProcessAudioSamples(float[] data, int channels)
	{
	}

	[Address(RVA = "0xE66ED0", Offset = "0xE66ED0", VA = "0xE66ED0")]
	private void OnAudioFilterRead(float[] data, int channels)
	{
	}

	[Address(RVA = "0xE66774", Offset = "0xE66774", VA = "0xE66774")]
	private void DebugShowVisemesAndLaughter()
	{
	}

	[Address(RVA = "0xE664A4", Offset = "0xE664A4", VA = "0xE664A4")]
	private void ToggleAudioLoopback()
	{
	}

	[Address(RVA = "0xE66EE0", Offset = "0xE66EE0", VA = "0xE66EE0")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Address(RVA = "0xE6700C", Offset = "0xE6700C", VA = "0xE6700C")]
	public OVRLipSyncContext()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x6556C8", Offset = "0x6556C8")]
public class OVRLipSyncContextBase : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D55C", Offset = "0x65D55C")]
	public OVRLipSync.ContextProviders provider;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D594", Offset = "0x65D594")]
	public bool enableAcceleration;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRLipSync.Frame frame;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private uint context;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int _smoothing;

	public int Smoothing
	{
		[Address(RVA = "0xE6718C", Offset = "0xE6718C", VA = "0xE6718C")]
		get
		{
			return default(int);
		}
		[Address(RVA = "0xE670A0", Offset = "0xE670A0", VA = "0xE670A0")]
		set
		{
		}
	}

	public uint Context
	{
		[Address(RVA = "0xE66CB0", Offset = "0xE66CB0", VA = "0xE66CB0")]
		get
		{
			return default(uint);
		}
	}

	protected OVRLipSync.Frame Frame
	{
		[Address(RVA = "0xE6676C", Offset = "0xE6676C", VA = "0xE6676C")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0xE67194", Offset = "0xE67194", VA = "0xE67194")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE6732C", Offset = "0xE6732C", VA = "0xE6732C")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0xE67450", Offset = "0xE67450", VA = "0xE67450")]
	public OVRLipSync.Frame GetCurrentPhonemeFrame()
	{
		return null;
	}

	[Address(RVA = "0xE67458", Offset = "0xE67458", VA = "0xE67458")]
	public void SetVisemeBlend(int viseme, int amount)
	{
	}

	[Address(RVA = "0xE67550", Offset = "0xE67550", VA = "0xE67550")]
	public void SetLaughterBlend(int amount)
	{
	}

	[Address(RVA = "0xE67618", Offset = "0xE67618", VA = "0xE67618")]
	public OVRLipSync.Result ResetContext()
	{
		return default(OVRLipSync.Result);
	}

	[Address(RVA = "0xE67030", Offset = "0xE67030", VA = "0xE67030")]
	public OVRLipSyncContextBase()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x65572C", Offset = "0x65572C")]
public class OVRLipSyncContextCanned : OVRLipSyncContextBase
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D5CC", Offset = "0x65D5CC")]
	public OVRLipSyncSequence currentSequence;

	[Address(RVA = "0xE67698", Offset = "0xE67698", VA = "0xE67698")]
	private void Update()
	{
	}

	[Address(RVA = "0xE678A4", Offset = "0xE678A4", VA = "0xE678A4")]
	public OVRLipSyncContextCanned()
	{
	}
}
public class OVRLipSyncContextMorphTarget : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D604", Offset = "0x65D604")]
	public SkinnedMeshRenderer skinnedMeshRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D63C", Offset = "0x65D63C")]
	public int[] visemeToBlendTargets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D674", Offset = "0x65D674")]
	public bool enableVisemeTestKeys;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D6AC", Offset = "0x65D6AC")]
	public KeyCode[] visemeTestKeys;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D6E4", Offset = "0x65D6E4")]
	public KeyCode laughterKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D71C", Offset = "0x65D71C")]
	public int laughterBlendTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65D754", Offset = "0x65D754")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D754", Offset = "0x65D754")]
	public float laughterThreshold;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65D7A8", Offset = "0x65D7A8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D7A8", Offset = "0x65D7A8")]
	public float laughterMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65D7FC", Offset = "0x65D7FC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D7FC", Offset = "0x65D7FC")]
	public int smoothAmount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OVRLipSyncContextBase lipsyncContext;

	[Address(RVA = "0xE678A8", Offset = "0xE678A8", VA = "0xE678A8")]
	private void Start()
	{
	}

	[Address(RVA = "0xE679F8", Offset = "0xE679F8", VA = "0xE679F8")]
	private void Update()
	{
	}

	[Address(RVA = "0xE67D74", Offset = "0xE67D74", VA = "0xE67D74")]
	private void CheckForKeys()
	{
	}

	[Address(RVA = "0xE67B2C", Offset = "0xE67B2C", VA = "0xE67B2C")]
	private void SetVisemeToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Address(RVA = "0xE67C70", Offset = "0xE67C70", VA = "0xE67C70")]
	private void SetLaughterToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Address(RVA = "0xE67E58", Offset = "0xE67E58", VA = "0xE67E58")]
	private void CheckVisemeKey(KeyCode key, int viseme, int amount)
	{
	}

	[Address(RVA = "0xE67F7C", Offset = "0xE67F7C", VA = "0xE67F7C")]
	private void CheckLaughterKey()
	{
	}

	[Address(RVA = "0xE67FF8", Offset = "0xE67FF8", VA = "0xE67FF8")]
	public OVRLipSyncContextMorphTarget()
	{
	}
}
public class OVRLipSyncContextTextureFlip : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D854", Offset = "0x65D854")]
	[AttributeAttribute(Name = "OVRNamedArrayAttribute", RVA = "0x65D854", Offset = "0x65D854")]
	public Texture[] Textures;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65D9D0", Offset = "0x65D9D0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65D9D0", Offset = "0x65D9D0")]
	public int smoothAmount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRLipSyncContextBase lipsyncContext;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OVRLipSync.Frame oldFrame;

	[Address(RVA = "0xE680F0", Offset = "0xE680F0", VA = "0xE680F0")]
	private void Start()
	{
	}

	[Address(RVA = "0xE68250", Offset = "0xE68250", VA = "0xE68250")]
	private void Update()
	{
	}

	[Address(RVA = "0xE684F4", Offset = "0xE684F4", VA = "0xE684F4")]
	private void SetVisemeToTexture()
	{
	}

	[Address(RVA = "0xE686F4", Offset = "0xE686F4", VA = "0xE686F4")]
	public OVRLipSyncContextTextureFlip()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655790", Offset = "0x655790")]
public class OVRLipSyncMicInput : MonoBehaviour
{
	public enum micActivation
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		HoldToSpeak,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PushToSpeak,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ConstantSpeak
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DA28", Offset = "0x65DA28")]
	public AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DA60", Offset = "0x65DA60")]
	public bool enableMicSelectionGUI;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DA98", Offset = "0x65DA98")]
	public KeyCode micSelectionGUIKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65DAD0", Offset = "0x65DAD0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DAD0", Offset = "0x65DAD0")]
	private float micInputVolume;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DB38", Offset = "0x65DB38")]
	private int micFrequency;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DB84", Offset = "0x65DB84")]
	public micActivation micControl;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DBBC", Offset = "0x65DBBC")]
	public KeyCode micActivationKey;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DBF4", Offset = "0x65DBF4")]
	public string selectedDevice;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool micSelected;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int minFreq;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int maxFreq;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool focused;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool initialized;

	public float MicFrequency
	{
		[Address(RVA = "0xE69214", Offset = "0xE69214", VA = "0xE69214")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0xE69220", Offset = "0xE69220", VA = "0xE69220")]
		set
		{
		}
	}

	[Address(RVA = "0xE692AC", Offset = "0xE692AC", VA = "0xE692AC")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE6936C", Offset = "0xE6936C", VA = "0xE6936C")]
	private void Start()
	{
	}

	[Address(RVA = "0xE693C4", Offset = "0xE693C4", VA = "0xE693C4")]
	private void InitializeMicrophone()
	{
	}

	[Address(RVA = "0xE693C8", Offset = "0xE693C8", VA = "0xE693C8")]
	private void Update()
	{
	}

	[Address(RVA = "0xE695FC", Offset = "0xE695FC", VA = "0xE695FC")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Address(RVA = "0xE69610", Offset = "0xE69610", VA = "0xE69610")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Address(RVA = "0xE69628", Offset = "0xE69628", VA = "0xE69628")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0xE6962C", Offset = "0xE6962C", VA = "0xE6962C")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0xE69648", Offset = "0xE69648", VA = "0xE69648")]
	public void MicDeviceGUI(float left, float top, float width, float height, float buttonSpaceTop, float buttonSpaceLeft)
	{
	}

	[Address(RVA = "0xE6964C", Offset = "0xE6964C", VA = "0xE6964C")]
	public void GetMicCaps()
	{
	}

	[Address(RVA = "0xE69650", Offset = "0xE69650", VA = "0xE69650")]
	public void StartMicrophone()
	{
	}

	[Address(RVA = "0xE69488", Offset = "0xE69488", VA = "0xE69488")]
	public void StopMicrophone()
	{
	}

	[Address(RVA = "0xE69654", Offset = "0xE69654", VA = "0xE69654")]
	private float GetAveragedVolume()
	{
		return default(float);
	}

	[Address(RVA = "0xE6965C", Offset = "0xE6965C", VA = "0xE6965C")]
	public OVRLipSyncMicInput()
	{
	}
}
[Serializable]
public class OVRLipSyncSequence : ScriptableObject
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OVRLipSync.Frame> entries;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float length;

	[Address(RVA = "0xE677AC", Offset = "0xE677AC", VA = "0xE677AC")]
	public OVRLipSync.Frame GetFrameAtTime(float time)
	{
		return null;
	}

	[Address(RVA = "0xE6968C", Offset = "0xE6968C", VA = "0xE6968C")]
	public OVRLipSyncSequence()
	{
	}
}
public class BufferedAudioStream
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const bool VerboseLogging = false;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioSource audio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float[] audioBuffer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int writePos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float bufferLengthSeconds = 0.25f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int sampleRate = 48000;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int bufferSize = 12000;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float playbackDelayTimeSeconds = 0.05f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float playbackDelayRemaining;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float remainingBufferTime;

	[Address(RVA = "0x8BB338", Offset = "0x8BB338", VA = "0x8BB338")]
	public BufferedAudioStream(AudioSource audio)
	{
	}

	[Address(RVA = "0x8BB470", Offset = "0x8BB470", VA = "0x8BB470")]
	public void Update()
	{
	}

	[Address(RVA = "0x8BB40C", Offset = "0x8BB40C", VA = "0x8BB40C")]
	private void Stop()
	{
	}

	[Address(RVA = "0x8BB674", Offset = "0x8BB674", VA = "0x8BB674")]
	public void AddData(float[] samples)
	{
	}
}
public class DebugUIBuilder : MonoBehaviour
{
	public delegate void OnClick();

	public delegate void OnToggleValueChange(Toggle t);

	public delegate void OnSlider(float f);

	public delegate bool ActiveUpdate();

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659D78", Offset = "0x659D78")]
	private sealed class <>c__DisplayClass36_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnClick handler;

		[Address(RVA = "0x7BB278", Offset = "0x7BB278", VA = "0x7BB278")]
		public <>c__DisplayClass36_0()
		{
		}

		[Address(RVA = "0x7BBDB0", Offset = "0x7BBDB0", VA = "0x7BBDB0")]
		internal void <AddButton>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659D88", Offset = "0x659D88")]
	private sealed class <>c__DisplayClass38_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnSlider onValueChanged;

		[Address(RVA = "0x7BB57C", Offset = "0x7BB57C", VA = "0x7BB57C")]
		public <>c__DisplayClass38_0()
		{
		}

		[Address(RVA = "0x7BC1DC", Offset = "0x7BC1DC", VA = "0x7BC1DC")]
		internal void <AddSlider>b__0(float f)
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659D98", Offset = "0x659D98")]
	private sealed class <>c__DisplayClass40_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Address(RVA = "0x7BB7C8", Offset = "0x7BB7C8", VA = "0x7BB7C8")]
		public <>c__DisplayClass40_0()
		{
		}

		[Address(RVA = "0x7BC668", Offset = "0x7BC668", VA = "0x7BC668")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659DA8", Offset = "0x659DA8")]
	private sealed class <>c__DisplayClass41_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Address(RVA = "0x7BB99C", Offset = "0x7BB99C", VA = "0x7BB99C")]
		public <>c__DisplayClass41_0()
		{
		}

		[Address(RVA = "0x7BCDCC", Offset = "0x7BCDCC", VA = "0x7BCDCC")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659DB8", Offset = "0x659DB8")]
	private sealed class <>c__DisplayClass42_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange handler;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle tb;

		[Address(RVA = "0x7BBC78", Offset = "0x7BBC78", VA = "0x7BBC78")]
		public <>c__DisplayClass42_0()
		{
		}

		[Address(RVA = "0x7BCDFC", Offset = "0x7BCDFC", VA = "0x7BCDFC")]
		internal void <AddRadio>b__0(bool <p0>)
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const int DEBUG_PANE_CENTER = 0;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const int DEBUG_PANE_LEFT = 2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool manuallyResizeContentPanels;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool[] reEnable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float elementSpacing = 16f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float marginH = 16f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const float marginV = 16f;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector2[] insertPositions;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<RectTransform>[] insertedElements;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 menuOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRCameraRig rig;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private LaserPointer lp;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private LineRenderer lr;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Address(RVA = "0x7B8C88", Offset = "0x7B8C88", VA = "0x7B8C88")]
	public void Awake()
	{
	}

	[Address(RVA = "0x7BA1B0", Offset = "0x7BA1B0", VA = "0x7BA1B0")]
	public void Show()
	{
	}

	[Address(RVA = "0x7BA9BC", Offset = "0x7BA9BC", VA = "0x7BA9BC")]
	public void Hide()
	{
	}

	[Address(RVA = "0x7BA6BC", Offset = "0x7BA6BC", VA = "0x7BA6BC")]
	private void Relayout()
	{
	}

	[Address(RVA = "0x7BABB0", Offset = "0x7BABB0", VA = "0x7BABB0")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Address(RVA = "0x7BAF6C", Offset = "0x7BAF6C", VA = "0x7BAF6C")]
	public RectTransform AddButton(string label, OnClick handler, int targetCanvas = 0)
	{
		return null;
	}

	[Address(RVA = "0x7BB280", Offset = "0x7BB280", VA = "0x7BB280")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Address(RVA = "0x7BB388", Offset = "0x7BB388", VA = "0x7BB388")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Address(RVA = "0x7BB584", Offset = "0x7BB584", VA = "0x7BB584")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Address(RVA = "0x7BB620", Offset = "0x7BB620", VA = "0x7BB620")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Address(RVA = "0x7BB7D0", Offset = "0x7BB7D0", VA = "0x7BB7D0")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Address(RVA = "0x7BB9A4", Offset = "0x7BB9A4", VA = "0x7BB9A4")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Address(RVA = "0x7BBC80", Offset = "0x7BBC80", VA = "0x7BBC80")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Address(RVA = "0x7BBD40", Offset = "0x7BBD40", VA = "0x7BBD40")]
	public DebugUIBuilder()
	{
	}
}
public class HandedInputSelector : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Address(RVA = "0x7042BC", Offset = "0x7042BC", VA = "0x7042BC")]
	private void Start()
	{
	}

	[Address(RVA = "0x704344", Offset = "0x704344", VA = "0x704344")]
	private void Update()
	{
	}

	[Address(RVA = "0x7043C4", Offset = "0x7043C4", VA = "0x7043C4")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Address(RVA = "0x704434", Offset = "0x704434", VA = "0x704434")]
	public HandedInputSelector()
	{
	}
}
public class LaserPointer : OVRCursor
{
	public enum LaserBeamBehavior
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		On,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Off,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OnWhenHitTarget
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 _startPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 _forward;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 _endPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool _hitTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LineRenderer lineRenderer;

	public LaserBeamBehavior laserBeamBehavior
	{
		[Address(RVA = "0x711E44", Offset = "0x711E44", VA = "0x711E44")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Address(RVA = "0x711DE8", Offset = "0x711DE8", VA = "0x711DE8")]
		set
		{
		}
	}

	[Address(RVA = "0x711E4C", Offset = "0x711E4C", VA = "0x711E4C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x711EA4", Offset = "0x711EA4", VA = "0x711EA4")]
	private void Start()
	{
	}

	[Address(RVA = "0x711F40", Offset = "0x711F40", VA = "0x711F40", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Address(RVA = "0x711F5C", Offset = "0x711F5C", VA = "0x711F5C", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Address(RVA = "0x711FD4", Offset = "0x711FD4", VA = "0x711FD4")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x7122B8", Offset = "0x7122B8", VA = "0x7122B8")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Address(RVA = "0x712414", Offset = "0x712414", VA = "0x712414")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7124B0", Offset = "0x7124B0", VA = "0x7124B0")]
	public LaserPointer()
	{
	}
}
public class BoundsLockedObject : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_initialOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig m_playerOrigin;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GuardianBoundaryEnforcer m_enforcer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Bounds? m_bounds;

	[Address(RVA = "0x8B688C", Offset = "0x8B688C", VA = "0x8B688C")]
	private void Start()
	{
	}

	[Address(RVA = "0x8B6AE0", Offset = "0x8B6AE0", VA = "0x8B6AE0")]
	private void RefreshDisplay()
	{
	}

	[Address(RVA = "0x8B7018", Offset = "0x8B7018", VA = "0x8B7018")]
	public BoundsLockedObject()
	{
	}
}
public class GuardianBoundaryDisplay : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GuardianBoundaryEnforcer m_enforcer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRBoundary.BoundaryType m_boundaryType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_errorDisplay;

	[Address(RVA = "0x701E2C", Offset = "0x701E2C", VA = "0x701E2C")]
	private void Start()
	{
	}

	[Address(RVA = "0x701FAC", Offset = "0x701FAC", VA = "0x701FAC")]
	private void RefreshDisplay()
	{
	}

	[Address(RVA = "0x702214", Offset = "0x702214", VA = "0x702214")]
	public GuardianBoundaryDisplay()
	{
	}
}
public class GuardianBoundaryEnforcer : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_AllowRecenter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig m_mainCamera;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion m_originalTrackerOrientation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_framecount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion m_orientToOriginalForward;

	public Quaternion OrientToOriginalForward
	{
		[Address(RVA = "0x702308", Offset = "0x702308", VA = "0x702308")]
		get
		{
			return default(Quaternion);
		}
	}

	public event Action TrackingChanged
	{
		[Address(RVA = "0x701EC0", Offset = "0x701EC0", VA = "0x701EC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6746F0", Offset = "0x6746F0")]
		add
		{
		}
		[Address(RVA = "0x70221C", Offset = "0x70221C", VA = "0x70221C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674700", Offset = "0x674700")]
		remove
		{
		}
	}

	[Address(RVA = "0x702314", Offset = "0x702314", VA = "0x702314")]
	private void Start()
	{
	}

	[Address(RVA = "0x702448", Offset = "0x702448", VA = "0x702448")]
	private void Update()
	{
	}

	[Address(RVA = "0x702600", Offset = "0x702600", VA = "0x702600")]
	private void Recentered()
	{
	}

	[Address(RVA = "0x702608", Offset = "0x702608", VA = "0x702608")]
	public GuardianBoundaryEnforcer()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x6557F4", Offset = "0x6557F4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x6557F4", Offset = "0x6557F4")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DCEC", Offset = "0x65DCEC")]
	public OVRCameraRig CameraRig;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DD24", Offset = "0x65DD24")]
	public float CurrentDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DD5C", Offset = "0x65DD5C")]
	public bool EnableFadeout;

	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DD94", Offset = "0x65DD94")]
	public bool EnableCollision;

	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DDCC", Offset = "0x65DDCC")]
	public bool DynamicHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DE04", Offset = "0x65DE04")]
	public float MaxFade;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DE3C", Offset = "0x65DE3C")]
	public float FadeMinDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DE74", Offset = "0x65DE74")]
	public float FadeMaxDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _cameraUpdateAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action _preCharacterMovementAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CharacterController _character;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OVRPlayerController _playerController;

	[Address(RVA = "0x8BDA90", Offset = "0x8BDA90", VA = "0x8BDA90")]
	private CharacterCameraConstraint()
	{
	}

	[Address(RVA = "0x8BDB54", Offset = "0x8BDB54", VA = "0x8BDB54")]
	private void Awake()
	{
	}

	[Address(RVA = "0x8BDBC4", Offset = "0x8BDBC4", VA = "0x8BDBC4")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x8BDC2C", Offset = "0x8BDC2C", VA = "0x8BDC2C")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x8BDC94", Offset = "0x8BDC94", VA = "0x8BDC94")]
	private void CameraUpdate()
	{
	}

	[Address(RVA = "0x8BE0F0", Offset = "0x8BE0F0", VA = "0x8BE0F0")]
	private void PreCharacterMovement()
	{
	}
}
public class LocomotionController : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CharacterController CharacterController;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRPlayerController PlayerController;

	[Address(RVA = "0x835C18", Offset = "0x835C18", VA = "0x835C18")]
	private void Start()
	{
	}

	[Address(RVA = "0x835D54", Offset = "0x835D54", VA = "0x835D54")]
	public LocomotionController()
	{
	}
}
public class LocomotionTeleport : MonoBehaviour
{
	public enum States
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Ready,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Aim,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CancelAim,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PreTeleport,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CancelTeleport,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Teleporting,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PostTeleport
	}

	public enum TeleportIntentions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Aim,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PreTeleport,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Teleport
	}

	public enum AimCollisionTypes
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Point,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Sphere,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Capsule
	}

	public class AimData
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673F9C", Offset = "0x673F9C")]
		private List<Vector3> <Points>k__BackingField;

		public List<Vector3> Points
		{
			[Address(RVA = "0x839E64", Offset = "0x839E64", VA = "0x839E64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x682110", Offset = "0x682110")]
			get
			{
				return null;
			}
			[Address(RVA = "0x839E5C", Offset = "0x839E5C", VA = "0x839E5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x682120", Offset = "0x682120")]
			private set
			{
			}
		}

		[Address(RVA = "0x839DE8", Offset = "0x839DE8", VA = "0x839DE8")]
		public AimData()
		{
		}

		[Address(RVA = "0x839E6C", Offset = "0x839E6C", VA = "0x839E6C")]
		public void Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659DC8", Offset = "0x659DC8")]
	private sealed class <ReadyStateCoroutine>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x839BC4", Offset = "0x839BC4", VA = "0x839BC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x839C34", Offset = "0x839C34", VA = "0x839C34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x837814", Offset = "0x837814", VA = "0x837814")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__50(int <>1__state)
		{
		}

		[Address(RVA = "0x839A58", Offset = "0x839A58", VA = "0x839A58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x839A5C", Offset = "0x839A5C", VA = "0x839A5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x839BCC", Offset = "0x839BCC", VA = "0x839BCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659DD8", Offset = "0x659DD8")]
	private sealed class <AimStateCoroutine>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x839394", Offset = "0x839394", VA = "0x839394", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x839404", Offset = "0x839404", VA = "0x839404", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x837EB0", Offset = "0x837EB0", VA = "0x837EB0")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__62(int <>1__state)
		{
		}

		[Address(RVA = "0x8391C8", Offset = "0x8391C8", VA = "0x8391C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8391CC", Offset = "0x8391CC", VA = "0x8391CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x83939C", Offset = "0x83939C", VA = "0x83939C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659DE8", Offset = "0x659DE8")]
	private sealed class <CancelAimStateCoroutine>d__66 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8394E8", Offset = "0x8394E8", VA = "0x8394E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x839558", Offset = "0x839558", VA = "0x839558", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x838128", Offset = "0x838128", VA = "0x838128")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__66(int <>1__state)
		{
		}

		[Address(RVA = "0x83940C", Offset = "0x83940C", VA = "0x83940C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x839410", Offset = "0x839410", VA = "0x839410", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8394F0", Offset = "0x8394F0", VA = "0x8394F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659DF8", Offset = "0x659DF8")]
	private sealed class <PreTeleportStateCoroutine>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8399E0", Offset = "0x8399E0", VA = "0x8399E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x839A50", Offset = "0x839A50", VA = "0x839A50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8383A0", Offset = "0x8383A0", VA = "0x8383A0")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__70(int <>1__state)
		{
		}

		[Address(RVA = "0x839894", Offset = "0x839894", VA = "0x839894", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x839898", Offset = "0x839898", VA = "0x839898", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8399E8", Offset = "0x8399E8", VA = "0x8399E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E08", Offset = "0x659E08")]
	private sealed class <CancelTeleportStateCoroutine>d__74 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x83963C", Offset = "0x83963C", VA = "0x83963C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8396AC", Offset = "0x8396AC", VA = "0x8396AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x838618", Offset = "0x838618", VA = "0x838618")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__74(int <>1__state)
		{
		}

		[Address(RVA = "0x839560", Offset = "0x839560", VA = "0x839560", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x839564", Offset = "0x839564", VA = "0x839564", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x839644", Offset = "0x839644", VA = "0x839644", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E18", Offset = "0x659E18")]
	private sealed class <TeleportingStateCoroutine>d__78 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x839D70", Offset = "0x839D70", VA = "0x839D70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x839DE0", Offset = "0x839DE0", VA = "0x839DE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x838890", Offset = "0x838890", VA = "0x838890")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__78(int <>1__state)
		{
		}

		[Address(RVA = "0x839C3C", Offset = "0x839C3C", VA = "0x839C3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x839C40", Offset = "0x839C40", VA = "0x839C40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x839D78", Offset = "0x839D78", VA = "0x839D78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E28", Offset = "0x659E28")]
	private sealed class <PostTeleportStateCoroutine>d__82 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x83981C", Offset = "0x83981C", VA = "0x83981C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x83988C", Offset = "0x83988C", VA = "0x83988C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x838B08", Offset = "0x838B08", VA = "0x838B08")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__82(int <>1__state)
		{
		}

		[Address(RVA = "0x8396B4", Offset = "0x8396B4", VA = "0x8396B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8396B8", Offset = "0x8396B8", VA = "0x8396B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x839824", Offset = "0x839824", VA = "0x839824", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DEAC", Offset = "0x65DEAC")]
	public bool EnableMovementDuringReady;

	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DEE4", Offset = "0x65DEE4")]
	public bool EnableMovementDuringAim;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DF1C", Offset = "0x65DF1C")]
	public bool EnableMovementDuringPreTeleport;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DF54", Offset = "0x65DF54")]
	public bool EnableMovementDuringPostTeleport;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DF8C", Offset = "0x65DF8C")]
	public bool EnableRotationDuringReady;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DFC4", Offset = "0x65DFC4")]
	public bool EnableRotationDuringAim;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65DFFC", Offset = "0x65DFFC")]
	public bool EnableRotationDuringPreTeleport;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E034", Offset = "0x65E034")]
	public bool EnableRotationDuringPostTeleport;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65E06C", Offset = "0x65E06C")]
	private States <CurrentState>k__BackingField;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E07C", Offset = "0x65E07C")]
	public TeleportDestination TeleportDestinationPrefab;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool IsTransitioning;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	public bool IsPostTeleportRequested;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private TeleportDestination _teleportDestination;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65E0C4", Offset = "0x65E0C4")]
	private LocomotionController <LocomotionController>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E0D4", Offset = "0x65E0D4")]
	public AimCollisionTypes AimCollisionType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E10C", Offset = "0x65E10C")]
	public bool UseCharacterCollisionData;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E144", Offset = "0x65E144")]
	public float AimCollisionRadius;

	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E17C", Offset = "0x65E17C")]
	public float AimCollisionHeight;

	public States CurrentState
	{
		[Address(RVA = "0x836B40", Offset = "0x836B40", VA = "0x836B40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674710", Offset = "0x674710")]
		get
		{
			return default(States);
		}
		[Address(RVA = "0x836B48", Offset = "0x836B48", VA = "0x836B48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674720", Offset = "0x674720")]
		private set
		{
		}
	}

	public Quaternion DestinationRotation
	{
		[Address(RVA = "0x836E08", Offset = "0x836E08", VA = "0x836E08")]
		get
		{
			return default(Quaternion);
		}
	}

	public LocomotionController LocomotionController
	{
		[Address(RVA = "0x836E48", Offset = "0x836E48", VA = "0x836E48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674750", Offset = "0x674750")]
		get
		{
			return null;
		}
		[Address(RVA = "0x836E50", Offset = "0x836E50", VA = "0x836E50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674760", Offset = "0x674760")]
		private set
		{
		}
	}

	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Address(RVA = "0x836B50", Offset = "0x836B50", VA = "0x836B50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674730", Offset = "0x674730")]
		add
		{
		}
		[Address(RVA = "0x836C3C", Offset = "0x836C3C", VA = "0x836C3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674740", Offset = "0x674740")]
		remove
		{
		}
	}

	public event Action EnterStateReady
	{
		[Address(RVA = "0x83763C", Offset = "0x83763C", VA = "0x83763C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6747A8", Offset = "0x6747A8")]
		add
		{
		}
		[Address(RVA = "0x837728", Offset = "0x837728", VA = "0x837728")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6747B8", Offset = "0x6747B8")]
		remove
		{
		}
	}

	public event Action EnterStateAim
	{
		[Address(RVA = "0x837840", Offset = "0x837840", VA = "0x837840")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67482C", Offset = "0x67482C")]
		add
		{
		}
		[Address(RVA = "0x83792C", Offset = "0x83792C", VA = "0x83792C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67483C", Offset = "0x67483C")]
		remove
		{
		}
	}

	public event Action<AimData> UpdateAimData
	{
		[Address(RVA = "0x837A18", Offset = "0x837A18", VA = "0x837A18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67484C", Offset = "0x67484C")]
		add
		{
		}
		[Address(RVA = "0x837B04", Offset = "0x837B04", VA = "0x837B04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67485C", Offset = "0x67485C")]
		remove
		{
		}
	}

	public event Action ExitStateAim
	{
		[Address(RVA = "0x837C64", Offset = "0x837C64", VA = "0x837C64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67486C", Offset = "0x67486C")]
		add
		{
		}
		[Address(RVA = "0x837D50", Offset = "0x837D50", VA = "0x837D50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67487C", Offset = "0x67487C")]
		remove
		{
		}
	}

	public event Action EnterStateCancelAim
	{
		[Address(RVA = "0x837EDC", Offset = "0x837EDC", VA = "0x837EDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6748F0", Offset = "0x6748F0")]
		add
		{
		}
		[Address(RVA = "0x837FC8", Offset = "0x837FC8", VA = "0x837FC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674900", Offset = "0x674900")]
		remove
		{
		}
	}

	public event Action EnterStatePreTeleport
	{
		[Address(RVA = "0x838154", Offset = "0x838154", VA = "0x838154")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674974", Offset = "0x674974")]
		add
		{
		}
		[Address(RVA = "0x838240", Offset = "0x838240", VA = "0x838240")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674984", Offset = "0x674984")]
		remove
		{
		}
	}

	public event Action EnterStateCancelTeleport
	{
		[Address(RVA = "0x8383CC", Offset = "0x8383CC", VA = "0x8383CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6749F8", Offset = "0x6749F8")]
		add
		{
		}
		[Address(RVA = "0x8384B8", Offset = "0x8384B8", VA = "0x8384B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674A08", Offset = "0x674A08")]
		remove
		{
		}
	}

	public event Action EnterStateTeleporting
	{
		[Address(RVA = "0x838644", Offset = "0x838644", VA = "0x838644")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674A7C", Offset = "0x674A7C")]
		add
		{
		}
		[Address(RVA = "0x838730", Offset = "0x838730", VA = "0x838730")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674A8C", Offset = "0x674A8C")]
		remove
		{
		}
	}

	public event Action EnterStatePostTeleport
	{
		[Address(RVA = "0x8388BC", Offset = "0x8388BC", VA = "0x8388BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674B00", Offset = "0x674B00")]
		add
		{
		}
		[Address(RVA = "0x8389A8", Offset = "0x8389A8", VA = "0x8389A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674B10", Offset = "0x674B10")]
		remove
		{
		}
	}

	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Address(RVA = "0x838B34", Offset = "0x838B34", VA = "0x838B34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674B84", Offset = "0x674B84")]
		add
		{
		}
		[Address(RVA = "0x838C20", Offset = "0x838C20", VA = "0x838C20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674B94", Offset = "0x674B94")]
		remove
		{
		}
	}

	[Address(RVA = "0x836668", Offset = "0x836668", VA = "0x836668")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Address(RVA = "0x83668C", Offset = "0x83668C", VA = "0x83668C")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Address(RVA = "0x836D28", Offset = "0x836D28", VA = "0x836D28")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Address(RVA = "0x836E58", Offset = "0x836E58", VA = "0x836E58")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Address(RVA = "0x83722C", Offset = "0x83722C", VA = "0x83722C")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x674770", Offset = "0x674770")]
	protected void LogState(string msg)
	{
	}

	[Address(RVA = "0x8372E4", Offset = "0x8372E4", VA = "0x8372E4")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Address(RVA = "0x8373C4", Offset = "0x8373C4", VA = "0x8373C4")]
	private void DeactivateDestination()
	{
	}

	[Address(RVA = "0x8373F4", Offset = "0x8373F4", VA = "0x8373F4")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Address(RVA = "0x8374C0", Offset = "0x8374C0", VA = "0x8374C0")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Address(RVA = "0x83753C", Offset = "0x83753C", VA = "0x83753C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x837598", Offset = "0x837598", VA = "0x837598", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Address(RVA = "0x8375C8", Offset = "0x8375C8", VA = "0x8375C8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6747C8", Offset = "0x6747C8")]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x837BF0", Offset = "0x837BF0", VA = "0x837BF0")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Address(RVA = "0x837E3C", Offset = "0x837E3C", VA = "0x837E3C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67488C", Offset = "0x67488C")]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x8380B4", Offset = "0x8380B4", VA = "0x8380B4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674910", Offset = "0x674910")]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x83832C", Offset = "0x83832C", VA = "0x83832C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674994", Offset = "0x674994")]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x8385A4", Offset = "0x8385A4", VA = "0x8385A4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674A18", Offset = "0x674A18")]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x83881C", Offset = "0x83881C", VA = "0x83881C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674A9C", Offset = "0x674A9C")]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x838A94", Offset = "0x838A94", VA = "0x838A94")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674B20", Offset = "0x674B20")]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x838D0C", Offset = "0x838D0C", VA = "0x838D0C")]
	public void DoTeleport()
	{
	}

	[Address(RVA = "0x838EDC", Offset = "0x838EDC", VA = "0x838EDC")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x838F34", Offset = "0x838F34", VA = "0x838F34")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Address(RVA = "0x838FFC", Offset = "0x838FFC", VA = "0x838FFC")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Address(RVA = "0x8391B8", Offset = "0x8391B8", VA = "0x8391B8")]
	public LocomotionTeleport()
	{
	}
}
public abstract class TeleportAimHandler : TeleportSupport
{
	[Address(RVA = "0x72B578", Offset = "0x72B578", VA = "0x72B578", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Address(RVA = "0x72B618", Offset = "0x72B618", VA = "0x72B618", Slot = "5")]
	protected override void OnDisable()
	{
	}

	public abstract void GetPoints(List<Vector3> points);

	[Address(RVA = "0x72B6F4", Offset = "0x72B6F4", VA = "0x72B6F4")]
	protected TeleportAimHandler()
	{
	}
}
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E254", Offset = "0x65E254")]
	public float Range;

	[Address(RVA = "0x72B704", Offset = "0x72B704", VA = "0x72B704", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Address(RVA = "0x72B8B4", Offset = "0x72B8B4", VA = "0x72B8B4")]
	public TeleportAimHandlerLaser()
	{
	}
}
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E28C", Offset = "0x65E28C")]
	public float Range;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E2C4", Offset = "0x65E2C4")]
	public float MinimumElevation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E2FC", Offset = "0x65E2FC")]
	public float Gravity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E334", Offset = "0x65E334")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65E334", Offset = "0x65E334")]
	public float AimVelocity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E390", Offset = "0x65E390")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65E390", Offset = "0x65E390")]
	public float AimStep;

	[Address(RVA = "0x72B8C4", Offset = "0x72B8C4", VA = "0x72B8C4", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Address(RVA = "0x72BB28", Offset = "0x72BB28", VA = "0x72BB28")]
	public TeleportAimHandlerParabolic()
	{
	}
}
public class TeleportAimVisualLaser : TeleportSupport
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E3E8", Offset = "0x65E3E8")]
	public LineRenderer LaserPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Address(RVA = "0x72BB3C", Offset = "0x72BB3C", VA = "0x72BB3C")]
	public TeleportAimVisualLaser()
	{
	}

	[Address(RVA = "0x72BC20", Offset = "0x72BC20", VA = "0x72BC20")]
	private void EnterAimState()
	{
	}

	[Address(RVA = "0x72BC6C", Offset = "0x72BC6C", VA = "0x72BC6C")]
	private void ExitAimState()
	{
	}

	[Address(RVA = "0x72BCB8", Offset = "0x72BCB8", VA = "0x72BCB8")]
	private void Awake()
	{
	}

	[Address(RVA = "0x72BD6C", Offset = "0x72BD6C", VA = "0x72BD6C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Address(RVA = "0x72BE0C", Offset = "0x72BE0C", VA = "0x72BE0C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Address(RVA = "0x72BEA8", Offset = "0x72BEA8", VA = "0x72BEA8")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
public class TeleportDestination : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65E420", Offset = "0x65E420")]
	private bool <IsValidDestination>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E430", Offset = "0x65E430")]
	public Transform PositionIndicator;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E468", Offset = "0x65E468")]
	public Transform OrientationIndicator;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E4A0", Offset = "0x65E4A0")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	public bool IsValidDestination
	{
		[Address(RVA = "0x72C064", Offset = "0x72C064", VA = "0x72C064")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674BA4", Offset = "0x674BA4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x72C06C", Offset = "0x72C06C", VA = "0x72C06C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674BB4", Offset = "0x674BB4")]
		private set
		{
		}
	}

	public event Action<TeleportDestination> Deactivated
	{
		[Address(RVA = "0x72C27C", Offset = "0x72C27C", VA = "0x72C27C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674BC4", Offset = "0x674BC4")]
		add
		{
		}
		[Address(RVA = "0x72C368", Offset = "0x72C368", VA = "0x72C368")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674BD4", Offset = "0x674BD4")]
		remove
		{
		}
	}

	[Address(RVA = "0x72C078", Offset = "0x72C078", VA = "0x72C078")]
	private TeleportDestination()
	{
	}

	[Address(RVA = "0x72C108", Offset = "0x72C108", VA = "0x72C108")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x72C224", Offset = "0x72C224", VA = "0x72C224")]
	private void TryDisableEventHandlers()
	{
	}

	[Address(RVA = "0x72C278", Offset = "0x72C278", VA = "0x72C278")]
	public void OnDisable()
	{
	}

	[Address(RVA = "0x72C454", Offset = "0x72C454", VA = "0x72C454")]
	public void OnDeactivated()
	{
	}

	[Address(RVA = "0x72C4BC", Offset = "0x72C4BC", VA = "0x72C4BC")]
	public void Recycle()
	{
	}

	[Address(RVA = "0x72C4F4", Offset = "0x72C4F4", VA = "0x72C4F4", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
public abstract class TeleportInputHandler : TeleportSupport
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E38", Offset = "0x659E38")]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72CD4C", Offset = "0x72CD4C", VA = "0x72CD4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72CDBC", Offset = "0x72CDBC", VA = "0x72CDBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72CA64", Offset = "0x72CA64", VA = "0x72CA64")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Address(RVA = "0x72CCB0", Offset = "0x72CCB0", VA = "0x72CCB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72CCB4", Offset = "0x72CCB4", VA = "0x72CCB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72CD54", Offset = "0x72CD54", VA = "0x72CD54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E48", Offset = "0x659E48")]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72CC38", Offset = "0x72CC38", VA = "0x72CC38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72CCA8", Offset = "0x72CCA8", VA = "0x72CCA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72CB04", Offset = "0x72CB04", VA = "0x72CB04")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Address(RVA = "0x72CB88", Offset = "0x72CB88", VA = "0x72CB88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72CB8C", Offset = "0x72CB8C", VA = "0x72CB8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72CC40", Offset = "0x72CC40", VA = "0x72CC40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Address(RVA = "0x72C7D0", Offset = "0x72C7D0", VA = "0x72C7D0")]
	protected TeleportInputHandler()
	{
	}

	[Address(RVA = "0x72C87C", Offset = "0x72C87C", VA = "0x72C87C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Address(RVA = "0x72C900", Offset = "0x72C900", VA = "0x72C900", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Address(RVA = "0x72C9F0", Offset = "0x72C9F0", VA = "0x72C9F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674BE4", Offset = "0x674BE4")]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x72CA90", Offset = "0x72CA90", VA = "0x72CA90")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674C48", Offset = "0x674C48")]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	public abstract void GetAimData(out Ray aimRay);

	[Address(RVA = "0x72CB30", Offset = "0x72CB30", VA = "0x72CB30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674CAC", Offset = "0x674CAC")]
	private void <.ctor>b__2_0()
	{
	}

	[Address(RVA = "0x72CB5C", Offset = "0x72CB5C", VA = "0x72CB5C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674CBC", Offset = "0x674CBC")]
	private void <.ctor>b__2_1()
	{
	}
}
public class TeleportInputHandlerAvatarTouch : TeleportInputHandlerHMD
{
	public enum InputModes
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CapacitiveButtonForAimAndTeleport,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SeparateButtonsForAimAndTeleport,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ThumbstickTeleport,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ThumbstickTeleportForwardBackOnly
	}

	public enum AimCapTouchButtons
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		A,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		B,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LeftTrigger,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LeftThumbstick,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RightTrigger,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RightThumbstick,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		X,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Y
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E4E8", Offset = "0x65E4E8")]
	public OvrAvatar Avatar;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E520", Offset = "0x65E520")]
	public InputModes InputMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E558", Offset = "0x65E558")]
	public OVRInput.Controller AimingController;

	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private OVRInput.Controller InitiatingController;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E590", Offset = "0x65E590")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E5C8", Offset = "0x65E5C8")]
	public float ThumbstickTeleportThreshold;

	[Address(RVA = "0x72CDC4", Offset = "0x72CDC4", VA = "0x72CDC4")]
	private void Start()
	{
	}

	[Address(RVA = "0x72CEA4", Offset = "0x72CEA4", VA = "0x72CEA4", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Address(RVA = "0x72D4C4", Offset = "0x72D4C4", VA = "0x72D4C4", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Address(RVA = "0x72D5C4", Offset = "0x72D5C4", VA = "0x72D5C4")]
	public TeleportInputHandlerAvatarTouch()
	{
	}
}
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65E600", Offset = "0x65E600")]
	private Transform <Pointer>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E610", Offset = "0x65E610")]
	public OVRInput.RawButton AimButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E648", Offset = "0x65E648")]
	public OVRInput.RawButton TeleportButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E680", Offset = "0x65E680")]
	public bool FastTeleport;

	public Transform Pointer
	{
		[Address(RVA = "0x72D674", Offset = "0x72D674", VA = "0x72D674")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674CCC", Offset = "0x674CCC")]
		get
		{
			return null;
		}
		[Address(RVA = "0x72D67C", Offset = "0x72D67C", VA = "0x72D67C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674CDC", Offset = "0x674CDC")]
		private set
		{
		}
	}

	[Address(RVA = "0x72D35C", Offset = "0x72D35C", VA = "0x72D35C", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Address(RVA = "0x72D684", Offset = "0x72D684", VA = "0x72D684", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Address(RVA = "0x72D670", Offset = "0x72D670", VA = "0x72D670")]
	public TeleportInputHandlerHMD()
	{
	}
}
public abstract class TeleportOrientationHandler : TeleportSupport
{
	public enum OrientationModes
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		HeadRelative,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ForwardFacing
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E58", Offset = "0x659E58")]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72DC18", Offset = "0x72DC18", VA = "0x72DC18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72DC88", Offset = "0x72DC88", VA = "0x72DC88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72D980", Offset = "0x72D980", VA = "0x72D980")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Address(RVA = "0x72DB2C", Offset = "0x72DB2C", VA = "0x72DB2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72DB30", Offset = "0x72DB30", VA = "0x72DB30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72DC20", Offset = "0x72DC20", VA = "0x72DC20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Address(RVA = "0x72D774", Offset = "0x72D774", VA = "0x72D774")]
	protected TeleportOrientationHandler()
	{
	}

	[Address(RVA = "0x72D828", Offset = "0x72D828", VA = "0x72D828")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Address(RVA = "0x72D830", Offset = "0x72D830", VA = "0x72D830", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Address(RVA = "0x72D8A0", Offset = "0x72D8A0", VA = "0x72D8A0", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Address(RVA = "0x72D90C", Offset = "0x72D90C", VA = "0x72D90C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674CEC", Offset = "0x674CEC")]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	protected abstract void InitializeTeleportDestination();

	protected abstract void UpdateTeleportDestination();

	[Address(RVA = "0x72D9AC", Offset = "0x72D9AC", VA = "0x72D9AC")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Address(RVA = "0x72DB00", Offset = "0x72DB00", VA = "0x72DB00")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674D50", Offset = "0x674D50")]
	private void <.ctor>b__3_0()
	{
	}
}
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Address(RVA = "0x72DC90", Offset = "0x72DC90", VA = "0x72DC90", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Address(RVA = "0x72DC94", Offset = "0x72DC94", VA = "0x72DC94", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Address(RVA = "0x72DD50", Offset = "0x72DD50", VA = "0x72DD50")]
	public TeleportOrientationHandler360()
	{
	}
}
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E6B8", Offset = "0x65E6B8")]
	public OrientationModes OrientationMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E6F0", Offset = "0x65E6F0")]
	public bool UpdateOrientationDuringAim;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E728", Offset = "0x65E728")]
	public float AimDistanceThreshold;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E760", Offset = "0x65E760")]
	public float AimDistanceMaxRange;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Address(RVA = "0x72DD54", Offset = "0x72DD54", VA = "0x72DD54", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Address(RVA = "0x72DDC4", Offset = "0x72DDC4", VA = "0x72DDC4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Address(RVA = "0x72E330", Offset = "0x72E330", VA = "0x72E330")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E798", Offset = "0x65E798")]
	public OrientationModes OrientationMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E7D0", Offset = "0x65E7D0")]
	public OVRInput.Controller Thumbstick;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E808", Offset = "0x65E808")]
	public float RotateStickThreshold;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Address(RVA = "0x72E334", Offset = "0x72E334", VA = "0x72E334", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Address(RVA = "0x72E380", Offset = "0x72E380", VA = "0x72E380", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Address(RVA = "0x72E868", Offset = "0x72E868", VA = "0x72E868")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
public class TeleportPoint : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Address(RVA = "0x72E878", Offset = "0x72E878", VA = "0x72E878")]
	private void Start()
	{
	}

	[Address(RVA = "0x72E87C", Offset = "0x72E87C", VA = "0x72E87C")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Address(RVA = "0x72E884", Offset = "0x72E884", VA = "0x72E884")]
	private void Update()
	{
	}

	[Address(RVA = "0x72E980", Offset = "0x72E980", VA = "0x72E980")]
	public void OnLookAt()
	{
	}

	[Address(RVA = "0x72E9A8", Offset = "0x72E9A8", VA = "0x72E9A8")]
	public TeleportPoint()
	{
	}
}
public abstract class TeleportSupport : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65E840", Offset = "0x65E840")]
	private LocomotionTeleport <LocomotionTeleport>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	protected LocomotionTeleport LocomotionTeleport
	{
		[Address(RVA = "0x72B610", Offset = "0x72B610", VA = "0x72B610")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674D60", Offset = "0x674D60")]
		get
		{
			return null;
		}
		[Address(RVA = "0x72E9C0", Offset = "0x72E9C0", VA = "0x72E9C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674D70", Offset = "0x674D70")]
		private set
		{
		}
	}

	[Address(RVA = "0x72B5AC", Offset = "0x72B5AC", VA = "0x72B5AC", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Address(RVA = "0x72B6C8", Offset = "0x72B6C8", VA = "0x72B6C8", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Address(RVA = "0x72E9C8", Offset = "0x72E9C8", VA = "0x72E9C8")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x674D80", Offset = "0x674D80")]
	private void LogEventHandler(string msg)
	{
	}

	[Address(RVA = "0x72BE00", Offset = "0x72BE00", VA = "0x72BE00", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Address(RVA = "0x72BEA0", Offset = "0x72BEA0", VA = "0x72BEA0", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Address(RVA = "0x72B6FC", Offset = "0x72B6FC", VA = "0x72B6FC")]
	protected TeleportSupport()
	{
	}
}
public abstract class TeleportTargetHandler : TeleportSupport
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E68", Offset = "0x659E68")]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72F1E4", Offset = "0x72F1E4", VA = "0x72F1E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72F254", Offset = "0x72F254", VA = "0x72F254", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72EC4C", Offset = "0x72EC4C", VA = "0x72EC4C")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Address(RVA = "0x72EE74", Offset = "0x72EE74", VA = "0x72EE74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72EE78", Offset = "0x72EE78", VA = "0x72EE78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72F1EC", Offset = "0x72F1EC", VA = "0x72F1EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E850", Offset = "0x65E850")]
	public LayerMask AimCollisionLayerMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Address(RVA = "0x72EA98", Offset = "0x72EA98", VA = "0x72EA98")]
	protected TeleportTargetHandler()
	{
	}

	[Address(RVA = "0x72EB5C", Offset = "0x72EB5C", VA = "0x72EB5C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Address(RVA = "0x72EB9C", Offset = "0x72EB9C", VA = "0x72EB9C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Address(RVA = "0x72EBD8", Offset = "0x72EBD8", VA = "0x72EBD8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674DB8", Offset = "0x674DB8")]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x72EC78", Offset = "0x72EC78", VA = "0x72EC78", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Address(RVA = "0x72ECA8", Offset = "0x72ECA8", VA = "0x72ECA8", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Address(RVA = "0x72EE48", Offset = "0x72EE48", VA = "0x72EE48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674E1C", Offset = "0x674E1C")]
	private void <.ctor>b__3_0()
	{
	}
}
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Address(RVA = "0x72F25C", Offset = "0x72F25C", VA = "0x72F25C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x72F2BC", Offset = "0x72F2BC", VA = "0x72F2BC", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Address(RVA = "0x72F45C", Offset = "0x72F45C", VA = "0x72F45C", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Address(RVA = "0x72F594", Offset = "0x72F594", VA = "0x72F594")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x674E2C", Offset = "0x674E2C")]
	private void OnDrawGizmos()
	{
	}

	[Address(RVA = "0x72F598", Offset = "0x72F598", VA = "0x72F598")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E888", Offset = "0x65E888")]
	public float LOSOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E8C0", Offset = "0x65E8C0")]
	public LayerMask TeleportLayerMask;

	[Address(RVA = "0x72F5A4", Offset = "0x72F5A4", VA = "0x72F5A4", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Address(RVA = "0x72F830", Offset = "0x72F830", VA = "0x72F830")]
	public TeleportTargetHandlerNode()
	{
	}
}
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Address(RVA = "0x72F83C", Offset = "0x72F83C", VA = "0x72F83C", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Address(RVA = "0x72F9DC", Offset = "0x72F9DC", VA = "0x72F9DC")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
public abstract class TeleportTransition : TeleportSupport
{
	[Address(RVA = "0x72F9E0", Offset = "0x72F9E0", VA = "0x72F9E0", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Address(RVA = "0x72FA88", Offset = "0x72FA88", VA = "0x72FA88", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Address(RVA = "0x72FB2C", Offset = "0x72FB2C", VA = "0x72FB2C")]
	protected TeleportTransition()
	{
	}
}
public class TeleportTransitionBlink : TeleportTransition
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E78", Offset = "0x659E78")]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72FEFC", Offset = "0x72FEFC", VA = "0x72FEFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72FF6C", Offset = "0x72FF6C", VA = "0x72FF6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72FBD4", Offset = "0x72FBD4", VA = "0x72FBD4")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Address(RVA = "0x72FDC0", Offset = "0x72FDC0", VA = "0x72FDC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72FDC4", Offset = "0x72FDC4", VA = "0x72FDC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72FF04", Offset = "0x72FF04", VA = "0x72FF04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E8F8", Offset = "0x65E8F8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65E8F8", Offset = "0x65E8F8")]
	public float TransitionDuration;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E950", Offset = "0x65E950")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65E950", Offset = "0x65E950")]
	public float TeleportDelay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E9A4", Offset = "0x65E9A4")]
	public AnimationCurve FadeLevels;

	[Address(RVA = "0x72FB34", Offset = "0x72FB34", VA = "0x72FB34", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Address(RVA = "0x72FB60", Offset = "0x72FB60", VA = "0x72FB60")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674E64", Offset = "0x674E64")]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Address(RVA = "0x72FC00", Offset = "0x72FC00", VA = "0x72FC00")]
	public TeleportTransitionBlink()
	{
	}
}
public class TeleportTransitionInstant : TeleportTransition
{
	[Address(RVA = "0x72FF74", Offset = "0x72FF74", VA = "0x72FF74", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Address(RVA = "0x72FFA4", Offset = "0x72FFA4", VA = "0x72FFA4")]
	public TeleportTransitionInstant()
	{
	}
}
public class TeleportTransitionWarp : TeleportTransition
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E88", Offset = "0x659E88")]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x73026C", Offset = "0x73026C", VA = "0x73026C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7302DC", Offset = "0x7302DC", VA = "0x7302DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x73004C", Offset = "0x73004C", VA = "0x73004C")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x7300C0", Offset = "0x7300C0", VA = "0x7300C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7300C4", Offset = "0x7300C4", VA = "0x7300C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x730274", Offset = "0x730274", VA = "0x730274", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65E9DC", Offset = "0x65E9DC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65E9DC", Offset = "0x65E9DC")]
	public float TransitionDuration;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x65EA34", Offset = "0x65EA34")]
	public AnimationCurve PositionLerp;

	[Address(RVA = "0x72FFAC", Offset = "0x72FFAC", VA = "0x72FFAC", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Address(RVA = "0x72FFD8", Offset = "0x72FFD8", VA = "0x72FFD8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674EC8", Offset = "0x674EC8")]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Address(RVA = "0x730078", Offset = "0x730078", VA = "0x730078")]
	public TeleportTransitionWarp()
	{
	}
}
public class DebugUISample : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Address(RVA = "0x7BD444", Offset = "0x7BD444", VA = "0x7BD444")]
	private void Start()
	{
	}

	[Address(RVA = "0x7BD8E0", Offset = "0x7BD8E0", VA = "0x7BD8E0")]
	public void TogglePressed(Toggle t)
	{
	}

	[Address(RVA = "0x7BD9A8", Offset = "0x7BD9A8", VA = "0x7BD9A8")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Address(RVA = "0x7BDC64", Offset = "0x7BDC64", VA = "0x7BDC64")]
	public void SliderPressed(float f)
	{
	}

	[Address(RVA = "0x7BDD54", Offset = "0x7BDD54", VA = "0x7BDD54")]
	private void Update()
	{
	}

	[Address(RVA = "0x7BDE48", Offset = "0x7BDE48", VA = "0x7BDE48")]
	private void LogButtonPressed()
	{
	}

	[Address(RVA = "0x7BDEB4", Offset = "0x7BDEB4", VA = "0x7BDEB4")]
	public DebugUISample()
	{
	}

	[Address(RVA = "0x7BDEBC", Offset = "0x7BDEBC", VA = "0x7BDEBC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674F2C", Offset = "0x674F2C")]
	private void <Start>b__2_0(Toggle t)
	{
	}

	[Address(RVA = "0x7BDF18", Offset = "0x7BDF18", VA = "0x7BDF18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674F3C", Offset = "0x674F3C")]
	private void <Start>b__2_1(Toggle t)
	{
	}

	[Address(RVA = "0x7BDF74", Offset = "0x7BDF74", VA = "0x7BDF74")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674F4C", Offset = "0x674F4C")]
	private void <Start>b__2_2(Toggle t)
	{
	}

	[Address(RVA = "0x7BDFD0", Offset = "0x7BDFD0", VA = "0x7BDFD0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x674F5C", Offset = "0x674F5C")]
	private void <Start>b__2_3(Toggle t)
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655880", Offset = "0x655880")]
public class CharacterCapsule : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65EA44", Offset = "0x65EA44")]
	public int SubdivisionsU;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65EA60", Offset = "0x65EA60")]
	public int SubdivisionsV;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Address(RVA = "0x8BE5E4", Offset = "0x8BE5E4", VA = "0x8BE5E4")]
	private void Update()
	{
	}

	[Address(RVA = "0x8BF544", Offset = "0x8BF544", VA = "0x8BF544")]
	public CharacterCapsule()
	{
	}
}
public class LocomotionSampleSupport : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	private LocomotionTeleport TeleportController
	{
		[Address(RVA = "0x835D5C", Offset = "0x835D5C", VA = "0x835D5C")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x835DBC", Offset = "0x835DBC", VA = "0x835DBC")]
	public void Start()
	{
	}

	[Address(RVA = "0x8361CC", Offset = "0x8361CC", VA = "0x8361CC")]
	public void Update()
	{
	}

	[Address(RVA = "0x8362C8", Offset = "0x8362C8", VA = "0x8362C8")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x674F6C", Offset = "0x674F6C")]
	private static void Log(string msg)
	{
	}

	public static TActivate ActivateCategory<TActivate, TCategory>(GameObject target) where TActivate : MonoBehaviour where TCategory : MonoBehaviour
	{
		return null;
	}

	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	protected TActivate ActivateCategory<TActivate, TCategory>() where TActivate : MonoBehaviour where TCategory : MonoBehaviour
	{
		return null;
	}

	[Address(RVA = "0x836330", Offset = "0x836330", VA = "0x836330")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Address(RVA = "0x836394", Offset = "0x836394", VA = "0x836394")]
	private void SetupNonCap()
	{
	}

	[Address(RVA = "0x836444", Offset = "0x836444", VA = "0x836444")]
	private void SetupTeleportDefaults()
	{
	}

	[Address(RVA = "0x8366B0", Offset = "0x8366B0", VA = "0x8366B0")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Address(RVA = "0x8367A0", Offset = "0x8367A0", VA = "0x8367A0")]
	private void SetupNodeTeleport()
	{
	}

	[Address(RVA = "0x836028", Offset = "0x836028", VA = "0x836028")]
	private void SetupTwoStickTeleport()
	{
	}

	[Address(RVA = "0x8368D8", Offset = "0x8368D8", VA = "0x8368D8")]
	private void SetupWalkOnly()
	{
	}

	[Address(RVA = "0x8369B8", Offset = "0x8369B8", VA = "0x8369B8")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Address(RVA = "0x836B38", Offset = "0x836B38", VA = "0x836B38")]
	public LocomotionSampleSupport()
	{
	}
}
public class StartMenu : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659E98", Offset = "0x659E98")]
	private sealed class <ShowOverlayAndLoad>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StartMenu <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string sceneName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncOperation <asyncLoad>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x986E9C", Offset = "0x986E9C", VA = "0x986E9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x986F0C", Offset = "0x986F0C", VA = "0x986F0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x9868C0", Offset = "0x9868C0", VA = "0x9868C0")]
		[DebuggerHidden]
		public <ShowOverlayAndLoad>d__5(int <>1__state)
		{
		}

		[Address(RVA = "0x986BC4", Offset = "0x986BC4", VA = "0x986BC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x986BC8", Offset = "0x986BC8", VA = "0x986BC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x986EA4", Offset = "0x986EA4", VA = "0x986EA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Address(RVA = "0x9863A8", Offset = "0x9863A8", VA = "0x9863A8")]
	private void Start()
	{
	}

	[Address(RVA = "0x986798", Offset = "0x986798", VA = "0x986798")]
	private void LoadScene(string sceneName)
	{
	}

	[Address(RVA = "0x986828", Offset = "0x986828", VA = "0x986828")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x674FA4", Offset = "0x674FA4")]
	private IEnumerator ShowOverlayAndLoad(string sceneName)
	{
		return null;
	}

	[Address(RVA = "0x9868EC", Offset = "0x9868EC", VA = "0x9868EC")]
	private void LoadAvatarGrab()
	{
	}

	[Address(RVA = "0x98693C", Offset = "0x98693C", VA = "0x98693C")]
	private void LoadCustomControllers()
	{
	}

	[Address(RVA = "0x98698C", Offset = "0x98698C", VA = "0x98698C")]
	private void LoadCustomHands()
	{
	}

	[Address(RVA = "0x9869DC", Offset = "0x9869DC", VA = "0x9869DC")]
	private void LoadDebugUI()
	{
	}

	[Address(RVA = "0x986A2C", Offset = "0x986A2C", VA = "0x986A2C")]
	private void LoadDistanceGrab()
	{
	}

	[Address(RVA = "0x986A7C", Offset = "0x986A7C", VA = "0x986A7C")]
	private void LoadGuardianBoundarySystem()
	{
	}

	[Address(RVA = "0x986ACC", Offset = "0x986ACC", VA = "0x986ACC")]
	private void LoadLocomotion()
	{
	}

	[Address(RVA = "0x986B1C", Offset = "0x986B1C", VA = "0x986B1C")]
	private void LoadMixedRealityCapture()
	{
	}

	[Address(RVA = "0x986B6C", Offset = "0x986B6C", VA = "0x986B6C")]
	private void LoadOVROverlay()
	{
	}

	[Address(RVA = "0x986BBC", Offset = "0x986BBC", VA = "0x986BBC")]
	public StartMenu()
	{
	}
}
public static class NativeVideoPlayer
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static IntPtr playVideoMethodId;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr stopMethodId;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr resumeMethodId;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr pauseMethodId;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr setPlaybackSpeedMethodId;

	private static IntPtr VideoPlayerClass
	{
		[Address(RVA = "0x915DBC", Offset = "0x915DBC", VA = "0x915DBC")]
		get
		{
			return default(IntPtr);
		}
	}

	private static IntPtr Activity
	{
		[Address(RVA = "0x916000", Offset = "0x916000", VA = "0x916000")]
		get
		{
			return default(IntPtr);
		}
	}

	public static bool IsAvailable
	{
		[Address(RVA = "0x914C90", Offset = "0x914C90", VA = "0x914C90")]
		get
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x915A50", Offset = "0x915A50", VA = "0x915A50")]
	public static void PlayVideo(string path, IntPtr surfaceObj)
	{
	}

	[Address(RVA = "0x9157F8", Offset = "0x9157F8", VA = "0x9157F8")]
	public static void Stop()
	{
	}

	[Address(RVA = "0x9150B4", Offset = "0x9150B4", VA = "0x9150B4")]
	public static void Play()
	{
	}

	[Address(RVA = "0x9151DC", Offset = "0x9151DC", VA = "0x9151DC")]
	public static void Pause()
	{
	}

	[Address(RVA = "0x915690", Offset = "0x915690", VA = "0x915690")]
	public static void SetPlaybackSpeed(float speed)
	{
	}
}
public class MoviePlayerSample : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659EA8", Offset = "0x659EA8")]
	private sealed class <Start>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x915D44", Offset = "0x915D44", VA = "0x915D44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x915DB4", Offset = "0x915DB4", VA = "0x915DB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x914D4C", Offset = "0x914D4C", VA = "0x914D4C")]
		[DebuggerHidden]
		public <Start>d__12(int <>1__state)
		{
		}

		[Address(RVA = "0x915BC4", Offset = "0x915BC4", VA = "0x915BC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x915BC8", Offset = "0x915BC8", VA = "0x915BC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x915D4C", Offset = "0x915D4C", VA = "0x915D4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659EB8", Offset = "0x659EB8")]
	private sealed class <>c__DisplayClass13_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string moviePath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MoviePlayerSample <>4__this;

		[Address(RVA = "0x91504C", Offset = "0x91504C", VA = "0x91504C")]
		public <>c__DisplayClass13_0()
		{
		}

		[Address(RVA = "0x9159B4", Offset = "0x9159B4", VA = "0x9159B4")]
		internal void <Play>b__0()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EA7C", Offset = "0x65EA7C")]
	private bool <isPlaying>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RenderTexture copyTexture;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material externalTex2DMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string MovieName;

	public bool isPlaying
	{
		[Address(RVA = "0x91494C", Offset = "0x91494C", VA = "0x91494C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675008", Offset = "0x675008")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x914954", Offset = "0x914954", VA = "0x914954")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675018", Offset = "0x675018")]
		private set
		{
		}
	}

	[Address(RVA = "0x914960", Offset = "0x914960", VA = "0x914960")]
	private void Awake()
	{
	}

	[Address(RVA = "0x914CD8", Offset = "0x914CD8", VA = "0x914CD8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675028", Offset = "0x675028")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x914D78", Offset = "0x914D78", VA = "0x914D78")]
	public void Play(string moviePath)
	{
	}

	[Address(RVA = "0x915054", Offset = "0x915054", VA = "0x915054")]
	public void Play()
	{
	}

	[Address(RVA = "0x915180", Offset = "0x915180", VA = "0x915180")]
	public void Pause()
	{
	}

	[Address(RVA = "0x9152A8", Offset = "0x9152A8", VA = "0x9152A8")]
	private void Update()
	{
	}

	[Address(RVA = "0x915630", Offset = "0x915630", VA = "0x915630")]
	public void Rewind()
	{
	}

	[Address(RVA = "0x91579C", Offset = "0x91579C", VA = "0x91579C")]
	public void Stop()
	{
	}

	[Address(RVA = "0x9158C4", Offset = "0x9158C4", VA = "0x9158C4")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Address(RVA = "0x9159AC", Offset = "0x9159AC", VA = "0x9159AC")]
	public MoviePlayerSample()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655890", Offset = "0x655890")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655890", Offset = "0x655890")]
public class OVROverlayMeshGenerator : MonoBehaviour
{
	private enum CubeFace
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Right,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Left,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Top,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Bottom,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Front,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Back,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		COUNT
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh _Mesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Vector3> _Verts;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector2> _UV;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<int> _Tris;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OVROverlay _Overlay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshFilter _MeshFilter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MeshCollider _MeshCollider;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform _CameraRoot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform _Transform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVROverlay.OverlayShape _LastShape;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 _LastPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion _LastRotation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 _LastScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Rect _LastRectLeft;

	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Rect _LastRectRight;

	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool _Awake;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3[] BottomLeft;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Vector3[] RightVector;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Vector3[] UpVector;

	[Address(RVA = "0xE6B298", Offset = "0xE6B298", VA = "0xE6B298")]
	protected void Awake()
	{
	}

	[Address(RVA = "0xE6B424", Offset = "0xE6B424", VA = "0xE6B424")]
	private Rect GetBoundingRect(Rect a, Rect b)
	{
		return default(Rect);
	}

	[Address(RVA = "0xE6B5E0", Offset = "0xE6B5E0", VA = "0xE6B5E0")]
	private void Update()
	{
	}

	[Address(RVA = "0xE6BAF0", Offset = "0xE6BAF0", VA = "0xE6BAF0")]
	private void UpdateMesh(OVROverlay.OverlayShape shape, Vector3 position, Quaternion rotation, Vector3 scale, Rect rect)
	{
	}

	[Address(RVA = "0xE6BE78", Offset = "0xE6BE78", VA = "0xE6BE78")]
	public static void GenerateMesh(List<Vector3> verts, List<Vector2> uvs, List<int> tris, OVROverlay.OverlayShape shape, Vector3 position, Quaternion rotation, Vector3 scale, Rect rect)
	{
	}

	[Address(RVA = "0xE6D3F8", Offset = "0xE6D3F8", VA = "0xE6D3F8")]
	private static Vector2 GetSphereUV(float theta, float phi, float expand_coef)
	{
		return default(Vector2);
	}

	[Address(RVA = "0xE6D458", Offset = "0xE6D458", VA = "0xE6D458")]
	private static Vector3 GetSphereVert(float theta, float phi)
	{
		return default(Vector3);
	}

	[Address(RVA = "0xE6C1F8", Offset = "0xE6C1F8", VA = "0xE6C1F8")]
	public static void BuildSphere(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Vector3 position, Quaternion rotation, Vector3 scale, Rect rect, float worldScale = 800f, int latitudes = 128, int longitudes = 128, float expand_coef = 1f)
	{
	}

	[Address(RVA = "0xE6D540", Offset = "0xE6D540", VA = "0xE6D540")]
	private static Vector2 GetCubeUV(CubeFace face, Vector2 sideUV, float expand_coef)
	{
		return default(Vector2);
	}

	[Address(RVA = "0xE6D72C", Offset = "0xE6D72C", VA = "0xE6D72C")]
	private static Vector3 GetCubeVert(CubeFace face, Vector2 sideUV, float expand_coef)
	{
		return default(Vector3);
	}

	[Address(RVA = "0xE6C76C", Offset = "0xE6C76C", VA = "0xE6C76C")]
	public static void BuildCube(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Vector3 position, Quaternion rotation, Vector3 scale, float worldScale = 800f, int subQuads = 1, float expand_coef = 1.01f)
	{
	}

	[Address(RVA = "0xE6CB7C", Offset = "0xE6CB7C", VA = "0xE6CB7C")]
	public static void BuildQuad(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Rect rect)
	{
	}

	[Address(RVA = "0xE6CFB8", Offset = "0xE6CFB8", VA = "0xE6CFB8")]
	public static void BuildHemicylinder(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Vector3 scale, Rect rect, int longitudes = 128)
	{
	}

	[Address(RVA = "0xE6D918", Offset = "0xE6D918", VA = "0xE6D918")]
	public OVROverlayMeshGenerator()
	{
	}
}
public static class VectorUtil
{
	[Address(RVA = "0x802768", Offset = "0x802768", VA = "0x802768")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x655914", Offset = "0x655914")]
public class MouseLook : MonoBehaviour
{
	public enum RotationAxes
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MouseXAndY,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MouseX,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MouseY
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Address(RVA = "0x914318", Offset = "0x914318", VA = "0x914318")]
	private void Update()
	{
	}

	[Address(RVA = "0x91459C", Offset = "0x91459C", VA = "0x91459C")]
	private void Start()
	{
	}

	[Address(RVA = "0x914664", Offset = "0x914664", VA = "0x914664")]
	public MouseLook()
	{
	}
}
public struct ReflectionSnapshot
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float fadeTime;
}
public class ONSPReflectionZone : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerSnapshot mixerSnapshot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ReflectionSnapshot currentSnapshot;

	[Address(RVA = "0xE58654", Offset = "0xE58654", VA = "0xE58654")]
	private void Start()
	{
	}

	[Address(RVA = "0xE58658", Offset = "0xE58658", VA = "0xE58658")]
	private void Update()
	{
	}

	[Address(RVA = "0xE5865C", Offset = "0xE5865C", VA = "0xE5865C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Address(RVA = "0xE587E8", Offset = "0xE587E8", VA = "0xE587E8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Address(RVA = "0xE586B0", Offset = "0xE586B0", VA = "0xE586B0")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Address(RVA = "0xE58744", Offset = "0xE58744", VA = "0xE58744")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Address(RVA = "0xE5883C", Offset = "0xE5883C", VA = "0xE5883C")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Address(RVA = "0xE588DC", Offset = "0xE588DC", VA = "0xE588DC")]
	private void SetReflectionValues()
	{
	}

	[Address(RVA = "0xE58A68", Offset = "0xE58A68", VA = "0xE58A68")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}

	[Address(RVA = "0xE58BF4", Offset = "0xE58BF4", VA = "0xE58BF4")]
	public ONSPReflectionZone()
	{
	}
}
public class OculusSpatializerUnity : MonoBehaviour
{
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioRaycastCallback _raycastCallback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float particleSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float particleOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject room;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer[] wallRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] dims;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] coefs;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int HIT_COUNT = 2048;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] points;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3[] normals;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem sys;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystem.Particle[] particles;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Address(RVA = "0x737750", Offset = "0x737750", VA = "0x737750")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x737788", Offset = "0x737788", VA = "0x737788")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Address(RVA = "0x737958", Offset = "0x737958", VA = "0x737958")]
	private void Start()
	{
	}

	[Address(RVA = "0x737A10", Offset = "0x737A10", VA = "0x737A10")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x737B20", Offset = "0x737B20", VA = "0x737B20")]
	private void Update()
	{
	}

	[Address(RVA = "0x73875C", Offset = "0x73875C", VA = "0x73875C")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Address(RVA = "0x7379EC", Offset = "0x7379EC", VA = "0x7379EC")]
	private static extern int OSP_Unity_AssignRaycastCallback(MulticastDelegate callback, IntPtr data);

	[PreserveSig]
	[Address(RVA = "0x737A74", Offset = "0x737A74", VA = "0x737A74")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Address(RVA = "0x738444", Offset = "0x738444", VA = "0x738444")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Address(RVA = "0x7384E0", Offset = "0x7384E0", VA = "0x7384E0")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Address(RVA = "0x738580", Offset = "0x738580", VA = "0x738580")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Address(RVA = "0x738620", Offset = "0x738620", VA = "0x738620")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Address(RVA = "0x7386BC", Offset = "0x7386BC", VA = "0x7386BC")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Address(RVA = "0x739AC4", Offset = "0x739AC4", VA = "0x739AC4")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Address(RVA = "0x739B98", Offset = "0x739B98", VA = "0x739B98")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Address(RVA = "0x739C9C", Offset = "0x739C9C", VA = "0x739C9C")]
	public OculusSpatializerUnity()
	{
	}
}
public class ONSPAmbisonicsNative : MonoBehaviour
{
	public enum ovrAmbisonicsNativeStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Uninitialized = -1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotEnabled,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Success,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		StreamError,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ProcessError,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MaxStatValue
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramVSpeakerMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int paramAmbiStat;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool useVirtualSpeakers;

	public bool UseVirtualSpeakers
	{
		[Address(RVA = "0x9165B0", Offset = "0x9165B0", VA = "0x9165B0")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x9165B8", Offset = "0x9165B8", VA = "0x9165B8")]
		set
		{
		}
	}

	[Address(RVA = "0x9165C4", Offset = "0x9165C4", VA = "0x9165C4")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x916814", Offset = "0x916814", VA = "0x916814")]
	private void Update()
	{
	}

	[Address(RVA = "0x916AA4", Offset = "0x916AA4", VA = "0x916AA4")]
	public ONSPAmbisonicsNative()
	{
	}
}
public class ONSPAudioSource : MonoBehaviour
{
	private enum Parameters
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_GAIN,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_USEINVSQR,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_NEAR,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_FAR,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_RADIUS,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_DISABLE_RFL,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_VSPEAKERMODE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_AMBISTAT,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_READONLY_NUM_VOICES,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_SENDLEVEL,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		P_NUM
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool enableSpatialization;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float gain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool useInvSqr;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float near;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float far;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float volumetricRadius;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float reverbSend;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool enableRfl;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	public bool EnableSpatialization
	{
		[Address(RVA = "0x916C24", Offset = "0x916C24", VA = "0x916C24")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x916C2C", Offset = "0x916C2C", VA = "0x916C2C")]
		set
		{
		}
	}

	public float Gain
	{
		[Address(RVA = "0x916C38", Offset = "0x916C38", VA = "0x916C38")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x916C40", Offset = "0x916C40", VA = "0x916C40")]
		set
		{
		}
	}

	public bool UseInvSqr
	{
		[Address(RVA = "0x916CC4", Offset = "0x916CC4", VA = "0x916CC4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x916CCC", Offset = "0x916CCC", VA = "0x916CCC")]
		set
		{
		}
	}

	public float Near
	{
		[Address(RVA = "0x916CD8", Offset = "0x916CD8", VA = "0x916CD8")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x916CE0", Offset = "0x916CE0", VA = "0x916CE0")]
		set
		{
		}
	}

	public float Far
	{
		[Address(RVA = "0x916D68", Offset = "0x916D68", VA = "0x916D68")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x916D70", Offset = "0x916D70", VA = "0x916D70")]
		set
		{
		}
	}

	public float VolumetricRadius
	{
		[Address(RVA = "0x916DF8", Offset = "0x916DF8", VA = "0x916DF8")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x916E00", Offset = "0x916E00", VA = "0x916E00")]
		set
		{
		}
	}

	public float ReverbSend
	{
		[Address(RVA = "0x916E88", Offset = "0x916E88", VA = "0x916E88")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x916E90", Offset = "0x916E90", VA = "0x916E90")]
		set
		{
		}
	}

	public bool EnableRfl
	{
		[Address(RVA = "0x916F18", Offset = "0x916F18", VA = "0x916F18")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x916F20", Offset = "0x916F20", VA = "0x916F20")]
		set
		{
		}
	}

	[PreserveSig]
	[Address(RVA = "0x916B28", Offset = "0x916B28", VA = "0x916B28")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Address(RVA = "0x916F2C", Offset = "0x916F2C", VA = "0x916F2C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x91712C", Offset = "0x91712C", VA = "0x91712C")]
	private void Start()
	{
	}

	[Address(RVA = "0x917130", Offset = "0x917130", VA = "0x917130")]
	private void Update()
	{
	}

	[Address(RVA = "0x916F98", Offset = "0x916F98", VA = "0x916F98")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Address(RVA = "0x917210", Offset = "0x917210", VA = "0x917210")]
	private void OnDrawGizmos()
	{
	}

	[Address(RVA = "0x9176E4", Offset = "0x9176E4", VA = "0x9176E4")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x9177B4", Offset = "0x9177B4", VA = "0x9177B4")]
	public ONSPAudioSource()
	{
	}
}
public class ONSPProfiler : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool profilerEnabled;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const int DEFAULT_PORT = 2121;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int port;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Address(RVA = "0x9177D4", Offset = "0x9177D4", VA = "0x9177D4")]
	private void Start()
	{
	}

	[Address(RVA = "0x9177E0", Offset = "0x9177E0", VA = "0x9177E0")]
	private void Update()
	{
	}

	[PreserveSig]
	[Address(RVA = "0x9178B4", Offset = "0x9178B4", VA = "0x9178B4")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Address(RVA = "0x917818", Offset = "0x917818", VA = "0x917818")]
	private static extern int ONSP_SetProfilerPort(int port);

	[Address(RVA = "0x917950", Offset = "0x917950", VA = "0x917950")]
	public ONSPProfiler()
	{
	}
}
public class ONSPPropagationGeometry : MonoBehaviour
{
	private struct MeshMaterial
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	private struct TerrainMaterial
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string GeometryAssetDirectory;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string filePathRelative;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fileEnabled;

	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool includeChildMeshes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr geometryHandle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int OSPSuccess;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int terrainDecimation;

	public static string GeometryAssetPath
	{
		[Address(RVA = "0x91A65C", Offset = "0x91A65C", VA = "0x91A65C")]
		get
		{
			return null;
		}
	}

	public string filePath
	{
		[Address(RVA = "0x91A6E8", Offset = "0x91A6E8", VA = "0x91A6E8")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x91A760", Offset = "0x91A760", VA = "0x91A760")]
	public static string GetPath(Transform current)
	{
		return null;
	}

	[Address(RVA = "0x91A8D8", Offset = "0x91A8D8", VA = "0x91A8D8")]
	private void Awake()
	{
	}

	[Address(RVA = "0x91A8DC", Offset = "0x91A8DC", VA = "0x91A8DC")]
	private void CreatePropagationGeometry()
	{
	}

	[Address(RVA = "0x91ADEC", Offset = "0x91ADEC", VA = "0x91ADEC")]
	private void Update()
	{
	}

	[Address(RVA = "0x91B2C4", Offset = "0x91B2C4", VA = "0x91B2C4")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x91B428", Offset = "0x91B428", VA = "0x91B428")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic)
	{
	}

	[Address(RVA = "0x91BC5C", Offset = "0x91BC5C", VA = "0x91BC5C")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic)
	{
		return default(int);
	}

	[Address(RVA = "0x91ACA0", Offset = "0x91ACA0", VA = "0x91ACA0")]
	public void UploadGeometry()
	{
	}

	[Address(RVA = "0x91AAC0", Offset = "0x91AAC0", VA = "0x91AAC0")]
	public bool ReadFile()
	{
		return default(bool);
	}

	[Address(RVA = "0x91D440", Offset = "0x91D440", VA = "0x91D440")]
	public ONSPPropagationGeometry()
	{
	}
}
internal class ONSPPropagation
{
	public enum ovrAudioScalarType : uint
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Int8,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UInt8,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Int16,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UInt16,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Int32,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UInt32,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Int64,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UInt64,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Float16,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Float32,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Float64
	}

	public class ClientType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Address(RVA = "0x917E44", Offset = "0x917E44", VA = "0x917E44")]
		public ClientType()
		{
		}
	}

	public interface PropagationInterface
	{
		int SetPropagationQuality(float quality);

		int SetPropagationThreadAffinity(ulong cpuMask);

		int CreateAudioGeometry(out IntPtr geometry);

		int DestroyAudioGeometry(IntPtr geometry);

		int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount);

		int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		int AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		int CreateAudioMaterial(out IntPtr material);

		int DestroyAudioMaterial(IntPtr material);

		int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		int AudioMaterialReset(IntPtr material, MaterialProperty property);
	}

	public class UnityNativeInterface : PropagationInterface
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		private IntPtr context
		{
			[Address(RVA = "0x918B70", Offset = "0x918B70", VA = "0x918B70")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Address(RVA = "0x918BD4", Offset = "0x918BD4", VA = "0x918BD4")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Address(RVA = "0x918C80", Offset = "0x918C80", VA = "0x918C80")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Address(RVA = "0x918D2C", Offset = "0x918D2C", VA = "0x918D2C", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918D50", Offset = "0x918D50", VA = "0x918D50")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Address(RVA = "0x918DFC", Offset = "0x918DFC", VA = "0x918DFC", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918E20", Offset = "0x918E20", VA = "0x918E20")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Address(RVA = "0x918EC8", Offset = "0x918EC8", VA = "0x918EC8", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918EEC", Offset = "0x918EEC", VA = "0x918EEC")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Address(RVA = "0x918F88", Offset = "0x918F88", VA = "0x918F88", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918F90", Offset = "0x918F90", VA = "0x918F90")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Address(RVA = "0x9190B8", Offset = "0x9190B8", VA = "0x9190B8", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9191B0", Offset = "0x9191B0", VA = "0x9191B0")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Address(RVA = "0x919264", Offset = "0x919264", VA = "0x919264", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919270", Offset = "0x919270", VA = "0x919270")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Address(RVA = "0x9193B8", Offset = "0x9193B8", VA = "0x9193B8", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9193C4", Offset = "0x9193C4", VA = "0x9193C4")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Address(RVA = "0x91948C", Offset = "0x91948C", VA = "0x91948C", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919498", Offset = "0x919498", VA = "0x919498")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Address(RVA = "0x919560", Offset = "0x919560", VA = "0x919560", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91956C", Offset = "0x91956C", VA = "0x91956C")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Address(RVA = "0x919614", Offset = "0x919614", VA = "0x919614", Slot = "14")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919638", Offset = "0x919638", VA = "0x919638")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Address(RVA = "0x9196D4", Offset = "0x9196D4", VA = "0x9196D4", Slot = "15")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9196DC", Offset = "0x9196DC", VA = "0x9196DC")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Address(RVA = "0x9197A0", Offset = "0x9197A0", VA = "0x9197A0", Slot = "16")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9197AC", Offset = "0x9197AC", VA = "0x9197AC")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Address(RVA = "0x919870", Offset = "0x919870", VA = "0x919870", Slot = "13")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919880", Offset = "0x919880", VA = "0x919880")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Address(RVA = "0x91992C", Offset = "0x91992C", VA = "0x91992C", Slot = "17")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Address(RVA = "0x917DF0", Offset = "0x917DF0", VA = "0x917DF0")]
		public UnityNativeInterface()
		{
		}
	}

	public class WwisePluginInterface : PropagationInterface
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		private IntPtr context
		{
			[Address(RVA = "0x919938", Offset = "0x919938", VA = "0x919938")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Address(RVA = "0x917C00", Offset = "0x917C00", VA = "0x917C00")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Address(RVA = "0x91999C", Offset = "0x91999C", VA = "0x91999C")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Address(RVA = "0x919A48", Offset = "0x919A48", VA = "0x919A48", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919A6C", Offset = "0x919A6C", VA = "0x919A6C")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Address(RVA = "0x919B18", Offset = "0x919B18", VA = "0x919B18", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919B3C", Offset = "0x919B3C", VA = "0x919B3C")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Address(RVA = "0x919BE8", Offset = "0x919BE8", VA = "0x919BE8", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919C0C", Offset = "0x919C0C", VA = "0x919C0C")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Address(RVA = "0x919CA8", Offset = "0x919CA8", VA = "0x919CA8", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919CB0", Offset = "0x919CB0", VA = "0x919CB0")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Address(RVA = "0x919DD8", Offset = "0x919DD8", VA = "0x919DD8", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919ED0", Offset = "0x919ED0", VA = "0x919ED0")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Address(RVA = "0x919F84", Offset = "0x919F84", VA = "0x919F84", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x919F90", Offset = "0x919F90", VA = "0x919F90")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Address(RVA = "0x91A0D8", Offset = "0x91A0D8", VA = "0x91A0D8", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91A0E4", Offset = "0x91A0E4", VA = "0x91A0E4")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Address(RVA = "0x91A1AC", Offset = "0x91A1AC", VA = "0x91A1AC", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91A1B8", Offset = "0x91A1B8", VA = "0x91A1B8")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Address(RVA = "0x91A280", Offset = "0x91A280", VA = "0x91A280", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91A28C", Offset = "0x91A28C", VA = "0x91A28C")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Address(RVA = "0x91A338", Offset = "0x91A338", VA = "0x91A338", Slot = "14")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91A35C", Offset = "0x91A35C", VA = "0x91A35C")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Address(RVA = "0x91A3F8", Offset = "0x91A3F8", VA = "0x91A3F8", Slot = "15")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91A400", Offset = "0x91A400", VA = "0x91A400")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Address(RVA = "0x91A4C4", Offset = "0x91A4C4", VA = "0x91A4C4", Slot = "16")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91A4D0", Offset = "0x91A4D0", VA = "0x91A4D0")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Address(RVA = "0x91A594", Offset = "0x91A594", VA = "0x91A594", Slot = "13")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x91A5A4", Offset = "0x91A5A4", VA = "0x91A5A4")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Address(RVA = "0x91A650", Offset = "0x91A650", VA = "0x91A650", Slot = "17")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Address(RVA = "0x917CAC", Offset = "0x917CAC", VA = "0x917CAC")]
		public WwisePluginInterface()
		{
		}
	}

	public class FMODPluginInterface : PropagationInterface
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		private IntPtr context
		{
			[Address(RVA = "0x917E4C", Offset = "0x917E4C", VA = "0x917E4C")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Address(RVA = "0x917CF8", Offset = "0x917CF8", VA = "0x917CF8")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Address(RVA = "0x917EB0", Offset = "0x917EB0", VA = "0x917EB0")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Address(RVA = "0x917F5C", Offset = "0x917F5C", VA = "0x917F5C", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x917F80", Offset = "0x917F80", VA = "0x917F80")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Address(RVA = "0x91802C", Offset = "0x91802C", VA = "0x91802C", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918050", Offset = "0x918050", VA = "0x918050")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Address(RVA = "0x9180FC", Offset = "0x9180FC", VA = "0x9180FC", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918120", Offset = "0x918120", VA = "0x918120")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Address(RVA = "0x9181BC", Offset = "0x9181BC", VA = "0x9181BC", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9181C4", Offset = "0x9181C4", VA = "0x9181C4")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Address(RVA = "0x9182EC", Offset = "0x9182EC", VA = "0x9182EC", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9183E4", Offset = "0x9183E4", VA = "0x9183E4")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Address(RVA = "0x918498", Offset = "0x918498", VA = "0x918498", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9184A4", Offset = "0x9184A4", VA = "0x9184A4")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Address(RVA = "0x9185EC", Offset = "0x9185EC", VA = "0x9185EC", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9185F8", Offset = "0x9185F8", VA = "0x9185F8")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Address(RVA = "0x9186C0", Offset = "0x9186C0", VA = "0x9186C0", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9186CC", Offset = "0x9186CC", VA = "0x9186CC")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Address(RVA = "0x918794", Offset = "0x918794", VA = "0x918794", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9187A0", Offset = "0x9187A0", VA = "0x9187A0")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Address(RVA = "0x91884C", Offset = "0x91884C", VA = "0x91884C", Slot = "14")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918870", Offset = "0x918870", VA = "0x918870")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Address(RVA = "0x91890C", Offset = "0x91890C", VA = "0x91890C", Slot = "15")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918914", Offset = "0x918914", VA = "0x918914")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Address(RVA = "0x9189D8", Offset = "0x9189D8", VA = "0x9189D8", Slot = "16")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x9189E4", Offset = "0x9189E4", VA = "0x9189E4")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Address(RVA = "0x918AA8", Offset = "0x918AA8", VA = "0x918AA8", Slot = "13")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Address(RVA = "0x918AB8", Offset = "0x918AB8", VA = "0x918AB8")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Address(RVA = "0x918B64", Offset = "0x918B64", VA = "0x918B64", Slot = "17")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Address(RVA = "0x917DA4", Offset = "0x917DA4", VA = "0x917DA4")]
		public FMODPluginInterface()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropagationInterface CachedInterface;

	public static PropagationInterface Interface
	{
		[Address(RVA = "0x917960", Offset = "0x917960", VA = "0x917960")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x9179D0", Offset = "0x9179D0", VA = "0x9179D0")]
	private static PropagationInterface FindInterface()
	{
		return null;
	}

	[Address(RVA = "0x917E3C", Offset = "0x917E3C", VA = "0x917E3C")]
	public ONSPPropagation()
	{
	}
}
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	public enum Preset
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Custom,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		AcousticTile,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Brick,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BrickPainted,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carpet,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CarpetHeavy,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CarpetHeavyPadded,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CeramicTile,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Concrete,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ConcreteRough,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ConcreteBlock,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ConcreteBlockPainted,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Curtain,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Foliage,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Glass,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		GlassHeavy,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Grass,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Gravel,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		GypsumBoard,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PlasterOnBrick,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PlasterOnConcreteBlock,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Soil,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SoundProof,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Snow,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Steel,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Water,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WoodThin,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WoodThick,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WoodFloor,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WoodOnConcrete
	}

	[Serializable]
	public sealed class Point
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float frequency;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float data;

		[Address(RVA = "0xE57E70", Offset = "0xE57E70", VA = "0xE57E70")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Address(RVA = "0xE57FB8", Offset = "0xE57FB8", VA = "0xE57FB8")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Address(RVA = "0xE58028", Offset = "0xE58028", VA = "0xE58028")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x659EC8", Offset = "0x659EC8")]
	public sealed class Spectrum
	{
		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CED0", Offset = "0x65CED0")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Point, float> <>9__3_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Point, float> <>9__3_1;

			[Address(RVA = "0xE58510", Offset = "0xE58510", VA = "0xE58510")]
			public <>c()
			{
			}

			[Address(RVA = "0xE58518", Offset = "0xE58518", VA = "0xE58518")]
			internal float <get_Item>b__3_0(Point p)
			{
				return default(float);
			}

			[Address(RVA = "0xE58544", Offset = "0xE58544", VA = "0xE58544")]
			internal float <get_Item>b__3_1(Point p)
			{
				return default(float);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int selection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Point> points;

		public float Item
		{
			[Address(RVA = "0xE58090", Offset = "0xE58090", VA = "0xE58090")]
			get
			{
				return default(float);
			}
		}

		[Address(RVA = "0xE57F40", Offset = "0xE57F40", VA = "0xE57F40")]
		public Spectrum()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr materialHandle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65EB1C", Offset = "0x65EB1C")]
	public Spectrum absorption;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65EB54", Offset = "0x65EB54")]
	public Spectrum transmission;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65EB8C", Offset = "0x65EB8C")]
	public Spectrum scattering;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Preset preset_;

	public Preset preset
	{
		[Address(RVA = "0xE4DAD4", Offset = "0xE4DAD4", VA = "0xE4DAD4")]
		get
		{
			return default(Preset);
		}
		[Address(RVA = "0xE4DADC", Offset = "0xE4DADC", VA = "0xE4DADC")]
		set
		{
		}
	}

	[Address(RVA = "0xE4DC98", Offset = "0xE4DC98", VA = "0xE4DC98")]
	private void Start()
	{
	}

	[Address(RVA = "0xE4DC9C", Offset = "0xE4DC9C", VA = "0xE4DC9C")]
	public void StartInternal()
	{
	}

	[Address(RVA = "0xE4E4E4", Offset = "0xE4E4E4", VA = "0xE4E4E4")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0xE4E4E8", Offset = "0xE4E4E8", VA = "0xE4E4E8")]
	public void DestroyInternal()
	{
	}

	[Address(RVA = "0xE4DE14", Offset = "0xE4DE14", VA = "0xE4DE14")]
	public void UploadMaterial()
	{
	}

	[Address(RVA = "0xE4DB04", Offset = "0xE4DB04", VA = "0xE4DB04")]
	public void SetPreset(Preset preset)
	{
	}

	[Address(RVA = "0xE4E5D0", Offset = "0xE4E5D0", VA = "0xE4E5D0")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE4EB64", Offset = "0xE4EB64", VA = "0xE4EB64")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE4F100", Offset = "0xE4F100", VA = "0xE4F100")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE4F69C", Offset = "0xE4F69C", VA = "0xE4F69C")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE4FC3C", Offset = "0xE4FC3C", VA = "0xE4FC3C")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE501D4", Offset = "0xE501D4", VA = "0xE501D4")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE5076C", Offset = "0xE5076C", VA = "0xE5076C")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE50D0C", Offset = "0xE50D0C", VA = "0xE50D0C")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE512AC", Offset = "0xE512AC", VA = "0xE512AC")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE51848", Offset = "0xE51848", VA = "0xE51848")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE51DE8", Offset = "0xE51DE8", VA = "0xE51DE8")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE52388", Offset = "0xE52388", VA = "0xE52388")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE52920", Offset = "0xE52920", VA = "0xE52920")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE52EB8", Offset = "0xE52EB8", VA = "0xE52EB8")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE53450", Offset = "0xE53450", VA = "0xE53450")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE539F0", Offset = "0xE539F0", VA = "0xE539F0")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE53E0C", Offset = "0xE53E0C", VA = "0xE53E0C")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE54220", Offset = "0xE54220", VA = "0xE54220")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE547C0", Offset = "0xE547C0", VA = "0xE547C0")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE54D5C", Offset = "0xE54D5C", VA = "0xE54D5C")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE552F8", Offset = "0xE552F8", VA = "0xE552F8")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE55710", Offset = "0xE55710", VA = "0xE55710")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE558A4", Offset = "0xE558A4", VA = "0xE558A4")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE55CB8", Offset = "0xE55CB8", VA = "0xE55CB8")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE56254", Offset = "0xE56254", VA = "0xE56254")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE567F4", Offset = "0xE567F4", VA = "0xE567F4")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE56D90", Offset = "0xE56D90", VA = "0xE56D90")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE57330", Offset = "0xE57330", VA = "0xE57330")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE578D0", Offset = "0xE578D0", VA = "0xE578D0")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}

	[Address(RVA = "0xE57EA8", Offset = "0xE57EA8", VA = "0xE57EA8")]
	public ONSPPropagationMaterial()
	{
	}
}
public class ONSPPropagationSettings : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float quality;

	[Address(RVA = "0xE58570", Offset = "0xE58570", VA = "0xE58570")]
	private void Update()
	{
	}

	[Address(RVA = "0xE58644", Offset = "0xE58644", VA = "0xE58644")]
	public ONSPPropagationSettings()
	{
	}
}
public class ONSPVersion : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[PreserveSig]
	[Address(RVA = "0xE58C7C", Offset = "0xE58C7C", VA = "0xE58C7C")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Address(RVA = "0xE58D30", Offset = "0xE58D30", VA = "0xE58D30")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE58E3C", Offset = "0xE58E3C", VA = "0xE58E3C")]
	private void Start()
	{
	}

	[Address(RVA = "0xE58E40", Offset = "0xE58E40", VA = "0xE58E40")]
	private void Update()
	{
	}

	[Address(RVA = "0xE58E44", Offset = "0xE58E44", VA = "0xE58E44")]
	public ONSPVersion()
	{
	}
}
public class VoiceModDemo_Logic : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRVoiceModContext[] contexts;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material material;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] xfrms;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VoiceModEnableSwitch SwitchTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int targetSet;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 scale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float scaleMax;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int currentPreset;

	[Address(RVA = "0x818378", Offset = "0x818378", VA = "0x818378")]
	private void Start()
	{
	}

	[Address(RVA = "0x81862C", Offset = "0x81862C", VA = "0x81862C")]
	private void Update()
	{
	}

	[Address(RVA = "0x818B00", Offset = "0x818B00", VA = "0x818B00")]
	private void SetCurrentTarget()
	{
	}

	[Address(RVA = "0x818C0C", Offset = "0x818C0C", VA = "0x818C0C")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Address(RVA = "0x818950", Offset = "0x818950", VA = "0x818950")]
	private void UpdateModelScale()
	{
	}

	[Address(RVA = "0x81913C", Offset = "0x81913C", VA = "0x81913C")]
	public VoiceModDemo_Logic()
	{
	}
}
public class VoiceModEnableSwitch : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] SwitchTargets;

	public bool SetActive<T>(int target) where T : MonoBehaviour
	{
		return default(bool);
	}

	[Address(RVA = "0x8184F4", Offset = "0x8184F4", VA = "0x8184F4")]
	public bool SetActive(int target)
	{
		return default(bool);
	}

	[Address(RVA = "0x8191A0", Offset = "0x8191A0", VA = "0x8191A0")]
	public VoiceModEnableSwitch()
	{
	}
}
public class OVRDebugConsole : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArrayList messages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxMessages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text textMsg;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OVRDebugConsole s_Instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool clearTimeoutOn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float clearTimeout;

	public static OVRDebugConsole instance
	{
		[Address(RVA = "0xE63D7C", Offset = "0xE63D7C", VA = "0xE63D7C")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0xE64058", Offset = "0xE64058", VA = "0xE64058")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE64194", Offset = "0xE64194", VA = "0xE64194")]
	private void Update()
	{
	}

	[Address(RVA = "0xE640C8", Offset = "0xE640C8", VA = "0xE640C8")]
	public void Init()
	{
	}

	[Address(RVA = "0xE6429C", Offset = "0xE6429C", VA = "0xE6429C")]
	public static void Log(string message)
	{
	}

	[Address(RVA = "0xE64454", Offset = "0xE64454", VA = "0xE64454")]
	public static void Log(string message, Color color)
	{
	}

	[Address(RVA = "0xE6422C", Offset = "0xE6422C", VA = "0xE6422C")]
	public static void Clear()
	{
	}

	[Address(RVA = "0xE64540", Offset = "0xE64540", VA = "0xE64540")]
	public static void ClearTimeout(float timeToClear)
	{
	}

	[Address(RVA = "0xE64350", Offset = "0xE64350", VA = "0xE64350")]
	public void AddMessage(string message, Color color)
	{
	}

	[Address(RVA = "0xE644FC", Offset = "0xE644FC", VA = "0xE644FC")]
	public void ClearMessages()
	{
	}

	[Address(RVA = "0xE645C4", Offset = "0xE645C4", VA = "0xE645C4")]
	public void SetClearTimeout(float timeout)
	{
	}

	[Address(RVA = "0xE64844", Offset = "0xE64844", VA = "0xE64844")]
	private void Prune()
	{
	}

	[Address(RVA = "0xE645D4", Offset = "0xE645D4", VA = "0xE645D4")]
	private void Display()
	{
	}

	[Address(RVA = "0xE64924", Offset = "0xE64924", VA = "0xE64924")]
	public OVRDebugConsole()
	{
	}
}
public delegate void OVRCallback();
public delegate void OVRCallback<T>(T arg1);
public delegate void OVRCallback<T, U>(T arg1, U arg2);
public delegate void OVRCallback<T, U, V>(T arg1, U arg2, V arg3);
internal static class OVRMessenger
{
	public class BroadcastException : Exception
	{
		[Address(RVA = "0xE6A614", Offset = "0xE6A614", VA = "0xE6A614")]
		public BroadcastException(string msg)
		{
		}
	}

	public class ListenerException : Exception
	{
		[Address(RVA = "0xE6A1D4", Offset = "0xE6A1D4", VA = "0xE6A1D4")]
		public ListenerException(string msg)
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static MessengerHelper messengerHelper;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Dictionary<string, Delegate> eventTable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static List<string> permanentMessages;

	[Address(RVA = "0xE696FC", Offset = "0xE696FC", VA = "0xE696FC")]
	public static void MarkAsPermanent(string eventType)
	{
	}

	[Address(RVA = "0xE69788", Offset = "0xE69788", VA = "0xE69788")]
	public static void Cleanup()
	{
	}

	[Address(RVA = "0xE69BB8", Offset = "0xE69BB8", VA = "0xE69BB8")]
	public static void PrintEventTable()
	{
	}

	[Address(RVA = "0xE69F5C", Offset = "0xE69F5C", VA = "0xE69F5C")]
	public static void OnListenerAdding(string eventType, Delegate listenerBeingAdded)
	{
	}

	[Address(RVA = "0xE6A24C", Offset = "0xE6A24C", VA = "0xE6A24C")]
	public static void OnListenerRemoving(string eventType, Delegate listenerBeingRemoved)
	{
	}

	[Address(RVA = "0xE6A4A0", Offset = "0xE6A4A0", VA = "0xE6A4A0")]
	public static void OnListenerRemoved(string eventType)
	{
	}

	[Address(RVA = "0xE6A590", Offset = "0xE6A590", VA = "0xE6A590")]
	public static void OnBroadcasting(string eventType)
	{
	}

	[Address(RVA = "0xE6A594", Offset = "0xE6A594", VA = "0xE6A594")]
	public static BroadcastException CreateBroadcastSignatureException(string eventType)
	{
		return null;
	}

	[Address(RVA = "0xE6A68C", Offset = "0xE6A68C", VA = "0xE6A68C")]
	public static void AddListener(string eventType, OVRCallback handler)
	{
	}

	public static void AddListener<T>(string eventType, OVRCallback<T> handler)
	{
	}

	public static void AddListener<T, U>(string eventType, OVRCallback<T, U> handler)
	{
	}

	public static void AddListener<T, U, V>(string eventType, OVRCallback<T, U, V> handler)
	{
	}

	[Address(RVA = "0xE6A838", Offset = "0xE6A838", VA = "0xE6A838")]
	public static void RemoveListener(string eventType, OVRCallback handler)
	{
	}

	public static void RemoveListener<T>(string eventType, OVRCallback<T> handler)
	{
	}

	public static void RemoveListener<T, U>(string eventType, OVRCallback<T, U> handler)
	{
	}

	public static void RemoveListener<T, U, V>(string eventType, OVRCallback<T, U, V> handler)
	{
	}

	[Address(RVA = "0xE6A9EC", Offset = "0xE6A9EC", VA = "0xE6A9EC")]
	public static void Broadcast(string eventType)
	{
	}

	public static void Broadcast<T>(string eventType, T arg1)
	{
	}

	public static void Broadcast<T, U>(string eventType, T arg1, U arg2)
	{
	}

	public static void Broadcast<T, U, V>(string eventType, T arg1, U arg2, V arg3)
	{
	}
}
public sealed class MessengerHelper : MonoBehaviour
{
	[Address(RVA = "0x91416C", Offset = "0x91416C", VA = "0x91416C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x9141E8", Offset = "0x9141E8", VA = "0x9141E8")]
	public void OnDisable()
	{
	}

	[Address(RVA = "0x914248", Offset = "0x914248", VA = "0x914248")]
	public MessengerHelper()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x65594C", Offset = "0x65594C")]
public class OVRMicInput : MonoBehaviour
{
	public enum micActivation
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		HoldToSpeak,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PushToSpeak,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ConstantSpeak
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool GuiSelectDevice;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float sensitivity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float sourceVolume;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int micFrequency;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public micActivation micControl;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string selectedDevice;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float loudness;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool micSelected;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int minFreq;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int maxFreq;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool focused;

	public float Sensitivity
	{
		[Address(RVA = "0xE6ABE4", Offset = "0xE6ABE4", VA = "0xE6ABE4")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0xE6ABEC", Offset = "0xE6ABEC", VA = "0xE6ABEC")]
		set
		{
		}
	}

	public float SourceVolume
	{
		[Address(RVA = "0xE6AC74", Offset = "0xE6AC74", VA = "0xE6AC74")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0xE6AC7C", Offset = "0xE6AC7C", VA = "0xE6AC7C")]
		set
		{
		}
	}

	public float MicFrequency
	{
		[Address(RVA = "0xE6AD04", Offset = "0xE6AD04", VA = "0xE6AD04")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0xE6AD10", Offset = "0xE6AD10", VA = "0xE6AD10")]
		set
		{
		}
	}

	[Address(RVA = "0xE6AD9C", Offset = "0xE6AD9C", VA = "0xE6AD9C")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE6AE5C", Offset = "0xE6AE5C", VA = "0xE6AE5C")]
	private void Start()
	{
	}

	[Address(RVA = "0xE6AEB4", Offset = "0xE6AEB4", VA = "0xE6AEB4")]
	private void Update()
	{
	}

	[Address(RVA = "0xE6B150", Offset = "0xE6B150", VA = "0xE6B150")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Address(RVA = "0xE6B164", Offset = "0xE6B164", VA = "0xE6B164")]
	private void OnApplicationPause(bool focus)
	{
	}

	[Address(RVA = "0xE6B178", Offset = "0xE6B178", VA = "0xE6B178")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0xE6B17C", Offset = "0xE6B17C", VA = "0xE6B17C")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0xE6B198", Offset = "0xE6B198", VA = "0xE6B198")]
	public void MicDeviceGUI(float left, float top, float width, float height, float buttonSpaceTop, float buttonSpaceLeft)
	{
	}

	[Address(RVA = "0xE6B19C", Offset = "0xE6B19C", VA = "0xE6B19C")]
	public void GetMicCaps()
	{
	}

	[Address(RVA = "0xE6B14C", Offset = "0xE6B14C", VA = "0xE6B14C")]
	public void StartMicrophone()
	{
	}

	[Address(RVA = "0xE6AFF8", Offset = "0xE6AFF8", VA = "0xE6AFF8")]
	public void StopMicrophone()
	{
	}

	[Address(RVA = "0xE6B144", Offset = "0xE6B144", VA = "0xE6B144")]
	private float GetAveragedVolume()
	{
		return default(float);
	}

	[Address(RVA = "0xE6B244", Offset = "0xE6B244", VA = "0xE6B244")]
	public OVRMicInput()
	{
	}
}
public class OVRVoiceMod : MonoBehaviour
{
	public enum ovrVoiceModError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Unknown = -2250,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CannotCreateContext = -2251,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidParam = -2252,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BadSampleRate = -2253,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MissingDLL = -2254,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BadVersion = -2255,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UndefinedFunction = -2256
	}

	public enum ovrViceModFlag
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const int ovrVoiceModSuccess = 0;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const string strOVRLS = "OVRVoiceMod";

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int sOVRVoiceModInit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static OVRVoiceMod sInstance;

	[PreserveSig]
	[Address(RVA = "0xE6F964", Offset = "0xE6F964", VA = "0xE6F964")]
	private static extern int ovrVoiceModDll_Initialize(int SampleRate, int BufferSize);

	[PreserveSig]
	[Address(RVA = "0xE6FA10", Offset = "0xE6FA10", VA = "0xE6FA10")]
	private static extern void ovrVoiceModDll_Shutdown();

	[PreserveSig]
	[Address(RVA = "0xE6FA9C", Offset = "0xE6FA9C", VA = "0xE6FA9C")]
	private static extern IntPtr ovrVoicemodDll_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[PreserveSig]
	[Address(RVA = "0xE6FB50", Offset = "0xE6FB50", VA = "0xE6FB50")]
	private static extern int ovrVoiceModDll_CreateContext(ref uint Context);

	[PreserveSig]
	[Address(RVA = "0xE6FBEC", Offset = "0xE6FBEC", VA = "0xE6FBEC")]
	private static extern int ovrVoiceModDll_DestroyContext(uint Context);

	[PreserveSig]
	[Address(RVA = "0xE6FC88", Offset = "0xE6FC88", VA = "0xE6FC88")]
	private static extern int ovrVoiceModDll_SendParameter(uint Context, int Parameter, int Value);

	[PreserveSig]
	[Address(RVA = "0xE6FD3C", Offset = "0xE6FD3C", VA = "0xE6FD3C")]
	private static extern int ovrVoiceModDll_ProcessFrame(uint Context, uint Flags, float[] AudioBuffer);

	[PreserveSig]
	[Address(RVA = "0xE6FDF8", Offset = "0xE6FDF8", VA = "0xE6FDF8")]
	private static extern int ovrVoiceModDll_ProcessFrameInterleaved(uint Context, uint Flags, float[] AudioBuffer);

	[PreserveSig]
	[Address(RVA = "0xE6FEB4", Offset = "0xE6FEB4", VA = "0xE6FEB4")]
	private static extern int ovrVoiceModDll_GetAverageAbsVolume(uint Context, ref float Volume);

	[Address(RVA = "0xE6FF60", Offset = "0xE6FF60", VA = "0xE6FF60")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE701FC", Offset = "0xE701FC", VA = "0xE701FC")]
	private void Start()
	{
	}

	[Address(RVA = "0xE70200", Offset = "0xE70200", VA = "0xE70200")]
	private void Update()
	{
	}

	[Address(RVA = "0xE70204", Offset = "0xE70204", VA = "0xE70204")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0xE70310", Offset = "0xE70310", VA = "0xE70310")]
	public static int IsInitialized()
	{
		return default(int);
	}

	[Address(RVA = "0xE70378", Offset = "0xE70378", VA = "0xE70378")]
	public static int CreateContext(ref uint context)
	{
		return default(int);
	}

	[Address(RVA = "0xE7040C", Offset = "0xE7040C", VA = "0xE7040C")]
	public static int DestroyContext(uint context)
	{
		return default(int);
	}

	[Address(RVA = "0xE704A0", Offset = "0xE704A0", VA = "0xE704A0")]
	public static int SendParameter(uint context, int parameter, int value)
	{
		return default(int);
	}

	[Address(RVA = "0xE70550", Offset = "0xE70550", VA = "0xE70550")]
	public static int ProcessFrame(uint context, float[] audioBuffer)
	{
		return default(int);
	}

	[Address(RVA = "0xE705FC", Offset = "0xE705FC", VA = "0xE705FC")]
	public static int ProcessFrameInterleaved(uint context, float[] audioBuffer)
	{
		return default(int);
	}

	[Address(RVA = "0xE706A8", Offset = "0xE706A8", VA = "0xE706A8")]
	public static float GetAverageAbsVolume(uint context)
	{
		return default(float);
	}

	[Address(RVA = "0xE7074C", Offset = "0xE7074C", VA = "0xE7074C")]
	public OVRVoiceMod()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x6559B0", Offset = "0x6559B0")]
public class OVRVoiceModContext : MonoBehaviour
{
	public enum ovrVoiceModParams
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MixInputAudio,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PitchInputAudio,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SetBands,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FormantCorrection,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier1_TrackPitch,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier1_Type,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier1_Gain,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier1_Frequency,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier1_Note,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier1_PulseWidth,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier1_CycledNoiseSize,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier2_TrackPitch,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier2_Type,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier2_Gain,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier2_Frequency,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier2_Note,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier2_PulseWidth,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Carrier2_CycledNoiseSize,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Count
	}

	public struct VMPreset
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string info;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Color color;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mix;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float pitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int bands;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int formant;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int c1PTrack;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int c1Type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float c1Gain;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float c1Freq;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int c1Note;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float c1PW;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int c1CNS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int c2PTrack;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int c2Type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float c2Gain;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float c2Freq;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int c2Note;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float c2PW;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int c2CNS;
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float gain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool audioMute;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public KeyCode loopback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private VMPreset[] VMPresets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float VM_MixAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float VM_Pitch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int VM_Bands;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int VM_FormantCorrect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int VM_C1_TrackPitch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int VM_C1_Type;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float VM_C1_Gain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float VM_C1_Freq;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int VM_C1_Note;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float VM_C1_PulseWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int VM_C1_CycledNoiseSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int VM_C2_TrackPitch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int VM_C2_Type;

	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float VM_C2_Gain;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float VM_C2_Freq;

	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int VM_C2_Note;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float VM_C2_PulseWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int VM_C2_CycledNoiseSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private uint context;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float prevVol;

	[Address(RVA = "0xE707B4", Offset = "0xE707B4", VA = "0xE707B4")]
	private void Awake()
	{
	}

	[Address(RVA = "0xE70874", Offset = "0xE70874", VA = "0xE70874")]
	private void Start()
	{
	}

	[Address(RVA = "0xE70DE0", Offset = "0xE70DE0", VA = "0xE70DE0")]
	private void Update()
	{
	}

	[Address(RVA = "0xE71068", Offset = "0xE71068", VA = "0xE71068")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0xE7118C", Offset = "0xE7118C", VA = "0xE7118C")]
	private void OnAudioFilterRead(float[] data, int channels)
	{
	}

	[Address(RVA = "0xE713CC", Offset = "0xE713CC", VA = "0xE713CC")]
	public int SendParameter(ovrVoiceModParams parameter, int value)
	{
		return default(int);
	}

	[Address(RVA = "0xE71480", Offset = "0xE71480", VA = "0xE71480")]
	public bool SetPreset(int preset)
	{
		return default(bool);
	}

	[Address(RVA = "0xE719B0", Offset = "0xE719B0", VA = "0xE719B0")]
	public int GetNumPresets()
	{
		return default(int);
	}

	[Address(RVA = "0xE719DC", Offset = "0xE719DC", VA = "0xE719DC")]
	public Color GetPresetColor(int preset)
	{
		return default(Color);
	}

	[Address(RVA = "0xE71A78", Offset = "0xE71A78", VA = "0xE71A78")]
	public float GetAverageAbsVolume()
	{
		return default(float);
	}

	[Address(RVA = "0xE71B1C", Offset = "0xE71B1C", VA = "0xE71B1C")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Address(RVA = "0xE70FC0", Offset = "0xE70FC0", VA = "0xE70FC0")]
	private void UpdateVoiceModUpdate()
	{
	}

	[Address(RVA = "0xE70A2C", Offset = "0xE70A2C", VA = "0xE70A2C")]
	private void SendVoiceModUpdate()
	{
	}

	[Address(RVA = "0xE71C0C", Offset = "0xE71C0C", VA = "0xE71C0C")]
	public OVRVoiceModContext()
	{
	}
}
public class Ability : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F00", Offset = "0x659F00")]
	private sealed class <EnterShadowMode>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ability <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float targetTimeScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float transitionTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsed>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8A5B38", Offset = "0x8A5B38", VA = "0x8A5B38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8A5BA8", Offset = "0x8A5BA8", VA = "0x8A5BA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A5754", Offset = "0x8A5754", VA = "0x8A5754")]
		[DebuggerHidden]
		public <EnterShadowMode>d__26(int <>1__state)
		{
		}

		[Address(RVA = "0x8A5838", Offset = "0x8A5838", VA = "0x8A5838", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A583C", Offset = "0x8A583C", VA = "0x8A583C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A5B40", Offset = "0x8A5B40", VA = "0x8A5B40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F10", Offset = "0x659F10")]
	private sealed class <ExitShadowMode>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float transitionTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Ability <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsed>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8A5E40", Offset = "0x8A5E40", VA = "0x8A5E40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8A5EB0", Offset = "0x8A5EB0", VA = "0x8A5EB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A5780", Offset = "0x8A5780", VA = "0x8A5780")]
		[DebuggerHidden]
		public <ExitShadowMode>d__27(int <>1__state)
		{
		}

		[Address(RVA = "0x8A5BB0", Offset = "0x8A5BB0", VA = "0x8A5BB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A5BB4", Offset = "0x8A5BB4", VA = "0x8A5BB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A5E48", Offset = "0x8A5E48", VA = "0x8A5E48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light PrimaryLight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected VRTK_ControllerEvents leftControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected VRTK_ControllerEvents rightControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Player player;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool InProgress;

	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool AllowCombatSlowMo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool AllowSpecialTrigger;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public uint specialRequired;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public uint specialMax;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool handed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	protected bool left;

	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	protected bool right;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float leftTimer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected float rightTimer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color startFog;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color endFog;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float endIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float startScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float endScale;

	[Address(RVA = "0x8A563C", Offset = "0x8A563C", VA = "0x8A563C")]
	private void Start()
	{
	}

	[Address(RVA = "0x8A56E8", Offset = "0x8A56E8", VA = "0x8A56E8", Slot = "4")]
	public virtual void SetupAbility(VRTK_ControllerEvents left, VRTK_ControllerEvents right, Player p)
	{
	}

	[Address(RVA = "0x8A56F4", Offset = "0x8A56F4", VA = "0x8A56F4")]
	private void Update()
	{
	}

	[Address(RVA = "0x8A5738", Offset = "0x8A5738", VA = "0x8A5738", Slot = "5")]
	public virtual int StartAbility(int tier)
	{
		return default(int);
	}

	[Address(RVA = "0x8A5740", Offset = "0x8A5740", VA = "0x8A5740", Slot = "6")]
	public virtual bool CanEarnSpecial()
	{
		return default(bool);
	}

	[Address(RVA = "0x8A5750", Offset = "0x8A5750", VA = "0x8A5750", Slot = "7")]
	protected virtual void CheckForTriggerUpdate()
	{
	}

	[Address(RVA = "0x8A5480", Offset = "0x8A5480", VA = "0x8A5480")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67509C", Offset = "0x67509C")]
	public IEnumerator EnterShadowMode(float transitionTime = 1f, float targetTimeScale = 0.01f)
	{
		return null;
	}

	[Address(RVA = "0x8A552C", Offset = "0x8A552C", VA = "0x8A552C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675100", Offset = "0x675100")]
	public IEnumerator ExitShadowMode(float transitionTime = 1f)
	{
		return null;
	}

	[Address(RVA = "0x8A57AC", Offset = "0x8A57AC", VA = "0x8A57AC")]
	public Ability()
	{
	}
}
public class DoubleTriggerAbility : Ability
{
	[Address(RVA = "0x7C0110", Offset = "0x7C0110", VA = "0x7C0110", Slot = "4")]
	public override void SetupAbility(VRTK_ControllerEvents left, VRTK_ControllerEvents right, Player p)
	{
	}

	[Address(RVA = "0x7C0228", Offset = "0x7C0228", VA = "0x7C0228", Slot = "7")]
	protected override void CheckForTriggerUpdate()
	{
	}

	[Address(RVA = "0x7C0570", Offset = "0x7C0570", VA = "0x7C0570")]
	private void TriggerCheck(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x7C040C", Offset = "0x7C040C", VA = "0x7C040C")]
	private void Ability()
	{
	}

	[Address(RVA = "0x7C0624", Offset = "0x7C0624", VA = "0x7C0624")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x7C0630", Offset = "0x7C0630", VA = "0x7C0630", Slot = "8")]
	protected virtual void Cleanup()
	{
	}

	[Address(RVA = "0x7C0724", Offset = "0x7C0724", VA = "0x7C0724")]
	public DoubleTriggerAbility()
	{
	}
}
public class SingleHandAbility : DoubleTriggerAbility
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected bool leftHandShowing;

	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	protected bool rightHandShowing;

	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	protected bool allowBoth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AbilityWeapon leftAbilityHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AbilityWeapon rightAbilityHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool rightTriggeredByOculus;

	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool leftTriggeredByOculus;

	[Address(RVA = "0x980BFC", Offset = "0x980BFC", VA = "0x980BFC", Slot = "4")]
	public override void SetupAbility(VRTK_ControllerEvents left, VRTK_ControllerEvents right, Player p)
	{
	}

	[Address(RVA = "0x980E5C", Offset = "0x980E5C", VA = "0x980E5C", Slot = "7")]
	protected override void CheckForTriggerUpdate()
	{
	}

	[Address(RVA = "0x980FEC", Offset = "0x980FEC", VA = "0x980FEC")]
	private void LeftTrigger(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x980FF8", Offset = "0x980FF8", VA = "0x980FF8")]
	private void RightTrigger(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x981004", Offset = "0x981004", VA = "0x981004")]
	private void LeftTriggerRelease(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x981010", Offset = "0x981010", VA = "0x981010")]
	private void RightTriggerRelease(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x98101C", Offset = "0x98101C", VA = "0x98101C", Slot = "9")]
	protected virtual void TriggerPullLeftStart()
	{
	}

	[Address(RVA = "0x981070", Offset = "0x981070", VA = "0x981070", Slot = "10")]
	protected virtual void TriggerPullLeftStop()
	{
	}

	[Address(RVA = "0x9810C4", Offset = "0x9810C4", VA = "0x9810C4", Slot = "11")]
	protected virtual void TriggerPullRightStart()
	{
	}

	[Address(RVA = "0x981118", Offset = "0x981118", VA = "0x981118", Slot = "12")]
	protected virtual void TriggerPullRightStop()
	{
	}

	[Address(RVA = "0x98116C", Offset = "0x98116C", VA = "0x98116C")]
	private void RightAbilityHand_AbilityComplete(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x981170", Offset = "0x981170", VA = "0x981170")]
	private void LeftAbilityHand_AbilityComplete(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x981174", Offset = "0x981174", VA = "0x981174", Slot = "8")]
	protected override void Cleanup()
	{
	}

	[Address(RVA = "0x98131C", Offset = "0x98131C", VA = "0x98131C")]
	public SingleHandAbility()
	{
	}
}
public class AbilityWeapon : MonoBehaviour
{
	public event EventHandler<EventArgs> AbilityComplete
	{
		[Address(RVA = "0x8A5EB8", Offset = "0x8A5EB8", VA = "0x8A5EB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675164", Offset = "0x675164")]
		add
		{
		}
		[Address(RVA = "0x8A5FA4", Offset = "0x8A5FA4", VA = "0x8A5FA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675174", Offset = "0x675174")]
		remove
		{
		}
	}

	[Address(RVA = "0x8A6090", Offset = "0x8A6090", VA = "0x8A6090")]
	protected void TriggerAbilityComplete()
	{
	}

	[Address(RVA = "0x8A6124", Offset = "0x8A6124", VA = "0x8A6124", Slot = "4")]
	public virtual void TriggerPull()
	{
	}

	[Address(RVA = "0x8A6128", Offset = "0x8A6128", VA = "0x8A6128", Slot = "5")]
	public virtual void TriggerRelease()
	{
	}

	[Address(RVA = "0x8A612C", Offset = "0x8A612C", VA = "0x8A612C")]
	public AbilityWeapon()
	{
	}
}
public class AOESlowTimeAbilitiy : DoubleTriggerAbility
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F20", Offset = "0x659F20")]
	private sealed class <SlowTime>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AOESlowTimeAbilitiy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int tier;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8A55C4", Offset = "0x8A55C4", VA = "0x8A55C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8A5634", Offset = "0x8A5634", VA = "0x8A5634", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A4D80", Offset = "0x8A4D80", VA = "0x8A4D80")]
		[DebuggerHidden]
		public <SlowTime>d__7(int <>1__state)
		{
		}

		[Address(RVA = "0x8A4DE0", Offset = "0x8A4DE0", VA = "0x8A4DE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A4DE4", Offset = "0x8A4DE4", VA = "0x8A4DE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A55CC", Offset = "0x8A55CC", VA = "0x8A55CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float Reach;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float elapsedTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool countingTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float TimeInS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject[] TriggerVFX;

	[Address(RVA = "0x8A4C3C", Offset = "0x8A4C3C", VA = "0x8A4C3C")]
	public void Update()
	{
	}

	[Address(RVA = "0x8A4C90", Offset = "0x8A4C90", VA = "0x8A4C90", Slot = "5")]
	public override int StartAbility(int tier)
	{
		return default(int);
	}

	[Address(RVA = "0x8A4CE8", Offset = "0x8A4CE8", VA = "0x8A4CE8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675184", Offset = "0x675184")]
	public IEnumerator SlowTime(int tier)
	{
		return null;
	}

	[Address(RVA = "0x8A4DAC", Offset = "0x8A4DAC", VA = "0x8A4DAC")]
	private float getElapsedTime()
	{
		return default(float);
	}

	[Address(RVA = "0x8A4DB4", Offset = "0x8A4DB4", VA = "0x8A4DB4")]
	public AOESlowTimeAbilitiy()
	{
	}

	[Address(RVA = "0x8A4DCC", Offset = "0x8A4DCC", VA = "0x8A4DCC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6751E8", Offset = "0x6751E8")]
	private bool <SlowTime>b__7_0()
	{
		return default(bool);
	}
}
public class ChainDartAbility : SingleHandAbility
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F30", Offset = "0x659F30")]
	private sealed class <ChainDart>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChainDartAbility <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int tier;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8BDA00", Offset = "0x8BDA00", VA = "0x8BDA00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8BDA70", Offset = "0x8BDA70", VA = "0x8BDA70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8BD420", Offset = "0x8BD420", VA = "0x8BD420")]
		[DebuggerHidden]
		public <ChainDart>d__4(int <>1__state)
		{
		}

		[Address(RVA = "0x8BD4C4", Offset = "0x8BD4C4", VA = "0x8BD4C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8BD4C8", Offset = "0x8BD4C8", VA = "0x8BD4C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8BDA08", Offset = "0x8BDA08", VA = "0x8BDA08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private HandChainDart dart;

	[Address(RVA = "0x8BD2F0", Offset = "0x8BD2F0", VA = "0x8BD2F0", Slot = "4")]
	public override void SetupAbility(VRTK_ControllerEvents left, VRTK_ControllerEvents right, Player p)
	{
	}

	[Address(RVA = "0x8BD2F8", Offset = "0x8BD2F8", VA = "0x8BD2F8")]
	public void Update()
	{
	}

	[Address(RVA = "0x8BD33C", Offset = "0x8BD33C", VA = "0x8BD33C", Slot = "5")]
	public override int StartAbility(int tier)
	{
		return default(int);
	}

	[Address(RVA = "0x8BD388", Offset = "0x8BD388", VA = "0x8BD388")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6751F8", Offset = "0x6751F8")]
	public IEnumerator ChainDart(int tier)
	{
		return null;
	}

	[Address(RVA = "0x8BD44C", Offset = "0x8BD44C", VA = "0x8BD44C")]
	public ChainDartAbility()
	{
	}

	[Address(RVA = "0x8BD454", Offset = "0x8BD454", VA = "0x8BD454")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67525C", Offset = "0x67525C")]
	private bool <ChainDart>b__4_0()
	{
		return default(bool);
	}

	[Address(RVA = "0x8BD488", Offset = "0x8BD488", VA = "0x8BD488")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67526C", Offset = "0x67526C")]
	private bool <ChainDart>b__4_1()
	{
		return default(bool);
	}
}
public class HandBlastAbility : SingleHandAbility
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F40", Offset = "0x659F40")]
	private sealed class <HandBlast>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandBlastAbility <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int tier;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x702DC0", Offset = "0x702DC0", VA = "0x702DC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x702E30", Offset = "0x702E30", VA = "0x702E30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x702744", Offset = "0x702744", VA = "0x702744")]
		[DebuggerHidden]
		public <HandBlast>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x702874", Offset = "0x702874", VA = "0x702874", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x702878", Offset = "0x702878", VA = "0x702878", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x702DC8", Offset = "0x702DC8", VA = "0x702DC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private HandBlaster[] blasters;

	[Address(RVA = "0x702618", Offset = "0x702618", VA = "0x702618")]
	public void Update()
	{
	}

	[Address(RVA = "0x70265C", Offset = "0x70265C", VA = "0x70265C", Slot = "5")]
	public override int StartAbility(int tier)
	{
		return default(int);
	}

	[Address(RVA = "0x7026AC", Offset = "0x7026AC", VA = "0x7026AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67527C", Offset = "0x67527C")]
	public IEnumerator HandBlast(int tier)
	{
		return null;
	}

	[Address(RVA = "0x702770", Offset = "0x702770", VA = "0x702770")]
	public HandBlastAbility()
	{
	}

	[Address(RVA = "0x702778", Offset = "0x702778", VA = "0x702778")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6752E0", Offset = "0x6752E0")]
	private bool <HandBlast>b__3_0()
	{
		return default(bool);
	}
}
public class NoAbility : Ability
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool SetInProgressToFalse;

	[Address(RVA = "0x916528", Offset = "0x916528", VA = "0x916528")]
	private void Start()
	{
	}

	[Address(RVA = "0x9165A4", Offset = "0x9165A4", VA = "0x9165A4")]
	public NoAbility()
	{
	}
}
public class ShadowBowAbility : DoubleTriggerAbility
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F50", Offset = "0x659F50")]
	private sealed class <ShadowBow>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShadowBowAbility <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1568580", Offset = "0x1568580", VA = "0x1568580", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15685F0", Offset = "0x15685F0", VA = "0x15685F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15680C0", Offset = "0x15680C0", VA = "0x15680C0")]
		[DebuggerHidden]
		public <ShadowBow>d__12(int <>1__state)
		{
		}

		[Address(RVA = "0x1568118", Offset = "0x1568118", VA = "0x1568118", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x156811C", Offset = "0x156811C", VA = "0x156811C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1568588", Offset = "0x1568588", VA = "0x1568588", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int numberOfArrows;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int arrowsFired;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Bow bow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshPro ArrowCountText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform HintLineStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform HintLineEnd;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public ParticleSystem HintLine;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public List<GameObject> SpareArrows;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float HintTime;

	[Address(RVA = "0x1567A3C", Offset = "0x1567A3C", VA = "0x1567A3C")]
	public void Update()
	{
	}

	[Address(RVA = "0x1567F1C", Offset = "0x1567F1C", VA = "0x1567F1C", Slot = "5")]
	public override int StartAbility(int tier)
	{
		return default(int);
	}

	[Address(RVA = "0x1567FE4", Offset = "0x1567FE4", VA = "0x1567FE4")]
	private void UpdateSpareArrows()
	{
	}

	[Address(RVA = "0x1567F70", Offset = "0x1567F70", VA = "0x1567F70")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6752F0", Offset = "0x6752F0")]
	public IEnumerator ShadowBow()
	{
		return null;
	}

	[Address(RVA = "0x15680EC", Offset = "0x15680EC", VA = "0x15680EC")]
	private void Bow_OnFireBow(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x1568100", Offset = "0x1568100", VA = "0x1568100")]
	public ShadowBowAbility()
	{
	}

	[Address(RVA = "0x1568108", Offset = "0x1568108", VA = "0x1568108")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675354", Offset = "0x675354")]
	private bool <ShadowBow>b__12_0()
	{
		return default(bool);
	}
}
public class ShadowStepAbility : DoubleTriggerAbility
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F60", Offset = "0x659F60")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<bool> <>9__12_2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<bool> <>9__12_0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Func<bool> <>9__12_1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Func<bool> <>9__14_0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Func<bool> <>9__14_1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static Func<bool> <>9__14_2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Func<bool> <>9__14_4;

		[Address(RVA = "0x156C2A8", Offset = "0x156C2A8", VA = "0x156C2A8")]
		public <>c()
		{
		}

		[Address(RVA = "0x156C2B0", Offset = "0x156C2B0", VA = "0x156C2B0")]
		internal bool <ShadowStep>b__12_2()
		{
			return default(bool);
		}

		[Address(RVA = "0x156C334", Offset = "0x156C334", VA = "0x156C334")]
		internal bool <ShadowStep>b__12_0()
		{
			return default(bool);
		}

		[Address(RVA = "0x156C3B8", Offset = "0x156C3B8", VA = "0x156C3B8")]
		internal bool <ShadowStep>b__12_1()
		{
			return default(bool);
		}

		[Address(RVA = "0x156C43C", Offset = "0x156C43C", VA = "0x156C43C")]
		internal bool <ShadowJump>b__14_0()
		{
			return default(bool);
		}

		[Address(RVA = "0x156C4C0", Offset = "0x156C4C0", VA = "0x156C4C0")]
		internal bool <ShadowJump>b__14_1()
		{
			return default(bool);
		}

		[Address(RVA = "0x156C544", Offset = "0x156C544", VA = "0x156C544")]
		internal bool <ShadowJump>b__14_2()
		{
			return default(bool);
		}

		[Address(RVA = "0x156C5C8", Offset = "0x156C5C8", VA = "0x156C5C8")]
		internal bool <ShadowJump>b__14_4()
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F70", Offset = "0x659F70")]
	private sealed class <ShadowStep>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShadowStepAbility <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Enemy> selectedEnemies;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Enemy>.Enumerator <>7__wrap1;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x156E260", Offset = "0x156E260", VA = "0x156E260", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x156E2D0", Offset = "0x156E2D0", VA = "0x156E2D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156BEFC", Offset = "0x156BEFC", VA = "0x156BEFC")]
		[DebuggerHidden]
		public <ShadowStep>d__12(int <>1__state)
		{
		}

		[Address(RVA = "0x156D358", Offset = "0x156D358", VA = "0x156D358", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x156D448", Offset = "0x156D448", VA = "0x156D448", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x156D398", Offset = "0x156D398", VA = "0x156D398")]
		private void <>m__Finally1()
		{
		}

		[Address(RVA = "0x156D3F0", Offset = "0x156D3F0", VA = "0x156D3F0")]
		private void <>m__Finally2()
		{
		}

		[Address(RVA = "0x156E268", Offset = "0x156E268", VA = "0x156E268", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F80", Offset = "0x659F80")]
	private sealed class <>c__DisplayClass14_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StatefulEnemy state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float startHealth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float startTime;

		[Address(RVA = "0x156C64C", Offset = "0x156C64C", VA = "0x156C64C")]
		public <>c__DisplayClass14_0()
		{
		}

		[Address(RVA = "0x156C654", Offset = "0x156C654", VA = "0x156C654")]
		internal bool <ShadowJump>b__3()
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659F90", Offset = "0x659F90")]
	private sealed class <ShadowJump>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Enemy target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ShadowStepAbility <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass14_0 <>8__1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SwingingWeapon[] <Weapons>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <weaponReach>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <forward>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 <startPos>5__5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float <elapsed>5__6;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 <offset>5__7;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x156D2E0", Offset = "0x156D2E0", VA = "0x156D2E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x156D350", Offset = "0x156D350", VA = "0x156D350", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156C208", Offset = "0x156C208", VA = "0x156C208")]
		[DebuggerHidden]
		public <ShadowJump>d__14(int <>1__state)
		{
		}

		[Address(RVA = "0x156C6EC", Offset = "0x156C6EC", VA = "0x156C6EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x156C6F0", Offset = "0x156C6F0", VA = "0x156C6F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x156D2E8", Offset = "0x156D2E8", VA = "0x156D2E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float Reach;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<Enemy> currentEnemies;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 initialPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform PlayerTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float TimeInS;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMeshPro TimeText;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject TargetVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float elapsedTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private bool countingTime;

	[Address(RVA = "0x156B63C", Offset = "0x156B63C", VA = "0x156B63C")]
	private void Start()
	{
	}

	[Address(RVA = "0x156B744", Offset = "0x156B744", VA = "0x156B744")]
	public void Update()
	{
	}

	[Address(RVA = "0x156B788", Offset = "0x156B788", VA = "0x156B788", Slot = "5")]
	public override int StartAbility(int tier)
	{
		return default(int);
	}

	[Address(RVA = "0x156BE64", Offset = "0x156BE64", VA = "0x156BE64")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675364", Offset = "0x675364")]
	public IEnumerator ShadowStep(List<Enemy> selectedEnemies)
	{
		return null;
	}

	[Address(RVA = "0x156BF28", Offset = "0x156BF28", VA = "0x156BF28")]
	private int enemyZSort(Enemy a, Enemy b)
	{
		return default(int);
	}

	[Address(RVA = "0x156C170", Offset = "0x156C170", VA = "0x156C170")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6753C8", Offset = "0x6753C8")]
	public IEnumerator ShadowJump(Enemy target)
	{
		return null;
	}

	[Address(RVA = "0x156C234", Offset = "0x156C234", VA = "0x156C234")]
	private float getElapsedTime()
	{
		return default(float);
	}

	[Address(RVA = "0x156C23C", Offset = "0x156C23C", VA = "0x156C23C")]
	public ShadowStepAbility()
	{
	}
}
public class StopTimeAbility : SingleHandAbility
{
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private HandStopTime leftHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private HandStopTime rightHand;

	[Address(RVA = "0x7243E0", Offset = "0x7243E0", VA = "0x7243E0")]
	private void Start()
	{
	}

	[Address(RVA = "0x7245C0", Offset = "0x7245C0", VA = "0x7245C0")]
	private void TimeResumed(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x7245CC", Offset = "0x7245CC", VA = "0x7245CC")]
	private void TimeStopped(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x7245D8", Offset = "0x7245D8", VA = "0x7245D8", Slot = "8")]
	protected override void Cleanup()
	{
	}

	[Address(RVA = "0x724788", Offset = "0x724788", VA = "0x724788", Slot = "6")]
	public override bool CanEarnSpecial()
	{
		return default(bool);
	}

	[Address(RVA = "0x724798", Offset = "0x724798", VA = "0x724798")]
	public StopTimeAbility()
	{
	}
}
public class AttachedUI : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Target;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool AutoHide;

	[Address(RVA = "0x8A781C", Offset = "0x8A781C", VA = "0x8A781C")]
	private void Update()
	{
	}

	[Address(RVA = "0x8A79B8", Offset = "0x8A79B8", VA = "0x8A79B8")]
	public AttachedUI()
	{
	}
}
public class AttachToForearmRig : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform Elbow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform Wrist;

	[Address(RVA = "0x8A760C", Offset = "0x8A760C", VA = "0x8A760C")]
	public void AttachToRig(Transform wrist, Transform elbow)
	{
	}

	[Address(RVA = "0x8A7814", Offset = "0x8A7814", VA = "0x8A7814")]
	public AttachToForearmRig()
	{
	}
}
public class AudioManager : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioManager instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerGroup amg;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixer mixer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] clips;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource timerClip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<AudioSource> sourcesOn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<AudioSource> sourcesOff;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<string, AudioClip> ac;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LevelAudio level;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float fadeTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool stopAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<AudioClip> addClips;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<string> oneHits;

	[Address(RVA = "0x8A79C8", Offset = "0x8A79C8", VA = "0x8A79C8")]
	public static void PostEvent(string e)
	{
	}

	[Address(RVA = "0x8A86A4", Offset = "0x8A86A4", VA = "0x8A86A4")]
	public static void SetMusicVolume(float v)
	{
	}

	[Address(RVA = "0x8A7A8C", Offset = "0x8A7A8C", VA = "0x8A7A8C")]
	private void SetAudio(string e, bool add = false)
	{
	}

	[Address(RVA = "0x8A89A4", Offset = "0x8A89A4", VA = "0x8A89A4")]
	private void SetLevelAudio(AudioSetting a)
	{
	}

	[Address(RVA = "0x8A87E8", Offset = "0x8A87E8", VA = "0x8A87E8")]
	private void SetAudio(AudioSetting a)
	{
	}

	[Address(RVA = "0x8A8B60", Offset = "0x8A8B60", VA = "0x8A8B60")]
	private void StopAudio()
	{
	}

	[Address(RVA = "0x8A89B4", Offset = "0x8A89B4", VA = "0x8A89B4")]
	private void SetSource(AudioClip c)
	{
	}

	[Address(RVA = "0x8A8D94", Offset = "0x8A8D94", VA = "0x8A8D94")]
	private void Update()
	{
	}

	[Address(RVA = "0x8A92D8", Offset = "0x8A92D8", VA = "0x8A92D8")]
	private void Awake()
	{
	}

	[Address(RVA = "0x8A943C", Offset = "0x8A943C", VA = "0x8A943C")]
	public AudioManager()
	{
	}
}
public class AudioVariation : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, float> audioFilePlayTimes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float globalAudioCooldownPerPhrase;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool playing;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] clips;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65EC14", Offset = "0x65EC14")]
	public float minPitch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65EC2C", Offset = "0x65EC2C")]
	public float maxPitch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool globalCooldown;

	[Address(RVA = "0x8A96C0", Offset = "0x8A96C0", VA = "0x8A96C0")]
	private void Start()
	{
	}

	[Address(RVA = "0x8A9C1C", Offset = "0x8A9C1C", VA = "0x8A9C1C")]
	private void Update()
	{
	}

	[Address(RVA = "0x8A9850", Offset = "0x8A9850", VA = "0x8A9850")]
	private void Play()
	{
	}

	[Address(RVA = "0x8A9DF0", Offset = "0x8A9DF0", VA = "0x8A9DF0")]
	public AudioVariation()
	{
	}
}
public class AutoDestroy : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659FA0", Offset = "0x659FA0")]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoDestroy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8AA01C", Offset = "0x8AA01C", VA = "0x8AA01C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8AA08C", Offset = "0x8AA08C", VA = "0x8AA08C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A9EF8", Offset = "0x8A9EF8", VA = "0x8A9EF8")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Address(RVA = "0x8A9F2C", Offset = "0x8A9F2C", VA = "0x8A9F2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A9F30", Offset = "0x8A9F30", VA = "0x8A9F30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8AA024", Offset = "0x8AA024", VA = "0x8AA024", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Address(RVA = "0x8A9E84", Offset = "0x8A9E84", VA = "0x8A9E84")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67542C", Offset = "0x67542C")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x8A9F24", Offset = "0x8A9F24", VA = "0x8A9F24")]
	public AutoDestroy()
	{
	}
}
public class Blink : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659FB0", Offset = "0x659FB0")]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Blink <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8B034C", Offset = "0x8B034C", VA = "0x8B034C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8B03BC", Offset = "0x8B03BC", VA = "0x8B03BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8B0204", Offset = "0x8B0204", VA = "0x8B0204")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Address(RVA = "0x8B0238", Offset = "0x8B0238", VA = "0x8B0238", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8B023C", Offset = "0x8B023C", VA = "0x8B023C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8B0354", Offset = "0x8B0354", VA = "0x8B0354", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Address(RVA = "0x8B0190", Offset = "0x8B0190", VA = "0x8B0190")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675490", Offset = "0x675490")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x8B0230", Offset = "0x8B0230", VA = "0x8B0230")]
	public Blink()
	{
	}
}
public class BloodDisabler : MonoBehaviour
{
	[Address(RVA = "0x8B0F0C", Offset = "0x8B0F0C", VA = "0x8B0F0C")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x8B0F68", Offset = "0x8B0F68", VA = "0x8B0F68")]
	public BloodDisabler()
	{
	}
}
public class Buff
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BuffTrigger[] Triggers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool active;

	public bool Active
	{
		[Address(RVA = "0x8BAF24", Offset = "0x8BAF24", VA = "0x8BAF24")]
		get
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x8BAF2C", Offset = "0x8BAF2C", VA = "0x8BAF2C")]
	public Buff(BuffTrigger[] triggers, bool isActive = false)
	{
	}

	[Address(RVA = "0x8BAF6C", Offset = "0x8BAF6C", VA = "0x8BAF6C")]
	public void Activate()
	{
	}

	[Address(RVA = "0x8BAF78", Offset = "0x8BAF78", VA = "0x8BAF78")]
	public void Deactivate()
	{
	}

	[Address(RVA = "0x8BAF80", Offset = "0x8BAF80", VA = "0x8BAF80")]
	public bool CanApply(BuffTrigger point)
	{
		return default(bool);
	}

	[Address(RVA = "0x8BB000", Offset = "0x8BB000", VA = "0x8BB000", Slot = "4")]
	public virtual float Apply(float input)
	{
		return default(float);
	}
}
public enum BuffTrigger
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ENEMY_HIT,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ENEMY_TAKE_DAMAGE
}
public class BuffManager
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659FC0", Offset = "0x659FC0")]
	private sealed class <>c__2<T> where T : Buff
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c__2<T> <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Func<Buff, bool> <>9__2_0;

		internal bool <IsActiveOnEnemy>b__2_0(Buff b)
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x8BB004", Offset = "0x8BB004", VA = "0x8BB004")]
	public static float ApplyToPlayer(float input, BuffTrigger trigger)
	{
		return default(float);
	}

	[Address(RVA = "0x8BB1BC", Offset = "0x8BB1BC", VA = "0x8BB1BC")]
	public static float ApplyToEnemy(float input, BuffTrigger trigger, StatefulEnemy target)
	{
		return default(float);
	}

	public static bool IsActiveOnEnemy<T>(StatefulEnemy target) where T : Buff
	{
		return default(bool);
	}

	[Address(RVA = "0x8BB330", Offset = "0x8BB330", VA = "0x8BB330")]
	public BuffManager()
	{
	}
}
public class DamageBuff : Buff
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float multiplier;

	[Address(RVA = "0x8C23D0", Offset = "0x8C23D0", VA = "0x8C23D0")]
	public DamageBuff(float multiplier = 1f, bool isActive = false)
	{
	}

	[Address(RVA = "0x8C2484", Offset = "0x8C2484", VA = "0x8C2484", Slot = "4")]
	public override float Apply(float input)
	{
		return default(float);
	}
}
public class InvincibilityBuff : Buff
{
	[Address(RVA = "0x709C10", Offset = "0x709C10", VA = "0x709C10")]
	public InvincibilityBuff(bool isActive = false)
	{
	}

	[Address(RVA = "0x709CB0", Offset = "0x709CB0", VA = "0x709CB0", Slot = "4")]
	public override float Apply(float input)
	{
		return default(float);
	}
}
public class MinDamageBuff : Buff
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float MinDamage;

	[Address(RVA = "0x914250", Offset = "0x914250", VA = "0x914250")]
	public MinDamageBuff(float minDamage, bool isActive = false)
	{
	}

	[Address(RVA = "0x914304", Offset = "0x914304", VA = "0x914304", Slot = "4")]
	public override float Apply(float input)
	{
		return default(float);
	}
}
public class ComboManager : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659FD0", Offset = "0x659FD0")]
	private sealed class <triggerComboEffect>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ComboManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C183C", Offset = "0x8C183C", VA = "0x8C183C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C18AC", Offset = "0x8C18AC", VA = "0x8C18AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C1028", Offset = "0x8C1028", VA = "0x8C1028")]
		[DebuggerHidden]
		public <triggerComboEffect>d__21(int <>1__state)
		{
		}

		[Address(RVA = "0x8C1704", Offset = "0x8C1704", VA = "0x8C1704", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C1708", Offset = "0x8C1708", VA = "0x8C1708", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C1844", Offset = "0x8C1844", VA = "0x8C1844", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659FE0", Offset = "0x659FE0")]
	private sealed class <onPlayerHit>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ComboManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C14F8", Offset = "0x8C14F8", VA = "0x8C14F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C1568", Offset = "0x8C1568", VA = "0x8C1568", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C10C8", Offset = "0x8C10C8", VA = "0x8C10C8")]
		[DebuggerHidden]
		public <onPlayerHit>d__22(int <>1__state)
		{
		}

		[Address(RVA = "0x8C1414", Offset = "0x8C1414", VA = "0x8C1414", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C1418", Offset = "0x8C1418", VA = "0x8C1418", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C1500", Offset = "0x8C1500", VA = "0x8C1500", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x659FF0", Offset = "0x659FF0")]
	private sealed class <onCritHitOrKillOrDeflect>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ComboManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C139C", Offset = "0x8C139C", VA = "0x8C139C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C140C", Offset = "0x8C140C", VA = "0x8C140C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C1168", Offset = "0x8C1168", VA = "0x8C1168")]
		[DebuggerHidden]
		public <onCritHitOrKillOrDeflect>d__23(int <>1__state)
		{
		}

		[Address(RVA = "0x8C12B8", Offset = "0x8C12B8", VA = "0x8C12B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C12BC", Offset = "0x8C12BC", VA = "0x8C12BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C13A4", Offset = "0x8C13A4", VA = "0x8C13A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A000", Offset = "0x65A000")]
	private sealed class <onProjectileBlock>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ComboManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C168C", Offset = "0x8C168C", VA = "0x8C168C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C16FC", Offset = "0x8C16FC", VA = "0x8C16FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C1208", Offset = "0x8C1208", VA = "0x8C1208")]
		[DebuggerHidden]
		public <onProjectileBlock>d__24(int <>1__state)
		{
		}

		[Address(RVA = "0x8C1570", Offset = "0x8C1570", VA = "0x8C1570", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C1574", Offset = "0x8C1574", VA = "0x8C1574", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C1694", Offset = "0x8C1694", VA = "0x8C1694", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Container;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image Combo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject ComboEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool Active;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float width;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float STATE_TIMEOUT_IN_S;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Machine stateMachine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float stateSetTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool paused;

	[Address(RVA = "0x8BFDC4", Offset = "0x8BFDC4", VA = "0x8BFDC4")]
	public void Start()
	{
	}

	[Address(RVA = "0x8C01F0", Offset = "0x8C01F0", VA = "0x8C01F0")]
	public void Update()
	{
	}

	[Address(RVA = "0x8C0204", Offset = "0x8C0204", VA = "0x8C0204")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x8C03F4", Offset = "0x8C03F4", VA = "0x8C03F4")]
	private List<State> getStates()
	{
		return null;
	}

	[Address(RVA = "0x8BFE38", Offset = "0x8BFE38", VA = "0x8BFE38")]
	private void initEvents()
	{
	}

	[Address(RVA = "0x8C0060", Offset = "0x8C0060", VA = "0x8C0060")]
	private void initStateMachine()
	{
	}

	[Address(RVA = "0x8C0ADC", Offset = "0x8C0ADC", VA = "0x8C0ADC")]
	private void updateUI(float percentage)
	{
	}

	[Address(RVA = "0x8C0B98", Offset = "0x8C0B98", VA = "0x8C0B98")]
	private void onComboNone([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8C0C14", Offset = "0x8C0C14", VA = "0x8C0C14")]
	private void onCombo1([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8C0C94", Offset = "0x8C0C94", VA = "0x8C0C94")]
	private void onCombo2([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8C0D14", Offset = "0x8C0D14", VA = "0x8C0D14")]
	private void onCombo3([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8C0E1C", Offset = "0x8C0E1C", VA = "0x8C0E1C")]
	private void onComboUpdate()
	{
	}

	[Address(RVA = "0x8C0DA8", Offset = "0x8C0DA8", VA = "0x8C0DA8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6754F4", Offset = "0x6754F4")]
	private IEnumerator triggerComboEffect()
	{
		return null;
	}

	[Address(RVA = "0x8C1054", Offset = "0x8C1054", VA = "0x8C1054")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675558", Offset = "0x675558")]
	private IEnumerator onPlayerHit(GameObject source)
	{
		return null;
	}

	[Address(RVA = "0x8C10F4", Offset = "0x8C10F4", VA = "0x8C10F4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6755BC", Offset = "0x6755BC")]
	private IEnumerator onCritHitOrKillOrDeflect()
	{
		return null;
	}

	[Address(RVA = "0x8C1194", Offset = "0x8C1194", VA = "0x8C1194")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675620", Offset = "0x675620")]
	private IEnumerator onProjectileBlock()
	{
		return null;
	}

	[Address(RVA = "0x8C1234", Offset = "0x8C1234", VA = "0x8C1234")]
	public ComboManager()
	{
	}

	[Address(RVA = "0x8C1290", Offset = "0x8C1290", VA = "0x8C1290")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675684", Offset = "0x675684")]
	private void <initStateMachine>b__14_0()
	{
	}
}
[Serializable]
public class Difficulty
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float GlobalSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int MaxEnemiesAtOnce;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float EnemyHealth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float ProjectileFrequency;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float PlayerHealth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ConeOfAttack;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float StagingDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float TimeBetweenWaves;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float StunBlockedTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float SlowMoTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float SlowMoTimeLowHealth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float SlowMoTimeKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float SlowMoTimeCritKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float SlowMoTimeBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float SlowMoTimeHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float SlowMoTimeWeakHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float SlowMoScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float SlowMoScaleLowHealth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float SlowMoScaleKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float SlowMoScaleCritKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float SlowMoScaleBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float SlowMoScaleHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float SlowMoScaleWeakHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float AttackSpacing;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float StagingWaitTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool DisableEnemyBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisableAgressive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	public bool AllFreeform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
	public bool NoAgile;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool AllAgile;

	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool DisableSlowMo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int DashCap;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float ShouldDashMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float TriggerSlowMoOnHealthPercentage;

	public string FriendlyName
	{
		[Address(RVA = "0x7BE390", Offset = "0x7BE390", VA = "0x7BE390")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x7BE494", Offset = "0x7BE494", VA = "0x7BE494")]
	public void Copy(Difficulty toCopy)
	{
	}

	[Address(RVA = "0x7BE7C0", Offset = "0x7BE7C0", VA = "0x7BE7C0")]
	public Difficulty()
	{
	}
}
[Serializable]
public class LevelConfig
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Subtitle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Description;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string LongDescription;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string EndlessDescription;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int FOVLevel;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string PostCompletionScene;

	public string SceneName
	{
		[Address(RVA = "0x81E928", Offset = "0x81E928", VA = "0x81E928")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x81E97C", Offset = "0x81E97C", VA = "0x81E97C")]
	public LevelConfig()
	{
	}
}
[Serializable]
public class World
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LevelConfig[] Levels;

	[Address(RVA = "0x14B57C8", Offset = "0x14B57C8", VA = "0x14B57C8")]
	public World()
	{
	}
}
[Serializable]
public class Special
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ShortDescription;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string DamageAndTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string Additional;

	[Address(RVA = "0x985624", Offset = "0x985624", VA = "0x985624")]
	public Special()
	{
	}
}
[Serializable]
public class WeaponConfig
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Address(RVA = "0x14B57B8", Offset = "0x14B57B8", VA = "0x14B57B8")]
	public WeaponConfig()
	{
	}
}
[Serializable]
public class GameConfig
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Difficulty[] Difficulties;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public World[] Worlds;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] Challenges;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Special[] Specials;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public WeaponConfig[] Weapons;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSetting[] AudioSettings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LevelAudio[] LevelAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSetting[] IntensityAudio;

	[Address(RVA = "0x6FA1F0", Offset = "0x6FA1F0", VA = "0x6FA1F0")]
	public GameConfig()
	{
	}
}
[Serializable]
public class LevelAudio
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSetting start;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSetting progress25;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSetting progress50;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSetting progress75;

	[Address(RVA = "0x81E920", Offset = "0x81E920", VA = "0x81E920")]
	public LevelAudio()
	{
	}
}
[Serializable]
public class AudioSetting
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] clips;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool othersOff;

	[Address(RVA = "0x8A96B8", Offset = "0x8A96B8", VA = "0x8A96B8")]
	public AudioSetting()
	{
	}
}
[Serializable]
public class Boss
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BossPhase[] Phases;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Enemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string SpawnLocation;

	[Address(RVA = "0x8B2340", Offset = "0x8B2340", VA = "0x8B2340")]
	public Boss()
	{
	}
}
[Serializable]
public class BossPhase
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool Jump;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Location;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform LocationTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string[] EventTriggers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public BossSubPhase[] SubPhases;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int subphaseIndex;

	public BossSubPhase CurrentSubphase
	{
		[Address(RVA = "0x8B2348", Offset = "0x8B2348", VA = "0x8B2348")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x8B2398", Offset = "0x8B2398", VA = "0x8B2398")]
	public bool ProgressSubphaseOrFail()
	{
		return default(bool);
	}

	[Address(RVA = "0x8B23F8", Offset = "0x8B23F8", VA = "0x8B23F8")]
	public bool CanProgress()
	{
		return default(bool);
	}

	[Address(RVA = "0x8B2434", Offset = "0x8B2434", VA = "0x8B2434")]
	public BossPhase()
	{
	}
}
[Serializable]
public class BossSubPhase
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Mode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string AnimationToPlay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Wave Wave;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int MaxEnemies;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Health;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string[] EventTriggers;

	[Address(RVA = "0x8B3000", Offset = "0x8B3000", VA = "0x8B3000")]
	public BossMode GetMode()
	{
		return default(BossMode);
	}

	[Address(RVA = "0x8B5EB0", Offset = "0x8B5EB0", VA = "0x8B5EB0")]
	public BossSubPhase()
	{
	}
}
public enum BossMode
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	MELEE,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	PROJECTILE,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	RETREAT,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	FATALITY,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ANIMATION
}
[Serializable]
public class Challenge
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Description;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int Level;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int Weapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Special;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public WaveData WaveData;

	[Address(RVA = "0x8BDA78", Offset = "0x8BDA78", VA = "0x8BDA78")]
	public Challenge()
	{
	}
}
[Serializable]
public class LevelEvent
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string SpawnLocation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string SpawnObject;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool SetActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string Animation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Object;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Delay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool EndlessStart;

	[Address(RVA = "0x81E984", Offset = "0x81E984", VA = "0x81E984")]
	public LevelEvent()
	{
	}
}
[Serializable]
public class PathState
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool Jump;

	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool AttackOnEndOfPath;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string RunAnimation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] Path;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] PathTransforms;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string PlayAnimation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float EnterDelayInS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool JumpAttack;

	[Address(RVA = "0x75590C", Offset = "0x75590C", VA = "0x75590C")]
	public PathState()
	{
	}
}
[Serializable]
public class Wave
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public WaveItem[] Items;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] EventTriggers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool FreeForm;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string AudioQue;

	[Address(RVA = "0x819A24", Offset = "0x819A24", VA = "0x819A24")]
	public Wave()
	{
	}
}
[Serializable]
public class WaveData
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Wave[] Waves;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LevelEvent[] Events;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Boss Boss;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string SpawnStyle;

	[Address(RVA = "0x819A2C", Offset = "0x819A2C", VA = "0x819A2C")]
	public WaveData()
	{
	}
}
[Serializable]
public class WaveItem
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Enemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Variant;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string SpawnLocation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PathState[] PathStates;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool Aggressive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool Agile;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int TargetNum;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string[] EventTriggers;

	[Address(RVA = "0x819A34", Offset = "0x819A34", VA = "0x819A34")]
	public WaveItem()
	{
	}
}
public class Loader
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A010", Offset = "0x65A010")]
	private sealed class <LoadConfigFromFile>d__2<T> : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string path;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action<T> callback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityWebRequest <request>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[DebuggerHidden]
		public <LoadConfigFromFile>d__2(int <>1__state)
		{
		}

		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		private bool MoveNext()
		{
			return default(bool);
		}

		private void <>m__Finally1()
		{
		}

		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A020", Offset = "0x65A020")]
	private sealed class <LoadAndSetImage>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string path;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool etc2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityWebRequest <request>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x835BA0", Offset = "0x835BA0", VA = "0x835BA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x835C10", Offset = "0x835C10", VA = "0x835C10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x83547C", Offset = "0x83547C", VA = "0x83547C")]
		[DebuggerHidden]
		public <LoadAndSetImage>d__4(int <>1__state)
		{
		}

		[Address(RVA = "0x8354B0", Offset = "0x8354B0", VA = "0x8354B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x83558C", Offset = "0x83558C", VA = "0x83558C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8354CC", Offset = "0x8354CC", VA = "0x8354CC")]
		private void <>m__Finally1()
		{
		}

		[Address(RVA = "0x835BA8", Offset = "0x835BA8", VA = "0x835BA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Address(RVA = "0x81C490", Offset = "0x81C490", VA = "0x81C490")]
	public static string GetAssetPath()
	{
		return null;
	}

	[Address(RVA = "0x835380", Offset = "0x835380", VA = "0x835380")]
	public static string GetGameFileName()
	{
		return null;
	}

	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675694", Offset = "0x675694")]
	public static IEnumerator LoadConfigFromFile<T>(string path, Action<T> callback)
	{
		return null;
	}

	public static T LoadConfigFromLocalFile<T>(string path)
	{
		return (T)null;
	}

	[Address(RVA = "0x8353C8", Offset = "0x8353C8", VA = "0x8353C8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6756F8", Offset = "0x6756F8")]
	public static IEnumerator LoadAndSetImage(Image target, string path, bool etc2 = false)
	{
		return null;
	}

	[Address(RVA = "0x8354A8", Offset = "0x8354A8", VA = "0x8354A8")]
	public Loader()
	{
	}
}
public class Cutable : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Cutter cutter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected bool hit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float requiredSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float requiredStabSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject hitSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject missSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject audioVFXSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float BreakBlockHandSpeedThreshold;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string[] levelEventOnDestroy;

	[Address(RVA = "0x8C1A44", Offset = "0x8C1A44", VA = "0x8C1A44", Slot = "4")]
	public virtual void Hit(HitData data)
	{
	}

	[Address(RVA = "0x8C1CA0", Offset = "0x8C1CA0", VA = "0x8C1CA0", Slot = "5")]
	public virtual bool DidBlock(float handSpeed)
	{
		return default(bool);
	}

	[Address(RVA = "0x8C1CB0", Offset = "0x8C1CB0", VA = "0x8C1CB0", Slot = "6")]
	public virtual void Stab(StabData data)
	{
	}

	[Address(RVA = "0x8C1CC8", Offset = "0x8C1CC8", VA = "0x8C1CC8", Slot = "7")]
	public virtual Transform CreateStabPoint(Vector3 pos)
	{
		return null;
	}

	[Address(RVA = "0x8C1DE0", Offset = "0x8C1DE0", VA = "0x8C1DE0", Slot = "8")]
	public virtual void FinishStab()
	{
	}

	[Address(RVA = "0x8C1DE4", Offset = "0x8C1DE4", VA = "0x8C1DE4", Slot = "9")]
	public virtual void Explode(ExplodeData data)
	{
	}

	[Address(RVA = "0x8C1DFC", Offset = "0x8C1DFC", VA = "0x8C1DFC", Slot = "10")]
	protected virtual void CutterCallback(bool success, GameObject[] cuttedObjects, CutterPlane plane, object userdata)
	{
	}

	[Address(RVA = "0x8AA714", Offset = "0x8AA714", VA = "0x8AA714", Slot = "11")]
	public virtual bool IsValidStab(Vector3 sliceMovement)
	{
		return default(bool);
	}

	[Address(RVA = "0x8C2338", Offset = "0x8C2338", VA = "0x8C2338", Slot = "12")]
	public virtual bool IsValidSlice(Vector3 sliceMovement)
	{
		return default(bool);
	}

	[Address(RVA = "0x8AA644", Offset = "0x8AA644", VA = "0x8AA644")]
	public Cutable()
	{
	}
}
public class CutsceneEntity : MonoBehaviour
{
	[Address(RVA = "0x8C2348", Offset = "0x8C2348", VA = "0x8C2348")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x8C23C0", Offset = "0x8C23C0", VA = "0x8C23C0")]
	public CutsceneEntity()
	{
	}
}
public class DamageState : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject health75;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject health50;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject health25;

	[Address(RVA = "0x7B89A8", Offset = "0x7B89A8", VA = "0x7B89A8")]
	private void Start()
	{
	}

	[Address(RVA = "0x7B8A44", Offset = "0x7B8A44", VA = "0x7B8A44")]
	public void UpdateState()
	{
	}

	[Address(RVA = "0x7B8C78", Offset = "0x7B8C78", VA = "0x7B8C78")]
	public DamageState()
	{
	}
}
public class DebugSpawner : MonoBehaviour
{
	[Address(RVA = "0x7B8C80", Offset = "0x7B8C80", VA = "0x7B8C80")]
	public DebugSpawner()
	{
	}
}
public class DelayedMeshDisplay : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A030", Offset = "0x65A030")]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DelayedMeshDisplay <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7BE318", Offset = "0x7BE318", VA = "0x7BE318", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7BE388", Offset = "0x7BE388", VA = "0x7BE388", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7BE0A0", Offset = "0x7BE0A0", VA = "0x7BE0A0")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x7BE0E0", Offset = "0x7BE0E0", VA = "0x7BE0E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7BE0E4", Offset = "0x7BE0E4", VA = "0x7BE0E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7BE320", Offset = "0x7BE320", VA = "0x7BE320", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkinnedMeshRenderer mesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objects;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float delay;

	[Address(RVA = "0x7BE02C", Offset = "0x7BE02C", VA = "0x7BE02C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67575C", Offset = "0x67575C")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x7BE0CC", Offset = "0x7BE0CC", VA = "0x7BE0CC")]
	public DelayedMeshDisplay()
	{
	}
}
public class DisableOther : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject other;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool onStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool onEnable;

	[Address(RVA = "0x7BE834", Offset = "0x7BE834", VA = "0x7BE834")]
	private void Start()
	{
	}

	[Address(RVA = "0x7BE874", Offset = "0x7BE874", VA = "0x7BE874")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7BE8B4", Offset = "0x7BE8B4", VA = "0x7BE8B4")]
	public DisableOther()
	{
	}
}
public class DisableTrailWhenSlow : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MinimumSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 lastPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<float> rollingMagnitudes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TrailRenderer trail;

	[Address(RVA = "0x7BE8BC", Offset = "0x7BE8BC", VA = "0x7BE8BC")]
	private void Start()
	{
	}

	[Address(RVA = "0x7BE940", Offset = "0x7BE940", VA = "0x7BE940")]
	private void Update()
	{
	}

	[Address(RVA = "0x7BEC00", Offset = "0x7BEC00", VA = "0x7BEC00")]
	public DisableTrailWhenSlow()
	{
	}
}
public class DissolveDriver : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A040", Offset = "0x65A040")]
	private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DissolveDriver <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material[] <mats>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <timeDissolving>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7BF17C", Offset = "0x7BF17C", VA = "0x7BF17C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7BF1EC", Offset = "0x7BF1EC", VA = "0x7BF1EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7BECEC", Offset = "0x7BECEC", VA = "0x7BECEC")]
		[DebuggerHidden]
		public <Start>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x7BED2C", Offset = "0x7BED2C", VA = "0x7BED2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7BED30", Offset = "0x7BED30", VA = "0x7BED30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7BF184", Offset = "0x7BF184", VA = "0x7BF184", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeBeforeDissolve;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float DissolveTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material DissolveMaterial;

	[Address(RVA = "0x7BEC78", Offset = "0x7BEC78", VA = "0x7BEC78")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6757C0", Offset = "0x6757C0")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x7BED18", Offset = "0x7BED18", VA = "0x7BED18")]
	public DissolveDriver()
	{
	}
}
public class Doober : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A050", Offset = "0x65A050")]
	private sealed class <FlyTo>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Doober <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <endPos>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <elapsed>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 <tangent>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C0098", Offset = "0x7C0098", VA = "0x7C0098", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C0108", Offset = "0x7C0108", VA = "0x7C0108", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7BF87C", Offset = "0x7BF87C", VA = "0x7BF87C")]
		[DebuggerHidden]
		public <FlyTo>d__14(int <>1__state)
		{
		}

		[Address(RVA = "0x7BF994", Offset = "0x7BF994", VA = "0x7BF994", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7BF998", Offset = "0x7BF998", VA = "0x7BF998", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C00A0", Offset = "0x7C00A0", VA = "0x7C00A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float FlightTimeAway;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TimeBetweenFlight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float FlightTimeToPlayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject FlightVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject CollectVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool DropToFloor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string EventOnCollect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int AmountToGrant;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Doober> Pool;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShaderPreload;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TrailRenderer Trail;

	[Address(RVA = "0x7BF31C", Offset = "0x7BF31C", VA = "0x7BF31C", Slot = "4")]
	public virtual void Reset()
	{
	}

	[Address(RVA = "0x7BF3B4", Offset = "0x7BF3B4", VA = "0x7BF3B4")]
	public void FlyToAndComplete(Transform target, float delay)
	{
	}

	[Address(RVA = "0x7BF588", Offset = "0x7BF588", VA = "0x7BF588", Slot = "5")]
	protected virtual void processEvent()
	{
	}

	[Address(RVA = "0x7BF4D4", Offset = "0x7BF4D4", VA = "0x7BF4D4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675824", Offset = "0x675824")]
	private IEnumerator FlyTo(Transform target, float delay)
	{
		return null;
	}

	[Address(RVA = "0x7BF8A8", Offset = "0x7BF8A8", VA = "0x7BF8A8")]
	private void ReturnToPool()
	{
	}

	[Address(RVA = "0x7BF96C", Offset = "0x7BF96C", VA = "0x7BF96C")]
	public Doober()
	{
	}
}
public class EmptyAnimationEventReceiver : MonoBehaviour
{
	[Address(RVA = "0x7C5244", Offset = "0x7C5244", VA = "0x7C5244")]
	public void ActivateParticle(string particle)
	{
	}

	[Address(RVA = "0x7C5248", Offset = "0x7C5248", VA = "0x7C5248")]
	public EmptyAnimationEventReceiver()
	{
	}
}
public class AvoidBox : Cutable
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve TriggerProbability;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float minSpeedToTrigger;

	public event EventHandler<EventArgs> OnTrigger
	{
		[Address(RVA = "0x8AA09C", Offset = "0x8AA09C", VA = "0x8AA09C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675888", Offset = "0x675888")]
		add
		{
		}
		[Address(RVA = "0x8AA188", Offset = "0x8AA188", VA = "0x8AA188")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675898", Offset = "0x675898")]
		remove
		{
		}
	}

	[Address(RVA = "0x8AA274", Offset = "0x8AA274", VA = "0x8AA274", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x8AA4C8", Offset = "0x8AA4C8", VA = "0x8AA4C8", Slot = "6")]
	public override void Stab(StabData data)
	{
	}

	[Address(RVA = "0x8AA61C", Offset = "0x8AA61C", VA = "0x8AA61C")]
	public AvoidBox()
	{
	}
}
public class BasicNinja : BipedEnemy
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A060", Offset = "0x65A060")]
	private sealed class <Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BasicNinja <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8AADE8", Offset = "0x8AADE8", VA = "0x8AADE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8AAE58", Offset = "0x8AAE58", VA = "0x8AAE58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8AA6D8", Offset = "0x8AA6D8", VA = "0x8AA6D8")]
		[DebuggerHidden]
		public <Start>d__7(int <>1__state)
		{
		}

		[Address(RVA = "0x8AAC94", Offset = "0x8AAC94", VA = "0x8AAC94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8AAC98", Offset = "0x8AAC98", VA = "0x8AAC98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8AADF0", Offset = "0x8AADF0", VA = "0x8AADF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A070", Offset = "0x65A070")]
	private sealed class <ProjectileInstance>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BasicNinja <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int projectileIndex;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8AAC1C", Offset = "0x8AAC1C", VA = "0x8AAC1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8AAC8C", Offset = "0x8AAC8C", VA = "0x8AAC8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8AA938", Offset = "0x8AA938", VA = "0x8AA938")]
		[DebuggerHidden]
		public <ProjectileInstance>d__11(int <>1__state)
		{
		}

		[Address(RVA = "0x8AA9F0", Offset = "0x8AA9F0", VA = "0x8AA9F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8AA9F4", Offset = "0x8AA9F4", VA = "0x8AA9F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8AAC24", Offset = "0x8AAC24", VA = "0x8AAC24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public SkinnedMeshRenderer mesh;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public float meshDisplayDelay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public float attackDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public EnemyProjectile[] ProjectilePrefabs;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public int projectilesPerThrow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float projectileDelay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected Animator animator;

	[Address(RVA = "0x8AA664", Offset = "0x8AA664", VA = "0x8AA664")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6758A8", Offset = "0x6758A8")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x8AA704", Offset = "0x8AA704", VA = "0x8AA704", Slot = "15")]
	public override void Blocked(BlockableEnemyWeapon weapon, Weapon blockingWeapon)
	{
	}

	[Address(RVA = "0x8AA70C", Offset = "0x8AA70C", VA = "0x8AA70C", Slot = "11")]
	public override bool IsValidStab(Vector3 sliceMovement)
	{
		return default(bool);
	}

	[Address(RVA = "0x8AA71C", Offset = "0x8AA71C", VA = "0x8AA71C", Slot = "27")]
	public override void SpawnProjectile(AnimationEvent e)
	{
	}

	[Address(RVA = "0x8AA880", Offset = "0x8AA880", VA = "0x8AA880")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67590C", Offset = "0x67590C")]
	public IEnumerator ProjectileInstance(int projectileIndex, float delay)
	{
		return null;
	}

	[Address(RVA = "0x8AA964", Offset = "0x8AA964", VA = "0x8AA964")]
	public BasicNinja()
	{
	}
}
public class BipedAttackProjection : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A080", Offset = "0x65A080")]
	private sealed class <Project>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedAttackProjection <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8ABFB4", Offset = "0x8ABFB4", VA = "0x8ABFB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8AC024", Offset = "0x8AC024", VA = "0x8AC024", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8AB8A4", Offset = "0x8AB8A4", VA = "0x8AB8A4")]
		[DebuggerHidden]
		public <Project>d__8(int <>1__state)
		{
		}

		[Address(RVA = "0x8AB8E0", Offset = "0x8AB8E0", VA = "0x8AB8E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8AB8E4", Offset = "0x8AB8E4", VA = "0x8AB8E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8ABFBC", Offset = "0x8ABFBC", VA = "0x8ABFBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Animator animator;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Projection;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float PauseTime;

	[Address(RVA = "0x8AB70C", Offset = "0x8AB70C", VA = "0x8AB70C")]
	private void Start()
	{
	}

	[Address(RVA = "0x8AB764", Offset = "0x8AB764", VA = "0x8AB764")]
	public void AttackEnd()
	{
	}

	[Address(RVA = "0x8AB7E4", Offset = "0x8AB7E4", VA = "0x8AB7E4")]
	public void AttackStart()
	{
	}

	[Address(RVA = "0x8AB89C", Offset = "0x8AB89C", VA = "0x8AB89C")]
	public void BlockableStart()
	{
	}

	[Address(RVA = "0x8AB8A0", Offset = "0x8AB8A0", VA = "0x8AB8A0")]
	public void BlockableEnd()
	{
	}

	[Address(RVA = "0x8AB828", Offset = "0x8AB828", VA = "0x8AB828")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675970", Offset = "0x675970")]
	private IEnumerator Project()
	{
		return null;
	}

	[Address(RVA = "0x8AB8D0", Offset = "0x8AB8D0", VA = "0x8AB8D0")]
	public BipedAttackProjection()
	{
	}
}
public class BipedEnemy : Enemy
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A090", Offset = "0x65A090")]
	private sealed class <>c__DisplayClass16_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SkinnedMeshRenderer mesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BipedEnemy <>4__this;

		[Address(RVA = "0x8AD3DC", Offset = "0x8AD3DC", VA = "0x8AD3DC")]
		public <>c__DisplayClass16_0()
		{
		}

		[Address(RVA = "0x8AED2C", Offset = "0x8AED2C", VA = "0x8AED2C")]
		internal void <CutterCallback>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A0A0", Offset = "0x65A0A0")]
	private sealed class <dropIfSkewered>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedEnemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8AEE54", Offset = "0x8AEE54", VA = "0x8AEE54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8AEEC4", Offset = "0x8AEEC4", VA = "0x8AEEC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8AE488", Offset = "0x8AE488", VA = "0x8AE488")]
		[DebuggerHidden]
		public <dropIfSkewered>d__21(int <>1__state)
		{
		}

		[Address(RVA = "0x8AEE08", Offset = "0x8AEE08", VA = "0x8AEE08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8AEE0C", Offset = "0x8AEE0C", VA = "0x8AEE0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8AEE5C", Offset = "0x8AEE5C", VA = "0x8AEE5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int skewerCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform ProjectileSpawnPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool needAnimation;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Material DissolveMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected int cutCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected Transform stabLinkBone;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected Transform stabLinkBonePreviousParent;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected Weapon skeweredBy;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected Vector3 stabLinkPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	protected Quaternion stabLinkRotation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected GameObject stabPointParent;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	protected GameObject stabPointPivot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	protected string skewerStrokeID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	protected float stabTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	protected bool flingingRagdoll;

	[Address(RVA = "0x8AC02C", Offset = "0x8AC02C", VA = "0x8AC02C", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x8AC590", Offset = "0x8AC590", VA = "0x8AC590", Slot = "10")]
	protected override void CutterCallback(bool success, GameObject[] cuttedObjects, CutterPlane plane, object userdata)
	{
	}

	[Address(RVA = "0x8AD3E4", Offset = "0x8AD3E4", VA = "0x8AD3E4")]
	public void RagDoll(Vector3 launchVector, bool autoDestroy = false)
	{
	}

	[Address(RVA = "0x8AD944", Offset = "0x8AD944", VA = "0x8AD944", Slot = "7")]
	public override Transform CreateStabPoint(Vector3 pos)
	{
		return null;
	}

	[Address(RVA = "0x8ADA80", Offset = "0x8ADA80", VA = "0x8ADA80")]
	private Rigidbody ClosestToPoint(Vector3 point)
	{
		return null;
	}

	[Address(RVA = "0x8ADC24", Offset = "0x8ADC24", VA = "0x8ADC24", Slot = "6")]
	public override void Stab(StabData data)
	{
	}

	[Address(RVA = "0x8AE414", Offset = "0x8AE414", VA = "0x8AE414")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6759D4", Offset = "0x6759D4")]
	private IEnumerator dropIfSkewered()
	{
		return null;
	}

	[Address(RVA = "0x8AE4B4", Offset = "0x8AE4B4", VA = "0x8AE4B4")]
	public void RagdollIfSkewered([Optional] Weapon byWeapon)
	{
	}

	[Address(RVA = "0x8AE698", Offset = "0x8AE698", VA = "0x8AE698")]
	public bool IsSkewered()
	{
		return default(bool);
	}

	[Address(RVA = "0x8AC31C", Offset = "0x8AC31C", VA = "0x8AC31C")]
	protected void UndoStabConnection()
	{
	}

	[Address(RVA = "0x8AE708", Offset = "0x8AE708", VA = "0x8AE708")]
	protected void LimitMaxPhysicsSpeed(float max)
	{
	}

	[Address(RVA = "0x8AE91C", Offset = "0x8AE91C", VA = "0x8AE91C")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x8AA980", Offset = "0x8AA980", VA = "0x8AA980")]
	public BipedEnemy()
	{
	}
}
public class BlockableEnemyWeapon : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Enemy enemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StatefulEnemy enemyState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject blockEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform tip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Rigidbody rigid;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 lastTipPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject blockShadow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 lastPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion lastRotation;

	[Address(RVA = "0x8B03C4", Offset = "0x8B03C4", VA = "0x8B03C4")]
	private void Start()
	{
	}

	[Address(RVA = "0x8B058C", Offset = "0x8B058C", VA = "0x8B058C")]
	private void SetupFrameShadowCollider()
	{
	}

	[Address(RVA = "0x8B07BC", Offset = "0x8B07BC", VA = "0x8B07BC")]
	private void Update()
	{
	}

	[Address(RVA = "0x8B094C", Offset = "0x8B094C", VA = "0x8B094C")]
	private void FixedUpdate()
	{
	}

	[Address(RVA = "0x8B0D8C", Offset = "0x8B0D8C", VA = "0x8B0D8C")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Address(RVA = "0x8B0B50", Offset = "0x8B0B50", VA = "0x8B0B50")]
	public void Blocked(Weapon s, Vector3 point)
	{
	}

	[Address(RVA = "0x8B0E94", Offset = "0x8B0E94", VA = "0x8B0E94")]
	public BlockableEnemyWeapon()
	{
	}
}
public class BodyTracker : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StatefulEnemy myEnemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource audioSource;

	[Address(RVA = "0x8B0F88", Offset = "0x8B0F88", VA = "0x8B0F88")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Address(RVA = "0x8B2338", Offset = "0x8B2338", VA = "0x8B2338")]
	public BodyTracker()
	{
	}
}
public class BossStatefulEnemy : StatefulEnemy
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A0B0", Offset = "0x65A0B0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<BossSubPhase, float> <>9__22_1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<BossPhase, float> <>9__22_0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Func<BossSubPhase, float> <>9__22_2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Func<HitboxNinja, bool> <>9__31_0;

		[Address(RVA = "0x8B52EC", Offset = "0x8B52EC", VA = "0x8B52EC")]
		public <>c()
		{
		}

		[Address(RVA = "0x8B52F4", Offset = "0x8B52F4", VA = "0x8B52F4")]
		internal float <get_Progress>b__22_0(BossPhase p)
		{
			return default(float);
		}

		[Address(RVA = "0x8B53F0", Offset = "0x8B53F0", VA = "0x8B53F0")]
		internal float <get_Progress>b__22_1(BossSubPhase sp)
		{
			return default(float);
		}

		[Address(RVA = "0x8B541C", Offset = "0x8B541C", VA = "0x8B541C")]
		internal float <get_Progress>b__22_2(BossSubPhase sp)
		{
			return default(float);
		}

		[Address(RVA = "0x8B5448", Offset = "0x8B5448", VA = "0x8B5448")]
		internal bool <onStagingUpdate>b__31_0(HitboxNinja e)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A0C0", Offset = "0x65A0C0")]
	private sealed class <fatalitySkewerWatcher>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StabData data;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BossStatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool <doneWatching>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8B5E38", Offset = "0x8B5E38", VA = "0x8B5E38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8B5EA8", Offset = "0x8B5EA8", VA = "0x8B5EA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8B45CC", Offset = "0x8B45CC", VA = "0x8B45CC")]
		[DebuggerHidden]
		public <fatalitySkewerWatcher>d__37(int <>1__state)
		{
		}

		[Address(RVA = "0x8B5A14", Offset = "0x8B5A14", VA = "0x8B5A14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8B5A18", Offset = "0x8B5A18", VA = "0x8B5A18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8B5E40", Offset = "0x8B5E40", VA = "0x8B5E40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A0D0", Offset = "0x65A0D0")]
	private sealed class <FatalityKnockback>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BossStatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <endPos>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <totalTime>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <elapsed>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8B599C", Offset = "0x8B599C", VA = "0x8B599C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8B5A0C", Offset = "0x8B5A0C", VA = "0x8B5A0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8B50EC", Offset = "0x8B50EC", VA = "0x8B50EC")]
		[DebuggerHidden]
		public <FatalityKnockback>d__52(int <>1__state)
		{
		}

		[Address(RVA = "0x8B54B4", Offset = "0x8B54B4", VA = "0x8B54B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8B54B8", Offset = "0x8B54B8", VA = "0x8B54B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8B59A4", Offset = "0x8B59A4", VA = "0x8B59A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public BossPhase[] Phases;

	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public GameObject[] BossPhaseEnableObject1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	public GameObject[] BossPhaseEnableObject2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public GameObject[] BossPhaseEnableObject3;

	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public GameObject[] BossPhaseDisableObject1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public GameObject[] BossPhaseDisableObject2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public GameObject[] BossPhaseDisableObject3;

	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	public float FatalityKnockbackDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	public Action<BossPhase> OnPhaseStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	public Action<BossSubPhase> OnSubphaseStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	public InvincibilityGauge Gauge;

	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	public int phaseIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	private int spawnIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private List<HitboxNinja> waveEnemies;

	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	public bool HasPhaseSpecificAttacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
	public bool HasConstantSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x292")]
	public bool HasComboPerPhase;

	[Il2CppDummyDll.FieldOffset(Offset = "0x293")]
	public bool IsPlayingCustomAnimation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private Buff invincibilityBuff;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private float fatalityStartTime;

	private BossPhase currentPhase
	{
		[Address(RVA = "0x8B243C", Offset = "0x8B243C", VA = "0x8B243C")]
		get
		{
			return null;
		}
	}

	public float Progress
	{
		[Address(RVA = "0x8B248C", Offset = "0x8B248C", VA = "0x8B248C")]
		get
		{
			return default(float);
		}
	}

	[Address(RVA = "0x8B27EC", Offset = "0x8B27EC", VA = "0x8B27EC", Slot = "4")]
	public override void StartInvincibilityBuff()
	{
	}

	[Address(RVA = "0x8B2898", Offset = "0x8B2898", VA = "0x8B2898", Slot = "6")]
	protected override void onSpawn([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B2A54", Offset = "0x8B2A54", VA = "0x8B2A54", Slot = "7")]
	protected override void onSpawnUpdate()
	{
	}

	[Address(RVA = "0x8B2E50", Offset = "0x8B2E50", VA = "0x8B2E50", Slot = "9")]
	protected override void onStaging([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B3074", Offset = "0x8B3074", VA = "0x8B3074")]
	public void SpawnWave()
	{
	}

	[Address(RVA = "0x8B3444", Offset = "0x8B3444", VA = "0x8B3444")]
	public void SpawnEnemy()
	{
	}

	[Address(RVA = "0x8B3114", Offset = "0x8B3114", VA = "0x8B3114")]
	public void SpawnOne()
	{
	}

	[Address(RVA = "0x8B3454", Offset = "0x8B3454", VA = "0x8B3454", Slot = "14")]
	protected override void onStagingProjectile([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B359C", Offset = "0x8B359C", VA = "0x8B359C", Slot = "10")]
	protected override void onStagingUpdate()
	{
	}

	[Address(RVA = "0x8B3748", Offset = "0x8B3748", VA = "0x8B3748", Slot = "16")]
	protected override void onDead([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B3844", Offset = "0x8B3844", VA = "0x8B3844", Slot = "17")]
	protected override void onCritDead([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B3894", Offset = "0x8B3894", VA = "0x8B3894", Slot = "19")]
	protected override void initHealth()
	{
	}

	[Address(RVA = "0x8B3A30", Offset = "0x8B3A30", VA = "0x8B3A30", Slot = "20")]
	protected override void postStart()
	{
	}

	[Address(RVA = "0x8B4444", Offset = "0x8B4444", VA = "0x8B4444")]
	protected void onFatalityStab([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B4534", Offset = "0x8B4534", VA = "0x8B4534")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675A38", Offset = "0x675A38")]
	protected IEnumerator fatalitySkewerWatcher(StabData data)
	{
		return null;
	}

	[Address(RVA = "0x8B45F8", Offset = "0x8B45F8", VA = "0x8B45F8")]
	protected void onFatalityStabExit()
	{
	}

	[Address(RVA = "0x8B462C", Offset = "0x8B462C", VA = "0x8B462C", Slot = "5")]
	protected override void PostTakeDamage()
	{
	}

	[Address(RVA = "0x8B4784", Offset = "0x8B4784", VA = "0x8B4784", Slot = "13")]
	protected override int getNumberOfAttackAnimations(int numberOfAttackAnimations)
	{
		return default(int);
	}

	[Address(RVA = "0x8B47B8", Offset = "0x8B47B8", VA = "0x8B47B8", Slot = "12")]
	protected override void updateSelectedAttackVariant()
	{
	}

	[Address(RVA = "0x8B3798", Offset = "0x8B3798", VA = "0x8B3798")]
	private bool progressPhaseOrDie()
	{
		return default(bool);
	}

	[Address(RVA = "0x8B4810", Offset = "0x8B4810", VA = "0x8B4810")]
	private bool canProgress()
	{
		return default(bool);
	}

	[Address(RVA = "0x8B4894", Offset = "0x8B4894", VA = "0x8B4894")]
	private void onPhaseShift([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B4B6C", Offset = "0x8B4B6C", VA = "0x8B4B6C")]
	private void onRegroup([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B4BFC", Offset = "0x8B4BFC", VA = "0x8B4BFC")]
	private void onRegroupUpdate()
	{
	}

	[Address(RVA = "0x8B4D40", Offset = "0x8B4D40", VA = "0x8B4D40")]
	private void onRegroupExit()
	{
	}

	[Address(RVA = "0x8B4DA8", Offset = "0x8B4DA8", VA = "0x8B4DA8")]
	private void onFatality([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B4F5C", Offset = "0x8B4F5C", VA = "0x8B4F5C")]
	private void onFatalityUpdate()
	{
	}

	[Address(RVA = "0x8B504C", Offset = "0x8B504C", VA = "0x8B504C")]
	private void onFatalityKnockback([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x8B5078", Offset = "0x8B5078", VA = "0x8B5078")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675A9C", Offset = "0x675A9C")]
	protected IEnumerator FatalityKnockback()
	{
		return null;
	}

	[Address(RVA = "0x8B2B00", Offset = "0x8B2B00", VA = "0x8B2B00")]
	private bool didMoveToPhaseLocation()
	{
		return default(bool);
	}

	[Address(RVA = "0x8B294C", Offset = "0x8B294C", VA = "0x8B294C")]
	private void subphaseStarted(BossSubPhase subphase)
	{
	}

	[Address(RVA = "0x8B5118", Offset = "0x8B5118", VA = "0x8B5118")]
	public BossStatefulEnemy()
	{
	}

	[Address(RVA = "0x8B5130", Offset = "0x8B5130", VA = "0x8B5130")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675B00", Offset = "0x675B00")]
	private void <onFatalityUpdate>b__50_0()
	{
	}

	[Address(RVA = "0x8B5164", Offset = "0x8B5164", VA = "0x8B5164")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675B10", Offset = "0x675B10")]
	private void <didMoveToPhaseLocation>b__53_0()
	{
	}

	[Address(RVA = "0x8B51F4", Offset = "0x8B51F4", VA = "0x8B51F4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675B20", Offset = "0x675B20")]
	private void <subphaseStarted>b__54_0()
	{
	}
}
public class CutableReference : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Cutable Reference;

	[Address(RVA = "0x8C2340", Offset = "0x8C2340", VA = "0x8C2340")]
	public CutableReference()
	{
	}
}
public class DropWeaponOnDeath : EnemyDeathBehavior
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<EnemyHeldWeapon> Weapons;

	[Address(RVA = "0x7C072C", Offset = "0x7C072C", VA = "0x7C072C")]
	private void Start()
	{
	}

	[Address(RVA = "0x7C07A8", Offset = "0x7C07A8", VA = "0x7C07A8", Slot = "4")]
	public override void TriggerDeath()
	{
	}

	[Address(RVA = "0x7C0A30", Offset = "0x7C0A30", VA = "0x7C0A30")]
	public DropWeaponOnDeath()
	{
	}
}
public class Enemy : Cutable
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A0E0", Offset = "0x65A0E0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<EnemyDeathBehavior> <>9__29_0;

		[Address(RVA = "0x7C67C8", Offset = "0x7C67C8", VA = "0x7C67C8")]
		public <>c()
		{
		}

		[Address(RVA = "0x7C67D0", Offset = "0x7C67D0", VA = "0x7C67D0")]
		internal int <Death>b__29_0(EnemyDeathBehavior edb1, EnemyDeathBehavior edb2)
		{
			return default(int);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A0F0", Offset = "0x65A0F0")]
	private sealed class <StirkePointAtEndOfFrame>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Enemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C69B4", Offset = "0x7C69B4", VA = "0x7C69B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C6A24", Offset = "0x7C6A24", VA = "0x7C6A24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C6280", Offset = "0x7C6280", VA = "0x7C6280")]
		[DebuggerHidden]
		public <StirkePointAtEndOfFrame>d__42(int <>1__state)
		{
		}

		[Address(RVA = "0x7C68AC", Offset = "0x7C68AC", VA = "0x7C68AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C68B0", Offset = "0x7C68B0", VA = "0x7C68B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C69BC", Offset = "0x7C69BC", VA = "0x7C69BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float AutoDestroyTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float speed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int damage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected bool pauseForwardMovement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	protected bool Attacking;

	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	protected bool Blockable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	protected bool Unflinchable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected bool InCombo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	protected bool Reacts;

	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool CanSlice;

	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool CanStab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool Alive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool UnderWeaponControl;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AnimationParticle[] animationParticles;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int specialGrantedOnKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int specialGrantedOnBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public int healthGrantedOnKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int healthGrantedOnBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float hitAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool InAbility;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<string, List<GameObject>> animParticles;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public StatefulEnemy stateful;

	public event EventHandler<EventArgs> OnDeath
	{
		[Address(RVA = "0x7C5258", Offset = "0x7C5258", VA = "0x7C5258")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675B30", Offset = "0x675B30")]
		add
		{
		}
		[Address(RVA = "0x7C5344", Offset = "0x7C5344", VA = "0x7C5344")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675B40", Offset = "0x675B40")]
		remove
		{
		}
	}

	[Address(RVA = "0x7C5430", Offset = "0x7C5430", VA = "0x7C5430", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x7C562C", Offset = "0x7C562C", VA = "0x7C562C", Slot = "13")]
	public virtual void WeaponControlStart(EnemyControllingWeapon weapon, GameObject vfxPrefab)
	{
	}

	[Address(RVA = "0x7C5638", Offset = "0x7C5638", VA = "0x7C5638", Slot = "14")]
	public virtual void WeaponControlStop()
	{
	}

	[Address(RVA = "0x7C5640", Offset = "0x7C5640", VA = "0x7C5640", Slot = "10")]
	protected override void CutterCallback(bool success, GameObject[] cuttedObjects, CutterPlane plane, object userdata)
	{
	}

	[Address(RVA = "0x7C5CFC", Offset = "0x7C5CFC", VA = "0x7C5CFC")]
	protected void Death()
	{
	}

	[Address(RVA = "0x7C5FA0", Offset = "0x7C5FA0", VA = "0x7C5FA0")]
	public void OrientTowardsZero(Vector3 zero)
	{
	}

	[Address(RVA = "0x7C6118", Offset = "0x7C6118", VA = "0x7C6118", Slot = "15")]
	public virtual void Blocked(BlockableEnemyWeapon weapon, Weapon blockingWeapon)
	{
	}

	[Address(RVA = "0x7C6124", Offset = "0x7C6124", VA = "0x7C6124", Slot = "16")]
	public virtual void AbilityOverride(bool slicable, bool stabbable)
	{
	}

	[Address(RVA = "0x7C614C", Offset = "0x7C614C", VA = "0x7C614C", Slot = "17")]
	public virtual void AbilityOverrideComplete()
	{
	}

	[Address(RVA = "0x7C6164", Offset = "0x7C6164", VA = "0x7C6164")]
	public bool IsAttacking()
	{
		return default(bool);
	}

	[Address(RVA = "0x7C616C", Offset = "0x7C616C", VA = "0x7C616C")]
	public bool IsBlockable()
	{
		return default(bool);
	}

	[Address(RVA = "0x7C6174", Offset = "0x7C6174", VA = "0x7C6174")]
	public bool IsUnflinchable()
	{
		return default(bool);
	}

	[Address(RVA = "0x7C6194", Offset = "0x7C6194", VA = "0x7C6194")]
	public bool IsInCombo()
	{
		return default(bool);
	}

	[Address(RVA = "0x7C619C", Offset = "0x7C619C", VA = "0x7C619C", Slot = "18")]
	public virtual void AttackEnd()
	{
	}

	[Address(RVA = "0x7C61A8", Offset = "0x7C61A8", VA = "0x7C61A8", Slot = "19")]
	public virtual void AttackStart()
	{
	}

	[Address(RVA = "0x7C61B4", Offset = "0x7C61B4", VA = "0x7C61B4", Slot = "20")]
	public virtual void BlockableEnd()
	{
	}

	[Address(RVA = "0x7C61BC", Offset = "0x7C61BC", VA = "0x7C61BC", Slot = "21")]
	public virtual void StrikePoint(AnimationEvent e)
	{
	}

	[Address(RVA = "0x7C620C", Offset = "0x7C620C", VA = "0x7C620C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675B50", Offset = "0x675B50")]
	private IEnumerator StirkePointAtEndOfFrame()
	{
		return null;
	}

	[Address(RVA = "0x7C62AC", Offset = "0x7C62AC", VA = "0x7C62AC", Slot = "22")]
	public virtual void BlockableStart()
	{
	}

	[Address(RVA = "0x7C62B8", Offset = "0x7C62B8", VA = "0x7C62B8", Slot = "23")]
	public virtual void ActivateParticle(string particle)
	{
	}

	[Address(RVA = "0x7C66C0", Offset = "0x7C66C0", VA = "0x7C66C0", Slot = "24")]
	public virtual void ComboStart()
	{
	}

	[Address(RVA = "0x7C66CC", Offset = "0x7C66CC", VA = "0x7C66CC", Slot = "25")]
	public virtual void ComboEnd()
	{
	}

	[Address(RVA = "0x7C66D4", Offset = "0x7C66D4", VA = "0x7C66D4", Slot = "26")]
	public virtual void UnflinchableStart()
	{
	}

	[Address(RVA = "0x7C66E0", Offset = "0x7C66E0", VA = "0x7C66E0", Slot = "27")]
	public virtual void SpawnProjectile(AnimationEvent e)
	{
	}

	[Address(RVA = "0x7C66E4", Offset = "0x7C66E4", VA = "0x7C66E4")]
	public Enemy()
	{
	}
}
[Serializable]
public class AnimationParticle
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject nestedParticle;

	[Address(RVA = "0x8A7264", Offset = "0x8A7264", VA = "0x8A7264")]
	public AnimationParticle()
	{
	}
}
public class EnemyDamageSource : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Enemy enemy;

	[Address(RVA = "0x7C6A9C", Offset = "0x7C6A9C", VA = "0x7C6A9C")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Address(RVA = "0x7C6BE8", Offset = "0x7C6BE8", VA = "0x7C6BE8")]
	public EnemyDamageSource()
	{
	}
}
public class EnemyDeathBehavior : MonoBehaviour
{
	[Address(RVA = "0x7C0A2C", Offset = "0x7C0A2C", VA = "0x7C0A2C", Slot = "4")]
	public virtual void TriggerDeath()
	{
	}

	[Address(RVA = "0x7C0AA0", Offset = "0x7C0AA0", VA = "0x7C0AA0")]
	public EnemyDeathBehavior()
	{
	}
}
public class EnemyHeldWeapon : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float AutoDestroyTime;

	[Address(RVA = "0x7C08F0", Offset = "0x7C08F0", VA = "0x7C08F0")]
	public void Drop()
	{
	}

	[Address(RVA = "0x7C6BF0", Offset = "0x7C6BF0", VA = "0x7C6BF0")]
	public EnemyHeldWeapon()
	{
	}
}
public class EnemyProjectile : Weapon
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A100", Offset = "0x65A100")]
	private sealed class <DeflectPath>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyProjectile <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform end;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 start;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 tangent;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C8B94", Offset = "0x7C8B94", VA = "0x7C8B94", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C8C04", Offset = "0x7C8C04", VA = "0x7C8C04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C7FF4", Offset = "0x7C7FF4", VA = "0x7C7FF4")]
		[DebuggerHidden]
		public <DeflectPath>d__33(int <>1__state)
		{
		}

		[Address(RVA = "0x7C8524", Offset = "0x7C8524", VA = "0x7C8524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C8528", Offset = "0x7C8528", VA = "0x7C8528", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C8B9C", Offset = "0x7C8B9C", VA = "0x7C8B9C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int StrokeCounter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float Speed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public int damage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float BlockSpeedRequirement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float DeflectSpeedRequirement;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool DestroyOnBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool DestroyOnDeflect;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Enemy EnemySource;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float DamageToPlayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject BlockVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject DeflectVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject HitEnemyVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool CurveOnDeflect;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float arcHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float arcHorizontal;

	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float variance;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float yBase;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float hitAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public EnemyTarget target;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Flytext FlytextPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected Vector3 targetPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	protected Vector3 startPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	protected float arcUsed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	protected float travelTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	protected float totalTravelTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	protected bool blocked;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	protected EnemyProjectileBehavior[] subBehaviors;

	[Address(RVA = "0x7C6E44", Offset = "0x7C6E44", VA = "0x7C6E44")]
	private void Start()
	{
	}

	[Address(RVA = "0x7C7214", Offset = "0x7C7214", VA = "0x7C7214")]
	private void Update()
	{
	}

	[Address(RVA = "0x7C7444", Offset = "0x7C7444", VA = "0x7C7444")]
	private float Arc(float x)
	{
		return default(float);
	}

	[Address(RVA = "0x7C746C", Offset = "0x7C746C", VA = "0x7C746C")]
	protected void ReachedDestination()
	{
	}

	[Address(RVA = "0x7C7674", Offset = "0x7C7674", VA = "0x7C7674", Slot = "10")]
	protected virtual void BlockFall(Vector3 dir)
	{
	}

	[Address(RVA = "0x7C7C60", Offset = "0x7C7C60", VA = "0x7C7C60", Slot = "11")]
	protected virtual void Deflect(Vector3 dir)
	{
	}

	[Address(RVA = "0x7C7EFC", Offset = "0x7C7EFC", VA = "0x7C7EFC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675BB4", Offset = "0x675BB4")]
	protected IEnumerator DeflectPath(Vector3 start, Transform end, Vector3 tangent)
	{
		return null;
	}

	[Address(RVA = "0x7C8020", Offset = "0x7C8020", VA = "0x7C8020", Slot = "12")]
	public virtual void Hit(HitData data)
	{
	}

	[Address(RVA = "0x7C849C", Offset = "0x7C849C", VA = "0x7C849C")]
	public EnemyProjectile()
	{
	}
}
public class EnemyProjectileBehavior : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool Blocked;

	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	protected bool Deflected;

	[Address(RVA = "0x7C8C0C", Offset = "0x7C8C0C", VA = "0x7C8C0C", Slot = "4")]
	public virtual void TriggerBlocked()
	{
	}

	[Address(RVA = "0x7C8C18", Offset = "0x7C8C18", VA = "0x7C8C18", Slot = "5")]
	public virtual void TriggerDeflected()
	{
	}

	[Address(RVA = "0x7C8C24", Offset = "0x7C8C24", VA = "0x7C8C24")]
	public EnemyProjectileBehavior()
	{
	}
}
public class EnemyRockProjectile : EnemyProjectile
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A110", Offset = "0x65A110")]
	private sealed class <FloatUpThenFly>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyRockProjectile <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <floorPos>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C96C0", Offset = "0x7C96C0", VA = "0x7C96C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C9730", Offset = "0x7C9730", VA = "0x7C9730", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C8F38", Offset = "0x7C8F38", VA = "0x7C8F38")]
		[DebuggerHidden]
		public <FloatUpThenFly>d__6(int <>1__state)
		{
		}

		[Address(RVA = "0x7C91E4", Offset = "0x7C91E4", VA = "0x7C91E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C91E8", Offset = "0x7C91E8", VA = "0x7C91E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C96C8", Offset = "0x7C96C8", VA = "0x7C96C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public float DeflectPossibility;

	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public float FloatUpTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public float PauseBeforeLaunch;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject DeflectableVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private bool deflectable;

	[Address(RVA = "0x7C8C2C", Offset = "0x7C8C2C", VA = "0x7C8C2C")]
	private void Start()
	{
	}

	[Address(RVA = "0x7C8EC4", Offset = "0x7C8EC4", VA = "0x7C8EC4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675C18", Offset = "0x675C18")]
	private IEnumerator FloatUpThenFly()
	{
		return null;
	}

	[Address(RVA = "0x7C8F64", Offset = "0x7C8F64", VA = "0x7C8F64")]
	private void Update()
	{
	}

	[Address(RVA = "0x7C8F68", Offset = "0x7C8F68", VA = "0x7C8F68", Slot = "12")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x7C916C", Offset = "0x7C916C", VA = "0x7C916C")]
	public EnemyRockProjectile()
	{
	}
}
public class EnemyTarget : MonoBehaviour
{
	[Address(RVA = "0x7C9738", Offset = "0x7C9738", VA = "0x7C9738")]
	public EnemyTarget()
	{
	}
}
public class EnemyWeaponWarning : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeleeWeaponTrail trail;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject particles;

	[Address(RVA = "0x7C9740", Offset = "0x7C9740", VA = "0x7C9740")]
	public void WarningOn()
	{
	}

	[Address(RVA = "0x7C9798", Offset = "0x7C9798", VA = "0x7C9798")]
	public void WarningOff()
	{
	}

	[Address(RVA = "0x7C97F0", Offset = "0x7C97F0", VA = "0x7C97F0")]
	public EnemyWeaponWarning()
	{
	}
}
public class CritDummy : Dummy
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public HitBox HitBox;

	[Address(RVA = "0x8C18B4", Offset = "0x8C18B4", VA = "0x8C18B4")]
	private void Start()
	{
	}

	[Address(RVA = "0x8C194C", Offset = "0x8C194C", VA = "0x8C194C")]
	private void HitBox_OnHit(object sender, HitData e)
	{
	}

	[Address(RVA = "0x8C19B4", Offset = "0x8C19B4", VA = "0x8C19B4", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x8C19BC", Offset = "0x8C19BC", VA = "0x8C19BC")]
	public CritDummy()
	{
	}
}
public class CutDummy : Dummy
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float ActuallyRequiredSpeed;

	[Address(RVA = "0x8C19C4", Offset = "0x8C19C4", VA = "0x8C19C4", Slot = "11")]
	public override bool IsValidStab(Vector3 sliceMovement)
	{
		return default(bool);
	}

	[Address(RVA = "0x8C19CC", Offset = "0x8C19CC", VA = "0x8C19CC", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x8C1A34", Offset = "0x8C1A34", VA = "0x8C1A34")]
	public CutDummy()
	{
	}
}
public class DamageDummy : Dummy
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A120", Offset = "0x65A120")]
	private sealed class <DisplayDamage>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DamageDummy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float damage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool crit;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7B8930", Offset = "0x7B8930", VA = "0x7B8930", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7B89A0", Offset = "0x7B89A0", VA = "0x7B89A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7B856C", Offset = "0x7B856C", VA = "0x7B856C")]
		[DebuggerHidden]
		public <DisplayDamage>d__13(int <>1__state)
		{
		}

		[Address(RVA = "0x7B8598", Offset = "0x7B8598", VA = "0x7B8598", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7B859C", Offset = "0x7B859C", VA = "0x7B859C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7B8938", Offset = "0x7B8938", VA = "0x7B8938", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public HitBox HitBox;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Flytext FlyTextPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI DamageIndicator;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool Reportable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float currentDamage;

	[Address(RVA = "0x8C2490", Offset = "0x8C2490", VA = "0x8C2490")]
	private void Start()
	{
	}

	[Address(RVA = "0x8C257C", Offset = "0x8C257C", VA = "0x8C257C")]
	private string dataString(float handSpeed, float tipSpeed, float quality)
	{
		return null;
	}

	[Address(RVA = "0x8C2648", Offset = "0x8C2648", VA = "0x8C2648")]
	private void HitBox_OnStab(object sender, StabData e)
	{
	}

	[Address(RVA = "0x8C276C", Offset = "0x8C276C", VA = "0x8C276C")]
	private void HitBox_OnHit(object sender, HitData e)
	{
	}

	[Address(RVA = "0x8C27D4", Offset = "0x8C27D4", VA = "0x8C27D4", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x8C283C", Offset = "0x8C283C", VA = "0x8C283C", Slot = "6")]
	public override void Stab(StabData data)
	{
	}

	[Address(RVA = "0x8C28A4", Offset = "0x8C28A4", VA = "0x8C28A4", Slot = "9")]
	public override void Explode(ExplodeData data)
	{
	}

	[Address(RVA = "0x8C28EC", Offset = "0x8C28EC", VA = "0x8C28EC")]
	public void Flyup(string text, bool crit, Vector3 pos)
	{
	}

	[Address(RVA = "0x8C26B0", Offset = "0x8C26B0", VA = "0x8C26B0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675C7C", Offset = "0x675C7C")]
	private IEnumerator DisplayDamage(float damage, bool crit)
	{
		return null;
	}

	[Address(RVA = "0x8C2B10", Offset = "0x8C2B10", VA = "0x8C2B10")]
	public DamageDummy()
	{
	}
}
public class Dummy : Cutable
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A130", Offset = "0x65A130")]
	private sealed class <Move>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dummy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float travelTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <elapsed>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C12F0", Offset = "0x7C12F0", VA = "0x7C12F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C1360", Offset = "0x7C1360", VA = "0x7C1360", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C1060", Offset = "0x7C1060", VA = "0x7C1060")]
		[DebuggerHidden]
		public <Move>d__9(int <>1__state)
		{
		}

		[Address(RVA = "0x7C10B0", Offset = "0x7C10B0", VA = "0x7C10B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C10B4", Offset = "0x7C10B4", VA = "0x7C10B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C12F8", Offset = "0x7C12F8", VA = "0x7C12F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	public event EventHandler<EventArgs> OnGoodCut
	{
		[Address(RVA = "0x7C0AA8", Offset = "0x7C0AA8", VA = "0x7C0AA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675CE0", Offset = "0x675CE0")]
		add
		{
		}
		[Address(RVA = "0x7C0B94", Offset = "0x7C0B94", VA = "0x7C0B94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675CF0", Offset = "0x675CF0")]
		remove
		{
		}
	}

	public event EventHandler<EventArgs> OnBadCut
	{
		[Address(RVA = "0x7C0C80", Offset = "0x7C0C80", VA = "0x7C0C80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675D00", Offset = "0x675D00")]
		add
		{
		}
		[Address(RVA = "0x7C0D6C", Offset = "0x7C0D6C", VA = "0x7C0D6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675D10", Offset = "0x675D10")]
		remove
		{
		}
	}

	[Address(RVA = "0x7C0E58", Offset = "0x7C0E58", VA = "0x7C0E58")]
	protected void TriggerGoodCut()
	{
	}

	[Address(RVA = "0x7C0EEC", Offset = "0x7C0EEC", VA = "0x7C0EEC")]
	protected void TriggerBadCut()
	{
	}

	[Address(RVA = "0x7C0F80", Offset = "0x7C0F80", VA = "0x7C0F80")]
	public void GoTo(Transform target, float travelTime)
	{
	}

	[Address(RVA = "0x7C0FAC", Offset = "0x7C0FAC", VA = "0x7C0FAC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675D20", Offset = "0x675D20")]
	protected IEnumerator Move(Transform target, float travelTime)
	{
		return null;
	}

	[Address(RVA = "0x7C108C", Offset = "0x7C108C", VA = "0x7C108C", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x7C10A0", Offset = "0x7C10A0", VA = "0x7C10A0", Slot = "6")]
	public override void Stab(StabData data)
	{
	}

	[Address(RVA = "0x7C10A4", Offset = "0x7C10A4", VA = "0x7C10A4", Slot = "9")]
	public override void Explode(ExplodeData data)
	{
	}

	[Address(RVA = "0x7C10A8", Offset = "0x7C10A8", VA = "0x7C10A8")]
	public Dummy()
	{
	}
}
public class HitBox : Cutable
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public StatefulEnemy Enemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool isHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool isOutOfTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int orderNumber;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string HitStrokeID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float timeRemaining;

	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float timeEnabled;

	public bool IsHit
	{
		[Address(RVA = "0x705638", Offset = "0x705638", VA = "0x705638")]
		get
		{
			return default(bool);
		}
	}

	public bool IsOutOfTime
	{
		[Address(RVA = "0x705640", Offset = "0x705640", VA = "0x705640")]
		get
		{
			return default(bool);
		}
	}

	public event EventHandler<EventArgs> OnOutOfTime
	{
		[Address(RVA = "0x704AE8", Offset = "0x704AE8", VA = "0x704AE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675D84", Offset = "0x675D84")]
		add
		{
		}
		[Address(RVA = "0x704BD4", Offset = "0x704BD4", VA = "0x704BD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675D94", Offset = "0x675D94")]
		remove
		{
		}
	}

	public event EventHandler<HitData> OnHit
	{
		[Address(RVA = "0x704CC0", Offset = "0x704CC0", VA = "0x704CC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675DA4", Offset = "0x675DA4")]
		add
		{
		}
		[Address(RVA = "0x704DAC", Offset = "0x704DAC", VA = "0x704DAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675DB4", Offset = "0x675DB4")]
		remove
		{
		}
	}

	public event EventHandler<StabData> OnStab
	{
		[Address(RVA = "0x704E98", Offset = "0x704E98", VA = "0x704E98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675DC4", Offset = "0x675DC4")]
		add
		{
		}
		[Address(RVA = "0x704F84", Offset = "0x704F84", VA = "0x704F84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675DD4", Offset = "0x675DD4")]
		remove
		{
		}
	}

	public event EventHandler OnFinishStab
	{
		[Address(RVA = "0x705070", Offset = "0x705070", VA = "0x705070")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675DE4", Offset = "0x675DE4")]
		add
		{
		}
		[Address(RVA = "0x70515C", Offset = "0x70515C", VA = "0x70515C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x675DF4", Offset = "0x675DF4")]
		remove
		{
		}
	}

	[Address(RVA = "0x705248", Offset = "0x705248", VA = "0x705248")]
	private void Update()
	{
	}

	[Address(RVA = "0x7052A4", Offset = "0x7052A4", VA = "0x7052A4")]
	private void OutOfTime()
	{
	}

	[Address(RVA = "0x705400", Offset = "0x705400", VA = "0x705400")]
	public void Activate(float time)
	{
	}

	[Address(RVA = "0x705348", Offset = "0x705348", VA = "0x705348")]
	public void DeActivate()
	{
	}

	[Address(RVA = "0x7054D4", Offset = "0x7054D4", VA = "0x7054D4", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x705584", Offset = "0x705584", VA = "0x705584", Slot = "6")]
	public override void Stab(StabData data)
	{
	}

	[Address(RVA = "0x705648", Offset = "0x705648", VA = "0x705648", Slot = "8")]
	public override void FinishStab()
	{
	}

	[Address(RVA = "0x7056E0", Offset = "0x7056E0", VA = "0x7056E0")]
	public HitBox()
	{
	}
}
public class HitData : EventArgs
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 EntryPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 SliceMovement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 CutNormal;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float HitSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float HandSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Weapon Weapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float QualityMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool Knockback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool GoodAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	public bool BlockBreak;

	[Address(RVA = "0x705A3C", Offset = "0x705A3C", VA = "0x705A3C")]
	public HitData(Vector3 entryPoint, Vector3 sliceMovement, Vector3 cutNormal, float hitSpeed, float handSpeed, Weapon weapon, bool knockback, float quality, bool goodAngle = true, bool blockBreak = false)
	{
	}
}
public class StabData : EventArgs
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 EntryPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float StabSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float HandSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Weapon Weapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float QualityMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool StickToWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool Knockback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool DirectFromPlayer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool IsCrit;

	[Address(RVA = "0x985648", Offset = "0x985648", VA = "0x985648")]
	public StabData(Vector3 entryPoint, float stabSpeed, float handSpeed, Weapon weapon, bool stickToWeapon, bool knockback, float quality, bool directFromPlayer)
	{
	}
}
public class ExplodeData : EventArgs
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 ExplosionPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Force;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Weapon Weapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float QualityMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Radius;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool KnockUp;

	[Address(RVA = "0x7CA520", Offset = "0x7CA520", VA = "0x7CA520")]
	public ExplodeData(Vector3 explosionPoint, float force, Weapon weapon, float radius, bool knockUp, float quality)
	{
	}
}
public class HitboxNinja : BasicNinja
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A140", Offset = "0x65A140")]
	private sealed class <Start>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitboxNinja <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7081BC", Offset = "0x7081BC", VA = "0x7081BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x70822C", Offset = "0x70822C", VA = "0x70822C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x705BD4", Offset = "0x705BD4", VA = "0x705BD4")]
		[DebuggerHidden]
		public <Start>d__11(int <>1__state)
		{
		}

		[Address(RVA = "0x707C4C", Offset = "0x707C4C", VA = "0x707C4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x707C50", Offset = "0x707C50", VA = "0x707C50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7081C4", Offset = "0x7081C4", VA = "0x7081C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A150", Offset = "0x65A150")]
	private sealed class <ActivateWithDelay>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HitBox hitbox;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x707A7C", Offset = "0x707A7C", VA = "0x707A7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x707AEC", Offset = "0x707AEC", VA = "0x707AEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x705C98", Offset = "0x705C98", VA = "0x705C98")]
		[DebuggerHidden]
		public <ActivateWithDelay>d__12(int <>1__state)
		{
		}

		[Address(RVA = "0x7079B4", Offset = "0x7079B4", VA = "0x7079B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7079B8", Offset = "0x7079B8", VA = "0x7079B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x707A84", Offset = "0x707A84", VA = "0x707A84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A160", Offset = "0x65A160")]
	private sealed class <Stun>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitboxNinja <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 hitPos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float len;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <effect>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x708454", Offset = "0x708454", VA = "0x708454", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7084C4", Offset = "0x7084C4", VA = "0x7084C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7066B4", Offset = "0x7066B4", VA = "0x7066B4")]
		[DebuggerHidden]
		public <Stun>d__23(int <>1__state)
		{
		}

		[Address(RVA = "0x708234", Offset = "0x708234", VA = "0x708234", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x708238", Offset = "0x708238", VA = "0x708238", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x70845C", Offset = "0x70845C", VA = "0x70845C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A170", Offset = "0x65A170")]
	private sealed class <EnableReactionsIn>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HitboxNinja <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x707BD4", Offset = "0x707BD4", VA = "0x707BD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x707C44", Offset = "0x707C44", VA = "0x707C44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7078F8", Offset = "0x7078F8", VA = "0x7078F8")]
		[DebuggerHidden]
		public <EnableReactionsIn>d__43(int <>1__state)
		{
		}

		[Address(RVA = "0x707AF4", Offset = "0x707AF4", VA = "0x707AF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x707AF8", Offset = "0x707AF8", VA = "0x707AF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x707BDC", Offset = "0x707BDC", VA = "0x707BDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public List<HitBox> HitBoxes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public List<AvoidBox> AvoidBoxes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject StunEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public string Variant;

	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public string Animation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Vector3 LastHitDirection;

	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public float LastHitSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public string LastHitStrokeID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private List<HitBox> activeHitboxes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Coroutine reactionEnableCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private List<Action> onDestroyCallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool stunned;

	[Address(RVA = "0x705B60", Offset = "0x705B60", VA = "0x705B60")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675E04", Offset = "0x675E04")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x705C00", Offset = "0x705C00", VA = "0x705C00")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675E68", Offset = "0x675E68")]
	private IEnumerator ActivateWithDelay(HitBox hitbox, float delay)
	{
		return null;
	}

	[Address(RVA = "0x705CC4", Offset = "0x705CC4", VA = "0x705CC4")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x705DEC", Offset = "0x705DEC", VA = "0x705DEC")]
	public void AddOnDestroyCallback(Action callback)
	{
	}

	[Address(RVA = "0x705E5C", Offset = "0x705E5C", VA = "0x705E5C")]
	public void ShowHitboxes()
	{
	}

	[Address(RVA = "0x705E64", Offset = "0x705E64", VA = "0x705E64")]
	public void ResetHitboxes(string variant, string anim, bool instant = true)
	{
	}

	[Address(RVA = "0x7060E0", Offset = "0x7060E0", VA = "0x7060E0")]
	private void Hitbox_OnOutOfTime(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x70622C", Offset = "0x70622C", VA = "0x70622C")]
	private void Hitbox_OnStab(object sender, StabData e)
	{
	}

	[Address(RVA = "0x7063E8", Offset = "0x7063E8", VA = "0x7063E8")]
	private void HitBox_OnFinishStab(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x7063F4", Offset = "0x7063F4", VA = "0x7063F4")]
	private void Avoidbox_OnTrigger(object sender, EventArgs e)
	{
	}

	[Address(RVA = "0x7064D0", Offset = "0x7064D0", VA = "0x7064D0")]
	private void Hitbox_OnHit(object sender, HitData e)
	{
	}

	[Address(RVA = "0x7065F4", Offset = "0x7065F4", VA = "0x7065F4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675ECC", Offset = "0x675ECC")]
	private IEnumerator Stun(float len, Vector3 hitPos)
	{
		return null;
	}

	[Address(RVA = "0x7066E0", Offset = "0x7066E0", VA = "0x7066E0", Slot = "16")]
	public override void AbilityOverride(bool slicable, bool stabbable)
	{
	}

	[Address(RVA = "0x70681C", Offset = "0x70681C", VA = "0x70681C", Slot = "17")]
	public override void AbilityOverrideComplete()
	{
	}

	[Address(RVA = "0x706824", Offset = "0x706824", VA = "0x706824")]
	public void Skewer(StabData data)
	{
	}

	[Address(RVA = "0x706858", Offset = "0x706858", VA = "0x706858", Slot = "6")]
	public override void Stab(StabData data)
	{
	}

	[Address(RVA = "0x706A10", Offset = "0x706A10", VA = "0x706A10", Slot = "8")]
	public override void FinishStab()
	{
	}

	[Address(RVA = "0x706A40", Offset = "0x706A40", VA = "0x706A40", Slot = "9")]
	public override void Explode(ExplodeData data)
	{
	}

	[Address(RVA = "0x706BF8", Offset = "0x706BF8", VA = "0x706BF8")]
	public void Blast(ExplodeData data)
	{
	}

	[Address(RVA = "0x706D74", Offset = "0x706D74", VA = "0x706D74")]
	public void DisappearDeath()
	{
	}

	[Address(RVA = "0x706E34", Offset = "0x706E34", VA = "0x706E34")]
	public void RagdollDeath(StabData data)
	{
	}

	[Address(RVA = "0x706EB4", Offset = "0x706EB4", VA = "0x706EB4")]
	public void RagdollDeath(HitData data)
	{
	}

	[Address(RVA = "0x70705C", Offset = "0x70705C", VA = "0x70705C")]
	private Vector3 LimitRagdollVector(Vector3 force)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x70712C", Offset = "0x70712C", VA = "0x70712C")]
	public void AnimatedDeath(HitData data)
	{
	}

	[Address(RVA = "0x7072BC", Offset = "0x7072BC", VA = "0x7072BC")]
	public void Cut(HitData data)
	{
	}

	[Address(RVA = "0x7072F0", Offset = "0x7072F0", VA = "0x7072F0", Slot = "4")]
	public override void Hit(HitData data)
	{
	}

	[Address(RVA = "0x707410", Offset = "0x707410", VA = "0x707410", Slot = "13")]
	public override void WeaponControlStart(EnemyControllingWeapon weapon, GameObject vfxPrefab)
	{
	}

	[Address(RVA = "0x707560", Offset = "0x707560", VA = "0x707560", Slot = "14")]
	public override void WeaponControlStop()
	{
	}

	[Address(RVA = "0x7075A0", Offset = "0x7075A0", VA = "0x7075A0", Slot = "21")]
	public override void StrikePoint(AnimationEvent e)
	{
	}

	[Address(RVA = "0x707674", Offset = "0x707674", VA = "0x707674", Slot = "22")]
	public override void BlockableStart()
	{
	}

	[Address(RVA = "0x707740", Offset = "0x707740", VA = "0x707740", Slot = "15")]
	public override void Blocked(BlockableEnemyWeapon weapon, Weapon blockingSword)
	{
	}

	[Address(RVA = "0x707860", Offset = "0x707860", VA = "0x707860")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675F30", Offset = "0x675F30")]
	private IEnumerator EnableReactionsIn(float time)
	{
		return null;
	}

	[Address(RVA = "0x70675C", Offset = "0x70675C", VA = "0x70675C")]
	public void SetUncutableHitboxes(bool uncutable)
	{
	}

	[Address(RVA = "0x707924", Offset = "0x707924", VA = "0x707924")]
	public HitboxNinja()
	{
	}
}
[Serializable]
public class HitBoxPattern
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Variant;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Animation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int Health;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<HitBox> HitBoxes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<HitBox> AvoidHitBoxes;

	[Address(RVA = "0x705A20", Offset = "0x705A20", VA = "0x705A20")]
	public HitBoxPattern()
	{
	}
}
public class HitBoxOuterCircle : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Segments;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Radius;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LineRenderer line;

	[Address(RVA = "0x7056E8", Offset = "0x7056E8", VA = "0x7056E8")]
	private void Awake()
	{
	}

	[Address(RVA = "0x705770", Offset = "0x705770", VA = "0x705770")]
	private void CreatePoints()
	{
	}

	[Address(RVA = "0x705914", Offset = "0x705914", VA = "0x705914")]
	public void SetRadius(float rad)
	{
	}

	[Address(RVA = "0x7059B0", Offset = "0x7059B0", VA = "0x7059B0")]
	public void Hide()
	{
	}

	[Address(RVA = "0x7059E4", Offset = "0x7059E4", VA = "0x7059E4")]
	public void Show()
	{
	}

	[Address(RVA = "0x705A18", Offset = "0x705A18", VA = "0x705A18")]
	public HitBoxOuterCircle()
	{
	}
}
public class HitBoxPlaceholder : HitBox
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public HitBox HitboxPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public HitboxNinja ParentEnemy;

	[Address(RVA = "0x705A30", Offset = "0x705A30", VA = "0x705A30")]
	private void Awake()
	{
	}

	[Address(RVA = "0x705A34", Offset = "0x705A34", VA = "0x705A34")]
	public HitBoxPlaceholder()
	{
	}
}
public class InvincibilityGauge : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A180", Offset = "0x65A180")]
	private sealed class <activateForTime>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InvincibilityGauge <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <startTime>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x709F44", Offset = "0x709F44", VA = "0x709F44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x709FB4", Offset = "0x709FB4", VA = "0x709FB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x709DE4", Offset = "0x709DE4", VA = "0x709DE4")]
		[DebuggerHidden]
		public <activateForTime>d__4(int <>1__state)
		{
		}

		[Address(RVA = "0x709E18", Offset = "0x709E18", VA = "0x709E18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x709E1C", Offset = "0x709E1C", VA = "0x709E1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x709F4C", Offset = "0x709F4C", VA = "0x709F4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Container;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image Fill;

	[Address(RVA = "0x709CB8", Offset = "0x709CB8", VA = "0x709CB8")]
	public void Start()
	{
	}

	[Address(RVA = "0x709CEC", Offset = "0x709CEC", VA = "0x709CEC")]
	public void ActivateForTime(float time)
	{
	}

	[Address(RVA = "0x709D4C", Offset = "0x709D4C", VA = "0x709D4C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675F94", Offset = "0x675F94")]
	private IEnumerator activateForTime(float time)
	{
		return null;
	}

	[Address(RVA = "0x709E10", Offset = "0x709E10", VA = "0x709E10")]
	public InvincibilityGauge()
	{
	}
}
public class ProjectileRotation : EnemyProjectileBehavior
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 RotationSpeed;

	[Address(RVA = "0x1559DD0", Offset = "0x1559DD0", VA = "0x1559DD0")]
	private void Update()
	{
	}

	[Address(RVA = "0x1559EC0", Offset = "0x1559EC0", VA = "0x1559EC0")]
	public ProjectileRotation()
	{
	}
}
public class RemoveEffectsOnDeath : EnemyDeathBehavior
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> ToRemove;

	[Address(RVA = "0x155CB2C", Offset = "0x155CB2C", VA = "0x155CB2C", Slot = "4")]
	public override void TriggerDeath()
	{
	}

	[Address(RVA = "0x155CC7C", Offset = "0x155CC7C", VA = "0x155CC7C")]
	public RemoveEffectsOnDeath()
	{
	}
}
public class RemoveHitboxesOnDeath : EnemyDeathBehavior
{
	[Address(RVA = "0x155CC84", Offset = "0x155CC84", VA = "0x155CC84", Slot = "4")]
	public override void TriggerDeath()
	{
	}

	[Address(RVA = "0x155CE34", Offset = "0x155CE34", VA = "0x155CE34")]
	public RemoveHitboxesOnDeath()
	{
	}
}
public class RemoveSimulatorSDKOption : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTK_SDKManager Manager;

	[Address(RVA = "0x155CE3C", Offset = "0x155CE3C", VA = "0x155CE3C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x155CFF0", Offset = "0x155CFF0", VA = "0x155CFF0")]
	public RemoveSimulatorSDKOption()
	{
	}
}
public class SDKManagerMovement : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A190", Offset = "0x65A190")]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SDKManagerMovement <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x155EBC4", Offset = "0x155EBC4", VA = "0x155EBC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x155EC34", Offset = "0x155EC34", VA = "0x155EC34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x155EA78", Offset = "0x155EA78", VA = "0x155EA78")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Address(RVA = "0x155EAAC", Offset = "0x155EAAC", VA = "0x155EAAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x155EAB0", Offset = "0x155EAB0", VA = "0x155EAB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x155EBCC", Offset = "0x155EBCC", VA = "0x155EBCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Address(RVA = "0x155E998", Offset = "0x155E998", VA = "0x155E998")]
	private void Awake()
	{
	}

	[Address(RVA = "0x155EA04", Offset = "0x155EA04", VA = "0x155EA04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x675FF8", Offset = "0x675FF8")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x155EAA4", Offset = "0x155EAA4", VA = "0x155EAA4")]
	public SDKManagerMovement()
	{
	}
}
public class Animations
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string IDLE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string SPAWN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string RUN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string COMBO_ATTACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string COMBO_BLOCK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string ATTACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string ATTACK_WINDUP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string RETREAT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string DODGE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string HIT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string HIT_LIGHT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string STUN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string WEAPON_CONTROL;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string BLOCKED;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string WALK_LEFT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string WALK_RIGHT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string DASH_LEFT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string DASH_RIGHT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string JUMP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string LAND;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string LOW_JUMP;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string QUICK_LAND;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string THROW_PROJECTILE;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string FATALITY;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static string FALL;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static string REACT;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static string JUMP_ATTACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static string DEATH;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static string KNOCKEDUP;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static string KNOCKEDUPSTART;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static string KNOCKEDUPLAND;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static string KNOCKEDUPGETUP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static string BLOCK_BROKEN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static string STABBED;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static string STABBED_STAGGER;

	[Address(RVA = "0x8A726C", Offset = "0x8A726C", VA = "0x8A726C")]
	public Animations()
	{
	}
}
public class Events
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string ENEMY_READY_TO_PATH_ROUTE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string ENEMY_FINISHED_PATH_ROUTE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string ENEMY_WAVE_FINISHED;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string ENEMY_FAR_FROM_PLAYER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string ENEMY_NEAR_PLAYER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string ENEMY_IN_STAGING;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string ENEMY_HAS_OPENING_FOR_ATTACK_STAGING;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string ENEMY_IN_ATTACK_STAGING;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string ENEMY_HAS_OPENING_FOR_ATTACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string JUMP_TO_CLEAR_ANGLE_OF_ATTACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string ENEMY_ATTACK_FINISHED;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string ENEMY_STAB_BY_PLAYER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string ENEMY_FINISH_STAB_BY_PLAYER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string ENEMY_HIT_BY_PLAYER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string ENEMY_HIT_BY_PLAYER_LIGHT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string ENEMY_HIT_BY_PLAYER_LIGHT_KNOCKBACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string ENEMY_HIT_BY_PLAYER_STUN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string ENEMY_HIT_BY_PLAYER_RESET;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string ENEMY_PLAYER_MISS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string ENEMY_IS_DEAD;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string ENEMY_IS_DEAD_CRIT;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string ENEMY_SUCCESSFUL_STRIKE;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string ENEMY_BLOCKED;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string ENEMY_STAGING_PROJECTILE_COMPLETE;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static string ENEMY_STAGING_PROJECTILE_REPEAT;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static string ENEMY_STAGING_HIT_COMPLETE;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static string ENEMY_FALL;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static string ENEMY_REACT;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static string ENEMY_BLOCK_KNOCKBACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static string ENEMY_WEAPON_CONTROL_START;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static string ENEMY_WEAPON_CONTROL_STOP;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static string ENEMY_RESET;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static string ENEMY_HITUP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static string ENEMY_BLOCK_BROKEN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static string ENEMY_BOSS_PHASE_COMPLETE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static string ENEMY_BOSS_REGROUP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static string ENEMY_BOSS_BEGIN_FATALITY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public static string ENEMY_BOSS_FATALITY_KNOCKBACK_COMPLETE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public static string PLAYER_COMBO_BROKEN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public static string PLAYER_COMBO_HIT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public static string PLAYER_COMBO_TIMEOUT;

	[Address(RVA = "0x7CA194", Offset = "0x7CA194", VA = "0x7CA194")]
	public Events()
	{
	}
}
public class States
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string ENEMY_SPAWN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string ENEMY_PATHED;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string ENEMY_WAITING_FOR_WAVE_FINISH;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string ENEMY_STAGING;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string ENEMY_NAVIGATE_TO_STAGING;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string ENEMY_STAGING_PROJECTILE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string ENEMY_NAVIGATE_TO_ATTACK_STAGING;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string ENEMY_ATTACK_STAGING;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string ENEMY_NAVIGATE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string ENEMY_ATTACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string JUMP_TO_CLEAR_ATTACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string ENEMY_ATTACK_SUCCESS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string ENEMY_ATTACK_BLOCKED;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string ENEMY_RETREAT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string ENEMY_HIT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string ENEMY_LIGHT_HIT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string ENEMY_LIGHT_HIT_KNOCKBACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string ENEMY_HIT_RESET;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string ENEMY_HIT_STUN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string ENEMY_STAGING_HIT;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string ENEMY_MISS;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string ENEMY_DEAD;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string ENEMY_CRIT_DEAD;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string ENEMY_PHASE_SHIFT;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static string ENEMY_REGROUP;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static string ENEMY_FATALITY;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static string ENEMY_FATALITY_KNOCKBACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static string ENEMY_FALL;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static string ENEMY_STAGING_FALL;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static string ENEMY_REACT;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static string ENEMY_BLOCK_KNOCKBACK;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static string ENEMY_UNDER_WEAPON_CONTROL;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static string ENEMY_RESET;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static string ENEMY_HITUP;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static string ENEMY_BLOCK_BROKEN;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static string ENEMY_STAB;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static string ENEMY_FATALITY_STAB;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public static string ENEMY_FINISH_STAB;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public static string PLAYER_COMBO_NONE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public static string PLAYER_COMBO_1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public static string PLAYER_COMBO_2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public static string PLAYER_COMBO_3;

	[Address(RVA = "0x7DBCEC", Offset = "0x7DBCEC", VA = "0x7DBCEC")]
	public States()
	{
	}
}
public class StatefulEnemy : MonoBehaviour
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A1A0", Offset = "0x65A1A0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Predicate<Buff> <>9__103_0;

		[Address(RVA = "0x99BDE4", Offset = "0x99BDE4", VA = "0x99BDE4")]
		public <>c()
		{
		}

		[Address(RVA = "0x99BDEC", Offset = "0x99BDEC", VA = "0x99BDEC")]
		internal bool <StopInvincibilityBuff>b__103_0(Buff b)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A1B0", Offset = "0x65A1B0")]
	private sealed class <StirkePointAtEndOfFrame>d__105 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x99DD3C", Offset = "0x99DD3C", VA = "0x99DD3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x99DDAC", Offset = "0x99DDAC", VA = "0x99DDAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x98A1A8", Offset = "0x98A1A8", VA = "0x98A1A8")]
		[DebuggerHidden]
		public <StirkePointAtEndOfFrame>d__105(int <>1__state)
		{
		}

		[Address(RVA = "0x99DA14", Offset = "0x99DA14", VA = "0x99DA14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x99DA18", Offset = "0x99DA18", VA = "0x99DA18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x99DD44", Offset = "0x99DD44", VA = "0x99DD44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A1C0", Offset = "0x65A1C0")]
	private sealed class <>c__DisplayClass113_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitData data;

		[Address(RVA = "0x98B3FC", Offset = "0x98B3FC", VA = "0x98B3FC")]
		public <>c__DisplayClass113_0()
		{
		}

		[Address(RVA = "0x99BE6C", Offset = "0x99BE6C", VA = "0x99BE6C")]
		internal void <HitboxHit>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A1D0", Offset = "0x65A1D0")]
	private sealed class <>c__DisplayClass114_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StabData data;

		[Address(RVA = "0x98BB08", Offset = "0x98BB08", VA = "0x98BB08")]
		public <>c__DisplayClass114_0()
		{
		}

		[Address(RVA = "0x99C1AC", Offset = "0x99C1AC", VA = "0x99C1AC")]
		internal void <HitboxStab>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A1E0", Offset = "0x65A1E0")]
	private sealed class <>c__DisplayClass115_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitData data;

		[Address(RVA = "0x98C064", Offset = "0x98C064", VA = "0x98C064")]
		public <>c__DisplayClass115_0()
		{
		}

		[Address(RVA = "0x99C3D4", Offset = "0x99C3D4", VA = "0x99C3D4")]
		internal void <Hit>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A1F0", Offset = "0x65A1F0")]
	private sealed class <>c__DisplayClass116_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StabData data;

		[Address(RVA = "0x98C5B8", Offset = "0x98C5B8", VA = "0x98C5B8")]
		public <>c__DisplayClass116_0()
		{
		}

		[Address(RVA = "0x99C7B4", Offset = "0x99C7B4", VA = "0x99C7B4")]
		internal void <Stab>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A200", Offset = "0x65A200")]
	private sealed class <>c__DisplayClass118_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExplodeData data;

		[Address(RVA = "0x98CA24", Offset = "0x98CA24", VA = "0x98CA24")]
		public <>c__DisplayClass118_0()
		{
		}

		[Address(RVA = "0x99C9DC", Offset = "0x99C9DC", VA = "0x99C9DC")]
		internal void <Explode>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A210", Offset = "0x65A210")]
	private sealed class <AnimatedDeath>d__119 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HitData data;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x99D99C", Offset = "0x99D99C", VA = "0x99D99C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x99DA0C", Offset = "0x99DA0C", VA = "0x99DA0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x98CAC4", Offset = "0x98CAC4", VA = "0x98CAC4")]
		[DebuggerHidden]
		public <AnimatedDeath>d__119(int <>1__state)
		{
		}

		[Address(RVA = "0x99D608", Offset = "0x99D608", VA = "0x99D608", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x99D60C", Offset = "0x99D60C", VA = "0x99D60C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x99D9A4", Offset = "0x99D9A4", VA = "0x99D9A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A220", Offset = "0x65A220")]
	private sealed class <>c__DisplayClass128_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PathState pathState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StatefulEnemy <>4__this;

		[Address(RVA = "0x98D600", Offset = "0x98D600", VA = "0x98D600")]
		public <>c__DisplayClass128_0()
		{
		}

		[Address(RVA = "0x99CC04", Offset = "0x99CC04", VA = "0x99CC04")]
		internal void <onPathed>b__0()
		{
		}

		[Address(RVA = "0x99CD88", Offset = "0x99CD88", VA = "0x99CD88")]
		internal void <onPathed>b__1()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A230", Offset = "0x65A230")]
	private sealed class <>c__DisplayClass128_1
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action process;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass128_0 CS$<>8__locals1;

		[Address(RVA = "0x98D608", Offset = "0x98D608", VA = "0x98D608")]
		public <>c__DisplayClass128_1()
		{
		}

		[Address(RVA = "0x99CDB8", Offset = "0x99CDB8", VA = "0x99CDB8")]
		internal void <onPathed>b__2()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A240", Offset = "0x65A240")]
	private sealed class <waitAndPaceDuringWaveFinish>d__135 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DBC74", Offset = "0x7DBC74", VA = "0x7DBC74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DBCE4", Offset = "0x7DBCE4", VA = "0x7DBCE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DB7F4", Offset = "0x7DB7F4", VA = "0x7DB7F4")]
		[DebuggerHidden]
		public <waitAndPaceDuringWaveFinish>d__135(int <>1__state)
		{
		}

		[Address(RVA = "0x7DB820", Offset = "0x7DB820", VA = "0x7DB820", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DB824", Offset = "0x7DB824", VA = "0x7DB824", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DBC7C", Offset = "0x7DBC7C", VA = "0x7DBC7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A250", Offset = "0x65A250")]
	private sealed class <>c__DisplayClass145_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 candidateVector;

		[Address(RVA = "0x98F58C", Offset = "0x98F58C", VA = "0x98F58C")]
		public <>c__DisplayClass145_0()
		{
		}

		[Address(RVA = "0x99CE10", Offset = "0x99CE10", VA = "0x99CE10")]
		internal bool <onJumpToClear>b__0(Vector3 v)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A260", Offset = "0x65A260")]
	private sealed class <jumpToClear>d__147 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <elapsed>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <dist>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool <lowJump>5__5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <flightLength>5__6;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D8264", Offset = "0x7D8264", VA = "0x7D8264", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D82D4", Offset = "0x7D82D4", VA = "0x7D82D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D7C98", Offset = "0x7D7C98", VA = "0x7D7C98")]
		[DebuggerHidden]
		public <jumpToClear>d__147(int <>1__state)
		{
		}

		[Address(RVA = "0x7D7CC4", Offset = "0x7D7CC4", VA = "0x7D7CC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D7CC8", Offset = "0x7D7CC8", VA = "0x7D7CC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D826C", Offset = "0x7D826C", VA = "0x7D826C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A270", Offset = "0x65A270")]
	private sealed class <skewerWatcher>d__174 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StabData data;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool <doneWatching>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DAC80", Offset = "0x7DAC80", VA = "0x7DAC80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DACF0", Offset = "0x7DACF0", VA = "0x7DACF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DA720", Offset = "0x7DA720", VA = "0x7DA720")]
		[DebuggerHidden]
		public <skewerWatcher>d__174(int <>1__state)
		{
		}

		[Address(RVA = "0x7DA74C", Offset = "0x7DA74C", VA = "0x7DA74C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DA750", Offset = "0x7DA750", VA = "0x7DA750", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DAC88", Offset = "0x7DAC88", VA = "0x7DAC88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A280", Offset = "0x65A280")]
	private sealed class <>c__DisplayClass216_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action postCallback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StatefulEnemy <>4__this;

		[Address(RVA = "0x99CECC", Offset = "0x99CECC", VA = "0x99CECC")]
		public <>c__DisplayClass216_0()
		{
		}

		[Address(RVA = "0x99CED4", Offset = "0x99CED4", VA = "0x99CED4")]
		internal void <jumpTo>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A290", Offset = "0x65A290")]
	private sealed class <jumpTo>d__216 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action postCallback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action animationCallback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private <>c__DisplayClass216_0 <>8__1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <startTime>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 <startPosition>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <highPoint>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float <expectedTime>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D7C20", Offset = "0x7D7C20", VA = "0x7D7C20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D7C90", Offset = "0x7D7C90", VA = "0x7D7C90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D75C0", Offset = "0x7D75C0", VA = "0x7D75C0")]
		[DebuggerHidden]
		public <jumpTo>d__216(int <>1__state)
		{
		}

		[Address(RVA = "0x7D75EC", Offset = "0x7D75EC", VA = "0x7D75EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D75F0", Offset = "0x7D75F0", VA = "0x7D75F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D7C28", Offset = "0x7D7C28", VA = "0x7D7C28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A2A0", Offset = "0x65A2A0")]
	private sealed class <>c__DisplayClass220_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> animations;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string animation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int extraAnimations;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string animationToPlay;

		[Address(RVA = "0x99CF74", Offset = "0x99CF74", VA = "0x99CF74")]
		public <>c__DisplayClass220_0()
		{
		}

		[Address(RVA = "0x99CF7C", Offset = "0x99CF7C", VA = "0x99CF7C")]
		internal bool <animateCoroutine>b__0(string a, bool inTransition)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A2B0", Offset = "0x65A2B0")]
	private sealed class <>c__DisplayClass220_1
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Func<string, bool, bool> playing;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass220_0 CS$<>8__locals1;

		[Address(RVA = "0x99D0E0", Offset = "0x99D0E0", VA = "0x99D0E0")]
		public <>c__DisplayClass220_1()
		{
		}

		[Address(RVA = "0x99D0E8", Offset = "0x99D0E8", VA = "0x99D0E8")]
		internal bool <animateCoroutine>b__1(bool result, bool inTransition)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A2C0", Offset = "0x65A2C0")]
	private sealed class <>c__DisplayClass220_2
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool inTransition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass220_1 CS$<>8__locals2;

		[Address(RVA = "0x99D42C", Offset = "0x99D42C", VA = "0x99D42C")]
		public <>c__DisplayClass220_2()
		{
		}

		[Address(RVA = "0x99D434", Offset = "0x99D434", VA = "0x99D434")]
		internal bool <animateCoroutine>b__2(string a)
		{
			return default(bool);
		}

		[Address(RVA = "0x99D4C0", Offset = "0x99D4C0", VA = "0x99D4C0")]
		internal bool <animateCoroutine>b__3(int i)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A2D0", Offset = "0x65A2D0")]
	private sealed class <animateCoroutine>d__220 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> animations;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string animation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int extraAnimations;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action before;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string playedAnimationOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float transitionTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float playTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action afterPrimaryAnimation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private <>c__DisplayClass220_1 <>8__1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float postDelayInS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private <>c__DisplayClass220_0 <>8__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action after;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Func<bool, bool, bool> <playingAny>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool <executedAfterPrimaryAnimation>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x99E3D0", Offset = "0x99E3D0", VA = "0x99E3D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x99E440", Offset = "0x99E440", VA = "0x99E440", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x99AB38", Offset = "0x99AB38", VA = "0x99AB38")]
		[DebuggerHidden]
		public <animateCoroutine>d__220(int <>1__state)
		{
		}

		[Address(RVA = "0x99DDB4", Offset = "0x99DDB4", VA = "0x99DDB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x99DDB8", Offset = "0x99DDB8", VA = "0x99DDB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x99E3D8", Offset = "0x99E3D8", VA = "0x99E3D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A2E0", Offset = "0x65A2E0")]
	private sealed class <jumpAttack>d__221 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <startTime>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <startPosition>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <endPosition>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <attackTime>5__5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <highPoint>5__6;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x99F4A4", Offset = "0x99F4A4", VA = "0x99F4A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x99F514", Offset = "0x99F514", VA = "0x99F514", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x99AB64", Offset = "0x99AB64", VA = "0x99AB64")]
		[DebuggerHidden]
		public <jumpAttack>d__221(int <>1__state)
		{
		}

		[Address(RVA = "0x99EDF8", Offset = "0x99EDF8", VA = "0x99EDF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x99EDFC", Offset = "0x99EDFC", VA = "0x99EDFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x99F4AC", Offset = "0x99F4AC", VA = "0x99F4AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A2F0", Offset = "0x65A2F0")]
	private sealed class <wait>d__224 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action before;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float waitForS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action after;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DB77C", Offset = "0x7DB77C", VA = "0x7DB77C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DB7EC", Offset = "0x7DB7EC", VA = "0x7DB7EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DB68C", Offset = "0x7DB68C", VA = "0x7DB68C")]
		[DebuggerHidden]
		public <wait>d__224(int <>1__state)
		{
		}

		[Address(RVA = "0x7DB6B8", Offset = "0x7DB6B8", VA = "0x7DB6B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DB6BC", Offset = "0x7DB6BC", VA = "0x7DB6BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DB784", Offset = "0x7DB784", VA = "0x7DB784", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A300", Offset = "0x65A300")]
	private sealed class <stun>d__225 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DB40C", Offset = "0x7DB40C", VA = "0x7DB40C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DB47C", Offset = "0x7DB47C", VA = "0x7DB47C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DB268", Offset = "0x7DB268", VA = "0x7DB268")]
		[DebuggerHidden]
		public <stun>d__225(int <>1__state)
		{
		}

		[Address(RVA = "0x7DB294", Offset = "0x7DB294", VA = "0x7DB294", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DB298", Offset = "0x7DB298", VA = "0x7DB298", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DB414", Offset = "0x7DB414", VA = "0x7DB414", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A310", Offset = "0x65A310")]
	private sealed class <knockdown>d__226 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D8480", Offset = "0x7D8480", VA = "0x7D8480", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D84F0", Offset = "0x7D84F0", VA = "0x7D84F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D82DC", Offset = "0x7D82DC", VA = "0x7D82DC")]
		[DebuggerHidden]
		public <knockdown>d__226(int <>1__state)
		{
		}

		[Address(RVA = "0x7D8308", Offset = "0x7D8308", VA = "0x7D8308", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D830C", Offset = "0x7D830C", VA = "0x7D830C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D8488", Offset = "0x7D8488", VA = "0x7D8488", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A320", Offset = "0x65A320")]
	private sealed class <hitSlide>d__227 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float hitSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 hitDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <animationTime>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 <endPos>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <elapsed>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x99ED80", Offset = "0x99ED80", VA = "0x99ED80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x99EDF0", Offset = "0x99EDF0", VA = "0x99EDF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x99AC78", Offset = "0x99AC78", VA = "0x99AC78")]
		[DebuggerHidden]
		public <hitSlide>d__227(int <>1__state)
		{
		}

		[Address(RVA = "0x99E988", Offset = "0x99E988", VA = "0x99E988", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x99E98C", Offset = "0x99E98C", VA = "0x99E98C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x99ED88", Offset = "0x99ED88", VA = "0x99ED88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A330", Offset = "0x65A330")]
	private sealed class <hitFlight>d__228 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool knockUpOnly;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <velocity>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x99E910", Offset = "0x99E910", VA = "0x99E910", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x99E980", Offset = "0x99E980", VA = "0x99E980", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x99ACA4", Offset = "0x99ACA4", VA = "0x99ACA4")]
		[DebuggerHidden]
		public <hitFlight>d__228(int <>1__state)
		{
		}

		[Address(RVA = "0x99E448", Offset = "0x99E448", VA = "0x99E448", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x99E44C", Offset = "0x99E44C", VA = "0x99E44C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x99E918", Offset = "0x99E918", VA = "0x99E918", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A340", Offset = "0x65A340")]
	private sealed class <makeInvincible>d__234 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timeInS;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D8DD4", Offset = "0x7D8DD4", VA = "0x7D8DD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D8E44", Offset = "0x7D8E44", VA = "0x7D8E44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D8C84", Offset = "0x7D8C84", VA = "0x7D8C84")]
		[DebuggerHidden]
		public <makeInvincible>d__234(int <>1__state)
		{
		}

		[Address(RVA = "0x7D8CB0", Offset = "0x7D8CB0", VA = "0x7D8CB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D8CB4", Offset = "0x7D8CB4", VA = "0x7D8CB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D8DDC", Offset = "0x7D8DDC", VA = "0x7D8DDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A350", Offset = "0x65A350")]
	private sealed class <slideBackTo>d__236 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool yOnly;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float distance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsed>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <duration>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <start>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <end>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DB1F0", Offset = "0x7DB1F0", VA = "0x7DB1F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DB260", Offset = "0x7DB260", VA = "0x7DB260", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DACF8", Offset = "0x7DACF8", VA = "0x7DACF8")]
		[DebuggerHidden]
		public <slideBackTo>d__236(int <>1__state)
		{
		}

		[Address(RVA = "0x7DAD24", Offset = "0x7DAD24", VA = "0x7DAD24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DAD28", Offset = "0x7DAD28", VA = "0x7DAD28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DB1F8", Offset = "0x7DB1F8", VA = "0x7DB1F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A360", Offset = "0x65A360")]
	private sealed class <onEnemyOpeningForAttackStaging>d__238 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D8ED0", Offset = "0x7D8ED0", VA = "0x7D8ED0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D8F40", Offset = "0x7D8F40", VA = "0x7D8F40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D8E4C", Offset = "0x7D8E4C", VA = "0x7D8E4C")]
		[DebuggerHidden]
		public <onEnemyOpeningForAttackStaging>d__238(int <>1__state)
		{
		}

		[Address(RVA = "0x7D8E78", Offset = "0x7D8E78", VA = "0x7D8E78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D8E7C", Offset = "0x7D8E7C", VA = "0x7D8E7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D8ED8", Offset = "0x7D8ED8", VA = "0x7D8ED8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A370", Offset = "0x65A370")]
	private sealed class <paceAroundStaging>d__239 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool canAttack;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StatefulEnemy <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DA6A8", Offset = "0x7DA6A8", VA = "0x7DA6A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DA718", Offset = "0x7DA718", VA = "0x7DA718", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D8F48", Offset = "0x7D8F48", VA = "0x7D8F48")]
		[DebuggerHidden]
		public <paceAroundStaging>d__239(int <>1__state)
		{
		}

		[Address(RVA = "0x7D8F74", Offset = "0x7D8F74", VA = "0x7D8F74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D8F78", Offset = "0x7D8F78", VA = "0x7D8F78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DA6B0", Offset = "0x7DA6B0", VA = "0x7DA6B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A380", Offset = "0x65A380")]
	private sealed class <listenToReactionDistanceCurves>d__245 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <awayVector>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startPos>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <reactionDistance>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D8C0C", Offset = "0x7D8C0C", VA = "0x7D8C0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D8C7C", Offset = "0x7D8C7C", VA = "0x7D8C7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D8784", Offset = "0x7D8784", VA = "0x7D8784")]
		[DebuggerHidden]
		public <listenToReactionDistanceCurves>d__245(int <>1__state)
		{
		}

		[Address(RVA = "0x7D87B0", Offset = "0x7D87B0", VA = "0x7D87B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D87B4", Offset = "0x7D87B4", VA = "0x7D87B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D8C14", Offset = "0x7D8C14", VA = "0x7D8C14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A390", Offset = "0x65A390")]
	private sealed class <listenToAnimationDistanceCurves>d__248 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <targetPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startPos>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D870C", Offset = "0x7D870C", VA = "0x7D870C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D877C", Offset = "0x7D877C", VA = "0x7D877C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D84F8", Offset = "0x7D84F8", VA = "0x7D84F8")]
		[DebuggerHidden]
		public <listenToAnimationDistanceCurves>d__248(int <>1__state)
		{
		}

		[Address(RVA = "0x7D8524", Offset = "0x7D8524", VA = "0x7D8524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D8528", Offset = "0x7D8528", VA = "0x7D8528", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D8714", Offset = "0x7D8714", VA = "0x7D8714", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A3A0", Offset = "0x65A3A0")]
	private sealed class <translateJump>d__249 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StatefulEnemy <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float height;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DB614", Offset = "0x7DB614", VA = "0x7DB614", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DB684", Offset = "0x7DB684", VA = "0x7DB684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DB484", Offset = "0x7DB484", VA = "0x7DB484")]
		[DebuggerHidden]
		public <translateJump>d__249(int <>1__state)
		{
		}

		[Address(RVA = "0x7DB4B0", Offset = "0x7DB4B0", VA = "0x7DB4B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DB4B4", Offset = "0x7DB4B4", VA = "0x7DB4B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DB61C", Offset = "0x7DB61C", VA = "0x7DB61C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A3B0", Offset = "0x65A3B0")]
	private sealed class <>c__DisplayClass254_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Weapon weapon;

		[Address(RVA = "0x99B59C", Offset = "0x99B59C", VA = "0x99B59C")]
		public <>c__DisplayClass254_0()
		{
		}

		[Address(RVA = "0x99D5BC", Offset = "0x99D5BC", VA = "0x99D5BC")]
		internal bool <DamageAdjustmentForWeapon>b__0(DamageAdjustments d)
		{
			return default(bool);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject attackAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deathAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip bodyPartFloorAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SkinnedMeshRenderer Char;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EnemyHeldWeapon[] Weapons;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float StagingDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float AttackStagingDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float AttackDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float ReactionDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float Speed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float Health;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool NerfOnEasy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float MaxDamageAllowedPerAttack;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool Agile;

	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool CutOnAllSliceDeaths;

	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool DisappearCharOnDeath;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public ProjectileBehavior ProjectileBehavior;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float StrafeDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float StrafeMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public PathState[] PathStates;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool Aggressive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool FreeForm;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Flytext FlytextPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public int WaveIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool IsWaveless;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float JumpHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool IsJumping;

	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool IsDoneJumping;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float StrikePointDistanceRequirement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float ComboAttackChances;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int ComboAttackCooldown;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float MaxPaceTimeInS;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<DamageAdjustments> DamageAdjustments;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public int SpecialGrant;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public int MaxDashes;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float Accleration;

	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float Deccleration;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float DecclerationDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float MinRandomSizeMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float MaxRandomSizeMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float ShouldDash;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public List<Buff> Buffs;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public int NumberOfAttackAnimations;

	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float AnimationSpeedMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int NumberOfComboAttackAnimations;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public int NumberOfCombos;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public HealthDoober HealthDoober;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject InvincibilityBuffStartVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject InvincibilityBuffEndVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool Stationary;

	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	public bool FreezableFromHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
	public bool CanSkewer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public int enemyTargetNum;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public EnemyTarget enemyTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float ChanceOfJumpOnAttackObstructed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	protected Transform player;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	protected Machine stateMachine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected bool attacking;

	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	protected bool jumping;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	protected HitboxNinja enemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	protected int selectedAttackVariant;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected Animator animator;

	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float healthInternal;

	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private int pathStateRouteIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private string activeAnimation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Coroutine activeAnimationCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Vector3 activeRotation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private int dashed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	protected bool pathedWaiting;

	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private Vector3 pathedStartTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	protected NavMeshAgent navAgent;

	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	protected NavMeshObstacle navObstacle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Coroutine distanceModifierCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Coroutine distanceReactionModifierCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private Coroutine slideToAttackRangeCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Coroutine hitSlideCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private float paceStartTimestamp;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	private bool recentlyBlocked;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private float damageTakenInThisAttack;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	private int attacksSinceLastCombo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private IEnumerator waitAndPace;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	protected Vector3 roughPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	protected float timeInPathed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private string attackAnimation;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Vector3 retreatTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	protected Coroutine stabWatcherCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	protected float timeInStab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	protected StabData lastStab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private float lastAttack;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
	private Vector3 lastFloorPositionCheck;

	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private Vector3 lastFloorPositionResult;

	public bool IsInvincible
	{
		[Address(RVA = "0x9882D8", Offset = "0x9882D8", VA = "0x9882D8")]
		get
		{
			return default(bool);
		}
	}

	public float CurrentHealth
	{
		[Address(RVA = "0x988328", Offset = "0x988328", VA = "0x988328")]
		get
		{
			return default(float);
		}
	}

	public bool Alive
	{
		[Address(RVA = "0x988330", Offset = "0x988330", VA = "0x988330")]
		get
		{
			return default(bool);
		}
	}

	protected float health
	{
		[Address(RVA = "0x98835C", Offset = "0x98835C", VA = "0x98835C")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x988364", Offset = "0x988364", VA = "0x988364")]
		set
		{
		}
	}

	private Vector3 playerPos
	{
		[Address(RVA = "0x98836C", Offset = "0x98836C", VA = "0x98836C")]
		get
		{
			return default(Vector3);
		}
	}

	private Vector3 playerPosXZ
	{
		[Address(RVA = "0x988434", Offset = "0x988434", VA = "0x988434")]
		get
		{
			return default(Vector3);
		}
	}

	[Address(RVA = "0x9884A8", Offset = "0x9884A8", VA = "0x9884A8")]
	public void Start()
	{
	}

	[Address(RVA = "0x98925C", Offset = "0x98925C", VA = "0x98925C")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x9893FC", Offset = "0x9893FC", VA = "0x9893FC")]
	public void Update()
	{
	}

	[Address(RVA = "0x98995C", Offset = "0x98995C", VA = "0x98995C")]
	public void Land()
	{
	}

	[Address(RVA = "0x989960", Offset = "0x989960", VA = "0x989960")]
	public void Fall()
	{
	}

	[Address(RVA = "0x989A88", Offset = "0x989A88", VA = "0x989A88")]
	public void Stumble()
	{
	}

	[Address(RVA = "0x989BB0", Offset = "0x989BB0", VA = "0x989BB0")]
	public bool IsReadyForPathStateProgression()
	{
		return default(bool);
	}

	[Address(RVA = "0x989CE0", Offset = "0x989CE0", VA = "0x989CE0")]
	public bool IsAttacking()
	{
		return default(bool);
	}

	[Address(RVA = "0x989D74", Offset = "0x989D74", VA = "0x989D74", Slot = "4")]
	public virtual void StartInvincibilityBuff()
	{
	}

	[Address(RVA = "0x989EB8", Offset = "0x989EB8", VA = "0x989EB8")]
	public void StopInvincibilityBuff()
	{
	}

	[Address(RVA = "0x98A070", Offset = "0x98A070", VA = "0x98A070")]
	public void StrikePoint(AnimationEvent e)
	{
	}

	[Address(RVA = "0x98A134", Offset = "0x98A134", VA = "0x98A134")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67605C", Offset = "0x67605C")]
	private IEnumerator StirkePointAtEndOfFrame()
	{
		return null;
	}

	[Address(RVA = "0x98A1D4", Offset = "0x98A1D4", VA = "0x98A1D4")]
	public void Blocked(BlockableEnemyWeapon weapon, Weapon blockingSword)
	{
	}

	[Address(RVA = "0x98A33C", Offset = "0x98A33C", VA = "0x98A33C")]
	public void SpawnFlyupDamageText(Vector3 pos, float damage, bool crit)
	{
	}

	[Address(RVA = "0x98A50C", Offset = "0x98A50C", VA = "0x98A50C")]
	public void AvoidboxTrigger()
	{
	}

	[Address(RVA = "0x98A5C8", Offset = "0x98A5C8", VA = "0x98A5C8")]
	public bool IsStaging()
	{
		return default(bool);
	}

	[Address(RVA = "0x98A8D4", Offset = "0x98A8D4", VA = "0x98A8D4")]
	private bool NearFloor()
	{
		return default(bool);
	}

	[Address(RVA = "0x98A9B0", Offset = "0x98A9B0", VA = "0x98A9B0")]
	protected void TakeDamage(bool crit, bool stab, float quality, Weapon weapon)
	{
	}

	[Address(RVA = "0x98ADD8", Offset = "0x98ADD8", VA = "0x98ADD8", Slot = "5")]
	protected virtual void PostTakeDamage()
	{
	}

	[Address(RVA = "0x98ADDC", Offset = "0x98ADDC", VA = "0x98ADDC")]
	public void HitboxHit(HitData data, List<HitBox> activeHitboxes)
	{
	}

	[Address(RVA = "0x98B404", Offset = "0x98B404", VA = "0x98B404")]
	public void HitboxStab(StabData data, List<HitBox> activeHitboxes)
	{
	}

	[Address(RVA = "0x98BB10", Offset = "0x98BB10", VA = "0x98BB10")]
	public void Hit(HitData data)
	{
	}

	[Address(RVA = "0x98C06C", Offset = "0x98C06C", VA = "0x98C06C")]
	public void Stab(StabData data)
	{
	}

	[Address(RVA = "0x98C5C0", Offset = "0x98C5C0", VA = "0x98C5C0")]
	public void FinishStab()
	{
	}

	[Address(RVA = "0x98C65C", Offset = "0x98C65C", VA = "0x98C65C")]
	public void Explode(ExplodeData data)
	{
	}

	[Address(RVA = "0x98CA2C", Offset = "0x98CA2C", VA = "0x98CA2C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6760C0", Offset = "0x6760C0")]
	public IEnumerator AnimatedDeath(HitData data)
	{
		return null;
	}

	[Address(RVA = "0x98CAF0", Offset = "0x98CAF0", VA = "0x98CAF0")]
	public void WeaponControlStart(EnemyControllingWeapon weapon, GameObject vfxPrefab)
	{
	}

	[Address(RVA = "0x98CB80", Offset = "0x98CB80", VA = "0x98CB80")]
	public void WeaponControlStop()
	{
	}

	[Address(RVA = "0x98CC10", Offset = "0x98CC10", VA = "0x98CC10")]
	public void HealthTo1()
	{
	}

	[Address(RVA = "0x98CC28", Offset = "0x98CC28", VA = "0x98CC28")]
	public void ForceKill()
	{
	}

	[Address(RVA = "0x98CCF0", Offset = "0x98CCF0", VA = "0x98CCF0")]
	public void HealthToFull()
	{
	}

	[Address(RVA = "0x98CD00", Offset = "0x98CD00", VA = "0x98CD00")]
	public void OnWaveFinished()
	{
	}

	[Address(RVA = "0x98CD90", Offset = "0x98CD90", VA = "0x98CD90", Slot = "6")]
	protected virtual void onSpawn([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98CE9C", Offset = "0x98CE9C", VA = "0x98CE9C", Slot = "7")]
	protected virtual void onSpawnUpdate()
	{
	}

	[Address(RVA = "0x98D2D0", Offset = "0x98D2D0", VA = "0x98D2D0")]
	protected void onPathed([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98D6C8", Offset = "0x98D6C8", VA = "0x98D6C8")]
	protected void onPathedUpdate()
	{
	}

	[Address(RVA = "0x98E5BC", Offset = "0x98E5BC", VA = "0x98E5BC")]
	protected void onPathedExit()
	{
	}

	[Address(RVA = "0x98E5C4", Offset = "0x98E5C4", VA = "0x98E5C4")]
	protected void onWaitingForWaveFinish([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98E7BC", Offset = "0x98E7BC", VA = "0x98E7BC")]
	protected void onWaitingForWaveFinishExit()
	{
	}

	[Address(RVA = "0x98E748", Offset = "0x98E748", VA = "0x98E748")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676124", Offset = "0x676124")]
	private IEnumerator waitAndPaceDuringWaveFinish()
	{
		return null;
	}

	[Address(RVA = "0x98E7F0", Offset = "0x98E7F0", VA = "0x98E7F0")]
	protected void onNavigate([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98E894", Offset = "0x98E894", VA = "0x98E894")]
	protected void onNavigateUpdate()
	{
	}

	[Address(RVA = "0x98E9A4", Offset = "0x98E9A4", VA = "0x98E9A4")]
	protected void onNavigateToStaging([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98EA48", Offset = "0x98EA48", VA = "0x98EA48", Slot = "8")]
	protected virtual void onNavigateToStagingUpdate()
	{
	}

	[Address(RVA = "0x98EB58", Offset = "0x98EB58", VA = "0x98EB58")]
	protected void onNavigateToAttackStagingUpdate()
	{
	}

	[Address(RVA = "0x98EC68", Offset = "0x98EC68", VA = "0x98EC68", Slot = "9")]
	protected virtual void onStaging([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98EDC0", Offset = "0x98EDC0", VA = "0x98EDC0", Slot = "10")]
	protected virtual void onStagingUpdate()
	{
	}

	[Address(RVA = "0x98EDE8", Offset = "0x98EDE8", VA = "0x98EDE8", Slot = "11")]
	protected virtual void onStagingExit()
	{
	}

	[Address(RVA = "0x98EEB8", Offset = "0x98EEB8", VA = "0x98EEB8")]
	protected void onAttackStaging([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98EFCC", Offset = "0x98EFCC", VA = "0x98EFCC")]
	protected void onJumpToClear([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x98F640", Offset = "0x98F640", VA = "0x98F640")]
	protected void onJumpToClearExit()
	{
	}

	[Address(RVA = "0x98F594", Offset = "0x98F594", VA = "0x98F594")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676188", Offset = "0x676188")]
	private IEnumerator jumpToClear(Vector3 target)
	{
		return null;
	}

	[Address(RVA = "0x98F674", Offset = "0x98F674", VA = "0x98F674", Slot = "12")]
	protected virtual void updateSelectedAttackVariant()
	{
	}

	[Address(RVA = "0x98F6A4", Offset = "0x98F6A4", VA = "0x98F6A4")]
	protected bool hasClearPathToPlayer()
	{
		return default(bool);
	}

	[Address(RVA = "0x98F9D8", Offset = "0x98F9D8", VA = "0x98F9D8")]
	protected void onAttackStagingUpdate()
	{
	}

	[Address(RVA = "0x9903DC", Offset = "0x9903DC", VA = "0x9903DC", Slot = "13")]
	protected virtual int getNumberOfAttackAnimations(int numberOfAttackAnimations)
	{
		return default(int);
	}

	[Address(RVA = "0x9903E4", Offset = "0x9903E4", VA = "0x9903E4")]
	protected void onAttack([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x9910AC", Offset = "0x9910AC", VA = "0x9910AC")]
	protected void onAttackUpdate()
	{
	}

	[Address(RVA = "0x991188", Offset = "0x991188", VA = "0x991188")]
	protected void onAttackExit()
	{
	}

	[Address(RVA = "0x9911BC", Offset = "0x9911BC", VA = "0x9911BC", Slot = "14")]
	protected virtual void onStagingProjectile([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x9912EC", Offset = "0x9912EC", VA = "0x9912EC", Slot = "15")]
	protected virtual void onStagingProjectileUpdate()
	{
	}

	[Address(RVA = "0x991400", Offset = "0x991400", VA = "0x991400")]
	protected void onRetreat([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x991524", Offset = "0x991524", VA = "0x991524")]
	protected Vector3 findRetreatTarget(float distance)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x991844", Offset = "0x991844", VA = "0x991844")]
	protected void onRetreatUpdate()
	{
	}

	[Address(RVA = "0x991C08", Offset = "0x991C08", VA = "0x991C08")]
	protected void onReact([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x991D60", Offset = "0x991D60", VA = "0x991D60")]
	protected void onReactUpdate()
	{
	}

	[Address(RVA = "0x991EE0", Offset = "0x991EE0", VA = "0x991EE0")]
	protected void onReactExit()
	{
	}

	[Address(RVA = "0x991F64", Offset = "0x991F64", VA = "0x991F64")]
	protected void onBlockBroken([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x9920F0", Offset = "0x9920F0", VA = "0x9920F0")]
	protected void onBlockBrokenUpdate()
	{
	}

	[Address(RVA = "0x9921D0", Offset = "0x9921D0", VA = "0x9921D0")]
	protected void onBlockBrokenExit()
	{
	}

	[Address(RVA = "0x992204", Offset = "0x992204", VA = "0x992204")]
	protected void onStagingHit([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x9922A8", Offset = "0x9922A8", VA = "0x9922A8")]
	protected void onStagingHitUpdate()
	{
	}

	[Address(RVA = "0x9923BC", Offset = "0x9923BC", VA = "0x9923BC")]
	protected void onStab([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x992508", Offset = "0x992508", VA = "0x992508")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6761EC", Offset = "0x6761EC")]
	protected IEnumerator skewerWatcher(StabData data)
	{
		return null;
	}

	[Address(RVA = "0x9925A0", Offset = "0x9925A0", VA = "0x9925A0")]
	protected void onStabUpdate()
	{
	}

	[Address(RVA = "0x9925F8", Offset = "0x9925F8", VA = "0x9925F8")]
	protected void onStabExit()
	{
	}

	[Address(RVA = "0x99262C", Offset = "0x99262C", VA = "0x99262C")]
	protected void onStabFinish([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x992908", Offset = "0x992908", VA = "0x992908")]
	protected void onStabFinishUpdate()
	{
	}

	[Address(RVA = "0x9929E8", Offset = "0x9929E8", VA = "0x9929E8")]
	protected void onStabFinishExit()
	{
	}

	[Address(RVA = "0x992A1C", Offset = "0x992A1C", VA = "0x992A1C")]
	protected void onHit([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x992AE4", Offset = "0x992AE4", VA = "0x992AE4")]
	protected void onHitUpdate()
	{
	}

	[Address(RVA = "0x992BC4", Offset = "0x992BC4", VA = "0x992BC4")]
	protected void onHitExit()
	{
	}

	[Address(RVA = "0x992BF8", Offset = "0x992BF8", VA = "0x992BF8")]
	protected void onBlockKnockback([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x992D70", Offset = "0x992D70", VA = "0x992D70")]
	protected void onBlockKnockbackUpdate()
	{
	}

	[Address(RVA = "0x992E50", Offset = "0x992E50", VA = "0x992E50")]
	protected void onBlockKnockbackExit()
	{
	}

	[Address(RVA = "0x992EA4", Offset = "0x992EA4", VA = "0x992EA4")]
	protected void onHitUp([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x993494", Offset = "0x993494", VA = "0x993494")]
	protected void onHitUpUpdate()
	{
	}

	[Address(RVA = "0x9935F4", Offset = "0x9935F4", VA = "0x9935F4")]
	protected void onHitUpExit()
	{
	}

	[Address(RVA = "0x993628", Offset = "0x993628", VA = "0x993628")]
	protected void onLightHitKnockback([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x993748", Offset = "0x993748", VA = "0x993748")]
	protected void onLightHitKnockbackUpdate()
	{
	}

	[Address(RVA = "0x993828", Offset = "0x993828", VA = "0x993828")]
	protected void onLightHitKnockbackExit()
	{
	}

	[Address(RVA = "0x99385C", Offset = "0x99385C", VA = "0x99385C")]
	protected void onFall([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x993900", Offset = "0x993900", VA = "0x993900")]
	protected void onFallUpdate()
	{
	}

	[Address(RVA = "0x9939E0", Offset = "0x9939E0", VA = "0x9939E0")]
	protected void onFallExit()
	{
	}

	[Address(RVA = "0x993A14", Offset = "0x993A14", VA = "0x993A14")]
	protected void onLightHit([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x993AB8", Offset = "0x993AB8", VA = "0x993AB8")]
	protected void onLightHitUpdate()
	{
	}

	[Address(RVA = "0x993B98", Offset = "0x993B98", VA = "0x993B98")]
	protected void onHitStun([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x993C3C", Offset = "0x993C3C", VA = "0x993C3C")]
	protected void onHitStunUpdate()
	{
	}

	[Address(RVA = "0x993D1C", Offset = "0x993D1C", VA = "0x993D1C")]
	protected void onMiss([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x993DC0", Offset = "0x993DC0", VA = "0x993DC0", Slot = "16")]
	protected virtual void onDead([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x993F94", Offset = "0x993F94", VA = "0x993F94", Slot = "17")]
	protected virtual void onCritDead([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x99411C", Offset = "0x99411C", VA = "0x99411C")]
	protected void onAttackSuccess([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x994208", Offset = "0x994208", VA = "0x994208")]
	protected void onAttackSuccessUpdate()
	{
	}

	[Address(RVA = "0x9943B4", Offset = "0x9943B4", VA = "0x9943B4")]
	protected void onAttackBlocked([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x99447C", Offset = "0x99447C", VA = "0x99447C")]
	protected void onAttackBlockedUpdate()
	{
	}

	[Address(RVA = "0x99455C", Offset = "0x99455C", VA = "0x99455C")]
	protected void onAttackBlockedExit()
	{
	}

	[Address(RVA = "0x994590", Offset = "0x994590", VA = "0x994590")]
	protected void onReset([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x9945A4", Offset = "0x9945A4", VA = "0x9945A4")]
	protected void onResetUpdate()
	{
	}

	[Address(RVA = "0x9945B8", Offset = "0x9945B8", VA = "0x9945B8")]
	protected void onWeaponControl([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x99468C", Offset = "0x99468C", VA = "0x99468C", Slot = "18")]
	protected virtual List<State> initAndGetStates()
	{
		return null;
	}

	[Address(RVA = "0x99A65C", Offset = "0x99A65C", VA = "0x99A65C", Slot = "19")]
	protected virtual void initHealth()
	{
	}

	[Address(RVA = "0x99A810", Offset = "0x99A810", VA = "0x99A810", Slot = "20")]
	protected virtual void postStart()
	{
	}

	[Address(RVA = "0x990014", Offset = "0x990014", VA = "0x990014")]
	protected bool isPlaying(string[] animations)
	{
		return default(bool);
	}

	[Address(RVA = "0x98A320", Offset = "0x98A320", VA = "0x98A320")]
	protected bool isPlaying([Optional] string animation)
	{
		return default(bool);
	}

	[Address(RVA = "0x98E240", Offset = "0x98E240", VA = "0x98E240")]
	protected void moveTo(Vector3 target, bool controlRotation = true, float speedScale = 1f)
	{
	}

	[Address(RVA = "0x98E15C", Offset = "0x98E15C", VA = "0x98E15C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676250", Offset = "0x676250")]
	protected IEnumerator jumpTo(Vector3 target, [Optional] Action animationCallback, [Optional] Action postCallback)
	{
		return null;
	}

	[Address(RVA = "0x98D068", Offset = "0x98D068", VA = "0x98D068")]
	protected void analyzePosition(bool nearPlayerEvent = true, bool attackStagingEvent = true, bool stagingEvent = true, bool farFromPlayerEvent = true)
	{
	}

	[Address(RVA = "0x991014", Offset = "0x991014", VA = "0x991014")]
	protected bool hasAnimation(string state)
	{
		return default(bool);
	}

	[Address(RVA = "0x989880", Offset = "0x989880", VA = "0x989880")]
	protected void animate(string animation, [Optional] List<string> animations, float transitionTime = 0.1f, float playTime = 0f, [Optional] Action before, [Optional] Action after, float postDelayInS = 0f, [Optional] Action afterPrimaryAnimation, int extraAnimations = 0, [Optional] string playedAnimationOverride)
	{
	}

	[Address(RVA = "0x99A9AC", Offset = "0x99A9AC", VA = "0x99A9AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6762B4", Offset = "0x6762B4")]
	protected IEnumerator animateCoroutine(string animation, [Optional] List<string> animations, float transitionTime = 0.1f, float playTime = 0f, [Optional] Action before, [Optional] Action after, float postDelayInS = 0f, [Optional] Action afterPrimaryAnimation, int extraAnimations = 0, [Optional] string playedAnimationOverride)
	{
		return null;
	}

	[Address(RVA = "0x98E0A8", Offset = "0x98E0A8", VA = "0x98E0A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676318", Offset = "0x676318")]
	private IEnumerator jumpAttack()
	{
		return null;
	}

	[Address(RVA = "0x989150", Offset = "0x989150", VA = "0x989150")]
	private void randomize()
	{
	}

	[Address(RVA = "0x988EEC", Offset = "0x988EEC", VA = "0x988EEC")]
	private void validate()
	{
	}

	[Address(RVA = "0x98D610", Offset = "0x98D610", VA = "0x98D610")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67637C", Offset = "0x67637C")]
	private IEnumerator wait(float waitForS, [Optional] Action before, [Optional] Action after)
	{
		return null;
	}

	[Address(RVA = "0x99AB90", Offset = "0x99AB90", VA = "0x99AB90")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6763E0", Offset = "0x6763E0")]
	private IEnumerator stun()
	{
		return null;
	}

	[Address(RVA = "0x99AC04", Offset = "0x99AC04", VA = "0x99AC04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676444", Offset = "0x676444")]
	private IEnumerator knockdown()
	{
		return null;
	}

	[Address(RVA = "0x992CB0", Offset = "0x992CB0", VA = "0x992CB0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6764A8", Offset = "0x6764A8")]
	private IEnumerator hitSlide(Vector3 hitDirection, float hitSpeed)
	{
		return null;
	}

	[Address(RVA = "0x9933F8", Offset = "0x9933F8", VA = "0x9933F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67650C", Offset = "0x67650C")]
	private IEnumerator hitFlight(Vector3 hitDirection, float hitSpeed, bool knockUpOnly)
	{
		return null;
	}

	[Address(RVA = "0x99ACD0", Offset = "0x99ACD0", VA = "0x99ACD0")]
	private Vector3 projectPositionByTimeAndDirection(float timeInFuture, bool backwards = false, bool left = false, bool right = false)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x990130", Offset = "0x990130", VA = "0x990130")]
	private Vector3 projectPositionByTimeAndDirectionAroundTarget(float timeInFuture, Vector3 target, bool right = false)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x99AF58", Offset = "0x99AF58", VA = "0x99AF58")]
	private Vector3 projectPositionByDistanceAndJumpFromStartPos(Vector3 startPos, Vector3 targetPos, float lerpDistance, float jumpHeight)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x99B0FC", Offset = "0x99B0FC", VA = "0x99B0FC")]
	private Vector3 projectPositionByDistanceAndJump(Vector3 targetPos, float lerpDistance, float jumpHeight)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x99B280", Offset = "0x99B280", VA = "0x99B280")]
	private Vector3 projectPositionByDistanceAndJumpForReaction(Vector3 awayVector, Vector3 startPos, float lerpDistance, float jumpHeight)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x99204C", Offset = "0x99204C", VA = "0x99204C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676570", Offset = "0x676570")]
	private IEnumerator makeInvincible(float timeInS)
	{
		return null;
	}

	[Address(RVA = "0x9920E4", Offset = "0x9920E4", VA = "0x9920E4")]
	private IEnumerator slideToAttackRange(bool yOnly = false)
	{
		return null;
	}

	[Address(RVA = "0x992850", Offset = "0x992850", VA = "0x992850")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6765D4", Offset = "0x6765D4")]
	private IEnumerator slideBackTo(float distance, bool yOnly = false)
	{
		return null;
	}

	[Address(RVA = "0x99B380", Offset = "0x99B380", VA = "0x99B380")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676638", Offset = "0x676638")]
	private IEnumerator onEnemyOpeningForAttackStaging()
	{
		return null;
	}

	[Address(RVA = "0x98ED24", Offset = "0x98ED24", VA = "0x98ED24")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67669C", Offset = "0x67669C")]
	private IEnumerator paceAroundStaging(bool canAttack = true)
	{
		return null;
	}

	[Address(RVA = "0x9900A8", Offset = "0x9900A8", VA = "0x9900A8")]
	private float getShouldDash()
	{
		return default(float);
	}

	[Address(RVA = "0x991BE0", Offset = "0x991BE0", VA = "0x991BE0")]
	private float getSpeed()
	{
		return default(float);
	}

	[Address(RVA = "0x988FC8", Offset = "0x988FC8", VA = "0x988FC8")]
	private float getSpeedMultiplier()
	{
		return default(float);
	}

	[Address(RVA = "0x991D10", Offset = "0x991D10", VA = "0x991D10")]
	private void startListeningToReactionDistanceCurves()
	{
	}

	[Address(RVA = "0x991F30", Offset = "0x991F30", VA = "0x991F30")]
	private void stopListeningToReactionDistanceCurves()
	{
	}

	[Address(RVA = "0x99B3F4", Offset = "0x99B3F4", VA = "0x99B3F4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676700", Offset = "0x676700")]
	private IEnumerator listenToReactionDistanceCurves()
	{
		return null;
	}

	[Address(RVA = "0x99105C", Offset = "0x99105C", VA = "0x99105C")]
	private void startListeningToAnimationDistanceCurves()
	{
	}

	[Address(RVA = "0x98A100", Offset = "0x98A100", VA = "0x98A100")]
	private void stopListeningToAnimationDistanceCurves()
	{
	}

	[Address(RVA = "0x99B468", Offset = "0x99B468", VA = "0x99B468")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676764", Offset = "0x676764")]
	private IEnumerator listenToAnimationDistanceCurves()
	{
		return null;
	}

	[Address(RVA = "0x99B4DC", Offset = "0x99B4DC", VA = "0x99B4DC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6767C8", Offset = "0x6767C8")]
	private IEnumerator translateJump(Vector3 target, float height)
	{
		return null;
	}

	[Address(RVA = "0x98E11C", Offset = "0x98E11C", VA = "0x98E11C")]
	private float distanceFromPlayer()
	{
		return default(float);
	}

	[Address(RVA = "0x990308", Offset = "0x990308", VA = "0x990308")]
	private float distanceFromPlayer(Vector3 position)
	{
		return default(float);
	}

	[Address(RVA = "0x98E708", Offset = "0x98E708", VA = "0x98E708")]
	private void LookAt(Transform target, bool instant = false)
	{
	}

	[Address(RVA = "0x9897BC", Offset = "0x9897BC", VA = "0x9897BC")]
	protected void LookAt(Vector3 target, bool instant = false)
	{
	}

	[Address(RVA = "0x98ACF4", Offset = "0x98ACF4", VA = "0x98ACF4")]
	private float DamageAdjustmentForWeapon(Weapon weapon)
	{
		return default(float);
	}

	[Address(RVA = "0x99B5A4", Offset = "0x99B5A4", VA = "0x99B5A4")]
	protected Vector3 GetFloorPositionAt(Vector3 location)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x99B874", Offset = "0x99B874", VA = "0x99B874")]
	protected Vector3 GetCurrentFloorPosition()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x98A95C", Offset = "0x98A95C", VA = "0x98A95C")]
	protected float CurrentDistanceFromFloor()
	{
		return default(float);
	}

	[Address(RVA = "0x99B8B4", Offset = "0x99B8B4", VA = "0x99B8B4")]
	protected float DistanceFromFloorAt(Vector3 location)
	{
		return default(float);
	}

	[Address(RVA = "0x991C04", Offset = "0x991C04", VA = "0x991C04")]
	protected Vector3 PinToFloor(Vector3 location)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x99B8D8", Offset = "0x99B8D8", VA = "0x99B8D8")]
	public StatefulEnemy()
	{
	}

	[Address(RVA = "0x99B978", Offset = "0x99B978", VA = "0x99B978")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67682C", Offset = "0x67682C")]
	private void <Start>b__94_0()
	{
	}

	[Address(RVA = "0x99BA94", Offset = "0x99BA94", VA = "0x99BA94")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67683C", Offset = "0x67683C")]
	private void <Update>b__96_0()
	{
	}

	[Address(RVA = "0x99BAA0", Offset = "0x99BAA0", VA = "0x99BAA0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67684C", Offset = "0x67684C")]
	private void <ForceKill>b__123_0()
	{
	}

	[Address(RVA = "0x99BBD4", Offset = "0x99BBD4", VA = "0x99BBD4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67685C", Offset = "0x67685C")]
	private void <onAttack>b__153_0()
	{
	}

	[Address(RVA = "0x99BC0C", Offset = "0x99BC0C", VA = "0x99BC0C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67686C", Offset = "0x67686C")]
	private void <onAttack>b__153_1()
	{
	}

	[Address(RVA = "0x99BCA4", Offset = "0x99BCA4", VA = "0x99BCA4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67687C", Offset = "0x67687C")]
	private void <onStabFinish>b__177_0()
	{
	}

	[Address(RVA = "0x99BD04", Offset = "0x99BD04", VA = "0x99BD04")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67688C", Offset = "0x67688C")]
	private void <onStabFinish>b__177_1()
	{
	}

	[Address(RVA = "0x99BD64", Offset = "0x99BD64", VA = "0x99BD64")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67689C", Offset = "0x67689C")]
	private bool <isPlaying>b__213_0(string a)
	{
		return default(bool);
	}
}
public enum ProjectileBehavior
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	None,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	RandomOnce,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Once,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Nonstop
}
[Serializable]
public class DamageAdjustments
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public WeaponType WeaponType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float Multiplier;

	[Address(RVA = "0x8C23C8", Offset = "0x8C23C8", VA = "0x8C23C8")]
	public DamageAdjustments()
	{
	}
}
public class Target : StatefulEnemy
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	public float Lifetime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public TargetGroup targetGroup;

	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public float vel;

	[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
	public float acc;

	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private float spawnTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
	public bool projectileOnDestroy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x23D")]
	public bool damageOnMiss;

	[Il2CppDummyDll.FieldOffset(Offset = "0x23E")]
	public bool dead;

	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public GameObject particleOnDisappear;

	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private HitboxNinja hitboxNinja;

	[Address(RVA = "0x72949C", Offset = "0x72949C", VA = "0x72949C")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x72957C", Offset = "0x72957C", VA = "0x72957C")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x729A80", Offset = "0x729A80", VA = "0x729A80", Slot = "5")]
	protected override void PostTakeDamage()
	{
	}

	[Address(RVA = "0x7299A4", Offset = "0x7299A4", VA = "0x7299A4")]
	public void ThrowProjectile()
	{
	}

	[Address(RVA = "0x729B4C", Offset = "0x729B4C", VA = "0x729B4C")]
	public Target()
	{
	}
}
public enum TargetMovement
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	None,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Circle,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Horizontal,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Vertical
}
public class TargetGroup : StatefulEnemy
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A3C0", Offset = "0x65A3C0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Predicate<Target> <>9__11_0;

		[Address(RVA = "0x72A8D8", Offset = "0x72A8D8", VA = "0x72A8D8")]
		public <>c()
		{
		}

		[Address(RVA = "0x72A8E0", Offset = "0x72A8E0", VA = "0x72A8E0")]
		internal bool <LateUpdate>b__11_0(Target t)
		{
			return default(bool);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private List<Target> targets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public Transform[] Positions;

	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	public int count;

	[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
	private int currentCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public Target targetBase;

	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public float Delay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private float spawnTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public TargetMovement movement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	public float speed;

	[Address(RVA = "0x729B5C", Offset = "0x729B5C", VA = "0x729B5C")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x729C1C", Offset = "0x729C1C", VA = "0x729C1C", Slot = "19")]
	protected override void initHealth()
	{
	}

	[Address(RVA = "0x729C2C", Offset = "0x729C2C", VA = "0x729C2C")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x72A7FC", Offset = "0x72A7FC", VA = "0x72A7FC")]
	public TargetGroup()
	{
	}
}
public class UncutableOnReact : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool CurrentlyUncutable;

	[Address(RVA = "0x8C4B8C", Offset = "0x8C4B8C", VA = "0x8C4B8C")]
	public UncutableOnReact()
	{
	}
}
public class VFXOnDeath : EnemyDeathBehavior
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> VFX;

	[Address(RVA = "0x8CAB9C", Offset = "0x8CAB9C", VA = "0x8CAB9C", Slot = "4")]
	public override void TriggerDeath()
	{
	}

	[Address(RVA = "0x8CACC8", Offset = "0x8CACC8", VA = "0x8CACC8")]
	public VFXOnDeath()
	{
	}
}
public class EnemyKillZone : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Enemy> enemies;

	[Address(RVA = "0x7C6C00", Offset = "0x7C6C00", VA = "0x7C6C00")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Address(RVA = "0x7C6DD4", Offset = "0x7C6DD4", VA = "0x7C6DD4")]
	public EnemyKillZone()
	{
	}
}
public class EventManager : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A3D0", Offset = "0x65A3D0")]
	private sealed class <>c__DisplayClass8_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Func<IEnumerator> listener;

		[Address(RVA = "0x7C9994", Offset = "0x7C9994", VA = "0x7C9994")]
		public <>c__DisplayClass8_0()
		{
		}

		[Address(RVA = "0x7C9D60", Offset = "0x7C9D60", VA = "0x7C9D60")]
		internal bool <StopListening>b__0(ActionContext ac)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A3E0", Offset = "0x65A3E0")]
	private sealed class <>c__DisplayClass9_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Func<GameObject, IEnumerator> listener;

		[Address(RVA = "0x7C999C", Offset = "0x7C999C", VA = "0x7C999C")]
		public <>c__DisplayClass9_0()
		{
		}

		[Address(RVA = "0x7C9D98", Offset = "0x7C9D98", VA = "0x7C9D98")]
		internal bool <StopListening>b__0(ActionWithPayloadContext ac)
		{
			return default(bool);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static EventManager eventManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, List<ActionContext>> eventDictionary;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, List<ActionWithPayloadContext>> payloadedEventDictionary;

	public static EventManager instance
	{
		[Address(RVA = "0x7C97F8", Offset = "0x7C97F8", VA = "0x7C97F8")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x7C98FC", Offset = "0x7C98FC", VA = "0x7C98FC")]
	private void Init()
	{
	}

	[Address(RVA = "0x7C1A98", Offset = "0x7C1A98", VA = "0x7C1A98")]
	public static void StartListening(string eventName, Func<IEnumerator> listener, bool runInContext = false)
	{
	}

	[Address(RVA = "0x7C1948", Offset = "0x7C1948", VA = "0x7C1948")]
	public static void StartListening(string eventName, Func<GameObject, IEnumerator> listener, bool runInContext = false)
	{
	}

	[Address(RVA = "0x7C1E68", Offset = "0x7C1E68", VA = "0x7C1E68")]
	public static void StopListening(string eventName, Func<IEnumerator> listener)
	{
	}

	[Address(RVA = "0x7C1CF4", Offset = "0x7C1CF4", VA = "0x7C1CF4")]
	public static void StopListening(string eventName, Func<GameObject, IEnumerator> listener)
	{
	}

	[Address(RVA = "0x7C7A14", Offset = "0x7C7A14", VA = "0x7C7A14")]
	public static void TriggerEvent(string eventName)
	{
	}

	[Address(RVA = "0x7C99A4", Offset = "0x7C99A4", VA = "0x7C99A4")]
	public static void StopEvent(Func<IEnumerator> action)
	{
	}

	[Address(RVA = "0x7C9A28", Offset = "0x7C9A28", VA = "0x7C9A28")]
	public static void HealthCheck()
	{
	}

	[Address(RVA = "0x7BF5B4", Offset = "0x7BF5B4", VA = "0x7BF5B4")]
	public static void TriggerEvent(string eventName, GameObject payload)
	{
	}

	[Address(RVA = "0x7C9D58", Offset = "0x7C9D58", VA = "0x7C9D58")]
	public EventManager()
	{
	}
}
public class ActionContext
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Func<IEnumerator> Action;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Context;

	[Address(RVA = "0x8A6134", Offset = "0x8A6134", VA = "0x8A6134")]
	public ActionContext(Func<IEnumerator> action, bool context)
	{
	}
}
public class ActionWithPayloadContext
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Func<GameObject, IEnumerator> Action;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Context;

	[Address(RVA = "0x8A6174", Offset = "0x8A6174", VA = "0x8A6174")]
	public ActionWithPayloadContext(Func<GameObject, IEnumerator> action, bool context)
	{
	}
}
public class FadeShaderHelper : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material[] mats;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float alpha;

	[Address(RVA = "0x7D4690", Offset = "0x7D4690", VA = "0x7D4690")]
	private void Start()
	{
	}

	[Address(RVA = "0x7D4728", Offset = "0x7D4728", VA = "0x7D4728")]
	private void Update()
	{
	}

	[Address(RVA = "0x7D48C4", Offset = "0x7D48C4", VA = "0x7D48C4")]
	public FadeShaderHelper()
	{
	}
}
public class FadeWall : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A3F0", Offset = "0x65A3F0")]
	private sealed class <Start>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeWall <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D541C", Offset = "0x7D541C", VA = "0x7D541C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D548C", Offset = "0x7D548C", VA = "0x7D548C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D4F7C", Offset = "0x7D4F7C", VA = "0x7D4F7C")]
		[DebuggerHidden]
		public <Start>d__9(int <>1__state)
		{
		}

		[Address(RVA = "0x7D537C", Offset = "0x7D537C", VA = "0x7D537C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D5380", Offset = "0x7D5380", VA = "0x7D5380", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D5424", Offset = "0x7D5424", VA = "0x7D5424", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A400", Offset = "0x65A400")]
	private sealed class <>c__DisplayClass10_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FadeWall <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action post;

		[Address(RVA = "0x7D4FA8", Offset = "0x7D4FA8", VA = "0x7D4FA8")]
		public <>c__DisplayClass10_0()
		{
		}

		[Address(RVA = "0x7D51D8", Offset = "0x7D51D8", VA = "0x7D51D8")]
		internal void <StartFadeOut>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A410", Offset = "0x65A410")]
	private sealed class <>c__DisplayClass11_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FadeWall <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action post;

		[Address(RVA = "0x7D5048", Offset = "0x7D5048", VA = "0x7D5048")]
		public <>c__DisplayClass11_0()
		{
		}

		[Address(RVA = "0x7D5220", Offset = "0x7D5220", VA = "0x7D5220")]
		internal void <StartFadeIn>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A420", Offset = "0x65A420")]
	private sealed class <>c__DisplayClass12_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FadeWall <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action post;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action <>9__1;

		[Address(RVA = "0x7D50E8", Offset = "0x7D50E8", VA = "0x7D50E8")]
		public <>c__DisplayClass12_0()
		{
		}

		[Address(RVA = "0x7D5268", Offset = "0x7D5268", VA = "0x7D5268")]
		internal void <StartFadeOutAndIn>b__0()
		{
		}

		[Address(RVA = "0x7D5334", Offset = "0x7D5334", VA = "0x7D5334")]
		internal void <StartFadeOutAndIn>b__1()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A430", Offset = "0x65A430")]
	private sealed class <fadeOut>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeWall <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action post;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D5850", Offset = "0x7D5850", VA = "0x7D5850", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D58C0", Offset = "0x7D58C0", VA = "0x7D58C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D50F0", Offset = "0x7D50F0", VA = "0x7D50F0")]
		[DebuggerHidden]
		public <fadeOut>d__13(int <>1__state)
		{
		}

		[Address(RVA = "0x7D56BC", Offset = "0x7D56BC", VA = "0x7D56BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D56C0", Offset = "0x7D56C0", VA = "0x7D56C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D5858", Offset = "0x7D5858", VA = "0x7D5858", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A440", Offset = "0x65A440")]
	private sealed class <fadeIn>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeWall <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action post;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D5644", Offset = "0x7D5644", VA = "0x7D5644", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D56B4", Offset = "0x7D56B4", VA = "0x7D56B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D511C", Offset = "0x7D511C", VA = "0x7D511C")]
		[DebuggerHidden]
		public <fadeIn>d__14(int <>1__state)
		{
		}

		[Address(RVA = "0x7D5494", Offset = "0x7D5494", VA = "0x7D5494", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D5498", Offset = "0x7D5498", VA = "0x7D5498", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D564C", Offset = "0x7D564C", VA = "0x7D564C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FadeWall instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpriteRenderer Wall;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool ShouldFadeInOnStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool isFading;

	public static FadeWall Instance
	{
		[Address(RVA = "0x7D48D4", Offset = "0x7D48D4", VA = "0x7D48D4")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x7D49EC", Offset = "0x7D49EC", VA = "0x7D49EC")]
	public static void FadeOut([Optional] Action post)
	{
	}

	[Address(RVA = "0x7D4BA0", Offset = "0x7D4BA0", VA = "0x7D4BA0")]
	public static void FadeIn([Optional] Action post)
	{
	}

	[Address(RVA = "0x7D4D54", Offset = "0x7D4D54", VA = "0x7D4D54")]
	public static void FadeOutAndIn([Optional] Action post)
	{
	}

	[Address(RVA = "0x7D4F08", Offset = "0x7D4F08", VA = "0x7D4F08")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6768AC", Offset = "0x6768AC")]
	public IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x7D4A90", Offset = "0x7D4A90", VA = "0x7D4A90")]
	private void StartFadeOut([Optional] Action post)
	{
	}

	[Address(RVA = "0x7D4C44", Offset = "0x7D4C44", VA = "0x7D4C44")]
	private void StartFadeIn([Optional] Action post)
	{
	}

	[Address(RVA = "0x7D4DF8", Offset = "0x7D4DF8", VA = "0x7D4DF8")]
	public void StartFadeOutAndIn([Optional] Action post)
	{
	}

	[Address(RVA = "0x7D4FB0", Offset = "0x7D4FB0", VA = "0x7D4FB0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676910", Offset = "0x676910")]
	private IEnumerator fadeOut([Optional] Action post)
	{
		return null;
	}

	[Address(RVA = "0x7D5050", Offset = "0x7D5050", VA = "0x7D5050")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676974", Offset = "0x676974")]
	private IEnumerator fadeIn([Optional] Action post)
	{
		return null;
	}

	[Address(RVA = "0x7D5148", Offset = "0x7D5148", VA = "0x7D5148")]
	private void setWallAlpha(float alpha)
	{
	}

	[Address(RVA = "0x7D51C8", Offset = "0x7D51C8", VA = "0x7D51C8")]
	public FadeWall()
	{
	}
}
public class FallingBamboo : Cutable
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float triggerHitAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int damage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool damageSent;

	[Address(RVA = "0x7D5B0C", Offset = "0x7D5B0C", VA = "0x7D5B0C")]
	private void Update()
	{
	}

	[Address(RVA = "0x7D5C3C", Offset = "0x7D5C3C", VA = "0x7D5C3C")]
	public FallingBamboo()
	{
	}
}
public class FlairAudio : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A450", Offset = "0x65A450")]
	private sealed class <onSpecialReady>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlairAudio <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F6690", Offset = "0x6F6690", VA = "0x6F6690", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F6700", Offset = "0x6F6700", VA = "0x6F6700", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F6564", Offset = "0x6F6564", VA = "0x6F6564")]
		[DebuggerHidden]
		public <onSpecialReady>d__31(int <>1__state)
		{
		}

		[Address(RVA = "0x6F6590", Offset = "0x6F6590", VA = "0x6F6590", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F6594", Offset = "0x6F6594", VA = "0x6F6594", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F6698", Offset = "0x6F6698", VA = "0x6F6698", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A460", Offset = "0x65A460")]
	private sealed class <onSecretUnlocked>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlairAudio <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F64EC", Offset = "0x6F64EC", VA = "0x6F64EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F655C", Offset = "0x6F655C", VA = "0x6F655C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F6388", Offset = "0x6F6388", VA = "0x6F6388")]
		[DebuggerHidden]
		public <onSecretUnlocked>d__32(int <>1__state)
		{
		}

		[Address(RVA = "0x6F63B4", Offset = "0x6F63B4", VA = "0x6F63B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F63B8", Offset = "0x6F63B8", VA = "0x6F63B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F64F4", Offset = "0x6F64F4", VA = "0x6F64F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A470", Offset = "0x65A470")]
	private sealed class <onKill>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FlairAudio <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <myCount>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F6310", Offset = "0x6F6310", VA = "0x6F6310", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F6380", Offset = "0x6F6380", VA = "0x6F6380", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F5E64", Offset = "0x6F5E64", VA = "0x6F5E64")]
		[DebuggerHidden]
		public <onKill>d__33(int <>1__state)
		{
		}

		[Address(RVA = "0x6F5E90", Offset = "0x6F5E90", VA = "0x6F5E90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F5E94", Offset = "0x6F5E94", VA = "0x6F5E94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F6318", Offset = "0x6F6318", VA = "0x6F6318", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip tripleKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip megaKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip ultraKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip killingSpree;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip godLike;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip unStoppable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip untouchable;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip blockingMaster;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip theImpaler;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip[] doubleKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Sprite doubleKillSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Sprite tripleKillSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Sprite megaKillSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Sprite ultraKillSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Sprite killingSpreeSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Sprite godLikeSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Sprite unstoppableSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Sprite untouchableSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Sprite blockingMasterSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Sprite theImpalerSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Sprite secretUnlockedSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float volume;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public ParticleSystem killEffectTextSystem;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject killEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ParticleSystem.TextureSheetAnimationModule pstsam;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool specialReadyVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private int killCount;

	[Address(RVA = "0x7D6C8C", Offset = "0x7D6C8C", VA = "0x7D6C8C")]
	public void Start()
	{
	}

	[Address(RVA = "0x7D6EE8", Offset = "0x7D6EE8", VA = "0x7D6EE8")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x7D702C", Offset = "0x7D702C", VA = "0x7D702C")]
	public void EndGameFlair(int kills, int critKills, int blocks, int stabs, bool tookHits)
	{
	}

	[Address(RVA = "0x7D742C", Offset = "0x7D742C", VA = "0x7D742C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6769D8", Offset = "0x6769D8")]
	private IEnumerator onSpecialReady()
	{
		return null;
	}

	[Address(RVA = "0x7D74A0", Offset = "0x7D74A0", VA = "0x7D74A0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676A3C", Offset = "0x676A3C")]
	private IEnumerator onSecretUnlocked()
	{
		return null;
	}

	[Address(RVA = "0x7D7514", Offset = "0x7D7514", VA = "0x7D7514")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676AA0", Offset = "0x676AA0")]
	private IEnumerator onKill(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x7D75AC", Offset = "0x7D75AC", VA = "0x7D75AC")]
	public FlairAudio()
	{
	}
}
public class Float : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float height;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wiggle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 basePos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 baseEuler;

	[Address(RVA = "0x6F6708", Offset = "0x6F6708", VA = "0x6F6708")]
	private void Start()
	{
	}

	[Address(RVA = "0x6F6778", Offset = "0x6F6778", VA = "0x6F6778")]
	private void Update()
	{
	}

	[Address(RVA = "0x6F6978", Offset = "0x6F6978", VA = "0x6F6978")]
	public Float()
	{
	}
}
public class Flytext : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro Text;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Lifetime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float elapsed;

	[Address(RVA = "0x6F6980", Offset = "0x6F6980", VA = "0x6F6980")]
	private void Update()
	{
	}

	[Address(RVA = "0x6F6B54", Offset = "0x6F6B54", VA = "0x6F6B54")]
	public void SetText(string str, Color clr)
	{
	}

	[Address(RVA = "0x6F6BEC", Offset = "0x6F6BEC", VA = "0x6F6BEC")]
	public Flytext()
	{
	}
}
public class FollowFloor : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool ResetRotation;

	[Address(RVA = "0x6F6BFC", Offset = "0x6F6BFC", VA = "0x6F6BFC")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x6F7164", Offset = "0x6F7164", VA = "0x6F7164")]
	public FollowFloor()
	{
	}
}
public class FTUE_SpecialGenerator : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float PulseTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timeSinceLastPulse;

	[Address(RVA = "0x7D43F4", Offset = "0x7D43F4", VA = "0x7D43F4")]
	public void Update()
	{
	}

	[Address(RVA = "0x7D4450", Offset = "0x7D4450", VA = "0x7D4450")]
	private void grantSpecial()
	{
	}

	[Address(RVA = "0x7D44E4", Offset = "0x7D44E4", VA = "0x7D44E4")]
	public FTUE_SpecialGenerator()
	{
	}
}
public class FTUE_Trainer : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AudioClip> Clips;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource Source;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, AudioClip> ClipMap;

	[Address(RVA = "0x7D44F4", Offset = "0x7D44F4", VA = "0x7D44F4")]
	private void Start()
	{
	}

	[Address(RVA = "0x7CD414", Offset = "0x7CD414", VA = "0x7CD414")]
	public float PlayVO(string name)
	{
		return default(float);
	}

	[Address(RVA = "0x7CEF78", Offset = "0x7CEF78", VA = "0x7CEF78")]
	public void StopVO()
	{
	}

	[Address(RVA = "0x7CEC04", Offset = "0x7CEC04", VA = "0x7CEC04")]
	public void PauseVO()
	{
	}

	[Address(RVA = "0x7D3408", Offset = "0x7D3408", VA = "0x7D3408")]
	public void UnpauseVO()
	{
	}

	[Address(RVA = "0x7D4688", Offset = "0x7D4688", VA = "0x7D4688")]
	public FTUE_Trainer()
	{
	}
}
public class FTUELevel : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A480", Offset = "0x65A480")]
	private sealed class <onStartLevel>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CD66C", Offset = "0x7CD66C", VA = "0x7CD66C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CD6DC", Offset = "0x7CD6DC", VA = "0x7CD6DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CCE0C", Offset = "0x7CCE0C", VA = "0x7CCE0C")]
		[DebuggerHidden]
		public <onStartLevel>d__12(int <>1__state)
		{
		}

		[Address(RVA = "0x7CD650", Offset = "0x7CD650", VA = "0x7CD650", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CD654", Offset = "0x7CD654", VA = "0x7CD654", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CD674", Offset = "0x7CD674", VA = "0x7CD674", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A490", Offset = "0x65A490")]
	private sealed class <>c__DisplayClass17_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject dialog;

		[Address(RVA = "0x7CD100", Offset = "0x7CD100", VA = "0x7CD100")]
		public <>c__DisplayClass17_0()
		{
		}

		[Address(RVA = "0x7CD108", Offset = "0x7CD108", VA = "0x7CD108")]
		internal bool <Dialog>b__0()
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A4A0", Offset = "0x65A4A0")]
	private sealed class <Dialog>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject dialog;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CD2B4", Offset = "0x7CD2B4", VA = "0x7CD2B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CD324", Offset = "0x7CD324", VA = "0x7CD324", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CD004", Offset = "0x7CD004", VA = "0x7CD004")]
		[DebuggerHidden]
		public <Dialog>d__17(int <>1__state)
		{
		}

		[Address(RVA = "0x7CD144", Offset = "0x7CD144", VA = "0x7CD144", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CD148", Offset = "0x7CD148", VA = "0x7CD148", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CD2BC", Offset = "0x7CD2BC", VA = "0x7CD2BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A4B0", Offset = "0x65A4B0")]
	private sealed class <PlayVO>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string VO;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CD5D8", Offset = "0x7CD5D8", VA = "0x7CD5D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CD648", Offset = "0x7CD648", VA = "0x7CD648", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CD0C8", Offset = "0x7CD0C8", VA = "0x7CD0C8")]
		[DebuggerHidden]
		public <PlayVO>d__18(int <>1__state)
		{
		}

		[Address(RVA = "0x7CD32C", Offset = "0x7CD32C", VA = "0x7CD32C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CD330", Offset = "0x7CD330", VA = "0x7CD330", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CD5E0", Offset = "0x7CD5E0", VA = "0x7CD5E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool IN_FTUE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI StageRequirement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image StageRequirementFill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject StageRequirementContainer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject StageHintContainer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI StageHintTitle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI StageHintBody;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public FTUE_Trainer Trainer;

	[Address(RVA = "0x7CC9E4", Offset = "0x7CC9E4", VA = "0x7CC9E4", Slot = "4")]
	public virtual void Start()
	{
	}

	[Address(RVA = "0x7CCA78", Offset = "0x7CCA78", VA = "0x7CCA78")]
	public void Awake()
	{
	}

	[Address(RVA = "0x7CCAE4", Offset = "0x7CCAE4", VA = "0x7CCAE4", Slot = "5")]
	public virtual void OnDestroy()
	{
	}

	[Address(RVA = "0x7CCB74", Offset = "0x7CCB74", VA = "0x7CCB74")]
	protected void setFTUEDifficulty()
	{
	}

	[Address(RVA = "0x7CCDAC", Offset = "0x7CCDAC", VA = "0x7CCDAC", Slot = "6")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676B04", Offset = "0x676B04")]
	protected virtual IEnumerator onStartLevel()
	{
		return null;
	}

	public T SpawnCutable<T>(T prefab, Transform location, bool reportSpeed = false) where T : Cutable
	{
		return null;
	}

	public T SpawnNinja<T>(T prefab, Transform location, bool aggressive = false) where T : HitboxNinja
	{
		return null;
	}

	[Address(RVA = "0x7CCE38", Offset = "0x7CCE38", VA = "0x7CCE38")]
	public void AttachUI(GameObject UI, Transform target, bool autoHide)
	{
	}

	[Address(RVA = "0x7CCF2C", Offset = "0x7CCF2C", VA = "0x7CCF2C")]
	private void Update()
	{
	}

	[Address(RVA = "0x7CCF90", Offset = "0x7CCF90", VA = "0x7CCF90")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676B68", Offset = "0x676B68")]
	protected IEnumerator Dialog(GameObject dialog)
	{
		return null;
	}

	[Address(RVA = "0x7CD030", Offset = "0x7CD030", VA = "0x7CD030")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676BCC", Offset = "0x676BCC")]
	protected IEnumerator PlayVO(string VO)
	{
		return null;
	}

	[Address(RVA = "0x7CD0F4", Offset = "0x7CD0F4", VA = "0x7CD0F4")]
	public FTUELevel()
	{
	}
}
public class FTUELevel_Attack : FTUELevel
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A4C0", Offset = "0x65A4C0")]
	private sealed class <playSuccess>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D37AC", Offset = "0x7D37AC", VA = "0x7D37AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D381C", Offset = "0x7D381C", VA = "0x7D381C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CDA14", Offset = "0x7CDA14", VA = "0x7CDA14")]
		[DebuggerHidden]
		public <playSuccess>d__34(int <>1__state)
		{
		}

		[Address(RVA = "0x7D3628", Offset = "0x7D3628", VA = "0x7D3628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D362C", Offset = "0x7D362C", VA = "0x7D362C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D37B4", Offset = "0x7D37B4", VA = "0x7D37B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A4D0", Offset = "0x65A4D0")]
	private sealed class <>c__DisplayClass38_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool goodCut;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool badCut;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FTUELevel_Attack <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitboxNinja enemy2;

		[Address(RVA = "0x7CE48C", Offset = "0x7CE48C", VA = "0x7CE48C")]
		public <>c__DisplayClass38_0()
		{
		}

		[Address(RVA = "0x7CE494", Offset = "0x7CE494", VA = "0x7CE494")]
		internal void <onStartLevel>b__0(object o, EventArgs e)
		{
		}

		[Address(RVA = "0x7CE4A0", Offset = "0x7CE4A0", VA = "0x7CE4A0")]
		internal void <onStartLevel>b__1(object o, EventArgs e)
		{
		}

		[Address(RVA = "0x7CE4AC", Offset = "0x7CE4AC", VA = "0x7CE4AC")]
		internal bool <onStartLevel>b__2()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE4C0", Offset = "0x7CE4C0", VA = "0x7CE4C0")]
		internal bool <onStartLevel>b__4()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE4F4", Offset = "0x7CE4F4", VA = "0x7CE4F4")]
		internal bool <onStartLevel>b__5()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE528", Offset = "0x7CE528", VA = "0x7CE528")]
		internal bool <onStartLevel>b__6()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE55C", Offset = "0x7CE55C", VA = "0x7CE55C")]
		internal bool <onStartLevel>b__7()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE590", Offset = "0x7CE590", VA = "0x7CE590")]
		internal bool <onStartLevel>b__8()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE5C4", Offset = "0x7CE5C4", VA = "0x7CE5C4")]
		internal bool <onStartLevel>b__9()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE5F8", Offset = "0x7CE5F8", VA = "0x7CE5F8")]
		internal bool <onStartLevel>b__10()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CE660", Offset = "0x7CE660", VA = "0x7CE660")]
		internal bool <onStartLevel>b__11()
		{
			return default(bool);
		}
	}

	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A4E0", Offset = "0x65A4E0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Predicate<Dummy> <>9__38_3;

		[Address(RVA = "0x7CE418", Offset = "0x7CE418", VA = "0x7CE418")]
		public <>c()
		{
		}

		[Address(RVA = "0x7CE420", Offset = "0x7CE420", VA = "0x7CE420")]
		internal bool <onStartLevel>b__38_3(Dummy d)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A4F0", Offset = "0x65A4F0")]
	private sealed class <onStartLevel>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass38_0 <>8__1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <reqMessage>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <badAction>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Dummy> <Dummies>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <numCut>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D3338", Offset = "0x7D3338", VA = "0x7D3338", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D33A8", Offset = "0x7D33A8", VA = "0x7D33A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CDC88", Offset = "0x7CDC88", VA = "0x7CDC88")]
		[DebuggerHidden]
		public <onStartLevel>d__38(int <>1__state)
		{
		}

		[Address(RVA = "0x7CF594", Offset = "0x7CF594", VA = "0x7CF594", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CF598", Offset = "0x7CF598", VA = "0x7CF598", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D3340", Offset = "0x7D3340", VA = "0x7D3340", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A500", Offset = "0x65A500")]
	private sealed class <onPlayerHit>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CF1EC", Offset = "0x7CF1EC", VA = "0x7CF1EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CF25C", Offset = "0x7CF25C", VA = "0x7CF25C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CDD28", Offset = "0x7CDD28", VA = "0x7CDD28")]
		[DebuggerHidden]
		public <onPlayerHit>d__39(int <>1__state)
		{
		}

		[Address(RVA = "0x7CF020", Offset = "0x7CF020", VA = "0x7CF020", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CF024", Offset = "0x7CF024", VA = "0x7CF024", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CF1F4", Offset = "0x7CF1F4", VA = "0x7CF1F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A510", Offset = "0x65A510")]
	private sealed class <onPlayerBlock>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CED64", Offset = "0x7CED64", VA = "0x7CED64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CEDD4", Offset = "0x7CEDD4", VA = "0x7CEDD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CDDC8", Offset = "0x7CDDC8", VA = "0x7CDDC8")]
		[DebuggerHidden]
		public <onPlayerBlock>d__40(int <>1__state)
		{
		}

		[Address(RVA = "0x7CECAC", Offset = "0x7CECAC", VA = "0x7CECAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CECB0", Offset = "0x7CECB0", VA = "0x7CECB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CED6C", Offset = "0x7CED6C", VA = "0x7CED6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A520", Offset = "0x65A520")]
	private sealed class <onPlayerProjectileBlock>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CF38C", Offset = "0x7CF38C", VA = "0x7CF38C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CF3FC", Offset = "0x7CF3FC", VA = "0x7CF3FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CDE68", Offset = "0x7CDE68", VA = "0x7CDE68")]
		[DebuggerHidden]
		public <onPlayerProjectileBlock>d__41(int <>1__state)
		{
		}

		[Address(RVA = "0x7CF264", Offset = "0x7CF264", VA = "0x7CF264", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CF268", Offset = "0x7CF268", VA = "0x7CF268", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CF394", Offset = "0x7CF394", VA = "0x7CF394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A530", Offset = "0x65A530")]
	private sealed class <onPlayerProjectileDeflect>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CF45C", Offset = "0x7CF45C", VA = "0x7CF45C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CF4CC", Offset = "0x7CF4CC", VA = "0x7CF4CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CDF08", Offset = "0x7CDF08", VA = "0x7CDF08")]
		[DebuggerHidden]
		public <onPlayerProjectileDeflect>d__42(int <>1__state)
		{
		}

		[Address(RVA = "0x7CF404", Offset = "0x7CF404", VA = "0x7CF404", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CF408", Offset = "0x7CF408", VA = "0x7CF408", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CF464", Offset = "0x7CF464", VA = "0x7CF464", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A540", Offset = "0x65A540")]
	private sealed class <onUncutable>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D35B0", Offset = "0x7D35B0", VA = "0x7D35B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D3620", Offset = "0x7D3620", VA = "0x7D3620", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CDFA8", Offset = "0x7CDFA8", VA = "0x7CDFA8")]
		[DebuggerHidden]
		public <onUncutable>d__44(int <>1__state)
		{
		}

		[Address(RVA = "0x7D34B0", Offset = "0x7D34B0", VA = "0x7D34B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D34B4", Offset = "0x7D34B4", VA = "0x7D34B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D35B8", Offset = "0x7D35B8", VA = "0x7D35B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A550", Offset = "0x65A550")]
	private sealed class <onSkip>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CF51C", Offset = "0x7CF51C", VA = "0x7CF51C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CF58C", Offset = "0x7CF58C", VA = "0x7CF58C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CE048", Offset = "0x7CE048", VA = "0x7CE048")]
		[DebuggerHidden]
		public <onSkip>d__45(int <>1__state)
		{
		}

		[Address(RVA = "0x7CF4D4", Offset = "0x7CF4D4", VA = "0x7CF4D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CF4D8", Offset = "0x7CF4D8", VA = "0x7CF4D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CF524", Offset = "0x7CF524", VA = "0x7CF524", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A560", Offset = "0x65A560")]
	private sealed class <MoveMats>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Dummy> Dummies;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CEB34", Offset = "0x7CEB34", VA = "0x7CEB34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CEBA4", Offset = "0x7CEBA4", VA = "0x7CEBA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CE140", Offset = "0x7CE140", VA = "0x7CE140")]
		[DebuggerHidden]
		public <MoveMats>d__47(int <>1__state)
		{
		}

		[Address(RVA = "0x7CE6C8", Offset = "0x7CE6C8", VA = "0x7CE6C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CE6CC", Offset = "0x7CE6CC", VA = "0x7CE6CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CEB3C", Offset = "0x7CEB3C", VA = "0x7CEB3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A570", Offset = "0x65A570")]
	private sealed class <onPlayerDead>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CEFA8", Offset = "0x7CEFA8", VA = "0x7CEFA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CF018", Offset = "0x7CF018", VA = "0x7CF018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CE1E0", Offset = "0x7CE1E0", VA = "0x7CE1E0")]
		[DebuggerHidden]
		public <onPlayerDead>d__48(int <>1__state)
		{
		}

		[Address(RVA = "0x7CEDDC", Offset = "0x7CEDDC", VA = "0x7CEDDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CEDE0", Offset = "0x7CEDE0", VA = "0x7CEDE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CEFB0", Offset = "0x7CEFB0", VA = "0x7CEFB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A580", Offset = "0x65A580")]
	private sealed class <onPause>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7CEC34", Offset = "0x7CEC34", VA = "0x7CEC34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7CECA4", Offset = "0x7CECA4", VA = "0x7CECA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CE280", Offset = "0x7CE280", VA = "0x7CE280")]
		[DebuggerHidden]
		public <onPause>d__49(int <>1__state)
		{
		}

		[Address(RVA = "0x7CEBAC", Offset = "0x7CEBAC", VA = "0x7CEBAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7CEBB0", Offset = "0x7CEBB0", VA = "0x7CEBB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7CEC3C", Offset = "0x7CEC3C", VA = "0x7CEC3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A590", Offset = "0x65A590")]
	private sealed class <onUnPause>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_Attack <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D3438", Offset = "0x7D3438", VA = "0x7D3438", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D34A8", Offset = "0x7D34A8", VA = "0x7D34A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7CE320", Offset = "0x7CE320", VA = "0x7CE320")]
		[DebuggerHidden]
		public <onUnPause>d__50(int <>1__state)
		{
		}

		[Address(RVA = "0x7D33B0", Offset = "0x7D33B0", VA = "0x7D33B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D33B4", Offset = "0x7D33B4", VA = "0x7D33B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D3440", Offset = "0x7D3440", VA = "0x7D3440", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject Dialog_Complete;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject Dialog_Failed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject Dialog_Skip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject Hint_FastCut;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject Hint_CritCut;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform InFrontOfPlayerPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform[] SummaryPositionsStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform[] SummaryPositionsEnd;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public CutDummy CutPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public CritDummy CritPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject Hint_Block;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject Hint_ProjectileBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject Hint_ProjectileDeflect;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform SingleEnemyPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Transform[] EnemyStartPositions;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public HitboxNinja BlockingNinja1;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public HitboxNinja BlockingNinja2;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public HitboxNinja BlockAttackNinja;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public HitboxNinja ProjectileNinja1;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public HitboxNinja ProjectileNinja2;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public HitboxNinja[] SummaryNinjas;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public AudioSource Source;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public AudioClip SuccessSound;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private HitboxNinja enemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int stage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private int stage0Blocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private int stage1Blocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private int stage3Blocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private int stage4Deflects;

	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private int stage5Hits;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool ftueSkipped;

	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private float requirementWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private bool hintTriggered;

	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float lastUncutable;

	[Address(RVA = "0x7CD6E4", Offset = "0x7CD6E4", VA = "0x7CD6E4", Slot = "4")]
	public override void Start()
	{
	}

	[Address(RVA = "0x7CD73C", Offset = "0x7CD73C", VA = "0x7CD73C", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Address(RVA = "0x7CD9A0", Offset = "0x7CD9A0", VA = "0x7CD9A0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676C30", Offset = "0x676C30")]
	private IEnumerator playSuccess()
	{
		return null;
	}

	[Address(RVA = "0x7CDA40", Offset = "0x7CDA40", VA = "0x7CDA40")]
	private void updateRequirement(int progress, int total)
	{
	}

	[Address(RVA = "0x7CDB54", Offset = "0x7CDB54", VA = "0x7CDB54")]
	private void updateHint(string title, string body)
	{
	}

	[Address(RVA = "0x7CDC14", Offset = "0x7CDC14", VA = "0x7CDC14", Slot = "6")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676C94", Offset = "0x676C94")]
	protected override IEnumerator onStartLevel()
	{
		return null;
	}

	[Address(RVA = "0x7CDCB4", Offset = "0x7CDCB4", VA = "0x7CDCB4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676CF8", Offset = "0x676CF8")]
	private IEnumerator onPlayerHit(GameObject source)
	{
		return null;
	}

	[Address(RVA = "0x7CDD54", Offset = "0x7CDD54", VA = "0x7CDD54")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676D5C", Offset = "0x676D5C")]
	private IEnumerator onPlayerBlock()
	{
		return null;
	}

	[Address(RVA = "0x7CDDF4", Offset = "0x7CDDF4", VA = "0x7CDDF4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676DC0", Offset = "0x676DC0")]
	private IEnumerator onPlayerProjectileBlock()
	{
		return null;
	}

	[Address(RVA = "0x7CDE94", Offset = "0x7CDE94", VA = "0x7CDE94")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676E24", Offset = "0x676E24")]
	private IEnumerator onPlayerProjectileDeflect()
	{
		return null;
	}

	[Address(RVA = "0x7CDF34", Offset = "0x7CDF34", VA = "0x7CDF34")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676E88", Offset = "0x676E88")]
	private IEnumerator onUncutable()
	{
		return null;
	}

	[Address(RVA = "0x7CDFD4", Offset = "0x7CDFD4", VA = "0x7CDFD4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676EEC", Offset = "0x676EEC")]
	private IEnumerator onSkip()
	{
		return null;
	}

	[Address(RVA = "0x7CE074", Offset = "0x7CE074", VA = "0x7CE074")]
	private void HideHints()
	{
	}

	[Address(RVA = "0x7CE0A8", Offset = "0x7CE0A8", VA = "0x7CE0A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676F50", Offset = "0x676F50")]
	private IEnumerator MoveMats(List<Dummy> Dummies)
	{
		return null;
	}

	[Address(RVA = "0x7CE16C", Offset = "0x7CE16C", VA = "0x7CE16C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x676FB4", Offset = "0x676FB4")]
	private IEnumerator onPlayerDead()
	{
		return null;
	}

	[Address(RVA = "0x7CE20C", Offset = "0x7CE20C", VA = "0x7CE20C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677018", Offset = "0x677018")]
	private IEnumerator onPause()
	{
		return null;
	}

	[Address(RVA = "0x7CE2AC", Offset = "0x7CE2AC", VA = "0x7CE2AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67707C", Offset = "0x67707C")]
	private IEnumerator onUnPause()
	{
		return null;
	}

	[Address(RVA = "0x7CE34C", Offset = "0x7CE34C", VA = "0x7CE34C")]
	public FTUELevel_Attack()
	{
	}
}
public class FTUELevel_WeaponSandbox : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A5A0", Offset = "0x65A5A0")]
	private sealed class <onStartLevel>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FTUELevel_WeaponSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7D437C", Offset = "0x7D437C", VA = "0x7D437C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7D43EC", Offset = "0x7D43EC", VA = "0x7D43EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7D3BE0", Offset = "0x7D3BE0", VA = "0x7D3BE0")]
		[DebuggerHidden]
		public <onStartLevel>d__8(int <>1__state)
		{
		}

		[Address(RVA = "0x7D4124", Offset = "0x7D4124", VA = "0x7D4124", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7D4128", Offset = "0x7D4128", VA = "0x7D4128", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7D4384", Offset = "0x7D4384", VA = "0x7D4384", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> ButtonSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float spawnZ;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> WeaponElements;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<GameObject> SpecialElements;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject SpecialGenerator;

	[Address(RVA = "0x7D3824", Offset = "0x7D3824", VA = "0x7D3824")]
	public void Start()
	{
	}

	[Address(RVA = "0x7D38AC", Offset = "0x7D38AC", VA = "0x7D38AC")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7D3AE8", Offset = "0x7D3AE8", VA = "0x7D3AE8")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x7D3B6C", Offset = "0x7D3B6C", VA = "0x7D3B6C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6770E0", Offset = "0x6770E0")]
	protected IEnumerator onStartLevel()
	{
		return null;
	}

	[Address(RVA = "0x7D3C0C", Offset = "0x7D3C0C", VA = "0x7D3C0C")]
	private void Update()
	{
	}

	[Address(RVA = "0x7D4114", Offset = "0x7D4114", VA = "0x7D4114")]
	public FTUELevel_WeaponSandbox()
	{
	}
}
public class Game : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A5B0", Offset = "0x65A5B0")]
	private sealed class <>c__DisplayClass17_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject ignore;

		[Address(RVA = "0x6F8060", Offset = "0x6F8060", VA = "0x6F8060")]
		public <>c__DisplayClass17_0()
		{
		}

		[Address(RVA = "0x6F92E0", Offset = "0x6F92E0", VA = "0x6F92E0")]
		internal bool <EnemyPositions>b__0(GameObject g)
		{
			return default(bool);
		}
	}

	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A5C0", Offset = "0x65A5C0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<GameObject, Vector3> <>9__17_1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<GameObject, bool> <>9__18_0;

		[Address(RVA = "0x6F91D8", Offset = "0x6F91D8", VA = "0x6F91D8")]
		public <>c()
		{
		}

		[Address(RVA = "0x6F91E0", Offset = "0x6F91E0", VA = "0x6F91E0")]
		internal Vector3 <EnemyPositions>b__17_1(GameObject g)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x6F9228", Offset = "0x6F9228", VA = "0x6F9228")]
		internal bool <EnemyAttackCount>b__18_0(GameObject s)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A5D0", Offset = "0x65A5D0")]
	private sealed class <startLevel>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6FA178", Offset = "0x6FA178", VA = "0x6FA178", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6FA1E8", Offset = "0x6FA1E8", VA = "0x6FA1E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F8B28", Offset = "0x6F8B28", VA = "0x6F8B28")]
		[DebuggerHidden]
		public <startLevel>d__50(int <>1__state)
		{
		}

		[Address(RVA = "0x6FA0E0", Offset = "0x6FA0E0", VA = "0x6FA0E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6FA0E4", Offset = "0x6FA0E4", VA = "0x6FA0E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6FA180", Offset = "0x6FA180", VA = "0x6FA180", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A5E0", Offset = "0x65A5E0")]
	private sealed class <clearEnemies>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Game <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F9614", Offset = "0x6F9614", VA = "0x6F9614", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F9684", Offset = "0x6F9684", VA = "0x6F9684", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F8BC8", Offset = "0x6F8BC8", VA = "0x6F8BC8")]
		[DebuggerHidden]
		public <clearEnemies>d__51(int <>1__state)
		{
		}

		[Address(RVA = "0x6F939C", Offset = "0x6F939C", VA = "0x6F939C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F93A0", Offset = "0x6F93A0", VA = "0x6F93A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F961C", Offset = "0x6F961C", VA = "0x6F961C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A5F0", Offset = "0x65A5F0")]
	private sealed class <onEnemySpawn>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Game <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enemy;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F982C", Offset = "0x6F982C", VA = "0x6F982C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F989C", Offset = "0x6F989C", VA = "0x6F989C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F8D90", Offset = "0x6F8D90", VA = "0x6F8D90")]
		[DebuggerHidden]
		public <onEnemySpawn>d__53(int <>1__state)
		{
		}

		[Address(RVA = "0x6F9798", Offset = "0x6F9798", VA = "0x6F9798", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F979C", Offset = "0x6F979C", VA = "0x6F979C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F9834", Offset = "0x6F9834", VA = "0x6F9834", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A600", Offset = "0x65A600")]
	private sealed class <onEnemyDestroyed>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Game <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enemy;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F9720", Offset = "0x6F9720", VA = "0x6F9720", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F9790", Offset = "0x6F9790", VA = "0x6F9790", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F8E54", Offset = "0x6F8E54", VA = "0x6F8E54")]
		[DebuggerHidden]
		public <onEnemyDestroyed>d__54(int <>1__state)
		{
		}

		[Address(RVA = "0x6F968C", Offset = "0x6F968C", VA = "0x6F968C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F9690", Offset = "0x6F9690", VA = "0x6F9690", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F9728", Offset = "0x6F9728", VA = "0x6F9728", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A610", Offset = "0x65A610")]
	private sealed class <onFTUEStart>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Game <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F994C", Offset = "0x6F994C", VA = "0x6F994C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F99BC", Offset = "0x6F99BC", VA = "0x6F99BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F8EF4", Offset = "0x6F8EF4", VA = "0x6F8EF4")]
		[DebuggerHidden]
		public <onFTUEStart>d__55(int <>1__state)
		{
		}

		[Address(RVA = "0x6F98A4", Offset = "0x6F98A4", VA = "0x6F98A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F98A8", Offset = "0x6F98A8", VA = "0x6F98A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F9954", Offset = "0x6F9954", VA = "0x6F9954", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A620", Offset = "0x65A620")]
	private sealed class <onSpawnStart>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Game <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6FA068", Offset = "0x6FA068", VA = "0x6FA068", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6FA0D8", Offset = "0x6FA0D8", VA = "0x6FA0D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F8F94", Offset = "0x6F8F94", VA = "0x6F8F94")]
		[DebuggerHidden]
		public <onSpawnStart>d__56(int <>1__state)
		{
		}

		[Address(RVA = "0x6F9FC0", Offset = "0x6F9FC0", VA = "0x6F9FC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F9FC4", Offset = "0x6F9FC4", VA = "0x6F9FC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6FA070", Offset = "0x6FA070", VA = "0x6FA070", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A630", Offset = "0x65A630")]
	private sealed class <onGameFail>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Game <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F9F48", Offset = "0x6F9F48", VA = "0x6F9F48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F9FB8", Offset = "0x6F9FB8", VA = "0x6F9FB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F9034", Offset = "0x6F9034", VA = "0x6F9034")]
		[DebuggerHidden]
		public <onGameFail>d__57(int <>1__state)
		{
		}

		[Address(RVA = "0x6F9BFC", Offset = "0x6F9BFC", VA = "0x6F9BFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F9C00", Offset = "0x6F9C00", VA = "0x6F9C00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F9F50", Offset = "0x6F9F50", VA = "0x6F9F50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A640", Offset = "0x65A640")]
	private sealed class <onGameEnd>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Game <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x6F9B84", Offset = "0x6F9B84", VA = "0x6F9B84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x6F9BF4", Offset = "0x6F9BF4", VA = "0x6F9BF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x6F90D4", Offset = "0x6F90D4", VA = "0x6F90D4")]
		[DebuggerHidden]
		public <onGameEnd>d__58(int <>1__state)
		{
		}

		[Address(RVA = "0x6F99C4", Offset = "0x6F99C4", VA = "0x6F99C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x6F99C8", Offset = "0x6F99C8", VA = "0x6F99C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x6F9B8C", Offset = "0x6F9B8C", VA = "0x6F9B8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int Mode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int ChallengeTimer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int ChallengeOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static GameConfig config;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Challenge challenge;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Game game;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MenuManager Menu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Player Player;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsCutscene;

	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool IsInbetween;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static bool IsSandbox;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Difficulty difficulty;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Level level;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool active;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<GameObject> spawned;

	public static Game instance
	{
		[Address(RVA = "0x6F7554", Offset = "0x6F7554", VA = "0x6F7554")]
		get
		{
			return null;
		}
	}

	public static bool Active
	{
		[Address(RVA = "0x6F76F0", Offset = "0x6F76F0", VA = "0x6F76F0")]
		get
		{
			return default(bool);
		}
	}

	public static LevelConfig[] Levels
	{
		[Address(RVA = "0x6F7860", Offset = "0x6F7860", VA = "0x6F7860")]
		get
		{
			return null;
		}
	}

	public static Level Level
	{
		[Address(RVA = "0x6F79BC", Offset = "0x6F79BC", VA = "0x6F79BC")]
		get
		{
			return null;
		}
		[Address(RVA = "0x6F7A2C", Offset = "0x6F7A2C", VA = "0x6F7A2C")]
		set
		{
		}
	}

	public static LevelConfig CurrentLevel
	{
		[Address(RVA = "0x6F7AA0", Offset = "0x6F7AA0", VA = "0x6F7AA0")]
		get
		{
			return null;
		}
	}

	public static Difficulty[] Difficulties
	{
		[Address(RVA = "0x6F7BB4", Offset = "0x6F7BB4", VA = "0x6F7BB4")]
		get
		{
			return null;
		}
	}

	public static Difficulty Difficulty
	{
		[Address(RVA = "0x6F7C24", Offset = "0x6F7C24", VA = "0x6F7C24")]
		get
		{
			return null;
		}
		[Address(RVA = "0x6F7E38", Offset = "0x6F7E38", VA = "0x6F7E38")]
		set
		{
		}
	}

	public static GameConfig Config
	{
		[Address(RVA = "0x6F7954", Offset = "0x6F7954", VA = "0x6F7954")]
		get
		{
			return null;
		}
		[Address(RVA = "0x6F8184", Offset = "0x6F8184", VA = "0x6F8184")]
		set
		{
		}
	}

	public static Challenge Challenge
	{
		[Address(RVA = "0x6F82E0", Offset = "0x6F82E0", VA = "0x6F82E0")]
		get
		{
			return null;
		}
		[Address(RVA = "0x6F8348", Offset = "0x6F8348", VA = "0x6F8348")]
		set
		{
		}
	}

	public static bool IsFTUE
	{
		[Address(RVA = "0x6F77CC", Offset = "0x6F77CC", VA = "0x6F77CC")]
		get
		{
			return default(bool);
		}
	}

	public static bool IsFirstTimePlaying
	{
		[Address(RVA = "0x6F83B4", Offset = "0x6F83B4", VA = "0x6F83B4")]
		get
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x6F7EAC", Offset = "0x6F7EAC", VA = "0x6F7EAC")]
	public static List<Vector3> EnemyPositions(GameObject ignore)
	{
		return null;
	}

	[Address(RVA = "0x6F8068", Offset = "0x6F8068", VA = "0x6F8068")]
	public static int EnemyAttackCount()
	{
		return default(int);
	}

	[Address(RVA = "0x6F81F0", Offset = "0x6F81F0", VA = "0x6F81F0")]
	public static int GetChallengeTime()
	{
		return default(int);
	}

	[Address(RVA = "0x6F842C", Offset = "0x6F842C", VA = "0x6F842C")]
	public void Start()
	{
	}

	[Address(RVA = "0x6F8618", Offset = "0x6F8618", VA = "0x6F8618")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x6F87EC", Offset = "0x6F87EC", VA = "0x6F87EC")]
	public void NextLevel()
	{
	}

	[Address(RVA = "0x6F89C8", Offset = "0x6F89C8", VA = "0x6F89C8")]
	public static void LoadScene(string scene, [Optional] Func<IEnumerator> post, bool startLevel = false)
	{
	}

	[Address(RVA = "0x6F8A44", Offset = "0x6F8A44", VA = "0x6F8A44")]
	public static void LoadScene(int scene, [Optional] Func<IEnumerator> post, bool startLevel = false)
	{
	}

	[Address(RVA = "0x6F8AC0", Offset = "0x6F8AC0", VA = "0x6F8AC0")]
	public static void PostAudioEvent(string audioEvent)
	{
	}

	[Address(RVA = "0x6F8AC8", Offset = "0x6F8AC8", VA = "0x6F8AC8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677144", Offset = "0x677144")]
	private IEnumerator startLevel()
	{
		return null;
	}

	[Address(RVA = "0x6F8B54", Offset = "0x6F8B54", VA = "0x6F8B54")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6771A8", Offset = "0x6771A8")]
	private IEnumerator clearEnemies()
	{
		return null;
	}

	[Address(RVA = "0x6F8BF4", Offset = "0x6F8BF4", VA = "0x6F8BF4")]
	private void clearProjectiles()
	{
	}

	[Address(RVA = "0x6F8CF8", Offset = "0x6F8CF8", VA = "0x6F8CF8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67720C", Offset = "0x67720C")]
	private IEnumerator onEnemySpawn(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x6F8DBC", Offset = "0x6F8DBC", VA = "0x6F8DBC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677270", Offset = "0x677270")]
	private IEnumerator onEnemyDestroyed(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x6F8E80", Offset = "0x6F8E80", VA = "0x6F8E80")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6772D4", Offset = "0x6772D4")]
	public IEnumerator onFTUEStart()
	{
		return null;
	}

	[Address(RVA = "0x6F8F20", Offset = "0x6F8F20", VA = "0x6F8F20")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677338", Offset = "0x677338")]
	private IEnumerator onSpawnStart()
	{
		return null;
	}

	[Address(RVA = "0x6F8FC0", Offset = "0x6F8FC0", VA = "0x6F8FC0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67739C", Offset = "0x67739C")]
	private IEnumerator onGameFail()
	{
		return null;
	}

	[Address(RVA = "0x6F9060", Offset = "0x6F9060", VA = "0x6F9060")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677400", Offset = "0x677400")]
	private IEnumerator onGameEnd()
	{
		return null;
	}

	[Address(RVA = "0x6F9100", Offset = "0x6F9100", VA = "0x6F9100")]
	public Game()
	{
	}
}
public class GestureManager : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VRTK_ControllerEvents leftControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRTK_ControllerEvents rightControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SlashingWeapon leftSword;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SlashingWeapon rightSword;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float GestureBufferAngle;

	[Address(RVA = "0x6FD1D0", Offset = "0x6FD1D0", VA = "0x6FD1D0")]
	private void Update()
	{
	}

	[Address(RVA = "0x6FD2D8", Offset = "0x6FD2D8", VA = "0x6FD2D8")]
	private bool AreSwordsInCorrectOrientation()
	{
		return default(bool);
	}

	[Address(RVA = "0x6FD530", Offset = "0x6FD530", VA = "0x6FD530")]
	private float SwordAngleFrom(Quaternion swordRotation, Vector3 targetVector)
	{
		return default(float);
	}

	[Address(RVA = "0x6FD65C", Offset = "0x6FD65C", VA = "0x6FD65C")]
	private void TriggerCheck(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x6FD28C", Offset = "0x6FD28C", VA = "0x6FD28C")]
	private void Ability()
	{
	}

	[Address(RVA = "0x6FD6B4", Offset = "0x6FD6B4", VA = "0x6FD6B4")]
	public GestureManager()
	{
	}
}
public class HealthDoober : Doober
{
	[Address(RVA = "0x70443C", Offset = "0x70443C", VA = "0x70443C")]
	public HealthDoober()
	{
	}
}
public class AsyncRunner : MonoBehaviour
{
	[Address(RVA = "0x8A7580", Offset = "0x8A7580", VA = "0x8A7580")]
	public static AsyncRunner GetRunner(string name)
	{
		return null;
	}

	[Address(RVA = "0x8A75FC", Offset = "0x8A75FC", VA = "0x8A75FC")]
	public Coroutine Run(IEnumerator action)
	{
		return null;
	}

	[Address(RVA = "0x8A7604", Offset = "0x8A7604", VA = "0x8A7604")]
	public AsyncRunner()
	{
	}
}
public class HideObject : MonoBehaviour
{
	[Address(RVA = "0x704444", Offset = "0x704444", VA = "0x704444")]
	private void Start()
	{
	}

	[Address(RVA = "0x70447C", Offset = "0x70447C", VA = "0x70447C")]
	public HideObject()
	{
	}
}
public class HideWhenNotDemo : MonoBehaviour
{
	[Address(RVA = "0x704AA8", Offset = "0x704AA8", VA = "0x704AA8")]
	public void Start()
	{
	}

	[Address(RVA = "0x704AE0", Offset = "0x704AE0", VA = "0x704AE0")]
	public HideWhenNotDemo()
	{
	}
}
public class InbetweenLevels : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A650", Offset = "0x65A650")]
	private sealed class <fadeIn>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InbetweenLevels <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <startTime>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x708EA8", Offset = "0x708EA8", VA = "0x708EA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x708F18", Offset = "0x708F18", VA = "0x708F18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x708B54", Offset = "0x708B54", VA = "0x708B54")]
		[DebuggerHidden]
		public <fadeIn>d__18(int <>1__state)
		{
		}

		[Address(RVA = "0x708D2C", Offset = "0x708D2C", VA = "0x708D2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x708D30", Offset = "0x708D30", VA = "0x708D30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x708EB0", Offset = "0x708EB0", VA = "0x708EB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A660", Offset = "0x65A660")]
	private sealed class <fadeOut>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InbetweenLevels <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <startTime>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7090C4", Offset = "0x7090C4", VA = "0x7090C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x709134", Offset = "0x709134", VA = "0x709134", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x708BF4", Offset = "0x708BF4", VA = "0x708BF4")]
		[DebuggerHidden]
		public <fadeOut>d__19(int <>1__state)
		{
		}

		[Address(RVA = "0x708F20", Offset = "0x708F20", VA = "0x708F20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x708F24", Offset = "0x708F24", VA = "0x708F24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7090CC", Offset = "0x7090CC", VA = "0x7090CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool IsGameOver;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CanvasGroup Container;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image LevelImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro TitleText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshPro SubtitleText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro DescriptionText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VRTK_ControllerEvents leftControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public VRTK_ControllerEvents rightControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Sprite> LevelImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<Sprite> ArcheryImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<Sprite> ArcheryTargetImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool preloading;

	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool shouldListen;

	[Address(RVA = "0x7084CC", Offset = "0x7084CC", VA = "0x7084CC")]
	public void Start()
	{
	}

	[Address(RVA = "0x70885C", Offset = "0x70885C", VA = "0x70885C")]
	public void Update()
	{
	}

	[Address(RVA = "0x7089C4", Offset = "0x7089C4", VA = "0x7089C4")]
	private void startNextLevelPreload()
	{
	}

	[Address(RVA = "0x70875C", Offset = "0x70875C", VA = "0x70875C")]
	private void initTriggerListeners()
	{
	}

	[Address(RVA = "0x708548", Offset = "0x708548", VA = "0x708548")]
	private void initUI()
	{
	}

	[Address(RVA = "0x708AE0", Offset = "0x708AE0", VA = "0x708AE0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677464", Offset = "0x677464")]
	private IEnumerator fadeIn()
	{
		return null;
	}

	[Address(RVA = "0x708B80", Offset = "0x708B80", VA = "0x708B80")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6774C8", Offset = "0x6774C8")]
	private IEnumerator fadeOut()
	{
		return null;
	}

	[Address(RVA = "0x708C20", Offset = "0x708C20", VA = "0x708C20")]
	private void triggerCheckEvent(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x708894", Offset = "0x708894", VA = "0x708894")]
	private void triggerCheck()
	{
	}

	[Address(RVA = "0x708C24", Offset = "0x708C24", VA = "0x708C24")]
	private void skip()
	{
	}

	[Address(RVA = "0x708C2C", Offset = "0x708C2C", VA = "0x708C2C")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x708D20", Offset = "0x708D20", VA = "0x708D20")]
	public InbetweenLevels()
	{
	}
}
public interface DependencyNode<T>
{
	void DependsOn(params T[] dependencies);
}
public class DependencyGraph<T>
{
	private class Node<T> : DependencyNode<T>
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private DependencyGraph<T> graph;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T item;

		public Node(DependencyGraph<T> graph, T item)
		{
		}

		public void DependsOn(params T[] dependencies)
		{
		}

		private void AddItemToList(T key, T toAdd, Dictionary<T, List<T>> map)
		{
		}
	}

	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A670", Offset = "0x65A670")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Func<KeyValuePair<T, List<T>>, bool> <>9__5_0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Func<KeyValuePair<T, List<T>>, T> <>9__5_1;

		internal bool <get_Roots>b__5_0(KeyValuePair<T, List<T>> kvp)
		{
			return default(bool);
		}

		internal T <get_Roots>b__5_1(KeyValuePair<T, List<T>> kvp)
		{
			return (T)null;
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<T, List<T>> dependents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<T, List<T>> dependencies;

	public int Size => default(int);

	public List<T> Roots => null;

	public DependencyNode<T> AddItem(T item)
	{
		return null;
	}

	public List<T> GetDependents(T item)
	{
		return null;
	}

	public List<T> GetDependencies(T item)
	{
		return null;
	}

	private void MustExist(T item)
	{
	}

	private void MustExist(T item, Dictionary<T, List<T>> map)
	{
	}
}
public interface IInitTask
{
	string GetName();

	IEnumerator Execute();
}
public class InitInline : IInitTask
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A680", Offset = "0x65A680")]
	private sealed class <ActionToIEnumerator>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action action;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7092F0", Offset = "0x7092F0", VA = "0x7092F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x709360", Offset = "0x709360", VA = "0x709360", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x709268", Offset = "0x709268", VA = "0x709268")]
		[DebuggerHidden]
		public <ActionToIEnumerator>d__1(int <>1__state)
		{
		}

		[Address(RVA = "0x7092A4", Offset = "0x7092A4", VA = "0x7092A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7092A8", Offset = "0x7092A8", VA = "0x7092A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7092F8", Offset = "0x7092F8", VA = "0x7092F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IEnumerator func;

	[Address(RVA = "0x70913C", Offset = "0x70913C", VA = "0x70913C")]
	public static IInitTask Action(string name, Action action)
	{
		return null;
	}

	[Address(RVA = "0x7091BC", Offset = "0x7091BC", VA = "0x7091BC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67752C", Offset = "0x67752C")]
	private static IEnumerator ActionToIEnumerator(Action action)
	{
		return null;
	}

	[Address(RVA = "0x709230", Offset = "0x709230", VA = "0x709230")]
	public InitInline(string name, IEnumerator func)
	{
	}

	[Address(RVA = "0x709294", Offset = "0x709294", VA = "0x709294", Slot = "4")]
	public string GetName()
	{
		return null;
	}

	[Address(RVA = "0x70929C", Offset = "0x70929C", VA = "0x70929C", Slot = "5")]
	public IEnumerator Execute()
	{
		return null;
	}
}
public class InitPipeline
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A690", Offset = "0x65A690")]
	private sealed class <RunTask>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InitPipeline <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IInitTask task;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x709B34", Offset = "0x709B34", VA = "0x709B34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x709BA4", Offset = "0x709BA4", VA = "0x709BA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x709854", Offset = "0x709854", VA = "0x709854")]
		[DebuggerHidden]
		public <RunTask>d__9(int <>1__state)
		{
		}

		[Address(RVA = "0x7098F0", Offset = "0x7098F0", VA = "0x7098F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7098F4", Offset = "0x7098F4", VA = "0x7098F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x709B3C", Offset = "0x709B3C", VA = "0x709B3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private DependencyGraph<IInitTask> dg;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AsyncRunner runner;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action<string> onTaskComplete;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<IInitTask> completed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool started;

	[Address(RVA = "0x709368", Offset = "0x709368", VA = "0x709368")]
	public static InitPipeline Create(Action<DependencyGraph<IInitTask>> configure, [Optional] Action<string> onTaskComplete)
	{
		return null;
	}

	[Address(RVA = "0x709440", Offset = "0x709440", VA = "0x709440")]
	public InitPipeline(DependencyGraph<IInitTask> dg, AsyncRunner runner, [Optional] Action<string> onTaskComplete)
	{
	}

	[Address(RVA = "0x7094D8", Offset = "0x7094D8", VA = "0x7094D8")]
	public void Run()
	{
	}

	[Address(RVA = "0x709598", Offset = "0x709598", VA = "0x709598")]
	private void RunTasks(List<IInitTask> tasks)
	{
	}

	[Address(RVA = "0x7097BC", Offset = "0x7097BC", VA = "0x7097BC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677590", Offset = "0x677590")]
	private IEnumerator RunTask(IInitTask task)
	{
		return null;
	}

	[Address(RVA = "0x7096F8", Offset = "0x7096F8", VA = "0x7096F8")]
	private bool IsReadyToExecute(IInitTask task)
	{
		return default(bool);
	}

	[Address(RVA = "0x709880", Offset = "0x709880", VA = "0x709880")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6775F4", Offset = "0x6775F4")]
	private bool <IsReadyToExecute>b__10_0(IInitTask dep)
	{
		return default(bool);
	}
}
public class TaskInitAudio : IInitTask
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A6A0", Offset = "0x65A6A0")]
	private sealed class <Execute>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TaskInitAudio <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72AAE4", Offset = "0x72AAE4", VA = "0x72AAE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72AB54", Offset = "0x72AB54", VA = "0x72AB54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72AA34", Offset = "0x72AA34", VA = "0x72AA34")]
		[DebuggerHidden]
		public <Execute>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x72AA60", Offset = "0x72AA60", VA = "0x72AA60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72AA64", Offset = "0x72AA64", VA = "0x72AA64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72AAEC", Offset = "0x72AAEC", VA = "0x72AAEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject AudioObject;

	[Address(RVA = "0x72A94C", Offset = "0x72A94C", VA = "0x72A94C")]
	public TaskInitAudio(GameObject audioObject)
	{
	}

	[Address(RVA = "0x72A978", Offset = "0x72A978", VA = "0x72A978", Slot = "4")]
	public string GetName()
	{
		return null;
	}

	[Address(RVA = "0x72A9C0", Offset = "0x72A9C0", VA = "0x72A9C0", Slot = "5")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677604", Offset = "0x677604")]
	public IEnumerator Execute()
	{
		return null;
	}
}
public class TaskLoadGameConfig : IInitTask
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A6B0", Offset = "0x65A6B0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<GameConfig> <>9__1_0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Action<Challenge> <>9__1_1;

		[Address(RVA = "0x72AC9C", Offset = "0x72AC9C", VA = "0x72AC9C")]
		public <>c()
		{
		}

		[Address(RVA = "0x72ACA4", Offset = "0x72ACA4", VA = "0x72ACA4")]
		internal void <Execute>b__1_0(GameConfig data)
		{
		}

		[Address(RVA = "0x72AD0C", Offset = "0x72AD0C", VA = "0x72AD0C")]
		internal void <Execute>b__1_1(Challenge data)
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A6C0", Offset = "0x65A6C0")]
	private sealed class <Execute>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72B09C", Offset = "0x72B09C", VA = "0x72B09C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72B10C", Offset = "0x72B10C", VA = "0x72B10C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72AC04", Offset = "0x72AC04", VA = "0x72AC04")]
		[DebuggerHidden]
		public <Execute>d__1(int <>1__state)
		{
		}

		[Address(RVA = "0x72AD74", Offset = "0x72AD74", VA = "0x72AD74", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72AD78", Offset = "0x72AD78", VA = "0x72AD78", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72B0A4", Offset = "0x72B0A4", VA = "0x72B0A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Address(RVA = "0x72AB5C", Offset = "0x72AB5C", VA = "0x72AB5C", Slot = "4")]
	public string GetName()
	{
		return null;
	}

	[Address(RVA = "0x72ABA4", Offset = "0x72ABA4", VA = "0x72ABA4", Slot = "5")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677668", Offset = "0x677668")]
	public IEnumerator Execute()
	{
		return null;
	}

	[Address(RVA = "0x72AC30", Offset = "0x72AC30", VA = "0x72AC30")]
	public TaskLoadGameConfig()
	{
	}
}
public class TaskMigrate : IInitTask
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A6D0", Offset = "0x65A6D0")]
	private sealed class <Execute>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72B2B8", Offset = "0x72B2B8", VA = "0x72B2B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72B328", Offset = "0x72B328", VA = "0x72B328", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72B1BC", Offset = "0x72B1BC", VA = "0x72B1BC")]
		[DebuggerHidden]
		public <Execute>d__1(int <>1__state)
		{
		}

		[Address(RVA = "0x72B1F0", Offset = "0x72B1F0", VA = "0x72B1F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72B1F4", Offset = "0x72B1F4", VA = "0x72B1F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72B2C0", Offset = "0x72B2C0", VA = "0x72B2C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Address(RVA = "0x72B114", Offset = "0x72B114", VA = "0x72B114", Slot = "4")]
	public string GetName()
	{
		return null;
	}

	[Address(RVA = "0x72B15C", Offset = "0x72B15C", VA = "0x72B15C", Slot = "5")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6776CC", Offset = "0x6776CC")]
	public IEnumerator Execute()
	{
		return null;
	}

	[Address(RVA = "0x72B1E8", Offset = "0x72B1E8", VA = "0x72B1E8")]
	public TaskMigrate()
	{
	}
}
public class TaskWait : IInitTask
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A6E0", Offset = "0x65A6E0")]
	private sealed class <Execute>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TaskWait <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72B500", Offset = "0x72B500", VA = "0x72B500", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x72B570", Offset = "0x72B570", VA = "0x72B570", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x72B420", Offset = "0x72B420", VA = "0x72B420")]
		[DebuggerHidden]
		public <Execute>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x72B44C", Offset = "0x72B44C", VA = "0x72B44C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x72B450", Offset = "0x72B450", VA = "0x72B450", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72B508", Offset = "0x72B508", VA = "0x72B508", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float Length;

	[Address(RVA = "0x72B330", Offset = "0x72B330", VA = "0x72B330")]
	public TaskWait(float length)
	{
	}

	[Address(RVA = "0x72B364", Offset = "0x72B364", VA = "0x72B364", Slot = "4")]
	public string GetName()
	{
		return null;
	}

	[Address(RVA = "0x72B3AC", Offset = "0x72B3AC", VA = "0x72B3AC", Slot = "5")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677730", Offset = "0x677730")]
	public IEnumerator Execute()
	{
		return null;
	}
}
public class Level : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A6F0", Offset = "0x65A6F0")]
	private sealed class <ActivateEvent>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] levelEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Level <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string[] <>7__wrap1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LevelEvent <lej>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81B65C", Offset = "0x81B65C", VA = "0x81B65C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81B6CC", Offset = "0x81B6CC", VA = "0x81B6CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81B08C", Offset = "0x81B08C", VA = "0x81B08C")]
		[DebuggerHidden]
		public <ActivateEvent>d__40(int <>1__state)
		{
		}

		[Address(RVA = "0x81B0B8", Offset = "0x81B0B8", VA = "0x81B0B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81B0BC", Offset = "0x81B0BC", VA = "0x81B0BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81B664", Offset = "0x81B664", VA = "0x81B664", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A700", Offset = "0x65A700")]
	private sealed class <loadWaveData>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81C4F8", Offset = "0x81C4F8", VA = "0x81C4F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81C568", Offset = "0x81C568", VA = "0x81C568", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81C25C", Offset = "0x81C25C", VA = "0x81C25C")]
		[DebuggerHidden]
		public <loadWaveData>d__43(int <>1__state)
		{
		}

		[Address(RVA = "0x81C288", Offset = "0x81C288", VA = "0x81C288", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81C28C", Offset = "0x81C28C", VA = "0x81C28C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81C500", Offset = "0x81C500", VA = "0x81C500", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A710", Offset = "0x65A710")]
	private sealed class <setPlayerPosition>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81E8A8", Offset = "0x81E8A8", VA = "0x81E8A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81E918", Offset = "0x81E918", VA = "0x81E918", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81E4EC", Offset = "0x81E4EC", VA = "0x81E4EC")]
		[DebuggerHidden]
		public <setPlayerPosition>d__50(int <>1__state)
		{
		}

		[Address(RVA = "0x81E518", Offset = "0x81E518", VA = "0x81E518", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81E51C", Offset = "0x81E51C", VA = "0x81E51C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81E8B0", Offset = "0x81E8B0", VA = "0x81E8B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A720", Offset = "0x65A720")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<HitboxNinja, StatefulEnemy> <>9__51_1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<StatefulEnemy, bool> <>9__51_2;

		[Address(RVA = "0x81AFBC", Offset = "0x81AFBC", VA = "0x81AFBC")]
		public <>c()
		{
		}

		[Address(RVA = "0x81AFC4", Offset = "0x81AFC4", VA = "0x81AFC4")]
		internal StatefulEnemy <scriptedSpawns>b__51_1(HitboxNinja c)
		{
			return null;
		}

		[Address(RVA = "0x81B020", Offset = "0x81B020", VA = "0x81B020")]
		internal bool <scriptedSpawns>b__51_2(StatefulEnemy c)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A730", Offset = "0x65A730")]
	private sealed class <scriptedSpawns>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Wave <wave>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<HitboxNinja> <createdEnemies>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NextWaveTrigger <nwt>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81E474", Offset = "0x81E474", VA = "0x81E474", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81E4E4", Offset = "0x81E4E4", VA = "0x81E4E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81D328", Offset = "0x81D328", VA = "0x81D328")]
		[DebuggerHidden]
		public <scriptedSpawns>d__51(int <>1__state)
		{
		}

		[Address(RVA = "0x81D354", Offset = "0x81D354", VA = "0x81D354", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81D358", Offset = "0x81D358", VA = "0x81D358", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81E47C", Offset = "0x81E47C", VA = "0x81E47C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A740", Offset = "0x65A740")]
	private sealed class <endlessSpawns>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <itemIndex>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81C1E4", Offset = "0x81C1E4", VA = "0x81C1E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81C254", Offset = "0x81C254", VA = "0x81C254", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81B6D4", Offset = "0x81B6D4", VA = "0x81B6D4")]
		[DebuggerHidden]
		public <endlessSpawns>d__53(int <>1__state)
		{
		}

		[Address(RVA = "0x81B700", Offset = "0x81B700", VA = "0x81B700", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81B704", Offset = "0x81B704", VA = "0x81B704", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81C1EC", Offset = "0x81C1EC", VA = "0x81C1EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A750", Offset = "0x65A750")]
	private sealed class <onStartLevel>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81D2B0", Offset = "0x81D2B0", VA = "0x81D2B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81D320", Offset = "0x81D320", VA = "0x81D320", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81CF40", Offset = "0x81CF40", VA = "0x81CF40")]
		[DebuggerHidden]
		public <onStartLevel>d__55(int <>1__state)
		{
		}

		[Address(RVA = "0x81CF6C", Offset = "0x81CF6C", VA = "0x81CF6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81CF70", Offset = "0x81CF70", VA = "0x81CF70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81D2B8", Offset = "0x81D2B8", VA = "0x81D2B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A760", Offset = "0x65A760")]
	private sealed class <onLevelOver>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81CEC8", Offset = "0x81CEC8", VA = "0x81CEC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81CF38", Offset = "0x81CF38", VA = "0x81CF38", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81CCD0", Offset = "0x81CCD0", VA = "0x81CCD0")]
		[DebuggerHidden]
		public <onLevelOver>d__56(int <>1__state)
		{
		}

		[Address(RVA = "0x81CCFC", Offset = "0x81CCFC", VA = "0x81CCFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81CD00", Offset = "0x81CD00", VA = "0x81CD00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81CED0", Offset = "0x81CED0", VA = "0x81CED0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A770", Offset = "0x65A770")]
	private sealed class <onEnemyWaiting>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81CC58", Offset = "0x81CC58", VA = "0x81CC58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81CCC8", Offset = "0x81CCC8", VA = "0x81CCC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81CB20", Offset = "0x81CB20", VA = "0x81CB20")]
		[DebuggerHidden]
		public <onEnemyWaiting>d__57(int <>1__state)
		{
		}

		[Address(RVA = "0x81CB4C", Offset = "0x81CB4C", VA = "0x81CB4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81CB50", Offset = "0x81CB50", VA = "0x81CB50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81CC60", Offset = "0x81CC60", VA = "0x81CC60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A780", Offset = "0x65A780")]
	private sealed class <onEnemyDead>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81C82C", Offset = "0x81C82C", VA = "0x81C82C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81C89C", Offset = "0x81C89C", VA = "0x81C89C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81C65C", Offset = "0x81C65C", VA = "0x81C65C")]
		[DebuggerHidden]
		public <onEnemyDead>d__58(int <>1__state)
		{
		}

		[Address(RVA = "0x81C688", Offset = "0x81C688", VA = "0x81C688", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81C68C", Offset = "0x81C68C", VA = "0x81C68C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81C834", Offset = "0x81C834", VA = "0x81C834", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A790", Offset = "0x65A790")]
	private sealed class <onBossDead>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81C5E4", Offset = "0x81C5E4", VA = "0x81C5E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81C654", Offset = "0x81C654", VA = "0x81C654", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81C570", Offset = "0x81C570", VA = "0x81C570")]
		[DebuggerHidden]
		public <onBossDead>d__59(int <>1__state)
		{
		}

		[Address(RVA = "0x81C59C", Offset = "0x81C59C", VA = "0x81C59C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81C5A0", Offset = "0x81C5A0", VA = "0x81C5A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81C5EC", Offset = "0x81C5EC", VA = "0x81C5EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A7A0", Offset = "0x65A7A0")]
	private sealed class <onEnemyDestroyed>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Level <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x81CAA8", Offset = "0x81CAA8", VA = "0x81CAA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x81CB18", Offset = "0x81CB18", VA = "0x81CB18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x81C8A4", Offset = "0x81C8A4", VA = "0x81C8A4")]
		[DebuggerHidden]
		public <onEnemyDestroyed>d__60(int <>1__state)
		{
		}

		[Address(RVA = "0x81C8D0", Offset = "0x81C8D0", VA = "0x81C8D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x81C8D4", Offset = "0x81C8D4", VA = "0x81C8D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x81CAB0", Offset = "0x81CAB0", VA = "0x81CAB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Act;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform PlayerPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Cutter Cutter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VRTK_ControllerEvents RightControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public VRTK_ControllerEvents LeftControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HitboxNinja[] DebugSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject Enemies;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<GameObject> LevelEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject SpawnPoints;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject RoutePoints;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int waveIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public BossStatefulEnemy ActiveBoss;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int FOVLevel;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<StatefulEnemy> livingEnemies;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string spawnStyle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject nextWaveTrigger;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform nextWaveTriggerPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int spawnIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool spawningScripted;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Queue<WaveItem> spawnQueue;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<WaveProgress> activeWaves;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<string, HitboxNinja> enemyDictionary;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Dictionary<string, LevelEvent> levelEventDictionary;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Dictionary<string, Transform> spawnPointDictionary;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Dictionary<string, Transform> routeDictionary;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private WaveData waveData;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Coroutine levelSpawnCoroutine;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool bossDefeated;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
	private bool useProjectedShadows;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private List<Transform> randomSpawnLocs;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Difficulty endlessDifficulty;

	public bool UseProjectedShadows
	{
		[Address(RVA = "0x716BE0", Offset = "0x716BE0", VA = "0x716BE0")]
		get
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x716178", Offset = "0x716178", VA = "0x716178")]
	public static int GetWaveStateIndex(int waveIndex)
	{
		return default(int);
	}

	[Address(RVA = "0x716308", Offset = "0x716308", VA = "0x716308")]
	public static List<HitboxNinja> SpawnWave(Wave wave)
	{
		return null;
	}

	[Address(RVA = "0x716BE8", Offset = "0x716BE8", VA = "0x716BE8")]
	public void Init()
	{
	}

	[Address(RVA = "0x7173C0", Offset = "0x7173C0", VA = "0x7173C0")]
	public void Start()
	{
	}

	[Address(RVA = "0x717714", Offset = "0x717714", VA = "0x717714")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x717984", Offset = "0x717984", VA = "0x717984")]
	public void Update()
	{
	}

	[Address(RVA = "0x6F9F28", Offset = "0x6F9F28", VA = "0x6F9F28")]
	public int WavesCount()
	{
		return default(int);
	}

	[Address(RVA = "0x717988", Offset = "0x717988", VA = "0x717988")]
	public void NextWaveForce()
	{
	}

	[Address(RVA = "0x717C28", Offset = "0x717C28", VA = "0x717C28")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677794", Offset = "0x677794")]
	public IEnumerator ActivateEvent(string[] levelEvents)
	{
		return null;
	}

	[Address(RVA = "0x717CC0", Offset = "0x717CC0", VA = "0x717CC0")]
	public bool CheckWaveProgress(StatefulEnemy enemy, bool soft = false)
	{
		return default(bool);
	}

	[Address(RVA = "0x716D40", Offset = "0x716D40", VA = "0x716D40")]
	private void loadDictionaries()
	{
	}

	[Address(RVA = "0x71734C", Offset = "0x71734C", VA = "0x71734C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6777F8", Offset = "0x6777F8")]
	private IEnumerator loadWaveData()
	{
		return null;
	}

	[Address(RVA = "0x717DFC", Offset = "0x717DFC", VA = "0x717DFC")]
	private void updateWaveEnemy(StatefulEnemy enemy)
	{
	}

	[Address(RVA = "0x717B10", Offset = "0x717B10", VA = "0x717B10")]
	private void removeWaveEnemy(StatefulEnemy enemy)
	{
	}

	[Address(RVA = "0x71647C", Offset = "0x71647C", VA = "0x71647C")]
	public HitboxNinja spawn(bool freeForm, WaveItem item, int hitCount = 1, bool waveless = false, [Optional] Transform spawnOverride)
	{
		return null;
	}

	[Address(RVA = "0x717F0C", Offset = "0x717F0C", VA = "0x717F0C")]
	private HitboxNinja spawnBoss(Boss boss)
	{
		return null;
	}

	[Address(RVA = "0x718258", Offset = "0x718258", VA = "0x718258")]
	private void spawnHandler(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x7183E8", Offset = "0x7183E8", VA = "0x7183E8")]
	private void scriptedSpawnHandler(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x718488", Offset = "0x718488", VA = "0x718488")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67785C", Offset = "0x67785C")]
	private IEnumerator setPlayerPosition()
	{
		return null;
	}

	[Address(RVA = "0x7184FC", Offset = "0x7184FC", VA = "0x7184FC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6778C0", Offset = "0x6778C0")]
	private IEnumerator scriptedSpawns()
	{
		return null;
	}

	[Address(RVA = "0x718570", Offset = "0x718570", VA = "0x718570")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677924", Offset = "0x677924")]
	private IEnumerator endlessSpawns()
	{
		return null;
	}

	[Address(RVA = "0x7185E4", Offset = "0x7185E4", VA = "0x7185E4")]
	private void OVRManager_HMDAcquired()
	{
	}

	[Address(RVA = "0x718414", Offset = "0x718414", VA = "0x718414")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677988", Offset = "0x677988")]
	private IEnumerator onStartLevel()
	{
		return null;
	}

	[Address(RVA = "0x7186E4", Offset = "0x7186E4", VA = "0x7186E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6779EC", Offset = "0x6779EC")]
	private IEnumerator onLevelOver()
	{
		return null;
	}

	[Address(RVA = "0x718758", Offset = "0x718758", VA = "0x718758")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677A50", Offset = "0x677A50")]
	private IEnumerator onEnemyWaiting(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x7187F0", Offset = "0x7187F0", VA = "0x7187F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677AB4", Offset = "0x677AB4")]
	private IEnumerator onEnemyDead(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x718888", Offset = "0x718888", VA = "0x718888")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677B18", Offset = "0x677B18")]
	private IEnumerator onBossDead(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x7188FC", Offset = "0x7188FC", VA = "0x7188FC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677B7C", Offset = "0x677B7C")]
	private IEnumerator onEnemyDestroyed(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x718994", Offset = "0x718994", VA = "0x718994")]
	public Level()
	{
	}

	[Address(RVA = "0x718A5C", Offset = "0x718A5C", VA = "0x718A5C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x677BE0", Offset = "0x677BE0")]
	private void <loadWaveData>b__43_0(WaveData data)
	{
	}

	[Address(RVA = "0x718E60", Offset = "0x718E60", VA = "0x718E60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x677BF0", Offset = "0x677BF0")]
	private Transform <spawn>b__46_0(string s)
	{
		return null;
	}

	[Address(RVA = "0x718ED0", Offset = "0x718ED0", VA = "0x718ED0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x677C00", Offset = "0x677C00")]
	private void <spawnBoss>b__47_0(BossPhase phase)
	{
	}

	[Address(RVA = "0x718F20", Offset = "0x718F20", VA = "0x718F20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x677C10", Offset = "0x677C10")]
	private void <spawnBoss>b__47_1(BossSubPhase subphase)
	{
	}

	[Address(RVA = "0x718F70", Offset = "0x718F70", VA = "0x718F70")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x677C20", Offset = "0x677C20")]
	private void <scriptedSpawns>b__51_0(WaveItem i)
	{
	}
}
public class WaveProgress
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A7B0", Offset = "0x65A7B0")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<bool, bool> <>9__4_0;

		[Address(RVA = "0x81A058", Offset = "0x81A058", VA = "0x81A058")]
		public <>c()
		{
		}

		[Address(RVA = "0x81A060", Offset = "0x81A060", VA = "0x81A060")]
		internal bool <CanProgressWave>b__4_0(bool s)
		{
			return default(bool);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Dictionary<StatefulEnemy, bool> Status;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsProgressing;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int StateIndex;

	[Address(RVA = "0x819A44", Offset = "0x819A44", VA = "0x819A44")]
	public WaveProgress(StatefulEnemy[] enemies)
	{
	}

	[Address(RVA = "0x819B48", Offset = "0x819B48", VA = "0x819B48")]
	public bool CanProgressWave()
	{
		return default(bool);
	}

	[Address(RVA = "0x819C84", Offset = "0x819C84", VA = "0x819C84")]
	public void Progress()
	{
	}

	[Address(RVA = "0x819E98", Offset = "0x819E98", VA = "0x819E98")]
	public void UpdateByEnemy(StatefulEnemy enemy)
	{
	}

	[Address(RVA = "0x819F48", Offset = "0x819F48", VA = "0x819F48")]
	public void RemoveByEnemy(StatefulEnemy enemy)
	{
	}
}
public class LookAtPlayer : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject hideWhenClose;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float hideWithinDistance;

	[Address(RVA = "0x839ED8", Offset = "0x839ED8", VA = "0x839ED8")]
	private void Update()
	{
	}

	[Address(RVA = "0x83A1B0", Offset = "0x83A1B0", VA = "0x83A1B0")]
	public LookAtPlayer()
	{
	}
}
public class LookTeleporter : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Address(RVA = "0x83A1B8", Offset = "0x83A1B8", VA = "0x83A1B8")]
	public LookTeleporter()
	{
	}
}
public enum OffMeshLinkMoveMethod
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Teleport,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	NormalSpeed,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Parabola,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Curve
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655A14", Offset = "0x655A14")]
public class AgentLinkMover : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A7C0", Offset = "0x65A7C0")]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AgentLinkMover <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NavMeshAgent <agent>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8A71EC", Offset = "0x8A71EC", VA = "0x8A71EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8A725C", Offset = "0x8A725C", VA = "0x8A725C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A6228", Offset = "0x8A6228", VA = "0x8A6228")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Address(RVA = "0x8A7004", Offset = "0x8A7004", VA = "0x8A7004", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A7008", Offset = "0x8A7008", VA = "0x8A7008", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A71F4", Offset = "0x8A71F4", VA = "0x8A71F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A7D0", Offset = "0x65A7D0")]
	private sealed class <NormalSpeed>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent agent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <endPos>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8A6C00", Offset = "0x8A6C00", VA = "0x8A6C00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8A6C70", Offset = "0x8A6C70", VA = "0x8A6C70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A62C8", Offset = "0x8A62C8", VA = "0x8A62C8")]
		[DebuggerHidden]
		public <NormalSpeed>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x8A68D8", Offset = "0x8A68D8", VA = "0x8A68D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A68DC", Offset = "0x8A68DC", VA = "0x8A68DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A6C08", Offset = "0x8A6C08", VA = "0x8A6C08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A7E0", Offset = "0x65A7E0")]
	private sealed class <Parabola>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent agent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float height;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float duration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 <endPos>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <normalizedTime>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8A6F8C", Offset = "0x8A6F8C", VA = "0x8A6F8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8A6FFC", Offset = "0x8A6FFC", VA = "0x8A6FFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A63A4", Offset = "0x8A63A4", VA = "0x8A63A4")]
		[DebuggerHidden]
		public <Parabola>d__4(int <>1__state)
		{
		}

		[Address(RVA = "0x8A6C78", Offset = "0x8A6C78", VA = "0x8A6C78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A6C7C", Offset = "0x8A6C7C", VA = "0x8A6C7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A6F94", Offset = "0x8A6F94", VA = "0x8A6F94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A7F0", Offset = "0x65A7F0")]
	private sealed class <Curve>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent agent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AgentLinkMover <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float duration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <endPos>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <normalizedTime>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8A6860", Offset = "0x8A6860", VA = "0x8A6860", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8A68D0", Offset = "0x8A68D0", VA = "0x8A68D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8A6484", Offset = "0x8A6484", VA = "0x8A6484")]
		[DebuggerHidden]
		public <Curve>d__5(int <>1__state)
		{
		}

		[Address(RVA = "0x8A6520", Offset = "0x8A6520", VA = "0x8A6520", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8A6524", Offset = "0x8A6524", VA = "0x8A6524", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A6868", Offset = "0x8A6868", VA = "0x8A6868", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OffMeshLinkMoveMethod m_Method;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve m_Curve;

	[Address(RVA = "0x8A61B4", Offset = "0x8A61B4", VA = "0x8A61B4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677C30", Offset = "0x677C30")]
	private IEnumerator Start()
	{
		return null;
	}

	[Address(RVA = "0x8A6254", Offset = "0x8A6254", VA = "0x8A6254")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677C94", Offset = "0x677C94")]
	private IEnumerator NormalSpeed(NavMeshAgent agent)
	{
		return null;
	}

	[Address(RVA = "0x8A62F4", Offset = "0x8A62F4", VA = "0x8A62F4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677CF8", Offset = "0x677CF8")]
	private IEnumerator Parabola(NavMeshAgent agent, float height, float duration)
	{
		return null;
	}

	[Address(RVA = "0x8A63D0", Offset = "0x8A63D0", VA = "0x8A63D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677D5C", Offset = "0x677D5C")]
	private IEnumerator Curve(NavMeshAgent agent, float duration)
	{
		return null;
	}

	[Address(RVA = "0x8A64B0", Offset = "0x8A64B0", VA = "0x8A64B0")]
	public AgentLinkMover()
	{
	}
}
public class Network
{
	[Address(RVA = "0x916204", Offset = "0x916204", VA = "0x916204")]
	public static string GetLocalIPAddress()
	{
		return null;
	}

	[Address(RVA = "0x916324", Offset = "0x916324", VA = "0x916324")]
	public Network()
	{
	}
}
public class ParticleController : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem[] Particles;

	[Address(RVA = "0x7557F8", Offset = "0x7557F8", VA = "0x7557F8")]
	private void Start()
	{
	}

	[Address(RVA = "0x755880", Offset = "0x755880", VA = "0x755880")]
	public void Emit()
	{
	}

	[Address(RVA = "0x7557FC", Offset = "0x7557FC", VA = "0x7557FC")]
	public void Stop()
	{
	}

	[Address(RVA = "0x755904", Offset = "0x755904", VA = "0x755904")]
	public ParticleController()
	{
	}
}
public class PerfManager : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A800", Offset = "0x65A800")]
	private sealed class <resetPerfValues>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerfManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x756FF0", Offset = "0x756FF0", VA = "0x756FF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x757060", Offset = "0x757060", VA = "0x757060", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x75698C", Offset = "0x75698C", VA = "0x75698C")]
		[DebuggerHidden]
		public <resetPerfValues>d__8(int <>1__state)
		{
		}

		[Address(RVA = "0x756F04", Offset = "0x756F04", VA = "0x756F04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x756F08", Offset = "0x756F08", VA = "0x756F08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x756FF8", Offset = "0x756FF8", VA = "0x756FF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float pushCPUTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int lowPriLock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<Action> lowPriActions;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PerfManager instance;

	public static PerfManager Instance
	{
		[Address(RVA = "0x75664C", Offset = "0x75664C", VA = "0x75664C")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x75674C", Offset = "0x75674C", VA = "0x75674C")]
	public void Start()
	{
	}

	[Address(RVA = "0x75684C", Offset = "0x75684C", VA = "0x75684C")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x756918", Offset = "0x756918", VA = "0x756918")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677DC0", Offset = "0x677DC0")]
	private IEnumerator resetPerfValues()
	{
		return null;
	}

	[Address(RVA = "0x7569B8", Offset = "0x7569B8", VA = "0x7569B8")]
	public void resetValues()
	{
	}

	[Address(RVA = "0x756A1C", Offset = "0x756A1C", VA = "0x756A1C")]
	public void SetForLoading()
	{
	}

	[Address(RVA = "0x756A80", Offset = "0x756A80", VA = "0x756A80")]
	public void PushCPU(float length = 0.5f)
	{
	}

	[Address(RVA = "0x756BCC", Offset = "0x756BCC", VA = "0x756BCC")]
	public void AddLowPriAction(Action action)
	{
	}

	[Address(RVA = "0x756C3C", Offset = "0x756C3C", VA = "0x756C3C")]
	public void LockLowPriActions(int frames = 2)
	{
	}

	[Address(RVA = "0x756CC0", Offset = "0x756CC0", VA = "0x756CC0")]
	public bool AvailableForLowPri()
	{
		return default(bool);
	}

	[Address(RVA = "0x756D3C", Offset = "0x756D3C", VA = "0x756D3C")]
	private void Update()
	{
	}

	[Address(RVA = "0x756E90", Offset = "0x756E90", VA = "0x756E90")]
	public PerfManager()
	{
	}
}
public class Persistent : MonoBehaviour
{
	[Address(RVA = "0x757068", Offset = "0x757068", VA = "0x757068")]
	public void Awake()
	{
	}

	[Address(RVA = "0x7570D0", Offset = "0x7570D0", VA = "0x7570D0")]
	public Persistent()
	{
	}
}
public class Player : EnemyTarget
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A810", Offset = "0x65A810")]
	private sealed class <SetWeaponAfterFrame>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1553A04", Offset = "0x1553A04", VA = "0x1553A04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1553A74", Offset = "0x1553A74", VA = "0x1553A74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1553704", Offset = "0x1553704", VA = "0x1553704")]
		[DebuggerHidden]
		public <SetWeaponAfterFrame>d__48(int <>1__state)
		{
		}

		[Address(RVA = "0x1553730", Offset = "0x1553730", VA = "0x1553730", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1553734", Offset = "0x1553734", VA = "0x1553734", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1553A0C", Offset = "0x1553A0C", VA = "0x1553A0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A820", Offset = "0x65A820")]
	private sealed class <SetHMD>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1553180", Offset = "0x1553180", VA = "0x1553180", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15531F0", Offset = "0x15531F0", VA = "0x15531F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1553038", Offset = "0x1553038", VA = "0x1553038")]
		[DebuggerHidden]
		public <SetHMD>d__60(int <>1__state)
		{
		}

		[Address(RVA = "0x1553064", Offset = "0x1553064", VA = "0x1553064", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1553068", Offset = "0x1553068", VA = "0x1553068", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1553188", Offset = "0x1553188", VA = "0x1553188", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A830", Offset = "0x65A830")]
	private sealed class <CheckForUserMod>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityWebRequest <request>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1551FC0", Offset = "0x1551FC0", VA = "0x1551FC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1553030", Offset = "0x1553030", VA = "0x1553030", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1551CB0", Offset = "0x1551CB0", VA = "0x1551CB0")]
		[DebuggerHidden]
		public <CheckForUserMod>d__62(int <>1__state)
		{
		}

		[Address(RVA = "0x1551CDC", Offset = "0x1551CDC", VA = "0x1551CDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1551DB8", Offset = "0x1551DB8", VA = "0x1551DB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1551CF8", Offset = "0x1551CF8", VA = "0x1551CF8")]
		private void <>m__Finally1()
		{
		}

		[Address(RVA = "0x1551FC8", Offset = "0x1551FC8", VA = "0x1551FC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A840", Offset = "0x65A840")]
	private sealed class <onStartLevel>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15570AC", Offset = "0x15570AC", VA = "0x15570AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x155711C", Offset = "0x155711C", VA = "0x155711C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1556D1C", Offset = "0x1556D1C", VA = "0x1556D1C")]
		[DebuggerHidden]
		public <onStartLevel>d__68(int <>1__state)
		{
		}

		[Address(RVA = "0x1556D48", Offset = "0x1556D48", VA = "0x1556D48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1556D4C", Offset = "0x1556D4C", VA = "0x1556D4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15570B4", Offset = "0x15570B4", VA = "0x15570B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A850", Offset = "0x65A850")]
	private sealed class <onStartGame>d__82 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1556CA4", Offset = "0x1556CA4", VA = "0x1556CA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1556D14", Offset = "0x1556D14", VA = "0x1556D14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1556A24", Offset = "0x1556A24", VA = "0x1556A24")]
		[DebuggerHidden]
		public <onStartGame>d__82(int <>1__state)
		{
		}

		[Address(RVA = "0x1556A50", Offset = "0x1556A50", VA = "0x1556A50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1556A54", Offset = "0x1556A54", VA = "0x1556A54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1556CAC", Offset = "0x1556CAC", VA = "0x1556CAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A860", Offset = "0x65A860")]
	private sealed class <onPlayerHit>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1555CE4", Offset = "0x1555CE4", VA = "0x1555CE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1555D54", Offset = "0x1555D54", VA = "0x1555D54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1555C9C", Offset = "0x1555C9C", VA = "0x1555C9C")]
		[DebuggerHidden]
		public <onPlayerHit>d__84(int <>1__state)
		{
		}

		[Address(RVA = "0x1555CC8", Offset = "0x1555CC8", VA = "0x1555CC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1555CCC", Offset = "0x1555CCC", VA = "0x1555CCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1555CEC", Offset = "0x1555CEC", VA = "0x1555CEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A870", Offset = "0x65A870")]
	private sealed class <onEnemyHit>d__86 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enemy;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1555350", Offset = "0x1555350", VA = "0x1555350", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15553C0", Offset = "0x15553C0", VA = "0x15553C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1555124", Offset = "0x1555124", VA = "0x1555124")]
		[DebuggerHidden]
		public <onEnemyHit>d__86(int <>1__state)
		{
		}

		[Address(RVA = "0x1555150", Offset = "0x1555150", VA = "0x1555150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1555154", Offset = "0x1555154", VA = "0x1555154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1555358", Offset = "0x1555358", VA = "0x1555358", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A880", Offset = "0x65A880")]
	private sealed class <onSpecialCollected>d__87 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject doober;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1555EE0", Offset = "0x1555EE0", VA = "0x1555EE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1555F50", Offset = "0x1555F50", VA = "0x1555F50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1555D5C", Offset = "0x1555D5C", VA = "0x1555D5C")]
		[DebuggerHidden]
		public <onSpecialCollected>d__87(int <>1__state)
		{
		}

		[Address(RVA = "0x1555D88", Offset = "0x1555D88", VA = "0x1555D88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1555D8C", Offset = "0x1555D8C", VA = "0x1555D8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1555EE8", Offset = "0x1555EE8", VA = "0x1555EE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A890", Offset = "0x65A890")]
	private sealed class <onHealthCollected>d__88 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject doober;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15559EC", Offset = "0x15559EC", VA = "0x15559EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1555A5C", Offset = "0x1555A5C", VA = "0x1555A5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1555714", Offset = "0x1555714", VA = "0x1555714")]
		[DebuggerHidden]
		public <onHealthCollected>d__88(int <>1__state)
		{
		}

		[Address(RVA = "0x1555740", Offset = "0x1555740", VA = "0x1555740", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1555744", Offset = "0x1555744", VA = "0x1555744", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15559F4", Offset = "0x15559F4", VA = "0x15559F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A8A0", Offset = "0x65A8A0")]
	private sealed class <onEnemyDead>d__89 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enemy;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15550AC", Offset = "0x15550AC", VA = "0x15550AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x155511C", Offset = "0x155511C", VA = "0x155511C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1554E74", Offset = "0x1554E74", VA = "0x1554E74")]
		[DebuggerHidden]
		public <onEnemyDead>d__89(int <>1__state)
		{
		}

		[Address(RVA = "0x1554EA0", Offset = "0x1554EA0", VA = "0x1554EA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1554EA4", Offset = "0x1554EA4", VA = "0x1554EA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15550B4", Offset = "0x15550B4", VA = "0x15550B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A8B0", Offset = "0x65A8B0")]
	private sealed class <>c__DisplayClass91_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 pos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int grantAmount;

		[Address(RVA = "0x1551AD0", Offset = "0x1551AD0", VA = "0x1551AD0")]
		public <>c__DisplayClass91_0()
		{
		}

		[Address(RVA = "0x1551AD8", Offset = "0x1551AD8", VA = "0x1551AD8")]
		internal void <spawnSpecialDoober>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A8C0", Offset = "0x65A8C0")]
	private sealed class <onWaveSpawned>d__94 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15574D8", Offset = "0x15574D8", VA = "0x15574D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1557548", Offset = "0x1557548", VA = "0x1557548", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x155735C", Offset = "0x155735C", VA = "0x155735C")]
		[DebuggerHidden]
		public <onWaveSpawned>d__94(int <>1__state)
		{
		}

		[Address(RVA = "0x1557388", Offset = "0x1557388", VA = "0x1557388", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x155738C", Offset = "0x155738C", VA = "0x155738C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15574E0", Offset = "0x15574E0", VA = "0x15574E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A8D0", Offset = "0x65A8D0")]
	private sealed class <onFinalEnemyDead>d__96 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15554B4", Offset = "0x15554B4", VA = "0x15554B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1555524", Offset = "0x1555524", VA = "0x1555524", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15553C8", Offset = "0x15553C8", VA = "0x15553C8")]
		[DebuggerHidden]
		public <onFinalEnemyDead>d__96(int <>1__state)
		{
		}

		[Address(RVA = "0x15553F4", Offset = "0x15553F4", VA = "0x15553F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x15553F8", Offset = "0x15553F8", VA = "0x15553F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15554BC", Offset = "0x15554BC", VA = "0x15554BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A8E0", Offset = "0x65A8E0")]
	private sealed class <onEnemyCritDead>d__97 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enemy;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1554DFC", Offset = "0x1554DFC", VA = "0x1554DFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1554E6C", Offset = "0x1554E6C", VA = "0x1554E6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1554BF4", Offset = "0x1554BF4", VA = "0x1554BF4")]
		[DebuggerHidden]
		public <onEnemyCritDead>d__97(int <>1__state)
		{
		}

		[Address(RVA = "0x1554C20", Offset = "0x1554C20", VA = "0x1554C20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1554C24", Offset = "0x1554C24", VA = "0x1554C24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1554E04", Offset = "0x1554E04", VA = "0x1554E04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A8F0", Offset = "0x65A8F0")]
	private sealed class <onEnemyBlocked>d__98 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1554B7C", Offset = "0x1554B7C", VA = "0x1554B7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1554BEC", Offset = "0x1554BEC", VA = "0x1554BEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1554928", Offset = "0x1554928", VA = "0x1554928")]
		[DebuggerHidden]
		public <onEnemyBlocked>d__98(int <>1__state)
		{
		}

		[Address(RVA = "0x1554954", Offset = "0x1554954", VA = "0x1554954", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1554958", Offset = "0x1554958", VA = "0x1554958", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1554B84", Offset = "0x1554B84", VA = "0x1554B84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A900", Offset = "0x65A900")]
	private sealed class <>c__DisplayClass99_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Enemy enemy;

		[Address(RVA = "0x1551C0C", Offset = "0x1551C0C", VA = "0x1551C0C")]
		public <>c__DisplayClass99_0()
		{
		}

		[Address(RVA = "0x1551C14", Offset = "0x1551C14", VA = "0x1551C14")]
		internal bool <onBossFatalityReady>b__1()
		{
			return default(bool);
		}
	}

	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A910", Offset = "0x65A910")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<bool> <>9__99_0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Predicate<Buff> <>9__113_0;

		[Address(RVA = "0x15519C4", Offset = "0x15519C4", VA = "0x15519C4")]
		public <>c()
		{
		}

		[Address(RVA = "0x15519CC", Offset = "0x15519CC", VA = "0x15519CC")]
		internal bool <onBossFatalityReady>b__99_0()
		{
			return default(bool);
		}

		[Address(RVA = "0x1551A50", Offset = "0x1551A50", VA = "0x1551A50")]
		internal bool <onComboDeactivate>b__113_0(Buff b)
		{
			return default(bool);
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A920", Offset = "0x65A920")]
	private sealed class <onBossFatalityReady>d__99 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject boss;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SwingingWeapon[] <Weapons>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <startPos>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <endPos>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <elapsed>5__5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 <offset>5__6;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15542E8", Offset = "0x15542E8", VA = "0x15542E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1554358", Offset = "0x1554358", VA = "0x1554358", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1553A7C", Offset = "0x1553A7C", VA = "0x1553A7C")]
		[DebuggerHidden]
		public <onBossFatalityReady>d__99(int <>1__state)
		{
		}

		[Address(RVA = "0x1553AA8", Offset = "0x1553AA8", VA = "0x1553AA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1553AAC", Offset = "0x1553AAC", VA = "0x1553AAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15542F0", Offset = "0x15542F0", VA = "0x15542F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A930", Offset = "0x65A930")]
	private sealed class <onDead>d__100 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15548B0", Offset = "0x15548B0", VA = "0x15548B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1554920", Offset = "0x1554920", VA = "0x1554920", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15546A8", Offset = "0x15546A8", VA = "0x15546A8")]
		[DebuggerHidden]
		public <onDead>d__100(int <>1__state)
		{
		}

		[Address(RVA = "0x15546D4", Offset = "0x15546D4", VA = "0x15546D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x15546D8", Offset = "0x15546D8", VA = "0x15546D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15548B8", Offset = "0x15548B8", VA = "0x15548B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A940", Offset = "0x65A940")]
	private sealed class <onGameOver>d__101 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x155569C", Offset = "0x155569C", VA = "0x155569C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x155570C", Offset = "0x155570C", VA = "0x155570C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x155552C", Offset = "0x155552C", VA = "0x155552C")]
		[DebuggerHidden]
		public <onGameOver>d__101(int <>1__state)
		{
		}

		[Address(RVA = "0x1555558", Offset = "0x1555558", VA = "0x1555558", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x155555C", Offset = "0x155555C", VA = "0x155555C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15556A4", Offset = "0x15556A4", VA = "0x15556A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A950", Offset = "0x65A950")]
	private sealed class <onSpecialReady>d__102 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15564D4", Offset = "0x15564D4", VA = "0x15564D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1556544", Offset = "0x1556544", VA = "0x1556544", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1556438", Offset = "0x1556438", VA = "0x1556438")]
		[DebuggerHidden]
		public <onSpecialReady>d__102(int <>1__state)
		{
		}

		[Address(RVA = "0x1556464", Offset = "0x1556464", VA = "0x1556464", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1556468", Offset = "0x1556468", VA = "0x1556468", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15564DC", Offset = "0x15564DC", VA = "0x15564DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A960", Offset = "0x65A960")]
	private sealed class <SetHeadHeight>d__106 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool adjustActive;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x155368C", Offset = "0x155368C", VA = "0x155368C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15536FC", Offset = "0x15536FC", VA = "0x15536FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15531F8", Offset = "0x15531F8", VA = "0x15531F8")]
		[DebuggerHidden]
		public <SetHeadHeight>d__106(int <>1__state)
		{
		}

		[Address(RVA = "0x1553224", Offset = "0x1553224", VA = "0x1553224", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1553228", Offset = "0x1553228", VA = "0x1553228", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1553694", Offset = "0x1553694", VA = "0x1553694", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A970", Offset = "0x65A970")]
	private sealed class <onSpecialUsed>d__107 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15569AC", Offset = "0x15569AC", VA = "0x15569AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1556A1C", Offset = "0x1556A1C", VA = "0x1556A1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x155666C", Offset = "0x155666C", VA = "0x155666C")]
		[DebuggerHidden]
		public <onSpecialUsed>d__107(int <>1__state)
		{
		}

		[Address(RVA = "0x1556698", Offset = "0x1556698", VA = "0x1556698", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x155669C", Offset = "0x155669C", VA = "0x155669C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15569B4", Offset = "0x15569B4", VA = "0x15569B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A980", Offset = "0x65A980")]
	private sealed class <onSpecialComplete>d__108 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SlashingWeapon <lSlash>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SlashingWeapon <rSlash>5__3;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15563C0", Offset = "0x15563C0", VA = "0x15563C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1556430", Offset = "0x1556430", VA = "0x1556430", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1555F58", Offset = "0x1555F58", VA = "0x1555F58")]
		[DebuggerHidden]
		public <onSpecialComplete>d__108(int <>1__state)
		{
		}

		[Address(RVA = "0x1555F84", Offset = "0x1555F84", VA = "0x1555F84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1555F88", Offset = "0x1555F88", VA = "0x1555F88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15563C8", Offset = "0x15563C8", VA = "0x15563C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A990", Offset = "0x65A990")]
	private sealed class <onWeaponSelect>d__109 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15575F8", Offset = "0x15575F8", VA = "0x15575F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1557668", Offset = "0x1557668", VA = "0x1557668", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1557550", Offset = "0x1557550", VA = "0x1557550")]
		[DebuggerHidden]
		public <onWeaponSelect>d__109(int <>1__state)
		{
		}

		[Address(RVA = "0x155757C", Offset = "0x155757C", VA = "0x155757C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1557580", Offset = "0x1557580", VA = "0x1557580", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1557600", Offset = "0x1557600", VA = "0x1557600", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A9A0", Offset = "0x65A9A0")]
	private sealed class <onSpecialSelect>d__110 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15565F4", Offset = "0x15565F4", VA = "0x15565F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1556664", Offset = "0x1556664", VA = "0x1556664", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x155654C", Offset = "0x155654C", VA = "0x155654C")]
		[DebuggerHidden]
		public <onSpecialSelect>d__110(int <>1__state)
		{
		}

		[Address(RVA = "0x1556578", Offset = "0x1556578", VA = "0x1556578", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x155657C", Offset = "0x155657C", VA = "0x155657C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15565FC", Offset = "0x15565FC", VA = "0x15565FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A9B0", Offset = "0x65A9B0")]
	private sealed class <onPause>d__111 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1555C24", Offset = "0x1555C24", VA = "0x1555C24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1555C94", Offset = "0x1555C94", VA = "0x1555C94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1555A64", Offset = "0x1555A64", VA = "0x1555A64")]
		[DebuggerHidden]
		public <onPause>d__111(int <>1__state)
		{
		}

		[Address(RVA = "0x1555A90", Offset = "0x1555A90", VA = "0x1555A90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1555A94", Offset = "0x1555A94", VA = "0x1555A94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1555C2C", Offset = "0x1555C2C", VA = "0x1555C2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A9C0", Offset = "0x65A9C0")]
	private sealed class <onUnpaused>d__112 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15572E4", Offset = "0x15572E4", VA = "0x15572E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1557354", Offset = "0x1557354", VA = "0x1557354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1557124", Offset = "0x1557124", VA = "0x1557124")]
		[DebuggerHidden]
		public <onUnpaused>d__112(int <>1__state)
		{
		}

		[Address(RVA = "0x1557150", Offset = "0x1557150", VA = "0x1557150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1557154", Offset = "0x1557154", VA = "0x1557154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15572EC", Offset = "0x15572EC", VA = "0x15572EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A9D0", Offset = "0x65A9D0")]
	private sealed class <onComboDeactivate>d__113 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1554630", Offset = "0x1554630", VA = "0x1554630", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15546A0", Offset = "0x15546A0", VA = "0x15546A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15544E4", Offset = "0x15544E4", VA = "0x15544E4")]
		[DebuggerHidden]
		public <onComboDeactivate>d__113(int <>1__state)
		{
		}

		[Address(RVA = "0x1554510", Offset = "0x1554510", VA = "0x1554510", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1554514", Offset = "0x1554514", VA = "0x1554514", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1554638", Offset = "0x1554638", VA = "0x1554638", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A9E0", Offset = "0x65A9E0")]
	private sealed class <onComboActivate>d__114 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x155446C", Offset = "0x155446C", VA = "0x155446C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15544DC", Offset = "0x15544DC", VA = "0x15544DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1554360", Offset = "0x1554360", VA = "0x1554360")]
		[DebuggerHidden]
		public <onComboActivate>d__114(int <>1__state)
		{
		}

		[Address(RVA = "0x155438C", Offset = "0x155438C", VA = "0x155438C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1554390", Offset = "0x1554390", VA = "0x1554390", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1554474", Offset = "0x1554474", VA = "0x1554474", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool appStartup;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Player Instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string OculusID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnemyTarget[] sceneTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ViveManager viveManager;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MenuManager menu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool Alive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int Health;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public uint Special;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public uint SpecialRequired;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public uint SpecialMax;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool Blocking;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float FinalKillSlowmo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject specialVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Doober specialDoober;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform headset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform primaryLeft;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform primaryRight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform abilityLeft;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform abilityRight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Weapon leftWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Weapon rightWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject FTUEweapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject[] weapons;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject[] specials;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject[] menuHands;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<DamageState> damageStates;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool RightHanded;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	private bool hasAbilityWeapons;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static bool seenSpecialAbilityTutorial;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Ability ability;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<Buff> buffs;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public VRTK_ControllerEvents leftControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public VRTK_ControllerEvents rightControllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private List<Doober> SpecialDooberPool;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool turning;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public UserModUI userModUI;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Transform playerTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int frames;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float realDeltaTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool submittedScores;

	public static List<Buff> Buffs
	{
		[Address(RVA = "0x757110", Offset = "0x757110", VA = "0x757110")]
		get
		{
			return null;
		}
	}

	public float healthPercent
	{
		[Address(RVA = "0x757188", Offset = "0x757188", VA = "0x757188")]
		get
		{
			return default(float);
		}
	}

	public Transform PlayerTransform
	{
		[Address(RVA = "0x7561B8", Offset = "0x7561B8", VA = "0x7561B8")]
		get
		{
			return null;
		}
	}

	public int InitialHealth
	{
		[Address(RVA = "0x7571B4", Offset = "0x7571B4", VA = "0x7571B4")]
		get
		{
			return default(int);
		}
	}

	[Address(RVA = "0x757260", Offset = "0x757260", VA = "0x757260")]
	public void Awake()
	{
	}

	[Address(RVA = "0x7573B8", Offset = "0x7573B8", VA = "0x7573B8")]
	public void Start()
	{
	}

	[Address(RVA = "0x758754", Offset = "0x758754", VA = "0x758754")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677E24", Offset = "0x677E24")]
	private IEnumerator SetWeaponAfterFrame()
	{
		return null;
	}

	[Address(RVA = "0x7587C8", Offset = "0x7587C8", VA = "0x7587C8")]
	private void OVRManager_InputFocusAcquired()
	{
	}

	[Address(RVA = "0x75884C", Offset = "0x75884C", VA = "0x75884C")]
	private void OVRManager_InputFocusLost()
	{
	}

	[Address(RVA = "0x7588D0", Offset = "0x7588D0", VA = "0x7588D0")]
	private void entitlementCheckComplete(Message msg)
	{
	}

	[Address(RVA = "0x7589F8", Offset = "0x7589F8", VA = "0x7589F8")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x758FC8", Offset = "0x758FC8", VA = "0x758FC8")]
	private void Update()
	{
	}

	[Address(RVA = "0x758378", Offset = "0x758378", VA = "0x758378")]
	private void SetPlayerProperties()
	{
	}

	[Address(RVA = "0x759400", Offset = "0x759400", VA = "0x759400")]
	private void SetWeaponStats()
	{
	}

	[Address(RVA = "0x759CB4", Offset = "0x759CB4", VA = "0x759CB4")]
	public EnemyTarget GetTarget(int i)
	{
		return null;
	}

	[Address(RVA = "0x759C54", Offset = "0x759C54", VA = "0x759C54")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677E88", Offset = "0x677E88")]
	private IEnumerator SetHMD()
	{
		return null;
	}

	[Address(RVA = "0x759D38", Offset = "0x759D38", VA = "0x759D38")]
	private void ListenOculusUser(Message<Oculus.Platform.Models.User> msg)
	{
	}

	[Address(RVA = "0x759F28", Offset = "0x759F28", VA = "0x759F28")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677EEC", Offset = "0x677EEC")]
	private IEnumerator CheckForUserMod()
	{
		return null;
	}

	[Address(RVA = "0x759F88", Offset = "0x759F88", VA = "0x759F88")]
	private void CheckForTurningRight(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x75A634", Offset = "0x75A634", VA = "0x75A634")]
	private void CheckForTurningLeft(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x7591B0", Offset = "0x7591B0", VA = "0x7591B0")]
	private void CheckForTurning()
	{
	}

	[Address(RVA = "0x759FC4", Offset = "0x759FC4", VA = "0x759FC4")]
	private void TurnRight()
	{
	}

	[Address(RVA = "0x75A670", Offset = "0x75A670", VA = "0x75A670")]
	private void TurnLeft()
	{
	}

	[Address(RVA = "0x75ACE0", Offset = "0x75ACE0", VA = "0x75ACE0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677F50", Offset = "0x677F50")]
	private IEnumerator onStartLevel()
	{
		return null;
	}

	[Address(RVA = "0x75AD54", Offset = "0x75AD54", VA = "0x75AD54")]
	public void SetWeapon(int setWeapon)
	{
	}

	[Address(RVA = "0x75B644", Offset = "0x75B644", VA = "0x75B644")]
	public void SetSpecial(int setSpecial)
	{
	}

	[Address(RVA = "0x75BE6C", Offset = "0x75BE6C", VA = "0x75BE6C")]
	public void ToggleHandedness(int handedness = -1)
	{
	}

	[Address(RVA = "0x75AE18", Offset = "0x75AE18", VA = "0x75AE18")]
	private void DestroyChild(Transform obj)
	{
	}

	[Address(RVA = "0x75AEE4", Offset = "0x75AEE4", VA = "0x75AEE4")]
	public void InstantiateWeaponSet(GameObject prefab)
	{
	}

	[Address(RVA = "0x75B814", Offset = "0x75B814", VA = "0x75B814")]
	public void InstantiateSpecial(GameObject prefab)
	{
	}

	[Address(RVA = "0x75BEB8", Offset = "0x75BEB8", VA = "0x75BEB8")]
	public void TakeDamage(int damage, GameObject source, bool IsFTUEStep = false)
	{
	}

	[Address(RVA = "0x75C2E0", Offset = "0x75C2E0", VA = "0x75C2E0")]
	public bool CanUseSpecial()
	{
		return default(bool);
	}

	[Address(RVA = "0x75C3CC", Offset = "0x75C3CC", VA = "0x75C3CC")]
	public void UseSpecial()
	{
	}

	[Address(RVA = "0x75C418", Offset = "0x75C418", VA = "0x75C418")]
	public bool TriggerAbility()
	{
		return default(bool);
	}

	[Address(RVA = "0x75C4D8", Offset = "0x75C4D8", VA = "0x75C4D8")]
	public bool StartAbilityDrain()
	{
		return default(bool);
	}

	[Address(RVA = "0x75C580", Offset = "0x75C580", VA = "0x75C580")]
	public void RefundAbility(uint delta)
	{
	}

	[Address(RVA = "0x75C5FC", Offset = "0x75C5FC", VA = "0x75C5FC")]
	public bool DrainAbility(uint delta)
	{
		return default(bool);
	}

	[Address(RVA = "0x75C71C", Offset = "0x75C71C", VA = "0x75C71C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x677FB4", Offset = "0x677FB4")]
	private IEnumerator onStartGame()
	{
		return null;
	}

	[Address(RVA = "0x7590B4", Offset = "0x7590B4", VA = "0x7590B4")]
	private void HeartBeat()
	{
	}

	[Address(RVA = "0x75C790", Offset = "0x75C790", VA = "0x75C790")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678018", Offset = "0x678018")]
	private IEnumerator onPlayerHit(GameObject source)
	{
		return null;
	}

	[Address(RVA = "0x75C7F0", Offset = "0x75C7F0", VA = "0x75C7F0")]
	private bool areAbilitiesActive()
	{
		return default(bool);
	}

	[Address(RVA = "0x75C884", Offset = "0x75C884", VA = "0x75C884")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67807C", Offset = "0x67807C")]
	private IEnumerator onEnemyHit(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x75C91C", Offset = "0x75C91C", VA = "0x75C91C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6780E0", Offset = "0x6780E0")]
	private IEnumerator onSpecialCollected(GameObject doober)
	{
		return null;
	}

	[Address(RVA = "0x75C9B4", Offset = "0x75C9B4", VA = "0x75C9B4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678144", Offset = "0x678144")]
	private IEnumerator onHealthCollected(GameObject doober)
	{
		return null;
	}

	[Address(RVA = "0x75CA4C", Offset = "0x75CA4C", VA = "0x75CA4C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6781A8", Offset = "0x6781A8")]
	private IEnumerator onEnemyDead(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x75CAE4", Offset = "0x75CAE4", VA = "0x75CAE4")]
	public void GrantSpecialUntilTier1(GameObject spawnPoint)
	{
	}

	[Address(RVA = "0x75CAF8", Offset = "0x75CAF8", VA = "0x75CAF8")]
	private void spawnSpecialDoober(GameObject enemy, int grantAmount)
	{
	}

	[Address(RVA = "0x75CC30", Offset = "0x75CC30", VA = "0x75CC30")]
	private void spawnHealthDoober(GameObject enemy, int grantAmount)
	{
	}

	[Address(RVA = "0x75CD0C", Offset = "0x75CD0C", VA = "0x75CD0C")]
	private void spawnDoober(List<Doober> pool, Vector3 enemyPosition, int grantAmount)
	{
	}

	[Address(RVA = "0x75D01C", Offset = "0x75D01C", VA = "0x75D01C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67820C", Offset = "0x67820C")]
	private IEnumerator onWaveSpawned()
	{
		return null;
	}

	[Address(RVA = "0x75D090", Offset = "0x75D090", VA = "0x75D090")]
	public void SetSlowMo(float amount)
	{
	}

	[Address(RVA = "0x75D11C", Offset = "0x75D11C", VA = "0x75D11C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678270", Offset = "0x678270")]
	private IEnumerator onFinalEnemyDead()
	{
		return null;
	}

	[Address(RVA = "0x75D190", Offset = "0x75D190", VA = "0x75D190")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6782D4", Offset = "0x6782D4")]
	private IEnumerator onEnemyCritDead(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x75D228", Offset = "0x75D228", VA = "0x75D228")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678338", Offset = "0x678338")]
	private IEnumerator onEnemyBlocked(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x75D2C0", Offset = "0x75D2C0", VA = "0x75D2C0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67839C", Offset = "0x67839C")]
	private IEnumerator onBossFatalityReady(GameObject boss)
	{
		return null;
	}

	[Address(RVA = "0x75D358", Offset = "0x75D358", VA = "0x75D358")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678400", Offset = "0x678400")]
	private IEnumerator onDead()
	{
		return null;
	}

	[Address(RVA = "0x75D3CC", Offset = "0x75D3CC", VA = "0x75D3CC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678464", Offset = "0x678464")]
	private IEnumerator onGameOver()
	{
		return null;
	}

	[Address(RVA = "0x75D440", Offset = "0x75D440", VA = "0x75D440")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6784C8", Offset = "0x6784C8")]
	private IEnumerator onSpecialReady()
	{
		return null;
	}

	[Address(RVA = "0x75D4B4", Offset = "0x75D4B4", VA = "0x75D4B4")]
	public void SetPlayerSize(float size)
	{
	}

	[Address(RVA = "0x75D624", Offset = "0x75D624", VA = "0x75D624")]
	public void HidePrimaryWeapon(bool leftHand, bool rightHand)
	{
	}

	[Address(RVA = "0x75D6D4", Offset = "0x75D6D4", VA = "0x75D6D4")]
	public void SetAbilityWeapons(bool leftHandAbility, bool rightHandAbility)
	{
	}

	[Address(RVA = "0x756264", Offset = "0x756264", VA = "0x756264")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67852C", Offset = "0x67852C")]
	public IEnumerator SetHeadHeight(bool adjustActive)
	{
		return null;
	}

	[Address(RVA = "0x75C6A8", Offset = "0x75C6A8", VA = "0x75C6A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678590", Offset = "0x678590")]
	private IEnumerator onSpecialUsed()
	{
		return null;
	}

	[Address(RVA = "0x75D8F8", Offset = "0x75D8F8", VA = "0x75D8F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6785F4", Offset = "0x6785F4")]
	private IEnumerator onSpecialComplete()
	{
		return null;
	}

	[Address(RVA = "0x75D96C", Offset = "0x75D96C", VA = "0x75D96C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678658", Offset = "0x678658")]
	private IEnumerator onWeaponSelect()
	{
		return null;
	}

	[Address(RVA = "0x75D9E0", Offset = "0x75D9E0", VA = "0x75D9E0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6786BC", Offset = "0x6786BC")]
	private IEnumerator onSpecialSelect()
	{
		return null;
	}

	[Address(RVA = "0x75DA54", Offset = "0x75DA54", VA = "0x75DA54")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678720", Offset = "0x678720")]
	private IEnumerator onPause()
	{
		return null;
	}

	[Address(RVA = "0x75DAC8", Offset = "0x75DAC8", VA = "0x75DAC8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678784", Offset = "0x678784")]
	private IEnumerator onUnpaused()
	{
		return null;
	}

	[Address(RVA = "0x75DB3C", Offset = "0x75DB3C", VA = "0x75DB3C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6787E8", Offset = "0x6787E8")]
	private IEnumerator onComboDeactivate()
	{
		return null;
	}

	[Address(RVA = "0x75DBB0", Offset = "0x75DBB0", VA = "0x75DBB0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67884C", Offset = "0x67884C")]
	private IEnumerator onComboActivate()
	{
		return null;
	}

	[Address(RVA = "0x75DC24", Offset = "0x75DC24", VA = "0x75DC24")]
	public Player()
	{
	}

	[Address(RVA = "0x75DD34", Offset = "0x75DD34", VA = "0x75DD34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6788B0", Offset = "0x6788B0")]
	private void <onEnemyHit>b__86_0()
	{
	}
}
public class PlayerHitBox : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Player Player;

	[Address(RVA = "0x1557AB0", Offset = "0x1557AB0", VA = "0x1557AB0")]
	public void Hit(int damage, GameObject source)
	{
	}

	[Address(RVA = "0x1557B98", Offset = "0x1557B98", VA = "0x1557B98")]
	public PlayerHitBox()
	{
	}
}
public class PlayerHitFeedback : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65A9F0", Offset = "0x65A9F0")]
	private sealed class <onDisplayHit>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject source;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerHitFeedback <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1558844", Offset = "0x1558844", VA = "0x1558844", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15588B4", Offset = "0x15588B4", VA = "0x15588B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1557E7C", Offset = "0x1557E7C", VA = "0x1557E7C")]
		[DebuggerHidden]
		public <onDisplayHit>d__5(int <>1__state)
		{
		}

		[Address(RVA = "0x1557EB0", Offset = "0x1557EB0", VA = "0x1557EB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1557EB4", Offset = "0x1557EB4", VA = "0x1557EB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x155884C", Offset = "0x155884C", VA = "0x155884C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject vfx;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hitOtherVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float EndAlpha;

	[Address(RVA = "0x1557BA0", Offset = "0x1557BA0", VA = "0x1557BA0")]
	private void Start()
	{
	}

	[Address(RVA = "0x1557D5C", Offset = "0x1557D5C", VA = "0x1557D5C")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x1557DE4", Offset = "0x1557DE4", VA = "0x1557DE4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6788C0", Offset = "0x6788C0")]
	public IEnumerator onDisplayHit(GameObject source)
	{
		return null;
	}

	[Address(RVA = "0x1557EA8", Offset = "0x1557EA8", VA = "0x1557EA8")]
	public PlayerHitFeedback()
	{
	}
}
public class Preloader : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro TipText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject AudioInitObject;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private uint completed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<string> tips;

	[Address(RVA = "0x1559678", Offset = "0x1559678", VA = "0x1559678")]
	public void Start()
	{
	}

	[Address(RVA = "0x15597E8", Offset = "0x15597E8", VA = "0x15597E8")]
	private void configureDependencies(DependencyGraph<IInitTask> dg)
	{
	}

	[Address(RVA = "0x15599B4", Offset = "0x15599B4", VA = "0x15599B4")]
	private void onTaskComplete(string taskName)
	{
	}

	[Address(RVA = "0x1559AC8", Offset = "0x1559AC8", VA = "0x1559AC8")]
	public Preloader()
	{
	}
}
public class ProjectileSpawner : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject projectile;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] positions;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] particles;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float deathTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int t;

	[Address(RVA = "0x1559EC8", Offset = "0x1559EC8", VA = "0x1559EC8")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x1559ECC", Offset = "0x1559ECC", VA = "0x1559ECC")]
	private void SpawnArrows()
	{
	}

	[Address(RVA = "0x155A254", Offset = "0x155A254", VA = "0x155A254")]
	public ProjectileSpawner()
	{
	}
}
public class ProjectileTeleport : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetPos;

	[Address(RVA = "0x155A264", Offset = "0x155A264", VA = "0x155A264")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Address(RVA = "0x155A55C", Offset = "0x155A55C", VA = "0x155A55C")]
	public void OnTriggerEnter(Collider collider)
	{
	}

	[Address(RVA = "0x155A83C", Offset = "0x155A83C", VA = "0x155A83C")]
	public ProjectileTeleport()
	{
	}
}
public class RandomRotation : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float AnglePerSecond;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 direction;

	[Address(RVA = "0x155B90C", Offset = "0x155B90C", VA = "0x155B90C")]
	private void Start()
	{
	}

	[Address(RVA = "0x155B938", Offset = "0x155B938", VA = "0x155B938")]
	private void Update()
	{
	}

	[Address(RVA = "0x155BA34", Offset = "0x155BA34", VA = "0x155BA34")]
	public RandomRotation()
	{
	}
}
public class RaycastTracker : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject TrackingObject;

	[Address(RVA = "0x155BA44", Offset = "0x155BA44", VA = "0x155BA44")]
	private void Update()
	{
	}

	[Address(RVA = "0x155BD14", Offset = "0x155BD14", VA = "0x155BD14")]
	public RaycastTracker()
	{
	}
}
public class RotateOppositePlayerForward : MonoBehaviour
{
	[Address(RVA = "0x155E47C", Offset = "0x155E47C", VA = "0x155E47C")]
	private void Start()
	{
	}

	[Address(RVA = "0x155E65C", Offset = "0x155E65C", VA = "0x155E65C")]
	public RotateOppositePlayerForward()
	{
	}
}
public class RotateOppositePlayerForwardConstantly : MonoBehaviour
{
	[Address(RVA = "0x155E664", Offset = "0x155E664", VA = "0x155E664")]
	private void Update()
	{
	}

	[Address(RVA = "0x155E844", Offset = "0x155E844", VA = "0x155E844")]
	public RotateOppositePlayerForwardConstantly()
	{
	}
}
public class Rumble : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float strength;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float pulse;

	[Address(RVA = "0x155E84C", Offset = "0x155E84C", VA = "0x155E84C")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x155E984", Offset = "0x155E984", VA = "0x155E984")]
	public Rumble()
	{
	}
}
public class ScaleBasedOnDistanceFromPlayer : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ScaleMax;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ScaleMin;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color ColorMax;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color ColorMin;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<MeshRenderer> meshes;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float elapsed;

	[Address(RVA = "0x155EC3C", Offset = "0x155EC3C", VA = "0x155EC3C")]
	private void Update()
	{
	}

	[Address(RVA = "0x155F06C", Offset = "0x155F06C", VA = "0x155F06C")]
	public ScaleBasedOnDistanceFromPlayer()
	{
	}
}
public class SceneConfirmation : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool called;

	[Address(RVA = "0x155F0C0", Offset = "0x155F0C0", VA = "0x155F0C0")]
	public void Awake()
	{
	}

	[Address(RVA = "0x155F180", Offset = "0x155F180", VA = "0x155F180")]
	public SceneConfirmation()
	{
	}
}
public class SceneHandler : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA00", Offset = "0x65AA00")]
	private sealed class <>c__DisplayClass11_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SceneHandler <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Func<IEnumerator> post;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool shouldStartLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool activateImmediately;

		[Address(RVA = "0x155FC1C", Offset = "0x155FC1C", VA = "0x155FC1C")]
		public <>c__DisplayClass11_0()
		{
		}

		[Address(RVA = "0x155FD6C", Offset = "0x155FD6C", VA = "0x155FD6C")]
		internal void <loadSceneByName>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA10", Offset = "0x65AA10")]
	private sealed class <>c__DisplayClass12_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SceneHandler <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int index;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Func<IEnumerator> post;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool shouldStartLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool activateImmediately;

		[Address(RVA = "0x155FC24", Offset = "0x155FC24", VA = "0x155FC24")]
		public <>c__DisplayClass12_0()
		{
		}

		[Address(RVA = "0x156008C", Offset = "0x156008C", VA = "0x156008C")]
		internal void <loadSceneByIndex>b__0()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA20", Offset = "0x65AA20")]
	private sealed class <doneLoading>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneHandler <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15603F4", Offset = "0x15603F4", VA = "0x15603F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1560464", Offset = "0x1560464", VA = "0x1560464", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x155FCA0", Offset = "0x155FCA0", VA = "0x155FCA0")]
		[DebuggerHidden]
		public <doneLoading>d__14(int <>1__state)
		{
		}

		[Address(RVA = "0x15603B0", Offset = "0x15603B0", VA = "0x15603B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x15603B4", Offset = "0x15603B4", VA = "0x15603B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15603FC", Offset = "0x15603FC", VA = "0x15603FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA30", Offset = "0x65AA30")]
	private sealed class <startLevel>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15604D8", Offset = "0x15604D8", VA = "0x15604D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1560548", Offset = "0x1560548", VA = "0x1560548", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x155FD2C", Offset = "0x155FD2C", VA = "0x155FD2C")]
		[DebuggerHidden]
		public <startLevel>d__15(int <>1__state)
		{
		}

		[Address(RVA = "0x156046C", Offset = "0x156046C", VA = "0x156046C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1560470", Offset = "0x1560470", VA = "0x1560470", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15604E0", Offset = "0x15604E0", VA = "0x15604E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SceneHandler instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, List<Func<IEnumerator>>> postSceneNameCallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<int, List<Func<IEnumerator>>> postSceneIndexCallbacks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AsyncOperation async;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isLoading;

	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool executePostSceneCallbacks;

	[Address(RVA = "0x1559A30", Offset = "0x1559A30", VA = "0x1559A30")]
	public static void LoadSceneByName(string name, [Optional] Func<IEnumerator> post, bool shouldStartLevel = false, bool instant = false, bool activateImmediately = true)
	{
	}

	[Address(RVA = "0x155F3EC", Offset = "0x155F3EC", VA = "0x155F3EC")]
	public static void LoadSceneByIndex(int index, [Optional] Func<IEnumerator> post, bool shouldStartLevel = false, bool instant = false, bool activateImmediately = true)
	{
	}

	[Address(RVA = "0x155F6E8", Offset = "0x155F6E8", VA = "0x155F6E8")]
	public static void ActivateScene()
	{
	}

	[Address(RVA = "0x155F77C", Offset = "0x155F77C", VA = "0x155F77C")]
	public void Start()
	{
	}

	[Address(RVA = "0x155F864", Offset = "0x155F864", VA = "0x155F864")]
	public void Update()
	{
	}

	[Address(RVA = "0x155F18C", Offset = "0x155F18C", VA = "0x155F18C")]
	private void loadSceneByName(string name, [Optional] Func<IEnumerator> post, bool shouldStartLevel = false, bool instant = false, bool activateImmediately = true)
	{
	}

	[Address(RVA = "0x155F484", Offset = "0x155F484", VA = "0x155F484")]
	private void loadSceneByIndex(int index, [Optional] Func<IEnumerator> post, bool shouldStartLevel = false, bool instant = false, bool activateImmediately = true)
	{
	}

	[Address(RVA = "0x155F748", Offset = "0x155F748", VA = "0x155F748")]
	private void activateScene()
	{
	}

	[Address(RVA = "0x155FC2C", Offset = "0x155FC2C", VA = "0x155FC2C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678924", Offset = "0x678924")]
	private IEnumerator doneLoading()
	{
		return null;
	}

	[Address(RVA = "0x155FCCC", Offset = "0x155FCCC", VA = "0x155FCCC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678988", Offset = "0x678988")]
	private IEnumerator startLevel()
	{
		return null;
	}

	[Address(RVA = "0x155FD58", Offset = "0x155FD58", VA = "0x155FD58")]
	private void changedActiveScene(Scene current, Scene next)
	{
	}

	[Address(RVA = "0x155FD64", Offset = "0x155FD64", VA = "0x155FD64")]
	public SceneHandler()
	{
	}
}
public class SecretUnlockCounter : Cutable
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int count;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool unlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float audioCooldown;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<int> objects;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float lastAudioTime;

	[Address(RVA = "0x1565574", Offset = "0x1565574", VA = "0x1565574")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Address(RVA = "0x1565990", Offset = "0x1565990", VA = "0x1565990")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Address(RVA = "0x1565E3C", Offset = "0x1565E3C", VA = "0x1565E3C")]
	public SecretUnlockCounter()
	{
	}
}
public class ShaderWarmer : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShaderVariantCollection shaderCollection;

	[Address(RVA = "0x1567A34", Offset = "0x1567A34", VA = "0x1567A34")]
	public ShaderWarmer()
	{
	}
}
public class ShadowSelector : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CardShadow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ProjectionShadow;

	[Address(RVA = "0x156B4D4", Offset = "0x156B4D4", VA = "0x156B4D4")]
	private void Start()
	{
	}

	[Address(RVA = "0x156B634", Offset = "0x156B634", VA = "0x156B634")]
	public ShadowSelector()
	{
	}
}
public class SliceShaderHelper : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform posRoot;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material mat;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector4> Normals;

	[Address(RVA = "0x981540", Offset = "0x981540", VA = "0x981540")]
	private void Start()
	{
	}

	[Address(RVA = "0x981794", Offset = "0x981794", VA = "0x981794")]
	private void Update()
	{
	}

	[Address(RVA = "0x981884", Offset = "0x981884", VA = "0x981884")]
	public SliceShaderHelper()
	{
	}
}
public class SpecialNotification : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image MessageImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Particles;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float FadeTime;

	[Address(RVA = "0x985634", Offset = "0x985634", VA = "0x985634")]
	private void Start()
	{
	}

	[Address(RVA = "0x985638", Offset = "0x985638", VA = "0x985638")]
	public SpecialNotification()
	{
	}
}
public class AttackState : State
{
	[Address(RVA = "0x8A79C0", Offset = "0x8A79C0", VA = "0x8A79C0")]
	public AttackState(string name, [Optional] List<Pivot> pivots, [Optional] Action<Action> beforeEnterCallback, [Optional] Action<Action, object> enterCallback, [Optional] Action updateCallback, [Optional] Action exitCallback)
	{
	}
}
public class Machine
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA40", Offset = "0x65AA40")]
	private sealed class <>c__DisplayClass8_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string nextStateName;

		[Address(RVA = "0x8FF574", Offset = "0x8FF574", VA = "0x8FF574")]
		public <>c__DisplayClass8_0()
		{
		}

		[Address(RVA = "0x8FF57C", Offset = "0x8FF57C", VA = "0x8FF57C")]
		internal bool <Handle>b__0(State s)
		{
			return default(bool);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public State State;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<State> States;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Pivot> GlobalPivots;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Action BeforeStateChange;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool active;

	[Address(RVA = "0x83A550", Offset = "0x83A550", VA = "0x83A550")]
	public Machine(List<State> states, State defaultState, [Optional] Action beforeStateChange)
	{
	}

	[Address(RVA = "0x83A594", Offset = "0x83A594", VA = "0x83A594")]
	public void Start()
	{
	}

	[Address(RVA = "0x83A5BC", Offset = "0x83A5BC", VA = "0x83A5BC")]
	public void Update()
	{
	}

	[Address(RVA = "0x83A5EC", Offset = "0x83A5EC", VA = "0x83A5EC")]
	public void Handle(string trigger, [Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x83A790", Offset = "0x83A790", VA = "0x83A790")]
	public void AddState(State state)
	{
	}

	[Address(RVA = "0x83A82C", Offset = "0x83A82C", VA = "0x83A82C")]
	public void AddGlobalPivot(Pivot pivot)
	{
	}

	[Address(RVA = "0x83A8C8", Offset = "0x83A8C8", VA = "0x83A8C8")]
	public void ClearGlobalPivots()
	{
	}
}
public class Pivot
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Trigger;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string StateName;

	[Address(RVA = "0x7570D8", Offset = "0x7570D8", VA = "0x7570D8")]
	public Pivot(string trigger, string stateName)
	{
	}
}
public class State
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA50", Offset = "0x65AA50")]
	private sealed class <>c__DisplayClass7_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string trigger;

		[Address(RVA = "0x9880AC", Offset = "0x9880AC", VA = "0x9880AC")]
		public <>c__DisplayClass7_0()
		{
		}

		[Address(RVA = "0x988268", Offset = "0x988268", VA = "0x988268")]
		internal bool <Handle>b__0(Pivot p)
		{
			return default(bool);
		}

		[Address(RVA = "0x9882A0", Offset = "0x9882A0", VA = "0x9882A0")]
		internal bool <Handle>b__1(Pivot p)
		{
			return default(bool);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Pivot> pivots;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action<Action> beforeEnterCallback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Action<Action, object> enterCallback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Action updateCallback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Action exitCallback;

	[Address(RVA = "0x986F14", Offset = "0x986F14", VA = "0x986F14")]
	public State(string name, [Optional] List<Pivot> pivots, [Optional] Action<Action> beforeEnterCallback, [Optional] Action<Action, object> enterCallback, [Optional] Action updateCallback, [Optional] Action exitCallback)
	{
	}

	[Address(RVA = "0x986F74", Offset = "0x986F74", VA = "0x986F74")]
	public string Handle(string trigger, List<Pivot> globalPivots)
	{
		return null;
	}

	[Address(RVA = "0x9880B4", Offset = "0x9880B4", VA = "0x9880B4")]
	public void BeforeEnter([Optional] Action callback)
	{
	}

	[Address(RVA = "0x988128", Offset = "0x988128", VA = "0x988128")]
	public void Enter([Optional] Action callback, [Optional] object payload)
	{
	}

	[Address(RVA = "0x9881A4", Offset = "0x9881A4", VA = "0x9881A4")]
	public void Update()
	{
	}

	[Address(RVA = "0x9881B8", Offset = "0x9881B8", VA = "0x9881B8")]
	public void Exit()
	{
	}

	[Address(RVA = "0x9881CC", Offset = "0x9881CC", VA = "0x9881CC")]
	public void AddPivot(Pivot pivot)
	{
	}
}
public class EventProperties
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string SCENE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string WEAPON;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string SPECIAL;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string DIFFICULTY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string MODE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string SECRETS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string SETTINGS;

	[Address(RVA = "0x7C9DD0", Offset = "0x7C9DD0", VA = "0x7C9DD0")]
	public static Dictionary<string, string> Get()
	{
		return null;
	}

	[Address(RVA = "0x7CA0B4", Offset = "0x7CA0B4", VA = "0x7CA0B4")]
	public EventProperties()
	{
	}
}
public class UserProperties
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string VERSION;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string PLATFORM;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string USER_NAME;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string COHORT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string TENURE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string STARTS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string WINS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string DEATHS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string UNLOCKED_LEVEL;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string UNLOCKED_SPECIALS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string UNLOCKED_WEAPONS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string UNLOCKED_SECRETS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string STARTS_EASY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string STARTS_MEDIUM;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string STARTS_HARD;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string STARTS_EXPERT;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string STARTS_MASTER;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string FAVORITE_WEAPON;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string FAVORITE_SPECIAL;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string GRAPHICS_CARD;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string HMD;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string OS;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string PROCESSOR;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string MEMORY_CAPACITY;

	[Address(RVA = "0x8C93B0", Offset = "0x8C93B0", VA = "0x8C93B0")]
	public UserProperties()
	{
	}
}
public class Stats : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA60", Offset = "0x65AA60")]
	private sealed class <>c__DisplayClass20_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<string, string> vals;

		[Address(RVA = "0x7DE770", Offset = "0x7DE770", VA = "0x7DE770")]
		public <>c__DisplayClass20_0()
		{
		}

		[Address(RVA = "0x7DE778", Offset = "0x7DE778", VA = "0x7DE778")]
		internal void <SetEventPropertiesAndLogEvent>b__0(KeyValuePair<string, string> e)
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA70", Offset = "0x65AA70")]
	private sealed class <SetEventPropertiesAndLogEvent>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<string, string> vals;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Stats <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass20_0 <>8__1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string eventType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <start>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DEB98", Offset = "0x7DEB98", VA = "0x7DEB98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DEC08", Offset = "0x7DEC08", VA = "0x7DEC08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DCA88", Offset = "0x7DCA88", VA = "0x7DCA88")]
		[DebuggerHidden]
		public <SetEventPropertiesAndLogEvent>d__20(int <>1__state)
		{
		}

		[Address(RVA = "0x7DE828", Offset = "0x7DE828", VA = "0x7DE828", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DE82C", Offset = "0x7DE82C", VA = "0x7DE82C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DEBA0", Offset = "0x7DEBA0", VA = "0x7DEBA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA80", Offset = "0x65AA80")]
	private sealed class <post>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string postData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityWebRequest <www>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7DED40", Offset = "0x7DED40", VA = "0x7DED40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7DEDB0", Offset = "0x7DEDB0", VA = "0x7DEDB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7DE5D4", Offset = "0x7DE5D4", VA = "0x7DE5D4")]
		[DebuggerHidden]
		public <post>d__22(int <>1__state)
		{
		}

		[Address(RVA = "0x7DEC10", Offset = "0x7DEC10", VA = "0x7DEC10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7DEC14", Offset = "0x7DEC14", VA = "0x7DEC14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7DED48", Offset = "0x7DED48", VA = "0x7DED48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Stats instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string Version;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string NULL_USER_ID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static string API;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static string KEY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ConnectionRetryPeriodInS;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, string> userProperties;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool connected;

	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool disabled;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string userId;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<string> traces;

	[Address(RVA = "0x7DC090", Offset = "0x7DC090", VA = "0x7DC090")]
	public static void AddUserProperty(string prop, string val)
	{
	}

	[Address(RVA = "0x7DC284", Offset = "0x7DC284", VA = "0x7DC284")]
	public static void SetUserID(string newUserId)
	{
	}

	[Address(RVA = "0x7DC3E4", Offset = "0x7DC3E4", VA = "0x7DC3E4")]
	public static string GetUserID()
	{
		return null;
	}

	[Address(RVA = "0x7DC514", Offset = "0x7DC514", VA = "0x7DC514")]
	public static void LogEvent(string eventType, Dictionary<string, string> vals)
	{
	}

	[Address(RVA = "0x7DC684", Offset = "0x7DC684", VA = "0x7DC684")]
	public void Start()
	{
	}

	[Address(RVA = "0x7DC6F0", Offset = "0x7DC6F0", VA = "0x7DC6F0")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7DC764", Offset = "0x7DC764", VA = "0x7DC764")]
	private void LogCallback(string condition, string stackTrace, LogType type)
	{
	}

	[Address(RVA = "0x7DC964", Offset = "0x7DC964", VA = "0x7DC964")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7DC640", Offset = "0x7DC640", VA = "0x7DC640")]
	private void LogEventInternal(string eventType, Dictionary<string, string> vals)
	{
	}

	[Address(RVA = "0x7DC9D8", Offset = "0x7DC9D8", VA = "0x7DC9D8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6789EC", Offset = "0x6789EC")]
	private IEnumerator SetEventPropertiesAndLogEvent(string eventType, Dictionary<string, string> vals)
	{
		return null;
	}

	[Address(RVA = "0x7DCAB4", Offset = "0x7DCAB4", VA = "0x7DCAB4")]
	private void send(string eventType, Dictionary<string, string> vals)
	{
	}

	[Address(RVA = "0x7DE560", Offset = "0x7DE560", VA = "0x7DE560")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678A50", Offset = "0x678A50")]
	private IEnumerator post(string postData)
	{
		return null;
	}

	[Address(RVA = "0x7DC1B0", Offset = "0x7DC1B0", VA = "0x7DC1B0")]
	private void addUserPropertyInternal(string prop, string val)
	{
	}

	[Address(RVA = "0x7DE14C", Offset = "0x7DE14C", VA = "0x7DE14C")]
	private static string dictionaryToString(Dictionary<string, string> dic)
	{
		return null;
	}

	[Address(RVA = "0x7DE600", Offset = "0x7DE600", VA = "0x7DE600")]
	public Stats()
	{
	}
}
public class Cache<T>
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Func<string, T> get;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Action<string, T> set;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Action<string> remove;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<string, T> cache;

	public Cache(Func<string, T> get, Action<string, T> set, Action<string> remove)
	{
	}

	public T Get(string key)
	{
		return (T)null;
	}

	public void Set(string key, T value)
	{
	}

	public void Remove(string key)
	{
	}

	public void RemoveAll()
	{
	}

	public string ExportData()
	{
		return null;
	}
}
public class StorageKeys
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string HasSeenFTUE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string SelectedLevel;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string SelectedWorld;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string UnlockedLevel;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string Difficulty;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string Mode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string Special;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string Weapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string LastSpecial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string LastWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string SpecialUnlocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string WeaponUnlocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string SetWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string SettingsActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string SecretsActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string SecretsUnlocked;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string Install;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string Wins;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string Deaths;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static string Starts;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string StartsSpecial;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static string StartsWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static string StartsEasy;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static string StartsMedium;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static string StartsHard;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static string StartsExpert;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static string StartsMaster;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static string Leaderboard;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static string LevelsCompleted;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static string TotalSwings;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static string TotalKills;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static string ExpertCompleted;

	[Address(RVA = "0x72541C", Offset = "0x72541C", VA = "0x72541C")]
	public StorageKeys()
	{
	}
}
public class Storage : MonoBehaviour
{
	[Serializable]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AA90", Offset = "0x65AA90")]
	private sealed class <>c
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<string, bool> <>9__16_0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Action<string, bool> <>9__16_1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action<string> <>9__16_2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Func<string, int> <>9__16_3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Action<string, int> <>9__16_4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static Action<string> <>9__16_5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Func<string, string> <>9__16_6;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static Action<string, string> <>9__16_7;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Action<string> <>9__16_8;

		[Address(RVA = "0x725380", Offset = "0x725380", VA = "0x725380")]
		public <>c()
		{
		}

		[Address(RVA = "0x725388", Offset = "0x725388", VA = "0x725388")]
		internal bool <Init>b__16_0(string key)
		{
			return default(bool);
		}

		[Address(RVA = "0x7253AC", Offset = "0x7253AC", VA = "0x7253AC")]
		internal void <Init>b__16_1(string key, bool value)
		{
		}

		[Address(RVA = "0x7253C0", Offset = "0x7253C0", VA = "0x7253C0")]
		internal void <Init>b__16_2(string key)
		{
		}

		[Address(RVA = "0x7253CC", Offset = "0x7253CC", VA = "0x7253CC")]
		internal int <Init>b__16_3(string key)
		{
			return default(int);
		}

		[Address(RVA = "0x7253D8", Offset = "0x7253D8", VA = "0x7253D8")]
		internal void <Init>b__16_4(string key, int value)
		{
		}

		[Address(RVA = "0x7253E8", Offset = "0x7253E8", VA = "0x7253E8")]
		internal void <Init>b__16_5(string key)
		{
		}

		[Address(RVA = "0x7253F4", Offset = "0x7253F4", VA = "0x7253F4")]
		internal string <Init>b__16_6(string key)
		{
			return null;
		}

		[Address(RVA = "0x725400", Offset = "0x725400", VA = "0x725400")]
		internal void <Init>b__16_7(string key, string value)
		{
		}

		[Address(RVA = "0x725410", Offset = "0x725410", VA = "0x725410")]
		internal void <Init>b__16_8(string key)
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Storage store;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SaveEveryNSeconds;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Cache<bool> bools;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Cache<int> ints;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Cache<string> strings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float lastSaveTime;

	public static Storage Instance
	{
		[Address(RVA = "0x7247A0", Offset = "0x7247A0", VA = "0x7247A0")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x724E38", Offset = "0x724E38", VA = "0x724E38")]
	public static void Reset()
	{
	}

	[Address(RVA = "0x724F14", Offset = "0x724F14", VA = "0x724F14")]
	public static bool GetBool(string key)
	{
		return default(bool);
	}

	[Address(RVA = "0x724F88", Offset = "0x724F88", VA = "0x724F88")]
	public static void SetBool(string key, bool value)
	{
	}

	[Address(RVA = "0x72500C", Offset = "0x72500C", VA = "0x72500C")]
	public static string GetString(string key)
	{
		return null;
	}

	[Address(RVA = "0x725080", Offset = "0x725080", VA = "0x725080")]
	public static void SetString(string key, string value)
	{
	}

	[Address(RVA = "0x725104", Offset = "0x725104", VA = "0x725104")]
	public static int GetInt(string key)
	{
		return default(int);
	}

	[Address(RVA = "0x725178", Offset = "0x725178", VA = "0x725178")]
	public static void SetInt(string key, int value)
	{
	}

	[Address(RVA = "0x7251FC", Offset = "0x7251FC", VA = "0x7251FC")]
	public static string ExportIntsData()
	{
		return null;
	}

	[Address(RVA = "0x724888", Offset = "0x724888", VA = "0x724888")]
	public void Init()
	{
	}

	[Address(RVA = "0x725268", Offset = "0x725268", VA = "0x725268")]
	public void Start()
	{
	}

	[Address(RVA = "0x725290", Offset = "0x725290", VA = "0x725290")]
	public void Update()
	{
	}

	[Address(RVA = "0x7252DC", Offset = "0x7252DC", VA = "0x7252DC")]
	private void save()
	{
	}

	[Address(RVA = "0x72530C", Offset = "0x72530C", VA = "0x72530C")]
	public Storage()
	{
	}
}
public class TimeManager : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AAA0", Offset = "0x65AAA0")]
	private sealed class <onStartLevel>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TimeManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x733084", Offset = "0x733084", VA = "0x733084", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7330F4", Offset = "0x7330F4", VA = "0x7330F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x732EC0", Offset = "0x732EC0", VA = "0x732EC0")]
		[DebuggerHidden]
		public <onStartLevel>d__25(int <>1__state)
		{
		}

		[Address(RVA = "0x732FCC", Offset = "0x732FCC", VA = "0x732FCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x732FD0", Offset = "0x732FD0", VA = "0x732FD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x73308C", Offset = "0x73308C", VA = "0x73308C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TimeManager instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool Paused;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float CombatSlowMotionTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool AbilitySlowmo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float AbilityScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float PhysicsRate;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TimeSpentInHardPause;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float hardPauseStartTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool HardPaused;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool PausedTimeForHardPause;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string pauseReason;

	public static TimeManager Instance
	{
		[Address(RVA = "0x7324D0", Offset = "0x7324D0", VA = "0x7324D0")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x7325D0", Offset = "0x7325D0", VA = "0x7325D0")]
	private void SetScale(float overrideScale = -1f)
	{
	}

	[Address(RVA = "0x732838", Offset = "0x732838", VA = "0x732838")]
	public void Reset()
	{
	}

	[Address(RVA = "0x732AA4", Offset = "0x732AA4", VA = "0x732AA4")]
	public void Pause()
	{
	}

	[Address(RVA = "0x732AB4", Offset = "0x732AB4", VA = "0x732AB4")]
	public bool HardPause(string reason)
	{
		return default(bool);
	}

	[Address(RVA = "0x732BB4", Offset = "0x732BB4", VA = "0x732BB4")]
	public void UnHardPause(string reason)
	{
	}

	[Address(RVA = "0x732CEC", Offset = "0x732CEC", VA = "0x732CEC")]
	public void ResetHardPauseTimer()
	{
	}

	[Address(RVA = "0x732CF8", Offset = "0x732CF8", VA = "0x732CF8")]
	public void UnPause()
	{
	}

	[Address(RVA = "0x732D04", Offset = "0x732D04", VA = "0x732D04")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Address(RVA = "0x732868", Offset = "0x732868", VA = "0x732868")]
	public void SetCombatSlowmo(float amount, float scale = -1f)
	{
	}

	[Address(RVA = "0x7329B0", Offset = "0x7329B0", VA = "0x7329B0")]
	public void SetAbilityTimescale(float amount)
	{
	}

	[Address(RVA = "0x732D0C", Offset = "0x732D0C", VA = "0x732D0C")]
	public void Start()
	{
	}

	[Address(RVA = "0x732DC4", Offset = "0x732DC4", VA = "0x732DC4")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x732E4C", Offset = "0x732E4C", VA = "0x732E4C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678AB4", Offset = "0x678AB4")]
	private IEnumerator onStartLevel()
	{
		return null;
	}

	[Address(RVA = "0x732EEC", Offset = "0x732EEC", VA = "0x732EEC")]
	private void Update()
	{
	}

	[Address(RVA = "0x732F5C", Offset = "0x732F5C", VA = "0x732F5C")]
	public TimeManager()
	{
	}
}
public class BoundsDisplay : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AAB0", Offset = "0x65AAB0")]
	private sealed class <onUnPause>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoundsDisplay <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8B6814", Offset = "0x8B6814", VA = "0x8B6814", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8B6884", Offset = "0x8B6884", VA = "0x8B6884", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8B6794", Offset = "0x8B6794", VA = "0x8B6794")]
		[DebuggerHidden]
		public <onUnPause>d__9(int <>1__state)
		{
		}

		[Address(RVA = "0x8B67C8", Offset = "0x8B67C8", VA = "0x8B67C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8B67CC", Offset = "0x8B67CC", VA = "0x8B67CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8B681C", Offset = "0x8B681C", VA = "0x8B681C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BoundsDisplay instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer lineRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float maxX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float minX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float maxZ;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float minZ;

	[Address(RVA = "0x8B5EB8", Offset = "0x8B5EB8", VA = "0x8B5EB8")]
	public void SetBounds(float size = 1f)
	{
	}

	[Address(RVA = "0x8B65EC", Offset = "0x8B65EC", VA = "0x8B65EC")]
	private void Start()
	{
	}

	[Address(RVA = "0x8B6698", Offset = "0x8B6698", VA = "0x8B6698")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x8B6720", Offset = "0x8B6720", VA = "0x8B6720")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678B18", Offset = "0x678B18")]
	private IEnumerator onUnPause()
	{
		return null;
	}

	[Address(RVA = "0x8B67C0", Offset = "0x8B67C0", VA = "0x8B67C0")]
	public BoundsDisplay()
	{
	}
}
public class DuringGameUI : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AAC0", Offset = "0x65AAC0")]
	private sealed class <onFTUEShowSpecialBar>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DuringGameUI <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C51CC", Offset = "0x7C51CC", VA = "0x7C51CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C523C", Offset = "0x7C523C", VA = "0x7C523C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C3050", Offset = "0x7C3050", VA = "0x7C3050")]
		[DebuggerHidden]
		public <onFTUEShowSpecialBar>d__26(int <>1__state)
		{
		}

		[Address(RVA = "0x7C516C", Offset = "0x7C516C", VA = "0x7C516C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C5170", Offset = "0x7C5170", VA = "0x7C5170", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C51D4", Offset = "0x7C51D4", VA = "0x7C51D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AAD0", Offset = "0x65AAD0")]
	private sealed class <onFTUEHideSpecialBar>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DuringGameUI <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C50F4", Offset = "0x7C50F4", VA = "0x7C50F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C5164", Offset = "0x7C5164", VA = "0x7C5164", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C30F0", Offset = "0x7C30F0", VA = "0x7C30F0")]
		[DebuggerHidden]
		public <onFTUEHideSpecialBar>d__27(int <>1__state)
		{
		}

		[Address(RVA = "0x7C5094", Offset = "0x7C5094", VA = "0x7C5094", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C5098", Offset = "0x7C5098", VA = "0x7C5098", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C50FC", Offset = "0x7C50FC", VA = "0x7C50FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AAE0", Offset = "0x65AAE0")]
	private sealed class <UpdateHealthHighlight>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DuringGameUI <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C4DA8", Offset = "0x7C4DA8", VA = "0x7C4DA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C4E18", Offset = "0x7C4E18", VA = "0x7C4E18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C3EE8", Offset = "0x7C3EE8", VA = "0x7C3EE8")]
		[DebuggerHidden]
		public <UpdateHealthHighlight>d__31(int <>1__state)
		{
		}

		[Address(RVA = "0x7C4B4C", Offset = "0x7C4B4C", VA = "0x7C4B4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C4B50", Offset = "0x7C4B50", VA = "0x7C4B50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C4DB0", Offset = "0x7C4DB0", VA = "0x7C4DB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AAF0", Offset = "0x65AAF0")]
	private sealed class <onEnemyDead>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DuringGameUI <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C501C", Offset = "0x7C501C", VA = "0x7C501C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C508C", Offset = "0x7C508C", VA = "0x7C508C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C413C", Offset = "0x7C413C", VA = "0x7C413C")]
		[DebuggerHidden]
		public <onEnemyDead>d__33(int <>1__state)
		{
		}

		[Address(RVA = "0x7C4E20", Offset = "0x7C4E20", VA = "0x7C4E20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C4E24", Offset = "0x7C4E24", VA = "0x7C4E24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C5024", Offset = "0x7C5024", VA = "0x7C5024", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB00", Offset = "0x65AB00")]
	private sealed class <UpdateBossHighlight>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DuringGameUI <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7C4AD4", Offset = "0x7C4AD4", VA = "0x7C4AD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7C4B44", Offset = "0x7C4B44", VA = "0x7C4B44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7C4830", Offset = "0x7C4830", VA = "0x7C4830")]
		[DebuggerHidden]
		public <UpdateBossHighlight>d__38(int <>1__state)
		{
		}

		[Address(RVA = "0x7C4878", Offset = "0x7C4878", VA = "0x7C4878", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7C487C", Offset = "0x7C487C", VA = "0x7C487C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7C4ADC", Offset = "0x7C4ADC", VA = "0x7C4ADC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject bossHealthContainer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject specialHealthContainer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image health;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image healthHighlight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image boss;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image bossHighlight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image[] specials;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI waveTitleText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI waveText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI difficultyText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Player player;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Image specialImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Color specialColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject extras;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MeshRenderer leftIndicator;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public MeshRenderer rightIndicator;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float healthWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float specialWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float bossWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int kills;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float distance;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float side;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float periferal;

	[Address(RVA = "0x7C1368", Offset = "0x7C1368", VA = "0x7C1368")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7C1598", Offset = "0x7C1598", VA = "0x7C1598")]
	private void Start()
	{
	}

	[Address(RVA = "0x7C1BE8", Offset = "0x7C1BE8", VA = "0x7C1BE8")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x7C1FDC", Offset = "0x7C1FDC", VA = "0x7C1FDC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678B7C", Offset = "0x678B7C")]
	private IEnumerator onFTUEShowSpecialBar()
	{
		return null;
	}

	[Address(RVA = "0x7C307C", Offset = "0x7C307C", VA = "0x7C307C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678BE0", Offset = "0x678BE0")]
	private IEnumerator onFTUEHideSpecialBar()
	{
		return null;
	}

	[Address(RVA = "0x7C311C", Offset = "0x7C311C", VA = "0x7C311C")]
	public void Update()
	{
	}

	[Address(RVA = "0x7C3BF0", Offset = "0x7C3BF0", VA = "0x7C3BF0")]
	private string FormatTime(float time)
	{
		return null;
	}

	[Address(RVA = "0x7C3CF8", Offset = "0x7C3CF8", VA = "0x7C3CF8")]
	public void UpdateHealth(int newHealth)
	{
	}

	[Address(RVA = "0x7C3E74", Offset = "0x7C3E74", VA = "0x7C3E74")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678C44", Offset = "0x678C44")]
	private IEnumerator UpdateHealthHighlight()
	{
		return null;
	}

	[Address(RVA = "0x7C3F14", Offset = "0x7C3F14", VA = "0x7C3F14")]
	public void UpdateWave(int wave)
	{
	}

	[Address(RVA = "0x7C40C8", Offset = "0x7C40C8", VA = "0x7C40C8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678CA8", Offset = "0x678CA8")]
	private IEnumerator onEnemyDead(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x7C4168", Offset = "0x7C4168", VA = "0x7C4168")]
	public void UpdateSpecial(uint specialVal, uint specialRequired, uint specialMax)
	{
	}

	[Address(RVA = "0x7C45C8", Offset = "0x7C45C8", VA = "0x7C45C8")]
	public void BossStart()
	{
	}

	[Address(RVA = "0x7C4694", Offset = "0x7C4694", VA = "0x7C4694")]
	public void BossUpdate(float percentage)
	{
	}

	[Address(RVA = "0x7C47FC", Offset = "0x7C47FC", VA = "0x7C47FC")]
	public void BossEnd()
	{
	}

	[Address(RVA = "0x7C4788", Offset = "0x7C4788", VA = "0x7C4788")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678D0C", Offset = "0x678D0C")]
	private IEnumerator UpdateBossHighlight()
	{
		return null;
	}

	[Address(RVA = "0x7C485C", Offset = "0x7C485C", VA = "0x7C485C")]
	public DuringGameUI()
	{
	}
}
public class FailDialog : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI percentCompleteText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image percentCompleteBar;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float percentage;

	[Address(RVA = "0x7D58C8", Offset = "0x7D58C8", VA = "0x7D58C8")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x7D5AFC", Offset = "0x7D5AFC", VA = "0x7D5AFC")]
	public void SetProgress(float percentage)
	{
	}

	[Address(RVA = "0x7D5B04", Offset = "0x7D5B04", VA = "0x7D5B04")]
	public FailDialog()
	{
	}
}
public class FollowPlayerFacing : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 offsetPos;

	[Address(RVA = "0x6F7174", Offset = "0x6F7174", VA = "0x6F7174")]
	private void Start()
	{
	}

	[Address(RVA = "0x6F71B8", Offset = "0x6F71B8", VA = "0x6F71B8")]
	private void Update()
	{
	}

	[Address(RVA = "0x6F7418", Offset = "0x6F7418", VA = "0x6F7418")]
	public FollowPlayerFacing()
	{
	}
}
public class FoveatedRendering : MonoBehaviour
{
	[Address(RVA = "0x6F7420", Offset = "0x6F7420", VA = "0x6F7420")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x6F7484", Offset = "0x6F7484", VA = "0x6F7484")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x6F74E8", Offset = "0x6F74E8", VA = "0x6F74E8")]
	private void Update()
	{
	}

	[Address(RVA = "0x6F754C", Offset = "0x6F754C", VA = "0x6F754C")]
	public FoveatedRendering()
	{
	}
}
public enum GameSetting
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	LeftHanded,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	MuteMusic,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	LowBlood,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	NoGore,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SnapRotation,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	StrongBounds,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SeatedMode,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ResetUnlocks,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	DebugUnlock,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	DebugFastLevelMode,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ExportUser,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	NoHud,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Quiver,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	StableBowOff
}
public class GameSettings : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool[] isActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string settingsActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static GameSettings instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject checkbox;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI dataText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<GameSetting, string> checkboxStrings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<GameSetting, UICheckbox> activeCheckboxes;

	[Address(RVA = "0x6F6250", Offset = "0x6F6250", VA = "0x6F6250")]
	public static bool CheckSettingActive(GameSetting s)
	{
		return default(bool);
	}

	[Address(RVA = "0x6FA388", Offset = "0x6FA388", VA = "0x6FA388")]
	public static void ToggleSettingActive(GameSetting s, int val = -1)
	{
	}

	[Address(RVA = "0x6FA958", Offset = "0x6FA958", VA = "0x6FA958")]
	public void Init()
	{
	}

	[Address(RVA = "0x6FA1F8", Offset = "0x6FA1F8", VA = "0x6FA1F8")]
	public static void InitArray()
	{
	}

	[Address(RVA = "0x6FC048", Offset = "0x6FC048", VA = "0x6FC048")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x6FC148", Offset = "0x6FC148", VA = "0x6FC148")]
	public GameSettings()
	{
	}
}
public class HideOnPause : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB10", Offset = "0x65AB10")]
	private sealed class <StartPause>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HideOnPause <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x704A30", Offset = "0x704A30", VA = "0x704A30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x704AA0", Offset = "0x704AA0", VA = "0x704AA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x704830", Offset = "0x704830", VA = "0x704830")]
		[DebuggerHidden]
		public <StartPause>d__4(int <>1__state)
		{
		}

		[Address(RVA = "0x7049A0", Offset = "0x7049A0", VA = "0x7049A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7049A4", Offset = "0x7049A4", VA = "0x7049A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x704A38", Offset = "0x704A38", VA = "0x704A38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB20", Offset = "0x65AB20")]
	private sealed class <EndPause>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HideOnPause <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x704928", Offset = "0x704928", VA = "0x704928", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x704998", Offset = "0x704998", VA = "0x704998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x70485C", Offset = "0x70485C", VA = "0x70485C")]
		[DebuggerHidden]
		public <EndPause>d__5(int <>1__state)
		{
		}

		[Address(RVA = "0x704898", Offset = "0x704898", VA = "0x704898", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x70489C", Offset = "0x70489C", VA = "0x70489C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x704930", Offset = "0x704930", VA = "0x704930", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool showOnPause;

	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool alsoOnMenu;

	[Address(RVA = "0x704484", Offset = "0x704484", VA = "0x704484")]
	private void Start()
	{
	}

	[Address(RVA = "0x704664", Offset = "0x704664", VA = "0x704664")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x7047BC", Offset = "0x7047BC", VA = "0x7047BC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678D70", Offset = "0x678D70")]
	private IEnumerator StartPause()
	{
		return null;
	}

	[Address(RVA = "0x7045F0", Offset = "0x7045F0", VA = "0x7045F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678DD4", Offset = "0x678DD4")]
	private IEnumerator EndPause()
	{
		return null;
	}

	[Address(RVA = "0x704888", Offset = "0x704888", VA = "0x704888")]
	public HideOnPause()
	{
	}
}
public class LeaderboardManager : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB30", Offset = "0x65AB30")]
	private sealed class <SubmitOculus>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string leaderboard;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float score;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LeaderboardManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x716100", Offset = "0x716100", VA = "0x716100", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x716170", Offset = "0x716170", VA = "0x716170", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x712D74", Offset = "0x712D74", VA = "0x712D74")]
		[DebuggerHidden]
		public <SubmitOculus>d__17(int <>1__state)
		{
		}

		[Address(RVA = "0x716044", Offset = "0x716044", VA = "0x716044", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x716048", Offset = "0x716048", VA = "0x716048", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x716108", Offset = "0x716108", VA = "0x716108", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB40", Offset = "0x65AB40")]
	private sealed class <DelayGetLeaderboard>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7151F0", Offset = "0x7151F0", VA = "0x7151F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x715260", Offset = "0x715260", VA = "0x715260", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x712E14", Offset = "0x712E14", VA = "0x712E14")]
		[DebuggerHidden]
		public <DelayGetLeaderboard>d__18(int <>1__state)
		{
		}

		[Address(RVA = "0x71510C", Offset = "0x71510C", VA = "0x71510C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x715110", Offset = "0x715110", VA = "0x715110", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7151F8", Offset = "0x7151F8", VA = "0x7151F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB50", Offset = "0x65AB50")]
	private sealed class <GetLeaderboard>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardManager <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool timedReset;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x715C9C", Offset = "0x715C9C", VA = "0x715C9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x715D0C", Offset = "0x715D0C", VA = "0x715D0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x712E40", Offset = "0x712E40", VA = "0x712E40")]
		[DebuggerHidden]
		public <GetLeaderboard>d__19(int <>1__state)
		{
		}

		[Address(RVA = "0x715268", Offset = "0x715268", VA = "0x715268", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x71526C", Offset = "0x71526C", VA = "0x71526C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x715CA4", Offset = "0x715CA4", VA = "0x715CA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB60", Offset = "0x65AB60")]
	private sealed class <SubmitAllScores>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardManager <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <d>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <j>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x715FCC", Offset = "0x715FCC", VA = "0x715FCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x71603C", Offset = "0x71603C", VA = "0x71603C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x713A38", Offset = "0x713A38", VA = "0x713A38")]
		[DebuggerHidden]
		public <SubmitAllScores>d__21(int <>1__state)
		{
		}

		[Address(RVA = "0x715D14", Offset = "0x715D14", VA = "0x715D14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x715D18", Offset = "0x715D18", VA = "0x715D18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x715FD4", Offset = "0x715FD4", VA = "0x715FD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB70", Offset = "0x65AB70")]
	private sealed class <CreateChallengeLeaderboards>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x715094", Offset = "0x715094", VA = "0x715094", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x715104", Offset = "0x715104", VA = "0x715104", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x713AC4", Offset = "0x713AC4", VA = "0x713AC4")]
		[DebuggerHidden]
		public <CreateChallengeLeaderboards>d__22(int <>1__state)
		{
		}

		[Address(RVA = "0x715054", Offset = "0x715054", VA = "0x715054", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x715058", Offset = "0x715058", VA = "0x715058", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x71509C", Offset = "0x71509C", VA = "0x71509C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB80", Offset = "0x65AB80")]
	private sealed class <CheckInternetConnection>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardManager <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WWW <www>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x713FDC", Offset = "0x713FDC", VA = "0x713FDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x71504C", Offset = "0x71504C", VA = "0x71504C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x713AF0", Offset = "0x713AF0", VA = "0x713AF0")]
		[DebuggerHidden]
		public <CheckInternetConnection>d__23(int <>1__state)
		{
		}

		[Address(RVA = "0x713DDC", Offset = "0x713DDC", VA = "0x713DDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x713DE0", Offset = "0x713DE0", VA = "0x713DE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x713FE4", Offset = "0x713FE4", VA = "0x713FE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LeaderboardManager instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leaderboardEntry;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject scoreButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject timeButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI leaderboardName;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool viveLeaderboardReady;

	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool viveScoreSubmitted;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string userName;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UILeaderboardEntry[] les;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int submitting;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool has_internet;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float lastInternetCheck;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI nameField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject nameInput;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool submittedName;

	[Address(RVA = "0x7124C0", Offset = "0x7124C0", VA = "0x7124C0")]
	private void Update()
	{
	}

	[Address(RVA = "0x7125AC", Offset = "0x7125AC", VA = "0x7125AC")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x712980", Offset = "0x712980", VA = "0x712980")]
	public void SubmitScore(string leaderboard, float score)
	{
	}

	[Address(RVA = "0x712CBC", Offset = "0x712CBC", VA = "0x712CBC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678E38", Offset = "0x678E38")]
	public IEnumerator SubmitOculus(string leaderboard, float score)
	{
		return null;
	}

	[Address(RVA = "0x712DA0", Offset = "0x712DA0", VA = "0x712DA0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678E9C", Offset = "0x678E9C")]
	public IEnumerator DelayGetLeaderboard()
	{
		return null;
	}

	[Address(RVA = "0x7128E4", Offset = "0x7128E4", VA = "0x7128E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678F00", Offset = "0x678F00")]
	public IEnumerator GetLeaderboard(bool timedReset = false)
	{
		return null;
	}

	[Address(RVA = "0x712E6C", Offset = "0x712E6C", VA = "0x712E6C")]
	private void ListLeaderboard(Message<LeaderboardEntryList> msg)
	{
	}

	[Address(RVA = "0x7139C4", Offset = "0x7139C4", VA = "0x7139C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678F64", Offset = "0x678F64")]
	public IEnumerator SubmitAllScores()
	{
		return null;
	}

	[Address(RVA = "0x713A64", Offset = "0x713A64", VA = "0x713A64")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x678FC8", Offset = "0x678FC8")]
	public IEnumerator CreateChallengeLeaderboards()
	{
		return null;
	}

	[Address(RVA = "0x712538", Offset = "0x712538", VA = "0x712538")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A02C", Offset = "0x67A02C")]
	private IEnumerator CheckInternetConnection()
	{
		return null;
	}

	[Address(RVA = "0x713B1C", Offset = "0x713B1C", VA = "0x713B1C")]
	public void SubmitName()
	{
	}

	[Address(RVA = "0x713BB8", Offset = "0x713BB8", VA = "0x713BB8")]
	public void AddChar(int charCode)
	{
	}

	[Address(RVA = "0x713D18", Offset = "0x713D18", VA = "0x713D18")]
	public LeaderboardManager()
	{
	}
}
public class MainMenu : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AB90", Offset = "0x65AB90")]
	private sealed class <onToggleDebug>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MainMenu <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8FFBF8", Offset = "0x8FFBF8", VA = "0x8FFBF8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8FFC68", Offset = "0x8FFC68", VA = "0x8FFC68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8FFB28", Offset = "0x8FFB28", VA = "0x8FFB28")]
		[DebuggerHidden]
		public <onToggleDebug>d__7(int <>1__state)
		{
		}

		[Address(RVA = "0x8FFB5C", Offset = "0x8FFB5C", VA = "0x8FFB5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8FFB60", Offset = "0x8FFB60", VA = "0x8FFB60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8FFC00", Offset = "0x8FFC00", VA = "0x8FFC00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MenuCenter Center;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MenuSettings Settings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MenuWeaponSelect WeaponSelect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MenuLevelSelect LevelSelect;

	[Address(RVA = "0x8FF5B4", Offset = "0x8FF5B4", VA = "0x8FF5B4")]
	public static void InitPlayerValues()
	{
	}

	[Address(RVA = "0x8FF81C", Offset = "0x8FF81C", VA = "0x8FF81C")]
	public void Init()
	{
	}

	[Address(RVA = "0x8FFA2C", Offset = "0x8FFA2C", VA = "0x8FFA2C")]
	public void Teardown()
	{
	}

	[Address(RVA = "0x8FFAB4", Offset = "0x8FFAB4", VA = "0x8FFAB4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A090", Offset = "0x67A090")]
	private IEnumerator onToggleDebug()
	{
		return null;
	}

	[Address(RVA = "0x8FFB54", Offset = "0x8FFB54", VA = "0x8FFB54")]
	public MainMenu()
	{
	}
}
public class MenuManager : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ABA0", Offset = "0x65ABA0")]
	private sealed class <onPause>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x906974", Offset = "0x906974", VA = "0x906974", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x9069E4", Offset = "0x9069E4", VA = "0x9069E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x9067B8", Offset = "0x9067B8", VA = "0x9067B8")]
		[DebuggerHidden]
		public <onPause>d__28(int <>1__state)
		{
		}

		[Address(RVA = "0x90692C", Offset = "0x90692C", VA = "0x90692C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x906930", Offset = "0x906930", VA = "0x906930", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x90697C", Offset = "0x90697C", VA = "0x90697C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ABB0", Offset = "0x65ABB0")]
	private sealed class <onPlayerDead>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x906A64", Offset = "0x906A64", VA = "0x906A64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x906AD4", Offset = "0x906AD4", VA = "0x906AD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x906858", Offset = "0x906858", VA = "0x906858")]
		[DebuggerHidden]
		public <onPlayerDead>d__29(int <>1__state)
		{
		}

		[Address(RVA = "0x9069EC", Offset = "0x9069EC", VA = "0x9069EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x9069F0", Offset = "0x9069F0", VA = "0x9069F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x906A6C", Offset = "0x906A6C", VA = "0x906A6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ABC0", Offset = "0x65ABC0")]
	private sealed class <onSceneChange>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuManager <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x906D14", Offset = "0x906D14", VA = "0x906D14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x906D84", Offset = "0x906D84", VA = "0x906D84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x9068F8", Offset = "0x9068F8", VA = "0x9068F8")]
		[DebuggerHidden]
		public <onSceneChange>d__30(int <>1__state)
		{
		}

		[Address(RVA = "0x906ADC", Offset = "0x906ADC", VA = "0x906ADC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x906AE0", Offset = "0x906AE0", VA = "0x906AE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x906D1C", Offset = "0x906D1C", VA = "0x906D1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Scoring scoring;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Scoring infiniteScoring;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Scoring speedrunScoring;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DuringGameUI duringGameUI;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FailDialog failDialog;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MainMenu mainMenu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PauseDialog pauseDialog;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LeaderboardManager leaderboard;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public MenuFTUE ftueMenu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public VRTK_ControllerEvents leftConEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VRTK_ControllerEvents rightConEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject FTUE;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool unmountPaused;

	[Address(RVA = "0x9045F0", Offset = "0x9045F0", VA = "0x9045F0")]
	public void Start()
	{
	}

	[Address(RVA = "0x9049D8", Offset = "0x9049D8", VA = "0x9049D8")]
	private void OVRManager_HMDMounted()
	{
	}

	[Address(RVA = "0x904A5C", Offset = "0x904A5C", VA = "0x904A5C")]
	private void OVRManager_HMDUnmounted()
	{
	}

	[Address(RVA = "0x904E14", Offset = "0x904E14", VA = "0x904E14")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x905010", Offset = "0x905010", VA = "0x905010")]
	public void Navigate(int nav)
	{
	}

	[Address(RVA = "0x905890", Offset = "0x905890", VA = "0x905890")]
	public void StartGame()
	{
	}

	[Address(RVA = "0x905B04", Offset = "0x905B04", VA = "0x905B04")]
	public void ShowEndDialog()
	{
	}

	[Address(RVA = "0x905CC8", Offset = "0x905CC8", VA = "0x905CC8")]
	public void ShowFailDialog(float progressPercentage)
	{
	}

	[Address(RVA = "0x906088", Offset = "0x906088", VA = "0x906088")]
	public void ShowInGameUIForFTUE()
	{
	}

	[Address(RVA = "0x9060D4", Offset = "0x9060D4", VA = "0x9060D4")]
	public void HideInGameUIForFTUE()
	{
	}

	[Address(RVA = "0x90526C", Offset = "0x90526C", VA = "0x90526C")]
	public void ShowMainMenu()
	{
	}

	[Address(RVA = "0x906120", Offset = "0x906120", VA = "0x906120")]
	public void ShowFTUE()
	{
	}

	[Address(RVA = "0x9062F8", Offset = "0x9062F8", VA = "0x9062F8")]
	public void Pause()
	{
	}

	[Address(RVA = "0x906738", Offset = "0x906738", VA = "0x906738")]
	public void OnApplicationPause(bool pauseStatus)
	{
	}

	[Address(RVA = "0x904AEC", Offset = "0x904AEC", VA = "0x904AEC")]
	private void forcePause()
	{
	}

	[Address(RVA = "0x906744", Offset = "0x906744", VA = "0x906744")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A0F4", Offset = "0x67A0F4")]
	private IEnumerator onPause()
	{
		return null;
	}

	[Address(RVA = "0x9067E4", Offset = "0x9067E4", VA = "0x9067E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A158", Offset = "0x67A158")]
	private IEnumerator onPlayerDead()
	{
		return null;
	}

	[Address(RVA = "0x906884", Offset = "0x906884", VA = "0x906884")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A1BC", Offset = "0x67A1BC")]
	private IEnumerator onSceneChange()
	{
		return null;
	}

	[Address(RVA = "0x906924", Offset = "0x906924", VA = "0x906924")]
	public MenuManager()
	{
	}
}
public class MenuCenter : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ABD0", Offset = "0x65ABD0")]
	private sealed class <onUIShow>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MenuCenter <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x902D70", Offset = "0x902D70", VA = "0x902D70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x902DE0", Offset = "0x902DE0", VA = "0x902DE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x901644", Offset = "0x901644", VA = "0x901644")]
		[DebuggerHidden]
		public <onUIShow>d__37(int <>1__state)
		{
		}

		[Address(RVA = "0x902BCC", Offset = "0x902BCC", VA = "0x902BCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x902BD0", Offset = "0x902BD0", VA = "0x902BD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x902D78", Offset = "0x902D78", VA = "0x902D78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ABE0", Offset = "0x65ABE0")]
	private sealed class <ResetChallenge>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuCenter <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x902890", Offset = "0x902890", VA = "0x902890", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x902900", Offset = "0x902900", VA = "0x902900", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x9018B4", Offset = "0x9018B4", VA = "0x9018B4")]
		[DebuggerHidden]
		public <ResetChallenge>d__39(int <>1__state)
		{
		}

		[Address(RVA = "0x9026C0", Offset = "0x9026C0", VA = "0x9026C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x9026C4", Offset = "0x9026C4", VA = "0x9026C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x902898", Offset = "0x902898", VA = "0x902898", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ABF0", Offset = "0x65ABF0")]
	private sealed class <onModeChanged>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuCenter <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x902B54", Offset = "0x902B54", VA = "0x902B54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x902BC4", Offset = "0x902BC4", VA = "0x902BC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x901C3C", Offset = "0x901C3C", VA = "0x901C3C")]
		[DebuggerHidden]
		public <onModeChanged>d__41(int <>1__state)
		{
		}

		[Address(RVA = "0x902B0C", Offset = "0x902B0C", VA = "0x902B0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x902B10", Offset = "0x902B10", VA = "0x902B10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x902B5C", Offset = "0x902B5C", VA = "0x902B5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC00", Offset = "0x65AC00")]
	private sealed class <onDifficultyChanged>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuCenter <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x9029D4", Offset = "0x9029D4", VA = "0x9029D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x902A44", Offset = "0x902A44", VA = "0x902A44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x901CDC", Offset = "0x901CDC", VA = "0x901CDC")]
		[DebuggerHidden]
		public <onDifficultyChanged>d__42(int <>1__state)
		{
		}

		[Address(RVA = "0x902908", Offset = "0x902908", VA = "0x902908", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x90290C", Offset = "0x90290C", VA = "0x90290C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x9029DC", Offset = "0x9029DC", VA = "0x9029DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC10", Offset = "0x65AC10")]
	private sealed class <onLevelChanged>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuCenter <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x902A94", Offset = "0x902A94", VA = "0x902A94", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x902B04", Offset = "0x902B04", VA = "0x902B04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x901D7C", Offset = "0x901D7C", VA = "0x901D7C")]
		[DebuggerHidden]
		public <onLevelChanged>d__43(int <>1__state)
		{
		}

		[Address(RVA = "0x902A4C", Offset = "0x902A4C", VA = "0x902A4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x902A50", Offset = "0x902A50", VA = "0x902A50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x902A9C", Offset = "0x902A9C", VA = "0x902A9C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC20", Offset = "0x65AC20")]
	private sealed class <onWeaponChanged>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuCenter <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x902E30", Offset = "0x902E30", VA = "0x902E30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x902EA0", Offset = "0x902EA0", VA = "0x902EA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x901E1C", Offset = "0x901E1C", VA = "0x901E1C")]
		[DebuggerHidden]
		public <onWeaponChanged>d__44(int <>1__state)
		{
		}

		[Address(RVA = "0x902DE8", Offset = "0x902DE8", VA = "0x902DE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x902DEC", Offset = "0x902DEC", VA = "0x902DEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x902E38", Offset = "0x902E38", VA = "0x902E38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int previousWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int previousSpecial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MenuDifficultySelect DifficultySelect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MenuLevelSelect LevelSelect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MenuSettings Settings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MenuWeaponSelect WeaponSelect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Leaderboard;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UIButton ModeStoryButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UIButton ModeEndlessButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UIButton ModeChallengeButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UIButton ModeArcheryButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UIButton ModeArcheryTargetButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI ChallengeText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Image LevelImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI LevelDescriptionText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI LevelHighScoreText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Image StarBG;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Image Star1Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Image Star2Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Image Star3Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UIButton DifficulyButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMeshProUGUI DifficultyText;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UIButton WeaponSelectButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Image WeaponImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Image SpecialImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public UIButton StartButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public UIButton StartTutorialButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UIButton NextChallenge;

	[Address(RVA = "0x8FFC70", Offset = "0x8FFC70", VA = "0x8FFC70")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x900494", Offset = "0x900494", VA = "0x900494")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x8FF950", Offset = "0x8FF950", VA = "0x8FF950")]
	public void Init()
	{
	}

	[Address(RVA = "0x9006D4", Offset = "0x9006D4", VA = "0x9006D4")]
	private void initModes()
	{
	}

	[Address(RVA = "0x8FFD4C", Offset = "0x8FFD4C", VA = "0x8FFD4C")]
	private void initLevel()
	{
	}

	[Address(RVA = "0x900BA4", Offset = "0x900BA4", VA = "0x900BA4")]
	private void initDifficulty()
	{
	}

	[Address(RVA = "0x900EF8", Offset = "0x900EF8", VA = "0x900EF8")]
	public void initStarsScore()
	{
	}

	[Address(RVA = "0x9000CC", Offset = "0x9000CC", VA = "0x9000CC")]
	private void initWeapon()
	{
	}

	[Address(RVA = "0x900D14", Offset = "0x900D14", VA = "0x900D14")]
	private void initEvents()
	{
	}

	[Address(RVA = "0x9015AC", Offset = "0x9015AC", VA = "0x9015AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A220", Offset = "0x67A220")]
	private IEnumerator onUIShow(GameObject target)
	{
		return null;
	}

	[Address(RVA = "0x901670", Offset = "0x901670", VA = "0x901670")]
	public void CheckChallengeTimer()
	{
	}

	[Address(RVA = "0x900660", Offset = "0x900660", VA = "0x900660")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A284", Offset = "0x67A284")]
	private IEnumerator ResetChallenge()
	{
		return null;
	}

	[Address(RVA = "0x9018E0", Offset = "0x9018E0", VA = "0x9018E0")]
	public void SetChallenge()
	{
	}

	[Address(RVA = "0x901BC8", Offset = "0x901BC8", VA = "0x901BC8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A2E8", Offset = "0x67A2E8")]
	private IEnumerator onModeChanged()
	{
		return null;
	}

	[Address(RVA = "0x901C68", Offset = "0x901C68", VA = "0x901C68")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A34C", Offset = "0x67A34C")]
	private IEnumerator onDifficultyChanged()
	{
		return null;
	}

	[Address(RVA = "0x901D08", Offset = "0x901D08", VA = "0x901D08")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A3B0", Offset = "0x67A3B0")]
	private IEnumerator onLevelChanged()
	{
		return null;
	}

	[Address(RVA = "0x901DA8", Offset = "0x901DA8", VA = "0x901DA8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A414", Offset = "0x67A414")]
	private IEnumerator onWeaponChanged()
	{
		return null;
	}

	[Address(RVA = "0x901E48", Offset = "0x901E48", VA = "0x901E48")]
	private void show(GameObject target)
	{
	}

	[Address(RVA = "0x90244C", Offset = "0x90244C", VA = "0x90244C")]
	private void show(GameObject a, GameObject b, GameObject[] others)
	{
	}

	[Address(RVA = "0x9023A8", Offset = "0x9023A8", VA = "0x9023A8")]
	private bool show(GameObject a, GameObject b)
	{
		return default(bool);
	}

	[Address(RVA = "0x9025B8", Offset = "0x9025B8", VA = "0x9025B8")]
	public MenuCenter()
	{
	}

	[Address(RVA = "0x902620", Offset = "0x902620", VA = "0x902620")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67A478", Offset = "0x67A478")]
	private void <ResetChallenge>b__39_0(Challenge data)
	{
	}
}
public class MenuDifficultySelect : MonoBehaviour
{
	[Address(RVA = "0x902EA8", Offset = "0x902EA8", VA = "0x902EA8")]
	public MenuDifficultySelect()
	{
	}
}
public class MenuFTUE : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC30", Offset = "0x65AC30")]
	private sealed class <onFTUE1Done>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuFTUE <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x903298", Offset = "0x903298", VA = "0x903298", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x903308", Offset = "0x903308", VA = "0x903308", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x903124", Offset = "0x903124", VA = "0x903124")]
		[DebuggerHidden]
		public <onFTUE1Done>d__5(int <>1__state)
		{
		}

		[Address(RVA = "0x9031F8", Offset = "0x9031F8", VA = "0x9031F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x9031FC", Offset = "0x9031FC", VA = "0x9031FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x9032A0", Offset = "0x9032A0", VA = "0x9032A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC40", Offset = "0x65AC40")]
	private sealed class <onFTUE2Done>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuFTUE <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x9033B0", Offset = "0x9033B0", VA = "0x9033B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x903420", Offset = "0x903420", VA = "0x903420", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x9031C4", Offset = "0x9031C4", VA = "0x9031C4")]
		[DebuggerHidden]
		public <onFTUE2Done>d__6(int <>1__state)
		{
		}

		[Address(RVA = "0x903310", Offset = "0x903310", VA = "0x903310", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x903314", Offset = "0x903314", VA = "0x903314", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x9033B8", Offset = "0x9033B8", VA = "0x9033B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject FTUE1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject FTUE2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject FTUE3;

	[Address(RVA = "0x902EB0", Offset = "0x902EB0", VA = "0x902EB0")]
	public void Start()
	{
	}

	[Address(RVA = "0x902FE4", Offset = "0x902FE4", VA = "0x902FE4")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x9030B0", Offset = "0x9030B0", VA = "0x9030B0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A488", Offset = "0x67A488")]
	public IEnumerator onFTUE1Done()
	{
		return null;
	}

	[Address(RVA = "0x903150", Offset = "0x903150", VA = "0x903150")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A4EC", Offset = "0x67A4EC")]
	public IEnumerator onFTUE2Done()
	{
		return null;
	}

	[Address(RVA = "0x9031F0", Offset = "0x9031F0", VA = "0x9031F0")]
	public MenuFTUE()
	{
	}
}
public class MenuLevelOption : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image LevelImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI LevelHighScoreText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image StarBG;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image Star1Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image Star2Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image Star3Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UIButton button;

	[Address(RVA = "0x903428", Offset = "0x903428", VA = "0x903428")]
	public void Awake()
	{
	}

	[Address(RVA = "0x903660", Offset = "0x903660", VA = "0x903660")]
	public void SetLevel(LevelConfig level, int levelNum, Sprite image)
	{
	}

	[Address(RVA = "0x90342C", Offset = "0x90342C", VA = "0x90342C")]
	private void reset()
	{
	}

	[Address(RVA = "0x903A78", Offset = "0x903A78", VA = "0x903A78")]
	private void initImage(LevelConfig level, Sprite image)
	{
	}

	[Address(RVA = "0x903AB0", Offset = "0x903AB0", VA = "0x903AB0")]
	public MenuLevelOption()
	{
	}
}
public class MenuLevelSelect : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC50", Offset = "0x65AC50")]
	private sealed class <onPrev>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuLevelSelect <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x904578", Offset = "0x904578", VA = "0x904578", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x9045E8", Offset = "0x9045E8", VA = "0x9045E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x904118", Offset = "0x904118", VA = "0x904118")]
		[DebuggerHidden]
		public <onPrev>d__15(int <>1__state)
		{
		}

		[Address(RVA = "0x9044F8", Offset = "0x9044F8", VA = "0x9044F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x9044FC", Offset = "0x9044FC", VA = "0x9044FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x904580", Offset = "0x904580", VA = "0x904580", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC60", Offset = "0x65AC60")]
	private sealed class <onNext>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuLevelSelect <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x904480", Offset = "0x904480", VA = "0x904480", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x9044F0", Offset = "0x9044F0", VA = "0x9044F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x9041B8", Offset = "0x9041B8", VA = "0x9041B8")]
		[DebuggerHidden]
		public <onNext>d__16(int <>1__state)
		{
		}

		[Address(RVA = "0x904400", Offset = "0x904400", VA = "0x904400", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x904404", Offset = "0x904404", VA = "0x904404", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x904488", Offset = "0x904488", VA = "0x904488", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC70", Offset = "0x65AC70")]
	private sealed class <DisplayLevelSelect>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuLevelSelect <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x904388", Offset = "0x904388", VA = "0x904388", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x9043F8", Offset = "0x9043F8", VA = "0x9043F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x904258", Offset = "0x904258", VA = "0x904258")]
		[DebuggerHidden]
		public <DisplayLevelSelect>d__17(int <>1__state)
		{
		}

		[Address(RVA = "0x90428C", Offset = "0x90428C", VA = "0x90428C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x904290", Offset = "0x904290", VA = "0x904290", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x904390", Offset = "0x904390", VA = "0x904390", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIButton Prev;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UIButton Next;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MenuLevelOption Option1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MenuLevelOption Option2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MenuLevelOption Option3;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MenuLevelOption Option4;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<Sprite> LevelImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Sprite> ArcheryImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<Sprite> ArcheryTargetImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int page;

	[Address(RVA = "0x903AB8", Offset = "0x903AB8", VA = "0x903AB8")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x903BC8", Offset = "0x903BC8", VA = "0x903BC8")]
	public void Start()
	{
	}

	[Address(RVA = "0x903D54", Offset = "0x903D54", VA = "0x903D54")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x901430", Offset = "0x901430", VA = "0x901430")]
	public void initOptions()
	{
	}

	[Address(RVA = "0x903E5C", Offset = "0x903E5C", VA = "0x903E5C")]
	private void initOption(MenuLevelOption option, int index)
	{
	}

	[Address(RVA = "0x9040A4", Offset = "0x9040A4", VA = "0x9040A4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A550", Offset = "0x67A550")]
	private IEnumerator onPrev()
	{
		return null;
	}

	[Address(RVA = "0x904144", Offset = "0x904144", VA = "0x904144")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A5B4", Offset = "0x67A5B4")]
	private IEnumerator onNext()
	{
		return null;
	}

	[Address(RVA = "0x9041E4", Offset = "0x9041E4", VA = "0x9041E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A618", Offset = "0x67A618")]
	private IEnumerator DisplayLevelSelect()
	{
		return null;
	}

	[Address(RVA = "0x904284", Offset = "0x904284", VA = "0x904284")]
	public MenuLevelSelect()
	{
	}
}
public class MenuSettings : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC80", Offset = "0x65AC80")]
	private sealed class <onToggleSecret>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuSettings <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x9070B8", Offset = "0x9070B8", VA = "0x9070B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x907128", Offset = "0x907128", VA = "0x907128", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x906FE0", Offset = "0x906FE0", VA = "0x906FE0")]
		[DebuggerHidden]
		public <onToggleSecret>d__11(int <>1__state)
		{
		}

		[Address(RVA = "0x90701C", Offset = "0x90701C", VA = "0x90701C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x907020", Offset = "0x907020", VA = "0x907020", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x9070C0", Offset = "0x9070C0", VA = "0x9070C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIButton LeaderboardButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UIButton SettingsButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UIButton SecretsButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LeaderboardManager Leaderboard;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameSettings Settings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Secrets Secrets;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int navWindow;

	[Address(RVA = "0x906D8C", Offset = "0x906D8C", VA = "0x906D8C")]
	public void Init()
	{
	}

	[Address(RVA = "0x906EB4", Offset = "0x906EB4", VA = "0x906EB4")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x906EE4", Offset = "0x906EE4", VA = "0x906EE4")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x9055B0", Offset = "0x9055B0", VA = "0x9055B0")]
	public void Navigate(int nav = 2)
	{
	}

	[Address(RVA = "0x906F6C", Offset = "0x906F6C", VA = "0x906F6C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A67C", Offset = "0x67A67C")]
	private IEnumerator onToggleSecret()
	{
		return null;
	}

	[Address(RVA = "0x90700C", Offset = "0x90700C", VA = "0x90700C")]
	public MenuSettings()
	{
	}
}
public class MenuWeaponSelect : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AC90", Offset = "0x65AC90")]
	private sealed class <SetSpecialInfo>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuWeaponSelect <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x907854", Offset = "0x907854", VA = "0x907854", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x9078C4", Offset = "0x9078C4", VA = "0x9078C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x9073E8", Offset = "0x9073E8", VA = "0x9073E8")]
		[DebuggerHidden]
		public <SetSpecialInfo>d__12(int <>1__state)
		{
		}

		[Address(RVA = "0x907448", Offset = "0x907448", VA = "0x907448", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x90744C", Offset = "0x90744C", VA = "0x90744C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x90785C", Offset = "0x90785C", VA = "0x90785C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ACA0", Offset = "0x65ACA0")]
	private sealed class <SetWeaponInfo>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuWeaponSelect <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x907A2C", Offset = "0x907A2C", VA = "0x907A2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x907A9C", Offset = "0x907A9C", VA = "0x907A9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x907414", Offset = "0x907414", VA = "0x907414")]
		[DebuggerHidden]
		public <SetWeaponInfo>d__13(int <>1__state)
		{
		}

		[Address(RVA = "0x9078CC", Offset = "0x9078CC", VA = "0x9078CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x9078D0", Offset = "0x9078D0", VA = "0x9078D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x907A34", Offset = "0x907A34", VA = "0x907A34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite FTUEWeaponImage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite[] WeaponImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite[] SpecialImages;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI title;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI info1;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI info2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI info3;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI weapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UIButton specialTutorial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UIButton weaponTutorial;

	[Address(RVA = "0x907130", Offset = "0x907130", VA = "0x907130")]
	private void Start()
	{
	}

	[Address(RVA = "0x90731C", Offset = "0x90731C", VA = "0x90731C")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x907234", Offset = "0x907234", VA = "0x907234")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A6E0", Offset = "0x67A6E0")]
	private IEnumerator SetSpecialInfo()
	{
		return null;
	}

	[Address(RVA = "0x9072A8", Offset = "0x9072A8", VA = "0x9072A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A744", Offset = "0x67A744")]
	private IEnumerator SetWeaponInfo()
	{
		return null;
	}

	[Address(RVA = "0x907440", Offset = "0x907440", VA = "0x907440")]
	public MenuWeaponSelect()
	{
	}
}
[Serializable]
public class WeaponImages
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Sprite[] Variants;

	[Address(RVA = "0x14B57C0", Offset = "0x14B57C0", VA = "0x14B57C0")]
	public WeaponImages()
	{
	}
}
public class NextWaveTrigger : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool triggered;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hitEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro waveNumber;

	[Address(RVA = "0x91632C", Offset = "0x91632C", VA = "0x91632C")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Address(RVA = "0x916520", Offset = "0x916520", VA = "0x916520")]
	public NextWaveTrigger()
	{
	}
}
public class PauseDialog : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIButton nextWave;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool TrackPlayerView;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 playerPrePausePosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Renderer> deactivatedMeshes;

	[Address(RVA = "0x755984", Offset = "0x755984", VA = "0x755984")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x756300", Offset = "0x756300", VA = "0x756300")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x756644", Offset = "0x756644", VA = "0x756644")]
	public PauseDialog()
	{
	}
}
public class Scoring : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ACB0", Offset = "0x65ACB0")]
	private sealed class <StoryAudio>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1564838", Offset = "0x1564838", VA = "0x1564838", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15648A8", Offset = "0x15648A8", VA = "0x15648A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x1563F7C", Offset = "0x1563F7C", VA = "0x1563F7C")]
		[DebuggerHidden]
		public <StoryAudio>d__59(int <>1__state)
		{
		}

		[Address(RVA = "0x15646BC", Offset = "0x15646BC", VA = "0x15646BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x15646C0", Offset = "0x15646C0", VA = "0x15646C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1564840", Offset = "0x1564840", VA = "0x1564840", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ACC0", Offset = "0x65ACC0")]
	private sealed class <onEnemyDead>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1564A14", Offset = "0x1564A14", VA = "0x1564A14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1564A84", Offset = "0x1564A84", VA = "0x1564A84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156401C", Offset = "0x156401C", VA = "0x156401C")]
		[DebuggerHidden]
		public <onEnemyDead>d__60(int <>1__state)
		{
		}

		[Address(RVA = "0x15649B4", Offset = "0x15649B4", VA = "0x15649B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x15649B8", Offset = "0x15649B8", VA = "0x15649B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1564A1C", Offset = "0x1564A1C", VA = "0x1564A1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ACD0", Offset = "0x65ACD0")]
	private sealed class <onShootBow>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1564DA4", Offset = "0x1564DA4", VA = "0x1564DA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1564E14", Offset = "0x1564E14", VA = "0x1564E14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15640BC", Offset = "0x15640BC", VA = "0x15640BC")]
		[DebuggerHidden]
		public <onShootBow>d__61(int <>1__state)
		{
		}

		[Address(RVA = "0x1564D44", Offset = "0x1564D44", VA = "0x1564D44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1564D48", Offset = "0x1564D48", VA = "0x1564D48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1564DAC", Offset = "0x1564DAC", VA = "0x1564DAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ACE0", Offset = "0x65ACE0")]
	private sealed class <onCritEnemyDead>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x156493C", Offset = "0x156493C", VA = "0x156493C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x15649AC", Offset = "0x15649AC", VA = "0x15649AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156415C", Offset = "0x156415C", VA = "0x156415C")]
		[DebuggerHidden]
		public <onCritEnemyDead>d__62(int <>1__state)
		{
		}

		[Address(RVA = "0x15648B0", Offset = "0x15648B0", VA = "0x15648B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x15648B4", Offset = "0x15648B4", VA = "0x15648B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1564944", Offset = "0x1564944", VA = "0x1564944", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ACF0", Offset = "0x65ACF0")]
	private sealed class <onPlayerHit>d__63 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1564CCC", Offset = "0x1564CCC", VA = "0x1564CCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1564D3C", Offset = "0x1564D3C", VA = "0x1564D3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15641FC", Offset = "0x15641FC", VA = "0x15641FC")]
		[DebuggerHidden]
		public <onPlayerHit>d__63(int <>1__state)
		{
		}

		[Address(RVA = "0x1564C3C", Offset = "0x1564C3C", VA = "0x1564C3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1564C40", Offset = "0x1564C40", VA = "0x1564C40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1564CD4", Offset = "0x1564CD4", VA = "0x1564CD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD00", Offset = "0x65AD00")]
	private sealed class <onStartLevel>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15654FC", Offset = "0x15654FC", VA = "0x15654FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x156556C", Offset = "0x156556C", VA = "0x156556C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156429C", Offset = "0x156429C", VA = "0x156429C")]
		[DebuggerHidden]
		public <onStartLevel>d__64(int <>1__state)
		{
		}

		[Address(RVA = "0x1565414", Offset = "0x1565414", VA = "0x1565414", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1565418", Offset = "0x1565418", VA = "0x1565418", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1565504", Offset = "0x1565504", VA = "0x1565504", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD10", Offset = "0x65AD10")]
	private sealed class <onEnemyWeaponBlocked>d__65 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1564BC4", Offset = "0x1564BC4", VA = "0x1564BC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1564C34", Offset = "0x1564C34", VA = "0x1564C34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156433C", Offset = "0x156433C", VA = "0x156433C")]
		[DebuggerHidden]
		public <onEnemyWeaponBlocked>d__65(int <>1__state)
		{
		}

		[Address(RVA = "0x1564B64", Offset = "0x1564B64", VA = "0x1564B64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1564B68", Offset = "0x1564B68", VA = "0x1564B68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1564BCC", Offset = "0x1564BCC", VA = "0x1564BCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD20", Offset = "0x65AD20")]
	private sealed class <onEnemyStabbed>d__66 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x1564AEC", Offset = "0x1564AEC", VA = "0x1564AEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1564B5C", Offset = "0x1564B5C", VA = "0x1564B5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x15643DC", Offset = "0x15643DC", VA = "0x15643DC")]
		[DebuggerHidden]
		public <onEnemyStabbed>d__66(int <>1__state)
		{
		}

		[Address(RVA = "0x1564A8C", Offset = "0x1564A8C", VA = "0x1564A8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1564A90", Offset = "0x1564A90", VA = "0x1564A90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x1564AF4", Offset = "0x1564AF4", VA = "0x1564AF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD30", Offset = "0x65AD30")]
	private sealed class <onSpecialUsed>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x156539C", Offset = "0x156539C", VA = "0x156539C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x156540C", Offset = "0x156540C", VA = "0x156540C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156447C", Offset = "0x156447C", VA = "0x156447C")]
		[DebuggerHidden]
		public <onSpecialUsed>d__67(int <>1__state)
		{
		}

		[Address(RVA = "0x156533C", Offset = "0x156533C", VA = "0x156533C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1565340", Offset = "0x1565340", VA = "0x1565340", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15653A4", Offset = "0x15653A4", VA = "0x15653A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD40", Offset = "0x65AD40")]
	private sealed class <onShowWeaponUnlock>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Scoring <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x15652C4", Offset = "0x15652C4", VA = "0x15652C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x1565334", Offset = "0x1565334", VA = "0x1565334", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156451C", Offset = "0x156451C", VA = "0x156451C")]
		[DebuggerHidden]
		public <onShowWeaponUnlock>d__68(int <>1__state)
		{
		}

		[Address(RVA = "0x1564E1C", Offset = "0x1564E1C", VA = "0x1564E1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x1564E20", Offset = "0x1564E20", VA = "0x1564E20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x15652CC", Offset = "0x15652CC", VA = "0x15652CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Scoring instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int scoreType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI scoreText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI killsText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI perfectHitsText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI goodHitsText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI stabCountText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI hitsTakenText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI blocksText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI timeText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI swingsText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI accuracyText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Image Star1Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Image Star2Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Image Star3Image;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float score;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int streak;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int kills;

	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int critKills;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int streakMult;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int[] qualityHitCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public int bowShots;

	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float startTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int hitsTaken;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public int enemyWeaponBlocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int stabCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int specialCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject weaponUnlockScreen;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject scoreScreen;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject levelCompleteText;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject levelCompleteText2;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject youDiedText;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject youDiedText2;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public UIButton showNewWeaponButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public UIButton menuButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public UIButton restartButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public UIButton nextLevelButton;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform weaponPreviewPosition;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public TextMeshProUGUI weaponUnlockTitle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public TextMeshProUGUI weaponUnlockHeader;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public TextMeshProUGUI weaponUnlockDescription;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public AudioClip[] storyClips;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float strokeScores;

	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int[] weaponUnlocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private int[] specialUnlocks;

	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private bool autoSwitchedWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
	private bool didUnlockWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x15A")]
	private bool didUnlockSpecial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private int unlockedWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private int unlockedSpecial;

	[Address(RVA = "0x1560550", Offset = "0x1560550", VA = "0x1560550")]
	public void Teardown()
	{
	}

	[Address(RVA = "0x156086C", Offset = "0x156086C", VA = "0x156086C")]
	public void Init(int type)
	{
	}

	[Address(RVA = "0x15552E0", Offset = "0x15552E0", VA = "0x15552E0")]
	public void AddScore(float newScore)
	{
	}

	[Address(RVA = "0x1560D60", Offset = "0x1560D60", VA = "0x1560D60")]
	public void DisplayWeaponUnlock()
	{
	}

	[Address(RVA = "0x1560E58", Offset = "0x1560E58", VA = "0x1560E58")]
	public void SetEndScore()
	{
	}

	[Address(RVA = "0x1563DE4", Offset = "0x1563DE4", VA = "0x1563DE4")]
	private void GameComplete()
	{
	}

	[Address(RVA = "0x15638A4", Offset = "0x15638A4", VA = "0x15638A4")]
	private void SubmitScore(string leaderboard, float leaderboardScore, bool minScore = false)
	{
	}

	[Address(RVA = "0x1563658", Offset = "0x1563658", VA = "0x1563658")]
	private string FormatTime(float time)
	{
		return null;
	}

	[Address(RVA = "0x1563F08", Offset = "0x1563F08", VA = "0x1563F08")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A7A8", Offset = "0x67A7A8")]
	private IEnumerator StoryAudio()
	{
		return null;
	}

	[Address(RVA = "0x1563FA8", Offset = "0x1563FA8", VA = "0x1563FA8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A80C", Offset = "0x67A80C")]
	public IEnumerator onEnemyDead(GameObject go)
	{
		return null;
	}

	[Address(RVA = "0x1564048", Offset = "0x1564048", VA = "0x1564048")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A870", Offset = "0x67A870")]
	public IEnumerator onShootBow()
	{
		return null;
	}

	[Address(RVA = "0x15640E8", Offset = "0x15640E8", VA = "0x15640E8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A8D4", Offset = "0x67A8D4")]
	public IEnumerator onCritEnemyDead(GameObject go)
	{
		return null;
	}

	[Address(RVA = "0x1564188", Offset = "0x1564188", VA = "0x1564188")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A938", Offset = "0x67A938")]
	public IEnumerator onPlayerHit(GameObject source)
	{
		return null;
	}

	[Address(RVA = "0x1564228", Offset = "0x1564228", VA = "0x1564228")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67A99C", Offset = "0x67A99C")]
	public IEnumerator onStartLevel()
	{
		return null;
	}

	[Address(RVA = "0x15642C8", Offset = "0x15642C8", VA = "0x15642C8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AA00", Offset = "0x67AA00")]
	public IEnumerator onEnemyWeaponBlocked()
	{
		return null;
	}

	[Address(RVA = "0x1564368", Offset = "0x1564368", VA = "0x1564368")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AA64", Offset = "0x67AA64")]
	public IEnumerator onEnemyStabbed()
	{
		return null;
	}

	[Address(RVA = "0x1564408", Offset = "0x1564408", VA = "0x1564408")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AAC8", Offset = "0x67AAC8")]
	public IEnumerator onSpecialUsed()
	{
		return null;
	}

	[Address(RVA = "0x15644A8", Offset = "0x15644A8", VA = "0x15644A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AB2C", Offset = "0x67AB2C")]
	public IEnumerator onShowWeaponUnlock()
	{
		return null;
	}

	[Address(RVA = "0x1564548", Offset = "0x1564548", VA = "0x1564548")]
	public void Stroke(float damage)
	{
	}

	[Address(RVA = "0x156460C", Offset = "0x156460C", VA = "0x156460C")]
	public Scoring()
	{
	}
}
public enum Secret
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	InvincibleMode,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	FullEnergyMode,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	MasterMode,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	LargeWeapons,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	TinyWeapons,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	LargeEnemies,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	TinyEnemies,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Homerun,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ToughEnemies,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	LargePlayer,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SuperSpeed,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SlowMo,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	BigHead
}
public class Secrets : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Secrets instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool[] isActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string secretsActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static bool[] isUnlocked;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static string secretsUnlocked;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject checkbox;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<Secret, string> checkboxStrings;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Secret, Secret[]> mutualExclusions;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<Secret, UICheckbox> activeCheckboxes;

	[Address(RVA = "0x15534A0", Offset = "0x15534A0", VA = "0x15534A0")]
	public static bool CheckSecretActive(Secret s)
	{
		return default(bool);
	}

	[Address(RVA = "0x1563760", Offset = "0x1563760", VA = "0x1563760")]
	public static bool CheckAnyActive()
	{
		return default(bool);
	}

	[Address(RVA = "0x1566238", Offset = "0x1566238", VA = "0x1566238")]
	public static bool CheckAnyUnlocked()
	{
		return default(bool);
	}

	[Address(RVA = "0x1563AA8", Offset = "0x1563AA8", VA = "0x1563AA8")]
	public static void UnlockSecret(Secret s)
	{
	}

	[Address(RVA = "0x156647C", Offset = "0x156647C", VA = "0x156647C")]
	public static void ToggleSecretActive(Secret s, bool untoggle = false)
	{
	}

	[Address(RVA = "0x15538EC", Offset = "0x15538EC", VA = "0x15538EC")]
	public static void EnactActiveSecrets()
	{
	}

	[Address(RVA = "0x1566C88", Offset = "0x1566C88", VA = "0x1566C88")]
	public void Init()
	{
	}

	[Address(RVA = "0x1565EAC", Offset = "0x1565EAC", VA = "0x1565EAC")]
	public static void InitArray()
	{
	}

	[Address(RVA = "0x1567258", Offset = "0x1567258", VA = "0x1567258")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x156725C", Offset = "0x156725C", VA = "0x156725C")]
	public bool CheckSecrets()
	{
		return default(bool);
	}

	[Address(RVA = "0x1566A9C", Offset = "0x1566A9C", VA = "0x1566A9C")]
	public void UnSelectExclusions(Secret s)
	{
	}

	[Address(RVA = "0x156793C", Offset = "0x156793C", VA = "0x156793C")]
	public void CheckInLevelUnlock()
	{
	}

	[Address(RVA = "0x1567940", Offset = "0x1567940", VA = "0x1567940")]
	public Secrets()
	{
	}
}
public class SpecialFTUEDialog : MonoBehaviour
{
	[Address(RVA = "0x98562C", Offset = "0x98562C", VA = "0x98562C")]
	public SpecialFTUEDialog()
	{
	}
}
public enum UIButtonType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Start,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Navigate,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Show,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ChooseWeapon,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ChooseLevelStaging,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ChooseLevel,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ChooseMode,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ChooseDifficulty,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ChooseSpecial,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Settings,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Secrets,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	FTUE,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SkipFTUE,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Close,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	NextPage,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	PrevPage,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	ShowWeaponUnlock,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	WeaponSandbox,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Restart,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	StartNextLevel,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Pause,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	FTUEToggleHandedness,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	FTUEToggleGore,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Leaderboard,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	SwitchLoadout,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	NextWave,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Input
}
public class UIButton : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD50", Offset = "0x65AD50")]
	private sealed class <onOtherSelected>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIButton <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C2B90", Offset = "0x8C2B90", VA = "0x8C2B90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C2C00", Offset = "0x8C2C00", VA = "0x8C2C00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C2B18", Offset = "0x8C2B18", VA = "0x8C2B18")]
		[DebuggerHidden]
		public <onOtherSelected>d__27(int <>1__state)
		{
		}

		[Address(RVA = "0x8C2B44", Offset = "0x8C2B44", VA = "0x8C2B44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C2B48", Offset = "0x8C2B48", VA = "0x8C2B48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C2B98", Offset = "0x8C2B98", VA = "0x8C2B98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UIButtonType buttonType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI tooltipText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject tooltipBG;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int buttonValue;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int buttonValue2;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject buttonPointer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator anim;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip hoverAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip selectAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sprite lockedSprite;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Image img;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string tooltip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string lockedTooltip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool locked;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject hoverObject;

	[Address(RVA = "0x733530", Offset = "0x733530", VA = "0x733530")]
	public void Awake()
	{
	}

	[Address(RVA = "0x733730", Offset = "0x733730", VA = "0x733730")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x733898", Offset = "0x733898", VA = "0x733898")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x735878", Offset = "0x735878", VA = "0x735878")]
	public void Click()
	{
	}

	[Address(RVA = "0x73727C", Offset = "0x73727C", VA = "0x73727C")]
	private void StartNextLevel()
	{
	}

	[Address(RVA = "0x735348", Offset = "0x735348", VA = "0x735348")]
	public void Hover(UIInteraction pointer)
	{
	}

	[Address(RVA = "0x735278", Offset = "0x735278", VA = "0x735278")]
	public void UnHover()
	{
	}

	[Address(RVA = "0x735660", Offset = "0x735660", VA = "0x735660")]
	public void Lock()
	{
	}

	[Address(RVA = "0x735714", Offset = "0x735714", VA = "0x735714")]
	public void Unlock()
	{
	}

	[Address(RVA = "0x735520", Offset = "0x735520", VA = "0x735520")]
	public void Select(bool force = false)
	{
	}

	[Address(RVA = "0x7357C4", Offset = "0x7357C4", VA = "0x7357C4")]
	public void UnSelect()
	{
	}

	[Address(RVA = "0x737598", Offset = "0x737598", VA = "0x737598")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AB90", Offset = "0x67AB90")]
	public IEnumerator onOtherSelected()
	{
		return null;
	}

	[Address(RVA = "0x735164", Offset = "0x735164", VA = "0x735164")]
	private void CheckSpecial()
	{
	}

	[Address(RVA = "0x733FC4", Offset = "0x733FC4", VA = "0x733FC4")]
	private void CheckWeapon()
	{
	}

	[Address(RVA = "0x73760C", Offset = "0x73760C", VA = "0x73760C")]
	public UIButton()
	{
	}
}
public class UICheckbox : UIButton
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int[] mutuallyExclusive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TextMeshProUGUI text;

	[Address(RVA = "0x8C2C08", Offset = "0x8C2C08", VA = "0x8C2C08")]
	public void Setup(int val, string description)
	{
	}

	[Address(RVA = "0x8C2E98", Offset = "0x8C2E98", VA = "0x8C2E98")]
	public UICheckbox()
	{
	}
}
public class UICutableItem : Cutable
{
	public event EventHandler<EventArgs> OnCut
	{
		[Address(RVA = "0x8C2EA0", Offset = "0x8C2EA0", VA = "0x8C2EA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67ABF4", Offset = "0x67ABF4")]
		add
		{
		}
		[Address(RVA = "0x8C2F8C", Offset = "0x8C2F8C", VA = "0x8C2F8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67AC04", Offset = "0x67AC04")]
		remove
		{
		}
	}

	[Address(RVA = "0x8C3078", Offset = "0x8C3078", VA = "0x8C3078")]
	private void Start()
	{
	}

	[Address(RVA = "0x8C307C", Offset = "0x8C307C", VA = "0x8C307C")]
	private void Update()
	{
	}

	[Address(RVA = "0x8C3080", Offset = "0x8C3080", VA = "0x8C3080", Slot = "10")]
	protected override void CutterCallback(bool success, GameObject[] cuttedObjects, CutterPlane plane, object userdata)
	{
	}

	[Address(RVA = "0x8C3140", Offset = "0x8C3140", VA = "0x8C3140")]
	public UICutableItem()
	{
	}
}
public class UIInteraction : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD60", Offset = "0x65AD60")]
	private sealed class <StopHaptics>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C46F8", Offset = "0x8C46F8", VA = "0x8C46F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C4768", Offset = "0x8C4768", VA = "0x8C4768", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C4204", Offset = "0x8C4204", VA = "0x8C4204")]
		[DebuggerHidden]
		public <StopHaptics>d__16(int <>1__state)
		{
		}

		[Address(RVA = "0x8C460C", Offset = "0x8C460C", VA = "0x8C460C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C4610", Offset = "0x8C4610", VA = "0x8C4610", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C4700", Offset = "0x8C4700", VA = "0x8C4700", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD70", Offset = "0x65AD70")]
	private sealed class <Hide>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIInteraction <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C44B4", Offset = "0x8C44B4", VA = "0x8C44B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C4524", Offset = "0x8C4524", VA = "0x8C4524", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C42A4", Offset = "0x8C42A4", VA = "0x8C42A4")]
		[DebuggerHidden]
		public <Hide>d__17(int <>1__state)
		{
		}

		[Address(RVA = "0x8C444C", Offset = "0x8C444C", VA = "0x8C444C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C4450", Offset = "0x8C4450", VA = "0x8C4450", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C44BC", Offset = "0x8C44BC", VA = "0x8C44BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD80", Offset = "0x65AD80")]
	private sealed class <Show>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIInteraction <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C4594", Offset = "0x8C4594", VA = "0x8C4594", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C4604", Offset = "0x8C4604", VA = "0x8C4604", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C4344", Offset = "0x8C4344", VA = "0x8C4344")]
		[DebuggerHidden]
		public <Show>d__18(int <>1__state)
		{
		}

		[Address(RVA = "0x8C452C", Offset = "0x8C452C", VA = "0x8C452C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C4530", Offset = "0x8C4530", VA = "0x8C4530", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C459C", Offset = "0x8C459C", VA = "0x8C459C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VRTK_ControllerEvents controllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material offHitTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material onHitTarget;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool active;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UIInteraction otherHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UIButton hovering;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject pointer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer pointerMeshRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float maxDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool clicked;

	[Address(RVA = "0x8C3148", Offset = "0x8C3148", VA = "0x8C3148")]
	public void Start()
	{
	}

	[Address(RVA = "0x8C34B4", Offset = "0x8C34B4", VA = "0x8C34B4")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x8C3658", Offset = "0x8C3658", VA = "0x8C3658")]
	public void Update()
	{
	}

	[Address(RVA = "0x8C3D40", Offset = "0x8C3D40", VA = "0x8C3D40")]
	public void UnHover()
	{
	}

	[Address(RVA = "0x8C3DD8", Offset = "0x8C3DD8", VA = "0x8C3DD8")]
	private void Click()
	{
	}

	[Address(RVA = "0x8C3F6C", Offset = "0x8C3F6C", VA = "0x8C3F6C")]
	public void Rumble(float strength, float duration)
	{
	}

	[Address(RVA = "0x8C4188", Offset = "0x8C4188", VA = "0x8C4188")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AC14", Offset = "0x67AC14")]
	private IEnumerator StopHaptics(float duration)
	{
		return null;
	}

	[Address(RVA = "0x8C4230", Offset = "0x8C4230", VA = "0x8C4230")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AC78", Offset = "0x67AC78")]
	private IEnumerator Hide()
	{
		return null;
	}

	[Address(RVA = "0x8C42D0", Offset = "0x8C42D0", VA = "0x8C42D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67ACDC", Offset = "0x67ACDC")]
	private IEnumerator Show()
	{
		return null;
	}

	[Address(RVA = "0x8C4370", Offset = "0x8C4370", VA = "0x8C4370")]
	private void pauseHandler(object sender, ControllerInteractionEventArgs e)
	{
	}

	[Address(RVA = "0x8C43BC", Offset = "0x8C43BC", VA = "0x8C43BC")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x8C443C", Offset = "0x8C443C", VA = "0x8C443C")]
	public UIInteraction()
	{
	}
}
public class UILeaderboardEntry : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AD90", Offset = "0x65AD90")]
	private sealed class <DelayedSetup>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int frameDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UILeaderboardEntry <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string rank;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string score;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool isMe;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int <i>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C4B14", Offset = "0x8C4B14", VA = "0x8C4B14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C4B84", Offset = "0x8C4B84", VA = "0x8C4B84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C48E8", Offset = "0x8C48E8", VA = "0x8C48E8")]
		[DebuggerHidden]
		public <DelayedSetup>d__5(int <>1__state)
		{
		}

		[Address(RVA = "0x8C491C", Offset = "0x8C491C", VA = "0x8C491C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C4920", Offset = "0x8C4920", VA = "0x8C4920", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C4B1C", Offset = "0x8C4B1C", VA = "0x8C4B1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI rankText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI nameText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI scoreText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject highlight;

	[Address(RVA = "0x8C4770", Offset = "0x8C4770", VA = "0x8C4770")]
	public void Setup(string rank, string name, string score, bool isMe = false, int frameDelay = 0)
	{
	}

	[Address(RVA = "0x8C47E0", Offset = "0x8C47E0", VA = "0x8C47E0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AD40", Offset = "0x67AD40")]
	private IEnumerator DelayedSetup(string rank, string name, string score, bool isMe = false, int frameDelay = 0)
	{
		return null;
	}

	[Address(RVA = "0x8C4914", Offset = "0x8C4914", VA = "0x8C4914")]
	public UILeaderboardEntry()
	{
	}
}
public class UserModUI : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI text;

	[Address(RVA = "0x8C9334", Offset = "0x8C9334", VA = "0x8C9334")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x8C93A8", Offset = "0x8C93A8", VA = "0x8C93A8")]
	public UserModUI()
	{
	}
}
public class UnlockSandbox : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ADA0", Offset = "0x65ADA0")]
	private sealed class <onStartLevel>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C8FE4", Offset = "0x8C8FE4", VA = "0x8C8FE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C9054", Offset = "0x8C9054", VA = "0x8C9054", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5398", Offset = "0x8C5398", VA = "0x8C5398")]
		[DebuggerHidden]
		public <onStartLevel>d__31(int <>1__state)
		{
		}

		[Address(RVA = "0x8C8CE4", Offset = "0x8C8CE4", VA = "0x8C8CE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C8CE8", Offset = "0x8C8CE8", VA = "0x8C8CE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C8FEC", Offset = "0x8C8FEC", VA = "0x8C8FEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ADB0", Offset = "0x65ADB0")]
	private sealed class <KillEnemiesAndFinish>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C6E3C", Offset = "0x8C6E3C", VA = "0x8C6E3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C6EAC", Offset = "0x8C6EAC", VA = "0x8C6EAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5438", Offset = "0x8C5438", VA = "0x8C5438")]
		[DebuggerHidden]
		public <KillEnemiesAndFinish>d__32(int <>1__state)
		{
		}

		[Address(RVA = "0x8C6A7C", Offset = "0x8C6A7C", VA = "0x8C6A7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C6A80", Offset = "0x8C6A80", VA = "0x8C6A80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C6E44", Offset = "0x8C6E44", VA = "0x8C6E44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ADC0", Offset = "0x65ADC0")]
	private sealed class <ShadowBow>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C7BD4", Offset = "0x8C7BD4", VA = "0x8C7BD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C7C44", Offset = "0x8C7C44", VA = "0x8C7C44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C54D8", Offset = "0x8C54D8", VA = "0x8C54D8")]
		[DebuggerHidden]
		public <ShadowBow>d__33(int <>1__state)
		{
		}

		[Address(RVA = "0x8C7714", Offset = "0x8C7714", VA = "0x8C7714", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C7718", Offset = "0x8C7718", VA = "0x8C7718", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C7BDC", Offset = "0x8C7BDC", VA = "0x8C7BDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ADD0", Offset = "0x65ADD0")]
	private sealed class <ShadowPulse>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C82C4", Offset = "0x8C82C4", VA = "0x8C82C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C8334", Offset = "0x8C8334", VA = "0x8C8334", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5578", Offset = "0x8C5578", VA = "0x8C5578")]
		[DebuggerHidden]
		public <ShadowPulse>d__34(int <>1__state)
		{
		}

		[Address(RVA = "0x8C8134", Offset = "0x8C8134", VA = "0x8C8134", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C8138", Offset = "0x8C8138", VA = "0x8C8138", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C82CC", Offset = "0x8C82CC", VA = "0x8C82CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ADE0", Offset = "0x65ADE0")]
	private sealed class <ShadowBlast>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C769C", Offset = "0x8C769C", VA = "0x8C769C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C770C", Offset = "0x8C770C", VA = "0x8C770C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5618", Offset = "0x8C5618", VA = "0x8C5618")]
		[DebuggerHidden]
		public <ShadowBlast>d__35(int <>1__state)
		{
		}

		[Address(RVA = "0x8C757C", Offset = "0x8C757C", VA = "0x8C757C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C7580", Offset = "0x8C7580", VA = "0x8C7580", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C76A4", Offset = "0x8C76A4", VA = "0x8C76A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65ADF0", Offset = "0x65ADF0")]
	private sealed class <ShadowDart>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C7E48", Offset = "0x8C7E48", VA = "0x8C7E48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C7EB8", Offset = "0x8C7EB8", VA = "0x8C7EB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C56B8", Offset = "0x8C56B8", VA = "0x8C56B8")]
		[DebuggerHidden]
		public <ShadowDart>d__36(int <>1__state)
		{
		}

		[Address(RVA = "0x8C7C4C", Offset = "0x8C7C4C", VA = "0x8C7C4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C7C50", Offset = "0x8C7C50", VA = "0x8C7C50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C7E50", Offset = "0x8C7E50", VA = "0x8C7E50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE00", Offset = "0x65AE00")]
	private sealed class <ShadowJump>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C80BC", Offset = "0x8C80BC", VA = "0x8C80BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C812C", Offset = "0x8C812C", VA = "0x8C812C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5758", Offset = "0x8C5758", VA = "0x8C5758")]
		[DebuggerHidden]
		public <ShadowJump>d__37(int <>1__state)
		{
		}

		[Address(RVA = "0x8C7EC0", Offset = "0x8C7EC0", VA = "0x8C7EC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C7EC4", Offset = "0x8C7EC4", VA = "0x8C7EC4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C80C4", Offset = "0x8C80C4", VA = "0x8C80C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE10", Offset = "0x65AE10")]
	private sealed class <Swords>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C879C", Offset = "0x8C879C", VA = "0x8C879C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C880C", Offset = "0x8C880C", VA = "0x8C880C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C57F8", Offset = "0x8C57F8", VA = "0x8C57F8")]
		[DebuggerHidden]
		public <Swords>d__38(int <>1__state)
		{
		}

		[Address(RVA = "0x8C8690", Offset = "0x8C8690", VA = "0x8C8690", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C8694", Offset = "0x8C8694", VA = "0x8C8694", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C87A4", Offset = "0x8C87A4", VA = "0x8C87A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE20", Offset = "0x65AE20")]
	private sealed class <Sword>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C8618", Offset = "0x8C8618", VA = "0x8C8618", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C8688", Offset = "0x8C8688", VA = "0x8C8688", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5898", Offset = "0x8C5898", VA = "0x8C5898")]
		[DebuggerHidden]
		public <Sword>d__39(int <>1__state)
		{
		}

		[Address(RVA = "0x8C850C", Offset = "0x8C850C", VA = "0x8C850C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C8510", Offset = "0x8C8510", VA = "0x8C8510", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C8620", Offset = "0x8C8620", VA = "0x8C8620", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE30", Offset = "0x65AE30")]
	private sealed class <Axe>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C66AC", Offset = "0x8C66AC", VA = "0x8C66AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C671C", Offset = "0x8C671C", VA = "0x8C671C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5938", Offset = "0x8C5938", VA = "0x8C5938")]
		[DebuggerHidden]
		public <Axe>d__40(int <>1__state)
		{
		}

		[Address(RVA = "0x8C65A0", Offset = "0x8C65A0", VA = "0x8C65A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C65A4", Offset = "0x8C65A4", VA = "0x8C65A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C66B4", Offset = "0x8C66B4", VA = "0x8C66B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE40", Offset = "0x65AE40")]
	private sealed class <Bow>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C6834", Offset = "0x8C6834", VA = "0x8C6834", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C68A4", Offset = "0x8C68A4", VA = "0x8C68A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C59D8", Offset = "0x8C59D8", VA = "0x8C59D8")]
		[DebuggerHidden]
		public <Bow>d__41(int <>1__state)
		{
		}

		[Address(RVA = "0x8C6724", Offset = "0x8C6724", VA = "0x8C6724", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C6728", Offset = "0x8C6728", VA = "0x8C6728", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C683C", Offset = "0x8C683C", VA = "0x8C683C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE50", Offset = "0x65AE50")]
	private sealed class <Claws>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C6A04", Offset = "0x8C6A04", VA = "0x8C6A04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C6A74", Offset = "0x8C6A74", VA = "0x8C6A74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5A78", Offset = "0x8C5A78", VA = "0x8C5A78")]
		[DebuggerHidden]
		public <Claws>d__42(int <>1__state)
		{
		}

		[Address(RVA = "0x8C68AC", Offset = "0x8C68AC", VA = "0x8C68AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C68B0", Offset = "0x8C68B0", VA = "0x8C68B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C6A0C", Offset = "0x8C6A0C", VA = "0x8C6A0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE60", Offset = "0x65AE60")]
	private sealed class <Staff>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C8494", Offset = "0x8C8494", VA = "0x8C8494", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C8504", Offset = "0x8C8504", VA = "0x8C8504", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5B18", Offset = "0x8C5B18", VA = "0x8C5B18")]
		[DebuggerHidden]
		public <Staff>d__43(int <>1__state)
		{
		}

		[Address(RVA = "0x8C833C", Offset = "0x8C833C", VA = "0x8C833C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C8340", Offset = "0x8C8340", VA = "0x8C8340", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C849C", Offset = "0x8C849C", VA = "0x8C849C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE70", Offset = "0x65AE70")]
	private sealed class <LongShort>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C71DC", Offset = "0x8C71DC", VA = "0x8C71DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C724C", Offset = "0x8C724C", VA = "0x8C724C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5BB8", Offset = "0x8C5BB8", VA = "0x8C5BB8")]
		[DebuggerHidden]
		public <LongShort>d__44(int <>1__state)
		{
		}

		[Address(RVA = "0x8C7084", Offset = "0x8C7084", VA = "0x8C7084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C7088", Offset = "0x8C7088", VA = "0x8C7088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C71E4", Offset = "0x8C71E4", VA = "0x8C71E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE80", Offset = "0x65AE80")]
	private sealed class <Knuckles>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C700C", Offset = "0x8C700C", VA = "0x8C700C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C707C", Offset = "0x8C707C", VA = "0x8C707C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5C58", Offset = "0x8C5C58", VA = "0x8C5C58")]
		[DebuggerHidden]
		public <Knuckles>d__45(int <>1__state)
		{
		}

		[Address(RVA = "0x8C6EB4", Offset = "0x8C6EB4", VA = "0x8C6EB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C6EB8", Offset = "0x8C6EB8", VA = "0x8C6EB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C7014", Offset = "0x8C7014", VA = "0x8C7014", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AE90", Offset = "0x65AE90")]
	private sealed class <Naginata>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C73AC", Offset = "0x8C73AC", VA = "0x8C73AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C741C", Offset = "0x8C741C", VA = "0x8C741C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5CF8", Offset = "0x8C5CF8", VA = "0x8C5CF8")]
		[DebuggerHidden]
		public <Naginata>d__46(int <>1__state)
		{
		}

		[Address(RVA = "0x8C7254", Offset = "0x8C7254", VA = "0x8C7254", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C7258", Offset = "0x8C7258", VA = "0x8C7258", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C73B4", Offset = "0x8C73B4", VA = "0x8C73B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AEA0", Offset = "0x65AEA0")]
	private sealed class <PlayVO>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string VO;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C7504", Offset = "0x8C7504", VA = "0x8C7504", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C7574", Offset = "0x8C7574", VA = "0x8C7574", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5F34", Offset = "0x8C5F34", VA = "0x8C5F34")]
		[DebuggerHidden]
		public <PlayVO>d__48(int <>1__state)
		{
		}

		[Address(RVA = "0x8C7424", Offset = "0x8C7424", VA = "0x8C7424", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C7428", Offset = "0x8C7428", VA = "0x8C7428", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C750C", Offset = "0x8C750C", VA = "0x8C750C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AEB0", Offset = "0x65AEB0")]
	private sealed class <onEnd>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C8940", Offset = "0x8C8940", VA = "0x8C8940", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C89B0", Offset = "0x8C89B0", VA = "0x8C89B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C5FD4", Offset = "0x8C5FD4", VA = "0x8C5FD4")]
		[DebuggerHidden]
		public <onEnd>d__49(int <>1__state)
		{
		}

		[Address(RVA = "0x8C8814", Offset = "0x8C8814", VA = "0x8C8814", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C8818", Offset = "0x8C8818", VA = "0x8C8818", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C8948", Offset = "0x8C8948", VA = "0x8C8948", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AEC0", Offset = "0x65AEC0")]
	private sealed class <onUnPause>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C90B8", Offset = "0x8C90B8", VA = "0x8C90B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C9128", Offset = "0x8C9128", VA = "0x8C9128", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C6074", Offset = "0x8C6074", VA = "0x8C6074")]
		[DebuggerHidden]
		public <onUnPause>d__50(int <>1__state)
		{
		}

		[Address(RVA = "0x8C905C", Offset = "0x8C905C", VA = "0x8C905C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C9060", Offset = "0x8C9060", VA = "0x8C9060", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C90C0", Offset = "0x8C90C0", VA = "0x8C90C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AED0", Offset = "0x65AED0")]
	private sealed class <onPause>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C8C6C", Offset = "0x8C8C6C", VA = "0x8C8C6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C8CDC", Offset = "0x8C8CDC", VA = "0x8C8CDC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C6114", Offset = "0x8C6114", VA = "0x8C6114")]
		[DebuggerHidden]
		public <onPause>d__51(int <>1__state)
		{
		}

		[Address(RVA = "0x8C8A90", Offset = "0x8C8A90", VA = "0x8C8A90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C8A94", Offset = "0x8C8A94", VA = "0x8C8A94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C8C74", Offset = "0x8C8C74", VA = "0x8C8C74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AEE0", Offset = "0x65AEE0")]
	private sealed class <spawn>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C927C", Offset = "0x8C927C", VA = "0x8C927C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C92EC", Offset = "0x8C92EC", VA = "0x8C92EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C6140", Offset = "0x8C6140", VA = "0x8C6140")]
		[DebuggerHidden]
		public <spawn>d__52(int <>1__state)
		{
		}

		[Address(RVA = "0x8C9130", Offset = "0x8C9130", VA = "0x8C9130", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C9134", Offset = "0x8C9134", VA = "0x8C9134", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C9284", Offset = "0x8C9284", VA = "0x8C9284", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AEF0", Offset = "0x65AEF0")]
	private sealed class <onKill>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockSandbox <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8C8A18", Offset = "0x8C8A18", VA = "0x8C8A18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8C8A88", Offset = "0x8C8A88", VA = "0x8C8A88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8C61E0", Offset = "0x8C61E0", VA = "0x8C61E0")]
		[DebuggerHidden]
		public <onKill>d__53(int <>1__state)
		{
		}

		[Address(RVA = "0x8C89B8", Offset = "0x8C89B8", VA = "0x8C89B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8C89BC", Offset = "0x8C89BC", VA = "0x8C89BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8C8A20", Offset = "0x8C8A20", VA = "0x8C8A20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF00", Offset = "0x65AF00")]
	private sealed class <>c__DisplayClass54_0
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnlockSandbox <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitboxNinja newObject;

		[Address(RVA = "0x8C6488", Offset = "0x8C6488", VA = "0x8C6488")]
		public <>c__DisplayClass54_0()
		{
		}

		[Address(RVA = "0x8C6528", Offset = "0x8C6528", VA = "0x8C6528")]
		internal void <spawnEnemy>b__0()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int ShouldUnlockedWeaponOrSpecial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool StartedFromMenu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Cutter Cutter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HitboxNinja Enemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject FarSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject CloseSpawn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Detail;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI Title;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI Body;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<GameObject> ActiveIfFromMenu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<GameObject> ActiveIfNotFromMenu;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI StageRequirement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Image StageRequirementFill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject TutorialCompleteDialog;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject[] TutorialCompleteEquipOptions;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject TutorialCompleteNextLevel;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject StageRequirementContainer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public FTUE_Trainer Narrator;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public FTUE_SpecialGenerator Generator;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<HitboxNinja> enemies;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int previousWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int previousSpecial;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool isSpawning;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool sandboxActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	private bool distanceWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int enemiesKilled;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float requirementWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool firstUnlock;

	[Address(RVA = "0x8C4B94", Offset = "0x8C4B94", VA = "0x8C4B94")]
	public void Start()
	{
	}

	[Address(RVA = "0x8C5018", Offset = "0x8C5018", VA = "0x8C5018")]
	public void Update()
	{
	}

	[Address(RVA = "0x8C5128", Offset = "0x8C5128", VA = "0x8C5128")]
	public void OnDestroy()
	{
	}

	[Address(RVA = "0x8C5324", Offset = "0x8C5324", VA = "0x8C5324")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67ADA4", Offset = "0x67ADA4")]
	private IEnumerator onStartLevel()
	{
		return null;
	}

	[Address(RVA = "0x8C53C4", Offset = "0x8C53C4", VA = "0x8C53C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AE08", Offset = "0x67AE08")]
	private IEnumerator KillEnemiesAndFinish()
	{
		return null;
	}

	[Address(RVA = "0x8C5464", Offset = "0x8C5464", VA = "0x8C5464")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AE6C", Offset = "0x67AE6C")]
	private IEnumerator ShadowBow()
	{
		return null;
	}

	[Address(RVA = "0x8C5504", Offset = "0x8C5504", VA = "0x8C5504")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AED0", Offset = "0x67AED0")]
	private IEnumerator ShadowPulse()
	{
		return null;
	}

	[Address(RVA = "0x8C55A4", Offset = "0x8C55A4", VA = "0x8C55A4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AF34", Offset = "0x67AF34")]
	private IEnumerator ShadowBlast()
	{
		return null;
	}

	[Address(RVA = "0x8C5644", Offset = "0x8C5644", VA = "0x8C5644")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AF98", Offset = "0x67AF98")]
	private IEnumerator ShadowDart()
	{
		return null;
	}

	[Address(RVA = "0x8C56E4", Offset = "0x8C56E4", VA = "0x8C56E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67AFFC", Offset = "0x67AFFC")]
	private IEnumerator ShadowJump()
	{
		return null;
	}

	[Address(RVA = "0x8C5784", Offset = "0x8C5784", VA = "0x8C5784")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B060", Offset = "0x67B060")]
	private IEnumerator Swords()
	{
		return null;
	}

	[Address(RVA = "0x8C5824", Offset = "0x8C5824", VA = "0x8C5824")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B0C4", Offset = "0x67B0C4")]
	private IEnumerator Sword()
	{
		return null;
	}

	[Address(RVA = "0x8C58C4", Offset = "0x8C58C4", VA = "0x8C58C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B128", Offset = "0x67B128")]
	private IEnumerator Axe()
	{
		return null;
	}

	[Address(RVA = "0x8C5964", Offset = "0x8C5964", VA = "0x8C5964")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B18C", Offset = "0x67B18C")]
	private IEnumerator Bow()
	{
		return null;
	}

	[Address(RVA = "0x8C5A04", Offset = "0x8C5A04", VA = "0x8C5A04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B1F0", Offset = "0x67B1F0")]
	private IEnumerator Claws()
	{
		return null;
	}

	[Address(RVA = "0x8C5AA4", Offset = "0x8C5AA4", VA = "0x8C5AA4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B254", Offset = "0x67B254")]
	private IEnumerator Staff()
	{
		return null;
	}

	[Address(RVA = "0x8C5B44", Offset = "0x8C5B44", VA = "0x8C5B44")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B2B8", Offset = "0x67B2B8")]
	private IEnumerator LongShort()
	{
		return null;
	}

	[Address(RVA = "0x8C5BE4", Offset = "0x8C5BE4", VA = "0x8C5BE4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B31C", Offset = "0x67B31C")]
	private IEnumerator Knuckles()
	{
		return null;
	}

	[Address(RVA = "0x8C5C84", Offset = "0x8C5C84", VA = "0x8C5C84")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B380", Offset = "0x67B380")]
	private IEnumerator Naginata()
	{
		return null;
	}

	[Address(RVA = "0x8C5D24", Offset = "0x8C5D24", VA = "0x8C5D24")]
	private void updateRequirement(int progress, int total)
	{
	}

	[Address(RVA = "0x8C5E9C", Offset = "0x8C5E9C", VA = "0x8C5E9C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B3E4", Offset = "0x67B3E4")]
	protected IEnumerator PlayVO(string VO)
	{
		return null;
	}

	[Address(RVA = "0x8C5F60", Offset = "0x8C5F60", VA = "0x8C5F60")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B448", Offset = "0x67B448")]
	private IEnumerator onEnd()
	{
		return null;
	}

	[Address(RVA = "0x8C6000", Offset = "0x8C6000", VA = "0x8C6000")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B4AC", Offset = "0x67B4AC")]
	private IEnumerator onUnPause()
	{
		return null;
	}

	[Address(RVA = "0x8C60A0", Offset = "0x8C60A0", VA = "0x8C60A0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B510", Offset = "0x67B510")]
	private IEnumerator onPause()
	{
		return null;
	}

	[Address(RVA = "0x8C50B4", Offset = "0x8C50B4", VA = "0x8C50B4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B574", Offset = "0x67B574")]
	private IEnumerator spawn()
	{
		return null;
	}

	[Address(RVA = "0x8C616C", Offset = "0x8C616C", VA = "0x8C616C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B5D8", Offset = "0x67B5D8")]
	private IEnumerator onKill(GameObject enemy)
	{
		return null;
	}

	[Address(RVA = "0x8C620C", Offset = "0x8C620C", VA = "0x8C620C")]
	private HitboxNinja spawnEnemy(Transform location)
	{
		return null;
	}

	[Address(RVA = "0x8C6490", Offset = "0x8C6490", VA = "0x8C6490")]
	public UnlockSandbox()
	{
	}

	[Address(RVA = "0x8C64F8", Offset = "0x8C64F8", VA = "0x8C64F8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B63C", Offset = "0x67B63C")]
	private bool <KillEnemiesAndFinish>b__32_0()
	{
		return default(bool);
	}

	[Address(RVA = "0x8C6508", Offset = "0x8C6508", VA = "0x8C6508")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B64C", Offset = "0x67B64C")]
	private bool <KillEnemiesAndFinish>b__32_1()
	{
		return default(bool);
	}

	[Address(RVA = "0x8C6518", Offset = "0x8C6518", VA = "0x8C6518")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B65C", Offset = "0x67B65C")]
	private bool <KillEnemiesAndFinish>b__32_2()
	{
		return default(bool);
	}
}
public class Unparent : MonoBehaviour
{
	[Address(RVA = "0x8C92F4", Offset = "0x8C92F4", VA = "0x8C92F4")]
	private void Start()
	{
	}

	[Address(RVA = "0x8C932C", Offset = "0x8C932C", VA = "0x8C932C")]
	public Unparent()
	{
	}
}
public class Util
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool DebugMode;

	[Address(RVA = "0x8C95E8", Offset = "0x8C95E8", VA = "0x8C95E8")]
	static Util()
	{
	}

	[Address(RVA = "0x8C96E0", Offset = "0x8C96E0", VA = "0x8C96E0")]
	public static void LoadFromDebugFile()
	{
	}

	[Address(RVA = "0x8C9D50", Offset = "0x8C9D50", VA = "0x8C9D50")]
	public static bool ApplyRemoteUserMod(string data)
	{
		return default(bool);
	}

	[Address(RVA = "0x8C99D8", Offset = "0x8C99D8", VA = "0x8C99D8")]
	public static void ApplyMods(Dictionary<string, int> mods)
	{
	}

	[Address(RVA = "0x8C97BC", Offset = "0x8C97BC", VA = "0x8C97BC")]
	public static Dictionary<string, int> GetModDictionary(string[] lines)
	{
		return null;
	}

	[Address(RVA = "0x8CA184", Offset = "0x8CA184", VA = "0x8CA184")]
	public static Vector3 CubeBezier3(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
		return default(Vector3);
	}

	public static T ParseEnum<T>(string value)
	{
		return (T)null;
	}

	[Address(RVA = "0x8CA440", Offset = "0x8CA440", VA = "0x8CA440")]
	public static string FormatTime(float time)
	{
		return null;
	}

	[Address(RVA = "0x8CA778", Offset = "0x8CA778", VA = "0x8CA778")]
	public static string GetUserModURL()
	{
		return null;
	}

	[Address(RVA = "0x8CAA50", Offset = "0x8CAA50", VA = "0x8CAA50")]
	public static void SetCurrentFOVLevel(int requestedLevel = 0)
	{
	}

	[Address(RVA = "0x8CAB94", Offset = "0x8CAB94", VA = "0x8CAB94")]
	public Util()
	{
	}
}
public class ViveManager : MonoBehaviour
{
	[Address(RVA = "0x8027FC", Offset = "0x8027FC", VA = "0x8027FC")]
	public void Init()
	{
	}

	[Address(RVA = "0x802800", Offset = "0x802800", VA = "0x802800")]
	public ViveManager()
	{
	}
}
public class BlastProjectile : Weapon
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float FlightSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float FullyChargedExplosionRadius;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject FullyChargedVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float BlastForce;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float SlowMoOnKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float SlowMoOnBlast;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject Explosion;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject FullyChargedExplosion;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject DisableOnRelease;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool released;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	public bool Explosive;

	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float TrampleAmount;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 flightDirection;

	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float chargeTime;

	[Address(RVA = "0x8AEECC", Offset = "0x8AEECC", VA = "0x8AEECC")]
	public void Start()
	{
	}

	[Address(RVA = "0x8AEED8", Offset = "0x8AEED8", VA = "0x8AEED8")]
	public void Release(Vector3 launcherVelocity)
	{
	}

	[Address(RVA = "0x8AF28C", Offset = "0x8AF28C", VA = "0x8AF28C")]
	public void Update()
	{
	}

	[Address(RVA = "0x8AF40C", Offset = "0x8AF40C", VA = "0x8AF40C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Address(RVA = "0x8B00FC", Offset = "0x8B00FC", VA = "0x8B00FC", Slot = "7")]
	public override Vector3 GetForceVector()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x8B0108", Offset = "0x8B0108", VA = "0x8B0108")]
	public BlastProjectile()
	{
	}
}
public class BluntWeapon : SwingingWeapon
{
	[Address(RVA = "0x8B0F70", Offset = "0x8B0F70", VA = "0x8B0F70", Slot = "10")]
	protected override bool IsGoodAngle(Transform bladeDir, Transform tip, Vector3 movementVector)
	{
		return default(bool);
	}

	[Address(RVA = "0x8B0F78", Offset = "0x8B0F78", VA = "0x8B0F78", Slot = "11")]
	protected override bool IgnoreStab()
	{
		return default(bool);
	}

	[Address(RVA = "0x8B0F80", Offset = "0x8B0F80", VA = "0x8B0F80")]
	public BluntWeapon()
	{
	}
}
public class Bow : Weapon
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform NockPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform ArrowRestPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform HandlePoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public LinearMapping LinearMapping;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public BowArrowHand Hand;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public BowArrow ArrowPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float MinDrawDist;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float MaxDrawDist;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public AudioSource pullAudio;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float lastPullClick;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private VRTK_ControllerEvents vrtkController;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private OVRInput.Controller ovrController;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool AbilityBow;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	public bool PullDifference;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
	private bool isPulling;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private BowArrow currentArrow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float pullStrength;

	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private bool debugShootingActivated;

	public bool TriggerPulled
	{
		[Address(RVA = "0x8B7020", Offset = "0x8B7020", VA = "0x8B7020")]
		get
		{
			return default(bool);
		}
	}

	public event EventHandler OnFireBow
	{
		[Address(RVA = "0x8B712C", Offset = "0x8B712C", VA = "0x8B712C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B66C", Offset = "0x67B66C")]
		add
		{
		}
		[Address(RVA = "0x8B7218", Offset = "0x8B7218", VA = "0x8B7218")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B67C", Offset = "0x67B67C")]
		remove
		{
		}
	}

	[Address(RVA = "0x8B7304", Offset = "0x8B7304", VA = "0x8B7304", Slot = "5")]
	public override void Setup()
	{
	}

	[Address(RVA = "0x8B74D4", Offset = "0x8B74D4", VA = "0x8B74D4")]
	private void Update()
	{
	}

	[Address(RVA = "0x8B9164", Offset = "0x8B9164", VA = "0x8B9164")]
	public Bow()
	{
	}
}
public class BowArrow : Weapon
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF10", Offset = "0x65AF10")]
	private sealed class <ShadowJump>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BowArrow <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float force;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <elapsed>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <start>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 <end>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <jumpTime>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8BAA38", Offset = "0x8BAA38", VA = "0x8BAA38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8BAAA8", Offset = "0x8BAAA8", VA = "0x8BAAA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8B926C", Offset = "0x8B926C", VA = "0x8B926C")]
		[DebuggerHidden]
		public <ShadowJump>d__11(int <>1__state)
		{
		}

		[Address(RVA = "0x8BA700", Offset = "0x8BA700", VA = "0x8BA700", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8BA704", Offset = "0x8BA704", VA = "0x8BA704", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8BAA40", Offset = "0x8BAA40", VA = "0x8BAA40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int StrokeCounter;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Rigidbody HeadRB;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject ReleaseVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject HitVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject CritVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject TrailVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject EnvHitVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool transferMomentum;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject Special;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool released;

	[Address(RVA = "0x8B8E4C", Offset = "0x8B8E4C", VA = "0x8B8E4C")]
	public void Release(float force, bool shadowJump)
	{
	}

	[Address(RVA = "0x8B91D4", Offset = "0x8B91D4", VA = "0x8B91D4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B68C", Offset = "0x67B68C")]
	public IEnumerator ShadowJump(float force)
	{
		return null;
	}

	[Address(RVA = "0x8B9298", Offset = "0x8B9298", VA = "0x8B9298")]
	public void Stick(Collision target, bool enemyHit = true)
	{
	}

	[Address(RVA = "0x8B996C", Offset = "0x8B996C", VA = "0x8B996C")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Address(RVA = "0x8BA42C", Offset = "0x8BA42C", VA = "0x8BA42C")]
	private void TriggerSpecial(Collision collision)
	{
	}

	[Address(RVA = "0x8BA660", Offset = "0x8BA660", VA = "0x8BA660", Slot = "7")]
	public override Vector3 GetForceVector()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x8BA694", Offset = "0x8BA694", VA = "0x8BA694")]
	public BowArrow()
	{
	}
}
public class BowArrowHand : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VRTK_ControllerEvents vrtkController;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInput.Controller ovrController;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BowArrow CurrentArrow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BowArrow arrowPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool waitingForReleaseBeforeNextPull;

	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool arrowInHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject offHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	public bool TriggerPulled
	{
		[Address(RVA = "0x8B8D14", Offset = "0x8B8D14", VA = "0x8B8D14")]
		get
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x8BAAB0", Offset = "0x8BAAB0", VA = "0x8BAAB0")]
	private void Start()
	{
	}

	[Address(RVA = "0x8BAB90", Offset = "0x8BAB90", VA = "0x8BAB90")]
	private void Update()
	{
	}

	[Address(RVA = "0x8B748C", Offset = "0x8B748C", VA = "0x8B748C")]
	public void SpawnArrow(BowArrow ArrowPrefab)
	{
	}

	[Address(RVA = "0x8BAE6C", Offset = "0x8BAE6C", VA = "0x8BAE6C")]
	public void doArrowSpawn(BowArrow ArrowPrefab)
	{
	}

	[Address(RVA = "0x8BAF14", Offset = "0x8BAF14", VA = "0x8BAF14")]
	public BowArrowHand()
	{
	}
}
public class ChainDart : EnemyControllingWeapon
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF20", Offset = "0x65AF20")]
	private sealed class <FlyToAndPullBack>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChainDart <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPos>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <finishPos>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <elapsed>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <pullStart>5__5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <yStart>5__6;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <basePullTime>5__7;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <pullTime>5__8;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x8BD278", Offset = "0x8BD278", VA = "0x8BD278", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x8BD2E8", Offset = "0x8BD2E8", VA = "0x8BD2E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x8BBF7C", Offset = "0x8BBF7C", VA = "0x8BBF7C")]
		[DebuggerHidden]
		public <FlyToAndPullBack>d__22(int <>1__state)
		{
		}

		[Address(RVA = "0x8BC2F4", Offset = "0x8BC2F4", VA = "0x8BC2F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x8BC2F8", Offset = "0x8BC2F8", VA = "0x8BC2F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x8BD280", Offset = "0x8BD280", VA = "0x8BD280", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float AimAssistAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float FlightSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject HitVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject ReturnedEmptyVFXPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject ReturnedWithEnemyVFXPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject EnemyAttachedVFXPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Transform Rope;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool IncreaseSpeedPull;

	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float MaximumTravelDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float DamageOnHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float DamageOnReturn;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform SourceAnchor;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool released;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	private bool failedToFindEnemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Enemy hitEnemy;

	public event EventHandler<ChainCompleteEventArgs> ChainComplete
	{
		[Address(RVA = "0x8BB8B8", Offset = "0x8BB8B8", VA = "0x8BB8B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B6F0", Offset = "0x67B6F0")]
		add
		{
		}
		[Address(RVA = "0x8BB9A4", Offset = "0x8BB9A4", VA = "0x8BB9A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B700", Offset = "0x67B700")]
		remove
		{
		}
	}

	[Address(RVA = "0x8BBA90", Offset = "0x8BBA90", VA = "0x8BBA90")]
	public void Release(Transform source)
	{
	}

	[Address(RVA = "0x8BBB7C", Offset = "0x8BBB7C", VA = "0x8BBB7C")]
	private void TriggerChainComplete(bool success)
	{
	}

	[Address(RVA = "0x8BBC14", Offset = "0x8BBC14", VA = "0x8BBC14")]
	private bool DestroyIfTargetGone(Enemy target)
	{
		return default(bool);
	}

	[Address(RVA = "0x8BBD3C", Offset = "0x8BBD3C", VA = "0x8BBD3C")]
	private void UpdateRope()
	{
	}

	[Address(RVA = "0x8BBB08", Offset = "0x8BBB08", VA = "0x8BBB08")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B710", Offset = "0x67B710")]
	private IEnumerator FlyToAndPullBack()
	{
		return null;
	}

	[Address(RVA = "0x8BBFA8", Offset = "0x8BBFA8", VA = "0x8BBFA8")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Address(RVA = "0x8BC2D8", Offset = "0x8BC2D8", VA = "0x8BC2D8")]
	public ChainDart()
	{
	}
}
public class ChainCompleteEventArgs : EventArgs
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool Success;

	[Address(RVA = "0x8BB838", Offset = "0x8BB838", VA = "0x8BB838")]
	public ChainCompleteEventArgs(bool success)
	{
	}
}
public class EnemyControllingWeapon : Weapon
{
	[Address(RVA = "0x7C6A2C", Offset = "0x7C6A2C", VA = "0x7C6A2C")]
	private void Start()
	{
	}

	[Address(RVA = "0x7C6A30", Offset = "0x7C6A30", VA = "0x7C6A30")]
	private void Update()
	{
	}

	[Address(RVA = "0x7C6A34", Offset = "0x7C6A34", VA = "0x7C6A34")]
	public EnemyControllingWeapon()
	{
	}
}
public class HandBlaster : AbilityWeapon
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform BlastObjectSpawnPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BlastProjectile[] BlastObjectPrefabs;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BlastProjectile currentBlastObject;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 lastPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 velocity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool AllowRelease;

	public bool HoldingBlastProjectile
	{
		[Address(RVA = "0x702804", Offset = "0x702804", VA = "0x702804")]
		get
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x702E38", Offset = "0x702E38", VA = "0x702E38")]
	private void Start()
	{
	}

	[Address(RVA = "0x702E3C", Offset = "0x702E3C", VA = "0x702E3C")]
	private void Update()
	{
	}

	[Address(RVA = "0x702F74", Offset = "0x702F74", VA = "0x702F74", Slot = "5")]
	public override void TriggerRelease()
	{
	}

	[Address(RVA = "0x702CF8", Offset = "0x702CF8", VA = "0x702CF8")]
	public void SpawnBlast(int tier)
	{
	}

	[Address(RVA = "0x703038", Offset = "0x703038", VA = "0x703038")]
	public HandBlaster()
	{
	}
}
public class HandChainDart : AbilityWeapon
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform ChainDartSpawnPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<ChainDart> ChainDartPrefabs;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public uint InitialSpecialCost;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float ExtraPullSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool AllowRelease;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ChainDart currentChainObject;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 lastPos;

	public bool HasActiveDart
	{
		[Address(RVA = "0x703040", Offset = "0x703040", VA = "0x703040")]
		get
		{
			return default(bool);
		}
	}

	[Address(RVA = "0x7030B0", Offset = "0x7030B0", VA = "0x7030B0", Slot = "5")]
	public override void TriggerRelease()
	{
	}

	[Address(RVA = "0x703160", Offset = "0x703160", VA = "0x703160")]
	private void CurrentChainObject_ChainComplete(object sender, ChainCompleteEventArgs e)
	{
	}

	[Address(RVA = "0x703208", Offset = "0x703208", VA = "0x703208")]
	public void SpawnDart(int tier)
	{
	}

	[Address(RVA = "0x70334C", Offset = "0x70334C", VA = "0x70334C")]
	public void Update()
	{
	}

	[Address(RVA = "0x7034E8", Offset = "0x7034E8", VA = "0x7034E8")]
	public HandChainDart()
	{
	}
}
public class HandStopTime : AbilityWeapon
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF30", Offset = "0x65AF30")]
	private sealed class <EnterShadowMode>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandStopTime <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7040C0", Offset = "0x7040C0", VA = "0x7040C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x704130", Offset = "0x704130", VA = "0x704130", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x703E78", Offset = "0x703E78", VA = "0x703E78")]
		[DebuggerHidden]
		public <EnterShadowMode>d__24(int <>1__state)
		{
		}

		[Address(RVA = "0x703F60", Offset = "0x703F60", VA = "0x703F60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x703F64", Offset = "0x703F64", VA = "0x703F64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7040C8", Offset = "0x7040C8", VA = "0x7040C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF40", Offset = "0x65AF40")]
	private sealed class <ExitShadowMode>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandStopTime <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x704244", Offset = "0x704244", VA = "0x704244", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7042B4", Offset = "0x7042B4", VA = "0x7042B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x703EA4", Offset = "0x703EA4", VA = "0x703EA4")]
		[DebuggerHidden]
		public <ExitShadowMode>d__25(int <>1__state)
		{
		}

		[Address(RVA = "0x704138", Offset = "0x704138", VA = "0x704138", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x70413C", Offset = "0x70413C", VA = "0x70413C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x70424C", Offset = "0x70424C", VA = "0x70424C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light PrimaryLight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro TimeText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float TickRate;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public uint AbilityDeductionPerTick;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public uint BaseCost;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float TimeSinceTick;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool inSlowMo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Color startFog;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Color endFog;

	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float startIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float endIntensity;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float startScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float endScale;

	public event EventHandler<EventArgs> TimeStopped
	{
		[Address(RVA = "0x7034FC", Offset = "0x7034FC", VA = "0x7034FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B774", Offset = "0x67B774")]
		add
		{
		}
		[Address(RVA = "0x7035E8", Offset = "0x7035E8", VA = "0x7035E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B784", Offset = "0x67B784")]
		remove
		{
		}
	}

	public event EventHandler<EventArgs> TimeResumed
	{
		[Address(RVA = "0x7036D4", Offset = "0x7036D4", VA = "0x7036D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B794", Offset = "0x67B794")]
		add
		{
		}
		[Address(RVA = "0x7037C0", Offset = "0x7037C0", VA = "0x7037C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67B7A4", Offset = "0x67B7A4")]
		remove
		{
		}
	}

	[Address(RVA = "0x7038AC", Offset = "0x7038AC", VA = "0x7038AC")]
	public void Update()
	{
	}

	[Address(RVA = "0x703B24", Offset = "0x703B24", VA = "0x703B24", Slot = "4")]
	public override void TriggerPull()
	{
	}

	[Address(RVA = "0x703D8C", Offset = "0x703D8C", VA = "0x703D8C", Slot = "5")]
	public override void TriggerRelease()
	{
	}

	[Address(RVA = "0x703BD4", Offset = "0x703BD4", VA = "0x703BD4")]
	private void StartSlowTime()
	{
	}

	[Address(RVA = "0x7039DC", Offset = "0x7039DC", VA = "0x7039DC")]
	private void StopSlowTime()
	{
	}

	[Address(RVA = "0x703D90", Offset = "0x703D90", VA = "0x703D90")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B7B4", Offset = "0x67B7B4")]
	public IEnumerator EnterShadowMode()
	{
		return null;
	}

	[Address(RVA = "0x703E04", Offset = "0x703E04", VA = "0x703E04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B818", Offset = "0x67B818")]
	public IEnumerator ExitShadowMode()
	{
		return null;
	}

	[Address(RVA = "0x703ED0", Offset = "0x703ED0", VA = "0x703ED0")]
	public HandStopTime()
	{
	}
}
public class LostTrackingExtrapolator : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 lastPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 lastDelta;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 offset;

	[Address(RVA = "0x83A1C0", Offset = "0x83A1C0", VA = "0x83A1C0")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x83A490", Offset = "0x83A490", VA = "0x83A490")]
	public LostTrackingExtrapolator()
	{
	}
}
public class PreventDupeOnSlice : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform CheckTransform;

	[Address(RVA = "0x1559D98", Offset = "0x1559D98", VA = "0x1559D98")]
	public Vector3 GetCheckPosition()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x1559DC8", Offset = "0x1559DC8", VA = "0x1559DC8")]
	public PreventDupeOnSlice()
	{
	}
}
public class SimArrowFire : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BowArrow ArrowPrefab;

	[Address(RVA = "0x156E4C4", Offset = "0x156E4C4", VA = "0x156E4C4")]
	private void Start()
	{
	}

	[Address(RVA = "0x156E4C8", Offset = "0x156E4C8", VA = "0x156E4C8")]
	private void Update()
	{
	}

	[Address(RVA = "0x156E4CC", Offset = "0x156E4CC", VA = "0x156E4CC")]
	public SimArrowFire()
	{
	}
}
public class SimSwordSlice : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF50", Offset = "0x65AF50")]
	private sealed class <SimStabMovement>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SimSwordSlice <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsed>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x156EC3C", Offset = "0x156EC3C", VA = "0x156EC3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x156ECAC", Offset = "0x156ECAC", VA = "0x156ECAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156E550", Offset = "0x156E550", VA = "0x156E550")]
		[DebuggerHidden]
		public <SimStabMovement>d__2(int <>1__state)
		{
		}

		[Address(RVA = "0x156E9CC", Offset = "0x156E9CC", VA = "0x156E9CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x156E9D0", Offset = "0x156E9D0", VA = "0x156E9D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x156EC44", Offset = "0x156EC44", VA = "0x156EC44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF60", Offset = "0x65AF60")]
	private sealed class <SimSliceMovement>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SimSwordSlice <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <deg>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x156E954", Offset = "0x156E954", VA = "0x156E954", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x156E9C4", Offset = "0x156E9C4", VA = "0x156E9C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x156E5F0", Offset = "0x156E5F0", VA = "0x156E5F0")]
		[DebuggerHidden]
		public <SimSliceMovement>d__3(int <>1__state)
		{
		}

		[Address(RVA = "0x156E624", Offset = "0x156E624", VA = "0x156E624", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x156E628", Offset = "0x156E628", VA = "0x156E628", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x156E95C", Offset = "0x156E95C", VA = "0x156E95C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Address(RVA = "0x156E4D4", Offset = "0x156E4D4", VA = "0x156E4D4")]
	private void Start()
	{
	}

	[Address(RVA = "0x156E4D8", Offset = "0x156E4D8", VA = "0x156E4D8")]
	private void Update()
	{
	}

	[Address(RVA = "0x156E4DC", Offset = "0x156E4DC", VA = "0x156E4DC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B87C", Offset = "0x67B87C")]
	private IEnumerator SimStabMovement()
	{
		return null;
	}

	[Address(RVA = "0x156E57C", Offset = "0x156E57C", VA = "0x156E57C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B8E0", Offset = "0x67B8E0")]
	private IEnumerator SimSliceMovement()
	{
		return null;
	}

	[Address(RVA = "0x156E61C", Offset = "0x156E61C", VA = "0x156E61C")]
	public SimSwordSlice()
	{
	}
}
public class SlashingWeapon : SwingingWeapon
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public bool AnyDirection;

	[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
	public bool DualDirection;

	[Address(RVA = "0x98132C", Offset = "0x98132C", VA = "0x98132C", Slot = "10")]
	protected override bool IsGoodAngle(Transform bladeDir, Transform tip, Vector3 movementVector)
	{
		return default(bool);
	}

	[Address(RVA = "0x981530", Offset = "0x981530", VA = "0x981530", Slot = "11")]
	protected override bool IgnoreStab()
	{
		return default(bool);
	}

	[Address(RVA = "0x981538", Offset = "0x981538", VA = "0x981538")]
	public SlashingWeapon()
	{
	}
}
public class SlowMotionSettings : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SlowMoPerLowHealthHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SlowMoPerKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SlowMoPerCritKill;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float SlowMoPerBlock;

	[Address(RVA = "0x9819C4", Offset = "0x9819C4", VA = "0x9819C4")]
	private void Start()
	{
	}

	[Address(RVA = "0x981A2C", Offset = "0x981A2C", VA = "0x981A2C")]
	public SlowMotionSettings()
	{
	}
}
public class StabDetector : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SlashingWeapon slashingWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool StickOnDeath;

	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool CausesKnockback;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject BloodSprayPrefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform lastStabPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float lastStabTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 stabVector;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Cutable stabbed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Enemy stabbedEnemy;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine exitDelay;

	[Address(RVA = "0x985730", Offset = "0x985730", VA = "0x985730")]
	private void FinishStab()
	{
	}

	[Address(RVA = "0x985938", Offset = "0x985938", VA = "0x985938")]
	private void Update()
	{
	}

	[Address(RVA = "0x9859E0", Offset = "0x9859E0", VA = "0x9859E0")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Address(RVA = "0x98621C", Offset = "0x98621C", VA = "0x98621C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Address(RVA = "0x985AAC", Offset = "0x985AAC", VA = "0x985AAC")]
	private void CheckAndApplyStab(Collider other)
	{
	}

	[Address(RVA = "0x9863A0", Offset = "0x9863A0", VA = "0x9863A0")]
	public StabDetector()
	{
	}
}
public class SwingingWeapon : Weapon
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF70", Offset = "0x65AF70")]
	private sealed class <DelayedClinkEnable>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SwingingWeapon <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x729274", Offset = "0x729274", VA = "0x729274", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7292E4", Offset = "0x7292E4", VA = "0x7292E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x725E18", Offset = "0x725E18", VA = "0x725E18")]
		[DebuggerHidden]
		public <DelayedClinkEnable>d__52(int <>1__state)
		{
		}

		[Address(RVA = "0x7291D8", Offset = "0x7291D8", VA = "0x7291D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7291DC", Offset = "0x7291DC", VA = "0x7291DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72927C", Offset = "0x72927C", VA = "0x72927C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF80", Offset = "0x65AF80")]
	private sealed class <onSpecialReady>d__73 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SwingingWeapon <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x72934C", Offset = "0x72934C", VA = "0x72934C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7293BC", Offset = "0x7293BC", VA = "0x7293BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x728CC8", Offset = "0x728CC8", VA = "0x728CC8")]
		[DebuggerHidden]
		public <onSpecialReady>d__73(int <>1__state)
		{
		}

		[Address(RVA = "0x7292EC", Offset = "0x7292EC", VA = "0x7292EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7292F0", Offset = "0x7292F0", VA = "0x7292F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x729354", Offset = "0x729354", VA = "0x729354", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AF90", Offset = "0x65AF90")]
	private sealed class <onSpecialUsed>d__74 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SwingingWeapon <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x729424", Offset = "0x729424", VA = "0x729424", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x729494", Offset = "0x729494", VA = "0x729494", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x728D68", Offset = "0x728D68", VA = "0x728D68")]
		[DebuggerHidden]
		public <onSpecialUsed>d__74(int <>1__state)
		{
		}

		[Address(RVA = "0x7293C4", Offset = "0x7293C4", VA = "0x7293C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7293C8", Offset = "0x7293C8", VA = "0x7293C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x72942C", Offset = "0x72942C", VA = "0x72942C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform tip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform baseOfWeapon;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform bladeDir;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform handPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<Vector3> tipVectorHistory;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<Vector3> handVectorHistory;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public AnimationCurve TipSpeedDamageMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public AnimationCurve HandSpeedDamageMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AnimationCurve StabHandSpeedDamageMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AnimationCurve StabDepthDamageMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float GoodSwingMultiplierThreshold;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float GoodHandMovementThreshold;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 lastTipPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Vector3 lastHandPos;

	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float lastPosTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float sprayDurationOnHit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject[] hitEffects;

	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject swordTipDustEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ParticleSystem.EmissionModule[] tipDust;

	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float[] rates;

	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject swordClinkEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public GameObject weaponBlockEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject weaponSpecialEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float MaxStabAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject hitEffectPerfect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject hitEffectSlow;

	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject hitEffectBadAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject hitEffectHeavyDamage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject hitEffectMediumDamage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameObject hitEffectLightDamage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject hitEffectNonCrit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject hitEffectBad;

	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GameObject hitEffectHorrible;

	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public GameObject hitEffectInvincible;

	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject stabEffect;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject enemyBlock;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public GameObject enemyBlockBreak;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public float StrokePreservationAngle;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	public float StrokeSpeedRequirement;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public Vector3 CurrentStrokeNormal;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private Dictionary<string, GameObject> hitEffectInstances;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public float StrokeStartTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	public bool InStroke;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D5")]
	public bool AllowClink;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D6")]
	private bool weaponPowerActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private int weaponPowerActivatedStroke;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public TextMeshPro DebugText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private bool captureNextMovementFrame;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private List<GameObject> sortedVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private List<float> sortedVFXActiveTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private Rigidbody rigid;

	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private float lastDebugUpdate;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
	private float topDebugSpeed;

	[Address(RVA = "0x7256F4", Offset = "0x7256F4", VA = "0x7256F4", Slot = "5")]
	public override void Setup()
	{
	}

	[Address(RVA = "0x725DA4", Offset = "0x725DA4", VA = "0x725DA4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B944", Offset = "0x67B944")]
	private IEnumerator DelayedClinkEnable()
	{
		return null;
	}

	[Address(RVA = "0x725E44", Offset = "0x725E44", VA = "0x725E44")]
	private void DetachIfExists(GameObject go)
	{
	}

	[Address(RVA = "0x725810", Offset = "0x725810", VA = "0x725810")]
	private void PrefabSetup()
	{
	}

	[Address(RVA = "0x725EF4", Offset = "0x725EF4", VA = "0x725EF4")]
	private void Update()
	{
	}

	[Address(RVA = "0x7266AC", Offset = "0x7266AC", VA = "0x7266AC")]
	private void FixedUpdate()
	{
	}

	[Address(RVA = "0x726BA0", Offset = "0x726BA0", VA = "0x726BA0")]
	public void ResetPositions()
	{
	}

	[Address(RVA = "0x72644C", Offset = "0x72644C", VA = "0x72644C")]
	public Vector3 CalculateTipMovementVector()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x726C04", Offset = "0x726C04", VA = "0x726C04", Slot = "8")]
	public override Vector3 CalculateHandMovementVector()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x726E64", Offset = "0x726E64", VA = "0x726E64", Slot = "9")]
	public override Vector3 TipDirection()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x726F48", Offset = "0x726F48", VA = "0x726F48")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Address(RVA = "0x728678", Offset = "0x728678", VA = "0x728678")]
	public void ActivateStabVFX(Vector3 pos)
	{
	}

	[Address(RVA = "0x7285CC", Offset = "0x7285CC", VA = "0x7285CC")]
	private void ActivateVFX(GameObject go, Collision col, Quaternion rot)
	{
	}

	[Address(RVA = "0x728734", Offset = "0x728734", VA = "0x728734")]
	private void ActivateVFX(GameObject go, Vector3 pos, Quaternion rot)
	{
	}

	[Address(RVA = "0x728BAC", Offset = "0x728BAC", VA = "0x728BAC")]
	public void ActivateWeaponPower()
	{
	}

	[Address(RVA = "0x728BB8", Offset = "0x728BB8", VA = "0x728BB8")]
	public void DeactivateWeaponPower()
	{
	}

	[Address(RVA = "0x728BC0", Offset = "0x728BC0", VA = "0x728BC0")]
	public bool DoesWeaponPowerApply()
	{
		return default(bool);
	}

	[Address(RVA = "0x728BE4", Offset = "0x728BE4", VA = "0x728BE4")]
	public void StartBlocking()
	{
	}

	[Address(RVA = "0x728C18", Offset = "0x728C18", VA = "0x728C18")]
	public void StopBlocking()
	{
	}

	[Address(RVA = "0x728C4C", Offset = "0x728C4C", VA = "0x728C4C")]
	public bool isOrientedForBlock()
	{
		return default(bool);
	}

	[Address(RVA = "0x728C54", Offset = "0x728C54", VA = "0x728C54")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67B9A8", Offset = "0x67B9A8")]
	private IEnumerator onSpecialReady()
	{
		return null;
	}

	[Address(RVA = "0x728CF4", Offset = "0x728CF4", VA = "0x728CF4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67BA0C", Offset = "0x67BA0C")]
	private IEnumerator onSpecialUsed()
	{
		return null;
	}

	[Address(RVA = "0x728D94", Offset = "0x728D94", VA = "0x728D94", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Address(RVA = "0x729068", Offset = "0x729068", VA = "0x729068", Slot = "7")]
	public override Vector3 GetForceVector()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x72906C", Offset = "0x72906C", VA = "0x72906C", Slot = "10")]
	protected virtual bool IsGoodAngle(Transform bladeDir, Transform tip, Vector3 movementVector)
	{
		return default(bool);
	}

	[Address(RVA = "0x729074", Offset = "0x729074", VA = "0x729074", Slot = "11")]
	protected virtual bool IgnoreStab()
	{
		return default(bool);
	}

	[Address(RVA = "0x72907C", Offset = "0x72907C", VA = "0x72907C")]
	public SwingingWeapon()
	{
	}
}
public class TwoHanded : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform offTip;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform center;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform primaryHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform secondaryHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform secondaryContainer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool AnchorOnLeftHand;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MeshRenderer meshRenderer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool OneHandedMode;

	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool TwistWithPrimaryHand;

	[Address(RVA = "0x7330FC", Offset = "0x7330FC", VA = "0x7330FC")]
	public void Start()
	{
	}

	[Address(RVA = "0x733210", Offset = "0x733210", VA = "0x733210")]
	public void Update()
	{
	}

	[Address(RVA = "0x733300", Offset = "0x733300", VA = "0x733300")]
	public void SetOneHanded(Transform parent)
	{
	}

	[Address(RVA = "0x733408", Offset = "0x733408", VA = "0x733408")]
	public void SetTwoHanded(Transform left, Transform right)
	{
	}

	[Address(RVA = "0x73351C", Offset = "0x73351C", VA = "0x73351C")]
	public TwoHanded()
	{
	}
}
public class Weapon : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AFA0", Offset = "0x65AFA0")]
	private sealed class <onComboWeaponNone>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Weapon <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x14B54E0", Offset = "0x14B54E0", VA = "0x14B54E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x14B5550", Offset = "0x14B5550", VA = "0x14B5550", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x14B539C", Offset = "0x14B539C", VA = "0x14B539C")]
		[DebuggerHidden]
		public <onComboWeaponNone>d__28(int <>1__state)
		{
		}

		[Address(RVA = "0x14B53C8", Offset = "0x14B53C8", VA = "0x14B53C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x14B53CC", Offset = "0x14B53CC", VA = "0x14B53CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x14B54E8", Offset = "0x14B54E8", VA = "0x14B54E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AFB0", Offset = "0x65AFB0")]
	private sealed class <onComboWeaponGlowing>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Weapon <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x14B5324", Offset = "0x14B5324", VA = "0x14B5324", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x14B5394", Offset = "0x14B5394", VA = "0x14B5394", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x14B51E0", Offset = "0x14B51E0", VA = "0x14B51E0")]
		[DebuggerHidden]
		public <onComboWeaponGlowing>d__29(int <>1__state)
		{
		}

		[Address(RVA = "0x14B520C", Offset = "0x14B520C", VA = "0x14B520C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x14B5210", Offset = "0x14B5210", VA = "0x14B5210", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x14B532C", Offset = "0x14B532C", VA = "0x14B532C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AFC0", Offset = "0x65AFC0")]
	private sealed class <onComboWeaponFire>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Weapon <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x14B5168", Offset = "0x14B5168", VA = "0x14B5168", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x14B51D8", Offset = "0x14B51D8", VA = "0x14B51D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x14B5024", Offset = "0x14B5024", VA = "0x14B5024")]
		[DebuggerHidden]
		public <onComboWeaponFire>d__30(int <>1__state)
		{
		}

		[Address(RVA = "0x14B5050", Offset = "0x14B5050", VA = "0x14B5050", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x14B5054", Offset = "0x14B5054", VA = "0x14B5054", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x14B5170", Offset = "0x14B5170", VA = "0x14B5170", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AFD0", Offset = "0x65AFD0")]
	private sealed class <onPaused>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x14B5658", Offset = "0x14B5658", VA = "0x14B5658", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x14B56C8", Offset = "0x14B56C8", VA = "0x14B56C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x14B5558", Offset = "0x14B5558", VA = "0x14B5558")]
		[DebuggerHidden]
		public <onPaused>d__35(int <>1__state)
		{
		}

		[Address(RVA = "0x14B5584", Offset = "0x14B5584", VA = "0x14B5584", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x14B5588", Offset = "0x14B5588", VA = "0x14B5588", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x14B5660", Offset = "0x14B5660", VA = "0x14B5660", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AFE0", Offset = "0x65AFE0")]
	private sealed class <onStartGame>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Weapon <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x14B5740", Offset = "0x14B5740", VA = "0x14B5740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x14B57B0", Offset = "0x14B57B0", VA = "0x14B57B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x14B56D0", Offset = "0x14B56D0", VA = "0x14B56D0")]
		[DebuggerHidden]
		public <onStartGame>d__38(int <>1__state)
		{
		}

		[Address(RVA = "0x14B56FC", Offset = "0x14B56FC", VA = "0x14B56FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x14B5700", Offset = "0x14B5700", VA = "0x14B5700", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x14B5748", Offset = "0x14B5748", VA = "0x14B5748", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int WeaponID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float BaseLightDamage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float BaseCritDamage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float BaseLightStabDamage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float BaseCritStabDamage;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float BlockDodgeBreakMultiplier;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float DisableReactionsOnBlockTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int StrokeNumber;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string WeaponName;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StrokeType CurrentStrokeType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool blunt;

	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool handed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool mirrorOnLeftHanded;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public WeaponType WeaponType;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float Reach;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject GlowingVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject FireVFX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public VRTK_ControllerEvents controllerEvents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private uint ci;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private VRTK_ControllerReference c;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float interval;

	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float strength;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float duration;

	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float startDuration;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float currentStrength;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool isRight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	private bool isVibrating;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
	public bool CausesKnockback;

	public bool Interactive
	{
		[Address(RVA = "0x81ACB4", Offset = "0x81ACB4", VA = "0x81ACB4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x81AD1C", Offset = "0x81AD1C", VA = "0x81AD1C")]
		set
		{
		}
	}

	[Address(RVA = "0x81A068", Offset = "0x81A068", VA = "0x81A068")]
	private void Start()
	{
	}

	[Address(RVA = "0x81A310", Offset = "0x81A310", VA = "0x81A310")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67BA70", Offset = "0x67BA70")]
	private IEnumerator onComboWeaponNone()
	{
		return null;
	}

	[Address(RVA = "0x81A384", Offset = "0x81A384", VA = "0x81A384")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67BAD4", Offset = "0x67BAD4")]
	private IEnumerator onComboWeaponGlowing()
	{
		return null;
	}

	[Address(RVA = "0x81A3F8", Offset = "0x81A3F8", VA = "0x81A3F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67BB38", Offset = "0x67BB38")]
	private IEnumerator onComboWeaponFire()
	{
		return null;
	}

	[Address(RVA = "0x81A46C", Offset = "0x81A46C", VA = "0x81A46C", Slot = "4")]
	public virtual void OnDestroy()
	{
	}

	[Address(RVA = "0x81A65C", Offset = "0x81A65C", VA = "0x81A65C", Slot = "5")]
	public virtual void Setup()
	{
	}

	[Address(RVA = "0x81A780", Offset = "0x81A780", VA = "0x81A780")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x81A8C0", Offset = "0x81A8C0", VA = "0x81A8C0", Slot = "6")]
	public virtual void Rumble(float setStrength, float setDuration, float setInterval = 0.01f)
	{
	}

	[Address(RVA = "0x81AAFC", Offset = "0x81AAFC", VA = "0x81AAFC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67BB9C", Offset = "0x67BB9C")]
	public IEnumerator onPaused()
	{
		return null;
	}

	[Address(RVA = "0x81AB5C", Offset = "0x81AB5C", VA = "0x81AB5C")]
	public string GetStrokeID()
	{
		return null;
	}

	[Address(RVA = "0x81ABE0", Offset = "0x81ABE0", VA = "0x81ABE0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67BC00", Offset = "0x67BC00")]
	private IEnumerator onStartGame()
	{
		return null;
	}

	[Address(RVA = "0x81AC54", Offset = "0x81AC54", VA = "0x81AC54", Slot = "7")]
	public virtual Vector3 GetForceVector()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x81AD94", Offset = "0x81AD94", VA = "0x81AD94")]
	public void CleanupForWeaponSwitch()
	{
	}

	[Address(RVA = "0x81AE74", Offset = "0x81AE74", VA = "0x81AE74", Slot = "8")]
	public virtual Vector3 CalculateHandMovementVector()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x81AED4", Offset = "0x81AED4", VA = "0x81AED4", Slot = "9")]
	public virtual Vector3 TipDirection()
	{
		return default(Vector3);
	}

	[Address(RVA = "0x81AF34", Offset = "0x81AF34", VA = "0x81AF34")]
	public Weapon()
	{
	}
}
public enum WeaponType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Sword,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Claw,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Staff,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Special
}
public enum StrokeType
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Unknown,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Stab,
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	Slash
}
public struct GazeEventArgs
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float distance;
}
public delegate void GazeEventHandler(object sender, GazeEventArgs e);
public class SteamVR_GazeTracker : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isInGaze;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float gazeInCutoff;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float gazeOutCutoff;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform hmdTrackedObject;

	public event GazeEventHandler GazeOn
	{
		[Address(RVA = "0x7EB7D0", Offset = "0x7EB7D0", VA = "0x7EB7D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BC64", Offset = "0x67BC64")]
		add
		{
		}
		[Address(RVA = "0x7EB8BC", Offset = "0x7EB8BC", VA = "0x7EB8BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BC74", Offset = "0x67BC74")]
		remove
		{
		}
	}

	public event GazeEventHandler GazeOff
	{
		[Address(RVA = "0x7EB9A8", Offset = "0x7EB9A8", VA = "0x7EB9A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BC84", Offset = "0x67BC84")]
		add
		{
		}
		[Address(RVA = "0x7EBA94", Offset = "0x7EBA94", VA = "0x7EBA94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BC94", Offset = "0x67BC94")]
		remove
		{
		}
	}

	[Address(RVA = "0x7EBB80", Offset = "0x7EBB80", VA = "0x7EBB80")]
	private void Start()
	{
	}

	[Address(RVA = "0x7EBB84", Offset = "0x7EBB84", VA = "0x7EBB84", Slot = "4")]
	public virtual void OnGazeOn(GazeEventArgs e)
	{
	}

	[Address(RVA = "0x7EBBA0", Offset = "0x7EBBA0", VA = "0x7EBBA0", Slot = "5")]
	public virtual void OnGazeOff(GazeEventArgs e)
	{
	}

	[Address(RVA = "0x7EBBBC", Offset = "0x7EBBBC", VA = "0x7EBBBC")]
	private void Update()
	{
	}

	[Address(RVA = "0x7EBF8C", Offset = "0x7EBF8C", VA = "0x7EBF8C")]
	public SteamVR_GazeTracker()
	{
	}
}
public struct PointerEventArgs
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float distance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;
}
public delegate void PointerEventHandler(object sender, PointerEventArgs e);
public class SteamVR_LaserPointer : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool active;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color color;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float thickness;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject holder;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject pointer;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isActive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool addRigidBody;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform reference;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform previousContact;

	public event PointerEventHandler PointerIn
	{
		[Address(RVA = "0x7ED13C", Offset = "0x7ED13C", VA = "0x7ED13C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BCA4", Offset = "0x67BCA4")]
		add
		{
		}
		[Address(RVA = "0x7ED228", Offset = "0x7ED228", VA = "0x7ED228")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BCB4", Offset = "0x67BCB4")]
		remove
		{
		}
	}

	public event PointerEventHandler PointerOut
	{
		[Address(RVA = "0x7ED314", Offset = "0x7ED314", VA = "0x7ED314")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BCC4", Offset = "0x67BCC4")]
		add
		{
		}
		[Address(RVA = "0x7ED400", Offset = "0x7ED400", VA = "0x7ED400")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BCD4", Offset = "0x67BCD4")]
		remove
		{
		}
	}

	[Address(RVA = "0x7ED4EC", Offset = "0x7ED4EC", VA = "0x7ED4EC")]
	private void Start()
	{
	}

	[Address(RVA = "0x7EDA0C", Offset = "0x7EDA0C", VA = "0x7EDA0C", Slot = "4")]
	public virtual void OnPointerIn(PointerEventArgs e)
	{
	}

	[Address(RVA = "0x7EDA50", Offset = "0x7EDA50", VA = "0x7EDA50", Slot = "5")]
	public virtual void OnPointerOut(PointerEventArgs e)
	{
	}

	[Address(RVA = "0x7EDA94", Offset = "0x7EDA94", VA = "0x7EDA94")]
	private void Update()
	{
	}

	[Address(RVA = "0x7EDF94", Offset = "0x7EDF94", VA = "0x7EDF94")]
	public SteamVR_LaserPointer()
	{
	}
}
public class SteamVR_Teleporter : MonoBehaviour
{
	public enum TeleportType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TeleportTypeUseTerrain,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TeleportTypeUseCollider,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TeleportTypeUseZeroY
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool teleportOnClick;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public TeleportType teleportType;

	private Transform reference
	{
		[Address(RVA = "0x71AEF0", Offset = "0x71AEF0", VA = "0x71AEF0")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x71AF94", Offset = "0x71AF94", VA = "0x71AF94")]
	private void Start()
	{
	}

	[Address(RVA = "0x71B2AC", Offset = "0x71B2AC", VA = "0x71B2AC")]
	private void DoClick(object sender, ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71B6EC", Offset = "0x71B6EC", VA = "0x71B6EC")]
	public SteamVR_Teleporter()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655A78", Offset = "0x655A78")]
public class SteamVR_TestThrow : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody attachPoint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SteamVR_TrackedObject trackedObj;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private FixedJoint joint;

	[Address(RVA = "0x71C9F0", Offset = "0x71C9F0", VA = "0x71C9F0")]
	private void Awake()
	{
	}

	[Address(RVA = "0x71CA48", Offset = "0x71CA48", VA = "0x71CA48")]
	private void FixedUpdate()
	{
	}

	[Address(RVA = "0x71CF10", Offset = "0x71CF10", VA = "0x71CF10")]
	public SteamVR_TestThrow()
	{
	}
}
public class SteamVR_TestTrackedCamera : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool undistorted;

	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool cropped;

	[Address(RVA = "0x71CF18", Offset = "0x71CF18", VA = "0x71CF18")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x71D018", Offset = "0x71D018", VA = "0x71D018")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x71D138", Offset = "0x71D138", VA = "0x71D138")]
	private void Update()
	{
	}

	[Address(RVA = "0x71D560", Offset = "0x71D560", VA = "0x71D560")]
	public SteamVR_TestTrackedCamera()
	{
	}
}
public struct ClickedEventArgs
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint controllerIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint flags;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float padX;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float padY;
}
public delegate void ClickedEventHandler(object sender, ClickedEventArgs e);
public class SteamVR_TrackedController : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uint controllerIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VRControllerState_t controllerState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool triggerPressed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool steamPressed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool menuPressed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool padPressed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool padTouched;

	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool gripped;

	public event ClickedEventHandler MenuButtonClicked
	{
		[Address(RVA = "0x71E3AC", Offset = "0x71E3AC", VA = "0x71E3AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BCE4", Offset = "0x67BCE4")]
		add
		{
		}
		[Address(RVA = "0x71E498", Offset = "0x71E498", VA = "0x71E498")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BCF4", Offset = "0x67BCF4")]
		remove
		{
		}
	}

	public event ClickedEventHandler MenuButtonUnclicked
	{
		[Address(RVA = "0x71E584", Offset = "0x71E584", VA = "0x71E584")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD04", Offset = "0x67BD04")]
		add
		{
		}
		[Address(RVA = "0x71E670", Offset = "0x71E670", VA = "0x71E670")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD14", Offset = "0x67BD14")]
		remove
		{
		}
	}

	public event ClickedEventHandler TriggerClicked
	{
		[Address(RVA = "0x71B1C0", Offset = "0x71B1C0", VA = "0x71B1C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD24", Offset = "0x67BD24")]
		add
		{
		}
		[Address(RVA = "0x71E75C", Offset = "0x71E75C", VA = "0x71E75C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD34", Offset = "0x67BD34")]
		remove
		{
		}
	}

	public event ClickedEventHandler TriggerUnclicked
	{
		[Address(RVA = "0x71E848", Offset = "0x71E848", VA = "0x71E848")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD44", Offset = "0x67BD44")]
		add
		{
		}
		[Address(RVA = "0x71E934", Offset = "0x71E934", VA = "0x71E934")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD54", Offset = "0x67BD54")]
		remove
		{
		}
	}

	public event ClickedEventHandler SteamClicked
	{
		[Address(RVA = "0x71EA20", Offset = "0x71EA20", VA = "0x71EA20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD64", Offset = "0x67BD64")]
		add
		{
		}
		[Address(RVA = "0x71EB0C", Offset = "0x71EB0C", VA = "0x71EB0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD74", Offset = "0x67BD74")]
		remove
		{
		}
	}

	public event ClickedEventHandler PadClicked
	{
		[Address(RVA = "0x71EBF8", Offset = "0x71EBF8", VA = "0x71EBF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD84", Offset = "0x67BD84")]
		add
		{
		}
		[Address(RVA = "0x71ECE4", Offset = "0x71ECE4", VA = "0x71ECE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BD94", Offset = "0x67BD94")]
		remove
		{
		}
	}

	public event ClickedEventHandler PadUnclicked
	{
		[Address(RVA = "0x71EDD0", Offset = "0x71EDD0", VA = "0x71EDD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BDA4", Offset = "0x67BDA4")]
		add
		{
		}
		[Address(RVA = "0x71EEBC", Offset = "0x71EEBC", VA = "0x71EEBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BDB4", Offset = "0x67BDB4")]
		remove
		{
		}
	}

	public event ClickedEventHandler PadTouched
	{
		[Address(RVA = "0x71EFA8", Offset = "0x71EFA8", VA = "0x71EFA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BDC4", Offset = "0x67BDC4")]
		add
		{
		}
		[Address(RVA = "0x71F094", Offset = "0x71F094", VA = "0x71F094")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BDD4", Offset = "0x67BDD4")]
		remove
		{
		}
	}

	public event ClickedEventHandler PadUntouched
	{
		[Address(RVA = "0x71F180", Offset = "0x71F180", VA = "0x71F180")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BDE4", Offset = "0x67BDE4")]
		add
		{
		}
		[Address(RVA = "0x71F26C", Offset = "0x71F26C", VA = "0x71F26C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BDF4", Offset = "0x67BDF4")]
		remove
		{
		}
	}

	public event ClickedEventHandler Gripped
	{
		[Address(RVA = "0x71F358", Offset = "0x71F358", VA = "0x71F358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE04", Offset = "0x67BE04")]
		add
		{
		}
		[Address(RVA = "0x71F444", Offset = "0x71F444", VA = "0x71F444")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE14", Offset = "0x67BE14")]
		remove
		{
		}
	}

	public event ClickedEventHandler Ungripped
	{
		[Address(RVA = "0x71F530", Offset = "0x71F530", VA = "0x71F530")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE24", Offset = "0x67BE24")]
		add
		{
		}
		[Address(RVA = "0x71F61C", Offset = "0x71F61C", VA = "0x71F61C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE34", Offset = "0x67BE34")]
		remove
		{
		}
	}

	[Address(RVA = "0x71F708", Offset = "0x71F708", VA = "0x71F708", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Address(RVA = "0x71F880", Offset = "0x71F880", VA = "0x71F880")]
	public void SetDeviceIndex(int index)
	{
	}

	[Address(RVA = "0x71F888", Offset = "0x71F888", VA = "0x71F888", Slot = "5")]
	public virtual void OnTriggerClicked(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F8B4", Offset = "0x71F8B4", VA = "0x71F8B4", Slot = "6")]
	public virtual void OnTriggerUnclicked(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F8E0", Offset = "0x71F8E0", VA = "0x71F8E0", Slot = "7")]
	public virtual void OnMenuClicked(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F90C", Offset = "0x71F90C", VA = "0x71F90C", Slot = "8")]
	public virtual void OnMenuUnclicked(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F938", Offset = "0x71F938", VA = "0x71F938", Slot = "9")]
	public virtual void OnSteamClicked(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F964", Offset = "0x71F964", VA = "0x71F964", Slot = "10")]
	public virtual void OnPadClicked(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F990", Offset = "0x71F990", VA = "0x71F990", Slot = "11")]
	public virtual void OnPadUnclicked(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F9BC", Offset = "0x71F9BC", VA = "0x71F9BC", Slot = "12")]
	public virtual void OnPadTouched(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71F9E8", Offset = "0x71F9E8", VA = "0x71F9E8", Slot = "13")]
	public virtual void OnPadUntouched(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71FA14", Offset = "0x71FA14", VA = "0x71FA14", Slot = "14")]
	public virtual void OnGripped(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71FA40", Offset = "0x71FA40", VA = "0x71FA40", Slot = "15")]
	public virtual void OnUngripped(ClickedEventArgs e)
	{
	}

	[Address(RVA = "0x71FA6C", Offset = "0x71FA6C", VA = "0x71FA6C", Slot = "16")]
	protected virtual void Update()
	{
	}

	[Address(RVA = "0x71FD5C", Offset = "0x71FD5C", VA = "0x71FD5C")]
	public SteamVR_TrackedController()
	{
	}
}
public class SteamVR : IDisposable
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _enabled;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR _instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE04", Offset = "0x65EE04")]
	private CVRSystem <hmd>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE14", Offset = "0x65EE14")]
	private CVRCompositor <compositor>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE24", Offset = "0x65EE24")]
	private CVROverlay <overlay>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE34", Offset = "0x65EE34")]
	private static bool <initializing>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE44", Offset = "0x65EE44")]
	private static bool <calibrating>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE54", Offset = "0x65EE54")]
	private static bool <outOfRange>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static bool[] connected;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE64", Offset = "0x65EE64")]
	private float <sceneWidth>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE74", Offset = "0x65EE74")]
	private float <sceneHeight>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE84", Offset = "0x65EE84")]
	private float <aspect>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EE94", Offset = "0x65EE94")]
	private float <fieldOfView>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EEA4", Offset = "0x65EEA4")]
	private Vector2 <tanHalfFov>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EEB4", Offset = "0x65EEB4")]
	private VRTextureBounds_t[] <textureBounds>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EEC4", Offset = "0x65EEC4")]
	private SteamVR_Utils.RigidTransform[] <eyes>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ETextureType textureType;

	public static bool active
	{
		[Address(RVA = "0x7DEDB8", Offset = "0x7DEDB8", VA = "0x7DEDB8")]
		get
		{
			return default(bool);
		}
	}

	public static bool enabled
	{
		[Address(RVA = "0x7DEE28", Offset = "0x7DEE28", VA = "0x7DEE28")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x7DEEC4", Offset = "0x7DEEC4", VA = "0x7DEEC4")]
		set
		{
		}
	}

	public static SteamVR instance
	{
		[Address(RVA = "0x7DF010", Offset = "0x7DF010", VA = "0x7DF010")]
		get
		{
			return null;
		}
	}

	public static bool usingNativeSupport
	{
		[Address(RVA = "0x7DF34C", Offset = "0x7DF34C", VA = "0x7DF34C")]
		get
		{
			return default(bool);
		}
	}

	public CVRSystem hmd
	{
		[Address(RVA = "0x7E0024", Offset = "0x7E0024", VA = "0x7E0024")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE44", Offset = "0x67BE44")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7E002C", Offset = "0x7E002C", VA = "0x7E002C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE54", Offset = "0x67BE54")]
		private set
		{
		}
	}

	public CVRCompositor compositor
	{
		[Address(RVA = "0x7E0034", Offset = "0x7E0034", VA = "0x7E0034")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE64", Offset = "0x67BE64")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7E003C", Offset = "0x7E003C", VA = "0x7E003C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE74", Offset = "0x67BE74")]
		private set
		{
		}
	}

	public CVROverlay overlay
	{
		[Address(RVA = "0x7E0044", Offset = "0x7E0044", VA = "0x7E0044")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE84", Offset = "0x67BE84")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7E004C", Offset = "0x7E004C", VA = "0x7E004C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BE94", Offset = "0x67BE94")]
		private set
		{
		}
	}

	public static bool initializing
	{
		[Address(RVA = "0x7E0054", Offset = "0x7E0054", VA = "0x7E0054")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BEA4", Offset = "0x67BEA4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x7E00BC", Offset = "0x7E00BC", VA = "0x7E00BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BEB4", Offset = "0x67BEB4")]
		private set
		{
		}
	}

	public static bool calibrating
	{
		[Address(RVA = "0x7E012C", Offset = "0x7E012C", VA = "0x7E012C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BEC4", Offset = "0x67BEC4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x7E0194", Offset = "0x7E0194", VA = "0x7E0194")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BED4", Offset = "0x67BED4")]
		private set
		{
		}
	}

	public static bool outOfRange
	{
		[Address(RVA = "0x7E0204", Offset = "0x7E0204", VA = "0x7E0204")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BEE4", Offset = "0x67BEE4")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x7E026C", Offset = "0x7E026C", VA = "0x7E026C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BEF4", Offset = "0x67BEF4")]
		private set
		{
		}
	}

	public float sceneWidth
	{
		[Address(RVA = "0x7E02DC", Offset = "0x7E02DC", VA = "0x7E02DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF04", Offset = "0x67BF04")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x7E02E4", Offset = "0x7E02E4", VA = "0x7E02E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF14", Offset = "0x67BF14")]
		private set
		{
		}
	}

	public float sceneHeight
	{
		[Address(RVA = "0x7E02EC", Offset = "0x7E02EC", VA = "0x7E02EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF24", Offset = "0x67BF24")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x7E02F4", Offset = "0x7E02F4", VA = "0x7E02F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF34", Offset = "0x67BF34")]
		private set
		{
		}
	}

	public float aspect
	{
		[Address(RVA = "0x7E02FC", Offset = "0x7E02FC", VA = "0x7E02FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF44", Offset = "0x67BF44")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x7E0304", Offset = "0x7E0304", VA = "0x7E0304")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF54", Offset = "0x67BF54")]
		private set
		{
		}
	}

	public float fieldOfView
	{
		[Address(RVA = "0x7E030C", Offset = "0x7E030C", VA = "0x7E030C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF64", Offset = "0x67BF64")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x7E0314", Offset = "0x7E0314", VA = "0x7E0314")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF74", Offset = "0x67BF74")]
		private set
		{
		}
	}

	public Vector2 tanHalfFov
	{
		[Address(RVA = "0x7E031C", Offset = "0x7E031C", VA = "0x7E031C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF84", Offset = "0x67BF84")]
		get
		{
			return default(Vector2);
		}
		[Address(RVA = "0x7E0324", Offset = "0x7E0324", VA = "0x7E0324")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BF94", Offset = "0x67BF94")]
		private set
		{
		}
	}

	public VRTextureBounds_t[] textureBounds
	{
		[Address(RVA = "0x7E032C", Offset = "0x7E032C", VA = "0x7E032C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BFA4", Offset = "0x67BFA4")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7E0334", Offset = "0x7E0334", VA = "0x7E0334")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BFB4", Offset = "0x67BFB4")]
		private set
		{
		}
	}

	public SteamVR_Utils.RigidTransform[] eyes
	{
		[Address(RVA = "0x7E033C", Offset = "0x7E033C", VA = "0x7E033C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BFC4", Offset = "0x67BFC4")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7E0344", Offset = "0x7E0344", VA = "0x7E0344")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BFD4", Offset = "0x67BFD4")]
		private set
		{
		}
	}

	public string hmd_TrackingSystemName
	{
		[Address(RVA = "0x7E034C", Offset = "0x7E034C", VA = "0x7E034C")]
		get
		{
			return null;
		}
	}

	public string hmd_ModelNumber
	{
		[Address(RVA = "0x7E04D0", Offset = "0x7E04D0", VA = "0x7E04D0")]
		get
		{
			return null;
		}
	}

	public string hmd_SerialNumber
	{
		[Address(RVA = "0x7E04DC", Offset = "0x7E04DC", VA = "0x7E04DC")]
		get
		{
			return null;
		}
	}

	public float hmd_SecondsFromVsyncToPhotons
	{
		[Address(RVA = "0x7E04E8", Offset = "0x7E04E8", VA = "0x7E04E8")]
		get
		{
			return default(float);
		}
	}

	public float hmd_DisplayFrequency
	{
		[Address(RVA = "0x7E0548", Offset = "0x7E0548", VA = "0x7E0548")]
		get
		{
			return default(float);
		}
	}

	[Address(RVA = "0x7DF128", Offset = "0x7DF128", VA = "0x7DF128")]
	private static SteamVR CreateInstance()
	{
		return null;
	}

	[Address(RVA = "0x7DF3B8", Offset = "0x7DF3B8", VA = "0x7DF3B8")]
	private static void ReportError(EVRInitError error)
	{
	}

	[Address(RVA = "0x7E0554", Offset = "0x7E0554", VA = "0x7E0554")]
	public string GetTrackedDeviceString(uint deviceId)
	{
		return null;
	}

	[Address(RVA = "0x7E0358", Offset = "0x7E0358", VA = "0x7E0358")]
	public string GetStringProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return null;
	}

	[Address(RVA = "0x7E04F4", Offset = "0x7E04F4", VA = "0x7E04F4")]
	public float GetFloatProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return default(float);
	}

	[Address(RVA = "0x7E0658", Offset = "0x7E0658", VA = "0x7E0658")]
	private void OnInitializing(bool initializing)
	{
	}

	[Address(RVA = "0x7E06BC", Offset = "0x7E06BC", VA = "0x7E06BC")]
	private void OnCalibrating(bool calibrating)
	{
	}

	[Address(RVA = "0x7E0720", Offset = "0x7E0720", VA = "0x7E0720")]
	private void OnOutOfRange(bool outOfRange)
	{
	}

	[Address(RVA = "0x7E0784", Offset = "0x7E0784", VA = "0x7E0784")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Address(RVA = "0x7E0834", Offset = "0x7E0834", VA = "0x7E0834")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Address(RVA = "0x7DF50C", Offset = "0x7DF50C", VA = "0x7DF50C")]
	private SteamVR()
	{
	}

	[Address(RVA = "0x7E0CB8", Offset = "0x7E0CB8", VA = "0x7E0CB8", Slot = "1")]
	~SteamVR()
	{
	}

	[Address(RVA = "0x7E0F98", Offset = "0x7E0F98", VA = "0x7E0F98", Slot = "4")]
	public void Dispose()
	{
	}

	[Address(RVA = "0x7E0D30", Offset = "0x7E0D30", VA = "0x7E0D30")]
	private void Dispose(bool disposing)
	{
	}

	[Address(RVA = "0x7DEF64", Offset = "0x7DEF64", VA = "0x7DEF64")]
	public static void SafeDispose()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655ADC", Offset = "0x655ADC")]
public class SteamVR_Camera : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform _head;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EEE4", Offset = "0x65EEE4")]
	private Camera <camera>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform _ears;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool wireframe;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Hashtable values;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string eyeSuffix = " (eye)";

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string earsSuffix = " (ears)";

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string headSuffix = " (head)";

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private const string originSuffix = " (origin)";

	public Transform head
	{
		[Address(RVA = "0x7E1080", Offset = "0x7E1080", VA = "0x7E1080")]
		get
		{
			return null;
		}
	}

	public Transform offset
	{
		[Address(RVA = "0x7E1088", Offset = "0x7E1088", VA = "0x7E1088")]
		get
		{
			return null;
		}
	}

	public Transform origin
	{
		[Address(RVA = "0x7E1090", Offset = "0x7E1090", VA = "0x7E1090")]
		get
		{
			return null;
		}
	}

	public Camera camera
	{
		[Address(RVA = "0x7E10C0", Offset = "0x7E10C0", VA = "0x7E10C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BFE4", Offset = "0x67BFE4")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7E10C8", Offset = "0x7E10C8", VA = "0x7E10C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67BFF4", Offset = "0x67BFF4")]
		private set
		{
		}
	}

	public Transform ears
	{
		[Address(RVA = "0x7E10D0", Offset = "0x7E10D0", VA = "0x7E10D0")]
		get
		{
			return null;
		}
	}

	public static float sceneResolutionScale
	{
		[Address(RVA = "0x7E117C", Offset = "0x7E117C", VA = "0x7E117C")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x7E1184", Offset = "0x7E1184", VA = "0x7E1184")]
		set
		{
		}
	}

	public string baseName
	{
		[Address(RVA = "0x7E28BC", Offset = "0x7E28BC", VA = "0x7E28BC")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x7E10D8", Offset = "0x7E10D8", VA = "0x7E10D8")]
	public Ray GetRay()
	{
		return default(Ray);
	}

	[Address(RVA = "0x7E118C", Offset = "0x7E118C", VA = "0x7E118C")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7E1244", Offset = "0x7E1244", VA = "0x7E1244")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7E21BC", Offset = "0x7E21BC", VA = "0x7E21BC")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7E2218", Offset = "0x7E2218", VA = "0x7E2218")]
	public void ForceLast()
	{
	}

	[Address(RVA = "0x7E16A0", Offset = "0x7E16A0", VA = "0x7E16A0")]
	public void Expand()
	{
	}

	[Address(RVA = "0x7E29C8", Offset = "0x7E29C8", VA = "0x7E29C8")]
	public void Collapse()
	{
	}

	[Address(RVA = "0x7E2F68", Offset = "0x7E2F68", VA = "0x7E2F68")]
	public SteamVR_Camera()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655B40", Offset = "0x655B40")]
public class SteamVR_CameraFlip : MonoBehaviour
{
	[Address(RVA = "0x7E2F70", Offset = "0x7E2F70", VA = "0x7E2F70")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7E300C", Offset = "0x7E300C", VA = "0x7E300C")]
	public SteamVR_CameraFlip()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655B50", Offset = "0x655B50")]
public class SteamVR_CameraMask : MonoBehaviour
{
	[Address(RVA = "0x7E3014", Offset = "0x7E3014", VA = "0x7E3014")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7E30B0", Offset = "0x7E30B0", VA = "0x7E30B0")]
	public SteamVR_CameraMask()
	{
	}
}
public class SteamVR_Controller
{
	public class ButtonMask
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong System = 1uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong ApplicationMenu = 2uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Grip = 4uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Axis0 = 4294967296uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Axis1 = 8589934592uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Axis2 = 17179869184uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Axis3 = 34359738368uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Axis4 = 68719476736uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Touchpad = 4294967296uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong Trigger = 8589934592uL;

		[Address(RVA = "0x7E384C", Offset = "0x7E384C", VA = "0x7E384C")]
		public ButtonMask()
		{
		}
	}

	public class Device
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673FAC", Offset = "0x673FAC")]
		private uint <index>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673FBC", Offset = "0x673FBC")]
		private bool <valid>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VRControllerState_t state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRControllerState_t prevState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TrackedDevicePose_t pose;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int prevFrameCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float hairTriggerDelta;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float hairTriggerLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool hairTriggerState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		private bool hairTriggerPrevState;

		public uint index
		{
			[Address(RVA = "0x7E385C", Offset = "0x7E385C", VA = "0x7E385C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686C80", Offset = "0x686C80")]
			get
			{
				return default(uint);
			}
			[Address(RVA = "0x7E3854", Offset = "0x7E3854", VA = "0x7E3854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686C90", Offset = "0x686C90")]
			private set
			{
			}
		}

		public bool valid
		{
			[Address(RVA = "0x7E3864", Offset = "0x7E3864", VA = "0x7E3864")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686CA0", Offset = "0x686CA0")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x7E386C", Offset = "0x7E386C", VA = "0x7E386C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686CB0", Offset = "0x686CB0")]
			private set
			{
			}
		}

		public bool connected
		{
			[Address(RVA = "0x7E3820", Offset = "0x7E3820", VA = "0x7E3820")]
			get
			{
				return default(bool);
			}
		}

		public bool hasTracking
		{
			[Address(RVA = "0x7E3878", Offset = "0x7E3878", VA = "0x7E3878")]
			get
			{
				return default(bool);
			}
		}

		public bool outOfRange
		{
			[Address(RVA = "0x7E389C", Offset = "0x7E389C", VA = "0x7E389C")]
			get
			{
				return default(bool);
			}
		}

		public bool calibrating
		{
			[Address(RVA = "0x7E38D4", Offset = "0x7E38D4", VA = "0x7E38D4")]
			get
			{
				return default(bool);
			}
		}

		public bool uninitialized
		{
			[Address(RVA = "0x7E3904", Offset = "0x7E3904", VA = "0x7E3904")]
			get
			{
				return default(bool);
			}
		}

		public SteamVR_Utils.RigidTransform transform
		{
			[Address(RVA = "0x7E37C0", Offset = "0x7E37C0", VA = "0x7E37C0")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		public Vector3 velocity
		{
			[Address(RVA = "0x7E3930", Offset = "0x7E3930", VA = "0x7E3930")]
			get
			{
				return default(Vector3);
			}
		}

		public Vector3 angularVelocity
		{
			[Address(RVA = "0x7E3980", Offset = "0x7E3980", VA = "0x7E3980")]
			get
			{
				return default(Vector3);
			}
		}

		[Address(RVA = "0x7E324C", Offset = "0x7E324C", VA = "0x7E324C")]
		public Device(uint i)
		{
		}

		[Address(RVA = "0x7E39D4", Offset = "0x7E39D4", VA = "0x7E39D4")]
		public VRControllerState_t GetState()
		{
			return default(VRControllerState_t);
		}

		[Address(RVA = "0x7E3A18", Offset = "0x7E3A18", VA = "0x7E3A18")]
		public VRControllerState_t GetPrevState()
		{
			return default(VRControllerState_t);
		}

		[Address(RVA = "0x7E3A5C", Offset = "0x7E3A5C", VA = "0x7E3A5C")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Address(RVA = "0x7E32C8", Offset = "0x7E32C8", VA = "0x7E32C8")]
		public void Update()
		{
		}

		[Address(RVA = "0x7E3CC4", Offset = "0x7E3CC4", VA = "0x7E3CC4")]
		public bool GetPress(ulong buttonMask)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3CF4", Offset = "0x7E3CF4", VA = "0x7E3CF4")]
		public bool GetPressDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3D38", Offset = "0x7E3D38", VA = "0x7E3D38")]
		public bool GetPressUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3D7C", Offset = "0x7E3D7C", VA = "0x7E3D7C")]
		public bool GetPress(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3DB4", Offset = "0x7E3DB4", VA = "0x7E3DB4")]
		public bool GetPressDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3E00", Offset = "0x7E3E00", VA = "0x7E3E00")]
		public bool GetPressUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3E4C", Offset = "0x7E3E4C", VA = "0x7E3E4C")]
		public bool GetTouch(ulong buttonMask)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3E7C", Offset = "0x7E3E7C", VA = "0x7E3E7C")]
		public bool GetTouchDown(ulong buttonMask)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3EC0", Offset = "0x7E3EC0", VA = "0x7E3EC0")]
		public bool GetTouchUp(ulong buttonMask)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3F04", Offset = "0x7E3F04", VA = "0x7E3F04")]
		public bool GetTouch(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3F3C", Offset = "0x7E3F3C", VA = "0x7E3F3C")]
		public bool GetTouchDown(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3F88", Offset = "0x7E3F88", VA = "0x7E3F88")]
		public bool GetTouchUp(EVRButtonId buttonId)
		{
			return default(bool);
		}

		[Address(RVA = "0x7E3FD4", Offset = "0x7E3FD4", VA = "0x7E3FD4")]
		public Vector2 GetAxis(EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
			return default(Vector2);
		}

		[Address(RVA = "0x7E50B0", Offset = "0x7E50B0", VA = "0x7E50B0")]
		public void TriggerHapticPulse(ushort durationMicroSec = 500, EVRButtonId buttonId = EVRButtonId.k_EButton_Axis0)
		{
		}

		[Address(RVA = "0x7E3BC4", Offset = "0x7E3BC4", VA = "0x7E3BC4")]
		private void UpdateHairTrigger()
		{
		}

		[Address(RVA = "0x7E514C", Offset = "0x7E514C", VA = "0x7E514C")]
		public bool GetHairTrigger()
		{
			return default(bool);
		}

		[Address(RVA = "0x7E5170", Offset = "0x7E5170", VA = "0x7E5170")]
		public bool GetHairTriggerDown()
		{
			return default(bool);
		}

		[Address(RVA = "0x7E51AC", Offset = "0x7E51AC", VA = "0x7E51AC")]
		public bool GetHairTriggerUp()
		{
			return default(bool);
		}
	}

	public enum DeviceRelation
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		First,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Leftmost,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Rightmost,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FarthestLeft,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FarthestRight
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Device[] devices;

	[Address(RVA = "0x7E30B8", Offset = "0x7E30B8", VA = "0x7E30B8")]
	public static Device Input(int deviceIndex)
	{
		return null;
	}

	[Address(RVA = "0x7E3284", Offset = "0x7E3284", VA = "0x7E3284")]
	public static void Update()
	{
	}

	[Address(RVA = "0x7E3450", Offset = "0x7E3450", VA = "0x7E3450")]
	public static int GetDeviceIndex(DeviceRelation relation, ETrackedDeviceClass deviceClass = ETrackedDeviceClass.Controller, int relativeTo = 0)
	{
		return default(int);
	}

	[Address(RVA = "0x7E3844", Offset = "0x7E3844", VA = "0x7E3844")]
	public SteamVR_Controller()
	{
	}
}
public class SteamVR_ControllerManager : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject left;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject right;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65EF04", Offset = "0x65EF04")]
	public GameObject[] objects;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65EF3C", Offset = "0x65EF3C")]
	public bool assignAllBeforeIdentified;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private uint[] indices;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool[] connected;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private uint leftIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private uint rightIndex;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action inputFocusAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SteamVR_Events.Action trackedDeviceRoleChangedAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string hiddenPrefix;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string hiddenPostfix;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string[] labels;

	[Address(RVA = "0x7E51E8", Offset = "0x7E51E8", VA = "0x7E51E8")]
	private void SetUniqueObject(GameObject o, int index)
	{
	}

	[Address(RVA = "0x7E5318", Offset = "0x7E5318", VA = "0x7E5318")]
	public void UpdateTargets()
	{
	}

	[Address(RVA = "0x7E5490", Offset = "0x7E5490", VA = "0x7E5490")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7E5494", Offset = "0x7E5494", VA = "0x7E5494")]
	private SteamVR_ControllerManager()
	{
	}

	[Address(RVA = "0x7E57D4", Offset = "0x7E57D4", VA = "0x7E57D4")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7E5F10", Offset = "0x7E5F10", VA = "0x7E5F10")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7E5F94", Offset = "0x7E5F94", VA = "0x7E5F94")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Address(RVA = "0x7E6408", Offset = "0x7E6408", VA = "0x7E6408")]
	private void HideObject(Transform t, string name)
	{
	}

	[Address(RVA = "0x7E62D4", Offset = "0x7E62D4", VA = "0x7E62D4")]
	private void ShowObject(Transform t, string name)
	{
	}

	[Address(RVA = "0x7E65D8", Offset = "0x7E65D8", VA = "0x7E65D8")]
	private void SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex)
	{
	}

	[Address(RVA = "0x7E68F0", Offset = "0x7E68F0", VA = "0x7E68F0")]
	private void OnTrackedDeviceRoleChanged(VREvent_t vrEvent)
	{
	}

	[Address(RVA = "0x7E5D9C", Offset = "0x7E5D9C", VA = "0x7E5D9C")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Address(RVA = "0x7E5A38", Offset = "0x7E5A38", VA = "0x7E5A38")]
	public void Refresh()
	{
	}
}
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655B60", Offset = "0x655B60")]
public class SteamVR_Ears : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_Camera vrcam;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool usingSpeakers;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion offset;

	[Address(RVA = "0x7E6A40", Offset = "0x7E6A40", VA = "0x7E6A40")]
	private void OnNewPosesApplied()
	{
	}

	[Address(RVA = "0x7E6BE0", Offset = "0x7E6BE0", VA = "0x7E6BE0")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7E6D8C", Offset = "0x7E6D8C", VA = "0x7E6D8C")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7E6E64", Offset = "0x7E6E64", VA = "0x7E6E64")]
	public SteamVR_Ears()
	{
	}
}
public static class SteamVR_Events
{
	public abstract class Action
	{
		public bool enabled
		{
			[Address(RVA = "0x7E5F00", Offset = "0x7E5F00", VA = "0x7E5F00")]
			set
			{
			}
		}

		public abstract void Enable(bool enabled);

		[Address(RVA = "0x7E7A18", Offset = "0x7E7A18", VA = "0x7E7A18")]
		protected Action()
		{
		}
	}

	[Serializable]
	public class ActionNoArgs : Action
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Event _event;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityAction action;

		[Address(RVA = "0x7E704C", Offset = "0x7E704C", VA = "0x7E704C")]
		public ActionNoArgs(Event _event, UnityAction action)
		{
		}

		[Address(RVA = "0x7E7A20", Offset = "0x7E7A20", VA = "0x7E7A20", Slot = "4")]
		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	public class Action<T> : Action
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T> _event;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T> action;

		public Action(Event<T> _event, UnityAction<T> action)
		{
		}

		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	public class Action<T0, T1> : Action
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1> _event;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1> action;

		public Action(Event<T0, T1> _event, UnityAction<T0, T1> action)
		{
		}

		public override void Enable(bool enabled)
		{
		}
	}

	[Serializable]
	public class Action<T0, T1, T2> : Action
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Event<T0, T1, T2> _event;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityAction<T0, T1, T2> action;

		public Action(Event<T0, T1, T2> _event, UnityAction<T0, T1, T2> action)
		{
		}

		public override void Enable(bool enabled)
		{
		}
	}

	public class Event : UnityEvent
	{
		[Address(RVA = "0x7E6D84", Offset = "0x7E6D84", VA = "0x7E6D84")]
		public void Listen(UnityAction action)
		{
		}

		[Address(RVA = "0x7E6E5C", Offset = "0x7E6E5C", VA = "0x7E6E5C")]
		public void Remove(UnityAction action)
		{
		}

		[Address(RVA = "0x7E7A84", Offset = "0x7E7A84", VA = "0x7E7A84")]
		public void Send()
		{
		}

		[Address(RVA = "0x7E7A10", Offset = "0x7E7A10", VA = "0x7E7A10")]
		public Event()
		{
		}
	}

	public class Event<T> : UnityEvent<T>
	{
		public void Listen(UnityAction<T> action)
		{
		}

		public void Remove(UnityAction<T> action)
		{
		}

		public void Send(T arg0)
		{
		}
	}

	public class Event<T0, T1> : UnityEvent<T0, T1>
	{
		public void Listen(UnityAction<T0, T1> action)
		{
		}

		public void Remove(UnityAction<T0, T1> action)
		{
		}

		public void Send(T0 arg0, T1 arg1)
		{
		}
	}

	public class Event<T0, T1, T2> : UnityEvent<T0, T1, T2>
	{
		public void Listen(UnityAction<T0, T1, T2> action)
		{
		}

		public void Remove(UnityAction<T0, T1, T2> action)
		{
		}

		public void Send(T0 arg0, T1 arg1, T2 arg2)
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Event<bool> Calibrating;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Event<int, bool> DeviceConnected;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Event<Color, float, bool> Fade;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Event FadeReady;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Event<bool> HideRenderModels;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Event<bool> Initializing;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Event<bool> InputFocus;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Event<bool> Loading;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Event<float> LoadingFadeIn;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Event<float> LoadingFadeOut;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Event<TrackedDevicePose_t[]> NewPoses;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Event NewPosesApplied;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Event<bool> OutOfRange;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Event<SteamVR_RenderModel, bool> RenderModelLoaded;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static Dictionary<EVREventType, Event<VREvent_t>> systemEvents;

	[Address(RVA = "0x7E6E6C", Offset = "0x7E6E6C", VA = "0x7E6E6C")]
	public static Action CalibratingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E5684", Offset = "0x7E5684", VA = "0x7E5684")]
	public static Action DeviceConnectedAction(UnityAction<int, bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E6F10", Offset = "0x7E6F10", VA = "0x7E6F10")]
	public static Action FadeAction(UnityAction<Color, float, bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E6FB4", Offset = "0x7E6FB4", VA = "0x7E6FB4")]
	public static Action FadeReadyAction(UnityAction action)
	{
		return null;
	}

	[Address(RVA = "0x7E7084", Offset = "0x7E7084", VA = "0x7E7084")]
	public static Action HideRenderModelsAction(UnityAction<bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E7128", Offset = "0x7E7128", VA = "0x7E7128")]
	public static Action InitializingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E55E0", Offset = "0x7E55E0", VA = "0x7E55E0")]
	public static Action InputFocusAction(UnityAction<bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E71CC", Offset = "0x7E71CC", VA = "0x7E71CC")]
	public static Action LoadingAction(UnityAction<bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E7270", Offset = "0x7E7270", VA = "0x7E7270")]
	public static Action LoadingFadeInAction(UnityAction<float> action)
	{
		return null;
	}

	[Address(RVA = "0x7E7314", Offset = "0x7E7314", VA = "0x7E7314")]
	public static Action LoadingFadeOutAction(UnityAction<float> action)
	{
		return null;
	}

	[Address(RVA = "0x7E73B8", Offset = "0x7E73B8", VA = "0x7E73B8")]
	public static Action NewPosesAction(UnityAction<TrackedDevicePose_t[]> action)
	{
		return null;
	}

	[Address(RVA = "0x7E745C", Offset = "0x7E745C", VA = "0x7E745C")]
	public static Action NewPosesAppliedAction(UnityAction action)
	{
		return null;
	}

	[Address(RVA = "0x7E74F4", Offset = "0x7E74F4", VA = "0x7E74F4")]
	public static Action OutOfRangeAction(UnityAction<bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E7598", Offset = "0x7E7598", VA = "0x7E7598")]
	public static Action RenderModelLoadedAction(UnityAction<SteamVR_RenderModel, bool> action)
	{
		return null;
	}

	[Address(RVA = "0x7E763C", Offset = "0x7E763C", VA = "0x7E763C")]
	public static Event<VREvent_t> System(EVREventType eventType)
	{
		return null;
	}

	[Address(RVA = "0x7E5728", Offset = "0x7E5728", VA = "0x7E5728")]
	public static Action SystemAction(EVREventType eventType, UnityAction<VREvent_t> action)
	{
		return null;
	}
}
public class SteamVR_ExternalCamera : MonoBehaviour
{
	[Serializable]
	public struct Config
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rx;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float ry;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rz;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fov;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float near;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float far;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sceneResolutionScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float frameSkip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float nearOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float farOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float hmdOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float r;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float g;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float b;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float a;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool disableStandardAssets;
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Config config;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string configPath;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private FileSystemWatcher watcher;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Camera cam;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform target;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject clipQuad;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Material clipMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Material colorMat;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Material alphaMat;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Camera[] cameras;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] cameraRects;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float sceneResolutionScale;

	[Address(RVA = "0x7E7A8C", Offset = "0x7E7A8C", VA = "0x7E7A8C")]
	public void ReadConfig()
	{
	}

	[Address(RVA = "0x7E83EC", Offset = "0x7E83EC", VA = "0x7E83EC")]
	private void OnChanged(object source, FileSystemEventArgs e)
	{
	}

	[Address(RVA = "0x7E83F0", Offset = "0x7E83F0", VA = "0x7E83F0")]
	public void AttachToCamera(SteamVR_Camera vrcam)
	{
	}

	[Address(RVA = "0x7E8C50", Offset = "0x7E8C50", VA = "0x7E8C50")]
	public float GetTargetDistance()
	{
		return default(float);
	}

	[Address(RVA = "0x7E8F58", Offset = "0x7E8F58", VA = "0x7E8F58")]
	public void RenderNear()
	{
	}

	[Address(RVA = "0x7E9904", Offset = "0x7E9904", VA = "0x7E9904")]
	public void RenderFar()
	{
	}

	[Address(RVA = "0x7E9A60", Offset = "0x7E9A60", VA = "0x7E9A60")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0x7E9A64", Offset = "0x7E9A64", VA = "0x7E9A64")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7E9D24", Offset = "0x7E9D24", VA = "0x7E9D24")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7E9EC4", Offset = "0x7E9EC4", VA = "0x7E9EC4")]
	public SteamVR_ExternalCamera()
	{
	}
}
public class SteamVR_Fade : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color currentColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color targetColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color deltaColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool fadeOverlay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material fadeMaterial;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int fadeMaterialColorID;

	[Address(RVA = "0x7EA010", Offset = "0x7EA010", VA = "0x7EA010")]
	public static void Start(Color newColor, float duration, bool fadeOverlay = false)
	{
	}

	[Address(RVA = "0x7EA0DC", Offset = "0x7EA0DC", VA = "0x7EA0DC")]
	public static void View(Color newColor, float duration)
	{
	}

	[Address(RVA = "0x7EA1A4", Offset = "0x7EA1A4", VA = "0x7EA1A4")]
	public void OnStartFade(Color newColor, float duration, bool fadeOverlay)
	{
	}

	[Address(RVA = "0x7EA20C", Offset = "0x7EA20C", VA = "0x7EA20C")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7EA3DC", Offset = "0x7EA3DC", VA = "0x7EA3DC")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7EA4A4", Offset = "0x7EA4A4", VA = "0x7EA4A4")]
	private void OnPostRender()
	{
	}

	[Address(RVA = "0x7EA858", Offset = "0x7EA858", VA = "0x7EA858")]
	public SteamVR_Fade()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655BC4", Offset = "0x655BC4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655BC4", Offset = "0x655BC4")]
public class SteamVR_Frustum : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fovLeft;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fovRight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float fovTop;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fovBottom;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float nearZ;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float farZ;

	[Address(RVA = "0x7EA990", Offset = "0x7EA990", VA = "0x7EA990")]
	public void UpdateModel()
	{
	}

	[Address(RVA = "0x7EB354", Offset = "0x7EB354", VA = "0x7EB354")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Address(RVA = "0x7EB51C", Offset = "0x7EB51C", VA = "0x7EB51C")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7EB614", Offset = "0x7EB614", VA = "0x7EB614")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7EB70C", Offset = "0x7EB70C", VA = "0x7EB70C")]
	public SteamVR_Frustum()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655C54", Offset = "0x655C54")]
public class SteamVR_GameView : MonoBehaviour
{
	[Address(RVA = "0x7EB72C", Offset = "0x7EB72C", VA = "0x7EB72C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7EB7C8", Offset = "0x7EB7C8", VA = "0x7EB7C8")]
	public SteamVR_GameView()
	{
	}
}
public class SteamVR_IK : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform start;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform joint;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform end;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform poleVector;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform upVector;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float blendPct;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x65EF74", Offset = "0x65EF74")]
	public Transform startXform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x65EF84", Offset = "0x65EF84")]
	public Transform jointXform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x65EF94", Offset = "0x65EF94")]
	public Transform endXform;

	[Address(RVA = "0x7EBFA8", Offset = "0x7EBFA8", VA = "0x7EBFA8")]
	private void LateUpdate()
	{
	}

	[Address(RVA = "0x7ECC68", Offset = "0x7ECC68", VA = "0x7ECC68")]
	public static bool Solve(Vector3 start, Vector3 end, Vector3 poleVector, float jointDist, float targetDist, ref Vector3 result, out Vector3 forward, out Vector3 up)
	{
		return default(bool);
	}

	[Address(RVA = "0x7ED12C", Offset = "0x7ED12C", VA = "0x7ED12C")]
	public SteamVR_IK()
	{
	}
}
public class SteamVR_LoadLevel : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65AFF0", Offset = "0x65AFF0")]
	private sealed class <LoadLevel>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_LoadLevel <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVROverlay <overlay>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <fadedForeground>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRCompositor <compositor>5__4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_Controller.Device <hmd>5__5;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7EFFE0", Offset = "0x7EFFE0", VA = "0x7EFFE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7F0050", Offset = "0x7F0050", VA = "0x7F0050", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7EEEA4", Offset = "0x7EEEA4", VA = "0x7EEEA4")]
		[DebuggerHidden]
		public <LoadLevel>d__45(int <>1__state)
		{
		}

		[Address(RVA = "0x7EF028", Offset = "0x7EF028", VA = "0x7EF028", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7EF02C", Offset = "0x7EF02C", VA = "0x7EF02C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7EFFE8", Offset = "0x7EFFE8", VA = "0x7EFFE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SteamVR_LoadLevel _active;

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string levelName;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string internalProcessPath;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string internalProcessArgs;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool loadAdditive;

	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool loadAsync;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture loadingScreen;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture progressBarEmpty;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture progressBarFull;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float loadingScreenWidthInMeters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float progressBarWidthInMeters;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float loadingScreenDistance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform loadingScreenTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform progressBarTransform;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture front;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Texture back;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture left;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Texture right;

	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Texture top;

	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Texture bottom;

	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Color backgroundColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool showGrid;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float fadeOutTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float fadeInTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float postLoadSettleTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float loadingScreenFadeInTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float loadingScreenFadeOutTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float fadeRate;

	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float alpha;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private AsyncOperation async;

	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private RenderTexture renderTexture;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ulong loadingScreenOverlayHandle;

	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ulong progressBarOverlayHandle;

	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool autoTriggerOnEnable;

	public static bool loading
	{
		[Address(RVA = "0x7EDFB0", Offset = "0x7EDFB0", VA = "0x7EDFB0")]
		get
		{
			return default(bool);
		}
	}

	public static float progress
	{
		[Address(RVA = "0x7EE048", Offset = "0x7EE048", VA = "0x7EE048")]
		get
		{
			return default(float);
		}
	}

	public static Texture progressTexture
	{
		[Address(RVA = "0x7EE178", Offset = "0x7EE178", VA = "0x7EE178")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x7EE254", Offset = "0x7EE254", VA = "0x7EE254")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7EE264", Offset = "0x7EE264", VA = "0x7EE264")]
	public void Trigger()
	{
	}

	[Address(RVA = "0x7EE370", Offset = "0x7EE370", VA = "0x7EE370")]
	public static void Begin(string levelName, bool showGrid = false, float fadeOutTime = 0.5f, float r = 0f, float g = 0f, float b = 0f, float a = 1f)
	{
	}

	[Address(RVA = "0x7EE4D4", Offset = "0x7EE4D4", VA = "0x7EE4D4")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0x7EED3C", Offset = "0x7EED3C", VA = "0x7EED3C")]
	private void Update()
	{
	}

	[Address(RVA = "0x7EE2FC", Offset = "0x7EE2FC", VA = "0x7EE2FC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C004", Offset = "0x67C004")]
	private IEnumerator LoadLevel()
	{
		return null;
	}

	[Address(RVA = "0x7EE958", Offset = "0x7EE958", VA = "0x7EE958")]
	private ulong GetOverlayHandle(string overlayName, Transform transform, float widthInMeters = 1f)
	{
		return default(ulong);
	}

	[Address(RVA = "0x7EEFC0", Offset = "0x7EEFC0", VA = "0x7EEFC0")]
	public SteamVR_LoadLevel()
	{
	}
}
public class SteamVR_Menu : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture cursor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture background;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture logo;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float logoHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float menuOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 scaleLimits;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float scaleRate;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Overlay overlay;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Camera overlayCam;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector4 uvOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float distance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65EFA4", Offset = "0x65EFA4")]
	private float <scale>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string scaleLimitX;

	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string scaleLimitY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string scaleRateText;

	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CursorLockMode savedCursorLockState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool savedCursorVisible;

	public RenderTexture texture
	{
		[Address(RVA = "0x7F0058", Offset = "0x7F0058", VA = "0x7F0058")]
		get
		{
			return null;
		}
	}

	public float scale
	{
		[Address(RVA = "0x7F0128", Offset = "0x7F0128", VA = "0x7F0128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C068", Offset = "0x67C068")]
		get
		{
			return default(float);
		}
		[Address(RVA = "0x7F0130", Offset = "0x7F0130", VA = "0x7F0130")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C078", Offset = "0x67C078")]
		private set
		{
		}
	}

	[Address(RVA = "0x7F0138", Offset = "0x7F0138", VA = "0x7F0138")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7F02C0", Offset = "0x7F02C0", VA = "0x7F02C0")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0x7F126C", Offset = "0x7F126C", VA = "0x7F126C")]
	public void ShowMenu()
	{
	}

	[Address(RVA = "0x7F1140", Offset = "0x7F1140", VA = "0x7F1140")]
	public void HideMenu()
	{
	}

	[Address(RVA = "0x7F166C", Offset = "0x7F166C", VA = "0x7F166C")]
	private void Update()
	{
	}

	[Address(RVA = "0x7F1050", Offset = "0x7F1050", VA = "0x7F1050")]
	private void SetScale(float scale)
	{
	}

	[Address(RVA = "0x7F1604", Offset = "0x7F1604", VA = "0x7F1604")]
	private void SaveCursorState()
	{
	}

	[Address(RVA = "0x7F163C", Offset = "0x7F163C", VA = "0x7F163C")]
	private void RestoreCursorState()
	{
	}

	[Address(RVA = "0x7F183C", Offset = "0x7F183C", VA = "0x7F183C")]
	public SteamVR_Menu()
	{
	}
}
public class SteamVR_Overlay : MonoBehaviour
{
	public struct IntersectionResults
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 point;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 normal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 UVs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture texture;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool curved;

	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool antialias;

	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool highquality;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65EFB4", Offset = "0x65EFB4")]
	public float scale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65EFEC", Offset = "0x65EFEC")]
	public float distance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F024", Offset = "0x65F024")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65F024", Offset = "0x65F024")]
	public float alpha;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 uvOffset;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 mouseScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector2 curvedRange;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VROverlayInputMethod inputMethod;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65F078", Offset = "0x65F078")]
	private static SteamVR_Overlay <instance>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ulong handle;

	public static SteamVR_Overlay instance
	{
		[Address(RVA = "0x7EA808", Offset = "0x7EA808", VA = "0x7EA808")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C088", Offset = "0x67C088")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7F1890", Offset = "0x7F1890", VA = "0x7F1890")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C098", Offset = "0x67C098")]
		private set
		{
		}
	}

	public static string key
	{
		[Address(RVA = "0x7EEED0", Offset = "0x7EEED0", VA = "0x7EEED0")]
		get
		{
			return null;
		}
	}

	[Address(RVA = "0x7F18E4", Offset = "0x7F18E4", VA = "0x7F18E4")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7F1A40", Offset = "0x7F1A40", VA = "0x7F1A40")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7F1AFC", Offset = "0x7F1AFC", VA = "0x7F1AFC")]
	public void UpdateOverlay()
	{
	}

	[Address(RVA = "0x7F1FAC", Offset = "0x7F1FAC", VA = "0x7F1FAC")]
	public bool PollNextEvent(ref VREvent_t pEvent)
	{
		return default(bool);
	}

	[Address(RVA = "0x7F20B8", Offset = "0x7F20B8", VA = "0x7F20B8")]
	public bool ComputeIntersection(Vector3 source, Vector3 direction, ref IntersectionResults results)
	{
		return default(bool);
	}

	[Address(RVA = "0x7F227C", Offset = "0x7F227C", VA = "0x7F227C")]
	public SteamVR_Overlay()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655C64", Offset = "0x655C64")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x655C64", Offset = "0x655C64")]
public class SteamVR_PlayArea : MonoBehaviour
{
	public enum Size
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Calibrated,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		_400x300,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		_300x225,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		_200x150
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B000", Offset = "0x65B000")]
	private sealed class <UpdateBounds>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_PlayArea <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CVRChaperone <chaperone>5__2;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7F387C", Offset = "0x7F387C", VA = "0x7F387C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7F38EC", Offset = "0x7F38EC", VA = "0x7F38EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7F36DC", Offset = "0x7F36DC", VA = "0x7F36DC")]
		[DebuggerHidden]
		public <UpdateBounds>d__14(int <>1__state)
		{
		}

		[Address(RVA = "0x7F3754", Offset = "0x7F3754", VA = "0x7F3754", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7F3758", Offset = "0x7F3758", VA = "0x7F3758", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7F3884", Offset = "0x7F3884", VA = "0x7F3884", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float borderThickness;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wireframeHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool drawWireframeWhenSelectedOnly;

	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool drawInGame;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Size size;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color color;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HideInInspector", RVA = "0x65F088", Offset = "0x65F088")]
	public Vector3[] vertices;

	[Address(RVA = "0x7F2354", Offset = "0x7F2354", VA = "0x7F2354")]
	public static bool GetBounds(Size size, ref HmdQuad_t pRect)
	{
		return default(bool);
	}

	[Address(RVA = "0x7F26F8", Offset = "0x7F26F8", VA = "0x7F26F8")]
	public void BuildMesh()
	{
	}

	[Address(RVA = "0x7F328C", Offset = "0x7F328C", VA = "0x7F328C")]
	private void OnDrawGizmos()
	{
	}

	[Address(RVA = "0x7F3588", Offset = "0x7F3588", VA = "0x7F3588")]
	private void OnDrawGizmosSelected()
	{
	}

	[Address(RVA = "0x7F329C", Offset = "0x7F329C", VA = "0x7F329C")]
	public void DrawWireframe()
	{
	}

	[Address(RVA = "0x7F3598", Offset = "0x7F3598", VA = "0x7F3598")]
	public void OnEnable()
	{
	}

	[Address(RVA = "0x7F3668", Offset = "0x7F3668", VA = "0x7F3668")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C0A8", Offset = "0x67C0A8")]
	private IEnumerator UpdateBounds()
	{
		return null;
	}

	[Address(RVA = "0x7F3708", Offset = "0x7F3708", VA = "0x7F3708")]
	public SteamVR_PlayArea()
	{
	}
}
public class SteamVR_Render : MonoBehaviour
{
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B010", Offset = "0x65B010")]
	private sealed class <RenderLoop>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_Render <>4__this;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x7F54F4", Offset = "0x7F54F4", VA = "0x7F54F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x7F5564", Offset = "0x7F5564", VA = "0x7F5564", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x7F40A0", Offset = "0x7F40A0", VA = "0x7F40A0")]
		[DebuggerHidden]
		public <RenderLoop>d__29(int <>1__state)
		{
		}

		[Address(RVA = "0x7F5324", Offset = "0x7F5324", VA = "0x7F5324", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7F5328", Offset = "0x7F5328", VA = "0x7F5328", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7F54FC", Offset = "0x7F54FC", VA = "0x7F54FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool pauseGameWhenDashboardIsVisible;

	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool lockPhysicsUpdateRateToRenderFrequency;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SteamVR_ExternalCamera externalCamera;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string externalCameraConfigPath;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ETrackingUniverseOrigin trackingSpace;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65F098", Offset = "0x65F098")]
	private static EVREye <eye>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SteamVR_Render _instance;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool isQuitting;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SteamVR_Camera[] cameras;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TrackedDevicePose_t[] poses;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TrackedDevicePose_t[] gamePoses;

	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool _pauseRendering;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForEndOfFrame waitForEndOfFrame;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float sceneResolutionScale;

	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timeScale;

	public static EVREye eye
	{
		[Address(RVA = "0x7F38F4", Offset = "0x7F38F4", VA = "0x7F38F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C10C", Offset = "0x67C10C")]
		get
		{
			return default(EVREye);
		}
		[Address(RVA = "0x7F3944", Offset = "0x7F3944", VA = "0x7F3944")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C11C", Offset = "0x67C11C")]
		private set
		{
		}
	}

	public static SteamVR_Render instance
	{
		[Address(RVA = "0x7E3A8C", Offset = "0x7E3A8C", VA = "0x7E3A8C")]
		get
		{
			return null;
		}
	}

	public static bool pauseRendering
	{
		[Address(RVA = "0x7F3FDC", Offset = "0x7F3FDC", VA = "0x7F3FDC")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x7EFF48", Offset = "0x7EFF48", VA = "0x7EFF48")]
		set
		{
		}
	}

	[Address(RVA = "0x7F3998", Offset = "0x7F3998", VA = "0x7F3998")]
	private void OnDestroy()
	{
	}

	[Address(RVA = "0x7F39E8", Offset = "0x7F39E8", VA = "0x7F39E8")]
	private void OnApplicationQuit()
	{
	}

	[Address(RVA = "0x7E2140", Offset = "0x7E2140", VA = "0x7E2140")]
	public static void Add(SteamVR_Camera vrcam)
	{
	}

	[Address(RVA = "0x7E1190", Offset = "0x7E1190", VA = "0x7E1190")]
	public static void Remove(SteamVR_Camera vrcam)
	{
	}

	[Address(RVA = "0x7EEF48", Offset = "0x7EEF48", VA = "0x7EEF48")]
	public static SteamVR_Camera Top()
	{
		return null;
	}

	[Address(RVA = "0x7F3A5C", Offset = "0x7F3A5C", VA = "0x7F3A5C")]
	private void AddInternal(SteamVR_Camera vrcam)
	{
	}

	[Address(RVA = "0x7F3D50", Offset = "0x7F3D50", VA = "0x7F3D50")]
	private void RemoveInternal(SteamVR_Camera vrcam)
	{
	}

	[Address(RVA = "0x7F3F5C", Offset = "0x7F3F5C", VA = "0x7F3F5C")]
	private SteamVR_Camera TopInternal()
	{
		return null;
	}

	[Address(RVA = "0x7F402C", Offset = "0x7F402C", VA = "0x7F402C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C12C", Offset = "0x67C12C")]
	private IEnumerator RenderLoop()
	{
		return null;
	}

	[Address(RVA = "0x7F40CC", Offset = "0x7F40CC", VA = "0x7F40CC")]
	private void RenderExternalCamera()
	{
	}

	[Address(RVA = "0x7F4254", Offset = "0x7F4254", VA = "0x7F4254")]
	private void OnInputFocus(bool hasFocus)
	{
	}

	[Address(RVA = "0x7F42C4", Offset = "0x7F42C4", VA = "0x7F42C4")]
	private void OnQuit(VREvent_t vrEvent)
	{
	}

	[Address(RVA = "0x7F42CC", Offset = "0x7F42CC", VA = "0x7F42CC")]
	private string GetScreenshotFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames screenshotPropertyFilename)
	{
		return null;
	}

	[Address(RVA = "0x7F4434", Offset = "0x7F4434", VA = "0x7F4434")]
	private void OnRequestScreenshot(VREvent_t vrEvent)
	{
	}

	[Address(RVA = "0x7F46FC", Offset = "0x7F46FC", VA = "0x7F46FC")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7F49A0", Offset = "0x7F49A0", VA = "0x7F49A0")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7F4B6C", Offset = "0x7F4B6C", VA = "0x7F4B6C")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7F4D18", Offset = "0x7F4D18", VA = "0x7F4D18")]
	public void UpdatePoses()
	{
	}

	[Address(RVA = "0x7F4E1C", Offset = "0x7F4E1C", VA = "0x7F4E1C")]
	private void OnBeforeRender()
	{
	}

	[Address(RVA = "0x7F4E20", Offset = "0x7F4E20", VA = "0x7F4E20")]
	private void Update()
	{
	}

	[Address(RVA = "0x7F5258", Offset = "0x7F5258", VA = "0x7F5258")]
	public SteamVR_Render()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655CF4", Offset = "0x655CF4")]
public class SteamVR_RenderModel : MonoBehaviour
{
	public class RenderModel
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673FCC", Offset = "0x673FCC")]
		private Mesh <mesh>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673FDC", Offset = "0x673FDC")]
		private Material <material>k__BackingField;

		public Mesh mesh
		{
			[Address(RVA = "0x719E4C", Offset = "0x719E4C", VA = "0x719E4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686DB0", Offset = "0x686DB0")]
			get
			{
				return null;
			}
			[Address(RVA = "0x719F04", Offset = "0x719F04", VA = "0x719F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686DC0", Offset = "0x686DC0")]
			private set
			{
			}
		}

		public Material material
		{
			[Address(RVA = "0x719F14", Offset = "0x719F14", VA = "0x719F14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686DD0", Offset = "0x686DD0")]
			get
			{
				return null;
			}
			[Address(RVA = "0x719F0C", Offset = "0x719F0C", VA = "0x719F0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686DE0", Offset = "0x686DE0")]
			private set
			{
			}
		}

		[Address(RVA = "0x719ECC", Offset = "0x719ECC", VA = "0x719ECC")]
		public RenderModel(Mesh mesh, Material material)
		{
		}
	}

	public sealed class RenderModelInterfaceHolder : IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool needsShutdown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool failedLoadInterface;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CVRRenderModels _instance;

		public CVRRenderModels instance
		{
			[Address(RVA = "0x7191C4", Offset = "0x7191C4", VA = "0x7191C4")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x719F1C", Offset = "0x719F1C", VA = "0x719F1C", Slot = "4")]
		public void Dispose()
		{
		}

		[Address(RVA = "0x7191BC", Offset = "0x7191BC", VA = "0x7191BC")]
		public RenderModelInterfaceHolder()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B020", Offset = "0x65B020")]
	private sealed class <SetModelAsync>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string renderModelName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_RenderModel <>4__this;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderModelInterfaceHolder <holder>5__2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CVRRenderModels <renderModels>5__3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string[] <renderModelNames>5__4;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x719E54", Offset = "0x719E54", VA = "0x719E54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x719EC4", Offset = "0x719EC4", VA = "0x719EC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x71939C", Offset = "0x71939C", VA = "0x71939C")]
		[DebuggerHidden]
		public <SetModelAsync>d__21(int <>1__state)
		{
		}

		[Address(RVA = "0x7193C8", Offset = "0x7193C8", VA = "0x7193C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x7194A4", Offset = "0x7194A4", VA = "0x7194A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x7193E4", Offset = "0x7193E4", VA = "0x7193E4")]
		private void <>m__Finally1()
		{
		}

		[Address(RVA = "0x719E5C", Offset = "0x719E5C", VA = "0x719E5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B030", Offset = "0x65B030")]
	private sealed class <FreeRenderModel>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr pRenderModel;

		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Address(RVA = "0x719324", Offset = "0x719324", VA = "0x719324", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		private object System.Collections.IEnumerator.Current
		{
			[Address(RVA = "0x719394", Offset = "0x719394", VA = "0x719394", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x718FE0", Offset = "0x718FE0", VA = "0x718FE0")]
		[DebuggerHidden]
		public <FreeRenderModel>d__24(int <>1__state)
		{
		}

		[Address(RVA = "0x71900C", Offset = "0x71900C", VA = "0x71900C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Address(RVA = "0x719010", Offset = "0x719010", VA = "0x719010", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x71932C", Offset = "0x71932C", VA = "0x71932C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SteamVR_TrackedObject.EIndex index;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const string modelOverrideWarning = "Model override is really only meant to be used in the scene view for lining things up; using it at runtime is discouraged.  Use tracked device index instead to ensure the correct model is displayed for all users.";

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F0A8", Offset = "0x65F0A8")]
	public string modelOverride;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F0E0", Offset = "0x65F0E0")]
	public Shader shader;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F118", Offset = "0x65F118")]
	public bool verbose;

	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F150", Offset = "0x65F150")]
	public bool createComponents;

	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F188", Offset = "0x65F188")]
	public bool updateDynamically;

	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public RenderModel_ControllerMode_State_t controllerModeState;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public const string k_localTransformName = "attach";

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65F1C0", Offset = "0x65F1C0")]
	private string <renderModelName>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Hashtable models;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Hashtable materials;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SteamVR_Events.Action deviceConnectedAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SteamVR_Events.Action hideRenderModelsAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SteamVR_Events.Action modelSkinSettingsHaveChangedAction;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<int, string> nameCache;

	public string renderModelName
	{
		[Address(RVA = "0x7F556C", Offset = "0x7F556C", VA = "0x7F556C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C190", Offset = "0x67C190")]
		get
		{
			return null;
		}
		[Address(RVA = "0x7F5574", Offset = "0x7F5574", VA = "0x7F5574")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C1A0", Offset = "0x67C1A0")]
		private set
		{
		}
	}

	[Address(RVA = "0x7F557C", Offset = "0x7F557C", VA = "0x7F557C")]
	private void OnModelSkinSettingsHaveChanged(VREvent_t vrEvent)
	{
	}

	[Address(RVA = "0x7F57A8", Offset = "0x7F57A8", VA = "0x7F57A8")]
	private void OnHideRenderModels(bool hidden)
	{
	}

	[Address(RVA = "0x7F5900", Offset = "0x7F5900", VA = "0x7F5900")]
	private void OnDeviceConnected(int i, bool connected)
	{
	}

	[Address(RVA = "0x7F55EC", Offset = "0x7F55EC", VA = "0x7F55EC")]
	public void UpdateModel()
	{
	}

	[Address(RVA = "0x7F5918", Offset = "0x7F5918", VA = "0x7F5918")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C1B0", Offset = "0x67C1B0")]
	private IEnumerator SetModelAsync(string renderModelName)
	{
		return null;
	}

	[Address(RVA = "0x7F59B0", Offset = "0x7F59B0", VA = "0x7F59B0")]
	private bool SetModel(string renderModelName)
	{
		return default(bool);
	}

	[Address(RVA = "0x7F6F14", Offset = "0x7F6F14", VA = "0x7F6F14")]
	private RenderModel LoadRenderModel(CVRRenderModels renderModels, string renderModelName, string baseName)
	{
		return null;
	}

	[Address(RVA = "0x7F8008", Offset = "0x7F8008", VA = "0x7F8008")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C214", Offset = "0x67C214")]
	private IEnumerator FreeRenderModel(IntPtr pRenderModel)
	{
		return null;
	}

	[Address(RVA = "0x7F807C", Offset = "0x7F807C", VA = "0x7F807C")]
	public Transform FindComponent(string componentName)
	{
		return null;
	}

	[Address(RVA = "0x7F5EC8", Offset = "0x7F5EC8", VA = "0x7F5EC8")]
	private void StripMesh(GameObject go)
	{
	}

	[Address(RVA = "0x7F6014", Offset = "0x7F6014", VA = "0x7F6014")]
	private bool LoadComponents(RenderModelInterfaceHolder holder, string renderModelName)
	{
		return default(bool);
	}

	[Address(RVA = "0x7F8124", Offset = "0x7F8124", VA = "0x7F8124")]
	private SteamVR_RenderModel()
	{
	}

	[Address(RVA = "0x7F8264", Offset = "0x7F8264", VA = "0x7F8264")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x7F83AC", Offset = "0x7F83AC", VA = "0x7F83AC")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x7F8430", Offset = "0x7F8430", VA = "0x7F8430")]
	private void Update()
	{
	}

	[Address(RVA = "0x7F6960", Offset = "0x7F6960", VA = "0x7F6960")]
	public void UpdateComponents(CVRRenderModels renderModels)
	{
	}

	[Address(RVA = "0x7F84B4", Offset = "0x7F84B4", VA = "0x7F84B4")]
	public void SetDeviceIndex(int index)
	{
	}

	[Address(RVA = "0x7F7C28", Offset = "0x7F7C28", VA = "0x7F7C28")]
	private static void Sleep()
	{
	}

	[Address(RVA = "0x7F7C34", Offset = "0x7F7C34", VA = "0x7F7C34")]
	private RenderModel_t MarshalRenderModel(IntPtr pRenderModel)
	{
		return default(RenderModel_t);
	}

	[Address(RVA = "0x7F7E30", Offset = "0x7F7E30", VA = "0x7F7E30")]
	private RenderModel_TextureMap_t MarshalRenderModel_TextureMap(IntPtr pRenderModel)
	{
		return default(RenderModel_TextureMap_t);
	}
}
public class SteamVR_Skybox : MonoBehaviour
{
	public enum CellSize
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		x1024,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		x64,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		x32,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		x16,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		x8
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture front;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture back;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture left;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture right;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture top;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture bottom;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CellSize StereoCellSize;

	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float StereoIpdMm;

	[Address(RVA = "0x719F94", Offset = "0x719F94", VA = "0x719F94")]
	public void SetTextureByIndex(int i, Texture t)
	{
	}

	[Address(RVA = "0x719FE8", Offset = "0x719FE8", VA = "0x719FE8")]
	public Texture GetTextureByIndex(int i)
	{
		return null;
	}

	[Address(RVA = "0x71A044", Offset = "0x71A044", VA = "0x71A044")]
	public static void SetOverride([Optional] Texture front, [Optional] Texture back, [Optional] Texture left, [Optional] Texture right, [Optional] Texture top, [Optional] Texture bottom)
	{
	}

	[Address(RVA = "0x71A51C", Offset = "0x71A51C", VA = "0x71A51C")]
	public static void ClearOverride()
	{
	}

	[Address(RVA = "0x71A594", Offset = "0x71A594", VA = "0x71A594")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x71A5A8", Offset = "0x71A5A8", VA = "0x71A5A8")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x71A5AC", Offset = "0x71A5AC", VA = "0x71A5AC")]
	public SteamVR_Skybox()
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655D04", Offset = "0x655D04")]
public class SteamVR_SphericalProjection : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Material material;

	[Address(RVA = "0x71A5C0", Offset = "0x71A5C0", VA = "0x71A5C0")]
	public void Set(Vector3 N, float phi0, float phi1, float theta0, float theta1, Vector3 uAxis, Vector3 uOrigin, float uScale, Vector3 vAxis, Vector3 vOrigin, float vScale)
	{
	}

	[Address(RVA = "0x71AA58", Offset = "0x71AA58", VA = "0x71AA58")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Address(RVA = "0x71AAE8", Offset = "0x71AAE8", VA = "0x71AAE8")]
	public SteamVR_SphericalProjection()
	{
	}
}
public class SteamVR_Stats : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GUIText text;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color fadeColor;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fadeDuration;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private double lastUpdate;

	[Address(RVA = "0x71AAF0", Offset = "0x71AAF0", VA = "0x71AAF0")]
	private void Awake()
	{
	}

	[Address(RVA = "0x71AC28", Offset = "0x71AC28", VA = "0x71AC28")]
	private void Update()
	{
	}

	[Address(RVA = "0x71AEB4", Offset = "0x71AEB4", VA = "0x71AEB4")]
	public SteamVR_Stats()
	{
	}
}
public class SteamVR_TestController : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<int> controllerIndices;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EVRButtonId[] buttonIds;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EVRButtonId[] axisIds;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform point;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pointer;

	[Address(RVA = "0x71B6FC", Offset = "0x71B6FC", VA = "0x71B6FC")]
	private void OnDeviceConnected(int index, bool connected)
	{
	}

	[Address(RVA = "0x71BE08", Offset = "0x71BE08", VA = "0x71BE08")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x71BED0", Offset = "0x71BED0", VA = "0x71BED0")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x71B8C4", Offset = "0x71B8C4", VA = "0x71B8C4")]
	private void PrintControllerStatus(int index)
	{
	}

	[Address(RVA = "0x71BF98", Offset = "0x71BF98", VA = "0x71BF98")]
	private void Update()
	{
	}

	[Address(RVA = "0x71C8E8", Offset = "0x71C8E8", VA = "0x71C8E8")]
	public SteamVR_TestController()
	{
	}
}
public class SteamVR_TrackedCamera
{
	public class VideoStreamTexture
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673FEC", Offset = "0x673FEC")]
		private bool <undistorted>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673FFC", Offset = "0x673FFC")]
		private VRTextureBounds_t <frameBounds>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D _texture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int prevFrameCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private uint glTextureId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private VideoStream videostream;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CameraVideoStreamFrameHeader_t header;

		public bool undistorted
		{
			[Address(RVA = "0x71DCA0", Offset = "0x71DCA0", VA = "0x71DCA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686E90", Offset = "0x686E90")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x71DC94", Offset = "0x71DC94", VA = "0x71DC94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686EA0", Offset = "0x686EA0")]
			private set
			{
			}
		}

		public uint deviceIndex
		{
			[Address(RVA = "0x71DCA8", Offset = "0x71DCA8", VA = "0x71DCA8")]
			get
			{
				return default(uint);
			}
		}

		public bool hasCamera
		{
			[Address(RVA = "0x71CFEC", Offset = "0x71CFEC", VA = "0x71CFEC")]
			get
			{
				return default(bool);
			}
		}

		public bool hasTracking
		{
			[Address(RVA = "0x71D4E0", Offset = "0x71D4E0", VA = "0x71D4E0")]
			get
			{
				return default(bool);
			}
		}

		public uint frameId
		{
			[Address(RVA = "0x71E084", Offset = "0x71E084", VA = "0x71E084")]
			get
			{
				return default(uint);
			}
		}

		public VRTextureBounds_t frameBounds
		{
			[Address(RVA = "0x71D4D4", Offset = "0x71D4D4", VA = "0x71D4D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686EB0", Offset = "0x686EB0")]
			get
			{
				return default(VRTextureBounds_t);
			}
			[Address(RVA = "0x71E0A8", Offset = "0x71E0A8", VA = "0x71E0A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686EC0", Offset = "0x686EC0")]
			private set
			{
			}
		}

		public EVRTrackedCameraFrameType frameType
		{
			[Address(RVA = "0x71E0B4", Offset = "0x71E0B4", VA = "0x71E0B4")]
			get
			{
				return default(EVRTrackedCameraFrameType);
			}
		}

		public Texture2D texture
		{
			[Address(RVA = "0x71D4B0", Offset = "0x71D4B0", VA = "0x71D4B0")]
			get
			{
				return null;
			}
		}

		public SteamVR_Utils.RigidTransform transform
		{
			[Address(RVA = "0x71D504", Offset = "0x71D504", VA = "0x71D504")]
			get
			{
				return default(SteamVR_Utils.RigidTransform);
			}
		}

		public Vector3 velocity
		{
			[Address(RVA = "0x71E2D8", Offset = "0x71E2D8", VA = "0x71E2D8")]
			get
			{
				return default(Vector3);
			}
		}

		public Vector3 angularVelocity
		{
			[Address(RVA = "0x71E328", Offset = "0x71E328", VA = "0x71E328")]
			get
			{
				return default(Vector3);
			}
		}

		[Address(RVA = "0x71D710", Offset = "0x71D710", VA = "0x71D710")]
		public VideoStreamTexture(uint deviceIndex, bool undistorted)
		{
		}

		[Address(RVA = "0x71E37C", Offset = "0x71E37C", VA = "0x71E37C")]
		public TrackedDevicePose_t GetPose()
		{
			return default(TrackedDevicePose_t);
		}

		[Address(RVA = "0x71CFC0", Offset = "0x71CFC0", VA = "0x71CFC0")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Address(RVA = "0x71D084", Offset = "0x71D084", VA = "0x71D084")]
		public ulong Release()
		{
			return default(ulong);
		}

		[Address(RVA = "0x71DCD4", Offset = "0x71DCD4", VA = "0x71DCD4")]
		private void Update()
		{
		}
	}

	private class VideoStream
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67400C", Offset = "0x67400C")]
		private uint <deviceIndex>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong _handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _hasCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ulong refCount;

		public uint deviceIndex
		{
			[Address(RVA = "0x71DB38", Offset = "0x71DB38", VA = "0x71DB38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686ED0", Offset = "0x686ED0")]
			get
			{
				return default(uint);
			}
			[Address(RVA = "0x71DB30", Offset = "0x71DB30", VA = "0x71DB30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686EE0", Offset = "0x686EE0")]
			private set
			{
			}
		}

		public ulong handle
		{
			[Address(RVA = "0x71DB40", Offset = "0x71DB40", VA = "0x71DB40")]
			get
			{
				return default(ulong);
			}
		}

		public bool hasCamera
		{
			[Address(RVA = "0x71DB48", Offset = "0x71DB48", VA = "0x71DB48")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0x71DA84", Offset = "0x71DA84", VA = "0x71DA84")]
		public VideoStream(uint deviceIndex)
		{
		}

		[Address(RVA = "0x71DB50", Offset = "0x71DB50", VA = "0x71DB50")]
		public ulong Acquire()
		{
			return default(ulong);
		}

		[Address(RVA = "0x71DBF0", Offset = "0x71DBF0", VA = "0x71DBF0")]
		public ulong Release()
		{
			return default(ulong);
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VideoStreamTexture[] distorted;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static VideoStreamTexture[] undistorted;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static VideoStream[] videostreams;

	[Address(RVA = "0x71D570", Offset = "0x71D570", VA = "0x71D570")]
	public static VideoStreamTexture Distorted(int deviceIndex = 0)
	{
		return null;
	}

	[Address(RVA = "0x71D760", Offset = "0x71D760", VA = "0x71D760")]
	public static VideoStreamTexture Undistorted(int deviceIndex = 0)
	{
		return null;
	}

	[Address(RVA = "0x71CFAC", Offset = "0x71CFAC", VA = "0x71CFAC")]
	public static VideoStreamTexture Source(bool undistorted, int deviceIndex = 0)
	{
		return null;
	}

	[Address(RVA = "0x71D900", Offset = "0x71D900", VA = "0x71D900")]
	private static VideoStream Stream(uint deviceIndex)
	{
		return null;
	}

	[Address(RVA = "0x71DB28", Offset = "0x71DB28", VA = "0x71DB28")]
	public SteamVR_TrackedCamera()
	{
	}
}
public class SteamVR_TrackedObject : MonoBehaviour
{
	public enum EIndex
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = -1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Hmd,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device3,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device4,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device5,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device6,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device7,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device8,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device9,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device10,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device11,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device12,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device13,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device14,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Device15
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EIndex index;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F1D0", Offset = "0x65F1D0")]
	public Transform origin;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65F208", Offset = "0x65F208")]
	private bool <isValid>k__BackingField;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SteamVR_Events.Action newPosesAction;

	public bool isValid
	{
		[Address(RVA = "0x71FD64", Offset = "0x71FD64", VA = "0x71FD64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C278", Offset = "0x67C278")]
		get
		{
			return default(bool);
		}
		[Address(RVA = "0x71FD6C", Offset = "0x71FD6C", VA = "0x71FD6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C288", Offset = "0x67C288")]
		private set
		{
		}
	}

	[Address(RVA = "0x71FD78", Offset = "0x71FD78", VA = "0x71FD78")]
	private void OnNewPoses(TrackedDevicePose_t[] poses)
	{
	}

	[Address(RVA = "0x7200B4", Offset = "0x7200B4", VA = "0x7200B4")]
	private SteamVR_TrackedObject()
	{
	}

	[Address(RVA = "0x720164", Offset = "0x720164", VA = "0x720164")]
	private void OnEnable()
	{
	}

	[Address(RVA = "0x72021C", Offset = "0x72021C", VA = "0x72021C")]
	private void OnDisable()
	{
	}

	[Address(RVA = "0x72025C", Offset = "0x72025C", VA = "0x72025C")]
	public void SetDeviceIndex(int index)
	{
	}
}
[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655D14", Offset = "0x655D14")]
public class SteamVR_UpdatePoses : MonoBehaviour
{
	[Address(RVA = "0x720344", Offset = "0x720344", VA = "0x720344")]
	private void Awake()
	{
	}

	[Address(RVA = "0x7203E0", Offset = "0x7203E0", VA = "0x7203E0")]
	public SteamVR_UpdatePoses()
	{
	}
}
public static class SteamVR_Utils
{
	[Serializable]
	public struct RigidTransform
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 pos;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rot;

		public static RigidTransform identity
		{
			[Address(RVA = "0x722AAC", Offset = "0x722AAC", VA = "0x722AAC")]
			get
			{
				return default(RigidTransform);
			}
		}

		[Address(RVA = "0x722B68", Offset = "0x722B68", VA = "0x722B68")]
		public static RigidTransform FromLocal(Transform t)
		{
			return default(RigidTransform);
		}

		[Address(RVA = "0x722BE0", Offset = "0x722BE0", VA = "0x722BE0")]
		public RigidTransform(Vector3 pos, Quaternion rot)
		{
		}

		[Address(RVA = "0x722C68", Offset = "0x722C68", VA = "0x722C68")]
		public RigidTransform(Transform t)
		{
		}

		[Address(RVA = "0x722E5C", Offset = "0x722E5C", VA = "0x722E5C")]
		public RigidTransform(Transform from, Transform to)
		{
		}

		[Address(RVA = "0x722E64", Offset = "0x722E64", VA = "0x722E64")]
		public RigidTransform(HmdMatrix34_t pose)
		{
		}

		[Address(RVA = "0x723120", Offset = "0x723120", VA = "0x723120")]
		public RigidTransform(HmdMatrix44_t pose)
		{
		}

		[Address(RVA = "0x723458", Offset = "0x723458", VA = "0x723458")]
		public HmdMatrix44_t ToHmdMatrix44()
		{
			return default(HmdMatrix44_t);
		}

		[Address(RVA = "0x7236D4", Offset = "0x7236D4", VA = "0x7236D4")]
		public HmdMatrix34_t ToHmdMatrix34()
		{
			return default(HmdMatrix34_t);
		}

		[Address(RVA = "0x723840", Offset = "0x723840", VA = "0x723840", Slot = "0")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Address(RVA = "0x723848", Offset = "0x723848", VA = "0x723848", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Address(RVA = "0x723884", Offset = "0x723884", VA = "0x723884")]
		public static bool operator ==(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Address(RVA = "0x7239BC", Offset = "0x7239BC", VA = "0x7239BC")]
		public static bool operator !=(RigidTransform a, RigidTransform b)
		{
			return default(bool);
		}

		[Address(RVA = "0x723AF4", Offset = "0x723AF4", VA = "0x723AF4")]
		public static RigidTransform operator *(RigidTransform a, RigidTransform b)
		{
			return default(RigidTransform);
		}

		[Address(RVA = "0x723D4C", Offset = "0x723D4C", VA = "0x723D4C")]
		public void Inverse()
		{
		}

		[Address(RVA = "0x723DA8", Offset = "0x723DA8", VA = "0x723DA8")]
		public RigidTransform GetInverse()
		{
			return default(RigidTransform);
		}

		[Address(RVA = "0x723EF4", Offset = "0x723EF4", VA = "0x723EF4")]
		public void Multiply(RigidTransform a, RigidTransform b)
		{
		}

		[Address(RVA = "0x724060", Offset = "0x724060", VA = "0x724060")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x724180", Offset = "0x724180", VA = "0x724180")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x724188", Offset = "0x724188", VA = "0x724188")]
		public static Vector3 operator *(RigidTransform t, Vector3 v)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x72418C", Offset = "0x72418C", VA = "0x72418C")]
		public static RigidTransform Interpolate(RigidTransform a, RigidTransform b, float t)
		{
			return default(RigidTransform);
		}

		[Address(RVA = "0x724360", Offset = "0x724360", VA = "0x724360")]
		public void Interpolate(RigidTransform to, float t)
		{
		}
	}

	public delegate object SystemFn(CVRSystem system, params object[] args);

	[Address(RVA = "0x7203E8", Offset = "0x7203E8", VA = "0x7203E8")]
	public static Quaternion Slerp(Quaternion A, Quaternion B, float t)
	{
		return default(Quaternion);
	}

	[Address(RVA = "0x7205B4", Offset = "0x7205B4", VA = "0x7205B4")]
	public static Vector3 Lerp(Vector3 A, Vector3 B, float t)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x72060C", Offset = "0x72060C", VA = "0x72060C")]
	public static float Lerp(float A, float B, float t)
	{
		return default(float);
	}

	[Address(RVA = "0x72061C", Offset = "0x72061C", VA = "0x72061C")]
	public static double Lerp(double A, double B, double t)
	{
		return default(double);
	}

	[Address(RVA = "0x72062C", Offset = "0x72062C", VA = "0x72062C")]
	public static float InverseLerp(Vector3 A, Vector3 B, Vector3 result)
	{
		return default(float);
	}

	[Address(RVA = "0x720730", Offset = "0x720730", VA = "0x720730")]
	public static float InverseLerp(float A, float B, float result)
	{
		return default(float);
	}

	[Address(RVA = "0x720740", Offset = "0x720740", VA = "0x720740")]
	public static double InverseLerp(double A, double B, double result)
	{
		return default(double);
	}

	[Address(RVA = "0x720750", Offset = "0x720750", VA = "0x720750")]
	public static float Saturate(float A)
	{
		return default(float);
	}

	[Address(RVA = "0x72076C", Offset = "0x72076C", VA = "0x72076C")]
	public static Vector2 Saturate(Vector2 A)
	{
		return default(Vector2);
	}

	[Address(RVA = "0x7207B8", Offset = "0x7207B8", VA = "0x7207B8")]
	public static float Abs(float A)
	{
		return default(float);
	}

	[Address(RVA = "0x7207C8", Offset = "0x7207C8", VA = "0x7207C8")]
	public static Vector2 Abs(Vector2 A)
	{
		return default(Vector2);
	}

	[Address(RVA = "0x72080C", Offset = "0x72080C", VA = "0x72080C")]
	private static float _copysign(float sizeval, float signval)
	{
		return default(float);
	}

	[Address(RVA = "0x7208CC", Offset = "0x7208CC", VA = "0x7208CC")]
	public static Quaternion GetRotation(this Matrix4x4 matrix)
	{
		return default(Quaternion);
	}

	[Address(RVA = "0x720A98", Offset = "0x720A98", VA = "0x720A98")]
	public static Vector3 GetPosition(this Matrix4x4 matrix)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x720AD4", Offset = "0x720AD4", VA = "0x720AD4")]
	public static Vector3 GetScale(this Matrix4x4 m)
	{
		return default(Vector3);
	}

	[Address(RVA = "0x720C0C", Offset = "0x720C0C", VA = "0x720C0C")]
	public static object CallSystemFn(SystemFn fn, params object[] args)
	{
		return null;
	}

	[Address(RVA = "0x721508", Offset = "0x721508", VA = "0x721508")]
	public static void TakeStereoScreenshot(uint screenshotHandle, GameObject target, int cellSize, float ipd, ref string previewFilename, ref string VRFilename)
	{
	}
}
public class MoveBlock : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveYAmount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float moveSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waitTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotateSpeed;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool goingUp;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float stoppedUntilTime;

	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float moveUpAmount;

	[Address(RVA = "0x914684", Offset = "0x914684", VA = "0x914684", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Address(RVA = "0x914758", Offset = "0x914758", VA = "0x914758", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Address(RVA = "0x914930", Offset = "0x914930", VA = "0x914930")]
	public MoveBlock()
	{
	}
}
public class ViveportDemo : MonoBehaviour
{
	private class MyLicenseChecker : Viveport.Api.LicenseChecker
	{
		[Address(RVA = "0x815554", Offset = "0x815554", VA = "0x815554", Slot = "4")]
		public override void OnSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired)
		{
		}

		[Address(RVA = "0x8156AC", Offset = "0x8156AC", VA = "0x8156AC", Slot = "5")]
		public override void OnFailure(int errorCode, string errorMessage)
		{
		}

		[Address(RVA = "0x814500", Offset = "0x814500", VA = "0x814500")]
		public MyLicenseChecker()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nInitValue;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nResult;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int nXStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int nYStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string stringToEdit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string StatsCount;

	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string achivToEdit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string leaderboardToEdit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string leaderboardUserName;

	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string leaderboardScore;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool bInit;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool bIsReady;

	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	private static bool bArcadeIsReady;

	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	private static bool bTokenIsReady;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string APP_ID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string APP_KEY;

	[Address(RVA = "0x811D80", Offset = "0x811D80", VA = "0x811D80")]
	private void Start()
	{
	}

	[Address(RVA = "0x811E40", Offset = "0x811E40", VA = "0x811E40")]
	private void Update()
	{
	}

	[Address(RVA = "0x811E44", Offset = "0x811E44", VA = "0x811E44")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0x814508", Offset = "0x814508", VA = "0x814508")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Address(RVA = "0x81465C", Offset = "0x81465C", VA = "0x81465C")]
	private static void IsReadyHandler(int nResult)
	{
	}

	[Address(RVA = "0x8147A4", Offset = "0x8147A4", VA = "0x8147A4")]
	private static void IsTokenReadyHandler(int nResult)
	{
	}

	[Address(RVA = "0x8148E0", Offset = "0x8148E0", VA = "0x8148E0")]
	private static void GetSessionTokenHandler(int nResult, string message)
	{
	}

	[Address(RVA = "0x814B90", Offset = "0x814B90", VA = "0x814B90")]
	private static void QueryRunTimeHandler(int nResult, int nMode)
	{
	}

	[Address(RVA = "0x814DE0", Offset = "0x814DE0", VA = "0x814DE0")]
	private static void IsArcadeLeaderboardReadyHandler(int nResult)
	{
	}

	[Address(RVA = "0x814F28", Offset = "0x814F28", VA = "0x814F28")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Address(RVA = "0x81504C", Offset = "0x81504C", VA = "0x81504C")]
	private static void DownloadStatsHandler(int nResult)
	{
	}

	[Address(RVA = "0x815138", Offset = "0x815138", VA = "0x815138")]
	private static void UploadStatsHandler(int nResult)
	{
	}

	[Address(RVA = "0x815224", Offset = "0x815224", VA = "0x815224")]
	private static void DownloadLeaderboardHandler(int nResult)
	{
	}

	[Address(RVA = "0x815310", Offset = "0x815310", VA = "0x815310")]
	private static void UploadLeaderboardScoreHandler(int nResult)
	{
	}

	[Address(RVA = "0x8153FC", Offset = "0x8153FC", VA = "0x8153FC")]
	public ViveportDemo()
	{
	}
}
public class ViveportDemo_ArcadeSession : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string VIVEPORT_ARCADE_APP_TEST_ID;

	[Address(RVA = "0x815778", Offset = "0x815778", VA = "0x815778")]
	private void Start()
	{
	}

	[Address(RVA = "0x81583C", Offset = "0x81583C", VA = "0x81583C")]
	private void Update()
	{
	}

	[Address(RVA = "0x815840", Offset = "0x815840", VA = "0x815840")]
	private void InitStatusHandler(int nResult)
	{
	}

	[Address(RVA = "0x815938", Offset = "0x815938", VA = "0x815938")]
	public ViveportDemo_ArcadeSession()
	{
	}
}
public class ViveportDemo_DLC : MonoBehaviour
{
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string APP_ID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool bInit;

	[Address(RVA = "0x8159A8", Offset = "0x8159A8", VA = "0x8159A8")]
	private void Start()
	{
	}

	[Address(RVA = "0x815A68", Offset = "0x815A68", VA = "0x815A68")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0x815E4C", Offset = "0x815E4C", VA = "0x815E4C")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Address(RVA = "0x815E50", Offset = "0x815E50", VA = "0x815E50")]
	private static void ShutdownHandler(int nResult)
	{
	}

	[Address(RVA = "0x815E54", Offset = "0x815E54", VA = "0x815E54")]
	private static void IsDLCReadyHandler(int nResult)
	{
	}

	[Address(RVA = "0x815E58", Offset = "0x815E58", VA = "0x815E58")]
	public ViveportDemo_DLC()
	{
	}
}
public class ViveportDemo_IAP : MonoBehaviour
{
	public class Item
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ticket;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] items;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string subscription_ticket;

		[Address(RVA = "0x816DD8", Offset = "0x816DD8", VA = "0x816DD8")]
		public Item()
		{
		}
	}

	private class Result : Viveport.IAPurchase.IAPurchaseListener
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Item mItem;

		[Address(RVA = "0x816E40", Offset = "0x816E40", VA = "0x816E40", Slot = "4")]
		public override void OnSuccess(string pchCurrencyName)
		{
		}

		[Address(RVA = "0x816EC4", Offset = "0x816EC4", VA = "0x816EC4", Slot = "5")]
		public override void OnRequestSuccess(string pchPurchaseId)
		{
		}

		[Address(RVA = "0x816F88", Offset = "0x816F88", VA = "0x816F88", Slot = "6")]
		public override void OnPurchaseSuccess(string pchPurchaseId)
		{
		}

		[Address(RVA = "0x817074", Offset = "0x817074", VA = "0x817074", Slot = "7")]
		public override void OnQuerySuccess(Viveport.IAPurchase.QueryResponse response)
		{
		}

		[Address(RVA = "0x81712C", Offset = "0x81712C", VA = "0x81712C", Slot = "8")]
		public override void OnQuerySuccess(Viveport.IAPurchase.QueryListResponse response)
		{
		}

		[Address(RVA = "0x8178C0", Offset = "0x8178C0", VA = "0x8178C0", Slot = "9")]
		public override void OnBalanceSuccess(string pchBalance)
		{
		}

		[Address(RVA = "0x817944", Offset = "0x817944", VA = "0x817944", Slot = "11")]
		public override void OnRequestSubscriptionSuccess(string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x817A08", Offset = "0x817A08", VA = "0x817A08", Slot = "12")]
		public override void OnRequestSubscriptionWithPlanIDSuccess(string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x817ACC", Offset = "0x817ACC", VA = "0x817ACC", Slot = "13")]
		public override void OnSubscribeSuccess(string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x817BB8", Offset = "0x817BB8", VA = "0x817BB8", Slot = "14")]
		public override void OnQuerySubscriptionSuccess(Viveport.IAPurchase.Subscription[] subscriptionlist)
		{
		}

		[Address(RVA = "0x8180DC", Offset = "0x8180DC", VA = "0x8180DC", Slot = "15")]
		public override void OnCancelSubscriptionSuccess(bool bCanceled)
		{
		}

		[Address(RVA = "0x818178", Offset = "0x818178", VA = "0x818178", Slot = "10")]
		public override void OnFailure(int nCode, string pchMessage)
		{
		}

		[Address(RVA = "0x815FB8", Offset = "0x815FB8", VA = "0x815FB8")]
		public Result()
		{
		}
	}

	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int nWidth;

	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nHeight;

	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nXStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nYStart;

	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string IAP_APP_TEST_ID;

	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string IAP_APP_TEST_KEY;

	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Result mListener;

	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool bIsDuplicatedSubscription;

	[Address(RVA = "0x815ED8", Offset = "0x815ED8", VA = "0x815ED8")]
	private void Start()
	{
	}

	[Address(RVA = "0x81601C", Offset = "0x81601C", VA = "0x81601C")]
	private void Update()
	{
	}

	[Address(RVA = "0x816020", Offset = "0x816020", VA = "0x816020")]
	private void OnGUI()
	{
	}

	[Address(RVA = "0x816C9C", Offset = "0x816C9C", VA = "0x816C9C")]
	private static void InitStatusHandler(int nResult)
	{
	}

	[Address(RVA = "0x816D48", Offset = "0x816D48", VA = "0x816D48")]
	public ViveportDemo_IAP()
	{
	}
}
namespace Viveport
{
	public enum Locale
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		US,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		JP,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		KR,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RU,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CN,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TW,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FR
	}
	public delegate void StatusCallback(int nResult);
	public delegate void StatusCallback2(int nResult, string message);
	public delegate void QueryRuntimeModeCallback(int nResult, int emu);
	public class Leaderboard
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65F218", Offset = "0x65F218")]
		private int <Rank>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65F228", Offset = "0x65F228")]
		private int <Score>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65F238", Offset = "0x65F238")]
		private string <UserName>k__BackingField;

		public int Rank
		{
			[Address(RVA = "0x810764", Offset = "0x810764", VA = "0x810764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C2C8", Offset = "0x67C2C8")]
			get
			{
				return default(int);
			}
			[Address(RVA = "0x8105B4", Offset = "0x8105B4", VA = "0x8105B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C2D8", Offset = "0x67C2D8")]
			set
			{
			}
		}

		public int Score
		{
			[Address(RVA = "0x81076C", Offset = "0x81076C", VA = "0x81076C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C2E8", Offset = "0x67C2E8")]
			get
			{
				return default(int);
			}
			[Address(RVA = "0x8105BC", Offset = "0x8105BC", VA = "0x8105BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C2F8", Offset = "0x67C2F8")]
			set
			{
			}
		}

		public string UserName
		{
			[Address(RVA = "0x810774", Offset = "0x810774", VA = "0x810774")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C308", Offset = "0x67C308")]
			get
			{
				return null;
			}
			[Address(RVA = "0x8105AC", Offset = "0x8105AC", VA = "0x8105AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C318", Offset = "0x67C318")]
			set
			{
			}
		}

		[Address(RVA = "0x8105A4", Offset = "0x8105A4", VA = "0x8105A4")]
		public Leaderboard()
		{
		}
	}
	public class Api
	{
		public abstract class LicenseChecker
		{
			public abstract void OnSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired);

			public abstract void OnFailure(int errorCode, string errorMessage);

			[Address(RVA = "0x80327C", Offset = "0x80327C", VA = "0x80327C")]
			protected LicenseChecker()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly List<GetLicenseCallback> InternalGetLicenseCallbacks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly List<Viveport.Internal.StatusCallback> InternalStatusCallbacks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly List<Viveport.Internal.QueryRuntimeModeCallback> InternalQueryRunTimeCallbacks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly List<Viveport.Internal.StatusCallback2> InternalStatusCallback2s;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly List<LicenseChecker> InternalLicenseCheckers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly string VERSION;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string _appId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static string _appKey;

		[Address(RVA = "0x802808", Offset = "0x802808", VA = "0x802808")]
		public static void GetLicense(LicenseChecker checker, string appId, string appKey)
		{
		}

		[Address(RVA = "0x802AF4", Offset = "0x802AF4", VA = "0x802AF4")]
		public static int Init(StatusCallback callback, string appId)
		{
			return default(int);
		}

		[Address(RVA = "0x802DDC", Offset = "0x802DDC", VA = "0x802DDC")]
		public static int Shutdown(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x802FF4", Offset = "0x802FF4", VA = "0x802FF4")]
		public static string Version()
		{
			return null;
		}

		[Address(RVA = "0x803110", Offset = "0x803110", VA = "0x803110")]
		public Api()
		{
		}
	}
	public class User
	{
		[Address(RVA = "0x811718", Offset = "0x811718", VA = "0x811718")]
		public static string GetUserId()
		{
			return null;
		}

		[Address(RVA = "0x81174C", Offset = "0x81174C", VA = "0x81174C")]
		public static string GetUserName()
		{
			return null;
		}

		[Address(RVA = "0x811780", Offset = "0x811780", VA = "0x811780")]
		public static string GetUserAvatarUrl()
		{
			return null;
		}

		[Address(RVA = "0x8117B4", Offset = "0x8117B4", VA = "0x8117B4")]
		public User()
		{
		}
	}
	public class UserStats
	{
		public enum LeaderBoardRequestType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GlobalData,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GlobalDataAroundUser,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LocalData,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LocalDataAroundUser
		}

		public enum LeaderBoardTimeRange
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AllTime,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Daily,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Weekly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Monthly
		}

		public enum LeaderBoardSortMethod
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Ascending,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Descending
		}

		public enum LeaderBoardDiaplayType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Numeric,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TimeSeconds,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TimeMilliSeconds
		}

		public enum LeaderBoardScoreMethod
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			KeepBest,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ForceUpdate
		}

		public enum AchievementDisplayAttribute
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Name,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Desc,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Hidden
		}

		[Address(RVA = "0x8117BC", Offset = "0x8117BC", VA = "0x8117BC")]
		public static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x8118C4", Offset = "0x8118C4", VA = "0x8118C4")]
		public static int DownloadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x8119CC", Offset = "0x8119CC", VA = "0x8119CC")]
		public static int GetStat(string name, int defaultValue)
		{
			return default(int);
		}

		[Address(RVA = "0x8119D0", Offset = "0x8119D0", VA = "0x8119D0")]
		public static float GetStat(string name, float defaultValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8119D4", Offset = "0x8119D4", VA = "0x8119D4")]
		public static void SetStat(string name, int value)
		{
		}

		[Address(RVA = "0x8119D8", Offset = "0x8119D8", VA = "0x8119D8")]
		public static void SetStat(string name, float value)
		{
		}

		[Address(RVA = "0x8119DC", Offset = "0x8119DC", VA = "0x8119DC")]
		public static int UploadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x811AE4", Offset = "0x811AE4", VA = "0x811AE4")]
		public static bool GetAchievement(string pchName)
		{
			return default(bool);
		}

		[Address(RVA = "0x811AE8", Offset = "0x811AE8", VA = "0x811AE8")]
		public static int GetAchievementUnlockTime(string pchName)
		{
			return default(int);
		}

		[Address(RVA = "0x811AEC", Offset = "0x811AEC", VA = "0x811AEC")]
		public static string GetAchievementIcon(string pchName)
		{
			return null;
		}

		[Address(RVA = "0x811AF0", Offset = "0x811AF0", VA = "0x811AF0")]
		public static string GetAchievementDisplayAttribute(string pchName, AchievementDisplayAttribute attr)
		{
			return null;
		}

		[Address(RVA = "0x811AF4", Offset = "0x811AF4", VA = "0x811AF4")]
		public static string GetAchievementDisplayAttribute(string pchName, AchievementDisplayAttribute attr, Locale locale)
		{
			return null;
		}

		[Address(RVA = "0x811AF8", Offset = "0x811AF8", VA = "0x811AF8")]
		public static int SetAchievement(string pchName)
		{
			return default(int);
		}

		[Address(RVA = "0x811AFC", Offset = "0x811AFC", VA = "0x811AFC")]
		public static int ClearAchievement(string pchName)
		{
			return default(int);
		}

		[Address(RVA = "0x811B00", Offset = "0x811B00", VA = "0x811B00")]
		public static int DownloadLeaderboardScores(StatusCallback callback, string pchLeaderboardName, LeaderBoardRequestType eLeaderboardDataRequest, LeaderBoardTimeRange eLeaderboardDataTimeRange, int nRangeStart, int nRangeEnd)
		{
			return default(int);
		}

		[Address(RVA = "0x811C48", Offset = "0x811C48", VA = "0x811C48")]
		public static int UploadLeaderboardScore(StatusCallback callback, string pchLeaderboardName, int nScore)
		{
			return default(int);
		}

		[Address(RVA = "0x811D68", Offset = "0x811D68", VA = "0x811D68")]
		public static Leaderboard GetLeaderboardScore(int index)
		{
			return null;
		}

		[Address(RVA = "0x811D6C", Offset = "0x811D6C", VA = "0x811D6C")]
		public static int GetLeaderboardScoreCount()
		{
			return default(int);
		}

		[Address(RVA = "0x811D70", Offset = "0x811D70", VA = "0x811D70")]
		public static LeaderBoardSortMethod GetLeaderboardSortMethod()
		{
			return default(LeaderBoardSortMethod);
		}

		[Address(RVA = "0x811D74", Offset = "0x811D74", VA = "0x811D74")]
		public static LeaderBoardDiaplayType GetLeaderboardDisplayType()
		{
			return default(LeaderBoardDiaplayType);
		}

		[Address(RVA = "0x811D78", Offset = "0x811D78", VA = "0x811D78")]
		public UserStats()
		{
		}
	}
	public class ArcadeLeaderboard
	{
		[Address(RVA = "0x80328C", Offset = "0x80328C", VA = "0x80328C")]
		public ArcadeLeaderboard()
		{
		}
	}
	public class IAPurchase
	{
		private class IAPHandler : BaseHandler
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static IAPurchaseListener listener;

			[Address(RVA = "0x8039A8", Offset = "0x8039A8", VA = "0x8039A8")]
			public IAPHandler(IAPurchaseListener cb)
			{
			}

			[Address(RVA = "0x803A14", Offset = "0x803A14", VA = "0x803A14")]
			public IAPurchaseCallback getIsReadyHandler()
			{
				return null;
			}

			[Address(RVA = "0x805ABC", Offset = "0x805ABC", VA = "0x805ABC", Slot = "4")]
			protected override void IsReadyHandler(int code, string message)
			{
			}

			[Address(RVA = "0x803CB4", Offset = "0x803CB4", VA = "0x803CB4")]
			public IAPurchaseCallback getRequestHandler()
			{
				return null;
			}

			[Address(RVA = "0x806000", Offset = "0x806000", VA = "0x806000", Slot = "5")]
			protected override void RequestHandler(int code, string message)
			{
			}

			[Address(RVA = "0x8041D0", Offset = "0x8041D0", VA = "0x8041D0")]
			public IAPurchaseCallback getPurchaseHandler()
			{
				return null;
			}

			[Address(RVA = "0x806544", Offset = "0x806544", VA = "0x806544", Slot = "6")]
			protected override void PurchaseHandler(int code, string message)
			{
			}

			[Address(RVA = "0x804470", Offset = "0x804470", VA = "0x804470")]
			public IAPurchaseCallback getQueryHandler()
			{
				return null;
			}

			[Address(RVA = "0x806C30", Offset = "0x806C30", VA = "0x806C30", Slot = "7")]
			protected override void QueryHandler(int code, string message)
			{
			}

			[Address(RVA = "0x804700", Offset = "0x804700", VA = "0x804700")]
			public IAPurchaseCallback getQueryListHandler()
			{
				return null;
			}

			[Address(RVA = "0x807814", Offset = "0x807814", VA = "0x807814", Slot = "8")]
			protected override void QueryListHandler(int code, string message)
			{
			}

			[Address(RVA = "0x80493C", Offset = "0x80493C", VA = "0x80493C")]
			public IAPurchaseCallback getBalanceHandler()
			{
				return null;
			}

			[Address(RVA = "0x8089D0", Offset = "0x8089D0", VA = "0x8089D0", Slot = "9")]
			protected override void BalanceHandler(int code, string message)
			{
			}

			[Address(RVA = "0x804BD0", Offset = "0x804BD0", VA = "0x804BD0")]
			public IAPurchaseCallback getRequestSubscriptionHandler()
			{
				return null;
			}

			[Address(RVA = "0x8090C0", Offset = "0x8090C0", VA = "0x8090C0", Slot = "10")]
			protected override void RequestSubscriptionHandler(int code, string message)
			{
			}

			[Address(RVA = "0x80509C", Offset = "0x80509C", VA = "0x80509C")]
			public IAPurchaseCallback getRequestSubscriptionWithPlanIDHandler()
			{
				return null;
			}

			[Address(RVA = "0x8095E8", Offset = "0x8095E8", VA = "0x8095E8", Slot = "11")]
			protected override void RequestSubscriptionWithPlanIDHandler(int code, string message)
			{
			}

			[Address(RVA = "0x80533C", Offset = "0x80533C", VA = "0x80533C")]
			public IAPurchaseCallback getSubscribeHandler()
			{
				return null;
			}

			[Address(RVA = "0x809B10", Offset = "0x809B10", VA = "0x809B10", Slot = "12")]
			protected override void SubscribeHandler(int code, string message)
			{
			}

			[Address(RVA = "0x8055DC", Offset = "0x8055DC", VA = "0x8055DC")]
			public IAPurchaseCallback getQuerySubscriptionHandler()
			{
				return null;
			}

			[Address(RVA = "0x80A2C4", Offset = "0x80A2C4", VA = "0x80A2C4", Slot = "13")]
			protected override void QuerySubscriptionHandler(int code, string message)
			{
			}

			[Address(RVA = "0x80587C", Offset = "0x80587C", VA = "0x80587C")]
			public IAPurchaseCallback getCancelSubscriptionHandler()
			{
				return null;
			}

			[Address(RVA = "0x80A86C", Offset = "0x80A86C", VA = "0x80A86C", Slot = "14")]
			protected override void CancelSubscriptionHandler(int code, string message)
			{
			}
		}

		private abstract class BaseHandler
		{
			protected abstract void IsReadyHandler(int code, string message);

			protected abstract void RequestHandler(int code, string message);

			protected abstract void PurchaseHandler(int code, string message);

			protected abstract void QueryHandler(int code, string message);

			protected abstract void QueryListHandler(int code, string message);

			protected abstract void BalanceHandler(int code, string message);

			protected abstract void RequestSubscriptionHandler(int code, string message);

			protected abstract void RequestSubscriptionWithPlanIDHandler(int code, string message);

			protected abstract void SubscribeHandler(int code, string message);

			protected abstract void QuerySubscriptionHandler(int code, string message);

			protected abstract void CancelSubscriptionHandler(int code, string message);

			[Address(RVA = "0x805AA4", Offset = "0x805AA4", VA = "0x805AA4")]
			protected BaseHandler()
			{
			}
		}

		public class IAPurchaseListener
		{
			[Address(RVA = "0x80ACE4", Offset = "0x80ACE4", VA = "0x80ACE4", Slot = "4")]
			public virtual void OnSuccess(string pchCurrencyName)
			{
			}

			[Address(RVA = "0x80ACE8", Offset = "0x80ACE8", VA = "0x80ACE8", Slot = "5")]
			public virtual void OnRequestSuccess(string pchPurchaseId)
			{
			}

			[Address(RVA = "0x80ACEC", Offset = "0x80ACEC", VA = "0x80ACEC", Slot = "6")]
			public virtual void OnPurchaseSuccess(string pchPurchaseId)
			{
			}

			[Address(RVA = "0x80ACF0", Offset = "0x80ACF0", VA = "0x80ACF0", Slot = "7")]
			public virtual void OnQuerySuccess(QueryResponse response)
			{
			}

			[Address(RVA = "0x80ACF4", Offset = "0x80ACF4", VA = "0x80ACF4", Slot = "8")]
			public virtual void OnQuerySuccess(QueryListResponse response)
			{
			}

			[Address(RVA = "0x80ACF8", Offset = "0x80ACF8", VA = "0x80ACF8", Slot = "9")]
			public virtual void OnBalanceSuccess(string pchBalance)
			{
			}

			[Address(RVA = "0x80ACFC", Offset = "0x80ACFC", VA = "0x80ACFC", Slot = "10")]
			public virtual void OnFailure(int nCode, string pchMessage)
			{
			}

			[Address(RVA = "0x80AD00", Offset = "0x80AD00", VA = "0x80AD00", Slot = "11")]
			public virtual void OnRequestSubscriptionSuccess(string pchSubscriptionId)
			{
			}

			[Address(RVA = "0x80AD04", Offset = "0x80AD04", VA = "0x80AD04", Slot = "12")]
			public virtual void OnRequestSubscriptionWithPlanIDSuccess(string pchSubscriptionId)
			{
			}

			[Address(RVA = "0x80AD08", Offset = "0x80AD08", VA = "0x80AD08", Slot = "13")]
			public virtual void OnSubscribeSuccess(string pchSubscriptionId)
			{
			}

			[Address(RVA = "0x80AD0C", Offset = "0x80AD0C", VA = "0x80AD0C", Slot = "14")]
			public virtual void OnQuerySubscriptionSuccess(Subscription[] subscriptionlist)
			{
			}

			[Address(RVA = "0x80AD10", Offset = "0x80AD10", VA = "0x80AD10", Slot = "15")]
			public virtual void OnCancelSubscriptionSuccess(bool bCanceled)
			{
			}

			[Address(RVA = "0x80AD14", Offset = "0x80AD14", VA = "0x80AD14")]
			public IAPurchaseListener()
			{
			}
		}

		public class QueryResponse
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67401C", Offset = "0x67401C")]
			private string <order_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67402C", Offset = "0x67402C")]
			private string <purchase_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67403C", Offset = "0x67403C")]
			private string <status>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67404C", Offset = "0x67404C")]
			private string <price>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67405C", Offset = "0x67405C")]
			private string <currency>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67406C", Offset = "0x67406C")]
			private long <paid_timestamp>k__BackingField;

			public string order_id
			{
				[Address(RVA = "0x80AD34", Offset = "0x80AD34", VA = "0x80AD34")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686EF0", Offset = "0x686EF0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x8077EC", Offset = "0x8077EC", VA = "0x8077EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F00", Offset = "0x686F00")]
				set
				{
				}
			}

			public string purchase_id
			{
				[Address(RVA = "0x80AD3C", Offset = "0x80AD3C", VA = "0x80AD3C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F10", Offset = "0x686F10")]
				get
				{
					return null;
				}
				[Address(RVA = "0x8077E4", Offset = "0x8077E4", VA = "0x8077E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F20", Offset = "0x686F20")]
				set
				{
				}
			}

			public string status
			{
				[Address(RVA = "0x80AD44", Offset = "0x80AD44", VA = "0x80AD44")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F30", Offset = "0x686F30")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80780C", Offset = "0x80780C", VA = "0x80780C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F40", Offset = "0x686F40")]
				set
				{
				}
			}

			public string price
			{
				[Address(RVA = "0x80AD4C", Offset = "0x80AD4C", VA = "0x80AD4C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F50", Offset = "0x686F50")]
				get
				{
					return null;
				}
				[Address(RVA = "0x8077F4", Offset = "0x8077F4", VA = "0x8077F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F60", Offset = "0x686F60")]
				set
				{
				}
			}

			public string currency
			{
				[Address(RVA = "0x80AD54", Offset = "0x80AD54", VA = "0x80AD54")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F70", Offset = "0x686F70")]
				get
				{
					return null;
				}
				[Address(RVA = "0x8077FC", Offset = "0x8077FC", VA = "0x8077FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F80", Offset = "0x686F80")]
				set
				{
				}
			}

			public long paid_timestamp
			{
				[Address(RVA = "0x80AD5C", Offset = "0x80AD5C", VA = "0x80AD5C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686F90", Offset = "0x686F90")]
				get
				{
					return default(long);
				}
				[Address(RVA = "0x807804", Offset = "0x807804", VA = "0x807804")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686FA0", Offset = "0x686FA0")]
				set
				{
				}
			}

			[Address(RVA = "0x8077DC", Offset = "0x8077DC", VA = "0x8077DC")]
			public QueryResponse()
			{
			}
		}

		public class QueryResponse2
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67407C", Offset = "0x67407C")]
			private string <order_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67408C", Offset = "0x67408C")]
			private string <app_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67409C", Offset = "0x67409C")]
			private string <purchase_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6740AC", Offset = "0x6740AC")]
			private string <user_data>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6740BC", Offset = "0x6740BC")]
			private string <price>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6740CC", Offset = "0x6740CC")]
			private string <currency>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6740DC", Offset = "0x6740DC")]
			private long <paid_timestamp>k__BackingField;

			public string order_id
			{
				[Address(RVA = "0x80AD64", Offset = "0x80AD64", VA = "0x80AD64")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686FB0", Offset = "0x686FB0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x808990", Offset = "0x808990", VA = "0x808990")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686FC0", Offset = "0x686FC0")]
				set
				{
				}
			}

			public string app_id
			{
				[Address(RVA = "0x80AD6C", Offset = "0x80AD6C", VA = "0x80AD6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686FD0", Offset = "0x686FD0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x808978", Offset = "0x808978", VA = "0x808978")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686FE0", Offset = "0x686FE0")]
				set
				{
				}
			}

			public string purchase_id
			{
				[Address(RVA = "0x80AD74", Offset = "0x80AD74", VA = "0x80AD74")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x686FF0", Offset = "0x686FF0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x808988", Offset = "0x808988", VA = "0x808988")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687000", Offset = "0x687000")]
				set
				{
				}
			}

			public string user_data
			{
				[Address(RVA = "0x80AD7C", Offset = "0x80AD7C", VA = "0x80AD7C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687010", Offset = "0x687010")]
				get
				{
					return null;
				}
				[Address(RVA = "0x8089A0", Offset = "0x8089A0", VA = "0x8089A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687020", Offset = "0x687020")]
				set
				{
				}
			}

			public string price
			{
				[Address(RVA = "0x80AD84", Offset = "0x80AD84", VA = "0x80AD84")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687030", Offset = "0x687030")]
				get
				{
					return null;
				}
				[Address(RVA = "0x808998", Offset = "0x808998", VA = "0x808998")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687040", Offset = "0x687040")]
				set
				{
				}
			}

			public string currency
			{
				[Address(RVA = "0x80AD8C", Offset = "0x80AD8C", VA = "0x80AD8C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687050", Offset = "0x687050")]
				get
				{
					return null;
				}
				[Address(RVA = "0x808980", Offset = "0x808980", VA = "0x808980")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687060", Offset = "0x687060")]
				set
				{
				}
			}

			public long paid_timestamp
			{
				[Address(RVA = "0x80AD94", Offset = "0x80AD94", VA = "0x80AD94")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687070", Offset = "0x687070")]
				get
				{
					return default(long);
				}
				[Address(RVA = "0x8089A8", Offset = "0x8089A8", VA = "0x8089A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687080", Offset = "0x687080")]
				set
				{
				}
			}

			[Address(RVA = "0x808970", Offset = "0x808970", VA = "0x808970")]
			public QueryResponse2()
			{
			}
		}

		public class QueryListResponse
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6740EC", Offset = "0x6740EC")]
			private int <total>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6740FC", Offset = "0x6740FC")]
			private int <from>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67410C", Offset = "0x67410C")]
			private int <to>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<QueryResponse2> purchaseList;

			public int total
			{
				[Address(RVA = "0x80AD1C", Offset = "0x80AD1C", VA = "0x80AD1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687090", Offset = "0x687090")]
				get
				{
					return default(int);
				}
				[Address(RVA = "0x8089B8", Offset = "0x8089B8", VA = "0x8089B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6870A0", Offset = "0x6870A0")]
				set
				{
				}
			}

			public int from
			{
				[Address(RVA = "0x80AD24", Offset = "0x80AD24", VA = "0x80AD24")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6870B0", Offset = "0x6870B0")]
				get
				{
					return default(int);
				}
				[Address(RVA = "0x8089C0", Offset = "0x8089C0", VA = "0x8089C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6870C0", Offset = "0x6870C0")]
				set
				{
				}
			}

			public int to
			{
				[Address(RVA = "0x80AD2C", Offset = "0x80AD2C", VA = "0x80AD2C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6870D0", Offset = "0x6870D0")]
				get
				{
					return default(int);
				}
				[Address(RVA = "0x8089C8", Offset = "0x8089C8", VA = "0x8089C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6870E0", Offset = "0x6870E0")]
				set
				{
				}
			}

			[Address(RVA = "0x8089B0", Offset = "0x8089B0", VA = "0x8089B0")]
			public QueryListResponse()
			{
			}
		}

		public class StatusDetailTransaction
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67411C", Offset = "0x67411C")]
			private long <create_time>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67412C", Offset = "0x67412C")]
			private string <payment_method>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67413C", Offset = "0x67413C")]
			private string <status>k__BackingField;

			public long create_time
			{
				[Address(RVA = "0x80AE04", Offset = "0x80AE04", VA = "0x80AE04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6870F0", Offset = "0x6870F0")]
				get
				{
					return default(long);
				}
				[Address(RVA = "0x80AE0C", Offset = "0x80AE0C", VA = "0x80AE0C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687100", Offset = "0x687100")]
				set
				{
				}
			}

			public string payment_method
			{
				[Address(RVA = "0x80AE14", Offset = "0x80AE14", VA = "0x80AE14")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687110", Offset = "0x687110")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AE1C", Offset = "0x80AE1C", VA = "0x80AE1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687120", Offset = "0x687120")]
				set
				{
				}
			}

			public string status
			{
				[Address(RVA = "0x80AE24", Offset = "0x80AE24", VA = "0x80AE24")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687130", Offset = "0x687130")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AE2C", Offset = "0x80AE2C", VA = "0x80AE2C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687140", Offset = "0x687140")]
				set
				{
				}
			}

			[Address(RVA = "0x80AE34", Offset = "0x80AE34", VA = "0x80AE34")]
			public StatusDetailTransaction()
			{
			}
		}

		public class StatusDetail
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67414C", Offset = "0x67414C")]
			private long <date_next_charge>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67415C", Offset = "0x67415C")]
			private StatusDetailTransaction[] <transactions>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67416C", Offset = "0x67416C")]
			private string <cancel_reason>k__BackingField;

			public long date_next_charge
			{
				[Address(RVA = "0x80ADCC", Offset = "0x80ADCC", VA = "0x80ADCC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687150", Offset = "0x687150")]
				get
				{
					return default(long);
				}
				[Address(RVA = "0x80ADD4", Offset = "0x80ADD4", VA = "0x80ADD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687160", Offset = "0x687160")]
				set
				{
				}
			}

			public StatusDetailTransaction[] transactions
			{
				[Address(RVA = "0x80ADDC", Offset = "0x80ADDC", VA = "0x80ADDC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687170", Offset = "0x687170")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80ADE4", Offset = "0x80ADE4", VA = "0x80ADE4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687180", Offset = "0x687180")]
				set
				{
				}
			}

			public string cancel_reason
			{
				[Address(RVA = "0x80ADEC", Offset = "0x80ADEC", VA = "0x80ADEC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687190", Offset = "0x687190")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80ADF4", Offset = "0x80ADF4", VA = "0x80ADF4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6871A0", Offset = "0x6871A0")]
				set
				{
				}
			}

			[Address(RVA = "0x80ADFC", Offset = "0x80ADFC", VA = "0x80ADFC")]
			public StatusDetail()
			{
			}
		}

		public class TimePeriod
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67417C", Offset = "0x67417C")]
			private string <time_type>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67418C", Offset = "0x67418C")]
			private int <value>k__BackingField;

			public string time_type
			{
				[Address(RVA = "0x80AF14", Offset = "0x80AF14", VA = "0x80AF14")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6871B0", Offset = "0x6871B0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AF1C", Offset = "0x80AF1C", VA = "0x80AF1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6871C0", Offset = "0x6871C0")]
				set
				{
				}
			}

			public int value
			{
				[Address(RVA = "0x80AF24", Offset = "0x80AF24", VA = "0x80AF24")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6871D0", Offset = "0x6871D0")]
				get
				{
					return default(int);
				}
				[Address(RVA = "0x80AF2C", Offset = "0x80AF2C", VA = "0x80AF2C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6871E0", Offset = "0x6871E0")]
				set
				{
				}
			}

			[Address(RVA = "0x80AF34", Offset = "0x80AF34", VA = "0x80AF34")]
			public TimePeriod()
			{
			}
		}

		public class Subscription
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67419C", Offset = "0x67419C")]
			private string <app_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6741AC", Offset = "0x6741AC")]
			private string <order_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6741BC", Offset = "0x6741BC")]
			private string <subscription_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6741CC", Offset = "0x6741CC")]
			private string <price>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6741DC", Offset = "0x6741DC")]
			private string <currency>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6741EC", Offset = "0x6741EC")]
			private long <subscribed_timestamp>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6741FC", Offset = "0x6741FC")]
			private TimePeriod <free_trial_period>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67420C", Offset = "0x67420C")]
			private TimePeriod <charge_period>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67421C", Offset = "0x67421C")]
			private int <number_of_charge_period>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67422C", Offset = "0x67422C")]
			private string <plan_id>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67423C", Offset = "0x67423C")]
			private string <plan_name>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67424C", Offset = "0x67424C")]
			private string <status>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67425C", Offset = "0x67425C")]
			private StatusDetail <status_detail>k__BackingField;

			public string app_id
			{
				[Address(RVA = "0x80AE3C", Offset = "0x80AE3C", VA = "0x80AE3C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6871F0", Offset = "0x6871F0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AE44", Offset = "0x80AE44", VA = "0x80AE44")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687200", Offset = "0x687200")]
				set
				{
				}
			}

			public string order_id
			{
				[Address(RVA = "0x80AE4C", Offset = "0x80AE4C", VA = "0x80AE4C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687210", Offset = "0x687210")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AE54", Offset = "0x80AE54", VA = "0x80AE54")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687220", Offset = "0x687220")]
				set
				{
				}
			}

			public string subscription_id
			{
				[Address(RVA = "0x80AE5C", Offset = "0x80AE5C", VA = "0x80AE5C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687230", Offset = "0x687230")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AE64", Offset = "0x80AE64", VA = "0x80AE64")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687240", Offset = "0x687240")]
				set
				{
				}
			}

			public string price
			{
				[Address(RVA = "0x80AE6C", Offset = "0x80AE6C", VA = "0x80AE6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687250", Offset = "0x687250")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AE74", Offset = "0x80AE74", VA = "0x80AE74")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687260", Offset = "0x687260")]
				set
				{
				}
			}

			public string currency
			{
				[Address(RVA = "0x80AE7C", Offset = "0x80AE7C", VA = "0x80AE7C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687270", Offset = "0x687270")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AE84", Offset = "0x80AE84", VA = "0x80AE84")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687280", Offset = "0x687280")]
				set
				{
				}
			}

			public long subscribed_timestamp
			{
				[Address(RVA = "0x80AE8C", Offset = "0x80AE8C", VA = "0x80AE8C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687290", Offset = "0x687290")]
				get
				{
					return default(long);
				}
				[Address(RVA = "0x80AE94", Offset = "0x80AE94", VA = "0x80AE94")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6872A0", Offset = "0x6872A0")]
				set
				{
				}
			}

			public TimePeriod free_trial_period
			{
				[Address(RVA = "0x80AE9C", Offset = "0x80AE9C", VA = "0x80AE9C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6872B0", Offset = "0x6872B0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AEA4", Offset = "0x80AEA4", VA = "0x80AEA4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6872C0", Offset = "0x6872C0")]
				set
				{
				}
			}

			public TimePeriod charge_period
			{
				[Address(RVA = "0x80AEAC", Offset = "0x80AEAC", VA = "0x80AEAC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6872D0", Offset = "0x6872D0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AEB4", Offset = "0x80AEB4", VA = "0x80AEB4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6872E0", Offset = "0x6872E0")]
				set
				{
				}
			}

			public int number_of_charge_period
			{
				[Address(RVA = "0x80AEBC", Offset = "0x80AEBC", VA = "0x80AEBC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6872F0", Offset = "0x6872F0")]
				get
				{
					return default(int);
				}
				[Address(RVA = "0x80AEC4", Offset = "0x80AEC4", VA = "0x80AEC4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687300", Offset = "0x687300")]
				set
				{
				}
			}

			public string plan_id
			{
				[Address(RVA = "0x80AECC", Offset = "0x80AECC", VA = "0x80AECC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687310", Offset = "0x687310")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AED4", Offset = "0x80AED4", VA = "0x80AED4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687320", Offset = "0x687320")]
				set
				{
				}
			}

			public string plan_name
			{
				[Address(RVA = "0x80AEDC", Offset = "0x80AEDC", VA = "0x80AEDC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687330", Offset = "0x687330")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AEE4", Offset = "0x80AEE4", VA = "0x80AEE4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687340", Offset = "0x687340")]
				set
				{
				}
			}

			public string status
			{
				[Address(RVA = "0x80AEEC", Offset = "0x80AEEC", VA = "0x80AEEC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687350", Offset = "0x687350")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AEF4", Offset = "0x80AEF4", VA = "0x80AEF4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687360", Offset = "0x687360")]
				set
				{
				}
			}

			public StatusDetail status_detail
			{
				[Address(RVA = "0x80AEFC", Offset = "0x80AEFC", VA = "0x80AEFC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687370", Offset = "0x687370")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80AF04", Offset = "0x80AF04", VA = "0x80AF04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687380", Offset = "0x687380")]
				set
				{
				}
			}

			[Address(RVA = "0x80AF0C", Offset = "0x80AF0C", VA = "0x80AF0C")]
			public Subscription()
			{
			}
		}

		public class QuerySubscritionResponse
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67426C", Offset = "0x67426C")]
			private int <statusCode>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67427C", Offset = "0x67427C")]
			private string <message>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67428C", Offset = "0x67428C")]
			private List<Subscription> <subscriptions>k__BackingField;

			public int statusCode
			{
				[Address(RVA = "0x80AD9C", Offset = "0x80AD9C", VA = "0x80AD9C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687390", Offset = "0x687390")]
				get
				{
					return default(int);
				}
				[Address(RVA = "0x80ADA4", Offset = "0x80ADA4", VA = "0x80ADA4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6873A0", Offset = "0x6873A0")]
				set
				{
				}
			}

			public string message
			{
				[Address(RVA = "0x80ADAC", Offset = "0x80ADAC", VA = "0x80ADAC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6873B0", Offset = "0x6873B0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80ADB4", Offset = "0x80ADB4", VA = "0x80ADB4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6873C0", Offset = "0x6873C0")]
				set
				{
				}
			}

			public List<Subscription> subscriptions
			{
				[Address(RVA = "0x80A864", Offset = "0x80A864", VA = "0x80A864")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6873D0", Offset = "0x6873D0")]
				get
				{
					return null;
				}
				[Address(RVA = "0x80ADBC", Offset = "0x80ADBC", VA = "0x80ADBC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6873E0", Offset = "0x6873E0")]
				set
				{
				}
			}

			[Address(RVA = "0x80ADC4", Offset = "0x80ADC4", VA = "0x80ADC4")]
			public QuerySubscritionResponse()
			{
			}
		}

		[Address(RVA = "0x803928", Offset = "0x803928", VA = "0x803928")]
		public static void IsReady(IAPurchaseListener listener, string pchAppKey)
		{
		}

		[Address(RVA = "0x803C34", Offset = "0x803C34", VA = "0x803C34")]
		public static void Request(IAPurchaseListener listener, string pchPrice)
		{
		}

		[Address(RVA = "0x803ED4", Offset = "0x803ED4", VA = "0x803ED4")]
		public static void Request(IAPurchaseListener listener, string pchPrice, string pchUserData)
		{
		}

		[Address(RVA = "0x804150", Offset = "0x804150", VA = "0x804150")]
		public static void Purchase(IAPurchaseListener listener, string pchPurchaseId)
		{
		}

		[Address(RVA = "0x8043F0", Offset = "0x8043F0", VA = "0x8043F0")]
		public static void Query(IAPurchaseListener listener, string pchPurchaseId)
		{
		}

		[Address(RVA = "0x804690", Offset = "0x804690", VA = "0x804690")]
		public static void Query(IAPurchaseListener listener)
		{
		}

		[Address(RVA = "0x8048CC", Offset = "0x8048CC", VA = "0x8048CC")]
		public static void GetBalance(IAPurchaseListener listener)
		{
		}

		[Address(RVA = "0x804B08", Offset = "0x804B08", VA = "0x804B08")]
		public static void RequestSubscription(IAPurchaseListener listener, string pchPrice, string pchFreeTrialType, int nFreeTrialValue, string pchChargePeriodType, int nChargePeriodValue, int nNumberOfChargePeriod, string pchPlanId)
		{
		}

		[Address(RVA = "0x80501C", Offset = "0x80501C", VA = "0x80501C")]
		public static void RequestSubscriptionWithPlanID(IAPurchaseListener listener, string pchPlanId)
		{
		}

		[Address(RVA = "0x8052BC", Offset = "0x8052BC", VA = "0x8052BC")]
		public static void Subscribe(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x80555C", Offset = "0x80555C", VA = "0x80555C")]
		public static void QuerySubscription(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x8057FC", Offset = "0x8057FC", VA = "0x8057FC")]
		public static void CancelSubscription(IAPurchaseListener listener, string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x805A9C", Offset = "0x805A9C", VA = "0x805A9C")]
		public IAPurchase()
		{
		}
	}
	public class DLC
	{
		[Address(RVA = "0x803920", Offset = "0x803920", VA = "0x803920")]
		public DLC()
		{
		}
	}
	internal class Token
	{
		[Address(RVA = "0x811710", Offset = "0x811710", VA = "0x811710")]
		public Token()
		{
		}
	}
}
namespace Viveport.Internal
{
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x655D34", Offset = "0x655D34")]
	internal delegate void GetLicenseCallback(string message, string signature);
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x655D48", Offset = "0x655D48")]
	internal delegate void StatusCallback(int nResult);
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x655D5C", Offset = "0x655D5C")]
	internal delegate void StatusCallback2(int nResult, string message);
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x655D70", Offset = "0x655D70")]
	internal delegate void QueryRuntimeModeCallback(int nResult, int nMode);
	internal enum ELeaderboardDataRequest
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataRequestGlobal,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataRequestLocal,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataRequestLocaleAroundUser
	}
	internal enum ELeaderboardDataTimeRange
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataScropeAllTime,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataScropeDaily,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataScropeWeekly,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDataScropeMonthly
	}
	internal enum ELeaderboardSortMethod
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardSortMethodNone,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardSortMethodAscending,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardSortMethodDescending
	}
	internal enum ELeaderboardDisplayType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDisplayTypeNone,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDisplayTypeNumeric,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	internal enum ELeaderboardUploadScoreMethod
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardUploadScoreMethodNone,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	internal enum ELocale
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleUS,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleDE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleJP,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleKR,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleRU,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleCN,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleTW,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_ELocaleFR
	}
	internal enum EAchievementDisplayAttribute
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EAchievementDisplayAttributeName,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EAchievementDisplayAttributeDesc,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EAchievementDisplayAttributeHidden
	}
	internal struct LeaderboardEntry_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int m_nGlobalRank;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal int m_nScore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string m_pUserName;
	}
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x655D84", Offset = "0x655D84")]
	internal delegate void IAPurchaseCallback(int code, string message);
	internal struct IAPCurrency_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal string m_pName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string m_pSymbol;
	}
	internal class Api
	{
		internal class AndroidLicenseChecker : AndroidJavaProxy
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Viveport.Api.LicenseChecker checker;

			[Address(RVA = "0x80BEF4", Offset = "0x80BEF4", VA = "0x80BEF4")]
			internal AndroidLicenseChecker(Viveport.Api.LicenseChecker checker)
			{
			}

			[Address(RVA = "0x80BF84", Offset = "0x80BF84", VA = "0x80BF84")]
			internal void onSuccess(long issueTime, long expirationTime, int latestVersion, bool updateRequired)
			{
			}

			[Address(RVA = "0x80D1D0", Offset = "0x80D1D0", VA = "0x80D1D0")]
			internal void onFailure(int errorCode, string errorMessage)
			{
			}
		}

		[Address(RVA = "0x802C2C", Offset = "0x802C2C", VA = "0x802C2C")]
		internal static int Init(StatusCallback callback, string pchAppKey)
		{
			return default(int);
		}

		[Address(RVA = "0x802EE4", Offset = "0x802EE4", VA = "0x802EE4")]
		internal static int Shutdown(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x803088", Offset = "0x803088", VA = "0x803088")]
		internal static string Version()
		{
			return null;
		}

		[Address(RVA = "0x802900", Offset = "0x802900", VA = "0x802900")]
		internal static void GetLicense(Viveport.Api.LicenseChecker checker, string appId, string appKey)
		{
		}

		[Address(RVA = "0x80BF7C", Offset = "0x80BF7C", VA = "0x80BF7C")]
		public Api()
		{
		}
	}
	internal class User
	{
		[Address(RVA = "0x80E91C", Offset = "0x80E91C", VA = "0x80E91C")]
		internal static string GetUserId()
		{
			return null;
		}

		[Address(RVA = "0x80EA10", Offset = "0x80EA10", VA = "0x80EA10")]
		internal static string GetUserName()
		{
			return null;
		}

		[Address(RVA = "0x80EB04", Offset = "0x80EB04", VA = "0x80EB04")]
		internal static string GetUserAvatarUrl()
		{
			return null;
		}

		[Address(RVA = "0x80EBF8", Offset = "0x80EBF8", VA = "0x80EBF8")]
		public User()
		{
		}
	}
	internal class UserStats
	{
		[Address(RVA = "0x80EC00", Offset = "0x80EC00", VA = "0x80EC00")]
		internal static int IsReady(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x80ED5C", Offset = "0x80ED5C", VA = "0x80ED5C")]
		internal static int DownloadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x80EEB8", Offset = "0x80EEB8", VA = "0x80EEB8")]
		internal static int UploadStats(StatusCallback callback)
		{
			return default(int);
		}

		[Address(RVA = "0x80F014", Offset = "0x80F014", VA = "0x80F014")]
		internal static int SetStat(string pchName, int nData)
		{
			return default(int);
		}

		[Address(RVA = "0x80F174", Offset = "0x80F174", VA = "0x80F174")]
		internal static int SetStat(string pchName, float fData)
		{
			return default(int);
		}

		[Address(RVA = "0x80F2DC", Offset = "0x80F2DC", VA = "0x80F2DC")]
		internal static int GetStat(string pchName, int nData)
		{
			return default(int);
		}

		[Address(RVA = "0x80F43C", Offset = "0x80F43C", VA = "0x80F43C")]
		internal static float GetStat(string pchName, float fData)
		{
			return default(float);
		}

		[Address(RVA = "0x80F5A4", Offset = "0x80F5A4", VA = "0x80F5A4")]
		internal static bool GetAchievement(string pchName)
		{
			return default(bool);
		}

		[Address(RVA = "0x80F690", Offset = "0x80F690", VA = "0x80F690")]
		internal static int GetAchievementUnlockTime(string pchName)
		{
			return default(int);
		}

		[Address(RVA = "0x80F77C", Offset = "0x80F77C", VA = "0x80F77C")]
		internal static int SetAchievement(string pchName)
		{
			return default(int);
		}

		[Address(RVA = "0x80F868", Offset = "0x80F868", VA = "0x80F868")]
		internal static int ClearAchievement(string pchName)
		{
			return default(int);
		}

		[Address(RVA = "0x80F954", Offset = "0x80F954", VA = "0x80F954")]
		internal static string GetAchievementDisplayAttribute(string pchName, EAchievementDisplayAttribute attr)
		{
			return null;
		}

		[Address(RVA = "0x80FAB4", Offset = "0x80FAB4", VA = "0x80FAB4")]
		internal static string GetAchievementDisplayAttribute(string pchName, EAchievementDisplayAttribute attr, ELocale locale)
		{
			return null;
		}

		[Address(RVA = "0x80FC74", Offset = "0x80FC74", VA = "0x80FC74")]
		internal static string GetAchievementIcon(string pchName)
		{
			return null;
		}

		[Address(RVA = "0x80FD60", Offset = "0x80FD60", VA = "0x80FD60")]
		internal static int DownloadLeaderboardScores(StatusCallback callback, string pchLeaderboardName, ELeaderboardDataRequest nDataRequest, ELeaderboardDataTimeRange nTimeRange, int nRangeStart, int nRangeEnd)
		{
			return default(int);
		}

		[Address(RVA = "0x8100B4", Offset = "0x8100B4", VA = "0x8100B4")]
		internal static int UploadLeaderboardScore(StatusCallback callback, string pchLeaderboardName, int nScores)
		{
			return default(int);
		}

		[Address(RVA = "0x8102D8", Offset = "0x8102D8", VA = "0x8102D8")]
		internal static Leaderboard GetLeaderboardScore(int nIndex)
		{
			return null;
		}

		[Address(RVA = "0x8105C4", Offset = "0x8105C4", VA = "0x8105C4")]
		internal static int GetLeaderboardScoreCount()
		{
			return default(int);
		}

		[Address(RVA = "0x81064C", Offset = "0x81064C", VA = "0x81064C")]
		internal static ELeaderboardSortMethod GetLeaderboardSortMethod()
		{
			return default(ELeaderboardSortMethod);
		}

		[Address(RVA = "0x8106D4", Offset = "0x8106D4", VA = "0x8106D4")]
		internal static ELeaderboardDisplayType GetLeaderboardDisplayType()
		{
			return default(ELeaderboardDisplayType);
		}

		[Address(RVA = "0x81075C", Offset = "0x81075C", VA = "0x81075C")]
		public UserStats()
		{
		}
	}
	internal class IAPurchase
	{
		[Address(RVA = "0x803A8C", Offset = "0x803A8C", VA = "0x803A8C")]
		internal static void IsReady(IAPurchaseCallback callback, string pchAppKey)
		{
		}

		[Address(RVA = "0x803D2C", Offset = "0x803D2C", VA = "0x803D2C")]
		internal static void Request(IAPurchaseCallback callback, string pchPrice)
		{
		}

		[Address(RVA = "0x803F5C", Offset = "0x803F5C", VA = "0x803F5C")]
		internal static void Request(IAPurchaseCallback callback, string pchPrice, string pchUserData)
		{
		}

		[Address(RVA = "0x804248", Offset = "0x804248", VA = "0x804248")]
		internal static void Purchase(IAPurchaseCallback callback, string pchPurchaseId)
		{
		}

		[Address(RVA = "0x8044E8", Offset = "0x8044E8", VA = "0x8044E8")]
		internal static void Query(IAPurchaseCallback callback, string pchPurchaseId)
		{
		}

		[Address(RVA = "0x804778", Offset = "0x804778", VA = "0x804778")]
		internal static void Query(IAPurchaseCallback callback)
		{
		}

		[Address(RVA = "0x8049B4", Offset = "0x8049B4", VA = "0x8049B4")]
		internal static void GetBalance(IAPurchaseCallback callback)
		{
		}

		[Address(RVA = "0x804C48", Offset = "0x804C48", VA = "0x804C48")]
		internal static void RequestSubscription(IAPurchaseCallback callback, string pchPrice, string pchFreeTrialType, int nFreeTrialValue, string pchChargePeriodType, int nChargePeriodValue, int nNumberOfChargePeriod, string pchPlanId)
		{
		}

		[Address(RVA = "0x805114", Offset = "0x805114", VA = "0x805114")]
		internal static void RequestSubscriptionWithPlanID(IAPurchaseCallback callback, string pchPlanId)
		{
		}

		[Address(RVA = "0x8053B4", Offset = "0x8053B4", VA = "0x8053B4")]
		internal static void Subscribe(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x805654", Offset = "0x805654", VA = "0x805654")]
		internal static void QuerySubscription(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x8058F4", Offset = "0x8058F4", VA = "0x8058F4")]
		internal static void CancelSubscription(IAPurchaseCallback callback, string pchSubscriptionId)
		{
		}

		[Address(RVA = "0x80DC88", Offset = "0x80DC88", VA = "0x80DC88")]
		public IAPurchase()
		{
		}
	}
	internal class Android
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaObject _api;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaObject _iAPurchase;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidJavaClass _unityPlayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AndroidJavaObject _user;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static AndroidJavaObject _userStats;

		internal static AndroidJavaClass UnityPlayer
		{
			[Address(RVA = "0x80B210", Offset = "0x80B210", VA = "0x80B210")]
			get
			{
				return null;
			}
		}

		internal static AndroidJavaObject CurrentActivity
		{
			[Address(RVA = "0x80B2A0", Offset = "0x80B2A0", VA = "0x80B2A0")]
			get
			{
				return null;
			}
		}

		internal static AndroidJavaObject CurrentContext
		{
			[Address(RVA = "0x80B308", Offset = "0x80B308", VA = "0x80B308")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x80AF3C", Offset = "0x80AF3C", VA = "0x80AF3C")]
		internal static AndroidJavaObject GetJavaAPI()
		{
			return null;
		}

		[Address(RVA = "0x80AFF4", Offset = "0x80AFF4", VA = "0x80AFF4")]
		internal static AndroidJavaObject GetJavaUser()
		{
			return null;
		}

		[Address(RVA = "0x80B0A8", Offset = "0x80B0A8", VA = "0x80B0A8")]
		internal static AndroidJavaObject GetJavaUserStats()
		{
			return null;
		}

		[Address(RVA = "0x80B15C", Offset = "0x80B15C", VA = "0x80B15C")]
		internal static AndroidJavaObject GetJavaIAPurchase()
		{
			return null;
		}

		[Address(RVA = "0x80B30C", Offset = "0x80B30C", VA = "0x80B30C")]
		public Android()
		{
		}
	}
	internal class AndroidPluginCallback : AndroidJavaProxy
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IAPurchaseCallback callback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StatusCallback statusCallback;

		[Address(RVA = "0x80B314", Offset = "0x80B314", VA = "0x80B314")]
		internal AndroidPluginCallback(IAPurchaseCallback callback)
		{
		}

		[Address(RVA = "0x80B39C", Offset = "0x80B39C", VA = "0x80B39C")]
		internal AndroidPluginCallback(StatusCallback callback)
		{
		}

		[Address(RVA = "0x80B424", Offset = "0x80B424", VA = "0x80B424")]
		internal void onResult(int statusCode, string result)
		{
		}
	}
}
namespace Viveport.Arcade
{
	internal class Session
	{
		[Address(RVA = "0x803284", Offset = "0x803284", VA = "0x803284")]
		public Session()
		{
		}
	}
}
namespace Viveport.Core
{
	public class Logger
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string LoggerTypeNameUnity = "UnityEngine.Debug";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _hasDetected;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool _usingUnityLog;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Type _unityLogType;

		[Address(RVA = "0x803294", Offset = "0x803294", VA = "0x803294")]
		public static void Log(string message)
		{
		}

		[Address(RVA = "0x8036A8", Offset = "0x8036A8", VA = "0x8036A8")]
		private static void ConsoleLog(string message)
		{
		}

		[Address(RVA = "0x803364", Offset = "0x803364", VA = "0x803364")]
		private static void UnityLog(string message)
		{
		}

		[Address(RVA = "0x803744", Offset = "0x803744", VA = "0x803744")]
		private static Type GetType(string typeName)
		{
			return null;
		}

		[Address(RVA = "0x8038C4", Offset = "0x8038C4", VA = "0x8038C4")]
		public Logger()
		{
		}
	}
}
namespace PublicKeyConvert
{
	public class PEMKeyLoader
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] SeqOID;

		[Address(RVA = "0x155B194", Offset = "0x155B194", VA = "0x155B194")]
		private static bool CompareBytearrays(byte[] a, byte[] b)
		{
			return default(bool);
		}

		[Address(RVA = "0x155B260", Offset = "0x155B260", VA = "0x155B260")]
		public static RSACryptoServiceProvider CryptoServiceProviderFromPublicKeyInfo(byte[] x509key)
		{
			return null;
		}

		[Address(RVA = "0x155B778", Offset = "0x155B778", VA = "0x155B778")]
		public static RSACryptoServiceProvider CryptoServiceProviderFromPublicKeyInfo(string base64EncodedKey)
		{
			return null;
		}

		[Address(RVA = "0x155B888", Offset = "0x155B888", VA = "0x155B888")]
		public PEMKeyLoader()
		{
		}
	}
}
namespace LitJson
{
	public enum JsonType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Object,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Array,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		String,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Int,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Long,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Double,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Boolean
	}
	public interface IJsonWrapper : IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary
	{
		bool IsArray { get; }

		bool IsBoolean { get; }

		bool IsDouble { get; }

		bool IsInt { get; }

		bool IsLong { get; }

		bool IsObject { get; }

		bool IsString { get; }

		bool GetBoolean();

		double GetDouble();

		int GetInt();

		JsonType GetJsonType();

		long GetLong();

		string GetString();

		void SetBoolean(bool val);

		void SetDouble(double val);

		void SetInt(int val);

		void SetJsonType(JsonType type);

		void SetLong(long val);

		void SetString(string val);

		string ToJson();

		void ToJson(JsonWriter writer);
	}
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x655D98", Offset = "0x655D98")]
	public class JsonData : IJsonWrapper, IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary, IEquatable<JsonData>
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IList<JsonData> inst_array;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inst_boolean;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double inst_double;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int inst_int;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long inst_long;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IDictionary<string, JsonData> inst_object;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string inst_string;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string json;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JsonType type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IList<KeyValuePair<string, JsonData>> object_list;

		public int Count
		{
			[Address(RVA = "0x8203F8", Offset = "0x8203F8", VA = "0x8203F8")]
			get
			{
				return default(int);
			}
		}

		public bool IsArray
		{
			[Address(RVA = "0x8205D4", Offset = "0x8205D4", VA = "0x8205D4")]
			get
			{
				return default(bool);
			}
		}

		public bool IsBoolean
		{
			[Address(RVA = "0x8205E4", Offset = "0x8205E4", VA = "0x8205E4")]
			get
			{
				return default(bool);
			}
		}

		public bool IsDouble
		{
			[Address(RVA = "0x8205F4", Offset = "0x8205F4", VA = "0x8205F4")]
			get
			{
				return default(bool);
			}
		}

		public bool IsInt
		{
			[Address(RVA = "0x820604", Offset = "0x820604", VA = "0x820604")]
			get
			{
				return default(bool);
			}
		}

		public bool IsLong
		{
			[Address(RVA = "0x820614", Offset = "0x820614", VA = "0x820614")]
			get
			{
				return default(bool);
			}
		}

		public bool IsObject
		{
			[Address(RVA = "0x820624", Offset = "0x820624", VA = "0x820624")]
			get
			{
				return default(bool);
			}
		}

		public bool IsString
		{
			[Address(RVA = "0x820634", Offset = "0x820634", VA = "0x820634")]
			get
			{
				return default(bool);
			}
		}

		private int System.Collections.ICollection.Count
		{
			[Address(RVA = "0x820644", Offset = "0x820644", VA = "0x820644", Slot = "37")]
			get
			{
				return default(int);
			}
		}

		private bool System.Collections.ICollection.IsSynchronized
		{
			[Address(RVA = "0x820648", Offset = "0x820648", VA = "0x820648", Slot = "39")]
			get
			{
				return default(bool);
			}
		}

		private object System.Collections.ICollection.SyncRoot
		{
			[Address(RVA = "0x820704", Offset = "0x820704", VA = "0x820704", Slot = "38")]
			get
			{
				return null;
			}
		}

		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Address(RVA = "0x8207C0", Offset = "0x8207C0", VA = "0x8207C0", Slot = "54")]
			get
			{
				return default(bool);
			}
		}

		private bool System.Collections.IDictionary.IsReadOnly
		{
			[Address(RVA = "0x8209F0", Offset = "0x8209F0", VA = "0x8209F0", Slot = "53")]
			get
			{
				return default(bool);
			}
		}

		private ICollection System.Collections.IDictionary.Keys
		{
			[Address(RVA = "0x820AAC", Offset = "0x820AAC", VA = "0x820AAC", Slot = "48")]
			get
			{
				return null;
			}
		}

		private ICollection System.Collections.IDictionary.Values
		{
			[Address(RVA = "0x820E78", Offset = "0x820E78", VA = "0x820E78", Slot = "49")]
			get
			{
				return null;
			}
		}

		private bool LitJson.IJsonWrapper.IsArray
		{
			[Address(RVA = "0x821244", Offset = "0x821244", VA = "0x821244", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		private bool LitJson.IJsonWrapper.IsBoolean
		{
			[Address(RVA = "0x821254", Offset = "0x821254", VA = "0x821254", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		private bool LitJson.IJsonWrapper.IsDouble
		{
			[Address(RVA = "0x821264", Offset = "0x821264", VA = "0x821264", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		private bool LitJson.IJsonWrapper.IsInt
		{
			[Address(RVA = "0x821274", Offset = "0x821274", VA = "0x821274", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		private bool LitJson.IJsonWrapper.IsLong
		{
			[Address(RVA = "0x821284", Offset = "0x821284", VA = "0x821284", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		private bool LitJson.IJsonWrapper.IsObject
		{
			[Address(RVA = "0x821294", Offset = "0x821294", VA = "0x821294", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		private bool LitJson.IJsonWrapper.IsString
		{
			[Address(RVA = "0x8212A4", Offset = "0x8212A4", VA = "0x8212A4", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		private bool System.Collections.IList.IsFixedSize
		{
			[Address(RVA = "0x8212B4", Offset = "0x8212B4", VA = "0x8212B4", Slot = "31")]
			get
			{
				return default(bool);
			}
		}

		private bool System.Collections.IList.IsReadOnly
		{
			[Address(RVA = "0x8214B8", Offset = "0x8214B8", VA = "0x8214B8", Slot = "30")]
			get
			{
				return default(bool);
			}
		}

		private object System.Collections.IDictionary.Item
		{
			[Address(RVA = "0x821574", Offset = "0x821574", VA = "0x821574", Slot = "46")]
			get
			{
				return null;
			}
			[Address(RVA = "0x82163C", Offset = "0x82163C", VA = "0x82163C", Slot = "47")]
			set
			{
			}
		}

		private object System.Collections.Specialized.IOrderedDictionary.Item
		{
			[Address(RVA = "0x821BEC", Offset = "0x821BEC", VA = "0x821BEC", Slot = "41")]
			get
			{
				return null;
			}
			[Address(RVA = "0x821CE4", Offset = "0x821CE4", VA = "0x821CE4", Slot = "42")]
			set
			{
			}
		}

		private object System.Collections.IList.Item
		{
			[Address(RVA = "0x821F30", Offset = "0x821F30", VA = "0x821F30", Slot = "25")]
			get
			{
				return null;
			}
			[Address(RVA = "0x821FF8", Offset = "0x821FF8", VA = "0x821FF8", Slot = "26")]
			set
			{
			}
		}

		public JsonData Item
		{
			[Address(RVA = "0x822318", Offset = "0x822318", VA = "0x822318")]
			get
			{
				return null;
			}
			[Address(RVA = "0x821804", Offset = "0x821804", VA = "0x821804")]
			set
			{
			}
		}

		public JsonData Item
		{
			[Address(RVA = "0x8223E4", Offset = "0x8223E4", VA = "0x8223E4")]
			get
			{
				return null;
			}
			[Address(RVA = "0x82203C", Offset = "0x82203C", VA = "0x82203C")]
			set
			{
			}
		}

		[Address(RVA = "0x822568", Offset = "0x822568", VA = "0x822568")]
		public JsonData()
		{
		}

		[Address(RVA = "0x822570", Offset = "0x822570", VA = "0x822570")]
		public JsonData(bool boolean)
		{
		}

		[Address(RVA = "0x8225A8", Offset = "0x8225A8", VA = "0x8225A8")]
		public JsonData(double number)
		{
		}

		[Address(RVA = "0x8225E4", Offset = "0x8225E4", VA = "0x8225E4")]
		public JsonData(int number)
		{
		}

		[Address(RVA = "0x822618", Offset = "0x822618", VA = "0x822618")]
		public JsonData(long number)
		{
		}

		[Address(RVA = "0x82264C", Offset = "0x82264C", VA = "0x82264C")]
		public JsonData(object obj)
		{
		}

		[Address(RVA = "0x822828", Offset = "0x822828", VA = "0x822828")]
		public JsonData(string str)
		{
		}

		[Address(RVA = "0x82285C", Offset = "0x82285C", VA = "0x82285C")]
		public static implicit operator JsonData(bool data)
		{
			return null;
		}

		[Address(RVA = "0x8228CC", Offset = "0x8228CC", VA = "0x8228CC")]
		public static implicit operator JsonData(double data)
		{
			return null;
		}

		[Address(RVA = "0x822940", Offset = "0x822940", VA = "0x822940")]
		public static implicit operator JsonData(int data)
		{
			return null;
		}

		[Address(RVA = "0x8229AC", Offset = "0x8229AC", VA = "0x8229AC")]
		public static implicit operator JsonData(long data)
		{
			return null;
		}

		[Address(RVA = "0x822A18", Offset = "0x822A18", VA = "0x822A18")]
		public static implicit operator JsonData(string data)
		{
			return null;
		}

		[Address(RVA = "0x822A84", Offset = "0x822A84", VA = "0x822A84")]
		public static explicit operator bool(JsonData data)
		{
			return default(bool);
		}

		[Address(RVA = "0x822B24", Offset = "0x822B24", VA = "0x822B24")]
		public static explicit operator double(JsonData data)
		{
			return default(double);
		}

		[Address(RVA = "0x822BC4", Offset = "0x822BC4", VA = "0x822BC4")]
		public static explicit operator int(JsonData data)
		{
			return default(int);
		}

		[Address(RVA = "0x822C64", Offset = "0x822C64", VA = "0x822C64")]
		public static explicit operator long(JsonData data)
		{
			return default(long);
		}

		[Address(RVA = "0x822D04", Offset = "0x822D04", VA = "0x822D04")]
		public static explicit operator string(JsonData data)
		{
			return null;
		}

		[Address(RVA = "0x822DA4", Offset = "0x822DA4", VA = "0x822DA4", Slot = "36")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}

		[Address(RVA = "0x822E74", Offset = "0x822E74", VA = "0x822E74", Slot = "51")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Address(RVA = "0x823070", Offset = "0x823070", VA = "0x823070", Slot = "52")]
		private void System.Collections.IDictionary.Clear()
		{
		}

		[Address(RVA = "0x8231B0", Offset = "0x8231B0", VA = "0x8231B0", Slot = "50")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Address(RVA = "0x82327C", Offset = "0x82327C", VA = "0x82327C", Slot = "55")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Address(RVA = "0x823324", Offset = "0x823324", VA = "0x823324", Slot = "56")]
		private void System.Collections.IDictionary.Remove(object key)
		{
		}

		[Address(RVA = "0x823634", Offset = "0x823634", VA = "0x823634", Slot = "40")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Address(RVA = "0x8236EC", Offset = "0x8236EC", VA = "0x8236EC", Slot = "11")]
		private bool LitJson.IJsonWrapper.GetBoolean()
		{
			return default(bool);
		}

		[Address(RVA = "0x823780", Offset = "0x823780", VA = "0x823780", Slot = "12")]
		private double LitJson.IJsonWrapper.GetDouble()
		{
			return default(double);
		}

		[Address(RVA = "0x823814", Offset = "0x823814", VA = "0x823814", Slot = "13")]
		private int LitJson.IJsonWrapper.GetInt()
		{
			return default(int);
		}

		[Address(RVA = "0x8238A8", Offset = "0x8238A8", VA = "0x8238A8", Slot = "15")]
		private long LitJson.IJsonWrapper.GetLong()
		{
			return default(long);
		}

		[Address(RVA = "0x82393C", Offset = "0x82393C", VA = "0x82393C", Slot = "16")]
		private string LitJson.IJsonWrapper.GetString()
		{
			return null;
		}

		[Address(RVA = "0x8239D0", Offset = "0x8239D0", VA = "0x8239D0", Slot = "17")]
		private void LitJson.IJsonWrapper.SetBoolean(bool val)
		{
		}

		[Address(RVA = "0x8239E8", Offset = "0x8239E8", VA = "0x8239E8", Slot = "18")]
		private void LitJson.IJsonWrapper.SetDouble(double val)
		{
		}

		[Address(RVA = "0x8239FC", Offset = "0x8239FC", VA = "0x8239FC", Slot = "19")]
		private void LitJson.IJsonWrapper.SetInt(int val)
		{
		}

		[Address(RVA = "0x823A10", Offset = "0x823A10", VA = "0x823A10", Slot = "21")]
		private void LitJson.IJsonWrapper.SetLong(long val)
		{
		}

		[Address(RVA = "0x823A24", Offset = "0x823A24", VA = "0x823A24", Slot = "22")]
		private void LitJson.IJsonWrapper.SetString(string val)
		{
		}

		[Address(RVA = "0x823A34", Offset = "0x823A34", VA = "0x823A34", Slot = "23")]
		private string LitJson.IJsonWrapper.ToJson()
		{
			return null;
		}

		[Address(RVA = "0x823AFC", Offset = "0x823AFC", VA = "0x823AFC", Slot = "24")]
		private void LitJson.IJsonWrapper.ToJson(JsonWriter writer)
		{
		}

		[Address(RVA = "0x823B74", Offset = "0x823B74", VA = "0x823B74", Slot = "27")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Address(RVA = "0x823C54", Offset = "0x823C54", VA = "0x823C54", Slot = "29")]
		private void System.Collections.IList.Clear()
		{
		}

		[Address(RVA = "0x823D18", Offset = "0x823D18", VA = "0x823D18", Slot = "28")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Address(RVA = "0x823DE4", Offset = "0x823DE4", VA = "0x823DE4", Slot = "32")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Address(RVA = "0x823EB0", Offset = "0x823EB0", VA = "0x823EB0", Slot = "33")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Address(RVA = "0x823F8C", Offset = "0x823F8C", VA = "0x823F8C", Slot = "34")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Address(RVA = "0x824060", Offset = "0x824060", VA = "0x824060", Slot = "35")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Address(RVA = "0x824134", Offset = "0x824134", VA = "0x824134", Slot = "43")]
		private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
		{
			return null;
		}

		[Address(RVA = "0x82424C", Offset = "0x82424C", VA = "0x82424C", Slot = "44")]
		private void System.Collections.Specialized.IOrderedDictionary.Insert(int idx, object key, object value)
		{
		}

		[Address(RVA = "0x8243DC", Offset = "0x8243DC", VA = "0x8243DC", Slot = "45")]
		private void System.Collections.Specialized.IOrderedDictionary.RemoveAt(int idx)
		{
		}

		[Address(RVA = "0x8204B4", Offset = "0x8204B4", VA = "0x8204B4")]
		private ICollection EnsureCollection()
		{
			return null;
		}

		[Address(RVA = "0x82087C", Offset = "0x82087C", VA = "0x82087C")]
		private IDictionary EnsureDictionary()
		{
			return null;
		}

		[Address(RVA = "0x821370", Offset = "0x821370", VA = "0x821370")]
		private IList EnsureList()
		{
			return null;
		}

		[Address(RVA = "0x821768", Offset = "0x821768", VA = "0x821768")]
		private JsonData ToJsonData(object obj)
		{
			return null;
		}

		[Address(RVA = "0x8245D8", Offset = "0x8245D8", VA = "0x8245D8")]
		private static void WriteJson(IJsonWrapper obj, JsonWriter writer)
		{
		}

		[Address(RVA = "0x823B78", Offset = "0x823B78", VA = "0x823B78")]
		public int Add(object value)
		{
			return default(int);
		}

		[Address(RVA = "0x825C84", Offset = "0x825C84", VA = "0x825C84")]
		public void Clear()
		{
		}

		[Address(RVA = "0x825DA0", Offset = "0x825DA0", VA = "0x825DA0", Slot = "57")]
		public bool Equals(JsonData x)
		{
			return default(bool);
		}

		[Address(RVA = "0x825EC4", Offset = "0x825EC4", VA = "0x825EC4", Slot = "14")]
		public JsonType GetJsonType()
		{
			return default(JsonType);
		}

		[Address(RVA = "0x825ECC", Offset = "0x825ECC", VA = "0x825ECC", Slot = "20")]
		public void SetJsonType(JsonType type)
		{
		}

		[Address(RVA = "0x823A38", Offset = "0x823A38", VA = "0x823A38")]
		public string ToJson()
		{
			return null;
		}

		[Address(RVA = "0x823B00", Offset = "0x823B00", VA = "0x823B00")]
		public void ToJson(JsonWriter writer)
		{
		}

		[Address(RVA = "0x8260A8", Offset = "0x8260A8", VA = "0x8260A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	internal class OrderedDictionaryEnumerator : IDictionaryEnumerator, IEnumerator
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerator<KeyValuePair<string, JsonData>> list_enumerator;

		public object Current
		{
			[Address(RVA = "0x834E48", Offset = "0x834E48", VA = "0x834E48", Slot = "8")]
			get
			{
				return null;
			}
		}

		public DictionaryEntry Entry
		{
			[Address(RVA = "0x834EB4", Offset = "0x834EB4", VA = "0x834EB4", Slot = "6")]
			get
			{
				return default(DictionaryEntry);
			}
		}

		public object Key
		{
			[Address(RVA = "0x834FC8", Offset = "0x834FC8", VA = "0x834FC8", Slot = "4")]
			get
			{
				return null;
			}
		}

		public object Value
		{
			[Address(RVA = "0x8350A8", Offset = "0x8350A8", VA = "0x8350A8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x824220", Offset = "0x824220", VA = "0x824220")]
		public OrderedDictionaryEnumerator(IEnumerator<KeyValuePair<string, JsonData>> enumerator)
		{
		}

		[Address(RVA = "0x835188", Offset = "0x835188", VA = "0x835188", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Address(RVA = "0x83523C", Offset = "0x83523C", VA = "0x83523C", Slot = "9")]
		public void Reset()
		{
		}
	}
	public class JsonException : ApplicationException
	{
		[Address(RVA = "0x826188", Offset = "0x826188", VA = "0x826188")]
		public JsonException()
		{
		}

		[Address(RVA = "0x826190", Offset = "0x826190", VA = "0x826190")]
		internal JsonException(ParserToken token)
		{
		}

		[Address(RVA = "0x826220", Offset = "0x826220", VA = "0x826220")]
		internal JsonException(ParserToken token, Exception inner_exception)
		{
		}

		[Address(RVA = "0x8262C0", Offset = "0x8262C0", VA = "0x8262C0")]
		internal JsonException(int c)
		{
		}

		[Address(RVA = "0x826350", Offset = "0x826350", VA = "0x826350")]
		internal JsonException(int c, Exception inner_exception)
		{
		}

		[Address(RVA = "0x8263F0", Offset = "0x8263F0", VA = "0x8263F0")]
		public JsonException(string message)
		{
		}

		[Address(RVA = "0x8263F8", Offset = "0x8263F8", VA = "0x8263F8")]
		public JsonException(string message, Exception inner_exception)
		{
		}
	}
	internal struct PropertyMetadata
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MemberInfo Info;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type Type;
	}
	internal struct ArrayMetadata
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool is_array;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private bool is_list;

		public Type ElementType
		{
			[Address(RVA = "0x81F45C", Offset = "0x81F45C", VA = "0x81F45C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x81F464", Offset = "0x81F464", VA = "0x81F464")]
			set
			{
			}
		}

		public bool IsArray
		{
			[Address(RVA = "0x81F46C", Offset = "0x81F46C", VA = "0x81F46C")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x81F474", Offset = "0x81F474", VA = "0x81F474")]
			set
			{
			}
		}

		public bool IsList
		{
			[Address(RVA = "0x81F480", Offset = "0x81F480", VA = "0x81F480")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x81F488", Offset = "0x81F488", VA = "0x81F488")]
			set
			{
			}
		}
	}
	internal struct ObjectMetadata
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool is_dictionary;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IDictionary<string, PropertyMetadata> properties;

		public Type ElementType
		{
			[Address(RVA = "0x834E14", Offset = "0x834E14", VA = "0x834E14")]
			get
			{
				return null;
			}
			[Address(RVA = "0x834E1C", Offset = "0x834E1C", VA = "0x834E1C")]
			set
			{
			}
		}

		public bool IsDictionary
		{
			[Address(RVA = "0x834E24", Offset = "0x834E24", VA = "0x834E24")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x834E2C", Offset = "0x834E2C", VA = "0x834E2C")]
			set
			{
			}
		}

		public IDictionary<string, PropertyMetadata> Properties
		{
			[Address(RVA = "0x834E38", Offset = "0x834E38", VA = "0x834E38")]
			get
			{
				return null;
			}
			[Address(RVA = "0x834E40", Offset = "0x834E40", VA = "0x834E40")]
			set
			{
			}
		}
	}
	internal delegate void ExporterFunc(object obj, JsonWriter writer);
	public delegate void ExporterFunc<T>(T obj, JsonWriter writer);
	internal delegate object ImporterFunc(object input);
	public delegate TValue ImporterFunc<TValue, TJson>(TJson input);
	public delegate IJsonWrapper WrapperFactory();
	public class JsonMapper
	{
		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B040", Offset = "0x65B040")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static ExporterFunc <>9__23_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static ExporterFunc <>9__23_1;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static ExporterFunc <>9__23_2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static ExporterFunc <>9__23_3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static ExporterFunc <>9__23_4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static ExporterFunc <>9__23_5;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static ExporterFunc <>9__23_6;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static ExporterFunc <>9__23_7;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static ExporterFunc <>9__23_8;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static ExporterFunc <>9__23_9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static ImporterFunc <>9__24_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static ImporterFunc <>9__24_1;

			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public static ImporterFunc <>9__24_2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public static ImporterFunc <>9__24_3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public static ImporterFunc <>9__24_4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public static ImporterFunc <>9__24_5;

			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public static ImporterFunc <>9__24_6;

			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public static ImporterFunc <>9__24_7;

			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public static ImporterFunc <>9__24_8;

			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public static ImporterFunc <>9__24_9;

			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public static ImporterFunc <>9__24_10;

			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public static ImporterFunc <>9__24_11;

			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public static ImporterFunc <>9__24_12;

			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public static WrapperFactory <>9__29_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public static WrapperFactory <>9__30_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public static WrapperFactory <>9__31_0;

			[Address(RVA = "0x82EA38", Offset = "0x82EA38", VA = "0x82EA38")]
			public <>c()
			{
			}

			[Address(RVA = "0x82EA40", Offset = "0x82EA40", VA = "0x82EA40")]
			internal void <RegisterBaseExporters>b__23_0(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82EAE4", Offset = "0x82EAE4", VA = "0x82EAE4")]
			internal void <RegisterBaseExporters>b__23_1(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82EB88", Offset = "0x82EB88", VA = "0x82EB88")]
			internal void <RegisterBaseExporters>b__23_2(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82EC60", Offset = "0x82EC60", VA = "0x82EC60")]
			internal void <RegisterBaseExporters>b__23_3(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82EDC0", Offset = "0x82EDC0", VA = "0x82EDC0")]
			internal void <RegisterBaseExporters>b__23_4(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82EE64", Offset = "0x82EE64", VA = "0x82EE64")]
			internal void <RegisterBaseExporters>b__23_5(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82EF08", Offset = "0x82EF08", VA = "0x82EF08")]
			internal void <RegisterBaseExporters>b__23_6(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82EFAC", Offset = "0x82EFAC", VA = "0x82EFAC")]
			internal void <RegisterBaseExporters>b__23_7(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82F050", Offset = "0x82F050", VA = "0x82F050")]
			internal void <RegisterBaseExporters>b__23_8(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82F0C4", Offset = "0x82F0C4", VA = "0x82F0C4")]
			internal void <RegisterBaseExporters>b__23_9(object obj, JsonWriter writer)
			{
			}

			[Address(RVA = "0x82F13C", Offset = "0x82F13C", VA = "0x82F13C")]
			internal object <RegisterBaseImporters>b__24_0(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F1E0", Offset = "0x82F1E0", VA = "0x82F1E0")]
			internal object <RegisterBaseImporters>b__24_1(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F284", Offset = "0x82F284", VA = "0x82F284")]
			internal object <RegisterBaseImporters>b__24_2(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F328", Offset = "0x82F328", VA = "0x82F328")]
			internal object <RegisterBaseImporters>b__24_3(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F3CC", Offset = "0x82F3CC", VA = "0x82F3CC")]
			internal object <RegisterBaseImporters>b__24_4(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F470", Offset = "0x82F470", VA = "0x82F470")]
			internal object <RegisterBaseImporters>b__24_5(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F514", Offset = "0x82F514", VA = "0x82F514")]
			internal object <RegisterBaseImporters>b__24_6(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F5B4", Offset = "0x82F5B4", VA = "0x82F5B4")]
			internal object <RegisterBaseImporters>b__24_7(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F658", Offset = "0x82F658", VA = "0x82F658")]
			internal object <RegisterBaseImporters>b__24_8(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F6F8", Offset = "0x82F6F8", VA = "0x82F6F8")]
			internal object <RegisterBaseImporters>b__24_9(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F79C", Offset = "0x82F79C", VA = "0x82F79C")]
			internal object <RegisterBaseImporters>b__24_10(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F840", Offset = "0x82F840", VA = "0x82F840")]
			internal object <RegisterBaseImporters>b__24_11(object input)
			{
				return null;
			}

			[Address(RVA = "0x82F93C", Offset = "0x82F93C", VA = "0x82F93C")]
			internal object <RegisterBaseImporters>b__24_12(object input)
			{
				return null;
			}

			[Address(RVA = "0x82FA6C", Offset = "0x82FA6C", VA = "0x82FA6C")]
			internal IJsonWrapper <ToObject>b__29_0()
			{
				return null;
			}

			[Address(RVA = "0x82FAC8", Offset = "0x82FAC8", VA = "0x82FAC8")]
			internal IJsonWrapper <ToObject>b__30_0()
			{
				return null;
			}

			[Address(RVA = "0x82FB24", Offset = "0x82FB24", VA = "0x82FB24")]
			internal IJsonWrapper <ToObject>b__31_0()
			{
				return null;
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B050", Offset = "0x65B050")]
		private sealed class <>c__DisplayClass37_0<T>
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ExporterFunc<T> exporter;

			internal void <RegisterExporter>b__0(object obj, JsonWriter writer)
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B060", Offset = "0x65B060")]
		private sealed class <>c__DisplayClass38_0<TJson, TValue>
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ImporterFunc<TJson, TValue> importer;

			internal object <RegisterImporter>b__0(object input)
			{
				return null;
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int max_nesting_depth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IFormatProvider datetime_format;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IDictionary<Type, ExporterFunc> base_exporters_table;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IDictionary<Type, ExporterFunc> custom_exporters_table;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> base_importers_table;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> custom_importers_table;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IDictionary<Type, ArrayMetadata> array_metadata;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly object array_metadata_lock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static IDictionary<Type, IDictionary<Type, MethodInfo>> conv_ops;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly object conv_ops_lock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static IDictionary<Type, ObjectMetadata> object_metadata;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static readonly object object_metadata_lock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static IDictionary<Type, IList<PropertyMetadata>> type_properties;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly object type_properties_lock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static JsonWriter static_writer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static readonly object static_writer_lock;

		[Address(RVA = "0x826400", Offset = "0x826400", VA = "0x826400")]
		static JsonMapper()
		{
		}

		[Address(RVA = "0x8282CC", Offset = "0x8282CC", VA = "0x8282CC")]
		private static void AddArrayMetadata(Type type)
		{
		}

		[Address(RVA = "0x8287A4", Offset = "0x8287A4", VA = "0x8287A4")]
		private static void AddObjectMetadata(Type type)
		{
		}

		[Address(RVA = "0x828F40", Offset = "0x828F40", VA = "0x828F40")]
		private static void AddTypeProperties(Type type)
		{
		}

		[Address(RVA = "0x8294A8", Offset = "0x8294A8", VA = "0x8294A8")]
		private static MethodInfo GetConvOp(Type t1, Type t2)
		{
			return null;
		}

		[Address(RVA = "0x829D74", Offset = "0x829D74", VA = "0x829D74")]
		private static object ReadValue(Type inst_type, JsonReader reader)
		{
			return null;
		}

		[Address(RVA = "0x82B67C", Offset = "0x82B67C", VA = "0x82B67C")]
		private static IJsonWrapper ReadValue(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Address(RVA = "0x826758", Offset = "0x826758", VA = "0x826758")]
		private static void RegisterBaseExporters()
		{
		}

		[Address(RVA = "0x827588", Offset = "0x827588", VA = "0x827588")]
		private static void RegisterBaseImporters()
		{
		}

		[Address(RVA = "0x82C1FC", Offset = "0x82C1FC", VA = "0x82C1FC")]
		private static void RegisterImporter(IDictionary<Type, IDictionary<Type, ImporterFunc>> table, Type json_type, Type value_type, ImporterFunc importer)
		{
		}

		[Address(RVA = "0x82C460", Offset = "0x82C460", VA = "0x82C460")]
		private static void WriteValue(object obj, JsonWriter writer, bool writer_is_private, int depth)
		{
		}

		[Address(RVA = "0x82DEEC", Offset = "0x82DEEC", VA = "0x82DEEC")]
		public static string ToJson(object obj)
		{
			return null;
		}

		[Address(RVA = "0x82E158", Offset = "0x82E158", VA = "0x82E158")]
		public static void ToJson(object obj, JsonWriter writer)
		{
		}

		[Address(RVA = "0x82E1D4", Offset = "0x82E1D4", VA = "0x82E1D4")]
		public static JsonData ToObject(JsonReader reader)
		{
			return null;
		}

		[Address(RVA = "0x82E3DC", Offset = "0x82E3DC", VA = "0x82E3DC")]
		public static JsonData ToObject(TextReader reader)
		{
			return null;
		}

		[Address(RVA = "0x82E588", Offset = "0x82E588", VA = "0x82E588")]
		public static JsonData ToObject(string json)
		{
			return null;
		}

		public static T ToObject<T>(JsonReader reader)
		{
			return (T)null;
		}

		public static T ToObject<T>(TextReader reader)
		{
			return (T)null;
		}

		public static T ToObject<T>(string json)
		{
			return (T)null;
		}

		[Address(RVA = "0x82E368", Offset = "0x82E368", VA = "0x82E368")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Address(RVA = "0x82E70C", Offset = "0x82E70C", VA = "0x82E70C")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, string json)
		{
			return null;
		}

		public static void RegisterExporter<T>(ExporterFunc<T> exporter)
		{
		}

		public static void RegisterImporter<TJson, TValue>(ImporterFunc<TJson, TValue> importer)
		{
		}

		[Address(RVA = "0x82E814", Offset = "0x82E814", VA = "0x82E814")]
		public static void UnregisterExporters()
		{
		}

		[Address(RVA = "0x82E8F0", Offset = "0x82E8F0", VA = "0x82E8F0")]
		public static void UnregisterImporters()
		{
		}

		[Address(RVA = "0x82E9CC", Offset = "0x82E9CC", VA = "0x82E9CC")]
		public JsonMapper()
		{
		}
	}
	public enum JsonToken
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ObjectStart,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PropertyName,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ObjectEnd,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ArrayStart,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ArrayEnd,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Int,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Long,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Double,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		String,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Boolean,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Null
	}
	public class JsonReader
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary<int, IDictionary<int, int[]>> parse_table;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stack<int> automaton_stack;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int current_input;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int current_symbol;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool end_of_json;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool end_of_input;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Lexer lexer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool parser_in_string;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool parser_return;

		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool read_started;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextReader reader;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool reader_is_owned;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private object token_value;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private JsonToken token;

		public bool AllowComments
		{
			[Address(RVA = "0x82FB80", Offset = "0x82FB80", VA = "0x82FB80")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x82FBB4", Offset = "0x82FBB4", VA = "0x82FBB4")]
			set
			{
			}
		}

		public bool AllowSingleQuotedStrings
		{
			[Address(RVA = "0x82FBF4", Offset = "0x82FBF4", VA = "0x82FBF4")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x82FC28", Offset = "0x82FC28", VA = "0x82FC28")]
			set
			{
			}
		}

		public bool EndOfInput
		{
			[Address(RVA = "0x82FC68", Offset = "0x82FC68", VA = "0x82FC68")]
			get
			{
				return default(bool);
			}
		}

		public bool EndOfJson
		{
			[Address(RVA = "0x82FC70", Offset = "0x82FC70", VA = "0x82FC70")]
			get
			{
				return default(bool);
			}
		}

		public JsonToken Token
		{
			[Address(RVA = "0x82B5AC", Offset = "0x82B5AC", VA = "0x82B5AC")]
			get
			{
				return default(JsonToken);
			}
		}

		public object Value
		{
			[Address(RVA = "0x82B5B4", Offset = "0x82B5B4", VA = "0x82B5B4")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x82FC78", Offset = "0x82FC78", VA = "0x82FC78")]
		static JsonReader()
		{
		}

		[Address(RVA = "0x82E79C", Offset = "0x82E79C", VA = "0x82E79C")]
		public JsonReader(string json_text)
		{
		}

		[Address(RVA = "0x82E580", Offset = "0x82E580", VA = "0x82E580")]
		public JsonReader(TextReader reader)
		{
		}

		[Address(RVA = "0x830470", Offset = "0x830470", VA = "0x830470")]
		private JsonReader(TextReader reader, bool owned)
		{
		}

		[Address(RVA = "0x82FC7C", Offset = "0x82FC7C", VA = "0x82FC7C")]
		private static void PopulateParseTable()
		{
		}

		[Address(RVA = "0x8307A8", Offset = "0x8307A8", VA = "0x8307A8")]
		private static void TableAddCol(ParserToken row, int col, params int[] symbols)
		{
		}

		[Address(RVA = "0x830694", Offset = "0x830694", VA = "0x830694")]
		private static void TableAddRow(ParserToken rule)
		{
		}

		[Address(RVA = "0x830918", Offset = "0x830918", VA = "0x830918")]
		private void ProcessNumber(string number)
		{
		}

		[Address(RVA = "0x830AB4", Offset = "0x830AB4", VA = "0x830AB4")]
		private void ProcessSymbol()
		{
		}

		[Address(RVA = "0x830C6C", Offset = "0x830C6C", VA = "0x830C6C")]
		private bool ReadToken()
		{
			return default(bool);
		}

		[Address(RVA = "0x830F64", Offset = "0x830F64", VA = "0x830F64")]
		public void Close()
		{
		}

		[Address(RVA = "0x82B108", Offset = "0x82B108", VA = "0x82B108")]
		public bool Read()
		{
			return default(bool);
		}
	}
	internal enum Condition
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InArray,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InObject,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotAProperty,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Property,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Value
	}
	internal class WriterContext
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Count;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool InArray;

		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool InObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool ExpectingValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Padding;

		[Address(RVA = "0x831420", Offset = "0x831420", VA = "0x831420")]
		public WriterContext()
		{
		}
	}
	public class JsonWriter
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo number_format;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private WriterContext context;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stack<WriterContext> ctx_stack;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool has_reached_end;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private char[] hex_seq;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int indentation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int indent_value;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder inst_string_builder;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool pretty_print;

		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool validate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TextWriter writer;

		public int IndentValue
		{
			[Address(RVA = "0x830FC4", Offset = "0x830FC4", VA = "0x830FC4")]
			get
			{
				return default(int);
			}
			[Address(RVA = "0x830FCC", Offset = "0x830FCC", VA = "0x830FCC")]
			set
			{
			}
		}

		public bool PrettyPrint
		{
			[Address(RVA = "0x830FE0", Offset = "0x830FE0", VA = "0x830FE0")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x830FE8", Offset = "0x830FE8", VA = "0x830FE8")]
			set
			{
			}
		}

		public TextWriter TextWriter
		{
			[Address(RVA = "0x82DE00", Offset = "0x82DE00", VA = "0x82DE00")]
			get
			{
				return null;
			}
		}

		public bool Validate
		{
			[Address(RVA = "0x8260A0", Offset = "0x8260A0", VA = "0x8260A0")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x826094", Offset = "0x826094", VA = "0x826094")]
			set
			{
			}
		}

		[Address(RVA = "0x830FF4", Offset = "0x830FF4", VA = "0x830FF4")]
		static JsonWriter()
		{
		}

		[Address(RVA = "0x8266BC", Offset = "0x8266BC", VA = "0x8266BC")]
		public JsonWriter()
		{
		}

		[Address(RVA = "0x831128", Offset = "0x831128", VA = "0x831128")]
		public JsonWriter(StringBuilder sb)
		{
		}

		[Address(RVA = "0x825FEC", Offset = "0x825FEC", VA = "0x825FEC")]
		public JsonWriter(TextWriter writer)
		{
		}

		[Address(RVA = "0x83119C", Offset = "0x83119C", VA = "0x83119C")]
		private void DoValidation(Condition cond)
		{
		}

		[Address(RVA = "0x83104C", Offset = "0x83104C", VA = "0x83104C")]
		private void Init()
		{
		}

		[Address(RVA = "0x831428", Offset = "0x831428", VA = "0x831428")]
		private static void IntToHex(int n, char[] hex)
		{
		}

		[Address(RVA = "0x8314D8", Offset = "0x8314D8", VA = "0x8314D8")]
		private void Indent()
		{
		}

		[Address(RVA = "0x8314F0", Offset = "0x8314F0", VA = "0x8314F0")]
		private void Put(string str)
		{
		}

		[Address(RVA = "0x8315A0", Offset = "0x8315A0", VA = "0x8315A0")]
		private void PutNewline()
		{
		}

		[Address(RVA = "0x8315A8", Offset = "0x8315A8", VA = "0x8315A8")]
		private void PutNewline(bool add_comma)
		{
		}

		[Address(RVA = "0x83166C", Offset = "0x83166C", VA = "0x83166C")]
		private void PutString(string str)
		{
		}

		[Address(RVA = "0x8319D8", Offset = "0x8319D8", VA = "0x8319D8")]
		private void Unindent()
		{
		}

		[Address(RVA = "0x8319F0", Offset = "0x8319F0", VA = "0x8319F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Address(RVA = "0x82E06C", Offset = "0x82E06C", VA = "0x82E06C")]
		public void Reset()
		{
		}

		[Address(RVA = "0x825318", Offset = "0x825318", VA = "0x825318")]
		public void Write(bool boolean)
		{
		}

		[Address(RVA = "0x82ECD4", Offset = "0x82ECD4", VA = "0x82ECD4")]
		public void Write(decimal number)
		{
		}

		[Address(RVA = "0x8253C4", Offset = "0x8253C4", VA = "0x8253C4")]
		public void Write(double number)
		{
		}

		[Address(RVA = "0x825524", Offset = "0x825524", VA = "0x825524")]
		public void Write(int number)
		{
		}

		[Address(RVA = "0x825608", Offset = "0x825608", VA = "0x825608")]
		public void Write(long number)
		{
		}

		[Address(RVA = "0x825278", Offset = "0x825278", VA = "0x825278")]
		public void Write(string str)
		{
		}

		[Address(RVA = "0x82DE08", Offset = "0x82DE08", VA = "0x82DE08")]
		public void Write(ulong number)
		{
		}

		[Address(RVA = "0x8257D0", Offset = "0x8257D0", VA = "0x8257D0")]
		public void WriteArrayEnd()
		{
		}

		[Address(RVA = "0x8256EC", Offset = "0x8256EC", VA = "0x8256EC")]
		public void WriteArrayStart()
		{
		}

		[Address(RVA = "0x825B74", Offset = "0x825B74", VA = "0x825B74")]
		public void WriteObjectEnd()
		{
		}

		[Address(RVA = "0x8258E0", Offset = "0x8258E0", VA = "0x8258E0")]
		public void WriteObjectStart()
		{
		}

		[Address(RVA = "0x8259C4", Offset = "0x8259C4", VA = "0x8259C4")]
		public void WritePropertyName(string property_name)
		{
		}
	}
	internal class FsmContext
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Return;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int NextState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Lexer L;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int StateStack;

		[Address(RVA = "0x81FC60", Offset = "0x81FC60", VA = "0x81FC60")]
		public FsmContext()
		{
		}
	}
	internal class Lexer
	{
		private delegate bool StateHandler(FsmContext ctx);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] fsm_return_table;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static StateHandler[] fsm_handler_table;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool allow_comments;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool allow_single_quoted_strings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool end_of_input;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FsmContext fsm_context;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int input_buffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int input_char;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextReader reader;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder string_buffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string string_value;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int token;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int unichar;

		public bool AllowComments
		{
			[Address(RVA = "0x82FBAC", Offset = "0x82FBAC", VA = "0x82FBAC")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x82FBE8", Offset = "0x82FBE8", VA = "0x82FBE8")]
			set
			{
			}
		}

		public bool AllowSingleQuotedStrings
		{
			[Address(RVA = "0x82FC20", Offset = "0x82FC20", VA = "0x82FC20")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x82FC5C", Offset = "0x82FC5C", VA = "0x82FC5C")]
			set
			{
			}
		}

		public bool EndOfInput
		{
			[Address(RVA = "0x830F5C", Offset = "0x830F5C", VA = "0x830F5C")]
			get
			{
				return default(bool);
			}
		}

		public int Token
		{
			[Address(RVA = "0x830FBC", Offset = "0x830FBC", VA = "0x830FBC")]
			get
			{
				return default(int);
			}
		}

		public string StringValue
		{
			[Address(RVA = "0x830C64", Offset = "0x830C64", VA = "0x830C64")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x831A60", Offset = "0x831A60", VA = "0x831A60")]
		static Lexer()
		{
		}

		[Address(RVA = "0x8305CC", Offset = "0x8305CC", VA = "0x8305CC")]
		public Lexer(TextReader reader)
		{
		}

		[Address(RVA = "0x832710", Offset = "0x832710", VA = "0x832710")]
		private static int HexValue(int digit)
		{
			return default(int);
		}

		[Address(RVA = "0x831A64", Offset = "0x831A64", VA = "0x831A64")]
		private static void PopulateFsmTables()
		{
		}

		[Address(RVA = "0x83279C", Offset = "0x83279C", VA = "0x83279C")]
		private static char ProcessEscChar(int esc_char)
		{
			return default(char);
		}

		[Address(RVA = "0x83289C", Offset = "0x83289C", VA = "0x83289C")]
		private static bool State1(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x832BF0", Offset = "0x832BF0", VA = "0x832BF0")]
		private static bool State2(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x832D40", Offset = "0x832D40", VA = "0x832D40")]
		private static bool State3(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x832FA0", Offset = "0x832FA0", VA = "0x832FA0")]
		private static bool State4(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833170", Offset = "0x833170", VA = "0x833170")]
		private static bool State5(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x83325C", Offset = "0x83325C", VA = "0x83325C")]
		private static bool State6(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833460", Offset = "0x833460", VA = "0x833460")]
		private static bool State7(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833570", Offset = "0x833570", VA = "0x833570")]
		private static bool State8(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833708", Offset = "0x833708", VA = "0x833708")]
		private static bool State9(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833788", Offset = "0x833788", VA = "0x833788")]
		private static bool State10(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833808", Offset = "0x833808", VA = "0x833808")]
		private static bool State11(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833888", Offset = "0x833888", VA = "0x833888")]
		private static bool State12(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833908", Offset = "0x833908", VA = "0x833908")]
		private static bool State13(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833988", Offset = "0x833988", VA = "0x833988")]
		private static bool State14(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833A08", Offset = "0x833A08", VA = "0x833A08")]
		private static bool State15(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833A88", Offset = "0x833A88", VA = "0x833A88")]
		private static bool State16(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833B08", Offset = "0x833B08", VA = "0x833B08")]
		private static bool State17(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833B88", Offset = "0x833B88", VA = "0x833B88")]
		private static bool State18(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833C08", Offset = "0x833C08", VA = "0x833C08")]
		private static bool State19(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833D18", Offset = "0x833D18", VA = "0x833D18")]
		private static bool State20(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833D98", Offset = "0x833D98", VA = "0x833D98")]
		private static bool State21(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x833F2C", Offset = "0x833F2C", VA = "0x833F2C")]
		private static bool State22(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x8341EC", Offset = "0x8341EC", VA = "0x8341EC")]
		private static bool State23(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x8342FC", Offset = "0x8342FC", VA = "0x8342FC")]
		private static bool State24(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x834394", Offset = "0x834394", VA = "0x834394")]
		private static bool State25(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x834424", Offset = "0x834424", VA = "0x834424")]
		private static bool State26(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x8344A4", Offset = "0x8344A4", VA = "0x8344A4")]
		private static bool State27(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x834524", Offset = "0x834524", VA = "0x834524")]
		private static bool State28(FsmContext ctx)
		{
			return default(bool);
		}

		[Address(RVA = "0x832BB8", Offset = "0x832BB8", VA = "0x832BB8")]
		private bool GetChar()
		{
			return default(bool);
		}

		[Address(RVA = "0x8345C8", Offset = "0x8345C8", VA = "0x8345C8")]
		private int NextChar()
		{
			return default(int);
		}

		[Address(RVA = "0x830CEC", Offset = "0x830CEC", VA = "0x830CEC")]
		public bool NextToken()
		{
			return default(bool);
		}

		[Address(RVA = "0x832F94", Offset = "0x832F94", VA = "0x832F94")]
		private void UngetChar()
		{
		}
	}
	internal enum ParserToken
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 65536,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Number,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		True,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		False,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Null,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CharSeq,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Char,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Text,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Object,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ObjectPrime,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Pair,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PairRest,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Array,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ArrayPrime,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Value,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ValueRest,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		String,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		End,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Epsilon
	}
}
namespace VRTK
{
	[Serializable]
	public sealed class AxisOverrides
	{
		public enum ApplyOverrideType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Never,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Always,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			DigitalState,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AxisState,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SenseAxisState,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AxisAndSenseAxisState
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F248", Offset = "0x65F248")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F248", Offset = "0x65F248")]
		public bool ignoreAllOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F2A8", Offset = "0x65F2A8")]
		public float stateValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F2E0", Offset = "0x65F2E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F2E0", Offset = "0x65F2E0")]
		public ApplyOverrideType applyThumbOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F340", Offset = "0x65F340")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65F340", Offset = "0x65F340")]
		public float thumbOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F394", Offset = "0x65F394")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F394", Offset = "0x65F394")]
		public ApplyOverrideType applyIndexOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F3F4", Offset = "0x65F3F4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65F3F4", Offset = "0x65F3F4")]
		public float indexOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F448", Offset = "0x65F448")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F448", Offset = "0x65F448")]
		public ApplyOverrideType applyMiddleOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F4A8", Offset = "0x65F4A8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65F4A8", Offset = "0x65F4A8")]
		public float middleOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F4FC", Offset = "0x65F4FC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F4FC", Offset = "0x65F4FC")]
		public ApplyOverrideType applyRingOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F55C", Offset = "0x65F55C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65F55C", Offset = "0x65F55C")]
		public float ringOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F5B0", Offset = "0x65F5B0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F5B0", Offset = "0x65F5B0")]
		public ApplyOverrideType applyPinkyOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F610", Offset = "0x65F610")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x65F610", Offset = "0x65F610")]
		public float pinkyOverride;

		[Address(RVA = "0x8CACD0", Offset = "0x8CACD0", VA = "0x8CACD0")]
		public AxisOverrides()
		{
		}
	}
	public class VRTK_AvatarHandController : MonoBehaviour
	{
		protected enum OverrideState
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NoOverride,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			IsOverriding,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WasOverring,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			KeepOverring
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B070", Offset = "0x65B070")]
		private sealed class <ChangePosition>d__103 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float startAxis;

			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float targetAxis;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public VRTK_AvatarHandController <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int arrayIndex;

			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x91D6DC", Offset = "0x91D6DC", VA = "0x91D6DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x91D74C", Offset = "0x91D74C", VA = "0x91D74C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x91D518", Offset = "0x91D518", VA = "0x91D518")]
			[DebuggerHidden]
			public <ChangePosition>d__103(int <>1__state)
			{
			}

			[Address(RVA = "0x91D544", Offset = "0x91D544", VA = "0x91D544", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x91D548", Offset = "0x91D548", VA = "0x91D548", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x91D6E4", Offset = "0x91D6E4", VA = "0x91D6E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F664", Offset = "0x65F664")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F664", Offset = "0x65F664")]
		public SDK_BaseController.ControllerType controllerType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F6C4", Offset = "0x65F6C4")]
		public bool setFingersForControllerType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F6FC", Offset = "0x65F6FC")]
		public bool mirrorModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F734", Offset = "0x65F734")]
		public float animationSnapSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F76C", Offset = "0x65F76C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F76C", Offset = "0x65F76C")]
		public VRTK_ControllerEvents.ButtonAlias thumbButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F7CC", Offset = "0x65F7CC")]
		public VRTK_ControllerEvents.ButtonAlias indexButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F804", Offset = "0x65F804")]
		public VRTK_ControllerEvents.ButtonAlias middleButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F83C", Offset = "0x65F83C")]
		public VRTK_ControllerEvents.ButtonAlias ringButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F874", Offset = "0x65F874")]
		public VRTK_ControllerEvents.ButtonAlias pinkyButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F8AC", Offset = "0x65F8AC")]
		public VRTK_ControllerEvents.ButtonAlias threeFingerButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65F8E4", Offset = "0x65F8E4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F8E4", Offset = "0x65F8E4")]
		public SDK_BaseController.ButtonTypes thumbAxisButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F944", Offset = "0x65F944")]
		public SDK_BaseController.ButtonTypes indexAxisButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F97C", Offset = "0x65F97C")]
		public SDK_BaseController.ButtonTypes middleAxisButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F9B4", Offset = "0x65F9B4")]
		public SDK_BaseController.ButtonTypes ringAxisButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65F9EC", Offset = "0x65F9EC")]
		public SDK_BaseController.ButtonTypes pinkyAxisButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FA24", Offset = "0x65FA24")]
		public SDK_BaseController.ButtonTypes threeFingerAxisButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65FA5C", Offset = "0x65FA5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FA5C", Offset = "0x65FA5C")]
		public VRTK_ControllerEvents.AxisType thumbState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VRTK_ControllerEvents.AxisType indexState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public VRTK_ControllerEvents.AxisType middleState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRTK_ControllerEvents.AxisType ringState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public VRTK_ControllerEvents.AxisType pinkyState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public VRTK_ControllerEvents.AxisType threeFingerState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65FABC", Offset = "0x65FABC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FABC", Offset = "0x65FABC")]
		public AxisOverrides nearTouchOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FB1C", Offset = "0x65FB1C")]
		public AxisOverrides touchOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FB54", Offset = "0x65FB54")]
		public AxisOverrides grabOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FB8C", Offset = "0x65FB8C")]
		public AxisOverrides useOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65FBC4", Offset = "0x65FBC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FBC4", Offset = "0x65FBC4")]
		public Transform handModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FC24", Offset = "0x65FC24")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FC5C", Offset = "0x65FC5C")]
		public VRTK_InteractNearTouch interactNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FC94", Offset = "0x65FC94")]
		public VRTK_InteractTouch interactTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FCCC", Offset = "0x65FCCC")]
		public VRTK_InteractGrab interactGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FD04", Offset = "0x65FD04")]
		public VRTK_InteractUse interactUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Animator animator;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool[] fingerStates;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool[] fingerChangeStates;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected float[] fingerAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected float[] fingerRawAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected float[] fingerUntouchedAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected float[] fingerSaveAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float[] fingerForceAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected OverrideState[] overrideAxisValues;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_ControllerEvents.AxisType[] axisTypes;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected Coroutine[] fingerAnimationRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected VRTK_ControllerEvents.ButtonAlias savedThumbButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected VRTK_ControllerEvents.ButtonAlias savedIndexButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected VRTK_ControllerEvents.ButtonAlias savedMiddleButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected VRTK_ControllerEvents.ButtonAlias savedRingButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected VRTK_ControllerEvents.ButtonAlias savedPinkyButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		protected VRTK_ControllerEvents.ButtonAlias savedThreeFingerButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected SDK_BaseController.ButtonTypes savedThumbAxisButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		protected SDK_BaseController.ButtonTypes savedIndexAxisButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected SDK_BaseController.ButtonTypes savedMiddleAxisButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		protected SDK_BaseController.ButtonTypes savedRingAxisButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected SDK_BaseController.ButtonTypes savedPinkyAxisButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		protected SDK_BaseController.ButtonTypes savedThreeFingerAxisButtonState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected VRTK_ControllerReference controllerReference;

		[Address(RVA = "0x77713C", Offset = "0x77713C", VA = "0x77713C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x777388", Offset = "0x777388", VA = "0x777388", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x777454", Offset = "0x777454", VA = "0x777454", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x77757C", Offset = "0x77757C", VA = "0x77757C", Slot = "7")]
		protected virtual void SubscribeButtonEvent(VRTK_ControllerEvents.ButtonAlias buttonType, ref VRTK_ControllerEvents.ButtonAlias saveType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Address(RVA = "0x77761C", Offset = "0x77761C", VA = "0x77761C", Slot = "8")]
		protected virtual void UnsubscribeButtonEvent(VRTK_ControllerEvents.ButtonAlias buttonType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Address(RVA = "0x7776B8", Offset = "0x7776B8", VA = "0x7776B8", Slot = "9")]
		protected virtual void SubscribeButtonAxisEvent(SDK_BaseController.ButtonTypes buttonType, ref SDK_BaseController.ButtonTypes saveType, VRTK_ControllerEvents.AxisType axisType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Address(RVA = "0x777714", Offset = "0x777714", VA = "0x777714", Slot = "10")]
		protected virtual void UnsubscribeButtonAxisEvent(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerEvents.AxisType axisType, ControllerInteractionEventHandler eventHandler)
		{
		}

		[Address(RVA = "0x77776C", Offset = "0x77776C", VA = "0x77776C", Slot = "11")]
		protected virtual void SubscribeEvents()
		{
		}

		[Address(RVA = "0x777E58", Offset = "0x777E58", VA = "0x777E58", Slot = "12")]
		protected virtual void UnsubscribeEvents()
		{
		}

		[Address(RVA = "0x7784D8", Offset = "0x7784D8", VA = "0x7784D8", Slot = "13")]
		protected virtual void SetFingerEvent(int fingerIndex, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7785C8", Offset = "0x7785C8", VA = "0x7785C8", Slot = "14")]
		protected virtual void SetFingerAxisEvent(int fingerIndex, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7786A8", Offset = "0x7786A8", VA = "0x7786A8", Slot = "15")]
		protected virtual void DoThumbEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778700", Offset = "0x778700", VA = "0x778700", Slot = "16")]
		protected virtual void DoIndexEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778758", Offset = "0x778758", VA = "0x778758", Slot = "17")]
		protected virtual void DoMiddleEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7787B0", Offset = "0x7787B0", VA = "0x7787B0", Slot = "18")]
		protected virtual void DoRingEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778808", Offset = "0x778808", VA = "0x778808", Slot = "19")]
		protected virtual void DoPinkyEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778860", Offset = "0x778860", VA = "0x778860", Slot = "20")]
		protected virtual void DoThreeFingerEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778950", Offset = "0x778950", VA = "0x778950", Slot = "21")]
		protected virtual void DoThumbAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7789A8", Offset = "0x7789A8", VA = "0x7789A8", Slot = "22")]
		protected virtual void DoIndexAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778A00", Offset = "0x778A00", VA = "0x778A00", Slot = "23")]
		protected virtual void DoMiddleAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778A58", Offset = "0x778A58", VA = "0x778A58", Slot = "24")]
		protected virtual void DoRingAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778AB0", Offset = "0x778AB0", VA = "0x778AB0", Slot = "25")]
		protected virtual void DoPinkyAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778B08", Offset = "0x778B08", VA = "0x778B08", Slot = "26")]
		protected virtual void DoThreeFingerAxisEvent(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x778BF8", Offset = "0x778BF8", VA = "0x778BF8", Slot = "27")]
		protected virtual bool IsButtonPressed(int arrayIndex)
		{
			return default(bool);
		}

		[Address(RVA = "0x778D58", Offset = "0x778D58", VA = "0x778D58", Slot = "28")]
		protected virtual void SaveFingerAxis(int arrayIndex, float updateAxis)
		{
		}

		[Address(RVA = "0x778E5C", Offset = "0x778E5C", VA = "0x778E5C", Slot = "29")]
		protected virtual void HandleOverrideOn(bool ignoreAllOverrides, float[] givenFingerAxis, bool[] overridePermissions, float[] overrideValues)
		{
		}

		[Address(RVA = "0x7790D8", Offset = "0x7790D8", VA = "0x7790D8", Slot = "30")]
		protected virtual void HandleOverrideOff(bool ignoreAllOverrides, bool[] overridePermissions, bool keepOverriding)
		{
		}

		[Address(RVA = "0x7792C8", Offset = "0x7792C8", VA = "0x7792C8", Slot = "31")]
		protected virtual float CorrectOverrideValue(float givenOverride)
		{
			return default(float);
		}

		[Address(RVA = "0x7792DC", Offset = "0x7792DC", VA = "0x7792DC", Slot = "32")]
		protected virtual bool ApplyFingerOverrides(AxisOverrides.ApplyOverrideType overrideType, int arrayIndex)
		{
			return default(bool);
		}

		[Address(RVA = "0x77946C", Offset = "0x77946C", VA = "0x77946C", Slot = "33")]
		protected virtual bool[] GetOverridePermissions(AxisOverrides overrideType)
		{
			return null;
		}

		[Address(RVA = "0x77962C", Offset = "0x77962C", VA = "0x77962C", Slot = "34")]
		protected virtual float[] GetOverrideValues(AxisOverrides overrideType)
		{
			return null;
		}

		[Address(RVA = "0x7797DC", Offset = "0x7797DC", VA = "0x7797DC", Slot = "35")]
		protected virtual void SetAnimatorStateOn(string state, AxisOverrides overrides)
		{
		}

		[Address(RVA = "0x779850", Offset = "0x779850", VA = "0x779850", Slot = "36")]
		protected virtual void SetAnimatorStateOff(string state)
		{
		}

		[Address(RVA = "0x77988C", Offset = "0x77988C", VA = "0x77988C", Slot = "37")]
		protected virtual void DoControllerNearTouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x779A04", Offset = "0x779A04", VA = "0x779A04", Slot = "38")]
		protected virtual void DoControllerNearUntouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x779C78", Offset = "0x779C78", VA = "0x779C78", Slot = "39")]
		protected virtual void DoControllerTouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x779D54", Offset = "0x779D54", VA = "0x779D54", Slot = "40")]
		protected virtual void DoControllerUntouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x779F34", Offset = "0x779F34", VA = "0x779F34", Slot = "41")]
		protected virtual void DoControllerGrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x77A0E4", Offset = "0x77A0E4", VA = "0x77A0E4", Slot = "42")]
		protected virtual void DoControllerUngrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x77A18C", Offset = "0x77A18C", VA = "0x77A18C", Slot = "43")]
		protected virtual void DoControllerUse(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x77A314", Offset = "0x77A314", VA = "0x77A314", Slot = "44")]
		protected virtual void DoControllerUnuse(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x77A3C0", Offset = "0x77A3C0", VA = "0x77A3C0", Slot = "45")]
		protected virtual void DetectController()
		{
		}

		[Address(RVA = "0x77A50C", Offset = "0x77A50C", VA = "0x77A50C", Slot = "46")]
		protected virtual void MirrorHand()
		{
		}

		[Address(RVA = "0x77A6AC", Offset = "0x77A6AC", VA = "0x77A6AC", Slot = "47")]
		protected virtual void SetOverrideValue(int stateIndex, ref OverrideState[] overrideState, OverrideState stateValue)
		{
		}

		[Address(RVA = "0x77A70C", Offset = "0x77A70C", VA = "0x77A70C", Slot = "48")]
		protected virtual void ProcessFinger(VRTK_ControllerEvents.AxisType state, int arrayIndex)
		{
		}

		[Address(RVA = "0x77AC6C", Offset = "0x77AC6C", VA = "0x77AC6C", Slot = "49")]
		protected virtual void LerpChangePosition(int arrayIndex, float startPosition, float targetPosition, float speed)
		{
		}

		[Address(RVA = "0x77AD20", Offset = "0x77AD20", VA = "0x77AD20", Slot = "50")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C328", Offset = "0x67C328")]
		protected virtual IEnumerator ChangePosition(int arrayIndex, float startAxis, float targetAxis, float time)
		{
			return null;
		}

		[Address(RVA = "0x77AE08", Offset = "0x77AE08", VA = "0x77AE08", Slot = "51")]
		protected virtual void SetFingerPosition(int arrayIndex, float axis)
		{
		}

		[Address(RVA = "0x77AF08", Offset = "0x77AF08", VA = "0x77AF08")]
		public VRTK_AvatarHandController()
		{
		}
	}
	public class VRTK_ConsoleViewer : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FD3C", Offset = "0x65FD3C")]
		public int fontSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FD74", Offset = "0x65FD74")]
		public Color infoMessage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FDAC", Offset = "0x65FDAC")]
		public Color assertMessage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FDE4", Offset = "0x65FDE4")]
		public Color warningMessage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FE1C", Offset = "0x65FE1C")]
		public Color errorMessage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FE54", Offset = "0x65FE54")]
		public Color exceptionMessage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Dictionary<LogType, Color> logTypeColors;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected ScrollRect scrollWindow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected RectTransform consoleRect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Text consoleOutput;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string NEWLINE = "\n";

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected int lineBuffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected int currentBuffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected string lastMessage;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool collapseLog;

		[Address(RVA = "0x934F84", Offset = "0x934F84", VA = "0x934F84", Slot = "4")]
		public virtual void SetCollapse(bool state)
		{
		}

		[Address(RVA = "0x934F90", Offset = "0x934F90", VA = "0x934F90", Slot = "5")]
		public virtual void ClearLog()
		{
		}

		[Address(RVA = "0x935014", Offset = "0x935014", VA = "0x935014", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x9352C8", Offset = "0x9352C8", VA = "0x9352C8", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x935348", Offset = "0x935348", VA = "0x935348", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x935424", Offset = "0x935424", VA = "0x935424", Slot = "9")]
		protected virtual string GetMessage(string message, LogType type)
		{
			return null;
		}

		[Address(RVA = "0x93565C", Offset = "0x93565C", VA = "0x93565C", Slot = "10")]
		protected virtual void HandleLog(string message, string stackTrace, LogType type)
		{
		}

		[Address(RVA = "0x935900", Offset = "0x935900", VA = "0x935900")]
		public VRTK_ConsoleViewer()
		{
		}
	}
	public struct ControllerRigidbodyActivatorEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_InteractTouch touchingObject;
	}
	public delegate void ControllerRigidbodyActivatorEventHandler(object sender, ControllerRigidbodyActivatorEventArgs e);
	public class VRTK_ControllerRigidbodyActivator : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FE8C", Offset = "0x65FE8C")]
		public bool isEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FEC4", Offset = "0x65FEC4")]
		public bool activateInteractTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FEFC", Offset = "0x65FEFC")]
		public bool activateTrackedCollider;

		public event ControllerRigidbodyActivatorEventHandler ControllerRigidbodyOn
		{
			[Address(RVA = "0xA6C690", Offset = "0xA6C690", VA = "0xA6C690")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C38C", Offset = "0x67C38C")]
			add
			{
			}
			[Address(RVA = "0xA6C77C", Offset = "0xA6C77C", VA = "0xA6C77C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C39C", Offset = "0x67C39C")]
			remove
			{
			}
		}

		public event ControllerRigidbodyActivatorEventHandler ControllerRigidbodyOff
		{
			[Address(RVA = "0xA6C868", Offset = "0xA6C868", VA = "0xA6C868")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C3AC", Offset = "0x67C3AC")]
			add
			{
			}
			[Address(RVA = "0xA6C954", Offset = "0xA6C954", VA = "0xA6C954")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C3BC", Offset = "0x67C3BC")]
			remove
			{
			}
		}

		[Address(RVA = "0xA6CA40", Offset = "0xA6CA40", VA = "0xA6CA40", Slot = "4")]
		public virtual void OnControllerRigidbodyOn(ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Address(RVA = "0xA6CA64", Offset = "0xA6CA64", VA = "0xA6CA64", Slot = "5")]
		public virtual void OnControllerRigidbodyOff(ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Address(RVA = "0xA6CA88", Offset = "0xA6CA88", VA = "0xA6CA88", Slot = "6")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xA6CA98", Offset = "0xA6CA98", VA = "0xA6CA98", Slot = "7")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xA6CAA8", Offset = "0xA6CAA8", VA = "0xA6CAA8", Slot = "8")]
		protected virtual void ToggleRigidbody(Collider collider, bool state)
		{
		}

		[Address(RVA = "0xA6CC6C", Offset = "0xA6CC6C", VA = "0xA6CC6C", Slot = "9")]
		protected virtual void EmitEvent(bool state, VRTK_InteractTouch touch)
		{
		}

		[Address(RVA = "0xA6CC8C", Offset = "0xA6CC8C", VA = "0xA6CC8C")]
		public VRTK_ControllerRigidbodyActivator()
		{
		}
	}
	public struct ControllerTooltipsEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerTooltips.TooltipButtons element;
	}
	public delegate void ControllerTooltipsEventHandler(object sender, ControllerTooltipsEventArgs e);
	public class VRTK_ControllerTooltips : MonoBehaviour
	{
		public enum TooltipButtons
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TriggerTooltip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripTooltip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTooltip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTwoTooltip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonOneTooltip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonTwoTooltip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			StartMenuTooltip
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x65FF54", Offset = "0x65FF54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FF54", Offset = "0x65FF54")]
		public string triggerText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FFB4", Offset = "0x65FFB4")]
		public string gripText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x65FFEC", Offset = "0x65FFEC")]
		public string touchpadText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660024", Offset = "0x660024")]
		public string touchpadTwoText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66005C", Offset = "0x66005C")]
		public string buttonOneText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660094", Offset = "0x660094")]
		public string buttonTwoText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6600CC", Offset = "0x6600CC")]
		public string startMenuText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660104", Offset = "0x660104")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660104", Offset = "0x660104")]
		public Color tipBackgroundColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660164", Offset = "0x660164")]
		public Color tipTextColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66019C", Offset = "0x66019C")]
		public Color tipLineColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6601D4", Offset = "0x6601D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6601D4", Offset = "0x6601D4")]
		public Transform trigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660234", Offset = "0x660234")]
		public Transform grip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66026C", Offset = "0x66026C")]
		public Transform touchpad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6602A4", Offset = "0x6602A4")]
		public Transform touchpadTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6602DC", Offset = "0x6602DC")]
		public Transform buttonOne;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660314", Offset = "0x660314")]
		public Transform buttonTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66034C", Offset = "0x66034C")]
		public Transform startMenu;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660384", Offset = "0x660384")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660384", Offset = "0x660384")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6603E4", Offset = "0x6603E4")]
		public VRTK_HeadsetControllerAware headsetControllerAware;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66041C", Offset = "0x66041C")]
		public bool hideWhenNotInView;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660454", Offset = "0x660454")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x660454", Offset = "0x660454")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x660454", Offset = "0x660454")]
		public int retryInitMaxTries;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6604C4", Offset = "0x6604C4")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x6604C4", Offset = "0x6604C4")]
		public float retryInitCounter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected TooltipButtons[] availableButtons;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected VRTK_ObjectTooltip[] buttonTooltips;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected bool[] tooltipStates;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected bool overallState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_TrackedController trackedController;

		public event ControllerTooltipsEventHandler ControllerTooltipOn
		{
			[Address(RVA = "0xA6CC9C", Offset = "0xA6CC9C", VA = "0xA6CC9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C3CC", Offset = "0x67C3CC")]
			add
			{
			}
			[Address(RVA = "0xA6CD88", Offset = "0xA6CD88", VA = "0xA6CD88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C3DC", Offset = "0x67C3DC")]
			remove
			{
			}
		}

		public event ControllerTooltipsEventHandler ControllerTooltipOff
		{
			[Address(RVA = "0xA6CE74", Offset = "0xA6CE74", VA = "0xA6CE74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C3EC", Offset = "0x67C3EC")]
			add
			{
			}
			[Address(RVA = "0xA6CF60", Offset = "0xA6CF60", VA = "0xA6CF60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C3FC", Offset = "0x67C3FC")]
			remove
			{
			}
		}

		[Address(RVA = "0xA6D04C", Offset = "0xA6D04C", VA = "0xA6D04C", Slot = "4")]
		public virtual void OnControllerTooltipOn(ControllerTooltipsEventArgs e)
		{
		}

		[Address(RVA = "0xA6D06C", Offset = "0xA6D06C", VA = "0xA6D06C", Slot = "5")]
		public virtual void OnControllerTooltipOff(ControllerTooltipsEventArgs e)
		{
		}

		[Address(RVA = "0xA6D08C", Offset = "0xA6D08C", VA = "0xA6D08C", Slot = "6")]
		public virtual void ResetTooltip()
		{
		}

		[Address(RVA = "0xA6D09C", Offset = "0xA6D09C", VA = "0xA6D09C", Slot = "7")]
		public virtual void UpdateText(TooltipButtons element, string newText)
		{
		}

		[Address(RVA = "0xA6D100", Offset = "0xA6D100", VA = "0xA6D100", Slot = "8")]
		public virtual void ToggleTips(bool state, TooltipButtons element = TooltipButtons.None)
		{
		}

		[Address(RVA = "0xA6D320", Offset = "0xA6D320", VA = "0xA6D320", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA6D39C", Offset = "0xA6D39C", VA = "0xA6D39C", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA6D468", Offset = "0xA6D468", VA = "0xA6D468", Slot = "11")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA6D73C", Offset = "0xA6D73C", VA = "0xA6D73C", Slot = "12")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA6D7A4", Offset = "0xA6D7A4", VA = "0xA6D7A4", Slot = "13")]
		protected virtual void EmitEvent(bool state, TooltipButtons element)
		{
		}

		[Address(RVA = "0xA6D7C4", Offset = "0xA6D7C4", VA = "0xA6D7C4", Slot = "14")]
		protected virtual void InitButtonsArray()
		{
		}

		[Address(RVA = "0xA6DA24", Offset = "0xA6DA24", VA = "0xA6DA24", Slot = "15")]
		protected virtual void InitListeners()
		{
		}

		[Address(RVA = "0xA6DD8C", Offset = "0xA6DD8C", VA = "0xA6DD8C", Slot = "16")]
		protected virtual void DoControllerEnabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA6DEC4", Offset = "0xA6DEC4", VA = "0xA6DEC4", Slot = "17")]
		protected virtual void DoControllerVisible(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA6DF9C", Offset = "0xA6DF9C", VA = "0xA6DF9C", Slot = "18")]
		protected virtual void DoControllerInvisible(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA6E0A4", Offset = "0xA6E0A4", VA = "0xA6E0A4", Slot = "19")]
		protected virtual void DoControllerModelAvailable(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA6E0B0", Offset = "0xA6E0B0", VA = "0xA6E0B0", Slot = "20")]
		protected virtual void TrackedControllerDoControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0xA6E0BC", Offset = "0xA6E0BC", VA = "0xA6E0BC", Slot = "21")]
		protected virtual void DoGlanceEnterController(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xA6E1C4", Offset = "0xA6E1C4", VA = "0xA6E1C4", Slot = "22")]
		protected virtual void DoGlanceExitController(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xA6E2CC", Offset = "0xA6E2CC", VA = "0xA6E2CC", Slot = "23")]
		protected virtual void InitialiseTips()
		{
		}

		[Address(RVA = "0xA6E7D0", Offset = "0xA6E7D0", VA = "0xA6E7D0", Slot = "24")]
		protected virtual Transform GetTransform(Transform setTransform, SDK_BaseController.ControllerElements findElement)
		{
			return null;
		}

		[Address(RVA = "0xA6EA08", Offset = "0xA6EA08", VA = "0xA6EA08")]
		public VRTK_ControllerTooltips()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x655DD0", Offset = "0x655DD0")]
	public class VRTK_DesktopCamera : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660530", Offset = "0x660530")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660530", Offset = "0x660530")]
		public Camera desktopCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660590", Offset = "0x660590")]
		public VRTK_ObjectFollow followScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6605C8", Offset = "0x6605C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6605C8", Offset = "0x6605C8")]
		public RawImage headsetImage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660628", Offset = "0x660628")]
		public RenderTexture headsetRenderTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Camera headsetCameraCopy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected VRTK_TransformFollow headsetCameraTransformFollow;

		[Address(RVA = "0xA75300", Offset = "0xA75300", VA = "0xA75300", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA7583C", Offset = "0xA7583C", VA = "0xA7583C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA75980", Offset = "0xA75980", VA = "0xA75980", Slot = "6")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Address(RVA = "0xA7598C", Offset = "0xA7598C", VA = "0xA7598C", Slot = "7")]
		protected virtual void ConfigureForCurrentSDKSetup()
		{
		}

		[Address(RVA = "0xA76668", Offset = "0xA76668", VA = "0xA76668")]
		public VRTK_DesktopCamera()
		{
		}

		[Address(RVA = "0xA76670", Offset = "0xA76670", VA = "0xA76670")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C40C", Offset = "0x67C40C")]
		private bool <ConfigureForCurrentSDKSetup>b__9_0(Component component)
		{
			return default(bool);
		}
	}
	public delegate void DestinationPointEventHandler(object sender);
	public class VRTK_DestinationPoint : VRTK_DestinationMarker
	{
		public enum RotationTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NoRotation,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RotateWithNoHeadsetOffset,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RotateWithHeadsetOffset
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B080", Offset = "0x65B080")]
		private sealed class <ManageDestinationMarkersAtEndOfFrame>d__51 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_DestinationPoint <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA79C68", Offset = "0xA79C68", VA = "0xA79C68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA79CD8", Offset = "0xA79CD8", VA = "0xA79CD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA78400", Offset = "0xA78400", VA = "0xA78400")]
			[DebuggerHidden]
			public <ManageDestinationMarkersAtEndOfFrame>d__51(int <>1__state)
			{
			}

			[Address(RVA = "0xA79A90", Offset = "0xA79A90", VA = "0xA79A90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA79A94", Offset = "0xA79A94", VA = "0xA79A94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA79C70", Offset = "0xA79C70", VA = "0xA79C70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660660", Offset = "0x660660")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660660", Offset = "0x660660")]
		public GameObject defaultCursorObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6606C0", Offset = "0x6606C0")]
		public GameObject hoverCursorObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6606F8", Offset = "0x6606F8")]
		public GameObject lockedCursorObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660730", Offset = "0x660730")]
		public Transform destinationLocation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660768", Offset = "0x660768")]
		public bool snapToPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6607A0", Offset = "0x6607A0")]
		public bool hidePointerCursorOnHover;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6607D8", Offset = "0x6607D8")]
		public bool hideDirectionIndicatorOnHover;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660810", Offset = "0x660810")]
		public RotationTypes snapToRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660848", Offset = "0x660848")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660848", Offset = "0x660848")]
		public VRTK_BasicTeleport teleporter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VRTK_DestinationPoint currentDestinationPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Collider pointCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool createdCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Rigidbody pointRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool createdRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Coroutine initaliseListeners;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected bool isActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected VRTK_BasePointerRenderer.VisibilityStates storedCursorState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool storedDirectionIndicatorState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool currentTeleportState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool customTeleporter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Transform headset;

		public event DestinationPointEventHandler DestinationPointEnabled
		{
			[Address(RVA = "0xA77380", Offset = "0xA77380", VA = "0xA77380")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C41C", Offset = "0x67C41C")]
			add
			{
			}
			[Address(RVA = "0xA7746C", Offset = "0xA7746C", VA = "0xA7746C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C42C", Offset = "0x67C42C")]
			remove
			{
			}
		}

		public event DestinationPointEventHandler DestinationPointDisabled
		{
			[Address(RVA = "0xA77558", Offset = "0xA77558", VA = "0xA77558")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C43C", Offset = "0x67C43C")]
			add
			{
			}
			[Address(RVA = "0xA77644", Offset = "0xA77644", VA = "0xA77644")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C44C", Offset = "0x67C44C")]
			remove
			{
			}
		}

		public event DestinationPointEventHandler DestinationPointLocked
		{
			[Address(RVA = "0xA77730", Offset = "0xA77730", VA = "0xA77730")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C45C", Offset = "0x67C45C")]
			add
			{
			}
			[Address(RVA = "0xA7781C", Offset = "0xA7781C", VA = "0xA7781C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C46C", Offset = "0x67C46C")]
			remove
			{
			}
		}

		public event DestinationPointEventHandler DestinationPointUnlocked
		{
			[Address(RVA = "0xA77908", Offset = "0xA77908", VA = "0xA77908")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C47C", Offset = "0x67C47C")]
			add
			{
			}
			[Address(RVA = "0xA779F4", Offset = "0xA779F4", VA = "0xA779F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C48C", Offset = "0x67C48C")]
			remove
			{
			}
		}

		public event DestinationPointEventHandler DestinationPointReset
		{
			[Address(RVA = "0xA77AE0", Offset = "0xA77AE0", VA = "0xA77AE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C49C", Offset = "0x67C49C")]
			add
			{
			}
			[Address(RVA = "0xA77BCC", Offset = "0xA77BCC", VA = "0xA77BCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C4AC", Offset = "0x67C4AC")]
			remove
			{
			}
		}

		[Address(RVA = "0xA77CB8", Offset = "0xA77CB8", VA = "0xA77CB8", Slot = "15")]
		public virtual void OnDestinationPointEnabled()
		{
		}

		[Address(RVA = "0xA77CD4", Offset = "0xA77CD4", VA = "0xA77CD4", Slot = "16")]
		public virtual void OnDestinationPointDisabled()
		{
		}

		[Address(RVA = "0xA77CF0", Offset = "0xA77CF0", VA = "0xA77CF0", Slot = "17")]
		public virtual void OnDestinationPointLocked()
		{
		}

		[Address(RVA = "0xA77D0C", Offset = "0xA77D0C", VA = "0xA77D0C", Slot = "18")]
		public virtual void OnDestinationPointUnlocked()
		{
		}

		[Address(RVA = "0xA77D28", Offset = "0xA77D28", VA = "0xA77D28", Slot = "19")]
		public virtual void OnDestinationPointReset()
		{
		}

		[Address(RVA = "0xA77D44", Offset = "0xA77D44", VA = "0xA77D44", Slot = "20")]
		public virtual void ResetDestinationPoint()
		{
		}

		[Address(RVA = "0xA77D54", Offset = "0xA77D54", VA = "0xA77D54", Slot = "21")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA77DBC", Offset = "0xA77DBC", VA = "0xA77DBC", Slot = "12")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xA77FCC", Offset = "0xA77FCC", VA = "0xA77FCC", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0xA780C4", Offset = "0xA780C4", VA = "0xA780C4", Slot = "22")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA7812C", Offset = "0xA7812C", VA = "0xA7812C", Slot = "23")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA78184", Offset = "0xA78184", VA = "0xA78184", Slot = "24")]
		protected virtual void CreateColliderIfRequired()
		{
		}

		[Address(RVA = "0xA78278", Offset = "0xA78278", VA = "0xA78278", Slot = "25")]
		protected virtual void SetupRigidbody()
		{
		}

		[Address(RVA = "0xA7838C", Offset = "0xA7838C", VA = "0xA7838C", Slot = "26")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C4BC", Offset = "0x67C4BC")]
		protected virtual IEnumerator ManageDestinationMarkersAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xA7842C", Offset = "0xA7842C", VA = "0xA7842C", Slot = "27")]
		protected virtual void ManageDestinationMarkers(bool state)
		{
		}

		[Address(RVA = "0xA786A0", Offset = "0xA786A0", VA = "0xA786A0", Slot = "28")]
		protected virtual void ManageDestinationMarkerListeners(GameObject markerMaker, bool register)
		{
		}

		[Address(RVA = "0xA78914", Offset = "0xA78914", VA = "0xA78914", Slot = "29")]
		protected virtual void DoDestinationMarkerEnter(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA78C28", Offset = "0xA78C28", VA = "0xA78C28", Slot = "30")]
		protected virtual void DoDestinationMarkerExit(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA78EC0", Offset = "0xA78EC0", VA = "0xA78EC0", Slot = "31")]
		protected virtual void DoDestinationMarkerSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA79190", Offset = "0xA79190", VA = "0xA79190", Slot = "32")]
		protected virtual void ToggleCursor(object sender, bool state)
		{
		}

		[Address(RVA = "0xA79390", Offset = "0xA79390", VA = "0xA79390", Slot = "33")]
		protected virtual void TogglePointerCursor(VRTK_BasePointerRenderer pointerRenderer, bool state)
		{
		}

		[Address(RVA = "0xA79408", Offset = "0xA79408", VA = "0xA79408", Slot = "34")]
		protected virtual void ToggleDirectionIndicator(VRTK_BasePointerRenderer pointerRenderer, bool state)
		{
		}

		[Address(RVA = "0xA794EC", Offset = "0xA794EC", VA = "0xA794EC", Slot = "35")]
		protected virtual void EnablePoint()
		{
		}

		[Address(RVA = "0xA79568", Offset = "0xA79568", VA = "0xA79568", Slot = "36")]
		protected virtual void SetColliderState(bool state)
		{
		}

		[Address(RVA = "0xA79618", Offset = "0xA79618", VA = "0xA79618", Slot = "37")]
		protected virtual void DisablePoint()
		{
		}

		[Address(RVA = "0xA796AC", Offset = "0xA796AC", VA = "0xA796AC", Slot = "38")]
		protected virtual void ResetPoint()
		{
		}

		[Address(RVA = "0xA79834", Offset = "0xA79834", VA = "0xA79834", Slot = "39")]
		protected virtual void ToggleObject(GameObject givenObject, bool state)
		{
		}

		[Address(RVA = "0xA798DC", Offset = "0xA798DC", VA = "0xA798DC", Slot = "40")]
		protected virtual Quaternion? GetRotation()
		{
			return null;
		}

		[Address(RVA = "0xA79A74", Offset = "0xA79A74", VA = "0xA79A74")]
		public VRTK_DestinationPoint()
		{
		}
	}
	public class VRTK_FramesPerSecondViewer : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6608F8", Offset = "0x6608F8")]
		public bool displayFPS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660930", Offset = "0x660930")]
		public int targetFPS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660968", Offset = "0x660968")]
		public int fontSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6609A0", Offset = "0x6609A0")]
		public Vector3 position;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6609D8", Offset = "0x6609D8")]
		public Color goodColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660A10", Offset = "0x660A10")]
		public Color warnColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660A48", Offset = "0x660A48")]
		public Color badColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float updateInterval = 0.5f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected int framesCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected float framesTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Canvas canvas;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Text text;

		[Address(RVA = "0xA81FE4", Offset = "0xA81FE4", VA = "0xA81FE4", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA82094", Offset = "0xA82094", VA = "0xA82094", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA82168", Offset = "0xA82168", VA = "0xA82168", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA82370", Offset = "0xA82370", VA = "0xA82370", Slot = "7")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Address(RVA = "0xA82450", Offset = "0xA82450", VA = "0xA82450", Slot = "8")]
		protected virtual void InitCanvas()
		{
		}

		[Address(RVA = "0xA825F0", Offset = "0xA825F0", VA = "0xA825F0", Slot = "9")]
		protected virtual void SetCanvasCamera()
		{
		}

		[Address(RVA = "0xA826DC", Offset = "0xA826DC", VA = "0xA826DC")]
		public VRTK_FramesPerSecondViewer()
		{
		}
	}
	public struct ObjectTooltipEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string newText;
	}
	public delegate void ObjectTooltipEventHandler(object sender, ObjectTooltipEventArgs e);
	public class VRTK_ObjectTooltip : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660A80", Offset = "0x660A80")]
		public string displayText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660AB8", Offset = "0x660AB8")]
		public int fontSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660AF0", Offset = "0x660AF0")]
		public Vector2 containerSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660B28", Offset = "0x660B28")]
		public Transform drawLineFrom;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660B60", Offset = "0x660B60")]
		public Transform drawLineTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660B98", Offset = "0x660B98")]
		public float lineWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660BD0", Offset = "0x660BD0")]
		public Color fontColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660C08", Offset = "0x660C08")]
		public Color containerColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660C40", Offset = "0x660C40")]
		public Color lineColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660C78", Offset = "0x660C78")]
		public bool alwaysFaceHeadset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected LineRenderer line;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Transform headset;

		public event ObjectTooltipEventHandler ObjectTooltipReset
		{
			[Address(RVA = "0xB3E574", Offset = "0xB3E574", VA = "0xB3E574")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C520", Offset = "0x67C520")]
			add
			{
			}
			[Address(RVA = "0xB3E660", Offset = "0xB3E660", VA = "0xB3E660")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C530", Offset = "0x67C530")]
			remove
			{
			}
		}

		public event ObjectTooltipEventHandler ObjectTooltipTextUpdated
		{
			[Address(RVA = "0xB3E74C", Offset = "0xB3E74C", VA = "0xB3E74C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C540", Offset = "0x67C540")]
			add
			{
			}
			[Address(RVA = "0xB3E838", Offset = "0xB3E838", VA = "0xB3E838")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C550", Offset = "0x67C550")]
			remove
			{
			}
		}

		[Address(RVA = "0xB3E924", Offset = "0xB3E924", VA = "0xB3E924", Slot = "4")]
		public virtual void OnObjectTooltipReset(ObjectTooltipEventArgs e)
		{
		}

		[Address(RVA = "0xB3E948", Offset = "0xB3E948", VA = "0xB3E948", Slot = "5")]
		public virtual void OnObjectTooltipTextUpdated(ObjectTooltipEventArgs e)
		{
		}

		[Address(RVA = "0xB3E96C", Offset = "0xB3E96C", VA = "0xB3E96C", Slot = "6")]
		public virtual void ResetTooltip()
		{
		}

		[Address(RVA = "0xB3EAFC", Offset = "0xB3EAFC", VA = "0xB3EAFC", Slot = "7")]
		public virtual void UpdateText(string newText)
		{
		}

		[Address(RVA = "0xB3EB48", Offset = "0xB3EB48", VA = "0xB3EB48", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB3EBB0", Offset = "0xB3EBB0", VA = "0xB3EBB0", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB3EC2C", Offset = "0xB3EC2C", VA = "0xB3EC2C", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xB3EC94", Offset = "0xB3EC94", VA = "0xB3EC94", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB3ECFC", Offset = "0xB3ECFC", VA = "0xB3ECFC", Slot = "12")]
		protected virtual ObjectTooltipEventArgs SetEventPayload(string newText = "")
		{
			return default(ObjectTooltipEventArgs);
		}

		[Address(RVA = "0xB3ED04", Offset = "0xB3ED04", VA = "0xB3ED04", Slot = "13")]
		protected virtual void SetContainer()
		{
		}

		[Address(RVA = "0xB3EE90", Offset = "0xB3EE90", VA = "0xB3EE90", Slot = "14")]
		protected virtual void SetText(string name)
		{
		}

		[Address(RVA = "0xB3F044", Offset = "0xB3F044", VA = "0xB3F044", Slot = "15")]
		protected virtual void SetLine()
		{
		}

		[Address(RVA = "0xB3F2B0", Offset = "0xB3F2B0", VA = "0xB3F2B0", Slot = "16")]
		protected virtual void DrawLine()
		{
		}

		[Address(RVA = "0xB3F3FC", Offset = "0xB3F3FC", VA = "0xB3F3FC")]
		public VRTK_ObjectTooltip()
		{
		}
	}
	public class VRTK_PanelMenuController : MonoBehaviour
	{
		public enum TouchpadPressPosition
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Top,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Bottom,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Left,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B090", Offset = "0x65B090")]
		private sealed class <TweenMenuScale>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool show;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_PanelMenuController <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <targetScale>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <direction>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__4;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xB42460", Offset = "0xB42460", VA = "0xB42460", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xB424D0", Offset = "0xB424D0", VA = "0xB424D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xB413A0", Offset = "0xB413A0", VA = "0xB413A0")]
			[DebuggerHidden]
			public <TweenMenuScale>d__39(int <>1__state)
			{
			}

			[Address(RVA = "0xB41FC8", Offset = "0xB41FC8", VA = "0xB41FC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xB41FCC", Offset = "0xB41FCC", VA = "0xB41FCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xB42468", Offset = "0xB42468", VA = "0xB42468", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660CD0", Offset = "0x660CD0")]
		public GameObject rotateTowards;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660D08", Offset = "0x660D08")]
		public float zoomScaleMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660D40", Offset = "0x660D40")]
		public VRTK_PanelMenuItemController topPanelMenuItemController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660D78", Offset = "0x660D78")]
		public VRTK_PanelMenuItemController bottomPanelMenuItemController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660DB0", Offset = "0x660DB0")]
		public VRTK_PanelMenuItemController leftPanelMenuItemController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660DE8", Offset = "0x660DE8")]
		public VRTK_PanelMenuItemController rightPanelMenuItemController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float CanvasScaleSize = 0.001f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float AngleTolerance = 30f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float SwipeMinDist = 0.2f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float SwipeMinVelocity = 4f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_PanelMenuItemController currentPanelMenuItemController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject interactableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject canvasObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected readonly Vector2 xAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected readonly Vector2 yAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector2 touchStartPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector2 touchEndPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float touchStartTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected float currentAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool isTrackingSwipe;

		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		protected bool isPendingSwipeCheck;

		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool isGrabbed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		protected bool isShown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Coroutine tweenMenuScaleRoutine;

		[Address(RVA = "0xB3FFE4", Offset = "0xB3FFE4", VA = "0xB3FFE4", Slot = "4")]
		public virtual void ToggleMenu()
		{
		}

		[Address(RVA = "0xB40004", Offset = "0xB40004", VA = "0xB40004", Slot = "5")]
		public virtual void ShowMenu()
		{
		}

		[Address(RVA = "0xB4002C", Offset = "0xB4002C", VA = "0xB4002C", Slot = "6")]
		public virtual void HideMenu(bool force)
		{
		}

		[Address(RVA = "0xB40054", Offset = "0xB40054", VA = "0xB40054", Slot = "7")]
		public virtual void HideMenuImmediate()
		{
		}

		[Address(RVA = "0xB401C4", Offset = "0xB401C4", VA = "0xB401C4", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB4023C", Offset = "0xB4023C", VA = "0xB4023C", Slot = "9")]
		protected virtual void Start()
		{
		}

		[Address(RVA = "0xB40740", Offset = "0xB40740", VA = "0xB40740", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xB407A8", Offset = "0xB407A8", VA = "0xB407A8", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB40BFC", Offset = "0xB40BFC", VA = "0xB40BFC", Slot = "12")]
		protected virtual void Initialize()
		{
		}

		[Address(RVA = "0xB40DEC", Offset = "0xB40DEC", VA = "0xB40DEC", Slot = "13")]
		protected virtual void BindControllerEvents()
		{
		}

		[Address(RVA = "0xB40F88", Offset = "0xB40F88", VA = "0xB40F88", Slot = "14")]
		protected virtual void UnbindControllerEvents()
		{
		}

		[Address(RVA = "0xB41124", Offset = "0xB41124", VA = "0xB41124", Slot = "15")]
		protected virtual void HandlePanelMenuItemControllerVisibility(VRTK_PanelMenuItemController targetPanelItemController)
		{
		}

		[Address(RVA = "0xB41290", Offset = "0xB41290", VA = "0xB41290", Slot = "16")]
		protected virtual void InitTweenMenuScale(bool show)
		{
		}

		[Address(RVA = "0xB41304", Offset = "0xB41304", VA = "0xB41304", Slot = "17")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C560", Offset = "0x67C560")]
		protected virtual IEnumerator TweenMenuScale(bool show)
		{
			return null;
		}

		[Address(RVA = "0xB413CC", Offset = "0xB413CC", VA = "0xB413CC", Slot = "18")]
		protected virtual void DoInteractableObjectIsGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB4148C", Offset = "0xB4148C", VA = "0xB4148C", Slot = "19")]
		protected virtual void DoInteractableObjectIsUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB41538", Offset = "0xB41538", VA = "0xB41538", Slot = "20")]
		protected virtual void DoTouchpadPress(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xB416D8", Offset = "0xB416D8", VA = "0xB416D8", Slot = "21")]
		protected virtual void DoTouchpadTouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xB41724", Offset = "0xB41724", VA = "0xB41724", Slot = "22")]
		protected virtual void DoTouchpadUntouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xB41730", Offset = "0xB41730", VA = "0xB41730", Slot = "23")]
		protected virtual void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xB417D0", Offset = "0xB417D0", VA = "0xB417D0", Slot = "24")]
		protected virtual void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xB417EC", Offset = "0xB417EC", VA = "0xB417EC", Slot = "25")]
		protected virtual void ChangeAngle(float angle, [Optional] object sender)
		{
		}

		[Address(RVA = "0xB417F4", Offset = "0xB417F4", VA = "0xB417F4", Slot = "26")]
		protected virtual void CalculateSwipeAction()
		{
		}

		[Address(RVA = "0xB41A4C", Offset = "0xB41A4C", VA = "0xB41A4C", Slot = "27")]
		protected virtual TouchpadPressPosition CalculateTouchpadPressPosition()
		{
			return default(TouchpadPressPosition);
		}

		[Address(RVA = "0xB41B20", Offset = "0xB41B20", VA = "0xB41B20", Slot = "28")]
		protected virtual void OnSwipeLeft()
		{
		}

		[Address(RVA = "0xB41BC8", Offset = "0xB41BC8", VA = "0xB41BC8", Slot = "29")]
		protected virtual void OnSwipeRight()
		{
		}

		[Address(RVA = "0xB41C74", Offset = "0xB41C74", VA = "0xB41C74", Slot = "30")]
		protected virtual void OnSwipeTop()
		{
		}

		[Address(RVA = "0xB41D20", Offset = "0xB41D20", VA = "0xB41D20", Slot = "31")]
		protected virtual void OnSwipeBottom()
		{
		}

		[Address(RVA = "0xB41DCC", Offset = "0xB41DCC", VA = "0xB41DCC", Slot = "32")]
		protected virtual void OnTriggerPressed()
		{
		}

		[Address(RVA = "0xB41E78", Offset = "0xB41E78", VA = "0xB41E78", Slot = "33")]
		protected virtual float CalculateAngle(ControllerInteractionEventArgs e)
		{
			return default(float);
		}

		[Address(RVA = "0xB41E80", Offset = "0xB41E80", VA = "0xB41E80", Slot = "34")]
		protected virtual float NormAngle(float currentDegree, float maxAngle = 360f)
		{
			return default(float);
		}

		[Address(RVA = "0xB41E90", Offset = "0xB41E90", VA = "0xB41E90", Slot = "35")]
		protected virtual bool CheckAnglePosition(float currentDegree, float tolerance, float targetDegree)
		{
			return default(bool);
		}

		[Address(RVA = "0xB41F44", Offset = "0xB41F44", VA = "0xB41F44")]
		public VRTK_PanelMenuController()
		{
		}
	}
	public struct PanelMenuItemControllerEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactableObject;
	}
	public delegate void PanelMenuItemControllerEventHandler(object sender, PanelMenuItemControllerEventArgs e);
	public class VRTK_PanelMenuItemController : MonoBehaviour
	{
		public event PanelMenuItemControllerEventHandler PanelMenuItemShowing
		{
			[Address(RVA = "0xB424D8", Offset = "0xB424D8", VA = "0xB424D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C5C4", Offset = "0x67C5C4")]
			add
			{
			}
			[Address(RVA = "0xB425C4", Offset = "0xB425C4", VA = "0xB425C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C5D4", Offset = "0x67C5D4")]
			remove
			{
			}
		}

		public event PanelMenuItemControllerEventHandler PanelMenuItemHiding
		{
			[Address(RVA = "0xB426B0", Offset = "0xB426B0", VA = "0xB426B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C5E4", Offset = "0x67C5E4")]
			add
			{
			}
			[Address(RVA = "0xB4279C", Offset = "0xB4279C", VA = "0xB4279C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C5F4", Offset = "0x67C5F4")]
			remove
			{
			}
		}

		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeLeft
		{
			[Address(RVA = "0xB42888", Offset = "0xB42888", VA = "0xB42888")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C604", Offset = "0x67C604")]
			add
			{
			}
			[Address(RVA = "0xB42974", Offset = "0xB42974", VA = "0xB42974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C614", Offset = "0x67C614")]
			remove
			{
			}
		}

		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeRight
		{
			[Address(RVA = "0xB42A60", Offset = "0xB42A60", VA = "0xB42A60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C624", Offset = "0x67C624")]
			add
			{
			}
			[Address(RVA = "0xB42B4C", Offset = "0xB42B4C", VA = "0xB42B4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C634", Offset = "0x67C634")]
			remove
			{
			}
		}

		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeTop
		{
			[Address(RVA = "0xB42C38", Offset = "0xB42C38", VA = "0xB42C38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C644", Offset = "0x67C644")]
			add
			{
			}
			[Address(RVA = "0xB42D24", Offset = "0xB42D24", VA = "0xB42D24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C654", Offset = "0x67C654")]
			remove
			{
			}
		}

		public event PanelMenuItemControllerEventHandler PanelMenuItemSwipeBottom
		{
			[Address(RVA = "0xB42E10", Offset = "0xB42E10", VA = "0xB42E10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C664", Offset = "0x67C664")]
			add
			{
			}
			[Address(RVA = "0xB42EFC", Offset = "0xB42EFC", VA = "0xB42EFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C674", Offset = "0x67C674")]
			remove
			{
			}
		}

		public event PanelMenuItemControllerEventHandler PanelMenuItemTriggerPressed
		{
			[Address(RVA = "0xB42FE8", Offset = "0xB42FE8", VA = "0xB42FE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C684", Offset = "0x67C684")]
			add
			{
			}
			[Address(RVA = "0xB430D4", Offset = "0xB430D4", VA = "0xB430D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C694", Offset = "0x67C694")]
			remove
			{
			}
		}

		[Address(RVA = "0xB431C0", Offset = "0xB431C0", VA = "0xB431C0", Slot = "4")]
		public virtual void OnPanelMenuItemShowing(PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0xB431E4", Offset = "0xB431E4", VA = "0xB431E4", Slot = "5")]
		public virtual void OnPanelMenuItemHiding(PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0xB43208", Offset = "0xB43208", VA = "0xB43208", Slot = "6")]
		public virtual void OnPanelMenuItemSwipeLeft(PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0xB4322C", Offset = "0xB4322C", VA = "0xB4322C", Slot = "7")]
		public virtual void OnPanelMenuItemSwipeRight(PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0xB43250", Offset = "0xB43250", VA = "0xB43250", Slot = "8")]
		public virtual void OnPanelMenuItemSwipeTop(PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0xB43274", Offset = "0xB43274", VA = "0xB43274", Slot = "9")]
		public virtual void OnPanelMenuItemSwipeBottom(PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0xB43298", Offset = "0xB43298", VA = "0xB43298", Slot = "10")]
		public virtual PanelMenuItemControllerEventArgs SetPanelMenuItemEvent(GameObject interactableObject)
		{
			return default(PanelMenuItemControllerEventArgs);
		}

		[Address(RVA = "0xB432A0", Offset = "0xB432A0", VA = "0xB432A0", Slot = "11")]
		public virtual void Show(GameObject interactableObject)
		{
		}

		[Address(RVA = "0xB43310", Offset = "0xB43310", VA = "0xB43310", Slot = "12")]
		public virtual void Hide(GameObject interactableObject)
		{
		}

		[Address(RVA = "0xB43380", Offset = "0xB43380", VA = "0xB43380", Slot = "13")]
		public virtual void SwipeLeft(GameObject interactableObject)
		{
		}

		[Address(RVA = "0xB433B8", Offset = "0xB433B8", VA = "0xB433B8", Slot = "14")]
		public virtual void SwipeRight(GameObject interactableObject)
		{
		}

		[Address(RVA = "0xB433F0", Offset = "0xB433F0", VA = "0xB433F0", Slot = "15")]
		public virtual void SwipeTop(GameObject interactableObject)
		{
		}

		[Address(RVA = "0xB43428", Offset = "0xB43428", VA = "0xB43428", Slot = "16")]
		public virtual void SwipeBottom(GameObject interactableObject)
		{
		}

		[Address(RVA = "0xB43460", Offset = "0xB43460", VA = "0xB43460", Slot = "17")]
		public virtual void TriggerPressed(GameObject interactableObject)
		{
		}

		[Address(RVA = "0xB4349C", Offset = "0xB4349C", VA = "0xB4349C", Slot = "18")]
		protected virtual void OnPanelMenuItemTriggerPressed(PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0xB434C0", Offset = "0xB434C0", VA = "0xB434C0")]
		public VRTK_PanelMenuItemController()
		{
		}
	}
	public delegate void PointerDirectionIndicatorEventHandler(object sender);
	public class VRTK_PointerDirectionIndicator : MonoBehaviour
	{
		public enum VisibilityState
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnWhenPointerActive,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AlwaysOnWithPointerCursor
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660E90", Offset = "0x660E90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660E90", Offset = "0x660E90")]
		public Vector2 touchpadDeadzone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660EF0", Offset = "0x660EF0")]
		public VRTK_ControllerEvents.Vector2AxisAlias coordinateAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x660F28", Offset = "0x660F28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660F28", Offset = "0x660F28")]
		public bool includeHeadsetOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660F88", Offset = "0x660F88")]
		public bool displayOnInvalidLocation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660FC0", Offset = "0x660FC0")]
		public bool usePointerColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x660FF8", Offset = "0x660FF8")]
		public VisibilityState indicatorVisibility;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x661030", Offset = "0x661030")]
		public bool isActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected GameObject validLocation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject invalidLocation;

		public event PointerDirectionIndicatorEventHandler PointerDirectionIndicatorPositionSet
		{
			[Address(RVA = "0x945920", Offset = "0x945920", VA = "0x945920")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C6A4", Offset = "0x67C6A4")]
			add
			{
			}
			[Address(RVA = "0x945A0C", Offset = "0x945A0C", VA = "0x945A0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C6B4", Offset = "0x67C6B4")]
			remove
			{
			}
		}

		[Address(RVA = "0x945AF8", Offset = "0x945AF8", VA = "0x945AF8", Slot = "4")]
		public virtual void OnPointerDirectionIndicatorPositionSet()
		{
		}

		[Address(RVA = "0x945B14", Offset = "0x945B14", VA = "0x945B14", Slot = "5")]
		public virtual void Initialize(VRTK_ControllerEvents events)
		{
		}

		[Address(RVA = "0x945B9C", Offset = "0x945B9C", VA = "0x945B9C", Slot = "6")]
		public virtual void SetPosition(bool active, Vector3 position)
		{
		}

		[Address(RVA = "0x945C4C", Offset = "0x945C4C", VA = "0x945C4C", Slot = "7")]
		public virtual Quaternion GetRotation()
		{
			return default(Quaternion);
		}

		[Address(RVA = "0x945D3C", Offset = "0x945D3C", VA = "0x945D3C", Slot = "8")]
		public virtual void SetMaterialColor(Color color, bool validity)
		{
		}

		[Address(RVA = "0x945F08", Offset = "0x945F08", VA = "0x945F08", Slot = "9")]
		public virtual VRTK_ControllerEvents GetControllerEvents()
		{
			return null;
		}

		[Address(RVA = "0x945F10", Offset = "0x945F10", VA = "0x945F10", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x94600C", Offset = "0x94600C", VA = "0x94600C", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x9461C8", Offset = "0x9461C8", VA = "0x9461C8", Slot = "12")]
		protected virtual bool InsideDeadzone(Vector2 currentAxis)
		{
			return default(bool);
		}

		[Address(RVA = "0x9462C4", Offset = "0x9462C4", VA = "0x9462C4")]
		public VRTK_PointerDirectionIndicator()
		{
		}
	}
	public class RadialButtonIcon : MonoBehaviour
	{
		[Address(RVA = "0xCED6EC", Offset = "0xCED6EC", VA = "0xCED6EC")]
		public RadialButtonIcon()
		{
		}
	}
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655E08", Offset = "0x655E08")]
	public class UICircle : Graphic
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x661050", Offset = "0x661050")]
		public int fillPercent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool fill;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int thickness;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66106C", Offset = "0x66106C")]
		public int segments;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		protected Texture setTexture;

		public override Texture mainTexture
		{
			[Address(RVA = "0x75DF74", Offset = "0x75DF74", VA = "0x75DF74", Slot = "35")]
			get
			{
				return null;
			}
		}

		public Texture texture
		{
			[Address(RVA = "0x75E020", Offset = "0x75E020", VA = "0x75E020")]
			get
			{
				return null;
			}
			[Address(RVA = "0x75E028", Offset = "0x75E028", VA = "0x75E028")]
			set
			{
			}
		}

		[Address(RVA = "0x75E0E4", Offset = "0x75E0E4", VA = "0x75E0E4", Slot = "50")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x75E1C0", Offset = "0x75E1C0", VA = "0x75E1C0", Slot = "51")]
		protected virtual UIVertex[] SetVbo(Vector2[] vertices, Vector2[] uvs)
		{
			return null;
		}

		[Address(RVA = "0x75E440", Offset = "0x75E440", VA = "0x75E440", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Address(RVA = "0x75E994", Offset = "0x75E994", VA = "0x75E994")]
		public UICircle()
		{
		}
	}
	public class VRTK_IndependentRadialMenuController : VRTK_RadialMenuController
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B0A0", Offset = "0x65B0A0")]
		private sealed class <DelayedSetColliderEnabled>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_IndependentRadialMenuController <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool enabled;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public InteractableObjectEventArgs e;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xEA19D4", Offset = "0xEA19D4", VA = "0xEA19D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xEA1A44", Offset = "0xEA1A44", VA = "0xEA1A44", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xEA1800", Offset = "0xEA1800", VA = "0xEA1800")]
			[DebuggerHidden]
			public <DelayedSetColliderEnabled>d__33(int <>1__state)
			{
			}

			[Address(RVA = "0xEA18F0", Offset = "0xEA18F0", VA = "0xEA18F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xEA18F4", Offset = "0xEA18F4", VA = "0xEA18F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xEA19DC", Offset = "0xEA19DC", VA = "0xEA19DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661098", Offset = "0x661098")]
		public VRTK_InteractableObject eventsManager;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6610D0", Offset = "0x6610D0")]
		public bool addMenuCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661108", Offset = "0x661108")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x661108", Offset = "0x661108")]
		public float colliderRadiusMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66115C", Offset = "0x66115C")]
		public bool hideAfterExecution;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661194", Offset = "0x661194")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x661194", Offset = "0x661194")]
		public float offsetMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6611E8", Offset = "0x6611E8")]
		public GameObject rotateTowards;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected List<GameObject> interactingObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected HashSet<GameObject> collidingObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected SphereCollider menuCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Coroutine delayedSetColliderEnabledRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 desiredColliderCenter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Quaternion initialRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected bool isClicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		protected bool waitingToDisableCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected int counter;

		[Address(RVA = "0xE9F4E4", Offset = "0xE9F4E4", VA = "0xE9F4E4", Slot = "20")]
		public virtual void UpdateEventsManager()
		{
		}

		[Address(RVA = "0xE9F810", Offset = "0xE9F810", VA = "0xE9F810", Slot = "5")]
		protected override void Initialize()
		{
		}

		[Address(RVA = "0xE9FFD8", Offset = "0xE9FFD8", VA = "0xE9FFD8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Address(RVA = "0xEA0058", Offset = "0xEA0058", VA = "0xEA0058", Slot = "21")]
		protected virtual void Start()
		{
		}

		[Address(RVA = "0xEA0064", Offset = "0xEA0064", VA = "0xEA0064", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xEA024C", Offset = "0xEA024C", VA = "0xEA024C", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0xEA0428", Offset = "0xEA0428", VA = "0xEA0428", Slot = "22")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xEA0490", Offset = "0xEA0490", VA = "0xEA0490", Slot = "23")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xEA0944", Offset = "0xEA0944", VA = "0xEA0944", Slot = "24")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xEA09A4", Offset = "0xEA09A4", VA = "0xEA09A4", Slot = "13")]
		protected override void AttemptHapticPulse(float strength)
		{
		}

		[Address(RVA = "0xEA0A90", Offset = "0xEA0A90", VA = "0xEA0A90", Slot = "25")]
		protected virtual void ObjectClicked(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEA0B10", Offset = "0xEA0B10", VA = "0xEA0B10", Slot = "26")]
		protected virtual void ObjectUnClicked(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEA0C08", Offset = "0xEA0C08", VA = "0xEA0C08", Slot = "27")]
		protected virtual void ObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEA0D44", Offset = "0xEA0D44", VA = "0xEA0D44", Slot = "28")]
		protected virtual void ObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEA0F68", Offset = "0xEA0F68", VA = "0xEA0F68", Slot = "29")]
		protected virtual TouchAngleDeflection CalculateAngle(GameObject interactingObject)
		{
			return default(TouchAngleDeflection);
		}

		[Address(RVA = "0xEA123C", Offset = "0xEA123C", VA = "0xEA123C", Slot = "30")]
		protected virtual float AngleSigned(Vector3 v1, Vector3 v2, Vector3 n)
		{
			return default(float);
		}

		[Address(RVA = "0xEA1390", Offset = "0xEA1390", VA = "0xEA1390", Slot = "31")]
		protected virtual void ImmediatelyHideMenu(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEA13F4", Offset = "0xEA13F4", VA = "0xEA13F4", Slot = "32")]
		protected virtual void SetColliderState(bool state, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEA1728", Offset = "0xEA1728", VA = "0xEA1728", Slot = "33")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C6C4", Offset = "0x67C6C4")]
		protected virtual IEnumerator DelayedSetColliderEnabled(bool enabled, float delay, InteractableObjectEventArgs e)
		{
			return null;
		}

		[Address(RVA = "0xEA182C", Offset = "0xEA182C", VA = "0xEA182C")]
		public VRTK_IndependentRadialMenuController()
		{
		}
	}
	public struct TouchAngleDeflection
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float angle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float deflection;

		[Address(RVA = "0x75DF6C", Offset = "0x75DF6C", VA = "0x75DF6C")]
		public TouchAngleDeflection(float angle, float deflection)
		{
		}
	}
	public delegate void HapticPulseEventHandler(float strength);
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655E18", Offset = "0x655E18")]
	public class VRTK_RadialMenu : MonoBehaviour
	{
		[Serializable]
		public class RadialMenuButton
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Sprite ButtonIcon;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEvent OnClick;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEvent OnHold;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEvent OnHoverEnter;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public UnityEvent OnHoverExit;

			[Address(RVA = "0x949AFC", Offset = "0x949AFC", VA = "0x949AFC")]
			public RadialMenuButton()
			{
			}
		}

		public enum ButtonEvent
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			hoverOn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			hoverOff,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			click,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			unclick
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B0B0", Offset = "0x65B0B0")]
		private sealed class <TweenMenuScale>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool show;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_RadialMenu <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <targetScale>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <Dir>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__4;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x949A84", Offset = "0x949A84", VA = "0x949A84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x949AF4", Offset = "0x949AF4", VA = "0x949AF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x9494E8", Offset = "0x9494E8", VA = "0x9494E8")]
			[DebuggerHidden]
			public <TweenMenuScale>d__40(int <>1__state)
			{
			}

			[Address(RVA = "0x949714", Offset = "0x949714", VA = "0x949714", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x949718", Offset = "0x949718", VA = "0x949718", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x949A8C", Offset = "0x949A8C", VA = "0x949A8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661220", Offset = "0x661220")]
		public List<RadialMenuButton> buttons;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661258", Offset = "0x661258")]
		public GameObject buttonPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661290", Offset = "0x661290")]
		public bool generateOnAwake;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6612C8", Offset = "0x6612C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6612C8", Offset = "0x6612C8")]
		public float buttonThickness;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66131C", Offset = "0x66131C")]
		public Color buttonColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661354", Offset = "0x661354")]
		public float offsetDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66138C", Offset = "0x66138C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66138C", Offset = "0x66138C")]
		public float offsetRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6613E4", Offset = "0x6613E4")]
		public bool rotateIcons;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66141C", Offset = "0x66141C")]
		public float iconMargin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661454", Offset = "0x661454")]
		public bool isShown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66148C", Offset = "0x66148C")]
		public bool hideOnRelease;

		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6614C4", Offset = "0x6614C4")]
		public bool executeOnUnclick;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6614FC", Offset = "0x6614FC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6614FC", Offset = "0x6614FC")]
		public float baseHapticStrength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661550", Offset = "0x661550")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x661550", Offset = "0x661550")]
		public float deadZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6615B4", Offset = "0x6615B4")]
		public List<GameObject> menuButtons;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected int currentHover;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected int currentPress;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Coroutine tweenMenuScaleRoutine;

		public event HapticPulseEventHandler FireHapticPulse
		{
			[Address(RVA = "0x947B8C", Offset = "0x947B8C", VA = "0x947B8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C728", Offset = "0x67C728")]
			add
			{
			}
			[Address(RVA = "0x947C78", Offset = "0x947C78", VA = "0x947C78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C738", Offset = "0x67C738")]
			remove
			{
			}
		}

		[Address(RVA = "0x947D64", Offset = "0x947D64", VA = "0x947D64", Slot = "4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67C748", Offset = "0x67C748")]
		public virtual void HoverButton(float angle)
		{
		}

		[Address(RVA = "0x947DA8", Offset = "0x947DA8", VA = "0x947DA8", Slot = "5")]
		public virtual void HoverButton(TouchAngleDeflection givenTouchAngleDeflection)
		{
		}

		[Address(RVA = "0x947DBC", Offset = "0x947DBC", VA = "0x947DBC", Slot = "6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67C780", Offset = "0x67C780")]
		public virtual void ClickButton(float angle)
		{
		}

		[Address(RVA = "0x947E00", Offset = "0x947E00", VA = "0x947E00", Slot = "7")]
		public virtual void ClickButton(TouchAngleDeflection givenTouchAngleDeflection)
		{
		}

		[Address(RVA = "0x947E14", Offset = "0x947E14", VA = "0x947E14", Slot = "8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67C7B8", Offset = "0x67C7B8")]
		public virtual void UnClickButton(float angle)
		{
		}

		[Address(RVA = "0x947E58", Offset = "0x947E58", VA = "0x947E58", Slot = "9")]
		public virtual void UnClickButton(TouchAngleDeflection givenTouchAngleDeflection)
		{
		}

		[Address(RVA = "0x947E6C", Offset = "0x947E6C", VA = "0x947E6C", Slot = "10")]
		public virtual void ToggleMenu()
		{
		}

		[Address(RVA = "0x947E90", Offset = "0x947E90", VA = "0x947E90", Slot = "11")]
		public virtual void StopTouching()
		{
		}

		[Address(RVA = "0x948008", Offset = "0x948008", VA = "0x948008", Slot = "12")]
		public virtual void ShowMenu()
		{
		}

		[Address(RVA = "0x948030", Offset = "0x948030", VA = "0x948030", Slot = "13")]
		public virtual RadialMenuButton GetButton(int id)
		{
			return null;
		}

		[Address(RVA = "0x9480D8", Offset = "0x9480D8", VA = "0x9480D8", Slot = "14")]
		public virtual void HideMenu(bool force)
		{
		}

		[Address(RVA = "0x948108", Offset = "0x948108", VA = "0x948108")]
		public void RegenerateButtons()
		{
		}

		[Address(RVA = "0x948BB8", Offset = "0x948BB8", VA = "0x948BB8")]
		public void AddButton(RadialMenuButton newButton)
		{
		}

		[Address(RVA = "0x948C24", Offset = "0x948C24", VA = "0x948C24", Slot = "15")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x948D14", Offset = "0x948D14", VA = "0x948D14", Slot = "16")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x948DB8", Offset = "0x948DB8", VA = "0x948DB8", Slot = "17")]
		protected virtual void InteractButton(TouchAngleDeflection givenTouchAngleDeflection, ButtonEvent evt)
		{
		}

		[Address(RVA = "0x9493E8", Offset = "0x9493E8", VA = "0x9493E8", Slot = "18")]
		protected virtual void InitTweenMenuScale(bool isShown)
		{
		}

		[Address(RVA = "0x94944C", Offset = "0x94944C", VA = "0x94944C", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C7F0", Offset = "0x67C7F0")]
		protected virtual IEnumerator TweenMenuScale(bool show)
		{
			return null;
		}

		[Address(RVA = "0x949514", Offset = "0x949514", VA = "0x949514", Slot = "20")]
		protected virtual void AttempHapticPulse(float strength)
		{
		}

		[Address(RVA = "0x949530", Offset = "0x949530", VA = "0x949530", Slot = "21")]
		protected virtual void RemoveAllButtons()
		{
		}

		[Address(RVA = "0x949650", Offset = "0x949650", VA = "0x949650")]
		public VRTK_RadialMenu()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x655E28", Offset = "0x655E28")]
	public class VRTK_RadialMenuController : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6615EC", Offset = "0x6615EC")]
		public VRTK_ControllerEvents events;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_RadialMenu menu;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected TouchAngleDeflection currentTad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool touchpadTouched;

		[Address(RVA = "0x949BB4", Offset = "0x949BB4", VA = "0x949BB4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x949C18", Offset = "0x949C18", VA = "0x949C18", Slot = "5")]
		protected virtual void Initialize()
		{
		}

		[Address(RVA = "0x949CA8", Offset = "0x949CA8", VA = "0x949CA8", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x94A064", Offset = "0x94A064", VA = "0x94A064", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x94A244", Offset = "0x94A244", VA = "0x94A244", Slot = "8")]
		protected virtual void DoClickButton([Optional] object sender)
		{
		}

		[Address(RVA = "0x94A28C", Offset = "0x94A28C", VA = "0x94A28C", Slot = "9")]
		protected virtual void DoUnClickButton([Optional] object sender)
		{
		}

		[Address(RVA = "0x94A2D4", Offset = "0x94A2D4", VA = "0x94A2D4", Slot = "10")]
		protected virtual void DoShowMenu(TouchAngleDeflection initialTad, [Optional] object sender)
		{
		}

		[Address(RVA = "0x94A338", Offset = "0x94A338", VA = "0x94A338", Slot = "11")]
		protected virtual void DoHideMenu(bool force, [Optional] object sender)
		{
		}

		[Address(RVA = "0x94A3A4", Offset = "0x94A3A4", VA = "0x94A3A4", Slot = "12")]
		protected virtual void DoChangeAngle(TouchAngleDeflection givenTouchAngleDeflection, [Optional] object sender)
		{
		}

		[Address(RVA = "0x94A3F4", Offset = "0x94A3F4", VA = "0x94A3F4", Slot = "13")]
		protected virtual void AttemptHapticPulse(float strength)
		{
		}

		[Address(RVA = "0x94A4DC", Offset = "0x94A4DC", VA = "0x94A4DC", Slot = "14")]
		protected virtual void DoTouchpadClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x94A4EC", Offset = "0x94A4EC", VA = "0x94A4EC", Slot = "15")]
		protected virtual void DoTouchpadUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x94A4FC", Offset = "0x94A4FC", VA = "0x94A4FC", Slot = "16")]
		protected virtual void DoTouchpadTouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x94A578", Offset = "0x94A578", VA = "0x94A578", Slot = "17")]
		protected virtual void DoTouchpadUntouched(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x94A590", Offset = "0x94A590", VA = "0x94A590", Slot = "18")]
		protected virtual void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x94A610", Offset = "0x94A610", VA = "0x94A610", Slot = "19")]
		protected virtual TouchAngleDeflection CalculateAngle(ControllerInteractionEventArgs e)
		{
			return default(TouchAngleDeflection);
		}

		[Address(RVA = "0x94A64C", Offset = "0x94A64C", VA = "0x94A64C")]
		public VRTK_RadialMenuController()
		{
		}
	}
	public class VRTK_SDKSetupSwitcher : MonoBehaviour
	{
		protected enum ViewingState
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Status,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Selection
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B0C0", Offset = "0x65B0C0")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<VRTK_SDKSetup, bool> <>9__18_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static UnityAction <>9__20_0;

			[Address(RVA = "0x95C198", Offset = "0x95C198", VA = "0x95C198")]
			public <>c()
			{
			}

			[Address(RVA = "0x95C1A0", Offset = "0x95C1A0", VA = "0x95C1A0")]
			internal bool <Show>b__18_0(VRTK_SDKSetup setup)
			{
				return default(bool);
			}

			[Address(RVA = "0x95C250", Offset = "0x95C250", VA = "0x95C250")]
			internal void <AddSelectionButtons>b__20_0()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B0D0", Offset = "0x65B0D0")]
		private sealed class <>c__DisplayClass20_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public VRTK_SDKSetup[] setups;

			[Address(RVA = "0x95BFE8", Offset = "0x95BFE8", VA = "0x95BFE8")]
			public <>c__DisplayClass20_0()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B0E0", Offset = "0x65B0E0")]
		private sealed class <>c__DisplayClass20_1
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int indexCopy;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass20_0 CS$<>8__locals1;

			[Address(RVA = "0x95BFF0", Offset = "0x95BFF0", VA = "0x95BFF0")]
			public <>c__DisplayClass20_1()
			{
			}

			[Address(RVA = "0x95C2B0", Offset = "0x95C2B0", VA = "0x95C2B0")]
			internal void <AddSelectionButtons>b__1()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x661624", Offset = "0x661624")]
		[SerializeField]
		protected Camera fallbackCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected EventSystem eventSystem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x661680", Offset = "0x661680")]
		[SerializeField]
		protected Text currentText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected RectTransform statusPanel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected RectTransform selectionPanel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected Button switchButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected Button cancelButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected Button chooseButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected bool playareaSync;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected readonly List<GameObject> chooseButtonGameObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform currentPlayarea;

		[Address(RVA = "0x95ACA4", Offset = "0x95ACA4", VA = "0x95ACA4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x95AD64", Offset = "0x95AD64", VA = "0x95AD64", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x95AEE0", Offset = "0x95AEE0", VA = "0x95AEE0", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x95B05C", Offset = "0x95B05C", VA = "0x95B05C", Slot = "7")]
		protected virtual void OnLoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Address(RVA = "0x95B2A4", Offset = "0x95B2A4", VA = "0x95B2A4", Slot = "8")]
		protected virtual void OnSwitchButtonClick()
		{
		}

		[Address(RVA = "0x95B2B4", Offset = "0x95B2B4", VA = "0x95B2B4", Slot = "9")]
		protected virtual void OnCancelButtonClick()
		{
		}

		[Address(RVA = "0x95B2C4", Offset = "0x95B2C4", VA = "0x95B2C4", Slot = "10")]
		protected virtual void Show(ViewingState viewingState)
		{
		}

		[Address(RVA = "0x95B74C", Offset = "0x95B74C", VA = "0x95B74C", Slot = "11")]
		protected virtual void UpdateCurrentText()
		{
		}

		[Address(RVA = "0x95B840", Offset = "0x95B840", VA = "0x95B840", Slot = "12")]
		protected virtual void AddSelectionButtons()
		{
		}

		[Address(RVA = "0x95BFF8", Offset = "0x95BFF8", VA = "0x95BFF8", Slot = "13")]
		protected virtual void RemoveCreatedChooseButtons()
		{
		}

		[Address(RVA = "0x95C0BC", Offset = "0x95C0BC", VA = "0x95C0BC")]
		public VRTK_SDKSetupSwitcher()
		{
		}
	}
	public struct SnapDropZoneEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject snappedObject;
	}
	public delegate void SnapDropZoneEventHandler(object sender, SnapDropZoneEventArgs e);
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655E8C", Offset = "0x655E8C")]
	public class VRTK_SnapDropZone : MonoBehaviour
	{
		public enum SnapTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			UseKinematic,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			UseJoint,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			UseParenting
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B0F0", Offset = "0x65B0F0")]
		private sealed class <CheckCanSnapObjectAtEndOfFrame>d__95 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SnapDropZone <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_InteractableObject interactableObjectCheck;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA36D0C", Offset = "0xA36D0C", VA = "0xA36D0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA36D7C", Offset = "0xA36D7C", VA = "0xA36D7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA337A0", Offset = "0xA337A0", VA = "0xA337A0")]
			[DebuggerHidden]
			public <CheckCanSnapObjectAtEndOfFrame>d__95(int <>1__state)
			{
			}

			[Address(RVA = "0xA36C48", Offset = "0xA36C48", VA = "0xA36C48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA36C4C", Offset = "0xA36C4C", VA = "0xA36C4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA36D14", Offset = "0xA36D14", VA = "0xA36D14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B100", Offset = "0x65B100")]
		private sealed class <UpdateTransformDimensions>d__96 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject ioCheck;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject endSettings;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float duration;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 endScale;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public VRTK_SnapDropZone <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <elapsedTime>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Transform <ioTransform>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Vector3 <startPosition>5__4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private Quaternion <startRotation>5__5;

			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Vector3 <startScale>5__6;

			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private bool <storedKinematicState>5__7;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA374AC", Offset = "0xA374AC", VA = "0xA374AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA3751C", Offset = "0xA3751C", VA = "0xA3751C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA338C0", Offset = "0xA338C0", VA = "0xA338C0")]
			[DebuggerHidden]
			public <UpdateTransformDimensions>d__96(int <>1__state)
			{
			}

			[Address(RVA = "0xA36EE0", Offset = "0xA36EE0", VA = "0xA36EE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA36EE4", Offset = "0xA36EE4", VA = "0xA36EE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA374B4", Offset = "0xA374B4", VA = "0xA374B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B110", Offset = "0x65B110")]
		private sealed class <AttemptForceSnapAtEndOfFrame>d__105 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject objectToSnap;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_SnapDropZone <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA36BD0", Offset = "0xA36BD0", VA = "0xA36BD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA36C40", Offset = "0xA36C40", VA = "0xA36C40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA343E8", Offset = "0xA343E8", VA = "0xA343E8")]
			[DebuggerHidden]
			public <AttemptForceSnapAtEndOfFrame>d__105(int <>1__state)
			{
			}

			[Address(RVA = "0xA36AE8", Offset = "0xA36AE8", VA = "0xA36AE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA36AEC", Offset = "0xA36AEC", VA = "0xA36AEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA36BD8", Offset = "0xA36BD8", VA = "0xA36BD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B120", Offset = "0x65B120")]
		private sealed class <OverridePreviousStateAtEndOfFrame>d__118 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject io;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform parent;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool kinematic;

			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			public bool grabbable;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA36E68", Offset = "0xA36E68", VA = "0xA36E68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA36ED8", Offset = "0xA36ED8", VA = "0xA36ED8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA36A0C", Offset = "0xA36A0C", VA = "0xA36A0C")]
			[DebuggerHidden]
			public <OverridePreviousStateAtEndOfFrame>d__118(int <>1__state)
			{
			}

			[Address(RVA = "0xA36D84", Offset = "0xA36D84", VA = "0xA36D84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA36D88", Offset = "0xA36D88", VA = "0xA36D88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA36E70", Offset = "0xA36E70", VA = "0xA36E70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66172C", Offset = "0x66172C")]
		public GameObject highlightObjectPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661764", Offset = "0x661764")]
		public SnapTypes snapType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66179C", Offset = "0x66179C")]
		public float snapDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6617D4", Offset = "0x6617D4")]
		public bool applyScalingOnSnap;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66180C", Offset = "0x66180C")]
		public bool cloneNewOnUnsnap;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661844", Offset = "0x661844")]
		public Color highlightColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66187C", Offset = "0x66187C")]
		public Color validHighlightColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6618B4", Offset = "0x6618B4")]
		public bool highlightAlwaysActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6618EC", Offset = "0x6618EC")]
		public VRTK_PolicyList validObjectListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661924", Offset = "0x661924")]
		public bool displayDropZoneInEditor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66195C", Offset = "0x66195C")]
		public VRTK_InteractableObject defaultSnappedInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x661994", Offset = "0x661994")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x661994", Offset = "0x661994")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x661994", Offset = "0x661994")]
		public GameObject defaultSnappedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GameObject previousPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject highlightContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected GameObject highlightObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected GameObject highlightEditorObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected List<VRTK_InteractableObject> currentValidSnapInteractableObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected VRTK_InteractableObject currentSnappedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected GameObject objectToClone;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool[] clonedObjectColliderStates;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool willSnap;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool isSnapped;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		protected bool wasSnapped;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		protected bool isHighlighted;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected VRTK_BaseHighlighter objectHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Coroutine transitionInPlaceRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Coroutine attemptTransitionAtEndOfFrameRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Coroutine checkCanSnapRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected bool originalJointCollisionState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Coroutine overridePreviousStateAtEndOfFrameRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string HIGHLIGHT_CONTAINER_NAME = "HighlightContainer";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string HIGHLIGHT_OBJECT_NAME = "HighlightObject";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string HIGHLIGHT_EDITOR_OBJECT_NAME = "EditorHighlightObject";

		public event SnapDropZoneEventHandler ObjectEnteredSnapDropZone
		{
			[Address(RVA = "0xA2FC78", Offset = "0xA2FC78", VA = "0xA2FC78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C854", Offset = "0x67C854")]
			add
			{
			}
			[Address(RVA = "0xA2FD64", Offset = "0xA2FD64", VA = "0xA2FD64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C864", Offset = "0x67C864")]
			remove
			{
			}
		}

		public event SnapDropZoneEventHandler ObjectExitedSnapDropZone
		{
			[Address(RVA = "0xA2FE50", Offset = "0xA2FE50", VA = "0xA2FE50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C874", Offset = "0x67C874")]
			add
			{
			}
			[Address(RVA = "0xA2FF3C", Offset = "0xA2FF3C", VA = "0xA2FF3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C884", Offset = "0x67C884")]
			remove
			{
			}
		}

		public event SnapDropZoneEventHandler ObjectSnappedToDropZone
		{
			[Address(RVA = "0xA30028", Offset = "0xA30028", VA = "0xA30028")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C894", Offset = "0x67C894")]
			add
			{
			}
			[Address(RVA = "0xA30114", Offset = "0xA30114", VA = "0xA30114")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C8A4", Offset = "0x67C8A4")]
			remove
			{
			}
		}

		public event SnapDropZoneEventHandler ObjectUnsnappedFromDropZone
		{
			[Address(RVA = "0xA30200", Offset = "0xA30200", VA = "0xA30200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C8B4", Offset = "0x67C8B4")]
			add
			{
			}
			[Address(RVA = "0xA302EC", Offset = "0xA302EC", VA = "0xA302EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67C8C4", Offset = "0x67C8C4")]
			remove
			{
			}
		}

		[Address(RVA = "0xA303D8", Offset = "0xA303D8", VA = "0xA303D8", Slot = "4")]
		public virtual void OnObjectEnteredSnapDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0xA303FC", Offset = "0xA303FC", VA = "0xA303FC", Slot = "5")]
		public virtual void OnObjectExitedSnapDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0xA30420", Offset = "0xA30420", VA = "0xA30420", Slot = "6")]
		public virtual void OnObjectSnappedToDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0xA30444", Offset = "0xA30444", VA = "0xA30444", Slot = "7")]
		public virtual void OnObjectUnsnappedFromDropZone(SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0xA30498", Offset = "0xA30498", VA = "0xA30498", Slot = "8")]
		public virtual SnapDropZoneEventArgs SetSnapDropZoneEvent(GameObject interactableObject)
		{
			return default(SnapDropZoneEventArgs);
		}

		[Address(RVA = "0xA304A0", Offset = "0xA304A0", VA = "0xA304A0", Slot = "9")]
		public virtual void InitaliseHighlightObject(bool removeOldObject = false)
		{
		}

		[Address(RVA = "0xA30580", Offset = "0xA30580", VA = "0xA30580", Slot = "10")]
		public virtual void ForceSnap(GameObject objectToSnap)
		{
		}

		[Address(RVA = "0xA305FC", Offset = "0xA305FC", VA = "0xA305FC", Slot = "11")]
		protected virtual void ForceSnap(VRTK_InteractableObject interactableObjectToSnap)
		{
		}

		[Address(RVA = "0xA30734", Offset = "0xA30734", VA = "0xA30734", Slot = "12")]
		public virtual void ForceUnsnap()
		{
		}

		[Address(RVA = "0xA307B0", Offset = "0xA307B0", VA = "0xA307B0", Slot = "13")]
		public virtual bool ValidSnappableObjectIsHovering()
		{
			return default(bool);
		}

		[Address(RVA = "0xA30890", Offset = "0xA30890", VA = "0xA30890", Slot = "14")]
		public virtual bool IsObjectHovering(GameObject checkObject)
		{
			return default(bool);
		}

		[Address(RVA = "0xA30970", Offset = "0xA30970", VA = "0xA30970", Slot = "15")]
		public virtual bool IsInteractableObjectHovering(VRTK_InteractableObject checkObject)
		{
			return default(bool);
		}

		[Address(RVA = "0xA30A28", Offset = "0xA30A28", VA = "0xA30A28", Slot = "16")]
		public virtual List<GameObject> GetHoveringObjects()
		{
			return null;
		}

		[Address(RVA = "0xA30B3C", Offset = "0xA30B3C", VA = "0xA30B3C", Slot = "17")]
		public virtual List<VRTK_InteractableObject> GetHoveringInteractableObjects()
		{
			return null;
		}

		[Address(RVA = "0xA30B44", Offset = "0xA30B44", VA = "0xA30B44", Slot = "18")]
		public virtual GameObject GetCurrentSnappedObject()
		{
			return null;
		}

		[Address(RVA = "0xA30BE4", Offset = "0xA30BE4", VA = "0xA30BE4", Slot = "19")]
		public virtual VRTK_InteractableObject GetCurrentSnappedInteractableObject()
		{
			return null;
		}

		[Address(RVA = "0xA30BEC", Offset = "0xA30BEC", VA = "0xA30BEC", Slot = "20")]
		public virtual GameObject Clone(Vector3 position)
		{
			return null;
		}

		[Address(RVA = "0xA31030", Offset = "0xA31030", VA = "0xA31030", Slot = "21")]
		public virtual GameObject Clone()
		{
			return null;
		}

		[Address(RVA = "0xA310A8", Offset = "0xA310A8", VA = "0xA310A8", Slot = "22")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA310EC", Offset = "0xA310EC", VA = "0xA310EC", Slot = "23")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Address(RVA = "0xA311B0", Offset = "0xA311B0", VA = "0xA311B0", Slot = "24")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA3133C", Offset = "0xA3133C", VA = "0xA3133C", Slot = "25")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA313E0", Offset = "0xA313E0", VA = "0xA313E0", Slot = "26")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA31460", Offset = "0xA31460", VA = "0xA31460", Slot = "27")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xA314E0", Offset = "0xA314E0", VA = "0xA314E0", Slot = "28")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xA31560", Offset = "0xA31560", VA = "0xA31560", Slot = "29")]
		protected virtual void CheckCanSnap(VRTK_InteractableObject interactableObjectCheck)
		{
		}

		[Address(RVA = "0xA316CC", Offset = "0xA316CC", VA = "0xA316CC", Slot = "30")]
		protected virtual void CheckCanUnsnap(VRTK_InteractableObject interactableObjectCheck)
		{
		}

		[Address(RVA = "0xA318C8", Offset = "0xA318C8", VA = "0xA318C8", Slot = "31")]
		protected virtual bool ValidUnsnap(VRTK_InteractableObject interactableObjectCheck)
		{
			return default(bool);
		}

		[Address(RVA = "0xA3199C", Offset = "0xA3199C", VA = "0xA3199C", Slot = "32")]
		protected virtual void SnapObjectToZone(VRTK_InteractableObject objectToSnap)
		{
		}

		[Address(RVA = "0xA31A08", Offset = "0xA31A08", VA = "0xA31A08", Slot = "33")]
		protected virtual void UnregisterAllUngrabEvents()
		{
		}

		[Address(RVA = "0xA31B70", Offset = "0xA31B70", VA = "0xA31B70", Slot = "34")]
		protected virtual bool ValidSnapObject(VRTK_InteractableObject interactableObjectCheck, bool grabState, bool checkGrabState = true)
		{
			return default(bool);
		}

		[Address(RVA = "0xA31C64", Offset = "0xA31C64", VA = "0xA31C64", Slot = "35")]
		protected virtual string ObjectPath(string name)
		{
			return null;
		}

		[Address(RVA = "0xA31CB8", Offset = "0xA31CB8", VA = "0xA31CB8", Slot = "36")]
		protected virtual void CheckSnappedItemExists()
		{
		}

		[Address(RVA = "0xA31E0C", Offset = "0xA31E0C", VA = "0xA31E0C", Slot = "37")]
		protected virtual void CheckPrefabUpdate()
		{
		}

		[Address(RVA = "0xA31EE0", Offset = "0xA31EE0", VA = "0xA31EE0", Slot = "38")]
		protected virtual void SetObjectHighlight()
		{
		}

		[Address(RVA = "0xA31F84", Offset = "0xA31F84", VA = "0xA31F84", Slot = "39")]
		protected virtual void ToggleHighlightColor()
		{
		}

		[Address(RVA = "0xA32124", Offset = "0xA32124", VA = "0xA32124", Slot = "40")]
		protected virtual void CreateHighlightersInEditor()
		{
		}

		[Address(RVA = "0xA32160", Offset = "0xA32160", VA = "0xA32160", Slot = "41")]
		protected virtual void CheckCurrentValidSnapObjectStillValid()
		{
		}

		[Address(RVA = "0xA32360", Offset = "0xA32360", VA = "0xA32360", Slot = "42")]
		protected virtual void ForceSetObjects()
		{
		}

		[Address(RVA = "0xA3260C", Offset = "0xA3260C", VA = "0xA3260C", Slot = "43")]
		protected virtual void GenerateContainer()
		{
		}

		[Address(RVA = "0xA328E0", Offset = "0xA328E0", VA = "0xA328E0", Slot = "44")]
		protected virtual void DisableHighlightShadows()
		{
		}

		[Address(RVA = "0xA32A2C", Offset = "0xA32A2C", VA = "0xA32A2C", Slot = "45")]
		protected virtual void SetContainer()
		{
		}

		[Address(RVA = "0xA32AF4", Offset = "0xA32AF4", VA = "0xA32AF4", Slot = "46")]
		protected virtual void GenerateObjects()
		{
		}

		[Address(RVA = "0xA32BD8", Offset = "0xA32BD8", VA = "0xA32BD8", Slot = "47")]
		protected virtual void SnapObject(VRTK_InteractableObject interactableObjectCheck)
		{
		}

		[Address(RVA = "0xA32E48", Offset = "0xA32E48", VA = "0xA32E48", Slot = "48")]
		protected virtual void CreatePermanentClone()
		{
		}

		[Address(RVA = "0xA331CC", Offset = "0xA331CC", VA = "0xA331CC", Slot = "49")]
		protected virtual void ResetPermanentCloneColliders(GameObject objectToReset)
		{
		}

		[Address(RVA = "0xA33348", Offset = "0xA33348", VA = "0xA33348", Slot = "50")]
		protected virtual void ResnapPermanentClone()
		{
		}

		[Address(RVA = "0xA33420", Offset = "0xA33420", VA = "0xA33420", Slot = "51")]
		protected virtual void UnsnapObject()
		{
		}

		[Address(RVA = "0xA335A8", Offset = "0xA335A8", VA = "0xA335A8", Slot = "52")]
		protected virtual Vector3 GetNewLocalScale(VRTK_InteractableObject checkObject)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA33708", Offset = "0xA33708", VA = "0xA33708", Slot = "53")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C8D4", Offset = "0x67C8D4")]
		protected virtual IEnumerator CheckCanSnapObjectAtEndOfFrame(VRTK_InteractableObject interactableObjectCheck)
		{
			return null;
		}

		[Address(RVA = "0xA337CC", Offset = "0xA337CC", VA = "0xA337CC", Slot = "54")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C938", Offset = "0x67C938")]
		protected virtual IEnumerator UpdateTransformDimensions(VRTK_InteractableObject ioCheck, GameObject endSettings, Vector3 endScale, float duration)
		{
			return null;
		}

		[Address(RVA = "0xA338EC", Offset = "0xA338EC", VA = "0xA338EC", Slot = "55")]
		protected virtual void SetDropSnapType(VRTK_InteractableObject ioCheck)
		{
		}

		[Address(RVA = "0xA33A64", Offset = "0xA33A64", VA = "0xA33A64", Slot = "56")]
		protected virtual void SetSnapDropZoneJoint(Rigidbody snapTo)
		{
		}

		[Address(RVA = "0xA33E84", Offset = "0xA33E84", VA = "0xA33E84", Slot = "57")]
		protected virtual void ResetSnapDropZoneJoint()
		{
		}

		[Address(RVA = "0xA33F40", Offset = "0xA33F40", VA = "0xA33F40", Slot = "58")]
		protected virtual void AddCurrentValidSnapObject(VRTK_InteractableObject givenObject)
		{
		}

		[Address(RVA = "0xA3406C", Offset = "0xA3406C", VA = "0xA3406C", Slot = "59")]
		protected virtual void RemoveCurrentValidSnapObject(VRTK_InteractableObject givenObject)
		{
		}

		[Address(RVA = "0xA341A4", Offset = "0xA341A4", VA = "0xA341A4", Slot = "60")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xA3426C", Offset = "0xA3426C", VA = "0xA3426C", Slot = "61")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xA34338", Offset = "0xA34338", VA = "0xA34338", Slot = "62")]
		protected virtual void AttemptForceSnap(VRTK_InteractableObject objectToSnap)
		{
		}

		[Address(RVA = "0xA34350", Offset = "0xA34350", VA = "0xA34350", Slot = "63")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67C99C", Offset = "0x67C99C")]
		protected virtual IEnumerator AttemptForceSnapAtEndOfFrame(VRTK_InteractableObject objectToSnap)
		{
			return null;
		}

		[Address(RVA = "0xA34414", Offset = "0xA34414", VA = "0xA34414", Slot = "64")]
		protected virtual void ToggleHighlight(VRTK_InteractableObject checkObject, bool state)
		{
		}

		[Address(RVA = "0xA344E8", Offset = "0xA344E8", VA = "0xA344E8", Slot = "65")]
		protected virtual void CopyObject(GameObject objectBlueprint, ref GameObject clonedObject, string givenName)
		{
		}

		[Address(RVA = "0xA347B0", Offset = "0xA347B0", VA = "0xA347B0", Slot = "66")]
		protected virtual void GenerateHighlightObject()
		{
		}

		[Address(RVA = "0xA34A90", Offset = "0xA34A90", VA = "0xA34A90", Slot = "67")]
		protected virtual void SetHighlightObjectActive(bool state)
		{
		}

		[Address(RVA = "0xA34B3C", Offset = "0xA34B3C", VA = "0xA34B3C", Slot = "68")]
		protected virtual void DeleteHighlightObject()
		{
		}

		[Address(RVA = "0xA34BCC", Offset = "0xA34BCC", VA = "0xA34BCC", Slot = "69")]
		protected virtual void GenerateEditorHighlightObject()
		{
		}

		[Address(RVA = "0xA34E50", Offset = "0xA34E50", VA = "0xA34E50", Slot = "70")]
		protected virtual void CleanHighlightObject(GameObject objectToClean)
		{
		}

		[Address(RVA = "0xA362DC", Offset = "0xA362DC", VA = "0xA362DC", Slot = "71")]
		protected virtual void InitialiseHighlighter()
		{
		}

		[Address(RVA = "0xA365B4", Offset = "0xA365B4", VA = "0xA365B4", Slot = "72")]
		protected virtual void ChooseDestroyType(Transform deleteTransform)
		{
		}

		[Address(RVA = "0xA36670", Offset = "0xA36670", VA = "0xA36670", Slot = "73")]
		protected virtual void ChooseDestroyType(GameObject deleteObject)
		{
		}

		[Address(RVA = "0xA36710", Offset = "0xA36710", VA = "0xA36710", Slot = "74")]
		protected virtual void ChooseDestroyType(Component deleteComponent)
		{
		}

		[Address(RVA = "0xA367B0", Offset = "0xA367B0", VA = "0xA367B0", Slot = "75")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0xA36934", Offset = "0xA36934", VA = "0xA36934", Slot = "76")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67CA00", Offset = "0x67CA00")]
		protected virtual IEnumerator OverridePreviousStateAtEndOfFrame(VRTK_InteractableObject io, Transform parent, bool kinematic, bool grabbable)
		{
			return null;
		}

		[Address(RVA = "0xA36A38", Offset = "0xA36A38", VA = "0xA36A38")]
		public VRTK_SnapDropZone()
		{
		}
	}
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x655E9C", Offset = "0x655E9C")]
	public class VRTK_ContentHandler : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661A44", Offset = "0x661A44")]
		public VRTK_Control control;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661A7C", Offset = "0x661A7C")]
		public Transform inside;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661AB4", Offset = "0x661AB4")]
		public Transform outside;

		[Address(RVA = "0x935984", Offset = "0x935984", VA = "0x935984", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Address(RVA = "0x935B70", Offset = "0x935B70", VA = "0x935B70", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x935D34", Offset = "0x935D34", VA = "0x935D34")]
		public VRTK_ContentHandler()
		{
		}
	}
	public delegate void Button3DEventHandler(object sender, Control3DEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x655ED4", Offset = "0x655ED4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x655ED4", Offset = "0x655ED4")]
	public class VRTK_Button : VRTK_Control
	{
		public enum ButtonDirection
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			autodetect,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			x,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			y,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			z,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			negX,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			negY,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			negZ
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661AEC", Offset = "0x661AEC")]
		public GameObject connectedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661B24", Offset = "0x661B24")]
		public ButtonDirection direction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661B5C", Offset = "0x661B5C")]
		public float activationDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661B94", Offset = "0x661B94")]
		public float buttonStrength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float MAX_AUTODETECT_ACTIVATION_LENGTH = 4f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected ButtonDirection finalDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected Vector3 restingPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Vector3 activationDir;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Rigidbody buttonRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected ConfigurableJoint buttonJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected ConstantForce buttonForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected int forceCount;

		public event Button3DEventHandler Pushed
		{
			[Address(RVA = "0x92F938", Offset = "0x92F938", VA = "0x92F938")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CA64", Offset = "0x67CA64")]
			add
			{
			}
			[Address(RVA = "0x92FA24", Offset = "0x92FA24", VA = "0x92FA24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CA74", Offset = "0x67CA74")]
			remove
			{
			}
		}

		public event Button3DEventHandler Released
		{
			[Address(RVA = "0x92FB10", Offset = "0x92FB10", VA = "0x92FB10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CA84", Offset = "0x67CA84")]
			add
			{
			}
			[Address(RVA = "0x92FBFC", Offset = "0x92FBFC", VA = "0x92FBFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CA94", Offset = "0x67CA94")]
			remove
			{
			}
		}

		[Address(RVA = "0x92FCE8", Offset = "0x92FCE8", VA = "0x92FCE8", Slot = "19")]
		public virtual void OnPushed(Control3DEventArgs e)
		{
		}

		[Address(RVA = "0x92FD04", Offset = "0x92FD04", VA = "0x92FD04", Slot = "20")]
		public virtual void OnReleased(Control3DEventArgs e)
		{
		}

		[Address(RVA = "0x92FD20", Offset = "0x92FD20", VA = "0x92FD20", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Address(RVA = "0x930048", Offset = "0x930048", VA = "0x930048", Slot = "21")]
		protected virtual void SetupCollider()
		{
		}

		[Address(RVA = "0x93010C", Offset = "0x93010C", VA = "0x93010C", Slot = "22")]
		protected virtual void SetupRigidbody()
		{
		}

		[Address(RVA = "0x930214", Offset = "0x930214", VA = "0x930214", Slot = "23")]
		protected virtual void SetupConstantForce()
		{
		}

		[Address(RVA = "0x9302D4", Offset = "0x9302D4", VA = "0x9302D4", Slot = "24")]
		protected virtual void SetupConnectedTo()
		{
		}

		[Address(RVA = "0x9303FC", Offset = "0x9303FC", VA = "0x9303FC", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0x93048C", Offset = "0x93048C", VA = "0x93048C", Slot = "25")]
		protected virtual void DetectJointSetup()
		{
		}

		[Address(RVA = "0x930854", Offset = "0x930854", VA = "0x930854", Slot = "26")]
		protected virtual void DetectJointLimitsSetup()
		{
		}

		[Address(RVA = "0x93099C", Offset = "0x93099C", VA = "0x93099C", Slot = "27")]
		protected virtual void DetectJointDirectionSetup()
		{
		}

		[Address(RVA = "0x930D90", Offset = "0x930D90", VA = "0x930D90", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0x930F3C", Offset = "0x930F3C", VA = "0x930F3C", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0x930F48", Offset = "0x930F48", VA = "0x930F48", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0x930FFC", Offset = "0x930FFC", VA = "0x930FFC", Slot = "28")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0x9310C8", Offset = "0x9310C8", VA = "0x9310C8", Slot = "29")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Address(RVA = "0x9310D8", Offset = "0x9310D8", VA = "0x9310D8", Slot = "30")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x9310E8", Offset = "0x9310E8", VA = "0x9310E8", Slot = "31")]
		protected virtual ButtonDirection DetectDirection()
		{
			return default(ButtonDirection);
		}

		[Address(RVA = "0x931D9C", Offset = "0x931D9C", VA = "0x931D9C", Slot = "32")]
		protected virtual Vector3 CalculateActivationDir()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x932460", Offset = "0x932460", VA = "0x932460", Slot = "33")]
		protected virtual bool ReachedActivationDistance()
		{
			return default(bool);
		}

		[Address(RVA = "0x93253C", Offset = "0x93253C", VA = "0x93253C", Slot = "34")]
		protected virtual Vector3 GetForceVector()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x9325E0", Offset = "0x9325E0", VA = "0x9325E0")]
		public VRTK_Button()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x655F34", Offset = "0x655F34")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x655F34", Offset = "0x655F34")]
	public class VRTK_Chest : VRTK_Control
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661BEC", Offset = "0x661BEC")]
		public Direction direction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661C24", Offset = "0x661C24")]
		public GameObject lid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661C5C", Offset = "0x661C5C")]
		public GameObject body;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661C94", Offset = "0x661C94")]
		public GameObject handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661CCC", Offset = "0x661CCC")]
		public GameObject content;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661D04", Offset = "0x661D04")]
		public bool hideContent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661D3C", Offset = "0x661D3C")]
		public float maxAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float minAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rigidbody bodyRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Rigidbody handleRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected FixedJoint handleJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Rigidbody lidRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected HingeJoint lidJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool lidJointCreated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected Direction finalDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float subDirection;

		[Address(RVA = "0x932EF4", Offset = "0x932EF4", VA = "0x932EF4", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Address(RVA = "0x9332A4", Offset = "0x9332A4", VA = "0x9332A4", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0x93330C", Offset = "0x93330C", VA = "0x93330C", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0x9338C8", Offset = "0x9338C8", VA = "0x9338C8", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0x933984", Offset = "0x933984", VA = "0x933984", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0x9339B4", Offset = "0x9339B4", VA = "0x9339B4", Slot = "19")]
		protected virtual Direction DetectDirection()
		{
			return default(Direction);
		}

		[Address(RVA = "0x933E5C", Offset = "0x933E5C", VA = "0x933E5C", Slot = "20")]
		protected virtual void InitBody()
		{
		}

		[Address(RVA = "0x933F48", Offset = "0x933F48", VA = "0x933F48", Slot = "21")]
		protected virtual void InitLid()
		{
		}

		[Address(RVA = "0x93411C", Offset = "0x93411C", VA = "0x93411C", Slot = "22")]
		protected virtual void InitHandle()
		{
		}

		[Address(RVA = "0x934328", Offset = "0x934328", VA = "0x934328", Slot = "23")]
		protected virtual void CreateInteractableObject(GameObject targetGameObject)
		{
		}

		[Address(RVA = "0x934484", Offset = "0x934484", VA = "0x934484", Slot = "24")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Address(RVA = "0x934654", Offset = "0x934654", VA = "0x934654")]
		public VRTK_Chest()
		{
		}
	}
	public struct Control3DEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float value;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float normalizedValue;
	}
	public delegate void Control3DEventHandler(object sender, Control3DEventArgs e);
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x655F94", Offset = "0x655F94")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x655F94", Offset = "0x655F94")]
	public abstract class VRTK_Control : MonoBehaviour
	{
		public struct ControlValueRange
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float controlMin;

			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float controlMax;
		}

		public enum Direction
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			autodetect,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			x,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			y,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			z
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661D74", Offset = "0x661D74")]
		public bool interactWithoutGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Bounds bounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool setupSuccessful;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VRTK_ControllerRigidbodyActivator autoTriggerVolume;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float value;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Color COLOR_OK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static Color COLOR_ERROR;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float MIN_OPENING_DISTANCE = 20f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected ControlValueRange valueRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject controlContent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected bool hideControlContent;

		public event Control3DEventHandler ValueChanged
		{
			[Address(RVA = "0x935D3C", Offset = "0x935D3C", VA = "0x935D3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CAA4", Offset = "0x67CAA4")]
			add
			{
			}
			[Address(RVA = "0x935E28", Offset = "0x935E28", VA = "0x935E28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CAB4", Offset = "0x67CAB4")]
			remove
			{
			}
		}

		protected abstract void InitRequiredComponents();

		protected abstract bool DetectSetup();

		protected abstract ControlValueRange RegisterValueRange();

		[Address(RVA = "0x935F14", Offset = "0x935F14", VA = "0x935F14", Slot = "7")]
		public virtual void OnValueChanged(Control3DEventArgs e)
		{
		}

		[Address(RVA = "0x935F30", Offset = "0x935F30", VA = "0x935F30", Slot = "8")]
		public virtual float GetValue()
		{
			return default(float);
		}

		[Address(RVA = "0x935F38", Offset = "0x935F38", VA = "0x935F38", Slot = "9")]
		public virtual float GetNormalizedValue()
		{
			return default(float);
		}

		[Address(RVA = "0x936040", Offset = "0x936040", VA = "0x936040", Slot = "10")]
		public virtual void SetContent(GameObject content, bool hideContent)
		{
		}

		[Address(RVA = "0x936050", Offset = "0x936050", VA = "0x936050", Slot = "11")]
		public virtual GameObject GetContent()
		{
			return null;
		}

		protected abstract void HandleUpdate();

		[Address(RVA = "0x936058", Offset = "0x936058", VA = "0x936058", Slot = "13")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x936100", Offset = "0x936100", VA = "0x936100", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x9361B4", Offset = "0x9361B4", VA = "0x9361B4", Slot = "15")]
		protected virtual Control3DEventArgs SetControlEvent()
		{
			return default(Control3DEventArgs);
		}

		[Address(RVA = "0x92FE60", Offset = "0x92FE60", VA = "0x92FE60", Slot = "16")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Address(RVA = "0x936200", Offset = "0x936200", VA = "0x936200", Slot = "17")]
		protected virtual void CreateTriggerVolume()
		{
		}

		[Address(RVA = "0x93647C", Offset = "0x93647C", VA = "0x93647C")]
		protected Vector3 GetThirdDirection(Vector3 axis1, Vector3 axis2)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x9365CC", Offset = "0x9365CC", VA = "0x9365CC", Slot = "18")]
		protected virtual void HandleInteractables()
		{
		}

		[Address(RVA = "0x93265C", Offset = "0x93265C", VA = "0x93265C")]
		protected VRTK_Control()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x655FE0", Offset = "0x655FE0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x655FE0", Offset = "0x655FE0")]
	public class VRTK_Door : VRTK_Control
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661DBC", Offset = "0x661DBC")]
		public Direction direction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661DF4", Offset = "0x661DF4")]
		public GameObject door;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661E2C", Offset = "0x661E2C")]
		public GameObject handles;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661E64", Offset = "0x661E64")]
		public GameObject frame;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661E9C", Offset = "0x661E9C")]
		public GameObject content;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661ED4", Offset = "0x661ED4")]
		public bool hideContent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661F0C", Offset = "0x661F0C")]
		public float maxAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661F44", Offset = "0x661F44")]
		public bool openInward;

		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661F7C", Offset = "0x661F7C")]
		public bool openOutward;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x661FB4", Offset = "0x661FB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x661FB4", Offset = "0x661FB4")]
		public float minSnapClose;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662008", Offset = "0x662008")]
		public float releasedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662040", Offset = "0x662040")]
		public float grabbedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662078", Offset = "0x662078")]
		public bool handleInteractableOnly;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Rigidbody doorRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected HingeJoint doorHinge;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected ConstantForce doorSnapForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Rigidbody frameRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Direction finalDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float subDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Vector3 secondaryDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected bool doorHingeCreated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		protected bool doorSnapForceCreated;

		[Address(RVA = "0xA7AE50", Offset = "0xA7AE50", VA = "0xA7AE50", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Address(RVA = "0xA7B800", Offset = "0xA7B800", VA = "0xA7B800", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0xA7B868", Offset = "0xA7B868", VA = "0xA7B868", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0xA7C4C4", Offset = "0xA7C4C4", VA = "0xA7C4C4", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0xA7C580", Offset = "0xA7C580", VA = "0xA7C580", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0xA7C668", Offset = "0xA7C668", VA = "0xA7C668", Slot = "19")]
		protected virtual float GetDirectionFromJoint()
		{
			return default(float);
		}

		[Address(RVA = "0xA7C6E0", Offset = "0xA7C6E0", VA = "0xA7C6E0", Slot = "20")]
		protected virtual Vector3 Direction2Axis(Direction givenDirection)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA7C7BC", Offset = "0xA7C7BC", VA = "0xA7C7BC", Slot = "21")]
		protected virtual Direction DetectDirection()
		{
			return default(Direction);
		}

		[Address(RVA = "0xA7CB78", Offset = "0xA7CB78", VA = "0xA7CB78", Slot = "22")]
		protected virtual void InitFrame()
		{
		}

		[Address(RVA = "0xA7CCD0", Offset = "0xA7CCD0", VA = "0xA7CCD0", Slot = "23")]
		protected virtual void InitDoor()
		{
		}

		[Address(RVA = "0xA7CFA4", Offset = "0xA7CFA4", VA = "0xA7CFA4", Slot = "24")]
		protected virtual void InitHandle()
		{
		}

		[Address(RVA = "0xA7D218", Offset = "0xA7D218", VA = "0xA7D218", Slot = "25")]
		protected virtual void CreateInteractableObject(GameObject target)
		{
		}

		[Address(RVA = "0xA7D3DC", Offset = "0xA7D3DC", VA = "0xA7D3DC", Slot = "26")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xA7D41C", Offset = "0xA7D41C", VA = "0xA7D41C", Slot = "27")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xA7D45C", Offset = "0xA7D45C", VA = "0xA7D45C", Slot = "28")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Address(RVA = "0xA7D570", Offset = "0xA7D570", VA = "0xA7D570", Slot = "29")]
		protected virtual GameObject GetDoor()
		{
			return null;
		}

		[Address(RVA = "0xA7D5FC", Offset = "0xA7D5FC", VA = "0xA7D5FC")]
		public VRTK_Door()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656040", Offset = "0x656040")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x656040", Offset = "0x656040")]
	public class VRTK_Drawer : VRTK_Control
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6620B0", Offset = "0x6620B0")]
		public GameObject connectedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6620E8", Offset = "0x6620E8")]
		public Direction direction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662120", Offset = "0x662120")]
		public GameObject body;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662158", Offset = "0x662158")]
		public GameObject handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662190", Offset = "0x662190")]
		public GameObject content;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6621C8", Offset = "0x6621C8")]
		public bool hideContent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662200", Offset = "0x662200")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x662200", Offset = "0x662200")]
		public float minSnapClose;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662254", Offset = "0x662254")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x662254", Offset = "0x662254")]
		public float maxExtend;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Rigidbody drawerRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Rigidbody handleRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected FixedJoint handleFixedJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected ConfigurableJoint drawerJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected VRTK_InteractableObject drawerInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected ConstantForce drawerSnapForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Direction finalDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected float subDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected float pullDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected Vector3 initialPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool drawerJointCreated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool drawerSnapForceCreated;

		[Address(RVA = "0xA7F768", Offset = "0xA7F768", VA = "0xA7F768", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Address(RVA = "0xA7FA50", Offset = "0xA7FA50", VA = "0xA7FA50", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0xA7FAD0", Offset = "0xA7FAD0", VA = "0xA7FAD0", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0xA802EC", Offset = "0xA802EC", VA = "0xA802EC", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0xA802FC", Offset = "0xA802FC", VA = "0xA802FC", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0xA80408", Offset = "0xA80408", VA = "0xA80408", Slot = "19")]
		protected virtual void InitBody()
		{
		}

		[Address(RVA = "0xA80878", Offset = "0xA80878", VA = "0xA80878", Slot = "20")]
		protected virtual void InitHandle()
		{
		}

		[Address(RVA = "0xA80A80", Offset = "0xA80A80", VA = "0xA80A80", Slot = "21")]
		protected virtual Direction DetectDirection()
		{
			return default(Direction);
		}

		[Address(RVA = "0xA81234", Offset = "0xA81234", VA = "0xA81234", Slot = "22")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Address(RVA = "0xA813D4", Offset = "0xA813D4", VA = "0xA813D4", Slot = "23")]
		protected virtual GameObject GetBody()
		{
			return null;
		}

		[Address(RVA = "0xA81460", Offset = "0xA81460", VA = "0xA81460", Slot = "24")]
		protected virtual GameObject GetHandle()
		{
			return null;
		}

		[Address(RVA = "0xA814EC", Offset = "0xA814EC", VA = "0xA814EC")]
		public VRTK_Drawer()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6560A0", Offset = "0x6560A0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6560A0", Offset = "0x6560A0")]
	public class VRTK_Knob : VRTK_Control
	{
		public enum KnobDirection
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			x,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			y,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			z
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6622A8", Offset = "0x6622A8")]
		public GameObject connectedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6622E0", Offset = "0x6622E0")]
		public KnobDirection direction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662318", Offset = "0x662318")]
		public float min;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662350", Offset = "0x662350")]
		public float max;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662388", Offset = "0x662388")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float MAX_AUTODETECT_KNOB_WIDTH = 3f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected KnobDirection finalDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected KnobDirection subDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool subDirectionFound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Quaternion initialRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected Vector3 initialLocalRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected ConfigurableJoint knobJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool knobJointCreated;

		[Address(RVA = "0xB328D8", Offset = "0xB328D8", VA = "0xB328D8", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0xB3297C", Offset = "0xB3297C", VA = "0xB3297C", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0xB32BC0", Offset = "0xB32BC0", VA = "0xB32BC0", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0xB32BC8", Offset = "0xB32BC8", VA = "0xB32BC8", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0xB32BF8", Offset = "0xB32BF8", VA = "0xB32BF8", Slot = "19")]
		protected virtual void InitKnob()
		{
		}

		[Address(RVA = "0xB32FBC", Offset = "0xB32FBC", VA = "0xB32FBC", Slot = "20")]
		protected virtual KnobDirection DetectDirection()
		{
			return default(KnobDirection);
		}

		[Address(RVA = "0xB33A34", Offset = "0xB33A34", VA = "0xB33A34", Slot = "21")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Address(RVA = "0xB34080", Offset = "0xB34080", VA = "0xB34080")]
		public VRTK_Knob()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656100", Offset = "0x656100")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x656100", Offset = "0x656100")]
	public class VRTK_Lever : VRTK_Control
	{
		public enum LeverDirection
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			x,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			y,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			z
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6623C0", Offset = "0x6623C0")]
		public GameObject connectedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6623F8", Offset = "0x6623F8")]
		public LeverDirection direction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662430", Offset = "0x662430")]
		public float minAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662468", Offset = "0x662468")]
		public float maxAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6624A0", Offset = "0x6624A0")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6624D8", Offset = "0x6624D8")]
		public float releasedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662510", Offset = "0x662510")]
		public float grabbedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected HingeJoint leverHingeJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool leverHingeJointCreated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rigidbody leverRigidbody;

		[Address(RVA = "0xB340F4", Offset = "0xB340F4", VA = "0xB340F4", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0xB341D0", Offset = "0xB341D0", VA = "0xB341D0", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0xB3474C", Offset = "0xB3474C", VA = "0xB3474C", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0xB34754", Offset = "0xB34754", VA = "0xB34754", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0xB34794", Offset = "0xB34794", VA = "0xB34794", Slot = "19")]
		protected virtual void InitRigidbody()
		{
		}

		[Address(RVA = "0xB348D8", Offset = "0xB348D8", VA = "0xB348D8", Slot = "20")]
		protected virtual void InitInteractableObject()
		{
		}

		[Address(RVA = "0xB34AAC", Offset = "0xB34AAC", VA = "0xB34AAC", Slot = "21")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB34AEC", Offset = "0xB34AEC", VA = "0xB34AEC", Slot = "22")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB34B2C", Offset = "0xB34B2C", VA = "0xB34B2C", Slot = "23")]
		protected virtual void InitHingeJoint()
		{
		}

		[Address(RVA = "0xB34CD0", Offset = "0xB34CD0", VA = "0xB34CD0", Slot = "24")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Address(RVA = "0xB34DE4", Offset = "0xB34DE4", VA = "0xB34DE4", Slot = "25")]
		protected virtual void SnapToValue(float value)
		{
		}

		[Address(RVA = "0xB34FE0", Offset = "0xB34FE0", VA = "0xB34FE0")]
		public VRTK_Lever()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656160", Offset = "0x656160")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x656160", Offset = "0x656160")]
	public class VRTK_Slider : VRTK_Control
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662548", Offset = "0x662548")]
		public GameObject connectedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662580", Offset = "0x662580")]
		public Direction direction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6625B8", Offset = "0x6625B8")]
		public Collider minimumLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6625F0", Offset = "0x6625F0")]
		public Collider maximumLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662628", Offset = "0x662628")]
		public float minimumValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662660", Offset = "0x662660")]
		public float maximumValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662698", Offset = "0x662698")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6626D0", Offset = "0x6626D0")]
		public bool snapToStep;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662708", Offset = "0x662708")]
		public float releasedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected Direction finalDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Rigidbody sliderRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected ConfigurableJoint sliderJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool sliderJointCreated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected Vector3 minimumLimitDiff;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Vector3 maximumLimitDiff;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected Vector3 snapPosition;

		[Address(RVA = "0xA2CA54", Offset = "0xA2CA54", VA = "0xA2CA54", Slot = "16")]
		protected override void OnDrawGizmos()
		{
		}

		[Address(RVA = "0xA2CBB8", Offset = "0xA2CBB8", VA = "0xA2CBB8", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0xA2CC18", Offset = "0xA2CC18", VA = "0xA2CC18", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0xA2DC70", Offset = "0xA2DC70", VA = "0xA2DC70", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0xA2DC78", Offset = "0xA2DC78", VA = "0xA2DC78", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0xA2DCC8", Offset = "0xA2DCC8", VA = "0xA2DCC8", Slot = "19")]
		protected virtual Vector3 CalculateDiff(Vector3 initialPosition, Vector3 givenDirection, float scaleValue, float diffMultiplier, bool addition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA2DEFC", Offset = "0xA2DEFC", VA = "0xA2DEFC", Slot = "20")]
		protected virtual void InitRigidbody()
		{
		}

		[Address(RVA = "0xA2E160", Offset = "0xA2E160", VA = "0xA2E160", Slot = "21")]
		protected virtual void InitInteractableObject()
		{
		}

		[Address(RVA = "0xA2E2B8", Offset = "0xA2E2B8", VA = "0xA2E2B8", Slot = "22")]
		protected virtual void InitJoint()
		{
		}

		[Address(RVA = "0xA2E498", Offset = "0xA2E498", VA = "0xA2E498", Slot = "23")]
		protected virtual void CalculateValue()
		{
		}

		[Address(RVA = "0xA2E77C", Offset = "0xA2E77C", VA = "0xA2E77C", Slot = "24")]
		protected virtual void ToggleSpring(bool state)
		{
		}

		[Address(RVA = "0xA2E89C", Offset = "0xA2E89C", VA = "0xA2E89C", Slot = "25")]
		protected virtual void SnapToValue()
		{
		}

		[Address(RVA = "0xA2E9B0", Offset = "0xA2E9B0", VA = "0xA2E9B0")]
		public VRTK_Slider()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6561C0", Offset = "0x6561C0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6561C0", Offset = "0x6561C0")]
	public class VRTK_SpringLever : VRTK_Lever
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662740", Offset = "0x662740")]
		public float springStrength;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662778", Offset = "0x662778")]
		public float springDamper;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6627B0", Offset = "0x6627B0")]
		public bool snapToNearestLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6627E8", Offset = "0x6627E8")]
		public bool alwaysActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		protected bool wasTowardZero;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
		protected bool isGrabbed;

		[Address(RVA = "0xA376C8", Offset = "0xA376C8", VA = "0xA376C8", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0xA377BC", Offset = "0xA377BC", VA = "0xA377BC", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0xA377F0", Offset = "0xA377F0", VA = "0xA377F0", Slot = "21")]
		protected override void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xA3781C", Offset = "0xA3781C", VA = "0xA3781C", Slot = "22")]
		protected override void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xA37844", Offset = "0xA37844", VA = "0xA37844", Slot = "26")]
		protected virtual float GetSpringTarget(bool towardZero)
		{
			return default(float);
		}

		[Address(RVA = "0xA3785C", Offset = "0xA3785C", VA = "0xA3785C", Slot = "27")]
		protected virtual void ApplySpringForce()
		{
		}

		[Address(RVA = "0xA379B4", Offset = "0xA379B4", VA = "0xA379B4")]
		public VRTK_SpringLever()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656220", Offset = "0x656220")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x656220", Offset = "0x656220")]
	public class VRTK_Wheel : VRTK_Control
	{
		public enum GrabTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TrackObject,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RotatorTrack
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662820", Offset = "0x662820")]
		public GameObject connectedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662858", Offset = "0x662858")]
		public GrabTypes grabType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662890", Offset = "0x662890")]
		public float detatchDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6628C8", Offset = "0x6628C8")]
		public float minimumValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662900", Offset = "0x662900")]
		public float maximumValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662938", Offset = "0x662938")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662970", Offset = "0x662970")]
		public bool snapToStep;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6629A8", Offset = "0x6629A8")]
		public float grabbedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6629E0", Offset = "0x6629E0")]
		public float releasedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x662A18", Offset = "0x662A18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662A18", Offset = "0x662A18")]
		public float maxAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662A70", Offset = "0x662A70")]
		public bool lockAtLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float angularVelocityLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float springStrengthValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float springDamperValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected Quaternion initialLocalRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Rigidbody wheelRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected HingeJoint wheelHinge;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool wheelHingeCreated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool initialValueCalculated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float springAngle;

		[Address(RVA = "0x88A018", Offset = "0x88A018", VA = "0x88A018", Slot = "4")]
		protected override void InitRequiredComponents()
		{
		}

		[Address(RVA = "0x88A06C", Offset = "0x88A06C", VA = "0x88A06C", Slot = "5")]
		protected override bool DetectSetup()
		{
			return default(bool);
		}

		[Address(RVA = "0x88A1DC", Offset = "0x88A1DC", VA = "0x88A1DC", Slot = "6")]
		protected override ControlValueRange RegisterValueRange()
		{
			return default(ControlValueRange);
		}

		[Address(RVA = "0x88A1E4", Offset = "0x88A1E4", VA = "0x88A1E4", Slot = "12")]
		protected override void HandleUpdate()
		{
		}

		[Address(RVA = "0x88A274", Offset = "0x88A274", VA = "0x88A274", Slot = "19")]
		protected virtual void InitWheel()
		{
		}

		[Address(RVA = "0x88A2C4", Offset = "0x88A2C4", VA = "0x88A2C4", Slot = "20")]
		protected virtual void SetupRigidbody()
		{
		}

		[Address(RVA = "0x88A4F4", Offset = "0x88A4F4", VA = "0x88A4F4", Slot = "21")]
		protected virtual void SetupHinge()
		{
		}

		[Address(RVA = "0x88A5CC", Offset = "0x88A5CC", VA = "0x88A5CC", Slot = "22")]
		protected virtual void SetupHingeRestrictions()
		{
		}

		[Address(RVA = "0x88A938", Offset = "0x88A938", VA = "0x88A938", Slot = "23")]
		protected virtual void ConfigureHingeSpring()
		{
		}

		[Address(RVA = "0x88A9E8", Offset = "0x88A9E8", VA = "0x88A9E8", Slot = "24")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Address(RVA = "0x88AC28", Offset = "0x88AC28", VA = "0x88AC28", Slot = "25")]
		protected virtual void WheelInteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x88AC8C", Offset = "0x88AC8C", VA = "0x88AC8C", Slot = "26")]
		protected virtual void WheelInteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x88AD1C", Offset = "0x88AD1C", VA = "0x88AD1C", Slot = "27")]
		protected virtual void CalculateValue()
		{
		}

		[Address(RVA = "0x88AF38", Offset = "0x88AF38", VA = "0x88AF38")]
		public VRTK_Wheel()
		{
		}
	}
	public class VRTK_IgnoreInteractTouchColliders : VRTK_SDKControllerReady
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B130", Offset = "0x65B130")]
		private sealed class <DisableAllCollidersAtEndOfFrame>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_IgnoreInteractTouchColliders <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xE9F32C", Offset = "0xE9F32C", VA = "0xE9F32C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xE9F39C", Offset = "0xE9F39C", VA = "0xE9F39C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xE9EA50", Offset = "0xE9EA50", VA = "0xE9EA50")]
			[DebuggerHidden]
			public <DisableAllCollidersAtEndOfFrame>d__7(int <>1__state)
			{
			}

			[Address(RVA = "0xE9F270", Offset = "0xE9F270", VA = "0xE9F270", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xE9F274", Offset = "0xE9F274", VA = "0xE9F274", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xE9F334", Offset = "0xE9F334", VA = "0xE9F334", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B140", Offset = "0x65B140")]
		private sealed class <DisableControllerColliderAtEndOfFrame>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_IgnoreInteractTouchColliders <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_InteractTouch touchToIgnore;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xE9F46C", Offset = "0xE9F46C", VA = "0xE9F46C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xE9F4DC", Offset = "0xE9F4DC", VA = "0xE9F4DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xE9EB14", Offset = "0xE9EB14", VA = "0xE9EB14")]
			[DebuggerHidden]
			public <DisableControllerColliderAtEndOfFrame>d__8(int <>1__state)
			{
			}

			[Address(RVA = "0xE9F3A4", Offset = "0xE9F3A4", VA = "0xE9F3A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xE9F3A8", Offset = "0xE9F3A8", VA = "0xE9F3A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xE9F474", Offset = "0xE9F474", VA = "0xE9F474", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662AA8", Offset = "0x662AA8")]
		public List<VRTK_InteractTouch> interactTouchToIgnore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662AE0", Offset = "0x662AE0")]
		public List<GameObject> skipIgnore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Collider[] localColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Coroutine disableAllCollidersRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Coroutine disableControllerCollidersRoutine;

		[Address(RVA = "0xE9E8A8", Offset = "0xE9E8A8", VA = "0xE9E8A8", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xE9E938", Offset = "0xE9E938", VA = "0xE9E938", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0xE9E9DC", Offset = "0xE9E9DC", VA = "0xE9E9DC", Slot = "15")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67CAC4", Offset = "0x67CAC4")]
		protected virtual IEnumerator DisableAllCollidersAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xE9EA7C", Offset = "0xE9EA7C", VA = "0xE9EA7C", Slot = "16")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67CB28", Offset = "0x67CB28")]
		protected virtual IEnumerator DisableControllerColliderAtEndOfFrame(VRTK_InteractTouch touchToIgnore)
		{
			return null;
		}

		[Address(RVA = "0xE9EB40", Offset = "0xE9EB40", VA = "0xE9EB40", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xE9EC50", Offset = "0xE9EC50", VA = "0xE9EC50", Slot = "17")]
		protected virtual void ManageAllCollisions(bool ignore)
		{
		}

		[Address(RVA = "0xE9ED24", Offset = "0xE9ED24", VA = "0xE9ED24", Slot = "18")]
		protected virtual bool ShouldExclude(Transform checkObject)
		{
			return default(bool);
		}

		[Address(RVA = "0xE9EE54", Offset = "0xE9EE54", VA = "0xE9EE54", Slot = "19")]
		protected virtual void ManageTouchCollision(VRTK_InteractTouch touchToIgnore, bool ignore)
		{
		}

		[Address(RVA = "0xE9F1C0", Offset = "0xE9F1C0", VA = "0xE9F1C0")]
		public VRTK_IgnoreInteractTouchColliders()
		{
		}
	}
	public abstract class VRTK_InteractableListener : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B150", Offset = "0x65B150")]
		private sealed class <SetupListenersAtEndOfFrame>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableListener <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xB2BD5C", Offset = "0xB2BD5C", VA = "0xB2BD5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xB2BDCC", Offset = "0xB2BDCC", VA = "0xB2BDCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xB2BC70", Offset = "0xB2BC70", VA = "0xB2BC70")]
			[DebuggerHidden]
			public <SetupListenersAtEndOfFrame>d__5(int <>1__state)
			{
			}

			[Address(RVA = "0xB2BCA4", Offset = "0xB2BCA4", VA = "0xB2BCA4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xB2BCA8", Offset = "0xB2BCA8", VA = "0xB2BCA8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xB2BD64", Offset = "0xB2BD64", VA = "0xB2BD64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Coroutine setupInteractableListenersRoutine;

		protected abstract bool SetupListeners(bool throwError);

		protected abstract void TearDownListeners();

		[Address(RVA = "0xB2BB68", Offset = "0xB2BB68", VA = "0xB2BB68", Slot = "6")]
		protected virtual void EnableListeners()
		{
		}

		[Address(RVA = "0xB2BBBC", Offset = "0xB2BBBC", VA = "0xB2BBBC", Slot = "7")]
		protected virtual void DisableListeners()
		{
		}

		[Address(RVA = "0xB2BBFC", Offset = "0xB2BBFC", VA = "0xB2BBFC", Slot = "8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67CB8C", Offset = "0x67CB8C")]
		protected virtual IEnumerator SetupListenersAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xB2BC9C", Offset = "0xB2BC9C", VA = "0xB2BC9C")]
		protected VRTK_InteractableListener()
		{
		}
	}
	public struct InteractableObjectEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;
	}
	public delegate void InteractableObjectEventHandler(object sender, InteractableObjectEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656280", Offset = "0x656280")]
	public class VRTK_InteractableObject : MonoBehaviour
	{
		public enum InteractionType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NearTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NearUntouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Touch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Untouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Grab,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Ungrab,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Use,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Unuse
		}

		public enum AllowedController
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Both,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightOnly
		}

		public enum ValidDropTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NoDrop,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			DropAnywhere,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			DropValidSnapDropZone
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B160", Offset = "0x65B160")]
		private sealed class <RegisterTeleportersAtEndOfFrame>d__175 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xB32860", Offset = "0xB32860", VA = "0xB32860", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xB328D0", Offset = "0xB328D0", VA = "0xB328D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xB3195C", Offset = "0xB3195C", VA = "0xB3195C")]
			[DebuggerHidden]
			public <RegisterTeleportersAtEndOfFrame>d__175(int <>1__state)
			{
			}

			[Address(RVA = "0xB32670", Offset = "0xB32670", VA = "0xB32670", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xB32674", Offset = "0xB32674", VA = "0xB32674", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xB32868", Offset = "0xB32868", VA = "0xB32868", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B170", Offset = "0x65B170")]
		private sealed class <ForceStopInteractingAtEndOfFrame>d__177 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_InteractableObject <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xB325F8", Offset = "0xB325F8", VA = "0xB325F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xB32668", Offset = "0xB32668", VA = "0xB32668", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xB31B00", Offset = "0xB31B00", VA = "0xB31B00")]
			[DebuggerHidden]
			public <ForceStopInteractingAtEndOfFrame>d__177(int <>1__state)
			{
			}

			[Address(RVA = "0xB32540", Offset = "0xB32540", VA = "0xB32540", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xB32544", Offset = "0xB32544", VA = "0xB32544", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xB32600", Offset = "0xB32600", VA = "0xB32600", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x662B18", Offset = "0x662B18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662B18", Offset = "0x662B18")]
		public bool disableWhenIdle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x662B78", Offset = "0x662B78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662B78", Offset = "0x662B78")]
		public AllowedController allowedNearTouchControllers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x662BD8", Offset = "0x662BD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662BD8", Offset = "0x662BD8")]
		public AllowedController allowedTouchControllers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662C38", Offset = "0x662C38")]
		public Collider[] ignoredColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x662C70", Offset = "0x662C70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662C70", Offset = "0x662C70")]
		public bool isGrabbable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662CD0", Offset = "0x662CD0")]
		public bool holdButtonToGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662D08", Offset = "0x662D08")]
		public bool stayGrabbedOnTeleport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662D40", Offset = "0x662D40")]
		public ValidDropTypes validDrop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662D78", Offset = "0x662D78")]
		public VRTK_ControllerEvents.ButtonAlias grabOverrideButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662DB0", Offset = "0x662DB0")]
		public AllowedController allowedGrabControllers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662DE8", Offset = "0x662DE8")]
		public VRTK_BaseGrabAttach grabAttachMechanicScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662E20", Offset = "0x662E20")]
		public VRTK_BaseGrabAction secondaryGrabActionScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x662E58", Offset = "0x662E58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662E58", Offset = "0x662E58")]
		public bool isUsable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662EB8", Offset = "0x662EB8")]
		public bool holdButtonToUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662EF0", Offset = "0x662EF0")]
		public bool useOnlyIfGrabbed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662F28", Offset = "0x662F28")]
		public bool pointerActivatesUseAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662F60", Offset = "0x662F60")]
		public VRTK_ControllerEvents.ButtonAlias useOverrideButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x662F98", Offset = "0x662F98")]
		public AllowedController allowedUseControllers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x662FD0", Offset = "0x662FD0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x662FD0", Offset = "0x662FD0")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x662FD0", Offset = "0x662FD0")]
		public VRTK_BaseHighlighter objectHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x663040", Offset = "0x663040")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x663040", Offset = "0x663040")]
		public Color touchHighlightColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody interactableRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected HashSet<GameObject> currentIgnoredColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected HashSet<GameObject> hoveredSnapObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected HashSet<GameObject> nearTouchingObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected HashSet<GameObject> touchingObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected List<GameObject> grabbingObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_InteractUse usingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Transform trackPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool customTrackPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Transform primaryControllerAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Transform secondaryControllerAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Transform previousParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool previousKinematicState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool previousIsGrabbable;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool forcedDropped;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		protected bool forceDisabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected bool hoveredOverSnapDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
		protected bool snappedInSnapDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected VRTK_SnapDropZone storedSnapDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Vector3 previousLocalScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected bool startDisabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x66316C", Offset = "0x66316C")]
		public int usingState;

		public bool isKinematic
		{
			[Address(RVA = "0xB2D80C", Offset = "0xB2D80C", VA = "0xB2D80C")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xB2D8AC", Offset = "0xB2D8AC", VA = "0xB2D8AC")]
			set
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectEnabled
		{
			[Address(RVA = "0xB2BDD4", Offset = "0xB2BDD4", VA = "0xB2BDD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CBF0", Offset = "0x67CBF0")]
			add
			{
			}
			[Address(RVA = "0xB2BEC0", Offset = "0xB2BEC0", VA = "0xB2BEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC00", Offset = "0x67CC00")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectDisabled
		{
			[Address(RVA = "0xB2BFAC", Offset = "0xB2BFAC", VA = "0xB2BFAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC10", Offset = "0x67CC10")]
			add
			{
			}
			[Address(RVA = "0xB2C09C", Offset = "0xB2C09C", VA = "0xB2C09C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC20", Offset = "0x67CC20")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectNearTouched
		{
			[Address(RVA = "0xB2C18C", Offset = "0xB2C18C", VA = "0xB2C18C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC30", Offset = "0x67CC30")]
			add
			{
			}
			[Address(RVA = "0xB2C27C", Offset = "0xB2C27C", VA = "0xB2C27C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC40", Offset = "0x67CC40")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectNearUntouched
		{
			[Address(RVA = "0xB2C36C", Offset = "0xB2C36C", VA = "0xB2C36C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC50", Offset = "0x67CC50")]
			add
			{
			}
			[Address(RVA = "0xB2C45C", Offset = "0xB2C45C", VA = "0xB2C45C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC60", Offset = "0x67CC60")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectTouched
		{
			[Address(RVA = "0xB2C54C", Offset = "0xB2C54C", VA = "0xB2C54C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC70", Offset = "0x67CC70")]
			add
			{
			}
			[Address(RVA = "0xB2C63C", Offset = "0xB2C63C", VA = "0xB2C63C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC80", Offset = "0x67CC80")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectUntouched
		{
			[Address(RVA = "0xB2C72C", Offset = "0xB2C72C", VA = "0xB2C72C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CC90", Offset = "0x67CC90")]
			add
			{
			}
			[Address(RVA = "0xB2C81C", Offset = "0xB2C81C", VA = "0xB2C81C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CCA0", Offset = "0x67CCA0")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectGrabbed
		{
			[Address(RVA = "0xB2C90C", Offset = "0xB2C90C", VA = "0xB2C90C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CCB0", Offset = "0x67CCB0")]
			add
			{
			}
			[Address(RVA = "0xB2C9FC", Offset = "0xB2C9FC", VA = "0xB2C9FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CCC0", Offset = "0x67CCC0")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectUngrabbed
		{
			[Address(RVA = "0xB2CAEC", Offset = "0xB2CAEC", VA = "0xB2CAEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CCD0", Offset = "0x67CCD0")]
			add
			{
			}
			[Address(RVA = "0xB2CBDC", Offset = "0xB2CBDC", VA = "0xB2CBDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CCE0", Offset = "0x67CCE0")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectUsed
		{
			[Address(RVA = "0xB2CCCC", Offset = "0xB2CCCC", VA = "0xB2CCCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CCF0", Offset = "0x67CCF0")]
			add
			{
			}
			[Address(RVA = "0xB2CDBC", Offset = "0xB2CDBC", VA = "0xB2CDBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD00", Offset = "0x67CD00")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectUnused
		{
			[Address(RVA = "0xB2CEAC", Offset = "0xB2CEAC", VA = "0xB2CEAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD10", Offset = "0x67CD10")]
			add
			{
			}
			[Address(RVA = "0xB2CF9C", Offset = "0xB2CF9C", VA = "0xB2CF9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD20", Offset = "0x67CD20")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectEnteredSnapDropZone
		{
			[Address(RVA = "0xB2D08C", Offset = "0xB2D08C", VA = "0xB2D08C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD30", Offset = "0x67CD30")]
			add
			{
			}
			[Address(RVA = "0xB2D17C", Offset = "0xB2D17C", VA = "0xB2D17C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD40", Offset = "0x67CD40")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectExitedSnapDropZone
		{
			[Address(RVA = "0xB2D26C", Offset = "0xB2D26C", VA = "0xB2D26C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD50", Offset = "0x67CD50")]
			add
			{
			}
			[Address(RVA = "0xB2D35C", Offset = "0xB2D35C", VA = "0xB2D35C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD60", Offset = "0x67CD60")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectSnappedToDropZone
		{
			[Address(RVA = "0xB2D44C", Offset = "0xB2D44C", VA = "0xB2D44C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD70", Offset = "0x67CD70")]
			add
			{
			}
			[Address(RVA = "0xB2D53C", Offset = "0xB2D53C", VA = "0xB2D53C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD80", Offset = "0x67CD80")]
			remove
			{
			}
		}

		public event InteractableObjectEventHandler InteractableObjectUnsnappedFromDropZone
		{
			[Address(RVA = "0xB2D62C", Offset = "0xB2D62C", VA = "0xB2D62C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CD90", Offset = "0x67CD90")]
			add
			{
			}
			[Address(RVA = "0xB2D71C", Offset = "0xB2D71C", VA = "0xB2D71C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CDA0", Offset = "0x67CDA0")]
			remove
			{
			}
		}

		[Address(RVA = "0xB2D95C", Offset = "0xB2D95C", VA = "0xB2D95C", Slot = "4")]
		public virtual void OnInteractableObjectEnabled(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2D980", Offset = "0xB2D980", VA = "0xB2D980", Slot = "5")]
		public virtual void OnInteractableObjectDisabled(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2D9A4", Offset = "0xB2D9A4", VA = "0xB2D9A4", Slot = "6")]
		public virtual void OnInteractableObjectNearTouched(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2D9C8", Offset = "0xB2D9C8", VA = "0xB2D9C8", Slot = "7")]
		public virtual void OnInteractableObjectNearUntouched(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2D9EC", Offset = "0xB2D9EC", VA = "0xB2D9EC", Slot = "8")]
		public virtual void OnInteractableObjectTouched(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DA10", Offset = "0xB2DA10", VA = "0xB2DA10", Slot = "9")]
		public virtual void OnInteractableObjectUntouched(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DA34", Offset = "0xB2DA34", VA = "0xB2DA34", Slot = "10")]
		public virtual void OnInteractableObjectGrabbed(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DA58", Offset = "0xB2DA58", VA = "0xB2DA58", Slot = "11")]
		public virtual void OnInteractableObjectUngrabbed(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DA7C", Offset = "0xB2DA7C", VA = "0xB2DA7C", Slot = "12")]
		public virtual void OnInteractableObjectUsed(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DAA0", Offset = "0xB2DAA0", VA = "0xB2DAA0", Slot = "13")]
		public virtual void OnInteractableObjectUnused(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DAC4", Offset = "0xB2DAC4", VA = "0xB2DAC4", Slot = "14")]
		public virtual void OnInteractableObjectEnteredSnapDropZone(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DAE8", Offset = "0xB2DAE8", VA = "0xB2DAE8", Slot = "15")]
		public virtual void OnInteractableObjectExitedSnapDropZone(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DB0C", Offset = "0xB2DB0C", VA = "0xB2DB0C", Slot = "16")]
		public virtual void OnInteractableObjectSnappedToDropZone(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DB30", Offset = "0xB2DB30", VA = "0xB2DB30", Slot = "17")]
		public virtual void OnInteractableObjectUnsnappedFromDropZone(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB2DB54", Offset = "0xB2DB54", VA = "0xB2DB54")]
		public InteractableObjectEventArgs SetInteractableObjectEvent(GameObject interactingObject)
		{
			return default(InteractableObjectEventArgs);
		}

		[Address(RVA = "0xB2DB5C", Offset = "0xB2DB5C", VA = "0xB2DB5C", Slot = "18")]
		public virtual bool IsNearTouched()
		{
			return default(bool);
		}

		[Address(RVA = "0xB2DBE8", Offset = "0xB2DBE8", VA = "0xB2DBE8", Slot = "19")]
		public virtual bool IsTouched()
		{
			return default(bool);
		}

		[Address(RVA = "0xB2DC54", Offset = "0xB2DC54", VA = "0xB2DC54", Slot = "20")]
		public virtual bool IsGrabbed([Optional] GameObject grabbedBy)
		{
			return default(bool);
		}

		[Address(RVA = "0xB2DD58", Offset = "0xB2DD58", VA = "0xB2DD58", Slot = "21")]
		public virtual bool IsUsing([Optional] GameObject usedBy)
		{
			return default(bool);
		}

		[Address(RVA = "0xB2DE88", Offset = "0xB2DE88", VA = "0xB2DE88", Slot = "22")]
		public virtual void StartNearTouching([Optional] VRTK_InteractNearTouch currentNearTouchingObject)
		{
		}

		[Address(RVA = "0xB2DFB8", Offset = "0xB2DFB8", VA = "0xB2DFB8", Slot = "23")]
		public virtual void StopNearTouching([Optional] VRTK_InteractNearTouch previousNearTouchingObject)
		{
		}

		[Address(RVA = "0xB2E0D0", Offset = "0xB2E0D0", VA = "0xB2E0D0", Slot = "24")]
		public virtual void StartTouching([Optional] VRTK_InteractTouch currentTouchingObject)
		{
		}

		[Address(RVA = "0xB2E218", Offset = "0xB2E218", VA = "0xB2E218", Slot = "25")]
		public virtual void StopTouching([Optional] VRTK_InteractTouch previousTouchingObject)
		{
		}

		[Address(RVA = "0xB2E348", Offset = "0xB2E348", VA = "0xB2E348", Slot = "26")]
		public virtual void Grabbed([Optional] VRTK_InteractGrab currentGrabbingObject)
		{
		}

		[Address(RVA = "0xB2E46C", Offset = "0xB2E46C", VA = "0xB2E46C", Slot = "27")]
		public virtual void Ungrabbed([Optional] VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Address(RVA = "0xB2E5E0", Offset = "0xB2E5E0", VA = "0xB2E5E0", Slot = "28")]
		public virtual void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0xB2E6FC", Offset = "0xB2E6FC", VA = "0xB2E6FC", Slot = "29")]
		public virtual void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Address(RVA = "0xB2E7D0", Offset = "0xB2E7D0", VA = "0xB2E7D0", Slot = "30")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67CDB0", Offset = "0x67CDB0")]
		public virtual void ToggleHighlight(bool toggle, [Optional] Color? highlightColor)
		{
		}

		[Address(RVA = "0xB2E8D4", Offset = "0xB2E8D4", VA = "0xB2E8D4", Slot = "31")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67CDE8", Offset = "0x67CDE8")]
		public virtual void Highlight(Color highlightColor)
		{
		}

		[Address(RVA = "0xB2E9C0", Offset = "0xB2E9C0", VA = "0xB2E9C0", Slot = "32")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67CE20", Offset = "0x67CE20")]
		public virtual void Unhighlight()
		{
		}

		[Address(RVA = "0xB2EA74", Offset = "0xB2EA74", VA = "0xB2EA74", Slot = "33")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67CE58", Offset = "0x67CE58")]
		public virtual void ResetHighlighter()
		{
		}

		[Address(RVA = "0xB2EB28", Offset = "0xB2EB28", VA = "0xB2EB28", Slot = "34")]
		public virtual void PauseCollisions(float delay)
		{
		}

		[Address(RVA = "0xB2EC2C", Offset = "0xB2EC2C", VA = "0xB2EC2C", Slot = "35")]
		public virtual void ZeroVelocity()
		{
		}

		[Address(RVA = "0xB2ED5C", Offset = "0xB2ED5C", VA = "0xB2ED5C", Slot = "36")]
		public virtual void SaveCurrentState()
		{
		}

		[Address(RVA = "0xB2EE64", Offset = "0xB2EE64", VA = "0xB2EE64", Slot = "37")]
		public virtual void GetPreviousState(out Transform previousParent, out bool previousKinematic, out bool previousGrabbable)
		{
		}

		[Address(RVA = "0xB2EE80", Offset = "0xB2EE80", VA = "0xB2EE80", Slot = "38")]
		public virtual void OverridePreviousState(Transform previousParent, bool previousKinematic, bool previousGrabbable)
		{
		}

		[Address(RVA = "0xB2EE98", Offset = "0xB2EE98", VA = "0xB2EE98", Slot = "39")]
		public virtual List<GameObject> GetNearTouchingObjects()
		{
			return null;
		}

		[Address(RVA = "0xB2EF08", Offset = "0xB2EF08", VA = "0xB2EF08", Slot = "40")]
		public virtual List<GameObject> GetTouchingObjects()
		{
			return null;
		}

		[Address(RVA = "0xB2EF78", Offset = "0xB2EF78", VA = "0xB2EF78", Slot = "41")]
		public virtual GameObject GetGrabbingObject()
		{
			return null;
		}

		[Address(RVA = "0xB2F004", Offset = "0xB2F004", VA = "0xB2F004", Slot = "42")]
		public virtual GameObject GetSecondaryGrabbingObject()
		{
			return null;
		}

		[Address(RVA = "0xB2F0A0", Offset = "0xB2F0A0", VA = "0xB2F0A0", Slot = "43")]
		public virtual GameObject GetUsingObject()
		{
			return null;
		}

		[Address(RVA = "0xB2F0D0", Offset = "0xB2F0D0", VA = "0xB2F0D0", Slot = "44")]
		public virtual VRTK_InteractUse GetUsingScript()
		{
			return null;
		}

		[Address(RVA = "0xB2F0D8", Offset = "0xB2F0D8", VA = "0xB2F0D8", Slot = "45")]
		public virtual bool IsValidInteractableController(GameObject actualController, AllowedController controllerCheck)
		{
			return default(bool);
		}

		[Address(RVA = "0xB2F1FC", Offset = "0xB2F1FC", VA = "0xB2F1FC", Slot = "46")]
		public virtual void ForceStopInteracting()
		{
		}

		[Address(RVA = "0xB2F2AC", Offset = "0xB2F2AC", VA = "0xB2F2AC", Slot = "47")]
		public virtual void ForceStopSecondaryGrabInteraction()
		{
		}

		[Address(RVA = "0xB2F384", Offset = "0xB2F384", VA = "0xB2F384", Slot = "48")]
		public virtual void RegisterTeleporters()
		{
		}

		[Address(RVA = "0xB2F3BC", Offset = "0xB2F3BC", VA = "0xB2F3BC", Slot = "49")]
		public virtual void UnregisterTeleporters()
		{
		}

		[Address(RVA = "0xB2F554", Offset = "0xB2F554", VA = "0xB2F554", Slot = "50")]
		public virtual void StoreLocalScale()
		{
		}

		[Address(RVA = "0xB2F598", Offset = "0xB2F598", VA = "0xB2F598", Slot = "51")]
		public virtual void ToggleSnapDropZone(VRTK_SnapDropZone snapDropZone, bool state)
		{
		}

		[Address(RVA = "0xB2F6B4", Offset = "0xB2F6B4", VA = "0xB2F6B4", Slot = "52")]
		public virtual bool IsInSnapDropZone()
		{
			return default(bool);
		}

		[Address(RVA = "0xB2F6BC", Offset = "0xB2F6BC", VA = "0xB2F6BC", Slot = "53")]
		public virtual void SetSnapDropZoneHover(VRTK_SnapDropZone snapDropZone, bool state)
		{
		}

		[Address(RVA = "0xB2F808", Offset = "0xB2F808", VA = "0xB2F808", Slot = "54")]
		public virtual VRTK_SnapDropZone GetStoredSnapDropZone()
		{
			return null;
		}

		[Address(RVA = "0xB2F810", Offset = "0xB2F810", VA = "0xB2F810", Slot = "55")]
		public virtual bool IsHoveredOverSnapDropZone()
		{
			return default(bool);
		}

		[Address(RVA = "0xB2F818", Offset = "0xB2F818", VA = "0xB2F818", Slot = "56")]
		public virtual bool IsDroppable()
		{
			return default(bool);
		}

		[Address(RVA = "0xB2F84C", Offset = "0xB2F84C", VA = "0xB2F84C", Slot = "57")]
		public virtual bool IsSwappable()
		{
			return default(bool);
		}

		[Address(RVA = "0xB2F8F0", Offset = "0xB2F8F0", VA = "0xB2F8F0", Slot = "58")]
		public virtual bool PerformSecondaryAction()
		{
			return default(bool);
		}

		[Address(RVA = "0xB2FA30", Offset = "0xB2FA30", VA = "0xB2FA30", Slot = "59")]
		public virtual void ResetIgnoredColliders()
		{
		}

		[Address(RVA = "0xB2FCF0", Offset = "0xB2FCF0", VA = "0xB2FCF0", Slot = "60")]
		public virtual void SubscribeToInteractionEvent(InteractionType givenType, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB2FD0C", Offset = "0xB2FD0C", VA = "0xB2FD0C", Slot = "61")]
		public virtual void UnsubscribeFromInteractionEvent(InteractionType givenType, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB2FD28", Offset = "0xB2FD28", VA = "0xB2FD28", Slot = "62")]
		public virtual Transform GetPrimaryAttachPoint()
		{
			return null;
		}

		[Address(RVA = "0xB2FD30", Offset = "0xB2FD30", VA = "0xB2FD30", Slot = "63")]
		public virtual Transform GetSecondaryAttachPoint()
		{
			return null;
		}

		[Address(RVA = "0xB2FD38", Offset = "0xB2FD38", VA = "0xB2FD38", Slot = "64")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB2FF74", Offset = "0xB2FF74", VA = "0xB2FF74", Slot = "65")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB2FFD8", Offset = "0xB2FFD8", VA = "0xB2FFD8", Slot = "66")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB30038", Offset = "0xB30038", VA = "0xB30038", Slot = "67")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xB30168", Offset = "0xB30168", VA = "0xB30168", Slot = "68")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB302BC", Offset = "0xB302BC", VA = "0xB302BC", Slot = "69")]
		protected virtual bool IsIdle()
		{
			return default(bool);
		}

		[Address(RVA = "0xB30348", Offset = "0xB30348", VA = "0xB30348", Slot = "70")]
		protected virtual void LateUpdate()
		{
		}

		[Address(RVA = "0xB303A4", Offset = "0xB303A4", VA = "0xB303A4", Slot = "71")]
		protected virtual void LoadPreviousState()
		{
		}

		[Address(RVA = "0xB304C4", Offset = "0xB304C4", VA = "0xB304C4", Slot = "72")]
		protected virtual void IgnoreColliders(GameObject touchingObject)
		{
		}

		[Address(RVA = "0xB30674", Offset = "0xB30674", VA = "0xB30674", Slot = "73")]
		protected virtual void ToggleEnableState(bool state)
		{
		}

		[Address(RVA = "0xB3068C", Offset = "0xB3068C", VA = "0xB3068C", Slot = "74")]
		protected virtual void AttemptSetGrabMechanic()
		{
		}

		[Address(RVA = "0xB30790", Offset = "0xB30790", VA = "0xB30790", Slot = "75")]
		protected virtual void AttemptSetSecondaryGrabAction()
		{
		}

		[Address(RVA = "0xB30828", Offset = "0xB30828", VA = "0xB30828", Slot = "76")]
		protected virtual void ForceReleaseGrab()
		{
		}

		[Address(RVA = "0xB30900", Offset = "0xB30900", VA = "0xB30900", Slot = "77")]
		protected virtual void PrimaryControllerGrab(GameObject currentGrabbingObject)
		{
		}

		[Address(RVA = "0xB309F0", Offset = "0xB309F0", VA = "0xB309F0", Slot = "78")]
		protected virtual void SecondaryControllerGrab(GameObject currentGrabbingObject)
		{
		}

		[Address(RVA = "0xB30BBC", Offset = "0xB30BBC", VA = "0xB30BBC", Slot = "79")]
		protected virtual void PrimaryControllerUngrab(GameObject previousGrabbingObject, GameObject previousSecondaryGrabbingObject)
		{
		}

		[Address(RVA = "0xB30D44", Offset = "0xB30D44", VA = "0xB30D44", Slot = "80")]
		protected virtual void SecondaryControllerUngrab(GameObject previousGrabbingObject)
		{
		}

		[Address(RVA = "0xB30E50", Offset = "0xB30E50", VA = "0xB30E50", Slot = "81")]
		protected virtual void UnpauseCollisions()
		{
		}

		[Address(RVA = "0xB30F14", Offset = "0xB30F14", VA = "0xB30F14", Slot = "82")]
		protected virtual void SetTrackPoint(GameObject currentGrabbingObject)
		{
		}

		[Address(RVA = "0xB31064", Offset = "0xB31064", VA = "0xB31064", Slot = "83")]
		protected virtual Transform CreateAttachPoint(string namePrefix, string nameSuffix, Transform origin)
		{
			return null;
		}

		[Address(RVA = "0xB313A0", Offset = "0xB313A0", VA = "0xB313A0", Slot = "84")]
		protected virtual void AddTrackPoint(GameObject currentGrabbingObject)
		{
		}

		[Address(RVA = "0xB31538", Offset = "0xB31538", VA = "0xB31538", Slot = "85")]
		protected virtual void RemoveTrackPoint()
		{
		}

		[Address(RVA = "0xB3169C", Offset = "0xB3169C", VA = "0xB3169C", Slot = "86")]
		protected virtual void OnTeleporting(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xB316F0", Offset = "0xB316F0", VA = "0xB316F0", Slot = "87")]
		protected virtual void OnTeleported(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xB318E8", Offset = "0xB318E8", VA = "0xB318E8", Slot = "88")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67CE90", Offset = "0x67CE90")]
		protected virtual IEnumerator RegisterTeleportersAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xB31988", Offset = "0xB31988", VA = "0xB31988", Slot = "89")]
		protected virtual void ResetUseState(GameObject checkObject)
		{
		}

		[Address(RVA = "0xB31A8C", Offset = "0xB31A8C", VA = "0xB31A8C", Slot = "90")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67CEF4", Offset = "0x67CEF4")]
		protected virtual IEnumerator ForceStopInteractingAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xB31B2C", Offset = "0xB31B2C", VA = "0xB31B2C", Slot = "91")]
		protected virtual void ForceStopAllInteractions()
		{
		}

		[Address(RVA = "0xB31B94", Offset = "0xB31B94", VA = "0xB31B94", Slot = "92")]
		protected virtual void StopTouchingInteractions()
		{
		}

		[Address(RVA = "0xB31D44", Offset = "0xB31D44", VA = "0xB31D44", Slot = "93")]
		protected virtual void StopGrabbingInteractions()
		{
		}

		[Address(RVA = "0xB31ED0", Offset = "0xB31ED0", VA = "0xB31ED0", Slot = "94")]
		protected virtual void StopUsingInteractions()
		{
		}

		[Address(RVA = "0xB32030", Offset = "0xB32030", VA = "0xB32030", Slot = "95")]
		protected virtual void ResetDropSnapType()
		{
		}

		[Address(RVA = "0xB32210", Offset = "0xB32210", VA = "0xB32210", Slot = "96")]
		protected virtual void ResetUsingObject()
		{
		}

		[Address(RVA = "0xB322B0", Offset = "0xB322B0", VA = "0xB322B0", Slot = "97")]
		protected virtual void ManageInteractionEvent(InteractionType givenType, bool state, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB32360", Offset = "0xB32360", VA = "0xB32360", Slot = "98")]
		protected virtual void ManageNearTouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB32374", Offset = "0xB32374", VA = "0xB32374", Slot = "99")]
		protected virtual void ManageTouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB32388", Offset = "0xB32388", VA = "0xB32388", Slot = "100")]
		protected virtual void ManageGrabSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB3239C", Offset = "0xB3239C", VA = "0xB3239C", Slot = "101")]
		protected virtual void ManageUseSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB323B0", Offset = "0xB323B0", VA = "0xB323B0", Slot = "102")]
		protected virtual void ManageNearUntouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB323C4", Offset = "0xB323C4", VA = "0xB323C4", Slot = "103")]
		protected virtual void ManageUntouchSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB323D8", Offset = "0xB323D8", VA = "0xB323D8", Slot = "104")]
		protected virtual void ManageUngrabSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB323EC", Offset = "0xB323EC", VA = "0xB323EC", Slot = "105")]
		protected virtual void ManageUnuseSubscriptions(bool register, InteractableObjectEventHandler methodCallback)
		{
		}

		[Address(RVA = "0xB32400", Offset = "0xB32400", VA = "0xB32400")]
		public VRTK_InteractableObject()
		{
		}
	}
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6562B8", Offset = "0x6562B8")]
	public struct InteractControllerAppearanceEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject ignoredObject;
	}
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6562F0", Offset = "0x6562F0")]
	public delegate void InteractControllerAppearanceEventHandler(object sender, InteractControllerAppearanceEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656328", Offset = "0x656328")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x656328", Offset = "0x656328")]
	public class VRTK_InteractControllerAppearance : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B180", Offset = "0x65B180")]
		private sealed class <HideController>d__48 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject interactingObject;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject ignoredObject;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public VRTK_InteractControllerAppearance <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xEA43CC", Offset = "0xEA43CC", VA = "0xEA43CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xEA443C", Offset = "0xEA443C", VA = "0xEA443C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xEA4270", Offset = "0xEA4270", VA = "0xEA4270")]
			[DebuggerHidden]
			public <HideController>d__48(int <>1__state)
			{
			}

			[Address(RVA = "0xEA42B8", Offset = "0xEA42B8", VA = "0xEA42B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xEA42BC", Offset = "0xEA42BC", VA = "0xEA42BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xEA43D4", Offset = "0xEA43D4", VA = "0xEA43D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66317C", Offset = "0x66317C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66317C", Offset = "0x66317C")]
		public bool hideControllerOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6631DC", Offset = "0x6631DC")]
		public float hideDelayOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663214", Offset = "0x663214")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663214", Offset = "0x663214")]
		public bool hideControllerOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663274", Offset = "0x663274")]
		public float hideDelayOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6632AC", Offset = "0x6632AC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6632AC", Offset = "0x6632AC")]
		public bool hideControllerOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66330C", Offset = "0x66330C")]
		public float hideDelayOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool touchControllerShow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool grabControllerShow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Coroutine hideControllerRoutine;

		public event InteractControllerAppearanceEventHandler ControllerHidden
		{
			[Address(RVA = "0xEA1A4C", Offset = "0xEA1A4C", VA = "0xEA1A4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CF58", Offset = "0x67CF58")]
			add
			{
			}
			[Address(RVA = "0xEA1B38", Offset = "0xEA1B38", VA = "0xEA1B38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CF68", Offset = "0x67CF68")]
			remove
			{
			}
		}

		public event InteractControllerAppearanceEventHandler ControllerVisible
		{
			[Address(RVA = "0xEA1C24", Offset = "0xEA1C24", VA = "0xEA1C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CF78", Offset = "0x67CF78")]
			add
			{
			}
			[Address(RVA = "0xEA1D10", Offset = "0xEA1D10", VA = "0xEA1D10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CF88", Offset = "0x67CF88")]
			remove
			{
			}
		}

		public event InteractControllerAppearanceEventHandler HiddenOnTouch
		{
			[Address(RVA = "0xEA1DFC", Offset = "0xEA1DFC", VA = "0xEA1DFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CF98", Offset = "0x67CF98")]
			add
			{
			}
			[Address(RVA = "0xEA1EE8", Offset = "0xEA1EE8", VA = "0xEA1EE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CFA8", Offset = "0x67CFA8")]
			remove
			{
			}
		}

		public event InteractControllerAppearanceEventHandler VisibleOnTouch
		{
			[Address(RVA = "0xEA1FD4", Offset = "0xEA1FD4", VA = "0xEA1FD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CFB8", Offset = "0x67CFB8")]
			add
			{
			}
			[Address(RVA = "0xEA30C0", Offset = "0xEA30C0", VA = "0xEA30C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CFC8", Offset = "0x67CFC8")]
			remove
			{
			}
		}

		public event InteractControllerAppearanceEventHandler HiddenOnGrab
		{
			[Address(RVA = "0xEA31AC", Offset = "0xEA31AC", VA = "0xEA31AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CFD8", Offset = "0x67CFD8")]
			add
			{
			}
			[Address(RVA = "0xEA3298", Offset = "0xEA3298", VA = "0xEA3298")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CFE8", Offset = "0x67CFE8")]
			remove
			{
			}
		}

		public event InteractControllerAppearanceEventHandler VisibleOnGrab
		{
			[Address(RVA = "0xEA3384", Offset = "0xEA3384", VA = "0xEA3384")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67CFF8", Offset = "0x67CFF8")]
			add
			{
			}
			[Address(RVA = "0xEA3470", Offset = "0xEA3470", VA = "0xEA3470")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D008", Offset = "0x67D008")]
			remove
			{
			}
		}

		public event InteractControllerAppearanceEventHandler HiddenOnUse
		{
			[Address(RVA = "0xEA355C", Offset = "0xEA355C", VA = "0xEA355C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D018", Offset = "0x67D018")]
			add
			{
			}
			[Address(RVA = "0xEA3648", Offset = "0xEA3648", VA = "0xEA3648")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D028", Offset = "0x67D028")]
			remove
			{
			}
		}

		public event InteractControllerAppearanceEventHandler VisibleOnUse
		{
			[Address(RVA = "0xEA3734", Offset = "0xEA3734", VA = "0xEA3734")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D038", Offset = "0x67D038")]
			add
			{
			}
			[Address(RVA = "0xEA3820", Offset = "0xEA3820", VA = "0xEA3820")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D048", Offset = "0x67D048")]
			remove
			{
			}
		}

		[Address(RVA = "0xEA390C", Offset = "0xEA390C", VA = "0xEA390C", Slot = "4")]
		public virtual void OnControllerHidden(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA3938", Offset = "0xEA3938", VA = "0xEA3938", Slot = "5")]
		public virtual void OnControllerVisible(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA3964", Offset = "0xEA3964", VA = "0xEA3964", Slot = "6")]
		public virtual void OnHiddenOnTouch(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA3990", Offset = "0xEA3990", VA = "0xEA3990", Slot = "7")]
		public virtual void OnVisibleOnTouch(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA39BC", Offset = "0xEA39BC", VA = "0xEA39BC", Slot = "8")]
		public virtual void OnHiddenOnGrab(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA39E8", Offset = "0xEA39E8", VA = "0xEA39E8", Slot = "9")]
		public virtual void OnVisibleOnGrab(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA3A14", Offset = "0xEA3A14", VA = "0xEA3A14", Slot = "10")]
		public virtual void OnHiddenOnUse(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA3A40", Offset = "0xEA3A40", VA = "0xEA3A40", Slot = "11")]
		public virtual void OnVisibleOnUse(InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEA3A6C", Offset = "0xEA3A6C", VA = "0xEA3A6C", Slot = "12")]
		public virtual void ToggleControllerOnTouch(bool showController, GameObject touchingObject, GameObject ignoredObject)
		{
		}

		[Address(RVA = "0xEA3B20", Offset = "0xEA3B20", VA = "0xEA3B20", Slot = "13")]
		public virtual void ToggleControllerOnGrab(bool showController, GameObject grabbingObject, GameObject ignoredObject)
		{
		}

		[Address(RVA = "0xEA3CB8", Offset = "0xEA3CB8", VA = "0xEA3CB8", Slot = "14")]
		public virtual void ToggleControllerOnUse(bool showController, GameObject usingObject, GameObject ignoredObject)
		{
		}

		[Address(RVA = "0xEA3EA4", Offset = "0xEA3EA4", VA = "0xEA3EA4", Slot = "15")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEA408C", Offset = "0xEA408C", VA = "0xEA408C", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEA40A0", Offset = "0xEA40A0", VA = "0xEA40A0", Slot = "17")]
		protected virtual void ToggleController(bool showController, GameObject interactingObject, GameObject ignoredObject, float delayTime)
		{
		}

		[Address(RVA = "0xEA4118", Offset = "0xEA4118", VA = "0xEA4118", Slot = "18")]
		protected virtual void ShowController(GameObject interactingObject, GameObject ignoredObject)
		{
		}

		[Address(RVA = "0xEA41A4", Offset = "0xEA41A4", VA = "0xEA41A4", Slot = "19")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67D058", Offset = "0x67D058")]
		protected virtual IEnumerator HideController(GameObject interactingObject, GameObject ignoredObject, float delayTime)
		{
			return null;
		}

		[Address(RVA = "0xEA429C", Offset = "0xEA429C", VA = "0xEA429C", Slot = "20")]
		protected virtual InteractControllerAppearanceEventArgs SetEventPayload(GameObject interactingObject, GameObject ignroedObject)
		{
			return default(InteractControllerAppearanceEventArgs);
		}

		[Address(RVA = "0xEA42A8", Offset = "0xEA42A8", VA = "0xEA42A8")]
		public VRTK_InteractControllerAppearance()
		{
		}
	}
	public struct InteractHapticsEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;
	}
	public delegate void InteractHapticsEventHandler(object sender, InteractHapticsEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656388", Offset = "0x656388")]
	public class VRTK_InteractHaptics : VRTK_InteractableListener
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6633C4", Offset = "0x6633C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6633C4", Offset = "0x6633C4")]
		public AudioClip clipOnNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663424", Offset = "0x663424")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x663424", Offset = "0x663424")]
		public float strengthOnNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663478", Offset = "0x663478")]
		public float durationOnNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6634B0", Offset = "0x6634B0")]
		public float intervalOnNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6634E8", Offset = "0x6634E8")]
		public bool cancelOnNearUntouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663520", Offset = "0x663520")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663520", Offset = "0x663520")]
		public AudioClip clipOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663580", Offset = "0x663580")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x663580", Offset = "0x663580")]
		public float strengthOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6635D4", Offset = "0x6635D4")]
		public float durationOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66360C", Offset = "0x66360C")]
		public float intervalOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663644", Offset = "0x663644")]
		public bool cancelOnUntouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66367C", Offset = "0x66367C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66367C", Offset = "0x66367C")]
		public AudioClip clipOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6636DC", Offset = "0x6636DC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6636DC", Offset = "0x6636DC")]
		public float strengthOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663730", Offset = "0x663730")]
		public float durationOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663768", Offset = "0x663768")]
		public float intervalOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6637A0", Offset = "0x6637A0")]
		public bool cancelOnUngrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6637D8", Offset = "0x6637D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6637D8", Offset = "0x6637D8")]
		public AudioClip clipOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663838", Offset = "0x663838")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x663838", Offset = "0x663838")]
		public float strengthOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66388C", Offset = "0x66388C")]
		public float durationOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6638C4", Offset = "0x6638C4")]
		public float intervalOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6638FC", Offset = "0x6638FC")]
		public bool cancelOnUnuse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663934", Offset = "0x663934")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663934", Offset = "0x663934")]
		public VRTK_InteractableObject objectToAffect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float minInterval = 0.05f;

		public event InteractHapticsEventHandler InteractHapticsNearTouched
		{
			[Address(RVA = "0xEA7F18", Offset = "0xEA7F18", VA = "0xEA7F18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D0BC", Offset = "0x67D0BC")]
			add
			{
			}
			[Address(RVA = "0xEA8004", Offset = "0xEA8004", VA = "0xEA8004")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D0CC", Offset = "0x67D0CC")]
			remove
			{
			}
		}

		public event InteractHapticsEventHandler InteractHapticsTouched
		{
			[Address(RVA = "0xEA80F0", Offset = "0xEA80F0", VA = "0xEA80F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D0DC", Offset = "0x67D0DC")]
			add
			{
			}
			[Address(RVA = "0xEA81DC", Offset = "0xEA81DC", VA = "0xEA81DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D0EC", Offset = "0x67D0EC")]
			remove
			{
			}
		}

		public event InteractHapticsEventHandler InteractHapticsGrabbed
		{
			[Address(RVA = "0xEA82C8", Offset = "0xEA82C8", VA = "0xEA82C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D0FC", Offset = "0x67D0FC")]
			add
			{
			}
			[Address(RVA = "0xEA83B4", Offset = "0xEA83B4", VA = "0xEA83B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D10C", Offset = "0x67D10C")]
			remove
			{
			}
		}

		public event InteractHapticsEventHandler InteractHapticsUsed
		{
			[Address(RVA = "0xEA84A0", Offset = "0xEA84A0", VA = "0xEA84A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D11C", Offset = "0x67D11C")]
			add
			{
			}
			[Address(RVA = "0xEA858C", Offset = "0xEA858C", VA = "0xEA858C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D12C", Offset = "0x67D12C")]
			remove
			{
			}
		}

		[Address(RVA = "0xEA8678", Offset = "0xEA8678", VA = "0xEA8678", Slot = "9")]
		public virtual void OnInteractHapticsNearTouched(InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0xEA869C", Offset = "0xEA869C", VA = "0xEA869C", Slot = "10")]
		public virtual void OnInteractHapticsTouched(InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0xEA86C0", Offset = "0xEA86C0", VA = "0xEA86C0", Slot = "11")]
		public virtual void OnInteractHapticsGrabbed(InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0xEA86E4", Offset = "0xEA86E4", VA = "0xEA86E4", Slot = "12")]
		public virtual void OnInteractHapticsUsed(InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0xEA8708", Offset = "0xEA8708", VA = "0xEA8708", Slot = "13")]
		public virtual void CancelHaptics(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xEA8714", Offset = "0xEA8714", VA = "0xEA8714", Slot = "14")]
		public virtual void HapticsOnNearTouch(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xEA8818", Offset = "0xEA8818", VA = "0xEA8818", Slot = "15")]
		public virtual void HapticsOnTouch(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xEA891C", Offset = "0xEA891C", VA = "0xEA891C", Slot = "16")]
		public virtual void HapticsOnGrab(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xEA8A20", Offset = "0xEA8A20", VA = "0xEA8A20", Slot = "17")]
		public virtual void HapticsOnUse(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xEA8B24", Offset = "0xEA8B24", VA = "0xEA8B24", Slot = "18")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEA8B30", Offset = "0xEA8B30", VA = "0xEA8B30", Slot = "19")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEA8B3C", Offset = "0xEA8B3C", VA = "0xEA8B3C", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Address(RVA = "0xEA8FDC", Offset = "0xEA8FDC", VA = "0xEA8FDC", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Address(RVA = "0xEAA2D0", Offset = "0xEAA2D0", VA = "0xEAA2D0", Slot = "20")]
		protected virtual void TriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength, float duration, float interval)
		{
		}

		[Address(RVA = "0xEAA2E8", Offset = "0xEAA2E8", VA = "0xEAA2E8", Slot = "21")]
		protected virtual InteractHapticsEventArgs SetEventPayload(VRTK_ControllerReference givenControllerReference)
		{
			return default(InteractHapticsEventArgs);
		}

		[Address(RVA = "0xEAA2F0", Offset = "0xEAA2F0", VA = "0xEAA2F0", Slot = "22")]
		protected virtual void NearTouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA39C", Offset = "0xEAA39C", VA = "0xEAA39C", Slot = "23")]
		protected virtual void TouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA448", Offset = "0xEAA448", VA = "0xEAA448", Slot = "24")]
		protected virtual void GrabHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA4F4", Offset = "0xEAA4F4", VA = "0xEAA4F4", Slot = "25")]
		protected virtual void UseHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA5A0", Offset = "0xEAA5A0", VA = "0xEAA5A0", Slot = "26")]
		protected virtual void CancelOn(GameObject givenObject)
		{
		}

		[Address(RVA = "0xEAA648", Offset = "0xEAA648", VA = "0xEAA648", Slot = "27")]
		protected virtual void CancelNearTouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA66C", Offset = "0xEAA66C", VA = "0xEAA66C", Slot = "28")]
		protected virtual void CancelTouchHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA690", Offset = "0xEAA690", VA = "0xEAA690", Slot = "29")]
		protected virtual void CancelGrabHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA6B4", Offset = "0xEAA6B4", VA = "0xEAA6B4", Slot = "30")]
		protected virtual void CancelUseHaptics(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAA6D8", Offset = "0xEAA6D8", VA = "0xEAA6D8")]
		public VRTK_InteractHaptics()
		{
		}
	}
	public struct InteractObjectAppearanceEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject affectingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject objectToIgnore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VRTK_InteractableObject monitoringObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject.InteractionType interactionType;
	}
	public delegate void InteractObjectAppearanceEventHandler(object sender, InteractObjectAppearanceEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6563C0", Offset = "0x6563C0")]
	public class VRTK_InteractObjectAppearance : VRTK_InteractableListener
	{
		public enum ValidInteractingObject
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Anything,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			EitherController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NeitherController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftControllerOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightControllerOnly
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B190", Offset = "0x65B190")]
		private sealed class <ToggleStateAfterTime>d__56 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_InteractObjectAppearance <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject objectToToggle;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool gameObjectShow;

			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			public bool rendererShow;

			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public VRTK_InteractableObject.InteractionType interactionType;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xEB0174", Offset = "0xEB0174", VA = "0xEB0174", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xEB01E4", Offset = "0xEB01E4", VA = "0xEB01E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xEADD08", Offset = "0xEADD08", VA = "0xEADD08")]
			[DebuggerHidden]
			public <ToggleStateAfterTime>d__56(int <>1__state)
			{
			}

			[Address(RVA = "0xEB0078", Offset = "0xEB0078", VA = "0xEB0078", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xEB007C", Offset = "0xEB007C", VA = "0xEB007C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xEB017C", Offset = "0xEB017C", VA = "0xEB017C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6639D4", Offset = "0x6639D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6639D4", Offset = "0x6639D4")]
		public GameObject objectToAffect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663A34", Offset = "0x663A34")]
		protected VRTK_InteractableObject objectToMonitor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663A80", Offset = "0x663A80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663A80", Offset = "0x663A80")]
		public bool gameObjectActiveByDefault;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663AE0", Offset = "0x663AE0")]
		public bool rendererVisibleByDefault;

		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663B18", Offset = "0x663B18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663B18", Offset = "0x663B18")]
		public bool gameObjectActiveOnNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663B78", Offset = "0x663B78")]
		public bool rendererVisibleOnNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663BB0", Offset = "0x663BB0")]
		public float nearTouchAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663BE8", Offset = "0x663BE8")]
		public float nearUntouchAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663C20", Offset = "0x663C20")]
		public ValidInteractingObject validNearTouchInteractingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663C58", Offset = "0x663C58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663C58", Offset = "0x663C58")]
		public bool gameObjectActiveOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663CB8", Offset = "0x663CB8")]
		public bool rendererVisibleOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663CF0", Offset = "0x663CF0")]
		public float touchAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663D28", Offset = "0x663D28")]
		public float untouchAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663D60", Offset = "0x663D60")]
		public ValidInteractingObject validTouchInteractingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663D98", Offset = "0x663D98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663D98", Offset = "0x663D98")]
		public bool gameObjectActiveOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663DF8", Offset = "0x663DF8")]
		public bool rendererVisibleOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663E30", Offset = "0x663E30")]
		public float grabAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663E68", Offset = "0x663E68")]
		public float ungrabAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663EA0", Offset = "0x663EA0")]
		public ValidInteractingObject validGrabInteractingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x663ED8", Offset = "0x663ED8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663ED8", Offset = "0x663ED8")]
		public bool gameObjectActiveOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663F38", Offset = "0x663F38")]
		public bool rendererVisibleOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663F70", Offset = "0x663F70")]
		public float useAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663FA8", Offset = "0x663FA8")]
		public float unuseAppearanceDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x663FE0", Offset = "0x663FE0")]
		public ValidInteractingObject validUseInteractingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Dictionary<GameObject, bool> currentRenderStates;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Dictionary<GameObject, bool> currentGameObjectStates;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Dictionary<GameObject, Coroutine> affectingRoutines;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected HashSet<GameObject> nearTouchingObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected HashSet<GameObject> touchingObjects;

		public event InteractObjectAppearanceEventHandler GameObjectEnabled
		{
			[Address(RVA = "0xEAC2D0", Offset = "0xEAC2D0", VA = "0xEAC2D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D13C", Offset = "0x67D13C")]
			add
			{
			}
			[Address(RVA = "0xEAC3BC", Offset = "0xEAC3BC", VA = "0xEAC3BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D14C", Offset = "0x67D14C")]
			remove
			{
			}
		}

		public event InteractObjectAppearanceEventHandler GameObjectDisabled
		{
			[Address(RVA = "0xEAC4A8", Offset = "0xEAC4A8", VA = "0xEAC4A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D15C", Offset = "0x67D15C")]
			add
			{
			}
			[Address(RVA = "0xEAC594", Offset = "0xEAC594", VA = "0xEAC594")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D16C", Offset = "0x67D16C")]
			remove
			{
			}
		}

		public event InteractObjectAppearanceEventHandler RenderersEnabled
		{
			[Address(RVA = "0xEAC680", Offset = "0xEAC680", VA = "0xEAC680")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D17C", Offset = "0x67D17C")]
			add
			{
			}
			[Address(RVA = "0xEAC76C", Offset = "0xEAC76C", VA = "0xEAC76C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D18C", Offset = "0x67D18C")]
			remove
			{
			}
		}

		public event InteractObjectAppearanceEventHandler RenderersDisabled
		{
			[Address(RVA = "0xEAC858", Offset = "0xEAC858", VA = "0xEAC858")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D19C", Offset = "0x67D19C")]
			add
			{
			}
			[Address(RVA = "0xEAC944", Offset = "0xEAC944", VA = "0xEAC944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D1AC", Offset = "0x67D1AC")]
			remove
			{
			}
		}

		[Address(RVA = "0xEACA30", Offset = "0xEACA30", VA = "0xEACA30", Slot = "9")]
		public virtual void OnGameObjectEnabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEACA74", Offset = "0xEACA74", VA = "0xEACA74", Slot = "10")]
		public virtual void OnGameObjectDisabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEACAB8", Offset = "0xEACAB8", VA = "0xEACAB8", Slot = "11")]
		public virtual void OnRenderersEnabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEACAFC", Offset = "0xEACAFC", VA = "0xEACAFC", Slot = "12")]
		public virtual void OnRenderersDisabled(InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0xEACB40", Offset = "0xEACB40", VA = "0xEACB40", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEACCA4", Offset = "0xEACCA4", VA = "0xEACCA4", Slot = "14")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEACCE0", Offset = "0xEACCE0", VA = "0xEACCE0", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Address(RVA = "0xEAD214", Offset = "0xEAD214", VA = "0xEAD214", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Address(RVA = "0xEAD4C4", Offset = "0xEAD4C4", VA = "0xEAD4C4", Slot = "15")]
		protected virtual InteractObjectAppearanceEventArgs SetPayload(GameObject affectingObject, VRTK_InteractableObject.InteractionType interactionType)
		{
			return default(InteractObjectAppearanceEventArgs);
		}

		[Address(RVA = "0xEAD510", Offset = "0xEAD510", VA = "0xEAD510", Slot = "16")]
		protected virtual void RestoreDefaults()
		{
		}

		[Address(RVA = "0xEAD7D4", Offset = "0xEAD7D4", VA = "0xEAD7D4", Slot = "17")]
		protected virtual GameObject ObjectToIgnore()
		{
			return null;
		}

		[Address(RVA = "0xEAD874", Offset = "0xEAD874", VA = "0xEAD874", Slot = "18")]
		protected virtual void EmitRenderEvent(GameObject objectToToggle, bool rendererShow, VRTK_InteractableObject.InteractionType interactionType)
		{
		}

		[Address(RVA = "0xEAD924", Offset = "0xEAD924", VA = "0xEAD924", Slot = "19")]
		protected virtual void EmitGameObjectEvent(GameObject objectToToggle, bool gameObjectShow, VRTK_InteractableObject.InteractionType interactionType)
		{
		}

		[Address(RVA = "0xEAD9D4", Offset = "0xEAD9D4", VA = "0xEAD9D4", Slot = "20")]
		protected virtual void ToggleState(GameObject objectToToggle, bool gameObjectShow, bool rendererShow, VRTK_InteractableObject.InteractionType interactionType)
		{
		}

		[Address(RVA = "0xEADBF8", Offset = "0xEADBF8", VA = "0xEADBF8", Slot = "21")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67D1BC", Offset = "0x67D1BC")]
		protected virtual IEnumerator ToggleStateAfterTime(GameObject objectToToggle, bool gameObjectShow, bool rendererShow, float delayTime, VRTK_InteractableObject.InteractionType interactionType)
		{
			return null;
		}

		[Address(RVA = "0xEADD34", Offset = "0xEADD34", VA = "0xEADD34", Slot = "22")]
		protected virtual void CancelRoutines([Optional] GameObject currentAffectingObject)
		{
		}

		[Address(RVA = "0xEADF58", Offset = "0xEADF58", VA = "0xEADF58", Slot = "23")]
		protected virtual GameObject GetActualController(GameObject givenObject)
		{
			return null;
		}

		[Address(RVA = "0xEADFF8", Offset = "0xEADFF8", VA = "0xEADFF8", Slot = "24")]
		protected virtual void InteractableObjectDisabled(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAE0C4", Offset = "0xEAE0C4", VA = "0xEAE0C4", Slot = "25")]
		protected virtual bool IsValidInteractingObject(GameObject givenObject, ValidInteractingObject givenInteractingObjectValidType)
		{
			return default(bool);
		}

		[Address(RVA = "0xEAE288", Offset = "0xEAE288", VA = "0xEAE288", Slot = "26")]
		protected virtual void InteractableObjectNearTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAE3F8", Offset = "0xEAE3F8", VA = "0xEAE3F8", Slot = "27")]
		protected virtual void InteractableObjectNearUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAE568", Offset = "0xEAE568", VA = "0xEAE568", Slot = "28")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAE6D8", Offset = "0xEAE6D8", VA = "0xEAE6D8", Slot = "29")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAE890", Offset = "0xEAE890", VA = "0xEAE890", Slot = "30")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAE9D8", Offset = "0xEAE9D8", VA = "0xEAE9D8", Slot = "31")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAEBFC", Offset = "0xEAEBFC", VA = "0xEAEBFC", Slot = "32")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAED44", Offset = "0xEAED44", VA = "0xEAED44", Slot = "33")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEAEF68", Offset = "0xEAEF68", VA = "0xEAEF68")]
		public VRTK_InteractObjectAppearance()
		{
		}
	}
	public struct InteractObjectHighlighterEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_InteractableObject.InteractionType interactionType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color highlightColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject affectingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_InteractableObject objectToMonitor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject affectedObject;
	}
	public delegate void InteractObjectHighlighterEventHandler(object sender, InteractObjectHighlighterEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6563F8", Offset = "0x6563F8")]
	public class VRTK_InteractObjectHighlighter : VRTK_InteractableListener
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664058", Offset = "0x664058")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664058", Offset = "0x664058")]
		public Color nearTouchHighlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6640B8", Offset = "0x6640B8")]
		public Color touchHighlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6640F0", Offset = "0x6640F0")]
		public Color grabHighlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664128", Offset = "0x664128")]
		public Color useHighlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664160", Offset = "0x664160")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664160", Offset = "0x664160")]
		public VRTK_InteractableObject objectToMonitor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6641C0", Offset = "0x6641C0")]
		public GameObject objectToHighlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6641F8", Offset = "0x6641F8")]
		public VRTK_BaseHighlighter objectHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664230", Offset = "0x664230")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x664230", Offset = "0x664230")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x664230", Offset = "0x664230")]
		public VRTK_InteractableObject objectToAffect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Color currentColour;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected VRTK_BaseHighlighter baseHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool createBaseHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected GameObject currentAffectingObject;

		public event InteractObjectHighlighterEventHandler InteractObjectHighlighterHighlighted
		{
			[Address(RVA = "0xEB01EC", Offset = "0xEB01EC", VA = "0xEB01EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D220", Offset = "0x67D220")]
			add
			{
			}
			[Address(RVA = "0xEB02D8", Offset = "0xEB02D8", VA = "0xEB02D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D230", Offset = "0x67D230")]
			remove
			{
			}
		}

		public event InteractObjectHighlighterEventHandler InteractObjectHighlighterUnhighlighted
		{
			[Address(RVA = "0xEB03C4", Offset = "0xEB03C4", VA = "0xEB03C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D240", Offset = "0x67D240")]
			add
			{
			}
			[Address(RVA = "0xEB04B0", Offset = "0xEB04B0", VA = "0xEB04B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D250", Offset = "0x67D250")]
			remove
			{
			}
		}

		[Address(RVA = "0xEB059C", Offset = "0xEB059C", VA = "0xEB059C", Slot = "9")]
		public virtual void OnInteractObjectHighlighterHighlighted(InteractObjectHighlighterEventArgs e)
		{
		}

		[Address(RVA = "0xEB05E8", Offset = "0xEB05E8", VA = "0xEB05E8", Slot = "10")]
		public virtual void OnInteractObjectHighlighterUnhighlighted(InteractObjectHighlighterEventArgs e)
		{
		}

		[Address(RVA = "0xEB0634", Offset = "0xEB0634", VA = "0xEB0634", Slot = "11")]
		public virtual void ResetHighlighter()
		{
		}

		[Address(RVA = "0xEB06D4", Offset = "0xEB06D4", VA = "0xEB06D4", Slot = "12")]
		public virtual void Highlight(Color highlightColor)
		{
		}

		[Address(RVA = "0xEB0868", Offset = "0xEB0868", VA = "0xEB0868", Slot = "13")]
		public virtual void Unhighlight()
		{
		}

		[Address(RVA = "0xEB092C", Offset = "0xEB092C", VA = "0xEB092C", Slot = "14")]
		public virtual Color GetCurrentHighlightColor()
		{
			return default(Color);
		}

		[Address(RVA = "0xEB0938", Offset = "0xEB0938", VA = "0xEB0938", Slot = "15")]
		public virtual GameObject GetAffectingObject()
		{
			return null;
		}

		[Address(RVA = "0xEB0940", Offset = "0xEB0940", VA = "0xEB0940", Slot = "16")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEB0B08", Offset = "0xEB0B08", VA = "0xEB0B08", Slot = "17")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEB0B8C", Offset = "0xEB0B8C", VA = "0xEB0B8C", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Address(RVA = "0xEB102C", Offset = "0xEB102C", VA = "0xEB102C", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Address(RVA = "0xEB1320", Offset = "0xEB1320", VA = "0xEB1320", Slot = "18")]
		protected virtual InteractObjectHighlighterEventArgs SetEventArgs(VRTK_InteractableObject.InteractionType interactionType, GameObject affectingObject)
		{
			return default(InteractObjectHighlighterEventArgs);
		}

		[Address(RVA = "0xEB134C", Offset = "0xEB134C", VA = "0xEB134C", Slot = "19")]
		protected virtual void NearTouchHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB13E0", Offset = "0xEB13E0", VA = "0xEB13E0", Slot = "20")]
		protected virtual void NearTouchUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB1530", Offset = "0xEB1530", VA = "0xEB1530", Slot = "21")]
		protected virtual void TouchHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB15C4", Offset = "0xEB15C4", VA = "0xEB15C4", Slot = "22")]
		protected virtual void TouchUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB177C", Offset = "0xEB177C", VA = "0xEB177C", Slot = "23")]
		protected virtual void GrabHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB18D8", Offset = "0xEB18D8", VA = "0xEB18D8", Slot = "24")]
		protected virtual void GrabUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB1AE0", Offset = "0xEB1AE0", VA = "0xEB1AE0", Slot = "25")]
		protected virtual void UseHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB1B74", Offset = "0xEB1B74", VA = "0xEB1B74", Slot = "26")]
		protected virtual void UseUnHighlightObject(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xEB1DF0", Offset = "0xEB1DF0", VA = "0xEB1DF0", Slot = "27")]
		protected virtual void InitialiseHighlighter(Color highlightColor)
		{
		}

		[Address(RVA = "0xEB1FD8", Offset = "0xEB1FD8", VA = "0xEB1FD8", Slot = "28")]
		protected virtual VRTK_BaseHighlighter GetValidHighlighter()
		{
			return null;
		}

		[Address(RVA = "0xEB2068", Offset = "0xEB2068", VA = "0xEB2068")]
		public VRTK_InteractObjectHighlighter()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656430", Offset = "0x656430")]
	public class VRTK_ObjectTouchAutoInteract : VRTK_InteractableListener
	{
		public enum AutoInteractions
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Never,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NoButtonHeld,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonHeld
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6642C0", Offset = "0x6642C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6642C0", Offset = "0x6642C0")]
		public AutoInteractions grabOnTouchWhen;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664320", Offset = "0x664320")]
		public float regrabDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664358", Offset = "0x664358")]
		public bool continuousGrabCheck;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664390", Offset = "0x664390")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664390", Offset = "0x664390")]
		public AutoInteractions useOnTouchWhen;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6643F0", Offset = "0x6643F0")]
		public float reuseDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664428", Offset = "0x664428")]
		public bool continuousUseCheck;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664460", Offset = "0x664460")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664460", Offset = "0x664460")]
		public VRTK_InteractableObject interactableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float regrabTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float reuseTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<GameObject> touchers;

		[Address(RVA = "0xB3F490", Offset = "0xB3F490", VA = "0xB3F490", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB3F504", Offset = "0xB3F504", VA = "0xB3F504", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB3F510", Offset = "0xB3F510", VA = "0xB3F510", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB3F668", Offset = "0xB3F668", VA = "0xB3F668", Slot = "4")]
		protected override bool SetupListeners(bool throwError)
		{
			return default(bool);
		}

		[Address(RVA = "0xB3F990", Offset = "0xB3F990", VA = "0xB3F990", Slot = "5")]
		protected override void TearDownListeners()
		{
		}

		[Address(RVA = "0xB3FB14", Offset = "0xB3FB14", VA = "0xB3FB14", Slot = "12")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB3FB78", Offset = "0xB3FB78", VA = "0xB3FB78", Slot = "13")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB3FB90", Offset = "0xB3FB90", VA = "0xB3FB90", Slot = "14")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB3FBC8", Offset = "0xB3FBC8", VA = "0xB3FBC8", Slot = "15")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xB3FC00", Offset = "0xB3FC00", VA = "0xB3FC00", Slot = "16")]
		protected virtual void ManageTouchers(GameObject interactingObject, bool add)
		{
		}

		[Address(RVA = "0xB3FCA0", Offset = "0xB3FCA0", VA = "0xB3FCA0", Slot = "17")]
		protected virtual void CheckGrab(GameObject interactingObject)
		{
		}

		[Address(RVA = "0xB3FDCC", Offset = "0xB3FDCC", VA = "0xB3FDCC", Slot = "18")]
		protected virtual void CheckUse(GameObject interactingObject)
		{
		}

		[Address(RVA = "0xB3FF64", Offset = "0xB3FF64", VA = "0xB3FF64")]
		public VRTK_ObjectTouchAutoInteract()
		{
		}
	}
	public struct ControllerInteractionEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float buttonPressure;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector2 touchpadAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float touchpadAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 touchpadTwoAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float touchpadTwoAngle;
	}
	public delegate void ControllerInteractionEventHandler(object sender, ControllerInteractionEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656468", Offset = "0x656468")]
	public class VRTK_ControllerEvents : MonoBehaviour
	{
		public enum ButtonAlias
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Undefined,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TriggerHairline,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TriggerTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TriggerPress,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TriggerClick,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripHairline,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripPress,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripClick,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadPress,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTwoTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTwoPress,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonOneTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonOnePress,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonTwoTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonTwoPress,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			StartMenuPress,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadSense,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TriggerSense,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			MiddleFingerSense,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RingFingerSense,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PinkyFingerSense,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripSense,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripSensePress
		}

		public enum Vector2AxisAlias
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Undefined,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Touchpad,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTwo
		}

		public enum AxisType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Digital,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Axis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SenseAxis
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6644C0", Offset = "0x6644C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6644C0", Offset = "0x6644C0")]
		public int axisFidelity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664520", Offset = "0x664520")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x664520", Offset = "0x664520")]
		public float senseAxisForceZeroThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664574", Offset = "0x664574")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x664574", Offset = "0x664574")]
		public float senseAxisPressThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6645C8", Offset = "0x6645C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6645C8", Offset = "0x6645C8")]
		public float triggerClickThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664628", Offset = "0x664628")]
		public float triggerForceZeroThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664660", Offset = "0x664660")]
		public bool triggerAxisZeroOnUntouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664698", Offset = "0x664698")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664698", Offset = "0x664698")]
		public float gripClickThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6646F8", Offset = "0x6646F8")]
		public float gripForceZeroThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664730", Offset = "0x664730")]
		public bool gripAxisZeroOnUntouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664768", Offset = "0x664768")]
		public bool triggerPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664778", Offset = "0x664778")]
		public bool triggerTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664788", Offset = "0x664788")]
		public bool triggerHairlinePressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664798", Offset = "0x664798")]
		public bool triggerClicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6647A8", Offset = "0x6647A8")]
		public bool triggerAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6647B8", Offset = "0x6647B8")]
		public bool triggerSenseAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6647C8", Offset = "0x6647C8")]
		public bool gripPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6647D8", Offset = "0x6647D8")]
		public bool gripTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6647E8", Offset = "0x6647E8")]
		public bool gripHairlinePressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6647F8", Offset = "0x6647F8")]
		public bool gripClicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664808", Offset = "0x664808")]
		public bool gripAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664818", Offset = "0x664818")]
		public bool touchpadPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664828", Offset = "0x664828")]
		public bool touchpadTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664838", Offset = "0x664838")]
		public bool touchpadAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664848", Offset = "0x664848")]
		public bool touchpadSenseAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664858", Offset = "0x664858")]
		public bool touchpadTwoTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664868", Offset = "0x664868")]
		public bool touchpadTwoPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664878", Offset = "0x664878")]
		public bool touchpadTwoAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664888", Offset = "0x664888")]
		public bool buttonOnePressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664898", Offset = "0x664898")]
		public bool buttonOneTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6648A8", Offset = "0x6648A8")]
		public bool buttonTwoPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6648B8", Offset = "0x6648B8")]
		public bool buttonTwoTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6648C8", Offset = "0x6648C8")]
		public bool startMenuPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6648D8", Offset = "0x6648D8")]
		public bool middleFingerSenseAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6648E8", Offset = "0x6648E8")]
		public bool ringFingerSenseAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6648F8", Offset = "0x6648F8")]
		public bool pinkyFingerSenseAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664908", Offset = "0x664908")]
		public bool gripSenseAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664918", Offset = "0x664918")]
		public bool gripSensePressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x664928", Offset = "0x664928")]
		public bool controllerVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		protected Vector2 touchpadAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		protected Vector2 touchpadTwoAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		protected Vector2 triggerAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		protected Vector2 gripAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		protected float touchpadSenseAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		protected float triggerSenseAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		protected float middleFingerSenseAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		protected float ringFingerSenseAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		protected float pinkyFingerSenseAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		protected float gripSenseAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		protected float hairTriggerDelta;

		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		protected float hairGripDelta;

		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		protected VRTK_TrackedController trackedController;

		public event ControllerInteractionEventHandler TriggerPressed
		{
			[Address(RVA = "0x9367D0", Offset = "0x9367D0", VA = "0x9367D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D260", Offset = "0x67D260")]
			add
			{
			}
			[Address(RVA = "0x9368BC", Offset = "0x9368BC", VA = "0x9368BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D270", Offset = "0x67D270")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerReleased
		{
			[Address(RVA = "0x9369A8", Offset = "0x9369A8", VA = "0x9369A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D280", Offset = "0x67D280")]
			add
			{
			}
			[Address(RVA = "0x936A94", Offset = "0x936A94", VA = "0x936A94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D290", Offset = "0x67D290")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerTouchStart
		{
			[Address(RVA = "0x936B80", Offset = "0x936B80", VA = "0x936B80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D2A0", Offset = "0x67D2A0")]
			add
			{
			}
			[Address(RVA = "0x936C6C", Offset = "0x936C6C", VA = "0x936C6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D2B0", Offset = "0x67D2B0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerTouchEnd
		{
			[Address(RVA = "0x936D58", Offset = "0x936D58", VA = "0x936D58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D2C0", Offset = "0x67D2C0")]
			add
			{
			}
			[Address(RVA = "0x936E44", Offset = "0x936E44", VA = "0x936E44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D2D0", Offset = "0x67D2D0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerHairlineStart
		{
			[Address(RVA = "0x936F30", Offset = "0x936F30", VA = "0x936F30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D2E0", Offset = "0x67D2E0")]
			add
			{
			}
			[Address(RVA = "0x93701C", Offset = "0x93701C", VA = "0x93701C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D2F0", Offset = "0x67D2F0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerHairlineEnd
		{
			[Address(RVA = "0x937108", Offset = "0x937108", VA = "0x937108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D300", Offset = "0x67D300")]
			add
			{
			}
			[Address(RVA = "0x9371F4", Offset = "0x9371F4", VA = "0x9371F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D310", Offset = "0x67D310")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerClicked
		{
			[Address(RVA = "0x9372E0", Offset = "0x9372E0", VA = "0x9372E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D320", Offset = "0x67D320")]
			add
			{
			}
			[Address(RVA = "0x9373CC", Offset = "0x9373CC", VA = "0x9373CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D330", Offset = "0x67D330")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerUnclicked
		{
			[Address(RVA = "0x9374B8", Offset = "0x9374B8", VA = "0x9374B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D340", Offset = "0x67D340")]
			add
			{
			}
			[Address(RVA = "0x9375A4", Offset = "0x9375A4", VA = "0x9375A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D350", Offset = "0x67D350")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerAxisChanged
		{
			[Address(RVA = "0x937690", Offset = "0x937690", VA = "0x937690")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D360", Offset = "0x67D360")]
			add
			{
			}
			[Address(RVA = "0x93777C", Offset = "0x93777C", VA = "0x93777C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D370", Offset = "0x67D370")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TriggerSenseAxisChanged
		{
			[Address(RVA = "0x937868", Offset = "0x937868", VA = "0x937868")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D380", Offset = "0x67D380")]
			add
			{
			}
			[Address(RVA = "0x937954", Offset = "0x937954", VA = "0x937954")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D390", Offset = "0x67D390")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripPressed
		{
			[Address(RVA = "0x937A40", Offset = "0x937A40", VA = "0x937A40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D3A0", Offset = "0x67D3A0")]
			add
			{
			}
			[Address(RVA = "0x937B2C", Offset = "0x937B2C", VA = "0x937B2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D3B0", Offset = "0x67D3B0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripReleased
		{
			[Address(RVA = "0x937C18", Offset = "0x937C18", VA = "0x937C18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D3C0", Offset = "0x67D3C0")]
			add
			{
			}
			[Address(RVA = "0x937D04", Offset = "0x937D04", VA = "0x937D04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D3D0", Offset = "0x67D3D0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripTouchStart
		{
			[Address(RVA = "0x937DF0", Offset = "0x937DF0", VA = "0x937DF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D3E0", Offset = "0x67D3E0")]
			add
			{
			}
			[Address(RVA = "0x937EDC", Offset = "0x937EDC", VA = "0x937EDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D3F0", Offset = "0x67D3F0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripTouchEnd
		{
			[Address(RVA = "0x937FC8", Offset = "0x937FC8", VA = "0x937FC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D400", Offset = "0x67D400")]
			add
			{
			}
			[Address(RVA = "0x9380B4", Offset = "0x9380B4", VA = "0x9380B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D410", Offset = "0x67D410")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripHairlineStart
		{
			[Address(RVA = "0x9381A0", Offset = "0x9381A0", VA = "0x9381A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D420", Offset = "0x67D420")]
			add
			{
			}
			[Address(RVA = "0x93828C", Offset = "0x93828C", VA = "0x93828C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D430", Offset = "0x67D430")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripHairlineEnd
		{
			[Address(RVA = "0x938378", Offset = "0x938378", VA = "0x938378")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D440", Offset = "0x67D440")]
			add
			{
			}
			[Address(RVA = "0x938464", Offset = "0x938464", VA = "0x938464")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D450", Offset = "0x67D450")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripClicked
		{
			[Address(RVA = "0x938550", Offset = "0x938550", VA = "0x938550")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D460", Offset = "0x67D460")]
			add
			{
			}
			[Address(RVA = "0x93863C", Offset = "0x93863C", VA = "0x93863C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D470", Offset = "0x67D470")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripUnclicked
		{
			[Address(RVA = "0x938728", Offset = "0x938728", VA = "0x938728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D480", Offset = "0x67D480")]
			add
			{
			}
			[Address(RVA = "0x938814", Offset = "0x938814", VA = "0x938814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D490", Offset = "0x67D490")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripAxisChanged
		{
			[Address(RVA = "0x938900", Offset = "0x938900", VA = "0x938900")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D4A0", Offset = "0x67D4A0")]
			add
			{
			}
			[Address(RVA = "0x9389EC", Offset = "0x9389EC", VA = "0x9389EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D4B0", Offset = "0x67D4B0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadPressed
		{
			[Address(RVA = "0x938AD8", Offset = "0x938AD8", VA = "0x938AD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D4C0", Offset = "0x67D4C0")]
			add
			{
			}
			[Address(RVA = "0x938BC4", Offset = "0x938BC4", VA = "0x938BC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D4D0", Offset = "0x67D4D0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadReleased
		{
			[Address(RVA = "0x938CB0", Offset = "0x938CB0", VA = "0x938CB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D4E0", Offset = "0x67D4E0")]
			add
			{
			}
			[Address(RVA = "0x938D9C", Offset = "0x938D9C", VA = "0x938D9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D4F0", Offset = "0x67D4F0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadTouchStart
		{
			[Address(RVA = "0x938E88", Offset = "0x938E88", VA = "0x938E88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D500", Offset = "0x67D500")]
			add
			{
			}
			[Address(RVA = "0x938F78", Offset = "0x938F78", VA = "0x938F78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D510", Offset = "0x67D510")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadTouchEnd
		{
			[Address(RVA = "0x939068", Offset = "0x939068", VA = "0x939068")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D520", Offset = "0x67D520")]
			add
			{
			}
			[Address(RVA = "0x939158", Offset = "0x939158", VA = "0x939158")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D530", Offset = "0x67D530")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadAxisChanged
		{
			[Address(RVA = "0x939248", Offset = "0x939248", VA = "0x939248")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D540", Offset = "0x67D540")]
			add
			{
			}
			[Address(RVA = "0x939338", Offset = "0x939338", VA = "0x939338")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D550", Offset = "0x67D550")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadSenseAxisChanged
		{
			[Address(RVA = "0x939428", Offset = "0x939428", VA = "0x939428")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D560", Offset = "0x67D560")]
			add
			{
			}
			[Address(RVA = "0x939518", Offset = "0x939518", VA = "0x939518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D570", Offset = "0x67D570")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadTwoPressed
		{
			[Address(RVA = "0x939608", Offset = "0x939608", VA = "0x939608")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D580", Offset = "0x67D580")]
			add
			{
			}
			[Address(RVA = "0x9396F8", Offset = "0x9396F8", VA = "0x9396F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D590", Offset = "0x67D590")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadTwoReleased
		{
			[Address(RVA = "0x9397E8", Offset = "0x9397E8", VA = "0x9397E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D5A0", Offset = "0x67D5A0")]
			add
			{
			}
			[Address(RVA = "0x9398D8", Offset = "0x9398D8", VA = "0x9398D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D5B0", Offset = "0x67D5B0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadTwoTouchStart
		{
			[Address(RVA = "0x9399C8", Offset = "0x9399C8", VA = "0x9399C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D5C0", Offset = "0x67D5C0")]
			add
			{
			}
			[Address(RVA = "0x939AB8", Offset = "0x939AB8", VA = "0x939AB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D5D0", Offset = "0x67D5D0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadTwoTouchEnd
		{
			[Address(RVA = "0x939BA8", Offset = "0x939BA8", VA = "0x939BA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D5E0", Offset = "0x67D5E0")]
			add
			{
			}
			[Address(RVA = "0x939C98", Offset = "0x939C98", VA = "0x939C98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D5F0", Offset = "0x67D5F0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler TouchpadTwoAxisChanged
		{
			[Address(RVA = "0x939D88", Offset = "0x939D88", VA = "0x939D88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D600", Offset = "0x67D600")]
			add
			{
			}
			[Address(RVA = "0x939E78", Offset = "0x939E78", VA = "0x939E78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D610", Offset = "0x67D610")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonOneTouchStart
		{
			[Address(RVA = "0x939F68", Offset = "0x939F68", VA = "0x939F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D620", Offset = "0x67D620")]
			add
			{
			}
			[Address(RVA = "0x93A058", Offset = "0x93A058", VA = "0x93A058")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D630", Offset = "0x67D630")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonOneTouchEnd
		{
			[Address(RVA = "0x93A148", Offset = "0x93A148", VA = "0x93A148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D640", Offset = "0x67D640")]
			add
			{
			}
			[Address(RVA = "0x93A238", Offset = "0x93A238", VA = "0x93A238")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D650", Offset = "0x67D650")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonOnePressed
		{
			[Address(RVA = "0x93A328", Offset = "0x93A328", VA = "0x93A328")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D660", Offset = "0x67D660")]
			add
			{
			}
			[Address(RVA = "0x93A418", Offset = "0x93A418", VA = "0x93A418")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D670", Offset = "0x67D670")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonOneReleased
		{
			[Address(RVA = "0x93A508", Offset = "0x93A508", VA = "0x93A508")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D680", Offset = "0x67D680")]
			add
			{
			}
			[Address(RVA = "0x93A5F8", Offset = "0x93A5F8", VA = "0x93A5F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D690", Offset = "0x67D690")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonTwoTouchStart
		{
			[Address(RVA = "0x93A6E8", Offset = "0x93A6E8", VA = "0x93A6E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D6A0", Offset = "0x67D6A0")]
			add
			{
			}
			[Address(RVA = "0x93A7D8", Offset = "0x93A7D8", VA = "0x93A7D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D6B0", Offset = "0x67D6B0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonTwoTouchEnd
		{
			[Address(RVA = "0x93A8C8", Offset = "0x93A8C8", VA = "0x93A8C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D6C0", Offset = "0x67D6C0")]
			add
			{
			}
			[Address(RVA = "0x93A9B8", Offset = "0x93A9B8", VA = "0x93A9B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D6D0", Offset = "0x67D6D0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonTwoPressed
		{
			[Address(RVA = "0x93AAA8", Offset = "0x93AAA8", VA = "0x93AAA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D6E0", Offset = "0x67D6E0")]
			add
			{
			}
			[Address(RVA = "0x93AB98", Offset = "0x93AB98", VA = "0x93AB98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D6F0", Offset = "0x67D6F0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ButtonTwoReleased
		{
			[Address(RVA = "0x93AC88", Offset = "0x93AC88", VA = "0x93AC88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D700", Offset = "0x67D700")]
			add
			{
			}
			[Address(RVA = "0x93AD78", Offset = "0x93AD78", VA = "0x93AD78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D710", Offset = "0x67D710")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler StartMenuPressed
		{
			[Address(RVA = "0x93AE68", Offset = "0x93AE68", VA = "0x93AE68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D720", Offset = "0x67D720")]
			add
			{
			}
			[Address(RVA = "0x93AF58", Offset = "0x93AF58", VA = "0x93AF58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D730", Offset = "0x67D730")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler StartMenuReleased
		{
			[Address(RVA = "0x93B048", Offset = "0x93B048", VA = "0x93B048")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D740", Offset = "0x67D740")]
			add
			{
			}
			[Address(RVA = "0x93B138", Offset = "0x93B138", VA = "0x93B138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D750", Offset = "0x67D750")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler MiddleFingerSenseAxisChanged
		{
			[Address(RVA = "0x93B228", Offset = "0x93B228", VA = "0x93B228")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D760", Offset = "0x67D760")]
			add
			{
			}
			[Address(RVA = "0x93B318", Offset = "0x93B318", VA = "0x93B318")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D770", Offset = "0x67D770")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler RingFingerSenseAxisChanged
		{
			[Address(RVA = "0x93B408", Offset = "0x93B408", VA = "0x93B408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D780", Offset = "0x67D780")]
			add
			{
			}
			[Address(RVA = "0x93B4F8", Offset = "0x93B4F8", VA = "0x93B4F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D790", Offset = "0x67D790")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler PinkyFingerSenseAxisChanged
		{
			[Address(RVA = "0x93B5E8", Offset = "0x93B5E8", VA = "0x93B5E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D7A0", Offset = "0x67D7A0")]
			add
			{
			}
			[Address(RVA = "0x93B6D8", Offset = "0x93B6D8", VA = "0x93B6D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D7B0", Offset = "0x67D7B0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripSenseAxisChanged
		{
			[Address(RVA = "0x93B7C8", Offset = "0x93B7C8", VA = "0x93B7C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D7C0", Offset = "0x67D7C0")]
			add
			{
			}
			[Address(RVA = "0x93B8B8", Offset = "0x93B8B8", VA = "0x93B8B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D7D0", Offset = "0x67D7D0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripSensePressed
		{
			[Address(RVA = "0x93B9A8", Offset = "0x93B9A8", VA = "0x93B9A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D7E0", Offset = "0x67D7E0")]
			add
			{
			}
			[Address(RVA = "0x93BA98", Offset = "0x93BA98", VA = "0x93BA98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D7F0", Offset = "0x67D7F0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GripSenseReleased
		{
			[Address(RVA = "0x93BB88", Offset = "0x93BB88", VA = "0x93BB88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D800", Offset = "0x67D800")]
			add
			{
			}
			[Address(RVA = "0x93BC78", Offset = "0x93BC78", VA = "0x93BC78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D810", Offset = "0x67D810")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ControllerEnabled
		{
			[Address(RVA = "0x93BD68", Offset = "0x93BD68", VA = "0x93BD68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D820", Offset = "0x67D820")]
			add
			{
			}
			[Address(RVA = "0x93BE58", Offset = "0x93BE58", VA = "0x93BE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D830", Offset = "0x67D830")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ControllerDisabled
		{
			[Address(RVA = "0x93BF48", Offset = "0x93BF48", VA = "0x93BF48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D840", Offset = "0x67D840")]
			add
			{
			}
			[Address(RVA = "0x93C038", Offset = "0x93C038", VA = "0x93C038")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D850", Offset = "0x67D850")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ControllerIndexChanged
		{
			[Address(RVA = "0x93C128", Offset = "0x93C128", VA = "0x93C128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D860", Offset = "0x67D860")]
			add
			{
			}
			[Address(RVA = "0x93C218", Offset = "0x93C218", VA = "0x93C218")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D870", Offset = "0x67D870")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ControllerModelAvailable
		{
			[Address(RVA = "0x93C308", Offset = "0x93C308", VA = "0x93C308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D880", Offset = "0x67D880")]
			add
			{
			}
			[Address(RVA = "0x93C3F8", Offset = "0x93C3F8", VA = "0x93C3F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D890", Offset = "0x67D890")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ControllerVisible
		{
			[Address(RVA = "0x93C4E8", Offset = "0x93C4E8", VA = "0x93C4E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D8A0", Offset = "0x67D8A0")]
			add
			{
			}
			[Address(RVA = "0x93C5D8", Offset = "0x93C5D8", VA = "0x93C5D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D8B0", Offset = "0x67D8B0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ControllerHidden
		{
			[Address(RVA = "0x93C6C8", Offset = "0x93C6C8", VA = "0x93C6C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D8C0", Offset = "0x67D8C0")]
			add
			{
			}
			[Address(RVA = "0x93C7B8", Offset = "0x93C7B8", VA = "0x93C7B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D8D0", Offset = "0x67D8D0")]
			remove
			{
			}
		}

		[Address(RVA = "0x93C8A8", Offset = "0x93C8A8", VA = "0x93C8A8", Slot = "4")]
		public virtual void OnTriggerPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93C8F4", Offset = "0x93C8F4", VA = "0x93C8F4", Slot = "5")]
		public virtual void OnTriggerReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93C940", Offset = "0x93C940", VA = "0x93C940", Slot = "6")]
		public virtual void OnTriggerTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93C98C", Offset = "0x93C98C", VA = "0x93C98C", Slot = "7")]
		public virtual void OnTriggerTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93C9D8", Offset = "0x93C9D8", VA = "0x93C9D8", Slot = "8")]
		public virtual void OnTriggerHairlineStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CA24", Offset = "0x93CA24", VA = "0x93CA24", Slot = "9")]
		public virtual void OnTriggerHairlineEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CA70", Offset = "0x93CA70", VA = "0x93CA70", Slot = "10")]
		public virtual void OnTriggerClicked(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CABC", Offset = "0x93CABC", VA = "0x93CABC", Slot = "11")]
		public virtual void OnTriggerUnclicked(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CB08", Offset = "0x93CB08", VA = "0x93CB08", Slot = "12")]
		public virtual void OnTriggerAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CB54", Offset = "0x93CB54", VA = "0x93CB54", Slot = "13")]
		public virtual void OnTriggerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CBA0", Offset = "0x93CBA0", VA = "0x93CBA0", Slot = "14")]
		public virtual void OnGripPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CBEC", Offset = "0x93CBEC", VA = "0x93CBEC", Slot = "15")]
		public virtual void OnGripReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CC38", Offset = "0x93CC38", VA = "0x93CC38", Slot = "16")]
		public virtual void OnGripTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CC84", Offset = "0x93CC84", VA = "0x93CC84", Slot = "17")]
		public virtual void OnGripTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CCD0", Offset = "0x93CCD0", VA = "0x93CCD0", Slot = "18")]
		public virtual void OnGripHairlineStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CD1C", Offset = "0x93CD1C", VA = "0x93CD1C", Slot = "19")]
		public virtual void OnGripHairlineEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CD68", Offset = "0x93CD68", VA = "0x93CD68", Slot = "20")]
		public virtual void OnGripClicked(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CDB4", Offset = "0x93CDB4", VA = "0x93CDB4", Slot = "21")]
		public virtual void OnGripUnclicked(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CE00", Offset = "0x93CE00", VA = "0x93CE00", Slot = "22")]
		public virtual void OnGripAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CE4C", Offset = "0x93CE4C", VA = "0x93CE4C", Slot = "23")]
		public virtual void OnTouchpadPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CE98", Offset = "0x93CE98", VA = "0x93CE98", Slot = "24")]
		public virtual void OnTouchpadReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CEE4", Offset = "0x93CEE4", VA = "0x93CEE4", Slot = "25")]
		public virtual void OnTouchpadTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CF30", Offset = "0x93CF30", VA = "0x93CF30", Slot = "26")]
		public virtual void OnTouchpadTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CF7C", Offset = "0x93CF7C", VA = "0x93CF7C", Slot = "27")]
		public virtual void OnTouchpadAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93CFC8", Offset = "0x93CFC8", VA = "0x93CFC8", Slot = "28")]
		public virtual void OnTouchpadSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D014", Offset = "0x93D014", VA = "0x93D014", Slot = "29")]
		public virtual void OnTouchpadTwoPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D060", Offset = "0x93D060", VA = "0x93D060", Slot = "30")]
		public virtual void OnTouchpadTwoReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D0AC", Offset = "0x93D0AC", VA = "0x93D0AC", Slot = "31")]
		public virtual void OnTouchpadTwoTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D0F8", Offset = "0x93D0F8", VA = "0x93D0F8", Slot = "32")]
		public virtual void OnTouchpadTwoTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D144", Offset = "0x93D144", VA = "0x93D144", Slot = "33")]
		public virtual void OnTouchpadTwoAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D190", Offset = "0x93D190", VA = "0x93D190", Slot = "34")]
		public virtual void OnButtonOneTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D1DC", Offset = "0x93D1DC", VA = "0x93D1DC", Slot = "35")]
		public virtual void OnButtonOneTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D228", Offset = "0x93D228", VA = "0x93D228", Slot = "36")]
		public virtual void OnButtonOnePressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D274", Offset = "0x93D274", VA = "0x93D274", Slot = "37")]
		public virtual void OnButtonOneReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D2C0", Offset = "0x93D2C0", VA = "0x93D2C0", Slot = "38")]
		public virtual void OnButtonTwoTouchStart(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D30C", Offset = "0x93D30C", VA = "0x93D30C", Slot = "39")]
		public virtual void OnButtonTwoTouchEnd(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D358", Offset = "0x93D358", VA = "0x93D358", Slot = "40")]
		public virtual void OnButtonTwoPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D3A4", Offset = "0x93D3A4", VA = "0x93D3A4", Slot = "41")]
		public virtual void OnButtonTwoReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D3F0", Offset = "0x93D3F0", VA = "0x93D3F0", Slot = "42")]
		public virtual void OnStartMenuPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D43C", Offset = "0x93D43C", VA = "0x93D43C", Slot = "43")]
		public virtual void OnStartMenuReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D488", Offset = "0x93D488", VA = "0x93D488", Slot = "44")]
		public virtual void OnMiddleFingerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D4D4", Offset = "0x93D4D4", VA = "0x93D4D4", Slot = "45")]
		public virtual void OnRingFingerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D520", Offset = "0x93D520", VA = "0x93D520", Slot = "46")]
		public virtual void OnPinkyFingerSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D56C", Offset = "0x93D56C", VA = "0x93D56C", Slot = "47")]
		public virtual void OnGripSenseAxisChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D5B8", Offset = "0x93D5B8", VA = "0x93D5B8", Slot = "48")]
		public virtual void OnGripSensePressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D604", Offset = "0x93D604", VA = "0x93D604", Slot = "49")]
		public virtual void OnGripSenseReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D650", Offset = "0x93D650", VA = "0x93D650", Slot = "50")]
		public virtual void OnControllerEnabled(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D69C", Offset = "0x93D69C", VA = "0x93D69C", Slot = "51")]
		public virtual void OnControllerDisabled(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D6E8", Offset = "0x93D6E8", VA = "0x93D6E8", Slot = "52")]
		public virtual void OnControllerIndexChanged(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D734", Offset = "0x93D734", VA = "0x93D734", Slot = "53")]
		public virtual void OnControllerModelAvailable(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D780", Offset = "0x93D780", VA = "0x93D780", Slot = "54")]
		public virtual void OnControllerVisible(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D7D4", Offset = "0x93D7D4", VA = "0x93D7D4", Slot = "55")]
		public virtual void OnControllerHidden(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x93D824", Offset = "0x93D824", VA = "0x93D824", Slot = "56")]
		public virtual ControllerInteractionEventArgs SetControllerEvent()
		{
			return default(ControllerInteractionEventArgs);
		}

		[Address(RVA = "0x93D85C", Offset = "0x93D85C", VA = "0x93D85C", Slot = "57")]
		public virtual ControllerInteractionEventArgs SetControllerEvent(ref bool buttonBool, bool value = false, float buttonPressure = 0f)
		{
			return default(ControllerInteractionEventArgs);
		}

		[Address(RVA = "0x93D9B4", Offset = "0x93D9B4", VA = "0x93D9B4", Slot = "58")]
		public virtual SDK_BaseController.ControllerType GetControllerType()
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Address(RVA = "0x93DA58", Offset = "0x93DA58", VA = "0x93DA58", Slot = "59")]
		public virtual Vector2 GetAxis(Vector2AxisAlias vector2AxisType)
		{
			return default(Vector2);
		}

		[Address(RVA = "0x93DB08", Offset = "0x93DB08", VA = "0x93DB08", Slot = "60")]
		public virtual Vector2 GetTouchpadAxis()
		{
			return default(Vector2);
		}

		[Address(RVA = "0x93DB14", Offset = "0x93DB14", VA = "0x93DB14", Slot = "61")]
		public virtual Vector2 GetTouchpadTwoAxis()
		{
			return default(Vector2);
		}

		[Address(RVA = "0x93DB20", Offset = "0x93DB20", VA = "0x93DB20", Slot = "62")]
		public virtual float GetAxisAngle(Vector2AxisAlias vector2AxisType)
		{
			return default(float);
		}

		[Address(RVA = "0x93DB54", Offset = "0x93DB54", VA = "0x93DB54", Slot = "63")]
		public virtual float GetTouchpadAxisAngle()
		{
			return default(float);
		}

		[Address(RVA = "0x93DB6C", Offset = "0x93DB6C", VA = "0x93DB6C", Slot = "64")]
		public virtual float GetTouchpadTwoAxisAngle()
		{
			return default(float);
		}

		[Address(RVA = "0x93DB84", Offset = "0x93DB84", VA = "0x93DB84", Slot = "65")]
		public virtual float GetTriggerAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DB8C", Offset = "0x93DB8C", VA = "0x93DB8C", Slot = "66")]
		public virtual float GetGripAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DB94", Offset = "0x93DB94", VA = "0x93DB94", Slot = "67")]
		public virtual float GetHairTriggerDelta()
		{
			return default(float);
		}

		[Address(RVA = "0x93DB9C", Offset = "0x93DB9C", VA = "0x93DB9C", Slot = "68")]
		public virtual float GetHairGripDelta()
		{
			return default(float);
		}

		[Address(RVA = "0x93DBA4", Offset = "0x93DBA4", VA = "0x93DBA4", Slot = "69")]
		public virtual float GetTouchpadSenseAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DBAC", Offset = "0x93DBAC", VA = "0x93DBAC", Slot = "70")]
		public virtual float GetTriggerSenseAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DBB4", Offset = "0x93DBB4", VA = "0x93DBB4", Slot = "71")]
		public virtual float GetMiddleFingerSenseAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DBBC", Offset = "0x93DBBC", VA = "0x93DBBC", Slot = "72")]
		public virtual float GetRingFingerSenseAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DBC4", Offset = "0x93DBC4", VA = "0x93DBC4", Slot = "73")]
		public virtual float GetPinkyFingerSenseAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DBCC", Offset = "0x93DBCC", VA = "0x93DBCC", Slot = "74")]
		public virtual float GetGripSenseAxis()
		{
			return default(float);
		}

		[Address(RVA = "0x93DBD4", Offset = "0x93DBD4", VA = "0x93DBD4", Slot = "75")]
		public virtual bool AnyButtonPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0x93DC24", Offset = "0x93DC24", VA = "0x93DC24", Slot = "76")]
		public virtual bool GetAxisState(Vector2AxisAlias axis, SDK_BaseController.ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Address(RVA = "0x93DC84", Offset = "0x93DC84", VA = "0x93DC84", Slot = "77")]
		public virtual bool IsButtonPressed(ButtonAlias button)
		{
			return default(bool);
		}

		[Address(RVA = "0x93DD80", Offset = "0x93DD80", VA = "0x93DD80", Slot = "78")]
		public virtual void SubscribeToButtonAliasEvent(ButtonAlias givenButton, bool startEvent, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0x93DDAC", Offset = "0x93DDAC", VA = "0x93DDAC", Slot = "79")]
		public virtual void UnsubscribeToButtonAliasEvent(ButtonAlias givenButton, bool startEvent, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0x93DDD4", Offset = "0x93DDD4", VA = "0x93DDD4", Slot = "80")]
		public virtual void SubscribeToAxisAliasEvent(SDK_BaseController.ButtonTypes buttonType, AxisType axisType, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0x93DE00", Offset = "0x93DE00", VA = "0x93DE00", Slot = "81")]
		public virtual void UnsubscribeToAxisAliasEvent(SDK_BaseController.ButtonTypes buttonType, AxisType axisType, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0x93DE2C", Offset = "0x93DE2C", VA = "0x93DE2C", Slot = "82")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x93DE94", Offset = "0x93DE94", VA = "0x93DE94", Slot = "83")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x93E0C0", Offset = "0x93E0C0", VA = "0x93E0C0", Slot = "84")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x93E118", Offset = "0x93E118", VA = "0x93E118", Slot = "85")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x93E180", Offset = "0x93E180", VA = "0x93E180", Slot = "86")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x93E2D8", Offset = "0x93E2D8", VA = "0x93E2D8", Slot = "87")]
		protected virtual float ProcessSenseAxis(float axisValue)
		{
			return default(float);
		}

		[Address(RVA = "0x93E2EC", Offset = "0x93E2EC", VA = "0x93E2EC", Slot = "88")]
		protected virtual void CheckTriggerEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x93E974", Offset = "0x93E974", VA = "0x93E974", Slot = "89")]
		protected virtual void CheckGripEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x93EF28", Offset = "0x93EF28", VA = "0x93EF28", Slot = "90")]
		protected virtual void CheckTouchpadEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x93F400", Offset = "0x93F400", VA = "0x93F400", Slot = "91")]
		protected virtual void CheckTouchpadTwoEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x93F7F0", Offset = "0x93F7F0", VA = "0x93F7F0", Slot = "92")]
		protected virtual void CheckButtonOneEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x93FA80", Offset = "0x93FA80", VA = "0x93FA80", Slot = "93")]
		protected virtual void CheckButtonTwoEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x93FD10", Offset = "0x93FD10", VA = "0x93FD10", Slot = "94")]
		protected virtual void CheckStartMenuEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x93FE84", Offset = "0x93FE84", VA = "0x93FE84", Slot = "95")]
		protected virtual void CheckExtraFingerEvents(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x940374", Offset = "0x940374", VA = "0x940374", Slot = "96")]
		protected virtual void ButtonAliasEventSubscription(bool subscribe, ButtonAlias givenButton, bool startEvent, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0x9406B0", Offset = "0x9406B0", VA = "0x9406B0", Slot = "97")]
		protected virtual void AxisAliasEventSubscription(bool subscribe, SDK_BaseController.ButtonTypes buttonType, AxisType axisType, ControllerInteractionEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0x9407E4", Offset = "0x9407E4", VA = "0x9407E4", Slot = "98")]
		protected virtual void TrackedControllerEnabled(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0x940858", Offset = "0x940858", VA = "0x940858", Slot = "99")]
		protected virtual void TrackedControllerDisabled(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9408E0", Offset = "0x9408E0", VA = "0x9408E0", Slot = "100")]
		protected virtual void TrackedControllerIndexChanged(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0x940954", Offset = "0x940954", VA = "0x940954", Slot = "101")]
		protected virtual void TrackedControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9409C8", Offset = "0x9409C8", VA = "0x9409C8", Slot = "102")]
		protected virtual float CalculateVector2AxisAngle(Vector2 axis)
		{
			return default(float);
		}

		[Address(RVA = "0x940A6C", Offset = "0x940A6C", VA = "0x940A6C", Slot = "103")]
		protected virtual void DisableEvents()
		{
		}

		[Address(RVA = "0x941630", Offset = "0x941630", VA = "0x941630")]
		public VRTK_ControllerEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6564A0", Offset = "0x6564A0")]
	public class VRTK_ControllerHighlighter : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664C78", Offset = "0x664C78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664C78", Offset = "0x664C78")]
		public float transitionDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664CD8", Offset = "0x664CD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664CD8", Offset = "0x664CD8")]
		public Color highlightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664D38", Offset = "0x664D38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664D38", Offset = "0x664D38")]
		public Color highlightBody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664D98", Offset = "0x664D98")]
		public Color highlightTrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664DD0", Offset = "0x664DD0")]
		public Color highlightGrip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664E08", Offset = "0x664E08")]
		public Color highlightTouchpad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664E40", Offset = "0x664E40")]
		public Color highlightTouchpadTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664E78", Offset = "0x664E78")]
		public Color highlightButtonOne;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664EB0", Offset = "0x664EB0")]
		public Color highlightButtonTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664EE8", Offset = "0x664EE8")]
		public Color highlightSystemMenu;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664F20", Offset = "0x664F20")]
		public Color highlightStartMenu;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x664F58", Offset = "0x664F58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664F58", Offset = "0x664F58")]
		public VRTK_ControllerModelElementPaths modelElementPaths;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664FB8", Offset = "0x664FB8")]
		public VRTK_ControllerElementHighlighters elementHighlighterOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x664FF0", Offset = "0x664FF0")]
		public GameObject controllerAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665028", Offset = "0x665028")]
		public GameObject modelContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665060", Offset = "0x665060")]
		public VRTK_BaseHighlighter controllerHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected bool controllerHighlighted;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Dictionary<string, Transform> cachedElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Dictionary<string, object> highlighterOptions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected VRTK_BaseHighlighter baseHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected bool autoHighlighter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		protected bool trackedControllerReady;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected Color lastHighlightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected Color lastHighlightBody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		protected Color lastHighlightTrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		protected Color lastHighlightGrip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		protected Color lastHighlightTouchpad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		protected Color lastHighlightTouchpadTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		protected Color lastHighlightButtonOne;

		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		protected Color lastHighlightButtonTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		protected Color lastHighlightSystemMenu;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected Color lastHighlightStartMenu;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected SDK_BaseController.ControllerElements[] bodyElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected SDK_BaseController.ControllerElements[] triggerElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected SDK_BaseController.ControllerElements[] gripElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected SDK_BaseController.ControllerElements[] touchpadElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected SDK_BaseController.ControllerElements[] touchpadTwoElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected SDK_BaseController.ControllerElements[] buttonOneElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		protected SDK_BaseController.ControllerElements[] buttonTwoElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		protected SDK_BaseController.ControllerElements[] systemMenuElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		protected SDK_BaseController.ControllerElements[] startMenuElements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		protected GameObject scriptControllerAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		protected GameObject actualController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		protected GameObject actualModelContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		protected VRTK_TrackedController trackedController;

		[Address(RVA = "0xA68748", Offset = "0xA68748", VA = "0xA68748", Slot = "4")]
		public virtual void ConfigureControllerPaths()
		{
		}

		[Address(RVA = "0xA68A34", Offset = "0xA68A34", VA = "0xA68A34", Slot = "5")]
		public virtual void PopulateHighlighters()
		{
		}

		[Address(RVA = "0xA690D8", Offset = "0xA690D8", VA = "0xA690D8", Slot = "6")]
		public virtual void HighlightController(Color color, float fadeDuration = 0f)
		{
		}

		[Address(RVA = "0xA692B8", Offset = "0xA692B8", VA = "0xA692B8", Slot = "7")]
		public virtual void UnhighlightController()
		{
		}

		[Address(RVA = "0xA693C4", Offset = "0xA693C4", VA = "0xA693C4", Slot = "8")]
		public virtual void HighlightElement(SDK_BaseController.ControllerElements elementType, Color color, float fadeDuration = 0f)
		{
		}

		[Address(RVA = "0xA69544", Offset = "0xA69544", VA = "0xA69544", Slot = "9")]
		public virtual void UnhighlightElement(SDK_BaseController.ControllerElements elementType)
		{
		}

		[Address(RVA = "0xA69704", Offset = "0xA69704", VA = "0xA69704", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA6976C", Offset = "0xA6976C", VA = "0xA6976C", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA69C3C", Offset = "0xA69C3C", VA = "0xA69C3C", Slot = "12")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA69D68", Offset = "0xA69D68", VA = "0xA69D68", Slot = "13")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA69DD0", Offset = "0xA69DD0", VA = "0xA69DD0", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA69F3C", Offset = "0xA69F3C", VA = "0xA69F3C", Slot = "15")]
		protected virtual void DoControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0xA69F54", Offset = "0xA69F54", VA = "0xA69F54", Slot = "16")]
		protected virtual void ControllerAvailable()
		{
		}

		[Address(RVA = "0xA6A0F4", Offset = "0xA6A0F4", VA = "0xA6A0F4", Slot = "17")]
		protected virtual void ResetLastHighlights()
		{
		}

		[Address(RVA = "0xA6A200", Offset = "0xA6A200", VA = "0xA6A200", Slot = "18")]
		protected virtual void SetColourParameter(SDK_BaseController.ControllerElements element, Color color)
		{
		}

		[Address(RVA = "0xA6A3E4", Offset = "0xA6A3E4", VA = "0xA6A3E4", Slot = "19")]
		protected virtual Color GetColourParameter(SDK_BaseController.ControllerElements element)
		{
			return default(Color);
		}

		[Address(RVA = "0xA6A478", Offset = "0xA6A478", VA = "0xA6A478", Slot = "20")]
		protected virtual void ToggleControllerState()
		{
		}

		[Address(RVA = "0xA6A550", Offset = "0xA6A550", VA = "0xA6A550", Slot = "21")]
		protected virtual void ToggleHighlightState(Color currentColor, ref Color lastColorState, SDK_BaseController.ControllerElements[] elements)
		{
		}

		[Address(RVA = "0xA6A6B4", Offset = "0xA6A6B4", VA = "0xA6A6B4", Slot = "22")]
		protected virtual void AddHighlighterToElement(Transform element, VRTK_BaseHighlighter parentHighlighter, VRTK_BaseHighlighter overrideHighlighter)
		{
		}

		[Address(RVA = "0xA6A97C", Offset = "0xA6A97C", VA = "0xA6A97C", Slot = "23")]
		protected virtual string GetElementPath(string currentPath, SDK_BaseController.ControllerElements elementType)
		{
			return null;
		}

		[Address(RVA = "0xA6AA94", Offset = "0xA6AA94", VA = "0xA6AA94", Slot = "24")]
		protected virtual string GetPathForControllerElement(SDK_BaseController.ControllerElements controllerElement)
		{
			return null;
		}

		[Address(RVA = "0xA6ABFC", Offset = "0xA6ABFC", VA = "0xA6ABFC", Slot = "25")]
		protected virtual Transform GetElementTransform(string path)
		{
			return null;
		}

		[Address(RVA = "0xA6AE3C", Offset = "0xA6AE3C", VA = "0xA6AE3C", Slot = "26")]
		protected virtual void ToggleHighlightAlias(bool state, string transformPath, Color? highlight, float duration = 0f)
		{
		}

		[Address(RVA = "0xA6AFB4", Offset = "0xA6AFB4", VA = "0xA6AFB4", Slot = "27")]
		protected virtual VRTK_BaseHighlighter GetValidHighlighter()
		{
			return null;
		}

		[Address(RVA = "0xA6B044", Offset = "0xA6B044", VA = "0xA6B044")]
		public VRTK_ControllerHighlighter()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6564D8", Offset = "0x6564D8")]
	public class VRTK_ControllerTrackedCollider : VRTK_SDKControllerReady
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665098", Offset = "0x665098")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665098", Offset = "0x665098")]
		public VRTK_InteractTouch interactTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6650F8", Offset = "0x6650F8")]
		public float maxResnapDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665130", Offset = "0x665130")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665168", Offset = "0x665168")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665168", Offset = "0x665168")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_TrackedController trackedController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected VRTK_ControllerReference controllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody trackedRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool createRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Collider[] trackedColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject customColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected bool createColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected VRTK_RigidbodyFollow rigidbodyFollow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool createRigidbodyFollow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedActivationButton;

		[Address(RVA = "0xA6EAE4", Offset = "0xA6EAE4", VA = "0xA6EAE4", Slot = "15")]
		public virtual void ToggleColliders(bool state)
		{
		}

		[Address(RVA = "0xA6EBA0", Offset = "0xA6EBA0", VA = "0xA6EBA0", Slot = "16")]
		public virtual Collider[] TrackedColliders()
		{
			return null;
		}

		[Address(RVA = "0xA6EBA8", Offset = "0xA6EBA8", VA = "0xA6EBA8", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xA6EDD0", Offset = "0xA6EDD0", VA = "0xA6EDD0", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0xA6EE9C", Offset = "0xA6EE9C", VA = "0xA6EE9C", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference passedControllerReference)
		{
		}

		[Address(RVA = "0xA6F0B4", Offset = "0xA6F0B4", VA = "0xA6F0B4", Slot = "17")]
		protected virtual void Cleanup(bool immediate)
		{
		}

		[Address(RVA = "0xA6F190", Offset = "0xA6F190", VA = "0xA6F190", Slot = "18")]
		protected virtual void DestroyObject(UnityEngine.Object toDestroy, bool immediate)
		{
		}

		[Address(RVA = "0xA6F234", Offset = "0xA6F234", VA = "0xA6F234", Slot = "19")]
		protected virtual void ManageActivationListeners(bool state)
		{
		}

		[Address(RVA = "0xA6F448", Offset = "0xA6F448", VA = "0xA6F448", Slot = "20")]
		protected virtual void DoActivationPress(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA6F45C", Offset = "0xA6F45C", VA = "0xA6F45C", Slot = "21")]
		protected virtual void DoActivationRelease(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA6F470", Offset = "0xA6F470", VA = "0xA6F470", Slot = "22")]
		protected virtual void SetupRigidbody()
		{
		}

		[Address(RVA = "0xA6F5A0", Offset = "0xA6F5A0", VA = "0xA6F5A0", Slot = "23")]
		protected virtual void SetupColliders()
		{
		}

		[Address(RVA = "0xA6FCB8", Offset = "0xA6FCB8", VA = "0xA6FCB8", Slot = "24")]
		protected virtual void SetupFollower()
		{
		}

		[Address(RVA = "0xA6FDF8", Offset = "0xA6FDF8", VA = "0xA6FDF8")]
		public VRTK_ControllerTrackedCollider()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656510", Offset = "0x656510")]
	public class VRTK_InteractGrab : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6651C8", Offset = "0x6651C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6651C8", Offset = "0x6651C8")]
		public VRTK_ControllerEvents.ButtonAlias grabButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665228", Offset = "0x665228")]
		public float grabPrecognition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665260", Offset = "0x665260")]
		public float throwMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665298", Offset = "0x665298")]
		public bool createRigidBodyWhenNotTouching;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6652D0", Offset = "0x6652D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6652D0", Offset = "0x6652D0")]
		public Rigidbody controllerAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665330", Offset = "0x665330")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665368", Offset = "0x665368")]
		public VRTK_InteractTouch interactTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedGrabButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected VRTK_ControllerEvents.ButtonAlias savedGrabButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool grabPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected GameObject grabbedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected bool influencingGrabbedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected int grabEnabledState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float grabPrecognitionTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject undroppableGrabbedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rigidbody originalControllerAttachPoint;

		protected VRTK_ControllerReference controllerReference
		{
			[Address(RVA = "0xEA4F54", Offset = "0xEA4F54", VA = "0xEA4F54")]
			get
			{
				return null;
			}
		}

		public event ControllerInteractionEventHandler GrabButtonPressed
		{
			[Address(RVA = "0xEA4444", Offset = "0xEA4444", VA = "0xEA4444")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D8E0", Offset = "0x67D8E0")]
			add
			{
			}
			[Address(RVA = "0xEA4530", Offset = "0xEA4530", VA = "0xEA4530")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D8F0", Offset = "0x67D8F0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler GrabButtonReleased
		{
			[Address(RVA = "0xEA461C", Offset = "0xEA461C", VA = "0xEA461C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D900", Offset = "0x67D900")]
			add
			{
			}
			[Address(RVA = "0xEA4708", Offset = "0xEA4708", VA = "0xEA4708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D910", Offset = "0x67D910")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerStartGrabInteractableObject
		{
			[Address(RVA = "0xEA47F4", Offset = "0xEA47F4", VA = "0xEA47F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D920", Offset = "0x67D920")]
			add
			{
			}
			[Address(RVA = "0xEA48E0", Offset = "0xEA48E0", VA = "0xEA48E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D930", Offset = "0x67D930")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerGrabInteractableObject
		{
			[Address(RVA = "0xEA49CC", Offset = "0xEA49CC", VA = "0xEA49CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D940", Offset = "0x67D940")]
			add
			{
			}
			[Address(RVA = "0xEA4AB8", Offset = "0xEA4AB8", VA = "0xEA4AB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D950", Offset = "0x67D950")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerStartUngrabInteractableObject
		{
			[Address(RVA = "0xEA4BA4", Offset = "0xEA4BA4", VA = "0xEA4BA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D960", Offset = "0x67D960")]
			add
			{
			}
			[Address(RVA = "0xEA4C90", Offset = "0xEA4C90", VA = "0xEA4C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D970", Offset = "0x67D970")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerUngrabInteractableObject
		{
			[Address(RVA = "0xEA4D7C", Offset = "0xEA4D7C", VA = "0xEA4D7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D980", Offset = "0x67D980")]
			add
			{
			}
			[Address(RVA = "0xEA4E68", Offset = "0xEA4E68", VA = "0xEA4E68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D990", Offset = "0x67D990")]
			remove
			{
			}
		}

		[Address(RVA = "0xEA5018", Offset = "0xEA5018", VA = "0xEA5018", Slot = "4")]
		public virtual void OnControllerStartGrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEA5044", Offset = "0xEA5044", VA = "0xEA5044", Slot = "5")]
		public virtual void OnControllerGrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEA5070", Offset = "0xEA5070", VA = "0xEA5070", Slot = "6")]
		public virtual void OnControllerStartUngrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEA509C", Offset = "0xEA509C", VA = "0xEA509C", Slot = "7")]
		public virtual void OnControllerUngrabInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEA50C8", Offset = "0xEA50C8", VA = "0xEA50C8", Slot = "8")]
		public virtual void OnGrabButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEA5114", Offset = "0xEA5114", VA = "0xEA5114", Slot = "9")]
		public virtual void OnGrabButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEA5160", Offset = "0xEA5160", VA = "0xEA5160", Slot = "10")]
		public virtual bool IsGrabButtonPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0xEA5168", Offset = "0xEA5168", VA = "0xEA5168", Slot = "11")]
		public virtual void ForceRelease(bool applyGrabbingObjectVelocity = false)
		{
		}

		[Address(RVA = "0xEA517C", Offset = "0xEA517C", VA = "0xEA517C", Slot = "12")]
		public virtual void AttemptGrab()
		{
		}

		[Address(RVA = "0xEA518C", Offset = "0xEA518C", VA = "0xEA518C", Slot = "13")]
		public virtual GameObject GetGrabbedObject()
		{
			return null;
		}

		[Address(RVA = "0xEA5194", Offset = "0xEA5194", VA = "0xEA5194", Slot = "14")]
		public virtual void ForceControllerAttachPoint(Rigidbody forcedAttachPoint)
		{
		}

		[Address(RVA = "0xEA51A0", Offset = "0xEA51A0", VA = "0xEA51A0", Slot = "15")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xEA5494", Offset = "0xEA5494", VA = "0xEA5494", Slot = "16")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEA55F0", Offset = "0xEA55F0", VA = "0xEA55F0", Slot = "17")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEA575C", Offset = "0xEA575C", VA = "0xEA575C", Slot = "18")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xEA57C4", Offset = "0xEA57C4", VA = "0xEA57C4", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xEA582C", Offset = "0xEA582C", VA = "0xEA582C", Slot = "20")]
		protected virtual void DoControllerModelUpdate(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEA583C", Offset = "0xEA583C", VA = "0xEA583C", Slot = "21")]
		protected virtual void ManageInteractTouchListener(bool state)
		{
		}

		[Address(RVA = "0xEA5DC0", Offset = "0xEA5DC0", VA = "0xEA5DC0", Slot = "22")]
		protected virtual void ControllerTouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEA5EDC", Offset = "0xEA5EDC", VA = "0xEA5EDC", Slot = "23")]
		protected virtual void ControllerUntouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEA5FD8", Offset = "0xEA5FD8", VA = "0xEA5FD8", Slot = "24")]
		protected virtual void ManageGrabListener(bool state)
		{
		}

		[Address(RVA = "0xEA6230", Offset = "0xEA6230", VA = "0xEA6230", Slot = "25")]
		protected virtual void RegrabUndroppableObject()
		{
		}

		[Address(RVA = "0xEA63C8", Offset = "0xEA63C8", VA = "0xEA63C8", Slot = "26")]
		protected virtual void SetUndroppableObject()
		{
		}

		[Address(RVA = "0xEA64F4", Offset = "0xEA64F4", VA = "0xEA64F4", Slot = "27")]
		protected virtual void SetControllerAttachPoint()
		{
		}

		[Address(RVA = "0xEA678C", Offset = "0xEA678C", VA = "0xEA678C", Slot = "28")]
		protected virtual bool IsObjectGrabbable(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xEA68D8", Offset = "0xEA68D8", VA = "0xEA68D8", Slot = "29")]
		protected virtual bool IsObjectHoldOnGrab(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xEA69C0", Offset = "0xEA69C0", VA = "0xEA69C0", Slot = "30")]
		protected virtual void ChooseGrabSequence(VRTK_InteractableObject grabbedObjectScript)
		{
		}

		[Address(RVA = "0xEA6A44", Offset = "0xEA6A44", VA = "0xEA6A44", Slot = "31")]
		protected virtual void ToggleControllerVisibility(bool visible)
		{
		}

		[Address(RVA = "0xEA6BB4", Offset = "0xEA6BB4", VA = "0xEA6BB4", Slot = "32")]
		protected virtual void InitGrabbedObject()
		{
		}

		[Address(RVA = "0xEA6D7C", Offset = "0xEA6D7C", VA = "0xEA6D7C", Slot = "33")]
		protected virtual void InitPrimaryGrab(VRTK_InteractableObject currentGrabbedObject)
		{
		}

		[Address(RVA = "0xEA6F10", Offset = "0xEA6F10", VA = "0xEA6F10", Slot = "34")]
		protected virtual void InitSecondaryGrab(VRTK_InteractableObject currentGrabbedObject)
		{
		}

		[Address(RVA = "0xEA6F58", Offset = "0xEA6F58", VA = "0xEA6F58", Slot = "35")]
		protected virtual void CheckInfluencingObjectOnRelease()
		{
		}

		[Address(RVA = "0xEA7018", Offset = "0xEA7018", VA = "0xEA7018", Slot = "36")]
		protected virtual void InitUngrabbedObject(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xEA7250", Offset = "0xEA7250", VA = "0xEA7250", Slot = "37")]
		protected virtual GameObject GetGrabbableObject()
		{
			return null;
		}

		[Address(RVA = "0xEA7354", Offset = "0xEA7354", VA = "0xEA7354", Slot = "38")]
		protected virtual void IncrementGrabState()
		{
		}

		[Address(RVA = "0xEA7414", Offset = "0xEA7414", VA = "0xEA7414", Slot = "39")]
		protected virtual GameObject GetUndroppableObject()
		{
			return null;
		}

		[Address(RVA = "0xEA752C", Offset = "0xEA752C", VA = "0xEA752C", Slot = "40")]
		protected virtual void AttemptGrabObject()
		{
		}

		[Address(RVA = "0xEA75F0", Offset = "0xEA75F0", VA = "0xEA75F0", Slot = "41")]
		protected virtual void PerformGrabAttempt(GameObject objectToGrab)
		{
		}

		[Address(RVA = "0xEA7654", Offset = "0xEA7654", VA = "0xEA7654", Slot = "42")]
		protected virtual bool ScriptValidGrab(VRTK_InteractableObject objectToGrabScript)
		{
			return default(bool);
		}

		[Address(RVA = "0xEA7748", Offset = "0xEA7748", VA = "0xEA7748", Slot = "43")]
		protected virtual bool IsValidGrabAttempt(GameObject objectToGrab)
		{
			return default(bool);
		}

		[Address(RVA = "0xEA7924", Offset = "0xEA7924", VA = "0xEA7924", Slot = "44")]
		protected virtual bool CanRelease()
		{
			return default(bool);
		}

		[Address(RVA = "0xEA7A2C", Offset = "0xEA7A2C", VA = "0xEA7A2C", Slot = "45")]
		protected virtual void AttemptReleaseObject()
		{
		}

		[Address(RVA = "0xEA7AA4", Offset = "0xEA7AA4", VA = "0xEA7AA4", Slot = "46")]
		protected virtual void DoGrabObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEA7B58", Offset = "0xEA7B58", VA = "0xEA7B58", Slot = "47")]
		protected virtual void DoReleaseObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEA7C08", Offset = "0xEA7C08", VA = "0xEA7C08", Slot = "48")]
		protected virtual void CheckControllerAttachPointSet()
		{
		}

		[Address(RVA = "0xEA7C9C", Offset = "0xEA7C9C", VA = "0xEA7C9C", Slot = "49")]
		protected virtual void CreateNonTouchingRigidbody()
		{
		}

		[Address(RVA = "0xEA7DF0", Offset = "0xEA7DF0", VA = "0xEA7DF0", Slot = "50")]
		protected virtual void CheckPrecognitionGrab()
		{
		}

		[Address(RVA = "0xEA7F00", Offset = "0xEA7F00", VA = "0xEA7F00")]
		public VRTK_InteractGrab()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656548", Offset = "0x656548")]
	public class VRTK_InteractNearTouch : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665400", Offset = "0x665400")]
		public float colliderRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665438", Offset = "0x665438")]
		public GameObject customColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665470", Offset = "0x665470")]
		public VRTK_InteractTouch interactTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected GameObject neartouchColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<GameObject> nearTouchedObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected VRTK_InteractNearTouchCollider interactNearTouchColliderScript;

		public event ObjectInteractEventHandler ControllerNearTouchInteractableObject
		{
			[Address(RVA = "0xEAA70C", Offset = "0xEAA70C", VA = "0xEAA70C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D9A0", Offset = "0x67D9A0")]
			add
			{
			}
			[Address(RVA = "0xEAA7F8", Offset = "0xEAA7F8", VA = "0xEAA7F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D9B0", Offset = "0x67D9B0")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerNearUntouchInteractableObject
		{
			[Address(RVA = "0xEAA8E4", Offset = "0xEAA8E4", VA = "0xEAA8E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D9C0", Offset = "0x67D9C0")]
			add
			{
			}
			[Address(RVA = "0xEAA9D0", Offset = "0xEAA9D0", VA = "0xEAA9D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D9D0", Offset = "0x67D9D0")]
			remove
			{
			}
		}

		[Address(RVA = "0xEAAABC", Offset = "0xEAAABC", VA = "0xEAAABC", Slot = "4")]
		public virtual void OnControllerNearTouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEAAB50", Offset = "0xEAAB50", VA = "0xEAAB50", Slot = "5")]
		public virtual void OnControllerNearUntouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEAABF0", Offset = "0xEAABF0", VA = "0xEAABF0", Slot = "6")]
		public virtual List<GameObject> GetNearTouchedObjects()
		{
			return null;
		}

		[Address(RVA = "0xEAABF8", Offset = "0xEAABF8", VA = "0xEAABF8", Slot = "7")]
		public virtual void ForceNearTouch(GameObject obj)
		{
		}

		[Address(RVA = "0xEAACFC", Offset = "0xEAACFC", VA = "0xEAACFC", Slot = "8")]
		public virtual void ForceStopNearTouching([Optional] GameObject obj)
		{
		}

		[Address(RVA = "0xEAAEE0", Offset = "0xEAAEE0", VA = "0xEAAEE0", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEAB15C", Offset = "0xEAB15C", VA = "0xEAB15C", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEAB360", Offset = "0xEAB360", VA = "0xEAB360", Slot = "11")]
		protected virtual void ControllerStartTouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEAB370", Offset = "0xEAB370", VA = "0xEAB370", Slot = "12")]
		protected virtual void ControllerUntouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEAB424", Offset = "0xEAB424", VA = "0xEAB424", Slot = "13")]
		protected virtual void CreateNearTouchCollider()
		{
		}

		[Address(RVA = "0xEABC00", Offset = "0xEABC00", VA = "0xEABC00")]
		public VRTK_InteractNearTouch()
		{
		}
	}
	public class VRTK_InteractNearTouchCollider : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_InteractNearTouch interactNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<GameObject> nearTouchedObjects;

		[Address(RVA = "0xEABC7C", Offset = "0xEABC7C", VA = "0xEABC7C", Slot = "4")]
		public virtual void SetInteractNearTouch(VRTK_InteractNearTouch givenInteractNearTouch)
		{
		}

		[Address(RVA = "0xEABC84", Offset = "0xEABC84", VA = "0xEABC84", Slot = "5")]
		public virtual List<GameObject> GetNearTouchedObjects()
		{
			return null;
		}

		[Address(RVA = "0xEABC8C", Offset = "0xEABC8C", VA = "0xEABC8C", Slot = "6")]
		public virtual void StartNearTouch(Collider collider)
		{
		}

		[Address(RVA = "0xEABE2C", Offset = "0xEABE2C", VA = "0xEABE2C", Slot = "7")]
		public virtual void EndNearTouch(Collider collider)
		{
		}

		[Address(RVA = "0xEABFCC", Offset = "0xEABFCC", VA = "0xEABFCC", Slot = "8")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xEAC060", Offset = "0xEAC060", VA = "0xEAC060", Slot = "9")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xEAC100", Offset = "0xEAC100", VA = "0xEAC100", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEAC160", Offset = "0xEAC160", VA = "0xEAC160", Slot = "11")]
		protected virtual bool validObject(VRTK_InteractableObject checkObject)
		{
			return default(bool);
		}

		[Address(RVA = "0xEAC260", Offset = "0xEAC260", VA = "0xEAC260")]
		public VRTK_InteractNearTouchCollider()
		{
		}
	}
	public struct ObjectInteractEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject target;
	}
	public delegate void ObjectInteractEventHandler(object sender, ObjectInteractEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656580", Offset = "0x656580")]
	public class VRTK_InteractTouch : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6654C8", Offset = "0x6654C8")]
		public GameObject customColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected GameObject touchedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected List<Collider> touchedObjectColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected List<Collider> touchedObjectActiveColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject controllerCollisionDetector;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool destroyColliderOnDisable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool triggerIsColliding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		protected bool triggerWasColliding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		protected bool rigidBodyForcedActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody touchRigidBody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected VRTK_TrackedController trackedController;

		protected VRTK_ControllerReference controllerReference
		{
			[Address(RVA = "0xEB2664", Offset = "0xEB2664", VA = "0xEB2664")]
			get
			{
				return null;
			}
		}

		public event ObjectInteractEventHandler ControllerStartTouchInteractableObject
		{
			[Address(RVA = "0xEAB070", Offset = "0xEAB070", VA = "0xEAB070")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D9E0", Offset = "0x67D9E0")]
			add
			{
			}
			[Address(RVA = "0xEAB274", Offset = "0xEAB274", VA = "0xEAB274")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67D9F0", Offset = "0x67D9F0")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerTouchInteractableObject
		{
			[Address(RVA = "0xEA5BE8", Offset = "0xEA5BE8", VA = "0xEA5BE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA00", Offset = "0x67DA00")]
			add
			{
			}
			[Address(RVA = "0xEA5A10", Offset = "0xEA5A10", VA = "0xEA5A10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA10", Offset = "0x67DA10")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerStartUntouchInteractableObject
		{
			[Address(RVA = "0xEB20DC", Offset = "0xEB20DC", VA = "0xEB20DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA20", Offset = "0x67DA20")]
			add
			{
			}
			[Address(RVA = "0xEB21C8", Offset = "0xEB21C8", VA = "0xEB21C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA30", Offset = "0x67DA30")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerUntouchInteractableObject
		{
			[Address(RVA = "0xEA5CD4", Offset = "0xEA5CD4", VA = "0xEA5CD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA40", Offset = "0x67DA40")]
			add
			{
			}
			[Address(RVA = "0xEA5AFC", Offset = "0xEA5AFC", VA = "0xEA5AFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA50", Offset = "0x67DA50")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerRigidbodyActivated
		{
			[Address(RVA = "0xEB22B4", Offset = "0xEB22B4", VA = "0xEB22B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA60", Offset = "0x67DA60")]
			add
			{
			}
			[Address(RVA = "0xEB23A0", Offset = "0xEB23A0", VA = "0xEB23A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA70", Offset = "0x67DA70")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerRigidbodyDeactivated
		{
			[Address(RVA = "0xEB248C", Offset = "0xEB248C", VA = "0xEB248C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA80", Offset = "0x67DA80")]
			add
			{
			}
			[Address(RVA = "0xEB2578", Offset = "0xEB2578", VA = "0xEB2578")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DA90", Offset = "0x67DA90")]
			remove
			{
			}
		}

		[Address(RVA = "0xEB26E0", Offset = "0xEB26E0", VA = "0xEB26E0", Slot = "4")]
		public virtual void OnControllerStartTouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB270C", Offset = "0xEB270C", VA = "0xEB270C", Slot = "5")]
		public virtual void OnControllerTouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB2738", Offset = "0xEB2738", VA = "0xEB2738", Slot = "6")]
		public virtual void OnControllerStartUntouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB2764", Offset = "0xEB2764", VA = "0xEB2764", Slot = "7")]
		public virtual void OnControllerUntouchInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB2790", Offset = "0xEB2790", VA = "0xEB2790", Slot = "8")]
		public virtual void OnControllerRigidbodyActivated(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB27BC", Offset = "0xEB27BC", VA = "0xEB27BC", Slot = "9")]
		public virtual void OnControllerRigidbodyDeactivated(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB27E8", Offset = "0xEB27E8", VA = "0xEB27E8", Slot = "10")]
		public virtual ObjectInteractEventArgs SetControllerInteractEvent(GameObject target)
		{
			return default(ObjectInteractEventArgs);
		}

		[Address(RVA = "0xEB280C", Offset = "0xEB280C", VA = "0xEB280C", Slot = "11")]
		public virtual void ForceTouch(GameObject obj)
		{
		}

		[Address(RVA = "0xEB2904", Offset = "0xEB2904", VA = "0xEB2904", Slot = "12")]
		public virtual GameObject GetTouchedObject()
		{
			return null;
		}

		[Address(RVA = "0xEB290C", Offset = "0xEB290C", VA = "0xEB290C", Slot = "13")]
		public virtual bool IsObjectInteractable(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xEB2A18", Offset = "0xEB2A18", VA = "0xEB2A18", Slot = "14")]
		public virtual void ToggleControllerRigidBody(bool state, bool forceToggle = false)
		{
		}

		[Address(RVA = "0xEB2BBC", Offset = "0xEB2BBC", VA = "0xEB2BBC", Slot = "15")]
		public virtual bool IsRigidBodyActive()
		{
			return default(bool);
		}

		[Address(RVA = "0xEB2BF8", Offset = "0xEB2BF8", VA = "0xEB2BF8", Slot = "16")]
		public virtual bool IsRigidBodyForcedActive()
		{
			return default(bool);
		}

		[Address(RVA = "0xEB2C3C", Offset = "0xEB2C3C", VA = "0xEB2C3C", Slot = "17")]
		public virtual void ForceStopTouching()
		{
		}

		[Address(RVA = "0xEB2CD4", Offset = "0xEB2CD4", VA = "0xEB2CD4", Slot = "18")]
		public virtual Collider[] ControllerColliders()
		{
			return null;
		}

		[Address(RVA = "0xEB2D88", Offset = "0xEB2D88", VA = "0xEB2D88", Slot = "19")]
		public virtual SDK_BaseController.ControllerType GetControllerType()
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Address(RVA = "0xEB2E2C", Offset = "0xEB2E2C", VA = "0xEB2E2C", Slot = "20")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xEB2E94", Offset = "0xEB2E94", VA = "0xEB2E94", Slot = "21")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEB2FF8", Offset = "0xEB2FF8", VA = "0xEB2FF8", Slot = "22")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEB30F4", Offset = "0xEB30F4", VA = "0xEB30F4", Slot = "23")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xEB315C", Offset = "0xEB315C", VA = "0xEB315C", Slot = "24")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xEB3330", Offset = "0xEB3330", VA = "0xEB3330", Slot = "25")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xEB33A0", Offset = "0xEB33A0", VA = "0xEB33A0", Slot = "26")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0xEB36D8", Offset = "0xEB36D8", VA = "0xEB36D8", Slot = "27")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xEB3734", Offset = "0xEB3734", VA = "0xEB3734", Slot = "28")]
		protected virtual void LateUpdate()
		{
		}

		[Address(RVA = "0xEB37B8", Offset = "0xEB37B8", VA = "0xEB37B8", Slot = "29")]
		protected virtual void DoControllerModelAvailable(object sender, VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0xEB37C8", Offset = "0xEB37C8", VA = "0xEB37C8", Slot = "30")]
		protected virtual GameObject GetColliderInteractableObject(Collider collider)
		{
			return null;
		}

		[Address(RVA = "0xEB3888", Offset = "0xEB3888", VA = "0xEB3888", Slot = "31")]
		protected virtual void AddActiveCollider(Collider collider)
		{
		}

		[Address(RVA = "0xEB3960", Offset = "0xEB3960", VA = "0xEB3960", Slot = "32")]
		protected virtual void StoreTouchedObjectColliders(Collider collider)
		{
		}

		[Address(RVA = "0xEB3A98", Offset = "0xEB3A98", VA = "0xEB3A98", Slot = "33")]
		protected virtual void ToggleControllerVisibility(bool visible)
		{
		}

		[Address(RVA = "0xEB3C10", Offset = "0xEB3C10", VA = "0xEB3C10", Slot = "34")]
		protected virtual void CheckStopTouching()
		{
		}

		[Address(RVA = "0xEB3D70", Offset = "0xEB3D70", VA = "0xEB3D70", Slot = "35")]
		protected virtual GameObject TriggerStart(Collider collider)
		{
			return null;
		}

		[Address(RVA = "0xEB3DE0", Offset = "0xEB3DE0", VA = "0xEB3DE0", Slot = "36")]
		protected virtual bool IsSnapDropZone(Collider collider)
		{
			return default(bool);
		}

		[Address(RVA = "0xEB3E70", Offset = "0xEB3E70", VA = "0xEB3E70", Slot = "37")]
		protected virtual void StopTouching(GameObject untouched)
		{
		}

		[Address(RVA = "0xEB4010", Offset = "0xEB4010", VA = "0xEB4010", Slot = "38")]
		protected virtual void CleanupEndTouch()
		{
		}

		[Address(RVA = "0xEB4098", Offset = "0xEB4098", VA = "0xEB4098", Slot = "39")]
		protected virtual void DestroyTouchCollider()
		{
		}

		[Address(RVA = "0xEB4118", Offset = "0xEB4118", VA = "0xEB4118", Slot = "40")]
		protected virtual bool CustomRigidBodyIsChild()
		{
			return default(bool);
		}

		[Address(RVA = "0xEB426C", Offset = "0xEB426C", VA = "0xEB426C", Slot = "41")]
		protected virtual void CreateTouchCollider()
		{
		}

		[Address(RVA = "0xEB49A0", Offset = "0xEB49A0", VA = "0xEB49A0", Slot = "42")]
		protected virtual void CreateTouchRigidBody()
		{
		}

		[Address(RVA = "0xEB4B00", Offset = "0xEB4B00", VA = "0xEB4B00", Slot = "43")]
		protected virtual void EmitControllerRigidbodyEvent(bool state)
		{
		}

		[Address(RVA = "0xEB4B58", Offset = "0xEB4B58", VA = "0xEB4B58")]
		public VRTK_InteractTouch()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6565B8", Offset = "0x6565B8")]
	public class VRTK_InteractUse : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665560", Offset = "0x665560")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665560", Offset = "0x665560")]
		public VRTK_ControllerEvents.ButtonAlias useButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6655C0", Offset = "0x6655C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6655C0", Offset = "0x6655C0")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665620", Offset = "0x665620")]
		public VRTK_InteractTouch interactTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665658", Offset = "0x665658")]
		public VRTK_InteractGrab interactGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedUseButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected VRTK_ControllerEvents.ButtonAlias savedUseButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool usePressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected GameObject usingObject;

		protected VRTK_ControllerReference controllerReference
		{
			[Address(RVA = "0xEB56F8", Offset = "0xEB56F8", VA = "0xEB56F8")]
			get
			{
				return null;
			}
		}

		public event ControllerInteractionEventHandler UseButtonPressed
		{
			[Address(RVA = "0xEB4BE8", Offset = "0xEB4BE8", VA = "0xEB4BE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DAA0", Offset = "0x67DAA0")]
			add
			{
			}
			[Address(RVA = "0xEB4CD4", Offset = "0xEB4CD4", VA = "0xEB4CD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DAB0", Offset = "0x67DAB0")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler UseButtonReleased
		{
			[Address(RVA = "0xEB4DC0", Offset = "0xEB4DC0", VA = "0xEB4DC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DAC0", Offset = "0x67DAC0")]
			add
			{
			}
			[Address(RVA = "0xEB4EAC", Offset = "0xEB4EAC", VA = "0xEB4EAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DAD0", Offset = "0x67DAD0")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerStartUseInteractableObject
		{
			[Address(RVA = "0xEB4F98", Offset = "0xEB4F98", VA = "0xEB4F98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DAE0", Offset = "0x67DAE0")]
			add
			{
			}
			[Address(RVA = "0xEB5084", Offset = "0xEB5084", VA = "0xEB5084")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DAF0", Offset = "0x67DAF0")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerUseInteractableObject
		{
			[Address(RVA = "0xEB5170", Offset = "0xEB5170", VA = "0xEB5170")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB00", Offset = "0x67DB00")]
			add
			{
			}
			[Address(RVA = "0xEB525C", Offset = "0xEB525C", VA = "0xEB525C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB10", Offset = "0x67DB10")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerStartUnuseInteractableObject
		{
			[Address(RVA = "0xEB5348", Offset = "0xEB5348", VA = "0xEB5348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB20", Offset = "0x67DB20")]
			add
			{
			}
			[Address(RVA = "0xEB5434", Offset = "0xEB5434", VA = "0xEB5434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB30", Offset = "0x67DB30")]
			remove
			{
			}
		}

		public event ObjectInteractEventHandler ControllerUnuseInteractableObject
		{
			[Address(RVA = "0xEB5520", Offset = "0xEB5520", VA = "0xEB5520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB40", Offset = "0x67DB40")]
			add
			{
			}
			[Address(RVA = "0xEB560C", Offset = "0xEB560C", VA = "0xEB560C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB50", Offset = "0x67DB50")]
			remove
			{
			}
		}

		[Address(RVA = "0xEB57BC", Offset = "0xEB57BC", VA = "0xEB57BC", Slot = "4")]
		public virtual void OnControllerStartUseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB57E8", Offset = "0xEB57E8", VA = "0xEB57E8", Slot = "5")]
		public virtual void OnControllerUseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB5814", Offset = "0xEB5814", VA = "0xEB5814", Slot = "6")]
		public virtual void OnControllerStartUnuseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB5840", Offset = "0xEB5840", VA = "0xEB5840", Slot = "7")]
		public virtual void OnControllerUnuseInteractableObject(ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB586C", Offset = "0xEB586C", VA = "0xEB586C", Slot = "8")]
		public virtual void OnUseButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEB58B8", Offset = "0xEB58B8", VA = "0xEB58B8", Slot = "9")]
		public virtual void OnUseButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEB5904", Offset = "0xEB5904", VA = "0xEB5904", Slot = "10")]
		public virtual bool IsUseButtonPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0xEB590C", Offset = "0xEB590C", VA = "0xEB590C", Slot = "11")]
		public virtual GameObject GetUsingObject()
		{
			return null;
		}

		[Address(RVA = "0xEB5914", Offset = "0xEB5914", VA = "0xEB5914", Slot = "12")]
		public virtual void ForceStopUsing()
		{
		}

		[Address(RVA = "0xEB59A8", Offset = "0xEB59A8", VA = "0xEB59A8", Slot = "13")]
		public virtual void ForceResetUsing()
		{
		}

		[Address(RVA = "0xEB5A40", Offset = "0xEB5A40", VA = "0xEB5A40", Slot = "14")]
		public virtual void AttemptUse()
		{
		}

		[Address(RVA = "0xEB5A50", Offset = "0xEB5A50", VA = "0xEB5A50", Slot = "15")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xEB5D94", Offset = "0xEB5D94", VA = "0xEB5D94", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xEB5DE8", Offset = "0xEB5DE8", VA = "0xEB5DE8", Slot = "17")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xEB5DFC", Offset = "0xEB5DFC", VA = "0xEB5DFC", Slot = "18")]
		protected virtual void ManageInteractTouchListener(bool state)
		{
		}

		[Address(RVA = "0xEB5FD0", Offset = "0xEB5FD0", VA = "0xEB5FD0", Slot = "19")]
		protected virtual void ControllerTouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB60EC", Offset = "0xEB60EC", VA = "0xEB60EC", Slot = "20")]
		protected virtual void ControllerUntouchInteractableObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xEB621C", Offset = "0xEB621C", VA = "0xEB621C", Slot = "21")]
		protected virtual void ManageUseListener(bool state)
		{
		}

		[Address(RVA = "0xEB6474", Offset = "0xEB6474", VA = "0xEB6474", Slot = "22")]
		protected virtual bool IsObjectUsable(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xEB65F4", Offset = "0xEB65F4", VA = "0xEB65F4", Slot = "23")]
		protected virtual bool IsObjectHoldOnUse(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xEB66DC", Offset = "0xEB66DC", VA = "0xEB66DC", Slot = "24")]
		protected virtual int GetObjectUsingState(GameObject obj)
		{
			return default(int);
		}

		[Address(RVA = "0xEB67BC", Offset = "0xEB67BC", VA = "0xEB67BC", Slot = "25")]
		protected virtual void SetObjectUsingState(GameObject obj, int value)
		{
		}

		[Address(RVA = "0xEB68A0", Offset = "0xEB68A0", VA = "0xEB68A0", Slot = "26")]
		protected virtual void ToggleControllerVisibility(bool visible)
		{
		}

		[Address(RVA = "0xEB69D8", Offset = "0xEB69D8", VA = "0xEB69D8", Slot = "27")]
		protected virtual void UseInteractedObject(GameObject touchedObject)
		{
		}

		[Address(RVA = "0xEB6C84", Offset = "0xEB6C84", VA = "0xEB6C84", Slot = "28")]
		protected virtual void UnuseInteractedObject(bool completeStop)
		{
		}

		[Address(RVA = "0xEB6E70", Offset = "0xEB6E70", VA = "0xEB6E70", Slot = "29")]
		protected virtual GameObject GetFromGrab()
		{
			return null;
		}

		[Address(RVA = "0xEB6F14", Offset = "0xEB6F14", VA = "0xEB6F14", Slot = "30")]
		protected virtual void StopUsing()
		{
		}

		[Address(RVA = "0xEB6F5C", Offset = "0xEB6F5C", VA = "0xEB6F5C", Slot = "31")]
		protected virtual void AttemptUseObject()
		{
		}

		[Address(RVA = "0xEB71F8", Offset = "0xEB71F8", VA = "0xEB71F8", Slot = "32")]
		protected virtual void DoStartUseObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEB72AC", Offset = "0xEB72AC", VA = "0xEB72AC", Slot = "33")]
		protected virtual void DoStopUseObject(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xEB7398", Offset = "0xEB7398", VA = "0xEB7398")]
		public VRTK_InteractUse()
		{
		}
	}
	public delegate void ObjectAutoGrabEventHandler(object sender);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6565F0", Offset = "0x6565F0")]
	public class VRTK_ObjectAutoGrab : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B1A0", Offset = "0x65B1A0")]
		private sealed class <AutoGrab>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ObjectAutoGrab <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xB3BD1C", Offset = "0xB3BD1C", VA = "0xB3BD1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xB3BD8C", Offset = "0xB3BD8C", VA = "0xB3BD8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xB3B178", Offset = "0xB3B178", VA = "0xB3B178")]
			[DebuggerHidden]
			public <AutoGrab>d__18(int <>1__state)
			{
			}

			[Address(RVA = "0xB3B428", Offset = "0xB3B428", VA = "0xB3B428", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xB3B42C", Offset = "0xB3B42C", VA = "0xB3B42C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xB3BD24", Offset = "0xB3BD24", VA = "0xB3BD24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6656F0", Offset = "0x6656F0")]
		public VRTK_InteractableObject objectToGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665728", Offset = "0x665728")]
		public bool objectIsPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665760", Offset = "0x665760")]
		public bool cloneGrabbedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665798", Offset = "0x665798")]
		public bool alwaysCloneOnEnable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6657D0", Offset = "0x6657D0")]
		public bool attemptSecondaryGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665808", Offset = "0x665808")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665808", Offset = "0x665808")]
		public VRTK_InteractTouch interactTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665868", Offset = "0x665868")]
		public VRTK_InteractGrab interactGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6658A0", Offset = "0x6658A0")]
		public VRTK_InteractTouch secondaryInteractTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6658D8", Offset = "0x6658D8")]
		public VRTK_InteractGrab secondaryInteractGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_InteractableObject previousClonedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Coroutine autoGrabRoutine;

		public event ObjectAutoGrabEventHandler ObjectAutoGrabCompleted
		{
			[Address(RVA = "0xB3AEA4", Offset = "0xB3AEA4", VA = "0xB3AEA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB60", Offset = "0x67DB60")]
			add
			{
			}
			[Address(RVA = "0xB3AF90", Offset = "0xB3AF90", VA = "0xB3AF90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DB70", Offset = "0x67DB70")]
			remove
			{
			}
		}

		[Address(RVA = "0xB3B07C", Offset = "0xB3B07C", VA = "0xB3B07C", Slot = "4")]
		public virtual void OnObjectAutoGrabCompleted()
		{
		}

		[Address(RVA = "0xB3B098", Offset = "0xB3B098", VA = "0xB3B098", Slot = "5")]
		public virtual void ClearPreviousClone()
		{
		}

		[Address(RVA = "0xB3B0A0", Offset = "0xB3B0A0", VA = "0xB3B0A0", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB3B0F0", Offset = "0xB3B0F0", VA = "0xB3B0F0", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB3B104", Offset = "0xB3B104", VA = "0xB3B104", Slot = "8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DB80", Offset = "0x67DB80")]
		protected virtual IEnumerator AutoGrab()
		{
			return null;
		}

		[Address(RVA = "0xB3B1A4", Offset = "0xB3B1A4", VA = "0xB3B1A4", Slot = "9")]
		protected virtual void AttemptSecondaryGrab(VRTK_InteractableObject grabbableObject)
		{
		}

		[Address(RVA = "0xB3B420", Offset = "0xB3B420", VA = "0xB3B420")]
		public VRTK_ObjectAutoGrab()
		{
		}
	}
	public class VRTK_ControllerHaptics : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B1B0", Offset = "0x65B1B0")]
		private sealed class <SimpleHapticPulseRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float pulseInterval;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_ControllerReference controllerReference;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float hapticPulseStrength;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float duration;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA686D0", Offset = "0xA686D0", VA = "0xA686D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA68740", Offset = "0xA68740", VA = "0xA68740", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA68128", Offset = "0xA68128", VA = "0xA68128")]
			[DebuggerHidden]
			public <SimpleHapticPulseRoutine>d__12(int <>1__state)
			{
			}

			[Address(RVA = "0xA685C8", Offset = "0xA685C8", VA = "0xA685C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA685CC", Offset = "0xA685CC", VA = "0xA685CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA686D8", Offset = "0xA686D8", VA = "0xA686D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B1C0", Offset = "0x65B1C0")]
		private sealed class <AudioClipHapticsRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioClip clip;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_ControllerReference controllerReference;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private SDK_ControllerHapticModifiers <hapticModifiers>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <hapticScalar>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float[] <audioData>5__4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <sampleOffset>5__5;

			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <startTime>5__6;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <length>5__7;

			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <endTime>5__8;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <sampleRate>5__9;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA68550", Offset = "0xA68550", VA = "0xA68550", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA685C0", Offset = "0xA685C0", VA = "0xA685C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA681EC", Offset = "0xA681EC", VA = "0xA681EC")]
			[DebuggerHidden]
			public <AudioClipHapticsRoutine>d__13(int <>1__state)
			{
			}

			[Address(RVA = "0xA68288", Offset = "0xA68288", VA = "0xA68288", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA6828C", Offset = "0xA6828C", VA = "0xA6828C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA68558", Offset = "0xA68558", VA = "0xA68558", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static VRTK_ControllerHaptics instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dictionary<VRTK_ControllerReference, Coroutine> hapticLoopCoroutines;

		[Address(RVA = "0xA67798", Offset = "0xA67798", VA = "0xA67798")]
		public static void TriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength)
		{
		}

		[Address(RVA = "0xA6798C", Offset = "0xA6798C", VA = "0xA6798C")]
		public static void TriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength, float duration, float pulseInterval)
		{
		}

		[Address(RVA = "0xA67A88", Offset = "0xA67A88", VA = "0xA67A88")]
		public static void TriggerHapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
		}

		[Address(RVA = "0xA67B5C", Offset = "0xA67B5C", VA = "0xA67B5C")]
		public static void CancelHapticPulse(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xA67C28", Offset = "0xA67C28", VA = "0xA67C28", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA67878", Offset = "0xA67878", VA = "0xA67878")]
		protected static void SetupInstance()
		{
		}

		[Address(RVA = "0xA67C94", Offset = "0xA67C94", VA = "0xA67C94", Slot = "5")]
		protected virtual void InternalTriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength)
		{
		}

		[Address(RVA = "0xA67D64", Offset = "0xA67D64", VA = "0xA67D64", Slot = "6")]
		protected virtual void InternalTriggerHapticPulse(VRTK_ControllerReference controllerReference, float strength, float duration, float pulseInterval)
		{
		}

		[Address(RVA = "0xA67EB8", Offset = "0xA67EB8", VA = "0xA67EB8", Slot = "7")]
		protected virtual void InternalTriggerHapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
		}

		[Address(RVA = "0xA67FA8", Offset = "0xA67FA8", VA = "0xA67FA8", Slot = "8")]
		protected virtual void InternalCancelHapticPulse(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xA68060", Offset = "0xA68060", VA = "0xA68060", Slot = "9")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DBE4", Offset = "0x67DBE4")]
		protected virtual IEnumerator SimpleHapticPulseRoutine(VRTK_ControllerReference controllerReference, float duration, float hapticPulseStrength, float pulseInterval)
		{
			return null;
		}

		[Address(RVA = "0xA68154", Offset = "0xA68154", VA = "0xA68154", Slot = "10")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DC48", Offset = "0x67DC48")]
		protected virtual IEnumerator AudioClipHapticsRoutine(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return null;
		}

		[Address(RVA = "0xA68218", Offset = "0xA68218", VA = "0xA68218")]
		public VRTK_ControllerHaptics()
		{
		}
	}
	public class VRTK_ObjectAppearance : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B1D0", Offset = "0x65B1D0")]
		private sealed class <TransitionRendererOpacity>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float initialAlpha;

			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float targetAlpha;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float transitionDuration;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public VRTK_ObjectAppearance <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public GameObject model;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <elapsedTime>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xB3AE2C", Offset = "0xB3AE2C", VA = "0xB3AE2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xB3AE9C", Offset = "0xB3AE9C", VA = "0xB3AE9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xB3ABAC", Offset = "0xB3ABAC", VA = "0xB3ABAC")]
			[DebuggerHidden]
			public <TransitionRendererOpacity>d__19(int <>1__state)
			{
			}

			[Address(RVA = "0xB3ACD8", Offset = "0xB3ACD8", VA = "0xB3ACD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xB3ACDC", Offset = "0xB3ACDC", VA = "0xB3ACDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xB3AE34", Offset = "0xB3AE34", VA = "0xB3AE34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static VRTK_ObjectAppearance instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dictionary<GameObject, Coroutine> setOpacityCoroutines;

		[Address(RVA = "0xB39120", Offset = "0xB39120", VA = "0xB39120")]
		public static void SetOpacity(GameObject model, float alpha, float transitionDuration = 0f)
		{
		}

		[Address(RVA = "0xB3931C", Offset = "0xB3931C", VA = "0xB3931C")]
		public static void SetRendererVisible(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Address(RVA = "0xB393F0", Offset = "0xB393F0", VA = "0xB393F0")]
		public static void SetRendererHidden(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Address(RVA = "0xB394C4", Offset = "0xB394C4", VA = "0xB394C4")]
		public static void ToggleRenderer(bool state, GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Address(RVA = "0xB394E0", Offset = "0xB394E0", VA = "0xB394E0")]
		public static bool IsRendererVisible(GameObject model, [Optional] GameObject ignoredModel)
		{
			return default(bool);
		}

		[Address(RVA = "0xB396D8", Offset = "0xB396D8", VA = "0xB396D8")]
		public static void HighlightObject(GameObject model, Color? highlightColor, float fadeDuration = 0f)
		{
		}

		[Address(RVA = "0xB397DC", Offset = "0xB397DC", VA = "0xB397DC")]
		public static void UnhighlightObject(GameObject model)
		{
		}

		[Address(RVA = "0xB398A8", Offset = "0xB398A8", VA = "0xB398A8", Slot = "4")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB39208", Offset = "0xB39208", VA = "0xB39208")]
		protected static void SetupInstance()
		{
		}

		[Address(RVA = "0xB399F8", Offset = "0xB399F8", VA = "0xB399F8", Slot = "5")]
		protected virtual void InternalSetOpacity(GameObject model, float alpha, float transitionDuration = 0f)
		{
		}

		[Address(RVA = "0xB39B58", Offset = "0xB39B58", VA = "0xB39B58", Slot = "6")]
		protected virtual void InternalSetRendererVisible(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Address(RVA = "0xB39D64", Offset = "0xB39D64", VA = "0xB39D64", Slot = "7")]
		protected virtual void InternalSetRendererHidden(GameObject model, [Optional] GameObject ignoredModel)
		{
		}

		[Address(RVA = "0xB39F70", Offset = "0xB39F70", VA = "0xB39F70", Slot = "8")]
		protected virtual void InternalHighlightObject(GameObject model, Color? highlightColor, float fadeDuration = 0f)
		{
		}

		[Address(RVA = "0xB3A0F8", Offset = "0xB3A0F8", VA = "0xB3A0F8", Slot = "9")]
		protected virtual void InternalUnhighlightObject(GameObject model)
		{
		}

		[Address(RVA = "0xB3A20C", Offset = "0xB3A20C", VA = "0xB3A20C", Slot = "10")]
		protected virtual void EmitControllerEvents(GameObject model, bool state)
		{
		}

		[Address(RVA = "0xB3A488", Offset = "0xB3A488", VA = "0xB3A488", Slot = "11")]
		protected virtual void ChangeRendererOpacity(GameObject model, float alpha)
		{
		}

		[Address(RVA = "0xB3A9EC", Offset = "0xB3A9EC", VA = "0xB3A9EC", Slot = "12")]
		protected virtual float GetInitialAlpha(GameObject model)
		{
			return default(float);
		}

		[Address(RVA = "0xB3AAC8", Offset = "0xB3AAC8", VA = "0xB3AAC8", Slot = "13")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DCAC", Offset = "0x67DCAC")]
		protected virtual IEnumerator TransitionRendererOpacity(GameObject model, float initialAlpha, float targetAlpha, float transitionDuration)
		{
			return null;
		}

		[Address(RVA = "0xB3ABD8", Offset = "0xB3ABD8", VA = "0xB3ABD8", Slot = "14")]
		protected virtual void CancelSetOpacityCoroutine(GameObject model)
		{
		}

		[Address(RVA = "0xB3AC68", Offset = "0xB3AC68", VA = "0xB3AC68")]
		public VRTK_ObjectAppearance()
		{
		}
	}
	public class MinMaxRangeAttribute : PropertyAttribute
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float max;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float min;

		[Address(RVA = "0xCE8538", Offset = "0xCE8538", VA = "0xCE8538")]
		public MinMaxRangeAttribute(float min, float max)
		{
		}
	}
	public class ObsoleteInspectorAttribute : PropertyAttribute
	{
		[Address(RVA = "0xCEAA94", Offset = "0xCEAA94", VA = "0xCEAA94")]
		public ObsoleteInspectorAttribute()
		{
		}
	}
	[Serializable]
	public class Limits2D
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minimum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maximum;

		public static Limits2D zero
		{
			[Address(RVA = "0xCE8414", Offset = "0xCE8414", VA = "0xCE8414")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xCE8474", Offset = "0xCE8474", VA = "0xCE8474")]
		public Limits2D(float min, float max)
		{
		}

		[Address(RVA = "0xCE84AC", Offset = "0xCE84AC", VA = "0xCE84AC")]
		public Limits2D(Vector2 limits)
		{
		}

		[Address(RVA = "0xCE84E4", Offset = "0xCE84E4", VA = "0xCE84E4")]
		public bool WithinLimits(float value)
		{
			return default(bool);
		}

		[Address(RVA = "0xCE8508", Offset = "0xCE8508", VA = "0xCE8508")]
		public Vector2 AsVector2()
		{
			return default(Vector2);
		}
	}
	[Serializable]
	public class Vector3State
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool xState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool yState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool zState;

		public static Vector3State False
		{
			[Address(RVA = "0x88AFD8", Offset = "0x88AFD8", VA = "0x88AFD8")]
			get
			{
				return null;
			}
		}

		public static Vector3State True
		{
			[Address(RVA = "0x88B08C", Offset = "0x88B08C", VA = "0x88B08C")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x88B03C", Offset = "0x88B03C", VA = "0x88B03C")]
		public Vector3State(bool x, bool y, bool z)
		{
		}
	}
	public struct CollisionTrackerEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isTrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Collision collision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Collider collider;
	}
	public delegate void CollisionTrackerEventHandler(object sender, CollisionTrackerEventArgs e);
	public class VRTK_CollisionTracker : MonoBehaviour
	{
		public event CollisionTrackerEventHandler CollisionEnter
		{
			[Address(RVA = "0x929E18", Offset = "0x929E18", VA = "0x929E18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD10", Offset = "0x67DD10")]
			add
			{
			}
			[Address(RVA = "0x92A1C8", Offset = "0x92A1C8", VA = "0x92A1C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD20", Offset = "0x67DD20")]
			remove
			{
			}
		}

		public event CollisionTrackerEventHandler CollisionStay
		{
			[Address(RVA = "0x9346DC", Offset = "0x9346DC", VA = "0x9346DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD30", Offset = "0x67DD30")]
			add
			{
			}
			[Address(RVA = "0x9347C8", Offset = "0x9347C8", VA = "0x9347C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD40", Offset = "0x67DD40")]
			remove
			{
			}
		}

		public event CollisionTrackerEventHandler CollisionExit
		{
			[Address(RVA = "0x929F04", Offset = "0x929F04", VA = "0x929F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD50", Offset = "0x67DD50")]
			add
			{
			}
			[Address(RVA = "0x92A2B4", Offset = "0x92A2B4", VA = "0x92A2B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD60", Offset = "0x67DD60")]
			remove
			{
			}
		}

		public event CollisionTrackerEventHandler TriggerEnter
		{
			[Address(RVA = "0x929FF0", Offset = "0x929FF0", VA = "0x929FF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD70", Offset = "0x67DD70")]
			add
			{
			}
			[Address(RVA = "0x92A3A0", Offset = "0x92A3A0", VA = "0x92A3A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD80", Offset = "0x67DD80")]
			remove
			{
			}
		}

		public event CollisionTrackerEventHandler TriggerStay
		{
			[Address(RVA = "0x9348B4", Offset = "0x9348B4", VA = "0x9348B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DD90", Offset = "0x67DD90")]
			add
			{
			}
			[Address(RVA = "0x9349A0", Offset = "0x9349A0", VA = "0x9349A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DDA0", Offset = "0x67DDA0")]
			remove
			{
			}
		}

		public event CollisionTrackerEventHandler TriggerExit
		{
			[Address(RVA = "0x92A0DC", Offset = "0x92A0DC", VA = "0x92A0DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DDB0", Offset = "0x67DDB0")]
			add
			{
			}
			[Address(RVA = "0x92A48C", Offset = "0x92A48C", VA = "0x92A48C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DDC0", Offset = "0x67DDC0")]
			remove
			{
			}
		}

		[Address(RVA = "0x934A8C", Offset = "0x934A8C", VA = "0x934A8C")]
		protected void OnCollisionEnterEvent(CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x934AD0", Offset = "0x934AD0", VA = "0x934AD0")]
		protected void OnCollisionStayEvent(CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x934B14", Offset = "0x934B14", VA = "0x934B14")]
		protected void OnCollisionExitEvent(CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x934B58", Offset = "0x934B58", VA = "0x934B58")]
		protected void OnTriggerEnterEvent(CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x934B9C", Offset = "0x934B9C", VA = "0x934B9C")]
		protected void OnTriggerStayEvent(CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x934BE0", Offset = "0x934BE0", VA = "0x934BE0")]
		protected void OnTriggerExitEvent(CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x934C24", Offset = "0x934C24", VA = "0x934C24", Slot = "4")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x934CBC", Offset = "0x934CBC", VA = "0x934CBC", Slot = "5")]
		protected virtual void OnCollisionStay(Collision collision)
		{
		}

		[Address(RVA = "0x934D54", Offset = "0x934D54", VA = "0x934D54", Slot = "6")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Address(RVA = "0x934DEC", Offset = "0x934DEC", VA = "0x934DEC", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0x934E68", Offset = "0x934E68", VA = "0x934E68", Slot = "8")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0x934EE4", Offset = "0x934EE4", VA = "0x934EE4", Slot = "9")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0x934F60", Offset = "0x934F60", VA = "0x934F60", Slot = "10")]
		protected virtual CollisionTrackerEventArgs SetCollisionTrackerEvent(bool isTrigger, Collision givenCollision, Collider givenCollider)
		{
			return default(CollisionTrackerEventArgs);
		}

		[Address(RVA = "0x934F7C", Offset = "0x934F7C", VA = "0x934F7C")]
		public VRTK_CollisionTracker()
		{
		}
	}
	public class VRTK_ControllerReference : IEquatable<VRTK_ControllerReference>
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<uint, VRTK_ControllerReference> controllerReferences;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected uint storedControllerIndex;

		public uint index
		{
			[Address(RVA = "0xA6BB24", Offset = "0xA6BB24", VA = "0xA6BB24")]
			get
			{
				return default(uint);
			}
		}

		public GameObject scriptAlias
		{
			[Address(RVA = "0xA6BD3C", Offset = "0xA6BD3C", VA = "0xA6BD3C")]
			get
			{
				return null;
			}
		}

		public GameObject actual
		{
			[Address(RVA = "0xA6BDAC", Offset = "0xA6BDAC", VA = "0xA6BDAC")]
			get
			{
				return null;
			}
		}

		public GameObject model
		{
			[Address(RVA = "0xA6BE1C", Offset = "0xA6BE1C", VA = "0xA6BE1C")]
			get
			{
				return null;
			}
		}

		public SDK_BaseController.ControllerHand hand
		{
			[Address(RVA = "0xA6BE9C", Offset = "0xA6BE9C", VA = "0xA6BE9C")]
			get
			{
				return default(SDK_BaseController.ControllerHand);
			}
		}

		[Address(RVA = "0xA6B470", Offset = "0xA6B470", VA = "0xA6B470")]
		public static VRTK_ControllerReference GetControllerReference(uint controllerIndex)
		{
			return null;
		}

		[Address(RVA = "0xA6B61C", Offset = "0xA6B61C", VA = "0xA6B61C")]
		public static VRTK_ControllerReference GetControllerReference(GameObject controllerObject)
		{
			return null;
		}

		[Address(RVA = "0xA6B920", Offset = "0xA6B920", VA = "0xA6B920")]
		public static VRTK_ControllerReference GetControllerReference(SDK_BaseController.ControllerHand controllerHand)
		{
			return null;
		}

		[Address(RVA = "0xA6BA8C", Offset = "0xA6BA8C", VA = "0xA6BA8C")]
		public static bool IsValid(VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Address(RVA = "0xA6BAB0", Offset = "0xA6BAB0", VA = "0xA6BAB0")]
		public static uint GetRealIndex(VRTK_ControllerReference controllerReference)
		{
			return default(uint);
		}

		[Address(RVA = "0xA6B530", Offset = "0xA6B530", VA = "0xA6B530")]
		public VRTK_ControllerReference(uint controllerIndex)
		{
		}

		[Address(RVA = "0xA6BA10", Offset = "0xA6BA10", VA = "0xA6BA10")]
		public VRTK_ControllerReference(GameObject controllerObject)
		{
		}

		[Address(RVA = "0xA6BC70", Offset = "0xA6BC70", VA = "0xA6BC70")]
		public VRTK_ControllerReference(SDK_BaseController.ControllerHand controllerHand)
		{
		}

		[Address(RVA = "0xA6BAA0", Offset = "0xA6BAA0", VA = "0xA6BAA0")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Address(RVA = "0xA6BF18", Offset = "0xA6BF18", VA = "0xA6BF18", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Address(RVA = "0xA6C3B8", Offset = "0xA6C3B8", VA = "0xA6C3B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Address(RVA = "0xA6C3C0", Offset = "0xA6C3C0", VA = "0xA6C3C0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xA6C46C", Offset = "0xA6C46C", VA = "0xA6C46C", Slot = "4")]
		public bool Equals(VRTK_ControllerReference other)
		{
			return default(bool);
		}

		[Address(RVA = "0xA6C48C", Offset = "0xA6C48C", VA = "0xA6C48C", Slot = "5")]
		protected virtual GameObject GetValidObjectFromIndex()
		{
			return null;
		}

		[Address(RVA = "0xA6C580", Offset = "0xA6C580", VA = "0xA6C580", Slot = "6")]
		protected virtual void AddToCache()
		{
		}

		[Address(RVA = "0xA6B764", Offset = "0xA6B764", VA = "0xA6B764")]
		private static GameObject GetValidObjectFromHand(SDK_BaseController.ControllerHand controllerHand)
		{
			return null;
		}

		[Address(RVA = "0xA6BB2C", Offset = "0xA6BB2C", VA = "0xA6BB2C")]
		private static SDK_BaseController.ControllerHand GetControllerHand(GameObject controllerObject)
		{
			return default(SDK_BaseController.ControllerHand);
		}
	}
	public static class Bezier
	{
		[Address(RVA = "0x8CACFC", Offset = "0x8CACFC", VA = "0x8CACFC")]
		public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8CAE88", Offset = "0x8CAE88", VA = "0x8CAE88")]
		public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8CAFE4", Offset = "0x8CAFE4", VA = "0x8CAFE4")]
		public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8CB1DC", Offset = "0x8CB1DC", VA = "0x8CB1DC")]
		public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}
	}
	public class VRTK_CurveGenerator : MonoBehaviour
	{
		public enum BezierControlPointMode
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Free,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Aligned,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Mirrored
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Vector3[] points;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject[] items;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected BezierControlPointMode[] modes;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool loop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected int frequency;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool customTracer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		protected bool rescalePointerTracer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected GameObject tracerLineRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected LineRenderer customLineRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool lineRendererAndItem;

		protected virtual bool Loop
		{
			[Address(RVA = "0xA70B40", Offset = "0xA70B40", VA = "0xA70B40", Slot = "11")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xA70B48", Offset = "0xA70B48", VA = "0xA70B48", Slot = "12")]
			set
			{
			}
		}

		protected virtual int ControlPointCount
		{
			[Address(RVA = "0xA70C44", Offset = "0xA70C44", VA = "0xA70C44", Slot = "13")]
			get
			{
				return default(int);
			}
		}

		protected virtual int CurveCount
		{
			[Address(RVA = "0xA715BC", Offset = "0xA715BC", VA = "0xA715BC", Slot = "17")]
			get
			{
				return default(int);
			}
		}

		[Address(RVA = "0xA6FE60", Offset = "0xA6FE60", VA = "0xA6FE60", Slot = "4")]
		public virtual void Create(int setFrequency, float radius, GameObject tracer, bool rescaleTracer = false)
		{
		}

		[Address(RVA = "0xA705C0", Offset = "0xA705C0", VA = "0xA705C0", Slot = "5")]
		public virtual void SetPoints(Vector3[] controlPoints, Material material, Color color)
		{
		}

		[Address(RVA = "0xA70630", Offset = "0xA70630", VA = "0xA70630", Slot = "6")]
		public virtual Vector3[] GetPoints(Vector3[] controlPoints)
		{
			return null;
		}

		[Address(RVA = "0xA70788", Offset = "0xA70788", VA = "0xA70788", Slot = "7")]
		public virtual void TogglePoints(bool state)
		{
		}

		[Address(RVA = "0xA70860", Offset = "0xA70860", VA = "0xA70860", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA70900", Offset = "0xA70900", VA = "0xA70900", Slot = "9")]
		protected virtual void PointsInit(Vector3[] controlPoints)
		{
		}

		[Address(RVA = "0xA70968", Offset = "0xA70968", VA = "0xA70968", Slot = "10")]
		protected virtual GameObject CreateSphere()
		{
			return null;
		}

		[Address(RVA = "0xA70C70", Offset = "0xA70C70", VA = "0xA70C70", Slot = "14")]
		protected virtual Vector3 GetControlPoint(int index)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA70CCC", Offset = "0xA70CCC", VA = "0xA70CCC", Slot = "15")]
		protected virtual void SetControlPoint(int index, Vector3 point)
		{
		}

		[Address(RVA = "0xA711F0", Offset = "0xA711F0", VA = "0xA711F0", Slot = "16")]
		protected virtual void EnforceMode(int index)
		{
		}

		[Address(RVA = "0xA71604", Offset = "0xA71604", VA = "0xA71604", Slot = "18")]
		protected virtual Vector3 GetPoint(float t)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA7188C", Offset = "0xA7188C", VA = "0xA7188C", Slot = "19")]
		protected virtual void SetObjects(Material material, Color color)
		{
		}

		[Address(RVA = "0xA7193C", Offset = "0xA7193C", VA = "0xA7193C", Slot = "20")]
		protected virtual void SetPointData(Material material, Color color, float stepSize)
		{
		}

		[Address(RVA = "0xA71B28", Offset = "0xA71B28", VA = "0xA71B28", Slot = "21")]
		protected virtual void SetItemPosition(int currentIndex, Vector3 setPosition, Material material, Color color, float stepSize)
		{
		}

		[Address(RVA = "0xA71F84", Offset = "0xA71F84", VA = "0xA71F84", Slot = "22")]
		protected virtual void SetItemMaterial(GameObject item, Material material, Color color)
		{
		}

		[Address(RVA = "0xA72128", Offset = "0xA72128", VA = "0xA72128", Slot = "23")]
		protected virtual void SetMaterial(Material material, Color color)
		{
		}

		[Address(RVA = "0xA722DC", Offset = "0xA722DC", VA = "0xA722DC")]
		public VRTK_CurveGenerator()
		{
		}
	}
	public static class VRTK_Defines
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version CurrentVersion;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Version[] PreviousVersions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x665980", Offset = "0x665980")]
		private static string <CurrentExactVersionScriptingDefineSymbol>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string VersionScriptingDefineSymbolPrefix = "VRTK_VERSION_";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string VersionScriptingDefineSymbolSuffix = "_OR_NEWER";

		public static string CurrentExactVersionScriptingDefineSymbol
		{
			[Address(RVA = "0xA73EF4", Offset = "0xA73EF4", VA = "0xA73EF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DDD0", Offset = "0x67DDD0")]
			get
			{
				return null;
			}
			[Address(RVA = "0xA73F5C", Offset = "0xA73F5C", VA = "0xA73F5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DDE0", Offset = "0x67DDE0")]
			private set
			{
			}
		}

		[Address(RVA = "0xA73FC8", Offset = "0xA73FC8", VA = "0xA73FC8")]
		static VRTK_Defines()
		{
		}

		[Address(RVA = "0xA751C4", Offset = "0xA751C4", VA = "0xA751C4")]
		private static string ExactVersionSymbol(Version version)
		{
			return null;
		}

		[Address(RVA = "0xA75274", Offset = "0xA75274", VA = "0xA75274")]
		private static string AtLeastVersionSymbol(Version version)
		{
			return null;
		}
	}
	public class VRTK_EventSystem : EventSystem
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B1E0", Offset = "0x65B1E0")]
		private sealed class <SetEventSystemOfBaseInputModulesAfterFrameDelay>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EventSystem eventSystem;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA81F6C", Offset = "0xA81F6C", VA = "0xA81F6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA81FDC", Offset = "0xA81FDC", VA = "0xA81FDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA81C24", Offset = "0xA81C24", VA = "0xA81C24")]
			[DebuggerHidden]
			public <SetEventSystemOfBaseInputModulesAfterFrameDelay>d__10(int <>1__state)
			{
			}

			[Address(RVA = "0xA81ED0", Offset = "0xA81ED0", VA = "0xA81ED0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA81ED4", Offset = "0xA81ED4", VA = "0xA81ED4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA81F74", Offset = "0xA81F74", VA = "0xA81F74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected EventSystem previousEventSystem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VRTK_VRInputModule vrInputModule;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly FieldInfo[] EVENT_SYSTEM_FIELD_INFOS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly PropertyInfo[] EVENT_SYSTEM_PROPERTY_INFOS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly FieldInfo BASE_INPUT_MODULE_EVENT_SYSTEM_FIELD_INFO;

		[Address(RVA = "0xA8156C", Offset = "0xA8156C", VA = "0xA8156C", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xA81928", Offset = "0xA81928", VA = "0xA81928", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0xA81B44", Offset = "0xA81B44", VA = "0xA81B44", Slot = "18")]
		protected override void Update()
		{
		}

		[Address(RVA = "0xA81C20", Offset = "0xA81C20", VA = "0xA81C20", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Address(RVA = "0xA816D0", Offset = "0xA816D0", VA = "0xA816D0")]
		private static void CopyValuesFrom(EventSystem fromEventSystem, EventSystem toEventSystem)
		{
		}

		[Address(RVA = "0xA818B4", Offset = "0xA818B4", VA = "0xA818B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DDF0", Offset = "0x67DDF0")]
		private static IEnumerator SetEventSystemOfBaseInputModulesAfterFrameDelay(EventSystem eventSystem)
		{
			return null;
		}

		[Address(RVA = "0xA81A18", Offset = "0xA81A18", VA = "0xA81A18")]
		private static void SetEventSystemOfBaseInputModules(EventSystem eventSystem)
		{
		}

		[Address(RVA = "0xA81C50", Offset = "0xA81C50", VA = "0xA81C50")]
		public VRTK_EventSystem()
		{
		}
	}
	public class VRTK_Logger : MonoBehaviour
	{
		public enum LogLevels
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Trace,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Debug,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Info,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Warn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Error,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Fatal,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None
		}

		public enum CommonMessageKeys
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NOT_DEFINED,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			REQUIRED_COMPONENT_MISSING_FROM_SCENE,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			REQUIRED_COMPONENT_MISSING_FROM_GAMEOBJECT,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			REQUIRED_COMPONENT_MISSING_FROM_PARAMETER,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			REQUIRED_COMPONENT_MISSING_NOT_INJECTED,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			COULD_NOT_FIND_OBJECT_FOR_ACTION,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SDK_OBJECT_NOT_FOUND,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SDK_NOT_FOUND,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SDK_MANAGER_ERRORS,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SCRIPTING_DEFINE_SYMBOLS_ADDED,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SCRIPTING_DEFINE_SYMBOLS_REMOVED,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SCRIPTING_DEFINE_SYMBOLS_NOT_FOUND
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B1F0", Offset = "0x65B1F0")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Match, int> <>9__7_0;

			[Address(RVA = "0xB36DF4", Offset = "0xB36DF4", VA = "0xB36DF4")]
			public <>c()
			{
			}

			[Address(RVA = "0xB36DFC", Offset = "0xB36DFC", VA = "0xB36DFC")]
			internal int <CreateIfNotExists>b__7_0(Match m)
			{
				return default(int);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VRTK_Logger instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Dictionary<CommonMessageKeys, string> commonMessages;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Dictionary<CommonMessageKeys, int> commonMessageParts;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LogLevels minLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool throwExceptions;

		[Address(RVA = "0xB3605C", Offset = "0xB3605C", VA = "0xB3605C")]
		public static void CreateIfNotExists()
		{
		}

		[Address(RVA = "0xB3659C", Offset = "0xB3659C", VA = "0xB3659C")]
		public static string GetCommonMessage(CommonMessageKeys messageKey, params object[] parameters)
		{
			return null;
		}

		[Address(RVA = "0xB366E4", Offset = "0xB366E4", VA = "0xB366E4")]
		public static void Trace(string message)
		{
		}

		[Address(RVA = "0xB3674C", Offset = "0xB3674C", VA = "0xB3674C")]
		public static void Debug(string message)
		{
		}

		[Address(RVA = "0xB367B0", Offset = "0xB367B0", VA = "0xB367B0")]
		public static void Info(string message)
		{
		}

		[Address(RVA = "0xB36814", Offset = "0xB36814", VA = "0xB36814")]
		public static void Warn(string message)
		{
		}

		[Address(RVA = "0xB36878", Offset = "0xB36878", VA = "0xB36878")]
		public static void Error(string message, bool forcePause = false)
		{
		}

		[Address(RVA = "0xB368DC", Offset = "0xB368DC", VA = "0xB368DC")]
		public static void Fatal(string message, bool forcePause = false)
		{
		}

		[Address(RVA = "0xB36940", Offset = "0xB36940", VA = "0xB36940")]
		public static void Fatal(Exception exception, bool forcePause = false)
		{
		}

		[Address(RVA = "0xB36748", Offset = "0xB36748", VA = "0xB36748")]
		public static void Log(LogLevels level, string message, bool forcePause = false)
		{
		}

		[Address(RVA = "0xB369C4", Offset = "0xB369C4", VA = "0xB369C4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB36A6C", Offset = "0xB36A6C", VA = "0xB36A6C")]
		public VRTK_Logger()
		{
		}
	}
	public static class VRTK_ObjectCache
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<VRTK_BasicTeleport> registeredTeleporters;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<VRTK_DestinationMarker> registeredDestinationMarkers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Dictionary<VRTK_InteractTouch, VRTK_ControllerTrackedCollider> registeredTrackedColliderToInteractTouches;
	}
	public sealed class VRTK_PlayerObject : MonoBehaviour
	{
		public enum ObjectTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Null,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CameraRig,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Headset,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Controller,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Pointer,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Highlighter,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Collider
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObjectTypes objectType;

		[Address(RVA = "0x941700", Offset = "0x941700", VA = "0x941700")]
		public static void SetPlayerObject(GameObject obj, ObjectTypes objType)
		{
		}

		[Address(RVA = "0x9417DC", Offset = "0x9417DC", VA = "0x9417DC")]
		public static bool IsPlayerObject(GameObject obj, ObjectTypes ofType = ObjectTypes.Null)
		{
			return default(bool);
		}

		[Address(RVA = "0x9418B8", Offset = "0x9418B8", VA = "0x9418B8")]
		public VRTK_PlayerObject()
		{
		}
	}
	[AttributeAttribute(Name = "ExecuteInEditMode", RVA = "0x656628", Offset = "0x656628")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x656628", Offset = "0x656628")]
	public class VRTK_RoomExtender_PlayAreaGizmo : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float wireframeHeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool drawWireframeWhenSelectedOnly;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_RoomExtender roomExtender;

		[Address(RVA = "0x94BD34", Offset = "0x94BD34", VA = "0x94BD34", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x94BD98", Offset = "0x94BD98", VA = "0x94BD98", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x94BFD8", Offset = "0x94BFD8", VA = "0x94BFD8", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x94C03C", Offset = "0x94C03C", VA = "0x94C03C", Slot = "7")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Address(RVA = "0x94C054", Offset = "0x94C054", VA = "0x94C054", Slot = "8")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x94C06C", Offset = "0x94C06C", VA = "0x94C06C", Slot = "9")]
		protected virtual void DrawWireframe()
		{
		}

		[Address(RVA = "0x94C960", Offset = "0x94C960", VA = "0x94C960")]
		public VRTK_RoomExtender_PlayAreaGizmo()
		{
		}
	}
	public class VRTK_ScreenFade : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VRTK_ScreenFade instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Material fadeMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Color currentColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Color targetColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Color deltaColor;

		[Address(RVA = "0xA298EC", Offset = "0xA298EC", VA = "0xA298EC")]
		public static void Start(Color newColor, float duration)
		{
		}

		[Address(RVA = "0xA299E8", Offset = "0xA299E8", VA = "0xA299E8", Slot = "4")]
		public virtual void StartFade(Color newColor, float duration)
		{
		}

		[Address(RVA = "0xA29A50", Offset = "0xA29A50", VA = "0xA29A50", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA29AEC", Offset = "0xA29AEC", VA = "0xA29AEC", Slot = "6")]
		protected virtual void OnPostRender()
		{
		}

		[Address(RVA = "0xA29DBC", Offset = "0xA29DBC", VA = "0xA29DBC")]
		public VRTK_ScreenFade()
		{
		}
	}
	public abstract class VRTK_SDKControllerReady : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SDK_BaseController previousControllerSDK;

		[Address(RVA = "0x94CAB0", Offset = "0x94CAB0", VA = "0x94CAB0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x94CC10", Offset = "0x94CC10", VA = "0x94CC10", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x94CD80", Offset = "0x94CD80", VA = "0x94CD80", Slot = "6")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Address(RVA = "0x94D014", Offset = "0x94D014", VA = "0x94D014", Slot = "7")]
		protected virtual void CheckControllersReady()
		{
		}

		[Address(RVA = "0x94D14C", Offset = "0x94D14C", VA = "0x94D14C", Slot = "8")]
		protected virtual void UnregisterPreviousLeftController()
		{
		}

		[Address(RVA = "0x94D25C", Offset = "0x94D25C", VA = "0x94D25C", Slot = "9")]
		protected virtual void UnregisterPreviousRightController()
		{
		}

		[Address(RVA = "0x94D36C", Offset = "0x94D36C", VA = "0x94D36C", Slot = "10")]
		protected virtual void RegisterLeftControllerReady()
		{
		}

		[Address(RVA = "0x94D578", Offset = "0x94D578", VA = "0x94D578", Slot = "11")]
		protected virtual void RegisterRightControllerReady()
		{
		}

		[Address(RVA = "0x94D784", Offset = "0x94D784", VA = "0x94D784", Slot = "12")]
		protected virtual void RightControllerReady(object sender, VRTKSDKBaseControllerEventArgs e)
		{
		}

		[Address(RVA = "0x94D79C", Offset = "0x94D79C", VA = "0x94D79C", Slot = "13")]
		protected virtual void LeftControllerReady(object sender, VRTKSDKBaseControllerEventArgs e)
		{
		}

		[Address(RVA = "0x94D7B4", Offset = "0x94D7B4", VA = "0x94D7B4", Slot = "14")]
		protected virtual void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x94D7B8", Offset = "0x94D7B8", VA = "0x94D7B8")]
		protected VRTK_SDKControllerReady()
		{
		}
	}
	public struct VRTKTrackedControllerEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint currentIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint previousIndex;
	}
	public delegate void VRTKTrackedControllerEventHandler(object sender, VRTKTrackedControllerEventArgs e);
	public class VRTK_TrackedController : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B200", Offset = "0x65B200")]
		private sealed class <EmitControllerEnabledAtEndOfFrame>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TrackedController <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA3D218", Offset = "0xA3D218", VA = "0xA3D218", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA3D288", Offset = "0xA3D288", VA = "0xA3D288", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA3CEDC", Offset = "0xA3CEDC", VA = "0xA3CEDC")]
			[DebuggerHidden]
			public <EmitControllerEnabledAtEndOfFrame>d__39(int <>1__state)
			{
			}

			[Address(RVA = "0xA3D13C", Offset = "0xA3D13C", VA = "0xA3D13C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA3D140", Offset = "0xA3D140", VA = "0xA3D140", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA3D220", Offset = "0xA3D220", VA = "0xA3D220", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B210", Offset = "0x65B210")]
		private sealed class <EmitControllerModelReadyAtEndOfFrame>d__42 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TrackedController <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA3D36C", Offset = "0xA3D36C", VA = "0xA3D36C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA3D3DC", Offset = "0xA3D3DC", VA = "0xA3D3DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA3D0B4", Offset = "0xA3D0B4", VA = "0xA3D0B4")]
			[DebuggerHidden]
			public <EmitControllerModelReadyAtEndOfFrame>d__42(int <>1__state)
			{
			}

			[Address(RVA = "0xA3D290", Offset = "0xA3D290", VA = "0xA3D290", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA3D294", Offset = "0xA3D294", VA = "0xA3D294", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA3D374", Offset = "0xA3D374", VA = "0xA3D374", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint index;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected GameObject aliasController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected SDK_BaseController.ControllerType controllerType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected bool controllerModelWaitSubscribed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Coroutine emitControllerEnabledRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Coroutine emitControllerModelAvailableRoutine;

		protected VRTK_ControllerReference controllerReference
		{
			[Address(RVA = "0xA3C2C0", Offset = "0xA3C2C0", VA = "0xA3C2C0")]
			get
			{
				return null;
			}
		}

		public event VRTKTrackedControllerEventHandler ControllerEnabled
		{
			[Address(RVA = "0xA3BB60", Offset = "0xA3BB60", VA = "0xA3BB60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DE54", Offset = "0x67DE54")]
			add
			{
			}
			[Address(RVA = "0xA3BC4C", Offset = "0xA3BC4C", VA = "0xA3BC4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DE64", Offset = "0x67DE64")]
			remove
			{
			}
		}

		public event VRTKTrackedControllerEventHandler ControllerDisabled
		{
			[Address(RVA = "0xA3BD38", Offset = "0xA3BD38", VA = "0xA3BD38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DE74", Offset = "0x67DE74")]
			add
			{
			}
			[Address(RVA = "0xA3BE24", Offset = "0xA3BE24", VA = "0xA3BE24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DE84", Offset = "0x67DE84")]
			remove
			{
			}
		}

		public event VRTKTrackedControllerEventHandler ControllerIndexChanged
		{
			[Address(RVA = "0xA3BF10", Offset = "0xA3BF10", VA = "0xA3BF10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DE94", Offset = "0x67DE94")]
			add
			{
			}
			[Address(RVA = "0xA3BFFC", Offset = "0xA3BFFC", VA = "0xA3BFFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DEA4", Offset = "0x67DEA4")]
			remove
			{
			}
		}

		public event VRTKTrackedControllerEventHandler ControllerModelAvailable
		{
			[Address(RVA = "0xA3C0E8", Offset = "0xA3C0E8", VA = "0xA3C0E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DEB4", Offset = "0x67DEB4")]
			add
			{
			}
			[Address(RVA = "0xA3C1D4", Offset = "0xA3C1D4", VA = "0xA3C1D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DEC4", Offset = "0x67DEC4")]
			remove
			{
			}
		}

		[Address(RVA = "0xA3C32C", Offset = "0xA3C32C", VA = "0xA3C32C", Slot = "4")]
		public virtual void OnControllerEnabled(VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0xA3C350", Offset = "0xA3C350", VA = "0xA3C350", Slot = "5")]
		public virtual void OnControllerDisabled(VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0xA3C374", Offset = "0xA3C374", VA = "0xA3C374", Slot = "6")]
		public virtual void OnControllerIndexChanged(VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0xA3C398", Offset = "0xA3C398", VA = "0xA3C398", Slot = "7")]
		public virtual void OnControllerModelAvailable(VRTKTrackedControllerEventArgs e)
		{
		}

		[Address(RVA = "0xA3C3BC", Offset = "0xA3C3BC", VA = "0xA3C3BC", Slot = "8")]
		public virtual SDK_BaseController.ControllerType GetControllerType()
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Address(RVA = "0xA3C3C4", Offset = "0xA3C3C4", VA = "0xA3C3C4", Slot = "9")]
		protected virtual VRTKTrackedControllerEventArgs SetEventPayload(uint previousIndex = uint.MaxValue)
		{
			return default(VRTKTrackedControllerEventArgs);
		}

		[Address(RVA = "0xA3C3D0", Offset = "0xA3C3D0", VA = "0xA3C3D0", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA3C438", Offset = "0xA3C438", VA = "0xA3C438", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA3C584", Offset = "0xA3C584", VA = "0xA3C584", Slot = "12")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA3C5F4", Offset = "0xA3C5F4", VA = "0xA3C5F4", Slot = "13")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA3C65C", Offset = "0xA3C65C", VA = "0xA3C65C", Slot = "14")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xA3C700", Offset = "0xA3C700", VA = "0xA3C700", Slot = "15")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA3C924", Offset = "0xA3C924", VA = "0xA3C924", Slot = "16")]
		protected virtual void ManageLeftControllerListener(bool register, VRTKSDKBaseControllerEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0xA3C9F8", Offset = "0xA3C9F8", VA = "0xA3C9F8", Slot = "17")]
		protected virtual void ManageRightControllerListener(bool register, VRTKSDKBaseControllerEventHandler callbackMethod)
		{
		}

		[Address(RVA = "0xA3CACC", Offset = "0xA3CACC", VA = "0xA3CACC", Slot = "18")]
		protected virtual void RegisterHandControllerListener(bool register, SDK_BaseController.ControllerHand givenHand)
		{
		}

		[Address(RVA = "0xA3CBD0", Offset = "0xA3CBD0", VA = "0xA3CBD0", Slot = "19")]
		protected virtual void ManageControllerModelListener(bool register, SDK_BaseController.ControllerHand givenHand)
		{
		}

		[Address(RVA = "0xA3CCB4", Offset = "0xA3CCB4", VA = "0xA3CCB4", Slot = "20")]
		protected virtual void ManageControllerModelListeners(bool register)
		{
		}

		[Address(RVA = "0xA3CD58", Offset = "0xA3CD58", VA = "0xA3CD58", Slot = "21")]
		protected virtual void SetControllerType()
		{
		}

		[Address(RVA = "0xA3CE00", Offset = "0xA3CE00", VA = "0xA3CE00", Slot = "22")]
		protected virtual void StartEmitControllerEnabledAtEndOfFrame()
		{
		}

		[Address(RVA = "0xA3CE68", Offset = "0xA3CE68", VA = "0xA3CE68", Slot = "23")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DED4", Offset = "0x67DED4")]
		protected virtual IEnumerator EmitControllerEnabledAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xA3CF08", Offset = "0xA3CF08", VA = "0xA3CF08", Slot = "24")]
		protected virtual void ControllerModelReady(object sender, VRTKSDKBaseControllerEventArgs e)
		{
		}

		[Address(RVA = "0xA3CF68", Offset = "0xA3CF68", VA = "0xA3CF68", Slot = "25")]
		protected virtual void StartEmitControllerModelReadyAtEndOfFrame()
		{
		}

		[Address(RVA = "0xA3D040", Offset = "0xA3D040", VA = "0xA3D040", Slot = "26")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DF38", Offset = "0x67DF38")]
		protected virtual IEnumerator EmitControllerModelReadyAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xA3D0E0", Offset = "0xA3D0E0", VA = "0xA3D0E0", Slot = "27")]
		protected virtual void CancelCoroutines()
		{
		}

		[Address(RVA = "0xA3D12C", Offset = "0xA3D12C", VA = "0xA3D12C")]
		public VRTK_TrackedController()
		{
		}
	}
	public class VRTK_TrackedHeadset : MonoBehaviour
	{
		[Address(RVA = "0xA3D3E4", Offset = "0xA3D3E4", VA = "0xA3D3E4", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xA3D448", Offset = "0xA3D448", VA = "0xA3D448", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA3D4AC", Offset = "0xA3D4AC", VA = "0xA3D4AC")]
		public VRTK_TrackedHeadset()
		{
		}
	}
	public class VRTK_TunnelEffect : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Material material;

		[Address(RVA = "0xA3E0E8", Offset = "0xA3E0E8", VA = "0xA3E0E8", Slot = "4")]
		public virtual void SetMaterial(Material material)
		{
		}

		[Address(RVA = "0xA3E0F0", Offset = "0xA3E0F0", VA = "0xA3E0F0", Slot = "5")]
		protected virtual void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Address(RVA = "0xA3E174", Offset = "0xA3E174", VA = "0xA3E174")]
		public VRTK_TunnelEffect()
		{
		}
	}
	public class VRTK_UIGraphicRaycaster : GraphicRaycaster
	{
		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B220", Offset = "0x65B220")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<RaycastResult> <>9__7_0;

			[Address(RVA = "0xA4342C", Offset = "0xA4342C", VA = "0xA4342C")]
			public <>c()
			{
			}

			[Address(RVA = "0xA43434", Offset = "0xA43434", VA = "0xA43434")]
			internal int <Raycast>b__7_0(RaycastResult g1, RaycastResult g2)
			{
				return default(int);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Canvas currentCanvas;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector2 lastKnownPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float UI_CONTROL_OFFSET = 1E-05f;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<RaycastResult> s_RaycastResults;

		protected virtual Canvas canvas
		{
			[Address(RVA = "0xA4323C", Offset = "0xA4323C", VA = "0xA4323C", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xA421D4", Offset = "0xA421D4", VA = "0xA421D4", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Address(RVA = "0xA42440", Offset = "0xA42440", VA = "0xA42440", Slot = "22")]
		protected virtual void SetNearestRaycast(ref PointerEventData eventData, ref List<RaycastResult> resultAppendList, ref List<RaycastResult> raycastResults)
		{
		}

		[Address(RVA = "0xA42774", Offset = "0xA42774", VA = "0xA42774", Slot = "23")]
		protected virtual float GetHitDistance(Ray ray, float hitDistance)
		{
			return default(float);
		}

		[Address(RVA = "0xA42B54", Offset = "0xA42B54", VA = "0xA42B54", Slot = "24")]
		protected virtual void Raycast(Canvas canvas, Camera eventCamera, PointerEventData eventData, Ray ray, ref List<RaycastResult> results)
		{
		}

		[Address(RVA = "0xA432EC", Offset = "0xA432EC", VA = "0xA432EC")]
		public VRTK_UIGraphicRaycaster()
		{
		}
	}
	public class VRTK_VRInputModule : PointerInputModule
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<VRTK_UIPointer> pointers;

		[Address(RVA = "0x886708", Offset = "0x886708", VA = "0x886708", Slot = "30")]
		public virtual void Initialise()
		{
		}

		[Address(RVA = "0x886768", Offset = "0x886768", VA = "0x886768", Slot = "25")]
		public override bool IsModuleSupported()
		{
			return default(bool);
		}

		[Address(RVA = "0x886770", Offset = "0x886770", VA = "0x886770", Slot = "17")]
		public override void Process()
		{
		}

		[Address(RVA = "0x88694C", Offset = "0x88694C", VA = "0x88694C", Slot = "31")]
		protected virtual List<RaycastResult> CheckRaycasts(VRTK_UIPointer pointer)
		{
			return null;
		}

		[Address(RVA = "0x886B0C", Offset = "0x886B0C", VA = "0x886B0C", Slot = "32")]
		protected virtual bool CheckTransformTree(Transform target, Transform source)
		{
			return default(bool);
		}

		[Address(RVA = "0x886C20", Offset = "0x886C20", VA = "0x886C20", Slot = "33")]
		protected virtual bool NoValidCollision(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
			return default(bool);
		}

		[Address(RVA = "0x886D78", Offset = "0x886D78", VA = "0x886D78", Slot = "34")]
		protected virtual bool IsHovering(VRTK_UIPointer pointer)
		{
			return default(bool);
		}

		[Address(RVA = "0x886F64", Offset = "0x886F64", VA = "0x886F64", Slot = "35")]
		protected virtual bool ValidElement(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0x887024", Offset = "0x887024", VA = "0x887024", Slot = "36")]
		protected virtual void CheckPointerHoverClick(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Address(RVA = "0x8870C4", Offset = "0x8870C4", VA = "0x8870C4", Slot = "37")]
		protected virtual void Hover(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Address(RVA = "0x88795C", Offset = "0x88795C", VA = "0x88795C", Slot = "38")]
		protected virtual void Click(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Address(RVA = "0x8879F8", Offset = "0x8879F8", VA = "0x8879F8", Slot = "39")]
		protected virtual void ClickOnUp(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Address(RVA = "0x887AD4", Offset = "0x887AD4", VA = "0x887AD4", Slot = "40")]
		protected virtual void ClickOnDown(VRTK_UIPointer pointer, List<RaycastResult> results, bool forceClick = false)
		{
		}

		[Address(RVA = "0x887BD0", Offset = "0x887BD0", VA = "0x887BD0", Slot = "41")]
		protected virtual bool IsEligibleClick(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
			return default(bool);
		}

		[Address(RVA = "0x887E7C", Offset = "0x887E7C", VA = "0x887E7C", Slot = "42")]
		protected virtual bool AttemptClick(VRTK_UIPointer pointer)
		{
			return default(bool);
		}

		[Address(RVA = "0x8881A4", Offset = "0x8881A4", VA = "0x8881A4", Slot = "43")]
		protected virtual void Drag(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Address(RVA = "0x8887F4", Offset = "0x8887F4", VA = "0x8887F4", Slot = "44")]
		protected virtual void Scroll(VRTK_UIPointer pointer, List<RaycastResult> results)
		{
		}

		[Address(RVA = "0x888B44", Offset = "0x888B44", VA = "0x888B44")]
		public VRTK_VRInputModule()
		{
		}
	}
	public abstract class VRTK_BaseObjectControlAction : MonoBehaviour
	{
		public enum AxisListeners
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			XAxisChanged,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			YAxisChanged
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6659D0", Offset = "0x6659D0")]
		public VRTK_ObjectControl objectControlScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665A08", Offset = "0x665A08")]
		public AxisListeners listenOnAxisChange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Collider centerCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 colliderCenter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float colliderRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float colliderHeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform controlledTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VRTK_BodyPhysics internalBodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Vector3 playerHeadPositionBeforeRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Transform headsetTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool validPlayerObject;

		protected abstract void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive);

		[Address(RVA = "0x91D754", Offset = "0x91D754", VA = "0x91D754", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x91D7BC", Offset = "0x91D7BC", VA = "0x91D7BC", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x91D958", Offset = "0x91D958", VA = "0x91D958", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x91DA8C", Offset = "0x91DA8C", VA = "0x91DA8C", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x91DAF4", Offset = "0x91DAF4", VA = "0x91DAF4", Slot = "9")]
		protected virtual void AxisChanged(object sender, ObjectControlEventArgs e)
		{
		}

		[Address(RVA = "0x91DB2C", Offset = "0x91DB2C", VA = "0x91DB2C", Slot = "10")]
		protected virtual void RotateAroundPlayer(GameObject controlledGameObject, float angle)
		{
		}

		[Address(RVA = "0x91DD70", Offset = "0x91DD70", VA = "0x91DD70", Slot = "11")]
		protected virtual void Blink(float blinkSpeed)
		{
		}

		[Address(RVA = "0x91DE54", Offset = "0x91DE54", VA = "0x91DE54", Slot = "12")]
		protected virtual void ReleaseBlink(float blinkSpeed)
		{
		}

		[Address(RVA = "0x91DF00", Offset = "0x91DF00", VA = "0x91DF00", Slot = "13")]
		protected virtual Vector3 GetObjectCenter(Transform checkObject)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x91E47C", Offset = "0x91E47C", VA = "0x91E47C", Slot = "14")]
		protected virtual int GetAxisDirection(float axis)
		{
			return default(int);
		}

		[Address(RVA = "0x91E494", Offset = "0x91E494", VA = "0x91E494", Slot = "15")]
		protected virtual bool CanMove(VRTK_BodyPhysics givenBodyPhysics, Vector3 currentPosition, Vector3 proposedPosition)
		{
			return default(bool);
		}

		[Address(RVA = "0x91E614", Offset = "0x91E614", VA = "0x91E614", Slot = "16")]
		protected virtual void CheckForPlayerBeforeRotation(GameObject controlledGameObject)
		{
		}

		[Address(RVA = "0x91E794", Offset = "0x91E794", VA = "0x91E794", Slot = "17")]
		protected virtual void CheckForPlayerAfterRotation(GameObject controlledGameObject)
		{
		}

		[Address(RVA = "0x91E908", Offset = "0x91E908", VA = "0x91E908")]
		protected VRTK_BaseObjectControlAction()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656674", Offset = "0x656674")]
	public class VRTK_RotateObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665A40", Offset = "0x665A40")]
		public float maximumRotationSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665A78", Offset = "0x665A78")]
		public float rotationMultiplier;

		[Address(RVA = "0x94C99C", Offset = "0x94C99C", VA = "0x94C99C", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Address(RVA = "0x94CA30", Offset = "0x94CA30", VA = "0x94CA30", Slot = "18")]
		protected virtual float Rotate(float axis, bool modifierActive)
		{
			return default(float);
		}

		[Address(RVA = "0x94CA8C", Offset = "0x94CA8C", VA = "0x94CA8C")]
		public VRTK_RotateObjectControlAction()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6566AC", Offset = "0x6566AC")]
	public class VRTK_SlideObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665AB0", Offset = "0x665AB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665AB0", Offset = "0x665AB0")]
		public float maximumSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665B10", Offset = "0x665B10")]
		public float deceleration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665B48", Offset = "0x665B48")]
		public float fallingDeceleration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665B80", Offset = "0x665B80")]
		public float speedMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665BB8", Offset = "0x665BB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665BB8", Offset = "0x665BB8")]
		public VRTK_BodyPhysics bodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float currentSpeed;

		[Address(RVA = "0xA2C5AC", Offset = "0xA2C5AC", VA = "0xA2C5AC", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Address(RVA = "0xA2C63C", Offset = "0xA2C63C", VA = "0xA2C63C", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xA2C64C", Offset = "0xA2C64C", VA = "0xA2C64C", Slot = "18")]
		protected virtual float CalculateSpeed(float inputValue, bool currentlyFalling, bool modifierActive)
		{
			return default(float);
		}

		[Address(RVA = "0xA2C684", Offset = "0xA2C684", VA = "0xA2C684", Slot = "19")]
		protected virtual float Decelerate(float speed, bool currentlyFalling)
		{
			return default(float);
		}

		[Address(RVA = "0xA2C79C", Offset = "0xA2C79C", VA = "0xA2C79C", Slot = "20")]
		protected virtual void Move(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection)
		{
		}

		[Address(RVA = "0xA2CA40", Offset = "0xA2CA40", VA = "0xA2CA40")]
		public VRTK_SlideObjectControlAction()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6566E4", Offset = "0x6566E4")]
	public class VRTK_SnapRotateObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665C18", Offset = "0x665C18")]
		public float anglePerSnap;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665C50", Offset = "0x665C50")]
		public float angleMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665C88", Offset = "0x665C88")]
		public float snapDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665CC0", Offset = "0x665CC0")]
		public float blinkTransitionSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x665CF8", Offset = "0x665CF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665CF8", Offset = "0x665CF8")]
		public float axisThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float snapDelayTimer;

		[Address(RVA = "0xA37524", Offset = "0xA37524", VA = "0xA37524", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Address(RVA = "0xA37604", Offset = "0xA37604", VA = "0xA37604", Slot = "18")]
		protected virtual bool ValidThreshold(float axis)
		{
			return default(bool);
		}

		[Address(RVA = "0xA3763C", Offset = "0xA3763C", VA = "0xA3763C", Slot = "19")]
		protected virtual float Rotate(float axis, bool modifierActive)
		{
			return default(float);
		}

		[Address(RVA = "0xA376B4", Offset = "0xA376B4", VA = "0xA376B4")]
		public VRTK_SnapRotateObjectControlAction()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65671C", Offset = "0x65671C")]
	public class VRTK_WarpObjectControlAction : VRTK_BaseObjectControlAction
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665D4C", Offset = "0x665D4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665D4C", Offset = "0x665D4C")]
		public float warpDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665DAC", Offset = "0x665DAC")]
		public float warpMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665DE4", Offset = "0x665DE4")]
		public float warpDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665E1C", Offset = "0x665E1C")]
		public float floorHeightTolerance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665E54", Offset = "0x665E54")]
		public float blinkTransitionSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665E8C", Offset = "0x665E8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665E8C", Offset = "0x665E8C")]
		public VRTK_BodyPhysics bodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float warpDelayTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Transform headset;

		[Address(RVA = "0x889914", Offset = "0x889914", VA = "0x889914", Slot = "4")]
		protected override void Process(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, float deadzone, bool currentlyFalling, bool modifierActive)
		{
		}

		[Address(RVA = "0x8899D0", Offset = "0x8899D0", VA = "0x8899D0", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x889A50", Offset = "0x889A50", VA = "0x889A50", Slot = "18")]
		protected virtual void Warp(GameObject controlledGameObject, Transform directionDevice, Vector3 axisDirection, float axis, bool modifierActive)
		{
		}

		[Address(RVA = "0x889FF8", Offset = "0x889FF8", VA = "0x889FF8")]
		public VRTK_WarpObjectControlAction()
		{
		}
	}
	public delegate void TeleportEventHandler(object sender, DestinationMarkerEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656754", Offset = "0x656754")]
	public class VRTK_BasicTeleport : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B230", Offset = "0x65B230")]
		private sealed class <InitListenersAtEndOfFrame>d__53 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_BasicTeleport <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x9245A0", Offset = "0x9245A0", VA = "0x9245A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x924610", Offset = "0x924610", VA = "0x924610", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x924190", Offset = "0x924190", VA = "0x924190")]
			[DebuggerHidden]
			public <InitListenersAtEndOfFrame>d__53(int <>1__state)
			{
			}

			[Address(RVA = "0x9244C8", Offset = "0x9244C8", VA = "0x9244C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x9244CC", Offset = "0x9244CC", VA = "0x9244CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x9245A8", Offset = "0x9245A8", VA = "0x9245A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x665EEC", Offset = "0x665EEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665EEC", Offset = "0x665EEC")]
		public Color blinkToColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665F4C", Offset = "0x665F4C")]
		public float blinkTransitionSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665F84", Offset = "0x665F84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x665F84", Offset = "0x665F84")]
		public float distanceBlinkDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x665FDC", Offset = "0x665FDC")]
		public bool headsetPositionCompensation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666014", Offset = "0x666014")]
		public VRTK_PolicyList targetListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66604C", Offset = "0x66604C")]
		public VRTK_NavMeshData navMeshData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666084", Offset = "0x666084")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x666084", Offset = "0x666084")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x666084", Offset = "0x666084")]
		public float navMeshLimitDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool adjustYForTerrain;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool enableTeleport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected float blinkPause;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float fadeInTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected float maxBlinkTransitionSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected float maxBlinkDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Coroutine initaliseListeners;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool useGivenForcedPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Vector3 givenForcedPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Quaternion? givenForcedRotation;

		public event TeleportEventHandler Teleporting
		{
			[Address(RVA = "0x922158", Offset = "0x922158", VA = "0x922158")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DF9C", Offset = "0x67DF9C")]
			add
			{
			}
			[Address(RVA = "0x922244", Offset = "0x922244", VA = "0x922244")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DFAC", Offset = "0x67DFAC")]
			remove
			{
			}
		}

		public event TeleportEventHandler Teleported
		{
			[Address(RVA = "0x922330", Offset = "0x922330", VA = "0x922330")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DFBC", Offset = "0x67DFBC")]
			add
			{
			}
			[Address(RVA = "0x92241C", Offset = "0x92241C", VA = "0x92241C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67DFCC", Offset = "0x67DFCC")]
			remove
			{
			}
		}

		[Address(RVA = "0x922508", Offset = "0x922508", VA = "0x922508", Slot = "4")]
		public virtual void InitDestinationSetListener(GameObject markerMaker, bool register)
		{
		}

		[Address(RVA = "0x9226E4", Offset = "0x9226E4", VA = "0x9226E4", Slot = "5")]
		public virtual void ToggleTeleportEnabled(bool state)
		{
		}

		[Address(RVA = "0x9226F0", Offset = "0x9226F0", VA = "0x9226F0", Slot = "6")]
		public virtual bool ValidLocation(Transform target, Vector3 destinationPosition)
		{
			return default(bool);
		}

		[Address(RVA = "0x9228CC", Offset = "0x9228CC", VA = "0x9228CC", Slot = "7")]
		public virtual void Teleport(DestinationMarkerEventArgs teleportArgs)
		{
		}

		[Address(RVA = "0x922930", Offset = "0x922930", VA = "0x922930", Slot = "8")]
		public virtual void Teleport(Transform target, Vector3 destinationPosition, [Optional] Quaternion? destinationRotation, bool forceDestinationPosition = false)
		{
		}

		[Address(RVA = "0x9229D0", Offset = "0x9229D0", VA = "0x9229D0", Slot = "9")]
		public virtual void ForceTeleport(Vector3 destinationPosition, [Optional] Quaternion? destinationRotation)
		{
		}

		[Address(RVA = "0x922C50", Offset = "0x922C50", VA = "0x922C50", Slot = "10")]
		public virtual void SetActualTeleportDestination(Vector3 actualPosition, Quaternion? actualRotation)
		{
		}

		[Address(RVA = "0x922C74", Offset = "0x922C74", VA = "0x922C74", Slot = "11")]
		public virtual void ResetActualTeleportDestination()
		{
		}

		[Address(RVA = "0x922C7C", Offset = "0x922C7C", VA = "0x922C7C", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x922CE4", Offset = "0x922CE4", VA = "0x922CE4", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x922DF0", Offset = "0x922DF0", VA = "0x922DF0", Slot = "14")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x922EA8", Offset = "0x922EA8", VA = "0x922EA8", Slot = "15")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x922F10", Offset = "0x922F10", VA = "0x922F10", Slot = "16")]
		protected virtual void Blink(float transitionSpeed)
		{
		}

		[Address(RVA = "0x922FD0", Offset = "0x922FD0", VA = "0x922FD0", Slot = "17")]
		protected virtual DestinationMarkerEventArgs BuildTeleportArgs(Transform target, Vector3 destinationPosition, [Optional] Quaternion? destinationRotation, bool forceDestinationPosition = false)
		{
			return default(DestinationMarkerEventArgs);
		}

		[Address(RVA = "0x923188", Offset = "0x923188", VA = "0x923188", Slot = "18")]
		protected virtual bool ValidRigObjects()
		{
			return default(bool);
		}

		[Address(RVA = "0x923464", Offset = "0x923464", VA = "0x923464", Slot = "19")]
		protected virtual void DoTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x92376C", Offset = "0x92376C", VA = "0x92376C", Slot = "20")]
		protected virtual void StartTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x9237E4", Offset = "0x9237E4", VA = "0x9237E4", Slot = "21")]
		protected virtual void ProcessOrientation(object sender, DestinationMarkerEventArgs e, Vector3 targetPosition, Quaternion targetRotation)
		{
		}

		[Address(RVA = "0x9237E8", Offset = "0x9237E8", VA = "0x9237E8", Slot = "22")]
		protected virtual void EndTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x923860", Offset = "0x923860", VA = "0x923860", Slot = "23")]
		protected virtual Vector3 SetNewPosition(Vector3 position, Transform target, bool forceDestinationPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x923994", Offset = "0x923994", VA = "0x923994", Slot = "24")]
		protected virtual Quaternion SetNewRotation(Quaternion? rotation)
		{
			return default(Quaternion);
		}

		[Address(RVA = "0x923AC4", Offset = "0x923AC4", VA = "0x923AC4", Slot = "25")]
		protected virtual Vector3 GetNewPosition(Vector3 tipPosition, Transform target, bool returnOriginalPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x923B60", Offset = "0x923B60", VA = "0x923B60", Slot = "26")]
		protected virtual Vector3 GetCompensatedPosition(Vector3 givenPosition, Vector3 defaultPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x923C94", Offset = "0x923C94", VA = "0x923C94", Slot = "27")]
		protected virtual Vector3 CheckTerrainCollision(Vector3 position, Transform target, bool useHeadsetForPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x923E5C", Offset = "0x923E5C", VA = "0x923E5C", Slot = "28")]
		protected virtual void OnTeleporting(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x923EB0", Offset = "0x923EB0", VA = "0x923EB0", Slot = "29")]
		protected virtual void OnTeleported(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x923F04", Offset = "0x923F04", VA = "0x923F04", Slot = "30")]
		protected virtual void CalculateBlinkDelay(float blinkSpeed, Vector3 newPosition)
		{
		}

		[Address(RVA = "0x924064", Offset = "0x924064", VA = "0x924064", Slot = "31")]
		protected virtual void ReleaseBlink()
		{
		}

		[Address(RVA = "0x92411C", Offset = "0x92411C", VA = "0x92411C", Slot = "32")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67DFDC", Offset = "0x67DFDC")]
		protected virtual IEnumerator InitListenersAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0x9241BC", Offset = "0x9241BC", VA = "0x9241BC", Slot = "33")]
		protected virtual void InitDestinationMarkerListeners(bool state)
		{
		}

		[Address(RVA = "0x92441C", Offset = "0x92441C", VA = "0x92441C")]
		public VRTK_BasicTeleport()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65678C", Offset = "0x65678C")]
	public class VRTK_ButtonControl : VRTK_ObjectControl
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666114", Offset = "0x666114")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666114", Offset = "0x666114")]
		public VRTK_ControllerEvents.ButtonAlias forwardButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666174", Offset = "0x666174")]
		public VRTK_ControllerEvents.ButtonAlias backwardButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6661AC", Offset = "0x6661AC")]
		public VRTK_ControllerEvents.ButtonAlias leftButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6661E4", Offset = "0x6661E4")]
		public VRTK_ControllerEvents.ButtonAlias rightButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool forwardPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		protected bool backwardPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		protected bool leftPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		protected bool rightPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedForwardButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedBackwardButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedLeftButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedRightButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected Vector2 axisDeadzone;

		[Address(RVA = "0x93266C", Offset = "0x93266C", VA = "0x93266C", Slot = "14")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9326EC", Offset = "0x9326EC", VA = "0x9326EC", Slot = "6")]
		protected override void ControlFixedUpdate()
		{
		}

		[Address(RVA = "0x932880", Offset = "0x932880", VA = "0x932880", Slot = "7")]
		protected override VRTK_ObjectControl GetOtherControl()
		{
			return null;
		}

		[Address(RVA = "0x9329B0", Offset = "0x9329B0", VA = "0x9329B0", Slot = "9")]
		protected override void SetListeners(bool state)
		{
		}

		[Address(RVA = "0x932C50", Offset = "0x932C50", VA = "0x932C50", Slot = "8")]
		protected override bool IsInAction()
		{
			return default(bool);
		}

		[Address(RVA = "0x932C80", Offset = "0x932C80", VA = "0x932C80", Slot = "22")]
		protected virtual void SetDirectionListener(bool state, VRTK_ControllerEvents.ButtonAlias directionButton, ref VRTK_ControllerEvents.ButtonAlias subscribedDirectionButton, ControllerInteractionEventHandler pressCallback, ControllerInteractionEventHandler releaseCallback)
		{
		}

		[Address(RVA = "0x932E28", Offset = "0x932E28", VA = "0x932E28", Slot = "23")]
		protected virtual void ForwardButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E34", Offset = "0x932E34", VA = "0x932E34", Slot = "24")]
		protected virtual void ForwardButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E3C", Offset = "0x932E3C", VA = "0x932E3C", Slot = "25")]
		protected virtual void BackwardButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E48", Offset = "0x932E48", VA = "0x932E48", Slot = "26")]
		protected virtual void BackwardButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E50", Offset = "0x932E50", VA = "0x932E50", Slot = "27")]
		protected virtual void LeftButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E5C", Offset = "0x932E5C", VA = "0x932E5C", Slot = "28")]
		protected virtual void LeftButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E64", Offset = "0x932E64", VA = "0x932E64", Slot = "29")]
		protected virtual void RightButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E70", Offset = "0x932E70", VA = "0x932E70", Slot = "30")]
		protected virtual void RightButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x932E78", Offset = "0x932E78", VA = "0x932E78")]
		public VRTK_ButtonControl()
		{
		}
	}
	public struct DashTeleportEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RaycastHit[] hits;
	}
	public delegate void DashTeleportEventHandler(object sender, DashTeleportEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6567C4", Offset = "0x6567C4")]
	public class VRTK_DashTeleport : VRTK_HeightAdjustTeleport
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B240", Offset = "0x65B240")]
		private sealed class <lerpToPosition>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_DashTeleport <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public DestinationMarkerEventArgs e;

			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Vector3 startPosition;

			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			public Quaternion startRotation;

			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			public Quaternion targetRotation;

			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public object sender;

			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private bool <gameObjectInTheWay>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private RaycastHit[] <allHits>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private float <elapsedTime>5__4;

			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private float <currentLerpedTime>5__5;

			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private WaitForEndOfFrame <delayInstruction>5__6;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA73E7C", Offset = "0xA73E7C", VA = "0xA73E7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA73EEC", Offset = "0xA73EEC", VA = "0xA73EEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA73624", Offset = "0xA73624", VA = "0xA73624")]
			[DebuggerHidden]
			public <lerpToPosition>d__24(int <>1__state)
			{
			}

			[Address(RVA = "0xA736D0", Offset = "0xA736D0", VA = "0xA736D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA736D4", Offset = "0xA736D4", VA = "0xA736D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA73E84", Offset = "0xA73E84", VA = "0xA73E84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66621C", Offset = "0x66621C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66621C", Offset = "0x66621C")]
		public float normalLerpTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66627C", Offset = "0x66627C")]
		public float minSpeedMps;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6662B4", Offset = "0x6662B4")]
		public float capsuleTopOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6662EC", Offset = "0x6662EC")]
		public float capsuleBottomOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666324", Offset = "0x666324")]
		public float capsuleRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected float minDistanceForNormalLerp;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected float lerpTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Coroutine attemptLerpRoutine;

		public event DashTeleportEventHandler WillDashThruObjects
		{
			[Address(RVA = "0xA72AEC", Offset = "0xA72AEC", VA = "0xA72AEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F040", Offset = "0x67F040")]
			add
			{
			}
			[Address(RVA = "0xA72BD8", Offset = "0xA72BD8", VA = "0xA72BD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F050", Offset = "0x67F050")]
			remove
			{
			}
		}

		public event DashTeleportEventHandler DashedThruObjects
		{
			[Address(RVA = "0xA72CC4", Offset = "0xA72CC4", VA = "0xA72CC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F060", Offset = "0x67F060")]
			add
			{
			}
			[Address(RVA = "0xA72DB0", Offset = "0xA72DB0", VA = "0xA72DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F070", Offset = "0x67F070")]
			remove
			{
			}
		}

		[Address(RVA = "0xA72E9C", Offset = "0xA72E9C", VA = "0xA72E9C", Slot = "37")]
		public virtual void OnWillDashThruObjects(DashTeleportEventArgs e)
		{
		}

		[Address(RVA = "0xA72EC0", Offset = "0xA72EC0", VA = "0xA72EC0", Slot = "38")]
		public virtual void OnDashedThruObjects(DashTeleportEventArgs e)
		{
		}

		[Address(RVA = "0xA72EE4", Offset = "0xA72EE4", VA = "0xA72EE4", Slot = "13")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xA72F14", Offset = "0xA72F14", VA = "0xA72F14", Slot = "14")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0xA72F50", Offset = "0xA72F50", VA = "0xA72F50", Slot = "23")]
		protected override Vector3 SetNewPosition(Vector3 position, Transform target, bool forceDestinationPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA72F64", Offset = "0xA72F64", VA = "0xA72F64", Slot = "24")]
		protected override Quaternion SetNewRotation(Quaternion? rotation)
		{
			return default(Quaternion);
		}

		[Address(RVA = "0xA7304C", Offset = "0xA7304C", VA = "0xA7304C", Slot = "20")]
		protected override void StartTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA7309C", Offset = "0xA7309C", VA = "0xA7309C", Slot = "21")]
		protected override void ProcessOrientation(object sender, DestinationMarkerEventArgs e, Vector3 targetPosition, Quaternion targetRotation)
		{
		}

		[Address(RVA = "0xA73224", Offset = "0xA73224", VA = "0xA73224", Slot = "39")]
		protected virtual Vector3 CalculateOffsetPosition(Vector3 targetPosition, Quaternion targetRotation)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA73474", Offset = "0xA73474", VA = "0xA73474", Slot = "22")]
		protected override void EndTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA73478", Offset = "0xA73478", VA = "0xA73478", Slot = "40")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67F080", Offset = "0x67F080")]
		protected virtual IEnumerator lerpToPosition(object sender, DestinationMarkerEventArgs e, Vector3 startPosition, Vector3 targetPosition, Quaternion startRotation, Quaternion targetRotation)
		{
			return null;
		}

		[Address(RVA = "0xA73650", Offset = "0xA73650", VA = "0xA73650", Slot = "41")]
		protected virtual DashTeleportEventArgs SetDashTeleportEvent(RaycastHit[] hits)
		{
			return default(DashTeleportEventArgs);
		}

		[Address(RVA = "0xA73658", Offset = "0xA73658", VA = "0xA73658")]
		public VRTK_DashTeleport()
		{
		}

		[Address(RVA = "0xA73680", Offset = "0xA73680", VA = "0xA73680")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F0E4", Offset = "0x67F0E4")]
		[DebuggerHidden]
		private void <>n__0(object sender, DestinationMarkerEventArgs e)
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6567FC", Offset = "0x6567FC")]
	public class VRTK_DragWorld : MonoBehaviour
	{
		public enum ActivationRequirement
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftControllerOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightControllerOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			EitherController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			BothControllers
		}

		public enum TrackingController
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			EitherController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			BothControllers
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66637C", Offset = "0x66637C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66637C", Offset = "0x66637C")]
		public VRTK_ControllerEvents.ButtonAlias movementActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6663DC", Offset = "0x6663DC")]
		public ActivationRequirement movementActivationRequirement;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666414", Offset = "0x666414")]
		public TrackingController movementTrackingController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66644C", Offset = "0x66644C")]
		public float movementMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666484", Offset = "0x666484")]
		public Vector3State movementPositionLock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6664BC", Offset = "0x6664BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6664BC", Offset = "0x6664BC")]
		public VRTK_ControllerEvents.ButtonAlias rotationActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66651C", Offset = "0x66651C")]
		public ActivationRequirement rotationActivationRequirement;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666554", Offset = "0x666554")]
		public TrackingController rotationTrackingController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66658C", Offset = "0x66658C")]
		public float rotationMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6665C4", Offset = "0x6665C4")]
		public float rotationActivationThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6665FC", Offset = "0x6665FC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6665FC", Offset = "0x6665FC")]
		public VRTK_ControllerEvents.ButtonAlias scaleActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66665C", Offset = "0x66665C")]
		public ActivationRequirement scaleActivationRequirement;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666694", Offset = "0x666694")]
		public TrackingController scaleTrackingController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6666CC", Offset = "0x6666CC")]
		public float scaleMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666704", Offset = "0x666704")]
		public float scaleActivationThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66673C", Offset = "0x66673C")]
		public Vector3 minimumScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666774", Offset = "0x666774")]
		public Vector3 maximumScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6667AC", Offset = "0x6667AC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6667AC", Offset = "0x6667AC")]
		public Transform controllingTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66680C", Offset = "0x66680C")]
		public bool useOffsetTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666844", Offset = "0x666844")]
		public Transform offsetTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected VRTK_ControllerReference leftControllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected VRTK_ControllerReference rightControllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected VRTK_ControllerEvents leftControllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VRTK_ControllerEvents rightControllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedMovementActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected Vector3 previousLeftControllerPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Vector3 previousRightControllerPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected bool movementLeftControllerActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		protected bool movementRightControllerActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		protected bool movementActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedRotationActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected Vector2 previousRotationAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected bool rotationLeftControllerActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		protected bool rotationRightControllerActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE6")]
		protected bool rotationActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedScaleActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected float previousControllerDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool scaleLeftControllerActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool scaleRightControllerActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool scaleActivated;

		[Address(RVA = "0xA7D698", Offset = "0xA7D698", VA = "0xA7D698", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA7D700", Offset = "0xA7D700", VA = "0xA7D700", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA7D89C", Offset = "0xA7D89C", VA = "0xA7D89C", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA7D8AC", Offset = "0xA7D8AC", VA = "0xA7D8AC", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA7D914", Offset = "0xA7D914", VA = "0xA7D914", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xA7D978", Offset = "0xA7D978", VA = "0xA7D978", Slot = "9")]
		protected virtual VRTK_ControllerEvents GetControllerEvents(GameObject controllerObject)
		{
			return null;
		}

		[Address(RVA = "0xA7DA14", Offset = "0xA7DA14", VA = "0xA7DA14", Slot = "10")]
		protected virtual void ManageActivationListeners(bool state)
		{
		}

		[Address(RVA = "0xA7DC20", Offset = "0xA7DC20", VA = "0xA7DC20", Slot = "11")]
		protected virtual void ManageActivationListener(bool state, ref VRTK_ControllerEvents.ButtonAlias activationButton, ref VRTK_ControllerEvents.ButtonAlias subscribedActivationButton, ControllerInteractionEventHandler buttonPressedCallback, ControllerInteractionEventHandler buttonReleasedCallback)
		{
		}

		[Address(RVA = "0xA7E074", Offset = "0xA7E074", VA = "0xA7E074", Slot = "12")]
		protected virtual void ControllerModelAvailable(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA7E080", Offset = "0xA7E080", VA = "0xA7E080", Slot = "13")]
		protected virtual void SetControllerReferences()
		{
		}

		[Address(RVA = "0xA7E0F0", Offset = "0xA7E0F0", VA = "0xA7E0F0", Slot = "14")]
		protected virtual void ManageActivationState(SDK_BaseController.ControllerHand hand, ActivationRequirement activationRequirement, bool pressedState, ref bool leftActivationState, ref bool rightActivationState, ref bool activated)
		{
		}

		[Address(RVA = "0xA7E17C", Offset = "0xA7E17C", VA = "0xA7E17C", Slot = "15")]
		protected virtual void MovementActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA7E1EC", Offset = "0xA7E1EC", VA = "0xA7E1EC", Slot = "16")]
		protected virtual void MovementActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA7E248", Offset = "0xA7E248", VA = "0xA7E248", Slot = "17")]
		protected virtual void RotationActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA7E2C0", Offset = "0xA7E2C0", VA = "0xA7E2C0", Slot = "18")]
		protected virtual void RotationActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA7E31C", Offset = "0xA7E31C", VA = "0xA7E31C", Slot = "19")]
		protected virtual void ScaleActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA7E394", Offset = "0xA7E394", VA = "0xA7E394", Slot = "20")]
		protected virtual void ScaleActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA7E3F0", Offset = "0xA7E3F0", VA = "0xA7E3F0", Slot = "21")]
		protected virtual Vector3 GetLeftControllerPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA7E4DC", Offset = "0xA7E4DC", VA = "0xA7E4DC", Slot = "22")]
		protected virtual Vector3 GetRightControllerPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA7E5C8", Offset = "0xA7E5C8", VA = "0xA7E5C8", Slot = "23")]
		protected virtual void SetControllerPositions()
		{
		}

		[Address(RVA = "0xA7E618", Offset = "0xA7E618", VA = "0xA7E618", Slot = "24")]
		protected virtual Vector2 GetControllerRotation()
		{
			return default(Vector2);
		}

		[Address(RVA = "0xA7E76C", Offset = "0xA7E76C", VA = "0xA7E76C", Slot = "25")]
		protected virtual float GetControllerDistance()
		{
			return default(float);
		}

		[Address(RVA = "0xA7E9BC", Offset = "0xA7E9BC", VA = "0xA7E9BC", Slot = "26")]
		protected virtual bool TrackingControllerEnabled(TrackingController trackingController, TrackingController hand, bool handActivated)
		{
			return default(bool);
		}

		[Address(RVA = "0xA7E9E0", Offset = "0xA7E9E0", VA = "0xA7E9E0", Slot = "27")]
		protected virtual void Move()
		{
		}

		[Address(RVA = "0xA7EE54", Offset = "0xA7EE54", VA = "0xA7EE54", Slot = "28")]
		protected virtual void Rotate()
		{
		}

		[Address(RVA = "0xA7F138", Offset = "0xA7F138", VA = "0xA7F138", Slot = "29")]
		protected virtual void RotateByAngle(float angle)
		{
		}

		[Address(RVA = "0xA7F314", Offset = "0xA7F314", VA = "0xA7F314", Slot = "30")]
		protected virtual void Scale()
		{
		}

		[Address(RVA = "0xA7F5DC", Offset = "0xA7F5DC", VA = "0xA7F5DC")]
		public VRTK_DragWorld()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656834", Offset = "0x656834")]
	public class VRTK_HeightAdjustTeleport : VRTK_BasicTeleport
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66687C", Offset = "0x66687C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66687C", Offset = "0x66687C")]
		public bool snapToNearestFloor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6668DC", Offset = "0x6668DC")]
		public bool applyPlayareaParentOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666914", Offset = "0x666914")]
		public VRTK_CustomRaycast customRaycast;

		[Address(RVA = "0xE9DBEC", Offset = "0xE9DBEC", VA = "0xE9DBEC", Slot = "13")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xE9DC28", Offset = "0xE9DC28", VA = "0xE9DC28", Slot = "14")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0xE9DC30", Offset = "0xE9DC30", VA = "0xE9DC30", Slot = "25")]
		protected override Vector3 GetNewPosition(Vector3 tipPosition, Transform target, bool returnOriginalPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xE9DCC8", Offset = "0xE9DCC8", VA = "0xE9DCC8", Slot = "34")]
		protected virtual void AdjustForParentOffset()
		{
		}

		[Address(RVA = "0xE9DFA4", Offset = "0xE9DFA4", VA = "0xE9DFA4", Slot = "35")]
		protected virtual float GetParentOffset()
		{
			return default(float);
		}

		[Address(RVA = "0xE9E0A4", Offset = "0xE9E0A4", VA = "0xE9E0A4", Slot = "36")]
		protected virtual float GetTeleportY(Transform target, Vector3 tipPosition)
		{
			return default(float);
		}

		[Address(RVA = "0xE9E2F8", Offset = "0xE9E2F8", VA = "0xE9E2F8")]
		public VRTK_HeightAdjustTeleport()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65686C", Offset = "0x65686C")]
	public class VRTK_MoveInPlace : MonoBehaviour
	{
		public enum ControlOptions
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HeadsetAndControllers,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ControllersOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HeadsetOnly
		}

		public enum DirectionalMethod
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Gaze,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ControllerRotation,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			DumbDecoupling,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SmartDecoupling,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			EngageControllerRotationOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftControllerRotationOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightControllerRotationOnly
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66694C", Offset = "0x66694C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66694C", Offset = "0x66694C")]
		public bool leftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6669AC", Offset = "0x6669AC")]
		public bool rightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6669E4", Offset = "0x6669E4")]
		public VRTK_ControllerEvents.ButtonAlias engageButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666A1C", Offset = "0x666A1C")]
		public ControlOptions controlOptions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666A54", Offset = "0x666A54")]
		public DirectionalMethod directionMethod;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666A8C", Offset = "0x666A8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666A8C", Offset = "0x666A8C")]
		public float speedScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666AEC", Offset = "0x666AEC")]
		public float maxSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666B24", Offset = "0x666B24")]
		public float deceleration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666B5C", Offset = "0x666B5C")]
		public float fallingDeceleration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666B94", Offset = "0x666B94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666B94", Offset = "0x666B94")]
		public float smartDecoupleThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666BF4", Offset = "0x666BF4")]
		public float sensitivity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666C2C", Offset = "0x666C2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666C2C", Offset = "0x666C2C")]
		public VRTK_BodyPhysics bodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected GameObject controllerLeftHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject controllerRightHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected VRTK_ControllerReference engagedController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool leftSubscribed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool rightSubscribed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		protected bool previousLeftControllerState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		protected bool previousRightControllerState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected VRTK_ControllerEvents.ButtonAlias previousEngageButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected bool currentlyFalling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected int averagePeriod;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected List<Transform> trackedObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Dictionary<Transform, List<float>> movementList;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Dictionary<Transform, float> previousYPositions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 initialGaze;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float currentSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Vector3 currentDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected Vector3 previousDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected bool movementEngaged;

		[Address(RVA = "0xB36E6C", Offset = "0xB36E6C", VA = "0xB36E6C", Slot = "4")]
		public virtual void SetControlOptions(ControlOptions givenControlOptions)
		{
		}

		[Address(RVA = "0xB3708C", Offset = "0xB3708C", VA = "0xB3708C", Slot = "5")]
		public virtual Vector3 GetMovementDirection()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xB37098", Offset = "0xB37098", VA = "0xB37098", Slot = "6")]
		public virtual float GetSpeed()
		{
			return default(float);
		}

		[Address(RVA = "0xB370A0", Offset = "0xB370A0", VA = "0xB370A0", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB37108", Offset = "0xB37108", VA = "0xB37108", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB37460", Offset = "0xB37460", VA = "0xB37460", Slot = "9")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB374CC", Offset = "0xB374CC", VA = "0xB374CC", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xB37534", Offset = "0xB37534", VA = "0xB37534", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB3759C", Offset = "0xB3759C", VA = "0xB3759C", Slot = "12")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xB37798", Offset = "0xB37798", VA = "0xB37798", Slot = "13")]
		protected virtual bool MovementActivated()
		{
			return default(bool);
		}

		[Address(RVA = "0xB377B8", Offset = "0xB377B8", VA = "0xB377B8", Slot = "14")]
		protected virtual void CheckControllerState(GameObject controller, bool controllerState, ref bool subscribedState, ref bool previousState)
		{
		}

		[Address(RVA = "0xB37810", Offset = "0xB37810", VA = "0xB37810", Slot = "15")]
		protected virtual float CalculateListAverage()
		{
			return default(float);
		}

		[Address(RVA = "0xB37A98", Offset = "0xB37A98", VA = "0xB37A98", Slot = "16")]
		protected virtual Vector3 HeadsetPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xB37BB4", Offset = "0xB37BB4", VA = "0xB37BB4", Slot = "17")]
		protected virtual Vector3 SetDirection()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xB37E60", Offset = "0xB37E60", VA = "0xB37E60", Slot = "18")]
		protected virtual Vector3 CalculateCouplingDirection()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xB380E4", Offset = "0xB380E4", VA = "0xB380E4", Slot = "19")]
		protected virtual Vector3 CalculateControllerRotationDirection(Vector3 calculatedControllerDirection)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xB381B4", Offset = "0xB381B4", VA = "0xB381B4", Slot = "20")]
		protected virtual void SetDeltaTransformData()
		{
		}

		[Address(RVA = "0xB382C0", Offset = "0xB382C0", VA = "0xB382C0", Slot = "21")]
		protected virtual void MovePlayArea(Vector3 moveDirection, float moveSpeed)
		{
		}

		[Address(RVA = "0xB384C0", Offset = "0xB384C0", VA = "0xB384C0", Slot = "22")]
		protected virtual bool CanMove(VRTK_BodyPhysics givenBodyPhysics, Vector3 currentPosition, Vector3 proposedPosition)
		{
			return default(bool);
		}

		[Address(RVA = "0xB38640", Offset = "0xB38640", VA = "0xB38640", Slot = "23")]
		protected virtual void HandleFalling()
		{
		}

		[Address(RVA = "0xB38758", Offset = "0xB38758", VA = "0xB38758", Slot = "24")]
		protected virtual void EngageButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xB3876C", Offset = "0xB3876C", VA = "0xB3876C", Slot = "25")]
		protected virtual void EngageButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xB388D4", Offset = "0xB388D4", VA = "0xB388D4", Slot = "26")]
		protected virtual Quaternion DetermineAverageControllerRotation()
		{
			return default(Quaternion);
		}

		[Address(RVA = "0xB38B8C", Offset = "0xB38B8C", VA = "0xB38B8C", Slot = "27")]
		protected virtual Quaternion AverageRotation(Quaternion rot1, Quaternion rot2)
		{
			return default(Quaternion);
		}

		[Address(RVA = "0xB38C60", Offset = "0xB38C60", VA = "0xB38C60", Slot = "28")]
		protected virtual void SetControllerListeners(GameObject controller, bool controllerState, ref bool subscribedState, bool forceDisabled = false)
		{
		}

		[Address(RVA = "0xB38D28", Offset = "0xB38D28", VA = "0xB38D28", Slot = "29")]
		protected virtual void ToggleControllerListeners(GameObject controller, bool toggle, ref bool subscribed)
		{
		}

		[Address(RVA = "0xB39020", Offset = "0xB39020", VA = "0xB39020")]
		public VRTK_MoveInPlace()
		{
		}
	}
	public struct ObjectControlEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject controlledGameObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform directionDevice;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 axisDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float axis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float deadzone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool currentlyFalling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool modifierActive;
	}
	public delegate void ObjectControlEventHandler(object sender, ObjectControlEventArgs e);
	public abstract class VRTK_ObjectControl : MonoBehaviour
	{
		public enum DirectionDevices
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Headset,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ControlledObject
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666C8C", Offset = "0x666C8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666C8C", Offset = "0x666C8C")]
		public DirectionDevices deviceForDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666CEC", Offset = "0x666CEC")]
		public bool disableOtherControlsOnActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666D24", Offset = "0x666D24")]
		public bool affectOnFalling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666D5C", Offset = "0x666D5C")]
		public GameObject controlOverrideObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666D94", Offset = "0x666D94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666D94", Offset = "0x666D94")]
		public VRTK_ControllerEvents controller;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666DF4", Offset = "0x666DF4")]
		public VRTK_BodyPhysics bodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_ObjectControl otherObjectControl;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject controlledGameObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject setControlOverrideObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform directionDevice;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected DirectionDevices previousDeviceForDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector2 currentAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected Vector2 storedAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected bool currentlyFalling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		protected bool modifierActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float controlledGameObjectPreviousY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected float controlledGameObjectPreviousYOffset;

		public event ObjectControlEventHandler XAxisChanged
		{
			[Address(RVA = "0xB3BE68", Offset = "0xB3BE68", VA = "0xB3BE68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F11C", Offset = "0x67F11C")]
			add
			{
			}
			[Address(RVA = "0xB3BF54", Offset = "0xB3BF54", VA = "0xB3BF54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F12C", Offset = "0x67F12C")]
			remove
			{
			}
		}

		public event ObjectControlEventHandler YAxisChanged
		{
			[Address(RVA = "0xB3C040", Offset = "0xB3C040", VA = "0xB3C040")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F13C", Offset = "0x67F13C")]
			add
			{
			}
			[Address(RVA = "0xB3C12C", Offset = "0xB3C12C", VA = "0xB3C12C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F14C", Offset = "0x67F14C")]
			remove
			{
			}
		}

		[Address(RVA = "0xB3C218", Offset = "0xB3C218", VA = "0xB3C218", Slot = "4")]
		public virtual void OnXAxisChanged(ObjectControlEventArgs e)
		{
		}

		[Address(RVA = "0xB3C264", Offset = "0xB3C264", VA = "0xB3C264", Slot = "5")]
		public virtual void OnYAxisChanged(ObjectControlEventArgs e)
		{
		}

		protected abstract void ControlFixedUpdate();

		protected abstract VRTK_ObjectControl GetOtherControl();

		protected abstract bool IsInAction();

		protected abstract void SetListeners(bool state);

		[Address(RVA = "0xB3C2B0", Offset = "0xB3C2B0", VA = "0xB3C2B0", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB3C318", Offset = "0xB3C318", VA = "0xB3C318", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB3C6CC", Offset = "0xB3C6CC", VA = "0xB3C6CC", Slot = "12")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB3C6DC", Offset = "0xB3C6DC", VA = "0xB3C6DC", Slot = "13")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xB3C744", Offset = "0xB3C744", VA = "0xB3C744", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB3C7E8", Offset = "0xB3C7E8", VA = "0xB3C7E8", Slot = "15")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xB3C834", Offset = "0xB3C834", VA = "0xB3C834", Slot = "16")]
		protected virtual ObjectControlEventArgs SetEventArguements(Vector3 axisDirection, float axis, float axisDeadzone)
		{
			return default(ObjectControlEventArgs);
		}

		[Address(RVA = "0xB3C85C", Offset = "0xB3C85C", VA = "0xB3C85C", Slot = "17")]
		protected virtual void SetControlledObject()
		{
		}

		[Address(RVA = "0xB3C9C8", Offset = "0xB3C9C8", VA = "0xB3C9C8", Slot = "18")]
		protected virtual void CheckFalling()
		{
		}

		[Address(RVA = "0xB3CC00", Offset = "0xB3CC00", VA = "0xB3CC00", Slot = "19")]
		protected virtual bool ObjectHeightChange()
		{
			return default(bool);
		}

		[Address(RVA = "0xB3CCAC", Offset = "0xB3CCAC", VA = "0xB3CCAC", Slot = "20")]
		protected virtual Transform GetDirectionDevice()
		{
			return null;
		}

		[Address(RVA = "0xB3CDCC", Offset = "0xB3CDCC", VA = "0xB3CDCC", Slot = "21")]
		protected virtual void CheckDirectionDevice()
		{
		}

		[Address(RVA = "0xB3CE18", Offset = "0xB3CE18", VA = "0xB3CE18")]
		protected VRTK_ObjectControl()
		{
		}
	}
	public struct PlayerClimbEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject target;
	}
	public delegate void PlayerClimbEventHandler(object sender, PlayerClimbEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6568A4", Offset = "0x6568A4")]
	public class VRTK_PlayerClimb : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666E4C", Offset = "0x666E4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666E4C", Offset = "0x666E4C")]
		public bool usePlayerScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x666EAC", Offset = "0x666EAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666EAC", Offset = "0x666EAC")]
		public VRTK_BodyPhysics bodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666F0C", Offset = "0x666F0C")]
		public VRTK_BasicTeleport teleporter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666F44", Offset = "0x666F44")]
		public VRTK_HeadsetCollision headsetCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666F7C", Offset = "0x666F7C")]
		public VRTK_PositionRewind positionRewind;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 startControllerScaledLocalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected Vector3 startGrabPointLocalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Vector3 startPlayAreaWorldOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected GameObject grabbingController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected GameObject climbingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Quaternion climbingObjectLastRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool isClimbing;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		protected bool useGrabbedObjectRotation;

		public event PlayerClimbEventHandler PlayerClimbStarted
		{
			[Address(RVA = "0xB46E50", Offset = "0xB46E50", VA = "0xB46E50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F15C", Offset = "0x67F15C")]
			add
			{
			}
			[Address(RVA = "0xB46F3C", Offset = "0xB46F3C", VA = "0xB46F3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F16C", Offset = "0x67F16C")]
			remove
			{
			}
		}

		public event PlayerClimbEventHandler PlayerClimbEnded
		{
			[Address(RVA = "0xB47028", Offset = "0xB47028", VA = "0xB47028")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F17C", Offset = "0x67F17C")]
			add
			{
			}
			[Address(RVA = "0xB47114", Offset = "0xB47114", VA = "0xB47114")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F18C", Offset = "0x67F18C")]
			remove
			{
			}
		}

		[Address(RVA = "0xB47200", Offset = "0xB47200", VA = "0xB47200", Slot = "4")]
		public virtual bool IsClimbing()
		{
			return default(bool);
		}

		[Address(RVA = "0xB47208", Offset = "0xB47208", VA = "0xB47208", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB47538", Offset = "0xB47538", VA = "0xB47538", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB475B4", Offset = "0xB475B4", VA = "0xB475B4", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB475FC", Offset = "0xB475FC", VA = "0xB475FC", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xB47664", Offset = "0xB47664", VA = "0xB47664", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB47A84", Offset = "0xB47A84", VA = "0xB47A84", Slot = "10")]
		protected virtual void OnPlayerClimbStarted(PlayerClimbEventArgs e)
		{
		}

		[Address(RVA = "0xB47AB0", Offset = "0xB47AB0", VA = "0xB47AB0", Slot = "11")]
		protected virtual void OnPlayerClimbEnded(PlayerClimbEventArgs e)
		{
		}

		[Address(RVA = "0xB47ADC", Offset = "0xB47ADC", VA = "0xB47ADC", Slot = "12")]
		protected virtual PlayerClimbEventArgs SetPlayerClimbEvent(VRTK_ControllerReference controllerReference, GameObject target)
		{
			return default(PlayerClimbEventArgs);
		}

		[Address(RVA = "0xB47AE8", Offset = "0xB47AE8", VA = "0xB47AE8", Slot = "13")]
		protected virtual void InitListeners(bool state)
		{
		}

		[Address(RVA = "0xB47BBC", Offset = "0xB47BBC", VA = "0xB47BBC", Slot = "14")]
		protected virtual void InitTeleportListener(bool state)
		{
		}

		[Address(RVA = "0xB47CB8", Offset = "0xB47CB8", VA = "0xB47CB8", Slot = "15")]
		protected virtual void OnTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xB47D30", Offset = "0xB47D30", VA = "0xB47D30", Slot = "16")]
		protected virtual Vector3 GetScaledLocalPosition(Transform objTransform)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xB47EEC", Offset = "0xB47EEC", VA = "0xB47EEC", Slot = "17")]
		protected virtual void OnGrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xB480C4", Offset = "0xB480C4", VA = "0xB480C4", Slot = "18")]
		protected virtual void OnUngrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xB482F4", Offset = "0xB482F4", VA = "0xB482F4", Slot = "19")]
		protected virtual void Grab(GameObject currentGrabbingController, VRTK_ControllerReference controllerReference, GameObject target)
		{
		}

		[Address(RVA = "0xB48688", Offset = "0xB48688", VA = "0xB48688", Slot = "20")]
		protected virtual void Ungrab(bool carryMomentum, VRTK_ControllerReference controllerReference, GameObject target)
		{
		}

		[Address(RVA = "0xB489C4", Offset = "0xB489C4", VA = "0xB489C4", Slot = "21")]
		protected virtual bool IsActiveClimbingController(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xB48A40", Offset = "0xB48A40", VA = "0xB48A40", Slot = "22")]
		protected virtual bool IsClimbableObject(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xB48B40", Offset = "0xB48B40", VA = "0xB48B40", Slot = "23")]
		protected virtual void InitControllerListeners(GameObject controller, bool state)
		{
		}

		[Address(RVA = "0xB48D24", Offset = "0xB48D24", VA = "0xB48D24", Slot = "24")]
		protected virtual bool IsBodyColliding()
		{
			return default(bool);
		}

		[Address(RVA = "0xB48E08", Offset = "0xB48E08", VA = "0xB48E08", Slot = "25")]
		protected virtual bool IsHeadsetColliding()
		{
			return default(bool);
		}

		[Address(RVA = "0xB48EAC", Offset = "0xB48EAC", VA = "0xB48EAC")]
		public VRTK_PlayerClimb()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6568DC", Offset = "0x6568DC")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6568DC", Offset = "0x6568DC")]
	public class VRTK_RoomExtender : MonoBehaviour
	{
		public enum MovementFunction
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Nonlinear,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LinearDirect
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x666FD4", Offset = "0x666FD4")]
		public MovementFunction movementFunction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66700C", Offset = "0x66700C")]
		public bool additionalMovementEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667044", Offset = "0x667044")]
		public bool additionalMovementEnabledOnButtonPress;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66707C", Offset = "0x66707C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66707C", Offset = "0x66707C")]
		public float additionalMovementMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6670D0", Offset = "0x6670D0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6670D0", Offset = "0x6670D0")]
		public float headZoneRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667124", Offset = "0x667124")]
		public Transform debugTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x66715C", Offset = "0x66715C")]
		public Vector3 relativeMovementOfCameraRig;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform movementTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 headCirclePosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected Vector3 lastPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 lastMovement;

		[Address(RVA = "0x94B388", Offset = "0x94B388", VA = "0x94B388", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x94B3EC", Offset = "0x94B3EC", VA = "0x94B3EC", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x94B684", Offset = "0x94B684", VA = "0x94B684", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x94B6E8", Offset = "0x94B6E8", VA = "0x94B6E8", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x94B714", Offset = "0x94B714", VA = "0x94B714", Slot = "8")]
		protected virtual void Move(Vector3 movement)
		{
		}

		[Address(RVA = "0x94B970", Offset = "0x94B970", VA = "0x94B970", Slot = "9")]
		protected virtual void MoveHeadCircle()
		{
		}

		[Address(RVA = "0x94BAC4", Offset = "0x94BAC4", VA = "0x94BAC4", Slot = "10")]
		protected virtual void MoveHeadCircleNonLinearDrift()
		{
		}

		[Address(RVA = "0x94BC18", Offset = "0x94BC18", VA = "0x94BC18", Slot = "11")]
		protected virtual void UpdateLastMovement()
		{
		}

		[Address(RVA = "0x94BD10", Offset = "0x94BD10", VA = "0x94BD10")]
		public VRTK_RoomExtender()
		{
		}
	}
	public delegate void SlingshotJumpEventHandler(object sender);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65693C", Offset = "0x65693C")]
	public class VRTK_SlingshotJump : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66716C", Offset = "0x66716C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66716C", Offset = "0x66716C")]
		public float releaseWindowTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6671CC", Offset = "0x6671CC")]
		public float velocityMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667204", Offset = "0x667204")]
		public float velocityMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66723C", Offset = "0x66723C")]
		[SerializeField]
		protected VRTK_ControllerEvents.ButtonAlias activationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667288", Offset = "0x667288")]
		[SerializeField]
		protected VRTK_ControllerEvents.ButtonAlias cancelButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6672D4", Offset = "0x6672D4")]
		[SerializeField]
		protected VRTK_BodyPhysics bodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667320", Offset = "0x667320")]
		[SerializeField]
		protected VRTK_PlayerClimb playerClimb;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66736C", Offset = "0x66736C")]
		[SerializeField]
		protected VRTK_BasicTeleport teleporter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 leftStartAimPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected Vector3 leftReleasePosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool leftIsAiming;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector3 rightStartAimPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector3 rightReleasePosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool rightIsAiming;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected VRTK_ControllerEvents leftControllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected VRTK_ControllerEvents rightControllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VRTK_InteractGrab leftControllerGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_InteractGrab rightControllerGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected bool leftButtonReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		protected bool rightButtonReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float countDownEndTime;

		public event SlingshotJumpEventHandler SlingshotJumped
		{
			[Address(RVA = "0xA2EA30", Offset = "0xA2EA30", VA = "0xA2EA30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F19C", Offset = "0x67F19C")]
			add
			{
			}
			[Address(RVA = "0xA2EB1C", Offset = "0xA2EB1C", VA = "0xA2EB1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F1AC", Offset = "0x67F1AC")]
			remove
			{
			}
		}

		[Address(RVA = "0xA2EC08", Offset = "0xA2EC08", VA = "0xA2EC08", Slot = "4")]
		public virtual VRTK_ControllerEvents.ButtonAlias GetActivationButton()
		{
			return default(VRTK_ControllerEvents.ButtonAlias);
		}

		[Address(RVA = "0xA2EC10", Offset = "0xA2EC10", VA = "0xA2EC10", Slot = "5")]
		public virtual void SetActivationButton(VRTK_ControllerEvents.ButtonAlias button)
		{
		}

		[Address(RVA = "0xA2EDFC", Offset = "0xA2EDFC", VA = "0xA2EDFC", Slot = "6")]
		public virtual VRTK_ControllerEvents.ButtonAlias GetCancelButton()
		{
			return default(VRTK_ControllerEvents.ButtonAlias);
		}

		[Address(RVA = "0xA2EE04", Offset = "0xA2EE04", VA = "0xA2EE04", Slot = "7")]
		public virtual void SetCancelButton(VRTK_ControllerEvents.ButtonAlias button)
		{
		}

		[Address(RVA = "0xA2EE38", Offset = "0xA2EE38", VA = "0xA2EE38", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA2EF78", Offset = "0xA2EF78", VA = "0xA2EF78", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA2F02C", Offset = "0xA2F02C", VA = "0xA2F02C", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA2F074", Offset = "0xA2F074", VA = "0xA2F074", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA2F0DC", Offset = "0xA2F0DC", VA = "0xA2F0DC", Slot = "12")]
		protected virtual void LeftButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA2F258", Offset = "0xA2F258", VA = "0xA2F258", Slot = "13")]
		protected virtual void RightButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA2F330", Offset = "0xA2F330", VA = "0xA2F330", Slot = "14")]
		protected virtual void LeftButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA2F43C", Offset = "0xA2F43C", VA = "0xA2F43C", Slot = "15")]
		protected virtual void RightButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA2F548", Offset = "0xA2F548", VA = "0xA2F548", Slot = "16")]
		protected virtual void CancelButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA2F558", Offset = "0xA2F558", VA = "0xA2F558", Slot = "17")]
		protected virtual void CheckForReset()
		{
		}

		[Address(RVA = "0xA2F5A4", Offset = "0xA2F5A4", VA = "0xA2F5A4", Slot = "18")]
		protected virtual void CheckForJump()
		{
		}

		[Address(RVA = "0xA2F818", Offset = "0xA2F818", VA = "0xA2F818")]
		protected void OnSlingshotJumped()
		{
		}

		[Address(RVA = "0xA2EFFC", Offset = "0xA2EFFC", VA = "0xA2EFFC")]
		protected void InitListeners(bool state)
		{
		}

		[Address(RVA = "0xA2F834", Offset = "0xA2F834", VA = "0xA2F834")]
		protected void InitTeleportListener(bool state)
		{
		}

		[Address(RVA = "0xA2EC44", Offset = "0xA2EC44", VA = "0xA2EC44")]
		protected void InitControllerListeners(bool state)
		{
		}

		[Address(RVA = "0xA2F998", Offset = "0xA2F998", VA = "0xA2F998")]
		protected void InitControllerListener(bool state, GameObject controller, ref VRTK_ControllerEvents events, ref VRTK_InteractGrab grab, ControllerInteractionEventHandler triggerPressed, ControllerInteractionEventHandler triggerReleased)
		{
		}

		[Address(RVA = "0xA2FC4C", Offset = "0xA2FC4C", VA = "0xA2FC4C")]
		protected void OnTeleport(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA2F064", Offset = "0xA2F064", VA = "0xA2F064")]
		protected void UnAim()
		{
		}

		[Address(RVA = "0xA2F1B4", Offset = "0xA2F1B4", VA = "0xA2F1B4")]
		protected bool IsClimbing()
		{
			return default(bool);
		}

		[Address(RVA = "0xA2FC5C", Offset = "0xA2FC5C", VA = "0xA2FC5C")]
		public VRTK_SlingshotJump()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656974", Offset = "0x656974")]
	public class VRTK_StepMultiplier : MonoBehaviour
	{
		public enum MovementFunction
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Nonlinear,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LinearDirect
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6673C8", Offset = "0x6673C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6673C8", Offset = "0x6673C8")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667428", Offset = "0x667428")]
		public MovementFunction movementFunction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667460", Offset = "0x667460")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x667460", Offset = "0x667460")]
		public float additionalMovementMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6674B4", Offset = "0x6674B4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6674B4", Offset = "0x6674B4")]
		public float headZoneRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667508", Offset = "0x667508")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667508", Offset = "0x667508")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 relativeMovementOfCameraRig;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform movementTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 headCirclePosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected Vector3 lastPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 lastMovement;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected bool activationEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected bool buttonSubscribed;

		[Address(RVA = "0xA379D0", Offset = "0xA379D0", VA = "0xA379D0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA37A38", Offset = "0xA37A38", VA = "0xA37A38", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA37B24", Offset = "0xA37B24", VA = "0xA37B24", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA37B8C", Offset = "0xA37B8C", VA = "0xA37B8C", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA37BE8", Offset = "0xA37BE8", VA = "0xA37BE8", Slot = "8")]
		protected virtual void ManageButtonSubscription()
		{
		}

		[Address(RVA = "0xA37E8C", Offset = "0xA37E8C", VA = "0xA37E8C", Slot = "9")]
		protected virtual void ActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA37E98", Offset = "0xA37E98", VA = "0xA37E98", Slot = "10")]
		protected virtual void ActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA37EA0", Offset = "0xA37EA0", VA = "0xA37EA0", Slot = "11")]
		protected virtual void Move(Vector3 movement)
		{
		}

		[Address(RVA = "0xA380A4", Offset = "0xA380A4", VA = "0xA380A4", Slot = "12")]
		protected virtual void MoveHeadCircle()
		{
		}

		[Address(RVA = "0xA38234", Offset = "0xA38234", VA = "0xA38234", Slot = "13")]
		protected virtual void MoveHeadCircleNonLinearDrift()
		{
		}

		[Address(RVA = "0xA383C0", Offset = "0xA383C0", VA = "0xA383C0", Slot = "14")]
		protected virtual void UpdateLastMovement()
		{
		}

		[Address(RVA = "0xA384F0", Offset = "0xA384F0", VA = "0xA384F0")]
		public VRTK_StepMultiplier()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6569AC", Offset = "0x6569AC")]
	public class VRTK_TeleportDisableOnControllerObscured : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B250", Offset = "0x65B250")]
		private sealed class <EnableAtEndOfFrame>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TeleportDisableOnControllerObscured <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA3A848", Offset = "0xA3A848", VA = "0xA3A848", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA3A8B8", Offset = "0xA3A8B8", VA = "0xA3A8B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA3A48C", Offset = "0xA3A48C", VA = "0xA3A48C")]
			[DebuggerHidden]
			public <EnableAtEndOfFrame>d__5(int <>1__state)
			{
			}

			[Address(RVA = "0xA3A530", Offset = "0xA3A530", VA = "0xA3A530", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA3A534", Offset = "0xA3A534", VA = "0xA3A534", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA3A850", Offset = "0xA3A850", VA = "0xA3A850", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667568", Offset = "0x667568")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667568", Offset = "0x667568")]
		public VRTK_BasicTeleport teleporter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6675C8", Offset = "0x6675C8")]
		public VRTK_HeadsetControllerAware headsetControllerAware;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Coroutine enableAtEndOfFrameRoutine;

		[Address(RVA = "0xA3A1E8", Offset = "0xA3A1E8", VA = "0xA3A1E8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA3A2C0", Offset = "0xA3A2C0", VA = "0xA3A2C0", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA3A418", Offset = "0xA3A418", VA = "0xA3A418", Slot = "6")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67F1BC", Offset = "0x67F1BC")]
		protected virtual IEnumerator EnableAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xA3A4B8", Offset = "0xA3A4B8", VA = "0xA3A4B8", Slot = "7")]
		protected virtual void DisableTeleport(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xA3A4F0", Offset = "0xA3A4F0", VA = "0xA3A4F0", Slot = "8")]
		protected virtual void EnableTeleport(object sender, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xA3A528", Offset = "0xA3A528", VA = "0xA3A528")]
		public VRTK_TeleportDisableOnControllerObscured()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6569E4", Offset = "0x6569E4")]
	public class VRTK_TeleportDisableOnHeadsetCollision : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B260", Offset = "0x65B260")]
		private sealed class <EnableAtEndOfFrame>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_TeleportDisableOnHeadsetCollision <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA3AF20", Offset = "0xA3AF20", VA = "0xA3AF20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA3AF90", Offset = "0xA3AF90", VA = "0xA3AF90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA3AB64", Offset = "0xA3AB64", VA = "0xA3AB64")]
			[DebuggerHidden]
			public <EnableAtEndOfFrame>d__5(int <>1__state)
			{
			}

			[Address(RVA = "0xA3AC08", Offset = "0xA3AC08", VA = "0xA3AC08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA3AC0C", Offset = "0xA3AC0C", VA = "0xA3AC0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA3AF28", Offset = "0xA3AF28", VA = "0xA3AF28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667600", Offset = "0x667600")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667600", Offset = "0x667600")]
		public VRTK_BasicTeleport teleporter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667660", Offset = "0x667660")]
		public VRTK_HeadsetCollision headsetCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Coroutine enableAtEndOfFrameRoutine;

		[Address(RVA = "0xA3A8C0", Offset = "0xA3A8C0", VA = "0xA3A8C0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA3A998", Offset = "0xA3A998", VA = "0xA3A998", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA3AAF0", Offset = "0xA3AAF0", VA = "0xA3AAF0", Slot = "6")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67F220", Offset = "0x67F220")]
		protected virtual IEnumerator EnableAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0xA3AB90", Offset = "0xA3AB90", VA = "0xA3AB90", Slot = "7")]
		protected virtual void DisableTeleport(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0xA3ABC8", Offset = "0xA3ABC8", VA = "0xA3ABC8", Slot = "8")]
		protected virtual void EnableTeleport(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0xA3AC00", Offset = "0xA3AC00", VA = "0xA3AC00")]
		public VRTK_TeleportDisableOnHeadsetCollision()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656A1C", Offset = "0x656A1C")]
	public class VRTK_TouchpadControl : VRTK_ObjectControl
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667698", Offset = "0x667698")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667698", Offset = "0x667698")]
		public VRTK_ControllerEvents.Vector2AxisAlias coordinateAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6676F8", Offset = "0x6676F8")]
		public VRTK_ControllerEvents.ButtonAlias primaryActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667730", Offset = "0x667730")]
		public VRTK_ControllerEvents.ButtonAlias actionModifierButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667768", Offset = "0x667768")]
		public Vector2 axisDeadzone;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool touchpadFirstChange;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		protected bool otherTouchpadControlEnabledState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		protected bool otherTouchpadControlEnabledStateSet;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected VRTK_ControllerEvents.ButtonAlias coordniateButtonAlias;

		[Address(RVA = "0xA3AF98", Offset = "0xA3AF98", VA = "0xA3AF98", Slot = "11")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xA3AFEC", Offset = "0xA3AFEC", VA = "0xA3AFEC", Slot = "6")]
		protected override void ControlFixedUpdate()
		{
		}

		[Address(RVA = "0xA3B168", Offset = "0xA3B168", VA = "0xA3B168", Slot = "7")]
		protected override VRTK_ObjectControl GetOtherControl()
		{
			return null;
		}

		[Address(RVA = "0xA3B29C", Offset = "0xA3B29C", VA = "0xA3B29C", Slot = "9")]
		protected override void SetListeners(bool state)
		{
		}

		[Address(RVA = "0xA3B594", Offset = "0xA3B594", VA = "0xA3B594", Slot = "8")]
		protected override bool IsInAction()
		{
			return default(bool);
		}

		[Address(RVA = "0xA3B5E4", Offset = "0xA3B5E4", VA = "0xA3B5E4", Slot = "22")]
		protected virtual bool OutsideDeadzone(float axisValue, float deadzoneThreshold)
		{
			return default(bool);
		}

		[Address(RVA = "0xA3B600", Offset = "0xA3B600", VA = "0xA3B600", Slot = "23")]
		protected virtual bool ValidPrimaryButton()
		{
			return default(bool);
		}

		[Address(RVA = "0xA3B6BC", Offset = "0xA3B6BC", VA = "0xA3B6BC", Slot = "24")]
		protected virtual void ModifierButtonActive()
		{
		}

		[Address(RVA = "0xA3B77C", Offset = "0xA3B77C", VA = "0xA3B77C", Slot = "25")]
		protected virtual bool TouchpadTouched()
		{
			return default(bool);
		}

		[Address(RVA = "0xA3B82C", Offset = "0xA3B82C", VA = "0xA3B82C", Slot = "26")]
		protected virtual void TouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA3BA14", Offset = "0xA3BA14", VA = "0xA3BA14", Slot = "27")]
		protected virtual void TouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA3BB00", Offset = "0xA3BB00", VA = "0xA3BB00")]
		public VRTK_TouchpadControl()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656A54", Offset = "0x656A54")]
	public class VRTK_TunnelOverlay : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6677A0", Offset = "0x6677A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6677A0", Offset = "0x6677A0")]
		public float minimumRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667800", Offset = "0x667800")]
		public float maximumRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667838", Offset = "0x667838")]
		public float minimumSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667870", Offset = "0x667870")]
		public float maximumSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6678A8", Offset = "0x6678A8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6678A8", Offset = "0x6678A8")]
		public Color effectColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667908", Offset = "0x667908")]
		public Texture effectSkybox;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667940", Offset = "0x667940")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x667940", Offset = "0x667940")]
		public float initialEffectSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667994", Offset = "0x667994")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x667994", Offset = "0x667994")]
		public float maximumEffectSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6679E8", Offset = "0x6679E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6679E8", Offset = "0x6679E8")]
		public float featherSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667A3C", Offset = "0x667A3C")]
		public float smoothingTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Camera headsetCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform playarea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected VRTK_TunnelEffect cameraEffect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected float angularVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected float angularVelocitySlew;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastForward;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 lastPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Material matCameraEffect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected int shaderPropertyColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected int shaderPropertyAV;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected int shaderPropertyFeather;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected int shaderPropertySkyboxTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Color originalColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float originalAngularVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float originalFeatherSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Texture originalSkyboxTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float maximumEffectCoverage;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected bool createEffectSkybox;

		[Address(RVA = "0xA3E17C", Offset = "0xA3E17C", VA = "0xA3E17C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA3E264", Offset = "0xA3E264", VA = "0xA3E264", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA3E568", Offset = "0xA3E568", VA = "0xA3E568", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA3E6C4", Offset = "0xA3E6C4", VA = "0xA3E6C4", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA3E72C", Offset = "0xA3E72C", VA = "0xA3E72C", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xA3EE44", Offset = "0xA3EE44", VA = "0xA3EE44", Slot = "9")]
		protected virtual void SetShaderFeather(Color givenTunnelColor, float givenAngularVelocity, float givenFeatherSize)
		{
		}

		[Address(RVA = "0xA3EF18", Offset = "0xA3EF18", VA = "0xA3EF18", Slot = "10")]
		protected virtual void CheckSkyboxTexture()
		{
		}

		[Address(RVA = "0xA3F220", Offset = "0xA3F220", VA = "0xA3F220")]
		public VRTK_TunnelOverlay()
		{
		}
	}
	public abstract class VRTK_BasePointerRenderer : MonoBehaviour
	{
		public enum VisibilityStates
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnWhenActive,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AlwaysOn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AlwaysOff
		}

		[Serializable]
		public sealed class PointerOriginSmoothingSettings
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67429C", Offset = "0x67429C")]
			public bool smoothsPosition;

			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6742D4", Offset = "0x6742D4")]
			public float maxAllowedPerFrameDistanceDifference;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67430C", Offset = "0x67430C")]
			public bool smoothsRotation;

			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x674344", Offset = "0x674344")]
			public float maxAllowedPerFrameAngleDifference;

			[Address(RVA = "0x92213C", Offset = "0x92213C", VA = "0x92213C")]
			public PointerOriginSmoothingSettings()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667A74", Offset = "0x667A74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667A74", Offset = "0x667A74")]
		public VRTK_PlayAreaCursor playareaCursor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667AD4", Offset = "0x667AD4")]
		public VRTK_PointerDirectionIndicator directionIndicator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667B0C", Offset = "0x667B0C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667B0C", Offset = "0x667B0C")]
		public VRTK_CustomRaycast customRaycast;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667B6C", Offset = "0x667B6C")]
		public PointerOriginSmoothingSettings pointerOriginSmoothingSettings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667BA4", Offset = "0x667BA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667BA4", Offset = "0x667BA4")]
		public Color validCollisionColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667C04", Offset = "0x667C04")]
		public Color invalidCollisionColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667C3C", Offset = "0x667C3C")]
		public VisibilityStates tracerVisibility;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667C74", Offset = "0x667C74")]
		public VisibilityStates cursorVisibility;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const float BEAM_ADJUST_OFFSET = 0.0001f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected VRTK_Pointer controllingPointer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected RaycastHit destinationHit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Material defaultMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Color previousColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Color currentColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected VRTK_PolicyList invalidListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected VRTK_NavMeshData navMeshData;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool headsetPositionCompensation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected GameObject objectInteractor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected GameObject objectInteractorAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected GameObject pointerOriginTransformFollowGameObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected VRTK_TransformFollow pointerOriginTransformFollow;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected VRTK_InteractGrab controllerGrabScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Rigidbody savedAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected bool attachedToInteractorAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected float savedBeamLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected HashSet<GameObject> makeRendererVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected bool tracerVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		protected bool cursorVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected LayerMask defaultIgnoreLayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected SDK_BaseController.ControllerHand cachedAttachedHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform cachedPointerAttachPoint;

		public abstract GameObject[] GetPointerObjects();

		[Address(RVA = "0x91E980", Offset = "0x91E980", VA = "0x91E980", Slot = "5")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67F284", Offset = "0x67F284")]
		public virtual void InitalizePointer(VRTK_Pointer givenPointer, VRTK_PolicyList givenInvalidListPolicy, float givenNavMeshCheckDistance, bool givenHeadsetPositionCompensation)
		{
		}

		[Address(RVA = "0x91EA40", Offset = "0x91EA40", VA = "0x91EA40", Slot = "6")]
		public virtual void InitalizePointer(VRTK_Pointer givenPointer, VRTK_PolicyList givenInvalidListPolicy, VRTK_NavMeshData givenNavMeshData, bool givenHeadsetPositionCompensation)
		{
		}

		[Address(RVA = "0x91EBC8", Offset = "0x91EBC8", VA = "0x91EBC8", Slot = "7")]
		public virtual void ResetPointerObjects()
		{
		}

		[Address(RVA = "0x91EC2C", Offset = "0x91EC2C", VA = "0x91EC2C", Slot = "8")]
		public virtual void Toggle(bool pointerState, bool actualState)
		{
		}

		[Address(RVA = "0x91ED74", Offset = "0x91ED74", VA = "0x91ED74", Slot = "9")]
		public virtual void ToggleInteraction(bool state)
		{
		}

		[Address(RVA = "0x91ED88", Offset = "0x91ED88", VA = "0x91ED88", Slot = "10")]
		public virtual void UpdateRenderer()
		{
		}

		[Address(RVA = "0x91EEC0", Offset = "0x91EEC0", VA = "0x91EEC0", Slot = "11")]
		public virtual RaycastHit GetDestinationHit()
		{
			return default(RaycastHit);
		}

		[Address(RVA = "0x91EEDC", Offset = "0x91EEDC", VA = "0x91EEDC", Slot = "12")]
		public virtual bool ValidPlayArea()
		{
			return default(bool);
		}

		[Address(RVA = "0x91EFA8", Offset = "0x91EFA8", VA = "0x91EFA8", Slot = "13")]
		public virtual bool IsVisible()
		{
			return default(bool);
		}

		[Address(RVA = "0x91EFF8", Offset = "0x91EFF8", VA = "0x91EFF8", Slot = "14")]
		public virtual bool IsTracerVisible()
		{
			return default(bool);
		}

		[Address(RVA = "0x91F01C", Offset = "0x91F01C", VA = "0x91F01C", Slot = "15")]
		public virtual bool IsCursorVisible()
		{
			return default(bool);
		}

		[Address(RVA = "0x91F040", Offset = "0x91F040", VA = "0x91F040", Slot = "16")]
		public virtual bool IsValidCollision()
		{
			return default(bool);
		}

		[Address(RVA = "0x91F058", Offset = "0x91F058", VA = "0x91F058", Slot = "17")]
		public virtual GameObject GetObjectInteractor()
		{
			return null;
		}

		protected abstract void CreatePointerObjects();

		protected abstract void DestroyPointerObjects();

		protected abstract void ToggleRenderer(bool pointerState, bool actualState);

		[Address(RVA = "0x91F060", Offset = "0x91F060", VA = "0x91F060", Slot = "21")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x91F0C8", Offset = "0x91F0C8", VA = "0x91F0C8", Slot = "22")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x91F1B0", Offset = "0x91F1B0", VA = "0x91F1B0", Slot = "23")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x91F280", Offset = "0x91F280", VA = "0x91F280", Slot = "24")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x91F2E8", Offset = "0x91F2E8", VA = "0x91F2E8", Slot = "25")]
		protected virtual void OnValidate()
		{
		}

		[Address(RVA = "0x91F3CC", Offset = "0x91F3CC", VA = "0x91F3CC", Slot = "26")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0x91F518", Offset = "0x91F518", VA = "0x91F518", Slot = "27")]
		protected virtual void ToggleObjectInteraction(bool state)
		{
		}

		[Address(RVA = "0x91F7BC", Offset = "0x91F7BC", VA = "0x91F7BC", Slot = "28")]
		protected virtual void UpdateObjectInteractor()
		{
		}

		[Address(RVA = "0x91F840", Offset = "0x91F840", VA = "0x91F840", Slot = "29")]
		protected virtual VRTK_ControllerReference GetControllerReference([Optional] GameObject reference)
		{
			return null;
		}

		[Address(RVA = "0x91F988", Offset = "0x91F988", VA = "0x91F988", Slot = "30")]
		protected virtual Transform GetPointerOriginTransform()
		{
			return null;
		}

		[Address(RVA = "0x91FC28", Offset = "0x91FC28", VA = "0x91FC28", Slot = "31")]
		protected virtual void UpdatePointerOriginTransformFollow()
		{
		}

		[Address(RVA = "0x91FEC4", Offset = "0x91FEC4", VA = "0x91FEC4")]
		protected Transform GetOrigin(bool smoothed = true)
		{
			return null;
		}

		[Address(RVA = "0x91FFC8", Offset = "0x91FFC8", VA = "0x91FFC8", Slot = "32")]
		protected virtual void PointerEnter(RaycastHit givenHit)
		{
		}

		[Address(RVA = "0x920038", Offset = "0x920038", VA = "0x920038", Slot = "33")]
		protected virtual void PointerExit(RaycastHit givenHit)
		{
		}

		[Address(RVA = "0x9200A8", Offset = "0x9200A8", VA = "0x9200A8", Slot = "34")]
		protected virtual bool ValidDestination()
		{
			return default(bool);
		}

		[Address(RVA = "0x920274", Offset = "0x920274", VA = "0x920274", Slot = "35")]
		protected virtual void ToggleElement(GameObject givenObject, bool pointerState, bool actualState, VisibilityStates givenVisibility, ref bool currentVisible)
		{
		}

		[Address(RVA = "0x9203E4", Offset = "0x9203E4", VA = "0x9203E4", Slot = "36")]
		protected virtual void AddVisibleRenderer(GameObject givenObject)
		{
		}

		[Address(RVA = "0x920454", Offset = "0x920454", VA = "0x920454", Slot = "37")]
		protected virtual void MakeRenderersVisible()
		{
		}

		[Address(RVA = "0x9205C8", Offset = "0x9205C8", VA = "0x9205C8", Slot = "38")]
		protected virtual void ToggleRendererVisibility(GameObject givenObject, bool state)
		{
		}

		[Address(RVA = "0x9206D4", Offset = "0x9206D4", VA = "0x9206D4", Slot = "39")]
		protected virtual void SetupMaterialRenderer(GameObject givenObject)
		{
		}

		[Address(RVA = "0x9207F8", Offset = "0x9207F8", VA = "0x9207F8", Slot = "40")]
		protected virtual void ChangeColor(Color givenColor)
		{
		}

		[Address(RVA = "0x920A14", Offset = "0x920A14", VA = "0x920A14", Slot = "41")]
		protected virtual void EmitStateEvent()
		{
		}

		[Address(RVA = "0x920AE0", Offset = "0x920AE0", VA = "0x920AE0", Slot = "42")]
		protected virtual void ChangeMaterial(Color givenColor)
		{
		}

		[Address(RVA = "0x920C5C", Offset = "0x920C5C", VA = "0x920C5C", Slot = "43")]
		protected virtual void ChangeMaterialColor(GameObject givenObject, Color givenColor)
		{
		}

		[Address(RVA = "0x920F54", Offset = "0x920F54", VA = "0x920F54", Slot = "44")]
		protected virtual void CreateObjectInteractor()
		{
		}

		[Address(RVA = "0x921760", Offset = "0x921760", VA = "0x921760", Slot = "45")]
		protected virtual void ScaleObjectInteractor(Vector3 scaleAmount)
		{
		}

		[Address(RVA = "0x921834", Offset = "0x921834", VA = "0x921834", Slot = "46")]
		protected virtual void CreatePointerOriginTransformFollow()
		{
		}

		[Address(RVA = "0x921A18", Offset = "0x921A18", VA = "0x921A18", Slot = "47")]
		protected virtual void DestroyPointerOriginTransformFollow()
		{
		}

		[Address(RVA = "0x921AC4", Offset = "0x921AC4", VA = "0x921AC4", Slot = "48")]
		protected virtual float OverrideBeamLength(float currentLength)
		{
			return default(float);
		}

		[Address(RVA = "0x921CA0", Offset = "0x921CA0", VA = "0x921CA0", Slot = "49")]
		protected virtual void UpdateDependencies(Vector3 location)
		{
		}

		[Address(RVA = "0x921D70", Offset = "0x921D70", VA = "0x921D70", Slot = "50")]
		protected virtual void SetupDirectionIndicator()
		{
		}

		[Address(RVA = "0x921EA4", Offset = "0x921EA4", VA = "0x921EA4", Slot = "51")]
		protected virtual void UpdateDirectionIndicator()
		{
		}

		[Address(RVA = "0x921FDC", Offset = "0x921FDC", VA = "0x921FDC", Slot = "52")]
		protected virtual bool ShowDirectionIndicator()
		{
			return default(bool);
		}

		[Address(RVA = "0x922068", Offset = "0x922068", VA = "0x922068")]
		protected VRTK_BasePointerRenderer()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656A8C", Offset = "0x656A8C")]
	public class VRTK_BezierPointerRenderer : VRTK_BasePointerRenderer
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667CAC", Offset = "0x667CAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667CAC", Offset = "0x667CAC")]
		public Vector2 maximumLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667D0C", Offset = "0x667D0C")]
		public int tracerDensity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667D44", Offset = "0x667D44")]
		public float cursorRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667D7C", Offset = "0x667D7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667D7C", Offset = "0x667D7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x667D7C", Offset = "0x667D7C")]
		public float heightLimitAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667DF8", Offset = "0x667DF8")]
		public float curveOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667E30", Offset = "0x667E30")]
		public bool rescaleTracer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667E68", Offset = "0x667E68")]
		public bool cursorMatchTargetRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667EA0", Offset = "0x667EA0")]
		public int collisionCheckFrequency;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667ED8", Offset = "0x667ED8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667ED8", Offset = "0x667ED8")]
		public GameObject customTracer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667F38", Offset = "0x667F38")]
		public GameObject customCursor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667F70", Offset = "0x667F70")]
		public GameObject validLocationObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667FA8", Offset = "0x667FA8")]
		public GameObject invalidLocationObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected VRTK_CurveGenerator actualTracer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected GameObject actualContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected GameObject actualCursor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected GameObject actualValidLocationObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected GameObject actualInvalidLocationObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Vector3 fixedForwardBeamForward;

		[Address(RVA = "0x924618", Offset = "0x924618", VA = "0x924618", Slot = "10")]
		public override void UpdateRenderer()
		{
		}

		[Address(RVA = "0x924754", Offset = "0x924754", VA = "0x924754", Slot = "4")]
		public override GameObject[] GetPointerObjects()
		{
			return null;
		}

		[Address(RVA = "0x92485C", Offset = "0x92485C", VA = "0x92485C", Slot = "20")]
		protected override void ToggleRenderer(bool pointerState, bool actualState)
		{
		}

		[Address(RVA = "0x9249AC", Offset = "0x9249AC", VA = "0x9249AC", Slot = "18")]
		protected override void CreatePointerObjects()
		{
		}

		[Address(RVA = "0x924C20", Offset = "0x924C20", VA = "0x924C20", Slot = "19")]
		protected override void DestroyPointerObjects()
		{
		}

		[Address(RVA = "0x924D84", Offset = "0x924D84", VA = "0x924D84", Slot = "28")]
		protected override void UpdateObjectInteractor()
		{
		}

		[Address(RVA = "0x924FB8", Offset = "0x924FB8", VA = "0x924FB8", Slot = "42")]
		protected override void ChangeMaterial(Color givenColor)
		{
		}

		[Address(RVA = "0x92501C", Offset = "0x92501C", VA = "0x92501C", Slot = "53")]
		protected virtual void CreateTracer()
		{
		}

		[Address(RVA = "0x925120", Offset = "0x925120", VA = "0x925120", Slot = "54")]
		protected virtual GameObject CreateCursorObject()
		{
			return null;
		}

		[Address(RVA = "0x9252E8", Offset = "0x9252E8", VA = "0x9252E8", Slot = "55")]
		protected virtual void CreateCursorLocations()
		{
		}

		[Address(RVA = "0x9257B0", Offset = "0x9257B0", VA = "0x9257B0", Slot = "56")]
		protected virtual void CreateCursor()
		{
		}

		[Address(RVA = "0x925A14", Offset = "0x925A14", VA = "0x925A14", Slot = "57")]
		protected virtual Vector3 ProjectForwardBeam()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x925D90", Offset = "0x925D90", VA = "0x925D90", Slot = "58")]
		protected virtual Vector3 ProjectDownBeam(Vector3 jointPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x9260BC", Offset = "0x9260BC", VA = "0x9260BC", Slot = "59")]
		protected virtual void AdjustForEarlyCollisions(Vector3 jointPosition, Vector3 downPosition)
		{
		}

		[Address(RVA = "0x9266C4", Offset = "0x9266C4", VA = "0x9266C4", Slot = "60")]
		protected virtual void DisplayCurvedBeam(Vector3 jointPosition, Vector3 downPosition)
		{
		}

		[Address(RVA = "0x926A0C", Offset = "0x926A0C", VA = "0x926A0C", Slot = "61")]
		protected virtual void TogglePointerCursor(bool pointerState, bool actualState)
		{
		}

		[Address(RVA = "0x926A38", Offset = "0x926A38", VA = "0x926A38", Slot = "62")]
		protected virtual void TogglePointerTracer(bool pointerState, bool actualState)
		{
		}

		[Address(RVA = "0x926B18", Offset = "0x926B18", VA = "0x926B18", Slot = "63")]
		protected virtual void SetPointerCursor()
		{
		}

		[Address(RVA = "0x926F90", Offset = "0x926F90", VA = "0x926F90")]
		public VRTK_BezierPointerRenderer()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656AC4", Offset = "0x656AC4")]
	public class VRTK_StraightPointerRenderer : VRTK_BasePointerRenderer
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x667FE0", Offset = "0x667FE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x667FE0", Offset = "0x667FE0")]
		public float maximumLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668040", Offset = "0x668040")]
		public float scaleFactor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668078", Offset = "0x668078")]
		public float cursorScaleMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6680B0", Offset = "0x6680B0")]
		public bool cursorMatchTargetRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6680E8", Offset = "0x6680E8")]
		public bool cursorDistanceRescale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668120", Offset = "0x668120")]
		public Vector3 maximumCursorScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668158", Offset = "0x668158")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668158", Offset = "0x668158")]
		public GameObject customTracer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6681B8", Offset = "0x6681B8")]
		public GameObject customCursor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected GameObject actualContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected GameObject actualTracer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected GameObject actualCursor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected Vector3 cursorOriginalScale;

		[Address(RVA = "0xA3850C", Offset = "0xA3850C", VA = "0xA3850C", Slot = "10")]
		public override void UpdateRenderer()
		{
		}

		[Address(RVA = "0xA38604", Offset = "0xA38604", VA = "0xA38604", Slot = "4")]
		public override GameObject[] GetPointerObjects()
		{
			return null;
		}

		[Address(RVA = "0xA38758", Offset = "0xA38758", VA = "0xA38758", Slot = "20")]
		protected override void ToggleRenderer(bool pointerState, bool actualState)
		{
		}

		[Address(RVA = "0xA387D0", Offset = "0xA387D0", VA = "0xA387D0", Slot = "18")]
		protected override void CreatePointerObjects()
		{
		}

		[Address(RVA = "0xA38BE8", Offset = "0xA38BE8", VA = "0xA38BE8", Slot = "19")]
		protected override void DestroyPointerObjects()
		{
		}

		[Address(RVA = "0xA38C9C", Offset = "0xA38C9C", VA = "0xA38C9C", Slot = "42")]
		protected override void ChangeMaterial(Color givenColor)
		{
		}

		[Address(RVA = "0xA38D2C", Offset = "0xA38D2C", VA = "0xA38D2C", Slot = "28")]
		protected override void UpdateObjectInteractor()
		{
		}

		[Address(RVA = "0xA38F64", Offset = "0xA38F64", VA = "0xA38F64", Slot = "53")]
		protected virtual void CreateTracer()
		{
		}

		[Address(RVA = "0xA392B4", Offset = "0xA392B4", VA = "0xA392B4", Slot = "54")]
		protected virtual void CreateCursor()
		{
		}

		[Address(RVA = "0xA396E4", Offset = "0xA396E4", VA = "0xA396E4", Slot = "55")]
		protected virtual void CheckRayMiss(bool rayHit, RaycastHit pointerCollidedWith)
		{
		}

		[Address(RVA = "0xA39898", Offset = "0xA39898", VA = "0xA39898", Slot = "56")]
		protected virtual void CheckRayHit(bool rayHit, RaycastHit pointerCollidedWith)
		{
		}

		[Address(RVA = "0xA3993C", Offset = "0xA3993C", VA = "0xA3993C", Slot = "57")]
		protected virtual float CastRayForward()
		{
			return default(float);
		}

		[Address(RVA = "0xA39B0C", Offset = "0xA39B0C", VA = "0xA39B0C", Slot = "58")]
		protected virtual void SetPointerAppearance(float tracerLength)
		{
		}

		[Address(RVA = "0xA3A114", Offset = "0xA3A114", VA = "0xA3A114")]
		public VRTK_StraightPointerRenderer()
		{
		}
	}
	public struct DestinationMarkerEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float distance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit raycastHit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 destinationPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Quaternion? destinationRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool forceDestinationPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool enableTeleport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRTK_ControllerReference controllerReference;
	}
	public delegate void DestinationMarkerEventHandler(object sender, DestinationMarkerEventArgs e);
	public abstract class VRTK_DestinationMarker : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6681F0", Offset = "0x6681F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6681F0", Offset = "0x6681F0")]
		public bool enableTeleport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668260", Offset = "0x668260")]
		public VRTK_PolicyList targetListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6682D8", Offset = "0x6682D8")]
		protected float navMeshCheckDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_NavMeshData navmeshData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool headsetPositionCompensation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		protected bool forceHoverOnRepeatedEnter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Collider existingCollider;

		public event DestinationMarkerEventHandler DestinationMarkerEnter
		{
			[Address(RVA = "0xA7673C", Offset = "0xA7673C", VA = "0xA7673C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F2BC", Offset = "0x67F2BC")]
			add
			{
			}
			[Address(RVA = "0xA76828", Offset = "0xA76828", VA = "0xA76828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F2CC", Offset = "0x67F2CC")]
			remove
			{
			}
		}

		public event DestinationMarkerEventHandler DestinationMarkerExit
		{
			[Address(RVA = "0xA76914", Offset = "0xA76914", VA = "0xA76914")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F2DC", Offset = "0x67F2DC")]
			add
			{
			}
			[Address(RVA = "0xA76A00", Offset = "0xA76A00", VA = "0xA76A00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F2EC", Offset = "0x67F2EC")]
			remove
			{
			}
		}

		public event DestinationMarkerEventHandler DestinationMarkerHover
		{
			[Address(RVA = "0xA76AEC", Offset = "0xA76AEC", VA = "0xA76AEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F2FC", Offset = "0x67F2FC")]
			add
			{
			}
			[Address(RVA = "0xA76BD8", Offset = "0xA76BD8", VA = "0xA76BD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F30C", Offset = "0x67F30C")]
			remove
			{
			}
		}

		public event DestinationMarkerEventHandler DestinationMarkerSet
		{
			[Address(RVA = "0xA76CC4", Offset = "0xA76CC4", VA = "0xA76CC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F31C", Offset = "0x67F31C")]
			add
			{
			}
			[Address(RVA = "0xA76DB0", Offset = "0xA76DB0", VA = "0xA76DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F32C", Offset = "0x67F32C")]
			remove
			{
			}
		}

		[Address(RVA = "0xA76E9C", Offset = "0xA76E9C", VA = "0xA76E9C", Slot = "4")]
		public virtual void OnDestinationMarkerEnter(DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA77038", Offset = "0xA77038", VA = "0xA77038", Slot = "5")]
		public virtual void OnDestinationMarkerExit(DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA77088", Offset = "0xA77088", VA = "0xA77088", Slot = "6")]
		public virtual void OnDestinationMarkerHover(DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA770D4", Offset = "0xA770D4", VA = "0xA770D4", Slot = "7")]
		public virtual void OnDestinationMarkerSet(DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xA77120", Offset = "0xA77120", VA = "0xA77120", Slot = "8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67F33C", Offset = "0x67F33C")]
		public virtual void SetNavMeshCheckDistance(float distance)
		{
		}

		[Address(RVA = "0xA771B8", Offset = "0xA771B8", VA = "0xA771B8", Slot = "9")]
		public virtual void SetNavMeshData(VRTK_NavMeshData givenData)
		{
		}

		[Address(RVA = "0xA771C0", Offset = "0xA771C0", VA = "0xA771C0", Slot = "10")]
		public virtual void SetHeadsetPositionCompensation(bool state)
		{
		}

		[Address(RVA = "0xA771CC", Offset = "0xA771CC", VA = "0xA771CC", Slot = "11")]
		public virtual void SetForceHoverOnRepeatedEnter(bool state)
		{
		}

		[Address(RVA = "0xA771D8", Offset = "0xA771D8", VA = "0xA771D8", Slot = "12")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA77264", Offset = "0xA77264", VA = "0xA77264", Slot = "13")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA772F0", Offset = "0xA772F0", VA = "0xA772F0", Slot = "14")]
		protected virtual DestinationMarkerEventArgs SetDestinationMarkerEvent(float distance, Transform target, RaycastHit raycastHit, Vector3 position, VRTK_ControllerReference controllerReference, bool forceDestinationPosition = false, [Optional] Quaternion? rotation)
		{
			return default(DestinationMarkerEventArgs);
		}

		[Address(RVA = "0xA7736C", Offset = "0xA7736C", VA = "0xA7736C")]
		protected VRTK_DestinationMarker()
		{
		}
	}
	public struct PlayAreaCursorEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Collider collider;
	}
	public delegate void PlayAreaCursorEventHandler(object sender, PlayAreaCursorEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656AFC", Offset = "0x656AFC")]
	public class VRTK_PlayAreaCursor : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668310", Offset = "0x668310")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668310", Offset = "0x668310")]
		public bool usePointerColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668370", Offset = "0x668370")]
		public Vector2 playAreaCursorDimensions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6683A8", Offset = "0x6683A8")]
		public bool handlePlayAreaCursorCollisions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6683E0", Offset = "0x6683E0")]
		public bool headsetOutOfBoundsIsCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668418", Offset = "0x668418")]
		public bool displayOnInvalidLocation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668450", Offset = "0x668450")]
		public VRTK_PolicyList targetListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668488", Offset = "0x668488")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668488", Offset = "0x668488")]
		public VRTK_PointerDirectionIndicator directionIndicator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6684E8", Offset = "0x6684E8")]
		public GameObject validLocationObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668520", Offset = "0x668520")]
		public GameObject invalidLocationObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool headsetPositionCompensation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		protected bool playAreaCursorCollided;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		protected bool headsetOutOfBounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject playAreaCursor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected GameObject[] playAreaCursorBoundaries;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected BoxCollider playAreaCursorCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Renderer[] boundaryRenderers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GameObject playAreaCursorValidChild;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject playAreaCursorInvalidChild;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected int btmRightInner;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected int btmLeftInner;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected int topLeftInner;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected int topRightInner;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected int btmRightOuter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected int btmLeftOuter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected int topLeftOuter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected int topRightOuter;

		public event PlayAreaCursorEventHandler PlayAreaCursorStartCollision
		{
			[Address(RVA = "0xB4381C", Offset = "0xB4381C", VA = "0xB4381C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F374", Offset = "0x67F374")]
			add
			{
			}
			[Address(RVA = "0xB43908", Offset = "0xB43908", VA = "0xB43908")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F384", Offset = "0x67F384")]
			remove
			{
			}
		}

		public event PlayAreaCursorEventHandler PlayAreaCursorEndCollision
		{
			[Address(RVA = "0xB439F4", Offset = "0xB439F4", VA = "0xB439F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F394", Offset = "0x67F394")]
			add
			{
			}
			[Address(RVA = "0xB43AE0", Offset = "0xB43AE0", VA = "0xB43AE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F3A4", Offset = "0x67F3A4")]
			remove
			{
			}
		}

		[Address(RVA = "0xB43BCC", Offset = "0xB43BCC", VA = "0xB43BCC", Slot = "4")]
		public virtual void OnPlayAreaCursorStartCollision(PlayAreaCursorEventArgs e)
		{
		}

		[Address(RVA = "0xB43BF0", Offset = "0xB43BF0", VA = "0xB43BF0", Slot = "5")]
		public virtual void OnPlayAreaCursorEndCollision(PlayAreaCursorEventArgs e)
		{
		}

		[Address(RVA = "0xB43C14", Offset = "0xB43C14", VA = "0xB43C14", Slot = "6")]
		public virtual bool HasCollided()
		{
			return default(bool);
		}

		[Address(RVA = "0xB43C34", Offset = "0xB43C34", VA = "0xB43C34", Slot = "7")]
		public virtual void SetHeadsetPositionCompensation(bool state)
		{
		}

		[Address(RVA = "0xB43C40", Offset = "0xB43C40", VA = "0xB43C40", Slot = "8")]
		public virtual void SetPlayAreaCursorCollision(bool state, [Optional] Collider collider)
		{
		}

		[Address(RVA = "0xB43CB4", Offset = "0xB43CB4", VA = "0xB43CB4", Slot = "9")]
		public virtual void SetMaterialColor(Color color, bool validity)
		{
		}

		[Address(RVA = "0xB43E74", Offset = "0xB43E74", VA = "0xB43E74", Slot = "10")]
		public virtual void SetPlayAreaCursorTransform(Vector3 location)
		{
		}

		[Address(RVA = "0xB44358", Offset = "0xB44358", VA = "0xB44358", Slot = "11")]
		public virtual void ToggleState(bool state)
		{
		}

		[Address(RVA = "0xB44420", Offset = "0xB44420", VA = "0xB44420", Slot = "12")]
		public virtual bool IsActive()
		{
			return default(bool);
		}

		[Address(RVA = "0xB444C0", Offset = "0xB444C0", VA = "0xB444C0", Slot = "13")]
		public virtual GameObject GetPlayAreaContainer()
		{
			return null;
		}

		[Address(RVA = "0xB444C8", Offset = "0xB444C8", VA = "0xB444C8", Slot = "14")]
		public virtual void ToggleVisibility(bool state)
		{
		}

		[Address(RVA = "0xB44674", Offset = "0xB44674", VA = "0xB44674", Slot = "15")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xB446DC", Offset = "0xB446DC", VA = "0xB446DC", Slot = "16")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB44794", Offset = "0xB44794", VA = "0xB44794", Slot = "17")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB44848", Offset = "0xB44848", VA = "0xB44848", Slot = "18")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xB448B0", Offset = "0xB448B0", VA = "0xB448B0", Slot = "19")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xB44908", Offset = "0xB44908", VA = "0xB44908", Slot = "20")]
		protected virtual PlayAreaCursorEventArgs SetEventPayload(Collider collider)
		{
			return default(PlayAreaCursorEventArgs);
		}

		[Address(RVA = "0xB44910", Offset = "0xB44910", VA = "0xB44910", Slot = "21")]
		protected virtual void EmitEvent(Collider collider)
		{
		}

		[Address(RVA = "0xB449D8", Offset = "0xB449D8", VA = "0xB449D8", Slot = "22")]
		protected virtual void InitPlayAreaCursor()
		{
		}

		[Address(RVA = "0xB45000", Offset = "0xB45000", VA = "0xB45000", Slot = "23")]
		protected virtual void SetCursorColor(GameObject cursorObject, Color color)
		{
		}

		[Address(RVA = "0xB451DC", Offset = "0xB451DC", VA = "0xB451DC", Slot = "24")]
		protected virtual void ToggleValidPlayAreaState(bool state)
		{
		}

		[Address(RVA = "0xB452F0", Offset = "0xB452F0", VA = "0xB452F0", Slot = "25")]
		protected virtual string GeneratePlayAreaCursorName()
		{
			return null;
		}

		[Address(RVA = "0xB45428", Offset = "0xB45428", VA = "0xB45428", Slot = "26")]
		protected virtual void GeneratePlayAreaCursorFromPrefab(Vector3[] cursorDrawVertices)
		{
		}

		[Address(RVA = "0xB45AA4", Offset = "0xB45AA4", VA = "0xB45AA4", Slot = "27")]
		protected virtual void GeneratePlayAreaCursor(Vector3[] cursorDrawVertices)
		{
		}

		[Address(RVA = "0xB46664", Offset = "0xB46664", VA = "0xB46664", Slot = "28")]
		protected virtual void DrawPlayAreaCursorBoundary(int index, float left, float right, float top, float bottom, float thickness, Vector3 localPosition)
		{
		}

		[Address(RVA = "0xB46AB4", Offset = "0xB46AB4", VA = "0xB46AB4", Slot = "29")]
		protected virtual void CreateCursorCollider(GameObject cursor)
		{
		}

		[Address(RVA = "0xB46BD4", Offset = "0xB46BD4", VA = "0xB46BD4", Slot = "30")]
		protected virtual void UpdateCollider()
		{
		}

		[Address(RVA = "0xB46D98", Offset = "0xB46D98", VA = "0xB46D98")]
		public VRTK_PlayAreaCursor()
		{
		}
	}
	public class VRTK_PlayAreaCollider : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_PlayAreaCursor parent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_PolicyList targetListPolicy;

		[Address(RVA = "0xB434C8", Offset = "0xB434C8", VA = "0xB434C8", Slot = "4")]
		public virtual void SetParent(VRTK_PlayAreaCursor setParent)
		{
		}

		[Address(RVA = "0xB434D0", Offset = "0xB434D0", VA = "0xB434D0", Slot = "5")]
		public virtual void SetIgnoreTarget([Optional] VRTK_PolicyList list)
		{
		}

		[Address(RVA = "0xB434D8", Offset = "0xB434D8", VA = "0xB434D8", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xB43580", Offset = "0xB43580", VA = "0xB43580", Slot = "7")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0xB436A8", Offset = "0xB436A8", VA = "0xB436A8", Slot = "8")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xB43778", Offset = "0xB43778", VA = "0xB43778", Slot = "9")]
		protected virtual bool ValidTarget(Collider collider)
		{
			return default(bool);
		}

		[Address(RVA = "0xB43814", Offset = "0xB43814", VA = "0xB43814")]
		public VRTK_PlayAreaCollider()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656B34", Offset = "0x656B34")]
	public class VRTK_Pointer : VRTK_DestinationMarker
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668578", Offset = "0x668578")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668578", Offset = "0x668578")]
		public VRTK_BasePointerRenderer pointerRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6685D8", Offset = "0x6685D8")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668610", Offset = "0x668610")]
		public bool holdButtonToActivate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668648", Offset = "0x668648")]
		public bool activateOnEnable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668680", Offset = "0x668680")]
		public float activationDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6686B8", Offset = "0x6686B8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6686B8", Offset = "0x6686B8")]
		public VRTK_ControllerEvents.ButtonAlias selectionButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668718", Offset = "0x668718")]
		public bool selectOnPress;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668750", Offset = "0x668750")]
		public float selectionDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668788", Offset = "0x668788")]
		public float selectAfterHoverDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6687C0", Offset = "0x6687C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6687C0", Offset = "0x6687C0")]
		public bool interactWithObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668820", Offset = "0x668820")]
		public bool grabToPointerTip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668858", Offset = "0x668858")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668858", Offset = "0x668858")]
		public GameObject attachedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6688B8", Offset = "0x6688B8")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6688F0", Offset = "0x6688F0")]
		public VRTK_InteractUse interactUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668928", Offset = "0x668928")]
		public Transform customOrigin;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668960", Offset = "0x668960")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x668960", Offset = "0x668960")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x668960", Offset = "0x668960")]
		public VRTK_ControllerEvents controller;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedActivationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected VRTK_ControllerEvents.ButtonAlias subscribedSelectionButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool currentSelectOnPress;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected float activateDelayTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float selectDelayTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected float hoverDurationTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected int currentActivationState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected bool willDeactivate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		protected bool wasActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_ControllerReference controllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected VRTK_InteractableObject pointerInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected Collider currentCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected bool canClickOnHover;

		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		protected bool activationButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
		protected bool selectionButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x123")]
		protected bool attemptControllerSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected VRTK_StraightPointerRenderer autogenPointerRenderer;

		public event ControllerInteractionEventHandler ActivationButtonPressed
		{
			[Address(RVA = "0x9418C0", Offset = "0x9418C0", VA = "0x9418C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F3B4", Offset = "0x67F3B4")]
			add
			{
			}
			[Address(RVA = "0x9419AC", Offset = "0x9419AC", VA = "0x9419AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F3C4", Offset = "0x67F3C4")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ActivationButtonReleased
		{
			[Address(RVA = "0x941A98", Offset = "0x941A98", VA = "0x941A98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F3D4", Offset = "0x67F3D4")]
			add
			{
			}
			[Address(RVA = "0x941B84", Offset = "0x941B84", VA = "0x941B84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F3E4", Offset = "0x67F3E4")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler SelectionButtonPressed
		{
			[Address(RVA = "0x941C70", Offset = "0x941C70", VA = "0x941C70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F3F4", Offset = "0x67F3F4")]
			add
			{
			}
			[Address(RVA = "0x941D5C", Offset = "0x941D5C", VA = "0x941D5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F404", Offset = "0x67F404")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler SelectionButtonReleased
		{
			[Address(RVA = "0x941E48", Offset = "0x941E48", VA = "0x941E48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F414", Offset = "0x67F414")]
			add
			{
			}
			[Address(RVA = "0x941F34", Offset = "0x941F34", VA = "0x941F34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F424", Offset = "0x67F424")]
			remove
			{
			}
		}

		public event DestinationMarkerEventHandler PointerStateValid
		{
			[Address(RVA = "0x942020", Offset = "0x942020", VA = "0x942020")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F434", Offset = "0x67F434")]
			add
			{
			}
			[Address(RVA = "0x94210C", Offset = "0x94210C", VA = "0x94210C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F444", Offset = "0x67F444")]
			remove
			{
			}
		}

		public event DestinationMarkerEventHandler PointerStateInvalid
		{
			[Address(RVA = "0x9421F8", Offset = "0x9421F8", VA = "0x9421F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F454", Offset = "0x67F454")]
			add
			{
			}
			[Address(RVA = "0x9422E4", Offset = "0x9422E4", VA = "0x9422E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F464", Offset = "0x67F464")]
			remove
			{
			}
		}

		[Address(RVA = "0x9423D0", Offset = "0x9423D0", VA = "0x9423D0", Slot = "15")]
		public virtual void OnActivationButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x94241C", Offset = "0x94241C", VA = "0x94241C", Slot = "16")]
		public virtual void OnActivationButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x942468", Offset = "0x942468", VA = "0x942468", Slot = "17")]
		public virtual void OnSelectionButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9424B4", Offset = "0x9424B4", VA = "0x9424B4", Slot = "18")]
		public virtual void OnSelectionButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x942500", Offset = "0x942500", VA = "0x942500", Slot = "19")]
		public virtual void OnPointerStateValid()
		{
		}

		[Address(RVA = "0x942568", Offset = "0x942568", VA = "0x942568", Slot = "20")]
		public virtual void OnPointerStateInvalid()
		{
		}

		[Address(RVA = "0x9425D0", Offset = "0x9425D0", VA = "0x9425D0", Slot = "21")]
		public virtual bool IsActivationButtonPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0x9425D8", Offset = "0x9425D8", VA = "0x9425D8", Slot = "22")]
		public virtual bool IsSelectionButtonPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0x9425E0", Offset = "0x9425E0", VA = "0x9425E0", Slot = "23")]
		public virtual void PointerEnter(RaycastHit givenHit)
		{
		}

		[Address(RVA = "0x94294C", Offset = "0x94294C", VA = "0x94294C", Slot = "24")]
		public virtual void PointerExit(RaycastHit givenHit)
		{
		}

		[Address(RVA = "0x942B98", Offset = "0x942B98", VA = "0x942B98", Slot = "25")]
		public virtual bool CanActivate()
		{
			return default(bool);
		}

		[Address(RVA = "0x942BC8", Offset = "0x942BC8", VA = "0x942BC8", Slot = "26")]
		public virtual bool CanSelect()
		{
			return default(bool);
		}

		[Address(RVA = "0x942BF8", Offset = "0x942BF8", VA = "0x942BF8", Slot = "27")]
		public virtual bool IsPointerActive()
		{
			return default(bool);
		}

		[Address(RVA = "0x942C08", Offset = "0x942C08", VA = "0x942C08", Slot = "28")]
		public virtual void ResetActivationTimer(bool forceZero = false)
		{
		}

		[Address(RVA = "0x942C58", Offset = "0x942C58", VA = "0x942C58", Slot = "29")]
		public virtual void ResetSelectionTimer(bool forceZero = false)
		{
		}

		[Address(RVA = "0x942CA8", Offset = "0x942CA8", VA = "0x942CA8", Slot = "30")]
		public virtual void Toggle(bool state)
		{
		}

		[Address(RVA = "0x942DD4", Offset = "0x942DD4", VA = "0x942DD4", Slot = "31")]
		public virtual bool IsStateValid()
		{
			return default(bool);
		}

		[Address(RVA = "0x942E34", Offset = "0x942E34", VA = "0x942E34", Slot = "32")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x942F8C", Offset = "0x942F8C", VA = "0x942F8C", Slot = "12")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x9430E8", Offset = "0x9430E8", VA = "0x9430E8", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x943240", Offset = "0x943240", VA = "0x943240", Slot = "33")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x943384", Offset = "0x943384", VA = "0x943384", Slot = "34")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x9433D4", Offset = "0x9433D4", VA = "0x9433D4", Slot = "35")]
		protected virtual void SetDefaultValues()
		{
		}

		[Address(RVA = "0x943418", Offset = "0x943418", VA = "0x943418", Slot = "36")]
		protected virtual void AttemptControllerSetup()
		{
		}

		[Address(RVA = "0x9434A8", Offset = "0x9434A8", VA = "0x9434A8", Slot = "37")]
		protected virtual void HandleEnabledPointer()
		{
		}

		[Address(RVA = "0x9435E8", Offset = "0x9435E8", VA = "0x9435E8", Slot = "38")]
		protected virtual Quaternion? GetCursorRotation()
		{
			return null;
		}

		[Address(RVA = "0x94373C", Offset = "0x94373C", VA = "0x94373C", Slot = "39")]
		protected virtual bool EnabledPointerRenderer()
		{
			return default(bool);
		}

		[Address(RVA = "0x9437DC", Offset = "0x9437DC", VA = "0x9437DC", Slot = "40")]
		protected virtual bool NoPointerRenderer()
		{
			return default(bool);
		}

		[Address(RVA = "0x943880", Offset = "0x943880", VA = "0x943880", Slot = "41")]
		protected virtual bool CanActivateOnToggleButton(bool state)
		{
			return default(bool);
		}

		[Address(RVA = "0x9438D0", Offset = "0x9438D0", VA = "0x9438D0", Slot = "42")]
		protected virtual bool ControllerRequired()
		{
			return default(bool);
		}

		[Address(RVA = "0x9438F0", Offset = "0x9438F0", VA = "0x9438F0", Slot = "43")]
		protected virtual bool FindController()
		{
			return default(bool);
		}

		[Address(RVA = "0x943C20", Offset = "0x943C20", VA = "0x943C20", Slot = "44")]
		protected virtual void GetInteractUse()
		{
		}

		[Address(RVA = "0x943D50", Offset = "0x943D50", VA = "0x943D50", Slot = "45")]
		protected virtual void SetupController()
		{
		}

		[Address(RVA = "0x943E0C", Offset = "0x943E0C", VA = "0x943E0C", Slot = "46")]
		protected virtual void SetupRenderer()
		{
		}

		[Address(RVA = "0x943F14", Offset = "0x943F14", VA = "0x943F14", Slot = "47")]
		protected virtual VRTK_BasePointerRenderer GeneratePointerRenderer()
		{
			return null;
		}

		[Address(RVA = "0x944068", Offset = "0x944068", VA = "0x944068", Slot = "48")]
		protected virtual bool ButtonMappingIsUndefined(VRTK_ControllerEvents.ButtonAlias givenButton, VRTK_ControllerEvents.ButtonAlias givenSubscribedButton)
		{
			return default(bool);
		}

		[Address(RVA = "0x944080", Offset = "0x944080", VA = "0x944080", Slot = "49")]
		protected virtual void CheckButtonMappingConflict()
		{
		}

		[Address(RVA = "0x944170", Offset = "0x944170", VA = "0x944170", Slot = "50")]
		protected virtual void CheckButtonSubscriptions()
		{
		}

		[Address(RVA = "0x944288", Offset = "0x944288", VA = "0x944288", Slot = "51")]
		protected virtual void SubscribeActivationButton()
		{
		}

		[Address(RVA = "0x9443E4", Offset = "0x9443E4", VA = "0x9443E4", Slot = "52")]
		protected virtual void UnsubscribeActivationButton()
		{
		}

		[Address(RVA = "0x944524", Offset = "0x944524", VA = "0x944524", Slot = "53")]
		protected virtual void PointerActivated()
		{
		}

		[Address(RVA = "0x944574", Offset = "0x944574", VA = "0x944574", Slot = "54")]
		protected virtual void PointerDeactivated()
		{
		}

		[Address(RVA = "0x9445DC", Offset = "0x9445DC", VA = "0x9445DC", Slot = "55")]
		protected virtual void DoActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x944698", Offset = "0x944698", VA = "0x944698", Slot = "56")]
		protected virtual void DoActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x944750", Offset = "0x944750", VA = "0x944750", Slot = "57")]
		protected virtual void SubscribeSelectionButton()
		{
		}

		[Address(RVA = "0x944910", Offset = "0x944910", VA = "0x944910", Slot = "58")]
		protected virtual void UnsubscribeSelectionButton()
		{
		}

		[Address(RVA = "0x944AB0", Offset = "0x944AB0", VA = "0x944AB0", Slot = "59")]
		protected virtual void DoSelectionButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x944B50", Offset = "0x944B50", VA = "0x944B50", Slot = "60")]
		protected virtual void DoSelectionButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x944BF0", Offset = "0x944BF0", VA = "0x944BF0", Slot = "61")]
		protected virtual void SelectionButtonAction(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x944C08", Offset = "0x944C08", VA = "0x944C08", Slot = "62")]
		protected virtual void ExecuteSelectionButtonAction()
		{
		}

		[Address(RVA = "0x944F3C", Offset = "0x944F3C", VA = "0x944F3C", Slot = "63")]
		protected virtual bool CanResetActivationState(bool givenState)
		{
			return default(bool);
		}

		[Address(RVA = "0x944F6C", Offset = "0x944F6C", VA = "0x944F6C", Slot = "64")]
		protected virtual void ManageActivationState(bool state)
		{
		}

		[Address(RVA = "0x944FC4", Offset = "0x944FC4", VA = "0x944FC4", Slot = "65")]
		protected virtual bool PointerActivatesUseAction(VRTK_InteractableObject givenInteractableObject)
		{
			return default(bool);
		}

		[Address(RVA = "0x9450C0", Offset = "0x9450C0", VA = "0x9450C0", Slot = "66")]
		protected virtual void StartUseAction(Transform target)
		{
		}

		[Address(RVA = "0x94529C", Offset = "0x94529C", VA = "0x94529C", Slot = "67")]
		protected virtual void StopUseAction()
		{
		}

		[Address(RVA = "0x9453C0", Offset = "0x9453C0", VA = "0x9453C0", Slot = "68")]
		protected virtual void AttemptUseOnSet(Transform target)
		{
		}

		[Address(RVA = "0x9455A4", Offset = "0x9455A4", VA = "0x9455A4", Slot = "69")]
		protected virtual void SetHoverSelectionTimer(Collider collider)
		{
		}

		[Address(RVA = "0x945654", Offset = "0x945654", VA = "0x945654", Slot = "70")]
		protected virtual void ResetHoverSelectionTimer(Collider collider)
		{
		}

		[Address(RVA = "0x9456E8", Offset = "0x9456E8", VA = "0x9456E8", Slot = "71")]
		protected virtual void CheckHoverSelect()
		{
		}

		[Address(RVA = "0x94575C", Offset = "0x94575C", VA = "0x94575C", Slot = "72")]
		protected virtual DestinationMarkerEventArgs GetStateEventPayload()
		{
			return default(DestinationMarkerEventArgs);
		}

		[Address(RVA = "0x945904", Offset = "0x945904", VA = "0x945904")]
		public VRTK_Pointer()
		{
		}
	}
	public struct BodyPhysicsEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Collider collider;
	}
	public delegate void BodyPhysicsEventHandler(object sender, BodyPhysicsEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656B6C", Offset = "0x656B6C")]
	public class VRTK_BodyPhysics : VRTK_DestinationMarker
	{
		public enum FallingRestrictors
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NoRestriction,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			EitherController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			BothControllers,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AlwaysRestrict
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B270", Offset = "0x65B270")]
		private sealed class <RestoreCollisions>d__178 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject obj;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_BodyPhysics <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x92F8C0", Offset = "0x92F8C0", VA = "0x92F8C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x92F930", Offset = "0x92F930", VA = "0x92F930", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x92DEFC", Offset = "0x92DEFC", VA = "0x92DEFC")]
			[DebuggerHidden]
			public <RestoreCollisions>d__178(int <>1__state)
			{
			}

			[Address(RVA = "0x92F71C", Offset = "0x92F71C", VA = "0x92F71C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x92F720", Offset = "0x92F720", VA = "0x92F720", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x92F8C8", Offset = "0x92F8C8", VA = "0x92F8C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668A30", Offset = "0x668A30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668A30", Offset = "0x668A30")]
		public bool enableBodyCollisions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668A90", Offset = "0x668A90")]
		public bool ignoreGrabbedCollisions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668AC8", Offset = "0x668AC8")]
		public GameObject[] ignoreCollisionsWith;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668B00", Offset = "0x668B00")]
		public float headsetYOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668B38", Offset = "0x668B38")]
		public float movementThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668B70", Offset = "0x668B70")]
		public float playAreaMovementThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668BA8", Offset = "0x668BA8")]
		public int standingHistorySamples;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668BE0", Offset = "0x668BE0")]
		public float leanYThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668C18", Offset = "0x668C18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668C18", Offset = "0x668C18")]
		public float stepUpYOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668C78", Offset = "0x668C78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x668C78", Offset = "0x668C78")]
		public float stepThicknessMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668CD4", Offset = "0x668CD4")]
		public float stepDropThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668D0C", Offset = "0x668D0C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668D0C", Offset = "0x668D0C")]
		public VRTK_CustomRaycast customRaycast;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668D6C", Offset = "0x668D6C")]
		public FallingRestrictors fallRestriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668DA4", Offset = "0x668DA4")]
		public float gravityFallYThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668DDC", Offset = "0x668DDC")]
		public float blinkYThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668E14", Offset = "0x668E14")]
		public float floorHeightTolerance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x668E4C", Offset = "0x668E4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668E4C", Offset = "0x668E4C")]
		public int fallCheckPrecision;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x668EA0", Offset = "0x668EA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668EA0", Offset = "0x668EA0")]
		public VRTK_BasicTeleport teleporter;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668F00", Offset = "0x668F00")]
		public Rigidbody customPlayAreaRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668F38", Offset = "0x668F38")]
		public GameObject customBodyColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x668F70", Offset = "0x668F70")]
		public GameObject customFootColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected Rigidbody bodyRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected GameObject bodyColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected GameObject footColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected CapsuleCollider bodyCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected CapsuleCollider footCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected VRTK_CollisionTracker collisionTracker;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected bool currentBodyCollisionsSetting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected GameObject currentCollidingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected GameObject currentValidFloorObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected float lastFrameFloorY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		protected float hitFloorYDelta;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected bool initialFloorDrop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		protected bool resetPhysicsAfterTeleport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
		protected bool storedCurrentPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18B")]
		protected bool retogglePhysicsOnCanFall;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		protected bool storedRetogglePhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Vector3 lastPlayAreaPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected Vector2 currentStandingPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected List<Vector2> standingPositionHistory;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected float playAreaHeightAdjustment;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		protected float bodyMass;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected float bodyRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		protected float leanForwardLengthAddition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected float playAreaPositionThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		protected float gravityPush;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected int decimalPrecision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		protected bool isFalling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		protected bool isMoving;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		protected bool isLeaning;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1CF")]
		protected bool onGround;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected bool preventSnapToFloor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		protected bool generateRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		protected Vector3 playAreaVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		protected string footColliderContainerNameCheck;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string BODY_COLLIDER_CONTAINER_NAME = "BodyColliderContainer";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string FOOT_COLLIDER_CONTAINER_NAME = "FootColliderContainer";

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		protected bool enableBodyCollisionsStartingValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		protected float fallMinTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		protected HashSet<GameObject> ignoreCollisionsOnGameObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		protected Transform cachedGrabbedObjectTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		protected VRTK_InteractableObject cachedGrabbedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		protected LayerMask defaultIgnoreLayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		protected Coroutine restoreCollisionsRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		protected bool drawDebugGizmo;

		public event BodyPhysicsEventHandler StartFalling
		{
			[Address(RVA = "0x926FFC", Offset = "0x926FFC", VA = "0x926FFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F474", Offset = "0x67F474")]
			add
			{
			}
			[Address(RVA = "0x9270E8", Offset = "0x9270E8", VA = "0x9270E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F484", Offset = "0x67F484")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StopFalling
		{
			[Address(RVA = "0x9271D4", Offset = "0x9271D4", VA = "0x9271D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F494", Offset = "0x67F494")]
			add
			{
			}
			[Address(RVA = "0x9272C0", Offset = "0x9272C0", VA = "0x9272C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F4A4", Offset = "0x67F4A4")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StartMoving
		{
			[Address(RVA = "0x9273AC", Offset = "0x9273AC", VA = "0x9273AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F4B4", Offset = "0x67F4B4")]
			add
			{
			}
			[Address(RVA = "0x927498", Offset = "0x927498", VA = "0x927498")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F4C4", Offset = "0x67F4C4")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StopMoving
		{
			[Address(RVA = "0x927584", Offset = "0x927584", VA = "0x927584")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F4D4", Offset = "0x67F4D4")]
			add
			{
			}
			[Address(RVA = "0x927670", Offset = "0x927670", VA = "0x927670")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F4E4", Offset = "0x67F4E4")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StartColliding
		{
			[Address(RVA = "0x92775C", Offset = "0x92775C", VA = "0x92775C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F4F4", Offset = "0x67F4F4")]
			add
			{
			}
			[Address(RVA = "0x927848", Offset = "0x927848", VA = "0x927848")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F504", Offset = "0x67F504")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StopColliding
		{
			[Address(RVA = "0x927934", Offset = "0x927934", VA = "0x927934")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F514", Offset = "0x67F514")]
			add
			{
			}
			[Address(RVA = "0x927A24", Offset = "0x927A24", VA = "0x927A24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F524", Offset = "0x67F524")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StartLeaning
		{
			[Address(RVA = "0x927B14", Offset = "0x927B14", VA = "0x927B14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F534", Offset = "0x67F534")]
			add
			{
			}
			[Address(RVA = "0x927C04", Offset = "0x927C04", VA = "0x927C04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F544", Offset = "0x67F544")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StopLeaning
		{
			[Address(RVA = "0x927CF4", Offset = "0x927CF4", VA = "0x927CF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F554", Offset = "0x67F554")]
			add
			{
			}
			[Address(RVA = "0x927DE4", Offset = "0x927DE4", VA = "0x927DE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F564", Offset = "0x67F564")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StartTouchingGround
		{
			[Address(RVA = "0x927ED4", Offset = "0x927ED4", VA = "0x927ED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F574", Offset = "0x67F574")]
			add
			{
			}
			[Address(RVA = "0x927FC4", Offset = "0x927FC4", VA = "0x927FC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F584", Offset = "0x67F584")]
			remove
			{
			}
		}

		public event BodyPhysicsEventHandler StopTouchingGround
		{
			[Address(RVA = "0x9280B4", Offset = "0x9280B4", VA = "0x9280B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F594", Offset = "0x67F594")]
			add
			{
			}
			[Address(RVA = "0x9281A4", Offset = "0x9281A4", VA = "0x9281A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F5A4", Offset = "0x67F5A4")]
			remove
			{
			}
		}

		[Address(RVA = "0x928294", Offset = "0x928294", VA = "0x928294", Slot = "15")]
		public virtual bool ArePhysicsEnabled()
		{
			return default(bool);
		}

		[Address(RVA = "0x928338", Offset = "0x928338", VA = "0x928338", Slot = "16")]
		public virtual void ApplyBodyVelocity(Vector3 velocity, bool forcePhysicsOn = false, bool applyMomentum = false)
		{
		}

		[Address(RVA = "0x9284BC", Offset = "0x9284BC", VA = "0x9284BC", Slot = "17")]
		public virtual void ToggleOnGround(bool state)
		{
		}

		[Address(RVA = "0x928550", Offset = "0x928550", VA = "0x928550", Slot = "18")]
		public virtual void TogglePreventSnapToFloor(bool state)
		{
		}

		[Address(RVA = "0x92855C", Offset = "0x92855C", VA = "0x92855C", Slot = "19")]
		public virtual void ForceSnapToFloor()
		{
		}

		[Address(RVA = "0x92859C", Offset = "0x92859C", VA = "0x92859C", Slot = "20")]
		public virtual bool IsFalling()
		{
			return default(bool);
		}

		[Address(RVA = "0x9285A4", Offset = "0x9285A4", VA = "0x9285A4", Slot = "21")]
		public virtual bool IsMoving()
		{
			return default(bool);
		}

		[Address(RVA = "0x9285AC", Offset = "0x9285AC", VA = "0x9285AC", Slot = "22")]
		public virtual bool IsLeaning()
		{
			return default(bool);
		}

		[Address(RVA = "0x9285B4", Offset = "0x9285B4", VA = "0x9285B4", Slot = "23")]
		public virtual bool OnGround()
		{
			return default(bool);
		}

		[Address(RVA = "0x9285BC", Offset = "0x9285BC", VA = "0x9285BC", Slot = "24")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x92867C", Offset = "0x92867C", VA = "0x92867C", Slot = "25")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x92873C", Offset = "0x92873C", VA = "0x92873C", Slot = "26")]
		public virtual void ResetVelocities()
		{
		}

		[Address(RVA = "0x928820", Offset = "0x928820", VA = "0x928820", Slot = "27")]
		public virtual void ResetFalling()
		{
		}

		[Address(RVA = "0x928830", Offset = "0x928830", VA = "0x928830", Slot = "28")]
		public virtual GameObject GetBodyColliderContainer()
		{
			return null;
		}

		[Address(RVA = "0x928838", Offset = "0x928838", VA = "0x928838", Slot = "29")]
		public virtual GameObject GetFootColliderContainer()
		{
			return null;
		}

		[Address(RVA = "0x928840", Offset = "0x928840", VA = "0x928840", Slot = "30")]
		public virtual GameObject GetCurrentCollidingObject()
		{
			return null;
		}

		[Address(RVA = "0x928848", Offset = "0x928848", VA = "0x928848", Slot = "31")]
		public virtual void ResetIgnoredCollisions()
		{
		}

		[Address(RVA = "0x928A8C", Offset = "0x928A8C", VA = "0x928A8C", Slot = "32")]
		public virtual bool SweepCollision(Vector3 direction, float maxDistance)
		{
			return default(bool);
		}

		[Address(RVA = "0x928EC8", Offset = "0x928EC8", VA = "0x928EC8", Slot = "33")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x928F30", Offset = "0x928F30", VA = "0x928F30", Slot = "12")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x9290A8", Offset = "0x9290A8", VA = "0x9290A8", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x92911C", Offset = "0x92911C", VA = "0x92911C", Slot = "34")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x929184", Offset = "0x929184", VA = "0x929184", Slot = "35")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0x9292A0", Offset = "0x9292A0", VA = "0x9292A0", Slot = "36")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x9293AC", Offset = "0x9293AC", VA = "0x9293AC", Slot = "37")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0x929468", Offset = "0x929468", VA = "0x929468", Slot = "38")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Address(RVA = "0x929524", Offset = "0x929524", VA = "0x929524", Slot = "39")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0x9295BC", Offset = "0x9295BC", VA = "0x9295BC", Slot = "40")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Address(RVA = "0x929764", Offset = "0x929764", VA = "0x929764", Slot = "41")]
		protected virtual bool CheckValidCollision(GameObject checkObject)
		{
			return default(bool);
		}

		[Address(RVA = "0x929850", Offset = "0x929850", VA = "0x929850", Slot = "42")]
		protected virtual bool CheckExistingCollision(GameObject checkObject)
		{
			return default(bool);
		}

		[Address(RVA = "0x929910", Offset = "0x929910", VA = "0x929910", Slot = "43")]
		protected virtual void SetupPlayArea()
		{
		}

		[Address(RVA = "0x929AA0", Offset = "0x929AA0", VA = "0x929AA0", Slot = "44")]
		protected virtual void SetupHeadset()
		{
		}

		[Address(RVA = "0x929BAC", Offset = "0x929BAC", VA = "0x929BAC", Slot = "45")]
		protected virtual void ManageCollisionListeners(bool state)
		{
		}

		[Address(RVA = "0x92A578", Offset = "0x92A578", VA = "0x92A578", Slot = "46")]
		protected virtual void CollisionTracker_TriggerExit(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x92A58C", Offset = "0x92A58C", VA = "0x92A58C", Slot = "47")]
		protected virtual void CollisionTracker_TriggerEnter(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x92A5A0", Offset = "0x92A5A0", VA = "0x92A5A0", Slot = "48")]
		protected virtual void CollisionTracker_CollisionExit(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x92A5B4", Offset = "0x92A5B4", VA = "0x92A5B4", Slot = "49")]
		protected virtual void CollisionTracker_CollisionEnter(object sender, CollisionTrackerEventArgs e)
		{
		}

		[Address(RVA = "0x92A5C8", Offset = "0x92A5C8", VA = "0x92A5C8", Slot = "50")]
		protected virtual void OnStartFalling(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A5F4", Offset = "0x92A5F4", VA = "0x92A5F4", Slot = "51")]
		protected virtual void OnStopFalling(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A620", Offset = "0x92A620", VA = "0x92A620", Slot = "52")]
		protected virtual void OnStartMoving(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A64C", Offset = "0x92A64C", VA = "0x92A64C", Slot = "53")]
		protected virtual void OnStopMoving(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A678", Offset = "0x92A678", VA = "0x92A678", Slot = "54")]
		protected virtual void OnStartColliding(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A6A4", Offset = "0x92A6A4", VA = "0x92A6A4", Slot = "55")]
		protected virtual void OnStopColliding(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A6D0", Offset = "0x92A6D0", VA = "0x92A6D0", Slot = "56")]
		protected virtual void OnStartLeaning(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A6FC", Offset = "0x92A6FC", VA = "0x92A6FC", Slot = "57")]
		protected virtual void OnStopLeaning(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A728", Offset = "0x92A728", VA = "0x92A728", Slot = "58")]
		protected virtual void OnStartTouchingGround(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A754", Offset = "0x92A754", VA = "0x92A754", Slot = "59")]
		protected virtual void OnStopTouchingGround(BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x92A780", Offset = "0x92A780", VA = "0x92A780", Slot = "60")]
		protected virtual BodyPhysicsEventArgs SetBodyPhysicsEvent(GameObject target, Collider collider)
		{
			return default(BodyPhysicsEventArgs);
		}

		[Address(RVA = "0x92A78C", Offset = "0x92A78C", VA = "0x92A78C", Slot = "61")]
		protected virtual void CalculateVelocity()
		{
		}

		[Address(RVA = "0x92A8F4", Offset = "0x92A8F4", VA = "0x92A8F4", Slot = "62")]
		protected virtual void TogglePhysics(bool state)
		{
		}

		[Address(RVA = "0x92AA4C", Offset = "0x92AA4C", VA = "0x92AA4C", Slot = "63")]
		protected virtual void ManageFalling()
		{
		}

		[Address(RVA = "0x92AAA0", Offset = "0x92AAA0", VA = "0x92AAA0", Slot = "64")]
		protected virtual void CheckBodyCollisionsSetting()
		{
		}

		[Address(RVA = "0x92AADC", Offset = "0x92AADC", VA = "0x92AADC", Slot = "65")]
		protected virtual void CheckFalling()
		{
		}

		[Address(RVA = "0x92AB8C", Offset = "0x92AB8C", VA = "0x92AB8C", Slot = "66")]
		protected virtual void SetCurrentStandingPosition()
		{
		}

		[Address(RVA = "0x92AD64", Offset = "0x92AD64", VA = "0x92AD64", Slot = "67")]
		protected virtual void SetIsMoving(Vector2 currentHeadsetPosition)
		{
		}

		[Address(RVA = "0x92AF3C", Offset = "0x92AF3C", VA = "0x92AF3C", Slot = "68")]
		protected virtual void CheckLean()
		{
		}

		[Address(RVA = "0x92B480", Offset = "0x92B480", VA = "0x92B480", Slot = "69")]
		protected virtual void CalculateLean(Vector3 startPosition, float forwardLength, float originalRayDistance)
		{
		}

		[Address(RVA = "0x92B7E4", Offset = "0x92B7E4", VA = "0x92B7E4", Slot = "70")]
		protected virtual void UpdateStandingPosition(Vector2 currentHeadsetPosition)
		{
		}

		[Address(RVA = "0x92BA0C", Offset = "0x92BA0C", VA = "0x92BA0C", Slot = "71")]
		protected virtual void CheckHeadsetMovement()
		{
		}

		[Address(RVA = "0x92BBE4", Offset = "0x92BBE4", VA = "0x92BBE4", Slot = "72")]
		protected virtual void MovementChanged(bool movementState)
		{
		}

		[Address(RVA = "0x92BC4C", Offset = "0x92BC4C", VA = "0x92BC4C", Slot = "73")]
		protected virtual void EnableDropToFloor()
		{
		}

		[Address(RVA = "0x92BD88", Offset = "0x92BD88", VA = "0x92BD88", Slot = "74")]
		protected virtual void DisableDropToFloor()
		{
		}

		[Address(RVA = "0x92BE58", Offset = "0x92BE58", VA = "0x92BE58", Slot = "75")]
		protected virtual void Teleported(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x92BEB0", Offset = "0x92BEB0", VA = "0x92BEB0", Slot = "76")]
		protected virtual void EnableBodyPhysics()
		{
		}

		[Address(RVA = "0x92BF78", Offset = "0x92BF78", VA = "0x92BF78", Slot = "77")]
		protected virtual void DisableBodyPhysics()
		{
		}

		[Address(RVA = "0x92C038", Offset = "0x92C038", VA = "0x92C038", Slot = "78")]
		protected virtual void SetupIgnoredCollisions()
		{
		}

		[Address(RVA = "0x92C20C", Offset = "0x92C20C", VA = "0x92C20C", Slot = "79")]
		protected virtual void ManagePhysicsCollider(Collider collider, bool state)
		{
		}

		[Address(RVA = "0x92C304", Offset = "0x92C304", VA = "0x92C304", Slot = "80")]
		protected virtual void CheckStepUpCollision(Collision collision)
		{
		}

		[Address(RVA = "0x92C88C", Offset = "0x92C88C", VA = "0x92C88C", Slot = "81")]
		protected virtual GameObject CreateColliderContainer(string name, Transform parent)
		{
			return null;
		}

		[Address(RVA = "0x92CB54", Offset = "0x92CB54", VA = "0x92CB54", Slot = "82")]
		protected virtual GameObject InstantiateColliderContainer(GameObject objectToClone, string name, Transform parent)
		{
			return null;
		}

		[Address(RVA = "0x92CC94", Offset = "0x92CC94", VA = "0x92CC94", Slot = "83")]
		protected virtual void GenerateRigidbody()
		{
		}

		[Address(RVA = "0x92CF9C", Offset = "0x92CF9C", VA = "0x92CF9C", Slot = "84")]
		protected virtual bool HasExistingRigidbody()
		{
			return default(bool);
		}

		[Address(RVA = "0x92D098", Offset = "0x92D098", VA = "0x92D098", Slot = "85")]
		protected virtual CapsuleCollider GenerateCapsuleCollider(GameObject parent, float setRadius)
		{
			return null;
		}

		[Address(RVA = "0x92D180", Offset = "0x92D180", VA = "0x92D180", Slot = "86")]
		protected virtual void GenerateBodyCollider()
		{
		}

		[Address(RVA = "0x92D340", Offset = "0x92D340", VA = "0x92D340", Slot = "87")]
		protected virtual void GenerateFootCollider()
		{
		}

		[Address(RVA = "0x92D4E8", Offset = "0x92D4E8", VA = "0x92D4E8", Slot = "88")]
		protected virtual void CreateCollider()
		{
		}

		[Address(RVA = "0x92D76C", Offset = "0x92D76C", VA = "0x92D76C", Slot = "89")]
		protected virtual void DestroyCollider()
		{
		}

		[Address(RVA = "0x92D884", Offset = "0x92D884", VA = "0x92D884", Slot = "90")]
		protected virtual void UpdateCollider()
		{
		}

		[Address(RVA = "0x92DC40", Offset = "0x92DC40", VA = "0x92DC40", Slot = "91")]
		protected virtual float CalculateStepUpYOffset()
		{
			return default(float);
		}

		[Address(RVA = "0x92DC4C", Offset = "0x92DC4C", VA = "0x92DC4C", Slot = "92")]
		protected virtual void InitControllerListeners(GameObject mappedController, bool state)
		{
		}

		[Address(RVA = "0x92DE64", Offset = "0x92DE64", VA = "0x92DE64", Slot = "93")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67F5B4", Offset = "0x67F5B4")]
		protected virtual IEnumerator RestoreCollisions(GameObject obj)
		{
			return null;
		}

		[Address(RVA = "0x92DF28", Offset = "0x92DF28", VA = "0x92DF28", Slot = "94")]
		protected virtual void IgnoreCollisions(Collider[] colliders, bool state)
		{
		}

		[Address(RVA = "0x92E0F8", Offset = "0x92E0F8", VA = "0x92E0F8", Slot = "95")]
		protected virtual void OnGrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x92E1D4", Offset = "0x92E1D4", VA = "0x92E1D4", Slot = "96")]
		protected virtual void OnUngrabObject(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x92E284", Offset = "0x92E284", VA = "0x92E284", Slot = "97")]
		protected virtual bool FloorIsGrabbedObject(RaycastHit collidedObj)
		{
			return default(bool);
		}

		[Address(RVA = "0x92E3E0", Offset = "0x92E3E0", VA = "0x92E3E0", Slot = "98")]
		protected virtual bool FloorHeightChanged(float currentY)
		{
			return default(bool);
		}

		[Address(RVA = "0x92E464", Offset = "0x92E464", VA = "0x92E464", Slot = "99")]
		protected virtual bool ValidDrop(bool rayHit, RaycastHit rayCollidedWith, float floorY)
		{
			return default(bool);
		}

		[Address(RVA = "0x92E5D0", Offset = "0x92E5D0", VA = "0x92E5D0", Slot = "100")]
		protected virtual float ControllerHeightCheck(GameObject controllerObj)
		{
			return default(float);
		}

		[Address(RVA = "0x92E78C", Offset = "0x92E78C", VA = "0x92E78C", Slot = "101")]
		protected virtual bool ControllersStillOverPreviousFloor()
		{
			return default(bool);
		}

		[Address(RVA = "0x92E980", Offset = "0x92E980", VA = "0x92E980", Slot = "102")]
		protected virtual void SnapToNearestFloor()
		{
		}

		[Address(RVA = "0x92ECE8", Offset = "0x92ECE8", VA = "0x92ECE8", Slot = "103")]
		protected virtual bool PreventFall(float hitFloorY)
		{
			return default(bool);
		}

		[Address(RVA = "0x92ED58", Offset = "0x92ED58", VA = "0x92ED58", Slot = "104")]
		protected virtual void HandleFall(float hitFloorY, RaycastHit rayCollidedWith)
		{
		}

		[Address(RVA = "0x92EF20", Offset = "0x92EF20", VA = "0x92EF20", Slot = "105")]
		protected virtual void StartFall(GameObject targetFloor)
		{
		}

		[Address(RVA = "0x92F060", Offset = "0x92F060", VA = "0x92F060", Slot = "106")]
		protected virtual void StopFall()
		{
		}

		[Address(RVA = "0x92F134", Offset = "0x92F134", VA = "0x92F134", Slot = "107")]
		protected virtual void GravityFall(RaycastHit rayCollidedWith)
		{
		}

		[Address(RVA = "0x92F214", Offset = "0x92F214", VA = "0x92F214", Slot = "108")]
		protected virtual void TeleportFall(float floorY, RaycastHit rayCollidedWith)
		{
		}

		[Address(RVA = "0x92F484", Offset = "0x92F484", VA = "0x92F484", Slot = "109")]
		protected virtual void ApplyBodyMomentum(bool applyMomentum = false)
		{
		}

		[Address(RVA = "0x92F5A8", Offset = "0x92F5A8", VA = "0x92F5A8")]
		public VRTK_BodyPhysics()
		{
		}
	}
	public struct HeadsetCollisionEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Collider collider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform currentTransform;
	}
	public delegate void HeadsetCollisionEventHandler(object sender, HeadsetCollisionEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656BA4", Offset = "0x656BA4")]
	public class VRTK_HeadsetCollision : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669048", Offset = "0x669048")]
		public bool ignoreTriggerColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669080", Offset = "0x669080")]
		public float colliderRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6690B8", Offset = "0x6690B8")]
		public VRTK_PolicyList targetListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669110", Offset = "0x669110")]
		public bool headsetColliding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669120", Offset = "0x669120")]
		public Collider collidingWith;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_HeadsetCollider headsetColliderScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject headsetColliderContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected bool generateCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		protected bool generateRigidbody;

		public event HeadsetCollisionEventHandler HeadsetCollisionDetect
		{
			[Address(RVA = "0xA82D98", Offset = "0xA82D98", VA = "0xA82D98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F618", Offset = "0x67F618")]
			add
			{
			}
			[Address(RVA = "0xA82E84", Offset = "0xA82E84", VA = "0xA82E84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F628", Offset = "0x67F628")]
			remove
			{
			}
		}

		public event HeadsetCollisionEventHandler HeadsetCollisionEnded
		{
			[Address(RVA = "0xA82F70", Offset = "0xA82F70", VA = "0xA82F70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F638", Offset = "0x67F638")]
			add
			{
			}
			[Address(RVA = "0xA8305C", Offset = "0xA8305C", VA = "0xA8305C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F648", Offset = "0x67F648")]
			remove
			{
			}
		}

		[Address(RVA = "0xA83148", Offset = "0xA83148", VA = "0xA83148", Slot = "4")]
		public virtual void OnHeadsetCollisionDetect(HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0xA83174", Offset = "0xA83174", VA = "0xA83174", Slot = "5")]
		public virtual void OnHeadsetCollisionEnded(HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0xA831A0", Offset = "0xA831A0", VA = "0xA831A0", Slot = "6")]
		public virtual bool IsColliding()
		{
			return default(bool);
		}

		[Address(RVA = "0xA831A8", Offset = "0xA831A8", VA = "0xA831A8", Slot = "7")]
		public virtual GameObject GetHeadsetColliderContainer()
		{
			return null;
		}

		[Address(RVA = "0xA831B0", Offset = "0xA831B0", VA = "0xA831B0", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA83218", Offset = "0xA83218", VA = "0xA83218", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA83300", Offset = "0xA83300", VA = "0xA83300", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA833F8", Offset = "0xA833F8", VA = "0xA833F8", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA83460", Offset = "0xA83460", VA = "0xA83460", Slot = "12")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA8369C", Offset = "0xA8369C", VA = "0xA8369C", Slot = "13")]
		protected virtual void CreateHeadsetColliderContainer()
		{
		}

		[Address(RVA = "0xA83968", Offset = "0xA83968", VA = "0xA83968", Slot = "14")]
		protected virtual void SetupHeadset()
		{
		}

		[Address(RVA = "0xA83CB8", Offset = "0xA83CB8", VA = "0xA83CB8", Slot = "15")]
		protected virtual void TearDownHeadset()
		{
		}

		[Address(RVA = "0xA83EB4", Offset = "0xA83EB4", VA = "0xA83EB4")]
		public VRTK_HeadsetCollision()
		{
		}
	}
	public class VRTK_HeadsetCollider : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_HeadsetCollision parent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_PolicyList targetListPolicy;

		[Address(RVA = "0xA82798", Offset = "0xA82798", VA = "0xA82798", Slot = "4")]
		public virtual void SetParent(GameObject setParent)
		{
		}

		[Address(RVA = "0xA82808", Offset = "0xA82808", VA = "0xA82808", Slot = "5")]
		public virtual void SetIgnoreTarget([Optional] VRTK_PolicyList list)
		{
		}

		[Address(RVA = "0xA82810", Offset = "0xA82810", VA = "0xA82810", Slot = "6")]
		public virtual void EndCollision(Collider collider)
		{
		}

		[Address(RVA = "0xA82940", Offset = "0xA82940", VA = "0xA82940", Slot = "7")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0xA82AE8", Offset = "0xA82AE8", VA = "0xA82AE8", Slot = "8")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xA82BBC", Offset = "0xA82BBC", VA = "0xA82BBC", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA82CD0", Offset = "0xA82CD0", VA = "0xA82CD0", Slot = "10")]
		protected virtual HeadsetCollisionEventArgs SetHeadsetCollisionEvent(Collider collider, Transform currentTransform)
		{
			return default(HeadsetCollisionEventArgs);
		}

		[Address(RVA = "0xA82CDC", Offset = "0xA82CDC", VA = "0xA82CDC", Slot = "11")]
		protected virtual bool ValidTarget(Transform target)
		{
			return default(bool);
		}

		[Address(RVA = "0xA82D90", Offset = "0xA82D90", VA = "0xA82D90")]
		public VRTK_HeadsetCollider()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656BDC", Offset = "0x656BDC")]
	public class VRTK_HeadsetCollisionFade : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x669130", Offset = "0x669130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669130", Offset = "0x669130")]
		public float timeTillFade;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669190", Offset = "0x669190")]
		public float blinkTransitionSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6691C8", Offset = "0x6691C8")]
		public Color fadeColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669200", Offset = "0x669200")]
		public VRTK_PolicyList targetListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x669238", Offset = "0x669238")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669238", Offset = "0x669238")]
		public VRTK_HeadsetCollision headsetCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669298", Offset = "0x669298")]
		public VRTK_HeadsetFade headsetFade;

		[Address(RVA = "0xA83EC8", Offset = "0xA83EC8", VA = "0xA83EC8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA84298", Offset = "0xA84298", VA = "0xA84298", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA843A4", Offset = "0xA843A4", VA = "0xA843A4", Slot = "6")]
		protected virtual void OnHeadsetCollisionDetect(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0xA84430", Offset = "0xA84430", VA = "0xA84430", Slot = "7")]
		protected virtual void OnHeadsetCollisionEnded(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0xA844EC", Offset = "0xA844EC", VA = "0xA844EC", Slot = "8")]
		protected virtual void StartFade()
		{
		}

		[Address(RVA = "0xA84558", Offset = "0xA84558", VA = "0xA84558", Slot = "9")]
		protected virtual bool ValidTarget(Collider target)
		{
			return default(bool);
		}

		[Address(RVA = "0xA8460C", Offset = "0xA8460C", VA = "0xA8460C")]
		public VRTK_HeadsetCollisionFade()
		{
		}
	}
	public struct HeadsetControllerAwareEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RaycastHit raycastHit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerReference controllerReference;
	}
	public delegate void HeadsetControllerAwareEventHandler(object sender, HeadsetControllerAwareEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656C14", Offset = "0x656C14")]
	public class VRTK_HeadsetControllerAware : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6692D0", Offset = "0x6692D0")]
		public bool trackLeftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669308", Offset = "0x669308")]
		public bool trackRightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669340", Offset = "0x669340")]
		public float controllerGlanceRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669378", Offset = "0x669378")]
		public Transform customRightControllerOrigin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6693B0", Offset = "0x6693B0")]
		public Transform customLeftControllerOrigin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6693E8", Offset = "0x6693E8")]
		public VRTK_CustomRaycast customRaycast;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject leftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject rightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool leftControllerObscured;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		protected bool rightControllerObscured;

		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		protected bool leftControllerLastState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		protected bool rightControllerLastState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected bool leftControllerGlance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		protected bool rightControllerGlance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
		protected bool leftControllerGlanceLastState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
		protected bool rightControllerGlanceLastState;

		public event HeadsetControllerAwareEventHandler ControllerObscured
		{
			[Address(RVA = "0xE9BBD8", Offset = "0xE9BBD8", VA = "0xE9BBD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F658", Offset = "0x67F658")]
			add
			{
			}
			[Address(RVA = "0xE9BCC4", Offset = "0xE9BCC4", VA = "0xE9BCC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F668", Offset = "0x67F668")]
			remove
			{
			}
		}

		public event HeadsetControllerAwareEventHandler ControllerUnobscured
		{
			[Address(RVA = "0xE9BDB0", Offset = "0xE9BDB0", VA = "0xE9BDB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F678", Offset = "0x67F678")]
			add
			{
			}
			[Address(RVA = "0xE9BE9C", Offset = "0xE9BE9C", VA = "0xE9BE9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F688", Offset = "0x67F688")]
			remove
			{
			}
		}

		public event HeadsetControllerAwareEventHandler ControllerGlanceEnter
		{
			[Address(RVA = "0xE9BF88", Offset = "0xE9BF88", VA = "0xE9BF88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F698", Offset = "0x67F698")]
			add
			{
			}
			[Address(RVA = "0xE9C074", Offset = "0xE9C074", VA = "0xE9C074")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F6A8", Offset = "0x67F6A8")]
			remove
			{
			}
		}

		public event HeadsetControllerAwareEventHandler ControllerGlanceExit
		{
			[Address(RVA = "0xE9C160", Offset = "0xE9C160", VA = "0xE9C160")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F6B8", Offset = "0x67F6B8")]
			add
			{
			}
			[Address(RVA = "0xE9C24C", Offset = "0xE9C24C", VA = "0xE9C24C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F6C8", Offset = "0x67F6C8")]
			remove
			{
			}
		}

		[Address(RVA = "0xE9C338", Offset = "0xE9C338", VA = "0xE9C338", Slot = "4")]
		public virtual void OnControllerObscured(HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xE9C38C", Offset = "0xE9C38C", VA = "0xE9C38C", Slot = "5")]
		public virtual void OnControllerUnobscured(HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xE9C3E0", Offset = "0xE9C3E0", VA = "0xE9C3E0", Slot = "6")]
		public virtual void OnControllerGlanceEnter(HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xE9C434", Offset = "0xE9C434", VA = "0xE9C434", Slot = "7")]
		public virtual void OnControllerGlanceExit(HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0xE9C488", Offset = "0xE9C488", VA = "0xE9C488", Slot = "8")]
		public virtual bool LeftControllerObscured()
		{
			return default(bool);
		}

		[Address(RVA = "0xE9C490", Offset = "0xE9C490", VA = "0xE9C490", Slot = "9")]
		public virtual bool RightControllerObscured()
		{
			return default(bool);
		}

		[Address(RVA = "0xE9C498", Offset = "0xE9C498", VA = "0xE9C498", Slot = "10")]
		public virtual bool LeftControllerGlanced()
		{
			return default(bool);
		}

		[Address(RVA = "0xE9C4A0", Offset = "0xE9C4A0", VA = "0xE9C4A0", Slot = "11")]
		public virtual bool RightControllerGlanced()
		{
			return default(bool);
		}

		[Address(RVA = "0xE9C4A8", Offset = "0xE9C4A8", VA = "0xE9C4A8", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xE9C510", Offset = "0xE9C510", VA = "0xE9C510", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xE9C59C", Offset = "0xE9C59C", VA = "0xE9C59C", Slot = "14")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xE9C5A4", Offset = "0xE9C5A4", VA = "0xE9C5A4", Slot = "15")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xE9C60C", Offset = "0xE9C60C", VA = "0xE9C60C", Slot = "16")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xE9C6C4", Offset = "0xE9C6C4", VA = "0xE9C6C4", Slot = "17")]
		protected virtual HeadsetControllerAwareEventArgs SetHeadsetControllerAwareEvent(RaycastHit raycastHit, VRTK_ControllerReference controllerReference)
		{
			return default(HeadsetControllerAwareEventArgs);
		}

		[Address(RVA = "0xE9C6FC", Offset = "0xE9C6FC", VA = "0xE9C6FC", Slot = "18")]
		protected virtual void RayCastToController(GameObject controller, Transform customDestination, ref bool obscured, ref bool lastState)
		{
		}

		[Address(RVA = "0xE9C960", Offset = "0xE9C960", VA = "0xE9C960", Slot = "19")]
		protected virtual void ObscuredStateChanged(GameObject controller, bool obscured, RaycastHit hitInfo)
		{
		}

		[Address(RVA = "0xE9CB14", Offset = "0xE9CB14", VA = "0xE9CB14", Slot = "20")]
		protected virtual void CheckHeadsetView(GameObject controller, Transform customDestination, ref bool controllerGlance, ref bool controllerGlanceLastState)
		{
		}

		[Address(RVA = "0xE9CDE0", Offset = "0xE9CDE0", VA = "0xE9CDE0", Slot = "21")]
		protected virtual void GlanceStateChanged(GameObject controller, bool glance)
		{
		}

		[Address(RVA = "0xE9CF68", Offset = "0xE9CF68", VA = "0xE9CF68")]
		public VRTK_HeadsetControllerAware()
		{
		}
	}
	public struct HeadsetFadeEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timeTillComplete;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform currentTransform;
	}
	public delegate void HeadsetFadeEventHandler(object sender, HeadsetFadeEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656C4C", Offset = "0x656C4C")]
	public class VRTK_HeadsetFade : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool isTransitioning;

		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		protected bool isFaded;

		public event HeadsetFadeEventHandler HeadsetFadeStart
		{
			[Address(RVA = "0xE9CF84", Offset = "0xE9CF84", VA = "0xE9CF84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F6D8", Offset = "0x67F6D8")]
			add
			{
			}
			[Address(RVA = "0xE9D070", Offset = "0xE9D070", VA = "0xE9D070")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F6E8", Offset = "0x67F6E8")]
			remove
			{
			}
		}

		public event HeadsetFadeEventHandler HeadsetFadeComplete
		{
			[Address(RVA = "0xE9D15C", Offset = "0xE9D15C", VA = "0xE9D15C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F6F8", Offset = "0x67F6F8")]
			add
			{
			}
			[Address(RVA = "0xE9D248", Offset = "0xE9D248", VA = "0xE9D248")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F708", Offset = "0x67F708")]
			remove
			{
			}
		}

		public event HeadsetFadeEventHandler HeadsetUnfadeStart
		{
			[Address(RVA = "0xE9D334", Offset = "0xE9D334", VA = "0xE9D334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F718", Offset = "0x67F718")]
			add
			{
			}
			[Address(RVA = "0xE9D420", Offset = "0xE9D420", VA = "0xE9D420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F728", Offset = "0x67F728")]
			remove
			{
			}
		}

		public event HeadsetFadeEventHandler HeadsetUnfadeComplete
		{
			[Address(RVA = "0xE9D50C", Offset = "0xE9D50C", VA = "0xE9D50C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F738", Offset = "0x67F738")]
			add
			{
			}
			[Address(RVA = "0xE9D5F8", Offset = "0xE9D5F8", VA = "0xE9D5F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F748", Offset = "0x67F748")]
			remove
			{
			}
		}

		[Address(RVA = "0xE9D6E4", Offset = "0xE9D6E4", VA = "0xE9D6E4", Slot = "4")]
		public virtual void OnHeadsetFadeStart(HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0xE9D710", Offset = "0xE9D710", VA = "0xE9D710", Slot = "5")]
		public virtual void OnHeadsetFadeComplete(HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0xE9D73C", Offset = "0xE9D73C", VA = "0xE9D73C", Slot = "6")]
		public virtual void OnHeadsetUnfadeStart(HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0xE9D768", Offset = "0xE9D768", VA = "0xE9D768", Slot = "7")]
		public virtual void OnHeadsetUnfadeComplete(HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0xE9D794", Offset = "0xE9D794", VA = "0xE9D794", Slot = "8")]
		public virtual bool IsFaded()
		{
			return default(bool);
		}

		[Address(RVA = "0xE9D79C", Offset = "0xE9D79C", VA = "0xE9D79C", Slot = "9")]
		public virtual bool IsTransitioning()
		{
			return default(bool);
		}

		[Address(RVA = "0xE9D7A4", Offset = "0xE9D7A4", VA = "0xE9D7A4", Slot = "10")]
		public virtual void Fade(Color color, float duration)
		{
		}

		[Address(RVA = "0xE9D8C4", Offset = "0xE9D8C4", VA = "0xE9D8C4", Slot = "11")]
		public virtual void Unfade(float duration)
		{
		}

		[Address(RVA = "0xE9D9EC", Offset = "0xE9D9EC", VA = "0xE9D9EC", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xE9DA54", Offset = "0xE9DA54", VA = "0xE9DA54", Slot = "13")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xE9DAC8", Offset = "0xE9DAC8", VA = "0xE9DAC8", Slot = "14")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xE9DB30", Offset = "0xE9DB30", VA = "0xE9DB30", Slot = "15")]
		protected virtual HeadsetFadeEventArgs SetHeadsetFadeEvent(Transform currentTransform, float duration)
		{
			return default(HeadsetFadeEventArgs);
		}

		[Address(RVA = "0xE9DB38", Offset = "0xE9DB38", VA = "0xE9DB38", Slot = "16")]
		protected virtual void FadeComplete()
		{
		}

		[Address(RVA = "0xE9DB90", Offset = "0xE9DB90", VA = "0xE9DB90", Slot = "17")]
		protected virtual void UnfadeComplete()
		{
		}

		[Address(RVA = "0xE9DBE4", Offset = "0xE9DBE4", VA = "0xE9DBE4")]
		public VRTK_HeadsetFade()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656C84", Offset = "0x656C84")]
	public class VRTK_HipTracking : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6694A0", Offset = "0x6694A0")]
		public float HeadOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6694D8", Offset = "0x6694D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6694D8", Offset = "0x6694D8")]
		public Transform headOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669538", Offset = "0x669538")]
		public Transform ReferenceUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform playerHead;

		[Address(RVA = "0xE9E308", Offset = "0xE9E308", VA = "0xE9E308", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xE9E370", Offset = "0xE9E370", VA = "0xE9E370", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xE9E41C", Offset = "0xE9E41C", VA = "0xE9E41C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xE9E484", Offset = "0xE9E484", VA = "0xE9E484", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Address(RVA = "0xE9E894", Offset = "0xE9E894", VA = "0xE9E894")]
		public VRTK_HipTracking()
		{
		}
	}
	public struct PositionRewindEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 collidedPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 resetPosition;
	}
	public delegate void PositionRewindEventHandler(object sender, PositionRewindEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656CBC", Offset = "0x656CBC")]
	public class VRTK_PositionRewind : MonoBehaviour
	{
		public enum CollisionDetectors
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HeadsetOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			BodyOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HeadsetAndBody
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x669570", Offset = "0x669570")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669570", Offset = "0x669570")]
		public CollisionDetectors collisionDetector;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6695D0", Offset = "0x6695D0")]
		public bool ignoreTriggerColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669608", Offset = "0x669608")]
		public float rewindDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669640", Offset = "0x669640")]
		public float pushbackDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669678", Offset = "0x669678")]
		public float crouchThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6696B0", Offset = "0x6696B0")]
		public float crouchRewindThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6696E8", Offset = "0x6696E8")]
		public VRTK_PolicyList targetListPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x669720", Offset = "0x669720")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669720", Offset = "0x669720")]
		public VRTK_BodyPhysics bodyPhysics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669780", Offset = "0x669780")]
		public VRTK_HeadsetCollision headsetCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Vector3 lastGoodStandingPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 lastGoodHeadsetPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float highestHeadsetY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected float lastPlayAreaY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected bool lastGoodPositionSet;

		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		protected bool hasCollided;

		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		protected bool isColliding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		protected bool isRewinding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float collideTimer;

		public event PositionRewindEventHandler PositionRewindToSafe
		{
			[Address(RVA = "0x9468DC", Offset = "0x9468DC", VA = "0x9468DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F758", Offset = "0x67F758")]
			add
			{
			}
			[Address(RVA = "0x9469C8", Offset = "0x9469C8", VA = "0x9469C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F768", Offset = "0x67F768")]
			remove
			{
			}
		}

		[Address(RVA = "0x946AB4", Offset = "0x946AB4", VA = "0x946AB4", Slot = "4")]
		public virtual void OnPositionRewindToSafe(PositionRewindEventArgs e)
		{
		}

		[Address(RVA = "0x946AF8", Offset = "0x946AF8", VA = "0x946AF8", Slot = "5")]
		public virtual void SetLastGoodPosition()
		{
		}

		[Address(RVA = "0x946BF8", Offset = "0x946BF8", VA = "0x946BF8", Slot = "6")]
		public virtual void RewindPosition()
		{
		}

		[Address(RVA = "0x946EB0", Offset = "0x946EB0", VA = "0x946EB0", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x946F14", Offset = "0x946F14", VA = "0x946F14", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x947068", Offset = "0x947068", VA = "0x947068", Slot = "9")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x94707C", Offset = "0x94707C", VA = "0x94707C", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0x9470E0", Offset = "0x9470E0", VA = "0x9470E0", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x947150", Offset = "0x947150", VA = "0x947150", Slot = "12")]
		protected virtual PositionRewindEventArgs SetEventPayload(Vector3 previousPosition)
		{
			return default(PositionRewindEventArgs);
		}

		[Address(RVA = "0x9471B0", Offset = "0x9471B0", VA = "0x9471B0", Slot = "13")]
		protected virtual bool CrouchThresholdReached()
		{
			return default(bool);
		}

		[Address(RVA = "0x94723C", Offset = "0x94723C", VA = "0x94723C", Slot = "14")]
		protected virtual void SetHighestHeadsetY()
		{
		}

		[Address(RVA = "0x9472BC", Offset = "0x9472BC", VA = "0x9472BC", Slot = "15")]
		protected virtual void UpdateLastGoodPosition()
		{
		}

		[Address(RVA = "0x94734C", Offset = "0x94734C", VA = "0x94734C", Slot = "16")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0x9473FC", Offset = "0x9473FC", VA = "0x9473FC", Slot = "17")]
		protected virtual void StartCollision(GameObject target, Collider collider)
		{
		}

		[Address(RVA = "0x947488", Offset = "0x947488", VA = "0x947488", Slot = "18")]
		protected virtual void EndCollision(Collider collider)
		{
		}

		[Address(RVA = "0x947534", Offset = "0x947534", VA = "0x947534", Slot = "19")]
		protected virtual bool BodyCollisionsEnabled()
		{
			return default(bool);
		}

		[Address(RVA = "0x9475D0", Offset = "0x9475D0", VA = "0x9475D0", Slot = "20")]
		protected virtual bool CanRewind()
		{
			return default(bool);
		}

		[Address(RVA = "0x9476A0", Offset = "0x9476A0", VA = "0x9476A0", Slot = "21")]
		protected virtual void DoPositionRewind()
		{
		}

		[Address(RVA = "0x9476F0", Offset = "0x9476F0", VA = "0x9476F0", Slot = "22")]
		protected virtual bool HeadsetListen()
		{
			return default(bool);
		}

		[Address(RVA = "0x947704", Offset = "0x947704", VA = "0x947704", Slot = "23")]
		protected virtual bool BodyListen()
		{
			return default(bool);
		}

		[Address(RVA = "0x947718", Offset = "0x947718", VA = "0x947718", Slot = "24")]
		protected virtual void ManageListeners(bool state)
		{
		}

		[Address(RVA = "0x947AE0", Offset = "0x947AE0", VA = "0x947AE0")]
		private void StartColliding(object sender, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x947AFC", Offset = "0x947AFC", VA = "0x947AFC")]
		private void StopColliding(object sender, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x947B10", Offset = "0x947B10", VA = "0x947B10", Slot = "25")]
		protected virtual void HeadsetCollisionDetect(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0x947B60", Offset = "0x947B60", VA = "0x947B60", Slot = "26")]
		protected virtual void HeadsetCollisionEnded(object sender, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0x947B78", Offset = "0x947B78", VA = "0x947B78")]
		public VRTK_PositionRewind()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656CF4", Offset = "0x656CF4")]
	public class VRTK_UICanvas : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B280", Offset = "0x65B280")]
		private sealed class <CreateDraggablePanel>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Canvas canvas;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2 canvasSize;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xA40BD0", Offset = "0xA40BD0", VA = "0xA40BD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xA40C40", Offset = "0xA40C40", VA = "0xA40C40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xA3FDA4", Offset = "0xA3FDA4", VA = "0xA3FDA4")]
			[DebuggerHidden]
			public <CreateDraggablePanel>d__13(int <>1__state)
			{
			}

			[Address(RVA = "0xA406C8", Offset = "0xA406C8", VA = "0xA406C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xA406CC", Offset = "0xA406CC", VA = "0xA406CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xA40BD8", Offset = "0xA40BD8", VA = "0xA40BD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6697C8", Offset = "0x6697C8")]
		public bool clickOnPointerCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669800", Offset = "0x669800")]
		public float autoActivateWithinDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected BoxCollider canvasBoxCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Rigidbody canvasRigidBody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Coroutine draggablePanelCreation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string CANVAS_DRAGGABLE_PANEL = "VRTK_UICANVAS_DRAGGABLE_PANEL";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string ACTIVATOR_FRONT_TRIGGER_GAMEOBJECT = "VRTK_UICANVAS_ACTIVATOR_FRONT_TRIGGER";

		[Address(RVA = "0xA3F290", Offset = "0xA3F290", VA = "0xA3F290", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA3F29C", Offset = "0xA3F29C", VA = "0xA3F29C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA3F2A8", Offset = "0xA3F2A8", VA = "0xA3F2A8", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA3F2B4", Offset = "0xA3F2B4", VA = "0xA3F2B4", Slot = "7")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xA3F3F0", Offset = "0xA3F3F0", VA = "0xA3F3F0", Slot = "8")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xA3F49C", Offset = "0xA3F49C", VA = "0xA3F49C", Slot = "9")]
		protected virtual void SetupCanvas()
		{
		}

		[Address(RVA = "0xA3FD08", Offset = "0xA3FD08", VA = "0xA3FD08", Slot = "10")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67F778", Offset = "0x67F778")]
		protected virtual IEnumerator CreateDraggablePanel(Canvas canvas, Vector2 canvasSize)
		{
			return null;
		}

		[Address(RVA = "0xA3FDD0", Offset = "0xA3FDD0", VA = "0xA3FDD0", Slot = "11")]
		protected virtual void CreateActivator(Canvas canvas, Vector2 canvasSize)
		{
		}

		[Address(RVA = "0xA402B4", Offset = "0xA402B4", VA = "0xA402B4", Slot = "12")]
		protected virtual void RemoveCanvas()
		{
		}

		[Address(RVA = "0xA406C0", Offset = "0xA406C0", VA = "0xA406C0")]
		public VRTK_UICanvas()
		{
		}
	}
	public class VRTK_UIPointerAutoActivator : MonoBehaviour
	{
		[Address(RVA = "0xA463B0", Offset = "0xA463B0", VA = "0xA463B0", Slot = "4")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xA464F8", Offset = "0xA464F8", VA = "0xA464F8", Slot = "5")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xA465F4", Offset = "0xA465F4", VA = "0xA465F4")]
		public VRTK_UIPointerAutoActivator()
		{
		}
	}
	public struct UIDraggableItemEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject target;
	}
	public delegate void UIDraggableItemEventHandler(object sender, UIDraggableItemEventArgs e);
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x656D2C", Offset = "0x656D2C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656D2C", Offset = "0x656D2C")]
	public class VRTK_UIDraggableItem : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IEndDragHandler
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669838", Offset = "0x669838")]
		public bool restrictToDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669870", Offset = "0x669870")]
		public bool restrictToOriginalCanvas;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6698A8", Offset = "0x6698A8")]
		public float forwardOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6698E0", Offset = "0x6698E0")]
		public GameObject validDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RectTransform dragTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 startPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Quaternion startRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject startDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform startParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Canvas startCanvas;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected CanvasGroup canvasGroup;

		public event UIDraggableItemEventHandler DraggableItemDropped
		{
			[Address(RVA = "0xA40C48", Offset = "0xA40C48", VA = "0xA40C48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F7DC", Offset = "0x67F7DC")]
			add
			{
			}
			[Address(RVA = "0xA40D34", Offset = "0xA40D34", VA = "0xA40D34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F7EC", Offset = "0x67F7EC")]
			remove
			{
			}
		}

		public event UIDraggableItemEventHandler DraggableItemReset
		{
			[Address(RVA = "0xA40E20", Offset = "0xA40E20", VA = "0xA40E20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F7FC", Offset = "0x67F7FC")]
			add
			{
			}
			[Address(RVA = "0xA40F0C", Offset = "0xA40F0C", VA = "0xA40F0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F80C", Offset = "0x67F80C")]
			remove
			{
			}
		}

		[Address(RVA = "0xA40FF8", Offset = "0xA40FF8", VA = "0xA40FF8", Slot = "7")]
		public virtual void OnDraggableItemDropped(UIDraggableItemEventArgs e)
		{
		}

		[Address(RVA = "0xA4101C", Offset = "0xA4101C", VA = "0xA4101C", Slot = "8")]
		public virtual void OnDraggableItemReset(UIDraggableItemEventArgs e)
		{
		}

		[Address(RVA = "0xA41040", Offset = "0xA41040", VA = "0xA41040", Slot = "9")]
		public virtual void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Address(RVA = "0xA412B0", Offset = "0xA412B0", VA = "0xA412B0", Slot = "10")]
		public virtual void OnDrag(PointerEventData eventData)
		{
		}

		[Address(RVA = "0xA412C0", Offset = "0xA412C0", VA = "0xA412C0", Slot = "11")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Address(RVA = "0xA417C4", Offset = "0xA417C4", VA = "0xA417C4", Slot = "12")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA41A34", Offset = "0xA41A34", VA = "0xA41A34", Slot = "13")]
		protected virtual VRTK_UIPointer GetPointer(PointerEventData eventData)
		{
			return null;
		}

		[Address(RVA = "0xA41B28", Offset = "0xA41B28", VA = "0xA41B28", Slot = "14")]
		protected virtual void SetDragPosition(PointerEventData eventData)
		{
		}

		[Address(RVA = "0xA41ED8", Offset = "0xA41ED8", VA = "0xA41ED8", Slot = "15")]
		protected virtual void ResetElement()
		{
		}

		[Address(RVA = "0xA41FEC", Offset = "0xA41FEC", VA = "0xA41FEC", Slot = "16")]
		protected virtual UIDraggableItemEventArgs SetEventPayload(GameObject target)
		{
			return default(UIDraggableItemEventArgs);
		}

		[Address(RVA = "0xA41FF4", Offset = "0xA41FF4", VA = "0xA41FF4")]
		public VRTK_UIDraggableItem()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656DB4", Offset = "0x656DB4")]
	public class VRTK_UIDropZone : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_UIDraggableItem droppableItem;

		[Address(RVA = "0xA42008", Offset = "0xA42008", VA = "0xA42008", Slot = "6")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Address(RVA = "0xA4213C", Offset = "0xA4213C", VA = "0xA4213C", Slot = "7")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Address(RVA = "0xA421CC", Offset = "0xA421CC", VA = "0xA421CC")]
		public VRTK_UIDropZone()
		{
		}
	}
	public struct UIPointerEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool isActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject currentTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject previousTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RaycastResult raycastResult;
	}
	public delegate void UIPointerEventHandler(object sender, UIPointerEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656DEC", Offset = "0x656DEC")]
	public class VRTK_UIPointer : MonoBehaviour
	{
		public enum ActivationMethods
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HoldButton,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ToggleButton,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AlwaysOn
		}

		public enum ClickMethods
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ClickOnButtonUp,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ClickOnButtonDown
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x669910", Offset = "0x669910")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669910", Offset = "0x669910")]
		public VRTK_ControllerEvents.ButtonAlias activationButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669970", Offset = "0x669970")]
		public ActivationMethods activationMode;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6699A8", Offset = "0x6699A8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6699A8", Offset = "0x6699A8")]
		public VRTK_ControllerEvents.ButtonAlias selectionButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669A08", Offset = "0x669A08")]
		public ClickMethods clickMethod;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669A40", Offset = "0x669A40")]
		public bool attemptClickOnDeactivate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669A78", Offset = "0x669A78")]
		public float clickAfterHoverDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x669AB0", Offset = "0x669AB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669AB0", Offset = "0x669AB0")]
		public float maximumLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669B10", Offset = "0x669B10")]
		public GameObject attachedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669B48", Offset = "0x669B48")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669B80", Offset = "0x669B80")]
		public Transform customOrigin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x669BB8", Offset = "0x669BB8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x669BB8", Offset = "0x669BB8")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x669BB8", Offset = "0x669BB8")]
		public VRTK_ControllerEvents controller;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x669C28", Offset = "0x669C28")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x669C28", Offset = "0x669C28")]
		public Transform pointerOriginTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669C74", Offset = "0x669C74")]
		public PointerEventData pointerEventData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669C84", Offset = "0x669C84")]
		public GameObject hoveringElement;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669C94", Offset = "0x669C94")]
		public GameObject controllerRenderModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669CA4", Offset = "0x669CA4")]
		public float hoverDurationTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669CB4", Offset = "0x669CB4")]
		public bool canClickOnHover;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669CC4", Offset = "0x669CC4")]
		public GameObject autoActivatingCanvas;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x669CD4", Offset = "0x669CD4")]
		public bool collisionClick;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Dictionary<int, float> pointerLengths;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool pointerClicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool beamEnabledState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool lastPointerPressState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		protected bool lastPointerClickState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected GameObject currentTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected SDK_BaseController.ControllerHand cachedAttachedHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Transform cachedPointerAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected EventSystem cachedEventSystem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected VRTK_VRInputModule cachedVRInputModule;

		public event ControllerInteractionEventHandler ActivationButtonPressed
		{
			[Address(RVA = "0xA43444", Offset = "0xA43444", VA = "0xA43444")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F81C", Offset = "0x67F81C")]
			add
			{
			}
			[Address(RVA = "0xA43530", Offset = "0xA43530", VA = "0xA43530")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F82C", Offset = "0x67F82C")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler ActivationButtonReleased
		{
			[Address(RVA = "0xA4361C", Offset = "0xA4361C", VA = "0xA4361C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F83C", Offset = "0x67F83C")]
			add
			{
			}
			[Address(RVA = "0xA43708", Offset = "0xA43708", VA = "0xA43708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F84C", Offset = "0x67F84C")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler SelectionButtonPressed
		{
			[Address(RVA = "0xA437F4", Offset = "0xA437F4", VA = "0xA437F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F85C", Offset = "0x67F85C")]
			add
			{
			}
			[Address(RVA = "0xA438E0", Offset = "0xA438E0", VA = "0xA438E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F86C", Offset = "0x67F86C")]
			remove
			{
			}
		}

		public event ControllerInteractionEventHandler SelectionButtonReleased
		{
			[Address(RVA = "0xA439CC", Offset = "0xA439CC", VA = "0xA439CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F87C", Offset = "0x67F87C")]
			add
			{
			}
			[Address(RVA = "0xA43AB8", Offset = "0xA43AB8", VA = "0xA43AB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F88C", Offset = "0x67F88C")]
			remove
			{
			}
		}

		public event UIPointerEventHandler UIPointerElementEnter
		{
			[Address(RVA = "0xA43BA4", Offset = "0xA43BA4", VA = "0xA43BA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F89C", Offset = "0x67F89C")]
			add
			{
			}
			[Address(RVA = "0xA43C90", Offset = "0xA43C90", VA = "0xA43C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F8AC", Offset = "0x67F8AC")]
			remove
			{
			}
		}

		public event UIPointerEventHandler UIPointerElementExit
		{
			[Address(RVA = "0xA43D7C", Offset = "0xA43D7C", VA = "0xA43D7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F8BC", Offset = "0x67F8BC")]
			add
			{
			}
			[Address(RVA = "0xA43E68", Offset = "0xA43E68", VA = "0xA43E68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F8CC", Offset = "0x67F8CC")]
			remove
			{
			}
		}

		public event UIPointerEventHandler UIPointerElementClick
		{
			[Address(RVA = "0xA43F54", Offset = "0xA43F54", VA = "0xA43F54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F8DC", Offset = "0x67F8DC")]
			add
			{
			}
			[Address(RVA = "0xA44040", Offset = "0xA44040", VA = "0xA44040")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F8EC", Offset = "0x67F8EC")]
			remove
			{
			}
		}

		public event UIPointerEventHandler UIPointerElementDragStart
		{
			[Address(RVA = "0xA4412C", Offset = "0xA4412C", VA = "0xA4412C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F8FC", Offset = "0x67F8FC")]
			add
			{
			}
			[Address(RVA = "0xA44218", Offset = "0xA44218", VA = "0xA44218")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F90C", Offset = "0x67F90C")]
			remove
			{
			}
		}

		public event UIPointerEventHandler UIPointerElementDragEnd
		{
			[Address(RVA = "0xA44304", Offset = "0xA44304", VA = "0xA44304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F91C", Offset = "0x67F91C")]
			add
			{
			}
			[Address(RVA = "0xA443F0", Offset = "0xA443F0", VA = "0xA443F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F92C", Offset = "0x67F92C")]
			remove
			{
			}
		}

		[Address(RVA = "0xA431B4", Offset = "0xA431B4", VA = "0xA431B4")]
		public static float GetPointerLength(int pointerId)
		{
			return default(float);
		}

		[Address(RVA = "0xA444DC", Offset = "0xA444DC", VA = "0xA444DC", Slot = "4")]
		public virtual void OnUIPointerElementEnter(UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xA445F0", Offset = "0xA445F0", VA = "0xA445F0", Slot = "5")]
		public virtual void OnUIPointerElementExit(UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xA44728", Offset = "0xA44728", VA = "0xA44728", Slot = "6")]
		public virtual void OnUIPointerElementClick(UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xA447F8", Offset = "0xA447F8", VA = "0xA447F8", Slot = "7")]
		public virtual void OnUIPointerElementDragStart(UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xA44844", Offset = "0xA44844", VA = "0xA44844", Slot = "8")]
		public virtual void OnUIPointerElementDragEnd(UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xA44890", Offset = "0xA44890", VA = "0xA44890", Slot = "9")]
		public virtual void OnActivationButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA448DC", Offset = "0xA448DC", VA = "0xA448DC", Slot = "10")]
		public virtual void OnActivationButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA44928", Offset = "0xA44928", VA = "0xA44928", Slot = "11")]
		public virtual void OnSelectionButtonPressed(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA44974", Offset = "0xA44974", VA = "0xA44974", Slot = "12")]
		public virtual void OnSelectionButtonReleased(ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA449C0", Offset = "0xA449C0", VA = "0xA449C0", Slot = "13")]
		public virtual UIPointerEventArgs SetUIPointerEvent(RaycastResult currentRaycastResult, GameObject currentTarget, [Optional] GameObject lastTarget)
		{
			return default(UIPointerEventArgs);
		}

		[Address(RVA = "0xA44A54", Offset = "0xA44A54", VA = "0xA44A54", Slot = "14")]
		public virtual VRTK_VRInputModule SetEventSystem(EventSystem eventSystem)
		{
			return null;
		}

		[Address(RVA = "0xA44C60", Offset = "0xA44C60", VA = "0xA44C60", Slot = "15")]
		public virtual void RemoveEventSystem()
		{
		}

		[Address(RVA = "0xA44E08", Offset = "0xA44E08", VA = "0xA44E08", Slot = "16")]
		public virtual bool PointerActive()
		{
			return default(bool);
		}

		[Address(RVA = "0xA44F78", Offset = "0xA44F78", VA = "0xA44F78", Slot = "17")]
		public virtual bool IsActivationButtonPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0xA45028", Offset = "0xA45028", VA = "0xA45028", Slot = "18")]
		public virtual bool IsSelectionButtonPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0xA450D8", Offset = "0xA450D8", VA = "0xA450D8", Slot = "19")]
		public virtual bool ValidClick(bool checkLastClick, bool lastClickState = false)
		{
			return default(bool);
		}

		[Address(RVA = "0xA45160", Offset = "0xA45160", VA = "0xA45160", Slot = "20")]
		public virtual Vector3 GetOriginPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA45210", Offset = "0xA45210", VA = "0xA45210", Slot = "21")]
		public virtual Vector3 GetOriginForward()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA452C0", Offset = "0xA452C0", VA = "0xA452C0", Slot = "22")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA45328", Offset = "0xA45328", VA = "0xA45328", Slot = "23")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA456B0", Offset = "0xA456B0", VA = "0xA456B0", Slot = "24")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA45940", Offset = "0xA45940", VA = "0xA45940", Slot = "25")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA459A8", Offset = "0xA459A8", VA = "0xA459A8", Slot = "26")]
		protected virtual void LateUpdate()
		{
		}

		[Address(RVA = "0xA45BD0", Offset = "0xA45BD0", VA = "0xA45BD0", Slot = "27")]
		protected virtual void DoActivationButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA45C58", Offset = "0xA45C58", VA = "0xA45C58", Slot = "28")]
		protected virtual void DoActivationButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA45CE0", Offset = "0xA45CE0", VA = "0xA45CE0", Slot = "29")]
		protected virtual void DoSelectionButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA45D68", Offset = "0xA45D68", VA = "0xA45D68", Slot = "30")]
		protected virtual void DoSelectionButtonReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xA45DF0", Offset = "0xA45DF0", VA = "0xA45DF0", Slot = "31")]
		protected virtual VRTK_ControllerReference GetControllerReference([Optional] GameObject reference)
		{
			return null;
		}

		[Address(RVA = "0xA45EE8", Offset = "0xA45EE8", VA = "0xA45EE8", Slot = "32")]
		protected virtual Transform GetPointerOriginTransform()
		{
			return null;
		}

		[Address(RVA = "0xA46108", Offset = "0xA46108", VA = "0xA46108", Slot = "33")]
		protected virtual void ResetHoverTimer()
		{
		}

		[Address(RVA = "0xA46114", Offset = "0xA46114", VA = "0xA46114", Slot = "34")]
		protected virtual void ConfigureEventSystem()
		{
		}

		[Address(RVA = "0xA4631C", Offset = "0xA4631C", VA = "0xA4631C")]
		public VRTK_UIPointer()
		{
		}
	}
	[Serializable]
	public class VRTK_ControllerElementHighlighters
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669D74", Offset = "0x669D74")]
		public VRTK_BaseHighlighter body;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669DAC", Offset = "0x669DAC")]
		public VRTK_BaseHighlighter trigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669DE4", Offset = "0x669DE4")]
		public VRTK_BaseHighlighter gripLeft;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669E1C", Offset = "0x669E1C")]
		public VRTK_BaseHighlighter gripRight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669E54", Offset = "0x669E54")]
		public VRTK_BaseHighlighter touchpad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669E8C", Offset = "0x669E8C")]
		public VRTK_BaseHighlighter touchpadTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669EC4", Offset = "0x669EC4")]
		public VRTK_BaseHighlighter buttonOne;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669EFC", Offset = "0x669EFC")]
		public VRTK_BaseHighlighter buttonTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669F34", Offset = "0x669F34")]
		public VRTK_BaseHighlighter systemMenu;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669F6C", Offset = "0x669F6C")]
		public VRTK_BaseHighlighter startMenu;

		[Address(RVA = "0x9367C8", Offset = "0x9367C8", VA = "0x9367C8")]
		public VRTK_ControllerElementHighlighters()
		{
		}
	}
	[Serializable]
	public class VRTK_ControllerModelElementPaths
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669FA4", Offset = "0x669FA4")]
		public string bodyModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x669FDC", Offset = "0x669FDC")]
		public string triggerModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A014", Offset = "0x66A014")]
		public string leftGripModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A04C", Offset = "0x66A04C")]
		public string rightGripModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A084", Offset = "0x66A084")]
		public string touchpadModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A0BC", Offset = "0x66A0BC")]
		public string touchpadTwoModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A0F4", Offset = "0x66A0F4")]
		public string buttonOneModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A12C", Offset = "0x66A12C")]
		public string buttonTwoModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A164", Offset = "0x66A164")]
		public string systemMenuModelPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A19C", Offset = "0x66A19C")]
		public string startMenuModelPath;

		[Address(RVA = "0xA6B408", Offset = "0xA6B408", VA = "0xA6B408")]
		public VRTK_ControllerModelElementPaths()
		{
		}
	}
	public abstract class VRTK_ObjectFollow : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A1D4", Offset = "0x66A1D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A1D4", Offset = "0x66A1D4")]
		public GameObject gameObjectToFollow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A234", Offset = "0x66A234")]
		public GameObject gameObjectToChange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A26C", Offset = "0x66A26C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A26C", Offset = "0x66A26C")]
		public bool followsPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A2CC", Offset = "0x66A2CC")]
		public bool smoothsPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A304", Offset = "0x66A304")]
		public float maxAllowedPerFrameDistanceDifference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A33C", Offset = "0x66A33C")]
		private Vector3 <targetPosition>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A34C", Offset = "0x66A34C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A34C", Offset = "0x66A34C")]
		public bool followsRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A3AC", Offset = "0x66A3AC")]
		public bool smoothsRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A3E4", Offset = "0x66A3E4")]
		public float maxAllowedPerFrameAngleDifference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A41C", Offset = "0x66A41C")]
		private Quaternion <targetRotation>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A42C", Offset = "0x66A42C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A42C", Offset = "0x66A42C")]
		public bool followsScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A48C", Offset = "0x66A48C")]
		public bool smoothsScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A4C4", Offset = "0x66A4C4")]
		public float maxAllowedPerFrameSizeDifference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A4FC", Offset = "0x66A4FC")]
		private Vector3 <targetScale>k__BackingField;

		public Vector3 targetPosition
		{
			[Address(RVA = "0xB3CE34", Offset = "0xB3CE34", VA = "0xB3CE34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F93C", Offset = "0x67F93C")]
			get
			{
				return default(Vector3);
			}
			[Address(RVA = "0xB3CE40", Offset = "0xB3CE40", VA = "0xB3CE40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F94C", Offset = "0x67F94C")]
			private set
			{
			}
		}

		public Quaternion targetRotation
		{
			[Address(RVA = "0xB3CE4C", Offset = "0xB3CE4C", VA = "0xB3CE4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F95C", Offset = "0x67F95C")]
			get
			{
				return default(Quaternion);
			}
			[Address(RVA = "0xB3CE58", Offset = "0xB3CE58", VA = "0xB3CE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F96C", Offset = "0x67F96C")]
			private set
			{
			}
		}

		public Vector3 targetScale
		{
			[Address(RVA = "0xB3CE64", Offset = "0xB3CE64", VA = "0xB3CE64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F97C", Offset = "0x67F97C")]
			get
			{
				return default(Vector3);
			}
			[Address(RVA = "0xB3CE70", Offset = "0xB3CE70", VA = "0xB3CE70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F98C", Offset = "0x67F98C")]
			private set
			{
			}
		}

		[Address(RVA = "0xB3CE7C", Offset = "0xB3CE7C", VA = "0xB3CE7C", Slot = "4")]
		public virtual void Follow()
		{
		}

		[Address(RVA = "0xB3CF4C", Offset = "0xB3CF4C", VA = "0xB3CF4C", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xB3CFDC", Offset = "0xB3CFDC", VA = "0xB3CFDC", Slot = "6")]
		protected virtual void OnValidate()
		{
		}

		protected abstract Vector3 GetPositionToFollow();

		protected abstract void SetPositionOnGameObject(Vector3 newPosition);

		protected abstract Quaternion GetRotationToFollow();

		protected abstract void SetRotationOnGameObject(Quaternion newRotation);

		[Address(RVA = "0xB3E08C", Offset = "0xB3E08C", VA = "0xB3E08C", Slot = "11")]
		protected virtual Vector3 GetScaleToFollow()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xB3E0D4", Offset = "0xB3E0D4", VA = "0xB3E0D4", Slot = "12")]
		protected virtual void SetScaleOnGameObject(Vector3 newScale)
		{
		}

		[Address(RVA = "0xB3E144", Offset = "0xB3E144", VA = "0xB3E144", Slot = "13")]
		protected virtual void FollowPosition()
		{
		}

		[Address(RVA = "0xB3E28C", Offset = "0xB3E28C", VA = "0xB3E28C", Slot = "14")]
		protected virtual void FollowRotation()
		{
		}

		[Address(RVA = "0xB3E3FC", Offset = "0xB3E3FC", VA = "0xB3E3FC", Slot = "15")]
		protected virtual void FollowScale()
		{
		}

		[Address(RVA = "0xB3E544", Offset = "0xB3E544", VA = "0xB3E544")]
		protected VRTK_ObjectFollow()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656E24", Offset = "0x656E24")]
	public class VRTK_RigidbodyFollow : VRTK_ObjectFollow
	{
		public enum MovementOption
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Set,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Move,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Add,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Track
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A50C", Offset = "0x66A50C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A50C", Offset = "0x66A50C")]
		public MovementOption movementOption;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A56C", Offset = "0x66A56C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A56C", Offset = "0x66A56C")]
		public float trackMaxDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Rigidbody rigidbodyToFollow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody rigidbodyToChange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected float maxDistanceDelta;

		[Address(RVA = "0x94A654", Offset = "0x94A654", VA = "0x94A654", Slot = "4")]
		public override void Follow()
		{
		}

		[Address(RVA = "0x94A688", Offset = "0x94A688", VA = "0x94A688", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x94A690", Offset = "0x94A690", VA = "0x94A690", Slot = "17")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0x94A69C", Offset = "0x94A69C", VA = "0x94A69C", Slot = "18")]
		protected virtual void CacheRigidbodies()
		{
		}

		[Address(RVA = "0x94A7F4", Offset = "0x94A7F4", VA = "0x94A7F4", Slot = "7")]
		protected override Vector3 GetPositionToFollow()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x94A8B4", Offset = "0x94A8B4", VA = "0x94A8B4", Slot = "9")]
		protected override Quaternion GetRotationToFollow()
		{
			return default(Quaternion);
		}

		[Address(RVA = "0x94A974", Offset = "0x94A974", VA = "0x94A974", Slot = "11")]
		protected override Vector3 GetScaleToFollow()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x94AA4C", Offset = "0x94AA4C", VA = "0x94AA4C", Slot = "8")]
		protected override void SetPositionOnGameObject(Vector3 newPosition)
		{
		}

		[Address(RVA = "0x94AC28", Offset = "0x94AC28", VA = "0x94AC28", Slot = "10")]
		protected override void SetRotationOnGameObject(Quaternion newRotation)
		{
		}

		[Address(RVA = "0x94AE18", Offset = "0x94AE18", VA = "0x94AE18", Slot = "19")]
		protected virtual void TrackPosition(Vector3 newPosition)
		{
		}

		[Address(RVA = "0x94B12C", Offset = "0x94B12C", VA = "0x94B12C", Slot = "20")]
		protected virtual void TrackRotation(Quaternion newRotation)
		{
		}

		[Address(RVA = "0x94B370", Offset = "0x94B370", VA = "0x94B370")]
		public VRTK_RigidbodyFollow()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656E5C", Offset = "0x656E5C")]
	public class VRTK_TransformFollow : VRTK_ObjectFollow
	{
		public enum FollowMoment
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnFixedUpdate,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnUpdate,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnLateUpdate,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnPreRender,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnPreCull
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A5CC", Offset = "0x66A5CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A5CC", Offset = "0x66A5CC")]
		[SerializeField]
		private FollowMoment _moment;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Transform transformToFollow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Transform transformToChange;

		public FollowMoment moment
		{
			[Address(RVA = "0xA3D4B4", Offset = "0xA3D4B4", VA = "0xA3D4B4")]
			get
			{
				return default(FollowMoment);
			}
			[Address(RVA = "0xA3D4BC", Offset = "0xA3D4BC", VA = "0xA3D4BC")]
			set
			{
			}
		}

		[Address(RVA = "0xA3D84C", Offset = "0xA3D84C", VA = "0xA3D84C", Slot = "4")]
		public override void Follow()
		{
		}

		[Address(RVA = "0xA3D880", Offset = "0xA3D880", VA = "0xA3D880", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0xA3DA58", Offset = "0xA3DA58", VA = "0xA3DA58", Slot = "16")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xA3DC18", Offset = "0xA3DC18", VA = "0xA3DC18")]
		protected void FixedUpdate()
		{
		}

		[Address(RVA = "0xA3DC30", Offset = "0xA3DC30", VA = "0xA3DC30")]
		protected void Update()
		{
		}

		[Address(RVA = "0xA3DC4C", Offset = "0xA3DC4C", VA = "0xA3DC4C", Slot = "17")]
		protected virtual void LateUpdate()
		{
		}

		[Address(RVA = "0xA3DC68", Offset = "0xA3DC68", VA = "0xA3DC68", Slot = "18")]
		protected virtual void OnCamPreRender(Camera cam)
		{
		}

		[Address(RVA = "0xA3DD6C", Offset = "0xA3DD6C", VA = "0xA3DD6C", Slot = "19")]
		protected virtual void OnCamPreCull(Camera cam)
		{
		}

		[Address(RVA = "0xA3DE70", Offset = "0xA3DE70", VA = "0xA3DE70", Slot = "7")]
		protected override Vector3 GetPositionToFollow()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA3DEA0", Offset = "0xA3DEA0", VA = "0xA3DEA0", Slot = "8")]
		protected override void SetPositionOnGameObject(Vector3 newPosition)
		{
		}

		[Address(RVA = "0xA3DEF8", Offset = "0xA3DEF8", VA = "0xA3DEF8", Slot = "9")]
		protected override Quaternion GetRotationToFollow()
		{
			return default(Quaternion);
		}

		[Address(RVA = "0xA3DF28", Offset = "0xA3DF28", VA = "0xA3DF28", Slot = "10")]
		protected override void SetRotationOnGameObject(Quaternion newRotation)
		{
		}

		[Address(RVA = "0xA3DF88", Offset = "0xA3DF88", VA = "0xA3DF88", Slot = "20")]
		protected virtual void CacheTransforms()
		{
		}

		[Address(RVA = "0xA3E0D8", Offset = "0xA3E0D8", VA = "0xA3E0D8")]
		public VRTK_TransformFollow()
		{
		}
	}
	[Serializable]
	public sealed class VRTK_SDKInfo : ISerializationCallbackReceiver
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A63C", Offset = "0x66A63C")]
		private Type <type>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A64C", Offset = "0x66A64C")]
		private string <originalTypeNameWhenFallbackIsUsed>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A65C", Offset = "0x66A65C")]
		private SDK_DescriptionAttribute <description>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string baseTypeName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string fallbackTypeName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string typeName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int descriptionIndex;

		public Type type
		{
			[Address(RVA = "0x94D7C0", Offset = "0x94D7C0", VA = "0x94D7C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F99C", Offset = "0x67F99C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x94D7C8", Offset = "0x94D7C8", VA = "0x94D7C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F9AC", Offset = "0x67F9AC")]
			private set
			{
			}
		}

		public string originalTypeNameWhenFallbackIsUsed
		{
			[Address(RVA = "0x94D7D0", Offset = "0x94D7D0", VA = "0x94D7D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F9BC", Offset = "0x67F9BC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x94D7D8", Offset = "0x94D7D8", VA = "0x94D7D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F9CC", Offset = "0x67F9CC")]
			private set
			{
			}
		}

		public SDK_DescriptionAttribute description
		{
			[Address(RVA = "0x94D7E0", Offset = "0x94D7E0", VA = "0x94D7E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F9DC", Offset = "0x67F9DC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x94D7E8", Offset = "0x94D7E8", VA = "0x94D7E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F9EC", Offset = "0x67F9EC")]
			private set
			{
			}
		}

		public static VRTK_SDKInfo[] Create<BaseType, FallbackType, ActualType>() where BaseType : SDK_Base where FallbackType : BaseType where ActualType : BaseType
		{
			return null;
		}

		public static VRTK_SDKInfo[] Create<BaseType, FallbackType>(Type actualType) where BaseType : SDK_Base where FallbackType : BaseType
		{
			return null;
		}

		[Address(RVA = "0x94D7F0", Offset = "0x94D7F0", VA = "0x94D7F0")]
		private VRTK_SDKInfo()
		{
		}

		[Address(RVA = "0x94D7F8", Offset = "0x94D7F8", VA = "0x94D7F8")]
		public VRTK_SDKInfo(VRTK_SDKInfo infoToCopy)
		{
		}

		[Address(RVA = "0x94D8F8", Offset = "0x94D8F8", VA = "0x94D8F8")]
		private void SetUp(Type baseType, Type fallbackType, string actualTypeName, int descriptionIndex)
		{
		}

		[Address(RVA = "0x94E050", Offset = "0x94E050", VA = "0x94E050", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Address(RVA = "0x94E054", Offset = "0x94E054", VA = "0x94E054", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Address(RVA = "0x94E138", Offset = "0x94E138", VA = "0x94E138", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Address(RVA = "0x94E278", Offset = "0x94E278", VA = "0x94E278")]
		public bool Equals(VRTK_SDKInfo other)
		{
			return default(bool);
		}

		[Address(RVA = "0x94E27C", Offset = "0x94E27C", VA = "0x94E27C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Address(RVA = "0x94E1BC", Offset = "0x94E1BC", VA = "0x94E1BC")]
		public static bool operator ==(VRTK_SDKInfo x, VRTK_SDKInfo y)
		{
			return default(bool);
		}

		[Address(RVA = "0x94E2B0", Offset = "0x94E2B0", VA = "0x94E2B0")]
		public static bool operator !=(VRTK_SDKInfo x, VRTK_SDKInfo y)
		{
			return default(bool);
		}
	}
	public sealed class VRTK_SDKManager : MonoBehaviour
	{
		public sealed class ScriptingDefineSymbolPredicateInfo
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly SDK_ScriptingDefineSymbolPredicateAttribute attribute;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly MethodInfo methodInfo;

			[Address(RVA = "0x956B58", Offset = "0x956B58", VA = "0x956B58")]
			public ScriptingDefineSymbolPredicateInfo(SDK_ScriptingDefineSymbolPredicateAttribute attribute, MethodInfo methodInfo)
			{
			}
		}

		public struct LoadedSetupChangeEventArgs
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly VRTK_SDKSetup previousSetup;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly VRTK_SDKSetup currentSetup;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly string errorMessage;

			[Address(RVA = "0x957D04", Offset = "0x957D04", VA = "0x957D04")]
			public LoadedSetupChangeEventArgs(VRTK_SDKSetup previousSetup, VRTK_SDKSetup currentSetup, string errorMessage)
			{
			}
		}

		public delegate void LoadedSetupChangeEventHandler(VRTK_SDKManager sender, LoadedSetupChangeEventArgs e);

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B290", Offset = "0x65B290")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<VRTK_SDKSetup> <>9__83_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<VRTK_SDKSetup> <>9__83_1;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<string, bool> <>9__83_3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Predicate<VRTK_SDKSetup> <>9__83_2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<VRTK_SDKSetup, bool> <>9__84_1;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<VRTK_SDKSetup, bool> <>9__84_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<VRTK_SDKSetup, bool> <>9__84_3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Func<VRTK_SDKSetup, IEnumerable<string>> <>9__84_4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static Comparison<ScriptingDefineSymbolPredicateInfo> <>9__96_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static Func<ScriptingDefineSymbolPredicateInfo, bool> <>9__97_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static Func<ScriptingDefineSymbolPredicateInfo, string> <>9__97_1;

			[Address(RVA = "0x9562D4", Offset = "0x9562D4", VA = "0x9562D4")]
			public <>c()
			{
			}

			[Address(RVA = "0x9562DC", Offset = "0x9562DC", VA = "0x9562DC")]
			internal bool <TryLoadSDKSetupFromList>b__83_0(VRTK_SDKSetup setup)
			{
				return default(bool);
			}

			[Address(RVA = "0x9564D4", Offset = "0x9564D4", VA = "0x9564D4")]
			internal bool <TryLoadSDKSetupFromList>b__83_1(VRTK_SDKSetup setup)
			{
				return default(bool);
			}

			[Address(RVA = "0x956548", Offset = "0x956548", VA = "0x956548")]
			internal bool <TryLoadSDKSetupFromList>b__83_2(VRTK_SDKSetup setup)
			{
				return default(bool);
			}

			[Address(RVA = "0x956654", Offset = "0x956654", VA = "0x956654")]
			internal bool <TryLoadSDKSetupFromList>b__83_3(string vrDeviceName)
			{
				return default(bool);
			}

			[Address(RVA = "0x9566A8", Offset = "0x9566A8", VA = "0x9566A8")]
			internal bool <TryLoadSDKSetup>b__84_1(VRTK_SDKSetup setup)
			{
				return default(bool);
			}

			[Address(RVA = "0x9566E0", Offset = "0x9566E0", VA = "0x9566E0")]
			internal bool <TryLoadSDKSetup>b__84_0(VRTK_SDKSetup setup)
			{
				return default(bool);
			}

			[Address(RVA = "0x95670C", Offset = "0x95670C", VA = "0x95670C")]
			internal bool <TryLoadSDKSetup>b__84_3(VRTK_SDKSetup setup)
			{
				return default(bool);
			}

			[Address(RVA = "0x956828", Offset = "0x956828", VA = "0x956828")]
			internal IEnumerable<string> <TryLoadSDKSetup>b__84_4(VRTK_SDKSetup setup)
			{
				return null;
			}

			[Address(RVA = "0x956854", Offset = "0x956854", VA = "0x956854")]
			internal int <PopulateAvailableScriptingDefineSymbolPredicateInfos>b__96_0(ScriptingDefineSymbolPredicateInfo x, ScriptingDefineSymbolPredicateInfo y)
			{
				return default(int);
			}

			[Address(RVA = "0x9568C0", Offset = "0x9568C0", VA = "0x9568C0")]
			internal bool <PopulateAvailableAndInstalledSDKInfos>b__97_0(ScriptingDefineSymbolPredicateInfo predicateInfo)
			{
				return default(bool);
			}

			[Address(RVA = "0x9569B4", Offset = "0x9569B4", VA = "0x9569B4")]
			internal string <PopulateAvailableAndInstalledSDKInfos>b__97_1(ScriptingDefineSymbolPredicateInfo predicateInfo)
			{
				return null;
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B2A0", Offset = "0x65B2A0")]
		private sealed class <>c__DisplayClass84_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string loadedDeviceName;

			[Address(RVA = "0x95371C", Offset = "0x95371C", VA = "0x95371C")]
			public <>c__DisplayClass84_0()
			{
			}

			[Address(RVA = "0x9569F0", Offset = "0x9569F0", VA = "0x9569F0")]
			internal bool <TryLoadSDKSetup>b__2(VRTK_SDKSetup setup)
			{
				return default(bool);
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B2B0", Offset = "0x65B2B0")]
		private sealed class <>c__DisplayClass91_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string loadedDeviceName;

			[Address(RVA = "0x956A6C", Offset = "0x956A6C", VA = "0x956A6C")]
			public <>c__DisplayClass91_0()
			{
			}

			[Address(RVA = "0x956A74", Offset = "0x956A74", VA = "0x956A74")]
			internal bool <FinishSDKSetupLoading>b__0(VRTK_SDKSetup setup)
			{
				return default(bool);
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B2C0", Offset = "0x65B2C0")]
		private sealed class <FinishSDKSetupLoading>d__91 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private <>c__DisplayClass91_0 <>8__1;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VRTK_SDKManager <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public VRTK_SDKSetup[] sdkSetups;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public VRTK_SDKSetup previousLoadedSetup;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x957C40", Offset = "0x957C40", VA = "0x957C40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x957CB0", Offset = "0x957CB0", VA = "0x957CB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x955F8C", Offset = "0x955F8C", VA = "0x955F8C")]
			[DebuggerHidden]
			public <FinishSDKSetupLoading>d__91(int <>1__state)
			{
			}

			[Address(RVA = "0x957350", Offset = "0x957350", VA = "0x957350", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x957354", Offset = "0x957354", VA = "0x957354", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x957C48", Offset = "0x957C48", VA = "0x957C48", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B2D0", Offset = "0x65B2D0")]
		private sealed class <CheckLeftControllerReady>d__93 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SDKManager <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <delayInstruction>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <maxCheckTime>5__3;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x956FB4", Offset = "0x956FB4", VA = "0x956FB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x957024", Offset = "0x957024", VA = "0x957024", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x95611C", Offset = "0x95611C", VA = "0x95611C")]
			[DebuggerHidden]
			public <CheckLeftControllerReady>d__93(int <>1__state)
			{
			}

			[Address(RVA = "0x956B90", Offset = "0x956B90", VA = "0x956B90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x956B94", Offset = "0x956B94", VA = "0x956B94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x956FBC", Offset = "0x956FBC", VA = "0x956FBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B2E0", Offset = "0x65B2E0")]
		private sealed class <CheckRightControllerReady>d__94 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SDKManager <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <delayInstruction>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <maxCheckTime>5__3;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x9572D8", Offset = "0x9572D8", VA = "0x9572D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x957348", Offset = "0x957348", VA = "0x957348", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x956148", Offset = "0x956148", VA = "0x956148")]
			[DebuggerHidden]
			public <CheckRightControllerReady>d__94(int <>1__state)
			{
			}

			[Address(RVA = "0x95702C", Offset = "0x95702C", VA = "0x95702C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x957030", Offset = "0x957030", VA = "0x957030", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x9572E0", Offset = "0x9572E0", VA = "0x9572E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B2F0", Offset = "0x65B2F0")]
		private sealed class <>c__DisplayClass96_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodInfo methodInfo;

			[Address(RVA = "0x956174", Offset = "0x956174", VA = "0x956174")]
			public <>c__DisplayClass96_0()
			{
			}

			[Address(RVA = "0x956AE4", Offset = "0x956AE4", VA = "0x956AE4")]
			internal ScriptingDefineSymbolPredicateInfo <PopulateAvailableScriptingDefineSymbolPredicateInfos>b__1(SDK_ScriptingDefineSymbolPredicateAttribute predicateAttribute)
			{
				return null;
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B300", Offset = "0x65B300")]
		private sealed class <>c__DisplayClass98_0<BaseType, FallbackType> where BaseType : SDK_Base where FallbackType : BaseType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Type baseType;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Type fallbackType;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ICollection<string> symbolsOfInstalledSDKs;

			internal bool <PopulateAvailableAndInstalledSDKInfos>b__0(Type type)
			{
				return default(bool);
			}

			internal bool <PopulateAvailableAndInstalledSDKInfos>b__2(VRTK_SDKInfo info)
			{
				return default(bool);
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B310", Offset = "0x65B310")]
		private sealed class <>c__98<BaseType, FallbackType> where BaseType : SDK_Base where FallbackType : BaseType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__98<BaseType, FallbackType> <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Comparison<VRTK_SDKInfo> <>9__98_1;

			internal int <PopulateAvailableAndInstalledSDKInfos>b__98_1(VRTK_SDKInfo x, VRTK_SDKInfo y)
			{
				return default(int);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A6AC", Offset = "0x66A6AC")]
		private static ReadOnlyCollection<ScriptingDefineSymbolPredicateInfo> <AvailableScriptingDefineSymbolPredicateInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Dictionary<Type, Type> SDKFallbackTypesByBaseType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A6BC", Offset = "0x66A6BC")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <AvailableSystemSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A6CC", Offset = "0x66A6CC")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <AvailableBoundariesSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A6DC", Offset = "0x66A6DC")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <AvailableHeadsetSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A6EC", Offset = "0x66A6EC")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <AvailableControllerSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A6FC", Offset = "0x66A6FC")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <InstalledSystemSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A70C", Offset = "0x66A70C")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <InstalledBoundariesSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A71C", Offset = "0x66A71C")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <InstalledHeadsetSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A72C", Offset = "0x66A72C")]
		private static ReadOnlyCollection<VRTK_SDKInfo> <InstalledControllerSDKInfos>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static HashSet<Behaviour> delayedToggleBehaviours;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static VRTK_SDKManager _instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A73C", Offset = "0x66A73C")]
		public bool autoManageScriptDefines;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SDK_ScriptingDefineSymbolPredicateAttribute> activeScriptingDefineSymbolsWithoutSDKClasses;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A774", Offset = "0x66A774")]
		public GameObject scriptAliasLeftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A7AC", Offset = "0x66A7AC")]
		public GameObject scriptAliasRightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A7E4", Offset = "0x66A7E4")]
		public bool autoManageVRSettings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A81C", Offset = "0x66A81C")]
		public bool autoLoadSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A854", Offset = "0x66A854")]
		public VRTK_SDKSetup[] setups;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66A88C", Offset = "0x66A88C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x66A88C", Offset = "0x66A88C")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x66A88C", Offset = "0x66A88C")]
		public bool persistOnLoad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VRTK_SDKSetup _loadedSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static HashSet<VRTK_SDKInfo> _previouslyUsedSetupInfos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66A8FC", Offset = "0x66A8FC")]
		private ReadOnlyCollection<Behaviour> <behavioursToToggleOnLoadedSetupChange>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Behaviour> _behavioursToToggleOnLoadedSetupChange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<Behaviour, bool> _behavioursInitialState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine checkLeftControllerReadyRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Coroutine checkRightControllerReadyRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float checkControllerReadyDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int checkControllerValidTimer;

		public static ReadOnlyCollection<ScriptingDefineSymbolPredicateInfo> AvailableScriptingDefineSymbolPredicateInfos
		{
			[Address(RVA = "0x94FFC0", Offset = "0x94FFC0", VA = "0x94FFC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67F9FC", Offset = "0x67F9FC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x950028", Offset = "0x950028", VA = "0x950028")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA0C", Offset = "0x67FA0C")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableSystemSDKInfos
		{
			[Address(RVA = "0x950094", Offset = "0x950094", VA = "0x950094")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA1C", Offset = "0x67FA1C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x9500FC", Offset = "0x9500FC", VA = "0x9500FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA2C", Offset = "0x67FA2C")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableBoundariesSDKInfos
		{
			[Address(RVA = "0x950168", Offset = "0x950168", VA = "0x950168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA3C", Offset = "0x67FA3C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x9501D0", Offset = "0x9501D0", VA = "0x9501D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA4C", Offset = "0x67FA4C")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableHeadsetSDKInfos
		{
			[Address(RVA = "0x95023C", Offset = "0x95023C", VA = "0x95023C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA5C", Offset = "0x67FA5C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x9502A4", Offset = "0x9502A4", VA = "0x9502A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA6C", Offset = "0x67FA6C")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> AvailableControllerSDKInfos
		{
			[Address(RVA = "0x950310", Offset = "0x950310", VA = "0x950310")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA7C", Offset = "0x67FA7C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x950378", Offset = "0x950378", VA = "0x950378")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA8C", Offset = "0x67FA8C")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledSystemSDKInfos
		{
			[Address(RVA = "0x9503E4", Offset = "0x9503E4", VA = "0x9503E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FA9C", Offset = "0x67FA9C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x95044C", Offset = "0x95044C", VA = "0x95044C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FAAC", Offset = "0x67FAAC")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledBoundariesSDKInfos
		{
			[Address(RVA = "0x9504B8", Offset = "0x9504B8", VA = "0x9504B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FABC", Offset = "0x67FABC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x950520", Offset = "0x950520", VA = "0x950520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FACC", Offset = "0x67FACC")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledHeadsetSDKInfos
		{
			[Address(RVA = "0x95058C", Offset = "0x95058C", VA = "0x95058C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FADC", Offset = "0x67FADC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x9505F4", Offset = "0x9505F4", VA = "0x9505F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FAEC", Offset = "0x67FAEC")]
			private set
			{
			}
		}

		public static ReadOnlyCollection<VRTK_SDKInfo> InstalledControllerSDKInfos
		{
			[Address(RVA = "0x950660", Offset = "0x950660", VA = "0x950660")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FAFC", Offset = "0x67FAFC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x9506C8", Offset = "0x9506C8", VA = "0x9506C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FB0C", Offset = "0x67FB0C")]
			private set
			{
			}
		}

		public static VRTK_SDKManager instance
		{
			[Address(RVA = "0x950734", Offset = "0x950734", VA = "0x950734")]
			get
			{
				return null;
			}
		}

		public VRTK_SDKSetup loadedSetup
		{
			[Address(RVA = "0x951090", Offset = "0x951090", VA = "0x951090")]
			get
			{
				return null;
			}
			[Address(RVA = "0x953704", Offset = "0x953704", VA = "0x953704")]
			private set
			{
			}
		}

		public ReadOnlyCollection<Behaviour> behavioursToToggleOnLoadedSetupChange
		{
			[Address(RVA = "0x95370C", Offset = "0x95370C", VA = "0x95370C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FB1C", Offset = "0x67FB1C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x953714", Offset = "0x953714", VA = "0x953714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FB2C", Offset = "0x67FB2C")]
			private set
			{
			}
		}

		public event LoadedSetupChangeEventHandler LoadedSetupChanged
		{
			[Address(RVA = "0x950EB8", Offset = "0x950EB8", VA = "0x950EB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FB3C", Offset = "0x67FB3C")]
			add
			{
			}
			[Address(RVA = "0x950FA4", Offset = "0x950FA4", VA = "0x950FA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FB4C", Offset = "0x67FB4C")]
			remove
			{
			}
		}

		[Address(RVA = "0x950A40", Offset = "0x950A40", VA = "0x950A40")]
		public static bool ValidInstance()
		{
			return default(bool);
		}

		[Address(RVA = "0x942E98", Offset = "0x942E98", VA = "0x942E98")]
		public static bool AttemptAddBehaviourToToggleOnLoadedSetupChange(Behaviour givenBehaviour)
		{
			return default(bool);
		}

		[Address(RVA = "0x9432A4", Offset = "0x9432A4", VA = "0x9432A4")]
		public static bool AttemptRemoveBehaviourToToggleOnLoadedSetupChange(Behaviour givenBehaviour)
		{
			return default(bool);
		}

		[Address(RVA = "0x950CB4", Offset = "0x950CB4", VA = "0x950CB4")]
		public static void ProcessDelayedToggleBehaviours()
		{
		}

		[Address(RVA = "0x94CB68", Offset = "0x94CB68", VA = "0x94CB68")]
		public static bool SubscribeLoadedSetupChanged(LoadedSetupChangeEventHandler callback)
		{
			return default(bool);
		}

		[Address(RVA = "0x94CCD8", Offset = "0x94CCD8", VA = "0x94CCD8")]
		public static bool UnsubscribeLoadedSetupChanged(LoadedSetupChangeEventHandler callback)
		{
			return default(bool);
		}

		[Address(RVA = "0x94E440", Offset = "0x94E440", VA = "0x94E440")]
		public static VRTK_SDKSetup GetLoadedSDKSetup()
		{
			return null;
		}

		[Address(RVA = "0x9511E4", Offset = "0x9511E4", VA = "0x9511E4")]
		public static VRTK_SDKSetup[] GetAllSDKSetups()
		{
			return null;
		}

		[Address(RVA = "0x95128C", Offset = "0x95128C", VA = "0x95128C")]
		public static bool AttemptTryLoadSDKSetup(int startIndex, bool tryToReinitialize, params VRTK_SDKSetup[] sdkSetups)
		{
			return default(bool);
		}

		[Address(RVA = "0x951E68", Offset = "0x951E68", VA = "0x951E68")]
		public static bool AttemptTryLoadSDKSetupFromList(bool tryUseLastLoadedSetup = true)
		{
			return default(bool);
		}

		[Address(RVA = "0x9532A4", Offset = "0x9532A4", VA = "0x9532A4")]
		public static bool AttemptUnloadSDKSetup(bool disableVR = false)
		{
			return default(bool);
		}

		[Address(RVA = "0x950AD4", Offset = "0x950AD4", VA = "0x950AD4")]
		public void AddBehaviourToToggleOnLoadedSetupChange(Behaviour behaviour)
		{
		}

		[Address(RVA = "0x950C44", Offset = "0x950C44", VA = "0x950C44")]
		public void RemoveBehaviourToToggleOnLoadedSetupChange(Behaviour behaviour)
		{
		}

		[Address(RVA = "0x951F10", Offset = "0x951F10", VA = "0x951F10")]
		public void TryLoadSDKSetupFromList(bool tryUseLastLoadedSetup = true)
		{
		}

		[Address(RVA = "0x95134C", Offset = "0x95134C", VA = "0x95134C")]
		public void TryLoadSDKSetup(int startIndex, bool tryToReinitialize, params VRTK_SDKSetup[] sdkSetups)
		{
		}

		[Address(RVA = "0x95334C", Offset = "0x95334C", VA = "0x95334C")]
		public void UnloadSDKSetup(bool disableVR = false)
		{
		}

		[Address(RVA = "0x9545EC", Offset = "0x9545EC", VA = "0x9545EC")]
		static VRTK_SDKManager()
		{
		}

		[Address(RVA = "0x955278", Offset = "0x955278", VA = "0x955278")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x955348", Offset = "0x955348", VA = "0x955348")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x95085C", Offset = "0x95085C", VA = "0x95085C")]
		private void CreateInstance()
		{
		}

		[Address(RVA = "0x95458C", Offset = "0x95458C", VA = "0x95458C")]
		private void OnLoadedSetupChanged(LoadedSetupChangeEventArgs e)
		{
		}

		[Address(RVA = "0x9544E0", Offset = "0x9544E0", VA = "0x9544E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67FB5C", Offset = "0x67FB5C")]
		private IEnumerator FinishSDKSetupLoading(VRTK_SDKSetup[] sdkSetups, VRTK_SDKSetup previousLoadedSetup)
		{
			return null;
		}

		[Address(RVA = "0x955FB8", Offset = "0x955FB8", VA = "0x955FB8")]
		private void CheckControllersReady()
		{
		}

		[Address(RVA = "0x956034", Offset = "0x956034", VA = "0x956034")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67FBC0", Offset = "0x67FBC0")]
		private IEnumerator CheckLeftControllerReady()
		{
			return null;
		}

		[Address(RVA = "0x9560A8", Offset = "0x9560A8", VA = "0x9560A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67FC24", Offset = "0x67FC24")]
		private IEnumerator CheckRightControllerReady()
		{
			return null;
		}

		[Address(RVA = "0x953D24", Offset = "0x953D24", VA = "0x953D24")]
		private void ToggleBehaviours(bool state)
		{
		}

		[Address(RVA = "0x954848", Offset = "0x954848", VA = "0x954848")]
		private static void PopulateAvailableScriptingDefineSymbolPredicateInfos()
		{
		}

		[Address(RVA = "0x954E5C", Offset = "0x954E5C", VA = "0x954E5C")]
		private static void PopulateAvailableAndInstalledSDKInfos()
		{
		}

		private static void PopulateAvailableAndInstalledSDKInfos<BaseType, FallbackType>(List<VRTK_SDKInfo> availableSDKInfos, List<VRTK_SDKInfo> installedSDKInfos, ICollection<string> symbolsOfInstalledSDKs) where BaseType : SDK_Base where FallbackType : BaseType
		{
		}

		[Address(RVA = "0x95617C", Offset = "0x95617C", VA = "0x95617C")]
		public VRTK_SDKManager()
		{
		}
	}
	public sealed class VRTK_SDKSetup : MonoBehaviour
	{
		public delegate void LoadEventHandler(VRTK_SDKManager sender, VRTK_SDKSetup setup);

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B320", Offset = "0x65B320")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<VRTK_SDKInfo, string> <>9__35_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<GameObject, GameObject> <>9__54_0;

			[Address(RVA = "0x95A9C0", Offset = "0x95A9C0", VA = "0x95A9C0")]
			public <>c()
			{
			}

			[Address(RVA = "0x95A9C8", Offset = "0x95A9C8", VA = "0x95A9C8")]
			internal string <get_usedVRDeviceNames>b__35_0(VRTK_SDKInfo info)
			{
				return null;
			}

			[Address(RVA = "0x95AA04", Offset = "0x95AA04", VA = "0x95AA04")]
			internal void <SetupControllers>b__54_0(GameObject scriptAliasGameObject, GameObject actualGameObject)
			{
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B330", Offset = "0x65B330")]
		private sealed class <>c__52<BaseType> where BaseType : SDK_Base
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__52<BaseType> <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<VRTK_SDKInfo, Type> <>9__52_0;

			internal Type <GetSDKErrorDescription>b__52_0(VRTK_SDKInfo installedInfo)
			{
				return null;
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A91C", Offset = "0x66A91C")]
		public bool autoPopulateObjectReferences;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A954", Offset = "0x66A954")]
		public GameObject actualBoundaries;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A98C", Offset = "0x66A98C")]
		public GameObject actualHeadset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A9C4", Offset = "0x66A9C4")]
		public GameObject actualLeftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66A9FC", Offset = "0x66A9FC")]
		public GameObject actualRightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AA34", Offset = "0x66AA34")]
		public GameObject modelAliasLeftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AA6C", Offset = "0x66AA6C")]
		public GameObject modelAliasRightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private VRTK_SDKInfo cachedSystemSDKInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private VRTK_SDKInfo cachedBoundariesSDKInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private VRTK_SDKInfo cachedHeadsetSDKInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private VRTK_SDKInfo cachedControllerSDKInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SDK_BaseSystem cachedSystemSDK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SDK_BaseBoundaries cachedBoundariesSDK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private SDK_BaseHeadset cachedHeadsetSDK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SDK_BaseController cachedControllerSDK;

		public VRTK_SDKInfo systemSDKInfo
		{
			[Address(RVA = "0x9545CC", Offset = "0x9545CC", VA = "0x9545CC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x958FE4", Offset = "0x958FE4", VA = "0x958FE4")]
			set
			{
			}
		}

		public VRTK_SDKInfo boundariesSDKInfo
		{
			[Address(RVA = "0x9545D4", Offset = "0x9545D4", VA = "0x9545D4")]
			get
			{
				return null;
			}
			[Address(RVA = "0x959338", Offset = "0x959338", VA = "0x959338")]
			set
			{
			}
		}

		public VRTK_SDKInfo headsetSDKInfo
		{
			[Address(RVA = "0x9545DC", Offset = "0x9545DC", VA = "0x9545DC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x95943C", Offset = "0x95943C", VA = "0x95943C")]
			set
			{
			}
		}

		public VRTK_SDKInfo controllerSDKInfo
		{
			[Address(RVA = "0x9545E4", Offset = "0x9545E4", VA = "0x9545E4")]
			get
			{
				return null;
			}
			[Address(RVA = "0x959540", Offset = "0x959540", VA = "0x959540")]
			set
			{
			}
		}

		public SDK_BaseSystem systemSDK
		{
			[Address(RVA = "0x959644", Offset = "0x959644", VA = "0x959644")]
			get
			{
				return null;
			}
		}

		public SDK_BaseBoundaries boundariesSDK
		{
			[Address(RVA = "0x9597BC", Offset = "0x9597BC", VA = "0x9597BC")]
			get
			{
				return null;
			}
		}

		public SDK_BaseHeadset headsetSDK
		{
			[Address(RVA = "0x959934", Offset = "0x959934", VA = "0x959934")]
			get
			{
				return null;
			}
		}

		public SDK_BaseController controllerSDK
		{
			[Address(RVA = "0x956E3C", Offset = "0x956E3C", VA = "0x956E3C")]
			get
			{
				return null;
			}
		}

		public string[] usedVRDeviceNames
		{
			[Address(RVA = "0x954288", Offset = "0x954288", VA = "0x954288")]
			get
			{
				return null;
			}
		}

		public bool isValid
		{
			[Address(RVA = "0x9536D0", Offset = "0x9536D0", VA = "0x9536D0")]
			get
			{
				return default(bool);
			}
		}

		public event LoadEventHandler Loaded
		{
			[Address(RVA = "0x958C34", Offset = "0x958C34", VA = "0x958C34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FC88", Offset = "0x67FC88")]
			add
			{
			}
			[Address(RVA = "0x958D20", Offset = "0x958D20", VA = "0x958D20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FC98", Offset = "0x67FC98")]
			remove
			{
			}
		}

		public event LoadEventHandler Unloaded
		{
			[Address(RVA = "0x958E0C", Offset = "0x958E0C", VA = "0x958E0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FCA8", Offset = "0x67FCA8")]
			add
			{
			}
			[Address(RVA = "0x958EF8", Offset = "0x958EF8", VA = "0x958EF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FCB8", Offset = "0x67FCB8")]
			remove
			{
			}
		}

		[Address(RVA = "0x9590E8", Offset = "0x9590E8", VA = "0x9590E8")]
		public void PopulateObjectReferences(bool force)
		{
		}

		[Address(RVA = "0x953724", Offset = "0x953724", VA = "0x953724")]
		public string[] GetSimplifiedErrorDescriptions()
		{
			return null;
		}

		[Address(RVA = "0x957910", Offset = "0x957910", VA = "0x957910")]
		public void OnLoaded(VRTK_SDKManager sender)
		{
		}

		[Address(RVA = "0x953FB0", Offset = "0x953FB0", VA = "0x953FB0")]
		public void OnUnloaded(VRTK_SDKManager sender)
		{
		}

		[Address(RVA = "0x95A680", Offset = "0x95A680", VA = "0x95A680")]
		private void OnEnable()
		{
		}

		private static void HandleSDKGetter<BaseType>(string prettyName, VRTK_SDKInfo info, IEnumerable<VRTK_SDKInfo> installedInfos) where BaseType : SDK_Base
		{
		}

		private static string GetSDKErrorDescription<BaseType>(string prettyName, VRTK_SDKInfo info, IEnumerable<VRTK_SDKInfo> installedInfos) where BaseType : SDK_Base
		{
			return null;
		}

		[Address(RVA = "0x959AAC", Offset = "0x959AAC", VA = "0x959AAC")]
		private void SetupHeadset()
		{
		}

		[Address(RVA = "0x959BB0", Offset = "0x959BB0", VA = "0x959BB0")]
		private void SetupControllers()
		{
		}

		[Address(RVA = "0x95A72C", Offset = "0x95A72C", VA = "0x95A72C")]
		public VRTK_SDKSetup()
		{
		}

		[Address(RVA = "0x95A86C", Offset = "0x95A86C", VA = "0x95A86C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FCC8", Offset = "0x67FCC8")]
		private void <OnLoaded>b__48_0(SDK_Base sdkBase)
		{
		}

		[Address(RVA = "0x95A8A8", Offset = "0x95A8A8", VA = "0x95A8A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FCD8", Offset = "0x67FCD8")]
		private void <OnLoaded>b__48_1(SDK_Base sdkBase)
		{
		}

		[Address(RVA = "0x95A8E4", Offset = "0x95A8E4", VA = "0x95A8E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FCE8", Offset = "0x67FCE8")]
		private void <OnUnloaded>b__49_0(SDK_Base sdkBase)
		{
		}

		[Address(RVA = "0x95A920", Offset = "0x95A920", VA = "0x95A920")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FCF8", Offset = "0x67FCF8")]
		private void <OnUnloaded>b__49_1(SDK_Base sdkBase)
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656E94", Offset = "0x656E94")]
	public sealed class VRTK_AdaptiveQuality : MonoBehaviour
	{
		private sealed class AdaptiveSetting<T>
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67437C", Offset = "0x67437C")]
			private T <previousValue>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67438C", Offset = "0x67438C")]
			private int <lastChangeFrameCount>k__BackingField;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int increaseFrameCost;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int decreaseFrameCost;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T _currentValue;

			public T currentValue
			{
				get
				{
					return (T)null;
				}
				set
				{
				}
			}

			public T previousValue
			{
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687DF0", Offset = "0x687DF0")]
				get
				{
					return (T)null;
				}
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687E00", Offset = "0x687E00")]
				private set
				{
				}
			}

			public int lastChangeFrameCount
			{
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687E10", Offset = "0x687E10")]
				get
				{
					return default(int);
				}
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x687E20", Offset = "0x687E20")]
				private set
				{
				}
			}

			public AdaptiveSetting(T currentValue, int increaseFrameCost, int decreaseFrameCost)
			{
			}
		}

		private static class CommandLineArguments
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string Disable = "-noaq";

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string MinimumRenderScale = "-aqminscale";

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string MaximumRenderScale = "-aqmaxscale";

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string MaximumRenderTargetDimension = "-aqmaxres";

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string RenderScaleFillRateStepSizeInPercent = "-aqfillratestep";

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string OverrideRenderScaleLevel = "-aqoverride";

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string DrawDebugVisualization = "-vrdebug";

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const string MSAALevel = "-msaa";
		}

		private static class KeyboardShortcuts
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly KeyCode[] Modifiers;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const KeyCode ToggleDrawDebugVisualization = KeyCode.F1;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const KeyCode ToggleOverrideRenderScale = KeyCode.F2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const KeyCode DecreaseOverrideRenderScaleLevel = KeyCode.F3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public const KeyCode IncreaseOverrideRenderScaleLevel = KeyCode.F4;
		}

		private static class ShaderPropertyIDs
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly int RenderScaleLevelsCount;

			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static readonly int DefaultRenderViewportScaleLevel;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static readonly int CurrentRenderViewportScaleLevel;

			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public static readonly int CurrentRenderScaleLevel;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static readonly int LastFrameIsInBudget;
		}

		private sealed class Timing
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly float[] buffer;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int bufferIndex;

			[Address(RVA = "0x775F5C", Offset = "0x775F5C", VA = "0x775F5C")]
			public void SaveCurrentFrameTiming()
			{
			}

			[Address(RVA = "0x776E48", Offset = "0x776E48", VA = "0x776E48")]
			public float GetFrameTiming(int framesAgo)
			{
				return default(float);
			}

			[Address(RVA = "0x776C0C", Offset = "0x776C0C", VA = "0x776C0C")]
			public bool WasFrameTimingBad(int framesAgo, float thresholdInMilliseconds, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Address(RVA = "0x776DBC", Offset = "0x776DBC", VA = "0x776DBC")]
			public bool WasFrameTimingGood(int framesAgo, float thresholdInMilliseconds, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Address(RVA = "0x776C98", Offset = "0x776C98", VA = "0x776C98")]
			public bool WillFrameTimingBeBad(float extrapolationThresholdInMilliseconds, float thresholdInMilliseconds, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Address(RVA = "0x7770F8", Offset = "0x7770F8", VA = "0x7770F8")]
			private static bool AreFramesAvailable(int framesAgo, int lastChangeFrameCount, int changeFrameCost)
			{
				return default(bool);
			}

			[Address(RVA = "0x77410C", Offset = "0x77410C", VA = "0x77410C")]
			public Timing()
			{
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B340", Offset = "0x65B340")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<float> <>9__50_0;

			[Address(RVA = "0x776F48", Offset = "0x776F48", VA = "0x776F48")]
			public <>c()
			{
			}

			[Address(RVA = "0x776F50", Offset = "0x776F50", VA = "0x776F50")]
			internal bool <UpdateRenderScaleLevels>b__50_0(float renderScale)
			{
				return default(bool);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AB04", Offset = "0x66AB04")]
		public bool drawDebugVisualization;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AB3C", Offset = "0x66AB3C")]
		public bool allowKeyboardShortcuts;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AB74", Offset = "0x66AB74")]
		public bool allowCommandLineArguments;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66ABAC", Offset = "0x66ABAC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66ABAC", Offset = "0x66ABAC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66ABAC", Offset = "0x66ABAC")]
		public int msaaLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AC24", Offset = "0x66AC24")]
		public bool scaleRenderViewport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AC5C", Offset = "0x66AC5C")]
		[AttributeAttribute(Name = "MinMaxRangeAttribute", RVA = "0x66AC5C", Offset = "0x66AC5C")]
		public Limits2D renderScaleLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x66ACB4", Offset = "0x66ACB4")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x66ACB4", Offset = "0x66ACB4")]
		public float minimumRenderScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x66AD00", Offset = "0x66AD00")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x66AD00", Offset = "0x66AD00")]
		public float maximumRenderScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AD4C", Offset = "0x66AD4C")]
		public int maximumRenderTargetDimension;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AD84", Offset = "0x66AD84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66AD84", Offset = "0x66AD84")]
		public int renderScaleFillRateStepSizeInPercent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66ADDC", Offset = "0x66ADDC")]
		public bool scaleRenderTargetResolution;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AE14", Offset = "0x66AE14")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66AE14", Offset = "0x66AE14")]
		public bool overrideRenderViewportScale;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AE74", Offset = "0x66AE74")]
		public int overrideRenderViewportScaleLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly ReadOnlyCollection<float> renderScales;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float DefaultFrameDurationInMilliseconds = 11.111111f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly AdaptiveSetting<int> renderViewportScaleSetting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly AdaptiveSetting<int> renderScaleSetting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<float> allRenderScales;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int defaultRenderViewportScaleLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float previousMinimumRenderScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float previousMaximumRenderScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float previousRenderScaleFillRateStepSizeInPercent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Timing timing;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int lastRenderViewportScaleLevelBelowRenderScaleLevelFrameCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool interleavedReprojectionEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool hmdDisplayIsOnDesktop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float singleFrameDurationInMilliseconds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject debugVisualizationQuad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material debugVisualizationQuadMaterial;

		public static float CurrentRenderScale
		{
			[Address(RVA = "0x773E30", Offset = "0x773E30", VA = "0x773E30")]
			get
			{
				return default(float);
			}
		}

		public Vector2 defaultRenderTargetResolution
		{
			[Address(RVA = "0x773E60", Offset = "0x773E60", VA = "0x773E60")]
			get
			{
				return default(Vector2);
			}
		}

		public Vector2 currentRenderTargetResolution
		{
			[Address(RVA = "0x773F60", Offset = "0x773F60", VA = "0x773F60")]
			get
			{
				return default(Vector2);
			}
		}

		[Address(RVA = "0x773F90", Offset = "0x773F90", VA = "0x773F90")]
		public VRTK_AdaptiveQuality()
		{
		}

		[Address(RVA = "0x773ECC", Offset = "0x773ECC", VA = "0x773ECC")]
		public static Vector2 RenderTargetResolutionForRenderScale(float renderScale)
		{
			return default(Vector2);
		}

		[Address(RVA = "0x77416C", Offset = "0x77416C", VA = "0x77416C")]
		public float BiggestAllowedMaximumRenderScale()
		{
			return default(float);
		}

		[Address(RVA = "0x77427C", Offset = "0x77427C", VA = "0x77427C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Address(RVA = "0x774704", Offset = "0x774704", VA = "0x774704")]
		private void Awake()
		{
		}

		[Address(RVA = "0x77476C", Offset = "0x77476C", VA = "0x77476C")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x774DB8", Offset = "0x774DB8", VA = "0x774DB8")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x774FC0", Offset = "0x774FC0", VA = "0x774FC0")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0x774C70", Offset = "0x774C70", VA = "0x774C70")]
		private void OnValidate()
		{
		}

		[Address(RVA = "0x775028", Offset = "0x775028", VA = "0x775028")]
		private void Update()
		{
		}

		[Address(RVA = "0x775FF8", Offset = "0x775FF8", VA = "0x775FF8")]
		private void LateUpdate()
		{
		}

		[Address(RVA = "0x776A3C", Offset = "0x776A3C", VA = "0x776A3C")]
		private void OnCameraPreCull(Camera camera)
		{
		}

		[Address(RVA = "0x77492C", Offset = "0x77492C", VA = "0x77492C")]
		private void HandleCommandLineArguments()
		{
		}

		[Address(RVA = "0x775074", Offset = "0x775074", VA = "0x775074")]
		private void HandleKeyPresses()
		{
		}

		[Address(RVA = "0x776B20", Offset = "0x776B20", VA = "0x776B20")]
		private void UpdateMSAALevel()
		{
		}

		[Address(RVA = "0x7751C0", Offset = "0x7751C0", VA = "0x7751C0")]
		private void UpdateRenderScaleLevels()
		{
		}

		[Address(RVA = "0x775FFC", Offset = "0x775FFC", VA = "0x775FFC")]
		private void UpdateRenderScale()
		{
		}

		[Address(RVA = "0x774ECC", Offset = "0x774ECC", VA = "0x774ECC")]
		private static void SetRenderScale(float renderScale, float renderViewportScale)
		{
		}

		[Address(RVA = "0x776B64", Offset = "0x776B64", VA = "0x776B64")]
		private int ClampRenderScaleLevel(int renderScaleLevel)
		{
			return default(int);
		}

		[Address(RVA = "0x7755D8", Offset = "0x7755D8", VA = "0x7755D8")]
		private void CreateOrDestroyDebugVisualization()
		{
		}

		[Address(RVA = "0x775D04", Offset = "0x775D04", VA = "0x775D04")]
		private void UpdateDebugVisualization()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656ECC", Offset = "0x656ECC")]
	public class VRTK_CustomRaycast : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AEAC", Offset = "0x66AEAC")]
		public LayerMask layersToIgnore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AEE4", Offset = "0x66AEE4")]
		public QueryTriggerInteraction triggerInteraction;

		[Address(RVA = "0xA722E4", Offset = "0xA722E4", VA = "0xA722E4")]
		public static bool Raycast(VRTK_CustomRaycast customCast, Ray ray, out RaycastHit hitData, LayerMask ignoreLayers, float length = float.PositiveInfinity, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Address(RVA = "0xA72418", Offset = "0xA72418", VA = "0xA72418")]
		public static bool Linecast(VRTK_CustomRaycast customCast, Vector3 startPosition, Vector3 endPosition, out RaycastHit hitData, LayerMask ignoreLayers, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Address(RVA = "0xA72560", Offset = "0xA72560", VA = "0xA72560")]
		public static bool CapsuleCast(VRTK_CustomRaycast customCast, Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, out RaycastHit hitData, LayerMask ignoreLayers, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Address(RVA = "0xA726E4", Offset = "0xA726E4", VA = "0xA726E4")]
		public static bool BoxCast(VRTK_CustomRaycast customCast, Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, out RaycastHit hitData, LayerMask ignoreLayers, QueryTriggerInteraction affectTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Address(RVA = "0xA7285C", Offset = "0xA7285C", VA = "0xA7285C", Slot = "4")]
		public virtual bool CustomRaycast(Ray ray, out RaycastHit hitData, float length = float.PositiveInfinity)
		{
			return default(bool);
		}

		[Address(RVA = "0xA728CC", Offset = "0xA728CC", VA = "0xA728CC", Slot = "5")]
		public virtual bool CustomLinecast(Vector3 startPosition, Vector3 endPosition, out RaycastHit hitData)
		{
			return default(bool);
		}

		[Address(RVA = "0xA72950", Offset = "0xA72950", VA = "0xA72950", Slot = "6")]
		public virtual bool CustomCapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, float maxDistance, out RaycastHit hitData)
		{
			return default(bool);
		}

		[Address(RVA = "0xA729FC", Offset = "0xA729FC", VA = "0xA729FC", Slot = "7")]
		public virtual bool CustomBoxCast(Vector3 center, Vector3 halfExtents, Vector3 direction, Quaternion orientation, float maxDistance, out RaycastHit hitData)
		{
			return default(bool);
		}

		[Address(RVA = "0xA72AB8", Offset = "0xA72AB8", VA = "0xA72AB8")]
		public VRTK_CustomRaycast()
		{
		}
	}
	public static class VRTK_DeviceFinder
	{
		public enum Devices
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Headset,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LeftController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RightController
		}

		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x65B350", Offset = "0x65B350")]
		public enum Headsets
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Unknown,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OculusRift,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OculusRiftCV1,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Vive,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ViveMV,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ViveDVT,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OculusRiftES07
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string cachedHeadsetType;

		[Address(RVA = "0xA79CE0", Offset = "0xA79CE0", VA = "0xA79CE0")]
		public static SDK_BaseController.ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Address(RVA = "0xA79D48", Offset = "0xA79D48", VA = "0xA79D48")]
		public static uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Address(RVA = "0xA79DB0", Offset = "0xA79DB0", VA = "0xA79DB0")]
		public static GameObject GetControllerByIndex(uint index, bool getActual)
		{
			return null;
		}

		[Address(RVA = "0xA79E28", Offset = "0xA79E28", VA = "0xA79E28")]
		public static Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xA79E90", Offset = "0xA79E90", VA = "0xA79E90")]
		public static Transform DeviceTransform(Devices device)
		{
			return null;
		}

		[Address(RVA = "0xA79F88", Offset = "0xA79F88", VA = "0xA79F88")]
		public static SDK_BaseController.ControllerHand GetControllerHandType(string hand)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Address(RVA = "0xA69030", Offset = "0xA69030", VA = "0xA69030")]
		public static SDK_BaseController.ControllerHand GetControllerHand(GameObject controller)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Address(RVA = "0xA785D0", Offset = "0xA785D0", VA = "0xA785D0")]
		public static GameObject GetControllerLeftHand(bool getActual = false)
		{
			return null;
		}

		[Address(RVA = "0xA78638", Offset = "0xA78638", VA = "0xA78638")]
		public static GameObject GetControllerRightHand(bool getActual = false)
		{
			return null;
		}

		[Address(RVA = "0xA7A028", Offset = "0xA7A028", VA = "0xA7A028")]
		public static VRTK_ControllerReference GetControllerReferenceLeftHand()
		{
			return null;
		}

		[Address(RVA = "0xA7A088", Offset = "0xA7A088", VA = "0xA7A088")]
		public static VRTK_ControllerReference GetControllerReferenceRightHand()
		{
			return null;
		}

		[Address(RVA = "0xA7A0E8", Offset = "0xA7A0E8", VA = "0xA7A0E8")]
		public static VRTK_ControllerReference GetControllerReferenceForHand(SDK_BaseController.ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xA7A14C", Offset = "0xA7A14C", VA = "0xA7A14C")]
		public static bool IsControllerOfHand(GameObject checkController, SDK_BaseController.ControllerHand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xA7A214", Offset = "0xA7A214", VA = "0xA7A214")]
		public static bool IsControllerLeftHand(GameObject checkController)
		{
			return default(bool);
		}

		[Address(RVA = "0xA7A27C", Offset = "0xA7A27C", VA = "0xA7A27C")]
		public static bool IsControllerRightHand(GameObject checkController)
		{
			return default(bool);
		}

		[Address(RVA = "0xA7A2E4", Offset = "0xA7A2E4", VA = "0xA7A2E4")]
		public static SDK_BaseController.ControllerHand GetOppositeHand(SDK_BaseController.ControllerHand currentHand)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Address(RVA = "0xA69AE0", Offset = "0xA69AE0", VA = "0xA69AE0")]
		public static GameObject GetActualController(GameObject givenController)
		{
			return null;
		}

		[Address(RVA = "0xA7A300", Offset = "0xA7A300", VA = "0xA7A300")]
		public static GameObject GetScriptAliasController(GameObject givenController)
		{
			return null;
		}

		[Address(RVA = "0xA6A08C", Offset = "0xA6A08C", VA = "0xA6A08C")]
		public static GameObject GetModelAliasController(GameObject givenController)
		{
			return null;
		}

		[Address(RVA = "0xA7A45C", Offset = "0xA7A45C", VA = "0xA7A45C")]
		public static SDK_BaseController.ControllerHand GetModelAliasControllerHand(GameObject givenObject)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Address(RVA = "0xA7A574", Offset = "0xA7A574", VA = "0xA7A574")]
		public static Vector3 GetControllerVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA7A5DC", Offset = "0xA7A5DC", VA = "0xA7A5DC")]
		public static Vector3 GetControllerAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA7A644", Offset = "0xA7A644", VA = "0xA7A644")]
		public static Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA7A6A4", Offset = "0xA7A6A4", VA = "0xA7A6A4")]
		public static Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA77F6C", Offset = "0xA77F6C", VA = "0xA77F6C")]
		public static Transform HeadsetTransform()
		{
			return null;
		}

		[Address(RVA = "0xA76608", Offset = "0xA76608", VA = "0xA76608")]
		public static Transform HeadsetCamera()
		{
			return null;
		}

		[Address(RVA = "0xA7A704", Offset = "0xA7A704", VA = "0xA7A704")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67FD08", Offset = "0x67FD08")]
		public static void ResetHeadsetTypeCache()
		{
		}

		[Address(RVA = "0xA7A778", Offset = "0xA7A778", VA = "0xA7A778")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67FD40", Offset = "0x67FD40")]
		public static Headsets GetHeadsetType(bool summary = false)
		{
			return default(Headsets);
		}

		[Address(RVA = "0xA7AAEC", Offset = "0xA7AAEC", VA = "0xA7AAEC")]
		public static string GetHeadsetTypeAsString()
		{
			return null;
		}

		[Address(RVA = "0xA7AB4C", Offset = "0xA7AB4C", VA = "0xA7AB4C")]
		public static SDK_BaseHeadset.HeadsetType GetHeadsetType()
		{
			return default(SDK_BaseHeadset.HeadsetType);
		}

		[Address(RVA = "0xA77F0C", Offset = "0xA77F0C", VA = "0xA77F0C")]
		public static Transform PlayAreaTransform()
		{
			return null;
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656F04", Offset = "0x656F04")]
	public class VRTK_NavMeshData : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AF1C", Offset = "0x66AF1C")]
		public float distanceLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AF54", Offset = "0x66AF54")]
		public int validAreas;

		[Address(RVA = "0xB3910C", Offset = "0xB3910C", VA = "0xB3910C")]
		public VRTK_NavMeshData()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656F3C", Offset = "0x656F3C")]
	public class VRTK_PolicyList : MonoBehaviour
	{
		public enum OperationTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Ignore,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Include
		}

		public enum CheckTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Tag = 1,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Script = 2,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Layer = 4
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AF8C", Offset = "0x66AF8C")]
		public OperationTypes operation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AFC4", Offset = "0x66AFC4")]
		public CheckTypes checkType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66AFFC", Offset = "0x66AFFC")]
		public List<string> identifiers;

		[Address(RVA = "0x94634C", Offset = "0x94634C", VA = "0x94634C", Slot = "4")]
		public virtual bool Find(GameObject obj)
		{
			return default(bool);
		}

		[Address(RVA = "0x946364", Offset = "0x946364", VA = "0x946364")]
		public static bool Check(GameObject obj, VRTK_PolicyList list)
		{
			return default(bool);
		}

		[Address(RVA = "0x946414", Offset = "0x946414", VA = "0x946414", Slot = "5")]
		protected virtual bool ScriptCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Address(RVA = "0x946534", Offset = "0x946534", VA = "0x946534", Slot = "6")]
		protected virtual bool TagCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Address(RVA = "0x9465D0", Offset = "0x9465D0", VA = "0x9465D0", Slot = "7")]
		protected virtual bool LayerCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Address(RVA = "0x946674", Offset = "0x946674", VA = "0x946674", Slot = "8")]
		protected virtual bool TypeCheck(GameObject obj, bool returnState)
		{
			return default(bool);
		}

		[Address(RVA = "0x946838", Offset = "0x946838", VA = "0x946838")]
		public VRTK_PolicyList()
		{
		}
	}
	[Serializable]
	public class VRTK_SDKInputOverrideType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B034", Offset = "0x66B034")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B034", Offset = "0x66B034")]
		public VRTK_SDKSetup loadedSDKSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B094", Offset = "0x66B094")]
		public SDK_BaseController.ControllerType controllerType;

		[Address(RVA = "0x94CAA8", Offset = "0x94CAA8", VA = "0x94CAA8")]
		public VRTK_SDKInputOverrideType()
		{
		}
	}
	[Serializable]
	public class VRTK_SDKButtonInputOverrideType : VRTK_SDKInputOverrideType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B0CC", Offset = "0x66B0CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B0CC", Offset = "0x66B0CC")]
		public VRTK_ControllerEvents.ButtonAlias overrideButton;

		[Address(RVA = "0x94CAA0", Offset = "0x94CAA0", VA = "0x94CAA0")]
		public VRTK_SDKButtonInputOverrideType()
		{
		}
	}
	[Serializable]
	public class VRTK_SDKVector2AxisInputOverrideType : VRTK_SDKInputOverrideType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B12C", Offset = "0x66B12C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B12C", Offset = "0x66B12C")]
		public VRTK_ControllerEvents.Vector2AxisAlias overrideAxis;

		[Address(RVA = "0x95CC0C", Offset = "0x95CC0C", VA = "0x95CC0C")]
		public VRTK_SDKVector2AxisInputOverrideType()
		{
		}
	}
	public class VRTK_SDKInputOverride : VRTK_SDKControllerReady
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B388", Offset = "0x65B388")]
		private sealed class <>c__DisplayClass32_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SDK_BaseController.ControllerType currentControllerType;

			[Address(RVA = "0x94E6F8", Offset = "0x94E6F8", VA = "0x94E6F8")]
			public <>c__DisplayClass32_0()
			{
			}

			[Address(RVA = "0x94FF48", Offset = "0x94FF48", VA = "0x94FF48")]
			internal bool <GetSelectedModifier>b__1(VRTK_SDKButtonInputOverrideType item)
			{
				return default(bool);
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B398", Offset = "0x65B398")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<VRTK_SDKButtonInputOverrideType, bool> <>9__32_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<VRTK_SDKVector2AxisInputOverrideType, bool> <>9__33_0;

			[Address(RVA = "0x94FDF0", Offset = "0x94FDF0", VA = "0x94FDF0")]
			public <>c()
			{
			}

			[Address(RVA = "0x94FDF8", Offset = "0x94FDF8", VA = "0x94FDF8")]
			internal bool <GetSelectedModifier>b__32_0(VRTK_SDKButtonInputOverrideType item)
			{
				return default(bool);
			}

			[Address(RVA = "0x94FEA0", Offset = "0x94FEA0", VA = "0x94FEA0")]
			internal bool <GetSelectedModifier>b__33_0(VRTK_SDKVector2AxisInputOverrideType item)
			{
				return default(bool);
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B3A8", Offset = "0x65B3A8")]
		private sealed class <>c__DisplayClass33_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SDK_BaseController.ControllerType currentControllerType;

			[Address(RVA = "0x94E8B0", Offset = "0x94E8B0", VA = "0x94E8B0")]
			public <>c__DisplayClass33_0()
			{
			}

			[Address(RVA = "0x94FF84", Offset = "0x94FF84", VA = "0x94FF84")]
			internal bool <GetSelectedModifier>b__1(VRTK_SDKVector2AxisInputOverrideType item)
			{
				return default(bool);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B18C", Offset = "0x66B18C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B18C", Offset = "0x66B18C")]
		public VRTK_InteractGrab interactGrabScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B1EC", Offset = "0x66B1EC")]
		public List<VRTK_SDKButtonInputOverrideType> interactGrabOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B224", Offset = "0x66B224")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B224", Offset = "0x66B224")]
		public VRTK_InteractUse interactUseScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B284", Offset = "0x66B284")]
		public List<VRTK_SDKButtonInputOverrideType> interactUseOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B2BC", Offset = "0x66B2BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B2BC", Offset = "0x66B2BC")]
		public VRTK_Pointer pointerScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B31C", Offset = "0x66B31C")]
		public List<VRTK_SDKButtonInputOverrideType> pointerActivationOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B354", Offset = "0x66B354")]
		public List<VRTK_SDKButtonInputOverrideType> pointerSelectionOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B38C", Offset = "0x66B38C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B38C", Offset = "0x66B38C")]
		public VRTK_UIPointer uiPointerScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B3EC", Offset = "0x66B3EC")]
		public List<VRTK_SDKButtonInputOverrideType> uiPointerActivationOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B424", Offset = "0x66B424")]
		public List<VRTK_SDKButtonInputOverrideType> uiPointerSelectionOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B45C", Offset = "0x66B45C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B45C", Offset = "0x66B45C")]
		public VRTK_PointerDirectionIndicator pointerDirectionIndicatorScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B4BC", Offset = "0x66B4BC")]
		public List<VRTK_SDKVector2AxisInputOverrideType> directionIndicatorCoordinateOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B4F4", Offset = "0x66B4F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B4F4", Offset = "0x66B4F4")]
		public VRTK_TouchpadControl touchpadControlScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B554", Offset = "0x66B554")]
		public List<VRTK_SDKVector2AxisInputOverrideType> touchpadControlCoordinateOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B58C", Offset = "0x66B58C")]
		public List<VRTK_SDKButtonInputOverrideType> touchpadControlActivationOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B5C4", Offset = "0x66B5C4")]
		public List<VRTK_SDKButtonInputOverrideType> touchpadControlModifierOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B5FC", Offset = "0x66B5FC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B5FC", Offset = "0x66B5FC")]
		public VRTK_ButtonControl buttonControlScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B65C", Offset = "0x66B65C")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlForwardOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B694", Offset = "0x66B694")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlBackwardOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B6CC", Offset = "0x66B6CC")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlLeftOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B704", Offset = "0x66B704")]
		public List<VRTK_SDKButtonInputOverrideType> buttonControlRightOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B73C", Offset = "0x66B73C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B73C", Offset = "0x66B73C")]
		public VRTK_SlingshotJump slingshotJumpScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B79C", Offset = "0x66B79C")]
		public List<VRTK_SDKButtonInputOverrideType> slingshotJumpActivationOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B7D4", Offset = "0x66B7D4")]
		public List<VRTK_SDKButtonInputOverrideType> slingshotJumpCancelOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B80C", Offset = "0x66B80C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B80C", Offset = "0x66B80C")]
		public VRTK_MoveInPlace moveInPlaceScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B86C", Offset = "0x66B86C")]
		public List<VRTK_SDKButtonInputOverrideType> moveInPlaceEngageOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B8A4", Offset = "0x66B8A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B8A4", Offset = "0x66B8A4")]
		public VRTK_StepMultiplier stepMultiplierScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B904", Offset = "0x66B904")]
		public List<VRTK_SDKButtonInputOverrideType> stepMultiplierActivationOverrides;

		[Address(RVA = "0x94E2CC", Offset = "0x94E2CC", VA = "0x94E2CC", Slot = "15")]
		public virtual void ForceManage()
		{
		}

		[Address(RVA = "0x94E2DC", Offset = "0x94E2DC", VA = "0x94E2DC", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x94E30C", Offset = "0x94E30C", VA = "0x94E30C", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x94E35C", Offset = "0x94E35C", VA = "0x94E35C", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x94E4E0", Offset = "0x94E4E0", VA = "0x94E4E0", Slot = "16")]
		protected virtual VRTK_SDKButtonInputOverrideType GetSelectedModifier(List<VRTK_SDKButtonInputOverrideType> overrideTypes, VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0x94E700", Offset = "0x94E700", VA = "0x94E700", Slot = "17")]
		protected virtual VRTK_SDKVector2AxisInputOverrideType GetSelectedModifier(List<VRTK_SDKVector2AxisInputOverrideType> overrideTypes, VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0x94E8B8", Offset = "0x94E8B8", VA = "0x94E8B8", Slot = "18")]
		protected virtual void ManageInputs()
		{
		}

		[Address(RVA = "0x94E994", Offset = "0x94E994", VA = "0x94E994", Slot = "19")]
		protected virtual VRTK_ControllerReference GetReferenceFromEvents(VRTK_ControllerEvents controllerEvents)
		{
			return null;
		}

		[Address(RVA = "0x94EA50", Offset = "0x94EA50", VA = "0x94EA50", Slot = "20")]
		protected virtual VRTK_ControllerReference GetRightThenLeftReference()
		{
			return null;
		}

		[Address(RVA = "0x94EAF8", Offset = "0x94EAF8", VA = "0x94EAF8", Slot = "21")]
		protected virtual void ManageInteractGrab()
		{
		}

		[Address(RVA = "0x94EC30", Offset = "0x94EC30", VA = "0x94EC30", Slot = "22")]
		protected virtual void ManageInteractUse()
		{
		}

		[Address(RVA = "0x94ED68", Offset = "0x94ED68", VA = "0x94ED68", Slot = "23")]
		protected virtual void ManagePointer()
		{
		}

		[Address(RVA = "0x94EF28", Offset = "0x94EF28", VA = "0x94EF28", Slot = "24")]
		protected virtual void ManageUIPointer()
		{
		}

		[Address(RVA = "0x94F0E8", Offset = "0x94F0E8", VA = "0x94F0E8", Slot = "25")]
		protected virtual void ManagePointerDirectionIndicator()
		{
		}

		[Address(RVA = "0x94F230", Offset = "0x94F230", VA = "0x94F230", Slot = "26")]
		protected virtual void ManageTouchpadControl()
		{
		}

		[Address(RVA = "0x94F474", Offset = "0x94F474", VA = "0x94F474", Slot = "27")]
		protected virtual void ManageButtonControl()
		{
		}

		[Address(RVA = "0x94F73C", Offset = "0x94F73C", VA = "0x94F73C", Slot = "28")]
		protected virtual void ManageSlingshotJump()
		{
		}

		[Address(RVA = "0x94F908", Offset = "0x94F908", VA = "0x94F908", Slot = "29")]
		protected virtual void ManageMoveInPlace()
		{
		}

		[Address(RVA = "0x94FA2C", Offset = "0x94FA2C", VA = "0x94FA2C", Slot = "30")]
		protected virtual void ManageStepMultiplier()
		{
		}

		[Address(RVA = "0x94FB64", Offset = "0x94FB64", VA = "0x94FB64")]
		public VRTK_SDKInputOverride()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656F74", Offset = "0x656F74")]
	public class VRTK_SDKObjectAlias : MonoBehaviour
	{
		public enum SDKObject
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Boundary,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Headset
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B93C", Offset = "0x66B93C")]
		public SDKObject sdkObject;

		[Address(RVA = "0x957DB8", Offset = "0x957DB8", VA = "0x957DB8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x957E60", Offset = "0x957E60", VA = "0x957E60", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x957F2C", Offset = "0x957F2C", VA = "0x957F2C", Slot = "6")]
		protected virtual void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Address(RVA = "0x957FD4", Offset = "0x957FD4", VA = "0x957FD4", Slot = "7")]
		protected virtual void ChildToSDKObject()
		{
		}

		[Address(RVA = "0x9581EC", Offset = "0x9581EC", VA = "0x9581EC")]
		public VRTK_SDKObjectAlias()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656FAC", Offset = "0x656FAC")]
	public class VRTK_SDKObjectState : VRTK_SDKControllerReady
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B3B8", Offset = "0x65B3B8")]
		private sealed class <CheckToggleAtEndOfFrame>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_SDKObjectState <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x958BBC", Offset = "0x958BBC", VA = "0x958BBC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x958C2C", Offset = "0x958C2C", VA = "0x958C2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x95844C", Offset = "0x95844C", VA = "0x95844C")]
			[DebuggerHidden]
			public <CheckToggleAtEndOfFrame>d__10(int <>1__state)
			{
			}

			[Address(RVA = "0x958B04", Offset = "0x958B04", VA = "0x958B04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x958B08", Offset = "0x958B08", VA = "0x958B08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x958BC4", Offset = "0x958BC4", VA = "0x958BC4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66B974", Offset = "0x66B974")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B974", Offset = "0x66B974")]
		public UnityEngine.Object target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66B9D4", Offset = "0x66B9D4")]
		public bool objectState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BA0C", Offset = "0x66BA0C")]
		public VRTK_SDKSetup loadedSDKSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BA44", Offset = "0x66BA44")]
		public SDK_BaseHeadset.HeadsetType headsetType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BA7C", Offset = "0x66BA7C")]
		public SDK_BaseController.ControllerType controllerType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Coroutine checkToggleRoutine;

		[Address(RVA = "0x9581F4", Offset = "0x9581F4", VA = "0x9581F4", Slot = "15")]
		public virtual void SetStateByControllerReference(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x9582CC", Offset = "0x9582CC", VA = "0x9582CC", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x95838C", Offset = "0x95838C", VA = "0x95838C", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x9583C8", Offset = "0x9583C8", VA = "0x9583C8", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x9583D8", Offset = "0x9583D8", VA = "0x9583D8", Slot = "16")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67FD78", Offset = "0x67FD78")]
		protected virtual IEnumerator CheckToggleAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0x958478", Offset = "0x958478", VA = "0x958478", Slot = "17")]
		protected virtual void CheckToggle()
		{
		}

		[Address(RVA = "0x9584B4", Offset = "0x9584B4", VA = "0x9584B4", Slot = "18")]
		protected virtual void ToggleOnSDK()
		{
		}

		[Address(RVA = "0x9585B0", Offset = "0x9585B0", VA = "0x9585B0", Slot = "19")]
		protected virtual void ToggleOnHeadset()
		{
		}

		[Address(RVA = "0x958644", Offset = "0x958644", VA = "0x958644", Slot = "20")]
		protected virtual void ToggleOnController(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x9586F4", Offset = "0x9586F4", VA = "0x9586F4", Slot = "21")]
		protected virtual void ToggleObject()
		{
		}

		[Address(RVA = "0x9587F4", Offset = "0x9587F4", VA = "0x9587F4", Slot = "22")]
		protected virtual void ToggleGameObject()
		{
		}

		[Address(RVA = "0x958958", Offset = "0x958958", VA = "0x958958", Slot = "23")]
		protected virtual void ToggleComponent()
		{
		}

		[Address(RVA = "0x958AFC", Offset = "0x958AFC", VA = "0x958AFC")]
		public VRTK_SDKObjectState()
		{
		}
	}
	[Serializable]
	public class VRTK_SDKTransformModifiers
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66BAB4", Offset = "0x66BAB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BAB4", Offset = "0x66BAB4")]
		public VRTK_SDKSetup loadedSDKSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BB14", Offset = "0x66BB14")]
		public SDK_BaseController.ControllerType controllerType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66BB4C", Offset = "0x66BB4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BB4C", Offset = "0x66BB4C")]
		public Vector3 position;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BBAC", Offset = "0x66BBAC")]
		public Vector3 rotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BBE4", Offset = "0x66BBE4")]
		public Vector3 scale;

		[Address(RVA = "0x95C334", Offset = "0x95C334", VA = "0x95C334")]
		public VRTK_SDKTransformModifiers()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x656FE4", Offset = "0x656FE4")]
	public class VRTK_SDKTransformModify : VRTK_SDKControllerReady
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B3C8", Offset = "0x65B3C8")]
		private sealed class <>c__DisplayClass11_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SDK_BaseController.ControllerType currentControllerType;

			[Address(RVA = "0x95CA3C", Offset = "0x95CA3C", VA = "0x95CA3C")]
			public <>c__DisplayClass11_0()
			{
			}

			[Address(RVA = "0x95CBD0", Offset = "0x95CBD0", VA = "0x95CBD0")]
			internal bool <GetSelectedModifier>b__1(VRTK_SDKTransformModifiers item)
			{
				return default(bool);
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B3D8", Offset = "0x65B3D8")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<VRTK_SDKTransformModifiers, bool> <>9__11_0;

			[Address(RVA = "0x95CB20", Offset = "0x95CB20", VA = "0x95CB20")]
			public <>c()
			{
			}

			[Address(RVA = "0x95CB28", Offset = "0x95CB28", VA = "0x95CB28")]
			internal bool <GetSelectedModifier>b__11_0(VRTK_SDKTransformModifiers item)
			{
				return default(bool);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BC1C", Offset = "0x66BC1C")]
		public Transform target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BC54", Offset = "0x66BC54")]
		public bool resetOnDisable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BC8C", Offset = "0x66BC8C")]
		public List<VRTK_SDKTransformModifiers> sdkOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 originalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion originalRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalScale;

		[Address(RVA = "0x95C3CC", Offset = "0x95C3CC", VA = "0x95C3CC", Slot = "15")]
		public virtual void UpdateTransform([Optional] VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x95C524", Offset = "0x95C524", VA = "0x95C524", Slot = "16")]
		public virtual void SetOrigins()
		{
		}

		[Address(RVA = "0x95C608", Offset = "0x95C608", VA = "0x95C608", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x95C6B0", Offset = "0x95C6B0", VA = "0x95C6B0", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x95C78C", Offset = "0x95C78C", VA = "0x95C78C", Slot = "14")]
		protected override void ControllerReady(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0x95C884", Offset = "0x95C884", VA = "0x95C884", Slot = "17")]
		protected virtual VRTK_SDKTransformModifiers GetSelectedModifier(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0x95CA44", Offset = "0x95CA44", VA = "0x95CA44")]
		public VRTK_SDKTransformModify()
		{
		}
	}
	public static class VRTK_SharedMethods
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B3E8", Offset = "0x65B3E8")]
		private sealed class <>c__DisplayClass11_0<T> where T : Component
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string gameObjectName;

			internal GameObject <FindEvenInactiveGameObject>b__0(T component)
			{
				return null;
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B3F8", Offset = "0x65B3F8")]
		private sealed class <>c__11<T> where T : Component
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__11<T> <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<GameObject, bool> <>9__11_1;

			internal bool <FindEvenInactiveGameObject>b__11_1(GameObject gameObject)
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xA29E94", Offset = "0xA29E94", VA = "0xA29E94")]
		public static Bounds GetBounds(Transform transform, [Optional] Transform excludeRotation, [Optional] Transform excludeTransform)
		{
			return default(Bounds);
		}

		[Address(RVA = "0xA2A450", Offset = "0xA2A450", VA = "0xA2A450")]
		public static bool IsLowest(float value, float[] others)
		{
			return default(bool);
		}

		[Address(RVA = "0xA2A4D8", Offset = "0xA2A4D8", VA = "0xA2A4D8")]
		public static Transform AddCameraFade()
		{
			return null;
		}

		[Address(RVA = "0xA2A574", Offset = "0xA2A574", VA = "0xA2A574")]
		public static void CreateColliders(GameObject obj)
		{
		}

		[Address(RVA = "0xA2A6E4", Offset = "0xA2A6E4", VA = "0xA2A6E4")]
		public static Collider[] ColliderExclude(Collider[] setA, Collider[] setB)
		{
			return null;
		}

		[Address(RVA = "0xA2A754", Offset = "0xA2A754", VA = "0xA2A754")]
		public static Collider[] GetCollidersInGameObjects(GameObject[] gameObjects, bool searchChildren, bool includeInactive)
		{
			return null;
		}

		[Address(RVA = "0xA2A8F0", Offset = "0xA2A8F0", VA = "0xA2A8F0")]
		public static Component CloneComponent(Component source, GameObject destination, bool copyProperties = false)
		{
			return null;
		}

		[Address(RVA = "0xA2AB24", Offset = "0xA2AB24", VA = "0xA2AB24")]
		public static Color ColorDarken(Color color, float percent)
		{
			return default(Color);
		}

		[Address(RVA = "0xA2AC54", Offset = "0xA2AC54", VA = "0xA2AC54")]
		public static float RoundFloat(float givenFloat, int decimalPlaces, bool rawFidelity = false)
		{
			return default(float);
		}

		[Address(RVA = "0xA2AD84", Offset = "0xA2AD84", VA = "0xA2AD84")]
		public static bool IsEditTime()
		{
			return default(bool);
		}

		[Address(RVA = "0xA2AD8C", Offset = "0xA2AD8C", VA = "0xA2AD8C")]
		public static float Mod(float a, float b)
		{
			return default(float);
		}

		public static GameObject FindEvenInactiveGameObject<T>([Optional] string gameObjectName, bool searchAllScenes = false) where T : Component
		{
			return null;
		}

		public static T[] FindEvenInactiveComponents<T>(bool searchAllScenes = false) where T : Component
		{
			return null;
		}

		public static T FindEvenInactiveComponent<T>(bool searchAllScenes = false) where T : Component
		{
			return null;
		}

		[Address(RVA = "0xA2AE08", Offset = "0xA2AE08", VA = "0xA2AE08")]
		public static string GenerateVRTKObjectName(bool autoGen, params object[] replacements)
		{
			return null;
		}

		[Address(RVA = "0xA2B054", Offset = "0xA2B054", VA = "0xA2B054")]
		public static float GetGPUTimeLastFrame()
		{
			return default(float);
		}

		[Address(RVA = "0xA2B08C", Offset = "0xA2B08C", VA = "0xA2B08C")]
		public static bool Vector2ShallowCompare(Vector2 vectorA, Vector2 vectorB, int compareFidelity)
		{
			return default(bool);
		}

		[Address(RVA = "0xA2B1F4", Offset = "0xA2B1F4", VA = "0xA2B1F4")]
		public static bool Vector3ShallowCompare(Vector3 vectorA, Vector3 vectorB, float threshold)
		{
			return default(bool);
		}

		[Address(RVA = "0xA2ABB4", Offset = "0xA2ABB4", VA = "0xA2ABB4")]
		public static float NumberPercent(float value, float percent)
		{
			return default(float);
		}

		[Address(RVA = "0xA2B2B4", Offset = "0xA2B2B4", VA = "0xA2B2B4")]
		public static void SetGlobalScale(this Transform transform, Vector3 globalScale)
		{
		}

		[Address(RVA = "0xA2B438", Offset = "0xA2B438", VA = "0xA2B438")]
		public static Vector3 VectorHeading(Vector3 originPosition, Vector3 targetPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA2B4E0", Offset = "0xA2B4E0", VA = "0xA2B4E0")]
		public static Vector3 VectorDirection(Vector3 originPosition, Vector3 targetPosition)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA2B5D8", Offset = "0xA2B5D8", VA = "0xA2B5D8")]
		public static float DividerToMultiplier(float value)
		{
			return default(float);
		}

		[Address(RVA = "0xA2B5EC", Offset = "0xA2B5EC", VA = "0xA2B5EC")]
		public static float NormalizeValue(float value, float minValue, float maxValue, float threshold = 0f)
		{
			return default(float);
		}

		[Address(RVA = "0xA2B6B0", Offset = "0xA2B6B0", VA = "0xA2B6B0")]
		public static Vector3 AxisDirection(int axisIndex, [Optional] Transform givenTransform)
		{
			return default(Vector3);
		}

		public static bool AddListValue<TValue>(List<TValue> list, TValue value, bool preventDuplicates = false)
		{
			return default(bool);
		}

		public static TValue GetDictionaryValue<TValue, TKey>(Dictionary<TKey, TValue> dictionary, TKey key, [Optional] TValue defaultValue, bool setMissingKey = false)
		{
			return (TValue)null;
		}

		public static TValue GetDictionaryValue<TValue, TKey>(Dictionary<TKey, TValue> dictionary, TKey key, out bool keyExists, [Optional] TValue defaultValue, bool setMissingKey = false)
		{
			return (TValue)null;
		}

		public static bool AddDictionaryValue<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey key, TValue value, bool overwriteExisting = false)
		{
			return default(bool);
		}

		[Address(RVA = "0xA2B950", Offset = "0xA2B950", VA = "0xA2B950")]
		public static Type GetTypeUnknownAssembly(string typeName)
		{
			return null;
		}

		[Address(RVA = "0xA2BAD0", Offset = "0xA2BAD0", VA = "0xA2BAD0")]
		public static float GetEyeTextureResolutionScale()
		{
			return default(float);
		}

		[Address(RVA = "0xA2BAD8", Offset = "0xA2BAD8", VA = "0xA2BAD8")]
		public static void SetEyeTextureResolutionScale(float value)
		{
		}

		[Address(RVA = "0xA2BAE0", Offset = "0xA2BAE0", VA = "0xA2BAE0")]
		public static bool IsTypeSubclassOf(Type givenType, Type givenBaseType)
		{
			return default(bool);
		}

		[Address(RVA = "0xA2BB1C", Offset = "0xA2BB1C", VA = "0xA2BB1C")]
		public static object[] GetTypeCustomAttributes(Type givenType, Type attributeType, bool inherit)
		{
			return null;
		}

		[Address(RVA = "0xA2BB64", Offset = "0xA2BB64", VA = "0xA2BB64")]
		public static Type GetBaseType(Type givenType)
		{
			return null;
		}

		[Address(RVA = "0xA2BB98", Offset = "0xA2BB98", VA = "0xA2BB98")]
		public static bool IsTypeAssignableFrom(Type givenType, Type sourceType)
		{
			return default(bool);
		}

		[Address(RVA = "0xA2BBD4", Offset = "0xA2BBD4", VA = "0xA2BBD4")]
		public static Type GetNestedType(Type givenType, string name)
		{
			return null;
		}

		public static string GetPropertyFirstName<T>()
		{
			return null;
		}

		[Address(RVA = "0xA2BC08", Offset = "0xA2BC08", VA = "0xA2BC08")]
		public static string[] GetCommandLineArguements()
		{
			return null;
		}

		[Address(RVA = "0xA2BC10", Offset = "0xA2BC10", VA = "0xA2BC10")]
		public static Type[] GetTypesOfType(Type givenType)
		{
			return null;
		}

		[Address(RVA = "0xA2BC60", Offset = "0xA2BC60", VA = "0xA2BC60")]
		public static Type[] GetExportedTypesOfType(Type givenType)
		{
			return null;
		}

		[Address(RVA = "0xA2BCB4", Offset = "0xA2BCB4", VA = "0xA2BCB4")]
		public static bool IsTypeAbstract(Type givenType)
		{
			return default(bool);
		}

		private static IEnumerable<T> FindEvenInactiveComponentsInValidScenes<T>(bool searchAllScenes, bool stopOnMatch = false) where T : Component
		{
			return null;
		}

		private static IEnumerable<T> FindEvenInactiveComponentsInScene<T>(Scene scene, bool stopOnMatch = false)
		{
			return null;
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65702C", Offset = "0x65702C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x65702C", Offset = "0x65702C")]
	public class VRTK_Simulator : MonoBehaviour
	{
		[Serializable]
		public class Keys
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public KeyCode forward;

			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public KeyCode backward;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public KeyCode strafeLeft;

			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public KeyCode strafeRight;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KeyCode left;

			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public KeyCode right;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KeyCode up;

			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public KeyCode down;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public KeyCode reset;

			[Address(RVA = "0xA2C588", Offset = "0xA2C588", VA = "0xA2C588")]
			public Keys()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BCC4", Offset = "0x66BCC4")]
		public Keys keys;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BCFC", Offset = "0x66BCFC")]
		public bool onlyInEditor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BD34", Offset = "0x66BD34")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BD6C", Offset = "0x66BD6C")]
		public Transform camStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform headset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform playArea;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 initialPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Quaternion initialRotation;

		[Address(RVA = "0xA2BCE0", Offset = "0xA2BCE0", VA = "0xA2BCE0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xA2BD48", Offset = "0xA2BD48", VA = "0xA2BD48", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xA2C0E8", Offset = "0xA2C0E8", VA = "0xA2C0E8", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xA2C150", Offset = "0xA2C150", VA = "0xA2C150", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xA2C534", Offset = "0xA2C534", VA = "0xA2C534", Slot = "8")]
		protected virtual Vector3 overwriteY(Vector3 vector, float value)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xA2C56C", Offset = "0xA2C56C", VA = "0xA2C56C")]
		public VRTK_Simulator()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65708C", Offset = "0x65708C")]
	public class VRTK_VelocityEstimator : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B408", Offset = "0x65B408")]
		private sealed class <EstimateVelocity>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_VelocityEstimator <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x88989C", Offset = "0x88989C", VA = "0x88989C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x88990C", Offset = "0x88990C", VA = "0x88990C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x889368", Offset = "0x889368", VA = "0x889368")]
			[DebuggerHidden]
			public <EstimateVelocity>d__15(int <>1__state)
			{
			}

			[Address(RVA = "0x8893B0", Offset = "0x8893B0", VA = "0x8893B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x8893B4", Offset = "0x8893B4", VA = "0x8893B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x8898A4", Offset = "0x8898A4", VA = "0x8898A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BDA4", Offset = "0x66BDA4")]
		public bool autoStartSampling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BDDC", Offset = "0x66BDDC")]
		public int velocityAverageFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BE14", Offset = "0x66BE14")]
		public int angularVelocityAverageFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Vector3[] velocitySamples;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3[] angularVelocitySamples;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int currentSampleCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Coroutine calculateSamplesRoutine;

		[Address(RVA = "0x888BB4", Offset = "0x888BB4", VA = "0x888BB4", Slot = "4")]
		public virtual void StartEstimation()
		{
		}

		[Address(RVA = "0x888C00", Offset = "0x888C00", VA = "0x888C00", Slot = "5")]
		public virtual void EndEstimation()
		{
		}

		[Address(RVA = "0x888C34", Offset = "0x888C34", VA = "0x888C34", Slot = "6")]
		public virtual Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x888E14", Offset = "0x888E14", VA = "0x888E14", Slot = "7")]
		public virtual Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x888FF4", Offset = "0x888FF4", VA = "0x888FF4", Slot = "8")]
		public virtual Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x889238", Offset = "0x889238", VA = "0x889238", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x889280", Offset = "0x889280", VA = "0x889280", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x88928C", Offset = "0x88928C", VA = "0x88928C", Slot = "11")]
		protected virtual void InitArrays()
		{
		}

		[Address(RVA = "0x8892F4", Offset = "0x8892F4", VA = "0x8892F4", Slot = "12")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x67FDEC", Offset = "0x67FDEC")]
		protected virtual IEnumerator EstimateVelocity()
		{
			return null;
		}

		[Address(RVA = "0x889394", Offset = "0x889394", VA = "0x889394")]
		public VRTK_VelocityEstimator()
		{
		}
	}
	public abstract class SDK_Base : ScriptableObject
	{
		[Address(RVA = "0xCED6F4", Offset = "0xCED6F4", VA = "0xCED6F4", Slot = "4")]
		public virtual void OnBeforeSetupLoad(VRTK_SDKSetup setup)
		{
		}

		[Address(RVA = "0xCED6F8", Offset = "0xCED6F8", VA = "0xCED6F8", Slot = "5")]
		public virtual void OnAfterSetupLoad(VRTK_SDKSetup setup)
		{
		}

		[Address(RVA = "0xCED6FC", Offset = "0xCED6FC", VA = "0xCED6FC", Slot = "6")]
		public virtual void OnBeforeSetupUnload(VRTK_SDKSetup setup)
		{
		}

		[Address(RVA = "0xCED700", Offset = "0xCED700", VA = "0xCED700", Slot = "7")]
		public virtual void OnAfterSetupUnload(VRTK_SDKSetup setup)
		{
		}

		[Address(RVA = "0xCED704", Offset = "0xCED704", VA = "0xCED704")]
		protected SDK_Base()
		{
		}
	}
	public abstract class SDK_BaseBoundaries : SDK_Base
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Transform cachedPlayArea;

		public abstract void InitBoundaries();

		public abstract Transform GetPlayArea();

		public abstract Vector3[] GetPlayAreaVertices();

		public abstract float GetPlayAreaBorderThickness();

		public abstract bool IsPlayAreaSizeCalibrated();

		public abstract bool GetDrawAtRuntime();

		public abstract void SetDrawAtRuntime(bool value);

		[Address(RVA = "0xCED70C", Offset = "0xCED70C", VA = "0xCED70C")]
		protected Transform GetSDKManagerPlayArea()
		{
			return null;
		}

		[Address(RVA = "0xCED8C0", Offset = "0xCED8C0", VA = "0xCED8C0")]
		protected SDK_BaseBoundaries()
		{
		}
	}
	public struct VRTKSDKBaseControllerEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTK_ControllerReference controllerReference;
	}
	public delegate void VRTKSDKBaseControllerEventHandler(object sender, VRTKSDKBaseControllerEventArgs e);
	public abstract class SDK_BaseController : SDK_Base
	{
		public enum ButtonTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonOne,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonTwo,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Grip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripHairline,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			StartMenu,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Trigger,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TriggerHairline,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Touchpad,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTwo,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			MiddleFinger,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RingFinger,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PinkyFinger
		}

		public enum ButtonPressTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Press,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PressDown,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PressUp,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Touch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchDown,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchUp
		}

		public enum ControllerElements
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AttachPoint,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Trigger,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripLeft,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GripRight,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Touchpad,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonOne,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonTwo,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SystemMenu,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Body,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			StartMenu,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TouchpadTwo
		}

		public enum ControllerHand
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Left,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right
		}

		public enum ControllerType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Undefined,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Custom,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Simulator_Hand,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SteamVR_ViveWand,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SteamVR_OculusTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Oculus_OculusTouch,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Daydream_Controller,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Ximmerse_Flip,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SteamVR_ValveKnuckles,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Oculus_OculusGamepad,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Oculus_OculusRemote,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Oculus_GearVRHMD,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Oculus_GearVRController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WindowsMR_MotionController,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SteamVR_WindowsMRController
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform defaultSDKLeftControllerModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform defaultSDKRightControllerModel;

		public event VRTKSDKBaseControllerEventHandler LeftControllerReady
		{
			[Address(RVA = "0xCED8C8", Offset = "0xCED8C8", VA = "0xCED8C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FE50", Offset = "0x67FE50")]
			add
			{
			}
			[Address(RVA = "0xCED9B4", Offset = "0xCED9B4", VA = "0xCED9B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FE60", Offset = "0x67FE60")]
			remove
			{
			}
		}

		public event VRTKSDKBaseControllerEventHandler RightControllerReady
		{
			[Address(RVA = "0xCEDAA0", Offset = "0xCEDAA0", VA = "0xCEDAA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FE70", Offset = "0x67FE70")]
			add
			{
			}
			[Address(RVA = "0xCEDB8C", Offset = "0xCEDB8C", VA = "0xCEDB8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FE80", Offset = "0x67FE80")]
			remove
			{
			}
		}

		public event VRTKSDKBaseControllerEventHandler LeftControllerModelReady
		{
			[Address(RVA = "0xCEDC78", Offset = "0xCEDC78", VA = "0xCEDC78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FE90", Offset = "0x67FE90")]
			add
			{
			}
			[Address(RVA = "0xCEDD64", Offset = "0xCEDD64", VA = "0xCEDD64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FEA0", Offset = "0x67FEA0")]
			remove
			{
			}
		}

		public event VRTKSDKBaseControllerEventHandler RightControllerModelReady
		{
			[Address(RVA = "0xCEDE50", Offset = "0xCEDE50", VA = "0xCEDE50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FEB0", Offset = "0x67FEB0")]
			add
			{
			}
			[Address(RVA = "0xCEDF3C", Offset = "0xCEDF3C", VA = "0xCEDF3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x67FEC0", Offset = "0x67FEC0")]
			remove
			{
			}
		}

		[Address(RVA = "0xCEE028", Offset = "0xCEE028", VA = "0xCEE028", Slot = "8")]
		public virtual void OnControllerReady(ControllerHand hand)
		{
		}

		public abstract void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options);

		public abstract void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options);

		public abstract ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference);

		public abstract string GetControllerDefaultColliderPath(ControllerHand hand);

		public abstract string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false);

		public abstract uint GetControllerIndex(GameObject controller);

		public abstract GameObject GetControllerByIndex(uint index, bool actual = false);

		public abstract Transform GetControllerOrigin(VRTK_ControllerReference controllerReference);

		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67FED0", Offset = "0x67FED0")]
		public abstract Transform GenerateControllerPointerOrigin(GameObject parent);

		public abstract GameObject GetControllerLeftHand(bool actual = false);

		public abstract GameObject GetControllerRightHand(bool actual = false);

		public abstract bool IsControllerLeftHand(GameObject controller);

		public abstract bool IsControllerRightHand(GameObject controller);

		public abstract bool IsControllerLeftHand(GameObject controller, bool actual);

		public abstract bool IsControllerRightHand(GameObject controller, bool actual);

		public abstract bool WaitForControllerModel(ControllerHand hand);

		public abstract GameObject GetControllerModel(GameObject controller);

		public abstract GameObject GetControllerModel(ControllerHand hand);

		[Address(RVA = "0xCEE0DC", Offset = "0xCEE0DC", VA = "0xCEE0DC", Slot = "27")]
		public virtual ControllerHand GetControllerModelHand(GameObject controllerModel)
		{
			return default(ControllerHand);
		}

		public abstract GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference);

		public abstract void SetControllerRenderModelWheel(GameObject renderModel, bool state);

		public abstract void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f);

		public abstract bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip);

		public abstract SDK_ControllerHapticModifiers GetHapticModifiers();

		public abstract Vector3 GetVelocity(VRTK_ControllerReference controllerReference);

		public abstract Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference);

		public abstract bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity);

		public abstract Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference);

		public abstract float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference);

		public abstract float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference);

		public abstract bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference);

		[Address(RVA = "0xCEE290", Offset = "0xCEE290", VA = "0xCEE290", Slot = "40")]
		protected virtual GameObject GetSDKManagerControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCEE3D0", Offset = "0xCEE3D0", VA = "0xCEE3D0", Slot = "41")]
		protected virtual GameObject GetSDKManagerControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCEE510", Offset = "0xCEE510", VA = "0xCEE510", Slot = "42")]
		protected virtual bool CheckActualOrScriptAliasControllerIsLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCEE570", Offset = "0xCEE570", VA = "0xCEE570", Slot = "43")]
		protected virtual bool CheckActualOrScriptAliasControllerIsRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCEE5D0", Offset = "0xCEE5D0", VA = "0xCEE5D0", Slot = "44")]
		protected virtual bool CheckControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCEE780", Offset = "0xCEE780", VA = "0xCEE780", Slot = "45")]
		protected virtual bool CheckControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCEE930", Offset = "0xCEE930", VA = "0xCEE930", Slot = "46")]
		protected virtual GameObject GetControllerModelFromController(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCEE9BC", Offset = "0xCEE9BC", VA = "0xCEE9BC", Slot = "47")]
		protected virtual GameObject GetSDKManagerControllerModelForHand(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCEEB30", Offset = "0xCEEB30", VA = "0xCEEB30", Slot = "48")]
		protected virtual GameObject GetActualController(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCEECD0", Offset = "0xCEECD0", VA = "0xCEECD0", Slot = "49")]
		protected virtual void OnControllerModelReady(ControllerHand hand, VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xCEED04", Offset = "0xCEED04", VA = "0xCEED04", Slot = "50")]
		protected virtual bool ShouldWaitForControllerModel(ControllerHand hand, bool ignoreChildCount)
		{
			return default(bool);
		}

		[Address(RVA = "0xCEED90", Offset = "0xCEED90", VA = "0xCEED90", Slot = "51")]
		protected virtual bool IsDefaultControllerModel(Transform givenDefault, GameObject givenActual, bool ignoreChildCount)
		{
			return default(bool);
		}

		[Address(RVA = "0xCEEED4", Offset = "0xCEEED4", VA = "0xCEEED4")]
		protected SDK_BaseController()
		{
		}
	}
	public class SDK_ControllerHapticModifiers
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float durationModifier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float intervalModifier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort maxHapticVibration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int hapticsBufferSize;

		[Address(RVA = "0xCEF578", Offset = "0xCEF578", VA = "0xCEF578")]
		public SDK_ControllerHapticModifiers()
		{
		}
	}
	public abstract class SDK_BaseHeadset : SDK_Base
	{
		public enum HeadsetType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Undefined,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Simulator,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HTCVive,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OculusRiftDK1,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OculusRiftDK2,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OculusRift,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OculusGearVR,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GoogleDaydream,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GoogleCardboard,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HyperealVR,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WindowsMixedReality
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Transform cachedHeadset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Transform cachedHeadsetCamera;

		public abstract void ProcessUpdate(Dictionary<string, object> options);

		public abstract void ProcessFixedUpdate(Dictionary<string, object> options);

		public abstract Transform GetHeadset();

		public abstract Transform GetHeadsetCamera();

		public abstract string GetHeadsetType();

		public abstract Vector3 GetHeadsetVelocity();

		public abstract Vector3 GetHeadsetAngularVelocity();

		public abstract void HeadsetFade(Color color, float duration, bool fadeOverlay = false);

		public abstract bool HasHeadsetFade(Transform obj);

		public abstract void AddHeadsetFade(Transform camera);

		[Address(RVA = "0xCEEEDC", Offset = "0xCEEEDC", VA = "0xCEEEDC")]
		protected Transform GetSDKManagerHeadset()
		{
			return null;
		}

		[Address(RVA = "0xCEF0E0", Offset = "0xCEF0E0", VA = "0xCEF0E0", Slot = "18")]
		protected virtual string ScrapeHeadsetType()
		{
			return null;
		}

		[Address(RVA = "0xCEF494", Offset = "0xCEF494", VA = "0xCEF494")]
		protected string CleanPropertyString(string inputString)
		{
			return null;
		}

		[Address(RVA = "0xCEF568", Offset = "0xCEF568", VA = "0xCEF568")]
		protected SDK_BaseHeadset()
		{
		}
	}
	public abstract class SDK_BaseSystem : SDK_Base
	{
		public abstract bool IsDisplayOnDesktop();

		public abstract bool ShouldAppRenderWithLowResources();

		public abstract void ForceInterleavedReprojectionOn(bool force);

		[Address(RVA = "0xCEF570", Offset = "0xCEF570", VA = "0xCEF570")]
		protected SDK_BaseSystem()
		{
		}
	}
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x6570C4", Offset = "0x6570C4")]
	public sealed class SDK_DescriptionAttribute : Attribute
	{
		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B418", Offset = "0x65B418")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<SDK_DescriptionAttribute, int> <>9__8_0;

			[Address(RVA = "0xCEFF14", Offset = "0xCEFF14", VA = "0xCEFF14")]
			public <>c()
			{
			}

			[Address(RVA = "0xCEFF1C", Offset = "0xCEFF1C", VA = "0xCEFF1C")]
			internal int <GetDescriptions>b__8_0(SDK_DescriptionAttribute attribute)
			{
				return default(int);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string prettyName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string symbol;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string vrDeviceName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int index;

		public bool describesFallbackSDK
		{
			[Address(RVA = "0xCEF800", Offset = "0xCEF800", VA = "0xCEF800")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xCEF854", Offset = "0xCEF854", VA = "0xCEF854")]
		public SDK_DescriptionAttribute(string prettyName, string symbol, string vrDeviceName, string buildTargetGroupName, int index = 0)
		{
		}

		[Address(RVA = "0xCEF9DC", Offset = "0xCEF9DC", VA = "0xCEF9DC")]
		public SDK_DescriptionAttribute(Type typeToCopyExistingDescriptionFrom, int index = 0)
		{
		}

		[Address(RVA = "0xCEFD4C", Offset = "0xCEFD4C", VA = "0xCEFD4C")]
		public static SDK_DescriptionAttribute[] GetDescriptions(Type type)
		{
			return null;
		}
	}
	[Serializable]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x657110", Offset = "0x657110")]
	public sealed class SDK_ScriptingDefineSymbolPredicateAttribute : Attribute, ISerializationCallbackReceiver
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string RemovableSymbolPrefix = "VRTK_DEFINE_";

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string symbol;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string buildTargetGroupName;

		[Address(RVA = "0xCF8E1C", Offset = "0xCF8E1C", VA = "0xCF8E1C")]
		private SDK_ScriptingDefineSymbolPredicateAttribute()
		{
		}

		[Address(RVA = "0xCF8E24", Offset = "0xCF8E24", VA = "0xCF8E24")]
		public SDK_ScriptingDefineSymbolPredicateAttribute(string symbol, string buildTargetGroupName)
		{
		}

		[Address(RVA = "0xCF8FF4", Offset = "0xCF8FF4", VA = "0xCF8FF4")]
		public SDK_ScriptingDefineSymbolPredicateAttribute(SDK_ScriptingDefineSymbolPredicateAttribute attributeToCopy)
		{
		}

		[Address(RVA = "0xCF9050", Offset = "0xCF9050", VA = "0xCF9050", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Address(RVA = "0xCF9054", Offset = "0xCF9054", VA = "0xCF9054", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Address(RVA = "0xCF8FEC", Offset = "0xCF8FEC", VA = "0xCF8FEC")]
		private void SetBuildTarget(string groupName)
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65715C", Offset = "0x65715C")]
	public class SDK_DaydreamBoundaries : SDK_FallbackBoundaries
	{
		[Address(RVA = "0xCEF73C", Offset = "0xCEF73C", VA = "0xCEF73C")]
		public SDK_DaydreamBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6571C4", Offset = "0x6571C4")]
	public class SDK_DaydreamController : SDK_FallbackController
	{
		[Address(RVA = "0xCEF74C", Offset = "0xCEF74C", VA = "0xCEF74C")]
		public SDK_DaydreamController()
		{
		}
	}
	public static class SDK_DaydreamDefines
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_DAYDREAM";

		[Address(RVA = "0xCEF75C", Offset = "0xCEF75C", VA = "0xCEF75C")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x67FF08", Offset = "0x67FF08")]
		private static bool IsDaydreamAvailable()
		{
			return default(bool);
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65722C", Offset = "0x65722C")]
	public class SDK_DaydreamHeadset : SDK_FallbackHeadset
	{
		[Address(RVA = "0xCEF7E0", Offset = "0xCEF7E0", VA = "0xCEF7E0")]
		public SDK_DaydreamHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657294", Offset = "0x657294")]
	public class SDK_DaydreamSystem : SDK_FallbackSystem
	{
		[Address(RVA = "0xCEF7F0", Offset = "0xCEF7F0", VA = "0xCEF7F0")]
		public SDK_DaydreamSystem()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657314", Offset = "0x657314")]
	public class SDK_FallbackBoundaries : SDK_BaseBoundaries
	{
		[Address(RVA = "0xCEFF48", Offset = "0xCEFF48", VA = "0xCEFF48", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Address(RVA = "0xCEFF4C", Offset = "0xCEFF4C", VA = "0xCEFF4C", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Address(RVA = "0xCEFF54", Offset = "0xCEFF54", VA = "0xCEFF54", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Address(RVA = "0xCEFF5C", Offset = "0xCEFF5C", VA = "0xCEFF5C", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Address(RVA = "0xCEFF64", Offset = "0xCEFF64", VA = "0xCEFF64", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Address(RVA = "0xCEFF6C", Offset = "0xCEFF6C", VA = "0xCEFF6C", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Address(RVA = "0xCEFF74", Offset = "0xCEFF74", VA = "0xCEFF74", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Address(RVA = "0xCEF744", Offset = "0xCEF744", VA = "0xCEF744")]
		public SDK_FallbackBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65737C", Offset = "0x65737C")]
	public class SDK_FallbackController : SDK_BaseController
	{
		[Address(RVA = "0xCEFF78", Offset = "0xCEFF78", VA = "0xCEFF78", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCEFF7C", Offset = "0xCEFF7C", VA = "0xCEFF7C", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCEFF80", Offset = "0xCEFF80", VA = "0xCEFF80", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Address(RVA = "0xCEFF88", Offset = "0xCEFF88", VA = "0xCEFF88", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCEFFD0", Offset = "0xCEFFD0", VA = "0xCEFFD0", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Address(RVA = "0xCF0018", Offset = "0xCF0018", VA = "0xCF0018", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Address(RVA = "0xCF0020", Offset = "0xCF0020", VA = "0xCF0020", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF0028", Offset = "0xCF0028", VA = "0xCF0028", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCF0030", Offset = "0xCF0030", VA = "0xCF0030", Slot = "17")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67FF54", Offset = "0x67FF54")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Address(RVA = "0xCF0038", Offset = "0xCF0038", VA = "0xCF0038", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF0040", Offset = "0xCF0040", VA = "0xCF0040", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF0048", Offset = "0xCF0048", VA = "0xCF0048", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0050", Offset = "0xCF0050", VA = "0xCF0050", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0058", Offset = "0xCF0058", VA = "0xCF0058", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0060", Offset = "0xCF0060", VA = "0xCF0060", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0068", Offset = "0xCF0068", VA = "0xCF0068", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0070", Offset = "0xCF0070", VA = "0xCF0070", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCF0078", Offset = "0xCF0078", VA = "0xCF0078", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCF0080", Offset = "0xCF0080", VA = "0xCF0080", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCF0088", Offset = "0xCF0088", VA = "0xCF0088", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Address(RVA = "0xCF008C", Offset = "0xCF008C", VA = "0xCF008C", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Address(RVA = "0xCF0090", Offset = "0xCF0090", VA = "0xCF0090", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0098", Offset = "0xCF0098", VA = "0xCF0098", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Address(RVA = "0xCF010C", Offset = "0xCF010C", VA = "0xCF010C", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF016C", Offset = "0xCF016C", VA = "0xCF016C", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF01CC", Offset = "0xCF01CC", VA = "0xCF01CC", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF01E4", Offset = "0xCF01E4", VA = "0xCF01E4", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Address(RVA = "0xCF0244", Offset = "0xCF0244", VA = "0xCF0244", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCF024C", Offset = "0xCF024C", VA = "0xCF024C", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCF0254", Offset = "0xCF0254", VA = "0xCF0254", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Address(RVA = "0xCEF754", Offset = "0xCEF754", VA = "0xCEF754")]
		public SDK_FallbackController()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6573E4", Offset = "0x6573E4")]
	public class SDK_FallbackHeadset : SDK_BaseHeadset
	{
		[Address(RVA = "0xCF025C", Offset = "0xCF025C", VA = "0xCF025C", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF0260", Offset = "0xCF0260", VA = "0xCF0260", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF0264", Offset = "0xCF0264", VA = "0xCF0264", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Address(RVA = "0xCF026C", Offset = "0xCF026C", VA = "0xCF026C", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Address(RVA = "0xCF0274", Offset = "0xCF0274", VA = "0xCF0274", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Address(RVA = "0xCF02BC", Offset = "0xCF02BC", VA = "0xCF02BC", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF031C", Offset = "0xCF031C", VA = "0xCF031C", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF037C", Offset = "0xCF037C", VA = "0xCF037C", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Address(RVA = "0xCF0380", Offset = "0xCF0380", VA = "0xCF0380", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0388", Offset = "0xCF0388", VA = "0xCF0388", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Address(RVA = "0xCEF7E8", Offset = "0xCEF7E8", VA = "0xCEF7E8")]
		public SDK_FallbackHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65744C", Offset = "0x65744C")]
	public class SDK_FallbackSystem : SDK_BaseSystem
	{
		[Address(RVA = "0xCF038C", Offset = "0xCF038C", VA = "0xCF038C", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF0394", Offset = "0xCF0394", VA = "0xCF0394", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF039C", Offset = "0xCF039C", VA = "0xCF039C", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Address(RVA = "0xCEF7F8", Offset = "0xCEF7F8", VA = "0xCEF7F8")]
		public SDK_FallbackSystem()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657494", Offset = "0x657494")]
	public class SDK_HyperealVRBoundaries : SDK_FallbackBoundaries
	{
		[Address(RVA = "0xCF03A0", Offset = "0xCF03A0", VA = "0xCF03A0")]
		public SDK_HyperealVRBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6574FC", Offset = "0x6574FC")]
	public class SDK_HyperealVRController : SDK_FallbackController
	{
		[Address(RVA = "0xCF03A8", Offset = "0xCF03A8", VA = "0xCF03A8")]
		public SDK_HyperealVRController()
		{
		}
	}
	public static class SDK_HyperealVRDefines
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_HYPEREALVR";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string BuildTargetGroupName = "Standalone";

		[Address(RVA = "0xCF03B0", Offset = "0xCF03B0", VA = "0xCF03B0")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x67FF8C", Offset = "0x67FF8C")]
		private static bool IsHyperealVRAvailable()
		{
			return default(bool);
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657564", Offset = "0x657564")]
	public class SDK_HyperealVRHeadset : SDK_FallbackHeadset
	{
		[Address(RVA = "0xCF0434", Offset = "0xCF0434", VA = "0xCF0434")]
		public SDK_HyperealVRHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6575CC", Offset = "0x6575CC")]
	public class SDK_HyperealVRSystem : SDK_FallbackSystem
	{
		[Address(RVA = "0xCF043C", Offset = "0xCF043C", VA = "0xCF043C")]
		public SDK_HyperealVRSystem()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65763C", Offset = "0x65763C")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65763C", Offset = "0x65763C")]
	public class SDK_OculusBoundaries : SDK_BaseBoundaries
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OvrAvatar avatarContainer;

		[Address(RVA = "0xCF44DC", Offset = "0xCF44DC", VA = "0xCF44DC", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Address(RVA = "0xCF44EC", Offset = "0xCF44EC", VA = "0xCF44EC", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Address(RVA = "0xCF45E0", Offset = "0xCF45E0", VA = "0xCF45E0", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Address(RVA = "0xCF4940", Offset = "0xCF4940", VA = "0xCF4940", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Address(RVA = "0xCF494C", Offset = "0xCF494C", VA = "0xCF494C", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF4954", Offset = "0xCF4954", VA = "0xCF4954", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF495C", Offset = "0xCF495C", VA = "0xCF495C", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Address(RVA = "0xCF4960", Offset = "0xCF4960", VA = "0xCF4960", Slot = "15")]
		public virtual OvrAvatar GetAvatar()
		{
			return null;
		}

		[Address(RVA = "0xCF4B00", Offset = "0xCF4B00", VA = "0xCF4B00")]
		public SDK_OculusBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6576D0", Offset = "0x6576D0")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6576D0", Offset = "0x6576D0")]
	public class SDK_OculusController : SDK_BaseController
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected SDK_OculusBoundaries cachedBoundariesSDK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_TrackedController cachedLeftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VRTK_TrackedController cachedRightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected OVRInput.RawAxis2D[] thumbsticks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected OVRInput.RawAxis2D[] touchpads;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected OVRInput.RawAxis1D[] triggers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected OVRInput.RawAxis1D[] grips;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected OVRInput.RawNearTouch[] triggerSense;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected OVRInput.RawNearTouch[] touchpadSense;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected VRTK_VelocityEstimator cachedLeftVelocityEstimator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected VRTK_VelocityEstimator cachedRightVelocityEstimator;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool[] previousHairTriggerState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected bool[] currentHairTriggerState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected bool[] previousHairGripState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool[] currentHairGripState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float[] hairTriggerLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float[] hairGripLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected OVRHapticsClip hapticsProceduralClipLeft;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected OVRHapticsClip hapticsProceduralClipRight;

		[Address(RVA = "0xCF4B08", Offset = "0xCF4B08", VA = "0xCF4B08", Slot = "5")]
		public override void OnAfterSetupLoad(VRTK_SDKSetup setup)
		{
		}

		[Address(RVA = "0xCF4BC0", Offset = "0xCF4BC0", VA = "0xCF4BC0", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF4BD0", Offset = "0xCF4BD0", VA = "0xCF4BD0", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF4BD4", Offset = "0xCF4BD4", VA = "0xCF4BD4", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Address(RVA = "0xCF4C78", Offset = "0xCF4C78", VA = "0xCF4C78", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCF4D74", Offset = "0xCF4D74", VA = "0xCF4D74", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Address(RVA = "0xCF5334", Offset = "0xCF5334", VA = "0xCF5334", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Address(RVA = "0xCF53EC", Offset = "0xCF53EC", VA = "0xCF53EC", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF55E4", Offset = "0xCF55E4", VA = "0xCF55E4", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCF5644", Offset = "0xCF5644", VA = "0xCF5644", Slot = "17")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x67FFD8", Offset = "0x67FFD8")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Address(RVA = "0xCF564C", Offset = "0xCF564C", VA = "0xCF564C", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF5720", Offset = "0xCF5720", VA = "0xCF5720", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF57F4", Offset = "0xCF57F4", VA = "0xCF57F4", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF5804", Offset = "0xCF5804", VA = "0xCF5804", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF5814", Offset = "0xCF5814", VA = "0xCF5814", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF5828", Offset = "0xCF5828", VA = "0xCF5828", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF583C", Offset = "0xCF583C", VA = "0xCF583C", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF589C", Offset = "0xCF589C", VA = "0xCF589C", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCF58AC", Offset = "0xCF58AC", VA = "0xCF58AC", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCF5B40", Offset = "0xCF5B40", VA = "0xCF5B40", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCF5B48", Offset = "0xCF5B48", VA = "0xCF5B48", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Address(RVA = "0xCF5B4C", Offset = "0xCF5B4C", VA = "0xCF5B4C", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Address(RVA = "0xCF5D74", Offset = "0xCF5D74", VA = "0xCF5D74", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF5F18", Offset = "0xCF5F18", VA = "0xCF5F18", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Address(RVA = "0xCF5FC4", Offset = "0xCF5FC4", VA = "0xCF5FC4", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF60D4", Offset = "0xCF60D4", VA = "0xCF60D4", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF625C", Offset = "0xCF625C", VA = "0xCF625C", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF6268", Offset = "0xCF6268", VA = "0xCF6268", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Address(RVA = "0xCF6480", Offset = "0xCF6480", VA = "0xCF6480", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCF65F4", Offset = "0xCF65F4", VA = "0xCF65F4", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCF6674", Offset = "0xCF6674", VA = "0xCF6674", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF6A28", Offset = "0xCF6A28", VA = "0xCF6A28", Slot = "52")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xCF6B50", Offset = "0xCF6B50", VA = "0xCF6B50", Slot = "53")]
		protected virtual void RegisterAvatarEvents()
		{
		}

		[Address(RVA = "0xCF6DA0", Offset = "0xCF6DA0", VA = "0xCF6DA0", Slot = "54")]
		protected virtual void BothControllersReady()
		{
		}

		[Address(RVA = "0xCF6E4C", Offset = "0xCF6E4C", VA = "0xCF6E4C", Slot = "55")]
		protected virtual void ProcessControllerUpdate(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xCF7198", Offset = "0xCF7198", VA = "0xCF7198", Slot = "56")]
		protected virtual void SetTrackedControllerCaches(bool forceRefresh = false)
		{
		}

		[Address(RVA = "0xCF75D4", Offset = "0xCF75D4", VA = "0xCF75D4", Slot = "57")]
		protected virtual VRTK_TrackedController GetTrackedObject(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCF7658", Offset = "0xCF7658", VA = "0xCF7658", Slot = "58")]
		protected virtual bool IsButtonPressed(uint index, ButtonPressTypes type, OVRInput.Button button)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF7820", Offset = "0xCF7820", VA = "0xCF7820", Slot = "59")]
		protected virtual bool IsButtonPressed(uint index, ButtonPressTypes type, OVRInput.Touch button)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF79EC", Offset = "0xCF79EC", VA = "0xCF79EC", Slot = "60")]
		protected virtual OVRInput.Controller GetControllerMask(uint index)
		{
			return default(OVRInput.Controller);
		}

		[Address(RVA = "0xCF7B00", Offset = "0xCF7B00", VA = "0xCF7B00", Slot = "61")]
		protected virtual OVRInput.RawAxis2D GetTouchpadAxisMask(uint index)
		{
			return default(OVRInput.RawAxis2D);
		}

		[Address(RVA = "0xCF7B84", Offset = "0xCF7B84", VA = "0xCF7B84", Slot = "62")]
		protected virtual OVRInput.Touch GetTouchpadTouchMask()
		{
			return default(OVRInput.Touch);
		}

		[Address(RVA = "0xCF7BC8", Offset = "0xCF7BC8", VA = "0xCF7BC8", Slot = "63")]
		protected virtual OVRInput.Button GetTouchpadButtonMask()
		{
			return default(OVRInput.Button);
		}

		[Address(RVA = "0xCF7C0C", Offset = "0xCF7C0C", VA = "0xCF7C0C", Slot = "64")]
		protected virtual void UpdateHairValues(uint index, float axisValue, float hairDelta, ref bool previousState, ref bool currentState, ref float hairLimit)
		{
		}

		[Address(RVA = "0xCF7D2C", Offset = "0xCF7D2C", VA = "0xCF7D2C", Slot = "65")]
		protected virtual SDK_OculusBoundaries GetBoundariesSDK()
		{
			return null;
		}

		[Address(RVA = "0xCF7EB8", Offset = "0xCF7EB8", VA = "0xCF7EB8", Slot = "66")]
		protected virtual bool HasAvatar(bool controllersAreVisible = true)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF7FD4", Offset = "0xCF7FD4", VA = "0xCF7FD4", Slot = "67")]
		protected virtual GameObject GetAvatar()
		{
			return null;
		}

		[Address(RVA = "0xCF80E8", Offset = "0xCF80E8", VA = "0xCF80E8")]
		public SDK_OculusController()
		{
		}
	}
	public static class SDK_OculusDefines
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_OCULUS";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string AvatarScriptingDefineSymbol = "VRTK_DEFINE_SDK_OCULUS_AVATAR";

		[Address(RVA = "0xCF8400", Offset = "0xCF8400", VA = "0xCF8400")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680010", Offset = "0x680010")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680010", Offset = "0x680010")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680010", Offset = "0x680010")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680010", Offset = "0x680010")]
		private static bool IsUtilitiesVersion1120OrNewer()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF8644", Offset = "0xCF8644", VA = "0xCF8644")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680118", Offset = "0x680118")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680118", Offset = "0x680118")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680118", Offset = "0x680118")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680118", Offset = "0x680118")]
		private static bool IsUtilitiesVersion1110OrOlder()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF8720", Offset = "0xCF8720", VA = "0xCF8720")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680220", Offset = "0x680220")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680220", Offset = "0x680220")]
		private static bool IsAvatarAvailable()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF84DC", Offset = "0xCF84DC", VA = "0xCF84DC")]
		private static Version GetOculusWrapperVersion()
		{
			return null;
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657764", Offset = "0x657764")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657764", Offset = "0x657764")]
	public class SDK_OculusHeadset : SDK_BaseHeadset
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_VelocityEstimator cachedHeadsetVelocityEstimator;

		[Address(RVA = "0xCF87C4", Offset = "0xCF87C4", VA = "0xCF87C4", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF87C8", Offset = "0xCF87C8", VA = "0xCF87C8", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF87CC", Offset = "0xCF87CC", VA = "0xCF87CC", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Address(RVA = "0xCF8894", Offset = "0xCF8894", VA = "0xCF8894", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Address(RVA = "0xCF8934", Offset = "0xCF8934", VA = "0xCF8934", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Address(RVA = "0xCF89D8", Offset = "0xCF89D8", VA = "0xCF89D8", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF8AA4", Offset = "0xCF8AA4", VA = "0xCF8AA4", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF8AEC", Offset = "0xCF8AEC", VA = "0xCF8AEC", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Address(RVA = "0xCF8AF4", Offset = "0xCF8AF4", VA = "0xCF8AF4", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF8B84", Offset = "0xCF8B84", VA = "0xCF8B84", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Address(RVA = "0xCF8C84", Offset = "0xCF8C84", VA = "0xCF8C84", Slot = "19")]
		protected virtual void SetHeadsetCaches()
		{
		}

		[Address(RVA = "0xCF8DF8", Offset = "0xCF8DF8", VA = "0xCF8DF8")]
		public SDK_OculusHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6577F8", Offset = "0x6577F8")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6577F8", Offset = "0x6577F8")]
	public class SDK_OculusSystem : SDK_BaseSystem
	{
		[Address(RVA = "0xCF8E00", Offset = "0xCF8E00", VA = "0xCF8E00", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF8E08", Offset = "0xCF8E08", VA = "0xCF8E08", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF8E10", Offset = "0xCF8E10", VA = "0xCF8E10", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Address(RVA = "0xCF8E14", Offset = "0xCF8E14", VA = "0xCF8E14")]
		public SDK_OculusSystem()
		{
		}
	}
	public class SDK_ControllerSim : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x66BE9C", Offset = "0x66BE9C")]
		public bool selected;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_VelocityEstimator cachedVelocityEstimator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float magnitude;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected Vector3 axis;

		[Address(RVA = "0xCEF598", Offset = "0xCEF598", VA = "0xCEF598")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCEF5DC", Offset = "0xCEF5DC", VA = "0xCEF5DC")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCEF620", Offset = "0xCEF620", VA = "0xCEF620", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xCEF62C", Offset = "0xCEF62C", VA = "0xCEF62C", Slot = "5")]
		protected virtual void SetCaches()
		{
		}

		[Address(RVA = "0xCEF734", Offset = "0xCEF734", VA = "0xCEF734")]
		public SDK_ControllerSim()
		{
		}
	}
	public class SDK_InputSimulator : MonoBehaviour
	{
		public enum MouseInputMode
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Always,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RequiresButtonPress
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B428", Offset = "0x65B428")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyCode, string> <>9__68_0;

			[Address(RVA = "0xCF4418", Offset = "0xCF4418", VA = "0xCF4418")]
			public <>c()
			{
			}

			[Address(RVA = "0xCF4420", Offset = "0xCF4420", VA = "0xCF4420")]
			internal string <UpdateHints>b__68_0(KeyCode k)
			{
				return null;
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66BEAC", Offset = "0x66BEAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BEAC", Offset = "0x66BEAC")]
		public bool showControlHints;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BF0C", Offset = "0x66BF0C")]
		public bool hideHandsAtSwitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BF44", Offset = "0x66BF44")]
		public bool resetHandsAtSwitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BF7C", Offset = "0x66BF7C")]
		public bool showHandAxisHelpers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66BFB4", Offset = "0x66BFB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66BFB4", Offset = "0x66BFB4")]
		public bool lockMouseToView;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C014", Offset = "0x66C014")]
		public MouseInputMode mouseMovementInput;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66C04C", Offset = "0x66C04C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C04C", Offset = "0x66C04C")]
		public float handMoveMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C0AC", Offset = "0x66C0AC")]
		public float handRotationMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C0E4", Offset = "0x66C0E4")]
		public float playerMoveMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C11C", Offset = "0x66C11C")]
		public float playerRotationMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C154", Offset = "0x66C154")]
		public float playerSprintMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C18C", Offset = "0x66C18C")]
		public float lockedCursorMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C1C4", Offset = "0x66C1C4")]
		public Color leftHandColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C1FC", Offset = "0x66C1FC")]
		public Color rightHandColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66C234", Offset = "0x66C234")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C234", Offset = "0x66C234")]
		public KeyCode mouseMovementKey;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C294", Offset = "0x66C294")]
		public KeyCode toggleControlHints;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C2CC", Offset = "0x66C2CC")]
		public KeyCode toggleMouseLock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C304", Offset = "0x66C304")]
		public KeyCode changeHands;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C33C", Offset = "0x66C33C")]
		public KeyCode handsOnOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C374", Offset = "0x66C374")]
		public KeyCode rotationPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C3AC", Offset = "0x66C3AC")]
		public KeyCode changeAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C3E4", Offset = "0x66C3E4")]
		public KeyCode distancePickupLeft;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C41C", Offset = "0x66C41C")]
		public KeyCode distancePickupRight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C454", Offset = "0x66C454")]
		public KeyCode distancePickupModifier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66C48C", Offset = "0x66C48C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C48C", Offset = "0x66C48C")]
		public KeyCode moveForward;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C4EC", Offset = "0x66C4EC")]
		public KeyCode moveLeft;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C524", Offset = "0x66C524")]
		public KeyCode moveBackward;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C55C", Offset = "0x66C55C")]
		public KeyCode moveRight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C594", Offset = "0x66C594")]
		public KeyCode sprint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66C5CC", Offset = "0x66C5CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C5CC", Offset = "0x66C5CC")]
		public KeyCode triggerAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C62C", Offset = "0x66C62C")]
		public KeyCode gripAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C664", Offset = "0x66C664")]
		public KeyCode touchpadAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C69C", Offset = "0x66C69C")]
		public KeyCode buttonOneAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C6D4", Offset = "0x66C6D4")]
		public KeyCode buttonTwoAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C70C", Offset = "0x66C70C")]
		public KeyCode startMenuAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C744", Offset = "0x66C744")]
		public KeyCode touchModifier;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C77C", Offset = "0x66C77C")]
		public KeyCode hairTouchModifier;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool isHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected GameObject hintCanvas;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Text hintText;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Transform rightHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Transform leftHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Transform currentHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Vector3 oldPos;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform neck;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected SDK_ControllerSim rightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected SDK_ControllerSim leftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static GameObject cachedCameraRig;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static bool destroyed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected float sprintMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected GameObject crossHairPanel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Transform leftHandHorizontalAxisGuide;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform leftHandVerticalAxisGuide;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform rightHandHorizontalAxisGuide;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected Transform rightHandVerticalAxisGuide;

		[Address(RVA = "0xCF0444", Offset = "0xCF0444", VA = "0xCF0444")]
		public static GameObject FindInScene()
		{
			return null;
		}

		[Address(RVA = "0xCF0704", Offset = "0xCF0704", VA = "0xCF0704", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xCF076C", Offset = "0xCF076C", VA = "0xCF076C", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xCF0E10", Offset = "0xCF0E10", VA = "0xCF0E10", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xCF0EAC", Offset = "0xCF0EAC", VA = "0xCF0EAC", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xCF11DC", Offset = "0xCF11DC", VA = "0xCF11DC", Slot = "8")]
		protected virtual void SetHandColor(Transform hand, Color givenColor)
		{
		}

		[Address(RVA = "0xCF1388", Offset = "0xCF1388", VA = "0xCF1388", Slot = "9")]
		protected virtual void TryPickup(bool rightHand)
		{
		}

		[Address(RVA = "0xCF1620", Offset = "0xCF1620", VA = "0xCF1620", Slot = "10")]
		protected virtual void UpdateHands()
		{
		}

		[Address(RVA = "0xCF1A40", Offset = "0xCF1A40", VA = "0xCF1A40", Slot = "11")]
		protected virtual void UpdateRotation()
		{
		}

		[Address(RVA = "0xCF1D44", Offset = "0xCF1D44", VA = "0xCF1D44", Slot = "12")]
		protected virtual void UpdatePosition()
		{
		}

		[Address(RVA = "0xCF2050", Offset = "0xCF2050", VA = "0xCF2050", Slot = "13")]
		protected virtual void SetHand()
		{
		}

		[Address(RVA = "0xCF2300", Offset = "0xCF2300", VA = "0xCF2300", Slot = "14")]
		protected virtual void SetMove()
		{
		}

		[Address(RVA = "0xCF23AC", Offset = "0xCF23AC", VA = "0xCF23AC", Slot = "15")]
		protected virtual void UpdateHints()
		{
		}

		[Address(RVA = "0xCF3F24", Offset = "0xCF3F24", VA = "0xCF3F24", Slot = "16")]
		protected virtual bool IsAcceptingMouseInput()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF3F40", Offset = "0xCF3F40", VA = "0xCF3F40", Slot = "17")]
		protected virtual Vector3 GetMouseDelta()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF40C4", Offset = "0xCF40C4", VA = "0xCF40C4", Slot = "18")]
		protected virtual void ToggleGuidePlanes(bool horizontalState, bool verticalState)
		{
		}

		[Address(RVA = "0xCF42E8", Offset = "0xCF42E8", VA = "0xCF42E8")]
		public SDK_InputSimulator()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6578F0", Offset = "0x6578F0")]
	public class SDK_SimBoundaries : SDK_BaseBoundaries
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform area;

		[Address(RVA = "0xCF9058", Offset = "0xCF9058", VA = "0xCF9058", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Address(RVA = "0xCF905C", Offset = "0xCF905C", VA = "0xCF905C", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Address(RVA = "0xCF9150", Offset = "0xCF9150", VA = "0xCF9150", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Address(RVA = "0xCF9438", Offset = "0xCF9438", VA = "0xCF9438", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Address(RVA = "0xCF9444", Offset = "0xCF9444", VA = "0xCF9444", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF944C", Offset = "0xCF944C", VA = "0xCF944C", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9454", Offset = "0xCF9454", VA = "0xCF9454", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Address(RVA = "0xCF9458", Offset = "0xCF9458", VA = "0xCF9458")]
		public SDK_SimBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657958", Offset = "0x657958")]
	public class SDK_SimController : SDK_BaseController
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected SDK_ControllerSim rightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected SDK_ControllerSim leftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Dictionary<string, KeyCode> keyMappings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string RIGHT_HAND_CONTROLLER_NAME = "RightHand";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected const string LEFT_HAND_CONTROLLER_NAME = "LeftHand";

		[Address(RVA = "0xCF9460", Offset = "0xCF9460", VA = "0xCF9460", Slot = "52")]
		public virtual void SetKeyMappings(Dictionary<string, KeyCode> givenKeyMappings)
		{
		}

		[Address(RVA = "0xCF9468", Offset = "0xCF9468", VA = "0xCF9468", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF946C", Offset = "0xCF946C", VA = "0xCF946C", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCF9470", Offset = "0xCF9470", VA = "0xCF9470", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Address(RVA = "0xCF9478", Offset = "0xCF9478", VA = "0xCF9478", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCF94C0", Offset = "0xCF94C0", VA = "0xCF94C0", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Address(RVA = "0xCF9554", Offset = "0xCF9554", VA = "0xCF9554", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Address(RVA = "0xCF95B4", Offset = "0xCF95B4", VA = "0xCF95B4", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF9794", Offset = "0xCF9794", VA = "0xCF9794", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCF9850", Offset = "0xCF9850", VA = "0xCF9850", Slot = "17")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x6802B0", Offset = "0x6802B0")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Address(RVA = "0xCF9858", Offset = "0xCF9858", VA = "0xCF9858", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF9924", Offset = "0xCF9924", VA = "0xCF9924", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCF99F0", Offset = "0xCF99F0", VA = "0xCF99F0", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9A00", Offset = "0xCF9A00", VA = "0xCF9A00", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9A10", Offset = "0xCF9A10", VA = "0xCF9A10", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9A24", Offset = "0xCF9A24", VA = "0xCF9A24", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9A38", Offset = "0xCF9A38", VA = "0xCF9A38", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9A40", Offset = "0xCF9A40", VA = "0xCF9A40", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCF9A50", Offset = "0xCF9A50", VA = "0xCF9A50", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCF9BB0", Offset = "0xCF9BB0", VA = "0xCF9BB0", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCF9C70", Offset = "0xCF9C70", VA = "0xCF9C70", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Address(RVA = "0xCF9C74", Offset = "0xCF9C74", VA = "0xCF9C74", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Address(RVA = "0xCF9C78", Offset = "0xCF9C78", VA = "0xCF9C78", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9C80", Offset = "0xCF9C80", VA = "0xCF9C80", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Address(RVA = "0xCF9CF4", Offset = "0xCF9CF4", VA = "0xCF9CF4", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF9E54", Offset = "0xCF9E54", VA = "0xCF9E54", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCF9FB4", Offset = "0xCF9FB4", VA = "0xCF9FB4", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Address(RVA = "0xCF9FCC", Offset = "0xCF9FCC", VA = "0xCF9FCC", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Address(RVA = "0xCFB02C", Offset = "0xCFB02C", VA = "0xCFB02C", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCFB034", Offset = "0xCFB034", VA = "0xCFB034", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCFB03C", Offset = "0xCFB03C", VA = "0xCFB03C", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFB10C", Offset = "0xCFB10C", VA = "0xCFB10C", Slot = "53")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xCFB11C", Offset = "0xCFB11C", VA = "0xCFB11C", Slot = "54")]
		protected virtual void SetupPlayer()
		{
		}

		[Address(RVA = "0xCFB354", Offset = "0xCFB354", VA = "0xCFB354", Slot = "55")]
		protected virtual bool IsTouchModifierPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFB3C0", Offset = "0xCFB3C0", VA = "0xCFB3C0", Slot = "56")]
		protected virtual bool IsHairTouchModifierPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFB42C", Offset = "0xCFB42C", VA = "0xCFB42C", Slot = "57")]
		protected virtual bool IsButtonPressIgnored()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFB47C", Offset = "0xCFB47C", VA = "0xCFB47C", Slot = "58")]
		protected virtual bool IsButtonHairTouchIgnored()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFB4D0", Offset = "0xCFB4D0", VA = "0xCFB4D0", Slot = "59")]
		protected virtual bool GetControllerButtonState(uint index, string keyMapping, ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFB614", Offset = "0xCFB614", VA = "0xCFB614", Slot = "60")]
		protected virtual bool IsButtonPressed(uint index, ButtonPressTypes type, KeyCode button)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFB794", Offset = "0xCFB794", VA = "0xCFB794", Slot = "61")]
		protected virtual GameObject GetActualController(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCFB8D4", Offset = "0xCFB8D4", VA = "0xCFB8D4")]
		public SDK_SimController()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6579C0", Offset = "0x6579C0")]
	public class SDK_SimHeadset : SDK_BaseHeadset
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform camera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected VRTK_VelocityEstimator cachedHeadsetVelocityEstimator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float magnitude;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 axis;

		[Address(RVA = "0xCFBB14", Offset = "0xCFBB14", VA = "0xCFBB14", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCFBB18", Offset = "0xCFBB18", VA = "0xCFBB18", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCFBB1C", Offset = "0xCFBB1C", VA = "0xCFBB1C", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Address(RVA = "0xCFBC34", Offset = "0xCFBC34", VA = "0xCFBC34", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Address(RVA = "0xCFBC40", Offset = "0xCFBC40", VA = "0xCFBC40", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Address(RVA = "0xCFBC88", Offset = "0xCFBC88", VA = "0xCFBC88", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCFBCD0", Offset = "0xCFBCD0", VA = "0xCFBCD0", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCFBD18", Offset = "0xCFBD18", VA = "0xCFBD18", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Address(RVA = "0xCFBD20", Offset = "0xCFBD20", VA = "0xCFBD20", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFBDB4", Offset = "0xCFBDB4", VA = "0xCFBDB4", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Address(RVA = "0xCFBEBC", Offset = "0xCFBEBC", VA = "0xCFBEBC", Slot = "19")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xCFBECC", Offset = "0xCFBECC", VA = "0xCFBECC", Slot = "20")]
		protected virtual void SetHeadsetCaches()
		{
		}

		[Address(RVA = "0xCFC040", Offset = "0xCFC040", VA = "0xCFC040")]
		public SDK_SimHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657A28", Offset = "0x657A28")]
	public class SDK_SimSystem : SDK_BaseSystem
	{
		[Address(RVA = "0xCFC048", Offset = "0xCFC048", VA = "0xCFC048", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFC050", Offset = "0xCFC050", VA = "0xCFC050", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFC058", Offset = "0xCFC058", VA = "0xCFC058", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Address(RVA = "0xCFC05C", Offset = "0xCFC05C", VA = "0xCFC05C")]
		public SDK_SimSystem()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657A80", Offset = "0x657A80")]
	public class SDK_SteamVRBoundaries : SDK_FallbackBoundaries
	{
		[Address(RVA = "0xCFC064", Offset = "0xCFC064", VA = "0xCFC064")]
		public SDK_SteamVRBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657AE8", Offset = "0x657AE8")]
	public class SDK_SteamVRController : SDK_FallbackController
	{
		[Address(RVA = "0xCFC06C", Offset = "0xCFC06C", VA = "0xCFC06C")]
		public SDK_SteamVRController()
		{
		}
	}
	public static class SDK_SteamVRDefines
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_STEAMVR";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string BuildTargetGroupName = "Standalone";

		[Address(RVA = "0xCFC074", Offset = "0xCFC074", VA = "0xCFC074")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x6802E8", Offset = "0x6802E8")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x6802E8", Offset = "0x6802E8")]
		private static bool IsPluginVersion122OrNewer()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFC140", Offset = "0xCFC140", VA = "0xCFC140")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680378", Offset = "0x680378")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680378", Offset = "0x680378")]
		private static bool IsPluginVersion121OrNewer()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFC2B8", Offset = "0xCFC2B8", VA = "0xCFC2B8")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680408", Offset = "0x680408")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680408", Offset = "0x680408")]
		private static bool IsPluginVersion120()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFC42C", Offset = "0xCFC42C", VA = "0xCFC42C")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680498", Offset = "0x680498")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680498", Offset = "0x680498")]
		private static bool IsPluginVersion111OrOlder()
		{
			return default(bool);
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657B50", Offset = "0x657B50")]
	public class SDK_SteamVRHeadset : SDK_FallbackHeadset
	{
		[Address(RVA = "0xCFC544", Offset = "0xCFC544", VA = "0xCFC544")]
		public SDK_SteamVRHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657BB8", Offset = "0x657BB8")]
	public class SDK_SteamVRSystem : SDK_FallbackSystem
	{
		[Address(RVA = "0xCFC54C", Offset = "0xCFC54C", VA = "0xCFC54C")]
		public SDK_SteamVRSystem()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657C38", Offset = "0x657C38")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657C38", Offset = "0x657C38")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657C38", Offset = "0x657C38")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657C38", Offset = "0x657C38")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657C38", Offset = "0x657C38")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657C38", Offset = "0x657C38")]
	public class SDK_UnityBoundaries : SDK_BaseBoundaries
	{
		[Address(RVA = "0xCFC554", Offset = "0xCFC554", VA = "0xCFC554", Slot = "8")]
		public override void InitBoundaries()
		{
		}

		[Address(RVA = "0xCFC558", Offset = "0xCFC558", VA = "0xCFC558", Slot = "9")]
		public override Transform GetPlayArea()
		{
			return null;
		}

		[Address(RVA = "0xCFC650", Offset = "0xCFC650", VA = "0xCFC650", Slot = "10")]
		public override Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Address(RVA = "0xCFC658", Offset = "0xCFC658", VA = "0xCFC658", Slot = "11")]
		public override float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Address(RVA = "0xCFC664", Offset = "0xCFC664", VA = "0xCFC664", Slot = "12")]
		public override bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFC66C", Offset = "0xCFC66C", VA = "0xCFC66C", Slot = "13")]
		public override bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Address(RVA = "0xCFC674", Offset = "0xCFC674", VA = "0xCFC674", Slot = "14")]
		public override void SetDrawAtRuntime(bool value)
		{
		}

		[Address(RVA = "0xCFC678", Offset = "0xCFC678", VA = "0xCFC678")]
		public SDK_UnityBoundaries()
		{
		}
	}
	public class SDK_UnityCameraRig : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C7B4", Offset = "0x66C7B4")]
		public bool lockPhysicsUpdateRateToRenderFrequency;

		[Address(RVA = "0xCFC680", Offset = "0xCFC680", VA = "0xCFC680", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0xCFC72C", Offset = "0xCFC72C", VA = "0xCFC72C")]
		public SDK_UnityCameraRig()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657D5C", Offset = "0x657D5C")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657D5C", Offset = "0x657D5C")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657D5C", Offset = "0x657D5C")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657D5C", Offset = "0x657D5C")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657D5C", Offset = "0x657D5C")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657D5C", Offset = "0x657D5C")]
	public class SDK_UnityController : SDK_BaseController
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected VRTK_TrackedController cachedLeftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_TrackedController cachedRightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected SDK_UnityControllerTracker cachedLeftTracker;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected SDK_UnityControllerTracker cachedRightTracker;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected VRTK_VelocityEstimator cachedLeftVelocityEstimator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected VRTK_VelocityEstimator cachedRightVelocityEstimator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector2 buttonPressThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Dictionary<ButtonTypes, bool> rightAxisButtonPressState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Dictionary<ButtonTypes, bool> leftAxisButtonPressState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected List<string> validRightHands;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected List<string> validLeftHands;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected int[] rightControllerTouchCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected int[] rightControllerPressCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected int[] rightOculusRemotePressCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected int[] leftControllerTouchCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected int[] leftControllerPressCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected ControllerType cachedControllerType;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Dictionary<ButtonTypes, KeyCode?> rightControllerTouchKeyCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Dictionary<ButtonTypes, KeyCode?> rightControllerPressKeyCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Dictionary<ButtonTypes, KeyCode?> leftControllerTouchKeyCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Dictionary<ButtonTypes, KeyCode?> leftControllerPressKeyCodes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool settingCaches;

		[Address(RVA = "0xCFC73C", Offset = "0xCFC73C", VA = "0xCFC73C", Slot = "9")]
		public override void ProcessUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCFC740", Offset = "0xCFC740", VA = "0xCFC740", Slot = "10")]
		public override void ProcessFixedUpdate(VRTK_ControllerReference controllerReference, Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xCFC744", Offset = "0xCFC744", VA = "0xCFC744", Slot = "11")]
		public override ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(ControllerType);
		}

		[Address(RVA = "0xCFC778", Offset = "0xCFC778", VA = "0xCFC778", Slot = "12")]
		public override string GetControllerDefaultColliderPath(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCFC7C0", Offset = "0xCFC7C0", VA = "0xCFC7C0", Slot = "13")]
		public override string GetControllerElementPath(ControllerElements element, ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Address(RVA = "0xCFC81C", Offset = "0xCFC81C", VA = "0xCFC81C", Slot = "14")]
		public override uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Address(RVA = "0xCFC8D4", Offset = "0xCFC8D4", VA = "0xCFC8D4", Slot = "15")]
		public override GameObject GetControllerByIndex(uint index, bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCFCACC", Offset = "0xCFCACC", VA = "0xCFCACC", Slot = "16")]
		public override Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCFCB2C", Offset = "0xCFCB2C", VA = "0xCFCB2C", Slot = "17")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x680528", Offset = "0x680528")]
		public override Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Address(RVA = "0xCFCB34", Offset = "0xCFCB34", VA = "0xCFCB34", Slot = "18")]
		public override GameObject GetControllerLeftHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCFCC08", Offset = "0xCFCC08", VA = "0xCFCC08", Slot = "19")]
		public override GameObject GetControllerRightHand(bool actual = false)
		{
			return null;
		}

		[Address(RVA = "0xCFCCDC", Offset = "0xCFCCDC", VA = "0xCFCCDC", Slot = "20")]
		public override bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFCCEC", Offset = "0xCFCCEC", VA = "0xCFCCEC", Slot = "21")]
		public override bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFCCFC", Offset = "0xCFCCFC", VA = "0xCFCCFC", Slot = "22")]
		public override bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFCD10", Offset = "0xCFCD10", VA = "0xCFCD10", Slot = "23")]
		public override bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFCD24", Offset = "0xCFCD24", VA = "0xCFCD24", Slot = "24")]
		public override bool WaitForControllerModel(ControllerHand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFCD2C", Offset = "0xCFCD2C", VA = "0xCFCD2C", Slot = "25")]
		public override GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCFCD3C", Offset = "0xCFCD3C", VA = "0xCFCD3C", Slot = "26")]
		public override GameObject GetControllerModel(ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0xCFCEAC", Offset = "0xCFCEAC", VA = "0xCFCEAC", Slot = "28")]
		public override GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0xCFCEB4", Offset = "0xCFCEB4", VA = "0xCFCEB4", Slot = "29")]
		public override void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Address(RVA = "0xCFCEB8", Offset = "0xCFCEB8", VA = "0xCFCEB8", Slot = "30")]
		public override void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Address(RVA = "0xCFCEBC", Offset = "0xCFCEBC", VA = "0xCFCEBC", Slot = "31")]
		public override bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFCEC4", Offset = "0xCFCEC4", VA = "0xCFCEC4", Slot = "32")]
		public override SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Address(RVA = "0xCFCF38", Offset = "0xCFCF38", VA = "0xCFCF38", Slot = "33")]
		public override Vector3 GetVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCFD0C0", Offset = "0xCFD0C0", VA = "0xCFD0C0", Slot = "34")]
		public override Vector3 GetAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xCFD248", Offset = "0xCFD248", VA = "0xCFD248", Slot = "35")]
		public override bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFD260", Offset = "0xCFD260", VA = "0xCFD260", Slot = "36")]
		public override Vector2 GetButtonAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Address(RVA = "0xCFD498", Offset = "0xCFD498", VA = "0xCFD498", Slot = "37")]
		public override float GetButtonSenseAxis(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCFD4A0", Offset = "0xCFD4A0", VA = "0xCFD4A0", Slot = "38")]
		public override float GetButtonHairlineDelta(ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0xCFD4A8", Offset = "0xCFD4A8", VA = "0xCFD4A8", Slot = "39")]
		public override bool GetControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFD6C8", Offset = "0xCFD6C8", VA = "0xCFD6C8", Slot = "52")]
		protected virtual bool IsMouseAliasPress(bool validController, ButtonTypes buttonType, ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFD71C", Offset = "0xCFD71C", VA = "0xCFD71C", Slot = "53")]
		protected virtual bool MousePressType(ButtonPressTypes pressType, int buttonIndex)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFD75C", Offset = "0xCFD75C", VA = "0xCFD75C", Slot = "54")]
		protected virtual float GetAxisValue(string axisName)
		{
			return default(float);
		}

		[Address(RVA = "0xCFD81C", Offset = "0xCFD81C", VA = "0xCFD81C", Slot = "55")]
		protected virtual bool IsAxisOnHandButtonPress(Dictionary<ButtonTypes, bool> axisHandState, ButtonTypes buttonType, ButtonPressTypes pressType, Vector2 axisValue)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFD958", Offset = "0xCFD958", VA = "0xCFD958", Slot = "56")]
		protected virtual bool IsAxisButtonPress(VRTK_ControllerReference controllerReference, ButtonTypes buttonType, ButtonPressTypes pressType)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFDA1C", Offset = "0xCFDA1C", VA = "0xCFDA1C", Slot = "57")]
		protected virtual bool GetAxisPressState(bool currentState, float axisValue)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFDA48", Offset = "0xCFDA48", VA = "0xCFDA48", Slot = "58")]
		protected virtual bool IsButtonPressed(ButtonPressTypes pressType, KeyCode? touchKey, KeyCode? pressKey)
		{
			return default(bool);
		}

		[Address(RVA = "0xCFDBDC", Offset = "0xCFDBDC", VA = "0xCFDBDC", Slot = "59")]
		protected virtual void SetTrackedControllerCaches(bool forceRefresh = false)
		{
		}

		[Address(RVA = "0xCFE004", Offset = "0xCFE004", VA = "0xCFE004", Slot = "60")]
		protected virtual void SetControllerButtons(ControllerHand hand)
		{
		}

		[Address(RVA = "0xCFE490", Offset = "0xCFE490", VA = "0xCFE490", Slot = "61")]
		protected virtual void SetCachedControllerType(string givenType)
		{
		}

		[Address(RVA = "0xCFE5DC", Offset = "0xCFE5DC", VA = "0xCFE5DC", Slot = "62")]
		protected virtual void SetControllerButtonValues(ref Dictionary<ButtonTypes, KeyCode?> touchKeyCodes, ref Dictionary<ButtonTypes, KeyCode?> pressKeyCodes, int joystickIndex, int[] touchCodes, int[] pressCodes)
		{
		}

		[Address(RVA = "0xCFE9B8", Offset = "0xCFE9B8", VA = "0xCFE9B8", Slot = "63")]
		protected virtual KeyCode StringToKeyCode(int index, int code)
		{
			return default(KeyCode);
		}

		[Address(RVA = "0xCFEC98", Offset = "0xCFEC98", VA = "0xCFEC98", Slot = "64")]
		protected virtual void SetControllerIndex(ref VRTK_TrackedController trackedController)
		{
		}

		[Address(RVA = "0xCFED94", Offset = "0xCFED94", VA = "0xCFED94", Slot = "65")]
		protected virtual VRTK_TrackedController GetTrackedObject(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0xCFEE18", Offset = "0xCFEE18", VA = "0xCFEE18")]
		public SDK_UnityController()
		{
		}
	}
	public class SDK_UnityControllerTracker : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C7EC", Offset = "0x66C7EC")]
		public XRNode nodeType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C824", Offset = "0x66C824")]
		public uint index;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C85C", Offset = "0x66C85C")]
		public string triggerAxisName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C894", Offset = "0x66C894")]
		public string gripAxisName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C8CC", Offset = "0x66C8CC")]
		public string touchpadHorizontalAxisName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C904", Offset = "0x66C904")]
		public string touchpadVerticalAxisName;

		[Address(RVA = "0xD0093C", Offset = "0xD0093C", VA = "0xD0093C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		protected virtual string GetVarName<T>(T item) where T : class
		{
			return null;
		}

		[Address(RVA = "0xD009F8", Offset = "0xD009F8", VA = "0xD009F8", Slot = "6")]
		protected virtual void CheckAxisIsValid(string axisName, string varName)
		{
		}

		[Address(RVA = "0xD00D48", Offset = "0xD00D48", VA = "0xD00D48", Slot = "7")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0xD00E68", Offset = "0xD00E68", VA = "0xD00E68")]
		public SDK_UnityControllerTracker()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657E80", Offset = "0x657E80")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657E80", Offset = "0x657E80")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657E80", Offset = "0x657E80")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657E80", Offset = "0x657E80")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657E80", Offset = "0x657E80")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657E80", Offset = "0x657E80")]
	public class SDK_UnityHeadset : SDK_BaseHeadset
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_VelocityEstimator cachedHeadsetVelocityEstimator;

		[Address(RVA = "0xD00EC4", Offset = "0xD00EC4", VA = "0xD00EC4", Slot = "8")]
		public override void ProcessUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xD00EC8", Offset = "0xD00EC8", VA = "0xD00EC8", Slot = "9")]
		public override void ProcessFixedUpdate(Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xD00ECC", Offset = "0xD00ECC", VA = "0xD00ECC", Slot = "10")]
		public override Transform GetHeadset()
		{
			return null;
		}

		[Address(RVA = "0xD00FC4", Offset = "0xD00FC4", VA = "0xD00FC4", Slot = "11")]
		public override Transform GetHeadsetCamera()
		{
			return null;
		}

		[Address(RVA = "0xD00FD0", Offset = "0xD00FD0", VA = "0xD00FD0", Slot = "12")]
		public override string GetHeadsetType()
		{
			return null;
		}

		[Address(RVA = "0xD00FE0", Offset = "0xD00FE0", VA = "0xD00FE0", Slot = "13")]
		public override Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xD01028", Offset = "0xD01028", VA = "0xD01028", Slot = "14")]
		public override Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xD01070", Offset = "0xD01070", VA = "0xD01070", Slot = "15")]
		public override void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Address(RVA = "0xD01078", Offset = "0xD01078", VA = "0xD01078", Slot = "16")]
		public override bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Address(RVA = "0xD01108", Offset = "0xD01108", VA = "0xD01108", Slot = "17")]
		public override void AddHeadsetFade(Transform camera)
		{
		}

		[Address(RVA = "0xD0120C", Offset = "0xD0120C", VA = "0xD0120C", Slot = "19")]
		protected virtual void SetHeadsetCaches()
		{
		}

		[Address(RVA = "0xD012F4", Offset = "0xD012F4", VA = "0xD012F4")]
		public SDK_UnityHeadset()
		{
		}
	}
	public class SDK_UnityHeadsetTracker : MonoBehaviour
	{
		[Address(RVA = "0xD012FC", Offset = "0xD012FC", VA = "0xD012FC")]
		public SDK_UnityHeadsetTracker()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657FA4", Offset = "0x657FA4")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657FA4", Offset = "0x657FA4")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657FA4", Offset = "0x657FA4")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657FA4", Offset = "0x657FA4")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657FA4", Offset = "0x657FA4")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x657FA4", Offset = "0x657FA4")]
	public class SDK_UnitySystem : SDK_BaseSystem
	{
		[Address(RVA = "0xD01304", Offset = "0xD01304", VA = "0xD01304", Slot = "8")]
		public override bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Address(RVA = "0xD0130C", Offset = "0xD0130C", VA = "0xD0130C", Slot = "9")]
		public override bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Address(RVA = "0xD01314", Offset = "0xD01314", VA = "0xD01314", Slot = "10")]
		public override void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Address(RVA = "0xD01318", Offset = "0xD01318", VA = "0xD01318")]
		public SDK_UnitySystem()
		{
		}
	}
	public static class VRTK_SDK_Bridge
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SDK_BaseSystem systemSDK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static SDK_BaseHeadset headsetSDK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static SDK_BaseController controllerSDK;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static SDK_BaseBoundaries boundariesSDK;

		[Address(RVA = "0x95CC14", Offset = "0x95CC14", VA = "0x95CC14")]
		public static void ControllerProcessUpdate(VRTK_ControllerReference controllerReference, [Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0x95CCA4", Offset = "0x95CCA4", VA = "0x95CCA4")]
		public static void ControllerProcessFixedUpdate(VRTK_ControllerReference controllerReference, [Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0x95CD34", Offset = "0x95CD34", VA = "0x95CD34")]
		public static SDK_BaseController.ControllerType GetCurrentControllerType([Optional] VRTK_ControllerReference controllerReference)
		{
			return default(SDK_BaseController.ControllerType);
		}

		[Address(RVA = "0x95CDB4", Offset = "0x95CDB4", VA = "0x95CDB4")]
		public static string GetControllerDefaultColliderPath(SDK_BaseController.ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0x95CE34", Offset = "0x95CE34", VA = "0x95CE34")]
		public static string GetControllerElementPath(SDK_BaseController.ControllerElements element, SDK_BaseController.ControllerHand hand, bool fullPath = false)
		{
			return null;
		}

		[Address(RVA = "0x95CECC", Offset = "0x95CECC", VA = "0x95CECC")]
		public static uint GetControllerIndex(GameObject controller)
		{
			return default(uint);
		}

		[Address(RVA = "0x95CF50", Offset = "0x95CF50", VA = "0x95CF50")]
		public static GameObject GetControllerByIndex(uint index, bool actual)
		{
			return null;
		}

		[Address(RVA = "0x95CFE4", Offset = "0x95CFE4", VA = "0x95CFE4")]
		public static Transform GetControllerOrigin(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0x95D068", Offset = "0x95D068", VA = "0x95D068")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x680560", Offset = "0x680560")]
		public static Transform GenerateControllerPointerOrigin(GameObject parent)
		{
			return null;
		}

		[Address(RVA = "0x95D0EC", Offset = "0x95D0EC", VA = "0x95D0EC")]
		public static GameObject GetControllerLeftHand(bool actual)
		{
			return null;
		}

		[Address(RVA = "0x95D170", Offset = "0x95D170", VA = "0x95D170")]
		public static GameObject GetControllerRightHand(bool actual)
		{
			return null;
		}

		[Address(RVA = "0x95D1F4", Offset = "0x95D1F4", VA = "0x95D1F4")]
		public static GameObject GetControllerByHand(SDK_BaseController.ControllerHand hand, bool actual)
		{
			return null;
		}

		[Address(RVA = "0x95D2BC", Offset = "0x95D2BC", VA = "0x95D2BC")]
		public static bool IsControllerLeftHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0x95D340", Offset = "0x95D340", VA = "0x95D340")]
		public static bool IsControllerRightHand(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0x95D3C4", Offset = "0x95D3C4", VA = "0x95D3C4")]
		public static bool IsControllerLeftHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0x95D458", Offset = "0x95D458", VA = "0x95D458")]
		public static bool IsControllerRightHand(GameObject controller, bool actual)
		{
			return default(bool);
		}

		[Address(RVA = "0x95D4EC", Offset = "0x95D4EC", VA = "0x95D4EC")]
		public static bool WaitForControllerModel(SDK_BaseController.ControllerHand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0x95D570", Offset = "0x95D570", VA = "0x95D570")]
		public static GameObject GetControllerModel(GameObject controller)
		{
			return null;
		}

		[Address(RVA = "0x95D5F4", Offset = "0x95D5F4", VA = "0x95D5F4")]
		public static GameObject GetControllerModel(SDK_BaseController.ControllerHand hand)
		{
			return null;
		}

		[Address(RVA = "0x95D678", Offset = "0x95D678", VA = "0x95D678")]
		public static SDK_BaseController.ControllerHand GetControllerModelHand(GameObject controllerModel)
		{
			return default(SDK_BaseController.ControllerHand);
		}

		[Address(RVA = "0x95D6FC", Offset = "0x95D6FC", VA = "0x95D6FC")]
		public static GameObject GetControllerRenderModel(VRTK_ControllerReference controllerReference)
		{
			return null;
		}

		[Address(RVA = "0x95D780", Offset = "0x95D780", VA = "0x95D780")]
		public static void SetControllerRenderModelWheel(GameObject renderModel, bool state)
		{
		}

		[Address(RVA = "0x95D814", Offset = "0x95D814", VA = "0x95D814")]
		public static void HapticPulse(VRTK_ControllerReference controllerReference, float strength = 0.5f)
		{
		}

		[Address(RVA = "0x95D8A8", Offset = "0x95D8A8", VA = "0x95D8A8")]
		public static bool HapticPulse(VRTK_ControllerReference controllerReference, AudioClip clip)
		{
			return default(bool);
		}

		[Address(RVA = "0x95D93C", Offset = "0x95D93C", VA = "0x95D93C")]
		public static SDK_ControllerHapticModifiers GetHapticModifiers()
		{
			return null;
		}

		[Address(RVA = "0x95D9B8", Offset = "0x95D9B8", VA = "0x95D9B8")]
		public static Vector3 GetControllerVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x95DA3C", Offset = "0x95DA3C", VA = "0x95DA3C")]
		public static Vector3 GetControllerAngularVelocity(VRTK_ControllerReference controllerReference)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x95DAC0", Offset = "0x95DAC0", VA = "0x95DAC0")]
		public static bool IsTouchpadStatic(bool isTouched, Vector2 currentAxisValues, Vector2 previousAxisValues, int compareFidelity)
		{
			return default(bool);
		}

		[Address(RVA = "0x95DB84", Offset = "0x95DB84", VA = "0x95DB84")]
		public static Vector2 GetControllerAxis(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(Vector2);
		}

		[Address(RVA = "0x95DC18", Offset = "0x95DC18", VA = "0x95DC18")]
		public static float GetControllerSenseAxis(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0x95DCAC", Offset = "0x95DCAC", VA = "0x95DCAC")]
		public static float GetControllerHairlineDelta(SDK_BaseController.ButtonTypes buttonType, VRTK_ControllerReference controllerReference)
		{
			return default(float);
		}

		[Address(RVA = "0x95DD40", Offset = "0x95DD40", VA = "0x95DD40")]
		public static bool GetControllerButtonState(SDK_BaseController.ButtonTypes buttonType, SDK_BaseController.ButtonPressTypes pressType, VRTK_ControllerReference controllerReference)
		{
			return default(bool);
		}

		[Address(RVA = "0x95DDDC", Offset = "0x95DDDC", VA = "0x95DDDC")]
		public static void HeadsetProcessUpdate([Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0x95E078", Offset = "0x95E078", VA = "0x95E078")]
		public static void HeadsetProcessFixedUpdate([Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0x95E0F8", Offset = "0x95E0F8", VA = "0x95E0F8")]
		public static Transform GetHeadset()
		{
			return null;
		}

		[Address(RVA = "0x95E170", Offset = "0x95E170", VA = "0x95E170")]
		public static Transform GetHeadsetCamera()
		{
			return null;
		}

		[Address(RVA = "0x95E1E8", Offset = "0x95E1E8", VA = "0x95E1E8")]
		public static string GetHeadsetType()
		{
			return null;
		}

		[Address(RVA = "0x95E260", Offset = "0x95E260", VA = "0x95E260")]
		public static Vector3 GetHeadsetVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x95E2D8", Offset = "0x95E2D8", VA = "0x95E2D8")]
		public static Vector3 GetHeadsetAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x95E354", Offset = "0x95E354", VA = "0x95E354")]
		public static void HeadsetFade(Color color, float duration, bool fadeOverlay = false)
		{
		}

		[Address(RVA = "0x95E418", Offset = "0x95E418", VA = "0x95E418")]
		public static bool HasHeadsetFade(Transform obj)
		{
			return default(bool);
		}

		[Address(RVA = "0x95E49C", Offset = "0x95E49C", VA = "0x95E49C")]
		public static void AddHeadsetFade(Transform camera)
		{
		}

		[Address(RVA = "0x95E520", Offset = "0x95E520", VA = "0x95E520")]
		public static Transform GetPlayArea()
		{
			return null;
		}

		[Address(RVA = "0x94C8E8", Offset = "0x94C8E8", VA = "0x94C8E8")]
		public static Vector3[] GetPlayAreaVertices()
		{
			return null;
		}

		[Address(RVA = "0x95E7B4", Offset = "0x95E7B4", VA = "0x95E7B4")]
		public static float GetPlayAreaBorderThickness()
		{
			return default(float);
		}

		[Address(RVA = "0x95E82C", Offset = "0x95E82C", VA = "0x95E82C")]
		public static bool IsPlayAreaSizeCalibrated()
		{
			return default(bool);
		}

		[Address(RVA = "0x95E8A4", Offset = "0x95E8A4", VA = "0x95E8A4")]
		public static bool GetDrawAtRuntime()
		{
			return default(bool);
		}

		[Address(RVA = "0x95E91C", Offset = "0x95E91C", VA = "0x95E91C")]
		public static void SetDrawAtRuntime(bool value)
		{
		}

		[Address(RVA = "0x95E9A0", Offset = "0x95E9A0", VA = "0x95E9A0")]
		public static bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Address(RVA = "0x95EC2C", Offset = "0x95EC2C", VA = "0x95EC2C")]
		public static bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Address(RVA = "0x95ECA4", Offset = "0x95ECA4", VA = "0x95ECA4")]
		public static void ForceInterleavedReprojectionOn(bool force)
		{
		}

		[Address(RVA = "0x95EA18", Offset = "0x95EA18", VA = "0x95EA18")]
		public static SDK_BaseSystem GetSystemSDK()
		{
			return null;
		}

		[Address(RVA = "0x95DE5C", Offset = "0x95DE5C", VA = "0x95DE5C")]
		public static SDK_BaseHeadset GetHeadsetSDK()
		{
			return null;
		}

		[Address(RVA = "0x94CDF8", Offset = "0x94CDF8", VA = "0x94CDF8")]
		public static SDK_BaseController GetControllerSDK()
		{
			return null;
		}

		[Address(RVA = "0x95E598", Offset = "0x95E598", VA = "0x95E598")]
		public static SDK_BaseBoundaries GetBoundariesSDK()
		{
			return null;
		}

		[Address(RVA = "0x955430", Offset = "0x955430", VA = "0x955430")]
		public static void InvalidateCaches()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x6581C4", Offset = "0x6581C4")]
	public class WindowsMR_Camera : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C93C", Offset = "0x66C93C")]
		private bool forceRoomScaleTracking;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string DEVICE_NAME = "WindowsMR";

		public bool ForceRoomScaleTracking
		{
			[Address(RVA = "0x88B0F8", Offset = "0x88B0F8", VA = "0x88B0F8")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x88B100", Offset = "0x88B100", VA = "0x88B100")]
			set
			{
			}
		}

		[Address(RVA = "0x88B10C", Offset = "0x88B10C", VA = "0x88B10C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x88B150", Offset = "0x88B150", VA = "0x88B150", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x88B244", Offset = "0x88B244", VA = "0x88B244", Slot = "6")]
		protected virtual bool CheckForMixedRealitySupport()
		{
			return default(bool);
		}

		[Address(RVA = "0x88B378", Offset = "0x88B378", VA = "0x88B378", Slot = "7")]
		protected virtual void SetupMRCamera()
		{
		}

		[Address(RVA = "0x88B4A8", Offset = "0x88B4A8", VA = "0x88B4A8")]
		public WindowsMR_Camera()
		{
		}
	}
	public class WindowsMR_ControllerManager : MonoBehaviour
	{
		[Address(RVA = "0x88B4B8", Offset = "0x88B4B8", VA = "0x88B4B8")]
		public WindowsMR_ControllerManager()
		{
		}
	}
	public class WindowsMR_TrackedObject : MonoBehaviour
	{
		[Address(RVA = "0x88B4C0", Offset = "0x88B4C0", VA = "0x88B4C0")]
		public WindowsMR_TrackedObject()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x658228", Offset = "0x658228")]
	public class SDK_WindowsMRBoundaries : SDK_FallbackBoundaries
	{
		[Address(RVA = "0xD01328", Offset = "0xD01328", VA = "0xD01328")]
		public SDK_WindowsMRBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x658290", Offset = "0x658290")]
	public class SDK_WindowsMRController : SDK_FallbackController
	{
		[Address(RVA = "0xD01330", Offset = "0xD01330", VA = "0xD01330")]
		public SDK_WindowsMRController()
		{
		}
	}
	public static class SDK_WindowsMRDefines
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_WINDOWSMR";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string BuildTargetGroupName = "WSA";

		[Address(RVA = "0xD01338", Offset = "0xD01338", VA = "0xD01338")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680598", Offset = "0x680598")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680598", Offset = "0x680598")]
		private static bool HasControllerVisualization()
		{
			return default(bool);
		}

		[Address(RVA = "0xD013BC", Offset = "0xD013BC", VA = "0xD013BC")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680628", Offset = "0x680628")]
		private static bool IsXRSettingsEnabled()
		{
			return default(bool);
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6582F8", Offset = "0x6582F8")]
	public class SDK_WindowsMRHeadset : SDK_FallbackHeadset
	{
		[Address(RVA = "0xD013C4", Offset = "0xD013C4", VA = "0xD013C4")]
		public SDK_WindowsMRHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x658360", Offset = "0x658360")]
	public class SDK_WindowsMR : SDK_FallbackSystem
	{
		[Address(RVA = "0xD01320", Offset = "0xD01320", VA = "0xD01320")]
		public SDK_WindowsMR()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6583E0", Offset = "0x6583E0")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x6583E0", Offset = "0x6583E0")]
	public class SDK_XimmerseBoundaries : SDK_FallbackBoundaries
	{
		[Address(RVA = "0xD013CC", Offset = "0xD013CC", VA = "0xD013CC")]
		public SDK_XimmerseBoundaries()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x658474", Offset = "0x658474")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x658474", Offset = "0x658474")]
	public class SDK_XimmerseController : SDK_FallbackController
	{
		[Address(RVA = "0xD013D4", Offset = "0xD013D4", VA = "0xD013D4")]
		public SDK_XimmerseController()
		{
		}
	}
	public static class SDK_XimmerseDefines
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ScriptingDefineSymbol = "VRTK_DEFINE_SDK_XIMMERSE";

		[Address(RVA = "0xD013DC", Offset = "0xD013DC", VA = "0xD013DC")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680674", Offset = "0x680674")]
		[AttributeAttribute(Name = "SDK_ScriptingDefineSymbolPredicateAttribute", RVA = "0x680674", Offset = "0x680674")]
		private static bool IsXimmerseAvailable()
		{
			return default(bool);
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x658508", Offset = "0x658508")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x658508", Offset = "0x658508")]
	public class SDK_XimmerseHeadset : SDK_FallbackHeadset
	{
		[Address(RVA = "0xD01460", Offset = "0xD01460", VA = "0xD01460")]
		public SDK_XimmerseHeadset()
		{
		}
	}
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65859C", Offset = "0x65859C")]
	[AttributeAttribute(Name = "SDK_DescriptionAttribute", RVA = "0x65859C", Offset = "0x65859C")]
	public class SDK_XimmerseSystem : SDK_FallbackSystem
	{
		[Address(RVA = "0xD01468", Offset = "0xD01468", VA = "0xD01468")]
		public SDK_XimmerseSystem()
		{
		}
	}
}
namespace VRTK.WindowsMixedReality.Utilities
{
	public static class InteractionSourceExtensions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const ushort ContinuousBuzzWaveform = 4100;
	}
	public static class WindowsApiChecker
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66C988", Offset = "0x66C988")]
		private static bool <UniversalApiContractV5_IsAvailable>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66C998", Offset = "0x66C998")]
		private static bool <UniversalApiContractV4_IsAvailable>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66C9A8", Offset = "0x66C9A8")]
		private static bool <UniversalApiContractV3_IsAvailable>k__BackingField;

		public static bool UniversalApiContractV5_IsAvailable
		{
			[Address(RVA = "0x88B63C", Offset = "0x88B63C", VA = "0x88B63C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680704", Offset = "0x680704")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x88B4EC", Offset = "0x88B4EC", VA = "0x88B4EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680714", Offset = "0x680714")]
			private set
			{
			}
		}

		public static bool UniversalApiContractV4_IsAvailable
		{
			[Address(RVA = "0x88B6A4", Offset = "0x88B6A4", VA = "0x88B6A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680724", Offset = "0x680724")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x88B55C", Offset = "0x88B55C", VA = "0x88B55C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680734", Offset = "0x680734")]
			private set
			{
			}
		}

		public static bool UniversalApiContractV3_IsAvailable
		{
			[Address(RVA = "0x88B70C", Offset = "0x88B70C", VA = "0x88B70C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680744", Offset = "0x680744")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x88B5CC", Offset = "0x88B5CC", VA = "0x88B5CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680754", Offset = "0x680754")]
			private set
			{
			}
		}

		[Address(RVA = "0x88B4C8", Offset = "0x88B4C8", VA = "0x88B4C8")]
		static WindowsApiChecker()
		{
		}
	}
}
namespace VRTK.UnityEventHelper
{
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65868C", Offset = "0x65868C")]
	public sealed class VRTK_BaseControllable_UnityEvents : VRTK_UnityEvents<VRTK_BaseControllable>
	{
		[Serializable]
		public sealed class BaseControllablEvent : UnityEvent<object, ControllableEventArgs>
		{
			[Address(RVA = "0x760628", Offset = "0x760628", VA = "0x760628")]
			public BaseControllablEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BaseControllablEvent OnValueChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BaseControllablEvent OnRestingPointReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BaseControllablEvent OnMinLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BaseControllablEvent OnMinLimitExited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BaseControllablEvent OnMaxLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BaseControllablEvent OnMaxLimitExited;

		[Address(RVA = "0x75FDD8", Offset = "0x75FDD8", VA = "0x75FDD8", Slot = "4")]
		protected override void AddListeners(VRTK_BaseControllable component)
		{
		}

		[Address(RVA = "0x75FFA8", Offset = "0x75FFA8", VA = "0x75FFA8", Slot = "5")]
		protected override void RemoveListeners(VRTK_BaseControllable component)
		{
		}

		[Address(RVA = "0x760178", Offset = "0x760178", VA = "0x760178")]
		private void ValueChanged(object o, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x76021C", Offset = "0x76021C", VA = "0x76021C")]
		private void RestingPointReached(object o, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x7602C0", Offset = "0x7602C0", VA = "0x7602C0")]
		private void MinLimitReached(object o, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x760364", Offset = "0x760364", VA = "0x760364")]
		private void MinLimitExited(object o, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x760408", Offset = "0x760408", VA = "0x760408")]
		private void MaxLimitReached(object o, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x7604AC", Offset = "0x7604AC", VA = "0x7604AC")]
		private void MaxLimitExited(object o, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x760550", Offset = "0x760550", VA = "0x760550")]
		public VRTK_BaseControllable_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6586C4", Offset = "0x6586C4")]
	public sealed class VRTK_BasicTeleport_UnityEvents : VRTK_UnityEvents<VRTK_BasicTeleport>
	{
		[Serializable]
		public sealed class TeleportEvent : UnityEvent<object, DestinationMarkerEventArgs>
		{
			[Address(RVA = "0x760A00", Offset = "0x760A00", VA = "0x760A00")]
			public TeleportEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportEvent OnTeleporting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TeleportEvent OnTeleported;

		[Address(RVA = "0x760678", Offset = "0x760678", VA = "0x760678", Slot = "4")]
		protected override void AddListeners(VRTK_BasicTeleport component)
		{
		}

		[Address(RVA = "0x760748", Offset = "0x760748", VA = "0x760748", Slot = "5")]
		protected override void RemoveListeners(VRTK_BasicTeleport component)
		{
		}

		[Address(RVA = "0x760818", Offset = "0x760818", VA = "0x760818")]
		private void Teleporting(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x7608C8", Offset = "0x7608C8", VA = "0x7608C8")]
		private void Teleported(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x760978", Offset = "0x760978", VA = "0x760978")]
		public VRTK_BasicTeleport_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6586FC", Offset = "0x6586FC")]
	public sealed class VRTK_BodyPhysics_UnityEvents : VRTK_UnityEvents<VRTK_BodyPhysics>
	{
		[Serializable]
		public sealed class BodyPhysicsEvent : UnityEvent<object, BodyPhysicsEventArgs>
		{
			[Address(RVA = "0x761668", Offset = "0x761668", VA = "0x761668")]
			public BodyPhysicsEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BodyPhysicsEvent OnStartFalling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BodyPhysicsEvent OnStopFalling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BodyPhysicsEvent OnStartMoving;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BodyPhysicsEvent OnStopMoving;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BodyPhysicsEvent OnStartColliding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BodyPhysicsEvent OnStopColliding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BodyPhysicsEvent OnStartLeaning;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BodyPhysicsEvent OnStopLeaning;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BodyPhysicsEvent OnStartTouchingGround;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BodyPhysicsEvent OnStopTouchingGround;

		[Address(RVA = "0x760A50", Offset = "0x760A50", VA = "0x760A50", Slot = "4")]
		protected override void AddListeners(VRTK_BodyPhysics component)
		{
		}

		[Address(RVA = "0x760D20", Offset = "0x760D20", VA = "0x760D20", Slot = "5")]
		protected override void RemoveListeners(VRTK_BodyPhysics component)
		{
		}

		[Address(RVA = "0x760FF0", Offset = "0x760FF0", VA = "0x760FF0")]
		private void StartFalling(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761078", Offset = "0x761078", VA = "0x761078")]
		private void StopFalling(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761100", Offset = "0x761100", VA = "0x761100")]
		private void StartMoving(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761188", Offset = "0x761188", VA = "0x761188")]
		private void StopMoving(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761210", Offset = "0x761210", VA = "0x761210")]
		private void StartColliding(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761298", Offset = "0x761298", VA = "0x761298")]
		private void StopColliding(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761320", Offset = "0x761320", VA = "0x761320")]
		private void StartLeaning(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x7613A8", Offset = "0x7613A8", VA = "0x7613A8")]
		private void StopLeaning(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761430", Offset = "0x761430", VA = "0x761430")]
		private void StartTouchingGround(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x7614B8", Offset = "0x7614B8", VA = "0x7614B8")]
		private void StopTouchingGround(object o, BodyPhysicsEventArgs e)
		{
		}

		[Address(RVA = "0x761540", Offset = "0x761540", VA = "0x761540")]
		public VRTK_BodyPhysics_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658734", Offset = "0x658734")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x658734", Offset = "0x658734")]
	public sealed class VRTK_Button_UnityEvents : VRTK_UnityEvents<VRTK_Button>
	{
		[Serializable]
		public sealed class Button3DEvent : UnityEvent<object, Control3DEventArgs>
		{
			[Address(RVA = "0x7619F0", Offset = "0x7619F0", VA = "0x7619F0")]
			public Button3DEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button3DEvent OnPushed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button3DEvent OnReleased;

		[Address(RVA = "0x7616B8", Offset = "0x7616B8", VA = "0x7616B8", Slot = "4")]
		protected override void AddListeners(VRTK_Button component)
		{
		}

		[Address(RVA = "0x761788", Offset = "0x761788", VA = "0x761788", Slot = "5")]
		protected override void RemoveListeners(VRTK_Button component)
		{
		}

		[Address(RVA = "0x761858", Offset = "0x761858", VA = "0x761858")]
		private void Pushed(object o, Control3DEventArgs e)
		{
		}

		[Address(RVA = "0x7618E0", Offset = "0x7618E0", VA = "0x7618E0")]
		public void Released(object o, Control3DEventArgs e)
		{
		}

		[Address(RVA = "0x761968", Offset = "0x761968", VA = "0x761968")]
		public VRTK_Button_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658794", Offset = "0x658794")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x658794", Offset = "0x658794")]
	public sealed class VRTK_Control_UnityEvents : VRTK_UnityEvents<VRTK_Control>
	{
		[Serializable]
		public sealed class Control3DEvent : UnityEvent<object, Control3DEventArgs>
		{
			[Address(RVA = "0x7620F8", Offset = "0x7620F8", VA = "0x7620F8")]
			public Control3DEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Control3DEvent OnValueChanged;

		[Address(RVA = "0x761EE4", Offset = "0x761EE4", VA = "0x761EE4", Slot = "4")]
		protected override void AddListeners(VRTK_Control component)
		{
		}

		[Address(RVA = "0x761F74", Offset = "0x761F74", VA = "0x761F74", Slot = "5")]
		protected override void RemoveListeners(VRTK_Control component)
		{
		}

		[Address(RVA = "0x762004", Offset = "0x762004", VA = "0x762004")]
		private void ValueChanged(object o, Control3DEventArgs e)
		{
		}

		[Address(RVA = "0x76208C", Offset = "0x76208C", VA = "0x76208C")]
		public VRTK_Control_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6587F4", Offset = "0x6587F4")]
	public sealed class VRTK_ControlAnimationGrabAttach_UnityEvents : VRTK_UnityEvents<VRTK_ControlAnimationGrabAttach>
	{
		[Serializable]
		public sealed class ControlAnimationGrabAttachEvent : UnityEvent<object, ControlAnimationGrabAttachEventArgs>
		{
			[Address(RVA = "0x761E94", Offset = "0x761E94", VA = "0x761E94")]
			public ControlAnimationGrabAttachEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControlAnimationGrabAttachEvent OnAnimationFrameAtStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControlAnimationGrabAttachEvent OnAnimationFrameAtEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ControlAnimationGrabAttachEvent OnAnimationFrameChanged;

		[Address(RVA = "0x761A40", Offset = "0x761A40", VA = "0x761A40", Slot = "4")]
		protected override void AddListeners(VRTK_ControlAnimationGrabAttach component)
		{
		}

		[Address(RVA = "0x761B50", Offset = "0x761B50", VA = "0x761B50", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControlAnimationGrabAttach component)
		{
		}

		[Address(RVA = "0x761C60", Offset = "0x761C60", VA = "0x761C60")]
		private void AnimationFrameAtStart(object o, ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x761CE8", Offset = "0x761CE8", VA = "0x761CE8")]
		private void AnimationFrameAtEnd(object o, ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x761D70", Offset = "0x761D70", VA = "0x761D70")]
		private void AnimationFrameChanged(object o, ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x761DF8", Offset = "0x761DF8", VA = "0x761DF8")]
		public VRTK_ControlAnimationGrabAttach_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65882C", Offset = "0x65882C")]
	public sealed class VRTK_ControllerEvents_UnityEvents : VRTK_UnityEvents<VRTK_ControllerEvents>
	{
		[Serializable]
		public sealed class ControllerInteractionEvent : UnityEvent<object, ControllerInteractionEventArgs>
		{
			[Address(RVA = "0x765B48", Offset = "0x765B48", VA = "0x765B48")]
			public ControllerInteractionEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerInteractionEvent OnTriggerPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControllerInteractionEvent OnTriggerReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ControllerInteractionEvent OnTriggerTouchStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ControllerInteractionEvent OnTriggerTouchEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ControllerInteractionEvent OnTriggerHairlineStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ControllerInteractionEvent OnTriggerHairlineEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ControllerInteractionEvent OnTriggerClicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerInteractionEvent OnTriggerUnclicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ControllerInteractionEvent OnTriggerAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ControllerInteractionEvent OnGripPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ControllerInteractionEvent OnGripReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ControllerInteractionEvent OnGripTouchStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ControllerInteractionEvent OnGripTouchEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ControllerInteractionEvent OnGripHairlineStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ControllerInteractionEvent OnGripHairlineEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ControllerInteractionEvent OnGripClicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ControllerInteractionEvent OnGripUnclicked;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ControllerInteractionEvent OnGripAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ControllerInteractionEvent OnTouchpadPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ControllerInteractionEvent OnTouchpadReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ControllerInteractionEvent OnTouchpadTouchStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public ControllerInteractionEvent OnTouchpadTouchEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public ControllerInteractionEvent OnTouchpadAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public ControllerInteractionEvent OnButtonOnePressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ControllerInteractionEvent OnButtonOneReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public ControllerInteractionEvent OnButtonOneTouchStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public ControllerInteractionEvent OnButtonOneTouchEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public ControllerInteractionEvent OnButtonTwoPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public ControllerInteractionEvent OnButtonTwoReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public ControllerInteractionEvent OnButtonTwoTouchStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public ControllerInteractionEvent OnButtonTwoTouchEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public ControllerInteractionEvent OnStartMenuPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public ControllerInteractionEvent OnStartMenuReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public ControllerInteractionEvent OnAliasPointerOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public ControllerInteractionEvent OnAliasPointerOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public ControllerInteractionEvent OnAliasPointerSet;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public ControllerInteractionEvent OnAliasGrabOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public ControllerInteractionEvent OnAliasGrabOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public ControllerInteractionEvent OnAliasUseOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public ControllerInteractionEvent OnAliasUseOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public ControllerInteractionEvent OnAliasUIClickOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public ControllerInteractionEvent OnAliasUIClickOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public ControllerInteractionEvent OnAliasMenuOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public ControllerInteractionEvent OnAliasMenuOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public ControllerInteractionEvent OnControllerEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public ControllerInteractionEvent OnControllerDisabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public ControllerInteractionEvent OnControllerIndexChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public ControllerInteractionEvent OnControllerModelAvailable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public ControllerInteractionEvent OnControllerVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public ControllerInteractionEvent OnControllerHidden;

		[Address(RVA = "0x762148", Offset = "0x762148", VA = "0x762148", Slot = "4")]
		protected override void AddListeners(VRTK_ControllerEvents component)
		{
		}

		[Address(RVA = "0x762B58", Offset = "0x762B58", VA = "0x762B58", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControllerEvents component)
		{
		}

		[Address(RVA = "0x763568", Offset = "0x763568", VA = "0x763568")]
		private void TriggerPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763614", Offset = "0x763614", VA = "0x763614")]
		private void TriggerReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7636C0", Offset = "0x7636C0", VA = "0x7636C0")]
		private void TriggerTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x76376C", Offset = "0x76376C", VA = "0x76376C")]
		private void TriggerTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763818", Offset = "0x763818", VA = "0x763818")]
		private void TriggerHairlineStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7638C4", Offset = "0x7638C4", VA = "0x7638C4")]
		private void TriggerHairlineEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763970", Offset = "0x763970", VA = "0x763970")]
		private void TriggerClicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763A1C", Offset = "0x763A1C", VA = "0x763A1C")]
		private void TriggerUnclicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763AC8", Offset = "0x763AC8", VA = "0x763AC8")]
		private void TriggerAxisChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763B74", Offset = "0x763B74", VA = "0x763B74")]
		private void GripPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763C20", Offset = "0x763C20", VA = "0x763C20")]
		private void GripReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763CCC", Offset = "0x763CCC", VA = "0x763CCC")]
		private void GripTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763D78", Offset = "0x763D78", VA = "0x763D78")]
		private void GripTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763E24", Offset = "0x763E24", VA = "0x763E24")]
		private void GripHairlineStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763ED0", Offset = "0x763ED0", VA = "0x763ED0")]
		private void GripHairlineEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x763F7C", Offset = "0x763F7C", VA = "0x763F7C")]
		private void GripClicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764028", Offset = "0x764028", VA = "0x764028")]
		private void GripUnclicked(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7640D4", Offset = "0x7640D4", VA = "0x7640D4")]
		private void GripAxisChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764180", Offset = "0x764180", VA = "0x764180")]
		private void TouchpadPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x76422C", Offset = "0x76422C", VA = "0x76422C")]
		private void TouchpadReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7642D8", Offset = "0x7642D8", VA = "0x7642D8")]
		private void TouchpadTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764384", Offset = "0x764384", VA = "0x764384")]
		private void TouchpadTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764430", Offset = "0x764430", VA = "0x764430")]
		private void TouchpadAxisChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7644DC", Offset = "0x7644DC", VA = "0x7644DC")]
		private void ButtonOnePressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764588", Offset = "0x764588", VA = "0x764588")]
		private void ButtonOneReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764634", Offset = "0x764634", VA = "0x764634")]
		private void ButtonOneTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7646E0", Offset = "0x7646E0", VA = "0x7646E0")]
		private void ButtonOneTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x76478C", Offset = "0x76478C", VA = "0x76478C")]
		private void ButtonTwoPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764838", Offset = "0x764838", VA = "0x764838")]
		private void ButtonTwoReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7648E4", Offset = "0x7648E4", VA = "0x7648E4")]
		private void ButtonTwoTouchStart(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764990", Offset = "0x764990", VA = "0x764990")]
		private void ButtonTwoTouchEnd(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764A3C", Offset = "0x764A3C", VA = "0x764A3C")]
		private void StartMenuPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764AE8", Offset = "0x764AE8", VA = "0x764AE8")]
		private void StartMenuReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764B94", Offset = "0x764B94", VA = "0x764B94")]
		private void AliasPointerOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764C40", Offset = "0x764C40", VA = "0x764C40")]
		private void AliasPointerOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764CEC", Offset = "0x764CEC", VA = "0x764CEC")]
		private void AliasPointerSet(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764D98", Offset = "0x764D98", VA = "0x764D98")]
		private void AliasGrabOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764E44", Offset = "0x764E44", VA = "0x764E44")]
		private void AliasGrabOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764EF0", Offset = "0x764EF0", VA = "0x764EF0")]
		private void AliasUseOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x764F9C", Offset = "0x764F9C", VA = "0x764F9C")]
		private void AliasUseOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x765048", Offset = "0x765048", VA = "0x765048")]
		private void AliasUIClickOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7650F4", Offset = "0x7650F4", VA = "0x7650F4")]
		private void AliasUIClickOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7651A0", Offset = "0x7651A0", VA = "0x7651A0")]
		private void AliasMenuOn(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x76524C", Offset = "0x76524C", VA = "0x76524C")]
		private void AliasMenuOff(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7652F8", Offset = "0x7652F8", VA = "0x7652F8")]
		private void ControllerEnabled(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7653A4", Offset = "0x7653A4", VA = "0x7653A4")]
		private void ControllerDisabled(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x765450", Offset = "0x765450", VA = "0x765450")]
		private void ControllerIndexChanged(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7654FC", Offset = "0x7654FC", VA = "0x7654FC")]
		private void ControllerModelAvailable(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7655A8", Offset = "0x7655A8", VA = "0x7655A8")]
		private void ControllerVisible(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x765654", Offset = "0x765654", VA = "0x765654")]
		private void ControllerHidden(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x765700", Offset = "0x765700", VA = "0x765700")]
		public VRTK_ControllerEvents_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658864", Offset = "0x658864")]
	public sealed class VRTK_ControllerRigidbodyActivator_UnityEvents : VRTK_UnityEvents<VRTK_ControllerRigidbodyActivator>
	{
		[Serializable]
		public sealed class ControllerRigidbodyActivatorEvent : UnityEvent<object, ControllerRigidbodyActivatorEventArgs>
		{
			[Address(RVA = "0x765EB0", Offset = "0x765EB0", VA = "0x765EB0")]
			public ControllerRigidbodyActivatorEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerRigidbodyActivatorEvent OnControllerRigidbodyOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControllerRigidbodyActivatorEvent OnControllerRigidbodyOff;

		[Address(RVA = "0x765B98", Offset = "0x765B98", VA = "0x765B98", Slot = "4")]
		protected override void AddListeners(VRTK_ControllerRigidbodyActivator component)
		{
		}

		[Address(RVA = "0x765C68", Offset = "0x765C68", VA = "0x765C68", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControllerRigidbodyActivator component)
		{
		}

		[Address(RVA = "0x765D38", Offset = "0x765D38", VA = "0x765D38")]
		private void ControllerRigidbodyOn(object o, ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Address(RVA = "0x765DB0", Offset = "0x765DB0", VA = "0x765DB0")]
		private void ControllerRigidbodyOff(object o, ControllerRigidbodyActivatorEventArgs e)
		{
		}

		[Address(RVA = "0x765E28", Offset = "0x765E28", VA = "0x765E28")]
		public VRTK_ControllerRigidbodyActivator_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65889C", Offset = "0x65889C")]
	public sealed class VRTK_ControllerTooltips_UnityEvents : VRTK_UnityEvents<VRTK_ControllerTooltips>
	{
		[Serializable]
		public sealed class ControllerTooltipsEvent : UnityEvent<object, ControllerTooltipsEventArgs>
		{
			[Address(RVA = "0x766218", Offset = "0x766218", VA = "0x766218")]
			public ControllerTooltipsEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerTooltipsEvent OnControllerTooltipOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControllerTooltipsEvent OnControllerTooltipOff;

		[Address(RVA = "0x765F00", Offset = "0x765F00", VA = "0x765F00", Slot = "4")]
		protected override void AddListeners(VRTK_ControllerTooltips component)
		{
		}

		[Address(RVA = "0x765FD0", Offset = "0x765FD0", VA = "0x765FD0", Slot = "5")]
		protected override void RemoveListeners(VRTK_ControllerTooltips component)
		{
		}

		[Address(RVA = "0x7660A0", Offset = "0x7660A0", VA = "0x7660A0")]
		private void ControllerTooltipOn(object o, ControllerTooltipsEventArgs e)
		{
		}

		[Address(RVA = "0x766118", Offset = "0x766118", VA = "0x766118")]
		private void ControllerTooltipOff(object o, ControllerTooltipsEventArgs e)
		{
		}

		[Address(RVA = "0x766190", Offset = "0x766190", VA = "0x766190")]
		public VRTK_ControllerTooltips_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6588D4", Offset = "0x6588D4")]
	public sealed class VRTK_DashTeleport_UnityEvents : VRTK_UnityEvents<VRTK_DashTeleport>
	{
		[Serializable]
		public sealed class DashTeleportEvent : UnityEvent<object, DashTeleportEventArgs>
		{
			[Address(RVA = "0x766580", Offset = "0x766580", VA = "0x766580")]
			public DashTeleportEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DashTeleportEvent OnWillDashThruObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DashTeleportEvent OnDashedThruObjects;

		[Address(RVA = "0x766268", Offset = "0x766268", VA = "0x766268", Slot = "4")]
		protected override void AddListeners(VRTK_DashTeleport component)
		{
		}

		[Address(RVA = "0x766338", Offset = "0x766338", VA = "0x766338", Slot = "5")]
		protected override void RemoveListeners(VRTK_DashTeleport component)
		{
		}

		[Address(RVA = "0x766408", Offset = "0x766408", VA = "0x766408")]
		private void WillDashThruObjects(object o, DashTeleportEventArgs e)
		{
		}

		[Address(RVA = "0x766480", Offset = "0x766480", VA = "0x766480")]
		private void DashedThruObjects(object o, DashTeleportEventArgs e)
		{
		}

		[Address(RVA = "0x7664F8", Offset = "0x7664F8", VA = "0x7664F8")]
		public VRTK_DashTeleport_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65890C", Offset = "0x65890C")]
	public sealed class VRTK_DestinationMarker_UnityEvents : VRTK_UnityEvents<VRTK_DestinationMarker>
	{
		[Serializable]
		public sealed class DestinationMarkerEvent : UnityEvent<object, DestinationMarkerEventArgs>
		{
			[Address(RVA = "0x766BE0", Offset = "0x766BE0", VA = "0x766BE0")]
			public DestinationMarkerEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DestinationMarkerEvent OnDestinationMarkerEnter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DestinationMarkerEvent OnDestinationMarkerExit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DestinationMarkerEvent OnDestinationMarkerHover;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DestinationMarkerEvent OnDestinationMarkerSet;

		[Address(RVA = "0x7665D0", Offset = "0x7665D0", VA = "0x7665D0", Slot = "4")]
		protected override void AddListeners(VRTK_DestinationMarker component)
		{
		}

		[Address(RVA = "0x766720", Offset = "0x766720", VA = "0x766720", Slot = "5")]
		protected override void RemoveListeners(VRTK_DestinationMarker component)
		{
		}

		[Address(RVA = "0x766870", Offset = "0x766870", VA = "0x766870")]
		private void DestinationMarkerEnter(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x766920", Offset = "0x766920", VA = "0x766920")]
		private void DestinationMarkerExit(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x7669D0", Offset = "0x7669D0", VA = "0x7669D0")]
		private void DestinationMarkerHover(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x766A80", Offset = "0x766A80", VA = "0x766A80")]
		private void DestinationMarkerSet(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x766B30", Offset = "0x766B30", VA = "0x766B30")]
		public VRTK_DestinationMarker_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658944", Offset = "0x658944")]
	public sealed class VRTK_DestinationPoint_UnityEvents : VRTK_UnityEvents<VRTK_DestinationPoint>
	{
		[Serializable]
		public sealed class DestinationPointEvent : UnityEvent<object>
		{
			[Address(RVA = "0x767244", Offset = "0x767244", VA = "0x767244")]
			public DestinationPointEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DestinationPointEvent OnDestinationPointEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DestinationPointEvent OnDestinationPointDisabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DestinationPointEvent OnDestinationPointLocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DestinationPointEvent OnDestinationPointUnlocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DestinationPointEvent OnDestinationPointReset;

		[Address(RVA = "0x766C30", Offset = "0x766C30", VA = "0x766C30", Slot = "4")]
		protected override void AddListeners(VRTK_DestinationPoint component)
		{
		}

		[Address(RVA = "0x766DC0", Offset = "0x766DC0", VA = "0x766DC0", Slot = "5")]
		protected override void RemoveListeners(VRTK_DestinationPoint component)
		{
		}

		[Address(RVA = "0x766F50", Offset = "0x766F50", VA = "0x766F50")]
		private void DestinationPointEnabled(object o)
		{
		}

		[Address(RVA = "0x766FC0", Offset = "0x766FC0", VA = "0x766FC0")]
		private void DestinationPointDisabled(object o)
		{
		}

		[Address(RVA = "0x767030", Offset = "0x767030", VA = "0x767030")]
		private void DestinationPointLocked(object o)
		{
		}

		[Address(RVA = "0x7670A0", Offset = "0x7670A0", VA = "0x7670A0")]
		private void DestinationPointUnlocked(object o)
		{
		}

		[Address(RVA = "0x767110", Offset = "0x767110", VA = "0x767110")]
		private void DestinationPointReset(object o)
		{
		}

		[Address(RVA = "0x767180", Offset = "0x767180", VA = "0x767180")]
		public VRTK_DestinationPoint_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65897C", Offset = "0x65897C")]
	public sealed class VRTK_HeadsetCollision_UnityEvents : VRTK_UnityEvents<VRTK_HeadsetCollision>
	{
		[Serializable]
		public sealed class HeadsetCollisionEvent : UnityEvent<object, HeadsetCollisionEventArgs>
		{
			[Address(RVA = "0x7675CC", Offset = "0x7675CC", VA = "0x7675CC")]
			public HeadsetCollisionEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadsetCollisionEvent OnHeadsetCollisionDetect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HeadsetCollisionEvent OnHeadsetCollisionEnded;

		[Address(RVA = "0x767294", Offset = "0x767294", VA = "0x767294", Slot = "4")]
		protected override void AddListeners(VRTK_HeadsetCollision component)
		{
		}

		[Address(RVA = "0x767364", Offset = "0x767364", VA = "0x767364", Slot = "5")]
		protected override void RemoveListeners(VRTK_HeadsetCollision component)
		{
		}

		[Address(RVA = "0x767434", Offset = "0x767434", VA = "0x767434")]
		private void HeadsetCollisionDetect(object o, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0x7674BC", Offset = "0x7674BC", VA = "0x7674BC")]
		private void HeadsetCollisionEnded(object o, HeadsetCollisionEventArgs e)
		{
		}

		[Address(RVA = "0x767544", Offset = "0x767544", VA = "0x767544")]
		public VRTK_HeadsetCollision_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6589B4", Offset = "0x6589B4")]
	public sealed class VRTK_HeadsetControllerAware_UnityEvents : VRTK_UnityEvents<VRTK_HeadsetControllerAware>
	{
		[Serializable]
		public sealed class HeadsetControllerAwareEvent : UnityEvent<object, HeadsetControllerAwareEventArgs>
		{
			[Address(RVA = "0x767C5C", Offset = "0x767C5C", VA = "0x767C5C")]
			public HeadsetControllerAwareEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadsetControllerAwareEvent OnControllerObscured;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HeadsetControllerAwareEvent OnControllerUnobscured;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HeadsetControllerAwareEvent OnControllerGlanceEnter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HeadsetControllerAwareEvent OnControllerGlanceExit;

		[Address(RVA = "0x76761C", Offset = "0x76761C", VA = "0x76761C", Slot = "4")]
		protected override void AddListeners(VRTK_HeadsetControllerAware component)
		{
		}

		[Address(RVA = "0x76776C", Offset = "0x76776C", VA = "0x76776C", Slot = "5")]
		protected override void RemoveListeners(VRTK_HeadsetControllerAware component)
		{
		}

		[Address(RVA = "0x7678BC", Offset = "0x7678BC", VA = "0x7678BC")]
		private void ControllerObscured(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0x767978", Offset = "0x767978", VA = "0x767978")]
		private void ControllerUnobscured(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0x767A34", Offset = "0x767A34", VA = "0x767A34")]
		private void ControllerGlanceEnter(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0x767AF0", Offset = "0x767AF0", VA = "0x767AF0")]
		private void ControllerGlanceExit(object o, HeadsetControllerAwareEventArgs e)
		{
		}

		[Address(RVA = "0x767BAC", Offset = "0x767BAC", VA = "0x767BAC")]
		public VRTK_HeadsetControllerAware_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6589EC", Offset = "0x6589EC")]
	public sealed class VRTK_HeadsetFade_UnityEvents : VRTK_UnityEvents<VRTK_HeadsetFade>
	{
		[Serializable]
		public sealed class HeadsetFadeEvent : UnityEvent<object, HeadsetFadeEventArgs>
		{
			[Address(RVA = "0x76821C", Offset = "0x76821C", VA = "0x76821C")]
			public HeadsetFadeEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadsetFadeEvent OnHeadsetFadeStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HeadsetFadeEvent OnHeadsetFadeComplete;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HeadsetFadeEvent OnHeadsetUnfadeStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HeadsetFadeEvent OnHeadsetUnfadeComplete;

		[Address(RVA = "0x767CAC", Offset = "0x767CAC", VA = "0x767CAC", Slot = "4")]
		protected override void AddListeners(VRTK_HeadsetFade component)
		{
		}

		[Address(RVA = "0x767DFC", Offset = "0x767DFC", VA = "0x767DFC", Slot = "5")]
		protected override void RemoveListeners(VRTK_HeadsetFade component)
		{
		}

		[Address(RVA = "0x767F4C", Offset = "0x767F4C", VA = "0x767F4C")]
		private void HeadsetFadeStart(object o, HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0x767FD4", Offset = "0x767FD4", VA = "0x767FD4")]
		private void HeadsetFadeComplete(object o, HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0x76805C", Offset = "0x76805C", VA = "0x76805C")]
		private void HeadsetUnfadeStart(object o, HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0x7680E4", Offset = "0x7680E4", VA = "0x7680E4")]
		private void HeadsetUnfadeComplete(object o, HeadsetFadeEventArgs e)
		{
		}

		[Address(RVA = "0x76816C", Offset = "0x76816C", VA = "0x76816C")]
		public VRTK_HeadsetFade_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658A24", Offset = "0x658A24")]
	public sealed class VRTK_InteractableObject_UnityEvents : VRTK_UnityEvents<VRTK_InteractableObject>
	{
		[Serializable]
		public sealed class InteractableObjectEvent : UnityEvent<object, InteractableObjectEventArgs>
		{
			[Address(RVA = "0x76D7D4", Offset = "0x76D7D4", VA = "0x76D7D4")]
			public InteractableObjectEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableObjectEvent OnObjectEnable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractableObjectEvent OnObjectDisable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractableObjectEvent OnNearTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractableObjectEvent OnNearUntouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractableObjectEvent OnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableObjectEvent OnUntouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractableObjectEvent OnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InteractableObjectEvent OnUngrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractableObjectEvent OnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractableObjectEvent OnUnuse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractableObjectEvent OnEnterSnapDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractableObjectEvent OnExitSnapDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractableObjectEvent OnSnapToDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractableObjectEvent OnUnsnapFromDropZone;

		[Address(RVA = "0x76C82C", Offset = "0x76C82C", VA = "0x76C82C", Slot = "4")]
		protected override void AddListeners(VRTK_InteractableObject component)
		{
		}

		[Address(RVA = "0x76CBFC", Offset = "0x76CBFC", VA = "0x76CBFC", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractableObject component)
		{
		}

		[Address(RVA = "0x76CFCC", Offset = "0x76CFCC", VA = "0x76CFCC")]
		private void Enable(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D044", Offset = "0x76D044", VA = "0x76D044")]
		private void Disable(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D0BC", Offset = "0x76D0BC", VA = "0x76D0BC")]
		private void NearTouch(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D134", Offset = "0x76D134", VA = "0x76D134")]
		private void NearUnTouch(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D1AC", Offset = "0x76D1AC", VA = "0x76D1AC")]
		private void Touch(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D224", Offset = "0x76D224", VA = "0x76D224")]
		private void UnTouch(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D29C", Offset = "0x76D29C", VA = "0x76D29C")]
		private void Grab(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D314", Offset = "0x76D314", VA = "0x76D314")]
		private void UnGrab(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D38C", Offset = "0x76D38C", VA = "0x76D38C")]
		private void Use(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D404", Offset = "0x76D404", VA = "0x76D404")]
		private void Unuse(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D47C", Offset = "0x76D47C", VA = "0x76D47C")]
		private void EnterSnapDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D4F4", Offset = "0x76D4F4", VA = "0x76D4F4")]
		private void ExitSnapDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D56C", Offset = "0x76D56C", VA = "0x76D56C")]
		private void SnapToDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D5E4", Offset = "0x76D5E4", VA = "0x76D5E4")]
		private void UnsnapFromDropZone(object o, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x76D65C", Offset = "0x76D65C", VA = "0x76D65C")]
		public VRTK_InteractableObject_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658A5C", Offset = "0x658A5C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x658A5C", Offset = "0x658A5C")]
	public sealed class VRTK_InteractControllerAppearance_UnityEvents : VRTK_UnityEvents<VRTK_InteractControllerAppearance>
	{
		[Serializable]
		public sealed class InteractControllerAppearanceEvent : UnityEvent<object, InteractControllerAppearanceEventArgs>
		{
			[Address(RVA = "0x768C4C", Offset = "0x768C4C", VA = "0x768C4C")]
			public InteractControllerAppearanceEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractControllerAppearanceEvent OnControllerHidden;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractControllerAppearanceEvent OnControllerVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractControllerAppearanceEvent OnHiddenOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractControllerAppearanceEvent OnVisibleOnTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractControllerAppearanceEvent OnHiddenOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractControllerAppearanceEvent OnVisibleOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractControllerAppearanceEvent OnHiddenOnUse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public InteractControllerAppearanceEvent OnVisibleOnUse;

		[Address(RVA = "0x76826C", Offset = "0x76826C", VA = "0x76826C", Slot = "4")]
		protected override void AddListeners(VRTK_InteractControllerAppearance component)
		{
		}

		[Address(RVA = "0x7684BC", Offset = "0x7684BC", VA = "0x7684BC", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractControllerAppearance component)
		{
		}

		[Address(RVA = "0x76870C", Offset = "0x76870C", VA = "0x76870C")]
		private void ControllerHidden(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x768794", Offset = "0x768794", VA = "0x768794")]
		private void ControllerVisible(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x76881C", Offset = "0x76881C", VA = "0x76881C")]
		private void HiddenOnTouch(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x7688A4", Offset = "0x7688A4", VA = "0x7688A4")]
		private void VisibleOnTouch(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x76892C", Offset = "0x76892C", VA = "0x76892C")]
		private void HiddenOnGrab(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x7689B4", Offset = "0x7689B4", VA = "0x7689B4")]
		private void VisibleOnGrab(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x768A3C", Offset = "0x768A3C", VA = "0x768A3C")]
		private void HiddenOnUse(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x768AC4", Offset = "0x768AC4", VA = "0x768AC4")]
		private void VisibleOnUse(object o, InteractControllerAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x768B4C", Offset = "0x768B4C", VA = "0x768B4C")]
		public VRTK_InteractControllerAppearance_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658ABC", Offset = "0x658ABC")]
	public sealed class VRTK_InteractGrab_UnityEvents : VRTK_UnityEvents<VRTK_InteractGrab>
	{
		[Serializable]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Address(RVA = "0x7694A4", Offset = "0x7694A4", VA = "0x7694A4")]
			public ObjectInteractEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerStartGrabInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerGrabInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ObjectInteractEvent OnControllerStartUngrabInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ObjectInteractEvent OnControllerUngrabInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnGrabButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnGrabButtonReleased;

		[Address(RVA = "0x768C9C", Offset = "0x768C9C", VA = "0x768C9C", Slot = "4")]
		protected override void AddListeners(VRTK_InteractGrab component)
		{
		}

		[Address(RVA = "0x768E74", Offset = "0x768E74", VA = "0x768E74", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractGrab component)
		{
		}

		[Address(RVA = "0x76904C", Offset = "0x76904C", VA = "0x76904C")]
		private void ControllerStartGrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x7690D4", Offset = "0x7690D4", VA = "0x7690D4")]
		private void ControllerGrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76915C", Offset = "0x76915C", VA = "0x76915C")]
		private void ControllerStartUngrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x7691E4", Offset = "0x7691E4", VA = "0x7691E4")]
		private void ControllerUngrabInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76926C", Offset = "0x76926C", VA = "0x76926C")]
		private void GrabButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x769318", Offset = "0x769318", VA = "0x769318")]
		private void GrabButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7693C4", Offset = "0x7693C4", VA = "0x7693C4")]
		public VRTK_InteractGrab_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658AF4", Offset = "0x658AF4")]
	public sealed class VRTK_InteractHaptics_UnityEvents : VRTK_UnityEvents<VRTK_InteractHaptics>
	{
		[Serializable]
		public sealed class InteractHapticsEvent : UnityEvent<object, InteractHapticsEventArgs>
		{
			[Address(RVA = "0x769A24", Offset = "0x769A24", VA = "0x769A24")]
			public InteractHapticsEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractHapticsEvent OnInteractHapticsNearTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractHapticsEvent OnInteractHapticsTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractHapticsEvent OnInteractHapticsGrabbed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractHapticsEvent OnInteractHapticsUsed;

		[Address(RVA = "0x7694F4", Offset = "0x7694F4", VA = "0x7694F4", Slot = "4")]
		protected override void AddListeners(VRTK_InteractHaptics component)
		{
		}

		[Address(RVA = "0x769644", Offset = "0x769644", VA = "0x769644", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractHaptics component)
		{
		}

		[Address(RVA = "0x769794", Offset = "0x769794", VA = "0x769794")]
		private void InteractHapticsNearTouched(object o, InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0x76980C", Offset = "0x76980C", VA = "0x76980C")]
		private void InteractHapticsTouched(object o, InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0x769884", Offset = "0x769884", VA = "0x769884")]
		private void InteractHapticsGrabbed(object o, InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0x7698FC", Offset = "0x7698FC", VA = "0x7698FC")]
		private void InteractHapticsUsed(object o, InteractHapticsEventArgs e)
		{
		}

		[Address(RVA = "0x769974", Offset = "0x769974", VA = "0x769974")]
		public VRTK_InteractHaptics_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658B2C", Offset = "0x658B2C")]
	public sealed class VRTK_InteractNearTouch_UnityEvents : VRTK_UnityEvents<VRTK_InteractNearTouch>
	{
		[Serializable]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Address(RVA = "0x769DAC", Offset = "0x769DAC", VA = "0x769DAC")]
			public ObjectInteractEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerNearTouchInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerNearUntouchInteractableObject;

		[Address(RVA = "0x769A74", Offset = "0x769A74", VA = "0x769A74", Slot = "4")]
		protected override void AddListeners(VRTK_InteractNearTouch component)
		{
		}

		[Address(RVA = "0x769B44", Offset = "0x769B44", VA = "0x769B44", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractNearTouch component)
		{
		}

		[Address(RVA = "0x769C14", Offset = "0x769C14", VA = "0x769C14")]
		private void ControllerNearTouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x769C9C", Offset = "0x769C9C", VA = "0x769C9C")]
		private void ControllerNearUntouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x769D24", Offset = "0x769D24", VA = "0x769D24")]
		public VRTK_InteractNearTouch_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658B64", Offset = "0x658B64")]
	public sealed class VRTK_InteractObjectAppearance_UnityEvents : VRTK_UnityEvents<VRTK_InteractObjectAppearance>
	{
		[Serializable]
		public sealed class InteractObjectAppearanceEvent : UnityEvent<object, InteractObjectAppearanceEventArgs>
		{
			[Address(RVA = "0x76A3BC", Offset = "0x76A3BC", VA = "0x76A3BC")]
			public InteractObjectAppearanceEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractObjectAppearanceEvent OnGameObjectEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractObjectAppearanceEvent OnGameObjectDisabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractObjectAppearanceEvent OnRenderersEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractObjectAppearanceEvent OnRenderersDisabled;

		[Address(RVA = "0x769DFC", Offset = "0x769DFC", VA = "0x769DFC", Slot = "4")]
		protected override void AddListeners(VRTK_InteractObjectAppearance component)
		{
		}

		[Address(RVA = "0x769F4C", Offset = "0x769F4C", VA = "0x769F4C", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractObjectAppearance component)
		{
		}

		[Address(RVA = "0x76A09C", Offset = "0x76A09C", VA = "0x76A09C")]
		private void GameObjectEnabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x76A138", Offset = "0x76A138", VA = "0x76A138")]
		private void GameObjectDisabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x76A1D4", Offset = "0x76A1D4", VA = "0x76A1D4")]
		private void RenderersEnabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x76A270", Offset = "0x76A270", VA = "0x76A270")]
		private void RenderersDisabled(object o, InteractObjectAppearanceEventArgs e)
		{
		}

		[Address(RVA = "0x76A30C", Offset = "0x76A30C", VA = "0x76A30C")]
		public VRTK_InteractObjectAppearance_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658B9C", Offset = "0x658B9C")]
	public sealed class VRTK_InteractObjectHighlighter_UnityEvents : VRTK_UnityEvents<VRTK_InteractObjectHighlighter>
	{
		[Serializable]
		public sealed class InteractObjectHighlighterEvent : UnityEvent<object, InteractObjectHighlighterEventArgs>
		{
			[Address(RVA = "0x76A78C", Offset = "0x76A78C", VA = "0x76A78C")]
			public InteractObjectHighlighterEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractObjectHighlighterEvent OnInteractObjectHighlighterHighlighted;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractObjectHighlighterEvent OnInteractObjectHighlighterUnhighlighted;

		[Address(RVA = "0x76A40C", Offset = "0x76A40C", VA = "0x76A40C", Slot = "4")]
		protected override void AddListeners(VRTK_InteractObjectHighlighter component)
		{
		}

		[Address(RVA = "0x76A4DC", Offset = "0x76A4DC", VA = "0x76A4DC", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractObjectHighlighter component)
		{
		}

		[Address(RVA = "0x76A5AC", Offset = "0x76A5AC", VA = "0x76A5AC")]
		private void InteractObjectHighlighterHighlighted(object o, InteractObjectHighlighterEventArgs e)
		{
		}

		[Address(RVA = "0x76A658", Offset = "0x76A658", VA = "0x76A658")]
		private void InteractObjectHighlighterUnhighlighted(object o, InteractObjectHighlighterEventArgs e)
		{
		}

		[Address(RVA = "0x76A704", Offset = "0x76A704", VA = "0x76A704")]
		public VRTK_InteractObjectHighlighter_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658BD4", Offset = "0x658BD4")]
	public sealed class VRTK_InteractTouch_UnityEvents : VRTK_UnityEvents<VRTK_InteractTouch>
	{
		[Serializable]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Address(RVA = "0x76AF84", Offset = "0x76AF84", VA = "0x76AF84")]
			public ObjectInteractEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerStartTouchInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerTouchInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ObjectInteractEvent OnControllerStartUntouchInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ObjectInteractEvent OnControllerUntouchInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ObjectInteractEvent OnControllerRigidbodyActivated;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ObjectInteractEvent OnControllerRigidbodyDeactivated;

		[Address(RVA = "0x76A7DC", Offset = "0x76A7DC", VA = "0x76A7DC", Slot = "4")]
		protected override void AddListeners(VRTK_InteractTouch component)
		{
		}

		[Address(RVA = "0x76A9AC", Offset = "0x76A9AC", VA = "0x76A9AC", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractTouch component)
		{
		}

		[Address(RVA = "0x76AB7C", Offset = "0x76AB7C", VA = "0x76AB7C")]
		private void ControllerStartTouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76AC04", Offset = "0x76AC04", VA = "0x76AC04")]
		private void ControllerTouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76AC8C", Offset = "0x76AC8C", VA = "0x76AC8C")]
		private void ControllerStartUntouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76AD14", Offset = "0x76AD14", VA = "0x76AD14")]
		private void ControllerUntouchInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76AD9C", Offset = "0x76AD9C", VA = "0x76AD9C")]
		private void ControllerRigidbodyActivated(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76AE24", Offset = "0x76AE24", VA = "0x76AE24")]
		private void ControllerRigidbodyDeactivated(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76AEAC", Offset = "0x76AEAC", VA = "0x76AEAC")]
		public VRTK_InteractTouch_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658C0C", Offset = "0x658C0C")]
	public sealed class VRTK_InteractUse_UnityEvents : VRTK_UnityEvents<VRTK_InteractUse>
	{
		[Serializable]
		public sealed class ObjectInteractEvent : UnityEvent<object, ObjectInteractEventArgs>
		{
			[Address(RVA = "0x76C7DC", Offset = "0x76C7DC", VA = "0x76C7DC")]
			public ObjectInteractEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectInteractEvent OnControllerStartUseInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectInteractEvent OnControllerUseInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ObjectInteractEvent OnControllerStartUnuseInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ObjectInteractEvent OnControllerUnuseInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnUseButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnUseButtonReleased;

		[Address(RVA = "0x76AFD4", Offset = "0x76AFD4", VA = "0x76AFD4", Slot = "4")]
		protected override void AddListeners(VRTK_InteractUse component)
		{
		}

		[Address(RVA = "0x76C1AC", Offset = "0x76C1AC", VA = "0x76C1AC", Slot = "5")]
		protected override void RemoveListeners(VRTK_InteractUse component)
		{
		}

		[Address(RVA = "0x76C384", Offset = "0x76C384", VA = "0x76C384")]
		private void ControllerStartUseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76C40C", Offset = "0x76C40C", VA = "0x76C40C")]
		private void ControllerUseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76C494", Offset = "0x76C494", VA = "0x76C494")]
		private void ControllerStartUnuseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76C51C", Offset = "0x76C51C", VA = "0x76C51C")]
		private void ControllerUnuseInteractableObject(object o, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0x76C5A4", Offset = "0x76C5A4", VA = "0x76C5A4")]
		private void UseButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x76C650", Offset = "0x76C650", VA = "0x76C650")]
		private void UseButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x76C6FC", Offset = "0x76C6FC", VA = "0x76C6FC")]
		public VRTK_InteractUse_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658C44", Offset = "0x658C44")]
	public sealed class VRTK_MoveTransformGrabAttach_UnityEvents : VRTK_UnityEvents<VRTK_MoveTransformGrabAttach>
	{
		[Serializable]
		public sealed class MoveTransformGrabAttachEvent : UnityEvent<object, MoveTransformGrabAttachEventArgs>
		{
			[Address(RVA = "0x76EA34", Offset = "0x76EA34", VA = "0x76EA34")]
			public MoveTransformGrabAttachEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoveTransformGrabAttachEvent OnTransformPositionChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MoveTransformGrabAttachEvent OnXAxisMinLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MoveTransformGrabAttachEvent OnXAxisMinLimitExited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MoveTransformGrabAttachEvent OnXAxisMaxLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MoveTransformGrabAttachEvent OnXAxisMaxLimitExited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MoveTransformGrabAttachEvent OnYAxisMinLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MoveTransformGrabAttachEvent OnYAxisMinLimitExited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MoveTransformGrabAttachEvent OnYAxisMaxLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MoveTransformGrabAttachEvent OnYAxisMaxLimitExited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MoveTransformGrabAttachEvent OnZAxisMinLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public MoveTransformGrabAttachEvent OnZAxisMinLimitExited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MoveTransformGrabAttachEvent OnZAxisMaxLimitReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MoveTransformGrabAttachEvent OnZAxisMaxLimitExited;

		[Address(RVA = "0x76D824", Offset = "0x76D824", VA = "0x76D824", Slot = "4")]
		protected override void AddListeners(VRTK_MoveTransformGrabAttach component)
		{
		}

		[Address(RVA = "0x76DBB4", Offset = "0x76DBB4", VA = "0x76DBB4", Slot = "5")]
		protected override void RemoveListeners(VRTK_MoveTransformGrabAttach component)
		{
		}

		[Address(RVA = "0x76DF44", Offset = "0x76DF44", VA = "0x76DF44")]
		private void TransformPositionChanged(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E000", Offset = "0x76E000", VA = "0x76E000")]
		private void XAxisMinLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E0BC", Offset = "0x76E0BC", VA = "0x76E0BC")]
		private void XAxisMaxLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E178", Offset = "0x76E178", VA = "0x76E178")]
		private void YAxisMinLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E234", Offset = "0x76E234", VA = "0x76E234")]
		private void YAxisMaxLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E2F0", Offset = "0x76E2F0", VA = "0x76E2F0")]
		private void ZAxisMinLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E3AC", Offset = "0x76E3AC", VA = "0x76E3AC")]
		private void ZAxisMaxLimitReached(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E468", Offset = "0x76E468", VA = "0x76E468")]
		private void XAxisMinLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E524", Offset = "0x76E524", VA = "0x76E524")]
		private void XAxisMaxLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E5E0", Offset = "0x76E5E0", VA = "0x76E5E0")]
		private void YAxisMinLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E69C", Offset = "0x76E69C", VA = "0x76E69C")]
		private void YAxisMaxLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E758", Offset = "0x76E758", VA = "0x76E758")]
		private void ZAxisMinLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E814", Offset = "0x76E814", VA = "0x76E814")]
		private void ZAxisMaxLimitExited(object o, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x76E8D0", Offset = "0x76E8D0", VA = "0x76E8D0")]
		public VRTK_MoveTransformGrabAttach_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658C7C", Offset = "0x658C7C")]
	public sealed class VRTK_ObjectAutoGrab_UnityEvents : VRTK_UnityEvents<VRTK_ObjectAutoGrab>
	{
		[Serializable]
		public sealed class ObjectAutoGrabEvent : UnityEvent<object>
		{
			[Address(RVA = "0x76EC80", Offset = "0x76EC80", VA = "0x76EC80")]
			public ObjectAutoGrabEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectAutoGrabEvent OnObjectAutoGrabCompleted;

		[Address(RVA = "0x76EA84", Offset = "0x76EA84", VA = "0x76EA84", Slot = "4")]
		protected override void AddListeners(VRTK_ObjectAutoGrab component)
		{
		}

		[Address(RVA = "0x76EB14", Offset = "0x76EB14", VA = "0x76EB14", Slot = "5")]
		protected override void RemoveListeners(VRTK_ObjectAutoGrab component)
		{
		}

		[Address(RVA = "0x76EBA4", Offset = "0x76EBA4", VA = "0x76EBA4")]
		private void ObjectAutoGrabCompleted(object o)
		{
		}

		[Address(RVA = "0x76EC14", Offset = "0x76EC14", VA = "0x76EC14")]
		public VRTK_ObjectAutoGrab_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658CB4", Offset = "0x658CB4")]
	public sealed class VRTK_ObjectControl_UnityEvents : VRTK_UnityEvents<VRTK_ObjectControl>
	{
		[Serializable]
		public sealed class ObjectControlEvent : UnityEvent<object, ObjectControlEventArgs>
		{
			[Address(RVA = "0x76F050", Offset = "0x76F050", VA = "0x76F050")]
			public ObjectControlEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectControlEvent OnXAxisChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectControlEvent OnYAxisChanged;

		[Address(RVA = "0x76ECD0", Offset = "0x76ECD0", VA = "0x76ECD0", Slot = "4")]
		protected override void AddListeners(VRTK_ObjectControl component)
		{
		}

		[Address(RVA = "0x76EDA0", Offset = "0x76EDA0", VA = "0x76EDA0", Slot = "5")]
		protected override void RemoveListeners(VRTK_ObjectControl component)
		{
		}

		[Address(RVA = "0x76EE70", Offset = "0x76EE70", VA = "0x76EE70")]
		private void XAxisChanged(object o, ObjectControlEventArgs e)
		{
		}

		[Address(RVA = "0x76EF1C", Offset = "0x76EF1C", VA = "0x76EF1C")]
		private void YAxisChanged(object o, ObjectControlEventArgs e)
		{
		}

		[Address(RVA = "0x76EFC8", Offset = "0x76EFC8", VA = "0x76EFC8")]
		public VRTK_ObjectControl_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658CEC", Offset = "0x658CEC")]
	public sealed class VRTK_ObjectTooltip_UnityEvents : VRTK_UnityEvents<VRTK_ObjectTooltip>
	{
		[Serializable]
		public sealed class ObjectTooltipEvent : UnityEvent<object, ObjectTooltipEventArgs>
		{
			[Address(RVA = "0x76F3B8", Offset = "0x76F3B8", VA = "0x76F3B8")]
			public ObjectTooltipEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectTooltipEvent OnObjectTooltipReset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObjectTooltipEvent OnObjectTooltipTextUpdated;

		[Address(RVA = "0x76F0A0", Offset = "0x76F0A0", VA = "0x76F0A0", Slot = "4")]
		protected override void AddListeners(VRTK_ObjectTooltip component)
		{
		}

		[Address(RVA = "0x76F170", Offset = "0x76F170", VA = "0x76F170", Slot = "5")]
		protected override void RemoveListeners(VRTK_ObjectTooltip component)
		{
		}

		[Address(RVA = "0x76F240", Offset = "0x76F240", VA = "0x76F240")]
		private void ObjectTooltipReset(object o, ObjectTooltipEventArgs e)
		{
		}

		[Address(RVA = "0x76F2B8", Offset = "0x76F2B8", VA = "0x76F2B8")]
		private void ObjectTooltipTextUpdated(object o, ObjectTooltipEventArgs e)
		{
		}

		[Address(RVA = "0x76F330", Offset = "0x76F330", VA = "0x76F330")]
		public VRTK_ObjectTooltip_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658D24", Offset = "0x658D24")]
	public sealed class VRTK_PlayAreaCursor_UnityEvents : VRTK_UnityEvents<VRTK_PlayAreaCursor>
	{
		[Serializable]
		public sealed class PlayAreaCursorEvent : UnityEvent<object, PlayAreaCursorEventArgs>
		{
			[Address(RVA = "0x76F720", Offset = "0x76F720", VA = "0x76F720")]
			public PlayAreaCursorEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayAreaCursorEvent OnPlayAreaCursorStartCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayAreaCursorEvent OnPlayAreaCursorEndCollision;

		[Address(RVA = "0x76F408", Offset = "0x76F408", VA = "0x76F408", Slot = "4")]
		protected override void AddListeners(VRTK_PlayAreaCursor component)
		{
		}

		[Address(RVA = "0x76F4D8", Offset = "0x76F4D8", VA = "0x76F4D8", Slot = "5")]
		protected override void RemoveListeners(VRTK_PlayAreaCursor component)
		{
		}

		[Address(RVA = "0x76F5A8", Offset = "0x76F5A8", VA = "0x76F5A8")]
		private void PlayAreaCursorStartCollision(object o, PlayAreaCursorEventArgs e)
		{
		}

		[Address(RVA = "0x76F620", Offset = "0x76F620", VA = "0x76F620")]
		private void PlayAreaCursorEndCollision(object o, PlayAreaCursorEventArgs e)
		{
		}

		[Address(RVA = "0x76F698", Offset = "0x76F698", VA = "0x76F698")]
		public VRTK_PlayAreaCursor_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658D5C", Offset = "0x658D5C")]
	public sealed class VRTK_PlayerClimb_UnityEvents : VRTK_UnityEvents<VRTK_PlayerClimb>
	{
		[Serializable]
		public sealed class PlayerClimbEvent : UnityEvent<object, PlayerClimbEventArgs>
		{
			[Address(RVA = "0x76FAA8", Offset = "0x76FAA8", VA = "0x76FAA8")]
			public PlayerClimbEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerClimbEvent OnPlayerClimbStarted;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerClimbEvent OnPlayerClimbEnded;

		[Address(RVA = "0x76F770", Offset = "0x76F770", VA = "0x76F770", Slot = "4")]
		protected override void AddListeners(VRTK_PlayerClimb component)
		{
		}

		[Address(RVA = "0x76F840", Offset = "0x76F840", VA = "0x76F840", Slot = "5")]
		protected override void RemoveListeners(VRTK_PlayerClimb component)
		{
		}

		[Address(RVA = "0x76F910", Offset = "0x76F910", VA = "0x76F910")]
		private void PlayerClimbStarted(object o, PlayerClimbEventArgs e)
		{
		}

		[Address(RVA = "0x76F998", Offset = "0x76F998", VA = "0x76F998")]
		private void PlayerClimbEnded(object o, PlayerClimbEventArgs e)
		{
		}

		[Address(RVA = "0x76FA20", Offset = "0x76FA20", VA = "0x76FA20")]
		public VRTK_PlayerClimb_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658D94", Offset = "0x658D94")]
	public sealed class VRTK_Pointer_UnityEvents : VRTK_UnityEvents<VRTK_Pointer>
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_DestinationMarker_UnityEvents.DestinationMarkerEvent OnPointerStateValid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_DestinationMarker_UnityEvents.DestinationMarkerEvent OnPointerStateInvalid;

		[Address(RVA = "0x76FD44", Offset = "0x76FD44", VA = "0x76FD44", Slot = "4")]
		protected override void AddListeners(VRTK_Pointer component)
		{
		}

		[Address(RVA = "0x76FF1C", Offset = "0x76FF1C", VA = "0x76FF1C", Slot = "5")]
		protected override void RemoveListeners(VRTK_Pointer component)
		{
		}

		[Address(RVA = "0x7700F4", Offset = "0x7700F4", VA = "0x7700F4")]
		private void ActivationButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7701A0", Offset = "0x7701A0", VA = "0x7701A0")]
		private void ActivationButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x77024C", Offset = "0x77024C", VA = "0x77024C")]
		private void SelectionButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7702F8", Offset = "0x7702F8", VA = "0x7702F8")]
		private void SelectionButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x7703A4", Offset = "0x7703A4", VA = "0x7703A4")]
		private void PointerStateValid(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x770454", Offset = "0x770454", VA = "0x770454")]
		private void PointerStateInvalid(object o, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0x770504", Offset = "0x770504", VA = "0x770504")]
		public VRTK_Pointer_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658DCC", Offset = "0x658DCC")]
	public sealed class VRTK_PointerDirectionIndicator_UnityEvents : VRTK_UnityEvents<VRTK_PointerDirectionIndicator>
	{
		[Serializable]
		public sealed class PointerDirectionIndicatorEvent : UnityEvent<object>
		{
			[Address(RVA = "0x76FCF4", Offset = "0x76FCF4", VA = "0x76FCF4")]
			public PointerDirectionIndicatorEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PointerDirectionIndicatorEvent OnPointerDirectionIndicatorPositionSet;

		[Address(RVA = "0x76FAF8", Offset = "0x76FAF8", VA = "0x76FAF8", Slot = "4")]
		protected override void AddListeners(VRTK_PointerDirectionIndicator component)
		{
		}

		[Address(RVA = "0x76FB88", Offset = "0x76FB88", VA = "0x76FB88", Slot = "5")]
		protected override void RemoveListeners(VRTK_PointerDirectionIndicator component)
		{
		}

		[Address(RVA = "0x76FC18", Offset = "0x76FC18", VA = "0x76FC18")]
		private void PointerDirectionIndicatorPositionSet(object o)
		{
		}

		[Address(RVA = "0x76FC88", Offset = "0x76FC88", VA = "0x76FC88")]
		public VRTK_PointerDirectionIndicator_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658E04", Offset = "0x658E04")]
	public sealed class VRTK_PositionRewind_UnityEvents : VRTK_UnityEvents<VRTK_PositionRewind>
	{
		[Serializable]
		public sealed class PositionRewindEvent : UnityEvent<object, PositionRewindEventArgs>
		{
			[Address(RVA = "0x770814", Offset = "0x770814", VA = "0x770814")]
			public PositionRewindEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionRewindEvent OnPositionRewindToSafe;

		[Address(RVA = "0x7705E4", Offset = "0x7705E4", VA = "0x7705E4", Slot = "4")]
		protected override void AddListeners(VRTK_PositionRewind component)
		{
		}

		[Address(RVA = "0x770674", Offset = "0x770674", VA = "0x770674", Slot = "5")]
		protected override void RemoveListeners(VRTK_PositionRewind component)
		{
		}

		[Address(RVA = "0x770704", Offset = "0x770704", VA = "0x770704")]
		private void PositionRewindToSafe(object o, PositionRewindEventArgs e)
		{
		}

		[Address(RVA = "0x7707A8", Offset = "0x7707A8", VA = "0x7707A8")]
		public VRTK_PositionRewind_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658E3C", Offset = "0x658E3C")]
	public sealed class VRTK_RotateTransformGrabAttach_UnityEvents : VRTK_UnityEvents<VRTK_RotateTransformGrabAttach>
	{
		[Serializable]
		public sealed class RotateTransformGrabAttachEvent : UnityEvent<object, RotateTransformGrabAttachEventArgs>
		{
			[Address(RVA = "0x770F54", Offset = "0x770F54", VA = "0x770F54")]
			public RotateTransformGrabAttachEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RotateTransformGrabAttachEvent OnAngleChanged;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RotateTransformGrabAttachEvent OnMinAngleReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RotateTransformGrabAttachEvent OnMinAngleExited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RotateTransformGrabAttachEvent OnMaxAngleReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RotateTransformGrabAttachEvent OnMaxAngleExited;

		[Address(RVA = "0x770864", Offset = "0x770864", VA = "0x770864", Slot = "4")]
		protected override void AddListeners(VRTK_RotateTransformGrabAttach component)
		{
		}

		[Address(RVA = "0x7709F4", Offset = "0x7709F4", VA = "0x7709F4", Slot = "5")]
		protected override void RemoveListeners(VRTK_RotateTransformGrabAttach component)
		{
		}

		[Address(RVA = "0x770B84", Offset = "0x770B84", VA = "0x770B84")]
		private void AngleChanged(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x770C20", Offset = "0x770C20", VA = "0x770C20")]
		private void MinAngleReached(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x770CBC", Offset = "0x770CBC", VA = "0x770CBC")]
		private void MinAngleExited(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x770D58", Offset = "0x770D58", VA = "0x770D58")]
		private void MaxAngleReached(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x770DF4", Offset = "0x770DF4", VA = "0x770DF4")]
		private void MaxAngleExited(object o, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x770E90", Offset = "0x770E90", VA = "0x770E90")]
		public VRTK_RotateTransformGrabAttach_UnityEvents()
		{
		}
	}
	public sealed class VRTK_SDKManager_UnityEvents : VRTK_UnityEvents<VRTK_SDKManager>
	{
		[Serializable]
		public sealed class LoadedSetupChangeEvent : UnityEvent<VRTK_SDKManager, VRTK_SDKManager.LoadedSetupChangeEventArgs>
		{
			[Address(RVA = "0x7711D4", Offset = "0x7711D4", VA = "0x7711D4")]
			public LoadedSetupChangeEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LoadedSetupChangeEvent OnLoadedSetupChanged;

		[Address(RVA = "0x770FA4", Offset = "0x770FA4", VA = "0x770FA4", Slot = "4")]
		protected override void AddListeners(VRTK_SDKManager component)
		{
		}

		[Address(RVA = "0x771034", Offset = "0x771034", VA = "0x771034", Slot = "5")]
		protected override void RemoveListeners(VRTK_SDKManager component)
		{
		}

		[Address(RVA = "0x7710C4", Offset = "0x7710C4", VA = "0x7710C4")]
		private void LoadedSetupChanged(VRTK_SDKManager sender, VRTK_SDKManager.LoadedSetupChangeEventArgs e)
		{
		}

		[Address(RVA = "0x771168", Offset = "0x771168", VA = "0x771168")]
		public VRTK_SDKManager_UnityEvents()
		{
		}
	}
	public sealed class VRTK_SDKSetup_UnityEvents : VRTK_UnityEvents<VRTK_SDKSetup>
	{
		[Serializable]
		public sealed class LoadEvent : UnityEvent<VRTK_SDKManager, VRTK_SDKSetup>
		{
			[Address(RVA = "0x77153C", Offset = "0x77153C", VA = "0x77153C")]
			public LoadEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LoadEvent OnLoaded;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LoadEvent OnUnloaded;

		[Address(RVA = "0x771224", Offset = "0x771224", VA = "0x771224", Slot = "4")]
		protected override void AddListeners(VRTK_SDKSetup component)
		{
		}

		[Address(RVA = "0x7712F4", Offset = "0x7712F4", VA = "0x7712F4", Slot = "5")]
		protected override void RemoveListeners(VRTK_SDKSetup component)
		{
		}

		[Address(RVA = "0x7713C4", Offset = "0x7713C4", VA = "0x7713C4")]
		private void Loaded(VRTK_SDKManager sender, VRTK_SDKSetup setup)
		{
		}

		[Address(RVA = "0x77143C", Offset = "0x77143C", VA = "0x77143C")]
		private void Unloaded(VRTK_SDKManager sender, VRTK_SDKSetup setup)
		{
		}

		[Address(RVA = "0x7714B4", Offset = "0x7714B4", VA = "0x7714B4")]
		public VRTK_SDKSetup_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658E74", Offset = "0x658E74")]
	public sealed class VRTK_SlingshotJump_UnityEvents : VRTK_UnityEvents<VRTK_SlingshotJump>
	{
		[Serializable]
		public sealed class SlingshotJumpEvent : UnityEvent<object>
		{
			[Address(RVA = "0x771788", Offset = "0x771788", VA = "0x771788")]
			public SlingshotJumpEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SlingshotJumpEvent OnSlingshotJumped;

		[Address(RVA = "0x77158C", Offset = "0x77158C", VA = "0x77158C", Slot = "4")]
		protected override void AddListeners(VRTK_SlingshotJump component)
		{
		}

		[Address(RVA = "0x77161C", Offset = "0x77161C", VA = "0x77161C", Slot = "5")]
		protected override void RemoveListeners(VRTK_SlingshotJump component)
		{
		}

		[Address(RVA = "0x7716AC", Offset = "0x7716AC", VA = "0x7716AC")]
		private void SlingshotJumped(object o)
		{
		}

		[Address(RVA = "0x77171C", Offset = "0x77171C", VA = "0x77171C")]
		public VRTK_SlingshotJump_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658EAC", Offset = "0x658EAC")]
	public sealed class VRTK_SnapDropZone_UnityEvents : VRTK_UnityEvents<VRTK_SnapDropZone>
	{
		[Serializable]
		public sealed class SnapDropZoneEvent : UnityEvent<object, SnapDropZoneEventArgs>
		{
			[Address(RVA = "0x771D08", Offset = "0x771D08", VA = "0x771D08")]
			public SnapDropZoneEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SnapDropZoneEvent OnObjectEnteredSnapDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SnapDropZoneEvent OnObjectExitedSnapDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SnapDropZoneEvent OnObjectSnappedToDropZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SnapDropZoneEvent OnObjectUnsnappedFromDropZone;

		[Address(RVA = "0x7717D8", Offset = "0x7717D8", VA = "0x7717D8", Slot = "4")]
		protected override void AddListeners(VRTK_SnapDropZone component)
		{
		}

		[Address(RVA = "0x771928", Offset = "0x771928", VA = "0x771928", Slot = "5")]
		protected override void RemoveListeners(VRTK_SnapDropZone component)
		{
		}

		[Address(RVA = "0x771A78", Offset = "0x771A78", VA = "0x771A78")]
		private void ObjectEnteredSnapDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x771AF0", Offset = "0x771AF0", VA = "0x771AF0")]
		private void ObjectExitedSnapDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x771B68", Offset = "0x771B68", VA = "0x771B68")]
		private void ObjectSnappedToDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x771BE0", Offset = "0x771BE0", VA = "0x771BE0")]
		private void ObjectUnsnappedFromDropZone(object o, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x771C58", Offset = "0x771C58", VA = "0x771C58")]
		public VRTK_SnapDropZone_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658EE4", Offset = "0x658EE4")]
	public sealed class VRTK_UIDraggableItem_UnityEvents : VRTK_UnityEvents<VRTK_UIDraggableItem>
	{
		[Serializable]
		public sealed class UIDraggableItemEvent : UnityEvent<object, UIDraggableItemEventArgs>
		{
			[Address(RVA = "0x772070", Offset = "0x772070", VA = "0x772070")]
			public UIDraggableItemEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIDraggableItemEvent OnDraggableItemDropped;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UIDraggableItemEvent OnDraggableItemReset;

		[Address(RVA = "0x771D58", Offset = "0x771D58", VA = "0x771D58", Slot = "4")]
		protected override void AddListeners(VRTK_UIDraggableItem component)
		{
		}

		[Address(RVA = "0x771E28", Offset = "0x771E28", VA = "0x771E28", Slot = "5")]
		protected override void RemoveListeners(VRTK_UIDraggableItem component)
		{
		}

		[Address(RVA = "0x771EF8", Offset = "0x771EF8", VA = "0x771EF8")]
		private void DraggableItemDropped(object o, UIDraggableItemEventArgs e)
		{
		}

		[Address(RVA = "0x771F70", Offset = "0x771F70", VA = "0x771F70")]
		private void DraggableItemReset(object o, UIDraggableItemEventArgs e)
		{
		}

		[Address(RVA = "0x771FE8", Offset = "0x771FE8", VA = "0x771FE8")]
		public VRTK_UIDraggableItem_UnityEvents()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658F1C", Offset = "0x658F1C")]
	public sealed class VRTK_UIPointer_UnityEvents : VRTK_UnityEvents<VRTK_UIPointer>
	{
		[Serializable]
		public sealed class UIPointerEvent : UnityEvent<object, UIPointerEventArgs>
		{
			[Address(RVA = "0x772D2C", Offset = "0x772D2C", VA = "0x772D2C")]
			public UIPointerEvent()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIPointerEvent OnUIPointerElementEnter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UIPointerEvent OnUIPointerElementExit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UIPointerEvent OnUIPointerElementClick;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UIPointerEvent OnUIPointerElementDragStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UIPointerEvent OnUIPointerElementDragEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnActivationButtonReleased;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRTK_ControllerEvents_UnityEvents.ControllerInteractionEvent OnSelectionButtonReleased;

		[Address(RVA = "0x7720C0", Offset = "0x7720C0", VA = "0x7720C0", Slot = "4")]
		protected override void AddListeners(VRTK_UIPointer component)
		{
		}

		[Address(RVA = "0x772358", Offset = "0x772358", VA = "0x772358", Slot = "5")]
		protected override void RemoveListeners(VRTK_UIPointer component)
		{
		}

		[Address(RVA = "0x7725F0", Offset = "0x7725F0", VA = "0x7725F0")]
		private void UIPointerElementEnter(object o, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0x7726A0", Offset = "0x7726A0", VA = "0x7726A0")]
		private void UIPointerElementExit(object o, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0x772750", Offset = "0x772750", VA = "0x772750")]
		private void UIPointerElementClick(object o, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0x772800", Offset = "0x772800", VA = "0x772800")]
		private void UIPointerElementDragStart(object o, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0x7728B0", Offset = "0x7728B0", VA = "0x7728B0")]
		private void UIPointerElementDragEnd(object o, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0x772960", Offset = "0x772960", VA = "0x772960")]
		private void ActivationButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x772A0C", Offset = "0x772A0C", VA = "0x772A0C")]
		private void ActivationButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x772AB8", Offset = "0x772AB8", VA = "0x772AB8")]
		private void SelectionButtonPressed(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x772B64", Offset = "0x772B64", VA = "0x772B64")]
		private void SelectionButtonReleased(object o, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x772C10", Offset = "0x772C10", VA = "0x772C10")]
		public VRTK_UIPointer_UnityEvents()
		{
		}
	}
	public abstract class VRTK_UnityEvents<T> : MonoBehaviour where T : Component
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T component;

		protected abstract void AddListeners(T component);

		protected abstract void RemoveListeners(T component);

		protected virtual void OnEnable()
		{
		}

		protected virtual void OnDisable()
		{
		}
	}
}
namespace VRTK.SecondaryControllerGrabActions
{
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658F54", Offset = "0x658F54")]
	public class VRTK_AxisScaleGrabAction : VRTK_BaseGrabAction
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C9B8", Offset = "0x66C9B8")]
		public float ungrabDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66C9F0", Offset = "0x66C9F0")]
		public Vector3State lockAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CA28", Offset = "0x66CA28")]
		public bool uniformScaling;

		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66CA60", Offset = "0x66CA60")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x66CA60", Offset = "0x66CA60")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x66CA60", Offset = "0x66CA60")]
		public bool lockXAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x66CAD0", Offset = "0x66CAD0")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x66CAD0", Offset = "0x66CAD0")]
		public bool lockYAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x66CB1C", Offset = "0x66CB1C")]
		[AttributeAttribute(Name = "ObsoleteInspectorAttribute", RVA = "0x66CB1C", Offset = "0x66CB1C")]
		public bool lockZAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 initialScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float initalLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected float initialScaleFactor;

		[Address(RVA = "0xD01470", Offset = "0xD01470", VA = "0xD01470", Slot = "4")]
		public override void Initialise(VRTK_InteractableObject currentGrabbdObject, VRTK_InteractGrab currentPrimaryGrabbingObject, VRTK_InteractGrab currentSecondaryGrabbingObject, Transform primaryGrabPoint, Transform secondaryGrabPoint)
		{
		}

		[Address(RVA = "0xD016E0", Offset = "0xD016E0", VA = "0xD016E0", Slot = "8")]
		public override void ProcessUpdate()
		{
		}

		[Address(RVA = "0xD016F4", Offset = "0xD016F4", VA = "0xD016F4", Slot = "9")]
		public override void ProcessFixedUpdate()
		{
		}

		[Address(RVA = "0xD01724", Offset = "0xD01724", VA = "0xD01724", Slot = "12")]
		protected virtual void ApplyScale(Vector3 newScale)
		{
		}

		[Address(RVA = "0xD01894", Offset = "0xD01894", VA = "0xD01894", Slot = "13")]
		protected virtual void NonUniformScale()
		{
		}

		[Address(RVA = "0xD01BE4", Offset = "0xD01BE4", VA = "0xD01BE4", Slot = "14")]
		protected virtual void UniformScale()
		{
		}

		[Address(RVA = "0xD01D5C", Offset = "0xD01D5C", VA = "0xD01D5C", Slot = "15")]
		protected virtual float CalculateAxisScale(float centerPosition, float initialPosition, float currentPosition)
		{
			return default(float);
		}

		[Address(RVA = "0xD01D70", Offset = "0xD01D70", VA = "0xD01D70")]
		public VRTK_AxisScaleGrabAction()
		{
		}
	}
	public abstract class VRTK_BaseGrabAction : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_InteractableObject grabbedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_InteractGrab primaryGrabbingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_InteractGrab secondaryGrabbingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform primaryInitialGrabPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform secondaryInitialGrabPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool initialised;

		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		protected bool isActionable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		protected bool isSwappable;

		[Address(RVA = "0xD016C8", Offset = "0xD016C8", VA = "0xD016C8", Slot = "4")]
		public virtual void Initialise(VRTK_InteractableObject currentGrabbdObject, VRTK_InteractGrab currentPrimaryGrabbingObject, VRTK_InteractGrab currentSecondaryGrabbingObject, Transform primaryGrabPoint, Transform secondaryGrabPoint)
		{
		}

		[Address(RVA = "0xD01DC0", Offset = "0xD01DC0", VA = "0xD01DC0", Slot = "5")]
		public virtual void ResetAction()
		{
		}

		[Address(RVA = "0xD01DD8", Offset = "0xD01DD8", VA = "0xD01DD8", Slot = "6")]
		public virtual bool IsActionable()
		{
			return default(bool);
		}

		[Address(RVA = "0xD01DE0", Offset = "0xD01DE0", VA = "0xD01DE0", Slot = "7")]
		public virtual bool IsSwappable()
		{
			return default(bool);
		}

		[Address(RVA = "0xD016F0", Offset = "0xD016F0", VA = "0xD016F0", Slot = "8")]
		public virtual void ProcessUpdate()
		{
		}

		[Address(RVA = "0xD01720", Offset = "0xD01720", VA = "0xD01720", Slot = "9")]
		public virtual void ProcessFixedUpdate()
		{
		}

		[Address(RVA = "0xD01DE8", Offset = "0xD01DE8", VA = "0xD01DE8", Slot = "10")]
		public virtual void OnDropAction()
		{
		}

		[Address(RVA = "0xD01DEC", Offset = "0xD01DEC", VA = "0xD01DEC", Slot = "11")]
		protected virtual void CheckForceStopDistance(float ungrabDistance)
		{
		}

		[Address(RVA = "0xD01DB0", Offset = "0xD01DB0", VA = "0xD01DB0")]
		protected VRTK_BaseGrabAction()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658F8C", Offset = "0x658F8C")]
	public class VRTK_ControlDirectionGrabAction : VRTK_BaseGrabAction
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B438", Offset = "0x65B438")]
		private sealed class <RealignOnRelease>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ControlDirectionGrabAction <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <elapsedTime>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xD02D04", Offset = "0xD02D04", VA = "0xD02D04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xD02D74", Offset = "0xD02D74", VA = "0xD02D74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xD021FC", Offset = "0xD021FC", VA = "0xD021FC")]
			[DebuggerHidden]
			public <RealignOnRelease>d__13(int <>1__state)
			{
			}

			[Address(RVA = "0xD02A5C", Offset = "0xD02A5C", VA = "0xD02A5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xD02A60", Offset = "0xD02A60", VA = "0xD02A60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xD02D0C", Offset = "0xD02D0C", VA = "0xD02D0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CB68", Offset = "0x66CB68")]
		public float ungrabDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CBA0", Offset = "0x66CBA0")]
		public float releaseSnapSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CBD8", Offset = "0x66CBD8")]
		public bool lockZRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 initialPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected Quaternion initialRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Quaternion releaseRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Coroutine snappingOnRelease;

		[Address(RVA = "0xD01F44", Offset = "0xD01F44", VA = "0xD01F44", Slot = "4")]
		public override void Initialise(VRTK_InteractableObject currentGrabbdObject, VRTK_InteractGrab currentPrimaryGrabbingObject, VRTK_InteractGrab currentSecondaryGrabbingObject, Transform primaryGrabPoint, Transform secondaryGrabPoint)
		{
		}

		[Address(RVA = "0xD01FFC", Offset = "0xD01FFC", VA = "0xD01FFC", Slot = "5")]
		public override void ResetAction()
		{
		}

		[Address(RVA = "0xD0211C", Offset = "0xD0211C", VA = "0xD0211C", Slot = "10")]
		public override void OnDropAction()
		{
		}

		[Address(RVA = "0xD02128", Offset = "0xD02128", VA = "0xD02128", Slot = "8")]
		public override void ProcessUpdate()
		{
		}

		[Address(RVA = "0xD02138", Offset = "0xD02138", VA = "0xD02138", Slot = "9")]
		public override void ProcessFixedUpdate()
		{
		}

		[Address(RVA = "0xD02154", Offset = "0xD02154", VA = "0xD02154", Slot = "12")]
		protected virtual void StopRealignOnRelease()
		{
		}

		[Address(RVA = "0xD02188", Offset = "0xD02188", VA = "0xD02188", Slot = "13")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680764", Offset = "0x680764")]
		protected virtual IEnumerator RealignOnRelease()
		{
			return null;
		}

		[Address(RVA = "0xD02228", Offset = "0xD02228", VA = "0xD02228", Slot = "14")]
		protected virtual void AimObject()
		{
		}

		[Address(RVA = "0xD0259C", Offset = "0xD0259C", VA = "0xD0259C", Slot = "15")]
		protected virtual void ZLockedAim()
		{
		}

		[Address(RVA = "0xD02A38", Offset = "0xD02A38", VA = "0xD02A38")]
		public VRTK_ControlDirectionGrabAction()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658FC4", Offset = "0x658FC4")]
	public class VRTK_SwapControllerGrabAction : VRTK_BaseGrabAction
	{
		[Address(RVA = "0xD02D7C", Offset = "0xD02D7C", VA = "0xD02D7C", Slot = "12")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0xD02D88", Offset = "0xD02D88", VA = "0xD02D88")]
		public VRTK_SwapControllerGrabAction()
		{
		}
	}
}
namespace VRTK.GrabAttachMechanics
{
	public abstract class VRTK_BaseGrabAttach : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66CC10", Offset = "0x66CC10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CC10", Offset = "0x66CC10")]
		public bool precisionGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CC80", Offset = "0x66CC80")]
		public Transform rightSnapHandle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CCB8", Offset = "0x66CCB8")]
		public Transform leftSnapHandle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CCF0", Offset = "0x66CCF0")]
		public bool throwVelocityWithAttachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CD28", Offset = "0x66CD28")]
		public float throwMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CD60", Offset = "0x66CD60")]
		public float onGrabCollisionDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool tracked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		protected bool climbable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		protected bool kinematic;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected GameObject grabbedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody grabbedObjectRigidBody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_InteractableObject grabbedObjectScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Transform trackPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Transform grabbedSnapHandle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform initialAttachPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Rigidbody controllerAttachPoint;

		[Address(RVA = "0xC0E3A4", Offset = "0xC0E3A4", VA = "0xC0E3A4", Slot = "4")]
		public virtual bool IsTracked()
		{
			return default(bool);
		}

		[Address(RVA = "0xC0E3AC", Offset = "0xC0E3AC", VA = "0xC0E3AC", Slot = "5")]
		public virtual bool IsClimbable()
		{
			return default(bool);
		}

		[Address(RVA = "0xC0E3B4", Offset = "0xC0E3B4", VA = "0xC0E3B4", Slot = "6")]
		public virtual bool IsKinematic()
		{
			return default(bool);
		}

		[Address(RVA = "0xC0E3BC", Offset = "0xC0E3BC", VA = "0xC0E3BC", Slot = "7")]
		public virtual bool ValidGrab(Rigidbody checkAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC0E3C4", Offset = "0xC0E3C4", VA = "0xC0E3C4", Slot = "8")]
		public virtual void SetTrackPoint(Transform givenTrackPoint)
		{
		}

		[Address(RVA = "0xC0E3CC", Offset = "0xC0E3CC", VA = "0xC0E3CC", Slot = "9")]
		public virtual void SetInitialAttachPoint(Transform givenInitialAttachPoint)
		{
		}

		[Address(RVA = "0xC0E3D4", Offset = "0xC0E3D4", VA = "0xC0E3D4", Slot = "10")]
		public virtual bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC0E55C", Offset = "0xC0E55C", VA = "0xC0E55C", Slot = "11")]
		public virtual void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC0E570", Offset = "0xC0E570", VA = "0xC0E570", Slot = "12")]
		public virtual Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Address(RVA = "0xC0E57C", Offset = "0xC0E57C", VA = "0xC0E57C", Slot = "13")]
		public virtual void ProcessUpdate()
		{
		}

		[Address(RVA = "0xC0E580", Offset = "0xC0E580", VA = "0xC0E580", Slot = "14")]
		public virtual void ProcessFixedUpdate()
		{
		}

		[Address(RVA = "0xC0E584", Offset = "0xC0E584", VA = "0xC0E584", Slot = "15")]
		public virtual void ResetState()
		{
		}

		[Address(RVA = "0xC0E594", Offset = "0xC0E594", VA = "0xC0E594", Slot = "16")]
		protected virtual void Awake()
		{
		}

		protected abstract void Initialise();

		[Address(RVA = "0xC0E5A4", Offset = "0xC0E5A4", VA = "0xC0E5A4", Slot = "18")]
		protected virtual Rigidbody ReleaseFromController(bool applyGrabbingObjectVelocity)
		{
			return null;
		}

		[Address(RVA = "0xC0E5AC", Offset = "0xC0E5AC", VA = "0xC0E5AC", Slot = "19")]
		protected virtual void ForceReleaseGrab()
		{
		}

		[Address(RVA = "0xC0E700", Offset = "0xC0E700", VA = "0xC0E700", Slot = "20")]
		protected virtual void ReleaseObject(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC0E7C8", Offset = "0xC0E7C8", VA = "0xC0E7C8", Slot = "21")]
		protected virtual void ThrowReleasedObject(Rigidbody objectRigidbody)
		{
		}

		[Address(RVA = "0xC0EE30", Offset = "0xC0EE30", VA = "0xC0EE30", Slot = "22")]
		protected virtual Transform GetSnapHandle(GameObject grabbingObject)
		{
			return null;
		}

		[Address(RVA = "0xC0EFCC", Offset = "0xC0EFCC", VA = "0xC0EFCC", Slot = "23")]
		protected virtual void ProcessSDKTransformModify(VRTK_ControllerReference controllerReference)
		{
		}

		[Address(RVA = "0xC0F130", Offset = "0xC0F130", VA = "0xC0F130")]
		protected VRTK_BaseGrabAttach()
		{
		}
	}
	public abstract class VRTK_BaseJointGrabAttach : VRTK_BaseGrabAttach
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66CD98", Offset = "0x66CD98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CD98", Offset = "0x66CD98")]
		public bool destroyImmediatelyOnThrow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Joint givenJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Joint controllerAttachJoint;

		[Address(RVA = "0xC0F140", Offset = "0xC0F140", VA = "0xC0F140", Slot = "7")]
		public override bool ValidGrab(Rigidbody checkAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC0F220", Offset = "0xC0F220", VA = "0xC0F220", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC0F26C", Offset = "0xC0F26C", VA = "0xC0F26C", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC0F2AC", Offset = "0xC0F2AC", VA = "0xC0F2AC", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC0F2BC", Offset = "0xC0F2BC", VA = "0xC0F2BC", Slot = "18")]
		protected override Rigidbody ReleaseFromController(bool applyGrabbingObjectVelocity)
		{
			return null;
		}

		[Address(RVA = "0xC0F390", Offset = "0xC0F390", VA = "0xC0F390", Slot = "24")]
		protected virtual void OnJointBreak(float force)
		{
		}

		[Address(RVA = "0xC0F3A0", Offset = "0xC0F3A0", VA = "0xC0F3A0", Slot = "25")]
		protected virtual void CreateJoint(GameObject obj)
		{
		}

		[Address(RVA = "0xC0F52C", Offset = "0xC0F52C", VA = "0xC0F52C", Slot = "26")]
		protected virtual void DestroyJoint(bool withDestroyImmediate, bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC0F5FC", Offset = "0xC0F5FC", VA = "0xC0F5FC", Slot = "27")]
		protected virtual void SetSnappedObjectPosition(GameObject obj)
		{
		}

		[Address(RVA = "0xC0F960", Offset = "0xC0F960", VA = "0xC0F960", Slot = "28")]
		protected virtual void SnapObjectToGrabToController(GameObject obj)
		{
		}

		[Address(RVA = "0xC0F9B4", Offset = "0xC0F9B4", VA = "0xC0F9B4")]
		protected VRTK_BaseJointGrabAttach()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x658FFC", Offset = "0x658FFC")]
	public class VRTK_ChildOfControllerGrabAttach : VRTK_BaseGrabAttach
	{
		[Address(RVA = "0xC0F9CC", Offset = "0xC0F9CC", VA = "0xC0F9CC", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC0FA3C", Offset = "0xC0FA3C", VA = "0xC0FA3C", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC0FA7C", Offset = "0xC0FA7C", VA = "0xC0FA7C", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC0FA8C", Offset = "0xC0FA8C", VA = "0xC0FA8C", Slot = "24")]
		protected virtual void SetSnappedObjectPosition(GameObject obj)
		{
		}

		[Address(RVA = "0xC0FDF0", Offset = "0xC0FDF0", VA = "0xC0FDF0", Slot = "25")]
		protected virtual void SnapObjectToGrabToController(GameObject obj)
		{
		}

		[Address(RVA = "0xC0FE8C", Offset = "0xC0FE8C", VA = "0xC0FE8C")]
		public VRTK_ChildOfControllerGrabAttach()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x659034", Offset = "0x659034")]
	public class VRTK_ClimbableGrabAttach : VRTK_BaseGrabAttach
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66CE08", Offset = "0x66CE08")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CE08", Offset = "0x66CE08")]
		public bool useObjectRotation;

		[Address(RVA = "0xC0FE9C", Offset = "0xC0FE9C", VA = "0xC0FE9C", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC0FEB0", Offset = "0xC0FEB0", VA = "0xC0FEB0")]
		public VRTK_ClimbableGrabAttach()
		{
		}
	}
	public struct ControlAnimationGrabAttachEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float currentFrame;
	}
	public delegate void ControlAnimationGrabAttachEventHandler(object sender, ControlAnimationGrabAttachEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65906C", Offset = "0x65906C")]
	public class VRTK_ControlAnimationGrabAttach : VRTK_BaseGrabAttach
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B448", Offset = "0x65B448")]
		private sealed class <ResetTimeline>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ControlAnimationGrabAttach <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float frame;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xC115A8", Offset = "0xC115A8", VA = "0xC115A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xC11618", Offset = "0xC11618", VA = "0xC11618", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xC11350", Offset = "0xC11350", VA = "0xC11350")]
			[DebuggerHidden]
			public <ResetTimeline>d__37(int <>1__state)
			{
			}

			[Address(RVA = "0xC1149C", Offset = "0xC1149C", VA = "0xC1149C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xC114A0", Offset = "0xC114A0", VA = "0xC114A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xC115B0", Offset = "0xC115B0", VA = "0xC115B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CE78", Offset = "0x66CE78")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66CEB0", Offset = "0x66CEB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CEB0", Offset = "0x66CEB0")]
		public Animation animationTimeline;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CF20", Offset = "0x66CF20")]
		public Animator animatorTimeline;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CF58", Offset = "0x66CF58")]
		public float maxFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CF90", Offset = "0x66CF90")]
		public float distanceMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66CFC8", Offset = "0x66CFC8")]
		public bool rewindOnRelease;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D000", Offset = "0x66D000")]
		public float rewindSpeedMultplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float animationSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float frameOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float currentFrame;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Coroutine resetTimelineRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool atEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected string animationName;

		public event ControlAnimationGrabAttachEventHandler AnimationFrameAtStart
		{
			[Address(RVA = "0xC0FEC0", Offset = "0xC0FEC0", VA = "0xC0FEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6807C8", Offset = "0x6807C8")]
			add
			{
			}
			[Address(RVA = "0xC0FFAC", Offset = "0xC0FFAC", VA = "0xC0FFAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6807D8", Offset = "0x6807D8")]
			remove
			{
			}
		}

		public event ControlAnimationGrabAttachEventHandler AnimationFrameAtEnd
		{
			[Address(RVA = "0xC10098", Offset = "0xC10098", VA = "0xC10098")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6807E8", Offset = "0x6807E8")]
			add
			{
			}
			[Address(RVA = "0xC10184", Offset = "0xC10184", VA = "0xC10184")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6807F8", Offset = "0x6807F8")]
			remove
			{
			}
		}

		public event ControlAnimationGrabAttachEventHandler AnimationFrameChanged
		{
			[Address(RVA = "0xC10270", Offset = "0xC10270", VA = "0xC10270")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680808", Offset = "0x680808")]
			add
			{
			}
			[Address(RVA = "0xC1035C", Offset = "0xC1035C", VA = "0xC1035C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680818", Offset = "0x680818")]
			remove
			{
			}
		}

		[Address(RVA = "0xC10448", Offset = "0xC10448", VA = "0xC10448", Slot = "24")]
		public virtual void OnAnimationFrameChanged(ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC10470", Offset = "0xC10470", VA = "0xC10470", Slot = "25")]
		public virtual void OnAnimationFrameAtStart(ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC10498", Offset = "0xC10498", VA = "0xC10498", Slot = "26")]
		public virtual void OnAnimationFrameAtEnd(ControlAnimationGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC104C0", Offset = "0xC104C0", VA = "0xC104C0", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC10518", Offset = "0xC10518", VA = "0xC10518", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC1054C", Offset = "0xC1054C", VA = "0xC1054C", Slot = "12")]
		public override Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Address(RVA = "0xC107D0", Offset = "0xC107D0", VA = "0xC107D0", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Address(RVA = "0xC10A2C", Offset = "0xC10A2C", VA = "0xC10A2C", Slot = "27")]
		public virtual void SetFrame(float frame)
		{
		}

		[Address(RVA = "0xC10B70", Offset = "0xC10B70", VA = "0xC10B70", Slot = "28")]
		public virtual void RewindAnimation()
		{
		}

		[Address(RVA = "0xC10BC8", Offset = "0xC10BC8", VA = "0xC10BC8", Slot = "29")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xC10BD8", Offset = "0xC10BD8", VA = "0xC10BD8", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC10BF4", Offset = "0xC10BF4", VA = "0xC10BF4", Slot = "30")]
		protected virtual void InitTimeline()
		{
		}

		[Address(RVA = "0xC11000", Offset = "0xC11000", VA = "0xC11000", Slot = "31")]
		protected virtual void SetTimelineSpeed(float speed)
		{
		}

		[Address(RVA = "0xC1113C", Offset = "0xC1113C", VA = "0xC1113C", Slot = "32")]
		protected virtual void SetTimelinePosition(float framePosition)
		{
		}

		[Address(RVA = "0xC112A4", Offset = "0xC112A4", VA = "0xC112A4", Slot = "33")]
		protected virtual void CancelResetTimeline()
		{
		}

		[Address(RVA = "0xC112B8", Offset = "0xC112B8", VA = "0xC112B8", Slot = "34")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680828", Offset = "0x680828")]
		protected virtual IEnumerator ResetTimeline(float frame)
		{
			return null;
		}

		[Address(RVA = "0xC1137C", Offset = "0xC1137C", VA = "0xC1137C", Slot = "35")]
		protected virtual ControlAnimationGrabAttachEventArgs SetEventPayload(float frame)
		{
			return default(ControlAnimationGrabAttachEventArgs);
		}

		[Address(RVA = "0xC11430", Offset = "0xC11430", VA = "0xC11430")]
		public VRTK_ControlAnimationGrabAttach()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6590A4", Offset = "0x6590A4")]
	public class VRTK_CustomJointGrabAttach : VRTK_BaseJointGrabAttach
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D068", Offset = "0x66D068")]
		public Joint customJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GameObject jointHolder;

		[Address(RVA = "0xC11620", Offset = "0xC11620", VA = "0xC11620", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC1163C", Offset = "0xC1163C", VA = "0xC1163C", Slot = "25")]
		protected override void CreateJoint(GameObject obj)
		{
		}

		[Address(RVA = "0xC11990", Offset = "0xC11990", VA = "0xC11990", Slot = "26")]
		protected override void DestroyJoint(bool withDestroyImmediate, bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC1199C", Offset = "0xC1199C", VA = "0xC1199C", Slot = "29")]
		protected virtual void CopyCustomJoint()
		{
		}

		[Address(RVA = "0xC11BF0", Offset = "0xC11BF0", VA = "0xC11BF0")]
		public VRTK_CustomJointGrabAttach()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6590DC", Offset = "0x6590DC")]
	public class VRTK_FixedJointGrabAttach : VRTK_BaseJointGrabAttach
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D0A0", Offset = "0x66D0A0")]
		public float breakForce;

		[Address(RVA = "0xC11C08", Offset = "0xC11C08", VA = "0xC11C08", Slot = "25")]
		protected override void CreateJoint(GameObject obj)
		{
		}

		[Address(RVA = "0xC11CE4", Offset = "0xC11CE4", VA = "0xC11CE4")]
		public VRTK_FixedJointGrabAttach()
		{
		}
	}
	public struct MoveTransformGrabAttachEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 position;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 normalizedPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 currentDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 originDirection;
	}
	public delegate void MoveTransformGrabAttachEventHandler(object sender, MoveTransformGrabAttachEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x659114", Offset = "0x659114")]
	public class VRTK_MoveTransformGrabAttach : VRTK_BaseGrabAttach
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B458", Offset = "0x65B458")]
		private sealed class <MoveToPosition>d__93 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_MoveTransformGrabAttach <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float speed;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xC15F10", Offset = "0xC15F10", VA = "0xC15F10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xC15F80", Offset = "0xC15F80", VA = "0xC15F80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xC14CC8", Offset = "0xC14CC8", VA = "0xC14CC8")]
			[DebuggerHidden]
			public <MoveToPosition>d__93(int <>1__state)
			{
			}

			[Address(RVA = "0xC15CE8", Offset = "0xC15CE8", VA = "0xC15CE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xC15CEC", Offset = "0xC15CEC", VA = "0xC15CEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xC15F18", Offset = "0xC15F18", VA = "0xC15F18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B468", Offset = "0x65B468")]
		private sealed class <DeceleratePosition>d__94 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_MoveTransformGrabAttach <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xC15C70", Offset = "0xC15C70", VA = "0xC15C70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xC15CE0", Offset = "0xC15CE0", VA = "0xC15CE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xC14D68", Offset = "0xC14D68", VA = "0xC14D68")]
			[DebuggerHidden]
			public <DeceleratePosition>d__94(int <>1__state)
			{
			}

			[Address(RVA = "0xC15AAC", Offset = "0xC15AAC", VA = "0xC15AAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xC15AB0", Offset = "0xC15AB0", VA = "0xC15AB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xC15C78", Offset = "0xC15C78", VA = "0xC15C78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D0D8", Offset = "0x66D0D8")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66D110", Offset = "0x66D110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D110", Offset = "0x66D110")]
		public float trackingSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D170", Offset = "0x66D170")]
		public bool forceKinematicOnGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D1A8", Offset = "0x66D1A8")]
		public float releaseDecelerationDamper;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D1E0", Offset = "0x66D1E0")]
		public float resetToOrignOnReleaseSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66D218", Offset = "0x66D218")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D218", Offset = "0x66D218")]
		public Limits2D xAxisLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D278", Offset = "0x66D278")]
		public Limits2D yAxisLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D2B0", Offset = "0x66D2B0")]
		public Limits2D zAxisLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D2E8", Offset = "0x66D2E8")]
		public float minMaxThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D320", Offset = "0x66D320")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66D320", Offset = "0x66D320")]
		public float minMaxNormalizedThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x66D378", Offset = "0x66D378")]
		public Vector3 localOrigin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected bool previousKinematicState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected bool[] limitsReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected Limits2D xOriginLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected Limits2D yOriginLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected Limits2D zOriginLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected Vector3 previousPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		protected Vector3 movementVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected Coroutine resetPositionRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected Coroutine deceleratePositionRoutine;

		public event MoveTransformGrabAttachEventHandler TransformPositionChanged
		{
			[Address(RVA = "0xC11D08", Offset = "0xC11D08", VA = "0xC11D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68088C", Offset = "0x68088C")]
			add
			{
			}
			[Address(RVA = "0xC11DF4", Offset = "0xC11DF4", VA = "0xC11DF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68089C", Offset = "0x68089C")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler XAxisMinLimitReached
		{
			[Address(RVA = "0xC11EE0", Offset = "0xC11EE0", VA = "0xC11EE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6808AC", Offset = "0x6808AC")]
			add
			{
			}
			[Address(RVA = "0xC11FCC", Offset = "0xC11FCC", VA = "0xC11FCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6808BC", Offset = "0x6808BC")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler XAxisMinLimitExited
		{
			[Address(RVA = "0xC120B8", Offset = "0xC120B8", VA = "0xC120B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6808CC", Offset = "0x6808CC")]
			add
			{
			}
			[Address(RVA = "0xC121A4", Offset = "0xC121A4", VA = "0xC121A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6808DC", Offset = "0x6808DC")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler XAxisMaxLimitReached
		{
			[Address(RVA = "0xC12290", Offset = "0xC12290", VA = "0xC12290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6808EC", Offset = "0x6808EC")]
			add
			{
			}
			[Address(RVA = "0xC1237C", Offset = "0xC1237C", VA = "0xC1237C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6808FC", Offset = "0x6808FC")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler XAxisMaxLimitExited
		{
			[Address(RVA = "0xC12468", Offset = "0xC12468", VA = "0xC12468")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68090C", Offset = "0x68090C")]
			add
			{
			}
			[Address(RVA = "0xC12554", Offset = "0xC12554", VA = "0xC12554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68091C", Offset = "0x68091C")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler YAxisMinLimitReached
		{
			[Address(RVA = "0xC12640", Offset = "0xC12640", VA = "0xC12640")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68092C", Offset = "0x68092C")]
			add
			{
			}
			[Address(RVA = "0xC1272C", Offset = "0xC1272C", VA = "0xC1272C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68093C", Offset = "0x68093C")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler YAxisMinLimitExited
		{
			[Address(RVA = "0xC12818", Offset = "0xC12818", VA = "0xC12818")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68094C", Offset = "0x68094C")]
			add
			{
			}
			[Address(RVA = "0xC12904", Offset = "0xC12904", VA = "0xC12904")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68095C", Offset = "0x68095C")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler YAxisMaxLimitReached
		{
			[Address(RVA = "0xC129F0", Offset = "0xC129F0", VA = "0xC129F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68096C", Offset = "0x68096C")]
			add
			{
			}
			[Address(RVA = "0xC12ADC", Offset = "0xC12ADC", VA = "0xC12ADC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68097C", Offset = "0x68097C")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler YAxisMaxLimitExited
		{
			[Address(RVA = "0xC12BC8", Offset = "0xC12BC8", VA = "0xC12BC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68098C", Offset = "0x68098C")]
			add
			{
			}
			[Address(RVA = "0xC12CB8", Offset = "0xC12CB8", VA = "0xC12CB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68099C", Offset = "0x68099C")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler ZAxisMinLimitReached
		{
			[Address(RVA = "0xC12DA8", Offset = "0xC12DA8", VA = "0xC12DA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6809AC", Offset = "0x6809AC")]
			add
			{
			}
			[Address(RVA = "0xC12E98", Offset = "0xC12E98", VA = "0xC12E98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6809BC", Offset = "0x6809BC")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler ZAxisMinLimitExited
		{
			[Address(RVA = "0xC12F88", Offset = "0xC12F88", VA = "0xC12F88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6809CC", Offset = "0x6809CC")]
			add
			{
			}
			[Address(RVA = "0xC13078", Offset = "0xC13078", VA = "0xC13078")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6809DC", Offset = "0x6809DC")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler ZAxisMaxLimitReached
		{
			[Address(RVA = "0xC13168", Offset = "0xC13168", VA = "0xC13168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6809EC", Offset = "0x6809EC")]
			add
			{
			}
			[Address(RVA = "0xC13258", Offset = "0xC13258", VA = "0xC13258")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6809FC", Offset = "0x6809FC")]
			remove
			{
			}
		}

		public event MoveTransformGrabAttachEventHandler ZAxisMaxLimitExited
		{
			[Address(RVA = "0xC13348", Offset = "0xC13348", VA = "0xC13348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680A0C", Offset = "0x680A0C")]
			add
			{
			}
			[Address(RVA = "0xC13438", Offset = "0xC13438", VA = "0xC13438")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680A1C", Offset = "0x680A1C")]
			remove
			{
			}
		}

		[Address(RVA = "0xC13528", Offset = "0xC13528", VA = "0xC13528", Slot = "24")]
		public virtual void OnTransformPositionChanged(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13578", Offset = "0xC13578", VA = "0xC13578", Slot = "25")]
		public virtual void OnXAxisMinLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC135C8", Offset = "0xC135C8", VA = "0xC135C8", Slot = "26")]
		public virtual void OnXAxisMinLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13618", Offset = "0xC13618", VA = "0xC13618", Slot = "27")]
		public virtual void OnXAxisMaxLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13668", Offset = "0xC13668", VA = "0xC13668", Slot = "28")]
		public virtual void OnXAxisMaxLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC136B8", Offset = "0xC136B8", VA = "0xC136B8", Slot = "29")]
		public virtual void OnYAxisMinLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13708", Offset = "0xC13708", VA = "0xC13708", Slot = "30")]
		public virtual void OnYAxisMinLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13758", Offset = "0xC13758", VA = "0xC13758", Slot = "31")]
		public virtual void OnYAxisMaxLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC137A8", Offset = "0xC137A8", VA = "0xC137A8", Slot = "32")]
		public virtual void OnYAxisMaxLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC137F8", Offset = "0xC137F8", VA = "0xC137F8", Slot = "33")]
		public virtual void OnZAxisMinLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13848", Offset = "0xC13848", VA = "0xC13848", Slot = "34")]
		public virtual void OnZAxisMinLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13898", Offset = "0xC13898", VA = "0xC13898", Slot = "35")]
		public virtual void OnZAxisMaxLimitReached(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC138E8", Offset = "0xC138E8", VA = "0xC138E8", Slot = "36")]
		public virtual void OnZAxisMaxLimitExited(MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC13938", Offset = "0xC13938", VA = "0xC13938", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC13A84", Offset = "0xC13A84", VA = "0xC13A84", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC13BB0", Offset = "0xC13BB0", VA = "0xC13BB0", Slot = "12")]
		public override Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Address(RVA = "0xC13D44", Offset = "0xC13D44", VA = "0xC13D44", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Address(RVA = "0xC141AC", Offset = "0xC141AC", VA = "0xC141AC", Slot = "37")]
		public virtual Vector3 GetPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC14218", Offset = "0xC14218", VA = "0xC14218", Slot = "38")]
		public virtual Vector3 GetNormalizedPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC14254", Offset = "0xC14254", VA = "0xC14254", Slot = "39")]
		public virtual Vector3 GetCurrentDirection()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC142C4", Offset = "0xC142C4", VA = "0xC142C4", Slot = "40")]
		public virtual Vector3 GetDirectionFromOrigin()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC14330", Offset = "0xC14330", VA = "0xC14330", Slot = "41")]
		public virtual void SetCurrentPosition(Vector3 newPosition, float speed)
		{
		}

		[Address(RVA = "0xC143F4", Offset = "0xC143F4", VA = "0xC143F4", Slot = "42")]
		public virtual void ResetPosition()
		{
		}

		[Address(RVA = "0xC14410", Offset = "0xC14410", VA = "0xC14410", Slot = "43")]
		public virtual Limits2D[] GetWorldLimits()
		{
			return null;
		}

		[Address(RVA = "0xC14564", Offset = "0xC14564", VA = "0xC14564", Slot = "44")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xC14574", Offset = "0xC14574", VA = "0xC14574", Slot = "45")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xC145B0", Offset = "0xC145B0", VA = "0xC145B0", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC145CC", Offset = "0xC145CC", VA = "0xC145CC", Slot = "46")]
		protected virtual void SetupOrigin()
		{
		}

		[Address(RVA = "0xC14770", Offset = "0xC14770", VA = "0xC14770", Slot = "47")]
		protected virtual float ClampAxis(Limits2D limits, float axisValue)
		{
			return default(float);
		}

		[Address(RVA = "0xC1482C", Offset = "0xC1482C", VA = "0xC1482C", Slot = "48")]
		protected virtual void ClampPosition()
		{
		}

		[Address(RVA = "0xC1497C", Offset = "0xC1497C", VA = "0xC1497C", Slot = "49")]
		protected virtual Vector3 NormalizePosition(Vector3 givenHeading)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC14A90", Offset = "0xC14A90", VA = "0xC14A90", Slot = "50")]
		protected virtual void CancelResetPosition()
		{
		}

		[Address(RVA = "0xC14AA4", Offset = "0xC14AA4", VA = "0xC14AA4", Slot = "51")]
		protected virtual void CancelDeceleratePosition()
		{
		}

		[Address(RVA = "0xC14AB8", Offset = "0xC14AB8", VA = "0xC14AB8", Slot = "52")]
		protected virtual void UpdatePosition(Vector3 newPosition, bool additive, bool forceClamp = true)
		{
		}

		[Address(RVA = "0xC14C08", Offset = "0xC14C08", VA = "0xC14C08", Slot = "53")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680A2C", Offset = "0x680A2C")]
		protected virtual IEnumerator MoveToPosition(Vector3 targetPosition, float speed)
		{
			return null;
		}

		[Address(RVA = "0xC14CF4", Offset = "0xC14CF4", VA = "0xC14CF4", Slot = "54")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680A90", Offset = "0x680A90")]
		protected virtual IEnumerator DeceleratePosition()
		{
			return null;
		}

		[Address(RVA = "0xC14D94", Offset = "0xC14D94", VA = "0xC14D94", Slot = "55")]
		protected virtual void CheckAxisLimits()
		{
		}

		[Address(RVA = "0xC14E00", Offset = "0xC14E00", VA = "0xC14E00", Slot = "56")]
		protected virtual Limits2D FixAxisLimits(Limits2D givenLimits)
		{
			return null;
		}

		[Address(RVA = "0xC14EB8", Offset = "0xC14EB8", VA = "0xC14EB8", Slot = "57")]
		protected virtual void EmitEvents()
		{
		}

		[Address(RVA = "0xC15890", Offset = "0xC15890", VA = "0xC15890", Slot = "58")]
		protected virtual MoveTransformGrabAttachEventArgs SetEventPayload()
		{
			return default(MoveTransformGrabAttachEventArgs);
		}

		[Address(RVA = "0xC159F4", Offset = "0xC159F4", VA = "0xC159F4")]
		public VRTK_MoveTransformGrabAttach()
		{
		}
	}
	public struct RotateTransformGrabAttachEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject interactingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float currentAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float normalizedAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 rotationSpeed;
	}
	public delegate void RotateTransformGrabAttachEventHandler(object sender, RotateTransformGrabAttachEventArgs e);
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65914C", Offset = "0x65914C")]
	public class VRTK_RotateTransformGrabAttach : VRTK_BaseGrabAttach
	{
		public enum RotationAxis
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			xAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			yAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			zAxis
		}

		public enum RotationType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			FollowAttachPoint,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			FollowLongitudinalAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			FollowLateralAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			FollowPerpendicularAxis
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B478", Offset = "0x65B478")]
		private sealed class <RotateToAngle>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_RotateTransformGrabAttach <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetAngle;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float rotationSpeed;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3 <previousRotation>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xC18BC8", Offset = "0xC18BC8", VA = "0xC18BC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xC18C38", Offset = "0xC18C38", VA = "0xC18C38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xC180A4", Offset = "0xC180A4", VA = "0xC180A4")]
			[DebuggerHidden]
			public <RotateToAngle>d__61(int <>1__state)
			{
			}

			[Address(RVA = "0xC18994", Offset = "0xC18994", VA = "0xC18994", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xC18998", Offset = "0xC18998", VA = "0xC18998", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xC18BD0", Offset = "0xC18BD0", VA = "0xC18BD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B488", Offset = "0x65B488")]
		private sealed class <DecelerateRotation>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_RotateTransformGrabAttach <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xC1891C", Offset = "0xC1891C", VA = "0xC1891C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xC1898C", Offset = "0xC1898C", VA = "0xC1898C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xC18144", Offset = "0xC18144", VA = "0xC18144")]
			[DebuggerHidden]
			public <DecelerateRotation>d__62(int <>1__state)
			{
			}

			[Address(RVA = "0xC1878C", Offset = "0xC1878C", VA = "0xC1878C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xC18790", Offset = "0xC18790", VA = "0xC18790", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xC18924", Offset = "0xC18924", VA = "0xC18924", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66D458", Offset = "0x66D458")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D458", Offset = "0x66D458")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D4B8", Offset = "0x66D4B8")]
		public float originDeadzone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66D4F0", Offset = "0x66D4F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D4F0", Offset = "0x66D4F0")]
		public RotationAxis rotateAround;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D550", Offset = "0x66D550")]
		public RotationType rotationAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D588", Offset = "0x66D588")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66D588", Offset = "0x66D588")]
		public float rotationFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D5E0", Offset = "0x66D5E0")]
		public float releaseDecelerationDamper;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D618", Offset = "0x66D618")]
		public float resetToOrignOnReleaseSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66D650", Offset = "0x66D650")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D650", Offset = "0x66D650")]
		public Limits2D angleLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D6B0", Offset = "0x66D6B0")]
		public float minMaxThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D6E8", Offset = "0x66D6E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66D6E8", Offset = "0x66D6E8")]
		public float minMaxNormalizedThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x66D740", Offset = "0x66D740")]
		public Quaternion originRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Vector3 previousAttachPointPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected Vector3 currentRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Bounds grabbedObjectBounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected Vector3 currentRotationSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Coroutine updateRotationRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Coroutine decelerateRotationRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected bool[] limitsReached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected VRTK_ControllerReference grabbingObjectReference;

		public event RotateTransformGrabAttachEventHandler AngleChanged
		{
			[Address(RVA = "0xC15F88", Offset = "0xC15F88", VA = "0xC15F88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680AF4", Offset = "0x680AF4")]
			add
			{
			}
			[Address(RVA = "0xC16074", Offset = "0xC16074", VA = "0xC16074")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B04", Offset = "0x680B04")]
			remove
			{
			}
		}

		public event RotateTransformGrabAttachEventHandler MinAngleReached
		{
			[Address(RVA = "0xC16160", Offset = "0xC16160", VA = "0xC16160")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B14", Offset = "0x680B14")]
			add
			{
			}
			[Address(RVA = "0xC1624C", Offset = "0xC1624C", VA = "0xC1624C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B24", Offset = "0x680B24")]
			remove
			{
			}
		}

		public event RotateTransformGrabAttachEventHandler MinAngleExited
		{
			[Address(RVA = "0xC16338", Offset = "0xC16338", VA = "0xC16338")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B34", Offset = "0x680B34")]
			add
			{
			}
			[Address(RVA = "0xC16424", Offset = "0xC16424", VA = "0xC16424")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B44", Offset = "0x680B44")]
			remove
			{
			}
		}

		public event RotateTransformGrabAttachEventHandler MaxAngleReached
		{
			[Address(RVA = "0xC16510", Offset = "0xC16510", VA = "0xC16510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B54", Offset = "0x680B54")]
			add
			{
			}
			[Address(RVA = "0xC165FC", Offset = "0xC165FC", VA = "0xC165FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B64", Offset = "0x680B64")]
			remove
			{
			}
		}

		public event RotateTransformGrabAttachEventHandler MaxAngleExited
		{
			[Address(RVA = "0xC166E8", Offset = "0xC166E8", VA = "0xC166E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B74", Offset = "0x680B74")]
			add
			{
			}
			[Address(RVA = "0xC167D4", Offset = "0xC167D4", VA = "0xC167D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680B84", Offset = "0x680B84")]
			remove
			{
			}
		}

		[Address(RVA = "0xC168C0", Offset = "0xC168C0", VA = "0xC168C0", Slot = "24")]
		public virtual void OnAngleChanged(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC16900", Offset = "0xC16900", VA = "0xC16900", Slot = "25")]
		public virtual void OnMinAngleReached(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC16940", Offset = "0xC16940", VA = "0xC16940", Slot = "26")]
		public virtual void OnMinAngleExited(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC16980", Offset = "0xC16980", VA = "0xC16980", Slot = "27")]
		public virtual void OnMaxAngleReached(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC169C0", Offset = "0xC169C0", VA = "0xC169C0", Slot = "28")]
		public virtual void OnMaxAngleExited(RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0xC16A00", Offset = "0xC16A00", VA = "0xC16A00", Slot = "10")]
		public override bool StartGrab(GameObject grabbingObject, GameObject givenGrabbedObject, Rigidbody givenControllerAttachPoint)
		{
			return default(bool);
		}

		[Address(RVA = "0xC16B80", Offset = "0xC16B80", VA = "0xC16B80", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC16C20", Offset = "0xC16C20", VA = "0xC16C20", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Address(RVA = "0xC16E7C", Offset = "0xC16E7C", VA = "0xC16E7C", Slot = "29")]
		public virtual void SetRotation(float newAngle, float transitionTime = 0f)
		{
		}

		[Address(RVA = "0xC17044", Offset = "0xC17044", VA = "0xC17044", Slot = "30")]
		public virtual void ResetRotation(bool ignoreTransition = false)
		{
		}

		[Address(RVA = "0xC1718C", Offset = "0xC1718C", VA = "0xC1718C", Slot = "31")]
		public virtual float GetAngle()
		{
			return default(float);
		}

		[Address(RVA = "0xC171C4", Offset = "0xC171C4", VA = "0xC171C4", Slot = "32")]
		public virtual float GetNormalizedAngle()
		{
			return default(float);
		}

		[Address(RVA = "0xC17294", Offset = "0xC17294", VA = "0xC17294", Slot = "33")]
		public virtual Vector3 GetRotationSpeed()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC172A4", Offset = "0xC172A4", VA = "0xC172A4", Slot = "34")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xC172E0", Offset = "0xC172E0", VA = "0xC172E0", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC1738C", Offset = "0xC1738C", VA = "0xC1738C", Slot = "35")]
		protected virtual Vector3 GetNewRotation()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC17634", Offset = "0xC17634", VA = "0xC17634", Slot = "36")]
		protected virtual Vector3 BuildFollowAxisVector(float givenAngle)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC1768C", Offset = "0xC1768C", VA = "0xC1768C", Slot = "37")]
		protected virtual Vector3 CalculateAngle(Vector3 originPoint, Vector3 originalGrabPoint, Vector3 currentGrabPoint)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xC1788C", Offset = "0xC1788C", VA = "0xC1788C", Slot = "38")]
		protected virtual float CalculateAngle(Vector3 originPoint, Vector3 previousPoint, Vector3 currentPoint, Vector3 direction)
		{
			return default(float);
		}

		[Address(RVA = "0xC179DC", Offset = "0xC179DC", VA = "0xC179DC", Slot = "39")]
		protected virtual void UpdateRotation(Vector3 newRotation, bool additive, bool updateCurrentRotation)
		{
		}

		[Address(RVA = "0xC17C48", Offset = "0xC17C48", VA = "0xC17C48", Slot = "40")]
		protected virtual bool WithinRotationLimit(Vector3 rotationCheck)
		{
			return default(bool);
		}

		[Address(RVA = "0xC17D00", Offset = "0xC17D00", VA = "0xC17D00", Slot = "41")]
		protected virtual float AngleSigned(Vector3 v1, Vector3 v2, Vector3 n)
		{
			return default(float);
		}

		[Address(RVA = "0xC17E54", Offset = "0xC17E54", VA = "0xC17E54", Slot = "42")]
		protected virtual bool StillTouching()
		{
			return default(bool);
		}

		[Address(RVA = "0xC17FBC", Offset = "0xC17FBC", VA = "0xC17FBC", Slot = "43")]
		protected virtual void CancelUpdateRotation()
		{
		}

		[Address(RVA = "0xC17FD0", Offset = "0xC17FD0", VA = "0xC17FD0", Slot = "44")]
		protected virtual void CancelDecelerateRotation()
		{
		}

		[Address(RVA = "0xC17FE4", Offset = "0xC17FE4", VA = "0xC17FE4", Slot = "45")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680B94", Offset = "0x680B94")]
		protected virtual IEnumerator RotateToAngle(Vector3 targetAngle, float rotationSpeed)
		{
			return null;
		}

		[Address(RVA = "0xC180D0", Offset = "0xC180D0", VA = "0xC180D0", Slot = "46")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680BF8", Offset = "0x680BF8")]
		protected virtual IEnumerator DecelerateRotation()
		{
			return null;
		}

		[Address(RVA = "0xC18170", Offset = "0xC18170", VA = "0xC18170", Slot = "47")]
		protected virtual float GetLimitedAngle(float angle)
		{
			return default(float);
		}

		[Address(RVA = "0xC18190", Offset = "0xC18190", VA = "0xC18190", Slot = "48")]
		protected virtual void CheckAngleLimits()
		{
		}

		[Address(RVA = "0xC18264", Offset = "0xC18264", VA = "0xC18264", Slot = "49")]
		protected virtual void EmitEvents()
		{
		}

		[Address(RVA = "0xC185DC", Offset = "0xC185DC", VA = "0xC185DC", Slot = "50")]
		protected virtual RotateTransformGrabAttachEventArgs SetEventPayload()
		{
			return default(RotateTransformGrabAttachEventArgs);
		}

		[Address(RVA = "0xC186D8", Offset = "0xC186D8", VA = "0xC186D8")]
		public VRTK_RotateTransformGrabAttach()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x659184", Offset = "0x659184")]
	public class VRTK_RotatorTrackGrabAttach : VRTK_TrackObjectGrabAttach
	{
		[Address(RVA = "0xC18C40", Offset = "0xC18C40", VA = "0xC18C40", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC18CA4", Offset = "0xC18CA4", VA = "0xC18CA4", Slot = "14")]
		public override void ProcessFixedUpdate()
		{
		}

		[Address(RVA = "0xC18DF4", Offset = "0xC18DF4", VA = "0xC18DF4", Slot = "24")]
		protected override Transform SetTrackPointOrientation(Transform givenTrackPoint, Transform currentGrabbedObject, Transform controllerPoint)
		{
			return null;
		}

		[Address(RVA = "0xC18EC0", Offset = "0xC18EC0", VA = "0xC18EC0")]
		public VRTK_RotatorTrackGrabAttach()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6591BC", Offset = "0x6591BC")]
	public class VRTK_SpringJointGrabAttach : VRTK_BaseJointGrabAttach
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D7A0", Offset = "0x66D7A0")]
		public float breakForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D7D8", Offset = "0x66D7D8")]
		public float strength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D810", Offset = "0x66D810")]
		public float damper;

		[Address(RVA = "0xC18F08", Offset = "0xC18F08", VA = "0xC18F08", Slot = "25")]
		protected override void CreateJoint(GameObject obj)
		{
		}

		[Address(RVA = "0xC19040", Offset = "0xC19040", VA = "0xC19040")]
		public VRTK_SpringJointGrabAttach()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6591F4", Offset = "0x6591F4")]
	public class VRTK_TrackObjectGrabAttach : VRTK_BaseGrabAttach
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66D848", Offset = "0x66D848")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D848", Offset = "0x66D848")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D8B8", Offset = "0x66D8B8")]
		public float velocityLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D8F0", Offset = "0x66D8F0")]
		public float angularVelocityLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D928", Offset = "0x66D928")]
		public float maxDistanceDelta;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected bool isReleasable;

		[Address(RVA = "0xC18C58", Offset = "0xC18C58", VA = "0xC18C58", Slot = "11")]
		public override void StopGrab(bool applyGrabbingObjectVelocity)
		{
		}

		[Address(RVA = "0xC19070", Offset = "0xC19070", VA = "0xC19070", Slot = "12")]
		public override Transform CreateTrackPoint(Transform controllerPoint, GameObject currentGrabbedObject, GameObject currentGrabbingObject, ref bool customTrackPoint)
		{
			return null;
		}

		[Address(RVA = "0xC19334", Offset = "0xC19334", VA = "0xC19334", Slot = "13")]
		public override void ProcessUpdate()
		{
		}

		[Address(RVA = "0xC194B0", Offset = "0xC194B0", VA = "0xC194B0", Slot = "14")]
		public override void ProcessFixedUpdate()
		{
		}

		[Address(RVA = "0xC19990", Offset = "0xC19990", VA = "0xC19990", Slot = "17")]
		protected override void Initialise()
		{
		}

		[Address(RVA = "0xC199A0", Offset = "0xC199A0", VA = "0xC199A0", Slot = "24")]
		protected virtual Transform SetTrackPointOrientation(Transform givenTrackPoint, Transform currentGrabbedObject, Transform controllerPoint)
		{
			return null;
		}

		[Address(RVA = "0xC18EE4", Offset = "0xC18EE4", VA = "0xC18EE4")]
		public VRTK_TrackObjectGrabAttach()
		{
		}
	}
}
namespace VRTK.Controllables
{
	public struct ControllableEventArgs
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Collider interactingCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public VRTK_InteractTouch interactingTouchScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float value;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float normalizedValue;
	}
	public delegate void ControllableEventHandler(object sender, ControllableEventArgs e);
	public abstract class VRTK_BaseControllable : MonoBehaviour
	{
		public enum OperatingAxis
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			xAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			yAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			zAxis
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B498", Offset = "0x65B498")]
		private sealed class <ProcessAtEndOfFrame>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_BaseControllable <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x8DDA14", Offset = "0x8DDA14", VA = "0x8DDA14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x8DDA84", Offset = "0x8DDA84", VA = "0x8DDA84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x8DD5E8", Offset = "0x8DD5E8", VA = "0x8DD5E8")]
			[DebuggerHidden]
			public <ProcessAtEndOfFrame>d__64(int <>1__state)
			{
			}

			[Address(RVA = "0x8DD90C", Offset = "0x8DD90C", VA = "0x8DD90C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x8DD910", Offset = "0x8DD910", VA = "0x8DD910", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x8DDA1C", Offset = "0x8DDA1C", VA = "0x8DDA1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66D960", Offset = "0x66D960")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D960", Offset = "0x66D960")]
		public OperatingAxis operateAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D9C0", Offset = "0x66D9C0")]
		public GameObject[] ignoreCollisionsWith;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66D9F8", Offset = "0x66D9F8")]
		public GameObject[] excludeColliderCheckOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DA30", Offset = "0x66DA30")]
		public float equalityFidelity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 originalLocalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Quaternion originalLocalRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 actualTransformPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool atMinLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		protected bool atMaxLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Collider interactingCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VRTK_InteractTouch interactingTouchScript;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Collider[] controlColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected bool createCustomCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Coroutine processAtEndOfFrame;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float storedValue;

		public event ControllableEventHandler ValueChanged
		{
			[Address(RVA = "0x8DC5F4", Offset = "0x8DC5F4", VA = "0x8DC5F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680C5C", Offset = "0x680C5C")]
			add
			{
			}
			[Address(RVA = "0x8DC6E0", Offset = "0x8DC6E0", VA = "0x8DC6E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680C6C", Offset = "0x680C6C")]
			remove
			{
			}
		}

		public event ControllableEventHandler RestingPointReached
		{
			[Address(RVA = "0x8DC7CC", Offset = "0x8DC7CC", VA = "0x8DC7CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680C7C", Offset = "0x680C7C")]
			add
			{
			}
			[Address(RVA = "0x8DC8B8", Offset = "0x8DC8B8", VA = "0x8DC8B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680C8C", Offset = "0x680C8C")]
			remove
			{
			}
		}

		public event ControllableEventHandler MinLimitReached
		{
			[Address(RVA = "0x8DC9A4", Offset = "0x8DC9A4", VA = "0x8DC9A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680C9C", Offset = "0x680C9C")]
			add
			{
			}
			[Address(RVA = "0x8DCA90", Offset = "0x8DCA90", VA = "0x8DCA90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680CAC", Offset = "0x680CAC")]
			remove
			{
			}
		}

		public event ControllableEventHandler MinLimitExited
		{
			[Address(RVA = "0x8DCB7C", Offset = "0x8DCB7C", VA = "0x8DCB7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680CBC", Offset = "0x680CBC")]
			add
			{
			}
			[Address(RVA = "0x8DCC68", Offset = "0x8DCC68", VA = "0x8DCC68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680CCC", Offset = "0x680CCC")]
			remove
			{
			}
		}

		public event ControllableEventHandler MaxLimitReached
		{
			[Address(RVA = "0x8DCD54", Offset = "0x8DCD54", VA = "0x8DCD54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680CDC", Offset = "0x680CDC")]
			add
			{
			}
			[Address(RVA = "0x8DCE40", Offset = "0x8DCE40", VA = "0x8DCE40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680CEC", Offset = "0x680CEC")]
			remove
			{
			}
		}

		public event ControllableEventHandler MaxLimitExited
		{
			[Address(RVA = "0x8DCF2C", Offset = "0x8DCF2C", VA = "0x8DCF2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680CFC", Offset = "0x680CFC")]
			add
			{
			}
			[Address(RVA = "0x8DD018", Offset = "0x8DD018", VA = "0x8DD018")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x680D0C", Offset = "0x680D0C")]
			remove
			{
			}
		}

		[Address(RVA = "0x8DD104", Offset = "0x8DD104", VA = "0x8DD104", Slot = "4")]
		public virtual void OnValueChanged(ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x8DD144", Offset = "0x8DD144", VA = "0x8DD144", Slot = "5")]
		public virtual void OnRestingPointReached(ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x8DD184", Offset = "0x8DD184", VA = "0x8DD184", Slot = "6")]
		public virtual void OnMinLimitReached(ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x8DD1C4", Offset = "0x8DD1C4", VA = "0x8DD1C4", Slot = "7")]
		public virtual void OnMinLimitExited(ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x8DD204", Offset = "0x8DD204", VA = "0x8DD204", Slot = "8")]
		public virtual void OnMaxLimitReached(ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x8DD244", Offset = "0x8DD244", VA = "0x8DD244", Slot = "9")]
		public virtual void OnMaxLimitExited(ControllableEventArgs e)
		{
		}

		public abstract float GetValue();

		public abstract float GetNormalizedValue();

		public abstract void SetValue(float value);

		public abstract bool IsResting();

		[Address(RVA = "0x8DD284", Offset = "0x8DD284", VA = "0x8DD284", Slot = "14")]
		public virtual bool AtMinLimit()
		{
			return default(bool);
		}

		[Address(RVA = "0x8DD28C", Offset = "0x8DD28C", VA = "0x8DD28C", Slot = "15")]
		public virtual bool AtMaxLimit()
		{
			return default(bool);
		}

		[Address(RVA = "0x8DD294", Offset = "0x8DD294", VA = "0x8DD294", Slot = "16")]
		public virtual Vector3 GetOriginalLocalPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8DD2A0", Offset = "0x8DD2A0", VA = "0x8DD2A0", Slot = "17")]
		public virtual Quaternion GetOriginalLocalRotation()
		{
			return default(Quaternion);
		}

		[Address(RVA = "0x8DD2AC", Offset = "0x8DD2AC", VA = "0x8DD2AC", Slot = "18")]
		public virtual Collider[] GetControlColliders()
		{
			return null;
		}

		[Address(RVA = "0x8DD2B4", Offset = "0x8DD2B4", VA = "0x8DD2B4", Slot = "19")]
		public virtual Collider GetInteractingCollider()
		{
			return null;
		}

		[Address(RVA = "0x8DD2BC", Offset = "0x8DD2BC", VA = "0x8DD2BC", Slot = "20")]
		public virtual VRTK_InteractTouch GetInteractingTouch()
		{
			return null;
		}

		protected abstract void EmitEvents();

		[Address(RVA = "0x8DD2C4", Offset = "0x8DD2C4", VA = "0x8DD2C4", Slot = "22")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x8CDEA4", Offset = "0x8CDEA4", VA = "0x8CDEA4", Slot = "23")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x8CDF40", Offset = "0x8CDF40", VA = "0x8CDF40", Slot = "24")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x8CDDFC", Offset = "0x8CDDFC", VA = "0x8CDDFC", Slot = "25")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x8DD348", Offset = "0x8DD348", VA = "0x8DD348", Slot = "26")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x8DD394", Offset = "0x8DD394", VA = "0x8DD394", Slot = "27")]
		protected virtual void OnCollisionExit(Collision collision)
		{
		}

		[Address(RVA = "0x8DD3E0", Offset = "0x8DD3E0", VA = "0x8DD3E0", Slot = "28")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0x8DD3F0", Offset = "0x8DD3F0", VA = "0x8DD3F0", Slot = "29")]
		protected virtual void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0x8CE47C", Offset = "0x8CE47C", VA = "0x8CE47C", Slot = "30")]
		protected virtual void OnTouched(Collider collider)
		{
		}

		[Address(RVA = "0x8DD400", Offset = "0x8DD400", VA = "0x8DD400", Slot = "31")]
		protected virtual void OnUntouched(Collider collider)
		{
		}

		[Address(RVA = "0x8DD408", Offset = "0x8DD408", VA = "0x8DD408", Slot = "32")]
		protected virtual void SetupCollider()
		{
		}

		[Address(RVA = "0x8DD570", Offset = "0x8DD570", VA = "0x8DD570", Slot = "33")]
		protected virtual void ConfigureColliders()
		{
		}

		[Address(RVA = "0x8DD574", Offset = "0x8DD574", VA = "0x8DD574", Slot = "34")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680D1C", Offset = "0x680D1C")]
		protected virtual IEnumerator ProcessAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0x8DD614", Offset = "0x8DD614", VA = "0x8DD614", Slot = "35")]
		protected virtual void ManageCollisions(bool ignore)
		{
		}

		[Address(RVA = "0x8DD8D0", Offset = "0x8DD8D0", VA = "0x8DD8D0", Slot = "36")]
		protected virtual Vector3 AxisDirection(bool local = false)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8D1060", Offset = "0x8D1060", VA = "0x8D1060", Slot = "37")]
		protected virtual ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Address(RVA = "0x8CEC48", Offset = "0x8CEC48", VA = "0x8CEC48")]
		protected VRTK_BaseControllable()
		{
		}
	}
}
namespace VRTK.Controllables.PhysicsBased
{
	public abstract class VRTK_BasePhysicsControllable : VRTK_BaseControllable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66DAC8", Offset = "0x66DAC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DAC8", Offset = "0x66DAC8")]
		public Rigidbody connectedTo;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Rigidbody controlRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool createCustomRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected GameObject rigidbodyActivatorContainer;

		[Address(RVA = "0x8D5FEC", Offset = "0x8D5FEC", VA = "0x8D5FEC", Slot = "38")]
		public virtual Rigidbody GetControlRigidbody()
		{
			return null;
		}

		[Address(RVA = "0x8D5FF4", Offset = "0x8D5FF4", VA = "0x8D5FF4", Slot = "39")]
		public virtual GameObject GetControlActivatorContainer()
		{
			return null;
		}

		[Address(RVA = "0x8D5FFC", Offset = "0x8D5FFC", VA = "0x8D5FFC", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x8D6040", Offset = "0x8D6040", VA = "0x8D6040", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x8D60BC", Offset = "0x8D60BC", VA = "0x8D60BC", Slot = "40")]
		protected virtual void SetupRigidbodyActivator()
		{
		}

		[Address(RVA = "0x8D6184", Offset = "0x8D6184", VA = "0x8D6184", Slot = "41")]
		protected virtual void SetupRigidbody()
		{
		}

		[Address(RVA = "0x8D6278", Offset = "0x8D6278", VA = "0x8D6278", Slot = "42")]
		protected virtual void ConfigueRigidbody()
		{
		}

		[Address(RVA = "0x8D627C", Offset = "0x8D627C", VA = "0x8D627C", Slot = "43")]
		protected virtual void SetRigidbodyVelocity(Vector3 newVelocity)
		{
		}

		[Address(RVA = "0x8D6348", Offset = "0x8D6348", VA = "0x8D6348", Slot = "44")]
		protected virtual void SetRigidbodyDrag(float givenDrag)
		{
		}

		[Address(RVA = "0x8D63F8", Offset = "0x8D63F8", VA = "0x8D63F8", Slot = "45")]
		protected virtual void SetRigidbodyAngularDrag(float givenDrag)
		{
		}

		[Address(RVA = "0x8D64A8", Offset = "0x8D64A8", VA = "0x8D64A8", Slot = "46")]
		protected virtual void SetRigidbodyGravity(bool useGravity)
		{
		}

		[Address(RVA = "0x8D6558", Offset = "0x8D6558", VA = "0x8D6558", Slot = "47")]
		protected virtual void SetRigidbodyKinematic(bool isKinematic)
		{
		}

		[Address(RVA = "0x8D6608", Offset = "0x8D6608", VA = "0x8D6608", Slot = "48")]
		protected virtual void SetRigidbodyConstraints(RigidbodyConstraints newConstraints)
		{
		}

		[Address(RVA = "0x8D66B8", Offset = "0x8D66B8", VA = "0x8D66B8", Slot = "49")]
		protected virtual void SetRigidbodyCollisionDetectionMode(CollisionDetectionMode newDetectionMode)
		{
		}

		[Address(RVA = "0x8D6768", Offset = "0x8D6768", VA = "0x8D6768")]
		protected VRTK_BasePhysicsControllable()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65922C", Offset = "0x65922C")]
	public class VRTK_PhysicsPusher : VRTK_BasePhysicsControllable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66DB28", Offset = "0x66DB28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DB28", Offset = "0x66DB28")]
		public float pressedDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DB88", Offset = "0x66DB88")]
		public bool stayPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DBC0", Offset = "0x66DBC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66DBC0", Offset = "0x66DBC0")]
		public float minMaxLimitThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DC14", Offset = "0x66DC14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66DC14", Offset = "0x66DC14")]
		public float restingPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DC68", Offset = "0x66DC68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66DC68", Offset = "0x66DC68")]
		public float restingPositionThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DCBC", Offset = "0x66DCBC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66DCBC", Offset = "0x66DCBC")]
		public float positionTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DD10", Offset = "0x66DD10")]
		public float targetForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected ConfigurableJoint controlJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected bool createControlJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected Vector3 previousLocalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected bool pressedDown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected float previousPositionTarget;

		[Address(RVA = "0x8D676C", Offset = "0x8D676C", VA = "0x8D676C", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D67D0", Offset = "0x8D67D0", VA = "0x8D67D0", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D686C", Offset = "0x8D686C", VA = "0x8D686C", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Address(RVA = "0x8D6870", Offset = "0x8D6870", VA = "0x8D6870", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Address(RVA = "0x8D6928", Offset = "0x8D6928", VA = "0x8D6928", Slot = "50")]
		public virtual ConfigurableJoint GetControlJoint()
		{
			return null;
		}

		[Address(RVA = "0x8D6930", Offset = "0x8D6930", VA = "0x8D6930", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x8D6B84", Offset = "0x8D6B84", VA = "0x8D6B84", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x8D6C50", Offset = "0x8D6C50", VA = "0x8D6C50", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x8D6CEC", Offset = "0x8D6CEC", VA = "0x8D6CEC", Slot = "51")]
		protected virtual void FixedUpdate()
		{
		}

		[Address(RVA = "0x8D6D78", Offset = "0x8D6D78", VA = "0x8D6D78", Slot = "52")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x8D6E10", Offset = "0x8D6E10", VA = "0x8D6E10", Slot = "42")]
		protected override void ConfigueRigidbody()
		{
		}

		[Address(RVA = "0x8D6E6C", Offset = "0x8D6E6C", VA = "0x8D6E6C", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Address(RVA = "0x8D7394", Offset = "0x8D7394", VA = "0x8D7394", Slot = "53")]
		protected virtual void ForceLocalPosition()
		{
		}

		[Address(RVA = "0x8D74C8", Offset = "0x8D74C8", VA = "0x8D74C8", Slot = "54")]
		protected virtual void CheckUnpress()
		{
		}

		[Address(RVA = "0x8D7518", Offset = "0x8D7518", VA = "0x8D7518", Slot = "55")]
		protected virtual void SetTargetPosition()
		{
		}

		[Address(RVA = "0x8D7718", Offset = "0x8D7718", VA = "0x8D7718", Slot = "56")]
		protected virtual Vector3 PressedPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8D77FC", Offset = "0x8D77FC", VA = "0x8D77FC", Slot = "57")]
		protected virtual void SetupJoint()
		{
		}

		[Address(RVA = "0x8D7C14", Offset = "0x8D7C14", VA = "0x8D7C14", Slot = "58")]
		protected virtual void StayPressed()
		{
		}

		[Address(RVA = "0x8D7C58", Offset = "0x8D7C58", VA = "0x8D7C58")]
		public VRTK_PhysicsPusher()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x659264", Offset = "0x659264")]
	public class VRTK_PhysicsRotator : VRTK_BasePhysicsControllable
	{
		public enum GrabMechanic
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TrackObject,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RotatorTrack
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66DD48", Offset = "0x66DD48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DD48", Offset = "0x66DD48")]
		public Transform hingePoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DDA8", Offset = "0x66DDA8")]
		[AttributeAttribute(Name = "MinMaxRangeAttribute", RVA = "0x66DDA8", Offset = "0x66DDA8")]
		public Limits2D angleLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DE04", Offset = "0x66DE04")]
		public float minMaxThresholdAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DE3C", Offset = "0x66DE3C")]
		public float restingAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DE74", Offset = "0x66DE74")]
		public float forceRestingAngleThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DEAC", Offset = "0x66DEAC")]
		public float angleTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DEE4", Offset = "0x66DEE4")]
		public bool isLocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66DF1C", Offset = "0x66DF1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DF1C", Offset = "0x66DF1C")]
		public Limits2D stepValueRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DF7C", Offset = "0x66DF7C")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DFB4", Offset = "0x66DFB4")]
		public bool useStepAsValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66DFEC", Offset = "0x66DFEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66DFEC", Offset = "0x66DFEC")]
		public bool snapToStep;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E04C", Offset = "0x66E04C")]
		public float snapForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66E084", Offset = "0x66E084")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E084", Offset = "0x66E084")]
		public GrabMechanic grabMechanic;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E0E4", Offset = "0x66E0E4")]
		public bool precisionGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E11C", Offset = "0x66E11C")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E154", Offset = "0x66E154")]
		public bool useFrictionOverrides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E18C", Offset = "0x66E18C")]
		public float grabbedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E1C4", Offset = "0x66E1C4")]
		public float releasedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E1FC", Offset = "0x66E1FC")]
		public GameObject[] onlyInteractWith;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected VRTK_TrackObjectGrabAttach controlGrabAttach;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected bool createControlInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected HingeJoint controlJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected JointSpring controlJointSpring;

		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		protected JointLimits controlJointLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected bool createControlJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		protected RigidbodyConstraints savedConstraints;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		protected bool stillLocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
		protected bool stillResting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		protected float previousValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected float previousAngleTarget;

		[Address(RVA = "0x8D7C80", Offset = "0x8D7C80", VA = "0x8D7C80", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D7E04", Offset = "0x8D7E04", VA = "0x8D7E04", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D7E70", Offset = "0x8D7E70", VA = "0x8D7E70", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Address(RVA = "0x8D7E80", Offset = "0x8D7E80", VA = "0x8D7E80", Slot = "50")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8D7FF0", Offset = "0x8D7FF0", VA = "0x8D7FF0", Slot = "51")]
		public virtual void SetAngleTargetWithStepValue(float givenStepValue)
		{
		}

		[Address(RVA = "0x8D8074", Offset = "0x8D8074", VA = "0x8D8074", Slot = "52")]
		public virtual void SetRestingAngleWithStepValue(float givenStepValue)
		{
		}

		[Address(RVA = "0x8D80DC", Offset = "0x8D80DC", VA = "0x8D80DC", Slot = "53")]
		public virtual float GetAngleFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8D8288", Offset = "0x8D8288", VA = "0x8D8288", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Address(RVA = "0x8D82F8", Offset = "0x8D82F8", VA = "0x8D82F8", Slot = "54")]
		public virtual HingeJoint GetControlJoint()
		{
			return null;
		}

		[Address(RVA = "0x8D8300", Offset = "0x8D8300", VA = "0x8D8300", Slot = "55")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Address(RVA = "0x8D8308", Offset = "0x8D8308", VA = "0x8D8308", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x8D8628", Offset = "0x8D8628", VA = "0x8D8628", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x8D870C", Offset = "0x8D870C", VA = "0x8D870C", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x8D8810", Offset = "0x8D8810", VA = "0x8D8810", Slot = "56")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x8D8888", Offset = "0x8D8888", VA = "0x8D8888", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Address(RVA = "0x8D8BE0", Offset = "0x8D8BE0", VA = "0x8D8BE0", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Address(RVA = "0x8D8C84", Offset = "0x8D8C84", VA = "0x8D8C84", Slot = "57")]
		protected virtual void SetupJoint()
		{
		}

		[Address(RVA = "0x8D8F2C", Offset = "0x8D8F2C", VA = "0x8D8F2C", Slot = "58")]
		protected virtual void SetJointLimits()
		{
		}

		[Address(RVA = "0x8D9038", Offset = "0x8D9038", VA = "0x8D9038", Slot = "59")]
		protected virtual void ManageSpring(bool activate, float springTarget)
		{
		}

		[Address(RVA = "0x8D9134", Offset = "0x8D9134", VA = "0x8D9134", Slot = "60")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Address(RVA = "0x8D92EC", Offset = "0x8D92EC", VA = "0x8D92EC", Slot = "61")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Address(RVA = "0x8D93D8", Offset = "0x8D93D8", VA = "0x8D93D8", Slot = "62")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Address(RVA = "0x8D9488", Offset = "0x8D9488", VA = "0x8D9488", Slot = "63")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Address(RVA = "0x8D9528", Offset = "0x8D9528", VA = "0x8D9528", Slot = "64")]
		protected virtual void ManageInteractableObjectListeners(bool state)
		{
		}

		[Address(RVA = "0x8D97B4", Offset = "0x8D97B4", VA = "0x8D97B4", Slot = "65")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D9874", Offset = "0x8D9874", VA = "0x8D9874", Slot = "66")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D9934", Offset = "0x8D9934", VA = "0x8D9934", Slot = "67")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D9970", Offset = "0x8D9970", VA = "0x8D9970", Slot = "68")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D9980", Offset = "0x8D9980", VA = "0x8D9980", Slot = "69")]
		protected virtual void AttemptMove()
		{
		}

		[Address(RVA = "0x8D99C8", Offset = "0x8D99C8", VA = "0x8D99C8", Slot = "70")]
		protected virtual void AttemptRelease()
		{
		}

		[Address(RVA = "0x8D99DC", Offset = "0x8D99DC", VA = "0x8D99DC", Slot = "71")]
		protected virtual void SetFrictions(float frictionValue)
		{
		}

		[Address(RVA = "0x8D9A48", Offset = "0x8D9A48", VA = "0x8D9A48", Slot = "72")]
		protected virtual void CheckLock()
		{
		}

		[Address(RVA = "0x8D9B34", Offset = "0x8D9B34", VA = "0x8D9B34", Slot = "73")]
		protected virtual void SetAngleWithNormalizedValue(float normalizedTargetAngle)
		{
		}

		[Address(RVA = "0x8D9CA8", Offset = "0x8D9CA8", VA = "0x8D9CA8", Slot = "74")]
		protected virtual void UpdateToAngle(float givenTargetAngle)
		{
		}

		[Address(RVA = "0x8D9D50", Offset = "0x8D9D50", VA = "0x8D9D50", Slot = "75")]
		protected virtual void ForceRestingPosition()
		{
		}

		[Address(RVA = "0x8D9EE0", Offset = "0x8D9EE0", VA = "0x8D9EE0", Slot = "76")]
		protected virtual void ForceAngleTarget()
		{
		}

		[Address(RVA = "0x8D9F58", Offset = "0x8D9F58", VA = "0x8D9F58", Slot = "77")]
		protected virtual void ForceSnapToStep()
		{
		}

		[Address(RVA = "0x8DA0F4", Offset = "0x8DA0F4", VA = "0x8DA0F4", Slot = "78")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Address(RVA = "0x8DA1A0", Offset = "0x8DA1A0", VA = "0x8DA1A0")]
		public VRTK_PhysicsRotator()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65929C", Offset = "0x65929C")]
	public class VRTK_PhysicsSlider : VRTK_BasePhysicsControllable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66E234", Offset = "0x66E234")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E234", Offset = "0x66E234")]
		public float maximumLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E294", Offset = "0x66E294")]
		public float minMaxThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E2CC", Offset = "0x66E2CC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66E2CC", Offset = "0x66E2CC")]
		public float positionTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E320", Offset = "0x66E320")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66E320", Offset = "0x66E320")]
		public float restingPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E374", Offset = "0x66E374")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66E374", Offset = "0x66E374")]
		public float forceRestingPositionThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66E3C8", Offset = "0x66E3C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E3C8", Offset = "0x66E3C8")]
		public Limits2D stepValueRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E428", Offset = "0x66E428")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E460", Offset = "0x66E460")]
		public bool useStepAsValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66E498", Offset = "0x66E498")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E498", Offset = "0x66E498")]
		public bool snapToStep;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E4F8", Offset = "0x66E4F8")]
		public float snapForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66E530", Offset = "0x66E530")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E530", Offset = "0x66E530")]
		public bool precisionGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E590", Offset = "0x66E590")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E5C8", Offset = "0x66E5C8")]
		public float releaseFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E600", Offset = "0x66E600")]
		public GameObject[] onlyInteractWith;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected ConfigurableJoint controlJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected bool createControlJoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected VRTK_TrackObjectGrabAttach controlGrabAttach;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected bool createControlInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		protected Vector3 previousLocalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected float previousPositionTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		protected bool stillResting;

		[Address(RVA = "0x8DA288", Offset = "0x8DA288", VA = "0x8DA288", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8DA2EC", Offset = "0x8DA2EC", VA = "0x8DA2EC", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8DA388", Offset = "0x8DA388", VA = "0x8DA388", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Address(RVA = "0x8DA4B4", Offset = "0x8DA4B4", VA = "0x8DA4B4", Slot = "50")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8DA60C", Offset = "0x8DA60C", VA = "0x8DA60C", Slot = "51")]
		public virtual void SetPositionTargetWithStepValue(float givenStepValue)
		{
		}

		[Address(RVA = "0x8DA684", Offset = "0x8DA684", VA = "0x8DA684", Slot = "52")]
		public virtual void SetRestingPositionWithStepValue(float givenStepValue)
		{
		}

		[Address(RVA = "0x8DA6EC", Offset = "0x8DA6EC", VA = "0x8DA6EC", Slot = "53")]
		public virtual float GetPositionFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8DA838", Offset = "0x8DA838", VA = "0x8DA838", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Address(RVA = "0x8DA8A8", Offset = "0x8DA8A8", VA = "0x8DA8A8", Slot = "54")]
		public virtual ConfigurableJoint GetControlJoint()
		{
			return null;
		}

		[Address(RVA = "0x8DA8B0", Offset = "0x8DA8B0", VA = "0x8DA8B0", Slot = "55")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Address(RVA = "0x8DA8B8", Offset = "0x8DA8B8", VA = "0x8DA8B8", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x8DAA30", Offset = "0x8DAA30", VA = "0x8DAA30", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x8DAB28", Offset = "0x8DAB28", VA = "0x8DAB28", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x8DAC20", Offset = "0x8DAC20", VA = "0x8DAC20", Slot = "56")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x8DAC84", Offset = "0x8DAC84", VA = "0x8DAC84", Slot = "42")]
		protected override void ConfigueRigidbody()
		{
		}

		[Address(RVA = "0x8DACF0", Offset = "0x8DACF0", VA = "0x8DACF0", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Address(RVA = "0x8DAFD8", Offset = "0x8DAFD8", VA = "0x8DAFD8", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Address(RVA = "0x8DB07C", Offset = "0x8DB07C", VA = "0x8DB07C", Slot = "57")]
		protected virtual void ForceRestingPosition()
		{
		}

		[Address(RVA = "0x8DB16C", Offset = "0x8DB16C", VA = "0x8DB16C", Slot = "58")]
		protected virtual void ForcePositionTarget()
		{
		}

		[Address(RVA = "0x8DB1E8", Offset = "0x8DB1E8", VA = "0x8DB1E8", Slot = "59")]
		protected virtual void ForceSnapToStep()
		{
		}

		[Address(RVA = "0x8DB3D0", Offset = "0x8DB3D0", VA = "0x8DB3D0", Slot = "60")]
		protected virtual void SetPositionWithNormalizedValue(float givenTargetPosition)
		{
		}

		[Address(RVA = "0x8DB4F0", Offset = "0x8DB4F0", VA = "0x8DB4F0", Slot = "61")]
		protected virtual void SnapToPosition(float positionOnAxis)
		{
		}

		[Address(RVA = "0x8DB668", Offset = "0x8DB668", VA = "0x8DB668", Slot = "62")]
		protected virtual Vector3 MaximumLength()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8DB74C", Offset = "0x8DB74C", VA = "0x8DB74C", Slot = "63")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Address(RVA = "0x8DB908", Offset = "0x8DB908", VA = "0x8DB908", Slot = "64")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Address(RVA = "0x8DB9B0", Offset = "0x8DB9B0", VA = "0x8DB9B0", Slot = "65")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Address(RVA = "0x8DBA60", Offset = "0x8DBA60", VA = "0x8DBA60", Slot = "66")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Address(RVA = "0x8DBB00", Offset = "0x8DBB00", VA = "0x8DBB00", Slot = "67")]
		protected virtual void SetupJoint()
		{
		}

		[Address(RVA = "0x8DBE58", Offset = "0x8DBE58", VA = "0x8DBE58", Slot = "68")]
		protected virtual void EnableJointDriver()
		{
		}

		[Address(RVA = "0x8DBE6C", Offset = "0x8DBE6C", VA = "0x8DBE6C", Slot = "69")]
		protected virtual void DisableJointDriver()
		{
		}

		[Address(RVA = "0x8DBE80", Offset = "0x8DBE80", VA = "0x8DBE80", Slot = "70")]
		protected virtual void SetJointDrive(float driverForce)
		{
		}

		[Address(RVA = "0x8DBF88", Offset = "0x8DBF88", VA = "0x8DBF88", Slot = "71")]
		protected virtual void ManageInteractableObjectListeners(bool state)
		{
		}

		[Address(RVA = "0x8DC214", Offset = "0x8DC214", VA = "0x8DC214", Slot = "72")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8DC2C0", Offset = "0x8DC2C0", VA = "0x8DC2C0", Slot = "73")]
		protected virtual void InteractableObjectUntouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8DC36C", Offset = "0x8DC36C", VA = "0x8DC36C", Slot = "74")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8DC3A8", Offset = "0x8DC3A8", VA = "0x8DC3A8", Slot = "75")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8DC3B8", Offset = "0x8DC3B8", VA = "0x8DC3B8", Slot = "76")]
		protected virtual void AttemptMove()
		{
		}

		[Address(RVA = "0x8DC3F8", Offset = "0x8DC3F8", VA = "0x8DC3F8", Slot = "77")]
		protected virtual void AttemptRelease()
		{
		}

		[Address(RVA = "0x8DC484", Offset = "0x8DC484", VA = "0x8DC484", Slot = "78")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Address(RVA = "0x8DC530", Offset = "0x8DC530", VA = "0x8DC530")]
		public VRTK_PhysicsSlider()
		{
		}
	}
}
namespace VRTK.Controllables.ArtificialBased
{
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6592D4", Offset = "0x6592D4")]
	public class VRTK_ArtificialPusher : VRTK_BaseControllable
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B4A8", Offset = "0x65B4A8")]
		private sealed class <PositionLerp>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ArtificialPusher <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float moveSpeed;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x8CEFC0", Offset = "0x8CEFC0", VA = "0x8CEFC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x8D0030", Offset = "0x8D0030", VA = "0x8D0030", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x8CE84C", Offset = "0x8CE84C", VA = "0x8CE84C")]
			[DebuggerHidden]
			public <PositionLerp>d__30(int <>1__state)
			{
			}

			[Address(RVA = "0x8CECE4", Offset = "0x8CECE4", VA = "0x8CECE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x8CECE8", Offset = "0x8CECE8", VA = "0x8CECE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x8CEFC8", Offset = "0x8CEFC8", VA = "0x8CEFC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B4B8", Offset = "0x65B4B8")]
		private sealed class <SetTargetPositionAtEndOfFrame>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ArtificialPusher <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x8D00F0", Offset = "0x8D00F0", VA = "0x8D00F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x8D0160", Offset = "0x8D0160", VA = "0x8D0160", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x8CE8EC", Offset = "0x8CE8EC", VA = "0x8CE8EC")]
			[DebuggerHidden]
			public <SetTargetPositionAtEndOfFrame>d__31(int <>1__state)
			{
			}

			[Address(RVA = "0x8D0038", Offset = "0x8D0038", VA = "0x8D0038", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x8D003C", Offset = "0x8D003C", VA = "0x8D003C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x8D00F8", Offset = "0x8D00F8", VA = "0x8D00F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66E638", Offset = "0x66E638")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E638", Offset = "0x66E638")]
		public float pressedDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E698", Offset = "0x66E698")]
		[SerializeField]
		protected bool stayPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E6E4", Offset = "0x66E6E4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66E6E4", Offset = "0x66E6E4")]
		public float minMaxLimitThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E738", Offset = "0x66E738")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66E738", Offset = "0x66E738")]
		public float restingPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E78C", Offset = "0x66E78C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66E78C", Offset = "0x66E78C")]
		public float restingPositionThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E7E0", Offset = "0x66E7E0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66E7E0", Offset = "0x66E7E0")]
		[SerializeField]
		protected float positionTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E844", Offset = "0x66E844")]
		public float pressSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E87C", Offset = "0x66E87C")]
		public float returnSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected Coroutine positionLerpRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Coroutine setTargetPositionRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float vectorEqualityThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected bool isPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		protected bool isMoving;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFE")]
		protected bool isTouched;

		[Address(RVA = "0x8CD92C", Offset = "0x8CD92C", VA = "0x8CD92C", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8CD990", Offset = "0x8CD990", VA = "0x8CD990", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8CDA2C", Offset = "0x8CDA2C", VA = "0x8CDA2C", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Address(RVA = "0x8CDA30", Offset = "0x8CDA30", VA = "0x8CDA30", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Address(RVA = "0x8CDAE8", Offset = "0x8CDAE8", VA = "0x8CDAE8", Slot = "38")]
		public virtual void SetStayPressed(bool state)
		{
		}

		[Address(RVA = "0x8CDB44", Offset = "0x8CDB44", VA = "0x8CDB44", Slot = "39")]
		public virtual void SetPositionTarget(float normalizedTarget)
		{
		}

		[Address(RVA = "0x8CDBD0", Offset = "0x8CDBD0", VA = "0x8CDBD0", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x8CDE54", Offset = "0x8CDE54", VA = "0x8CDE54", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x8CDEFC", Offset = "0x8CDEFC", VA = "0x8CDEFC", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x8CE064", Offset = "0x8CE064", VA = "0x8CE064", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Address(RVA = "0x8CE284", Offset = "0x8CE284", VA = "0x8CE284", Slot = "30")]
		protected override void OnTouched(Collider collider)
		{
		}

		[Address(RVA = "0x8CE4F0", Offset = "0x8CE4F0", VA = "0x8CE4F0", Slot = "31")]
		protected override void OnUntouched(Collider collider)
		{
		}

		[Address(RVA = "0x8CE4F8", Offset = "0x8CE4F8", VA = "0x8CE4F8", Slot = "40")]
		protected virtual void SetTargetPosition()
		{
		}

		[Address(RVA = "0x8CE640", Offset = "0x8CE640", VA = "0x8CE640", Slot = "41")]
		protected virtual Vector3 PressedPosition()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8CE724", Offset = "0x8CE724", VA = "0x8CE724", Slot = "42")]
		protected virtual void CancelPositionLerp()
		{
		}

		[Address(RVA = "0x8CE758", Offset = "0x8CE758", VA = "0x8CE758", Slot = "43")]
		protected virtual void CancelSetTargetPosition()
		{
		}

		[Address(RVA = "0x8CE78C", Offset = "0x8CE78C", VA = "0x8CE78C", Slot = "44")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680D80", Offset = "0x680D80")]
		protected virtual IEnumerator PositionLerp(Vector3 targetPosition, float moveSpeed)
		{
			return null;
		}

		[Address(RVA = "0x8CE878", Offset = "0x8CE878", VA = "0x8CE878", Slot = "45")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680DE4", Offset = "0x680DE4")]
		protected virtual IEnumerator SetTargetPositionAtEndOfFrame()
		{
			return null;
		}

		[Address(RVA = "0x8CE918", Offset = "0x8CE918", VA = "0x8CE918", Slot = "46")]
		protected virtual void ManageAtPressedPosition()
		{
		}

		[Address(RVA = "0x8CE978", Offset = "0x8CE978", VA = "0x8CE978", Slot = "47")]
		protected virtual void ManageAtOriginPosition()
		{
		}

		[Address(RVA = "0x8CE9CC", Offset = "0x8CE9CC", VA = "0x8CE9CC", Slot = "48")]
		protected virtual bool AtOriginPosition()
		{
			return default(bool);
		}

		[Address(RVA = "0x8CEA18", Offset = "0x8CEA18", VA = "0x8CEA18", Slot = "49")]
		protected virtual bool AtPressedPosition()
		{
			return default(bool);
		}

		[Address(RVA = "0x8CEAA4", Offset = "0x8CEAA4", VA = "0x8CEAA4", Slot = "50")]
		public virtual bool AtTargetPosition(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Address(RVA = "0x8CEB10", Offset = "0x8CEB10", VA = "0x8CEB10", Slot = "51")]
		protected virtual void ResetInteractor()
		{
		}

		[Address(RVA = "0x8CEB18", Offset = "0x8CEB18", VA = "0x8CEB18", Slot = "52")]
		protected virtual void SetToRestingPosition()
		{
		}

		[Address(RVA = "0x8CEC14", Offset = "0x8CEC14", VA = "0x8CEC14")]
		public VRTK_ArtificialPusher()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65930C", Offset = "0x65930C")]
	public class VRTK_ArtificialRotator : VRTK_BaseControllable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66E8B4", Offset = "0x66E8B4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E8B4", Offset = "0x66E8B4")]
		public Transform hingePoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E914", Offset = "0x66E914")]
		public Limits2D angleLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E94C", Offset = "0x66E94C")]
		public float minMaxThresholdAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E984", Offset = "0x66E984")]
		public float restingAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E9BC", Offset = "0x66E9BC")]
		public float forceRestingAngleThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66E9F4", Offset = "0x66E9F4")]
		[SerializeField]
		protected float angleTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EA40", Offset = "0x66EA40")]
		public bool isLocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66EA78", Offset = "0x66EA78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EA78", Offset = "0x66EA78")]
		public Limits2D stepValueRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EAD8", Offset = "0x66EAD8")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EB10", Offset = "0x66EB10")]
		public bool useStepAsValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66EB48", Offset = "0x66EB48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EB48", Offset = "0x66EB48")]
		public bool snapToStep;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EBA8", Offset = "0x66EBA8")]
		public float snapForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66EBE0", Offset = "0x66EBE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EBE0", Offset = "0x66EBE0")]
		public bool precisionGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EC40", Offset = "0x66EC40")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EC78", Offset = "0x66EC78")]
		public VRTK_RotateTransformGrabAttach.RotationType rotationAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66ECB0", Offset = "0x66ECB0")]
		public float grabbedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66ECE8", Offset = "0x66ECE8")]
		public float releasedFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66ED20", Offset = "0x66ED20")]
		public GameObject[] onlyInteractWith;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected VRTK_RotateTransformGrabAttach controlGrabAttach;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected bool createInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected GameObject rotatorContainer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected bool rotationReset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		protected bool stillResting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		protected float previousValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected float previousAngleTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected Transform savedParent;

		[Address(RVA = "0x8D0168", Offset = "0x8D0168", VA = "0x8D0168", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D0210", Offset = "0x8D0210", VA = "0x8D0210", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D027C", Offset = "0x8D027C", VA = "0x8D027C", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Address(RVA = "0x8D028C", Offset = "0x8D028C", VA = "0x8D028C", Slot = "38")]
		public virtual GameObject GetContainer()
		{
			return null;
		}

		[Address(RVA = "0x8D0294", Offset = "0x8D0294", VA = "0x8D0294", Slot = "39")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8D0404", Offset = "0x8D0404", VA = "0x8D0404", Slot = "40")]
		public virtual void SetAngleTargetWithStepValue(float givenStepValue)
		{
		}

		[Address(RVA = "0x8D0484", Offset = "0x8D0484", VA = "0x8D0484", Slot = "41")]
		public virtual void SetRestingAngleWithStepValue(float givenStepValue)
		{
		}

		[Address(RVA = "0x8D04EC", Offset = "0x8D04EC", VA = "0x8D04EC", Slot = "42")]
		public virtual float GetAngleFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8D0654", Offset = "0x8D0654", VA = "0x8D0654", Slot = "43")]
		public virtual void SetAngleTarget(float newAngle)
		{
		}

		[Address(RVA = "0x8D076C", Offset = "0x8D076C", VA = "0x8D076C", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Address(RVA = "0x8D07DC", Offset = "0x8D07DC", VA = "0x8D07DC", Slot = "44")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Address(RVA = "0x8D07E4", Offset = "0x8D07E4", VA = "0x8D07E4", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x8D0B04", Offset = "0x8D0B04", VA = "0x8D0B04", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x8D0BA4", Offset = "0x8D0BA4", VA = "0x8D0BA4", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x8D0C64", Offset = "0x8D0C64", VA = "0x8D0C64", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Address(RVA = "0x8D0FBC", Offset = "0x8D0FBC", VA = "0x8D0FBC", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Address(RVA = "0x8D10BC", Offset = "0x8D10BC", VA = "0x8D10BC", Slot = "45")]
		protected virtual void SetupParentContainer()
		{
		}

		[Address(RVA = "0x8D1720", Offset = "0x8D1720", VA = "0x8D1720", Slot = "46")]
		protected virtual void RemoveParentContainer()
		{
		}

		[Address(RVA = "0x8D17D0", Offset = "0x8D17D0", VA = "0x8D17D0", Slot = "47")]
		protected virtual void ResetParentContainer()
		{
		}

		[Address(RVA = "0x8D18B0", Offset = "0x8D18B0", VA = "0x8D18B0", Slot = "48")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Address(RVA = "0x8D1A48", Offset = "0x8D1A48", VA = "0x8D1A48", Slot = "49")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Address(RVA = "0x8D1B54", Offset = "0x8D1B54", VA = "0x8D1B54", Slot = "50")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Address(RVA = "0x8D1C7C", Offset = "0x8D1C7C", VA = "0x8D1C7C", Slot = "51")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Address(RVA = "0x8D1D54", Offset = "0x8D1D54", VA = "0x8D1D54", Slot = "52")]
		protected virtual void ManageInteractableListeners(bool state)
		{
		}

		[Address(RVA = "0x8D1EE0", Offset = "0x8D1EE0", VA = "0x8D1EE0", Slot = "53")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D1EF0", Offset = "0x8D1EF0", VA = "0x8D1EF0", Slot = "54")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D1F30", Offset = "0x8D1F30", VA = "0x8D1F30", Slot = "55")]
		protected virtual void CheckLock()
		{
		}

		[Address(RVA = "0x8D1FF0", Offset = "0x8D1FF0", VA = "0x8D1FF0", Slot = "56")]
		protected virtual void ManageGrabbableListeners(bool state)
		{
		}

		[Address(RVA = "0x8D20EC", Offset = "0x8D20EC", VA = "0x8D20EC", Slot = "57")]
		protected virtual void GrabMechanicAngleChanged(object sender, RotateTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x8D21DC", Offset = "0x8D21DC", VA = "0x8D21DC", Slot = "58")]
		protected virtual float SetAngleWithNormalizedValue(float normalizedTargetAngle)
		{
			return default(float);
		}

		[Address(RVA = "0x8D232C", Offset = "0x8D232C", VA = "0x8D232C", Slot = "59")]
		protected virtual void ForceRestingPosition()
		{
		}

		[Address(RVA = "0x8D2408", Offset = "0x8D2408", VA = "0x8D2408", Slot = "60")]
		protected virtual void ForceSnapToStep()
		{
		}

		[Address(RVA = "0x8D258C", Offset = "0x8D258C", VA = "0x8D258C", Slot = "61")]
		protected virtual void SetRotation(float newAngle, float speed)
		{
		}

		[Address(RVA = "0x8D25E4", Offset = "0x8D25E4", VA = "0x8D25E4", Slot = "62")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Address(RVA = "0x8D2690", Offset = "0x8D2690", VA = "0x8D2690")]
		public VRTK_ArtificialRotator()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x659344", Offset = "0x659344")]
	public class VRTK_ArtificialSlider : VRTK_BaseControllable
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B4C8", Offset = "0x65B4C8")]
		private sealed class <SetPositionTargetAtEndOfFrameRoutine>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_ArtificialSlider <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x8D5410", Offset = "0x8D5410", VA = "0x8D5410", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x8D5480", Offset = "0x8D5480", VA = "0x8D5480", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x8D4468", Offset = "0x8D4468", VA = "0x8D4468")]
			[DebuggerHidden]
			public <SetPositionTargetAtEndOfFrameRoutine>d__38(int <>1__state)
			{
			}

			[Address(RVA = "0x8D52CC", Offset = "0x8D52CC", VA = "0x8D52CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x8D52D0", Offset = "0x8D52D0", VA = "0x8D52D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x8D5418", Offset = "0x8D5418", VA = "0x8D5418", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66ED58", Offset = "0x66ED58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66ED58", Offset = "0x66ED58")]
		public float maximumLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EDB8", Offset = "0x66EDB8")]
		public float minMaxThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EDF0", Offset = "0x66EDF0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66EDF0", Offset = "0x66EDF0")]
		[SerializeField]
		protected float positionTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EE54", Offset = "0x66EE54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66EE54", Offset = "0x66EE54")]
		public float restingPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EEA8", Offset = "0x66EEA8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x66EEA8", Offset = "0x66EEA8")]
		public float forceRestingPositionThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66EEFC", Offset = "0x66EEFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EEFC", Offset = "0x66EEFC")]
		public Limits2D stepValueRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EF5C", Offset = "0x66EF5C")]
		public float stepSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EF94", Offset = "0x66EF94")]
		public bool useStepAsValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66EFCC", Offset = "0x66EFCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66EFCC", Offset = "0x66EFCC")]
		public bool snapToStep;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F02C", Offset = "0x66F02C")]
		public float snapForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F064", Offset = "0x66F064")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F064", Offset = "0x66F064")]
		public float trackingSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F0C4", Offset = "0x66F0C4")]
		public bool precisionGrab;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F0FC", Offset = "0x66F0FC")]
		public float detachDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F134", Offset = "0x66F134")]
		public float releaseFriction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F16C", Offset = "0x66F16C")]
		public GameObject[] onlyInteractWith;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected VRTK_InteractableObject controlInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected VRTK_MoveTransformGrabAttach controlGrabAttach;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected VRTK_SwapControllerGrabAction controlSecondaryGrabAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected bool createInteractableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Limits2D axisLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Vector3 previousLocalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected Coroutine setPositionTargetAtEndOfFrameRoutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected bool stillResting;

		[Address(RVA = "0x8D277C", Offset = "0x8D277C", VA = "0x8D277C", Slot = "10")]
		public override float GetValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D27E0", Offset = "0x8D27E0", VA = "0x8D27E0", Slot = "11")]
		public override float GetNormalizedValue()
		{
			return default(float);
		}

		[Address(RVA = "0x8D287C", Offset = "0x8D287C", VA = "0x8D287C", Slot = "12")]
		public override void SetValue(float value)
		{
		}

		[Address(RVA = "0x8D2930", Offset = "0x8D2930", VA = "0x8D2930", Slot = "38")]
		public virtual float GetStepValue(float currentValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8D2A88", Offset = "0x8D2A88", VA = "0x8D2A88", Slot = "39")]
		public virtual void SetPositionTarget(float newPositionTarget, float speed)
		{
		}

		[Address(RVA = "0x8D2A9C", Offset = "0x8D2A9C", VA = "0x8D2A9C", Slot = "40")]
		public virtual void SetPositionTargetWithStepValue(float givenStepValue, float speed)
		{
		}

		[Address(RVA = "0x8D2B18", Offset = "0x8D2B18", VA = "0x8D2B18", Slot = "41")]
		public virtual void SetRestingPositionWithStepValue(float givenStepValue)
		{
		}

		[Address(RVA = "0x8D2B80", Offset = "0x8D2B80", VA = "0x8D2B80", Slot = "42")]
		public virtual float GetPositionFromStepValue(float givenStepValue)
		{
			return default(float);
		}

		[Address(RVA = "0x8D2C74", Offset = "0x8D2C74", VA = "0x8D2C74", Slot = "13")]
		public override bool IsResting()
		{
			return default(bool);
		}

		[Address(RVA = "0x8D2CE4", Offset = "0x8D2CE4", VA = "0x8D2CE4", Slot = "43")]
		public virtual VRTK_InteractableObject GetControlInteractableObject()
		{
			return null;
		}

		[Address(RVA = "0x8D2CEC", Offset = "0x8D2CEC", VA = "0x8D2CEC", Slot = "25")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Address(RVA = "0x8D2E64", Offset = "0x8D2E64", VA = "0x8D2E64", Slot = "23")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x8D2F44", Offset = "0x8D2F44", VA = "0x8D2F44", Slot = "24")]
		protected override void OnDisable()
		{
		}

		[Address(RVA = "0x8D4068", Offset = "0x8D4068", VA = "0x8D4068", Slot = "21")]
		protected override void EmitEvents()
		{
		}

		[Address(RVA = "0x8D4350", Offset = "0x8D4350", VA = "0x8D4350", Slot = "37")]
		protected override ControllableEventArgs EventPayload()
		{
			return default(ControllableEventArgs);
		}

		[Address(RVA = "0x8D43F4", Offset = "0x8D43F4", VA = "0x8D43F4", Slot = "44")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680E48", Offset = "0x680E48")]
		protected virtual IEnumerator SetPositionTargetAtEndOfFrameRoutine()
		{
			return null;
		}

		[Address(RVA = "0x8D4494", Offset = "0x8D4494", VA = "0x8D4494", Slot = "45")]
		protected virtual void SetupInteractableObject()
		{
		}

		[Address(RVA = "0x8D4634", Offset = "0x8D4634", VA = "0x8D4634", Slot = "46")]
		protected virtual void SetupGrabMechanic()
		{
		}

		[Address(RVA = "0x8D4764", Offset = "0x8D4764", VA = "0x8D4764", Slot = "47")]
		protected virtual void SetGrabMechanicParameters()
		{
		}

		[Address(RVA = "0x8D4928", Offset = "0x8D4928", VA = "0x8D4928", Slot = "48")]
		protected virtual void SetupSecondaryAction()
		{
		}

		[Address(RVA = "0x8D4A00", Offset = "0x8D4A00", VA = "0x8D4A00", Slot = "49")]
		protected virtual Vector3 MaximumLength()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x8D4AE4", Offset = "0x8D4AE4", VA = "0x8D4AE4", Slot = "50")]
		protected virtual void SetPositionWithNormalizedValue(float givenTargetPosition, float speed)
		{
		}

		[Address(RVA = "0x8D4BBC", Offset = "0x8D4BBC", VA = "0x8D4BBC", Slot = "51")]
		protected virtual void SnapToPosition(float positionOnAxis, float speed)
		{
		}

		[Address(RVA = "0x8D4D44", Offset = "0x8D4D44", VA = "0x8D4D44", Slot = "52")]
		protected virtual void ManageInteractableListeners(bool state)
		{
		}

		[Address(RVA = "0x8D4ED0", Offset = "0x8D4ED0", VA = "0x8D4ED0", Slot = "53")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D4EE0", Offset = "0x8D4EE0", VA = "0x8D4EE0", Slot = "54")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x8D4F8C", Offset = "0x8D4F8C", VA = "0x8D4F8C", Slot = "55")]
		protected virtual bool ForceRestingPosition()
		{
			return default(bool);
		}

		[Address(RVA = "0x8D504C", Offset = "0x8D504C", VA = "0x8D504C", Slot = "56")]
		protected virtual bool IsGrabbed()
		{
			return default(bool);
		}

		[Address(RVA = "0x8D50F8", Offset = "0x8D50F8", VA = "0x8D50F8", Slot = "57")]
		protected virtual void ManageGrabbableListeners(bool state)
		{
		}

		[Address(RVA = "0x8D51F4", Offset = "0x8D51F4", VA = "0x8D51F4", Slot = "58")]
		protected virtual void GrabMechanicTransformPositionChanged(object sender, MoveTransformGrabAttachEventArgs e)
		{
		}

		[Address(RVA = "0x8D5204", Offset = "0x8D5204", VA = "0x8D5204")]
		public VRTK_ArtificialSlider()
		{
		}
	}
}
namespace VRTK.Highlighters
{
	public abstract class VRTK_BaseHighlighter : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F1A4", Offset = "0x66F1A4")]
		public bool active;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F1DC", Offset = "0x66F1DC")]
		public bool unhighlightOnDisable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool usesClonedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject objectToAffect;

		public abstract void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options);

		public abstract void ResetHighlighter();

		public abstract void Highlight([Optional] Color? color, float duration = 0f);

		public abstract void Unhighlight([Optional] Color? color, float duration = 0f);

		public virtual T GetOption<T>(Dictionary<string, object> options, string key)
		{
			return (T)null;
		}

		[Address(RVA = "0xC1BEA4", Offset = "0xC1BEA4", VA = "0xC1BEA4", Slot = "9")]
		public virtual bool UsesClonedObject()
		{
			return default(bool);
		}

		[Address(RVA = "0xC1BEAC", Offset = "0xC1BEAC", VA = "0xC1BEAC")]
		public static VRTK_BaseHighlighter GetActiveHighlighter(GameObject obj)
		{
			return null;
		}

		[Address(RVA = "0xC1BF7C", Offset = "0xC1BF7C", VA = "0xC1BF7C", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xC1BFBC", Offset = "0xC1BFBC", VA = "0xC1BFBC")]
		protected VRTK_BaseHighlighter()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65937C", Offset = "0x65937C")]
	public class VRTK_MaterialColorSwapHighlighter : VRTK_BaseHighlighter
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B4D8", Offset = "0x65B4D8")]
		private sealed class <CycleColor>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Material material;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color startColor;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Color endColor;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float duration;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public VRTK_MaterialColorSwapHighlighter <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <elapsedTime>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xC1E11C", Offset = "0xC1E11C", VA = "0xC1E11C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xC1E18C", Offset = "0xC1E18C", VA = "0xC1E18C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xC1DDE4", Offset = "0xC1DDE4", VA = "0xC1DDE4")]
			[DebuggerHidden]
			public <CycleColor>d__12(int <>1__state)
			{
			}

			[Address(RVA = "0xC1DED8", Offset = "0xC1DED8", VA = "0xC1DED8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xC1DEDC", Offset = "0xC1DEDC", VA = "0xC1DEDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xC1E124", Offset = "0xC1E124", VA = "0xC1E124", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F214", Offset = "0x66F214")]
		public float emissionDarken;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F24C", Offset = "0x66F24C")]
		public Material customMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Dictionary<string, Material[]> originalSharedRendererMaterials;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<string, Material[]> originalRendererMaterials;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Dictionary<string, Coroutine> faderRoutines;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool resetMainTexture;

		[Address(RVA = "0xC1BFCC", Offset = "0xC1BFCC", VA = "0xC1BFCC", Slot = "4")]
		public override void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xC1D138", Offset = "0xC1D138", VA = "0xC1D138", Slot = "5")]
		public override void ResetHighlighter()
		{
		}

		[Address(RVA = "0xC1D144", Offset = "0xC1D144", VA = "0xC1D144", Slot = "6")]
		public override void Highlight(Color? color, float duration = 0f)
		{
		}

		[Address(RVA = "0xC1D1EC", Offset = "0xC1D1EC", VA = "0xC1D1EC", Slot = "7")]
		public override void Unhighlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Address(RVA = "0xC1D4F4", Offset = "0xC1D4F4", VA = "0xC1D4F4", Slot = "11")]
		protected virtual void StoreOriginalMaterials()
		{
		}

		[Address(RVA = "0xC1D700", Offset = "0xC1D700", VA = "0xC1D700", Slot = "12")]
		protected virtual void ChangeToHighlightColor(Color color, float duration = 0f)
		{
		}

		[Address(RVA = "0xC1DCCC", Offset = "0xC1DCCC", VA = "0xC1DCCC", Slot = "13")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680EAC", Offset = "0x680EAC")]
		protected virtual IEnumerator CycleColor(Material material, Color startColor, Color endColor, float duration)
		{
			return null;
		}

		[Address(RVA = "0xC1DE10", Offset = "0xC1DE10", VA = "0xC1DE10")]
		public VRTK_MaterialColorSwapHighlighter()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6593B4", Offset = "0x6593B4")]
	public class VRTK_MaterialPropertyBlockColorSwapHighlighter : VRTK_MaterialColorSwapHighlighter
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B4E8", Offset = "0x65B4E8")]
		private sealed class <CycleColor>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MaterialPropertyBlock highlightMaterialPropertyBlock;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color endColor;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float duration;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Renderer renderer;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <elapsedTime>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xC1EED8", Offset = "0xC1EED8", VA = "0xC1EED8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xC1EF48", Offset = "0xC1EF48", VA = "0xC1EF48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xC1EBD4", Offset = "0xC1EBD4", VA = "0xC1EBD4")]
			[DebuggerHidden]
			public <CycleColor>d__6(int <>1__state)
			{
			}

			[Address(RVA = "0xC1EC8C", Offset = "0xC1EC8C", VA = "0xC1EC8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xC1EC90", Offset = "0xC1EC90", VA = "0xC1EC90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xC1EEE0", Offset = "0xC1EEE0", VA = "0xC1EEE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Dictionary<string, MaterialPropertyBlock> originalMaterialPropertyBlocks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Dictionary<string, MaterialPropertyBlock> highlightMaterialPropertyBlocks;

		[Address(RVA = "0xC1E194", Offset = "0xC1E194", VA = "0xC1E194", Slot = "4")]
		public override void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xC1E290", Offset = "0xC1E290", VA = "0xC1E290", Slot = "7")]
		public override void Unhighlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Address(RVA = "0xC1E53C", Offset = "0xC1E53C", VA = "0xC1E53C", Slot = "11")]
		protected override void StoreOriginalMaterials()
		{
		}

		[Address(RVA = "0xC1E73C", Offset = "0xC1E73C", VA = "0xC1E73C", Slot = "12")]
		protected override void ChangeToHighlightColor(Color color, float duration = 0f)
		{
		}

		[Address(RVA = "0xC1EAE8", Offset = "0xC1EAE8", VA = "0xC1EAE8", Slot = "14")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680F10", Offset = "0x680F10")]
		protected virtual IEnumerator CycleColor(Renderer renderer, MaterialPropertyBlock highlightMaterialPropertyBlock, Color endColor, float duration)
		{
			return null;
		}

		[Address(RVA = "0xC1EC00", Offset = "0xC1EC00", VA = "0xC1EC00")]
		public VRTK_MaterialPropertyBlockColorSwapHighlighter()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6593EC", Offset = "0x6593EC")]
	public class VRTK_OutlineObjectCopyHighlighter : VRTK_BaseHighlighter
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F284", Offset = "0x66F284")]
		public float thickness;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F2BC", Offset = "0x66F2BC")]
		public GameObject[] customOutlineModels;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F2F4", Offset = "0x66F2F4")]
		public string[] customOutlineModelPaths;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F32C", Offset = "0x66F32C")]
		public bool enableSubmeshHighlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Material stencilOutline;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Renderer[] highlightModels;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected string[] copyComponents;

		[Address(RVA = "0xC1EF50", Offset = "0xC1EF50", VA = "0xC1EF50", Slot = "4")]
		public override void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xC1F130", Offset = "0xC1F130", VA = "0xC1F130", Slot = "5")]
		public override void ResetHighlighter()
		{
		}

		[Address(RVA = "0xC1F190", Offset = "0xC1F190", VA = "0xC1F190", Slot = "6")]
		public override void Highlight(Color? color, float duration = 0f)
		{
		}

		[Address(RVA = "0xC1F410", Offset = "0xC1F410", VA = "0xC1F410", Slot = "7")]
		public override void Unhighlight([Optional] Color? color, float duration = 0f)
		{
		}

		[Address(RVA = "0xC1F594", Offset = "0xC1F594", VA = "0xC1F594", Slot = "11")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xC1F614", Offset = "0xC1F614", VA = "0xC1F614", Slot = "12")]
		protected virtual void OnDestroy()
		{
		}

		[Address(RVA = "0xC1F784", Offset = "0xC1F784", VA = "0xC1F784", Slot = "13")]
		protected virtual void ResetHighlighterWithCustomModels()
		{
		}

		[Address(RVA = "0xC1F8E4", Offset = "0xC1F8E4", VA = "0xC1F8E4", Slot = "14")]
		protected virtual void ResetHighlighterWithCustomModelPaths()
		{
		}

		[Address(RVA = "0xC1FA3C", Offset = "0xC1FA3C", VA = "0xC1FA3C", Slot = "15")]
		protected virtual void ResetHighlightersWithCurrentGameObject()
		{
		}

		[Address(RVA = "0xC1FB20", Offset = "0xC1FB20", VA = "0xC1FB20", Slot = "16")]
		protected virtual void SetOptions([Optional] Dictionary<string, object> options)
		{
		}

		[Address(RVA = "0xC1FC60", Offset = "0xC1FC60", VA = "0xC1FC60", Slot = "17")]
		protected virtual void DeleteExistingHighlightModels()
		{
		}

		[Address(RVA = "0xC1FDC0", Offset = "0xC1FDC0", VA = "0xC1FDC0", Slot = "18")]
		protected virtual Renderer CreateHighlightModel(GameObject givenOutlineModel, string givenOutlineModelPath)
		{
			return null;
		}

		[Address(RVA = "0xC20970", Offset = "0xC20970", VA = "0xC20970")]
		public VRTK_OutlineObjectCopyHighlighter()
		{
		}
	}
}
namespace VRTK.Examples
{
	public class VRTKExample_ControllerEventsDelegateListeners : MonoBehaviour
	{
		public enum EventQuickSelect
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Custom,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			All,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AxisOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SenseAxisOnly
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F364", Offset = "0x66F364")]
		public EventQuickSelect quickSelect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F39C", Offset = "0x66F39C")]
		public bool triggerButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool gripButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool touchpadButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool touchpadTwoButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool buttonOneButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool buttonTwoButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool startMenuButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F3D4", Offset = "0x66F3D4")]
		public bool triggerAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool gripAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool touchpadAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool touchpadTwoAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F40C", Offset = "0x66F40C")]
		public bool triggerSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool touchpadSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool middleFingerSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool ringFingerSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool pinkyFingerSenseAxisEvents;

		[Address(RVA = "0x9D58E8", Offset = "0x9D58E8", VA = "0x9D58E8")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x9D6754", Offset = "0x9D6754", VA = "0x9D6754")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x9D7420", Offset = "0x9D7420", VA = "0x9D7420")]
		private void LateUpdate()
		{
		}

		[Address(RVA = "0x9D7490", Offset = "0x9D7490", VA = "0x9D7490")]
		private void DebugLogger(uint index, string button, string action, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D7B20", Offset = "0x9D7B20", VA = "0x9D7B20")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D7BE8", Offset = "0x9D7BE8", VA = "0x9D7BE8")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D7CB0", Offset = "0x9D7CB0", VA = "0x9D7CB0")]
		private void DoTriggerTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D7D78", Offset = "0x9D7D78", VA = "0x9D7D78")]
		private void DoTriggerTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D7E40", Offset = "0x9D7E40", VA = "0x9D7E40")]
		private void DoTriggerHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D7F08", Offset = "0x9D7F08", VA = "0x9D7F08")]
		private void DoTriggerHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D7FD0", Offset = "0x9D7FD0", VA = "0x9D7FD0")]
		private void DoTriggerClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9098", Offset = "0x9D9098", VA = "0x9D9098")]
		private void DoTriggerUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9160", Offset = "0x9D9160", VA = "0x9D9160")]
		private void DoTriggerAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9228", Offset = "0x9D9228", VA = "0x9D9228")]
		private void DoTriggerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D92F0", Offset = "0x9D92F0", VA = "0x9D92F0")]
		private void DoGripPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D93B8", Offset = "0x9D93B8", VA = "0x9D93B8")]
		private void DoGripReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9480", Offset = "0x9D9480", VA = "0x9D9480")]
		private void DoGripTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9548", Offset = "0x9D9548", VA = "0x9D9548")]
		private void DoGripTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9610", Offset = "0x9D9610", VA = "0x9D9610")]
		private void DoGripHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D96D8", Offset = "0x9D96D8", VA = "0x9D96D8")]
		private void DoGripHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D97A0", Offset = "0x9D97A0", VA = "0x9D97A0")]
		private void DoGripClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9868", Offset = "0x9D9868", VA = "0x9D9868")]
		private void DoGripUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9930", Offset = "0x9D9930", VA = "0x9D9930")]
		private void DoGripAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D99F8", Offset = "0x9D99F8", VA = "0x9D99F8")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9AC0", Offset = "0x9D9AC0", VA = "0x9D9AC0")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9B88", Offset = "0x9D9B88", VA = "0x9D9B88")]
		private void DoTouchpadTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9C50", Offset = "0x9D9C50", VA = "0x9D9C50")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9D18", Offset = "0x9D9D18", VA = "0x9D9D18")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9DE0", Offset = "0x9D9DE0", VA = "0x9D9DE0")]
		private void DoTouchpadTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9EA8", Offset = "0x9D9EA8", VA = "0x9D9EA8")]
		private void DoTouchpadTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D9F70", Offset = "0x9D9F70", VA = "0x9D9F70")]
		private void DoTouchpadTwoTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB038", Offset = "0x9DB038", VA = "0x9DB038")]
		private void DoTouchpadTwoTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB100", Offset = "0x9DB100", VA = "0x9DB100")]
		private void DoTouchpadTwoAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB1C8", Offset = "0x9DB1C8", VA = "0x9DB1C8")]
		private void DoTouchpadSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB290", Offset = "0x9DB290", VA = "0x9DB290")]
		private void DoButtonOnePressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB358", Offset = "0x9DB358", VA = "0x9DB358")]
		private void DoButtonOneReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB420", Offset = "0x9DB420", VA = "0x9DB420")]
		private void DoButtonOneTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB4E8", Offset = "0x9DB4E8", VA = "0x9DB4E8")]
		private void DoButtonOneTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB5B0", Offset = "0x9DB5B0", VA = "0x9DB5B0")]
		private void DoButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB678", Offset = "0x9DB678", VA = "0x9DB678")]
		private void DoButtonTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB740", Offset = "0x9DB740", VA = "0x9DB740")]
		private void DoButtonTwoTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB808", Offset = "0x9DB808", VA = "0x9DB808")]
		private void DoButtonTwoTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB8D0", Offset = "0x9DB8D0", VA = "0x9DB8D0")]
		private void DoStartMenuPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DB998", Offset = "0x9DB998", VA = "0x9DB998")]
		private void DoStartMenuReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DBA60", Offset = "0x9DBA60", VA = "0x9DBA60")]
		private void DoControllerEnabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DBB14", Offset = "0x9DBB14", VA = "0x9DBB14")]
		private void DoControllerDisabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DBBC8", Offset = "0x9DBBC8", VA = "0x9DBBC8")]
		private void DoControllerIndexChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DBC7C", Offset = "0x9DBC7C", VA = "0x9DBC7C")]
		private void DoMiddleFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DBD44", Offset = "0x9DBD44", VA = "0x9DBD44")]
		private void DoRingFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DBE0C", Offset = "0x9DBE0C", VA = "0x9DBE0C")]
		private void DoPinkyFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9DBED4", Offset = "0x9DBED4", VA = "0x9DBED4")]
		public VRTKExample_ControllerEventsDelegateListeners()
		{
		}
	}
	public class VRTKExample_PointerObjectHighlighterActivator : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_DestinationMarker pointer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color hoverColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color selectColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool logEnterEvent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool logHoverEvent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool logExitEvent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public bool logSetEvent;

		[Address(RVA = "0xC00EC8", Offset = "0xC00EC8", VA = "0xC00EC8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xC01200", Offset = "0xC01200", VA = "0xC01200", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xC01398", Offset = "0xC01398", VA = "0xC01398", Slot = "6")]
		protected virtual void DestinationMarkerEnter(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC014A4", Offset = "0xC014A4", VA = "0xC014A4")]
		private void DestinationMarkerHover(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC01594", Offset = "0xC01594", VA = "0xC01594", Slot = "7")]
		protected virtual void DestinationMarkerExit(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC016A4", Offset = "0xC016A4", VA = "0xC016A4", Slot = "8")]
		protected virtual void DestinationMarkerSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC017B0", Offset = "0xC017B0", VA = "0xC017B0", Slot = "9")]
		protected virtual void ToggleHighlight(Transform target, Color color)
		{
		}

		[Address(RVA = "0xC019B0", Offset = "0xC019B0", VA = "0xC019B0", Slot = "10")]
		protected virtual void DebugLogger(uint index, string action, Transform target, RaycastHit raycastHit, float distance, Vector3 tipPosition)
		{
		}

		[Address(RVA = "0xC01F60", Offset = "0xC01F60", VA = "0xC01F60")]
		public VRTKExample_PointerObjectHighlighterActivator()
		{
		}
	}
	public abstract class VRTKExample_BezierPointerChanger : VRTKExample_OptionTile
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VRTK_BezierPointerRenderer leftRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VRTK_BezierPointerRenderer rightRenderer;

		[Address(RVA = "0x9D5314", Offset = "0x9D5314", VA = "0x9D5314", Slot = "4")]
		public override void Activate()
		{
		}

		protected abstract void StyleRenderer(VRTK_BezierPointerRenderer renderer);

		[Address(RVA = "0x9D5350", Offset = "0x9D5350", VA = "0x9D5350", Slot = "8")]
		protected virtual void ResetRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Address(RVA = "0x9D5520", Offset = "0x9D5520", VA = "0x9D5520")]
		protected VRTKExample_BezierPointerChanger()
		{
		}
	}
	public class VRTKExample_BezierPointerCustomStyles : VRTKExample_BezierPointerChanger
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color validLocationColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color invalidLocationColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject tracerPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject cursorPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject validLocationPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject invalidLocationPrefab;

		[Address(RVA = "0x9D5528", Offset = "0x9D5528", VA = "0x9D5528", Slot = "7")]
		protected override void StyleRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Address(RVA = "0x9D56F8", Offset = "0x9D56F8", VA = "0x9D56F8")]
		public VRTKExample_BezierPointerCustomStyles()
		{
		}
	}
	public class VRTKExample_BezierPointerDefaults : VRTKExample_BezierPointerChanger
	{
		[Address(RVA = "0x9D57A8", Offset = "0x9D57A8", VA = "0x9D57A8", Slot = "7")]
		protected override void StyleRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Address(RVA = "0x9D57B4", Offset = "0x9D57B4", VA = "0x9D57B4")]
		public VRTKExample_BezierPointerDefaults()
		{
		}
	}
	public class VRTKExample_BezierPointerLineRenderer : VRTKExample_BezierPointerChanger
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject lineRendererPrefab;

		[Address(RVA = "0x9D57BC", Offset = "0x9D57BC", VA = "0x9D57BC", Slot = "7")]
		protected override void StyleRenderer(VRTK_BezierPointerRenderer renderer)
		{
		}

		[Address(RVA = "0x9D58E0", Offset = "0x9D58E0", VA = "0x9D58E0")]
		public VRTKExample_BezierPointerLineRenderer()
		{
		}
	}
	public class ControllableReactor : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable controllable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text displayText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string outputOnMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string outputOnMin;

		[Address(RVA = "0x9BD2E0", Offset = "0x9BD2E0", VA = "0x9BD2E0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BD444", Offset = "0x9BD444", VA = "0x9BD444", Slot = "5")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9BD518", Offset = "0x9BD518", VA = "0x9BD518", Slot = "6")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9BD5AC", Offset = "0x9BD5AC", VA = "0x9BD5AC", Slot = "7")]
		protected virtual void MinLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9BD640", Offset = "0x9BD640", VA = "0x9BD640")]
		public ControllableReactor()
		{
		}
	}
	public class SnapDropZoneToggle : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_SnapDropZone toggleZoneA;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_SnapDropZone toggleZoneB;

		[Address(RVA = "0x9C8EFC", Offset = "0x9C8EFC", VA = "0x9C8EFC", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C9158", Offset = "0x9C9158", VA = "0x9C9158", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9C93B4", Offset = "0x9C93B4", VA = "0x9C93B4", Slot = "6")]
		protected virtual void ToggleZoneA(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C9494", Offset = "0x9C9494", VA = "0x9C9494", Slot = "7")]
		protected virtual void UntoggleZoneA(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C9574", Offset = "0x9C9574", VA = "0x9C9574", Slot = "8")]
		protected virtual void ToggleZoneB(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C9654", Offset = "0x9C9654", VA = "0x9C9654", Slot = "9")]
		protected virtual void UntoggleZoneB(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C9734", Offset = "0x9C9734", VA = "0x9C9734")]
		public SnapDropZoneToggle()
		{
		}
	}
	public class ToggleCustomHands : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ControllerEvents leftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_ControllerEvents rightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject leftHandAvatar;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rightHandAvatar;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool state;

		[Address(RVA = "0x9D10DC", Offset = "0x9D10DC", VA = "0x9D10DC", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9D122C", Offset = "0x9D122C", VA = "0x9D122C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9D1378", Offset = "0x9D1378", VA = "0x9D1378", Slot = "6")]
		protected virtual void ToggleHands(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D1390", Offset = "0x9D1390", VA = "0x9D1390", Slot = "7")]
		protected virtual void ToggleVisibility()
		{
		}

		[Address(RVA = "0x9D13D4", Offset = "0x9D13D4", VA = "0x9D13D4", Slot = "8")]
		protected virtual void ToggleAvatarVisibility()
		{
		}

		[Address(RVA = "0x9D14E0", Offset = "0x9D14E0", VA = "0x9D14E0", Slot = "9")]
		protected virtual void ToggleSDKVisibility()
		{
		}

		[Address(RVA = "0x9D1764", Offset = "0x9D1764", VA = "0x9D1764", Slot = "10")]
		protected virtual void ToggleControllerRenderer(GameObject controller, string findPath = "")
		{
		}

		[Address(RVA = "0x9D18D4", Offset = "0x9D18D4", VA = "0x9D18D4", Slot = "11")]
		protected virtual void ToggleScriptAlias()
		{
		}

		[Address(RVA = "0x9D1988", Offset = "0x9D1988", VA = "0x9D1988", Slot = "12")]
		protected virtual void CycleScriptAlias(GameObject controller, GameObject avatar)
		{
		}

		[Address(RVA = "0x9D1C10", Offset = "0x9D1C10", VA = "0x9D1C10")]
		public ToggleCustomHands()
		{
		}
	}
	public class TogglePointerInteraction : MonoBehaviour
	{
		public enum OptionType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			InteractWithObjects,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GrabToPointerTip
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OptionType optionType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_Pointer[] pointers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_BaseControllable controllable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text displayText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string maxText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string minText;

		[Address(RVA = "0x9D2658", Offset = "0x9D2658", VA = "0x9D2658", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9D27BC", Offset = "0x9D27BC", VA = "0x9D27BC", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9D28D0", Offset = "0x9D28D0", VA = "0x9D28D0", Slot = "6")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9D28E4", Offset = "0x9D28E4", VA = "0x9D28E4", Slot = "7")]
		protected virtual void MinLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9D28F8", Offset = "0x9D28F8", VA = "0x9D28F8", Slot = "8")]
		protected virtual void SetOption(bool value, string text)
		{
		}

		[Address(RVA = "0x9D2AB4", Offset = "0x9D2AB4", VA = "0x9D2AB4")]
		public TogglePointerInteraction()
		{
		}
	}
	public class ClimbableHandLift : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject interactableObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform handleTop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ropeTop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ropeBottom;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject rope;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool isMoving;

		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		protected bool isMovingUp;

		[Address(RVA = "0x9BB6DC", Offset = "0x9BB6DC", VA = "0x9BB6DC", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BB800", Offset = "0x9BB800", VA = "0x9BB800", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9BB8D4", Offset = "0x9BB8D4", VA = "0x9BB8D4", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x9BBCC0", Offset = "0x9BBCC0", VA = "0x9BBCC0", Slot = "7")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9BBCCC", Offset = "0x9BBCCC", VA = "0x9BBCCC")]
		public ClimbableHandLift()
		{
		}
	}
	public class ElevatorControl : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable controllable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject platform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxHeight;

		[Address(RVA = "0x9BE7F0", Offset = "0x9BE7F0", VA = "0x9BE7F0", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BE8C4", Offset = "0x9BE8C4", VA = "0x9BE8C4", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9BE998", Offset = "0x9BE998", VA = "0x9BE998", Slot = "6")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9BEAD0", Offset = "0x9BEAD0", VA = "0x9BEAD0")]
		public ElevatorControl()
		{
		}
	}
	public class IgnoreTeleportDummy : MonoBehaviour
	{
		[Address(RVA = "0x9BFD7C", Offset = "0x9BFD7C", VA = "0x9BFD7C")]
		public IgnoreTeleportDummy()
		{
		}
	}
	public class OptionsMenu : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ControllerEvents leftController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_ControllerEvents rightController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject controlObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool state;

		[Address(RVA = "0x9C2190", Offset = "0x9C2190", VA = "0x9C2190", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C21E0", Offset = "0x9C21E0", VA = "0x9C21E0", Slot = "5")]
		protected virtual void RegisterEvents(VRTK_ControllerEvents events)
		{
		}

		[Address(RVA = "0x9C22C0", Offset = "0x9C22C0", VA = "0x9C22C0", Slot = "6")]
		protected virtual void ButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C2300", Offset = "0x9C2300", VA = "0x9C2300", Slot = "7")]
		protected virtual void Move()
		{
		}

		[Address(RVA = "0x9C2738", Offset = "0x9C2738", VA = "0x9C2738", Slot = "8")]
		protected virtual void SetObjectVisibility()
		{
		}

		[Address(RVA = "0x9C2774", Offset = "0x9C2774", VA = "0x9C2774")]
		public OptionsMenu()
		{
		}
	}
	public class ToggleGameObject : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable controllable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text displayText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text descriptionText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject toggleObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string onText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string offText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string description;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_InteractableObject io;

		[Address(RVA = "0x9D1C18", Offset = "0x9D1C18", VA = "0x9D1C18", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9D1D3C", Offset = "0x9D1D3C", VA = "0x9D1D3C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9D1ED4", Offset = "0x9D1ED4", VA = "0x9D1ED4", Slot = "6")]
		protected virtual void SetupIOListeners()
		{
		}

		[Address(RVA = "0x9D1FD0", Offset = "0x9D1FD0", VA = "0x9D1FD0", Slot = "7")]
		protected virtual void MinLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9D200C", Offset = "0x9D200C", VA = "0x9D200C", Slot = "8")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9D2048", Offset = "0x9D2048", VA = "0x9D2048", Slot = "9")]
		protected virtual void InteractableObjectTouched(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9D20F4", Offset = "0x9D20F4", VA = "0x9D20F4", Slot = "10")]
		protected virtual void ToggleObject(bool state)
		{
		}

		[Address(RVA = "0x9D21A4", Offset = "0x9D21A4", VA = "0x9D21A4", Slot = "11")]
		protected virtual void UpdateText(string text)
		{
		}

		[Address(RVA = "0x9D225C", Offset = "0x9D225C", VA = "0x9D225C")]
		public ToggleGameObject()
		{
		}
	}
	[Serializable]
	public class ToggleGameObjectSliderOptions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject option;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string description;

		[Address(RVA = "0x9D2650", Offset = "0x9D2650", VA = "0x9D2650")]
		public ToggleGameObjectSliderOptions()
		{
		}
	}
	public class ToggleGameObjectSlider : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_ArtificialSlider slider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text descriptionText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToggleGameObjectSliderOptions[] options;

		[Address(RVA = "0x9D22D4", Offset = "0x9D22D4", VA = "0x9D22D4", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9D23AC", Offset = "0x9D23AC", VA = "0x9D23AC", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9D2480", Offset = "0x9D2480", VA = "0x9D2480", Slot = "6")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9D2514", Offset = "0x9D2514", VA = "0x9D2514", Slot = "7")]
		protected virtual void ToggleOption(int index)
		{
		}

		[Address(RVA = "0x9D2648", Offset = "0x9D2648", VA = "0x9D2648")]
		public ToggleGameObjectSlider()
		{
		}
	}
	public class PanelMenuSaucerGrid : MonoBehaviour
	{
		protected enum Direction
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Up,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Down,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Left,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridLayoutGroup gridLayoutGroup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer changeObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_PanelMenuItemController panelMenuController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color[] colours;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int currentIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected readonly Color colorDefault;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected readonly Color colorSelected;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected readonly float colorAlpha;

		[Address(RVA = "0x9C3F18", Offset = "0x9C3F18", VA = "0x9C3F18", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C40F0", Offset = "0x9C40F0", VA = "0x9C40F0", Slot = "5")]
		protected virtual void PanelMenuItemTriggerPressed(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C4238", Offset = "0x9C4238", VA = "0x9C4238", Slot = "6")]
		protected virtual void PanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C4248", Offset = "0x9C4248", VA = "0x9C4248", Slot = "7")]
		protected virtual void PanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C4258", Offset = "0x9C4258", VA = "0x9C4258", Slot = "8")]
		protected virtual void PanelMenuItemSwipeBottom(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C4268", Offset = "0x9C4268", VA = "0x9C4268", Slot = "9")]
		protected virtual void PanelMenuItemSwipeTop(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C4278", Offset = "0x9C4278", VA = "0x9C4278", Slot = "10")]
		protected virtual void SetGridLayoutItemSelectedState(int index)
		{
		}

		[Address(RVA = "0x9C475C", Offset = "0x9C475C", VA = "0x9C475C", Slot = "11")]
		protected virtual bool MoveSelectGridLayoutItem(Direction direction)
		{
			return default(bool);
		}

		[Address(RVA = "0x9C47B0", Offset = "0x9C47B0", VA = "0x9C47B0", Slot = "12")]
		protected virtual int FindNextItemBasedOnMoveDirection(Direction direction)
		{
			return default(int);
		}

		[Address(RVA = "0x9C4950", Offset = "0x9C4950", VA = "0x9C4950")]
		public PanelMenuSaucerGrid()
		{
		}
	}
	public class PanelMenuSphereSlider : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider slider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer changeObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_PanelMenuItemController panelMenuController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color[] colours;

		[Address(RVA = "0x9C49D8", Offset = "0x9C49D8", VA = "0x9C49D8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C4AEC", Offset = "0x9C4AEC", VA = "0x9C4AEC", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9C4C00", Offset = "0x9C4C00", VA = "0x9C4C00", Slot = "6")]
		protected virtual void PanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C4CEC", Offset = "0x9C4CEC", VA = "0x9C4CEC", Slot = "7")]
		protected virtual void PanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C4DD8", Offset = "0x9C4DD8", VA = "0x9C4DD8", Slot = "8")]
		protected virtual void SetColor()
		{
		}

		[Address(RVA = "0x9C4F74", Offset = "0x9C4F74", VA = "0x9C4F74")]
		public PanelMenuSphereSlider()
		{
		}
	}
	public class BeamRotator : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F444", Offset = "0x66F444")]
		public float degreesPerSecond;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F47C", Offset = "0x66F47C")]
		public Vector3 rotationAxis;

		[Address(RVA = "0x9BAC6C", Offset = "0x9BAC6C", VA = "0x9BAC6C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BAC78", Offset = "0x9BAC78", VA = "0x9BAC78", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x9BACF0", Offset = "0x9BACF0", VA = "0x9BACF0")]
		public BeamRotator()
		{
		}
	}
	public class FireExtinguisher_Base : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F4B4", Offset = "0x66F4B4")]
		public Animation leverAnimation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public FireExtinguisher_Sprayer sprayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected VRTK_ControllerEvents controllerEvents;

		[Address(RVA = "0x9BEAE0", Offset = "0x9BEAE0", VA = "0x9BEAE0", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0x9BEB60", Offset = "0x9BEB60", VA = "0x9BEB60", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Address(RVA = "0x9BEB8C", Offset = "0x9BEB8C", VA = "0x9BEB8C", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9BECE0", Offset = "0x9BECE0", VA = "0x9BECE0", Slot = "106")]
		protected virtual void Spray(float power)
		{
		}

		[Address(RVA = "0x9BED78", Offset = "0x9BED78", VA = "0x9BED78", Slot = "107")]
		protected virtual void SetHandleFrame(float frame)
		{
		}

		[Address(RVA = "0x9BEE68", Offset = "0x9BEE68", VA = "0x9BEE68")]
		public FireExtinguisher_Base()
		{
		}
	}
	public class FireExtinguisher_Sprayer : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F4EC", Offset = "0x66F4EC")]
		public FireExtinguisher_Base baseCan;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float breakDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float maxSprayPower;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected GameObject waterSpray;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected ParticleSystem particles;

		[Address(RVA = "0x9BED30", Offset = "0x9BED30", VA = "0x9BED30")]
		public void Spray(float power)
		{
		}

		[Address(RVA = "0x9BEE70", Offset = "0x9BEE70", VA = "0x9BEE70", Slot = "64")]
		protected override void Awake()
		{
		}

		[Address(RVA = "0x9BEF40", Offset = "0x9BEF40", VA = "0x9BEF40", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9BF088", Offset = "0x9BF088", VA = "0x9BF088", Slot = "106")]
		protected virtual void PlayParticles(float power)
		{
		}

		[Address(RVA = "0x9BF144", Offset = "0x9BF144", VA = "0x9BF144")]
		public FireExtinguisher_Sprayer()
		{
		}
	}
	public class GunShoot : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject projectile;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform projectileSpawnPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float projectileSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float projectileLife;

		[Address(RVA = "0x9BF484", Offset = "0x9BF484", VA = "0x9BF484", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BF5A8", Offset = "0x9BF5A8", VA = "0x9BF5A8", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9BF67C", Offset = "0x9BF67C", VA = "0x9BF67C", Slot = "6")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9BF688", Offset = "0x9BF688", VA = "0x9BF688", Slot = "7")]
		protected virtual void FireProjectile()
		{
		}

		[Address(RVA = "0x9BF928", Offset = "0x9BF928", VA = "0x9BF928")]
		public GunShoot()
		{
		}
	}
	public class InteractableLamp : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Rigidbody[] lampRigidbodies;

		[Address(RVA = "0x9BFD84", Offset = "0x9BFD84", VA = "0x9BFD84", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BFF24", Offset = "0x9BFF24", VA = "0x9BFF24", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9C0038", Offset = "0x9C0038", VA = "0x9C0038", Slot = "6")]
		protected virtual void InteractableObjectUngrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9C0048", Offset = "0x9C0048", VA = "0x9C0048", Slot = "7")]
		protected virtual void InteractableObjectGrabbed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9C0058", Offset = "0x9C0058", VA = "0x9C0058", Slot = "8")]
		protected virtual void ToggleKinematics(bool state)
		{
		}

		[Address(RVA = "0x9C00E4", Offset = "0x9C00E4", VA = "0x9C00E4")]
		public InteractableLamp()
		{
		}
	}
	public class ScaleOnUse : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B4F8", Offset = "0x65B4F8")]
		private sealed class <ScaleRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ScaleOnUse <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 originalScale;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetScale;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <progress>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x9C87E8", Offset = "0x9C87E8", VA = "0x9C87E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x9C8858", Offset = "0x9C8858", VA = "0x9C8858", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x9C8440", Offset = "0x9C8440", VA = "0x9C8440")]
			[DebuggerHidden]
			public <ScaleRoutine>d__12(int <>1__state)
			{
			}

			[Address(RVA = "0x9C85E0", Offset = "0x9C85E0", VA = "0x9C85E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x9C85E4", Offset = "0x9C85E4", VA = "0x9C85E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x9C87F0", Offset = "0x9C87F0", VA = "0x9C87F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject objectToScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 unuseScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 useScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float scaleSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 scaleTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Coroutine scaleRoutine;

		[Address(RVA = "0x9C7F98", Offset = "0x9C7F98", VA = "0x9C7F98", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C8104", Offset = "0x9C8104", VA = "0x9C8104", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9C8228", Offset = "0x9C8228", VA = "0x9C8228", Slot = "6")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9C82B0", Offset = "0x9C82B0", VA = "0x9C82B0", Slot = "7")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9C8338", Offset = "0x9C8338", VA = "0x9C8338", Slot = "8")]
		protected virtual void CancelScale()
		{
		}

		[Address(RVA = "0x9C836C", Offset = "0x9C836C", VA = "0x9C836C", Slot = "9")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680F74", Offset = "0x680F74")]
		protected virtual IEnumerator ScaleRoutine(Vector3 originalScale, Vector3 targetScale)
		{
			return null;
		}

		[Address(RVA = "0x9C846C", Offset = "0x9C846C", VA = "0x9C846C", Slot = "10")]
		protected virtual void ForceScale(Vector3 targetScale)
		{
		}

		[Address(RVA = "0x9C8550", Offset = "0x9C8550", VA = "0x9C8550")]
		public ScaleOnUse()
		{
		}
	}
	public class InteractableWhirlyGig : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_InteractableObject linkedObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spinSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Transform spinner;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool spinning;

		[Address(RVA = "0x9C0144", Offset = "0x9C0144", VA = "0x9C0144", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C02D4", Offset = "0x9C02D4", VA = "0x9C02D4", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9C03E8", Offset = "0x9C03E8", VA = "0x9C03E8", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x9C0488", Offset = "0x9C0488", VA = "0x9C0488", Slot = "7")]
		protected virtual void InteractableObjectUsed(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9C0494", Offset = "0x9C0494", VA = "0x9C0494", Slot = "8")]
		protected virtual void InteractableObjectUnused(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9C049C", Offset = "0x9C049C", VA = "0x9C049C")]
		public InteractableWhirlyGig()
		{
		}
	}
	public abstract class VRTKExample_OptionTile : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image backgroundImage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color highlightColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Color originalColor;

		public abstract void Activate();

		[Address(RVA = "0xC00560", Offset = "0xC00560", VA = "0xC00560", Slot = "5")]
		public virtual void Highlight()
		{
		}

		[Address(RVA = "0xC00660", Offset = "0xC00660", VA = "0xC00660", Slot = "6")]
		public virtual void Unhighlight()
		{
		}

		[Address(RVA = "0xC00734", Offset = "0xC00734", VA = "0xC00734")]
		protected VRTKExample_OptionTile()
		{
		}
	}
	public class VRTKExample_OptionTilePointerSelector : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_DestinationMarker pointer;

		[Address(RVA = "0xC00778", Offset = "0xC00778", VA = "0xC00778", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0xC00A6C", Offset = "0xC00A6C", VA = "0xC00A6C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0xC00BC0", Offset = "0xC00BC0", VA = "0xC00BC0", Slot = "6")]
		protected virtual void DestinationMarkerEnter(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC00CC0", Offset = "0xC00CC0", VA = "0xC00CC0", Slot = "7")]
		protected virtual void DestinationMarkerExit(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC00DC0", Offset = "0xC00DC0", VA = "0xC00DC0", Slot = "8")]
		protected virtual void DestinationMarkerSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC00EC0", Offset = "0xC00EC0", VA = "0xC00EC0")]
		public VRTKExample_OptionTilePointerSelector()
		{
		}
	}
	public class AutoRotation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F524", Offset = "0x66F524")]
		public float degPerSec;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F55C", Offset = "0x66F55C")]
		public Vector3 rotAxis;

		[Address(RVA = "0x9BAB68", Offset = "0x9BAB68", VA = "0x9BAB68")]
		private void Start()
		{
		}

		[Address(RVA = "0x9BAB74", Offset = "0x9BAB74", VA = "0x9BAB74")]
		private void Update()
		{
		}

		[Address(RVA = "0x9BABEC", Offset = "0x9BABEC", VA = "0x9BABEC")]
		public AutoRotation()
		{
		}
	}
	public class Breakable_Cube : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float breakForce;

		[Address(RVA = "0x9BAD70", Offset = "0x9BAD70", VA = "0x9BAD70")]
		private void Start()
		{
		}

		[Address(RVA = "0x9BADDC", Offset = "0x9BADDC", VA = "0x9BADDC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x9BAE14", Offset = "0x9BAE14", VA = "0x9BAE14")]
		private float GetCollisionForce(Collision collision)
		{
			return default(float);
		}

		[Address(RVA = "0x9BAFC4", Offset = "0x9BAFC4", VA = "0x9BAFC4")]
		private void ExplodeCube(float force)
		{
		}

		[Address(RVA = "0x9BB140", Offset = "0x9BB140", VA = "0x9BB140")]
		private void ExplodeFace(Transform face, float force)
		{
		}

		[Address(RVA = "0x9BB2F4", Offset = "0x9BB2F4", VA = "0x9BB2F4")]
		public Breakable_Cube()
		{
		}
	}
	public class ButtonReactor : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_PhysicsPusher buttonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_ArtificialPusher artbuttonEvents;

		[Address(RVA = "0x9BB304", Offset = "0x9BB304", VA = "0x9BB304", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BB480", Offset = "0x9BB480", VA = "0x9BB480", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9BB5CC", Offset = "0x9BB5CC", VA = "0x9BB5CC", Slot = "6")]
		protected virtual void MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9BB6D4", Offset = "0x9BB6D4", VA = "0x9BB6D4")]
		public ButtonReactor()
		{
		}
	}
	public class Controller_Hand : MonoBehaviour
	{
		public enum Hands
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Left
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hands hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform pointerFinger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform gripFingers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float maxRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float originalPointerRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float originalGripRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float targetPointerRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float targetGripRotation;

		[Address(RVA = "0x9BD6A8", Offset = "0x9BD6A8", VA = "0x9BD6A8")]
		private void Start()
		{
		}

		[Address(RVA = "0x9BDA0C", Offset = "0x9BDA0C", VA = "0x9BDA0C")]
		private void InversePosition(Transform givenTransform)
		{
		}

		[Address(RVA = "0x9BDB98", Offset = "0x9BDB98", VA = "0x9BDB98")]
		private void DoGrabOn(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9BDBA4", Offset = "0x9BDBA4", VA = "0x9BDBA4")]
		private void DoGrabOff(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9BDBB0", Offset = "0x9BDBB0", VA = "0x9BDBB0")]
		private void DoUseOn(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9BDBBC", Offset = "0x9BDBBC", VA = "0x9BDBBC")]
		private void DoUseOff(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9BDBC8", Offset = "0x9BDBC8", VA = "0x9BDBC8")]
		private void Update()
		{
		}

		[Address(RVA = "0x9BDC74", Offset = "0x9BDC74", VA = "0x9BDC74")]
		public Controller_Hand()
		{
		}
	}
	public class Controller_Menu : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject menuObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject clonedMenuObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool menuInit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool menuActive;

		[Address(RVA = "0x9BDC84", Offset = "0x9BDC84", VA = "0x9BDC84")]
		private void Start()
		{
		}

		[Address(RVA = "0x9BDD90", Offset = "0x9BDD90", VA = "0x9BDD90")]
		private void InitMenu()
		{
		}

		[Address(RVA = "0x9BDEDC", Offset = "0x9BDEDC", VA = "0x9BDEDC")]
		private void DoMenuOn(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9BDF94", Offset = "0x9BDF94", VA = "0x9BDF94")]
		private void DoMenuOff(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9BE030", Offset = "0x9BE030", VA = "0x9BE030")]
		private void Update()
		{
		}

		[Address(RVA = "0x9BE1CC", Offset = "0x9BE1CC", VA = "0x9BE1CC")]
		public Controller_Menu()
		{
		}
	}
	public class ControlReactor : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMesh go;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected VRTK_Control_UnityEvents controlEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected VRTK_BaseControllable controllableEvents;

		[Address(RVA = "0x9BBCE8", Offset = "0x9BBCE8", VA = "0x9BBCE8", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BBE38", Offset = "0x9BBE38", VA = "0x9BBE38", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9BBE48", Offset = "0x9BBE48", VA = "0x9BBE48", Slot = "6")]
		protected virtual void ManageListeners(bool state)
		{
		}

		[Address(RVA = "0x9BD0D0", Offset = "0x9BD0D0", VA = "0x9BD0D0", Slot = "7")]
		protected virtual void ValueChanged(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9BD17C", Offset = "0x9BD17C", VA = "0x9BD17C", Slot = "8")]
		protected virtual void HandleChange(object sender, Control3DEventArgs e)
		{
		}

		[Address(RVA = "0x9BD228", Offset = "0x9BD228", VA = "0x9BD228", Slot = "9")]
		protected virtual void UpdateText(string valueText, string normalizedValueText)
		{
		}

		[Address(RVA = "0x9BD2D8", Offset = "0x9BD2D8", VA = "0x9BD2D8")]
		public ControlReactor()
		{
		}
	}
	public class ControlsMenu : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float spawnDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject menuSlate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerEvents.ButtonAlias toggleButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected bool isVisible;

		[Address(RVA = "0x9BE1D4", Offset = "0x9BE1D4", VA = "0x9BE1D4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x9BE1E4", Offset = "0x9BE1E4", VA = "0x9BE1E4", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9BE2CC", Offset = "0x9BE2CC", VA = "0x9BE2CC", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9BE3B4", Offset = "0x9BE3B4", VA = "0x9BE3B4", Slot = "7")]
		protected virtual void ToggleButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9BE72C", Offset = "0x9BE72C", VA = "0x9BE72C", Slot = "8")]
		protected virtual void ToggleVisibility()
		{
		}

		[Address(RVA = "0x9BE7D4", Offset = "0x9BE7D4", VA = "0x9BE7D4")]
		public ControlsMenu()
		{
		}
	}
	public class ExcludeTeleport : MonoBehaviour
	{
		[Address(RVA = "0x9BEAD8", Offset = "0x9BEAD8", VA = "0x9BEAD8")]
		public ExcludeTeleport()
		{
		}
	}
	public class Gun : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private GameObject bullet;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float bulletSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float bulletLife;

		[Address(RVA = "0x9BF15C", Offset = "0x9BF15C", VA = "0x9BF15C", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Address(RVA = "0x9BF3CC", Offset = "0x9BF3CC", VA = "0x9BF3CC")]
		protected void Start()
		{
		}

		[Address(RVA = "0x9BF184", Offset = "0x9BF184", VA = "0x9BF184")]
		private void FireBullet()
		{
		}

		[Address(RVA = "0x9BF470", Offset = "0x9BF470", VA = "0x9BF470")]
		public Gun()
		{
		}
	}
	public class HandLift : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F594", Offset = "0x66F594")]
		public float speed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Transform handleTop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform ropeTop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform ropeBottom;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject rope;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public GameObject handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool isMoving;

		[Il2CppDummyDll.FieldOffset(Offset = "0x199")]
		private bool isMovingUp;

		[Address(RVA = "0x9BF93C", Offset = "0x9BF93C", VA = "0x9BF93C", Slot = "10")]
		public override void OnInteractableObjectGrabbed(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9BF968", Offset = "0x9BF968", VA = "0x9BF968", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9BFD60", Offset = "0x9BFD60", VA = "0x9BFD60")]
		public HandLift()
		{
		}
	}
	public class Lamp : VRTK_InteractableObject
	{
		[Address(RVA = "0x9C04AC", Offset = "0x9C04AC", VA = "0x9C04AC", Slot = "26")]
		public override void Grabbed(VRTK_InteractGrab grabbingObject)
		{
		}

		[Address(RVA = "0x9C05D4", Offset = "0x9C05D4", VA = "0x9C05D4", Slot = "27")]
		public override void Ungrabbed(VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Address(RVA = "0x9C04D8", Offset = "0x9C04D8", VA = "0x9C04D8")]
		private void ToggleKinematics(bool state)
		{
		}

		[Address(RVA = "0x9C0600", Offset = "0x9C0600", VA = "0x9C0600")]
		public Lamp()
		{
		}
	}
	public class LightSaber : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private bool beamActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector2 beamLimits;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float currentBeamSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float beamExtendSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject blade;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Color activeColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Color targetColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Color[] bladePhaseColors;

		[Address(RVA = "0x9C0608", Offset = "0x9C0608", VA = "0x9C0608", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0x9C0794", Offset = "0x9C0794", VA = "0x9C0794", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Address(RVA = "0x9C07C4", Offset = "0x9C07C4", VA = "0x9C07C4")]
		protected void Start()
		{
		}

		[Address(RVA = "0x9C08F4", Offset = "0x9C08F4", VA = "0x9C08F4", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9C085C", Offset = "0x9C085C", VA = "0x9C085C")]
		private void SetBeamSize()
		{
		}

		[Address(RVA = "0x9C09F0", Offset = "0x9C09F0", VA = "0x9C09F0")]
		private void PulseBeam()
		{
		}

		[Address(RVA = "0x9C0BE0", Offset = "0x9C0BE0", VA = "0x9C0BE0")]
		public LightSaber()
		{
		}
	}
	public class Menu_Color_Changer : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public Color newMenuColor;

		[Address(RVA = "0x9C0C30", Offset = "0x9C0C30", VA = "0x9C0C30", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Address(RVA = "0x9C0F18", Offset = "0x9C0F18", VA = "0x9C0F18", Slot = "65")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x9C0E30", Offset = "0x9C0E30", VA = "0x9C0E30")]
		private void ResetMenuItems()
		{
		}

		[Address(RVA = "0x9C0FEC", Offset = "0x9C0FEC", VA = "0x9C0FEC")]
		public Menu_Color_Changer()
		{
		}
	}
	public class Menu_Container_Object_Colors : VRTK_InteractableObject
	{
		[Address(RVA = "0x9C0D2C", Offset = "0x9C0D2C", VA = "0x9C0D2C")]
		public void SetSelectedColor(Color color)
		{
		}

		[Address(RVA = "0x9C1100", Offset = "0x9C1100", VA = "0x9C1100")]
		protected void Start()
		{
		}

		[Address(RVA = "0x9C113C", Offset = "0x9C113C", VA = "0x9C113C")]
		public Menu_Container_Object_Colors()
		{
		}
	}
	public class Menu_Object_Spawner : VRTK_InteractableObject
	{
		public enum PrimitiveTypes
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Cube,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Sphere
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public PrimitiveTypes shape;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Color selectedColor;

		[Address(RVA = "0x9C1028", Offset = "0x9C1028", VA = "0x9C1028")]
		public void SetSelectedColor(Color color)
		{
		}

		[Address(RVA = "0x9C1144", Offset = "0x9C1144", VA = "0x9C1144", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Address(RVA = "0x9C11B0", Offset = "0x9C11B0", VA = "0x9C11B0")]
		private void CreateShape(PrimitiveType shape, Color color)
		{
		}

		[Address(RVA = "0x9C1390", Offset = "0x9C1390", VA = "0x9C1390")]
		private void ResetMenuItems()
		{
		}

		[Address(RVA = "0x9C1478", Offset = "0x9C1478", VA = "0x9C1478")]
		public Menu_Object_Spawner()
		{
		}
	}
	public class ModelVillage_TeleportLocation : VRTK_DestinationMarker
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform destination;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool lastUsePressedState;

		[Address(RVA = "0x9C1480", Offset = "0x9C1480", VA = "0x9C1480")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0x9C1790", Offset = "0x9C1790", VA = "0x9C1790")]
		public ModelVillage_TeleportLocation()
		{
		}
	}
	public class Openable_Door : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool flipped;

		[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
		public bool rotated;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float sideFlip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float side;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float smooth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float doorOpenAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool open;

		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private Vector3 defaultRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 openRotation;

		[Address(RVA = "0x9C1DD4", Offset = "0x9C1DD4", VA = "0x9C1DD4", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse usingObject)
		{
		}

		[Address(RVA = "0x9C1F5C", Offset = "0x9C1F5C", VA = "0x9C1F5C")]
		protected void Start()
		{
		}

		[Address(RVA = "0x9C1FD8", Offset = "0x9C1FD8", VA = "0x9C1FD8", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9C1EF0", Offset = "0x9C1EF0", VA = "0x9C1EF0")]
		private void SetRotation()
		{
		}

		[Address(RVA = "0x9C1E48", Offset = "0x9C1E48", VA = "0x9C1E48")]
		private void SetDoorRotation(Vector3 interacterPosition)
		{
		}

		[Address(RVA = "0x9C217C", Offset = "0x9C217C", VA = "0x9C217C")]
		public Openable_Door()
		{
		}
	}
	public class PusherStickyToggle : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRTK_BaseControllable buttonOne;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRTK_BaseControllable buttonTwo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color onColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color offColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool buttonOnePressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		protected bool buttonTwoPressed;

		[Address(RVA = "0x9C4FD4", Offset = "0x9C4FD4", VA = "0x9C4FD4", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C5160", Offset = "0x9C5160", VA = "0x9C5160", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9C52BC", Offset = "0x9C52BC", VA = "0x9C52BC", Slot = "6")]
		protected virtual void ButtonOne_MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9C534C", Offset = "0x9C534C", VA = "0x9C534C", Slot = "7")]
		protected virtual void ButtonTwo_MaxLimitReached(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9C53DC", Offset = "0x9C53DC", VA = "0x9C53DC", Slot = "8")]
		protected virtual void ButtonOne_MaxLimitExited(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9C5444", Offset = "0x9C5444", VA = "0x9C5444", Slot = "9")]
		protected virtual void ButtonTwo_MaxLimitExited(object sender, ControllableEventArgs e)
		{
		}

		[Address(RVA = "0x9C54AC", Offset = "0x9C54AC", VA = "0x9C54AC", Slot = "10")]
		protected virtual void ChangeColor(GameObject obj, Color col)
		{
		}

		[Address(RVA = "0x9C5568", Offset = "0x9C5568", VA = "0x9C5568", Slot = "11")]
		protected virtual void SetStayPressed(VRTK_BaseControllable obj, bool state)
		{
		}

		[Address(RVA = "0x9C577C", Offset = "0x9C577C", VA = "0x9C577C", Slot = "12")]
		protected virtual void SetPositionTarget(VRTK_BaseControllable obj, float newTarget)
		{
		}

		[Address(RVA = "0x9C598C", Offset = "0x9C598C", VA = "0x9C598C")]
		public PusherStickyToggle()
		{
		}
	}
	public class RC_Car : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAcceleration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float jumpPower;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float acceleration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float movementSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float rotationSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool isJumping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 touchAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float triggerAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody rb;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 defaultPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion defaultRotation;

		[Address(RVA = "0x9C59D0", Offset = "0x9C59D0", VA = "0x9C59D0")]
		public void SetTouchAxis(Vector2 data)
		{
		}

		[Address(RVA = "0x9C59D8", Offset = "0x9C59D8", VA = "0x9C59D8")]
		public void SetTriggerAxis(float data)
		{
		}

		[Address(RVA = "0x9C59E0", Offset = "0x9C59E0", VA = "0x9C59E0")]
		public void ResetCar()
		{
		}

		[Address(RVA = "0x9C5A78", Offset = "0x9C5A78", VA = "0x9C5A78")]
		private void Awake()
		{
		}

		[Address(RVA = "0x9C5B28", Offset = "0x9C5B28", VA = "0x9C5B28")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0x9C5B6C", Offset = "0x9C5B6C", VA = "0x9C5B6C")]
		private void CalculateSpeed()
		{
		}

		[Address(RVA = "0x9C5F5C", Offset = "0x9C5F5C", VA = "0x9C5F5C")]
		private void Decelerate()
		{
		}

		[Address(RVA = "0x9C5C20", Offset = "0x9C5C20", VA = "0x9C5C20")]
		private void Move()
		{
		}

		[Address(RVA = "0x9C5D70", Offset = "0x9C5D70", VA = "0x9C5D70")]
		private void Turn()
		{
		}

		[Address(RVA = "0x9C5E84", Offset = "0x9C5E84", VA = "0x9C5E84")]
		private void Jump()
		{
		}

		[Address(RVA = "0x9C6048", Offset = "0x9C6048", VA = "0x9C6048")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0x9C6050", Offset = "0x9C6050", VA = "0x9C6050")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0x9C605C", Offset = "0x9C605C", VA = "0x9C605C")]
		public RC_Car()
		{
		}
	}
	public class RC_Car_Controller : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject rcCar;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RC_Car rcCarScript;

		[Address(RVA = "0x9C6084", Offset = "0x9C6084", VA = "0x9C6084")]
		private void Start()
		{
		}

		[Address(RVA = "0x9C62AC", Offset = "0x9C62AC", VA = "0x9C62AC")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C62E4", Offset = "0x9C62E4", VA = "0x9C62E4")]
		private void DoTriggerAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C6314", Offset = "0x9C6314", VA = "0x9C6314")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C63A0", Offset = "0x9C63A0", VA = "0x9C63A0")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C63CC", Offset = "0x9C63CC", VA = "0x9C63CC")]
		private void DoCarReset(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C63F8", Offset = "0x9C63F8", VA = "0x9C63F8")]
		public RC_Car_Controller()
		{
		}
	}
	public class RealGun : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float bulletSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float bulletLife;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private GameObject bullet;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject trigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private RealGun_Slide slide;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private RealGun_SafetySwitch safetySwitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Rigidbody slideRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Collider slideCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Rigidbody safetySwitchRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Collider safetySwitchCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float minTriggerRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float maxTriggerRotation;

		[Address(RVA = "0x9C6400", Offset = "0x9C6400", VA = "0x9C6400")]
		private void ToggleCollision(Rigidbody objRB, Collider objCol, bool state)
		{
		}

		[Address(RVA = "0x9C6464", Offset = "0x9C6464", VA = "0x9C6464")]
		private void ToggleSlide(bool state)
		{
		}

		[Address(RVA = "0x9C64F4", Offset = "0x9C64F4", VA = "0x9C64F4")]
		private void ToggleSafetySwitch(bool state)
		{
		}

		[Address(RVA = "0x9C654C", Offset = "0x9C654C", VA = "0x9C654C", Slot = "26")]
		public override void Grabbed(VRTK_InteractGrab currentGrabbingObject)
		{
		}

		[Address(RVA = "0x9C66F4", Offset = "0x9C66F4", VA = "0x9C66F4", Slot = "27")]
		public override void Ungrabbed(VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Address(RVA = "0x9C6764", Offset = "0x9C6764", VA = "0x9C6764", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0x9C6B18", Offset = "0x9C6B18", VA = "0x9C6B18", Slot = "64")]
		protected override void Awake()
		{
		}

		[Address(RVA = "0x9C6D50", Offset = "0x9C6D50", VA = "0x9C6D50", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9C68D4", Offset = "0x9C68D4", VA = "0x9C68D4")]
		private void FireBullet()
		{
		}

		[Address(RVA = "0x9C6ED0", Offset = "0x9C6ED0", VA = "0x9C6ED0")]
		public RealGun()
		{
		}
	}
	public class RealGun_SafetySwitch : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool safetyOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float offAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private Vector3 fixedPosition;

		[Address(RVA = "0x9C6EF4", Offset = "0x9C6EF4", VA = "0x9C6EF4", Slot = "28")]
		public override void StartUsing(VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0x9C6F30", Offset = "0x9C6F30", VA = "0x9C6F30")]
		protected void Start()
		{
		}

		[Address(RVA = "0x9C6F78", Offset = "0x9C6F78", VA = "0x9C6F78", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9C6F24", Offset = "0x9C6F24", VA = "0x9C6F24")]
		private void SetSafety(bool safety)
		{
		}

		[Address(RVA = "0x9C7068", Offset = "0x9C7068", VA = "0x9C7068")]
		public RealGun_SafetySwitch()
		{
		}
	}
	public class RealGun_Slide : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float restPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float fireTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float fireDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float boltSpeed;

		[Address(RVA = "0x9C68C8", Offset = "0x9C68C8", VA = "0x9C68C8")]
		public void Fire()
		{
		}

		[Address(RVA = "0x9C7080", Offset = "0x9C7080", VA = "0x9C7080", Slot = "64")]
		protected override void Awake()
		{
		}

		[Address(RVA = "0x9C70CC", Offset = "0x9C70CC", VA = "0x9C70CC", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9C73E0", Offset = "0x9C73E0", VA = "0x9C73E0")]
		public RealGun_Slide()
		{
		}
	}
	public class Remote_Beam : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 touchAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float rotationSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float currentYaw;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentPitch;

		[Address(RVA = "0x9C7400", Offset = "0x9C7400", VA = "0x9C7400")]
		public void SetTouchAxis(Vector2 data)
		{
		}

		[Address(RVA = "0x9C7408", Offset = "0x9C7408", VA = "0x9C7408")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0x9C75C4", Offset = "0x9C75C4", VA = "0x9C75C4")]
		public Remote_Beam()
		{
		}
	}
	public class Remote_Beam_Controller : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject remoteBeam;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Remote_Beam remoteBeamScript;

		[Address(RVA = "0x9C75D4", Offset = "0x9C75D4", VA = "0x9C75D4")]
		private void Start()
		{
		}

		[Address(RVA = "0x9C7700", Offset = "0x9C7700", VA = "0x9C7700")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C7738", Offset = "0x9C7738", VA = "0x9C7738")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C77C4", Offset = "0x9C77C4", VA = "0x9C77C4")]
		public Remote_Beam_Controller()
		{
		}
	}
	public class RendererOffOnDash : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool wasSwitchedOff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<VRTK_DashTeleport> dashTeleporters;

		[Address(RVA = "0x9C77CC", Offset = "0x9C77CC", VA = "0x9C77CC")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x9C7B14", Offset = "0x9C7B14", VA = "0x9C7B14")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x9C7CCC", Offset = "0x9C7CCC", VA = "0x9C7CCC")]
		private void RendererOff(object sender, DashTeleportEventArgs e)
		{
		}

		[Address(RVA = "0x9C7ECC", Offset = "0x9C7ECC", VA = "0x9C7ECC")]
		private void RendererOn(object sender, DashTeleportEventArgs e)
		{
		}

		[Address(RVA = "0x9C7E34", Offset = "0x9C7E34", VA = "0x9C7E34")]
		private void SwitchRenderer(GameObject go, bool enable)
		{
		}

		[Address(RVA = "0x9C7F28", Offset = "0x9C7F28", VA = "0x9C7F28")]
		public RendererOffOnDash()
		{
		}
	}
	public class SnapDropZoneGroup_Switcher : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VRTK_SnapDropZone cubeZone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_SnapDropZone sphereZone;

		[Address(RVA = "0x9C8860", Offset = "0x9C8860", VA = "0x9C8860")]
		private void Start()
		{
		}

		[Address(RVA = "0x9C8B74", Offset = "0x9C8B74", VA = "0x9C8B74")]
		private void DoCubeZoneSnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C8C54", Offset = "0x9C8C54", VA = "0x9C8C54")]
		private void DoCubeZoneUnsnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C8D34", Offset = "0x9C8D34", VA = "0x9C8D34")]
		private void DoSphereZoneSnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C8E14", Offset = "0x9C8E14", VA = "0x9C8E14")]
		private void DoSphereZoneUnsnapped(object sender, SnapDropZoneEventArgs e)
		{
		}

		[Address(RVA = "0x9C8EF4", Offset = "0x9C8EF4", VA = "0x9C8EF4")]
		public SnapDropZoneGroup_Switcher()
		{
		}
	}
	public class Sphere_Spawner : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject spawnMe;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 position;

		[Address(RVA = "0x9C973C", Offset = "0x9C973C", VA = "0x9C973C")]
		private void Start()
		{
		}

		[Address(RVA = "0x9C9A40", Offset = "0x9C9A40", VA = "0x9C9A40")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C9A98", Offset = "0x9C9A98", VA = "0x9C9A98")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9C9B08", Offset = "0x9C9B08", VA = "0x9C9B08")]
		private void CreateSphere()
		{
		}

		[Address(RVA = "0x9C9BF8", Offset = "0x9C9BF8", VA = "0x9C9BF8")]
		public Sphere_Spawner()
		{
		}
	}
	public class Sword : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float impactMagnifier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float collisionForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float maxCollisionForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private VRTK_ControllerReference controllerReference;

		[Address(RVA = "0x9BB138", Offset = "0x9BB138", VA = "0x9BB138")]
		public float CollisionForce()
		{
			return default(float);
		}

		[Address(RVA = "0x9C9C00", Offset = "0x9C9C00", VA = "0x9C9C00", Slot = "26")]
		public override void Grabbed(VRTK_InteractGrab grabbingObject)
		{
		}

		[Address(RVA = "0x9C9CBC", Offset = "0x9C9CBC", VA = "0x9C9CBC", Slot = "27")]
		public override void Ungrabbed(VRTK_InteractGrab previousGrabbingObject)
		{
		}

		[Address(RVA = "0x9C9CE4", Offset = "0x9C9CE4", VA = "0x9C9CE4", Slot = "65")]
		protected override void OnEnable()
		{
		}

		[Address(RVA = "0x9C9D28", Offset = "0x9C9D28", VA = "0x9C9D28")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x9C9E80", Offset = "0x9C9E80", VA = "0x9C9E80")]
		public Sword()
		{
		}
	}
	public class UI_Interactions : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B508", Offset = "0x65B508")]
		private sealed class <CreateCanvasOnNextFrame>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x9D3A3C", Offset = "0x9D3A3C", VA = "0x9D3A3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x9D3AAC", Offset = "0x9D3AAC", VA = "0x9D3AAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x9D2F74", Offset = "0x9D2F74", VA = "0x9D2F74")]
			[DebuggerHidden]
			public <CreateCanvasOnNextFrame>d__7(int <>1__state)
			{
			}

			[Address(RVA = "0x9D2FA8", Offset = "0x9D2FA8", VA = "0x9D2FA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x9D2FAC", Offset = "0x9D2FAC", VA = "0x9D2FAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x9D3A44", Offset = "0x9D3A44", VA = "0x9D3A44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const int EXISTING_CANVAS_COUNT = 4;

		[Address(RVA = "0x9D2B14", Offset = "0x9D2B14", VA = "0x9D2B14")]
		public void Button_Red()
		{
		}

		[Address(RVA = "0x9D2B80", Offset = "0x9D2B80", VA = "0x9D2B80")]
		public void Button_Pink()
		{
		}

		[Address(RVA = "0x9D2BEC", Offset = "0x9D2BEC", VA = "0x9D2BEC")]
		public void Toggle(bool state)
		{
		}

		[Address(RVA = "0x9D2C8C", Offset = "0x9D2C8C", VA = "0x9D2C8C")]
		public void Dropdown(int value)
		{
		}

		[Address(RVA = "0x9D2D3C", Offset = "0x9D2D3C", VA = "0x9D2D3C")]
		public void SetDropText(BaseEventData data)
		{
		}

		[Address(RVA = "0x9D2EE8", Offset = "0x9D2EE8", VA = "0x9D2EE8")]
		public void CreateCanvas()
		{
		}

		[Address(RVA = "0x9D2F14", Offset = "0x9D2F14", VA = "0x9D2F14")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x680FD8", Offset = "0x680FD8")]
		private IEnumerator CreateCanvasOnNextFrame()
		{
			return null;
		}

		[Address(RVA = "0x9D2FA0", Offset = "0x9D2FA0", VA = "0x9D2FA0")]
		public UI_Interactions()
		{
		}
	}
	public class UI_Keyboard : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField input;

		[Address(RVA = "0x9D3AB4", Offset = "0x9D3AB4", VA = "0x9D3AB4")]
		public void ClickKey(string character)
		{
		}

		[Address(RVA = "0x9D3B14", Offset = "0x9D3B14", VA = "0x9D3B14")]
		public void Backspace()
		{
		}

		[Address(RVA = "0x9D3C18", Offset = "0x9D3C18", VA = "0x9D3C18")]
		public void Enter()
		{
		}

		[Address(RVA = "0x9D3CF4", Offset = "0x9D3CF4", VA = "0x9D3CF4")]
		private void Start()
		{
		}

		[Address(RVA = "0x9D3D4C", Offset = "0x9D3D4C", VA = "0x9D3D4C")]
		public UI_Keyboard()
		{
		}
	}
	public class UseRotate : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F5DC", Offset = "0x66F5DC")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F5DC", Offset = "0x66F5DC")]
		private float idleSpinSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F64C", Offset = "0x66F64C")]
		private float activeSpinSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F698", Offset = "0x66F698")]
		[SerializeField]
		private Transform rotatingObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private Vector3 rotationAxis;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float spinSpeed;

		[Address(RVA = "0x9D3D54", Offset = "0x9D3D54", VA = "0x9D3D54", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0x9D3D80", Offset = "0x9D3D80", VA = "0x9D3D80", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Address(RVA = "0x9D3DB0", Offset = "0x9D3DB0", VA = "0x9D3DB0")]
		protected void Start()
		{
		}

		[Address(RVA = "0x9D3E40", Offset = "0x9D3E40", VA = "0x9D3E40", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9D3EC0", Offset = "0x9D3EC0", VA = "0x9D3EC0")]
		public UseRotate()
		{
		}
	}
	public class VRTK_ControllerAppearance_Example : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool highlightBodyOnlyOnCollision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool pulseTriggerHighlightColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_ControllerTooltips tooltips;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRTK_ControllerHighlighter highligher;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VRTK_ControllerEvents events;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color highlightColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color pulseColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Color currentPulseColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float highlightTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulseTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float dimOpacity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float defaultOpacity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool highlighted;

		[Address(RVA = "0xC01FB4", Offset = "0xC01FB4", VA = "0xC01FB4")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xC02554", Offset = "0xC02554", VA = "0xC02554")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xC028D0", Offset = "0xC028D0", VA = "0xC028D0")]
		private void PulseTrigger()
		{
		}

		[Address(RVA = "0xC029B4", Offset = "0xC029B4", VA = "0xC029B4")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC02B10", Offset = "0xC02B10", VA = "0xC02B10")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC02C4C", Offset = "0xC02C4C", VA = "0xC02C4C")]
		private void DoButtonOnePressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC02D6C", Offset = "0xC02D6C", VA = "0xC02D6C")]
		private void DoButtonOneReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC02E88", Offset = "0xC02E88", VA = "0xC02E88")]
		private void DoButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC02FA8", Offset = "0xC02FA8", VA = "0xC02FA8")]
		private void DoButtonTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC030C4", Offset = "0xC030C4", VA = "0xC030C4")]
		private void DoStartMenuPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC031E4", Offset = "0xC031E4", VA = "0xC031E4")]
		private void DoStartMenuReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC03300", Offset = "0xC03300", VA = "0xC03300")]
		private void DoGripPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC03464", Offset = "0xC03464", VA = "0xC03464")]
		private void DoGripReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC035A4", Offset = "0xC035A4", VA = "0xC035A4")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC036C4", Offset = "0xC036C4", VA = "0xC036C4")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC037E0", Offset = "0xC037E0", VA = "0xC037E0")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xC037E4", Offset = "0xC037E4", VA = "0xC037E4")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0xC038CC", Offset = "0xC038CC", VA = "0xC038CC")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Address(RVA = "0xC0395C", Offset = "0xC0395C", VA = "0xC0395C")]
		public VRTK_ControllerAppearance_Example()
		{
		}
	}
	public class VRTK_ControllerEvents_ListenerExample : MonoBehaviour
	{
		public enum EventQuickSelect
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Custom,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			All,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ButtonOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AxisOnly,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SenseAxisOnly
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F6F4", Offset = "0x66F6F4")]
		public EventQuickSelect quickSelect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F72C", Offset = "0x66F72C")]
		public bool triggerButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool gripButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool touchpadButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool buttonOneButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool buttonTwoButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool startMenuButtonEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F764", Offset = "0x66F764")]
		public bool triggerAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool gripAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool touchpadAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool touchpadTwoAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F79C", Offset = "0x66F79C")]
		public bool triggerSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool touchpadSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool middleFingerSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool ringFingerSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool pinkyFingerSenseAxisEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VRTK_ControllerEvents controllerEvents;

		[Address(RVA = "0xC039AC", Offset = "0xC039AC", VA = "0xC039AC")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xC046D0", Offset = "0xC046D0", VA = "0xC046D0")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xC0528C", Offset = "0xC0528C", VA = "0xC0528C")]
		private void LateUpdate()
		{
		}

		[Address(RVA = "0xC052F8", Offset = "0xC052F8", VA = "0xC052F8")]
		private void DebugLogger(uint index, string button, string action, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05988", Offset = "0xC05988", VA = "0xC05988")]
		private void DoTriggerPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05A50", Offset = "0xC05A50", VA = "0xC05A50")]
		private void DoTriggerReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05B18", Offset = "0xC05B18", VA = "0xC05B18")]
		private void DoTriggerTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05BE0", Offset = "0xC05BE0", VA = "0xC05BE0")]
		private void DoTriggerTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05CA8", Offset = "0xC05CA8", VA = "0xC05CA8")]
		private void DoTriggerHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05D70", Offset = "0xC05D70", VA = "0xC05D70")]
		private void DoTriggerHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05E38", Offset = "0xC05E38", VA = "0xC05E38")]
		private void DoTriggerClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05F00", Offset = "0xC05F00", VA = "0xC05F00")]
		private void DoTriggerUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC05FC8", Offset = "0xC05FC8", VA = "0xC05FC8")]
		private void DoTriggerAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06090", Offset = "0xC06090", VA = "0xC06090")]
		private void DoTriggerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06158", Offset = "0xC06158", VA = "0xC06158")]
		private void DoGripPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06220", Offset = "0xC06220", VA = "0xC06220")]
		private void DoGripReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC062E8", Offset = "0xC062E8", VA = "0xC062E8")]
		private void DoGripTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC063B0", Offset = "0xC063B0", VA = "0xC063B0")]
		private void DoGripTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06478", Offset = "0xC06478", VA = "0xC06478")]
		private void DoGripHairlineStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06540", Offset = "0xC06540", VA = "0xC06540")]
		private void DoGripHairlineEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06608", Offset = "0xC06608", VA = "0xC06608")]
		private void DoGripClicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC066D0", Offset = "0xC066D0", VA = "0xC066D0")]
		private void DoGripUnclicked(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06798", Offset = "0xC06798", VA = "0xC06798")]
		private void DoGripAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06860", Offset = "0xC06860", VA = "0xC06860")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06928", Offset = "0xC06928", VA = "0xC06928")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC069F0", Offset = "0xC069F0", VA = "0xC069F0")]
		private void DoTouchpadTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06AB8", Offset = "0xC06AB8", VA = "0xC06AB8")]
		private void DoTouchpadTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06B80", Offset = "0xC06B80", VA = "0xC06B80")]
		private void DoTouchpadAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06C48", Offset = "0xC06C48", VA = "0xC06C48")]
		private void DoTouchpadTwoAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06D10", Offset = "0xC06D10", VA = "0xC06D10")]
		private void DoTouchpadSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06DD8", Offset = "0xC06DD8", VA = "0xC06DD8")]
		private void DoButtonOnePressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06EA0", Offset = "0xC06EA0", VA = "0xC06EA0")]
		private void DoButtonOneReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC06F68", Offset = "0xC06F68", VA = "0xC06F68")]
		private void DoButtonOneTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC07030", Offset = "0xC07030", VA = "0xC07030")]
		private void DoButtonOneTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC070F8", Offset = "0xC070F8", VA = "0xC070F8")]
		private void DoButtonTwoPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC071C0", Offset = "0xC071C0", VA = "0xC071C0")]
		private void DoButtonTwoReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC07288", Offset = "0xC07288", VA = "0xC07288")]
		private void DoButtonTwoTouchStart(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC07350", Offset = "0xC07350", VA = "0xC07350")]
		private void DoButtonTwoTouchEnd(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC07418", Offset = "0xC07418", VA = "0xC07418")]
		private void DoStartMenuPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC074E0", Offset = "0xC074E0", VA = "0xC074E0")]
		private void DoStartMenuReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC075A8", Offset = "0xC075A8", VA = "0xC075A8")]
		private void DoControllerEnabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC0765C", Offset = "0xC0765C", VA = "0xC0765C")]
		private void DoControllerDisabled(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC07710", Offset = "0xC07710", VA = "0xC07710")]
		private void DoControllerIndexChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC077C4", Offset = "0xC077C4", VA = "0xC077C4")]
		private void DoMiddleFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC0788C", Offset = "0xC0788C", VA = "0xC0788C")]
		private void DoRingFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC07954", Offset = "0xC07954", VA = "0xC07954")]
		private void DoPinkyFingerSenseAxisChanged(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC07A1C", Offset = "0xC07A1C", VA = "0xC07A1C")]
		public VRTK_ControllerEvents_ListenerExample()
		{
		}
	}
	public class VRTK_ControllerInteract_ListenerExample : MonoBehaviour
	{
		[Address(RVA = "0xC07A38", Offset = "0xC07A38", VA = "0xC07A38")]
		private void Start()
		{
		}

		[Address(RVA = "0xC07DD8", Offset = "0xC07DD8", VA = "0xC07DD8")]
		private void DebugLogger(uint index, string action, GameObject target)
		{
		}

		[Address(RVA = "0xC08098", Offset = "0xC08098", VA = "0xC08098")]
		private void DoInteractTouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xC08164", Offset = "0xC08164", VA = "0xC08164")]
		private void DoInteractUntouch(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xC08230", Offset = "0xC08230", VA = "0xC08230")]
		private void DoInteractGrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xC082FC", Offset = "0xC082FC", VA = "0xC082FC")]
		private void DoInteractUngrab(object sender, ObjectInteractEventArgs e)
		{
		}

		[Address(RVA = "0xC083C8", Offset = "0xC083C8", VA = "0xC083C8")]
		public VRTK_ControllerInteract_ListenerExample()
		{
		}
	}
	public class VRTK_ControllerPointerEvents_ListenerExample : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showHoverState;

		[Address(RVA = "0xC083D0", Offset = "0xC083D0", VA = "0xC083D0")]
		private void Start()
		{
		}

		[Address(RVA = "0xC08730", Offset = "0xC08730", VA = "0xC08730")]
		private void DebugLogger(uint index, string action, Transform target, RaycastHit raycastHit, float distance, Vector3 tipPosition)
		{
		}

		[Address(RVA = "0xC08CE0", Offset = "0xC08CE0", VA = "0xC08CE0")]
		private void DoPointerIn(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC08DB4", Offset = "0xC08DB4", VA = "0xC08DB4")]
		private void DoPointerOut(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC08E88", Offset = "0xC08E88", VA = "0xC08E88")]
		private void DoPointerHover(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC08F5C", Offset = "0xC08F5C", VA = "0xC08F5C")]
		private void DoPointerDestinationSet(object sender, DestinationMarkerEventArgs e)
		{
		}

		[Address(RVA = "0xC09030", Offset = "0xC09030", VA = "0xC09030")]
		public VRTK_ControllerPointerEvents_ListenerExample()
		{
		}
	}
	public class VRTK_ControllerUIPointerEvents_ListenerExample : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool togglePointerOnHit;

		[Address(RVA = "0xC09038", Offset = "0xC09038", VA = "0xC09038")]
		private void Start()
		{
		}

		[Address(RVA = "0xC0940C", Offset = "0xC0940C", VA = "0xC0940C")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementEnter(object sender, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xC09864", Offset = "0xC09864", VA = "0xC09864")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementExit(object sender, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xC09BEC", Offset = "0xC09BEC", VA = "0xC09BEC")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementClick(object sender, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xC09FB4", Offset = "0xC09FB4", VA = "0xC09FB4")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementDragStart(object sender, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xC0A37C", Offset = "0xC0A37C", VA = "0xC0A37C")]
		private void VRTK_ControllerUIPointerEvents_ListenerExample_UIPointerElementDragEnd(object sender, UIPointerEventArgs e)
		{
		}

		[Address(RVA = "0xC0A744", Offset = "0xC0A744", VA = "0xC0A744")]
		public VRTK_ControllerUIPointerEvents_ListenerExample()
		{
		}
	}
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x659424", Offset = "0x659424")]
	public class VRTK_RoomExtender_ControllerExample : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRTK_RoomExtender roomExtender;

		[Address(RVA = "0xC0A74C", Offset = "0xC0A74C", VA = "0xC0A74C")]
		private void Start()
		{
		}

		[Address(RVA = "0xC0AB98", Offset = "0xC0AB98", VA = "0xC0AB98")]
		private void DoTouchpadPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC0ACB0", Offset = "0xC0ACB0", VA = "0xC0ACB0")]
		private void DoTouchpadReleased(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC0AD1C", Offset = "0xC0AD1C", VA = "0xC0AD1C")]
		private void DoSwitchMovementFunction(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0xC0AC54", Offset = "0xC0AC54", VA = "0xC0AC54")]
		private void EnableAdditionalMovement()
		{
		}

		[Address(RVA = "0xC0AC84", Offset = "0xC0AC84", VA = "0xC0AC84")]
		private void DisableAdditionalMovement()
		{
		}

		[Address(RVA = "0xC0AD80", Offset = "0xC0AD80", VA = "0xC0AD80")]
		public VRTK_RoomExtender_ControllerExample()
		{
		}
	}
	public class Whirlygig : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float spinSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Transform rotator;

		[Address(RVA = "0xC0AD88", Offset = "0xC0AD88", VA = "0xC0AD88", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0xC0ADB4", Offset = "0xC0ADB4", VA = "0xC0ADB4", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Address(RVA = "0xC0ADE0", Offset = "0xC0ADE0", VA = "0xC0ADE0")]
		protected void Start()
		{
		}

		[Address(RVA = "0xC0AE54", Offset = "0xC0AE54", VA = "0xC0AE54", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0xC0AEF4", Offset = "0xC0AEF4", VA = "0xC0AEF4")]
		public Whirlygig()
		{
		}
	}
	public class Zipline : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66F7D4", Offset = "0x66F7D4")]
		public float downStartSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float acceleration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float upSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform handleEndPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform handleStartPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool isMoving;

		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		private bool isMovingDown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private float currentSpeed;

		[Address(RVA = "0xC0AEFC", Offset = "0xC0AEFC", VA = "0xC0AEFC", Slot = "10")]
		public override void OnInteractableObjectGrabbed(InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0xC0AF28", Offset = "0xC0AF28", VA = "0xC0AF28", Slot = "64")]
		protected override void Awake()
		{
		}

		[Address(RVA = "0xC0AF54", Offset = "0xC0AF54", VA = "0xC0AF54", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0xC0C214", Offset = "0xC0C214", VA = "0xC0C214")]
		public Zipline()
		{
		}
	}
}
namespace VRTK.Examples.Tests
{
	public abstract class VRTK_BaseTest : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B518", Offset = "0x65B518")]
		private sealed class <RunTests>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRTK_BaseTest <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x9CA7B4", Offset = "0x9CA7B4", VA = "0x9CA7B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x9CA824", Offset = "0x9CA824", VA = "0x9CA824", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x9CA6CC", Offset = "0x9CA6CC", VA = "0x9CA6CC")]
			[DebuggerHidden]
			public <RunTests>d__8(int <>1__state)
			{
			}

			[Address(RVA = "0x9CA700", Offset = "0x9CA700", VA = "0x9CA700", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x9CA704", Offset = "0x9CA704", VA = "0x9CA704", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x9CA7BC", Offset = "0x9CA7BC", VA = "0x9CA7BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string currentTest;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected string currentSetup;

		protected abstract void Test();

		[Address(RVA = "0x9C9E98", Offset = "0x9C9E98", VA = "0x9C9E98", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9C9ECC", Offset = "0x9C9ECC", VA = "0x9C9ECC", Slot = "6")]
		protected virtual void BeginTest(string name, int level = 1)
		{
		}

		[Address(RVA = "0x9CA130", Offset = "0x9CA130", VA = "0x9CA130", Slot = "7")]
		protected virtual void SetUp(string message)
		{
		}

		[Address(RVA = "0x9CA1D4", Offset = "0x9CA1D4", VA = "0x9CA1D4", Slot = "8")]
		protected virtual void TearDown()
		{
		}

		[Address(RVA = "0x9CA240", Offset = "0x9CA240", VA = "0x9CA240", Slot = "9")]
		protected virtual void Assert(string description, bool assertion, string failure, string success = "")
		{
		}

		[Address(RVA = "0x9CA658", Offset = "0x9CA658", VA = "0x9CA658", Slot = "10")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x68103C", Offset = "0x68103C")]
		protected virtual IEnumerator RunTests()
		{
			return null;
		}

		[Address(RVA = "0x9CA6F8", Offset = "0x9CA6F8", VA = "0x9CA6F8")]
		protected VRTK_BaseTest()
		{
		}
	}
	public class VRTK_ControllerReference_Setup : VRTK_BaseTest
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint overrideActualIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject overrideActualController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject overrideAliasController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject overrideModelController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SDK_BaseController.ControllerHand actualControllerHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VRTK_ControllerReference testReference;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected uint actualIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject actualController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GameObject aliasController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected GameObject modelController;

		[Address(RVA = "0x9CA82C", Offset = "0x9CA82C", VA = "0x9CA82C", Slot = "7")]
		protected override void SetUp(string message)
		{
		}

		[Address(RVA = "0x9CAA20", Offset = "0x9CAA20", VA = "0x9CAA20", Slot = "8")]
		protected override void TearDown()
		{
		}

		[Address(RVA = "0x9CAA54", Offset = "0x9CAA54", VA = "0x9CAA54", Slot = "4")]
		protected override void Test()
		{
		}

		[Address(RVA = "0x9CAB48", Offset = "0x9CAB48", VA = "0x9CAB48", Slot = "11")]
		protected virtual List<SDK_BaseController.ControllerHand> GetOtherHands(SDK_BaseController.ControllerHand ignore)
		{
			return null;
		}

		[Address(RVA = "0x9CAC30", Offset = "0x9CAC30", VA = "0x9CAC30", Slot = "12")]
		protected virtual void TestNullState()
		{
		}

		[Address(RVA = "0x9CACD8", Offset = "0x9CACD8", VA = "0x9CACD8", Slot = "13")]
		protected virtual void TestStaticIndex()
		{
		}

		[Address(RVA = "0x9CCCC8", Offset = "0x9CCCC8", VA = "0x9CCCC8", Slot = "14")]
		protected virtual void TestStaticActual()
		{
		}

		[Address(RVA = "0x9CDCB8", Offset = "0x9CDCB8", VA = "0x9CDCB8", Slot = "15")]
		protected virtual void TestStaticAlias()
		{
		}

		[Address(RVA = "0x9CECA8", Offset = "0x9CECA8", VA = "0x9CECA8", Slot = "16")]
		protected virtual void TestStaticModel()
		{
		}

		[Address(RVA = "0x9CFC98", Offset = "0x9CFC98", VA = "0x9CFC98", Slot = "17")]
		protected virtual void TestStaticHand()
		{
		}

		[Address(RVA = "0x9D0C88", Offset = "0x9D0C88", VA = "0x9D0C88", Slot = "18")]
		protected virtual void TestStaticIsValid()
		{
		}

		[Address(RVA = "0x9D0E48", Offset = "0x9D0E48", VA = "0x9D0E48", Slot = "19")]
		protected virtual void TestStaticGetRealIndex()
		{
		}

		[Address(RVA = "0x9D10C4", Offset = "0x9D10C4", VA = "0x9D10C4")]
		public VRTK_ControllerReference_Setup()
		{
		}
	}
}
namespace VRTK.Examples.PanelMenu
{
	public class PanelMenuDemoFlyingSaucer : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Color[] colors;

		[Address(RVA = "0x9C277C", Offset = "0x9C277C", VA = "0x9C277C")]
		public void UpdateGridLayoutValue(int selectedIndex)
		{
		}

		[Address(RVA = "0x9C28C0", Offset = "0x9C28C0", VA = "0x9C28C0")]
		public PanelMenuDemoFlyingSaucer()
		{
		}
	}
	public class PanelMenuDemoSphere : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Color[] colors;

		[Address(RVA = "0x9C2B1C", Offset = "0x9C2B1C", VA = "0x9C2B1C")]
		public void UpdateSliderValue(float value)
		{
		}

		[Address(RVA = "0x9C2C38", Offset = "0x9C2C38", VA = "0x9C2C38")]
		public PanelMenuDemoSphere()
		{
		}
	}
	public class PanelMenuUIGrid : MonoBehaviour
	{
		public enum Direction
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Up,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Down,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Left,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Color colorDefault;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Color colorSelected;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly float colorAlpha;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridLayoutGroup gridLayoutGroup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int selectedIndex;

		[Address(RVA = "0x9C2F0C", Offset = "0x9C2F0C", VA = "0x9C2F0C")]
		private void Start()
		{
		}

		[Address(RVA = "0x9C37AC", Offset = "0x9C37AC", VA = "0x9C37AC")]
		public bool MoveSelectGridLayoutItem(Direction direction, GameObject interactableObject)
		{
			return default(bool);
		}

		[Address(RVA = "0x9C37F0", Offset = "0x9C37F0", VA = "0x9C37F0")]
		private int FindNextItemBasedOnMoveDirection(Direction direction)
		{
			return default(int);
		}

		[Address(RVA = "0x9C32C8", Offset = "0x9C32C8", VA = "0x9C32C8")]
		private void SetGridLayoutItemSelectedState(int index)
		{
		}

		[Address(RVA = "0x9C3990", Offset = "0x9C3990", VA = "0x9C3990")]
		private void OnPanelMenuItemSwipeTop(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C3998", Offset = "0x9C3998", VA = "0x9C3998")]
		private void OnPanelMenuItemSwipeBottom(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C39A0", Offset = "0x9C39A0", VA = "0x9C39A0")]
		private void OnPanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C39A8", Offset = "0x9C39A8", VA = "0x9C39A8")]
		private void OnPanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C39B0", Offset = "0x9C39B0", VA = "0x9C39B0")]
		private void OnPanelMenuItemTriggerPressed(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C39B8", Offset = "0x9C39B8", VA = "0x9C39B8")]
		private void SendMessageToInteractableObject(GameObject interactableObject)
		{
		}

		[Address(RVA = "0x9C3A4C", Offset = "0x9C3A4C", VA = "0x9C3A4C")]
		public PanelMenuUIGrid()
		{
		}
	}
	public class PanelMenuUISlider : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slider slider;

		[Address(RVA = "0x9C3A98", Offset = "0x9C3A98", VA = "0x9C3A98")]
		private void Start()
		{
		}

		[Address(RVA = "0x9C3D4C", Offset = "0x9C3D4C", VA = "0x9C3D4C")]
		private void OnPanelMenuItemSwipeLeft(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C3E88", Offset = "0x9C3E88", VA = "0x9C3E88")]
		private void OnPanelMenuItemSwipeRight(object sender, PanelMenuItemControllerEventArgs e)
		{
		}

		[Address(RVA = "0x9C3DD4", Offset = "0x9C3DD4", VA = "0x9C3DD4")]
		private void SendMessageToInteractableObject(GameObject interactableObject)
		{
		}

		[Address(RVA = "0x9C3F10", Offset = "0x9C3F10", VA = "0x9C3F10")]
		public PanelMenuUISlider()
		{
		}
	}
}
namespace VRTK.Examples.Old
{
	public class FireExtinguisher_Base : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Animation leverAnimation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public FireExtinguisher_Sprayer sprayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private VRTK_ControllerEvents controllerEvents;

		[Address(RVA = "0x9C1798", Offset = "0x9C1798", VA = "0x9C1798", Slot = "28")]
		public override void StartUsing([Optional] VRTK_InteractUse currentUsingObject)
		{
		}

		[Address(RVA = "0x9C1818", Offset = "0x9C1818", VA = "0x9C1818", Slot = "29")]
		public override void StopUsing([Optional] VRTK_InteractUse previousUsingObject, bool resetUsingObjectState = true)
		{
		}

		[Address(RVA = "0x9C1844", Offset = "0x9C1844", VA = "0x9C1844", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9C1980", Offset = "0x9C1980", VA = "0x9C1980")]
		private void Spray(float power)
		{
		}

		[Address(RVA = "0x9C19C4", Offset = "0x9C19C4", VA = "0x9C19C4")]
		private void SetHandleFrame(float frame)
		{
		}

		[Address(RVA = "0x9C1B9C", Offset = "0x9C1B9C", VA = "0x9C1B9C")]
		public FireExtinguisher_Base()
		{
		}
	}
	public class FireExtinguisher_Sprayer : VRTK_InteractableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public FireExtinguisher_Base baseCan;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float breakDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float maxSprayPower;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject waterSpray;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private ParticleSystem particles;

		[Address(RVA = "0x9C1AB4", Offset = "0x9C1AB4", VA = "0x9C1AB4")]
		public void Spray(float power)
		{
		}

		[Address(RVA = "0x9C1BA4", Offset = "0x9C1BA4", VA = "0x9C1BA4", Slot = "64")]
		protected override void Awake()
		{
		}

		[Address(RVA = "0x9C1C74", Offset = "0x9C1C74", VA = "0x9C1C74", Slot = "68")]
		protected override void Update()
		{
		}

		[Address(RVA = "0x9C1DBC", Offset = "0x9C1DBC", VA = "0x9C1DBC")]
		public FireExtinguisher_Sprayer()
		{
		}
	}
}
namespace VRTK.Examples.Archery
{
	public class Arrow : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxArrowLife;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxCollidedLife;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x66F81C", Offset = "0x66F81C")]
		public bool inFlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool collided;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rigidBody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject arrowHolder;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 originalPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion originalRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 originalScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource source;

		[Address(RVA = "0x8E144C", Offset = "0x8E144C", VA = "0x8E144C")]
		public void SetArrowHolder(GameObject holder)
		{
		}

		[Address(RVA = "0x8E1484", Offset = "0x8E1484", VA = "0x8E1484")]
		public void OnNock()
		{
		}

		[Address(RVA = "0x8E148C", Offset = "0x8E148C", VA = "0x8E148C")]
		public void Fired()
		{
		}

		[Address(RVA = "0x8E15BC", Offset = "0x8E15BC", VA = "0x8E15BC")]
		public void ResetArrow()
		{
		}

		[Address(RVA = "0x8E1948", Offset = "0x8E1948", VA = "0x8E1948")]
		private void Start()
		{
		}

		[Address(RVA = "0x8E19C0", Offset = "0x8E19C0", VA = "0x8E19C0")]
		private void SetOrigns()
		{
		}

		[Address(RVA = "0x8E1A5C", Offset = "0x8E1A5C", VA = "0x8E1A5C")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0x8E1BB4", Offset = "0x8E1BB4", VA = "0x8E1BB4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x8E15F4", Offset = "0x8E15F4", VA = "0x8E15F4")]
		private void RecreateNotch()
		{
		}

		[Address(RVA = "0x8E177C", Offset = "0x8E177C", VA = "0x8E177C")]
		private void ResetTransform()
		{
		}

		[Address(RVA = "0x8E1528", Offset = "0x8E1528", VA = "0x8E1528")]
		private void DestroyArrow(float time)
		{
		}

		[Address(RVA = "0x8E1C20", Offset = "0x8E1C20", VA = "0x8E1C20")]
		public Arrow()
		{
		}
	}
	public class ArrowNotch : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject arrow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_InteractableObject obj;

		[Address(RVA = "0x8E1C34", Offset = "0x8E1C34", VA = "0x8E1C34")]
		private void Start()
		{
		}

		[Address(RVA = "0x8E1CD8", Offset = "0x8E1CD8", VA = "0x8E1CD8")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0x8E1EF8", Offset = "0x8E1EF8", VA = "0x8E1EF8")]
		private void CopyNotchToArrow()
		{
		}

		[Address(RVA = "0x8E20BC", Offset = "0x8E20BC", VA = "0x8E20BC")]
		public ArrowNotch()
		{
		}
	}
	public class ArrowSpawner : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject arrowPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spawnDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float spawnDelayTimer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BowAim bow;

		[Address(RVA = "0x8E20C4", Offset = "0x8E20C4", VA = "0x8E20C4")]
		private void Start()
		{
		}

		[Address(RVA = "0x8E20CC", Offset = "0x8E20CC", VA = "0x8E20CC")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Address(RVA = "0x8E22F0", Offset = "0x8E22F0", VA = "0x8E22F0")]
		private bool CanGrab(VRTK_InteractGrab grabbingController)
		{
			return default(bool);
		}

		[Address(RVA = "0x8E23CC", Offset = "0x8E23CC", VA = "0x8E23CC")]
		private bool NoArrowNotched(GameObject controller)
		{
			return default(bool);
		}

		[Address(RVA = "0x8E25D0", Offset = "0x8E25D0", VA = "0x8E25D0")]
		public ArrowSpawner()
		{
		}
	}
	public class BowAim : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B528", Offset = "0x65B528")]
		private sealed class <GetBaseRotation>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowAim <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x9BA8A4", Offset = "0x9BA8A4", VA = "0x9BA8A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x9BA914", Offset = "0x9BA914", VA = "0x9BA914", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x9B9958", Offset = "0x9B9958", VA = "0x9B9958")]
			[DebuggerHidden]
			public <GetBaseRotation>d__26(int <>1__state)
			{
			}

			[Address(RVA = "0x9BA7A0", Offset = "0x9BA7A0", VA = "0x9BA7A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x9BA7A4", Offset = "0x9BA7A4", VA = "0x9BA7A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x9BA8AC", Offset = "0x9BA8AC", VA = "0x9BA8AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float powerMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float pullMultiplier;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float pullOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxPullDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float bowVibration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float stringVibration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowAnimation bowAnimation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject currentArrow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BowHandle handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VRTK_InteractableObject interact;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VRTK_InteractGrab holdControl;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRTK_InteractGrab stringControl;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion releaseRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion baseRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool fired;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float fireOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float currentPull;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float previousPull;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioSource source;

		[Address(RVA = "0x9B9500", Offset = "0x9B9500", VA = "0x9B9500")]
		public VRTK_InteractGrab GetPullHand()
		{
			return null;
		}

		[Address(RVA = "0x9B9508", Offset = "0x9B9508", VA = "0x9B9508")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Address(RVA = "0x9B9544", Offset = "0x9B9544", VA = "0x9B9544")]
		public bool HasArrow()
		{
			return default(bool);
		}

		[Address(RVA = "0x9B95B4", Offset = "0x9B95B4", VA = "0x9B95B4")]
		public void SetArrow(GameObject arrow)
		{
		}

		[Address(RVA = "0x9B9678", Offset = "0x9B9678", VA = "0x9B9678")]
		private void Start()
		{
		}

		[Address(RVA = "0x9B95BC", Offset = "0x9B95BC", VA = "0x9B95BC")]
		private void PlaySound()
		{
		}

		[Address(RVA = "0x9B9768", Offset = "0x9B9768", VA = "0x9B9768")]
		private void DoObjectGrab(object sender, InteractableObjectEventArgs e)
		{
		}

		[Address(RVA = "0x9B98E4", Offset = "0x9B98E4", VA = "0x9B98E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6810A0", Offset = "0x6810A0")]
		private IEnumerator GetBaseRotation()
		{
			return null;
		}

		[Address(RVA = "0x9B9984", Offset = "0x9B9984", VA = "0x9B9984")]
		private void Update()
		{
		}

		[Address(RVA = "0x9BA2B0", Offset = "0x9BA2B0", VA = "0x9BA2B0")]
		private void Release()
		{
		}

		[Address(RVA = "0x9BA6D8", Offset = "0x9BA6D8", VA = "0x9BA6D8")]
		private void ReleaseArrow()
		{
		}

		[Address(RVA = "0x9B9CF4", Offset = "0x9B9CF4", VA = "0x9B9CF4")]
		private void AimArrow()
		{
		}

		[Address(RVA = "0x9B9E38", Offset = "0x9B9E38", VA = "0x9B9E38")]
		private void AimBow()
		{
		}

		[Address(RVA = "0x9BA04C", Offset = "0x9BA04C", VA = "0x9BA04C")]
		private void PullString()
		{
		}

		[Address(RVA = "0x9BA778", Offset = "0x9BA778", VA = "0x9BA778")]
		public BowAim()
		{
		}
	}
	public class BowAnimation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animation animationTimeline;

		[Address(RVA = "0x9BA5E8", Offset = "0x9BA5E8", VA = "0x9BA5E8")]
		public void SetFrame(float frame)
		{
		}

		[Address(RVA = "0x9BA91C", Offset = "0x9BA91C", VA = "0x9BA91C")]
		public BowAnimation()
		{
		}
	}
	public class BowHandle : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform arrowNockingPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BowAim aim;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x66F82C", Offset = "0x66F82C")]
		public Transform nockSide;

		[Address(RVA = "0x9BA924", Offset = "0x9BA924", VA = "0x9BA924")]
		public BowHandle()
		{
		}
	}
	public class Follow : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool followPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool followRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform target;

		[Address(RVA = "0x9BA92C", Offset = "0x9BA92C", VA = "0x9BA92C")]
		private void Update()
		{
		}

		[Address(RVA = "0x9BAB60", Offset = "0x9BAB60", VA = "0x9BAB60")]
		public Follow()
		{
		}
	}
}
namespace VRTK.Examples.Utilities
{
	public class VRTKExample_ObjectListToggle : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] retoggle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRTK_ControllerEvents controllerEvents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRTK_ControllerEvents.ButtonAlias toggleButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected int currentIndex;

		[Address(RVA = "0x9D4720", Offset = "0x9D4720", VA = "0x9D4720", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9D480C", Offset = "0x9D480C", VA = "0x9D480C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Address(RVA = "0x9D48F4", Offset = "0x9D48F4", VA = "0x9D48F4", Slot = "6")]
		protected virtual void ButtonPressed(object sender, ControllerInteractionEventArgs e)
		{
		}

		[Address(RVA = "0x9D4950", Offset = "0x9D4950", VA = "0x9D4950", Slot = "7")]
		protected virtual void ToggleObjects()
		{
		}

		[Address(RVA = "0x9D4BF0", Offset = "0x9D4BF0", VA = "0x9D4BF0", Slot = "8")]
		protected virtual void ToggleOn()
		{
		}

		[Address(RVA = "0x9D4C58", Offset = "0x9D4C58", VA = "0x9D4C58", Slot = "9")]
		protected virtual void RetoggleOn()
		{
		}

		[Address(RVA = "0x9D4DDC", Offset = "0x9D4DDC", VA = "0x9D4DDC")]
		public VRTKExample_ObjectListToggle()
		{
		}
	}
	public class VRTKExample_SceneSwitcher : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode backKey;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode forwardKey;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected int firstSceneIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected int lastSceneIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool pressEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected VRTK_ControllerReference controllerReference;

		[Address(RVA = "0x9D4E54", Offset = "0x9D4E54", VA = "0x9D4E54", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x9D4E5C", Offset = "0x9D4E5C", VA = "0x9D4E5C", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Address(RVA = "0x9D4EC8", Offset = "0x9D4EC8", VA = "0x9D4EC8", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Address(RVA = "0x9D4FFC", Offset = "0x9D4FFC", VA = "0x9D4FFC", Slot = "7")]
		protected virtual void EnablePress()
		{
		}

		[Address(RVA = "0x9D5008", Offset = "0x9D5008", VA = "0x9D5008", Slot = "8")]
		protected virtual bool BackPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0x9D5050", Offset = "0x9D5050", VA = "0x9D5050", Slot = "9")]
		protected virtual bool ForwardPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0x9D5098", Offset = "0x9D5098", VA = "0x9D5098", Slot = "10")]
		protected virtual bool ControllerForward()
		{
			return default(bool);
		}

		[Address(RVA = "0x9D51CC", Offset = "0x9D51CC", VA = "0x9D51CC", Slot = "11")]
		protected virtual bool ControllerBackward()
		{
			return default(bool);
		}

		[Address(RVA = "0x9D5300", Offset = "0x9D5300", VA = "0x9D5300")]
		public VRTKExample_SceneSwitcher()
		{
		}
	}
	public class SceneChanger : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool canPress;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRTK_ControllerReference controllerReference;

		[Address(RVA = "0x9D3F44", Offset = "0x9D3F44", VA = "0x9D3F44")]
		private void Awake()
		{
		}

		[Address(RVA = "0x9D3FA8", Offset = "0x9D3FA8", VA = "0x9D3FA8")]
		private bool IsForwardPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0x9D40DC", Offset = "0x9D40DC", VA = "0x9D40DC")]
		private bool IsBackPressed()
		{
			return default(bool);
		}

		[Address(RVA = "0x9D4210", Offset = "0x9D4210", VA = "0x9D4210")]
		private void ResetPress()
		{
		}

		[Address(RVA = "0x9D421C", Offset = "0x9D421C", VA = "0x9D421C")]
		private void Update()
		{
		}

		[Address(RVA = "0x9D4360", Offset = "0x9D4360", VA = "0x9D4360")]
		public SceneChanger()
		{
		}
	}
	public class SceneLoader : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Object sceneConstructor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool sdkSwitcher;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject leftScriptAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rightScriptAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VRTK_SDKSetupSwitcher setupSwitcher;

		[Address(RVA = "0x9D4368", Offset = "0x9D4368", VA = "0x9D4368", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Address(RVA = "0x9D442C", Offset = "0x9D442C", VA = "0x9D442C", Slot = "5")]
		protected virtual void LateUpdate()
		{
		}

		[Address(RVA = "0x9D44EC", Offset = "0x9D44EC", VA = "0x9D44EC", Slot = "6")]
		protected virtual void OnSceneLoaded(Scene loadedScene, LoadSceneMode loadMode)
		{
		}

		[Address(RVA = "0x9D46A8", Offset = "0x9D46A8", VA = "0x9D46A8", Slot = "7")]
		protected virtual void ToggleScriptAlias(bool state)
		{
		}

		[Address(RVA = "0x9D4710", Offset = "0x9D4710", VA = "0x9D4710")]
		public SceneLoader()
		{
		}
	}
}
namespace MeshCutter
{
	public delegate void CutterCallback(bool success, GameObject[] cuttedObjects, CutterPlane plane, object userdata);
	public class CutterInfo
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CutterTarget CutterTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CutterPlane CutterPlane;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CutterObject CutterObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CutterCallback CutterCallback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CutterMesh[] CutterMeshes;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public object UserData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool NeedAnimation;

		[Address(RVA = "0x9098F4", Offset = "0x9098F4", VA = "0x9098F4")]
		public CutterInfo()
		{
		}
	}
	public class Cutter : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B538", Offset = "0x65B538")]
		private sealed class <CoroutineUpdate>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Cutter <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x90BC9C", Offset = "0x90BC9C", VA = "0x90BC9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x90BD0C", Offset = "0x90BD0C", VA = "0x90BD0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x9091FC", Offset = "0x9091FC", VA = "0x9091FC")]
			[DebuggerHidden]
			public <CoroutineUpdate>d__18(int <>1__state)
			{
			}

			[Address(RVA = "0x90B338", Offset = "0x90B338", VA = "0x90B338", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x90B33C", Offset = "0x90B33C", VA = "0x90B33C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x90BCA4", Offset = "0x90BCA4", VA = "0x90BCA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B548", Offset = "0x65B548")]
		private sealed class <CreateCuttedObjects>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CutterInfo info;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Cutter <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool needAnimation;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CutterTarget <target>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material[] <mats>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private CutterObject <cutterObject>5__4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CutterMesh[] <cuttedMeshes>5__5;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private GameObject[] <cuttedObject>5__6;

			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <i>5__7;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x90D50C", Offset = "0x90D50C", VA = "0x90D50C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x90D57C", Offset = "0x90D57C", VA = "0x90D57C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x909F8C", Offset = "0x909F8C", VA = "0x909F8C")]
			[DebuggerHidden]
			public <CreateCuttedObjects>d__23(int <>1__state)
			{
			}

			[Address(RVA = "0x90BD14", Offset = "0x90BD14", VA = "0x90BD14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x90BD18", Offset = "0x90BD18", VA = "0x90BD18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x90D514", Offset = "0x90D514", VA = "0x90D514", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B558", Offset = "0x65B558")]
		private sealed class <SpawnParticle>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject spawn;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform parent;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SkinnedMeshRenderer mrend;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x90D7F8", Offset = "0x90D7F8", VA = "0x90D7F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x90D868", Offset = "0x90D868", VA = "0x90D868", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x90B064", Offset = "0x90B064", VA = "0x90B064")]
			[DebuggerHidden]
			public <SpawnParticle>d__24(int <>1__state)
			{
			}

			[Address(RVA = "0x90D584", Offset = "0x90D584", VA = "0x90D584", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x90D588", Offset = "0x90D588", VA = "0x90D588", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x90D800", Offset = "0x90D800", VA = "0x90D800", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<GameObject[], CutterPlane> OnCutted;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<GameObject> OnFailed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F83C", Offset = "0x66F83C")]
		private bool _autoDestroyTarget;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F888", Offset = "0x66F888")]
		private Material _cutDefaultMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CutWorker _worker;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<CutterInfo> _cuttedInfoList;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<CutterInfo> _failedCutInfoList;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Queue<CutterInfo> _cuttedInfoQueue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Queue<CutterInfo> _failedCutInfoQueue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _isInitialized;

		public bool AutoDestroyTarget
		{
			[Address(RVA = "0x908F28", Offset = "0x908F28", VA = "0x908F28")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x908F30", Offset = "0x908F30", VA = "0x908F30")]
			set
			{
			}
		}

		public Material CutDefaultMaterial
		{
			[Address(RVA = "0x908F3C", Offset = "0x908F3C", VA = "0x908F3C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x908F44", Offset = "0x908F44", VA = "0x908F44")]
			set
			{
			}
		}

		[Address(RVA = "0x908F4C", Offset = "0x908F4C", VA = "0x908F4C")]
		private void Start()
		{
		}

		[Address(RVA = "0x90915C", Offset = "0x90915C", VA = "0x90915C")]
		private void Update()
		{
		}

		[Address(RVA = "0x909188", Offset = "0x909188", VA = "0x909188")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681104", Offset = "0x681104")]
		private IEnumerator CoroutineUpdate()
		{
			return null;
		}

		[Address(RVA = "0x908F50", Offset = "0x908F50", VA = "0x908F50")]
		public void Initialize()
		{
		}

		[Address(RVA = "0x909228", Offset = "0x909228", VA = "0x909228")]
		public void Cut(CutterTarget target, Vector3 position, Vector3 normal, [Optional] CutterCallback callback, bool needAnimation = false, [Optional] object userdata)
		{
		}

		[Address(RVA = "0x9099C8", Offset = "0x9099C8", VA = "0x9099C8")]
		private Material[] GetMaterials(GameObject target)
		{
			return null;
		}

		[Address(RVA = "0x909B0C", Offset = "0x909B0C", VA = "0x909B0C")]
		private Transform SearchBone(string targetName, Transform rootBone)
		{
			return null;
		}

		[Address(RVA = "0x909EDC", Offset = "0x909EDC", VA = "0x909EDC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681168", Offset = "0x681168")]
		private IEnumerator CreateCuttedObjects(CutterInfo info, bool needAnimation)
		{
			return null;
		}

		[Address(RVA = "0x909FB8", Offset = "0x909FB8", VA = "0x909FB8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6811CC", Offset = "0x6811CC")]
		private IEnumerator SpawnParticle(SkinnedMeshRenderer mrend, Transform parent, GameObject spawn)
		{
			return null;
		}

		[Address(RVA = "0x90B090", Offset = "0x90B090", VA = "0x90B090")]
		private void OnCuttedHandler(CutterInfo info)
		{
		}

		[Address(RVA = "0x90B178", Offset = "0x90B178", VA = "0x90B178")]
		private void OnFailedHanlder(CutterInfo info)
		{
		}

		[Address(RVA = "0x90B260", Offset = "0x90B260", VA = "0x90B260")]
		public Cutter()
		{
		}
	}
	public class CutterMesh
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh Mesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _subMeshCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[][] _subMeshIndices;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] Triangles;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] Vertices;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3[] Normals;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2[] UVs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BoneWeight[] BoneWeights;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _hasBoneWeight;

		public int SubMeshCount
		{
			[Address(RVA = "0x90D420", Offset = "0x90D420", VA = "0x90D420")]
			get
			{
				return default(int);
			}
		}

		public bool HasBoneWeight
		{
			[Address(RVA = "0x90D93C", Offset = "0x90D93C", VA = "0x90D93C")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0x90D944", Offset = "0x90D944", VA = "0x90D944")]
		public CutterMesh()
		{
		}

		[Address(RVA = "0x90D94C", Offset = "0x90D94C", VA = "0x90D94C")]
		public CutterMesh(Mesh mesh)
		{
		}

		[Address(RVA = "0x90D428", Offset = "0x90D428", VA = "0x90D428")]
		public int[] GetIndices(int index)
		{
			return null;
		}

		[Address(RVA = "0x90DB74", Offset = "0x90DB74", VA = "0x90DB74")]
		public void SetIndices(int[][] indices)
		{
		}
	}
	public class CutterMeshSide
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> Vertices;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Vector3> Normals;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Vector2> UVs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<int> Triangles;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<BoneWeight> BoneWeights;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<List<int>> SubIndices;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CutterMesh _targetMesh;

		[Address(RVA = "0x90DBAC", Offset = "0x90DBAC", VA = "0x90DBAC")]
		public void SetTargetMesh(CutterMesh targetMesh)
		{
		}

		[Address(RVA = "0x90DBB4", Offset = "0x90DBB4", VA = "0x90DBB4")]
		public void ClearAll()
		{
		}

		[Address(RVA = "0x90DCC8", Offset = "0x90DCC8", VA = "0x90DCC8")]
		public void AddTriangle(int p1, int p2, int p3, int submesh)
		{
		}

		[Address(RVA = "0x90E438", Offset = "0x90E438", VA = "0x90E438")]
		public void AddTriangle(Vector3[] points3, Vector3[] normals3, Vector2[] uvs3, BoneWeight[] boneWeights3, Vector3 faceNormal, int submesh)
		{
		}

		[Address(RVA = "0x90EBC4", Offset = "0x90EBC4", VA = "0x90EBC4")]
		public CutterMeshSide()
		{
		}
	}
	public class CutterObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CutterMesh CutterMesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh _mesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Matrix4x4[] _bindposes;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string _name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x66F8D4", Offset = "0x66F8D4")]
		private bool <NeedsScaleAdjust>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CutterTarget _target;

		public Mesh Mesh
		{
			[Address(RVA = "0x90ECF4", Offset = "0x90ECF4", VA = "0x90ECF4")]
			get
			{
				return null;
			}
		}

		public Matrix4x4[] Bindposes
		{
			[Address(RVA = "0x90D47C", Offset = "0x90D47C", VA = "0x90D47C")]
			get
			{
				return null;
			}
		}

		public int SubMeshCount
		{
			[Address(RVA = "0x90ECFC", Offset = "0x90ECFC", VA = "0x90ECFC")]
			get
			{
				return default(int);
			}
		}

		public string Name
		{
			[Address(RVA = "0x90ED28", Offset = "0x90ED28", VA = "0x90ED28")]
			get
			{
				return null;
			}
			[Address(RVA = "0x90ED30", Offset = "0x90ED30", VA = "0x90ED30")]
			set
			{
			}
		}

		public bool NeedsScaleAdjust
		{
			[Address(RVA = "0x90D48C", Offset = "0x90D48C", VA = "0x90D48C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681230", Offset = "0x681230")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x90ED38", Offset = "0x90ED38", VA = "0x90ED38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681240", Offset = "0x681240")]
			set
			{
			}
		}

		[Address(RVA = "0x9098FC", Offset = "0x9098FC", VA = "0x9098FC")]
		public CutterObject(CutterTarget target, bool needAnimation = false)
		{
		}

		[Address(RVA = "0x90ED44", Offset = "0x90ED44", VA = "0x90ED44")]
		private void GetMeshInfo(GameObject target, out Mesh outMesh, out Matrix4x4[] outBindposes)
		{
		}
	}
	public class CutterPlane
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 _position;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 _normal;

		public Vector3 Position
		{
			[Address(RVA = "0x90F2A0", Offset = "0x90F2A0", VA = "0x90F2A0")]
			get
			{
				return default(Vector3);
			}
		}

		public Vector3 Normal
		{
			[Address(RVA = "0x90F2AC", Offset = "0x90F2AC", VA = "0x90F2AC")]
			get
			{
				return default(Vector3);
			}
		}

		[Address(RVA = "0x909888", Offset = "0x909888", VA = "0x909888")]
		public CutterPlane(Vector3 position, Vector3 normal)
		{
		}

		[Address(RVA = "0x90F2B8", Offset = "0x90F2B8", VA = "0x90F2B8")]
		public bool Raycast(Ray ray, out float distance)
		{
			return default(bool);
		}

		[Address(RVA = "0x90F478", Offset = "0x90F478", VA = "0x90F478")]
		public bool GetSide(Vector3 point)
		{
			return default(bool);
		}
	}
	public class CutterTarget : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<CutterTarget, GameObject[]> OnCutted;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F8E4", Offset = "0x66F8E4")]
		private Material _cutMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x66F930", Offset = "0x66F930")]
		private GameObject _curParticles;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform _mesh;

		public Material CutMaterial
		{
			[Address(RVA = "0x90D3E8", Offset = "0x90D3E8", VA = "0x90D3E8")]
			get
			{
				return null;
			}
		}

		public GameObject CutParticles
		{
			[Address(RVA = "0x90D484", Offset = "0x90D484", VA = "0x90D484")]
			get
			{
				return null;
			}
		}

		public Transform Mesh
		{
			[Address(RVA = "0x90F574", Offset = "0x90F574", VA = "0x90F574")]
			get
			{
				return null;
			}
			[Address(RVA = "0x90F57C", Offset = "0x90F57C", VA = "0x90F57C")]
			set
			{
			}
		}

		public bool NeedsConvertLocal
		{
			[Address(RVA = "0x9097F0", Offset = "0x9097F0", VA = "0x9097F0")]
			get
			{
				return default(bool);
			}
		}

		public GameObject GameObject
		{
			[Address(RVA = "0x90D3B8", Offset = "0x90D3B8", VA = "0x90D3B8")]
			get
			{
				return null;
			}
		}

		public Transform MeshTransform
		{
			[Address(RVA = "0x9097C0", Offset = "0x9097C0", VA = "0x9097C0")]
			get
			{
				return null;
			}
		}

		public string Name
		{
			[Address(RVA = "0x90D3F0", Offset = "0x90D3F0", VA = "0x90D3F0")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x90D494", Offset = "0x90D494", VA = "0x90D494")]
		public void Cutted(GameObject[] cuttedObjects)
		{
		}

		[Address(RVA = "0x90F600", Offset = "0x90F600", VA = "0x90F600")]
		public CutterTarget()
		{
		}
	}
	internal class CutTask
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WaitCallback Callback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object Args;

		[Address(RVA = "0x907AA4", Offset = "0x907AA4", VA = "0x907AA4")]
		public CutTask()
		{
		}
	}
	public class CutWorker
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<CutterInfo> OnCutted;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<CutterInfo> OnFailed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Material _material;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AutoResetEvent _putNotification;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Queue<CutTask> _taskQueue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Thread[] _threadpool;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MeshCut _meshCut;

		[Address(RVA = "0x907AAC", Offset = "0x907AAC", VA = "0x907AAC")]
		public CutWorker()
		{
		}

		[Address(RVA = "0x907B80", Offset = "0x907B80", VA = "0x907B80")]
		public CutWorker(int threadNum)
		{
		}

		[Address(RVA = "0x907B7C", Offset = "0x907B7C", VA = "0x907B7C")]
		private void Initialize(int threadNum)
		{
		}

		[Address(RVA = "0x907C4C", Offset = "0x907C4C", VA = "0x907C4C")]
		private void SetupThread(int threadNum)
		{
		}

		[Address(RVA = "0x907EC4", Offset = "0x907EC4", VA = "0x907EC4")]
		public void Cut(CutterInfo info)
		{
		}

		[Address(RVA = "0x907EC8", Offset = "0x907EC8", VA = "0x907EC8")]
		private void EnqueueTask(CutterInfo info)
		{
		}

		[Address(RVA = "0x907FC4", Offset = "0x907FC4", VA = "0x907FC4")]
		private void CutProc(object args)
		{
		}

		[Address(RVA = "0x908E54", Offset = "0x908E54", VA = "0x908E54")]
		private void ThreadRun()
		{
		}
	}
	public class MeshCut
	{
		private class MeshCutData
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CutterMesh VictimMesh;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CutterPlane Blade;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CutterMeshSide LeftSide;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CutterMeshSide RightSide;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<Vector3> NewVertices;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<BoneWeight> NewBoneWeights;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<Vector3> CapVertTracker;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<Vector3> CapVertpolygon;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<BoneWeight> CapBoneWeightpolygon;

			[Address(RVA = "0x90F608", Offset = "0x90F608", VA = "0x90F608")]
			public MeshCutData(CutterMesh victimMesh, CutterPlane blade)
			{
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B568", Offset = "0x65B568")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyValuePair<int, float>, float> <>9__4_0;

			[Address(RVA = "0x914110", Offset = "0x914110", VA = "0x914110")]
			public <>c()
			{
			}

			[Address(RVA = "0x914118", Offset = "0x914118", VA = "0x914118")]
			internal float <FillCap>b__4_0(KeyValuePair<int, float> w)
			{
				return default(float);
			}
		}

		[Address(RVA = "0x9081D8", Offset = "0x9081D8", VA = "0x9081D8")]
		public CutterMesh[] Cut(CutterObject victim, CutterPlane blade)
		{
			return null;
		}

		[Address(RVA = "0x90F76C", Offset = "0x90F76C", VA = "0x90F76C")]
		private void CutFace(int submesh, bool[] sides, int index1, int index2, int index3, MeshCutData data)
		{
		}

		[Address(RVA = "0x912014", Offset = "0x912014", VA = "0x912014")]
		private void Capping(MeshCutData data)
		{
		}

		[Address(RVA = "0x9128B8", Offset = "0x9128B8", VA = "0x9128B8")]
		private void FillCap(MeshCutData data)
		{
		}

		[Address(RVA = "0x907B74", Offset = "0x907B74", VA = "0x907B74")]
		public MeshCut()
		{
		}
	}
}
namespace OculusSampleFramework
{
	public class ColorGrabbable : OVRGrabbable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		public bool Highlight
		{
			[Address(RVA = "0xAFF654", Offset = "0xAFF654", VA = "0xAFF654")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xAFF65C", Offset = "0xAFF65C", VA = "0xAFF65C")]
			set
			{
			}
		}

		[Address(RVA = "0xAFF668", Offset = "0xAFF668", VA = "0xAFF668")]
		protected void UpdateColor()
		{
		}

		[Address(RVA = "0xAFF890", Offset = "0xAFF890", VA = "0xAFF890", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Address(RVA = "0xAFF8B8", Offset = "0xAFF8B8", VA = "0xAFF8B8", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Address(RVA = "0xAFF8E0", Offset = "0xAFF8E0", VA = "0xAFF8E0")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAFF734", Offset = "0xAFF734", VA = "0xAFF734")]
		private void SetColor(Color color)
		{
		}

		[Address(RVA = "0xAFFB88", Offset = "0xAFFB88", VA = "0xAFFB88")]
		public ColorGrabbable()
		{
		}
	}
	public class DistanceGrabbable : OVRGrabbable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		public bool InRange
		{
			[Address(RVA = "0xAFFC84", Offset = "0xAFFC84", VA = "0xAFFC84")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xAFFC8C", Offset = "0xAFFC8C", VA = "0xAFFC8C")]
			set
			{
			}
		}

		public bool Targeted
		{
			[Address(RVA = "0xAFFE9C", Offset = "0xAFFE9C", VA = "0xAFFE9C")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xAFFEA4", Offset = "0xAFFEA4", VA = "0xAFFEA4")]
			set
			{
			}
		}

		[Address(RVA = "0xAFFEB0", Offset = "0xAFFEB0", VA = "0xAFFEB0", Slot = "6")]
		protected override void Start()
		{
		}

		[Address(RVA = "0xAFFC98", Offset = "0xAFFC98", VA = "0xAFFC98")]
		private void RefreshCrosshair()
		{
		}

		[Address(RVA = "0xB00110", Offset = "0xB00110", VA = "0xB00110")]
		public void SetColor(Color focusColor)
		{
		}

		[Address(RVA = "0xB001A8", Offset = "0xB001A8", VA = "0xB001A8")]
		public void ClearColor()
		{
		}

		[Address(RVA = "0xB00248", Offset = "0xB00248", VA = "0xB00248")]
		public DistanceGrabbable()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x65945C", Offset = "0x65945C")]
	public class DistanceGrabber : OVRGrabber
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		public Color m_focusColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private float m_spherecastRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool m_useSpherecast;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float m_objectPullMaxRotationRate;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool m_movingObjectToHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private int m_obstructionLayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private GameObject m_player;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private DistanceGrabber m_otherHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected DistanceGrabbable m_target;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected Collider m_targetCollider;

		public bool UseSpherecast
		{
			[Address(RVA = "0xB00250", Offset = "0xB00250", VA = "0xB00250")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xB00258", Offset = "0xB00258", VA = "0xB00258")]
			set
			{
			}
		}

		[Address(RVA = "0xB00274", Offset = "0xB00274", VA = "0xB00274", Slot = "5")]
		protected override void Start()
		{
		}

		[Address(RVA = "0xB00424", Offset = "0xB00424", VA = "0xB00424")]
		private void Update()
		{
		}

		[Address(RVA = "0xB00EE8", Offset = "0xB00EE8", VA = "0xB00EE8", Slot = "6")]
		protected override void GrabBegin()
		{
		}

		[Address(RVA = "0xB0169C", Offset = "0xB0169C", VA = "0xB0169C", Slot = "7")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Address(RVA = "0xB01AFC", Offset = "0xB01AFC", VA = "0xB01AFC")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Address(RVA = "0xB00738", Offset = "0xB00738", VA = "0xB00738")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Address(RVA = "0xB01BF4", Offset = "0xB01BF4", VA = "0xB01BF4")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Address(RVA = "0xB02084", Offset = "0xB02084", VA = "0xB02084", Slot = "8")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Address(RVA = "0xB0209C", Offset = "0xB0209C", VA = "0xB0209C", Slot = "9")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Address(RVA = "0xB020A4", Offset = "0xB020A4", VA = "0xB020A4")]
		public DistanceGrabber()
		{
		}
	}
	public class GrabbableCrosshair : MonoBehaviour
	{
		public enum CrosshairState
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Disabled,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Enabled,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Targeted
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Address(RVA = "0xB02558", Offset = "0xB02558", VA = "0xB02558")]
		private void Start()
		{
		}

		[Address(RVA = "0xB0003C", Offset = "0xB0003C", VA = "0xB0003C")]
		public void SetState(CrosshairState cs)
		{
		}

		[Address(RVA = "0xB025C8", Offset = "0xB025C8", VA = "0xB025C8")]
		private void Update()
		{
		}

		[Address(RVA = "0xB02620", Offset = "0xB02620", VA = "0xB02620")]
		public GrabbableCrosshair()
		{
		}
	}
	public class GrabManager : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Address(RVA = "0xB023DC", Offset = "0xB023DC", VA = "0xB023DC")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Address(RVA = "0xB02498", Offset = "0xB02498", VA = "0xB02498")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Address(RVA = "0xB02550", Offset = "0xB02550", VA = "0xB02550")]
		public GrabManager()
		{
		}
	}
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Address(RVA = "0x737664", Offset = "0x737664", VA = "0x737664")]
		private void Start()
		{
		}

		[Address(RVA = "0x737730", Offset = "0x737730", VA = "0x737730")]
		private void OnInputFocusLost()
		{
		}

		[Address(RVA = "0x73773C", Offset = "0x73773C", VA = "0x73773C")]
		private void OnInputFocusAcquired()
		{
		}

		[Address(RVA = "0x737748", Offset = "0x737748", VA = "0x737748")]
		public PauseOnInputLoss()
		{
		}
	}
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool museSpherecast;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		public bool UseSpherecast
		{
			[Address(RVA = "0xB020C4", Offset = "0xB020C4", VA = "0xB020C4")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xB020CC", Offset = "0xB020CC", VA = "0xB020CC")]
			set
			{
			}
		}

		public bool AllowGrabThroughWalls
		{
			[Address(RVA = "0xB02184", Offset = "0xB02184", VA = "0xB02184")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xB0218C", Offset = "0xB0218C", VA = "0xB0218C")]
			set
			{
			}
		}

		[Address(RVA = "0xB02230", Offset = "0xB02230", VA = "0xB02230")]
		private void Start()
		{
		}

		[Address(RVA = "0xB023B4", Offset = "0xB023B4", VA = "0xB023B4")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Address(RVA = "0xB023C4", Offset = "0xB023C4", VA = "0xB023C4")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Address(RVA = "0xB023D4", Offset = "0xB023D4", VA = "0xB023D4")]
		public DistanceGrabberSample()
		{
		}
	}
	public enum EUiDisplayType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		EUDT_WorldGeoQuad,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		EUDT_OverlayQuad,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		EUDT_None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		EUDT_MaxDislayTypes
	}
	public class OVROverlaySample : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B578", Offset = "0x65B578")]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xB041AC", Offset = "0xB041AC", VA = "0xB041AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xB0421C", Offset = "0xB0421C", VA = "0xB0421C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xB036B8", Offset = "0xB036B8", VA = "0xB036B8")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Address(RVA = "0xB03EB0", Offset = "0xB03EB0", VA = "0xB03EB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xB03EB4", Offset = "0xB03EB4", VA = "0xB03EB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xB041B4", Offset = "0xB041B4", VA = "0xB041B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string ovrOverlayID = "OVROverlayID";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string applicationID = "ApplicationID";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string noneID = "NoneID";

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66FA6C", Offset = "0x66FA6C")]
		public GameObject mainCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x66FAA4", Offset = "0x66FAA4")]
		public GameObject prefabForLevelLoadSim;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Address(RVA = "0xB02628", Offset = "0xB02628", VA = "0xB02628")]
		private void Start()
		{
		}

		[Address(RVA = "0xB030D8", Offset = "0xB030D8", VA = "0xB030D8")]
		private void Update()
		{
		}

		[Address(RVA = "0xB03234", Offset = "0xB03234", VA = "0xB03234")]
		private void ActivateWorldGeo()
		{
		}

		[Address(RVA = "0xB033B4", Offset = "0xB033B4", VA = "0xB033B4")]
		private void ActivateOVROverlay()
		{
		}

		[Address(RVA = "0xB03534", Offset = "0xB03534", VA = "0xB03534")]
		private void ActivateNone()
		{
		}

		[Address(RVA = "0xB03208", Offset = "0xB03208", VA = "0xB03208")]
		private void TriggerLoad()
		{
		}

		[Address(RVA = "0xB03644", Offset = "0xB03644", VA = "0xB03644")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681250", Offset = "0x681250")]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Address(RVA = "0xB036E4", Offset = "0xB036E4", VA = "0xB036E4")]
		private void TriggerUnload()
		{
		}

		[Address(RVA = "0xB02A48", Offset = "0xB02A48", VA = "0xB02A48")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Address(RVA = "0xB03848", Offset = "0xB03848", VA = "0xB03848")]
		private void SimulateLevelLoad()
		{
		}

		[Address(RVA = "0xB03720", Offset = "0xB03720", VA = "0xB03720")]
		private void ClearObjects()
		{
		}

		[Address(RVA = "0xB03C68", Offset = "0xB03C68", VA = "0xB03C68")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Address(RVA = "0xB03D44", Offset = "0xB03D44", VA = "0xB03D44")]
		public OVROverlaySample()
		{
		}

		[Address(RVA = "0xB03DC0", Offset = "0xB03DC0", VA = "0xB03DC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6812B4", Offset = "0x6812B4")]
		private void <Start>b__24_0(Toggle t)
		{
		}

		[Address(RVA = "0xB03E10", Offset = "0xB03E10", VA = "0xB03E10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6812C4", Offset = "0x6812C4")]
		private void <Start>b__24_1(Toggle t)
		{
		}

		[Address(RVA = "0xB03E60", Offset = "0xB03E60", VA = "0xB03E60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6812D4", Offset = "0x6812D4")]
		private void <Start>b__24_2(Toggle t)
		{
		}
	}
}
namespace OVRTouchSample
{
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x6594C0", Offset = "0x6594C0")]
	public class Hand : MonoBehaviour
	{
		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B588", Offset = "0x65B588")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Collider, bool> <>9__28_0;

			[Address(RVA = "0xE6EE70", Offset = "0xE6EE70", VA = "0xE6EE70")]
			public <>c()
			{
			}

			[Address(RVA = "0xE6EE78", Offset = "0xE6EE78", VA = "0xE6EE78")]
			internal bool <Start>b__28_0(Collider childCollider)
			{
				return default(bool);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Address(RVA = "0xE6DF44", Offset = "0xE6DF44", VA = "0xE6DF44")]
		private void Awake()
		{
		}

		[Address(RVA = "0xE6DF9C", Offset = "0xE6DF9C", VA = "0xE6DF9C")]
		private void Start()
		{
		}

		[Address(RVA = "0xE6E444", Offset = "0xE6E444", VA = "0xE6E444")]
		private void Update()
		{
		}

		[Address(RVA = "0xE6E564", Offset = "0xE6E564", VA = "0xE6E564")]
		private void UpdateCapTouchStates()
		{
		}

		[Address(RVA = "0xE6E944", Offset = "0xE6E944", VA = "0xE6E944")]
		private void LateUpdate()
		{
		}

		[Address(RVA = "0xE6EADC", Offset = "0xE6EADC", VA = "0xE6EADC")]
		private void OnInputFocusLost()
		{
		}

		[Address(RVA = "0xE6EC8C", Offset = "0xE6EC8C", VA = "0xE6EC8C")]
		private void OnInputFocusAcquired()
		{
		}

		[Address(RVA = "0xE6E600", Offset = "0xE6E600", VA = "0xE6E600")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Address(RVA = "0xE6E6A0", Offset = "0xE6E6A0", VA = "0xE6E6A0")]
		private void UpdateAnimStates()
		{
		}

		[Address(RVA = "0xE6E208", Offset = "0xE6E208", VA = "0xE6E208")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Address(RVA = "0xE6EDF4", Offset = "0xE6EDF4", VA = "0xE6EDF4")]
		public Hand()
		{
		}
	}
	public enum HandPoseId
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Default,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Generic,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PingPongBall,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Controller
	}
	public class HandPose : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		public bool AllowPointing
		{
			[Address(RVA = "0xE6EDE4", Offset = "0xE6EDE4", VA = "0xE6EDE4")]
			get
			{
				return default(bool);
			}
		}

		public bool AllowThumbsUp
		{
			[Address(RVA = "0xE6EDEC", Offset = "0xE6EDEC", VA = "0xE6EDEC")]
			get
			{
				return default(bool);
			}
		}

		public HandPoseId PoseId
		{
			[Address(RVA = "0xE6EDDC", Offset = "0xE6EDDC", VA = "0xE6EDDC")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Address(RVA = "0xE6EEB4", Offset = "0xE6EEB4", VA = "0xE6EEB4")]
		public HandPose()
		{
		}
	}
	public class TouchController : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Address(RVA = "0xE6EEBC", Offset = "0xE6EEBC", VA = "0xE6EEBC")]
		private void Update()
		{
		}

		[Address(RVA = "0xE6F188", Offset = "0xE6F188", VA = "0xE6F188")]
		private void OnInputFocusLost()
		{
		}

		[Address(RVA = "0xE6F1F8", Offset = "0xE6F1F8", VA = "0xE6F1F8")]
		private void OnInputFocusAcquired()
		{
		}

		[Address(RVA = "0xE6F248", Offset = "0xE6F248", VA = "0xE6F248")]
		public TouchController()
		{
		}
	}
}
namespace Oculus.Spatializer.Propagation
{
	public enum FaceType : uint
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TRIANGLES,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		QUADS
	}
	public enum MaterialProperty : uint
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ABSORPTION,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TRANSMISSION,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SCATTERING
	}
	public struct MeshGroup
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UIntPtr faceCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaceType faceType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr material;
	}
}
namespace Oculus.Platform
{
	public class AbuseReportOptions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Address(RVA = "0xE78E18", Offset = "0xE78E18", VA = "0xE78E18")]
		public AbuseReportOptions()
		{
		}

		[Address(RVA = "0xE78F1C", Offset = "0xE78F1C", VA = "0xE78F1C")]
		public void SetPreventPeopleChooser(bool value)
		{
		}

		[Address(RVA = "0xE79044", Offset = "0xE79044", VA = "0xE79044")]
		public void SetReportType(AbuseReportType value)
		{
		}

		[Address(RVA = "0xE7916C", Offset = "0xE7916C", VA = "0xE7916C")]
		public static explicit operator IntPtr(AbuseReportOptions options)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0xE791BC", Offset = "0xE791BC", VA = "0xE791BC", Slot = "1")]
		~AbuseReportOptions()
		{
		}
	}
	public enum AbuseReportType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FB5C", Offset = "0x66FB5C")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FB94", Offset = "0x66FB94")]
		Object,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FBCC", Offset = "0x66FBCC")]
		User
	}
	public enum AchievementType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FC04", Offset = "0x66FC04")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FC3C", Offset = "0x66FC3C")]
		Simple,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FC74", Offset = "0x66FC74")]
		Bitfield,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FCAC", Offset = "0x66FCAC")]
		Count
	}
	public class AndroidPlatform
	{
		[Address(RVA = "0xE7B29C", Offset = "0xE7B29C", VA = "0xE7B29C")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Address(RVA = "0xE7B410", Offset = "0xE7B410", VA = "0xE7B410")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}

		[Address(RVA = "0xE7B5B8", Offset = "0xE7B5B8", VA = "0xE7B5B8")]
		public AndroidPlatform()
		{
		}
	}
	public class ApplicationOptions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Address(RVA = "0xE7BA38", Offset = "0xE7BA38", VA = "0xE7BA38")]
		public ApplicationOptions()
		{
		}

		[Address(RVA = "0xE7BB3C", Offset = "0xE7BB3C", VA = "0xE7BB3C")]
		public void SetDeeplinkMessage(string value)
		{
		}

		[Address(RVA = "0xE7B81C", Offset = "0xE7B81C", VA = "0xE7B81C")]
		public static explicit operator IntPtr(ApplicationOptions options)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0xE7BC60", Offset = "0xE7BC60", VA = "0xE7BC60", Slot = "1")]
		~ApplicationOptions()
		{
		}
	}
	public static class Callback
	{
		private class RequestCallback
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Message.Callback messageCallback;

			[Address(RVA = "0x9601F4", Offset = "0x9601F4", VA = "0x9601F4")]
			public RequestCallback()
			{
			}

			[Address(RVA = "0x95FAB0", Offset = "0x95FAB0", VA = "0x95FAB0")]
			public RequestCallback(Message.Callback callback)
			{
			}

			[Address(RVA = "0x9601FC", Offset = "0x9601FC", VA = "0x9601FC", Slot = "4")]
			public virtual void HandleMessage(Message msg)
			{
			}
		}

		private sealed class RequestCallback<T> : RequestCallback
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Message<T>.Callback callback;

			public RequestCallback(Message<T>.Callback callback)
			{
			}

			public override void HandleMessage(Message msg)
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<ulong, RequestCallback> requestIDsToCallbacks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Message.MessageType, RequestCallback> notificationCallbacks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool hasRegisteredRoomInviteNotificationHandler;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<Message> pendingRoomInviteNotifications;

		internal static void SetNotificationCallback<T>(Message.MessageType type, Message<T>.Callback callback)
		{
		}

		[Address(RVA = "0x95F9AC", Offset = "0x95F9AC", VA = "0x95F9AC")]
		internal static void SetNotificationCallback(Message.MessageType type, Message.Callback callback)
		{
		}

		internal static void OnComplete<T>(Request<T> request, Message<T>.Callback callback)
		{
		}

		[Address(RVA = "0x95FADC", Offset = "0x95FADC", VA = "0x95FADC")]
		internal static void OnComplete(Request request, Message.Callback callback)
		{
		}

		[Address(RVA = "0x95FBB0", Offset = "0x95FBB0", VA = "0x95FBB0")]
		internal static void RunCallbacks()
		{
		}

		[Address(RVA = "0x95FECC", Offset = "0x95FECC", VA = "0x95FECC")]
		internal static void RunLimitedCallbacks(uint limit)
		{
		}

		[Address(RVA = "0x95FF64", Offset = "0x95FF64", VA = "0x95FF64")]
		private static void FlushRoomInviteNotificationQueue()
		{
		}

		[Address(RVA = "0x95FCDC", Offset = "0x95FCDC", VA = "0x95FCDC")]
		private static void HandleMessage(Message msg)
		{
		}
	}
	public class CallbackRunner : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsPersistantBetweenSceneLoads;

		[PreserveSig]
		[Address(RVA = "0x960940", Offset = "0x960940", VA = "0x960940")]
		private static extern void ovr_UnityResetTestPlatform();

		[Address(RVA = "0x9609CC", Offset = "0x9609CC", VA = "0x9609CC")]
		private void Awake()
		{
		}

		[Address(RVA = "0x960AC8", Offset = "0x960AC8", VA = "0x960AC8")]
		private void Update()
		{
		}

		[Address(RVA = "0x960B58", Offset = "0x960B58", VA = "0x960B58")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0x960B5C", Offset = "0x960B5C", VA = "0x960B5C")]
		public CallbackRunner()
		{
		}
	}
	public class CAPI
	{
		public struct ovrKeyValuePair
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private KeyValuePairType valueType_;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string stringValue_;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int intValue_;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public double doubleValue_;

			[Address(RVA = "0x95F814", Offset = "0x95F814", VA = "0x95F814")]
			public ovrKeyValuePair(string key, string value)
			{
			}

			[Address(RVA = "0x95F848", Offset = "0x95F848", VA = "0x95F848")]
			public ovrKeyValuePair(string key, int value)
			{
			}

			[Address(RVA = "0x95F880", Offset = "0x95F880", VA = "0x95F880")]
			public ovrKeyValuePair(string key, double value)
			{
			}
		}

		public struct ovrMatchmakingCriterion
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MatchmakingCriterionImportance importance_;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IntPtr parameterArray;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public uint parameterArrayCount;

			[Address(RVA = "0x95F94C", Offset = "0x95F94C", VA = "0x95F94C")]
			public ovrMatchmakingCriterion(string key, MatchmakingCriterionImportance importance)
			{
			}
		}

		public struct ovrMatchmakingCustomQueryData
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr dataArray;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public uint dataArrayCount;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IntPtr criterionArray;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public uint criterionArrayCount;
		}

		public struct OculusInitParams
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int sType;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string email;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string password;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ulong appId;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string uriPrefixOverride;
		}

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B598", Offset = "0x65B598")]
		public delegate void FilterCallback([In][Out] short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string DLL_NAME = "ovrplatformloader";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UTF8Encoding nativeStringEncoding;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const int VoipFilterBufferSize = 480;

		[Address(RVA = "0xE7D0BC", Offset = "0xE7D0BC", VA = "0xE7D0BC")]
		public static IntPtr ArrayOfStructsToIntPtr(Array ar)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0xE7D280", Offset = "0xE7D280", VA = "0xE7D280")]
		public static ovrKeyValuePair[] DictionaryToOVRKeyValuePairs(Dictionary<string, object> dict)
		{
			return null;
		}

		[Address(RVA = "0xE7D880", Offset = "0xE7D880", VA = "0xE7D880")]
		public static byte[] IntPtrToByteArray(IntPtr data, ulong size)
		{
			return null;
		}

		[Address(RVA = "0xE7D944", Offset = "0xE7D944", VA = "0xE7D944")]
		public static Dictionary<string, string> DataStoreFromNative(IntPtr pointer)
		{
			return null;
		}

		[Address(RVA = "0xE7DC74", Offset = "0xE7DC74", VA = "0xE7DC74")]
		public static string StringFromNative(IntPtr pointer)
		{
			return null;
		}

		[Address(RVA = "0xE7DD94", Offset = "0xE7DD94", VA = "0xE7DD94")]
		public static int GetNativeStringLengthNotIncludingNullTerminator(IntPtr pointer)
		{
			return default(int);
		}

		[Address(RVA = "0xE7DE20", Offset = "0xE7DE20", VA = "0xE7DE20")]
		public static DateTime DateTimeFromNative(ulong seconds_since_the_one_true_epoch)
		{
			return default(DateTime);
		}

		[Address(RVA = "0xE7DE90", Offset = "0xE7DE90", VA = "0xE7DE90")]
		public static byte[] BlobFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Address(RVA = "0xE7DF88", Offset = "0xE7DF88", VA = "0xE7DF88")]
		public static byte[] FiledataFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Address(RVA = "0xE7E02C", Offset = "0xE7E02C", VA = "0xE7E02C")]
		public static IntPtr StringToNative(string s)
		{
			return default(IntPtr);
		}

		[PreserveSig]
		[Address(RVA = "0xE7B354", Offset = "0xE7B354", VA = "0xE7B354")]
		public static extern bool ovr_UnityInitWrapper(string appId);

		[PreserveSig]
		[Address(RVA = "0xE7E1CC", Offset = "0xE7E1CC", VA = "0xE7E1CC")]
		public static extern void ovr_UnityInitGlobals(IntPtr loggingCB);

		[PreserveSig]
		[Address(RVA = "0xE7B500", Offset = "0xE7B500", VA = "0xE7B500")]
		public static extern ulong ovr_UnityInitWrapperAsynchronous(string appId);

		[PreserveSig]
		[Address(RVA = "0xE7E26C", Offset = "0xE7E26C", VA = "0xE7E26C")]
		public static extern bool ovr_UnityInitWrapperStandalone(string accessToken, IntPtr loggingCB);

		[PreserveSig]
		[Address(RVA = "0xE7E338", Offset = "0xE7E338", VA = "0xE7E338")]
		public static extern ulong ovr_Platform_InitializeStandaloneOculus(ref OculusInitParams init);

		[PreserveSig]
		[Address(RVA = "0xE7E434", Offset = "0xE7E434", VA = "0xE7E434")]
		public static extern ulong ovr_PlatformInitializeWithAccessToken(ulong appId, string accessToken);

		[PreserveSig]
		[Address(RVA = "0xE7E500", Offset = "0xE7E500", VA = "0xE7E500")]
		public static extern bool ovr_UnityInitWrapperWindows(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Address(RVA = "0xE7E5CC", Offset = "0xE7E5CC", VA = "0xE7E5CC")]
		public static extern ulong ovr_UnityInitWrapperWindowsAsynchronous(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Address(RVA = "0xE7E694", Offset = "0xE7E694", VA = "0xE7E694")]
		public static extern bool ovr_SetDeveloperAccessToken(string accessToken);

		[Address(RVA = "0xE7E750", Offset = "0xE7E750", VA = "0xE7E750")]
		public static string ovr_GetLoggedInUserLocale()
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE7E7B0", Offset = "0xE7E7B0", VA = "0xE7E7B0")]
		private static extern IntPtr ovr_GetLoggedInUserLocale_Native();

		[PreserveSig]
		[Address(RVA = "0xE7E840", Offset = "0xE7E840", VA = "0xE7E840")]
		public static extern IntPtr ovr_PopMessage();

		[PreserveSig]
		[Address(RVA = "0xE7E8D0", Offset = "0xE7E8D0", VA = "0xE7E8D0")]
		public static extern void ovr_FreeMessage(IntPtr message);

		[PreserveSig]
		[Address(RVA = "0xE7E970", Offset = "0xE7E970", VA = "0xE7E970")]
		public static extern uint ovr_NetworkingPeer_GetSendPolicy(IntPtr networkingPeer);

		[PreserveSig]
		[Address(RVA = "0xE7EA10", Offset = "0xE7EA10", VA = "0xE7EA10")]
		public static extern IntPtr ovr_Voip_CreateEncoder();

		[PreserveSig]
		[Address(RVA = "0xE7EAA0", Offset = "0xE7EAA0", VA = "0xE7EAA0")]
		public static extern void ovr_Voip_DestroyEncoder(IntPtr encoder);

		[PreserveSig]
		[Address(RVA = "0xE7EB40", Offset = "0xE7EB40", VA = "0xE7EB40")]
		public static extern IntPtr ovr_Voip_CreateDecoder();

		[PreserveSig]
		[Address(RVA = "0xE7EBD0", Offset = "0xE7EBD0", VA = "0xE7EBD0")]
		public static extern void ovr_Voip_DestroyDecoder(IntPtr decoder);

		[PreserveSig]
		[Address(RVA = "0xE7EC70", Offset = "0xE7EC70", VA = "0xE7EC70")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, ulong compressedSize);

		[PreserveSig]
		[Address(RVA = "0xE7ED30", Offset = "0xE7ED30", VA = "0xE7ED30")]
		public static extern IntPtr ovr_Microphone_Create();

		[PreserveSig]
		[Address(RVA = "0xE7EDC0", Offset = "0xE7EDC0", VA = "0xE7EDC0")]
		public static extern void ovr_Microphone_Destroy(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE7EE60", Offset = "0xE7EE60", VA = "0xE7EE60")]
		public static extern void ovr_Voip_SetSystemVoipPassthrough(bool passthrough);

		[PreserveSig]
		[Address(RVA = "0xE7EF00", Offset = "0xE7EF00", VA = "0xE7EF00")]
		public static extern void ovr_Voip_SetSystemVoipMicrophoneMuted(VoipMuteState muted);

		[PreserveSig]
		[Address(RVA = "0xE7EFA0", Offset = "0xE7EFA0", VA = "0xE7EFA0")]
		public static extern void ovr_UnityResetTestPlatform();

		[PreserveSig]
		[Address(RVA = "0xE7B078", Offset = "0xE7B078", VA = "0xE7B078")]
		public static extern ulong ovr_HTTP_GetWithMessageType(string url, int messageType);

		[PreserveSig]
		[Address(RVA = "0xE7F030", Offset = "0xE7F030", VA = "0xE7F030")]
		public static extern void ovr_CrashApplication();

		[PreserveSig]
		[Address(RVA = "0xE7F0C0", Offset = "0xE7F0C0", VA = "0xE7F0C0")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallback(FilterCallback cb);

		[PreserveSig]
		[Address(RVA = "0xE7F164", Offset = "0xE7F164", VA = "0xE7F164")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallbackWithFixedSizeBuffer(FilterCallback cb, UIntPtr bufferSizeElements);

		[Address(RVA = "0xE7F218", Offset = "0xE7F218", VA = "0xE7F218")]
		public static void LogNewEvent(string eventName, Dictionary<string, string> values)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE7F598", Offset = "0xE7F598", VA = "0xE7F598")]
		public static extern void ovr_Log_NewEvent(IntPtr eventName, IntPtr[] values, UIntPtr length);

		[PreserveSig]
		[Address(RVA = "0xE7B9A8", Offset = "0xE7B9A8", VA = "0xE7B9A8")]
		public static extern IntPtr ovr_ApplicationLifecycle_GetLaunchDetails();

		[Address(RVA = "0xE7F658", Offset = "0xE7F658", VA = "0xE7F658")]
		public static ulong ovr_HTTP_StartTransfer(string url, ovrKeyValuePair[] headers)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE7F750", Offset = "0xE7F750", VA = "0xE7F750")]
		private static extern ulong ovr_HTTP_StartTransfer_Native(IntPtr url, ovrKeyValuePair[] headers, UIntPtr numItems);

		[PreserveSig]
		[Address(RVA = "0xE7F8CC", Offset = "0xE7F8CC", VA = "0xE7F8CC")]
		public static extern bool ovr_HTTP_Write(ulong transferId, byte[] bytes, UIntPtr length);

		[PreserveSig]
		[Address(RVA = "0xE7F994", Offset = "0xE7F994", VA = "0xE7F994")]
		public static extern void ovr_HTTP_WriteEOM(ulong transferId);

		[Address(RVA = "0xE7FA30", Offset = "0xE7FA30", VA = "0xE7FA30")]
		public static string ovr_Message_GetStringForJavascript(IntPtr message)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE7FA98", Offset = "0xE7FA98", VA = "0xE7FA98")]
		private static extern IntPtr ovr_Message_GetStringForJavascript_Native(IntPtr message);

		[PreserveSig]
		[Address(RVA = "0xE7FB38", Offset = "0xE7FB38", VA = "0xE7FB38")]
		public static extern void ovr_Net_Accept(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE7FBD8", Offset = "0xE7FBD8", VA = "0xE7FBD8")]
		public static extern bool ovr_Net_AcceptForCurrentRoom();

		[PreserveSig]
		[Address(RVA = "0xE7FC70", Offset = "0xE7FC70", VA = "0xE7FC70")]
		public static extern void ovr_Net_Close(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE7FD10", Offset = "0xE7FD10", VA = "0xE7FD10")]
		public static extern void ovr_Net_CloseForCurrentRoom();

		[PreserveSig]
		[Address(RVA = "0xE7FDA0", Offset = "0xE7FDA0", VA = "0xE7FDA0")]
		public static extern void ovr_Net_Connect(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE7FE40", Offset = "0xE7FE40", VA = "0xE7FE40")]
		public static extern bool ovr_Net_IsConnected(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE7FEE8", Offset = "0xE7FEE8", VA = "0xE7FEE8")]
		public static extern ulong ovr_Net_Ping(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE7FF88", Offset = "0xE7FF88", VA = "0xE7FF88")]
		public static extern IntPtr ovr_Net_ReadPacket();

		[PreserveSig]
		[Address(RVA = "0xE80018", Offset = "0xE80018", VA = "0xE80018")]
		public static extern bool ovr_Net_SendPacket(ulong userID, UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Address(RVA = "0xE800F0", Offset = "0xE800F0", VA = "0xE800F0")]
		public static extern bool ovr_Net_SendPacketToCurrentRoom(UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Address(RVA = "0xE801B8", Offset = "0xE801B8", VA = "0xE801B8")]
		public static extern int ovr_Party_PluginGetSharedMemHandle();

		[PreserveSig]
		[Address(RVA = "0xE80248", Offset = "0xE80248", VA = "0xE80248")]
		public static extern VoipMuteState ovr_Party_PluginGetVoipMicrophoneMuted();

		[PreserveSig]
		[Address(RVA = "0xE802D8", Offset = "0xE802D8", VA = "0xE802D8")]
		public static extern bool ovr_Party_PluginGetVoipPassthrough();

		[PreserveSig]
		[Address(RVA = "0xE80370", Offset = "0xE80370", VA = "0xE80370")]
		public static extern SystemVoipStatus ovr_Party_PluginGetVoipStatus();

		[PreserveSig]
		[Address(RVA = "0xE80400", Offset = "0xE80400", VA = "0xE80400")]
		public static extern void ovr_Voip_Accept(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE804A0", Offset = "0xE804A0", VA = "0xE804A0")]
		public static extern VoipDtxState ovr_Voip_GetIsConnectionUsingDtx(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE80540", Offset = "0xE80540", VA = "0xE80540")]
		public static extern VoipBitrate ovr_Voip_GetLocalBitrate(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE805E0", Offset = "0xE805E0", VA = "0xE805E0")]
		public static extern UIntPtr ovr_Voip_GetOutputBufferMaxSize();

		[PreserveSig]
		[Address(RVA = "0xE80670", Offset = "0xE80670", VA = "0xE80670")]
		public static extern UIntPtr ovr_Voip_GetPCM(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Address(RVA = "0xE80730", Offset = "0xE80730", VA = "0xE80730")]
		public static extern UIntPtr ovr_Voip_GetPCMFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Address(RVA = "0xE807F0", Offset = "0xE807F0", VA = "0xE807F0")]
		public static extern UIntPtr ovr_Voip_GetPCMSize(ulong senderID);

		[PreserveSig]
		[Address(RVA = "0xE80890", Offset = "0xE80890", VA = "0xE80890")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestamp(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Address(RVA = "0xE80968", Offset = "0xE80968", VA = "0xE80968")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestampFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Address(RVA = "0xE80A40", Offset = "0xE80A40", VA = "0xE80A40")]
		public static extern VoipBitrate ovr_Voip_GetRemoteBitrate(ulong peerID);

		[PreserveSig]
		[Address(RVA = "0xE80AE0", Offset = "0xE80AE0", VA = "0xE80AE0")]
		public static extern uint ovr_Voip_GetSyncTimestamp(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE80B80", Offset = "0xE80B80", VA = "0xE80B80")]
		public static extern long ovr_Voip_GetSyncTimestampDifference(uint lhs, uint rhs);

		[PreserveSig]
		[Address(RVA = "0xE80C30", Offset = "0xE80C30", VA = "0xE80C30")]
		public static extern VoipMuteState ovr_Voip_GetSystemVoipMicrophoneMuted();

		[PreserveSig]
		[Address(RVA = "0xE80CC0", Offset = "0xE80CC0", VA = "0xE80CC0")]
		public static extern SystemVoipStatus ovr_Voip_GetSystemVoipStatus();

		[PreserveSig]
		[Address(RVA = "0xE80D50", Offset = "0xE80D50", VA = "0xE80D50")]
		public static extern void ovr_Voip_SetMicrophoneMuted(VoipMuteState state);

		[PreserveSig]
		[Address(RVA = "0xE80DF0", Offset = "0xE80DF0", VA = "0xE80DF0")]
		public static extern void ovr_Voip_SetNewConnectionOptions(IntPtr voipOptions);

		[PreserveSig]
		[Address(RVA = "0xE80E90", Offset = "0xE80E90", VA = "0xE80E90")]
		public static extern void ovr_Voip_SetOutputSampleRate(VoipSampleRate rate);

		[PreserveSig]
		[Address(RVA = "0xE80F30", Offset = "0xE80F30", VA = "0xE80F30")]
		public static extern void ovr_Voip_Start(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE80FD0", Offset = "0xE80FD0", VA = "0xE80FD0")]
		public static extern void ovr_Voip_Stop(ulong userID);

		[Address(RVA = "0xE793F8", Offset = "0xE793F8", VA = "0xE793F8")]
		public static ulong ovr_Achievements_AddCount(string name, ulong count)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE81070", Offset = "0xE81070", VA = "0xE81070")]
		private static extern ulong ovr_Achievements_AddCount_Native(IntPtr name, ulong count);

		[Address(RVA = "0xE7958C", Offset = "0xE7958C", VA = "0xE7958C")]
		public static ulong ovr_Achievements_AddFields(string name, string fields)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE81120", Offset = "0xE81120", VA = "0xE81120")]
		private static extern ulong ovr_Achievements_AddFields_Native(IntPtr name, IntPtr fields);

		[PreserveSig]
		[Address(RVA = "0xE79724", Offset = "0xE79724", VA = "0xE79724")]
		public static extern ulong ovr_Achievements_GetAllDefinitions();

		[PreserveSig]
		[Address(RVA = "0xE79878", Offset = "0xE79878", VA = "0xE79878")]
		public static extern ulong ovr_Achievements_GetAllProgress();

		[PreserveSig]
		[Address(RVA = "0xE799E8", Offset = "0xE799E8", VA = "0xE799E8")]
		public static extern ulong ovr_Achievements_GetDefinitionsByName(string[] names, int count);

		[PreserveSig]
		[Address(RVA = "0xE79C38", Offset = "0xE79C38", VA = "0xE79C38")]
		public static extern ulong ovr_Achievements_GetProgressByName(string[] names, int count);

		[Address(RVA = "0xE79E74", Offset = "0xE79E74", VA = "0xE79E74")]
		public static ulong ovr_Achievements_Unlock(string name)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE811D0", Offset = "0xE811D0", VA = "0xE811D0")]
		private static extern ulong ovr_Achievements_Unlock_Native(IntPtr name);

		[PreserveSig]
		[Address(RVA = "0xE81270", Offset = "0xE81270", VA = "0xE81270")]
		public static extern ulong ovr_Application_ExecuteCoordinatedLaunch(ulong appID, ulong roomID);

		[PreserveSig]
		[Address(RVA = "0xE81320", Offset = "0xE81320", VA = "0xE81320")]
		public static extern ulong ovr_Application_GetInstalledApplications();

		[PreserveSig]
		[Address(RVA = "0xE7B684", Offset = "0xE7B684", VA = "0xE7B684")]
		public static extern ulong ovr_Application_GetVersion();

		[PreserveSig]
		[Address(RVA = "0xE7B86C", Offset = "0xE7B86C", VA = "0xE7B86C")]
		public static extern ulong ovr_Application_LaunchOtherApp(ulong appID, IntPtr deeplink_options);

		[PreserveSig]
		[Address(RVA = "0xE813B0", Offset = "0xE813B0", VA = "0xE813B0")]
		public static extern ulong ovr_ApplicationLifecycle_GetRegisteredPIDs();

		[PreserveSig]
		[Address(RVA = "0xE81440", Offset = "0xE81440", VA = "0xE81440")]
		public static extern ulong ovr_ApplicationLifecycle_GetSessionKey();

		[Address(RVA = "0xE814D0", Offset = "0xE814D0", VA = "0xE814D0")]
		public static ulong ovr_ApplicationLifecycle_RegisterSessionKey(string sessionKey)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE81578", Offset = "0xE81578", VA = "0xE81578")]
		private static extern ulong ovr_ApplicationLifecycle_RegisterSessionKey_Native(IntPtr sessionKey);

		[PreserveSig]
		[Address(RVA = "0xE7BE8C", Offset = "0xE7BE8C", VA = "0xE7BE8C")]
		public static extern ulong ovr_AssetFile_Delete(ulong assetFileID);

		[PreserveSig]
		[Address(RVA = "0xE7BFF8", Offset = "0xE7BFF8", VA = "0xE7BFF8")]
		public static extern ulong ovr_AssetFile_DeleteById(ulong assetFileID);

		[Address(RVA = "0xE7C164", Offset = "0xE7C164", VA = "0xE7C164")]
		public static ulong ovr_AssetFile_DeleteByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE81618", Offset = "0xE81618", VA = "0xE81618")]
		private static extern ulong ovr_AssetFile_DeleteByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Address(RVA = "0xE7C2D8", Offset = "0xE7C2D8", VA = "0xE7C2D8")]
		public static extern ulong ovr_AssetFile_Download(ulong assetFileID);

		[PreserveSig]
		[Address(RVA = "0xE7C444", Offset = "0xE7C444", VA = "0xE7C444")]
		public static extern ulong ovr_AssetFile_DownloadById(ulong assetFileID);

		[Address(RVA = "0xE7C5B0", Offset = "0xE7C5B0", VA = "0xE7C5B0")]
		public static ulong ovr_AssetFile_DownloadByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE816B8", Offset = "0xE816B8", VA = "0xE816B8")]
		private static extern ulong ovr_AssetFile_DownloadByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Address(RVA = "0xE7C724", Offset = "0xE7C724", VA = "0xE7C724")]
		public static extern ulong ovr_AssetFile_DownloadCancel(ulong assetFileID);

		[PreserveSig]
		[Address(RVA = "0xE7C890", Offset = "0xE7C890", VA = "0xE7C890")]
		public static extern ulong ovr_AssetFile_DownloadCancelById(ulong assetFileID);

		[Address(RVA = "0xE7C9FC", Offset = "0xE7C9FC", VA = "0xE7C9FC")]
		public static ulong ovr_AssetFile_DownloadCancelByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE81758", Offset = "0xE81758", VA = "0xE81758")]
		private static extern ulong ovr_AssetFile_DownloadCancelByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Address(RVA = "0xE7CB68", Offset = "0xE7CB68", VA = "0xE7CB68")]
		public static extern ulong ovr_AssetFile_GetList();

		[PreserveSig]
		[Address(RVA = "0xE7CCC4", Offset = "0xE7CCC4", VA = "0xE7CCC4")]
		public static extern ulong ovr_AssetFile_Status(ulong assetFileID);

		[PreserveSig]
		[Address(RVA = "0xE7CE30", Offset = "0xE7CE30", VA = "0xE7CE30")]
		public static extern ulong ovr_AssetFile_StatusById(ulong assetFileID);

		[Address(RVA = "0xE7CF9C", Offset = "0xE7CF9C", VA = "0xE7CF9C")]
		public static ulong ovr_AssetFile_StatusByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE817F8", Offset = "0xE817F8", VA = "0xE817F8")]
		private static extern ulong ovr_AssetFile_StatusByName_Native(IntPtr assetFileName);

		[Address(RVA = "0xE81898", Offset = "0xE81898", VA = "0xE81898")]
		public static ulong ovr_Avatar_UpdateMetaData(string avatarMetaData, string imageFilePath)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE8196C", Offset = "0xE8196C", VA = "0xE8196C")]
		private static extern ulong ovr_Avatar_UpdateMetaData_Native(IntPtr avatarMetaData, IntPtr imageFilePath);

		[PreserveSig]
		[Address(RVA = "0xE81A1C", Offset = "0xE81A1C", VA = "0xE81A1C")]
		public static extern ulong ovr_Cal_FinalizeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong finalized_application_ID);

		[PreserveSig]
		[Address(RVA = "0xE81AEC", Offset = "0xE81AEC", VA = "0xE81AEC")]
		public static extern ulong ovr_Cal_GetSuggestedApplications(ulong groupingObject, ulong[] userIDs, int numUserIDs);

		[PreserveSig]
		[Address(RVA = "0xE81BAC", Offset = "0xE81BAC", VA = "0xE81BAC")]
		public static extern ulong ovr_Cal_ProposeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong proposed_application_ID);

		[Address(RVA = "0xE81C7C", Offset = "0xE81C7C", VA = "0xE81C7C")]
		public static ulong ovr_CloudStorage_Delete(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE81D50", Offset = "0xE81D50", VA = "0xE81D50")]
		private static extern ulong ovr_CloudStorage_Delete_Native(IntPtr bucket, IntPtr key);

		[Address(RVA = "0xE81E00", Offset = "0xE81E00", VA = "0xE81E00")]
		public static ulong ovr_CloudStorage_Load(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE81ED4", Offset = "0xE81ED4", VA = "0xE81ED4")]
		private static extern ulong ovr_CloudStorage_Load_Native(IntPtr bucket, IntPtr key);

		[Address(RVA = "0xE81F84", Offset = "0xE81F84", VA = "0xE81F84")]
		public static ulong ovr_CloudStorage_LoadBucketMetadata(string bucket)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE8202C", Offset = "0xE8202C", VA = "0xE8202C")]
		private static extern ulong ovr_CloudStorage_LoadBucketMetadata_Native(IntPtr bucket);

		[Address(RVA = "0xE820CC", Offset = "0xE820CC", VA = "0xE820CC")]
		public static ulong ovr_CloudStorage_LoadConflictMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE821A0", Offset = "0xE821A0", VA = "0xE821A0")]
		private static extern ulong ovr_CloudStorage_LoadConflictMetadata_Native(IntPtr bucket, IntPtr key);

		[Address(RVA = "0xE82250", Offset = "0xE82250", VA = "0xE82250")]
		public static ulong ovr_CloudStorage_LoadHandle(string handle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE822F8", Offset = "0xE822F8", VA = "0xE822F8")]
		private static extern ulong ovr_CloudStorage_LoadHandle_Native(IntPtr handle);

		[Address(RVA = "0xE82398", Offset = "0xE82398", VA = "0xE82398")]
		public static ulong ovr_CloudStorage_LoadMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE8246C", Offset = "0xE8246C", VA = "0xE8246C")]
		private static extern ulong ovr_CloudStorage_LoadMetadata_Native(IntPtr bucket, IntPtr key);

		[Address(RVA = "0xE8251C", Offset = "0xE8251C", VA = "0xE8251C")]
		public static ulong ovr_CloudStorage_ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE82610", Offset = "0xE82610", VA = "0xE82610")]
		private static extern ulong ovr_CloudStorage_ResolveKeepLocal_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Address(RVA = "0xE826C8", Offset = "0xE826C8", VA = "0xE826C8")]
		public static ulong ovr_CloudStorage_ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE827BC", Offset = "0xE827BC", VA = "0xE827BC")]
		private static extern ulong ovr_CloudStorage_ResolveKeepRemote_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Address(RVA = "0xE82874", Offset = "0xE82874", VA = "0xE82874")]
		public static ulong ovr_CloudStorage_Save(string bucket, string key, byte[] data, uint dataSize, long counter, string extraData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE82990", Offset = "0xE82990", VA = "0xE82990")]
		private static extern ulong ovr_CloudStorage_Save_Native(IntPtr bucket, IntPtr key, byte[] data, uint dataSize, long counter, IntPtr extraData);

		[PreserveSig]
		[Address(RVA = "0xE82A78", Offset = "0xE82A78", VA = "0xE82A78")]
		public static extern ulong ovr_CloudStorage2_GetUserDirectoryPath();

		[PreserveSig]
		[Address(RVA = "0xE82B08", Offset = "0xE82B08", VA = "0xE82B08")]
		public static extern ulong ovr_Entitlement_GetIsViewerEntitled();

		[Address(RVA = "0xE82B98", Offset = "0xE82B98", VA = "0xE82B98")]
		public static ulong ovr_GraphAPI_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE82C40", Offset = "0xE82C40", VA = "0xE82C40")]
		private static extern ulong ovr_GraphAPI_Get_Native(IntPtr url);

		[Address(RVA = "0xE82CE0", Offset = "0xE82CE0", VA = "0xE82CE0")]
		public static ulong ovr_GraphAPI_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE82D88", Offset = "0xE82D88", VA = "0xE82D88")]
		private static extern ulong ovr_GraphAPI_Post_Native(IntPtr url);

		[Address(RVA = "0xE82E24", Offset = "0xE82E24", VA = "0xE82E24")]
		public static ulong ovr_HTTP_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE82ECC", Offset = "0xE82ECC", VA = "0xE82ECC")]
		private static extern ulong ovr_HTTP_Get_Native(IntPtr url);

		[Address(RVA = "0xE82F6C", Offset = "0xE82F6C", VA = "0xE82F6C")]
		public static ulong ovr_HTTP_GetToFile(string url, string diskFile)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE83040", Offset = "0xE83040", VA = "0xE83040")]
		private static extern ulong ovr_HTTP_GetToFile_Native(IntPtr url, IntPtr diskFile);

		[Address(RVA = "0xE830F0", Offset = "0xE830F0", VA = "0xE830F0")]
		public static ulong ovr_HTTP_MultiPartPost(string url, string filepath_param_name, string filepath, string access_token, ovrKeyValuePair[] post_params)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE83250", Offset = "0xE83250", VA = "0xE83250")]
		private static extern ulong ovr_HTTP_MultiPartPost_Native(IntPtr url, IntPtr filepath_param_name, IntPtr filepath, IntPtr access_token, ovrKeyValuePair[] post_params, UIntPtr numItems);

		[Address(RVA = "0xE833FC", Offset = "0xE833FC", VA = "0xE833FC")]
		public static ulong ovr_HTTP_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE834A4", Offset = "0xE834A4", VA = "0xE834A4")]
		private static extern ulong ovr_HTTP_Post_Native(IntPtr url);

		[Address(RVA = "0xE83544", Offset = "0xE83544", VA = "0xE83544")]
		public static ulong ovr_IAP_ConsumePurchase(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE835EC", Offset = "0xE835EC", VA = "0xE835EC")]
		private static extern ulong ovr_IAP_ConsumePurchase_Native(IntPtr sku);

		[PreserveSig]
		[Address(RVA = "0xE8368C", Offset = "0xE8368C", VA = "0xE8368C")]
		public static extern ulong ovr_IAP_GetProductsBySKU(string[] skus, int count);

		[PreserveSig]
		[Address(RVA = "0xE837FC", Offset = "0xE837FC", VA = "0xE837FC")]
		public static extern ulong ovr_IAP_GetViewerPurchases();

		[Address(RVA = "0xE8388C", Offset = "0xE8388C", VA = "0xE8388C")]
		public static ulong ovr_IAP_LaunchCheckoutFlow(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE83934", Offset = "0xE83934", VA = "0xE83934")]
		private static extern ulong ovr_IAP_LaunchCheckoutFlow_Native(IntPtr sku);

		[PreserveSig]
		[Address(RVA = "0xE839D4", Offset = "0xE839D4", VA = "0xE839D4")]
		public static extern ulong ovr_LanguagePack_GetCurrent();

		[Address(RVA = "0xE83A64", Offset = "0xE83A64", VA = "0xE83A64")]
		public static ulong ovr_LanguagePack_SetCurrent(string tag)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE83B0C", Offset = "0xE83B0C", VA = "0xE83B0C")]
		private static extern ulong ovr_LanguagePack_SetCurrent_Native(IntPtr tag);

		[Address(RVA = "0xE83BAC", Offset = "0xE83BAC", VA = "0xE83BAC")]
		public static ulong ovr_Leaderboard_GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE83C7C", Offset = "0xE83C7C", VA = "0xE83C7C")]
		private static extern ulong ovr_Leaderboard_GetEntries_Native(IntPtr leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt);

		[Address(RVA = "0xE83D44", Offset = "0xE83D44", VA = "0xE83D44")]
		public static ulong ovr_Leaderboard_GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE83E04", Offset = "0xE83E04", VA = "0xE83E04")]
		private static extern ulong ovr_Leaderboard_GetEntriesAfterRank_Native(IntPtr leaderboardName, int limit, ulong afterRank);

		[PreserveSig]
		[Address(RVA = "0xE83EBC", Offset = "0xE83EBC", VA = "0xE83EBC")]
		public static extern ulong ovr_Leaderboard_GetNextEntries(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE83F5C", Offset = "0xE83F5C", VA = "0xE83F5C")]
		public static extern ulong ovr_Leaderboard_GetPreviousEntries(IntPtr handle);

		[Address(RVA = "0xE83FFC", Offset = "0xE83FFC", VA = "0xE83FFC")]
		public static ulong ovr_Leaderboard_WriteEntry(string leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE840D4", Offset = "0xE840D4", VA = "0xE840D4")]
		private static extern ulong ovr_Leaderboard_WriteEntry_Native(IntPtr leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate);

		[PreserveSig]
		[Address(RVA = "0xE841AC", Offset = "0xE841AC", VA = "0xE841AC")]
		public static extern ulong ovr_Livestreaming_GetStatus();

		[Address(RVA = "0xE8423C", Offset = "0xE8423C", VA = "0xE8423C")]
		public static ulong ovr_Livestreaming_IsAllowedForApplication(string packageName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE842E4", Offset = "0xE842E4", VA = "0xE842E4")]
		private static extern ulong ovr_Livestreaming_IsAllowedForApplication_Native(IntPtr packageName);

		[PreserveSig]
		[Address(RVA = "0xE84384", Offset = "0xE84384", VA = "0xE84384")]
		public static extern ulong ovr_Livestreaming_PauseStream();

		[PreserveSig]
		[Address(RVA = "0xE84414", Offset = "0xE84414", VA = "0xE84414")]
		public static extern ulong ovr_Livestreaming_ResumeStream();

		[PreserveSig]
		[Address(RVA = "0xE844A4", Offset = "0xE844A4", VA = "0xE844A4")]
		public static extern ulong ovr_Livestreaming_StartPartyStream();

		[PreserveSig]
		[Address(RVA = "0xE84534", Offset = "0xE84534", VA = "0xE84534")]
		public static extern ulong ovr_Livestreaming_StartStream(LivestreamingAudience audience, LivestreamingMicrophoneStatus micStatus);

		[PreserveSig]
		[Address(RVA = "0xE845E4", Offset = "0xE845E4", VA = "0xE845E4")]
		public static extern ulong ovr_Livestreaming_StopPartyStream();

		[PreserveSig]
		[Address(RVA = "0xE84674", Offset = "0xE84674", VA = "0xE84674")]
		public static extern ulong ovr_Livestreaming_StopStream();

		[PreserveSig]
		[Address(RVA = "0xE84704", Offset = "0xE84704", VA = "0xE84704")]
		public static extern ulong ovr_Livestreaming_UpdateCommentsOverlayVisibility(bool isVisible);

		[PreserveSig]
		[Address(RVA = "0xE847A4", Offset = "0xE847A4", VA = "0xE847A4")]
		public static extern ulong ovr_Livestreaming_UpdateMicStatus(LivestreamingMicrophoneStatus micStatus);

		[Address(RVA = "0xE84844", Offset = "0xE84844", VA = "0xE84844")]
		public static ulong ovr_Matchmaking_Browse(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE848FC", Offset = "0xE848FC", VA = "0xE848FC")]
		private static extern ulong ovr_Matchmaking_Browse_Native(IntPtr pool, IntPtr customQueryData);

		[Address(RVA = "0xE849AC", Offset = "0xE849AC", VA = "0xE849AC")]
		public static ulong ovr_Matchmaking_Browse2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE84A64", Offset = "0xE84A64", VA = "0xE84A64")]
		private static extern ulong ovr_Matchmaking_Browse2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Address(RVA = "0xE84B14", Offset = "0xE84B14", VA = "0xE84B14")]
		public static ulong ovr_Matchmaking_Cancel(string pool, string requestHash)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE84BE8", Offset = "0xE84BE8", VA = "0xE84BE8")]
		private static extern ulong ovr_Matchmaking_Cancel_Native(IntPtr pool, IntPtr requestHash);

		[PreserveSig]
		[Address(RVA = "0xE84C98", Offset = "0xE84C98", VA = "0xE84C98")]
		public static extern ulong ovr_Matchmaking_Cancel2();

		[Address(RVA = "0xE84D28", Offset = "0xE84D28", VA = "0xE84D28")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE84DF8", Offset = "0xE84DF8", VA = "0xE84DF8")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData);

		[Address(RVA = "0xE84EC0", Offset = "0xE84EC0", VA = "0xE84EC0")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE84F78", Offset = "0xE84F78", VA = "0xE84F78")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Address(RVA = "0xE85028", Offset = "0xE85028", VA = "0xE85028")]
		public static ulong ovr_Matchmaking_CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE850E8", Offset = "0xE850E8", VA = "0xE850E8")]
		private static extern ulong ovr_Matchmaking_CreateRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates);

		[Address(RVA = "0xE851A0", Offset = "0xE851A0", VA = "0xE851A0")]
		public static ulong ovr_Matchmaking_CreateRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE85258", Offset = "0xE85258", VA = "0xE85258")]
		private static extern ulong ovr_Matchmaking_CreateRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Address(RVA = "0xE85308", Offset = "0xE85308", VA = "0xE85308")]
		public static ulong ovr_Matchmaking_Enqueue(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE853C0", Offset = "0xE853C0", VA = "0xE853C0")]
		private static extern ulong ovr_Matchmaking_Enqueue_Native(IntPtr pool, IntPtr customQueryData);

		[Address(RVA = "0xE85470", Offset = "0xE85470", VA = "0xE85470")]
		public static ulong ovr_Matchmaking_Enqueue2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE85528", Offset = "0xE85528", VA = "0xE85528")]
		private static extern ulong ovr_Matchmaking_Enqueue2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[PreserveSig]
		[Address(RVA = "0xE855D8", Offset = "0xE855D8", VA = "0xE855D8")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom(ulong roomID, IntPtr customQueryData);

		[PreserveSig]
		[Address(RVA = "0xE85688", Offset = "0xE85688", VA = "0xE85688")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom2(ulong roomID, IntPtr matchmakingOptions);

		[PreserveSig]
		[Address(RVA = "0xE85738", Offset = "0xE85738", VA = "0xE85738")]
		public static extern ulong ovr_Matchmaking_GetAdminSnapshot();

		[Address(RVA = "0xE857C8", Offset = "0xE857C8", VA = "0xE857C8")]
		public static ulong ovr_Matchmaking_GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE85888", Offset = "0xE85888", VA = "0xE85888")]
		private static extern ulong ovr_Matchmaking_GetStats_Native(IntPtr pool, uint maxLevel, MatchmakingStatApproach approach);

		[PreserveSig]
		[Address(RVA = "0xE85940", Offset = "0xE85940", VA = "0xE85940")]
		public static extern ulong ovr_Matchmaking_JoinRoom(ulong roomID, bool subscribeToUpdates);

		[Address(RVA = "0xE859F0", Offset = "0xE859F0", VA = "0xE859F0")]
		public static ulong ovr_Matchmaking_ReportResultInsecure(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE85AA8", Offset = "0xE85AA8", VA = "0xE85AA8")]
		private static extern ulong ovr_Matchmaking_ReportResultInsecure_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Address(RVA = "0xE85C24", Offset = "0xE85C24", VA = "0xE85C24")]
		public static extern ulong ovr_Matchmaking_StartMatch(ulong roomID);

		[Address(RVA = "0xE85CC4", Offset = "0xE85CC4", VA = "0xE85CC4")]
		public static ulong ovr_Media_ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE85DA0", Offset = "0xE85DA0", VA = "0xE85DA0")]
		private static extern ulong ovr_Media_ShareToFacebook_Native(IntPtr postTextSuggestion, IntPtr filePath, MediaContentType contentType);

		[PreserveSig]
		[Address(RVA = "0xE85E58", Offset = "0xE85E58", VA = "0xE85E58")]
		public static extern ulong ovr_Notification_GetRoomInvites();

		[PreserveSig]
		[Address(RVA = "0xE85EE8", Offset = "0xE85EE8", VA = "0xE85EE8")]
		public static extern ulong ovr_Notification_MarkAsRead(ulong notificationID);

		[PreserveSig]
		[Address(RVA = "0xE85F88", Offset = "0xE85F88", VA = "0xE85F88")]
		public static extern ulong ovr_Party_Create();

		[PreserveSig]
		[Address(RVA = "0xE86018", Offset = "0xE86018", VA = "0xE86018")]
		public static extern ulong ovr_Party_GatherInApplication(ulong partyID, ulong appID);

		[PreserveSig]
		[Address(RVA = "0xE860C8", Offset = "0xE860C8", VA = "0xE860C8")]
		public static extern ulong ovr_Party_Get(ulong partyID);

		[PreserveSig]
		[Address(RVA = "0xE86168", Offset = "0xE86168", VA = "0xE86168")]
		public static extern ulong ovr_Party_GetCurrent();

		[PreserveSig]
		[Address(RVA = "0xE861F8", Offset = "0xE861F8", VA = "0xE861F8")]
		public static extern ulong ovr_Party_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE86298", Offset = "0xE86298", VA = "0xE86298")]
		public static extern ulong ovr_Party_Invite(ulong partyID, ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE86344", Offset = "0xE86344", VA = "0xE86344")]
		public static extern ulong ovr_Party_Join(ulong partyID);

		[PreserveSig]
		[Address(RVA = "0xE863E4", Offset = "0xE863E4", VA = "0xE863E4")]
		public static extern ulong ovr_Party_Leave(ulong partyID);

		[PreserveSig]
		[Address(RVA = "0xE86484", Offset = "0xE86484", VA = "0xE86484")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates);

		[PreserveSig]
		[Address(RVA = "0xE8653C", Offset = "0xE8653C", VA = "0xE8653C")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, IntPtr roomOptions);

		[PreserveSig]
		[Address(RVA = "0xE865F4", Offset = "0xE865F4", VA = "0xE865F4")]
		public static extern ulong ovr_Room_Get(ulong roomID);

		[PreserveSig]
		[Address(RVA = "0xE86694", Offset = "0xE86694", VA = "0xE86694")]
		public static extern ulong ovr_Room_GetCurrent();

		[PreserveSig]
		[Address(RVA = "0xE86724", Offset = "0xE86724", VA = "0xE86724")]
		public static extern ulong ovr_Room_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE867C4", Offset = "0xE867C4", VA = "0xE867C4")]
		public static extern ulong ovr_Room_GetInvitableUsers();

		[PreserveSig]
		[Address(RVA = "0xE86854", Offset = "0xE86854", VA = "0xE86854")]
		public static extern ulong ovr_Room_GetInvitableUsers2(IntPtr roomOptions);

		[PreserveSig]
		[Address(RVA = "0xE868F4", Offset = "0xE868F4", VA = "0xE868F4")]
		public static extern ulong ovr_Room_GetModeratedRooms();

		[PreserveSig]
		[Address(RVA = "0xE86984", Offset = "0xE86984", VA = "0xE86984")]
		public static extern ulong ovr_Room_GetSocialRooms(ulong appID);

		[Address(RVA = "0xE86A24", Offset = "0xE86A24", VA = "0xE86A24")]
		public static ulong ovr_Room_InviteUser(ulong roomID, string inviteToken)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE86AE0", Offset = "0xE86AE0", VA = "0xE86AE0")]
		private static extern ulong ovr_Room_InviteUser_Native(ulong roomID, IntPtr inviteToken);

		[PreserveSig]
		[Address(RVA = "0xE86B90", Offset = "0xE86B90", VA = "0xE86B90")]
		public static extern ulong ovr_Room_Join(ulong roomID, bool subscribeToUpdates);

		[PreserveSig]
		[Address(RVA = "0xE86C40", Offset = "0xE86C40", VA = "0xE86C40")]
		public static extern ulong ovr_Room_Join2(ulong roomID, IntPtr roomOptions);

		[PreserveSig]
		[Address(RVA = "0xE86CF0", Offset = "0xE86CF0", VA = "0xE86CF0")]
		public static extern ulong ovr_Room_KickUser(ulong roomID, ulong userID, int kickDurationSeconds);

		[PreserveSig]
		[Address(RVA = "0xE86DA4", Offset = "0xE86DA4", VA = "0xE86DA4")]
		public static extern ulong ovr_Room_LaunchInvitableUserFlow(ulong roomID);

		[PreserveSig]
		[Address(RVA = "0xE86E44", Offset = "0xE86E44", VA = "0xE86E44")]
		public static extern ulong ovr_Room_Leave(ulong roomID);

		[Address(RVA = "0xE86EE4", Offset = "0xE86EE4", VA = "0xE86EE4")]
		public static ulong ovr_Room_SetDescription(ulong roomID, string description)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE86FA0", Offset = "0xE86FA0", VA = "0xE86FA0")]
		private static extern ulong ovr_Room_SetDescription_Native(ulong roomID, IntPtr description);

		[Address(RVA = "0xE87050", Offset = "0xE87050", VA = "0xE87050")]
		public static ulong ovr_Room_UpdateDataStore(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE87108", Offset = "0xE87108", VA = "0xE87108")]
		private static extern ulong ovr_Room_UpdateDataStore_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Address(RVA = "0xE87280", Offset = "0xE87280", VA = "0xE87280")]
		public static extern ulong ovr_Room_UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus);

		[PreserveSig]
		[Address(RVA = "0xE87330", Offset = "0xE87330", VA = "0xE87330")]
		public static extern ulong ovr_Room_UpdateOwner(ulong roomID, ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE873E0", Offset = "0xE873E0", VA = "0xE873E0")]
		public static extern ulong ovr_Room_UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy);

		[PreserveSig]
		[Address(RVA = "0xE87490", Offset = "0xE87490", VA = "0xE87490")]
		public static extern ulong ovr_SystemPermissions_GetStatus(PermissionType permType);

		[PreserveSig]
		[Address(RVA = "0xE87530", Offset = "0xE87530", VA = "0xE87530")]
		public static extern ulong ovr_SystemPermissions_LaunchDeeplink(PermissionType permType);

		[Address(RVA = "0xE875D0", Offset = "0xE875D0", VA = "0xE875D0")]
		public static ulong ovr_User_CancelRecordingForReportFlow(string recordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE87678", Offset = "0xE87678", VA = "0xE87678")]
		private static extern ulong ovr_User_CancelRecordingForReportFlow_Native(IntPtr recordingUUID);

		[PreserveSig]
		[Address(RVA = "0xE87718", Offset = "0xE87718", VA = "0xE87718")]
		public static extern ulong ovr_User_Get(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE877B8", Offset = "0xE877B8", VA = "0xE877B8")]
		public static extern ulong ovr_User_GetAccessToken();

		[PreserveSig]
		[Address(RVA = "0xE87848", Offset = "0xE87848", VA = "0xE87848")]
		public static extern ulong ovr_User_GetLinkedAccounts(IntPtr userOptions);

		[PreserveSig]
		[Address(RVA = "0xE878E8", Offset = "0xE878E8", VA = "0xE878E8")]
		public static extern ulong ovr_User_GetLoggedInUser();

		[PreserveSig]
		[Address(RVA = "0xE87978", Offset = "0xE87978", VA = "0xE87978")]
		public static extern ulong ovr_User_GetLoggedInUserFriends();

		[PreserveSig]
		[Address(RVA = "0xE87A08", Offset = "0xE87A08", VA = "0xE87A08")]
		public static extern ulong ovr_User_GetLoggedInUserFriendsAndRooms();

		[PreserveSig]
		[Address(RVA = "0xE87A98", Offset = "0xE87A98", VA = "0xE87A98")]
		public static extern ulong ovr_User_GetLoggedInUserRecentlyMetUsersAndRooms(IntPtr userOptions);

		[PreserveSig]
		[Address(RVA = "0xE87B38", Offset = "0xE87B38", VA = "0xE87B38")]
		public static extern ulong ovr_User_GetOrgScopedID(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE87BD8", Offset = "0xE87BD8", VA = "0xE87BD8")]
		public static extern ulong ovr_User_GetSdkAccounts();

		[PreserveSig]
		[Address(RVA = "0xE87C68", Offset = "0xE87C68", VA = "0xE87C68")]
		public static extern ulong ovr_User_GetUserProof();

		[PreserveSig]
		[Address(RVA = "0xE87CF8", Offset = "0xE87CF8", VA = "0xE87CF8")]
		public static extern ulong ovr_User_LaunchBlockFlow(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE87D98", Offset = "0xE87D98", VA = "0xE87D98")]
		public static extern ulong ovr_User_LaunchFriendRequestFlow(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE87E38", Offset = "0xE87E38", VA = "0xE87E38")]
		public static extern ulong ovr_User_LaunchProfile(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE87ED8", Offset = "0xE87ED8", VA = "0xE87ED8")]
		public static extern ulong ovr_User_LaunchReportFlow(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE87F78", Offset = "0xE87F78", VA = "0xE87F78")]
		public static extern ulong ovr_User_LaunchReportFlow2(ulong optionalUserID, IntPtr abuseReportOptions);

		[PreserveSig]
		[Address(RVA = "0xE88028", Offset = "0xE88028", VA = "0xE88028")]
		public static extern ulong ovr_User_LaunchUnblockFlow(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE880C8", Offset = "0xE880C8", VA = "0xE880C8")]
		public static extern ulong ovr_User_NewEntitledTestUser();

		[PreserveSig]
		[Address(RVA = "0xE88158", Offset = "0xE88158", VA = "0xE88158")]
		public static extern ulong ovr_User_NewTestUser();

		[PreserveSig]
		[Address(RVA = "0xE881E8", Offset = "0xE881E8", VA = "0xE881E8")]
		public static extern ulong ovr_User_NewTestUserFriends();

		[PreserveSig]
		[Address(RVA = "0xE88278", Offset = "0xE88278", VA = "0xE88278")]
		public static extern ulong ovr_User_StartRecordingForReportFlow();

		[Address(RVA = "0xE88308", Offset = "0xE88308", VA = "0xE88308")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow(ulong optionalUserID, string optionalRecordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE883C4", Offset = "0xE883C4", VA = "0xE883C4")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow_Native(ulong optionalUserID, IntPtr optionalRecordingUUID);

		[Address(RVA = "0xE88474", Offset = "0xE88474", VA = "0xE88474")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow2(ulong optionalUserID, string optionalRecordingUUID, IntPtr abuseReportOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE88538", Offset = "0xE88538", VA = "0xE88538")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow2_Native(ulong optionalUserID, IntPtr optionalRecordingUUID, IntPtr abuseReportOptions);

		[Address(RVA = "0xE885F0", Offset = "0xE885F0", VA = "0xE885F0")]
		public static ulong ovr_User_TestUserCreateDeviceManifest(string deviceID, ulong[] appIDs, int numAppIDs)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Address(RVA = "0xE886B0", Offset = "0xE886B0", VA = "0xE886B0")]
		private static extern ulong ovr_User_TestUserCreateDeviceManifest_Native(IntPtr deviceID, ulong[] appIDs, int numAppIDs);

		[PreserveSig]
		[Address(RVA = "0xE88770", Offset = "0xE88770", VA = "0xE88770")]
		public static extern ulong ovr_Voip_SetSystemVoipSuppressed(bool suppressed);

		[Address(RVA = "0xE88810", Offset = "0xE88810", VA = "0xE88810")]
		public static string ovr_AbuseReportRecording_GetRecordingUuid(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE88878", Offset = "0xE88878", VA = "0xE88878")]
		private static extern IntPtr ovr_AbuseReportRecording_GetRecordingUuid_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE88918", Offset = "0xE88918", VA = "0xE88918")]
		public static extern uint ovr_AchievementDefinition_GetBitfieldLength(IntPtr obj);

		[Address(RVA = "0xE889B8", Offset = "0xE889B8", VA = "0xE889B8")]
		public static string ovr_AchievementDefinition_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE88A20", Offset = "0xE88A20", VA = "0xE88A20")]
		private static extern IntPtr ovr_AchievementDefinition_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE88AC0", Offset = "0xE88AC0", VA = "0xE88AC0")]
		public static extern ulong ovr_AchievementDefinition_GetTarget(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE88B60", Offset = "0xE88B60", VA = "0xE88B60")]
		public static extern AchievementType ovr_AchievementDefinition_GetType(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE88C00", Offset = "0xE88C00", VA = "0xE88C00")]
		public static extern IntPtr ovr_AchievementDefinitionArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE88CB0", Offset = "0xE88CB0", VA = "0xE88CB0")]
		public static string ovr_AchievementDefinitionArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE88D18", Offset = "0xE88D18", VA = "0xE88D18")]
		private static extern IntPtr ovr_AchievementDefinitionArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE88DB8", Offset = "0xE88DB8", VA = "0xE88DB8")]
		public static extern UIntPtr ovr_AchievementDefinitionArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE88E58", Offset = "0xE88E58", VA = "0xE88E58")]
		public static extern bool ovr_AchievementDefinitionArray_HasNextPage(IntPtr obj);

		[Address(RVA = "0xE88F00", Offset = "0xE88F00", VA = "0xE88F00")]
		public static string ovr_AchievementProgress_GetBitfield(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE88F68", Offset = "0xE88F68", VA = "0xE88F68")]
		private static extern IntPtr ovr_AchievementProgress_GetBitfield_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE89008", Offset = "0xE89008", VA = "0xE89008")]
		public static extern ulong ovr_AchievementProgress_GetCount(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE890A8", Offset = "0xE890A8", VA = "0xE890A8")]
		public static extern bool ovr_AchievementProgress_GetIsUnlocked(IntPtr obj);

		[Address(RVA = "0xE89150", Offset = "0xE89150", VA = "0xE89150")]
		public static string ovr_AchievementProgress_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE891B8", Offset = "0xE891B8", VA = "0xE891B8")]
		private static extern IntPtr ovr_AchievementProgress_GetName_Native(IntPtr obj);

		[Address(RVA = "0xE89258", Offset = "0xE89258", VA = "0xE89258")]
		public static DateTime ovr_AchievementProgress_GetUnlockTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Address(RVA = "0xE892C0", Offset = "0xE892C0", VA = "0xE892C0")]
		private static extern ulong ovr_AchievementProgress_GetUnlockTime_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE89360", Offset = "0xE89360", VA = "0xE89360")]
		public static extern IntPtr ovr_AchievementProgressArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE89410", Offset = "0xE89410", VA = "0xE89410")]
		public static string ovr_AchievementProgressArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE89478", Offset = "0xE89478", VA = "0xE89478")]
		private static extern IntPtr ovr_AchievementProgressArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE89518", Offset = "0xE89518", VA = "0xE89518")]
		public static extern UIntPtr ovr_AchievementProgressArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE895B8", Offset = "0xE895B8", VA = "0xE895B8")]
		public static extern bool ovr_AchievementProgressArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE89660", Offset = "0xE89660", VA = "0xE89660")]
		public static extern bool ovr_AchievementUpdate_GetJustUnlocked(IntPtr obj);

		[Address(RVA = "0xE89708", Offset = "0xE89708", VA = "0xE89708")]
		public static string ovr_AchievementUpdate_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE89770", Offset = "0xE89770", VA = "0xE89770")]
		private static extern IntPtr ovr_AchievementUpdate_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE89810", Offset = "0xE89810", VA = "0xE89810")]
		public static extern ulong ovr_Application_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE898B0", Offset = "0xE898B0", VA = "0xE898B0")]
		public static extern int ovr_ApplicationVersion_GetCurrentCode(IntPtr obj);

		[Address(RVA = "0xE89950", Offset = "0xE89950", VA = "0xE89950")]
		public static string ovr_ApplicationVersion_GetCurrentName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE899B8", Offset = "0xE899B8", VA = "0xE899B8")]
		private static extern IntPtr ovr_ApplicationVersion_GetCurrentName_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE89A58", Offset = "0xE89A58", VA = "0xE89A58")]
		public static extern int ovr_ApplicationVersion_GetLatestCode(IntPtr obj);

		[Address(RVA = "0xE89AF8", Offset = "0xE89AF8", VA = "0xE89AF8")]
		public static string ovr_ApplicationVersion_GetLatestName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE89B60", Offset = "0xE89B60", VA = "0xE89B60")]
		private static extern IntPtr ovr_ApplicationVersion_GetLatestName_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE89C00", Offset = "0xE89C00", VA = "0xE89C00")]
		public static extern ulong ovr_AssetDetails_GetAssetId(IntPtr obj);

		[Address(RVA = "0xE89CA0", Offset = "0xE89CA0", VA = "0xE89CA0")]
		public static string ovr_AssetDetails_GetAssetType(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE89D08", Offset = "0xE89D08", VA = "0xE89D08")]
		private static extern IntPtr ovr_AssetDetails_GetAssetType_Native(IntPtr obj);

		[Address(RVA = "0xE89DA8", Offset = "0xE89DA8", VA = "0xE89DA8")]
		public static string ovr_AssetDetails_GetDownloadStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE89E10", Offset = "0xE89E10", VA = "0xE89E10")]
		private static extern IntPtr ovr_AssetDetails_GetDownloadStatus_Native(IntPtr obj);

		[Address(RVA = "0xE89EB0", Offset = "0xE89EB0", VA = "0xE89EB0")]
		public static string ovr_AssetDetails_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE89F18", Offset = "0xE89F18", VA = "0xE89F18")]
		private static extern IntPtr ovr_AssetDetails_GetFilepath_Native(IntPtr obj);

		[Address(RVA = "0xE89FB8", Offset = "0xE89FB8", VA = "0xE89FB8")]
		public static string ovr_AssetDetails_GetIapStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8A020", Offset = "0xE8A020", VA = "0xE8A020")]
		private static extern IntPtr ovr_AssetDetails_GetIapStatus_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A0C0", Offset = "0xE8A0C0", VA = "0xE8A0C0")]
		public static extern IntPtr ovr_AssetDetails_GetLanguage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A160", Offset = "0xE8A160", VA = "0xE8A160")]
		public static extern IntPtr ovr_AssetDetailsArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE8A210", Offset = "0xE8A210", VA = "0xE8A210")]
		public static extern UIntPtr ovr_AssetDetailsArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A2B0", Offset = "0xE8A2B0", VA = "0xE8A2B0")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A350", Offset = "0xE8A350", VA = "0xE8A350")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetId(IntPtr obj);

		[Address(RVA = "0xE8A3F0", Offset = "0xE8A3F0", VA = "0xE8A3F0")]
		public static string ovr_AssetFileDeleteResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8A458", Offset = "0xE8A458", VA = "0xE8A458")]
		private static extern IntPtr ovr_AssetFileDeleteResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A4F8", Offset = "0xE8A4F8", VA = "0xE8A4F8")]
		public static extern bool ovr_AssetFileDeleteResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A5A0", Offset = "0xE8A5A0", VA = "0xE8A5A0")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A640", Offset = "0xE8A640", VA = "0xE8A640")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetId(IntPtr obj);

		[Address(RVA = "0xE8A6E0", Offset = "0xE8A6E0", VA = "0xE8A6E0")]
		public static string ovr_AssetFileDownloadCancelResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8A748", Offset = "0xE8A748", VA = "0xE8A748")]
		private static extern IntPtr ovr_AssetFileDownloadCancelResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A7E8", Offset = "0xE8A7E8", VA = "0xE8A7E8")]
		public static extern bool ovr_AssetFileDownloadCancelResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8A890", Offset = "0xE8A890", VA = "0xE8A890")]
		public static extern ulong ovr_AssetFileDownloadResult_GetAssetId(IntPtr obj);

		[Address(RVA = "0xE8A930", Offset = "0xE8A930", VA = "0xE8A930")]
		public static string ovr_AssetFileDownloadResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8A998", Offset = "0xE8A998", VA = "0xE8A998")]
		private static extern IntPtr ovr_AssetFileDownloadResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8AA38", Offset = "0xE8AA38", VA = "0xE8AA38")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8AAD8", Offset = "0xE8AAD8", VA = "0xE8AAD8")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8AB78", Offset = "0xE8AB78", VA = "0xE8AB78")]
		public static extern uint ovr_AssetFileDownloadUpdate_GetBytesTotal(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8AC18", Offset = "0xE8AC18", VA = "0xE8AC18")]
		public static extern int ovr_AssetFileDownloadUpdate_GetBytesTransferred(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8ACB8", Offset = "0xE8ACB8", VA = "0xE8ACB8")]
		public static extern bool ovr_AssetFileDownloadUpdate_GetCompleted(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8AD60", Offset = "0xE8AD60", VA = "0xE8AD60")]
		public static extern int ovr_CalApplicationFinalized_GetCountdownMS(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8AE00", Offset = "0xE8AE00", VA = "0xE8AE00")]
		public static extern ulong ovr_CalApplicationFinalized_GetID(IntPtr obj);

		[Address(RVA = "0xE8AEA0", Offset = "0xE8AEA0", VA = "0xE8AEA0")]
		public static string ovr_CalApplicationFinalized_GetLaunchDetails(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8AF08", Offset = "0xE8AF08", VA = "0xE8AF08")]
		private static extern IntPtr ovr_CalApplicationFinalized_GetLaunchDetails_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8AFA8", Offset = "0xE8AFA8", VA = "0xE8AFA8")]
		public static extern ulong ovr_CalApplicationProposed_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8B048", Offset = "0xE8B048", VA = "0xE8B048")]
		public static extern ulong ovr_CalApplicationSuggestion_GetID(IntPtr obj);

		[Address(RVA = "0xE8B0E8", Offset = "0xE8B0E8", VA = "0xE8B0E8")]
		public static string ovr_CalApplicationSuggestion_GetSocialContext(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8B150", Offset = "0xE8B150", VA = "0xE8B150")]
		private static extern IntPtr ovr_CalApplicationSuggestion_GetSocialContext_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8B1F0", Offset = "0xE8B1F0", VA = "0xE8B1F0")]
		public static extern IntPtr ovr_CalApplicationSuggestionArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE8B2A0", Offset = "0xE8B2A0", VA = "0xE8B2A0")]
		public static extern UIntPtr ovr_CalApplicationSuggestionArray_GetSize(IntPtr obj);

		[Address(RVA = "0xE8B340", Offset = "0xE8B340", VA = "0xE8B340")]
		public static string ovr_CloudStorage2UserDirectoryPathResponse_GetPath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8B3A8", Offset = "0xE8B3A8", VA = "0xE8B3A8")]
		private static extern IntPtr ovr_CloudStorage2UserDirectoryPathResponse_GetPath_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8B448", Offset = "0xE8B448", VA = "0xE8B448")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetLocal(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8B4E8", Offset = "0xE8B4E8", VA = "0xE8B4E8")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetRemote(IntPtr obj);

		[Address(RVA = "0xE8B588", Offset = "0xE8B588", VA = "0xE8B588")]
		public static string ovr_CloudStorageData_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8B5F0", Offset = "0xE8B5F0", VA = "0xE8B5F0")]
		private static extern IntPtr ovr_CloudStorageData_GetBucket_Native(IntPtr obj);

		[Address(RVA = "0xE8B690", Offset = "0xE8B690", VA = "0xE8B690")]
		public static byte[] ovr_CloudStorageData_GetData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8B7AC", Offset = "0xE8B7AC", VA = "0xE8B7AC")]
		private static extern IntPtr ovr_CloudStorageData_GetData_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8B70C", Offset = "0xE8B70C", VA = "0xE8B70C")]
		public static extern uint ovr_CloudStorageData_GetDataSize(IntPtr obj);

		[Address(RVA = "0xE8B84C", Offset = "0xE8B84C", VA = "0xE8B84C")]
		public static string ovr_CloudStorageData_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8B8B4", Offset = "0xE8B8B4", VA = "0xE8B8B4")]
		private static extern IntPtr ovr_CloudStorageData_GetKey_Native(IntPtr obj);

		[Address(RVA = "0xE8B954", Offset = "0xE8B954", VA = "0xE8B954")]
		public static string ovr_CloudStorageMetadata_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8B9BC", Offset = "0xE8B9BC", VA = "0xE8B9BC")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetBucket_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8BA5C", Offset = "0xE8BA5C", VA = "0xE8BA5C")]
		public static extern long ovr_CloudStorageMetadata_GetCounter(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8BAFC", Offset = "0xE8BAFC", VA = "0xE8BAFC")]
		public static extern uint ovr_CloudStorageMetadata_GetDataSize(IntPtr obj);

		[Address(RVA = "0xE8BB9C", Offset = "0xE8BB9C", VA = "0xE8BB9C")]
		public static string ovr_CloudStorageMetadata_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8BC04", Offset = "0xE8BC04", VA = "0xE8BC04")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetExtraData_Native(IntPtr obj);

		[Address(RVA = "0xE8BCA4", Offset = "0xE8BCA4", VA = "0xE8BCA4")]
		public static string ovr_CloudStorageMetadata_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8BD0C", Offset = "0xE8BD0C", VA = "0xE8BD0C")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8BDAC", Offset = "0xE8BDAC", VA = "0xE8BDAC")]
		public static extern ulong ovr_CloudStorageMetadata_GetSaveTime(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8BE4C", Offset = "0xE8BE4C", VA = "0xE8BE4C")]
		public static extern CloudStorageDataStatus ovr_CloudStorageMetadata_GetStatus(IntPtr obj);

		[Address(RVA = "0xE8BEEC", Offset = "0xE8BEEC", VA = "0xE8BEEC")]
		public static string ovr_CloudStorageMetadata_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8BF54", Offset = "0xE8BF54", VA = "0xE8BF54")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetVersionHandle_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8BFF4", Offset = "0xE8BFF4", VA = "0xE8BFF4")]
		public static extern IntPtr ovr_CloudStorageMetadataArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE8C0A4", Offset = "0xE8C0A4", VA = "0xE8C0A4")]
		public static string ovr_CloudStorageMetadataArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8C10C", Offset = "0xE8C10C", VA = "0xE8C10C")]
		private static extern IntPtr ovr_CloudStorageMetadataArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8C1AC", Offset = "0xE8C1AC", VA = "0xE8C1AC")]
		public static extern UIntPtr ovr_CloudStorageMetadataArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8C24C", Offset = "0xE8C24C", VA = "0xE8C24C")]
		public static extern bool ovr_CloudStorageMetadataArray_HasNextPage(IntPtr obj);

		[Address(RVA = "0xE8C2F4", Offset = "0xE8C2F4", VA = "0xE8C2F4")]
		public static string ovr_CloudStorageUpdateResponse_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8C35C", Offset = "0xE8C35C", VA = "0xE8C35C")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetBucket_Native(IntPtr obj);

		[Address(RVA = "0xE8C3FC", Offset = "0xE8C3FC", VA = "0xE8C3FC")]
		public static string ovr_CloudStorageUpdateResponse_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8C464", Offset = "0xE8C464", VA = "0xE8C464")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8C504", Offset = "0xE8C504", VA = "0xE8C504")]
		public static extern CloudStorageUpdateStatus ovr_CloudStorageUpdateResponse_GetStatus(IntPtr obj);

		[Address(RVA = "0xE8C5A4", Offset = "0xE8C5A4", VA = "0xE8C5A4")]
		public static string ovr_CloudStorageUpdateResponse_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8C60C", Offset = "0xE8C60C", VA = "0xE8C60C")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetVersionHandle_Native(IntPtr obj);

		[Address(RVA = "0xE8C6AC", Offset = "0xE8C6AC", VA = "0xE8C6AC")]
		public static uint ovr_DataStore_Contains(IntPtr obj, string key)
		{
			return default(uint);
		}

		[PreserveSig]
		[Address(RVA = "0xE8C768", Offset = "0xE8C768", VA = "0xE8C768")]
		private static extern uint ovr_DataStore_Contains_Native(IntPtr obj, IntPtr key);

		[Address(RVA = "0xE7DB3C", Offset = "0xE7DB3C", VA = "0xE7DB3C")]
		public static string ovr_DataStore_GetKey(IntPtr obj, int index)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8C818", Offset = "0xE8C818", VA = "0xE8C818")]
		private static extern IntPtr ovr_DataStore_GetKey_Native(IntPtr obj, int index);

		[PreserveSig]
		[Address(RVA = "0xE7DA9C", Offset = "0xE7DA9C", VA = "0xE7DA9C")]
		public static extern UIntPtr ovr_DataStore_GetNumKeys(IntPtr obj);

		[Address(RVA = "0xE7DBB4", Offset = "0xE7DBB4", VA = "0xE7DBB4")]
		public static string ovr_DataStore_GetValue(IntPtr obj, string key)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8C8C8", Offset = "0xE8C8C8", VA = "0xE8C8C8")]
		private static extern IntPtr ovr_DataStore_GetValue_Native(IntPtr obj, IntPtr key);

		[PreserveSig]
		[Address(RVA = "0xE8C978", Offset = "0xE8C978", VA = "0xE8C978")]
		public static extern int ovr_Error_GetCode(IntPtr obj);

		[Address(RVA = "0xE8CA14", Offset = "0xE8CA14", VA = "0xE8CA14")]
		public static string ovr_Error_GetDisplayableMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8CA7C", Offset = "0xE8CA7C", VA = "0xE8CA7C")]
		private static extern IntPtr ovr_Error_GetDisplayableMessage_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8CB1C", Offset = "0xE8CB1C", VA = "0xE8CB1C")]
		public static extern int ovr_Error_GetHttpCode(IntPtr obj);

		[Address(RVA = "0xE8CBBC", Offset = "0xE8CBBC", VA = "0xE8CBBC")]
		public static string ovr_Error_GetMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8CC24", Offset = "0xE8CC24", VA = "0xE8CC24")]
		private static extern IntPtr ovr_Error_GetMessage_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8CCC4", Offset = "0xE8CCC4", VA = "0xE8CCC4")]
		public static extern IntPtr ovr_HttpTransferUpdate_GetBytes(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8CD64", Offset = "0xE8CD64", VA = "0xE8CD64")]
		public static extern ulong ovr_HttpTransferUpdate_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8CE04", Offset = "0xE8CE04", VA = "0xE8CE04")]
		public static extern UIntPtr ovr_HttpTransferUpdate_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8CEA4", Offset = "0xE8CEA4", VA = "0xE8CEA4")]
		public static extern bool ovr_HttpTransferUpdate_IsCompleted(IntPtr obj);

		[Address(RVA = "0xE8CF4C", Offset = "0xE8CF4C", VA = "0xE8CF4C")]
		public static string ovr_InstalledApplication_GetApplicationId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8CFB4", Offset = "0xE8CFB4", VA = "0xE8CFB4")]
		private static extern IntPtr ovr_InstalledApplication_GetApplicationId_Native(IntPtr obj);

		[Address(RVA = "0xE8D054", Offset = "0xE8D054", VA = "0xE8D054")]
		public static string ovr_InstalledApplication_GetPackageName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8D0BC", Offset = "0xE8D0BC", VA = "0xE8D0BC")]
		private static extern IntPtr ovr_InstalledApplication_GetPackageName_Native(IntPtr obj);

		[Address(RVA = "0xE8D15C", Offset = "0xE8D15C", VA = "0xE8D15C")]
		public static string ovr_InstalledApplication_GetStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8D1C4", Offset = "0xE8D1C4", VA = "0xE8D1C4")]
		private static extern IntPtr ovr_InstalledApplication_GetStatus_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8D264", Offset = "0xE8D264", VA = "0xE8D264")]
		public static extern int ovr_InstalledApplication_GetVersionCode(IntPtr obj);

		[Address(RVA = "0xE8D304", Offset = "0xE8D304", VA = "0xE8D304")]
		public static string ovr_InstalledApplication_GetVersionName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8D36C", Offset = "0xE8D36C", VA = "0xE8D36C")]
		private static extern IntPtr ovr_InstalledApplication_GetVersionName_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8D40C", Offset = "0xE8D40C", VA = "0xE8D40C")]
		public static extern IntPtr ovr_InstalledApplicationArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE8D4BC", Offset = "0xE8D4BC", VA = "0xE8D4BC")]
		public static extern UIntPtr ovr_InstalledApplicationArray_GetSize(IntPtr obj);

		[Address(RVA = "0xE8D55C", Offset = "0xE8D55C", VA = "0xE8D55C")]
		public static string ovr_LanguagePackInfo_GetEnglishName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8D5C4", Offset = "0xE8D5C4", VA = "0xE8D5C4")]
		private static extern IntPtr ovr_LanguagePackInfo_GetEnglishName_Native(IntPtr obj);

		[Address(RVA = "0xE8D664", Offset = "0xE8D664", VA = "0xE8D664")]
		public static string ovr_LanguagePackInfo_GetNativeName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8D6CC", Offset = "0xE8D6CC", VA = "0xE8D6CC")]
		private static extern IntPtr ovr_LanguagePackInfo_GetNativeName_Native(IntPtr obj);

		[Address(RVA = "0xE8D76C", Offset = "0xE8D76C", VA = "0xE8D76C")]
		public static string ovr_LanguagePackInfo_GetTag(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8D7D4", Offset = "0xE8D7D4", VA = "0xE8D7D4")]
		private static extern IntPtr ovr_LanguagePackInfo_GetTag_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8D874", Offset = "0xE8D874", VA = "0xE8D874")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidBlock(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8D91C", Offset = "0xE8D91C", VA = "0xE8D91C")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidCancel(IntPtr obj);

		[Address(RVA = "0xE8D9C4", Offset = "0xE8D9C4", VA = "0xE8D9C4")]
		public static string ovr_LaunchDetails_GetDeeplinkMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8DA2C", Offset = "0xE8DA2C", VA = "0xE8DA2C")]
		private static extern IntPtr ovr_LaunchDetails_GetDeeplinkMessage_Native(IntPtr obj);

		[Address(RVA = "0xE8DACC", Offset = "0xE8DACC", VA = "0xE8DACC")]
		public static string ovr_LaunchDetails_GetLaunchSource(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8DB34", Offset = "0xE8DB34", VA = "0xE8DB34")]
		private static extern IntPtr ovr_LaunchDetails_GetLaunchSource_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8DBD4", Offset = "0xE8DBD4", VA = "0xE8DBD4")]
		public static extern LaunchType ovr_LaunchDetails_GetLaunchType(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8DC74", Offset = "0xE8DC74", VA = "0xE8DC74")]
		public static extern ulong ovr_LaunchDetails_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8DD14", Offset = "0xE8DD14", VA = "0xE8DD14")]
		public static extern IntPtr ovr_LaunchDetails_GetUsers(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8DDB4", Offset = "0xE8DDB4", VA = "0xE8DDB4")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8DE5C", Offset = "0xE8DE5C", VA = "0xE8DE5C")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidSendRequest(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8DF04", Offset = "0xE8DF04", VA = "0xE8DF04")]
		public static extern bool ovr_LaunchReportFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8DFAC", Offset = "0xE8DFAC", VA = "0xE8DFAC")]
		public static extern ulong ovr_LaunchReportFlowResult_GetUserReportId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E04C", Offset = "0xE8E04C", VA = "0xE8E04C")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E0F4", Offset = "0xE8E0F4", VA = "0xE8E0F4")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidUnblock(IntPtr obj);

		[Address(RVA = "0xE8E19C", Offset = "0xE8E19C", VA = "0xE8E19C")]
		public static byte[] ovr_LeaderboardEntry_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8E2B8", Offset = "0xE8E2B8", VA = "0xE8E2B8")]
		private static extern IntPtr ovr_LeaderboardEntry_GetExtraData_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E218", Offset = "0xE8E218", VA = "0xE8E218")]
		public static extern uint ovr_LeaderboardEntry_GetExtraDataLength(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E358", Offset = "0xE8E358", VA = "0xE8E358")]
		public static extern int ovr_LeaderboardEntry_GetRank(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E3F8", Offset = "0xE8E3F8", VA = "0xE8E3F8")]
		public static extern long ovr_LeaderboardEntry_GetScore(IntPtr obj);

		[Address(RVA = "0xE8E498", Offset = "0xE8E498", VA = "0xE8E498")]
		public static DateTime ovr_LeaderboardEntry_GetTimestamp(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Address(RVA = "0xE8E500", Offset = "0xE8E500", VA = "0xE8E500")]
		private static extern ulong ovr_LeaderboardEntry_GetTimestamp_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E5A0", Offset = "0xE8E5A0", VA = "0xE8E5A0")]
		public static extern IntPtr ovr_LeaderboardEntry_GetUser(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E640", Offset = "0xE8E640", VA = "0xE8E640")]
		public static extern IntPtr ovr_LeaderboardEntryArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE8E6F0", Offset = "0xE8E6F0", VA = "0xE8E6F0")]
		public static string ovr_LeaderboardEntryArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8E758", Offset = "0xE8E758", VA = "0xE8E758")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetNextUrl_Native(IntPtr obj);

		[Address(RVA = "0xE8E7F8", Offset = "0xE8E7F8", VA = "0xE8E7F8")]
		public static string ovr_LeaderboardEntryArray_GetPreviousUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8E860", Offset = "0xE8E860", VA = "0xE8E860")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetPreviousUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E900", Offset = "0xE8E900", VA = "0xE8E900")]
		public static extern UIntPtr ovr_LeaderboardEntryArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8E9A0", Offset = "0xE8E9A0", VA = "0xE8E9A0")]
		public static extern ulong ovr_LeaderboardEntryArray_GetTotalCount(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8EA40", Offset = "0xE8EA40", VA = "0xE8EA40")]
		public static extern bool ovr_LeaderboardEntryArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8EAE8", Offset = "0xE8EAE8", VA = "0xE8EAE8")]
		public static extern bool ovr_LeaderboardEntryArray_HasPreviousPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8EB90", Offset = "0xE8EB90", VA = "0xE8EB90")]
		public static extern bool ovr_LeaderboardUpdateStatus_GetDidUpdate(IntPtr obj);

		[Address(RVA = "0xE8EC38", Offset = "0xE8EC38", VA = "0xE8EC38")]
		public static string ovr_LinkedAccount_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8ECA0", Offset = "0xE8ECA0", VA = "0xE8ECA0")]
		private static extern IntPtr ovr_LinkedAccount_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8ED40", Offset = "0xE8ED40", VA = "0xE8ED40")]
		public static extern ServiceProvider ovr_LinkedAccount_GetServiceProvider(IntPtr obj);

		[Address(RVA = "0xE8EDE0", Offset = "0xE8EDE0", VA = "0xE8EDE0")]
		public static string ovr_LinkedAccount_GetUserId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8EE48", Offset = "0xE8EE48", VA = "0xE8EE48")]
		private static extern IntPtr ovr_LinkedAccount_GetUserId_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8EEE8", Offset = "0xE8EEE8", VA = "0xE8EEE8")]
		public static extern IntPtr ovr_LinkedAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE8EF98", Offset = "0xE8EF98", VA = "0xE8EF98")]
		public static extern UIntPtr ovr_LinkedAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F038", Offset = "0xE8F038", VA = "0xE8F038")]
		public static extern bool ovr_LivestreamingApplicationStatus_GetStreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F0E0", Offset = "0xE8F0E0", VA = "0xE8F0E0")]
		public static extern LivestreamingStartStatus ovr_LivestreamingStartResult_GetStreamingResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F180", Offset = "0xE8F180", VA = "0xE8F180")]
		public static extern bool ovr_LivestreamingStatus_GetCommentsVisible(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F228", Offset = "0xE8F228", VA = "0xE8F228")]
		public static extern bool ovr_LivestreamingStatus_GetIsPaused(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F2D0", Offset = "0xE8F2D0", VA = "0xE8F2D0")]
		public static extern bool ovr_LivestreamingStatus_GetLivestreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F378", Offset = "0xE8F378", VA = "0xE8F378")]
		public static extern int ovr_LivestreamingStatus_GetLivestreamingType(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F418", Offset = "0xE8F418", VA = "0xE8F418")]
		public static extern bool ovr_LivestreamingStatus_GetMicEnabled(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F4C0", Offset = "0xE8F4C0", VA = "0xE8F4C0")]
		public static extern int ovr_LivestreamingVideoStats_GetCommentCount(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F560", Offset = "0xE8F560", VA = "0xE8F560")]
		public static extern int ovr_LivestreamingVideoStats_GetReactionCount(IntPtr obj);

		[Address(RVA = "0xE8F600", Offset = "0xE8F600", VA = "0xE8F600")]
		public static string ovr_LivestreamingVideoStats_GetTotalViews(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8F668", Offset = "0xE8F668", VA = "0xE8F668")]
		private static extern IntPtr ovr_LivestreamingVideoStats_GetTotalViews_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F708", Offset = "0xE8F708", VA = "0xE8F708")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshot_GetCandidates(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F7A8", Offset = "0xE8F7A8", VA = "0xE8F7A8")]
		public static extern double ovr_MatchmakingAdminSnapshot_GetMyCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F848", Offset = "0xE8F848", VA = "0xE8F848")]
		public static extern bool ovr_MatchmakingAdminSnapshotCandidate_GetCanMatch(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F8F0", Offset = "0xE8F8F0", VA = "0xE8F8F0")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetMyTotalScore(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8F990", Offset = "0xE8F990", VA = "0xE8F990")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8FA30", Offset = "0xE8FA30", VA = "0xE8FA30")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirTotalScore(IntPtr obj);

		[Address(RVA = "0xE8FAD0", Offset = "0xE8FAD0", VA = "0xE8FAD0")]
		public static string ovr_MatchmakingAdminSnapshotCandidate_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8FB38", Offset = "0xE8FB38", VA = "0xE8FB38")]
		private static extern IntPtr ovr_MatchmakingAdminSnapshotCandidate_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8FBD8", Offset = "0xE8FBD8", VA = "0xE8FBD8")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE8FC88", Offset = "0xE8FC88", VA = "0xE8FC88")]
		public static extern UIntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8FD28", Offset = "0xE8FD28", VA = "0xE8FD28")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8FDC8", Offset = "0xE8FDC8", VA = "0xE8FDC8")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetRooms(IntPtr obj);

		[Address(RVA = "0xE8FE68", Offset = "0xE8FE68", VA = "0xE8FE68")]
		public static string ovr_MatchmakingCandidate_GetEntryHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE8FED0", Offset = "0xE8FED0", VA = "0xE8FED0")]
		private static extern IntPtr ovr_MatchmakingCandidate_GetEntryHash_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE8FF70", Offset = "0xE8FF70", VA = "0xE8FF70")]
		public static extern ulong ovr_MatchmakingCandidate_GetUserId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90010", Offset = "0xE90010", VA = "0xE90010")]
		public static extern IntPtr ovr_MatchmakingCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE900C0", Offset = "0xE900C0", VA = "0xE900C0")]
		public static string ovr_MatchmakingCandidateArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE90128", Offset = "0xE90128", VA = "0xE90128")]
		private static extern IntPtr ovr_MatchmakingCandidateArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE901C8", Offset = "0xE901C8", VA = "0xE901C8")]
		public static extern UIntPtr ovr_MatchmakingCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90268", Offset = "0xE90268", VA = "0xE90268")]
		public static extern bool ovr_MatchmakingCandidateArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90310", Offset = "0xE90310", VA = "0xE90310")]
		public static extern IntPtr ovr_MatchmakingEnqueueResult_GetAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE903B0", Offset = "0xE903B0", VA = "0xE903B0")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetAverageWait(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90450", Offset = "0xE90450", VA = "0xE90450")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMatchesInLastHourCount(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE904F0", Offset = "0xE904F0", VA = "0xE904F0")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMaxExpectedWait(IntPtr obj);

		[Address(RVA = "0xE90590", Offset = "0xE90590", VA = "0xE90590")]
		public static string ovr_MatchmakingEnqueueResult_GetPool(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE905F8", Offset = "0xE905F8", VA = "0xE905F8")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetPool_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90698", Offset = "0xE90698", VA = "0xE90698")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetRecentMatchPercentage(IntPtr obj);

		[Address(RVA = "0xE90738", Offset = "0xE90738", VA = "0xE90738")]
		public static string ovr_MatchmakingEnqueueResult_GetRequestHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE907A0", Offset = "0xE907A0", VA = "0xE907A0")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetRequestHash_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90840", Offset = "0xE90840", VA = "0xE90840")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE908E0", Offset = "0xE908E0", VA = "0xE908E0")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90980", Offset = "0xE90980", VA = "0xE90980")]
		public static extern ulong ovr_MatchmakingEnqueuedUser_GetAdditionalUserID(IntPtr obj, uint index);

		[PreserveSig]
		[Address(RVA = "0xE90A30", Offset = "0xE90A30", VA = "0xE90A30")]
		public static extern uint ovr_MatchmakingEnqueuedUser_GetAdditionalUserIDsSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90AD0", Offset = "0xE90AD0", VA = "0xE90AD0")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetCustomData(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90B70", Offset = "0xE90B70", VA = "0xE90B70")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetUser(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90C10", Offset = "0xE90C10", VA = "0xE90C10")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUserArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE90CC0", Offset = "0xE90CC0", VA = "0xE90CC0")]
		public static extern UIntPtr ovr_MatchmakingEnqueuedUserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90D60", Offset = "0xE90D60", VA = "0xE90D60")]
		public static extern ulong ovr_MatchmakingNotification_GetAddedByUserId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90E00", Offset = "0xE90E00", VA = "0xE90E00")]
		public static extern IntPtr ovr_MatchmakingNotification_GetRoom(IntPtr obj);

		[Address(RVA = "0xE90EA0", Offset = "0xE90EA0", VA = "0xE90EA0")]
		public static string ovr_MatchmakingNotification_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE90F08", Offset = "0xE90F08", VA = "0xE90F08")]
		private static extern IntPtr ovr_MatchmakingNotification_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE90FA8", Offset = "0xE90FA8", VA = "0xE90FA8")]
		public static extern uint ovr_MatchmakingRoom_GetPingTime(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91048", Offset = "0xE91048", VA = "0xE91048")]
		public static extern IntPtr ovr_MatchmakingRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE910E8", Offset = "0xE910E8", VA = "0xE910E8")]
		public static extern bool ovr_MatchmakingRoom_HasPingTime(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91190", Offset = "0xE91190", VA = "0xE91190")]
		public static extern IntPtr ovr_MatchmakingRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE91240", Offset = "0xE91240", VA = "0xE91240")]
		public static extern UIntPtr ovr_MatchmakingRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE912E0", Offset = "0xE912E0", VA = "0xE912E0")]
		public static extern uint ovr_MatchmakingStats_GetDrawCount(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91380", Offset = "0xE91380", VA = "0xE91380")]
		public static extern uint ovr_MatchmakingStats_GetLossCount(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91420", Offset = "0xE91420", VA = "0xE91420")]
		public static extern uint ovr_MatchmakingStats_GetSkillLevel(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE914C0", Offset = "0xE914C0", VA = "0xE914C0")]
		public static extern uint ovr_MatchmakingStats_GetWinCount(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91560", Offset = "0xE91560", VA = "0xE91560")]
		public static extern IntPtr ovr_Message_GetAbuseReportRecording(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91600", Offset = "0xE91600", VA = "0xE91600")]
		public static extern IntPtr ovr_Message_GetAchievementDefinitionArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE916A0", Offset = "0xE916A0", VA = "0xE916A0")]
		public static extern IntPtr ovr_Message_GetAchievementProgressArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91740", Offset = "0xE91740", VA = "0xE91740")]
		public static extern IntPtr ovr_Message_GetAchievementUpdate(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE917E0", Offset = "0xE917E0", VA = "0xE917E0")]
		public static extern IntPtr ovr_Message_GetApplicationVersion(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91880", Offset = "0xE91880", VA = "0xE91880")]
		public static extern IntPtr ovr_Message_GetAssetDetails(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91920", Offset = "0xE91920", VA = "0xE91920")]
		public static extern IntPtr ovr_Message_GetAssetDetailsArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE919C0", Offset = "0xE919C0", VA = "0xE919C0")]
		public static extern IntPtr ovr_Message_GetAssetFileDeleteResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91A60", Offset = "0xE91A60", VA = "0xE91A60")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadCancelResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91B00", Offset = "0xE91B00", VA = "0xE91B00")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91BA0", Offset = "0xE91BA0", VA = "0xE91BA0")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadUpdate(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91C40", Offset = "0xE91C40", VA = "0xE91C40")]
		public static extern IntPtr ovr_Message_GetCalApplicationFinalized(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91CE0", Offset = "0xE91CE0", VA = "0xE91CE0")]
		public static extern IntPtr ovr_Message_GetCalApplicationProposed(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91D80", Offset = "0xE91D80", VA = "0xE91D80")]
		public static extern IntPtr ovr_Message_GetCalApplicationSuggestionArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91E20", Offset = "0xE91E20", VA = "0xE91E20")]
		public static extern IntPtr ovr_Message_GetCloudStorageConflictMetadata(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91EC0", Offset = "0xE91EC0", VA = "0xE91EC0")]
		public static extern IntPtr ovr_Message_GetCloudStorageData(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE91F60", Offset = "0xE91F60", VA = "0xE91F60")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadata(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92000", Offset = "0xE92000", VA = "0xE92000")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadataArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE920A0", Offset = "0xE920A0", VA = "0xE920A0")]
		public static extern IntPtr ovr_Message_GetCloudStorageUpdateResponse(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92140", Offset = "0xE92140", VA = "0xE92140")]
		public static extern IntPtr ovr_Message_GetError(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE921E0", Offset = "0xE921E0", VA = "0xE921E0")]
		public static extern IntPtr ovr_Message_GetHttpTransferUpdate(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92280", Offset = "0xE92280", VA = "0xE92280")]
		public static extern IntPtr ovr_Message_GetInstalledApplicationArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92320", Offset = "0xE92320", VA = "0xE92320")]
		public static extern IntPtr ovr_Message_GetLaunchBlockFlowResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE923C0", Offset = "0xE923C0", VA = "0xE923C0")]
		public static extern IntPtr ovr_Message_GetLaunchFriendRequestFlowResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92460", Offset = "0xE92460", VA = "0xE92460")]
		public static extern IntPtr ovr_Message_GetLaunchReportFlowResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92500", Offset = "0xE92500", VA = "0xE92500")]
		public static extern IntPtr ovr_Message_GetLaunchUnblockFlowResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE925A0", Offset = "0xE925A0", VA = "0xE925A0")]
		public static extern IntPtr ovr_Message_GetLeaderboardEntryArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92640", Offset = "0xE92640", VA = "0xE92640")]
		public static extern IntPtr ovr_Message_GetLeaderboardUpdateStatus(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE926E0", Offset = "0xE926E0", VA = "0xE926E0")]
		public static extern IntPtr ovr_Message_GetLinkedAccountArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92780", Offset = "0xE92780", VA = "0xE92780")]
		public static extern IntPtr ovr_Message_GetLivestreamingApplicationStatus(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92820", Offset = "0xE92820", VA = "0xE92820")]
		public static extern IntPtr ovr_Message_GetLivestreamingStartResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE928C0", Offset = "0xE928C0", VA = "0xE928C0")]
		public static extern IntPtr ovr_Message_GetLivestreamingStatus(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92960", Offset = "0xE92960", VA = "0xE92960")]
		public static extern IntPtr ovr_Message_GetLivestreamingVideoStats(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92A00", Offset = "0xE92A00", VA = "0xE92A00")]
		public static extern IntPtr ovr_Message_GetMatchmakingAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92AA0", Offset = "0xE92AA0", VA = "0xE92AA0")]
		public static extern IntPtr ovr_Message_GetMatchmakingBrowseResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92B40", Offset = "0xE92B40", VA = "0xE92B40")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92BE0", Offset = "0xE92BE0", VA = "0xE92BE0")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResultAndRoom(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92C80", Offset = "0xE92C80", VA = "0xE92C80")]
		public static extern IntPtr ovr_Message_GetMatchmakingRoomArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92D20", Offset = "0xE92D20", VA = "0xE92D20")]
		public static extern IntPtr ovr_Message_GetMatchmakingStats(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92DC0", Offset = "0xE92DC0", VA = "0xE92DC0")]
		public static extern IntPtr ovr_Message_GetNativeMessage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92E60", Offset = "0xE92E60", VA = "0xE92E60")]
		public static extern IntPtr ovr_Message_GetNetworkingPeer(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92F00", Offset = "0xE92F00", VA = "0xE92F00")]
		public static extern IntPtr ovr_Message_GetOrgScopedID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE92FA0", Offset = "0xE92FA0", VA = "0xE92FA0")]
		public static extern IntPtr ovr_Message_GetParty(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93040", Offset = "0xE93040", VA = "0xE93040")]
		public static extern IntPtr ovr_Message_GetPartyID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE930E0", Offset = "0xE930E0", VA = "0xE930E0")]
		public static extern IntPtr ovr_Message_GetPartyUpdateNotification(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93180", Offset = "0xE93180", VA = "0xE93180")]
		public static extern IntPtr ovr_Message_GetPidArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93220", Offset = "0xE93220", VA = "0xE93220")]
		public static extern IntPtr ovr_Message_GetPingResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE932C0", Offset = "0xE932C0", VA = "0xE932C0")]
		public static extern IntPtr ovr_Message_GetPlatformInitialize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93360", Offset = "0xE93360", VA = "0xE93360")]
		public static extern IntPtr ovr_Message_GetProductArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93400", Offset = "0xE93400", VA = "0xE93400")]
		public static extern IntPtr ovr_Message_GetPurchase(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE934A0", Offset = "0xE934A0", VA = "0xE934A0")]
		public static extern IntPtr ovr_Message_GetPurchaseArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93540", Offset = "0xE93540", VA = "0xE93540")]
		public static extern ulong ovr_Message_GetRequestID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE935E0", Offset = "0xE935E0", VA = "0xE935E0")]
		public static extern IntPtr ovr_Message_GetRoom(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93680", Offset = "0xE93680", VA = "0xE93680")]
		public static extern IntPtr ovr_Message_GetRoomArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93720", Offset = "0xE93720", VA = "0xE93720")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotification(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE937C0", Offset = "0xE937C0", VA = "0xE937C0")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotificationArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93860", Offset = "0xE93860", VA = "0xE93860")]
		public static extern IntPtr ovr_Message_GetSdkAccountArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93900", Offset = "0xE93900", VA = "0xE93900")]
		public static extern IntPtr ovr_Message_GetShareMediaResult(IntPtr obj);

		[Address(RVA = "0xE939A0", Offset = "0xE939A0", VA = "0xE939A0")]
		public static string ovr_Message_GetString(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE93A08", Offset = "0xE93A08", VA = "0xE93A08")]
		private static extern IntPtr ovr_Message_GetString_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93AA8", Offset = "0xE93AA8", VA = "0xE93AA8")]
		public static extern IntPtr ovr_Message_GetSystemPermission(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93B48", Offset = "0xE93B48", VA = "0xE93B48")]
		public static extern IntPtr ovr_Message_GetSystemVoipState(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93BE8", Offset = "0xE93BE8", VA = "0xE93BE8")]
		public static extern Message.MessageType ovr_Message_GetType(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93C88", Offset = "0xE93C88", VA = "0xE93C88")]
		public static extern IntPtr ovr_Message_GetUser(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93D28", Offset = "0xE93D28", VA = "0xE93D28")]
		public static extern IntPtr ovr_Message_GetUserAndRoomArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93DC8", Offset = "0xE93DC8", VA = "0xE93DC8")]
		public static extern IntPtr ovr_Message_GetUserArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93E68", Offset = "0xE93E68", VA = "0xE93E68")]
		public static extern IntPtr ovr_Message_GetUserProof(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93F08", Offset = "0xE93F08", VA = "0xE93F08")]
		public static extern IntPtr ovr_Message_GetUserReportID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE93FA8", Offset = "0xE93FA8", VA = "0xE93FA8")]
		public static extern bool ovr_Message_IsError(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94050", Offset = "0xE94050", VA = "0xE94050")]
		public static extern UIntPtr ovr_Microphone_GetNumSamplesAvailable(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE940F0", Offset = "0xE940F0", VA = "0xE940F0")]
		public static extern UIntPtr ovr_Microphone_GetOutputBufferMaxSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94190", Offset = "0xE94190", VA = "0xE94190")]
		public static extern UIntPtr ovr_Microphone_GetPCM(IntPtr obj, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Address(RVA = "0xE94250", Offset = "0xE94250", VA = "0xE94250")]
		public static extern UIntPtr ovr_Microphone_GetPCMFloat(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Address(RVA = "0xE94310", Offset = "0xE94310", VA = "0xE94310")]
		public static extern UIntPtr ovr_Microphone_ReadData(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Address(RVA = "0xE943D0", Offset = "0xE943D0", VA = "0xE943D0")]
		public static extern void ovr_Microphone_SetAcceptableRecordingDelayHint(IntPtr obj, UIntPtr delayMs);

		[PreserveSig]
		[Address(RVA = "0xE94480", Offset = "0xE94480", VA = "0xE94480")]
		public static extern void ovr_Microphone_Start(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94520", Offset = "0xE94520", VA = "0xE94520")]
		public static extern void ovr_Microphone_Stop(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE945C0", Offset = "0xE945C0", VA = "0xE945C0")]
		public static extern ulong ovr_NetworkingPeer_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94660", Offset = "0xE94660", VA = "0xE94660")]
		public static extern PeerConnectionState ovr_NetworkingPeer_GetState(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94700", Offset = "0xE94700", VA = "0xE94700")]
		public static extern ulong ovr_OrgScopedID_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE947A0", Offset = "0xE947A0", VA = "0xE947A0")]
		public static extern void ovr_Packet_Free(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94840", Offset = "0xE94840", VA = "0xE94840")]
		public static extern IntPtr ovr_Packet_GetBytes(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE948E0", Offset = "0xE948E0", VA = "0xE948E0")]
		public static extern SendPolicy ovr_Packet_GetSendPolicy(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94980", Offset = "0xE94980", VA = "0xE94980")]
		public static extern ulong ovr_Packet_GetSenderID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94A20", Offset = "0xE94A20", VA = "0xE94A20")]
		public static extern UIntPtr ovr_Packet_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94AC0", Offset = "0xE94AC0", VA = "0xE94AC0")]
		public static extern ulong ovr_Party_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94B60", Offset = "0xE94B60", VA = "0xE94B60")]
		public static extern IntPtr ovr_Party_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94C00", Offset = "0xE94C00", VA = "0xE94C00")]
		public static extern IntPtr ovr_Party_GetLeader(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94CA0", Offset = "0xE94CA0", VA = "0xE94CA0")]
		public static extern IntPtr ovr_Party_GetRoom(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94D3C", Offset = "0xE94D3C", VA = "0xE94D3C")]
		public static extern IntPtr ovr_Party_GetUsers(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94DDC", Offset = "0xE94DDC", VA = "0xE94DDC")]
		public static extern ulong ovr_PartyID_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94E78", Offset = "0xE94E78", VA = "0xE94E78")]
		public static extern PartyUpdateAction ovr_PartyUpdateNotification_GetAction(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94F18", Offset = "0xE94F18", VA = "0xE94F18")]
		public static extern ulong ovr_PartyUpdateNotification_GetPartyId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE94FB8", Offset = "0xE94FB8", VA = "0xE94FB8")]
		public static extern ulong ovr_PartyUpdateNotification_GetSenderId(IntPtr obj);

		[Address(RVA = "0xE95058", Offset = "0xE95058", VA = "0xE95058")]
		public static string ovr_PartyUpdateNotification_GetUpdateTimestamp(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE950C0", Offset = "0xE950C0", VA = "0xE950C0")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUpdateTimestamp_Native(IntPtr obj);

		[Address(RVA = "0xE95160", Offset = "0xE95160", VA = "0xE95160")]
		public static string ovr_PartyUpdateNotification_GetUserAlias(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE951C8", Offset = "0xE951C8", VA = "0xE951C8")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUserAlias_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE95268", Offset = "0xE95268", VA = "0xE95268")]
		public static extern ulong ovr_PartyUpdateNotification_GetUserId(IntPtr obj);

		[Address(RVA = "0xE95308", Offset = "0xE95308", VA = "0xE95308")]
		public static string ovr_PartyUpdateNotification_GetUserName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE95370", Offset = "0xE95370", VA = "0xE95370")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUserName_Native(IntPtr obj);

		[Address(RVA = "0xE95410", Offset = "0xE95410", VA = "0xE95410")]
		public static string ovr_Pid_GetId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE95478", Offset = "0xE95478", VA = "0xE95478")]
		private static extern IntPtr ovr_Pid_GetId_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE95518", Offset = "0xE95518", VA = "0xE95518")]
		public static extern IntPtr ovr_PidArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE955C8", Offset = "0xE955C8", VA = "0xE955C8")]
		public static extern UIntPtr ovr_PidArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE95668", Offset = "0xE95668", VA = "0xE95668")]
		public static extern ulong ovr_PingResult_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE95708", Offset = "0xE95708", VA = "0xE95708")]
		public static extern ulong ovr_PingResult_GetPingTimeUsec(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE957A8", Offset = "0xE957A8", VA = "0xE957A8")]
		public static extern bool ovr_PingResult_IsTimeout(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE95850", Offset = "0xE95850", VA = "0xE95850")]
		public static extern PlatformInitializeResult ovr_PlatformInitialize_GetResult(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE958F0", Offset = "0xE958F0", VA = "0xE958F0")]
		public static extern uint ovr_Price_GetAmountInHundredths(IntPtr obj);

		[Address(RVA = "0xE95990", Offset = "0xE95990", VA = "0xE95990")]
		public static string ovr_Price_GetCurrency(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE959F8", Offset = "0xE959F8", VA = "0xE959F8")]
		private static extern IntPtr ovr_Price_GetCurrency_Native(IntPtr obj);

		[Address(RVA = "0xE95A98", Offset = "0xE95A98", VA = "0xE95A98")]
		public static string ovr_Price_GetFormatted(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE95B00", Offset = "0xE95B00", VA = "0xE95B00")]
		private static extern IntPtr ovr_Price_GetFormatted_Native(IntPtr obj);

		[Address(RVA = "0xE95BA0", Offset = "0xE95BA0", VA = "0xE95BA0")]
		public static string ovr_Product_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE95C08", Offset = "0xE95C08", VA = "0xE95C08")]
		private static extern IntPtr ovr_Product_GetDescription_Native(IntPtr obj);

		[Address(RVA = "0xE95CA8", Offset = "0xE95CA8", VA = "0xE95CA8")]
		public static string ovr_Product_GetFormattedPrice(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE95D10", Offset = "0xE95D10", VA = "0xE95D10")]
		private static extern IntPtr ovr_Product_GetFormattedPrice_Native(IntPtr obj);

		[Address(RVA = "0xE95DB0", Offset = "0xE95DB0", VA = "0xE95DB0")]
		public static string ovr_Product_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE95E18", Offset = "0xE95E18", VA = "0xE95E18")]
		private static extern IntPtr ovr_Product_GetName_Native(IntPtr obj);

		[Address(RVA = "0xE95EB8", Offset = "0xE95EB8", VA = "0xE95EB8")]
		public static string ovr_Product_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE95F20", Offset = "0xE95F20", VA = "0xE95F20")]
		private static extern IntPtr ovr_Product_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE95FC0", Offset = "0xE95FC0", VA = "0xE95FC0")]
		public static extern IntPtr ovr_ProductArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE96070", Offset = "0xE96070", VA = "0xE96070")]
		public static string ovr_ProductArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE960D8", Offset = "0xE960D8", VA = "0xE960D8")]
		private static extern IntPtr ovr_ProductArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96178", Offset = "0xE96178", VA = "0xE96178")]
		public static extern UIntPtr ovr_ProductArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96218", Offset = "0xE96218", VA = "0xE96218")]
		public static extern bool ovr_ProductArray_HasNextPage(IntPtr obj);

		[Address(RVA = "0xE962C0", Offset = "0xE962C0", VA = "0xE962C0")]
		public static DateTime ovr_Purchase_GetExpirationTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Address(RVA = "0xE96328", Offset = "0xE96328", VA = "0xE96328")]
		private static extern ulong ovr_Purchase_GetExpirationTime_Native(IntPtr obj);

		[Address(RVA = "0xE963C8", Offset = "0xE963C8", VA = "0xE963C8")]
		public static DateTime ovr_Purchase_GetGrantTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Address(RVA = "0xE96430", Offset = "0xE96430", VA = "0xE96430")]
		private static extern ulong ovr_Purchase_GetGrantTime_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE964D0", Offset = "0xE964D0", VA = "0xE964D0")]
		public static extern ulong ovr_Purchase_GetPurchaseID(IntPtr obj);

		[Address(RVA = "0xE96570", Offset = "0xE96570", VA = "0xE96570")]
		public static string ovr_Purchase_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE965D8", Offset = "0xE965D8", VA = "0xE965D8")]
		private static extern IntPtr ovr_Purchase_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96678", Offset = "0xE96678", VA = "0xE96678")]
		public static extern IntPtr ovr_PurchaseArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE96728", Offset = "0xE96728", VA = "0xE96728")]
		public static string ovr_PurchaseArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE96790", Offset = "0xE96790", VA = "0xE96790")]
		private static extern IntPtr ovr_PurchaseArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96830", Offset = "0xE96830", VA = "0xE96830")]
		public static extern UIntPtr ovr_PurchaseArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE968D0", Offset = "0xE968D0", VA = "0xE968D0")]
		public static extern bool ovr_PurchaseArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96978", Offset = "0xE96978", VA = "0xE96978")]
		public static extern ulong ovr_Room_GetApplicationID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96A18", Offset = "0xE96A18", VA = "0xE96A18")]
		public static extern IntPtr ovr_Room_GetDataStore(IntPtr obj);

		[Address(RVA = "0xE96AB8", Offset = "0xE96AB8", VA = "0xE96AB8")]
		public static string ovr_Room_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE96B20", Offset = "0xE96B20", VA = "0xE96B20")]
		private static extern IntPtr ovr_Room_GetDescription_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96BC0", Offset = "0xE96BC0", VA = "0xE96BC0")]
		public static extern ulong ovr_Room_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96C60", Offset = "0xE96C60", VA = "0xE96C60")]
		public static extern IntPtr ovr_Room_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96D00", Offset = "0xE96D00", VA = "0xE96D00")]
		public static extern bool ovr_Room_GetIsMembershipLocked(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96DA8", Offset = "0xE96DA8", VA = "0xE96DA8")]
		public static extern RoomJoinPolicy ovr_Room_GetJoinPolicy(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96E48", Offset = "0xE96E48", VA = "0xE96E48")]
		public static extern RoomJoinability ovr_Room_GetJoinability(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96EE8", Offset = "0xE96EE8", VA = "0xE96EE8")]
		public static extern IntPtr ovr_Room_GetMatchedUsers(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE96F88", Offset = "0xE96F88", VA = "0xE96F88")]
		public static extern uint ovr_Room_GetMaxUsers(IntPtr obj);

		[Address(RVA = "0xE97028", Offset = "0xE97028", VA = "0xE97028")]
		public static string ovr_Room_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE97090", Offset = "0xE97090", VA = "0xE97090")]
		private static extern IntPtr ovr_Room_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97130", Offset = "0xE97130", VA = "0xE97130")]
		public static extern IntPtr ovr_Room_GetOwner(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE971CC", Offset = "0xE971CC", VA = "0xE971CC")]
		public static extern RoomType ovr_Room_GetType(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE9726C", Offset = "0xE9726C", VA = "0xE9726C")]
		public static extern IntPtr ovr_Room_GetUsers(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97308", Offset = "0xE97308", VA = "0xE97308")]
		public static extern uint ovr_Room_GetVersion(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE973A8", Offset = "0xE973A8", VA = "0xE973A8")]
		public static extern IntPtr ovr_RoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE97458", Offset = "0xE97458", VA = "0xE97458")]
		public static string ovr_RoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE974C0", Offset = "0xE974C0", VA = "0xE974C0")]
		private static extern IntPtr ovr_RoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97560", Offset = "0xE97560", VA = "0xE97560")]
		public static extern UIntPtr ovr_RoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97600", Offset = "0xE97600", VA = "0xE97600")]
		public static extern bool ovr_RoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE976A8", Offset = "0xE976A8", VA = "0xE976A8")]
		public static extern ulong ovr_RoomInviteNotification_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97748", Offset = "0xE97748", VA = "0xE97748")]
		public static extern ulong ovr_RoomInviteNotification_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE977E8", Offset = "0xE977E8", VA = "0xE977E8")]
		public static extern ulong ovr_RoomInviteNotification_GetSenderID(IntPtr obj);

		[Address(RVA = "0xE97888", Offset = "0xE97888", VA = "0xE97888")]
		public static DateTime ovr_RoomInviteNotification_GetSentTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Address(RVA = "0xE978F0", Offset = "0xE978F0", VA = "0xE978F0")]
		private static extern ulong ovr_RoomInviteNotification_GetSentTime_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97990", Offset = "0xE97990", VA = "0xE97990")]
		public static extern IntPtr ovr_RoomInviteNotificationArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE97A40", Offset = "0xE97A40", VA = "0xE97A40")]
		public static string ovr_RoomInviteNotificationArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE97AA8", Offset = "0xE97AA8", VA = "0xE97AA8")]
		private static extern IntPtr ovr_RoomInviteNotificationArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97B48", Offset = "0xE97B48", VA = "0xE97B48")]
		public static extern UIntPtr ovr_RoomInviteNotificationArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97BE8", Offset = "0xE97BE8", VA = "0xE97BE8")]
		public static extern bool ovr_RoomInviteNotificationArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97C90", Offset = "0xE97C90", VA = "0xE97C90")]
		public static extern SdkAccountType ovr_SdkAccount_GetAccountType(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97D30", Offset = "0xE97D30", VA = "0xE97D30")]
		public static extern ulong ovr_SdkAccount_GetUserId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97DD0", Offset = "0xE97DD0", VA = "0xE97DD0")]
		public static extern IntPtr ovr_SdkAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE97E80", Offset = "0xE97E80", VA = "0xE97E80")]
		public static extern UIntPtr ovr_SdkAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97F20", Offset = "0xE97F20", VA = "0xE97F20")]
		public static extern ShareMediaStatus ovr_ShareMediaResult_GetStatus(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE97FC0", Offset = "0xE97FC0", VA = "0xE97FC0")]
		public static extern bool ovr_SystemPermission_GetHasPermission(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98068", Offset = "0xE98068", VA = "0xE98068")]
		public static extern PermissionGrantStatus ovr_SystemPermission_GetPermissionGrantStatus(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98108", Offset = "0xE98108", VA = "0xE98108")]
		public static extern VoipMuteState ovr_SystemVoipState_GetMicrophoneMuted(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE981A8", Offset = "0xE981A8", VA = "0xE981A8")]
		public static extern SystemVoipStatus ovr_SystemVoipState_GetStatus(IntPtr obj);

		[Address(RVA = "0xE98248", Offset = "0xE98248", VA = "0xE98248")]
		public static string ovr_TestUser_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE982B0", Offset = "0xE982B0", VA = "0xE982B0")]
		private static extern IntPtr ovr_TestUser_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98350", Offset = "0xE98350", VA = "0xE98350")]
		public static extern IntPtr ovr_TestUser_GetAppAccessArray(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE983F0", Offset = "0xE983F0", VA = "0xE983F0")]
		public static extern IntPtr ovr_TestUser_GetFbAppAccessArray(IntPtr obj);

		[Address(RVA = "0xE98490", Offset = "0xE98490", VA = "0xE98490")]
		public static string ovr_TestUser_GetFriendAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE984F8", Offset = "0xE984F8", VA = "0xE984F8")]
		private static extern IntPtr ovr_TestUser_GetFriendAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98598", Offset = "0xE98598", VA = "0xE98598")]
		public static extern IntPtr ovr_TestUser_GetFriendAppAccessArray(IntPtr obj);

		[Address(RVA = "0xE98638", Offset = "0xE98638", VA = "0xE98638")]
		public static string ovr_TestUser_GetUserAlias(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE986A0", Offset = "0xE986A0", VA = "0xE986A0")]
		private static extern IntPtr ovr_TestUser_GetUserAlias_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98740", Offset = "0xE98740", VA = "0xE98740")]
		public static extern ulong ovr_TestUser_GetUserFbid(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE987E0", Offset = "0xE987E0", VA = "0xE987E0")]
		public static extern ulong ovr_TestUser_GetUserId(IntPtr obj);

		[Address(RVA = "0xE98880", Offset = "0xE98880", VA = "0xE98880")]
		public static string ovr_TestUserAppAccess_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE988E8", Offset = "0xE988E8", VA = "0xE988E8")]
		private static extern IntPtr ovr_TestUserAppAccess_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98988", Offset = "0xE98988", VA = "0xE98988")]
		public static extern ulong ovr_TestUserAppAccess_GetAppId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98A28", Offset = "0xE98A28", VA = "0xE98A28")]
		public static extern ulong ovr_TestUserAppAccess_GetUserId(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98AC8", Offset = "0xE98AC8", VA = "0xE98AC8")]
		public static extern IntPtr ovr_TestUserAppAccessArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Address(RVA = "0xE98B78", Offset = "0xE98B78", VA = "0xE98B78")]
		public static extern UIntPtr ovr_TestUserAppAccessArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE98C18", Offset = "0xE98C18", VA = "0xE98C18")]
		public static extern ulong ovr_User_GetID(IntPtr obj);

		[Address(RVA = "0xE98CB8", Offset = "0xE98CB8", VA = "0xE98CB8")]
		public static string ovr_User_GetImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE98D20", Offset = "0xE98D20", VA = "0xE98D20")]
		private static extern IntPtr ovr_User_GetImageUrl_Native(IntPtr obj);

		[Address(RVA = "0xE98DC0", Offset = "0xE98DC0", VA = "0xE98DC0")]
		public static string ovr_User_GetInviteToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE98E28", Offset = "0xE98E28", VA = "0xE98E28")]
		private static extern IntPtr ovr_User_GetInviteToken_Native(IntPtr obj);

		[Address(RVA = "0xE98EC8", Offset = "0xE98EC8", VA = "0xE98EC8")]
		public static string ovr_User_GetOculusID(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE98F30", Offset = "0xE98F30", VA = "0xE98F30")]
		private static extern IntPtr ovr_User_GetOculusID_Native(IntPtr obj);

		[Address(RVA = "0xE98FD0", Offset = "0xE98FD0", VA = "0xE98FD0")]
		public static string ovr_User_GetPresence(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE99038", Offset = "0xE99038", VA = "0xE99038")]
		private static extern IntPtr ovr_User_GetPresence_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE990D8", Offset = "0xE990D8", VA = "0xE990D8")]
		public static extern UserPresenceStatus ovr_User_GetPresenceStatus(IntPtr obj);

		[Address(RVA = "0xE99178", Offset = "0xE99178", VA = "0xE99178")]
		public static string ovr_User_GetSmallImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE991E0", Offset = "0xE991E0", VA = "0xE991E0")]
		private static extern IntPtr ovr_User_GetSmallImageUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99280", Offset = "0xE99280", VA = "0xE99280")]
		public static extern IntPtr ovr_UserAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99320", Offset = "0xE99320", VA = "0xE99320")]
		public static extern IntPtr ovr_UserAndRoom_GetUser(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE993C0", Offset = "0xE993C0", VA = "0xE993C0")]
		public static extern IntPtr ovr_UserAndRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE99470", Offset = "0xE99470", VA = "0xE99470")]
		public static string ovr_UserAndRoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE994D8", Offset = "0xE994D8", VA = "0xE994D8")]
		private static extern IntPtr ovr_UserAndRoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99578", Offset = "0xE99578", VA = "0xE99578")]
		public static extern UIntPtr ovr_UserAndRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99618", Offset = "0xE99618", VA = "0xE99618")]
		public static extern bool ovr_UserAndRoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE996C0", Offset = "0xE996C0", VA = "0xE996C0")]
		public static extern IntPtr ovr_UserArray_GetElement(IntPtr obj, UIntPtr index);

		[Address(RVA = "0xE99770", Offset = "0xE99770", VA = "0xE99770")]
		public static string ovr_UserArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE997D8", Offset = "0xE997D8", VA = "0xE997D8")]
		private static extern IntPtr ovr_UserArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99878", Offset = "0xE99878", VA = "0xE99878")]
		public static extern UIntPtr ovr_UserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99918", Offset = "0xE99918", VA = "0xE99918")]
		public static extern bool ovr_UserArray_HasNextPage(IntPtr obj);

		[Address(RVA = "0xE999C0", Offset = "0xE999C0", VA = "0xE999C0")]
		public static string ovr_UserProof_GetNonce(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE99A28", Offset = "0xE99A28", VA = "0xE99A28")]
		private static extern IntPtr ovr_UserProof_GetNonce_Native(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99AC8", Offset = "0xE99AC8", VA = "0xE99AC8")]
		public static extern bool ovr_UserReportID_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99B70", Offset = "0xE99B70", VA = "0xE99B70")]
		public static extern ulong ovr_UserReportID_GetID(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE99C10", Offset = "0xE99C10", VA = "0xE99C10")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, UIntPtr compressedSize);

		[PreserveSig]
		[Address(RVA = "0xE99CD0", Offset = "0xE99CD0", VA = "0xE99CD0")]
		public static extern UIntPtr ovr_VoipDecoder_GetDecodedPCM(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Address(RVA = "0xE99D90", Offset = "0xE99D90", VA = "0xE99D90")]
		public static extern void ovr_VoipEncoder_AddPCM(IntPtr obj, float[] inputData, uint inputSize);

		[PreserveSig]
		[Address(RVA = "0xE99E50", Offset = "0xE99E50", VA = "0xE99E50")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedData(IntPtr obj, byte[] outputBuffer, UIntPtr intputSize);

		[PreserveSig]
		[Address(RVA = "0xE99F10", Offset = "0xE99F10", VA = "0xE99F10")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedDataSize(IntPtr obj);

		[PreserveSig]
		[Address(RVA = "0xE78E8C", Offset = "0xE78E8C", VA = "0xE78E8C")]
		public static extern IntPtr ovr_AbuseReportOptions_Create();

		[PreserveSig]
		[Address(RVA = "0xE7927C", Offset = "0xE7927C", VA = "0xE7927C")]
		public static extern void ovr_AbuseReportOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE78F94", Offset = "0xE78F94", VA = "0xE78F94")]
		public static extern void ovr_AbuseReportOptions_SetPreventPeopleChooser(IntPtr handle, bool value);

		[PreserveSig]
		[Address(RVA = "0xE790BC", Offset = "0xE790BC", VA = "0xE790BC")]
		public static extern void ovr_AbuseReportOptions_SetReportType(IntPtr handle, AbuseReportType value);

		[PreserveSig]
		[Address(RVA = "0xE7BAAC", Offset = "0xE7BAAC", VA = "0xE7BAAC")]
		public static extern IntPtr ovr_ApplicationOptions_Create();

		[PreserveSig]
		[Address(RVA = "0xE7BD20", Offset = "0xE7BD20", VA = "0xE7BD20")]
		public static extern void ovr_ApplicationOptions_Destroy(IntPtr handle);

		[Address(RVA = "0xE7BBB4", Offset = "0xE7BBB4", VA = "0xE7BBB4")]
		public static void ovr_ApplicationOptions_SetDeeplinkMessage(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE99FB0", Offset = "0xE99FB0", VA = "0xE99FB0")]
		private static extern void ovr_ApplicationOptions_SetDeeplinkMessage_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Address(RVA = "0xE9A060", Offset = "0xE9A060", VA = "0xE9A060")]
		public static extern IntPtr ovr_MatchmakingOptions_Create();

		[PreserveSig]
		[Address(RVA = "0xE9A0F0", Offset = "0xE9A0F0", VA = "0xE9A0F0")]
		public static extern void ovr_MatchmakingOptions_Destroy(IntPtr handle);

		[Address(RVA = "0xE9A190", Offset = "0xE9A190", VA = "0xE9A190")]
		public static void ovr_MatchmakingOptions_SetCreateRoomDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE9A25C", Offset = "0xE9A25C", VA = "0xE9A25C")]
		private static extern void ovr_MatchmakingOptions_SetCreateRoomDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Address(RVA = "0xE9A314", Offset = "0xE9A314", VA = "0xE9A314")]
		public static extern void ovr_MatchmakingOptions_ClearCreateRoomDataStore(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE9A3B4", Offset = "0xE9A3B4", VA = "0xE9A3B4")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomJoinPolicy(IntPtr handle, RoomJoinPolicy value);

		[PreserveSig]
		[Address(RVA = "0xE9A464", Offset = "0xE9A464", VA = "0xE9A464")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Address(RVA = "0xE9A514", Offset = "0xE9A514", VA = "0xE9A514")]
		public static extern void ovr_MatchmakingOptions_AddEnqueueAdditionalUser(IntPtr handle, ulong value);

		[PreserveSig]
		[Address(RVA = "0xE9A5C4", Offset = "0xE9A5C4", VA = "0xE9A5C4")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueAdditionalUsers(IntPtr handle);

		[Address(RVA = "0xE9A664", Offset = "0xE9A664", VA = "0xE9A664")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt(IntPtr handle, string key, int value)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE9A718", Offset = "0xE9A718", VA = "0xE9A718")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt_Native(IntPtr handle, IntPtr key, int value);

		[Address(RVA = "0xE9A7D0", Offset = "0xE9A7D0", VA = "0xE9A7D0")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble(IntPtr handle, string key, double value)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE9A88C", Offset = "0xE9A88C", VA = "0xE9A88C")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble_Native(IntPtr handle, IntPtr key, double value);

		[Address(RVA = "0xE9A94C", Offset = "0xE9A94C", VA = "0xE9A94C")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE9AA18", Offset = "0xE9AA18", VA = "0xE9AA18")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Address(RVA = "0xE9AAD0", Offset = "0xE9AAD0", VA = "0xE9AAD0")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueDataSettings(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE9AB70", Offset = "0xE9AB70", VA = "0xE9AB70")]
		public static extern void ovr_MatchmakingOptions_SetEnqueueIsDebug(IntPtr handle, bool value);

		[Address(RVA = "0xE9AC20", Offset = "0xE9AC20", VA = "0xE9AC20")]
		public static void ovr_MatchmakingOptions_SetEnqueueQueryKey(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE9ACCC", Offset = "0xE9ACCC", VA = "0xE9ACCC")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueQueryKey_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Address(RVA = "0xE9AD7C", Offset = "0xE9AD7C", VA = "0xE9AD7C")]
		public static extern IntPtr ovr_RoomOptions_Create();

		[PreserveSig]
		[Address(RVA = "0xE9AE0C", Offset = "0xE9AE0C", VA = "0xE9AE0C")]
		public static extern void ovr_RoomOptions_Destroy(IntPtr handle);

		[Address(RVA = "0xE9AEAC", Offset = "0xE9AEAC", VA = "0xE9AEAC")]
		public static void ovr_RoomOptions_SetDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE9AF78", Offset = "0xE9AF78", VA = "0xE9AF78")]
		private static extern void ovr_RoomOptions_SetDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Address(RVA = "0xE9B030", Offset = "0xE9B030", VA = "0xE9B030")]
		public static extern void ovr_RoomOptions_ClearDataStore(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE9B0D0", Offset = "0xE9B0D0", VA = "0xE9B0D0")]
		public static extern void ovr_RoomOptions_SetExcludeRecentlyMet(IntPtr handle, bool value);

		[PreserveSig]
		[Address(RVA = "0xE9B180", Offset = "0xE9B180", VA = "0xE9B180")]
		public static extern void ovr_RoomOptions_SetMaxUserResults(IntPtr handle, uint value);

		[PreserveSig]
		[Address(RVA = "0xE9B230", Offset = "0xE9B230", VA = "0xE9B230")]
		public static extern void ovr_RoomOptions_SetOrdering(IntPtr handle, UserOrdering value);

		[PreserveSig]
		[Address(RVA = "0xE9B2E0", Offset = "0xE9B2E0", VA = "0xE9B2E0")]
		public static extern void ovr_RoomOptions_SetRecentlyMetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Address(RVA = "0xE9B390", Offset = "0xE9B390", VA = "0xE9B390")]
		public static extern void ovr_RoomOptions_SetRoomId(IntPtr handle, ulong value);

		[PreserveSig]
		[Address(RVA = "0xE9B440", Offset = "0xE9B440", VA = "0xE9B440")]
		public static extern void ovr_RoomOptions_SetTurnOffUpdates(IntPtr handle, bool value);

		[PreserveSig]
		[Address(RVA = "0xE9B4F0", Offset = "0xE9B4F0", VA = "0xE9B4F0")]
		public static extern IntPtr ovr_UserOptions_Create();

		[PreserveSig]
		[Address(RVA = "0xE9B580", Offset = "0xE9B580", VA = "0xE9B580")]
		public static extern void ovr_UserOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE9B620", Offset = "0xE9B620", VA = "0xE9B620")]
		public static extern void ovr_UserOptions_SetMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Address(RVA = "0xE9B6D0", Offset = "0xE9B6D0", VA = "0xE9B6D0")]
		public static extern void ovr_UserOptions_AddServiceProvider(IntPtr handle, ServiceProvider value);

		[PreserveSig]
		[Address(RVA = "0xE9B780", Offset = "0xE9B780", VA = "0xE9B780")]
		public static extern void ovr_UserOptions_ClearServiceProviders(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE9B820", Offset = "0xE9B820", VA = "0xE9B820")]
		public static extern void ovr_UserOptions_SetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Address(RVA = "0xE9B8D0", Offset = "0xE9B8D0", VA = "0xE9B8D0")]
		public static extern IntPtr ovr_VoipOptions_Create();

		[PreserveSig]
		[Address(RVA = "0xE9B960", Offset = "0xE9B960", VA = "0xE9B960")]
		public static extern void ovr_VoipOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Address(RVA = "0xE9BA00", Offset = "0xE9BA00", VA = "0xE9BA00")]
		public static extern void ovr_VoipOptions_SetBitrateForNewConnections(IntPtr handle, VoipBitrate value);

		[PreserveSig]
		[Address(RVA = "0xE9BAB0", Offset = "0xE9BAB0", VA = "0xE9BAB0")]
		public static extern void ovr_VoipOptions_SetCreateNewConnectionUseDtx(IntPtr handle, VoipDtxState value);

		[Address(RVA = "0xE9BB60", Offset = "0xE9BB60", VA = "0xE9BB60")]
		public CAPI()
		{
		}
	}
	public enum CloudStorageDataStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FCE4", Offset = "0x66FCE4")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FD1C", Offset = "0x66FD1C")]
		InSync,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FD54", Offset = "0x66FD54")]
		NeedsDownload,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FD8C", Offset = "0x66FD8C")]
		RemoteDownloading,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FDC4", Offset = "0x66FDC4")]
		NeedsUpload,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FDFC", Offset = "0x66FDFC")]
		LocalUploading,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FE34", Offset = "0x66FE34")]
		InConflict
	}
	public enum CloudStorageUpdateStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FE6C", Offset = "0x66FE6C")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FEA4", Offset = "0x66FEA4")]
		Ok,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FEDC", Offset = "0x66FEDC")]
		BetterVersionStored,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FF14", Offset = "0x66FF14")]
		ManualMergeRequired
	}
	public interface IMicrophone
	{
		void Start();

		void Stop();

		float[] Update();
	}
	public interface IVoipPCMSource
	{
		int GetPCM(float[] dest, int length);

		void SetSenderID(ulong senderID);

		void Update();

		int PeekSizeElements();
	}
	public enum KeyValuePairType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FF4C", Offset = "0x66FF4C")]
		String,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FF84", Offset = "0x66FF84")]
		Int,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FFBC", Offset = "0x66FFBC")]
		Double,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x66FFF4", Offset = "0x66FFF4")]
		Unknown
	}
	public enum LaunchType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67002C", Offset = "0x67002C")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670064", Offset = "0x670064")]
		Normal,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67009C", Offset = "0x67009C")]
		Invite,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6700D4", Offset = "0x6700D4")]
		Coordinated,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67010C", Offset = "0x67010C")]
		Deeplink
	}
	public enum LeaderboardFilterType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670144", Offset = "0x670144")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67017C", Offset = "0x67017C")]
		Friends,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6701B4", Offset = "0x6701B4")]
		Unknown
	}
	public enum LeaderboardStartAt
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6701EC", Offset = "0x6701EC")]
		Top,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670224", Offset = "0x670224")]
		CenteredOnViewer,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67025C", Offset = "0x67025C")]
		CenteredOnViewerOrTop,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670294", Offset = "0x670294")]
		Unknown
	}
	public enum LivestreamingAudience
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6702CC", Offset = "0x6702CC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670304", Offset = "0x670304")]
		Public,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67033C", Offset = "0x67033C")]
		Friends,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670374", Offset = "0x670374")]
		OnlyMe
	}
	public enum LivestreamingMicrophoneStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6703AC", Offset = "0x6703AC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6703E4", Offset = "0x6703E4")]
		MicrophoneOn,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67041C", Offset = "0x67041C")]
		MicrophoneOff
	}
	public enum LivestreamingStartStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670454", Offset = "0x670454")]
		Success = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67048C", Offset = "0x67048C")]
		Unknown = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6704C4", Offset = "0x6704C4")]
		NoPackageSet = -1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6704FC", Offset = "0x6704FC")]
		NoFbConnect = -2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670534", Offset = "0x670534")]
		NoSessionId = -3,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67056C", Offset = "0x67056C")]
		MissingParameters = -4
	}
	public enum MatchmakingCriterionImportance
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6705A4", Offset = "0x6705A4")]
		Required,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6705DC", Offset = "0x6705DC")]
		High,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670614", Offset = "0x670614")]
		Medium,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67064C", Offset = "0x67064C")]
		Low,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670684", Offset = "0x670684")]
		Unknown
	}
	public class MatchmakingOptions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Address(RVA = "0x9665A4", Offset = "0x9665A4", VA = "0x9665A4")]
		public MatchmakingOptions()
		{
		}

		[Address(RVA = "0x96661C", Offset = "0x96661C", VA = "0x96661C")]
		public void SetCreateRoomDataStore(string key, string value)
		{
		}

		[Address(RVA = "0x9666A0", Offset = "0x9666A0", VA = "0x9666A0")]
		public void ClearCreateRoomDataStore()
		{
		}

		[Address(RVA = "0x96670C", Offset = "0x96670C", VA = "0x96670C")]
		public void SetCreateRoomJoinPolicy(RoomJoinPolicy value)
		{
		}

		[Address(RVA = "0x966788", Offset = "0x966788", VA = "0x966788")]
		public void SetCreateRoomMaxUsers(uint value)
		{
		}

		[Address(RVA = "0x966804", Offset = "0x966804", VA = "0x966804")]
		public void AddEnqueueAdditionalUser(ulong userID)
		{
		}

		[Address(RVA = "0x966880", Offset = "0x966880", VA = "0x966880")]
		public void ClearEnqueueAdditionalUsers()
		{
		}

		[Address(RVA = "0x9668EC", Offset = "0x9668EC", VA = "0x9668EC")]
		public void SetEnqueueDataSettings(string key, int value)
		{
		}

		[Address(RVA = "0x966970", Offset = "0x966970", VA = "0x966970")]
		public void SetEnqueueDataSettings(string key, double value)
		{
		}

		[Address(RVA = "0x9669FC", Offset = "0x9669FC", VA = "0x9669FC")]
		public void SetEnqueueDataSettings(string key, string value)
		{
		}

		[Address(RVA = "0x966A80", Offset = "0x966A80", VA = "0x966A80")]
		public void ClearEnqueueDataSettings()
		{
		}

		[Address(RVA = "0x966AEC", Offset = "0x966AEC", VA = "0x966AEC")]
		public void SetEnqueueIsDebug(bool value)
		{
		}

		[Address(RVA = "0x966B68", Offset = "0x966B68", VA = "0x966B68")]
		public void SetEnqueueQueryKey(string value)
		{
		}

		[Address(RVA = "0x965870", Offset = "0x965870", VA = "0x965870")]
		public static explicit operator IntPtr(MatchmakingOptions options)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0x966BE4", Offset = "0x966BE4", VA = "0x966BE4", Slot = "1")]
		~MatchmakingOptions()
		{
		}
	}
	public enum MatchmakingStatApproach
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6706BC", Offset = "0x6706BC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6706F4", Offset = "0x6706F4")]
		Trailing,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67072C", Offset = "0x67072C")]
		Swingy
	}
	public enum MediaContentType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670764", Offset = "0x670764")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67079C", Offset = "0x67079C")]
		Photo
	}
	public abstract class Message<T> : Message
	{
		public new delegate void Callback(Message<T> message);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T data;

		public T Data => (T)null;

		public Message(IntPtr c_message)
		{
		}

		protected abstract T GetDataFromMessage(IntPtr c_message);
	}
	public class Message
	{
		public delegate void Callback(Message message);

		public enum MessageType : uint
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Unknown = 0u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_AddCount = 65495601u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_AddFields = 346693929u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_GetAllDefinitions = 64177549u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_GetAllProgress = 1335877149u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_GetDefinitionsByName = 1653670332u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_GetNextAchievementDefinitionArrayPage = 712888917u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_GetNextAchievementProgressArrayPage = 792913703u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_GetProgressByName = 354837425u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Achievements_Unlock = 1497156573u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ApplicationLifecycle_GetRegisteredPIDs = 82169698u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ApplicationLifecycle_GetSessionKey = 984570141u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ApplicationLifecycle_RegisterSessionKey = 1303818232u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Application_GetVersion = 1751583246u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Application_LaunchOtherApp = 1424151032u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_Delete = 1834842246u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_DeleteById = 1525206354u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_DeleteByName = 1108001231u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_Download = 289710021u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_DownloadById = 755009938u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_DownloadByName = 1664536314u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_DownloadCancel = 134927303u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_DownloadCancelById = 1365611796u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_DownloadCancelByName = 1147858170u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_GetList = 1258057588u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_Status = 47394656u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_StatusById = 1570069816u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			AssetFile_StatusByName = 1104140880u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_Delete = 685393261u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_GetNextCloudStorageMetadataArrayPage = 1544004335u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_Load = 1082420033u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_LoadBucketMetadata = 1931977997u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_LoadConflictMetadata = 1146770162u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_LoadHandle = 845863478u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_LoadMetadata = 65446546u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_ResolveKeepLocal = 811109637u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_ResolveKeepRemote = 1965400838u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage_Save = 1270570030u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Entitlement_GetIsViewerEntitled = 409688241u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			IAP_ConsumePurchase = 532378329u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			IAP_GetNextProductArrayPage = 467225263u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			IAP_GetNextPurchaseArrayPage = 1196886677u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			IAP_GetProductsBySKU = 2124073717u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			IAP_GetViewerPurchases = 974095385u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			IAP_LaunchCheckoutFlow = 1067126029u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LanguagePack_GetCurrent = 529592533u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LanguagePack_SetCurrent = 1531952096u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Leaderboard_GetEntries = 1572030284u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Leaderboard_GetEntriesAfterRank = 406293487u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Leaderboard_GetNextEntries = 1310751961u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Leaderboard_GetPreviousEntries = 1224858304u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Leaderboard_WriteEntry = 293587198u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_GetStatus = 1218079125u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_PauseStream = 916223619u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_ResumeStream = 575827343u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_Browse = 509948616u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_Browse2 = 1715641947u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_Cancel = 543705519u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_Cancel2 = 285117908u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_CreateAndEnqueueRoom = 1615617480u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_CreateAndEnqueueRoom2 = 693889755u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_CreateRoom = 54203178u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_CreateRoom2 = 1231922052u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_Enqueue = 1086418033u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_Enqueue2 = 303174325u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_EnqueueRoom = 1888108644u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_EnqueueRoom2 = 1428741028u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_GetAdminSnapshot = 1008820116u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_GetStats = 1123849272u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_JoinRoom = 1295177725u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_ReportResultInsecure = 439800205u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Matchmaking_StartMatch = 1154746693u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Media_ShareToFacebook = 14912239u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_GetNextRoomInviteNotificationArrayPage = 102890359u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_GetRoomInvites = 1871801234u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_MarkAsRead = 1903319523u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_GetCurrent = 1200830304u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_CreateAndJoinPrivate = 1977017207u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_CreateAndJoinPrivate2 = 1513775683u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_Get = 1704628152u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetCurrent = 161916164u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetCurrentForUser = 234887141u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetInvitableUsers = 506615698u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetInvitableUsers2 = 1330899120u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetModeratedRooms = 159645047u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetNextRoomArrayPage = 1317239238u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_InviteUser = 1093266451u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_Join = 382373641u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_Join2 = 1303059522u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_KickUser = 1233344310u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_LaunchInvitableUserFlow = 843047539u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_Leave = 1916281973u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_SetDescription = 809796911u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_UpdateDataStore = 40779816u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_UpdateMembershipLockStatus = 923514796u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_UpdateOwner = 850803997u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_UpdatePrivateRoomJoinPolicy = 289473179u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_Get = 1808768583u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetAccessToken = 111696574u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetLoggedInUser = 1131361373u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetLoggedInUserFriends = 1484532365u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetLoggedInUserFriendsAndRooms = 1585908615u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetLoggedInUserRecentlyMetUsersAndRooms = 694139440u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetNextUserAndRoomArrayPage = 2143146719u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetNextUserArrayPage = 645723971u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetOrgScopedID = 418426907u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetSdkAccounts = 1733454467u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetUserProof = 578880643u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_LaunchFriendRequestFlow = 151303576u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_LaunchProfile = 171537047u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Voip_SetSystemVoipSuppressed = 1161808298u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_ApplicationLifecycle_LaunchIntentChanged = 78859427u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_AssetFile_DownloadUpdate = 803015885u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Cal_FinalizeApplication = 1963741337u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Cal_ProposeApplication = 779375093u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_HTTP_Transfer = 2111073839u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Livestreaming_StatusChange = 575101294u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Matchmaking_MatchFound = 197393623u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Networking_ConnectionStateChange = 1577243802u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Networking_PeerConnectRequest = 1295114959u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Networking_PingResult = 1360343058u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Party_PartyUpdate = 487688882u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Room_InviteAccepted = 1829794225u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Room_InviteReceived = 1783209300u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Room_RoomUpdate = 1626094639u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Voip_ConnectRequest = 908343318u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Voip_StateChange = 888120928u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Notification_Voip_SystemVoipState = 1490179237u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Platform_InitializeWithAccessToken = 896085803u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Platform_InitializeStandaloneOculus = 1375260172u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Platform_InitializeAndroidAsynchronous = 450037684u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Platform_InitializeWindowsAsynchronous = 1839708815u
		}

		internal delegate Message ExtraMessageTypesHandler(IntPtr messageHandle, MessageType message_type);

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MessageType type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong requestID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Error error;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6707D4", Offset = "0x6707D4")]
		private static ExtraMessageTypesHandler <HandleExtraMessageTypes>k__BackingField;

		public MessageType Type
		{
			[Address(RVA = "0x960110", Offset = "0x960110", VA = "0x960110")]
			get
			{
				return default(MessageType);
			}
		}

		public bool IsError
		{
			[Address(RVA = "0x967010", Offset = "0x967010", VA = "0x967010")]
			get
			{
				return default(bool);
			}
		}

		public ulong RequestID
		{
			[Address(RVA = "0x960108", Offset = "0x960108", VA = "0x960108")]
			get
			{
				return default(ulong);
			}
		}

		internal static ExtraMessageTypesHandler HandleExtraMessageTypes
		{
			[Address(RVA = "0x96B0F8", Offset = "0x96B0F8", VA = "0x96B0F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6812F4", Offset = "0x6812F4")]
			private get
			{
				return null;
			}
			[Address(RVA = "0x96B0A4", Offset = "0x96B0A4", VA = "0x96B0A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6812E4", Offset = "0x6812E4")]
			set
			{
			}
		}

		[Address(RVA = "0x966D90", Offset = "0x966D90", VA = "0x966D90")]
		public Message(IntPtr c_message)
		{
		}

		[Address(RVA = "0x967008", Offset = "0x967008", VA = "0x967008", Slot = "1")]
		~Message()
		{
		}

		[Address(RVA = "0x967020", Offset = "0x967020", VA = "0x967020", Slot = "4")]
		public virtual Error GetError()
		{
			return null;
		}

		[Address(RVA = "0x967028", Offset = "0x967028", VA = "0x967028", Slot = "5")]
		public virtual PingResult GetPingResult()
		{
			return null;
		}

		[Address(RVA = "0x967030", Offset = "0x967030", VA = "0x967030", Slot = "6")]
		public virtual NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Address(RVA = "0x967038", Offset = "0x967038", VA = "0x967038", Slot = "7")]
		public virtual HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Address(RVA = "0x967040", Offset = "0x967040", VA = "0x967040", Slot = "8")]
		public virtual PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Address(RVA = "0x967048", Offset = "0x967048", VA = "0x967048", Slot = "9")]
		public virtual AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Address(RVA = "0x967050", Offset = "0x967050", VA = "0x967050", Slot = "10")]
		public virtual AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Address(RVA = "0x967058", Offset = "0x967058", VA = "0x967058", Slot = "11")]
		public virtual AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Address(RVA = "0x967060", Offset = "0x967060", VA = "0x967060", Slot = "12")]
		public virtual AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Address(RVA = "0x967068", Offset = "0x967068", VA = "0x967068", Slot = "13")]
		public virtual ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Address(RVA = "0x967070", Offset = "0x967070", VA = "0x967070", Slot = "14")]
		public virtual AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Address(RVA = "0x967078", Offset = "0x967078", VA = "0x967078", Slot = "15")]
		public virtual AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Address(RVA = "0x967080", Offset = "0x967080", VA = "0x967080", Slot = "16")]
		public virtual AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Address(RVA = "0x967088", Offset = "0x967088", VA = "0x967088", Slot = "17")]
		public virtual AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Address(RVA = "0x967090", Offset = "0x967090", VA = "0x967090", Slot = "18")]
		public virtual AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Address(RVA = "0x967098", Offset = "0x967098", VA = "0x967098", Slot = "19")]
		public virtual AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Address(RVA = "0x9670A0", Offset = "0x9670A0", VA = "0x9670A0", Slot = "20")]
		public virtual CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Address(RVA = "0x9670A8", Offset = "0x9670A8", VA = "0x9670A8", Slot = "21")]
		public virtual CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Address(RVA = "0x9670B0", Offset = "0x9670B0", VA = "0x9670B0", Slot = "22")]
		public virtual CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Address(RVA = "0x9670B8", Offset = "0x9670B8", VA = "0x9670B8", Slot = "23")]
		public virtual CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Address(RVA = "0x9670C0", Offset = "0x9670C0", VA = "0x9670C0", Slot = "24")]
		public virtual CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Address(RVA = "0x9670C8", Offset = "0x9670C8", VA = "0x9670C8", Slot = "25")]
		public virtual CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Address(RVA = "0x9670D0", Offset = "0x9670D0", VA = "0x9670D0", Slot = "26")]
		public virtual CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Address(RVA = "0x9670D8", Offset = "0x9670D8", VA = "0x9670D8", Slot = "27")]
		public virtual CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Address(RVA = "0x9670E0", Offset = "0x9670E0", VA = "0x9670E0", Slot = "28")]
		public virtual InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Address(RVA = "0x9670E8", Offset = "0x9670E8", VA = "0x9670E8", Slot = "29")]
		public virtual LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x9670F0", Offset = "0x9670F0", VA = "0x9670F0", Slot = "30")]
		public virtual LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x9670F8", Offset = "0x9670F8", VA = "0x9670F8", Slot = "31")]
		public virtual LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x967100", Offset = "0x967100", VA = "0x967100", Slot = "32")]
		public virtual LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x967108", Offset = "0x967108", VA = "0x967108", Slot = "33")]
		public virtual bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Address(RVA = "0x967110", Offset = "0x967110", VA = "0x967110", Slot = "34")]
		public virtual LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Address(RVA = "0x967118", Offset = "0x967118", VA = "0x967118", Slot = "35")]
		public virtual LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Address(RVA = "0x967120", Offset = "0x967120", VA = "0x967120", Slot = "36")]
		public virtual LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Address(RVA = "0x967128", Offset = "0x967128", VA = "0x967128", Slot = "37")]
		public virtual LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Address(RVA = "0x967130", Offset = "0x967130", VA = "0x967130", Slot = "38")]
		public virtual LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Address(RVA = "0x967138", Offset = "0x967138", VA = "0x967138", Slot = "39")]
		public virtual LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Address(RVA = "0x967140", Offset = "0x967140", VA = "0x967140", Slot = "40")]
		public virtual MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Address(RVA = "0x967148", Offset = "0x967148", VA = "0x967148", Slot = "41")]
		public virtual MatchmakingBrowseResult GetMatchmakingBrowseResult()
		{
			return null;
		}

		[Address(RVA = "0x967150", Offset = "0x967150", VA = "0x967150", Slot = "42")]
		public virtual MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Address(RVA = "0x967158", Offset = "0x967158", VA = "0x967158", Slot = "43")]
		public virtual MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Address(RVA = "0x967160", Offset = "0x967160", VA = "0x967160", Slot = "44")]
		public virtual MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Address(RVA = "0x967168", Offset = "0x967168", VA = "0x967168", Slot = "45")]
		public virtual OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Address(RVA = "0x967170", Offset = "0x967170", VA = "0x967170", Slot = "46")]
		public virtual Party GetParty()
		{
			return null;
		}

		[Address(RVA = "0x967178", Offset = "0x967178", VA = "0x967178", Slot = "47")]
		public virtual PartyID GetPartyID()
		{
			return null;
		}

		[Address(RVA = "0x967180", Offset = "0x967180", VA = "0x967180", Slot = "48")]
		public virtual PartyUpdateNotification GetPartyUpdateNotification()
		{
			return null;
		}

		[Address(RVA = "0x967188", Offset = "0x967188", VA = "0x967188", Slot = "49")]
		public virtual PidList GetPidList()
		{
			return null;
		}

		[Address(RVA = "0x967190", Offset = "0x967190", VA = "0x967190", Slot = "50")]
		public virtual ProductList GetProductList()
		{
			return null;
		}

		[Address(RVA = "0x967198", Offset = "0x967198", VA = "0x967198", Slot = "51")]
		public virtual Purchase GetPurchase()
		{
			return null;
		}

		[Address(RVA = "0x9671A0", Offset = "0x9671A0", VA = "0x9671A0", Slot = "52")]
		public virtual PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Address(RVA = "0x9671A8", Offset = "0x9671A8", VA = "0x9671A8", Slot = "53")]
		public virtual Room GetRoom()
		{
			return null;
		}

		[Address(RVA = "0x9671B0", Offset = "0x9671B0", VA = "0x9671B0", Slot = "54")]
		public virtual RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Address(RVA = "0x9671B8", Offset = "0x9671B8", VA = "0x9671B8", Slot = "55")]
		public virtual RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Address(RVA = "0x9671C0", Offset = "0x9671C0", VA = "0x9671C0", Slot = "56")]
		public virtual RoomList GetRoomList()
		{
			return null;
		}

		[Address(RVA = "0x9671C8", Offset = "0x9671C8", VA = "0x9671C8", Slot = "57")]
		public virtual SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Address(RVA = "0x9671D0", Offset = "0x9671D0", VA = "0x9671D0", Slot = "58")]
		public virtual ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Address(RVA = "0x9671D8", Offset = "0x9671D8", VA = "0x9671D8", Slot = "59")]
		public virtual string GetString()
		{
			return null;
		}

		[Address(RVA = "0x9671E0", Offset = "0x9671E0", VA = "0x9671E0", Slot = "60")]
		public virtual SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Address(RVA = "0x9671E8", Offset = "0x9671E8", VA = "0x9671E8", Slot = "61")]
		public virtual SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Address(RVA = "0x9671F0", Offset = "0x9671F0", VA = "0x9671F0", Slot = "62")]
		public virtual Oculus.Platform.Models.User GetUser()
		{
			return null;
		}

		[Address(RVA = "0x9671F8", Offset = "0x9671F8", VA = "0x9671F8", Slot = "63")]
		public virtual UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Address(RVA = "0x967200", Offset = "0x967200", VA = "0x967200", Slot = "64")]
		public virtual UserList GetUserList()
		{
			return null;
		}

		[Address(RVA = "0x967208", Offset = "0x967208", VA = "0x967208", Slot = "65")]
		public virtual UserProof GetUserProof()
		{
			return null;
		}

		[Address(RVA = "0x967210", Offset = "0x967210", VA = "0x967210", Slot = "66")]
		public virtual UserReportID GetUserReportID()
		{
			return null;
		}

		[Address(RVA = "0x967218", Offset = "0x967218", VA = "0x967218")]
		internal static Message ParseMessageHandle(IntPtr messageHandle)
		{
			return null;
		}

		[Address(RVA = "0x95FC2C", Offset = "0x95FC2C", VA = "0x95FC2C")]
		public static Message PopMessage()
		{
			return null;
		}
	}
	public class MessageWithAbuseReportRecording : Message<AbuseReportRecording>
	{
		[Address(RVA = "0x96B6D8", Offset = "0x96B6D8", VA = "0x96B6D8")]
		public MessageWithAbuseReportRecording(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96B738", Offset = "0x96B738", VA = "0x96B738", Slot = "9")]
		public override AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Address(RVA = "0x96B788", Offset = "0x96B788", VA = "0x96B788", Slot = "67")]
		protected override AbuseReportRecording GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAchievementDefinitions : Message<AchievementDefinitionList>
	{
		[Address(RVA = "0x968674", Offset = "0x968674", VA = "0x968674")]
		public MessageWithAchievementDefinitions(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96B8AC", Offset = "0x96B8AC", VA = "0x96B8AC", Slot = "10")]
		public override AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Address(RVA = "0x96B8FC", Offset = "0x96B8FC", VA = "0x96B8FC", Slot = "67")]
		protected override AchievementDefinitionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAchievementProgressList : Message<AchievementProgressList>
	{
		[Address(RVA = "0x9686D4", Offset = "0x9686D4", VA = "0x9686D4")]
		public MessageWithAchievementProgressList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96BBA0", Offset = "0x96BBA0", VA = "0x96BBA0", Slot = "11")]
		public override AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Address(RVA = "0x96BBF0", Offset = "0x96BBF0", VA = "0x96BBF0", Slot = "67")]
		protected override AchievementProgressList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAchievementUpdate : Message<AchievementUpdate>
	{
		[Address(RVA = "0x968734", Offset = "0x968734", VA = "0x968734")]
		public MessageWithAchievementUpdate(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96BE94", Offset = "0x96BE94", VA = "0x96BE94", Slot = "12")]
		public override AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Address(RVA = "0x96BEE4", Offset = "0x96BEE4", VA = "0x96BEE4", Slot = "67")]
		protected override AchievementUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithApplicationVersion : Message<ApplicationVersion>
	{
		[Address(RVA = "0x968794", Offset = "0x968794", VA = "0x968794")]
		public MessageWithApplicationVersion(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96C01C", Offset = "0x96C01C", VA = "0x96C01C", Slot = "13")]
		public override ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Address(RVA = "0x96C06C", Offset = "0x96C06C", VA = "0x96C06C", Slot = "67")]
		protected override ApplicationVersion GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAssetDetails : Message<AssetDetails>
	{
		[Address(RVA = "0x9687F4", Offset = "0x9687F4", VA = "0x9687F4")]
		public MessageWithAssetDetails(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96C1C0", Offset = "0x96C1C0", VA = "0x96C1C0", Slot = "14")]
		public override AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Address(RVA = "0x96C210", Offset = "0x96C210", VA = "0x96C210", Slot = "67")]
		protected override AssetDetails GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAssetDetailsList : Message<AssetDetailsList>
	{
		[Address(RVA = "0x968854", Offset = "0x968854", VA = "0x968854")]
		public MessageWithAssetDetailsList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96C3C8", Offset = "0x96C3C8", VA = "0x96C3C8", Slot = "15")]
		public override AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Address(RVA = "0x96C418", Offset = "0x96C418", VA = "0x96C418", Slot = "67")]
		protected override AssetDetailsList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAssetFileDeleteResult : Message<AssetFileDeleteResult>
	{
		[Address(RVA = "0x9688B4", Offset = "0x9688B4", VA = "0x9688B4")]
		public MessageWithAssetFileDeleteResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96C68C", Offset = "0x96C68C", VA = "0x96C68C", Slot = "16")]
		public override AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Address(RVA = "0x96C6DC", Offset = "0x96C6DC", VA = "0x96C6DC", Slot = "67")]
		protected override AssetFileDeleteResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAssetFileDownloadCancelResult : Message<AssetFileDownloadCancelResult>
	{
		[Address(RVA = "0x968914", Offset = "0x968914", VA = "0x968914")]
		public MessageWithAssetFileDownloadCancelResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96C834", Offset = "0x96C834", VA = "0x96C834", Slot = "17")]
		public override AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Address(RVA = "0x96C884", Offset = "0x96C884", VA = "0x96C884", Slot = "67")]
		protected override AssetFileDownloadCancelResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAssetFileDownloadResult : Message<AssetFileDownloadResult>
	{
		[Address(RVA = "0x968974", Offset = "0x968974", VA = "0x968974")]
		public MessageWithAssetFileDownloadResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96C9DC", Offset = "0x96C9DC", VA = "0x96C9DC", Slot = "18")]
		public override AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Address(RVA = "0x96CA2C", Offset = "0x96CA2C", VA = "0x96CA2C", Slot = "67")]
		protected override AssetFileDownloadResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithAssetFileDownloadUpdate : Message<AssetFileDownloadUpdate>
	{
		[Address(RVA = "0x9689D4", Offset = "0x9689D4", VA = "0x9689D4")]
		public MessageWithAssetFileDownloadUpdate(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96CB60", Offset = "0x96CB60", VA = "0x96CB60", Slot = "19")]
		public override AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Address(RVA = "0x96CBB0", Offset = "0x96CBB0", VA = "0x96CBB0", Slot = "67")]
		protected override AssetFileDownloadUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCalApplicationFinalized : Message<CalApplicationFinalized>
	{
		[Address(RVA = "0x968A34", Offset = "0x968A34", VA = "0x968A34")]
		public MessageWithCalApplicationFinalized(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96CD18", Offset = "0x96CD18", VA = "0x96CD18", Slot = "20")]
		public override CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Address(RVA = "0x96CD68", Offset = "0x96CD68", VA = "0x96CD68", Slot = "67")]
		protected override CalApplicationFinalized GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCalApplicationProposed : Message<CalApplicationProposed>
	{
		[Address(RVA = "0x968A94", Offset = "0x968A94", VA = "0x968A94")]
		public MessageWithCalApplicationProposed(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96CEAC", Offset = "0x96CEAC", VA = "0x96CEAC", Slot = "21")]
		public override CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Address(RVA = "0x96CEFC", Offset = "0x96CEFC", VA = "0x96CEFC", Slot = "67")]
		protected override CalApplicationProposed GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCalApplicationSuggestionList : Message<CalApplicationSuggestionList>
	{
		[Address(RVA = "0x96D020", Offset = "0x96D020", VA = "0x96D020")]
		public MessageWithCalApplicationSuggestionList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96D080", Offset = "0x96D080", VA = "0x96D080", Slot = "22")]
		public override CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Address(RVA = "0x96D0D0", Offset = "0x96D0D0", VA = "0x96D0D0", Slot = "67")]
		protected override CalApplicationSuggestionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCloudStorageConflictMetadata : Message<CloudStorageConflictMetadata>
	{
		[Address(RVA = "0x968AF4", Offset = "0x968AF4", VA = "0x968AF4")]
		public MessageWithCloudStorageConflictMetadata(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96D344", Offset = "0x96D344", VA = "0x96D344", Slot = "23")]
		public override CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Address(RVA = "0x96D394", Offset = "0x96D394", VA = "0x96D394", Slot = "67")]
		protected override CloudStorageConflictMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCloudStorageData : Message<CloudStorageData>
	{
		[Address(RVA = "0x968B54", Offset = "0x968B54", VA = "0x968B54")]
		public MessageWithCloudStorageData(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96D510", Offset = "0x96D510", VA = "0x96D510", Slot = "24")]
		public override CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Address(RVA = "0x96D560", Offset = "0x96D560", VA = "0x96D560", Slot = "67")]
		protected override CloudStorageData GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCloudStorageMetadataUnderLocal : Message<CloudStorageMetadata>
	{
		[Address(RVA = "0x968BB4", Offset = "0x968BB4", VA = "0x968BB4")]
		public MessageWithCloudStorageMetadataUnderLocal(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96D9A8", Offset = "0x96D9A8", VA = "0x96D9A8", Slot = "25")]
		public override CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Address(RVA = "0x96D9F8", Offset = "0x96D9F8", VA = "0x96D9F8", Slot = "67")]
		protected override CloudStorageMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCloudStorageMetadataList : Message<CloudStorageMetadataList>
	{
		[Address(RVA = "0x968C14", Offset = "0x968C14", VA = "0x968C14")]
		public MessageWithCloudStorageMetadataList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96D6B4", Offset = "0x96D6B4", VA = "0x96D6B4", Slot = "26")]
		public override CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Address(RVA = "0x96D704", Offset = "0x96D704", VA = "0x96D704", Slot = "67")]
		protected override CloudStorageMetadataList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithCloudStorageUpdateResponse : Message<CloudStorageUpdateResponse>
	{
		[Address(RVA = "0x968C74", Offset = "0x968C74", VA = "0x968C74")]
		public MessageWithCloudStorageUpdateResponse(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96DB8C", Offset = "0x96DB8C", VA = "0x96DB8C", Slot = "27")]
		public override CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Address(RVA = "0x96DBDC", Offset = "0x96DBDC", VA = "0x96DBDC", Slot = "67")]
		protected override CloudStorageUpdateResponse GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithInstalledApplicationList : Message<InstalledApplicationList>
	{
		[Address(RVA = "0x96DF64", Offset = "0x96DF64", VA = "0x96DF64")]
		public MessageWithInstalledApplicationList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96DFC4", Offset = "0x96DFC4", VA = "0x96DFC4", Slot = "28")]
		public override InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Address(RVA = "0x96E014", Offset = "0x96E014", VA = "0x96E014", Slot = "67")]
		protected override InstalledApplicationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLaunchBlockFlowResult : Message<LaunchBlockFlowResult>
	{
		[Address(RVA = "0x96E288", Offset = "0x96E288", VA = "0x96E288")]
		public MessageWithLaunchBlockFlowResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96E2E8", Offset = "0x96E2E8", VA = "0x96E2E8", Slot = "29")]
		public override LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x96E338", Offset = "0x96E338", VA = "0x96E338", Slot = "67")]
		protected override LaunchBlockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLaunchFriendRequestFlowResult : Message<LaunchFriendRequestFlowResult>
	{
		[Address(RVA = "0x968CD4", Offset = "0x968CD4", VA = "0x968CD4")]
		public MessageWithLaunchFriendRequestFlowResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96E474", Offset = "0x96E474", VA = "0x96E474", Slot = "30")]
		public override LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x96E4C4", Offset = "0x96E4C4", VA = "0x96E4C4", Slot = "67")]
		protected override LaunchFriendRequestFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLaunchReportFlowResult : Message<LaunchReportFlowResult>
	{
		[Address(RVA = "0x96E600", Offset = "0x96E600", VA = "0x96E600")]
		public MessageWithLaunchReportFlowResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96E660", Offset = "0x96E660", VA = "0x96E660", Slot = "31")]
		public override LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x96E6B0", Offset = "0x96E6B0", VA = "0x96E6B0", Slot = "67")]
		protected override LaunchReportFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLaunchUnblockFlowResult : Message<LaunchUnblockFlowResult>
	{
		[Address(RVA = "0x96E7E8", Offset = "0x96E7E8", VA = "0x96E7E8")]
		public MessageWithLaunchUnblockFlowResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96E848", Offset = "0x96E848", VA = "0x96E848", Slot = "32")]
		public override LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Address(RVA = "0x96E898", Offset = "0x96E898", VA = "0x96E898", Slot = "67")]
		protected override LaunchUnblockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLeaderboardEntryList : Message<LeaderboardEntryList>
	{
		[Address(RVA = "0x968D34", Offset = "0x968D34", VA = "0x968D34")]
		public MessageWithLeaderboardEntryList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96EA9C", Offset = "0x96EA9C", VA = "0x96EA9C", Slot = "34")]
		public override LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Address(RVA = "0x96EAEC", Offset = "0x96EAEC", VA = "0x96EAEC", Slot = "67")]
		protected override LeaderboardEntryList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLinkedAccountList : Message<LinkedAccountList>
	{
		[Address(RVA = "0x96EDB0", Offset = "0x96EDB0", VA = "0x96EDB0")]
		public MessageWithLinkedAccountList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96EE10", Offset = "0x96EE10", VA = "0x96EE10", Slot = "35")]
		public override LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Address(RVA = "0x96EE60", Offset = "0x96EE60", VA = "0x96EE60", Slot = "67")]
		protected override LinkedAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLivestreamingApplicationStatus : Message<LivestreamingApplicationStatus>
	{
		[Address(RVA = "0x9700D4", Offset = "0x9700D4", VA = "0x9700D4")]
		public MessageWithLivestreamingApplicationStatus(IntPtr c_message)
		{
		}

		[Address(RVA = "0x970134", Offset = "0x970134", VA = "0x970134", Slot = "36")]
		public override LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Address(RVA = "0x970184", Offset = "0x970184", VA = "0x970184", Slot = "67")]
		protected override LivestreamingApplicationStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLivestreamingStartResult : Message<LivestreamingStartResult>
	{
		[Address(RVA = "0x9702AC", Offset = "0x9702AC", VA = "0x9702AC")]
		public MessageWithLivestreamingStartResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x97030C", Offset = "0x97030C", VA = "0x97030C", Slot = "37")]
		public override LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Address(RVA = "0x97035C", Offset = "0x97035C", VA = "0x97035C", Slot = "67")]
		protected override LivestreamingStartResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLivestreamingStatus : Message<LivestreamingStatus>
	{
		[Address(RVA = "0x968DF4", Offset = "0x968DF4", VA = "0x968DF4")]
		public MessageWithLivestreamingStatus(IntPtr c_message)
		{
		}

		[Address(RVA = "0x970480", Offset = "0x970480", VA = "0x970480", Slot = "38")]
		public override LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Address(RVA = "0x9704D0", Offset = "0x9704D0", VA = "0x9704D0", Slot = "67")]
		protected override LivestreamingStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLivestreamingVideoStats : Message<LivestreamingVideoStats>
	{
		[Address(RVA = "0x970644", Offset = "0x970644", VA = "0x970644")]
		public MessageWithLivestreamingVideoStats(IntPtr c_message)
		{
		}

		[Address(RVA = "0x9706A4", Offset = "0x9706A4", VA = "0x9706A4", Slot = "39")]
		public override LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Address(RVA = "0x9706F4", Offset = "0x9706F4", VA = "0x9706F4", Slot = "67")]
		protected override LivestreamingVideoStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithMatchmakingAdminSnapshot : Message<MatchmakingAdminSnapshot>
	{
		[Address(RVA = "0x968E54", Offset = "0x968E54", VA = "0x968E54")]
		public MessageWithMatchmakingAdminSnapshot(IntPtr c_message)
		{
		}

		[Address(RVA = "0x970838", Offset = "0x970838", VA = "0x970838", Slot = "40")]
		public override MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Address(RVA = "0x970888", Offset = "0x970888", VA = "0x970888", Slot = "67")]
		protected override MatchmakingAdminSnapshot GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithMatchmakingEnqueueResult : Message<MatchmakingEnqueueResult>
	{
		[Address(RVA = "0x968F14", Offset = "0x968F14", VA = "0x968F14")]
		public MessageWithMatchmakingEnqueueResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x970C24", Offset = "0x970C24", VA = "0x970C24", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Address(RVA = "0x970C74", Offset = "0x970C74", VA = "0x970C74", Slot = "67")]
		protected override MatchmakingEnqueueResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithMatchmakingEnqueueResultAndRoom : Message<MatchmakingEnqueueResultAndRoom>
	{
		[Address(RVA = "0x968F74", Offset = "0x968F74", VA = "0x968F74")]
		public MessageWithMatchmakingEnqueueResultAndRoom(IntPtr c_message)
		{
		}

		[Address(RVA = "0x970E5C", Offset = "0x970E5C", VA = "0x970E5C", Slot = "43")]
		public override MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Address(RVA = "0x970EAC", Offset = "0x970EAC", VA = "0x970EAC", Slot = "67")]
		protected override MatchmakingEnqueueResultAndRoom GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithMatchmakingStatsUnderMatchmakingStats : Message<MatchmakingStats>
	{
		[Address(RVA = "0x968FD4", Offset = "0x968FD4", VA = "0x968FD4")]
		public MessageWithMatchmakingStatsUnderMatchmakingStats(IntPtr c_message)
		{
		}

		[Address(RVA = "0x9713F8", Offset = "0x9713F8", VA = "0x9713F8", Slot = "44")]
		public override MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Address(RVA = "0x971448", Offset = "0x971448", VA = "0x971448", Slot = "67")]
		protected override MatchmakingStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithOrgScopedID : Message<OrgScopedID>
	{
		[Address(RVA = "0x96A034", Offset = "0x96A034", VA = "0x96A034")]
		public MessageWithOrgScopedID(IntPtr c_message)
		{
		}

		[Address(RVA = "0x9716E8", Offset = "0x9716E8", VA = "0x9716E8", Slot = "45")]
		public override OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Address(RVA = "0x971738", Offset = "0x971738", VA = "0x971738", Slot = "67")]
		protected override OrgScopedID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithParty : Message<Party>
	{
		[Address(RVA = "0x97185C", Offset = "0x97185C", VA = "0x97185C")]
		public MessageWithParty(IntPtr c_message)
		{
		}

		[Address(RVA = "0x9718BC", Offset = "0x9718BC", VA = "0x9718BC", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Address(RVA = "0x97190C", Offset = "0x97190C", VA = "0x97190C", Slot = "67")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPartyUnderCurrentParty : Message<Party>
	{
		[Address(RVA = "0x96A094", Offset = "0x96A094", VA = "0x96A094")]
		public MessageWithPartyUnderCurrentParty(IntPtr c_message)
		{
		}

		[Address(RVA = "0x971D9C", Offset = "0x971D9C", VA = "0x971D9C", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Address(RVA = "0x971DEC", Offset = "0x971DEC", VA = "0x971DEC", Slot = "67")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPartyID : Message<PartyID>
	{
		[Address(RVA = "0x971BC8", Offset = "0x971BC8", VA = "0x971BC8")]
		public MessageWithPartyID(IntPtr c_message)
		{
		}

		[Address(RVA = "0x971C28", Offset = "0x971C28", VA = "0x971C28", Slot = "47")]
		public override PartyID GetPartyID()
		{
			return null;
		}

		[Address(RVA = "0x971C78", Offset = "0x971C78", VA = "0x971C78", Slot = "67")]
		protected override PartyID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPartyUpdateNotification : Message<PartyUpdateNotification>
	{
		[Address(RVA = "0x96A0F4", Offset = "0x96A0F4", VA = "0x96A0F4")]
		public MessageWithPartyUpdateNotification(IntPtr c_message)
		{
		}

		[Address(RVA = "0x971E88", Offset = "0x971E88", VA = "0x971E88", Slot = "48")]
		public override PartyUpdateNotification GetPartyUpdateNotification()
		{
			return null;
		}

		[Address(RVA = "0x971ED8", Offset = "0x971ED8", VA = "0x971ED8", Slot = "67")]
		protected override PartyUpdateNotification GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPidList : Message<PidList>
	{
		[Address(RVA = "0x96A154", Offset = "0x96A154", VA = "0x96A154")]
		public MessageWithPidList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x97205C", Offset = "0x97205C", VA = "0x97205C", Slot = "49")]
		public override PidList GetPidList()
		{
			return null;
		}

		[Address(RVA = "0x9720AC", Offset = "0x9720AC", VA = "0x9720AC", Slot = "67")]
		protected override PidList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithProductList : Message<ProductList>
	{
		[Address(RVA = "0x96A1B4", Offset = "0x96A1B4", VA = "0x96A1B4")]
		public MessageWithProductList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x972640", Offset = "0x972640", VA = "0x972640", Slot = "50")]
		public override ProductList GetProductList()
		{
			return null;
		}

		[Address(RVA = "0x972690", Offset = "0x972690", VA = "0x972690", Slot = "67")]
		protected override ProductList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPurchase : Message<Purchase>
	{
		[Address(RVA = "0x96A214", Offset = "0x96A214", VA = "0x96A214")]
		public MessageWithPurchase(IntPtr c_message)
		{
		}

		[Address(RVA = "0x972934", Offset = "0x972934", VA = "0x972934", Slot = "51")]
		public override Purchase GetPurchase()
		{
			return null;
		}

		[Address(RVA = "0x972984", Offset = "0x972984", VA = "0x972984", Slot = "67")]
		protected override Purchase GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPurchaseList : Message<PurchaseList>
	{
		[Address(RVA = "0x96A274", Offset = "0x96A274", VA = "0x96A274")]
		public MessageWithPurchaseList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x972AD8", Offset = "0x972AD8", VA = "0x972AD8", Slot = "52")]
		public override PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Address(RVA = "0x972B28", Offset = "0x972B28", VA = "0x972B28", Slot = "67")]
		protected override PurchaseList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithRoom : Message<Room>
	{
		[Address(RVA = "0x96A2D4", Offset = "0x96A2D4", VA = "0x96A2D4")]
		public MessageWithRoom(IntPtr c_message)
		{
		}

		[Address(RVA = "0x972DCC", Offset = "0x972DCC", VA = "0x972DCC", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Address(RVA = "0x972E1C", Offset = "0x972E1C", VA = "0x972E1C", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithRoomUnderCurrentRoom : Message<Room>
	{
		[Address(RVA = "0x96A334", Offset = "0x96A334", VA = "0x96A334")]
		public MessageWithRoomUnderCurrentRoom(IntPtr c_message)
		{
		}

		[Address(RVA = "0x973644", Offset = "0x973644", VA = "0x973644", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Address(RVA = "0x973694", Offset = "0x973694", VA = "0x973694", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithRoomUnderViewerRoom : Message<Room>
	{
		[Address(RVA = "0x96A394", Offset = "0x96A394", VA = "0x96A394")]
		public MessageWithRoomUnderViewerRoom(IntPtr c_message)
		{
		}

		[Address(RVA = "0x973730", Offset = "0x973730", VA = "0x973730", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Address(RVA = "0x973780", Offset = "0x973780", VA = "0x973780", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithRoomList : Message<RoomList>
	{
		[Address(RVA = "0x96A3F4", Offset = "0x96A3F4", VA = "0x96A3F4")]
		public MessageWithRoomList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x973350", Offset = "0x973350", VA = "0x973350", Slot = "56")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Address(RVA = "0x9733A0", Offset = "0x9733A0", VA = "0x9733A0", Slot = "67")]
		protected override RoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithRoomInviteNotification : Message<RoomInviteNotification>
	{
		[Address(RVA = "0x96A454", Offset = "0x96A454", VA = "0x96A454")]
		public MessageWithRoomInviteNotification(IntPtr c_message)
		{
		}

		[Address(RVA = "0x972EB8", Offset = "0x972EB8", VA = "0x972EB8", Slot = "54")]
		public override RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Address(RVA = "0x972F08", Offset = "0x972F08", VA = "0x972F08", Slot = "67")]
		protected override RoomInviteNotification GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithRoomInviteNotificationList : Message<RoomInviteNotificationList>
	{
		[Address(RVA = "0x96A4B4", Offset = "0x96A4B4", VA = "0x96A4B4")]
		public MessageWithRoomInviteNotificationList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x97305C", Offset = "0x97305C", VA = "0x97305C", Slot = "55")]
		public override RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Address(RVA = "0x9730AC", Offset = "0x9730AC", VA = "0x9730AC", Slot = "67")]
		protected override RoomInviteNotificationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithSdkAccountList : Message<SdkAccountList>
	{
		[Address(RVA = "0x96A514", Offset = "0x96A514", VA = "0x96A514")]
		public MessageWithSdkAccountList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x97381C", Offset = "0x97381C", VA = "0x97381C", Slot = "57")]
		public override SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Address(RVA = "0x97386C", Offset = "0x97386C", VA = "0x97386C", Slot = "67")]
		protected override SdkAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithShareMediaResult : Message<ShareMediaResult>
	{
		[Address(RVA = "0x96A574", Offset = "0x96A574", VA = "0x96A574")]
		public MessageWithShareMediaResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x973AE0", Offset = "0x973AE0", VA = "0x973AE0", Slot = "58")]
		public override ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Address(RVA = "0x973B30", Offset = "0x973B30", VA = "0x973B30", Slot = "67")]
		protected override ShareMediaResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithString : Message<string>
	{
		[Address(RVA = "0x96A5D4", Offset = "0x96A5D4", VA = "0x96A5D4")]
		public MessageWithString(IntPtr c_message)
		{
		}

		[Address(RVA = "0x973C54", Offset = "0x973C54", VA = "0x973C54", Slot = "59")]
		public override string GetString()
		{
			return null;
		}

		[Address(RVA = "0x973CA4", Offset = "0x973CA4", VA = "0x973CA4", Slot = "67")]
		protected override string GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithSystemPermission : Message<SystemPermission>
	{
		[Address(RVA = "0x973D0C", Offset = "0x973D0C", VA = "0x973D0C")]
		public MessageWithSystemPermission(IntPtr c_message)
		{
		}

		[Address(RVA = "0x973D6C", Offset = "0x973D6C", VA = "0x973D6C", Slot = "60")]
		public override SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Address(RVA = "0x973DBC", Offset = "0x973DBC", VA = "0x973DBC", Slot = "67")]
		protected override SystemPermission GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithSystemVoipState : Message<SystemVoipState>
	{
		[Address(RVA = "0x96A634", Offset = "0x96A634", VA = "0x96A634")]
		public MessageWithSystemVoipState(IntPtr c_message)
		{
		}

		[Address(RVA = "0x973EF4", Offset = "0x973EF4", VA = "0x973EF4", Slot = "61")]
		public override SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Address(RVA = "0x973F44", Offset = "0x973F44", VA = "0x973F44", Slot = "67")]
		protected override SystemVoipState GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithUser : Message<Oculus.Platform.Models.User>
	{
		[Address(RVA = "0x96A694", Offset = "0x96A694", VA = "0x96A694")]
		public MessageWithUser(IntPtr c_message)
		{
		}

		[Address(RVA = "0x974078", Offset = "0x974078", VA = "0x974078", Slot = "62")]
		public override Oculus.Platform.Models.User GetUser()
		{
			return null;
		}

		[Address(RVA = "0x9740C8", Offset = "0x9740C8", VA = "0x9740C8", Slot = "67")]
		protected override Oculus.Platform.Models.User GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithUserAndRoomList : Message<UserAndRoomList>
	{
		[Address(RVA = "0x96A6F4", Offset = "0x96A6F4", VA = "0x96A6F4")]
		public MessageWithUserAndRoomList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x97424C", Offset = "0x97424C", VA = "0x97424C", Slot = "63")]
		public override UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Address(RVA = "0x97429C", Offset = "0x97429C", VA = "0x97429C", Slot = "67")]
		protected override UserAndRoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithUserList : Message<UserList>
	{
		[Address(RVA = "0x96A754", Offset = "0x96A754", VA = "0x96A754")]
		public MessageWithUserList(IntPtr c_message)
		{
		}

		[Address(RVA = "0x974540", Offset = "0x974540", VA = "0x974540", Slot = "64")]
		public override UserList GetUserList()
		{
			return null;
		}

		[Address(RVA = "0x974590", Offset = "0x974590", VA = "0x974590", Slot = "67")]
		protected override UserList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithUserProof : Message<UserProof>
	{
		[Address(RVA = "0x96A7B4", Offset = "0x96A7B4", VA = "0x96A7B4")]
		public MessageWithUserProof(IntPtr c_message)
		{
		}

		[Address(RVA = "0x974834", Offset = "0x974834", VA = "0x974834", Slot = "65")]
		public override UserProof GetUserProof()
		{
			return null;
		}

		[Address(RVA = "0x974884", Offset = "0x974884", VA = "0x974884", Slot = "67")]
		protected override UserProof GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithUserReportID : Message<UserReportID>
	{
		[Address(RVA = "0x9749A8", Offset = "0x9749A8", VA = "0x9749A8")]
		public MessageWithUserReportID(IntPtr c_message)
		{
		}

		[Address(RVA = "0x974A08", Offset = "0x974A08", VA = "0x974A08", Slot = "66")]
		public override UserReportID GetUserReportID()
		{
			return null;
		}

		[Address(RVA = "0x974A58", Offset = "0x974A58", VA = "0x974A58", Slot = "67")]
		protected override UserReportID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithNetworkingPeer : Message<NetworkingPeer>
	{
		[Address(RVA = "0x96A814", Offset = "0x96A814", VA = "0x96A814")]
		public MessageWithNetworkingPeer(IntPtr c_message)
		{
		}

		[Address(RVA = "0x97159C", Offset = "0x97159C", VA = "0x97159C", Slot = "6")]
		public override NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Address(RVA = "0x9715EC", Offset = "0x9715EC", VA = "0x9715EC", Slot = "67")]
		protected override NetworkingPeer GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPingResult : Message<PingResult>
	{
		[Address(RVA = "0x96A874", Offset = "0x96A874", VA = "0x96A874")]
		public MessageWithPingResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x972320", Offset = "0x972320", VA = "0x972320", Slot = "5")]
		public override PingResult GetPingResult()
		{
			return null;
		}

		[Address(RVA = "0x972370", Offset = "0x972370", VA = "0x972370", Slot = "67")]
		protected override PingResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithLeaderboardDidUpdate : Message<bool>
	{
		[Address(RVA = "0x968D94", Offset = "0x968D94", VA = "0x968D94")]
		public MessageWithLeaderboardDidUpdate(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96E9D4", Offset = "0x96E9D4", VA = "0x96E9D4", Slot = "33")]
		public override bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Address(RVA = "0x96EA24", Offset = "0x96EA24", VA = "0x96EA24", Slot = "67")]
		protected override bool GetDataFromMessage(IntPtr c_message)
		{
			return default(bool);
		}
	}
	public class MessageWithMatchmakingNotification : Message<Room>
	{
		[Address(RVA = "0x96A8D4", Offset = "0x96A8D4", VA = "0x96A8D4")]
		public MessageWithMatchmakingNotification(IntPtr c_message)
		{
		}

		[Address(RVA = "0x971028", Offset = "0x971028", VA = "0x971028", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Address(RVA = "0x971078", Offset = "0x971078", VA = "0x971078", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithMatchmakingBrowseResult : Message<MatchmakingBrowseResult>
	{
		[Address(RVA = "0x968EB4", Offset = "0x968EB4", VA = "0x968EB4")]
		public MessageWithMatchmakingBrowseResult(IntPtr c_message)
		{
		}

		[Address(RVA = "0x9709E0", Offset = "0x9709E0", VA = "0x9709E0", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Address(RVA = "0x970A44", Offset = "0x970A44", VA = "0x970A44", Slot = "56")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Address(RVA = "0x970AA8", Offset = "0x970AA8", VA = "0x970AA8", Slot = "67")]
		protected override MatchmakingBrowseResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithHttpTransferUpdate : Message<HttpTransferUpdate>
	{
		[Address(RVA = "0x96A934", Offset = "0x96A934", VA = "0x96A934")]
		public MessageWithHttpTransferUpdate(IntPtr c_message)
		{
		}

		[Address(RVA = "0x96DD30", Offset = "0x96DD30", VA = "0x96DD30", Slot = "7")]
		public override HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Address(RVA = "0x96DD80", Offset = "0x96DD80", VA = "0x96DD80", Slot = "67")]
		protected override HttpTransferUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public class MessageWithPlatformInitialize : Message<PlatformInitialize>
	{
		[Address(RVA = "0x96A994", Offset = "0x96A994", VA = "0x96A994")]
		public MessageWithPlatformInitialize(IntPtr c_message)
		{
		}

		[Address(RVA = "0x9724CC", Offset = "0x9724CC", VA = "0x9724CC", Slot = "8")]
		public override PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Address(RVA = "0x97251C", Offset = "0x97251C", VA = "0x97251C", Slot = "67")]
		protected override PlatformInitialize GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	public sealed class Packet : IDisposable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ulong size;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IntPtr packetHandle;

		public ulong SenderID
		{
			[Address(RVA = "0x9768C0", Offset = "0x9768C0", VA = "0x9768C0")]
			get
			{
				return default(ulong);
			}
		}

		public ulong Size
		{
			[Address(RVA = "0x97692C", Offset = "0x97692C", VA = "0x97692C")]
			get
			{
				return default(ulong);
			}
		}

		public SendPolicy Policy
		{
			[Address(RVA = "0x976934", Offset = "0x976934", VA = "0x976934")]
			get
			{
				return default(SendPolicy);
			}
		}

		[Address(RVA = "0x975BE8", Offset = "0x975BE8", VA = "0x975BE8")]
		public Packet(IntPtr packetHandle)
		{
		}

		[Address(RVA = "0x976760", Offset = "0x976760", VA = "0x976760")]
		public ulong ReadBytes(byte[] destination)
		{
			return default(ulong);
		}

		[Address(RVA = "0x9769A0", Offset = "0x9769A0", VA = "0x9769A0", Slot = "1")]
		~Packet()
		{
		}

		[Address(RVA = "0x976A14", Offset = "0x976A14", VA = "0x976A14", Slot = "4")]
		public void Dispose()
		{
		}
	}
	public enum PartyUpdateAction
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6707E4", Offset = "0x6707E4")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67081C", Offset = "0x67081C")]
		Join,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670854", Offset = "0x670854")]
		Leave,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67088C", Offset = "0x67088C")]
		Invite,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6708C4", Offset = "0x6708C4")]
		Uninvite
	}
	public enum PeerConnectionState
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6708FC", Offset = "0x6708FC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670934", Offset = "0x670934")]
		Connected,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67096C", Offset = "0x67096C")]
		Timeout,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6709A4", Offset = "0x6709A4")]
		Closed
	}
	public enum PermissionGrantStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6709DC", Offset = "0x6709DC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670A14", Offset = "0x670A14")]
		Granted,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670A4C", Offset = "0x670A4C")]
		Denied,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670A84", Offset = "0x670A84")]
		Blocked
	}
	public enum PermissionType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670ABC", Offset = "0x670ABC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670AF4", Offset = "0x670AF4")]
		Microphone,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670B2C", Offset = "0x670B2C")]
		WriteExternalStorage
	}
	public sealed class Core
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool IsPlatformInitialized;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool LogMessages;

		[Address(RVA = "0x960C4C", Offset = "0x960C4C", VA = "0x960C4C")]
		public static bool IsInitialized()
		{
			return default(bool);
		}

		[Address(RVA = "0x961530", Offset = "0x961530", VA = "0x961530")]
		internal static void ForceInitialized()
		{
		}

		[Address(RVA = "0x96159C", Offset = "0x96159C", VA = "0x96159C")]
		private static string getAppID([Optional] string appId)
		{
			return null;
		}

		[Address(RVA = "0x96178C", Offset = "0x96178C", VA = "0x96178C")]
		public static Request<PlatformInitialize> AsyncInitialize([Optional] string appId)
		{
			return null;
		}

		[Address(RVA = "0x961A70", Offset = "0x961A70", VA = "0x961A70")]
		public static void Initialize([Optional] string appId)
		{
		}

		[Address(RVA = "0x961764", Offset = "0x961764", VA = "0x961764")]
		private static string GetAppIDFromConfig()
		{
			return null;
		}

		[Address(RVA = "0x961DC4", Offset = "0x961DC4", VA = "0x961DC4")]
		public Core()
		{
		}
	}
	public static class ApplicationLifecycle
	{
		[Address(RVA = "0xE7B91C", Offset = "0xE7B91C", VA = "0xE7B91C")]
		public static LaunchDetails GetLaunchDetails()
		{
			return null;
		}
	}
	public static class Rooms
	{
		[Address(RVA = "0x977568", Offset = "0x977568", VA = "0x977568")]
		public static Request<Room> UpdateDataStore(ulong roomID, Dictionary<string, string> data)
		{
			return null;
		}

		[Address(RVA = "0x9777F4", Offset = "0x9777F4", VA = "0x9777F4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x681304", Offset = "0x681304")]
		public static void SetRoomInviteNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Address(RVA = "0x977870", Offset = "0x977870", VA = "0x977870")]
		public static Request<Room> CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Address(RVA = "0x977958", Offset = "0x977958", VA = "0x977958")]
		public static Request<Room> CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, RoomOptions roomOptions)
		{
			return null;
		}

		[Address(RVA = "0x977A6C", Offset = "0x977A6C", VA = "0x977A6C")]
		public static Request<Room> Get(ulong roomID)
		{
			return null;
		}

		[Address(RVA = "0x977B3C", Offset = "0x977B3C", VA = "0x977B3C")]
		public static Request<Room> GetCurrent()
		{
			return null;
		}

		[Address(RVA = "0x977C04", Offset = "0x977C04", VA = "0x977C04")]
		public static Request<Room> GetCurrentForUser(ulong userID)
		{
			return null;
		}

		[Address(RVA = "0x977CD4", Offset = "0x977CD4", VA = "0x977CD4")]
		public static Request<UserList> GetInvitableUsers()
		{
			return null;
		}

		[Address(RVA = "0x977D9C", Offset = "0x977D9C", VA = "0x977D9C")]
		public static Request<UserList> GetInvitableUsers2([Optional] RoomOptions roomOptions)
		{
			return null;
		}

		[Address(RVA = "0x977E98", Offset = "0x977E98", VA = "0x977E98")]
		public static Request<RoomList> GetModeratedRooms()
		{
			return null;
		}

		[Address(RVA = "0x977F60", Offset = "0x977F60", VA = "0x977F60")]
		public static Request<Room> InviteUser(ulong roomID, string inviteToken)
		{
			return null;
		}

		[Address(RVA = "0x978040", Offset = "0x978040", VA = "0x978040")]
		public static Request<Room> Join(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Address(RVA = "0x978120", Offset = "0x978120", VA = "0x978120")]
		public static Request<Room> Join2(ulong roomID, RoomOptions roomOptions)
		{
			return null;
		}

		[Address(RVA = "0x97822C", Offset = "0x97822C", VA = "0x97822C")]
		public static Request<Room> KickUser(ulong roomID, ulong userID, int kickDurationSeconds)
		{
			return null;
		}

		[Address(RVA = "0x978314", Offset = "0x978314", VA = "0x978314")]
		public static Request LaunchInvitableUserFlow(ulong roomID)
		{
			return null;
		}

		[Address(RVA = "0x9783DC", Offset = "0x9783DC", VA = "0x9783DC")]
		public static Request<Room> Leave(ulong roomID)
		{
			return null;
		}

		[Address(RVA = "0x9784AC", Offset = "0x9784AC", VA = "0x9784AC")]
		public static Request<Room> SetDescription(ulong roomID, string description)
		{
			return null;
		}

		[Address(RVA = "0x97858C", Offset = "0x97858C", VA = "0x97858C")]
		public static Request<Room> UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus)
		{
			return null;
		}

		[Address(RVA = "0x97866C", Offset = "0x97866C", VA = "0x97866C")]
		public static Request UpdateOwner(ulong roomID, ulong userID)
		{
			return null;
		}

		[Address(RVA = "0x978744", Offset = "0x978744", VA = "0x978744")]
		public static Request<Room> UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy)
		{
			return null;
		}

		[Address(RVA = "0x9777F8", Offset = "0x9777F8", VA = "0x9777F8")]
		public static void SetRoomInviteAcceptedNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Address(RVA = "0x978824", Offset = "0x978824", VA = "0x978824")]
		public static void SetRoomInviteReceivedNotificationCallback(Message<RoomInviteNotification>.Callback callback)
		{
		}

		[Address(RVA = "0x97889C", Offset = "0x97889C", VA = "0x97889C")]
		public static void SetUpdateNotificationCallback(Message<Room>.Callback callback)
		{
		}

		[Address(RVA = "0x978914", Offset = "0x978914", VA = "0x978914")]
		public static Request<RoomList> GetNextRoomListPage(RoomList list)
		{
			return null;
		}
	}
	public static class Matchmaking
	{
		public class CustomQuery
		{
			public struct Criterion
			{
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public string key;

				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public MatchmakingCriterionImportance importance;

				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public Dictionary<string, object> parameters;

				[Address(RVA = "0x966594", Offset = "0x966594", VA = "0x966594")]
				public Criterion(string key_, MatchmakingCriterionImportance importance_)
				{
				}
			}

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<string, object> data;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Criterion[] criteria;

			[Address(RVA = "0x9652BC", Offset = "0x9652BC", VA = "0x9652BC")]
			public IntPtr ToUnmanaged()
			{
				return default(IntPtr);
			}

			[Address(RVA = "0x966540", Offset = "0x966540", VA = "0x966540")]
			public CustomQuery()
			{
			}
		}

		[Address(RVA = "0x963E54", Offset = "0x963E54", VA = "0x963E54")]
		public static Request ReportResultsInsecure(ulong roomID, Dictionary<string, int> data)
		{
			return null;
		}

		[Address(RVA = "0x9650E4", Offset = "0x9650E4", VA = "0x9650E4")]
		public static Request<MatchmakingStats> GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach = MatchmakingStatApproach.Trailing)
		{
			return null;
		}

		[Address(RVA = "0x9651CC", Offset = "0x9651CC", VA = "0x9651CC")]
		public static Request<MatchmakingBrowseResult> Browse(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Address(RVA = "0x965764", Offset = "0x965764", VA = "0x965764")]
		public static Request<MatchmakingBrowseResult> Browse2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Address(RVA = "0x9658C0", Offset = "0x9658C0", VA = "0x9658C0")]
		public static Request Cancel(string pool, string requestHash)
		{
			return null;
		}

		[Address(RVA = "0x965998", Offset = "0x965998", VA = "0x965998")]
		public static Request Cancel()
		{
			return null;
		}

		[Address(RVA = "0x965A58", Offset = "0x965A58", VA = "0x965A58")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates = false, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Address(RVA = "0x965B60", Offset = "0x965B60", VA = "0x965B60")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Address(RVA = "0x965C6C", Offset = "0x965C6C", VA = "0x965C6C")]
		public static Request<Room> CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Address(RVA = "0x965D54", Offset = "0x965D54", VA = "0x965D54")]
		public static Request<Room> CreateRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Address(RVA = "0x965E60", Offset = "0x965E60", VA = "0x965E60")]
		public static Request<MatchmakingEnqueueResult> Enqueue(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Address(RVA = "0x965F50", Offset = "0x965F50", VA = "0x965F50")]
		public static Request<MatchmakingEnqueueResult> Enqueue2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Address(RVA = "0x96605C", Offset = "0x96605C", VA = "0x96605C")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom(ulong roomID, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Address(RVA = "0x96614C", Offset = "0x96614C", VA = "0x96614C")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom2(ulong roomID, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Address(RVA = "0x966258", Offset = "0x966258", VA = "0x966258")]
		public static Request<MatchmakingAdminSnapshot> GetAdminSnapshot()
		{
			return null;
		}

		[Address(RVA = "0x966320", Offset = "0x966320", VA = "0x966320")]
		public static Request<Room> JoinRoom(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Address(RVA = "0x966400", Offset = "0x966400", VA = "0x966400")]
		public static Request StartMatch(ulong roomID)
		{
			return null;
		}

		[Address(RVA = "0x9664C8", Offset = "0x9664C8", VA = "0x9664C8")]
		public static void SetMatchFoundNotificationCallback(Message<Room>.Callback callback)
		{
		}
	}
	public static class Net
	{
		[Address(RVA = "0x975B1C", Offset = "0x975B1C", VA = "0x975B1C")]
		public static Packet ReadPacket()
		{
			return null;
		}

		[Address(RVA = "0x975CA8", Offset = "0x975CA8", VA = "0x975CA8")]
		public static bool SendPacket(ulong userID, byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Address(RVA = "0x975DA8", Offset = "0x975DA8", VA = "0x975DA8")]
		public static void Connect(ulong userID)
		{
		}

		[Address(RVA = "0x975E44", Offset = "0x975E44", VA = "0x975E44")]
		public static void Accept(ulong userID)
		{
		}

		[Address(RVA = "0x975EE0", Offset = "0x975EE0", VA = "0x975EE0")]
		public static void Close(ulong userID)
		{
		}

		[Address(RVA = "0x975F7C", Offset = "0x975F7C", VA = "0x975F7C")]
		public static bool IsConnected(ulong userID)
		{
			return default(bool);
		}

		[Address(RVA = "0x97601C", Offset = "0x97601C", VA = "0x97601C")]
		public static bool SendPacketToCurrentRoom(byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Address(RVA = "0x976114", Offset = "0x976114", VA = "0x976114")]
		public static bool AcceptForCurrentRoom()
		{
			return default(bool);
		}

		[Address(RVA = "0x9761AC", Offset = "0x9761AC", VA = "0x9761AC")]
		public static void CloseForCurrentRoom()
		{
		}

		[Address(RVA = "0x976240", Offset = "0x976240", VA = "0x976240")]
		public static Request<PingResult> Ping(ulong userID)
		{
			return null;
		}

		[Address(RVA = "0x976310", Offset = "0x976310", VA = "0x976310")]
		public static void SetConnectionStateChangedCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Address(RVA = "0x976388", Offset = "0x976388", VA = "0x976388")]
		public static void SetPeerConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Address(RVA = "0x976400", Offset = "0x976400", VA = "0x976400")]
		public static void SetPingResultNotificationCallback(Message<PingResult>.Callback callback)
		{
		}
	}
	public static class Leaderboards
	{
		[Address(RVA = "0x963698", Offset = "0x963698", VA = "0x963698")]
		public static Request<LeaderboardEntryList> GetNextEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Address(RVA = "0x963798", Offset = "0x963798", VA = "0x963798")]
		public static Request<LeaderboardEntryList> GetPreviousEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Address(RVA = "0x963898", Offset = "0x963898", VA = "0x963898")]
		public static Request<LeaderboardEntryList> GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return null;
		}

		[Address(RVA = "0x963990", Offset = "0x963990", VA = "0x963990")]
		public static Request<LeaderboardEntryList> GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return null;
		}

		[Address(RVA = "0x963A78", Offset = "0x963A78", VA = "0x963A78")]
		public static Request<bool> WriteEntry(string leaderboardName, long score, [Optional] byte[] extraData, bool forceUpdate = false)
		{
			return null;
		}
	}
	public static class Voip
	{
		[Address(RVA = "0xAFB834", Offset = "0xAFB834", VA = "0xAFB834")]
		public static void Start(ulong userID)
		{
		}

		[Address(RVA = "0xAFBBA0", Offset = "0xAFBBA0", VA = "0xAFBBA0")]
		public static void Accept(ulong userID)
		{
		}

		[Address(RVA = "0xAFB8D4", Offset = "0xAFB8D4", VA = "0xAFB8D4")]
		public static void Stop(ulong userID)
		{
		}

		[Address(RVA = "0xAFD548", Offset = "0xAFD548", VA = "0xAFD548")]
		public static void SetMicrophoneFilterCallback(CAPI.FilterCallback callback)
		{
		}

		[Address(RVA = "0xAFD620", Offset = "0xAFD620", VA = "0xAFD620")]
		public static void SetMicrophoneMuted(VoipMuteState state)
		{
		}

		[Address(RVA = "0xAFD6C0", Offset = "0xAFD6C0", VA = "0xAFD6C0")]
		public static VoipMuteState GetSystemVoipMicrophoneMuted()
		{
			return default(VoipMuteState);
		}

		[Address(RVA = "0xAFD75C", Offset = "0xAFD75C", VA = "0xAFD75C")]
		public static SystemVoipStatus GetSystemVoipStatus()
		{
			return default(SystemVoipStatus);
		}

		[Address(RVA = "0xAFD7F8", Offset = "0xAFD7F8", VA = "0xAFD7F8")]
		public static VoipDtxState GetIsConnectionUsingDtx(ulong peerID)
		{
			return default(VoipDtxState);
		}

		[Address(RVA = "0xAFD89C", Offset = "0xAFD89C", VA = "0xAFD89C")]
		public static VoipBitrate GetLocalBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Address(RVA = "0xAFD940", Offset = "0xAFD940", VA = "0xAFD940")]
		public static VoipBitrate GetRemoteBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Address(RVA = "0xAFD9E4", Offset = "0xAFD9E4", VA = "0xAFD9E4")]
		public static void SetNewConnectionOptions(VoipOptions voipOptions)
		{
		}

		[Address(RVA = "0xAFDB00", Offset = "0xAFDB00", VA = "0xAFDB00")]
		public static Request<SystemVoipState> SetSystemVoipSuppressed(bool suppressed)
		{
			return null;
		}

		[Address(RVA = "0xAFB67C", Offset = "0xAFB67C", VA = "0xAFB67C")]
		public static void SetVoipConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Address(RVA = "0xAFB6F4", Offset = "0xAFB6F4", VA = "0xAFB6F4")]
		public static void SetVoipStateChangeCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Address(RVA = "0xAFDBD0", Offset = "0xAFDBD0", VA = "0xAFDBD0")]
		public static void SetSystemVoipStateNotificationCallback(Message<SystemVoipState>.Callback callback)
		{
		}
	}
	public static class Achievements
	{
		[Address(RVA = "0xE7931C", Offset = "0xE7931C", VA = "0xE7931C")]
		public static Request<AchievementUpdate> AddCount(string name, ulong count)
		{
			return null;
		}

		[Address(RVA = "0xE794B0", Offset = "0xE794B0", VA = "0xE794B0")]
		public static Request<AchievementUpdate> AddFields(string name, string fields)
		{
			return null;
		}

		[Address(RVA = "0xE79660", Offset = "0xE79660", VA = "0xE79660")]
		public static Request<AchievementDefinitionList> GetAllDefinitions()
		{
			return null;
		}

		[Address(RVA = "0xE797B4", Offset = "0xE797B4", VA = "0xE797B4")]
		public static Request<AchievementProgressList> GetAllProgress()
		{
			return null;
		}

		[Address(RVA = "0xE79908", Offset = "0xE79908", VA = "0xE79908")]
		public static Request<AchievementDefinitionList> GetDefinitionsByName(string[] names)
		{
			return null;
		}

		[Address(RVA = "0xE79B58", Offset = "0xE79B58", VA = "0xE79B58")]
		public static Request<AchievementProgressList> GetProgressByName(string[] names)
		{
			return null;
		}

		[Address(RVA = "0xE79DA8", Offset = "0xE79DA8", VA = "0xE79DA8")]
		public static Request<AchievementUpdate> Unlock(string name)
		{
			return null;
		}

		[Address(RVA = "0xE79F1C", Offset = "0xE79F1C", VA = "0xE79F1C")]
		public static Request<AchievementDefinitionList> GetNextAchievementDefinitionListPage(AchievementDefinitionList list)
		{
			return null;
		}

		[Address(RVA = "0xE7B140", Offset = "0xE7B140", VA = "0xE7B140")]
		public static Request<AchievementProgressList> GetNextAchievementProgressListPage(AchievementProgressList list)
		{
			return null;
		}
	}
	public static class Application
	{
		[Address(RVA = "0xE7B5C0", Offset = "0xE7B5C0", VA = "0xE7B5C0")]
		public static Request<ApplicationVersion> GetVersion()
		{
			return null;
		}

		[Address(RVA = "0xE7B714", Offset = "0xE7B714", VA = "0xE7B714")]
		public static Request<string> LaunchOtherApp(ulong appID, [Optional] ApplicationOptions deeplink_options)
		{
			return null;
		}
	}
	public static class AssetFile
	{
		[Address(RVA = "0xE7BDC0", Offset = "0xE7BDC0", VA = "0xE7BDC0")]
		public static Request<AssetFileDeleteResult> Delete(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7BF2C", Offset = "0xE7BF2C", VA = "0xE7BF2C")]
		public static Request<AssetFileDeleteResult> DeleteById(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7C098", Offset = "0xE7C098", VA = "0xE7C098")]
		public static Request<AssetFileDeleteResult> DeleteByName(string assetFileName)
		{
			return null;
		}

		[Address(RVA = "0xE7C20C", Offset = "0xE7C20C", VA = "0xE7C20C")]
		public static Request<AssetFileDownloadResult> Download(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7C378", Offset = "0xE7C378", VA = "0xE7C378")]
		public static Request<AssetFileDownloadResult> DownloadById(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7C4E4", Offset = "0xE7C4E4", VA = "0xE7C4E4")]
		public static Request<AssetFileDownloadResult> DownloadByName(string assetFileName)
		{
			return null;
		}

		[Address(RVA = "0xE7C658", Offset = "0xE7C658", VA = "0xE7C658")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancel(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7C7C4", Offset = "0xE7C7C4", VA = "0xE7C7C4")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelById(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7C930", Offset = "0xE7C930", VA = "0xE7C930")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelByName(string assetFileName)
		{
			return null;
		}

		[Address(RVA = "0xE7CAA4", Offset = "0xE7CAA4", VA = "0xE7CAA4")]
		public static Request<AssetDetailsList> GetList()
		{
			return null;
		}

		[Address(RVA = "0xE7CBF8", Offset = "0xE7CBF8", VA = "0xE7CBF8")]
		public static Request<AssetDetails> Status(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7CD64", Offset = "0xE7CD64", VA = "0xE7CD64")]
		public static Request<AssetDetails> StatusById(ulong assetFileID)
		{
			return null;
		}

		[Address(RVA = "0xE7CED0", Offset = "0xE7CED0", VA = "0xE7CED0")]
		public static Request<AssetDetails> StatusByName(string assetFileName)
		{
			return null;
		}

		[Address(RVA = "0xE7D044", Offset = "0xE7D044", VA = "0xE7D044")]
		public static void SetDownloadUpdateNotificationCallback(Message<AssetFileDownloadUpdate>.Callback callback)
		{
		}
	}
	public static class Avatar
	{
	}
	public static class Cal
	{
	}
	public static class CloudStorage
	{
		[Address(RVA = "0x960B6C", Offset = "0x960B6C", VA = "0x960B6C")]
		public static Request<CloudStorageUpdateResponse> Delete(string bucket, string key)
		{
			return null;
		}

		[Address(RVA = "0x960CB4", Offset = "0x960CB4", VA = "0x960CB4")]
		public static Request<CloudStorageData> Load(string bucket, string key)
		{
			return null;
		}

		[Address(RVA = "0x960D94", Offset = "0x960D94", VA = "0x960D94")]
		public static Request<CloudStorageMetadataList> LoadBucketMetadata(string bucket)
		{
			return null;
		}

		[Address(RVA = "0x960E64", Offset = "0x960E64", VA = "0x960E64")]
		public static Request<CloudStorageConflictMetadata> LoadConflictMetadata(string bucket, string key)
		{
			return null;
		}

		[Address(RVA = "0x960F44", Offset = "0x960F44", VA = "0x960F44")]
		public static Request<CloudStorageData> LoadHandle(string handle)
		{
			return null;
		}

		[Address(RVA = "0x961014", Offset = "0x961014", VA = "0x961014")]
		public static Request<CloudStorageMetadata> LoadMetadata(string bucket, string key)
		{
			return null;
		}

		[Address(RVA = "0x9610F4", Offset = "0x9610F4", VA = "0x9610F4")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Address(RVA = "0x9611DC", Offset = "0x9611DC", VA = "0x9611DC")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Address(RVA = "0x9612C4", Offset = "0x9612C4", VA = "0x9612C4")]
		public static Request<CloudStorageUpdateResponse> Save(string bucket, string key, byte[] data, long counter, string extraData)
		{
			return null;
		}

		[Address(RVA = "0x9613D8", Offset = "0x9613D8", VA = "0x9613D8")]
		public static Request<CloudStorageMetadataList> GetNextCloudStorageMetadataListPage(CloudStorageMetadataList list)
		{
			return null;
		}
	}
	public static class CloudStorage2
	{
	}
	public static class Entitlements
	{
		[Address(RVA = "0x961DD0", Offset = "0x961DD0", VA = "0x961DD0")]
		public static Request IsUserEntitledToApplication()
		{
			return null;
		}
	}
	public static class GraphAPI
	{
	}
	public static class HTTP
	{
	}
	public static class IAP
	{
		[Address(RVA = "0x961EBC", Offset = "0x961EBC", VA = "0x961EBC")]
		public static Request ConsumePurchase(string sku)
		{
			return null;
		}

		[Address(RVA = "0x961F84", Offset = "0x961F84", VA = "0x961F84")]
		public static Request<ProductList> GetProductsBySKU(string[] skus)
		{
			return null;
		}

		[Address(RVA = "0x963068", Offset = "0x963068", VA = "0x963068")]
		public static Request<PurchaseList> GetViewerPurchases()
		{
			return null;
		}

		[Address(RVA = "0x963130", Offset = "0x963130", VA = "0x963130")]
		public static Request<Purchase> LaunchCheckoutFlow(string sku)
		{
			return null;
		}

		[Address(RVA = "0x963250", Offset = "0x963250", VA = "0x963250")]
		public static Request<ProductList> GetNextProductListPage(ProductList list)
		{
			return null;
		}

		[Address(RVA = "0x9633A8", Offset = "0x9633A8", VA = "0x9633A8")]
		public static Request<PurchaseList> GetNextPurchaseListPage(PurchaseList list)
		{
			return null;
		}
	}
	public static class LanguagePack
	{
		[Address(RVA = "0x963500", Offset = "0x963500", VA = "0x963500")]
		public static Request<AssetDetails> GetCurrent()
		{
			return null;
		}

		[Address(RVA = "0x9635C8", Offset = "0x9635C8", VA = "0x9635C8")]
		public static Request<AssetFileDownloadResult> SetCurrent(string tag)
		{
			return null;
		}
	}
	public static class Livestreaming
	{
		[Address(RVA = "0x963B84", Offset = "0x963B84", VA = "0x963B84")]
		public static Request<LivestreamingStatus> GetStatus()
		{
			return null;
		}

		[Address(RVA = "0x963C4C", Offset = "0x963C4C", VA = "0x963C4C")]
		public static Request<LivestreamingStatus> PauseStream()
		{
			return null;
		}

		[Address(RVA = "0x963D14", Offset = "0x963D14", VA = "0x963D14")]
		public static Request<LivestreamingStatus> ResumeStream()
		{
			return null;
		}

		[Address(RVA = "0x963DDC", Offset = "0x963DDC", VA = "0x963DDC")]
		public static void SetStatusUpdateNotificationCallback(Message<LivestreamingStatus>.Callback callback)
		{
		}
	}
	public static class Media
	{
		[Address(RVA = "0x966CA8", Offset = "0x966CA8", VA = "0x966CA8")]
		public static Request<ShareMediaResult> ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return null;
		}
	}
	public static class Notifications
	{
		[Address(RVA = "0x976478", Offset = "0x976478", VA = "0x976478")]
		public static Request<RoomInviteNotificationList> GetRoomInviteNotifications()
		{
			return null;
		}

		[Address(RVA = "0x976540", Offset = "0x976540", VA = "0x976540")]
		public static Request MarkAsRead(ulong notificationID)
		{
			return null;
		}

		[Address(RVA = "0x976608", Offset = "0x976608", VA = "0x976608")]
		public static Request<RoomInviteNotificationList> GetNextRoomInviteNotificationListPage(RoomInviteNotificationList list)
		{
			return null;
		}
	}
	public static class Parties
	{
		[Address(RVA = "0x976AAC", Offset = "0x976AAC", VA = "0x976AAC")]
		public static Request<Party> GetCurrent()
		{
			return null;
		}

		[Address(RVA = "0x976B74", Offset = "0x976B74", VA = "0x976B74")]
		public static void SetPartyUpdateNotificationCallback(Message<PartyUpdateNotification>.Callback callback)
		{
		}
	}
	public static class Users
	{
		[Address(RVA = "0xAFCA6C", Offset = "0xAFCA6C", VA = "0xAFCA6C")]
		public static Request<Oculus.Platform.Models.User> Get(ulong userID)
		{
			return null;
		}

		[Address(RVA = "0xAFCB3C", Offset = "0xAFCB3C", VA = "0xAFCB3C")]
		public static Request<string> GetAccessToken()
		{
			return null;
		}

		[Address(RVA = "0xAE88E4", Offset = "0xAE88E4", VA = "0xAE88E4")]
		public static Request<Oculus.Platform.Models.User> GetLoggedInUser()
		{
			return null;
		}

		[Address(RVA = "0xAFCC04", Offset = "0xAFCC04", VA = "0xAFCC04")]
		public static Request<UserList> GetLoggedInUserFriends()
		{
			return null;
		}

		[Address(RVA = "0xAFCCCC", Offset = "0xAFCCCC", VA = "0xAFCCCC")]
		public static Request<UserAndRoomList> GetLoggedInUserFriendsAndRooms()
		{
			return null;
		}

		[Address(RVA = "0xAFCD94", Offset = "0xAFCD94", VA = "0xAFCD94")]
		public static Request<UserAndRoomList> GetLoggedInUserRecentlyMetUsersAndRooms([Optional] UserOptions userOptions)
		{
			return null;
		}

		[Address(RVA = "0xAFCE90", Offset = "0xAFCE90", VA = "0xAFCE90")]
		public static Request<OrgScopedID> GetOrgScopedID(ulong userID)
		{
			return null;
		}

		[Address(RVA = "0xAFCF60", Offset = "0xAFCF60", VA = "0xAFCF60")]
		public static Request<SdkAccountList> GetSdkAccounts()
		{
			return null;
		}

		[Address(RVA = "0xAFD028", Offset = "0xAFD028", VA = "0xAFD028")]
		public static Request<UserProof> GetUserProof()
		{
			return null;
		}

		[Address(RVA = "0xAFD0F0", Offset = "0xAFD0F0", VA = "0xAFD0F0")]
		public static Request<LaunchFriendRequestFlowResult> LaunchFriendRequestFlow(ulong userID)
		{
			return null;
		}

		[Address(RVA = "0xAFD1C0", Offset = "0xAFD1C0", VA = "0xAFD1C0")]
		public static Request LaunchProfile(ulong userID)
		{
			return null;
		}

		[Address(RVA = "0xAFD288", Offset = "0xAFD288", VA = "0xAFD288")]
		public static Request<UserAndRoomList> GetNextUserAndRoomListPage(UserAndRoomList list)
		{
			return null;
		}

		[Address(RVA = "0xAFD3E8", Offset = "0xAFD3E8", VA = "0xAFD3E8")]
		public static Request<UserList> GetNextUserListPage(UserList list)
		{
			return null;
		}
	}
	public enum PlatformInitializeResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670B64", Offset = "0x670B64")]
		Success = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670B9C", Offset = "0x670B9C")]
		Uninitialized = -1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670BD4", Offset = "0x670BD4")]
		PreLoaded = -2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670C0C", Offset = "0x670C0C")]
		FileInvalid = -3,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670C44", Offset = "0x670C44")]
		SignatureInvalid = -4,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670C7C", Offset = "0x670C7C")]
		UnableToVerify = -5,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670CB4", Offset = "0x670CB4")]
		VersionMismatch = -6,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670CEC", Offset = "0x670CEC")]
		Unknown = -7,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670D24", Offset = "0x670D24")]
		InvalidCredentials = -8,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670D5C", Offset = "0x670D5C")]
		NotEntitled = -9
	}
	public static class PlatformInternal
	{
		public enum MessageTypeInternal : uint
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Application_ExecuteCoordinatedLaunch = 645772532u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Application_GetInstalledApplications = 1376744524u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Avatar_UpdateMetaData = 2077219214u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Cal_FinalizeApplication = 497667029u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Cal_GetSuggestedApplications = 1450209301u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Cal_ProposeApplication = 1317270237u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CloudStorage2_GetUserDirectoryPath = 1990471406u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GraphAPI_Get = 822018158u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GraphAPI_Post = 1990567876u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HTTP_Get = 1874211363u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HTTP_GetToFile = 1317133401u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HTTP_MultiPartPost = 1480774160u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HTTP_Post = 1798743375u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_IsAllowedForApplication = 191729014u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_StartPartyStream = 2066701532u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_StartStream = 1343932350u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_StopPartyStream = 661065560u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_StopStream = 1155796426u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_UpdateCommentsOverlayVisibility = 528318516u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Livestreaming_UpdateMicStatus = 475495815u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_Create = 450042703u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_GatherInApplication = 1921499523u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_Get = 1586058173u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_GetCurrentForUser = 1489764138u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_Invite = 901104867u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_Join = 1744993395u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Party_Leave = 848430801u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_CreateOrUpdateAndJoinNamed = 2089683601u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetNamedRooms = 125660812u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Room_GetSocialRooms = 1636310390u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SystemPermissions_GetStatus = 493497353u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SystemPermissions_LaunchDeeplink = 442139697u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_CancelRecordingForReportFlow = 65065289u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_GetLinkedAccounts = 1469314134u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_LaunchBlockFlow = 1876305192u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_LaunchReportFlow = 1449304081u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_LaunchReportFlow2 = 2139314275u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_LaunchUnblockFlow = 346172055u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_NewEntitledTestUser = 292822787u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_NewTestUser = 921194380u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_NewTestUserFriends = 517416647u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_StartRecordingForReportFlow = 1819161571u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_StopRecordingAndLaunchReportFlow = 1618513035u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_StopRecordingAndLaunchReportFlow2 = 432190251u,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			User_TestUserCreateDeviceManifest = 1701884605u
		}

		public static class HTTP
		{
			[Address(RVA = "0x976C4C", Offset = "0x976C4C", VA = "0x976C4C")]
			public static void SetHttpTransferUpdateCallback(Message<HttpTransferUpdate>.Callback callback)
			{
			}
		}

		[Address(RVA = "0x976BEC", Offset = "0x976BEC", VA = "0x976BEC")]
		public static void CrashApplication()
		{
		}

		[Address(RVA = "0x96A9F4", Offset = "0x96A9F4", VA = "0x96A9F4")]
		internal static Message ParseMessageHandle(IntPtr messageHandle, Message.MessageType messageType)
		{
			return null;
		}
	}
	public sealed class PlatformSettings : ScriptableObject
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string ovrAppID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string ovrMobileAppID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool ovrUseStandalonePlatform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool ovrEnableARM64Support;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformSettings instance;

		public static string AppID
		{
			[Address(RVA = "0x961D98", Offset = "0x961D98", VA = "0x961D98")]
			get
			{
				return null;
			}
			[Address(RVA = "0x976DD8", Offset = "0x976DD8", VA = "0x976DD8")]
			set
			{
			}
		}

		public static string MobileAppID
		{
			[Address(RVA = "0x961D6C", Offset = "0x961D6C", VA = "0x961D6C")]
			get
			{
				return null;
			}
			[Address(RVA = "0x976E08", Offset = "0x976E08", VA = "0x976E08")]
			set
			{
			}
		}

		public static bool UseStandalonePlatform
		{
			[Address(RVA = "0x961A44", Offset = "0x961A44", VA = "0x961A44")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x976E38", Offset = "0x976E38", VA = "0x976E38")]
			set
			{
			}
		}

		public static bool EnableARM64Support
		{
			[Address(RVA = "0x976E6C", Offset = "0x976E6C", VA = "0x976E6C")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0x976E98", Offset = "0x976E98", VA = "0x976E98")]
			set
			{
			}
		}

		public static PlatformSettings Instance
		{
			[Address(RVA = "0x976CC4", Offset = "0x976CC4", VA = "0x976CC4")]
			get
			{
				return null;
			}
			[Address(RVA = "0x976ECC", Offset = "0x976ECC", VA = "0x976ECC")]
			set
			{
			}
		}

		[Address(RVA = "0x976F20", Offset = "0x976F20", VA = "0x976F20")]
		public PlatformSettings()
		{
		}
	}
	public sealed class Request<T> : Request
	{
		public Request(ulong requestID)
		{
		}

		public Request<T> OnComplete(Message<T>.Callback callback)
		{
			return null;
		}
	}
	public class Request
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x670DD4", Offset = "0x670DD4")]
		private ulong <RequestID>k__BackingField;

		public ulong RequestID
		{
			[Address(RVA = "0x95FBA8", Offset = "0x95FBA8", VA = "0x95FBA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68133C", Offset = "0x68133C")]
			get
			{
				return default(ulong);
			}
			[Address(RVA = "0x976F80", Offset = "0x976F80", VA = "0x976F80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68134C", Offset = "0x68134C")]
			set
			{
			}
		}

		[Address(RVA = "0x961E90", Offset = "0x961E90", VA = "0x961E90")]
		public Request(ulong requestID)
		{
		}

		[Address(RVA = "0x976F88", Offset = "0x976F88", VA = "0x976F88")]
		public Request OnComplete(Message.Callback callback)
		{
			return null;
		}

		[Address(RVA = "0x960AD0", Offset = "0x960AD0", VA = "0x960AD0")]
		public static void RunCallbacks(uint limit = 0u)
		{
		}
	}
	public enum RoomJoinability
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670DE4", Offset = "0x670DE4")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670E1C", Offset = "0x670E1C")]
		AreIn,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670E54", Offset = "0x670E54")]
		AreKicked,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670E8C", Offset = "0x670E8C")]
		CanJoin,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670EC4", Offset = "0x670EC4")]
		IsFull,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670EFC", Offset = "0x670EFC")]
		NoViewer,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670F34", Offset = "0x670F34")]
		PolicyPrevents
	}
	public enum RoomJoinPolicy
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670F6C", Offset = "0x670F6C")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670FA4", Offset = "0x670FA4")]
		Everyone,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x670FDC", Offset = "0x670FDC")]
		FriendsOfMembers,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671014", Offset = "0x671014")]
		FriendsOfOwner,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67104C", Offset = "0x67104C")]
		InvitedUsers,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671084", Offset = "0x671084")]
		Unknown
	}
	public enum RoomMembershipLockStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6710BC", Offset = "0x6710BC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6710F4", Offset = "0x6710F4")]
		Lock,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67112C", Offset = "0x67112C")]
		Unlock
	}
	public class RoomOptions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Address(RVA = "0x977004", Offset = "0x977004", VA = "0x977004")]
		public RoomOptions()
		{
		}

		[Address(RVA = "0x97707C", Offset = "0x97707C", VA = "0x97707C")]
		public void SetDataStore(string key, string value)
		{
		}

		[Address(RVA = "0x977100", Offset = "0x977100", VA = "0x977100")]
		public void ClearDataStore()
		{
		}

		[Address(RVA = "0x97716C", Offset = "0x97716C", VA = "0x97716C")]
		public void SetExcludeRecentlyMet(bool value)
		{
		}

		[Address(RVA = "0x9771E8", Offset = "0x9771E8", VA = "0x9771E8")]
		public void SetMaxUserResults(uint value)
		{
		}

		[Address(RVA = "0x977264", Offset = "0x977264", VA = "0x977264")]
		public void SetOrdering(UserOrdering value)
		{
		}

		[Address(RVA = "0x9772E0", Offset = "0x9772E0", VA = "0x9772E0")]
		public void SetRecentlyMetTimeWindow(TimeWindow value)
		{
		}

		[Address(RVA = "0x97735C", Offset = "0x97735C", VA = "0x97735C")]
		public void SetRoomId(ulong value)
		{
		}

		[Address(RVA = "0x9773D8", Offset = "0x9773D8", VA = "0x9773D8")]
		public void SetTurnOffUpdates(bool value)
		{
		}

		[Address(RVA = "0x977454", Offset = "0x977454", VA = "0x977454")]
		public static explicit operator IntPtr(RoomOptions options)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0x9774A4", Offset = "0x9774A4", VA = "0x9774A4", Slot = "1")]
		~RoomOptions()
		{
		}
	}
	public enum RoomType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671164", Offset = "0x671164")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67119C", Offset = "0x67119C")]
		Matchmaking,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6711D4", Offset = "0x6711D4")]
		Moderated,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67120C", Offset = "0x67120C")]
		Private,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671244", Offset = "0x671244")]
		Solo
	}
	public enum SdkAccountType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67127C", Offset = "0x67127C")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6712B4", Offset = "0x6712B4")]
		Oculus,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6712EC", Offset = "0x6712EC")]
		FacebookGameroom
	}
	public enum SendPolicy
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671324", Offset = "0x671324")]
		Unreliable,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67135C", Offset = "0x67135C")]
		Reliable,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671394", Offset = "0x671394")]
		Unknown
	}
	public enum ServiceProvider
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6713CC", Offset = "0x6713CC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671404", Offset = "0x671404")]
		Dropbox,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67143C", Offset = "0x67143C")]
		Facebook,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671474", Offset = "0x671474")]
		Google,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6714AC", Offset = "0x6714AC")]
		Instagram,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6714E4", Offset = "0x6714E4")]
		RemoteMedia
	}
	public enum ShareMediaStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67151C", Offset = "0x67151C")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671554", Offset = "0x671554")]
		Shared,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67158C", Offset = "0x67158C")]
		Canceled
	}
	public sealed class StandalonePlatform
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B5AC", Offset = "0x65B5AC")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Address(RVA = "0xAFBF00", Offset = "0xAFBF00", VA = "0xAFBF00")]
		public Request<PlatformInitialize> InitializeInEditor()
		{
			return null;
		}

		[Address(RVA = "0xAFC10C", Offset = "0xAFC10C", VA = "0xAFC10C")]
		public StandalonePlatform()
		{
		}
	}
	public sealed class StandalonePlatformSettings
	{
		public static string OculusPlatformTestUserEmail
		{
			[Address(RVA = "0xAFC64C", Offset = "0xAFC64C", VA = "0xAFC64C")]
			get
			{
				return null;
			}
			[Address(RVA = "0xAFC69C", Offset = "0xAFC69C", VA = "0xAFC69C")]
			set
			{
			}
		}

		public static string OculusPlatformTestUserPassword
		{
			[Address(RVA = "0xAFC6A0", Offset = "0xAFC6A0", VA = "0xAFC6A0")]
			get
			{
				return null;
			}
			[Address(RVA = "0xAFC6F0", Offset = "0xAFC6F0", VA = "0xAFC6F0")]
			set
			{
			}
		}

		public static string OculusPlatformTestUserAccessToken
		{
			[Address(RVA = "0xAFC0BC", Offset = "0xAFC0BC", VA = "0xAFC0BC")]
			get
			{
				return null;
			}
			[Address(RVA = "0xAFC6F4", Offset = "0xAFC6F4", VA = "0xAFC6F4")]
			set
			{
			}
		}

		[Address(RVA = "0xAFC6F8", Offset = "0xAFC6F8", VA = "0xAFC6F8")]
		public StandalonePlatformSettings()
		{
		}
	}
	public enum SystemVoipStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6715C4", Offset = "0x6715C4")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6715FC", Offset = "0x6715FC")]
		Unavailable,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671634", Offset = "0x671634")]
		Suppressed,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67166C", Offset = "0x67166C")]
		Active
	}
	public enum TimeWindow
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6716A4", Offset = "0x6716A4")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6716DC", Offset = "0x6716DC")]
		OneHour,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671714", Offset = "0x671714")]
		OneDay,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67174C", Offset = "0x67174C")]
		OneWeek,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671784", Offset = "0x671784")]
		ThirtyDays,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6717BC", Offset = "0x6717BC")]
		NinetyDays
	}
	public class UserOptions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Address(RVA = "0xAFC700", Offset = "0xAFC700", VA = "0xAFC700")]
		public UserOptions()
		{
		}

		[Address(RVA = "0xAFC778", Offset = "0xAFC778", VA = "0xAFC778")]
		public void SetMaxUsers(uint value)
		{
		}

		[Address(RVA = "0xAFC7F4", Offset = "0xAFC7F4", VA = "0xAFC7F4")]
		public void AddServiceProvider(ServiceProvider value)
		{
		}

		[Address(RVA = "0xAFC870", Offset = "0xAFC870", VA = "0xAFC870")]
		public void ClearServiceProviders()
		{
		}

		[Address(RVA = "0xAFC8DC", Offset = "0xAFC8DC", VA = "0xAFC8DC")]
		public void SetTimeWindow(TimeWindow value)
		{
		}

		[Address(RVA = "0xAFC958", Offset = "0xAFC958", VA = "0xAFC958")]
		public static explicit operator IntPtr(UserOptions options)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0xAFC9A8", Offset = "0xAFC9A8", VA = "0xAFC9A8", Slot = "1")]
		~UserOptions()
		{
		}
	}
	public enum UserOrdering
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6717F4", Offset = "0x6717F4")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67182C", Offset = "0x67182C")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671864", Offset = "0x671864")]
		PresenceAlphabetical
	}
	public enum UserPresenceStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67189C", Offset = "0x67189C")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6718D4", Offset = "0x6718D4")]
		Online,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67190C", Offset = "0x67190C")]
		Offline
	}
	public class VoipAudioSourceHiLevel : MonoBehaviour
	{
		public class FilterReadDelegate : MonoBehaviour
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public VoipAudioSourceHiLevel parent;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float[] scratchBuffer;

			[Address(RVA = "0xAFE3C4", Offset = "0xAFE3C4", VA = "0xAFE3C4")]
			private void Awake()
			{
			}

			[Address(RVA = "0xAFE47C", Offset = "0xAFE47C", VA = "0xAFE47C")]
			private void OnAudioFilterRead(float[] data, int channels)
			{
			}

			[Address(RVA = "0xAFEA4C", Offset = "0xAFEA4C", VA = "0xAFEA4C")]
			public FilterReadDelegate()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int initialPlaybackDelayMS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource audioSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float peakAmplitude;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IVoipPCMSource pcmSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int audioSystemPlaybackFrequency;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool verboseLogging;

		public ulong senderID
		{
			[Address(RVA = "0xAFB76C", Offset = "0xAFB76C", VA = "0xAFB76C")]
			set
			{
			}
		}

		[Address(RVA = "0xAFDC48", Offset = "0xAFDC48", VA = "0xAFDC48")]
		protected void Stop()
		{
		}

		[Address(RVA = "0xAFDC4C", Offset = "0xAFDC4C", VA = "0xAFDC4C")]
		private VoipSampleRate SampleRateToEnum(int rate)
		{
			return default(VoipSampleRate);
		}

		[Address(RVA = "0xAFDC88", Offset = "0xAFDC88", VA = "0xAFDC88")]
		protected void Awake()
		{
		}

		[Address(RVA = "0xAFDF84", Offset = "0xAFDF84", VA = "0xAFDF84")]
		private void Start()
		{
		}

		[Address(RVA = "0xAFDFB4", Offset = "0xAFDFB4", VA = "0xAFDFB4", Slot = "4")]
		protected virtual void CreatePCMSource()
		{
		}

		[Address(RVA = "0xAFE01C", Offset = "0xAFE01C", VA = "0xAFE01C")]
		protected static int MSToElements(int ms)
		{
			return default(int);
		}

		[Address(RVA = "0xAFE0A4", Offset = "0xAFE0A4", VA = "0xAFE0A4")]
		private void Update()
		{
		}

		[Address(RVA = "0xAFE3B8", Offset = "0xAFE3B8", VA = "0xAFE3B8")]
		public VoipAudioSourceHiLevel()
		{
		}
	}
	public enum VoipBitrate
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671944", Offset = "0x671944")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x67197C", Offset = "0x67197C")]
		B16000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6719B4", Offset = "0x6719B4")]
		B24000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x6719EC", Offset = "0x6719EC")]
		B32000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671A24", Offset = "0x671A24")]
		B64000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671A5C", Offset = "0x671A5C")]
		B96000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671A94", Offset = "0x671A94")]
		B128000
	}
	public enum VoipDtxState
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671ACC", Offset = "0x671ACC")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671B04", Offset = "0x671B04")]
		Enabled,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671B3C", Offset = "0x671B3C")]
		Disabled
	}
	public enum VoipMuteState
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671B74", Offset = "0x671B74")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671BAC", Offset = "0x671BAC")]
		Muted,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671BE4", Offset = "0x671BE4")]
		Unmuted
	}
	public class VoipOptions
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr Handle;

		[Address(RVA = "0xAFEA54", Offset = "0xAFEA54", VA = "0xAFEA54")]
		public VoipOptions()
		{
		}

		[Address(RVA = "0xAFEACC", Offset = "0xAFEACC", VA = "0xAFEACC")]
		public void SetBitrateForNewConnections(VoipBitrate value)
		{
		}

		[Address(RVA = "0xAFEB48", Offset = "0xAFEB48", VA = "0xAFEB48")]
		public void SetCreateNewConnectionUseDtx(VoipDtxState value)
		{
		}

		[Address(RVA = "0xAFDAB0", Offset = "0xAFDAB0", VA = "0xAFDAB0")]
		public static explicit operator IntPtr(VoipOptions options)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0xAFEBC4", Offset = "0xAFEBC4", VA = "0xAFEBC4", Slot = "1")]
		~VoipOptions()
		{
		}
	}
	public class VoipPCMSourceNative : IVoipPCMSource
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong senderID;

		[Address(RVA = "0xAFEC88", Offset = "0xAFEC88", VA = "0xAFEC88", Slot = "4")]
		public int GetPCM(float[] dest, int length)
		{
			return default(int);
		}

		[Address(RVA = "0xAFED48", Offset = "0xAFED48", VA = "0xAFED48", Slot = "5")]
		public void SetSenderID(ulong senderID)
		{
		}

		[Address(RVA = "0xAFED50", Offset = "0xAFED50", VA = "0xAFED50", Slot = "7")]
		public int PeekSizeElements()
		{
			return default(int);
		}

		[Address(RVA = "0xAFEDF0", Offset = "0xAFEDF0", VA = "0xAFEDF0", Slot = "6")]
		public void Update()
		{
		}

		[Address(RVA = "0xAFE014", Offset = "0xAFE014", VA = "0xAFE014")]
		public VoipPCMSourceNative()
		{
		}
	}
	public enum VoipSampleRate
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671C1C", Offset = "0x671C1C")]
		Unknown,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671C54", Offset = "0x671C54")]
		HZ24000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671C8C", Offset = "0x671C8C")]
		HZ44100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x671CC4", Offset = "0x671CC4")]
		HZ48000
	}
	public class WindowsPlatform
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B5C0", Offset = "0x65B5C0")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Address(RVA = "0xAFEDF4", Offset = "0xAFEDF4", VA = "0xAFEDF4")]
		private void CPPLogCallback(IntPtr tag, IntPtr message)
		{
		}

		[Address(RVA = "0xAFEECC", Offset = "0xAFEECC", VA = "0xAFEECC")]
		private IntPtr getCallbackPointer()
		{
			return default(IntPtr);
		}

		[Address(RVA = "0xAFEF0C", Offset = "0xAFEF0C", VA = "0xAFEF0C")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Address(RVA = "0xAFEFF8", Offset = "0xAFEFF8", VA = "0xAFEFF8")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}

		[Address(RVA = "0xAFF114", Offset = "0xAFF114", VA = "0xAFF114")]
		public WindowsPlatform()
		{
		}
	}
}
namespace Oculus.Platform.Models
{
	public class AbuseReportRecording
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string RecordingUuid;

		[Address(RVA = "0x96B824", Offset = "0x96B824", VA = "0x96B824")]
		public AbuseReportRecording(IntPtr o)
		{
		}
	}
	public class AchievementDefinition
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly AchievementType Type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint BitfieldLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong Target;

		[Address(RVA = "0x974B90", Offset = "0x974B90", VA = "0x974B90")]
		public AchievementDefinition(IntPtr o)
		{
		}
	}
	public class AchievementDefinitionList : DeserializableList<AchievementDefinition>
	{
		[Address(RVA = "0x96B998", Offset = "0x96B998", VA = "0x96B998")]
		public AchievementDefinitionList(IntPtr a)
		{
		}
	}
	public class AchievementProgress
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bitfield;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong Count;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool IsUnlocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly DateTime UnlockTime;

		[Address(RVA = "0x974C48", Offset = "0x974C48", VA = "0x974C48")]
		public AchievementProgress(IntPtr o)
		{
		}
	}
	public class AchievementProgressList : DeserializableList<AchievementProgress>
	{
		[Address(RVA = "0x96BC8C", Offset = "0x96BC8C", VA = "0x96BC8C")]
		public AchievementProgressList(IntPtr a)
		{
		}
	}
	public class AchievementUpdate
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool JustUnlocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Name;

		[Address(RVA = "0x96BF80", Offset = "0x96BF80", VA = "0x96BF80")]
		public AchievementUpdate(IntPtr o)
		{
		}
	}
	public class ApplicationVersion
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int CurrentCode;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string CurrentName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly int LatestCode;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string LatestName;

		[Address(RVA = "0x96C108", Offset = "0x96C108", VA = "0x96C108")]
		public ApplicationVersion(IntPtr o)
		{
		}
	}
	public class AssetDetails
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string AssetType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string DownloadStatus;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Filepath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string IapStatus;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly LanguagePackInfo LanguageOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671CFC", Offset = "0x671CFC")]
		public readonly LanguagePackInfo Language;

		[Address(RVA = "0x96C2AC", Offset = "0x96C2AC", VA = "0x96C2AC")]
		public AssetDetails(IntPtr o)
		{
		}
	}
	public class AssetDetailsList : DeserializableList<AssetDetails>
	{
		[Address(RVA = "0x96C4B4", Offset = "0x96C4B4", VA = "0x96C4B4")]
		public AssetDetailsList(IntPtr a)
		{
		}
	}
	public class AssetFileDeleteResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetFileId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong AssetId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Filepath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool Success;

		[Address(RVA = "0x96C778", Offset = "0x96C778", VA = "0x96C778")]
		public AssetFileDeleteResult(IntPtr o)
		{
		}
	}
	public class AssetFileDownloadCancelResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetFileId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong AssetId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Filepath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool Success;

		[Address(RVA = "0x96C920", Offset = "0x96C920", VA = "0x96C920")]
		public AssetFileDownloadCancelResult(IntPtr o)
		{
		}
	}
	public class AssetFileDownloadResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Address(RVA = "0x96CAC8", Offset = "0x96CAC8", VA = "0x96CAC8")]
		public AssetFileDownloadResult(IntPtr o)
		{
		}
	}
	public class AssetFileDownloadUpdate
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetFileId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong AssetId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint BytesTotal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly int BytesTransferred;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool Completed;

		[Address(RVA = "0x96CC4C", Offset = "0x96CC4C", VA = "0x96CC4C")]
		public AssetFileDownloadUpdate(IntPtr o)
		{
		}
	}
	public class CalApplicationFinalized
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int CountdownMS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string LaunchDetails;

		[Address(RVA = "0x96CE04", Offset = "0x96CE04", VA = "0x96CE04")]
		public CalApplicationFinalized(IntPtr o)
		{
		}
	}
	public class CalApplicationProposed
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Address(RVA = "0x96CF98", Offset = "0x96CF98", VA = "0x96CF98")]
		public CalApplicationProposed(IntPtr o)
		{
		}
	}
	public class CalApplicationSuggestion
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string SocialContext;

		[Address(RVA = "0x974DBC", Offset = "0x974DBC", VA = "0x974DBC")]
		public CalApplicationSuggestion(IntPtr o)
		{
		}
	}
	public class CalApplicationSuggestionList : DeserializableList<CalApplicationSuggestion>
	{
		[Address(RVA = "0x96D16C", Offset = "0x96D16C", VA = "0x96D16C")]
		public CalApplicationSuggestionList(IntPtr a)
		{
		}
	}
	public class CloudStorageConflictMetadata
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly CloudStorageMetadata Local;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CloudStorageMetadata Remote;

		[Address(RVA = "0x96D430", Offset = "0x96D430", VA = "0x96D430")]
		public CloudStorageConflictMetadata(IntPtr o)
		{
		}
	}
	public class CloudStorageData
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bucket;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly byte[] Data;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint DataSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Key;

		[Address(RVA = "0x96D5FC", Offset = "0x96D5FC", VA = "0x96D5FC")]
		public CloudStorageData(IntPtr o)
		{
		}
	}
	public class CloudStorageMetadata
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bucket;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly long Counter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint DataSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string ExtraData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Key;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly ulong SaveTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly CloudStorageDataStatus Status;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string VersionHandle;

		[Address(RVA = "0x96DA94", Offset = "0x96DA94", VA = "0x96DA94")]
		public CloudStorageMetadata(IntPtr o)
		{
		}
	}
	public class CloudStorageMetadataList : DeserializableList<CloudStorageMetadata>
	{
		[Address(RVA = "0x96D7A0", Offset = "0x96D7A0", VA = "0x96D7A0")]
		public CloudStorageMetadataList(IntPtr a)
		{
		}
	}
	public class CloudStorageUpdateResponse
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Bucket;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Key;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CloudStorageUpdateStatus Status;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string VersionHandle;

		[Address(RVA = "0x96DC78", Offset = "0x96DC78", VA = "0x96DC78")]
		public CloudStorageUpdateResponse(IntPtr o)
		{
		}
	}
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x659524", Offset = "0x659524")]
	public class DeserializableList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<T> _Data;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _NextUrl;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _PreviousUrl;

		public int Count => default(int);

		private bool System.Collections.Generic.ICollection<T>.IsReadOnly => default(bool);

		public T Item
		{
			get
			{
				return (T)null;
			}
			set
			{
			}
		}

		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x688CA0", Offset = "0x688CA0")]
		public List<T> Data => null;

		public bool HasNextPage => default(bool);

		public bool HasPreviousPage => default(bool);

		public string NextUrl => null;

		public string PreviousUrl => null;

		public int IndexOf(T obj)
		{
			return default(int);
		}

		public void Add(T item)
		{
		}

		public void Clear()
		{
		}

		public bool Contains(T item)
		{
			return default(bool);
		}

		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		public void Insert(int index, T item)
		{
		}

		public bool Remove(T item)
		{
			return default(bool);
		}

		public void RemoveAt(int index)
		{
		}

		private IEnumerator GetEnumerator1()
		{
			return null;
		}

		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	public class Error
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int Code;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int HttpCode;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Message;

		[Address(RVA = "0x966FC8", Offset = "0x966FC8", VA = "0x966FC8")]
		public Error(int code, string message, int httpCode)
		{
		}
	}
	public class HttpTransferUpdate
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly byte[] Payload;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool IsCompleted;

		[Address(RVA = "0x96DE1C", Offset = "0x96DE1C", VA = "0x96DE1C")]
		public HttpTransferUpdate(IntPtr o)
		{
		}
	}
	public class InstalledApplication
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ApplicationId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string PackageName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Status;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int VersionCode;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string VersionName;

		[Address(RVA = "0x974E54", Offset = "0x974E54", VA = "0x974E54")]
		public InstalledApplication(IntPtr o)
		{
		}
	}
	public class InstalledApplicationList : DeserializableList<InstalledApplication>
	{
		[Address(RVA = "0x96E0B0", Offset = "0x96E0B0", VA = "0x96E0B0")]
		public InstalledApplicationList(IntPtr a)
		{
		}
	}
	public class LanguagePackInfo
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string EnglishName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string NativeName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Tag;

		[Address(RVA = "0x974D14", Offset = "0x974D14", VA = "0x974D14")]
		public LanguagePackInfo(IntPtr o)
		{
		}
	}
	public class LaunchBlockFlowResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidBlock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool DidCancel;

		[Address(RVA = "0x96E3D4", Offset = "0x96E3D4", VA = "0x96E3D4")]
		public LaunchBlockFlowResult(IntPtr o)
		{
		}
	}
	public class LaunchDetails
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string DeeplinkMessage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string LaunchSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly LaunchType LaunchType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong RoomID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly UserList UsersOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671D34", Offset = "0x671D34")]
		public readonly UserList Users;

		[Address(RVA = "0x974F1C", Offset = "0x974F1C", VA = "0x974F1C")]
		public LaunchDetails(IntPtr o)
		{
		}
	}
	public class LaunchFriendRequestFlowResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool DidSendRequest;

		[Address(RVA = "0x96E560", Offset = "0x96E560", VA = "0x96E560")]
		public LaunchFriendRequestFlowResult(IntPtr o)
		{
		}
	}
	public class LaunchReportFlowResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong UserReportId;

		[Address(RVA = "0x96E74C", Offset = "0x96E74C", VA = "0x96E74C")]
		public LaunchReportFlowResult(IntPtr o)
		{
		}
	}
	public class LaunchUnblockFlowResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool DidUnblock;

		[Address(RVA = "0x96E934", Offset = "0x96E934", VA = "0x96E934")]
		public LaunchUnblockFlowResult(IntPtr o)
		{
		}
	}
	public class LeaderboardEntry
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly byte[] ExtraData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int Rank;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly long Score;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly DateTime Timestamp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly User User;

		[Address(RVA = "0x975028", Offset = "0x975028", VA = "0x975028")]
		public LeaderboardEntry(IntPtr o)
		{
		}
	}
	public class LeaderboardEntryList : DeserializableList<LeaderboardEntry>
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong TotalCount;

		[Address(RVA = "0x96EB88", Offset = "0x96EB88", VA = "0x96EB88")]
		public LeaderboardEntryList(IntPtr a)
		{
		}
	}
	public class LinkedAccount
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string AccessToken;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ServiceProvider ServiceProvider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string UserId;

		[Address(RVA = "0x975114", Offset = "0x975114", VA = "0x975114")]
		public LinkedAccount(IntPtr o)
		{
		}
	}
	public class LinkedAccountList : DeserializableList<LinkedAccount>
	{
		[Address(RVA = "0x96EEFC", Offset = "0x96EEFC", VA = "0x96EEFC")]
		public LinkedAccountList(IntPtr a)
		{
		}
	}
	public class LivestreamingApplicationStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool StreamingEnabled;

		[Address(RVA = "0x970220", Offset = "0x970220", VA = "0x970220")]
		public LivestreamingApplicationStatus(IntPtr o)
		{
		}
	}
	public class LivestreamingStartResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly LivestreamingStartStatus StreamingResult;

		[Address(RVA = "0x9703F8", Offset = "0x9703F8", VA = "0x9703F8")]
		public LivestreamingStartResult(IntPtr o)
		{
		}
	}
	public class LivestreamingStatus
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool CommentsVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool IsPaused;

		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public readonly bool LivestreamingEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int LivestreamingType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool MicEnabled;

		[Address(RVA = "0x97056C", Offset = "0x97056C", VA = "0x97056C")]
		public LivestreamingStatus(IntPtr o)
		{
		}
	}
	public class LivestreamingVideoStats
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int CommentCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int ReactionCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string TotalViews;

		[Address(RVA = "0x970790", Offset = "0x970790", VA = "0x970790")]
		public LivestreamingVideoStats(IntPtr o)
		{
		}
	}
	public class MatchmakingAdminSnapshot
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingAdminSnapshotCandidateList Candidates;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double MyCurrentThreshold;

		[Address(RVA = "0x970924", Offset = "0x970924", VA = "0x970924")]
		public MatchmakingAdminSnapshot(IntPtr o)
		{
		}
	}
	public class MatchmakingAdminSnapshotCandidate
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool CanMatch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double MyTotalScore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly double TheirCurrentThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly double TheirTotalScore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string TraceId;

		[Address(RVA = "0x975394", Offset = "0x975394", VA = "0x975394")]
		public MatchmakingAdminSnapshotCandidate(IntPtr o)
		{
		}
	}
	public class MatchmakingAdminSnapshotCandidateList : DeserializableList<MatchmakingAdminSnapshotCandidate>
	{
		[Address(RVA = "0x9751BC", Offset = "0x9751BC", VA = "0x9751BC")]
		public MatchmakingAdminSnapshotCandidateList(IntPtr a)
		{
		}
	}
	public class MatchmakingBrowseResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingEnqueueResult EnqueueResult;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly RoomList Rooms;

		[Address(RVA = "0x970B44", Offset = "0x970B44", VA = "0x970B44")]
		public MatchmakingBrowseResult(IntPtr o)
		{
		}
	}
	public class MatchmakingEnqueuedUser
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Dictionary<string, string> CustomData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly User UserOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671D6C", Offset = "0x671D6C")]
		public readonly User User;

		[Address(RVA = "0x975460", Offset = "0x975460", VA = "0x975460")]
		public MatchmakingEnqueuedUser(IntPtr o)
		{
		}
	}
	public class MatchmakingEnqueuedUserList : DeserializableList<MatchmakingEnqueuedUser>
	{
		[Address(RVA = "0x975544", Offset = "0x975544", VA = "0x975544")]
		public MatchmakingEnqueuedUserList(IntPtr a)
		{
		}
	}
	public class MatchmakingEnqueueResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingAdminSnapshot AdminSnapshotOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671DA4", Offset = "0x671DA4")]
		public readonly MatchmakingAdminSnapshot AdminSnapshot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint AverageWait;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly uint MatchesInLastHourCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly uint MaxExpectedWait;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Pool;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly uint RecentMatchPercentage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string RequestHash;

		[Address(RVA = "0x970D10", Offset = "0x970D10", VA = "0x970D10")]
		public MatchmakingEnqueueResult(IntPtr o)
		{
		}
	}
	public class MatchmakingEnqueueResultAndRoom
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchmakingEnqueueResult MatchmakingEnqueueResult;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Room Room;

		[Address(RVA = "0x970F48", Offset = "0x970F48", VA = "0x970F48")]
		public MatchmakingEnqueueResultAndRoom(IntPtr o)
		{
		}
	}
	public class MatchmakingStats
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint DrawCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly uint LossCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint SkillLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly uint WinCount;

		[Address(RVA = "0x9714E4", Offset = "0x9714E4", VA = "0x9714E4")]
		public MatchmakingStats(IntPtr o)
		{
		}
	}
	public class NetworkingPeer
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x671DDC", Offset = "0x671DDC")]
		private ulong <ID>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x671DEC", Offset = "0x671DEC")]
		private PeerConnectionState <State>k__BackingField;

		public ulong ID
		{
			[Address(RVA = "0x97572C", Offset = "0x97572C", VA = "0x97572C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68135C", Offset = "0x68135C")]
			get
			{
				return default(ulong);
			}
			[Address(RVA = "0x97571C", Offset = "0x97571C", VA = "0x97571C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68136C", Offset = "0x68136C")]
			private set
			{
			}
		}

		public PeerConnectionState State
		{
			[Address(RVA = "0x975734", Offset = "0x975734", VA = "0x975734")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68137C", Offset = "0x68137C")]
			get
			{
				return default(PeerConnectionState);
			}
			[Address(RVA = "0x975724", Offset = "0x975724", VA = "0x975724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68138C", Offset = "0x68138C")]
			private set
			{
			}
		}

		[Address(RVA = "0x9716AC", Offset = "0x9716AC", VA = "0x9716AC")]
		public NetworkingPeer(ulong id, PeerConnectionState state)
		{
		}
	}
	public class OrgScopedID
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Address(RVA = "0x9717D4", Offset = "0x9717D4", VA = "0x9717D4")]
		public OrgScopedID(IntPtr o)
		{
		}
	}
	public class Party
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly UserList InvitedUsersOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671DFC", Offset = "0x671DFC")]
		public readonly UserList InvitedUsers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly User LeaderOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671E34", Offset = "0x671E34")]
		public readonly User Leader;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly Room RoomOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671E6C", Offset = "0x671E6C")]
		public readonly Room Room;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly UserList UsersOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671EA4", Offset = "0x671EA4")]
		public readonly UserList Users;

		[Address(RVA = "0x9719A8", Offset = "0x9719A8", VA = "0x9719A8")]
		public Party(IntPtr o)
		{
		}
	}
	public class PartyID
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Address(RVA = "0x971D14", Offset = "0x971D14", VA = "0x971D14")]
		public PartyID(IntPtr o)
		{
		}
	}
	public class PartyUpdateNotification
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly PartyUpdateAction Action;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong PartyId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly ulong SenderId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string UpdateTimestamp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string UserAlias;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly ulong UserId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string UserName;

		[Address(RVA = "0x971F74", Offset = "0x971F74", VA = "0x971F74")]
		public PartyUpdateNotification(IntPtr o)
		{
		}
	}
	public class Pid
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Id;

		[Address(RVA = "0x97573C", Offset = "0x97573C", VA = "0x97573C")]
		public Pid(IntPtr o)
		{
		}
	}
	public class PidList : DeserializableList<Pid>
	{
		[Address(RVA = "0x972148", Offset = "0x972148", VA = "0x972148")]
		public PidList(IntPtr a)
		{
		}
	}
	public class PingResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x671EDC", Offset = "0x671EDC")]
		private ulong <ID>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong? pingTimeUsec;

		public ulong ID
		{
			[Address(RVA = "0x9757CC", Offset = "0x9757CC", VA = "0x9757CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68139C", Offset = "0x68139C")]
			get
			{
				return default(ulong);
			}
			[Address(RVA = "0x9757C4", Offset = "0x9757C4", VA = "0x9757C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6813AC", Offset = "0x6813AC")]
			private set
			{
			}
		}

		public ulong PingTimeUsec
		{
			[Address(RVA = "0x9757D4", Offset = "0x9757D4", VA = "0x9757D4")]
			get
			{
				return default(ulong);
			}
		}

		public bool IsTimeout
		{
			[Address(RVA = "0x975850", Offset = "0x975850", VA = "0x975850")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0x97248C", Offset = "0x97248C", VA = "0x97248C")]
		public PingResult(ulong id, ulong? pingTimeUsec)
		{
		}
	}
	public class PlatformInitialize
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly PlatformInitializeResult Result;

		[Address(RVA = "0x9725B8", Offset = "0x9725B8", VA = "0x9725B8")]
		public PlatformInitialize(IntPtr o)
		{
		}
	}
	public class Product
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Description;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string FormattedPrice;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Sku;

		[Address(RVA = "0x9758AC", Offset = "0x9758AC", VA = "0x9758AC")]
		public Product(IntPtr o)
		{
		}
	}
	public class ProductList : DeserializableList<Product>
	{
		[Address(RVA = "0x97272C", Offset = "0x97272C", VA = "0x97272C")]
		public ProductList(IntPtr a)
		{
		}
	}
	public class Purchase
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly DateTime ExpirationTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly DateTime GrantTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Sku;

		[Address(RVA = "0x972A20", Offset = "0x972A20", VA = "0x972A20")]
		public Purchase(IntPtr o)
		{
		}
	}
	public class PurchaseList : DeserializableList<Purchase>
	{
		[Address(RVA = "0x972BC4", Offset = "0x972BC4", VA = "0x972BC4")]
		public PurchaseList(IntPtr a)
		{
		}
	}
	public class Room
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ApplicationID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Dictionary<string, string> DataStore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Description;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly UserList InvitedUsersOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671EEC", Offset = "0x671EEC")]
		public readonly UserList InvitedUsers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly bool IsMembershipLocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly RoomJoinPolicy JoinPolicy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly RoomJoinability Joinability;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly MatchmakingEnqueuedUserList MatchedUsersOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671F24", Offset = "0x671F24")]
		public readonly MatchmakingEnqueuedUserList MatchedUsers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly uint MaxUsers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly string Name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly User OwnerOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671F5C", Offset = "0x671F5C")]
		public readonly User Owner;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public readonly RoomType Type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public readonly UserList UsersOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671F94", Offset = "0x671F94")]
		public readonly UserList Users;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public readonly uint Version;

		[Address(RVA = "0x971114", Offset = "0x971114", VA = "0x971114")]
		public Room(IntPtr o)
		{
		}
	}
	public class RoomList : DeserializableList<Room>
	{
		[Address(RVA = "0x97343C", Offset = "0x97343C", VA = "0x97343C")]
		public RoomList(IntPtr a)
		{
		}
	}
	public class RoomInviteNotification
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong RoomID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly ulong SenderID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly DateTime SentTime;

		[Address(RVA = "0x972FA4", Offset = "0x972FA4", VA = "0x972FA4")]
		public RoomInviteNotification(IntPtr o)
		{
		}
	}
	public class RoomInviteNotificationList : DeserializableList<RoomInviteNotification>
	{
		[Address(RVA = "0x973148", Offset = "0x973148", VA = "0x973148")]
		public RoomInviteNotificationList(IntPtr a)
		{
		}
	}
	public class SdkAccount
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly SdkAccountType AccountType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong UserId;

		[Address(RVA = "0x975964", Offset = "0x975964", VA = "0x975964")]
		public SdkAccount(IntPtr o)
		{
		}
	}
	public class SdkAccountList : DeserializableList<SdkAccount>
	{
		[Address(RVA = "0x973908", Offset = "0x973908", VA = "0x973908")]
		public SdkAccountList(IntPtr a)
		{
		}
	}
	public class ShareMediaResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ShareMediaStatus Status;

		[Address(RVA = "0x973BCC", Offset = "0x973BCC", VA = "0x973BCC")]
		public ShareMediaResult(IntPtr o)
		{
		}
	}
	public class SystemPermission
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool HasPermission;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly PermissionGrantStatus PermissionGrantStatus;

		[Address(RVA = "0x973E58", Offset = "0x973E58", VA = "0x973E58")]
		public SystemPermission(IntPtr o)
		{
		}
	}
	public class SystemVoipState
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly VoipMuteState MicrophoneMuted;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly SystemVoipStatus Status;

		[Address(RVA = "0x973FE0", Offset = "0x973FE0", VA = "0x973FE0")]
		public SystemVoipState(IntPtr o)
		{
		}
	}
	public class User
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string ImageURL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string InviteToken;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string OculusID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Presence;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly UserPresenceStatus PresenceStatus;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string SmallImageUrl;

		[Address(RVA = "0x974164", Offset = "0x974164", VA = "0x974164")]
		public User(IntPtr o)
		{
		}
	}
	public class UserList : DeserializableList<User>
	{
		[Address(RVA = "0x97462C", Offset = "0x97462C", VA = "0x97462C")]
		public UserList(IntPtr a)
		{
		}
	}
	public class UserAndRoom
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Room RoomOptional;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x671FCC", Offset = "0x671FCC")]
		public readonly Room Room;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly User User;

		[Address(RVA = "0x9759FC", Offset = "0x9759FC", VA = "0x9759FC")]
		public UserAndRoom(IntPtr o)
		{
		}
	}
	public class UserAndRoomList : DeserializableList<UserAndRoom>
	{
		[Address(RVA = "0x974338", Offset = "0x974338", VA = "0x974338")]
		public UserAndRoomList(IntPtr a)
		{
		}
	}
	public class UserProof
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Value;

		[Address(RVA = "0x974920", Offset = "0x974920", VA = "0x974920")]
		public UserProof(IntPtr o)
		{
		}
	}
	public class UserReportID
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool DidCancel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Address(RVA = "0x974AF4", Offset = "0x974AF4", VA = "0x974AF4")]
		public UserReportID(IntPtr o)
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrVoiceChat
{
	public class P2PManager
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float UPDATE_DELAY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong m_remoteID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PeerConnectionState m_state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_timeForNextUpdate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly byte PACKET_SIZE;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		private static readonly byte PACKET_FORMAT;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly byte[] sendTransformBuffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly byte[] receiveTransformBuffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 receivedPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 receivedPositionPrior;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion receivedRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion receivedRotationPrior;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float receivedTime;

		public bool Connected
		{
			[Address(RVA = "0xAF6DE0", Offset = "0xAF6DE0", VA = "0xAF6DE0")]
			get
			{
				return default(bool);
			}
		}

		public bool ShouldSendHeadUpdate
		{
			[Address(RVA = "0xAF75BC", Offset = "0xAF75BC", VA = "0xAF75BC")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xAF6AD4", Offset = "0xAF6AD4", VA = "0xAF6AD4")]
		public P2PManager(Transform initialHeadTransform)
		{
		}

		[Address(RVA = "0xAF6C3C", Offset = "0xAF6C3C", VA = "0xAF6C3C")]
		public void ConnectTo(ulong userID)
		{
		}

		[Address(RVA = "0xAF6DAC", Offset = "0xAF6DAC", VA = "0xAF6DAC")]
		public void Disconnect()
		{
		}

		[Address(RVA = "0xAF6DF0", Offset = "0xAF6DF0", VA = "0xAF6DF0")]
		private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Address(RVA = "0xAF7020", Offset = "0xAF7020", VA = "0xAF7020")]
		private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}

		[Address(RVA = "0xAF7600", Offset = "0xAF7600", VA = "0xAF7600")]
		public void SendHeadTransform(Transform headTransform)
		{
		}

		[Address(RVA = "0xAF7848", Offset = "0xAF7848", VA = "0xAF7848")]
		private void PackFloat(float f, byte[] buf, ref int offset)
		{
		}

		[Address(RVA = "0xAF78F0", Offset = "0xAF78F0", VA = "0xAF78F0")]
		public void GetRemoteHeadTransform(Transform headTransform)
		{
		}
	}
	public class PlatformManager : MonoBehaviour
	{
		public enum State
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			INITIALIZING,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WAITING_TO_CALL_OR_ANSWER,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WAITING_FOR_ANSWER,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			CONNECTED_IN_A_ROOM,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			HANGUP
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B5D4", Offset = "0x65B5D4")]
		private sealed class <>c__DisplayClass31_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RoomManager.Invite invite;

			[Address(RVA = "0xAF9BB0", Offset = "0xAF9BB0", VA = "0xAF9BB0")]
			public <>c__DisplayClass31_0()
			{
			}

			[Address(RVA = "0xAF9BC4", Offset = "0xAF9BC4", VA = "0xAF9BC4")]
			internal void <SetActiveInvites>b__0()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject m_invitesList;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject m_invitePrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Camera m_camera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_remoteHead;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private State m_currentState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RoomManager m_roomManager;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private P2PManager m_p2pManager;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VoipManager m_voipManager;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ulong m_myID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string m_myOculusID;

		public static State CurrentState
		{
			[Address(RVA = "0xAF8DC8", Offset = "0xAF8DC8", VA = "0xAF8DC8")]
			get
			{
				return default(State);
			}
		}

		public static ulong MyID
		{
			[Address(RVA = "0xAF6CD0", Offset = "0xAF6CD0", VA = "0xAF6CD0")]
			get
			{
				return default(ulong);
			}
		}

		public static string MyOculusID
		{
			[Address(RVA = "0xAF8E40", Offset = "0xAF8E40", VA = "0xAF8E40")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xAF7E10", Offset = "0xAF7E10", VA = "0xAF7E10")]
		private void Update()
		{
		}

		[Address(RVA = "0xAF80A0", Offset = "0xAF80A0", VA = "0xAF80A0")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAF8868", Offset = "0xAF8868", VA = "0xAF8868")]
		private void Start()
		{
		}

		[Address(RVA = "0xAF8904", Offset = "0xAF8904", VA = "0xAF8904")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Address(RVA = "0xAF8AB8", Offset = "0xAF8AB8", VA = "0xAF8AB8")]
		private void GetLoggedInUserCallback(Message<Oculus.Platform.Models.User> msg)
		{
		}

		[Address(RVA = "0xAF8C30", Offset = "0xAF8C30", VA = "0xAF8C30")]
		private void OnApplicationQuit()
		{
		}

		[Address(RVA = "0xAF8A00", Offset = "0xAF8A00", VA = "0xAF8A00")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Address(RVA = "0xAF8F64", Offset = "0xAF8F64", VA = "0xAF8F64")]
		public void CallFriendOnClick()
		{
		}

		[Address(RVA = "0xAF90A8", Offset = "0xAF90A8", VA = "0xAF90A8")]
		public void HangupOnClick()
		{
		}

		[Address(RVA = "0xAF90D4", Offset = "0xAF90D4", VA = "0xAF90D4")]
		public void QuitOnClick()
		{
		}

		[Address(RVA = "0xAF90DC", Offset = "0xAF90DC", VA = "0xAF90DC")]
		public static void AnswerCallOnClick(ulong roomID)
		{
		}

		[Address(RVA = "0xAF82A4", Offset = "0xAF82A4", VA = "0xAF82A4")]
		public static void TransitionToState(State newState)
		{
		}

		[Address(RVA = "0xAF72E4", Offset = "0xAF72E4", VA = "0xAF72E4")]
		public static void SetBackgroundColorForState()
		{
		}

		[Address(RVA = "0xAF938C", Offset = "0xAF938C", VA = "0xAF938C")]
		public static void SetActiveInvites(List<RoomManager.Invite> invites)
		{
		}

		[Address(RVA = "0xAF9BB8", Offset = "0xAF9BB8", VA = "0xAF9BB8")]
		public PlatformManager()
		{
		}
	}
	public class RoomManager
	{
		public struct Invite
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly ulong RoomID;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly string OwnerID;

			[Address(RVA = "0xAFB434", Offset = "0xAFB434", VA = "0xAFB434")]
			public Invite(ulong roomID, string owner)
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong m_roomID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Oculus.Platform.Models.User m_remoteUser;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float INVITE_POLL_FREQ_SECONDS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_nextPollTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<ulong> m_pendingRoomRequests;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Invite> m_invites;

		public ulong RemoteUserID
		{
			[Address(RVA = "0xAF9294", Offset = "0xAF9294", VA = "0xAF9294")]
			get
			{
				return default(ulong);
			}
		}

		public string RemoteOculusID
		{
			[Address(RVA = "0xAF9C2C", Offset = "0xAF9C2C", VA = "0xAF9C2C")]
			get
			{
				return null;
			}
		}

		public bool ShouldPollInviteList
		{
			[Address(RVA = "0xAF7F1C", Offset = "0xAF7F1C", VA = "0xAF7F1C")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xAF86E0", Offset = "0xAF86E0", VA = "0xAF86E0")]
		public RoomManager()
		{
		}

		[Address(RVA = "0xAF9C90", Offset = "0xAF9C90", VA = "0xAF9C90")]
		private void LaunchedFromAcceptingInviteCallback(Message<string> msg)
		{
		}

		[Address(RVA = "0xAF8C08", Offset = "0xAF8C08", VA = "0xAF8C08")]
		public bool CheckForLaunchInvite()
		{
			return default(bool);
		}

		[Address(RVA = "0xAF8FF0", Offset = "0xAF8FF0", VA = "0xAF8FF0")]
		public void CreateRoomAndLaunchInviteMenu()
		{
		}

		[Address(RVA = "0xAF9DF4", Offset = "0xAF9DF4", VA = "0xAF9DF4")]
		private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAF9F44", Offset = "0xAF9F44", VA = "0xAF9F44")]
		private void OnLaunchInviteWorkflowComplete(Message msg)
		{
		}

		[Address(RVA = "0xAF7F5C", Offset = "0xAF7F5C", VA = "0xAF7F5C")]
		public void UpdateActiveInvitesList()
		{
		}

		[Address(RVA = "0xAF9FD0", Offset = "0xAF9FD0", VA = "0xAF9FD0")]
		private void GetRoomInviteNotificationsCallback(Message msg_untyped)
		{
		}

		[Address(RVA = "0xAFA430", Offset = "0xAFA430", VA = "0xAFA430")]
		private void GetRoomInfoCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAF91DC", Offset = "0xAF91DC", VA = "0xAF91DC")]
		public void JoinExistingRoom(ulong roomID)
		{
		}

		[Address(RVA = "0xAFA6C0", Offset = "0xAFA6C0", VA = "0xAFA6C0")]
		private void JoinRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAFAD08", Offset = "0xAFAD08", VA = "0xAFAD08")]
		private void RoomUpdateCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAF8CA0", Offset = "0xAF8CA0", VA = "0xAF8CA0")]
		public void LeaveCurrentRoom()
		{
		}
	}
	public class VoipManager
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong m_remoteID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PeerConnectionState m_state;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameObject m_remoteHead;

		public bool Connected
		{
			[Address(RVA = "0xAF937C", Offset = "0xAF937C", VA = "0xAF937C")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xAF87A8", Offset = "0xAF87A8", VA = "0xAF87A8")]
		public VoipManager(GameObject remoteHead)
		{
		}

		[Address(RVA = "0xAF92AC", Offset = "0xAF92AC", VA = "0xAF92AC")]
		public void ConnectTo(ulong userID)
		{
		}

		[Address(RVA = "0xAF8D18", Offset = "0xAF8D18", VA = "0xAF8D18")]
		public void Disconnect()
		{
		}

		[Address(RVA = "0xAFB974", Offset = "0xAFB974", VA = "0xAFB974")]
		private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Address(RVA = "0xAFBC40", Offset = "0xAFBC40", VA = "0xAFBC40")]
		private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}
	}
	public class VREyeRaycaster : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Button m_currentButton;

		[Address(RVA = "0xAFB43C", Offset = "0xAFB43C", VA = "0xAFB43C")]
		private void Update()
		{
		}

		[Address(RVA = "0xAFB674", Offset = "0xAFB674", VA = "0xAFB674")]
		public VREyeRaycaster()
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrHoops
{
	public class AchievementsManager
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string LIKES_TO_WIN = "LIKES_TO_WIN";

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_likesToWinUnlocked;

		public bool LikesToWin
		{
			[Address(RVA = "0xAE8EB0", Offset = "0xAE8EB0", VA = "0xAE8EB0")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xAE8EB8", Offset = "0xAE8EB8", VA = "0xAE8EB8")]
		public void CheckForAchievmentUpdates()
		{
		}

		[Address(RVA = "0xAE8FD8", Offset = "0xAE8FD8", VA = "0xAE8FD8")]
		public void RecordWinForLocalUser()
		{
		}

		[Address(RVA = "0xAE9034", Offset = "0xAE9034", VA = "0xAE9034")]
		public AchievementsManager()
		{
		}

		[Address(RVA = "0xAE903C", Offset = "0xAE903C", VA = "0xAE903C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6813BC", Offset = "0x6813BC")]
		private void <CheckForAchievmentUpdates>b__4_0(Message<AchievementProgressList> msg)
		{
		}
	}
	public class AIPlayer : Player
	{
		[Address(RVA = "0xAE8AD4", Offset = "0xAE8AD4", VA = "0xAE8AD4")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0xAE8E3C", Offset = "0xAE8E3C", VA = "0xAE8E3C")]
		public AIPlayer()
		{
		}
	}
	public class BallEjector : MonoBehaviour
	{
		[Address(RVA = "0xAE92C8", Offset = "0xAE92C8", VA = "0xAE92C8")]
		public BallEjector()
		{
		}
	}
	public class Camera2DController : MonoBehaviour
	{
		[Address(RVA = "0xAE92D0", Offset = "0xAE92D0", VA = "0xAE92D0")]
		private void Update()
		{
		}

		[Address(RVA = "0xAE95BC", Offset = "0xAE95BC", VA = "0xAE95BC")]
		public Camera2DController()
		{
		}
	}
	public class DetectBasket : MonoBehaviour
	{
		private enum BasketPhase
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NONE,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TOP,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			BOTH,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			BOTTOM
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BasketPhase m_phase;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Player m_owningPlayer;

		public Player Player
		{
			[Address(RVA = "0xAE95C4", Offset = "0xAE95C4", VA = "0xAE95C4")]
			set
			{
			}
		}

		[Address(RVA = "0xAE95CC", Offset = "0xAE95CC", VA = "0xAE95CC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Address(RVA = "0xAE96D4", Offset = "0xAE96D4", VA = "0xAE96D4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Address(RVA = "0xAE98D0", Offset = "0xAE98D0", VA = "0xAE98D0")]
		public DetectBasket()
		{
		}
	}
	public class FlyText : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float LIFESPAN = 3f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Vector3 m_movePerFrame;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_eol;

		[Address(RVA = "0xAE98D8", Offset = "0xAE98D8", VA = "0xAE98D8")]
		private void Start()
		{
		}

		[Address(RVA = "0xAE99A8", Offset = "0xAE99A8", VA = "0xAE99A8")]
		private void Update()
		{
		}

		[Address(RVA = "0xAE9B0C", Offset = "0xAE9B0C", VA = "0xAE9B0C")]
		public FlyText()
		{
		}
	}
	public class GoalMover : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float MAX_OFFSET;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_speed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float MOVE_TOLERANCE = 0.1f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 m_expectedPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_moveDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_nextMoveDirection;

		public Vector3 ExpectedPosition
		{
			[Address(RVA = "0xAE9BA8", Offset = "0xAE9BA8", VA = "0xAE9BA8")]
			get
			{
				return default(Vector3);
			}
			[Address(RVA = "0xAE9BB4", Offset = "0xAE9BB4", VA = "0xAE9BB4")]
			set
			{
			}
		}

		public Vector3 MoveDirection
		{
			[Address(RVA = "0xAE9BC0", Offset = "0xAE9BC0", VA = "0xAE9BC0")]
			get
			{
				return default(Vector3);
			}
			[Address(RVA = "0xAE9BCC", Offset = "0xAE9BCC", VA = "0xAE9BCC")]
			set
			{
			}
		}

		public Vector3 NextMoveDirection
		{
			[Address(RVA = "0xAE9BD8", Offset = "0xAE9BD8", VA = "0xAE9BD8")]
			get
			{
				return default(Vector3);
			}
			[Address(RVA = "0xAE9BE4", Offset = "0xAE9BE4", VA = "0xAE9BE4")]
			set
			{
			}
		}

		[Address(RVA = "0xAE9BF0", Offset = "0xAE9BF0", VA = "0xAE9BF0")]
		private void Start()
		{
		}

		[Address(RVA = "0xAE9D88", Offset = "0xAE9D88", VA = "0xAE9D88")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0xAEA154", Offset = "0xAEA154", VA = "0xAEA154")]
		public GoalMover()
		{
		}
	}
	public class LeaderboardManager
	{
		public delegate void OnMostWinsLeaderboardUpdated(SortedDictionary<int, LeaderboardEntry> entries);

		public delegate void OnHighScoreLeaderboardUpdated(SortedDictionary<int, LeaderboardEntry> entries);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string MOST_MATCHES_WON = "MOST_MATCHES_WON";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string HIGHEST_MATCH_SCORE = "HIGHEST_MATCH_SCORE";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const int TOP_N_COUNT = 5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float LEADERBOARD_POLL_FREQ = 30f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_nextCheckTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SortedDictionary<int, LeaderboardEntry> m_mostWins;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_foundLocalUserMostWinsEntry;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private long m_numWins;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OnMostWinsLeaderboardUpdated m_mostWinsCallback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SortedDictionary<int, LeaderboardEntry> m_highScores;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_foundLocalUserHighScore;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OnHighScoreLeaderboardUpdated m_highScoreCallback;

		public OnMostWinsLeaderboardUpdated MostWinsLeaderboardUpdatedCallback
		{
			[Address(RVA = "0xAEA3F4", Offset = "0xAEA3F4", VA = "0xAEA3F4")]
			set
			{
			}
		}

		public OnHighScoreLeaderboardUpdated HighScoreLeaderboardUpdatedCallback
		{
			[Address(RVA = "0xAEAFF8", Offset = "0xAEAFF8", VA = "0xAEAFF8")]
			set
			{
			}
		}

		[Address(RVA = "0xAEA16C", Offset = "0xAEA16C", VA = "0xAEA16C")]
		public void CheckForUpdates()
		{
		}

		[Address(RVA = "0xAEA1D4", Offset = "0xAEA1D4", VA = "0xAEA1D4")]
		private void QueryMostWinsLeaderboard()
		{
		}

		[Address(RVA = "0xAEA3FC", Offset = "0xAEA3FC", VA = "0xAEA3FC")]
		private void MostWinsGetEntriesCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Address(RVA = "0xAEA2E4", Offset = "0xAEA2E4", VA = "0xAEA2E4")]
		private void QueryHighScoreLeaderboard()
		{
		}

		[Address(RVA = "0xAEB000", Offset = "0xAEB000", VA = "0xAEB000")]
		private void HighestScoreGetEntriesCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Address(RVA = "0xAEBB54", Offset = "0xAEBB54", VA = "0xAEBB54")]
		public void SubmitMatchScores(bool wonMatch, uint score)
		{
		}

		[Address(RVA = "0xAEBC08", Offset = "0xAEBC08", VA = "0xAEBC08")]
		public LeaderboardManager()
		{
		}
	}
	public class LocalPlayer : Player
	{
		public override uint Score
		{
			[Address(RVA = "0xAEBC90", Offset = "0xAEBC90", VA = "0xAEBC90", Slot = "5")]
			set
			{
			}
		}

		[Address(RVA = "0xAEBFF8", Offset = "0xAEBFF8", VA = "0xAEBFF8")]
		private void Update()
		{
		}

		[Address(RVA = "0xAEC1AC", Offset = "0xAEC1AC", VA = "0xAEC1AC")]
		public LocalPlayer()
		{
		}
	}
	public class MatchController : MonoBehaviour
	{
		private enum State
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			UNKNOWN,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			NONE,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WAITING_TO_START_PRACTICE,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PRACTICING,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			VIEWING_RESULTS_PRACTICE,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WAITING_FOR_MATCH,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WAITING_TO_SETUP_MATCH,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PLAYING_MATCH,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			VIEWING_MATCH_RESULTS
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text m_timerText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Camera m_camera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform m_idleCameraTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Text m_matchmakeButtonText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private PlayerArea[] m_playerAreas;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private uint PRACTICE_WARMUP_TIME;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private uint MATCH_WARMUP_TIME;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private uint MATCH_TIME;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private uint MATCH_COOLDOWN_TIME;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject m_mostWinsLeaderboard;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject m_highestScoresLeaderboard;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject m_leaderboardEntryPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject m_flytext;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private State m_currentState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_nextStateTransitionTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_localSlot;

		public float MatchStartTime
		{
			[Address(RVA = "0xAECA78", Offset = "0xAECA78", VA = "0xAECA78")]
			get
			{
				return default(float);
			}
			[Address(RVA = "0xAECA98", Offset = "0xAECA98", VA = "0xAECA98")]
			private set
			{
			}
		}

		[Address(RVA = "0xAEC1B0", Offset = "0xAEC1B0", VA = "0xAEC1B0")]
		private void Start()
		{
		}

		[Address(RVA = "0xAEC7A0", Offset = "0xAEC7A0", VA = "0xAEC7A0")]
		private void Update()
		{
		}

		[Address(RVA = "0xAEC470", Offset = "0xAEC470", VA = "0xAEC470")]
		private void TransitionToState(State newState)
		{
		}

		[Address(RVA = "0xAEC7C4", Offset = "0xAEC7C4", VA = "0xAEC7C4")]
		private void UpdateCheckForNextTimedTransition()
		{
		}

		[Address(RVA = "0xAEC870", Offset = "0xAEC870", VA = "0xAEC870")]
		private void UpdateMatchTimer()
		{
		}

		[Address(RVA = "0xAECAA0", Offset = "0xAECAA0", VA = "0xAECAA0")]
		private void SetupForIdle()
		{
		}

		[Address(RVA = "0xAECDC4", Offset = "0xAECDC4", VA = "0xAECDC4")]
		private void SetupForPractice()
		{
		}

		[Address(RVA = "0xAED5B8", Offset = "0xAED5B8", VA = "0xAED5B8")]
		private Player MatchPlayerAddedCallback(int slot, Oculus.Platform.Models.User user)
		{
			return null;
		}

		[Address(RVA = "0xAECB7C", Offset = "0xAECB7C", VA = "0xAECB7C")]
		private void MoveCameraToIdlePosition()
		{
		}

		[Address(RVA = "0xAECF08", Offset = "0xAECF08", VA = "0xAECF08")]
		private void MoveCameraToMatchPosition()
		{
		}

		[Address(RVA = "0xAED940", Offset = "0xAED940", VA = "0xAED940")]
		public void StartPracticeMatch()
		{
		}

		[Address(RVA = "0xAED958", Offset = "0xAED958", VA = "0xAED958")]
		public void PlayOnlineOrCancel()
		{
		}

		[Address(RVA = "0xAEDB18", Offset = "0xAEDB18", VA = "0xAEDB18")]
		private void OnMatchFoundCallback(bool success)
		{
		}

		[Address(RVA = "0xAEDB2C", Offset = "0xAEDB2C", VA = "0xAEDB2C")]
		private float StartTimeOfferCallback(float remoteTime)
		{
			return default(float);
		}

		[Address(RVA = "0xAEDC30", Offset = "0xAEDC30", VA = "0xAEDC30")]
		private void MostWinsLeaderboardCallback(SortedDictionary<int, LeaderboardEntry> entries)
		{
		}

		[Address(RVA = "0xAEF258", Offset = "0xAEF258", VA = "0xAEF258")]
		private void HighestScoreLeaderboardCallback(SortedDictionary<int, LeaderboardEntry> entries)
		{
		}

		[Address(RVA = "0xAED0D8", Offset = "0xAED0D8", VA = "0xAED0D8")]
		private void CalculateMatchResults()
		{
		}

		[Address(RVA = "0xAED710", Offset = "0xAED710", VA = "0xAED710")]
		private void DisplayAchievementFlytext()
		{
		}

		[Address(RVA = "0xAEF948", Offset = "0xAEF948", VA = "0xAEF948")]
		public MatchController()
		{
		}
	}
	public class MatchmakingManager
	{
		public delegate void OnEnqueueResult(bool successful);

		public delegate Player OnMatchPlayerAdded(int slot, Oculus.Platform.Models.User user);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string NORMAL_POOL = "NORMAL_QUICKMATCH";

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong m_matchRoom;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<ulong, Oculus.Platform.Models.User> m_remotePlayers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OnEnqueueResult m_enqueueCallback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OnMatchPlayerAdded m_playerCallback;

		public OnEnqueueResult EnqueueResultCallback
		{
			[Address(RVA = "0xAEFA9C", Offset = "0xAEFA9C", VA = "0xAEFA9C")]
			private get
			{
				return null;
			}
			[Address(RVA = "0xAEC3D8", Offset = "0xAEC3D8", VA = "0xAEC3D8")]
			set
			{
			}
		}

		public OnMatchPlayerAdded MatchPlayerAddedCallback
		{
			[Address(RVA = "0xAEFAA4", Offset = "0xAEFAA4", VA = "0xAEFAA4")]
			private get
			{
				return null;
			}
			[Address(RVA = "0xAEC3F0", Offset = "0xAEC3F0", VA = "0xAEC3F0")]
			set
			{
			}
		}

		[Address(RVA = "0xAEF9B4", Offset = "0xAEF9B4", VA = "0xAEF9B4")]
		public MatchmakingManager()
		{
		}

		[Address(RVA = "0xAEDA34", Offset = "0xAEDA34", VA = "0xAEDA34")]
		public void QueueForMatch()
		{
		}

		[Address(RVA = "0xAEFAAC", Offset = "0xAEFAAC", VA = "0xAEFAAC")]
		private void MatchmakingEnqueueCallback(Message msg)
		{
		}

		[Address(RVA = "0xAEFFD4", Offset = "0xAEFFD4", VA = "0xAEFFD4")]
		private void MatchFoundCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAF10E4", Offset = "0xAF10E4", VA = "0xAF10E4")]
		private void MatchmakingJoinRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAF1C64", Offset = "0xAF1C64", VA = "0xAF1C64")]
		private void MatchmakingRoomUpdateCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAED450", Offset = "0xAED450", VA = "0xAED450")]
		public void EndMatch()
		{
		}

		[Address(RVA = "0xAEDAF0", Offset = "0xAEDAF0", VA = "0xAEDAF0")]
		public void LeaveQueue()
		{
		}
	}
	public class P2PManager
	{
		private class RemotePlayerData
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PeerConnectionState state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RemotePlayer player;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float remoteTimeOffset;

			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float lastReceivedBallsTime;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public readonly Dictionary<int, P2PNetworkBall> activeBalls;

			[Address(RVA = "0xAF3A08", Offset = "0xAF3A08", VA = "0xAF3A08")]
			public RemotePlayerData()
			{
			}
		}

		public delegate float StartTimeOffer(float remoteTime);

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<ulong, RemotePlayerData> m_remotePlayers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_timeForNextBallUpdate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const byte TIME_SYNC_MESSAGE = 1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const uint TIME_SYNC_MESSAGE_SIZE = 5u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const int TIME_SYNC_MESSAGE_COUNT = 7;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const byte START_TIME_MESSAGE = 2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const uint START_TIME_MESSAGE_SIZE = 5u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const byte BACKBOARD_UPDATE_MESSAGE = 3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const uint BACKBOARD_UPDATE_MESSAGE_SIZE = 41u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const byte LOCAL_BALLS_UPDATE_MESSAGE = 4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const uint LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX = 353u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float LOCAL_BALLS_UPDATE_DELAY = 0.1f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const byte SCORE_UPDATE_MESSAGE = 5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const uint SCORE_UPDATE_MESSAGE_SIZE = 5u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Dictionary<int, P2PNetworkBall> m_localBalls;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly byte[] readBuffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Dictionary<ulong, List<float>> m_remoteSyncTimeCache;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Dictionary<ulong, float> m_remoteSentTimeCache;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private StartTimeOffer m_startTimeOfferCallback;

		public StartTimeOffer StartTimeOfferCallback
		{
			[Address(RVA = "0xAF4718", Offset = "0xAF4718", VA = "0xAF4718")]
			private get
			{
				return null;
			}
			[Address(RVA = "0xAEC408", Offset = "0xAEC408", VA = "0xAEC408")]
			set
			{
			}
		}

		[Address(RVA = "0xAF2420", Offset = "0xAF2420", VA = "0xAF2420")]
		public P2PManager()
		{
		}

		[Address(RVA = "0xAF2598", Offset = "0xAF2598", VA = "0xAF2598")]
		public void UpdateNetwork()
		{
		}

		[Address(RVA = "0xAF1A20", Offset = "0xAF1A20", VA = "0xAF1A20")]
		public void AddRemotePlayer(RemotePlayer player)
		{
		}

		[Address(RVA = "0xAF2178", Offset = "0xAF2178", VA = "0xAF2178")]
		public void DisconnectAll()
		{
		}

		[Address(RVA = "0xAF3A78", Offset = "0xAF3A78", VA = "0xAF3A78")]
		private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Address(RVA = "0xAF3D08", Offset = "0xAF3D08", VA = "0xAF3D08")]
		private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}

		[Address(RVA = "0xAF4198", Offset = "0xAF4198", VA = "0xAF4198")]
		private void SendTimeSyncMessage(ulong remoteID)
		{
		}

		[Address(RVA = "0xAF27D4", Offset = "0xAF27D4", VA = "0xAF27D4")]
		private void ReadTimeSyncMessage(ulong remoteID, byte[] msg)
		{
		}

		[Address(RVA = "0xAF4654", Offset = "0xAF4654", VA = "0xAF4654")]
		private float ShiftRemoteTime(ulong remoteID, float remoteTime)
		{
			return default(float);
		}

		[Address(RVA = "0xAF4440", Offset = "0xAF4440", VA = "0xAF4440")]
		private void OfferMatchStartTime()
		{
		}

		[Address(RVA = "0xAF2F08", Offset = "0xAF2F08", VA = "0xAF2F08")]
		private void ReceiveMatchStartTimeOffer(ulong remoteID, byte[] msg)
		{
		}

		[Address(RVA = "0xAF4BA4", Offset = "0xAF4BA4", VA = "0xAF4BA4")]
		public void SendBackboardUpdate(float time, Vector3 pos, Vector3 moveDir, Vector3 nextMoveDir)
		{
		}

		[Address(RVA = "0xAF2F74", Offset = "0xAF2F74", VA = "0xAF2F74")]
		private void ReceiveBackboardUpdate(ulong remoteID, byte[] msg)
		{
		}

		[Address(RVA = "0xAEC0E8", Offset = "0xAEC0E8", VA = "0xAEC0E8")]
		public void AddNetworkBall(GameObject ball)
		{
		}

		[Address(RVA = "0xAF509C", Offset = "0xAF509C", VA = "0xAF509C")]
		public void RemoveNetworkBall(GameObject ball)
		{
		}

		[Address(RVA = "0xAF35C0", Offset = "0xAF35C0", VA = "0xAF35C0")]
		private void SendLocalBallTransforms()
		{
		}

		[Address(RVA = "0xAF30D4", Offset = "0xAF30D4", VA = "0xAF30D4")]
		private void ReceiveBallTransforms(ulong remoteID, byte[] msg, ulong msgLength)
		{
		}

		[Address(RVA = "0xAEBE18", Offset = "0xAEBE18", VA = "0xAEBE18")]
		public void SendScoreUpdate(uint score)
		{
		}

		[Address(RVA = "0xAF3500", Offset = "0xAF3500", VA = "0xAF3500")]
		private void ReceiveScoredUpdate(ulong remoteID, byte[] msg)
		{
		}

		[Address(RVA = "0xAF4E04", Offset = "0xAF4E04", VA = "0xAF4E04")]
		private void PackVector3(Vector3 vec, byte[] buf, ref int offset)
		{
		}

		[Address(RVA = "0xAF4E54", Offset = "0xAF4E54", VA = "0xAF4E54")]
		private Vector3 UnpackVector3(byte[] buf, ref int offset)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xAF5940", Offset = "0xAF5940", VA = "0xAF5940")]
		private void PackQuaternion(Quaternion quat, byte[] buf, ref int offset)
		{
		}

		[Address(RVA = "0xAF430C", Offset = "0xAF430C", VA = "0xAF430C")]
		private void PackFloat(float value, byte[] buf, ref int offset)
		{
		}

		[Address(RVA = "0xAF43B4", Offset = "0xAF43B4", VA = "0xAF43B4")]
		private float UnpackFloat(byte[] buf, ref int offset)
		{
			return default(float);
		}

		[Address(RVA = "0xAF4B70", Offset = "0xAF4B70", VA = "0xAF4B70")]
		private float UnpackTime(ulong remoteID, byte[] buf, ref int offset)
		{
			return default(float);
		}

		[Address(RVA = "0xAF51C8", Offset = "0xAF51C8", VA = "0xAF51C8")]
		private void PackInt32(int value, byte[] buf, ref int offset)
		{
		}

		[Address(RVA = "0xAF52F8", Offset = "0xAF52F8", VA = "0xAF52F8")]
		private int UnpackInt32(byte[] buf, ref int offset)
		{
			return default(int);
		}

		[Address(RVA = "0xAF5810", Offset = "0xAF5810", VA = "0xAF5810")]
		private void PackUint32(uint value, byte[] buf, ref int offset)
		{
		}

		[Address(RVA = "0xAF58B0", Offset = "0xAF58B0", VA = "0xAF58B0")]
		private uint UnpackUint32(byte[] buf, ref int offset)
		{
			return default(uint);
		}

		[Address(RVA = "0xAF5164", Offset = "0xAF5164", VA = "0xAF5164")]
		private void PackBool(bool value, byte[] buf, ref int offset)
		{
		}

		[Address(RVA = "0xAF5298", Offset = "0xAF5298", VA = "0xAF5298")]
		private bool UnpackBool(byte[] buf, ref int offset)
		{
			return default(bool);
		}
	}
	public class P2PNetworkBall : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float lastCollisionTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigidBody;

		public Vector3 velocity
		{
			[Address(RVA = "0xAF5268", Offset = "0xAF5268", VA = "0xAF5268")]
			get
			{
				return default(Vector3);
			}
		}

		[Address(RVA = "0xAF5A80", Offset = "0xAF5A80", VA = "0xAF5A80")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAF5128", Offset = "0xAF5128", VA = "0xAF5128")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Address(RVA = "0xAF5644", Offset = "0xAF5644", VA = "0xAF5644")]
		public void ProcessRemoteUpdate(float remoteTime, bool isHeld, Vector3 pos, Vector3 vel)
		{
		}

		[Address(RVA = "0xAF5AF0", Offset = "0xAF5AF0", VA = "0xAF5AF0")]
		private Vector3 estimatePosition(Vector3 startPosition, Vector3 startVelocty, float time)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xAF5C2C", Offset = "0xAF5C2C", VA = "0xAF5C2C")]
		private Vector3 estimateVelocity(Vector3 startVelocity, float time)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xAF5D7C", Offset = "0xAF5D7C", VA = "0xAF5D7C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0xAF5DA4", Offset = "0xAF5DA4", VA = "0xAF5DA4")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0xAF5DEC", Offset = "0xAF5DEC", VA = "0xAF5DEC")]
		public P2PNetworkBall()
		{
		}
	}
	public class P2PNetworkGoal : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GoalMover m_goal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 m_lastSentMoveDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_sendUpdates;

		public bool SendUpdates
		{
			[Address(RVA = "0xAF5DF4", Offset = "0xAF5DF4", VA = "0xAF5DF4")]
			set
			{
			}
		}

		[Address(RVA = "0xAF5E00", Offset = "0xAF5E00", VA = "0xAF5E00")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAF5E70", Offset = "0xAF5E70", VA = "0xAF5E70")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0xAF5F50", Offset = "0xAF5F50", VA = "0xAF5F50")]
		public void SendBackboardUpdate()
		{
		}

		[Address(RVA = "0xAF4EB4", Offset = "0xAF4EB4", VA = "0xAF4EB4")]
		public void RemoteBackboardUpdate(float remoteTime, Vector3 pos, Vector3 moveDir, Vector3 nextMoveDir)
		{
		}

		[Address(RVA = "0xAF6068", Offset = "0xAF6068", VA = "0xAF6068")]
		public P2PNetworkGoal()
		{
		}
	}
	public class PlatformManager : MonoBehaviour
	{
		public enum State
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			INITIALIZING,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			WAITING_TO_PRACTICE_OR_MATCHMAKE,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			MATCH_TRANSITION,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PLAYING_A_LOCAL_MATCH,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PLAYING_A_NETWORKED_MATCH
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MatchmakingManager m_matchmaking;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private P2PManager m_p2p;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LeaderboardManager m_leaderboards;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AchievementsManager m_achievements;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private State m_currentState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ulong m_myID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string m_myOculusID;

		public static MatchmakingManager Matchmaking
		{
			[Address(RVA = "0xAEC368", Offset = "0xAEC368", VA = "0xAEC368")]
			get
			{
				return null;
			}
		}

		public static P2PManager P2P
		{
			[Address(RVA = "0xAEBDB0", Offset = "0xAEBDB0", VA = "0xAEBDB0")]
			get
			{
				return null;
			}
		}

		public static LeaderboardManager Leaderboards
		{
			[Address(RVA = "0xAEC410", Offset = "0xAEC410", VA = "0xAEC410")]
			get
			{
				return null;
			}
		}

		public static AchievementsManager Achievements
		{
			[Address(RVA = "0xAEF8E0", Offset = "0xAEF8E0", VA = "0xAEF8E0")]
			get
			{
				return null;
			}
		}

		public static State CurrentState
		{
			[Address(RVA = "0xAE9870", Offset = "0xAE9870", VA = "0xAE9870")]
			get
			{
				return default(State);
			}
		}

		public static ulong MyID
		{
			[Address(RVA = "0xAEA81C", Offset = "0xAEA81C", VA = "0xAEA81C")]
			get
			{
				return default(ulong);
			}
		}

		public static string MyOculusID
		{
			[Address(RVA = "0xAED4E0", Offset = "0xAED4E0", VA = "0xAED4E0")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xAF6070", Offset = "0xAF6070", VA = "0xAF6070")]
		private void Update()
		{
		}

		[Address(RVA = "0xAF60B8", Offset = "0xAF60B8", VA = "0xAF60B8")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAF6274", Offset = "0xAF6274", VA = "0xAF6274")]
		private void Start()
		{
		}

		[Address(RVA = "0xAF6310", Offset = "0xAF6310", VA = "0xAF6310")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Address(RVA = "0xAF63EC", Offset = "0xAF63EC", VA = "0xAF63EC")]
		private void GetLoggedInUserCallback(Message<Oculus.Platform.Models.User> msg)
		{
		}

		[Address(RVA = "0xAF20C0", Offset = "0xAF20C0", VA = "0xAF20C0")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Address(RVA = "0xAF64E4", Offset = "0xAF64E4", VA = "0xAF64E4")]
		public void QuitButtonPressed()
		{
		}

		[Address(RVA = "0xAF64EC", Offset = "0xAF64EC", VA = "0xAF64EC")]
		private void OnApplicationQuit()
		{
		}

		[Address(RVA = "0xAECCF8", Offset = "0xAECCF8", VA = "0xAECCF8")]
		public static void TransitionToState(State newState)
		{
		}

		[Address(RVA = "0xAF6520", Offset = "0xAF6520", VA = "0xAF6520")]
		public PlatformManager()
		{
		}
	}
	public abstract class Player : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint MAX_BALLS = 6u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float INITIAL_FORCE = 870f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float RESPAWN_SECONDS = 2f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint m_score;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text m_scoreUI;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject m_ballPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BallEjector m_ballEjector;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Queue<GameObject> m_balls;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject m_heldBall;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_nextSpawnTime;

		public virtual uint Score
		{
			[Address(RVA = "0xAEBE10", Offset = "0xAEBE10", VA = "0xAEBE10", Slot = "4")]
			get
			{
				return default(uint);
			}
			[Address(RVA = "0xAEBCE4", Offset = "0xAEBCE4", VA = "0xAEBCE4", Slot = "5")]
			set
			{
			}
		}

		public GameObject BallPrefab
		{
			[Address(RVA = "0xAF6528", Offset = "0xAF6528", VA = "0xAF6528")]
			set
			{
			}
		}

		protected bool HasBall
		{
			[Address(RVA = "0xAE8B38", Offset = "0xAE8B38", VA = "0xAE8B38")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xAF6530", Offset = "0xAF6530", VA = "0xAF6530")]
		private void Start()
		{
		}

		[Address(RVA = "0xAF5384", Offset = "0xAF5384", VA = "0xAF5384")]
		public GameObject CreateBall()
		{
			return null;
		}

		[Address(RVA = "0xAE8DC0", Offset = "0xAE8DC0", VA = "0xAE8DC0")]
		protected GameObject CheckSpawnBall()
		{
			return null;
		}

		[Address(RVA = "0xAE8BA8", Offset = "0xAE8BA8", VA = "0xAE8BA8")]
		protected GameObject ShootBall()
		{
			return null;
		}

		[Address(RVA = "0xAF6610", Offset = "0xAF6610", VA = "0xAF6610")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0xAE8E40", Offset = "0xAE8E40", VA = "0xAE8E40")]
		protected Player()
		{
		}
	}
	public class PlayerArea : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject m_ballPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject m_playerHead;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text m_nameText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private P2PNetworkGoal m_p2pGoal;

		public Player Player
		{
			[Address(RVA = "0xAEF880", Offset = "0xAEF880", VA = "0xAEF880")]
			get
			{
				return null;
			}
		}

		public Text NameText
		{
			[Address(RVA = "0xAEF940", Offset = "0xAEF940", VA = "0xAEF940")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xAF674C", Offset = "0xAF674C", VA = "0xAF674C")]
		private void Awake()
		{
		}

		public T SetupForPlayer<T>(string name) where T : Player
		{
			return null;
		}

		[Address(RVA = "0xAF687C", Offset = "0xAF687C", VA = "0xAF687C")]
		public PlayerArea()
		{
		}
	}
	public class RemotePlayer : Player
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Oculus.Platform.Models.User m_user;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private P2PNetworkGoal m_goal;

		public Oculus.Platform.Models.User User
		{
			[Address(RVA = "0xAED708", Offset = "0xAED708", VA = "0xAED708")]
			set
			{
			}
		}

		public ulong ID
		{
			[Address(RVA = "0xAF39DC", Offset = "0xAF39DC", VA = "0xAF39DC")]
			get
			{
				return default(ulong);
			}
		}

		public P2PNetworkGoal Goal
		{
			[Address(RVA = "0xAF4EAC", Offset = "0xAF4EAC", VA = "0xAF4EAC")]
			get
			{
				return null;
			}
			[Address(RVA = "0xAF6884", Offset = "0xAF6884", VA = "0xAF6884")]
			set
			{
			}
		}

		public override uint Score
		{
			[Address(RVA = "0xAF688C", Offset = "0xAF688C", VA = "0xAF688C", Slot = "5")]
			set
			{
			}
		}

		[Address(RVA = "0xAF593C", Offset = "0xAF593C", VA = "0xAF593C")]
		public void ReceiveRemoteScore(uint score)
		{
		}

		[Address(RVA = "0xAF6890", Offset = "0xAF6890", VA = "0xAF6890")]
		public RemotePlayer()
		{
		}
	}
	public class VREyeRaycaster : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Button m_currentButton;

		[Address(RVA = "0xAF6894", Offset = "0xAF6894", VA = "0xAF6894")]
		private void Update()
		{
		}

		[Address(RVA = "0xAF6ACC", Offset = "0xAF6ACC", VA = "0xAF6ACC")]
		public VREyeRaycaster()
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrBoardGame
{
	public class BoardPosition : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x672164", Offset = "0x672164")]
		public int x;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6721A4", Offset = "0x6721A4")]
		public int y;

		[Address(RVA = "0xAE2454", Offset = "0xAE2454", VA = "0xAE2454")]
		public BoardPosition()
		{
		}
	}
	public class EyeCamera : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameController m_gameController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SphereCollider m_gazeTracker;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Button m_currentButton;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GamePiece m_currentPiece;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoardPosition m_boardPosition;

		[Address(RVA = "0xAE245C", Offset = "0xAE245C", VA = "0xAE245C")]
		private void Update()
		{
		}

		[Address(RVA = "0xAE2EE4", Offset = "0xAE2EE4", VA = "0xAE2EE4")]
		public EyeCamera()
		{
		}
	}
	public class GameBoard : MonoBehaviour
	{
		private struct PositionInfo
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject piece;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int pieceOwner;

			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int powerPieceOwner;
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const int LENGTH_X = 3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const int LENGTH_Y = 3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const int MAX_PLAYERS = 2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Color[] m_playerColors;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color m_proposedMoveColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] m_scores;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private BoardPosition[] m_positions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PositionInfo[,] m_pieces;

		[Address(RVA = "0xAE2EEC", Offset = "0xAE2EEC", VA = "0xAE2EEC")]
		public void Reset()
		{
		}

		[Address(RVA = "0xAE3194", Offset = "0xAE3194", VA = "0xAE3194")]
		public bool IsFull()
		{
			return default(bool);
		}

		[Address(RVA = "0xAE32A4", Offset = "0xAE32A4", VA = "0xAE32A4")]
		public bool CanPlayerMoveToPostion(int x, int y)
		{
			return default(bool);
		}

		[Address(RVA = "0xAE3388", Offset = "0xAE3388", VA = "0xAE3388")]
		public bool CanPlayerPowerUpPosition(int x, int y)
		{
			return default(bool);
		}

		[Address(RVA = "0xAE346C", Offset = "0xAE346C", VA = "0xAE346C")]
		public void AddPiece(int player, GameObject prefab, int x, int y)
		{
		}

		[Address(RVA = "0xAE3D54", Offset = "0xAE3D54", VA = "0xAE3D54")]
		public GamePiece AddProposedPiece(GameObject prefab, BoardPosition pos)
		{
			return null;
		}

		[Address(RVA = "0xAE3E78", Offset = "0xAE3E78", VA = "0xAE3E78")]
		public void AddPowerPiece(int player, GameObject prefab, int x, int y)
		{
		}

		[Address(RVA = "0xAE40FC", Offset = "0xAE40FC", VA = "0xAE40FC")]
		public GamePiece AddProposedPowerPiece(GameObject prefab, BoardPosition pos)
		{
			return null;
		}

		[Address(RVA = "0xAE3760", Offset = "0xAE3760", VA = "0xAE3760")]
		private GamePiece Create(GameObject prefab, GameObject parent, BoardPosition pos, Vector3 off)
		{
			return null;
		}

		[Address(RVA = "0xAE42CC", Offset = "0xAE42CC", VA = "0xAE42CC")]
		public int GetPlayerScore(int player)
		{
			return default(int);
		}

		[Address(RVA = "0xAE3938", Offset = "0xAE3938", VA = "0xAE3938")]
		private void UpdateScores()
		{
		}

		[Address(RVA = "0xAE4320", Offset = "0xAE4320", VA = "0xAE4320")]
		public GameBoard()
		{
		}
	}
	public class GameController : MonoBehaviour
	{
		private enum GameState
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PracticingMyTurn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PracticingAiTurn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnlineMatchMyTurn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OnlineMatchRemoteTurn
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MatchmakingManager m_matchmaking;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameBoard m_board;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GamePiece m_pieceA;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GamePiece m_pieceB;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GamePiece m_powerPiece;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color m_unusableColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Color m_unselectedColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Color m_selectedColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Color m_highlightedColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Text m_ballCountText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Text m_player0Text;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Text m_player1Text;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameState m_state;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GamePiece m_interestedPiece;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GamePiece m_selectedPiece;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GamePiece m_proposedPiece;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private uint m_powerBallcount;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private string m_opponentName;

		[Address(RVA = "0xAE4444", Offset = "0xAE4444", VA = "0xAE4444")]
		private void Start()
		{
		}

		[Address(RVA = "0xAE45C8", Offset = "0xAE45C8", VA = "0xAE45C8")]
		private void Update()
		{
		}

		[Address(RVA = "0xAE446C", Offset = "0xAE446C", VA = "0xAE446C")]
		private void TransitionToState(GameState state)
		{
		}

		[Address(RVA = "0xAE4BB8", Offset = "0xAE4BB8", VA = "0xAE4BB8")]
		private void TransitionToNextState()
		{
		}

		[Address(RVA = "0xAE45CC", Offset = "0xAE45CC", VA = "0xAE45CC")]
		private void PerFrameStateUpdate()
		{
		}

		[Address(RVA = "0xAE54E0", Offset = "0xAE54E0", VA = "0xAE54E0")]
		public void PracticeButtonPressed()
		{
		}

		[Address(RVA = "0xAE4ECC", Offset = "0xAE4ECC", VA = "0xAE4ECC")]
		private void MakeAIMove(int player)
		{
		}

		[Address(RVA = "0xAE5638", Offset = "0xAE5638", VA = "0xAE5638")]
		public void StartOnlineMatch(string opponentName, bool localUserGoesFirst)
		{
		}

		[Address(RVA = "0xAE56A0", Offset = "0xAE56A0", VA = "0xAE56A0")]
		public void MakeRemoteMove(GamePiece.Piece piece, int x, int y)
		{
		}

		[Address(RVA = "0xAE5770", Offset = "0xAE5770", VA = "0xAE5770")]
		public void MarkRemoteTurnComplete()
		{
		}

		[Address(RVA = "0xAE5784", Offset = "0xAE5784", VA = "0xAE5784")]
		public void RemoteMatchEnded()
		{
		}

		[Address(RVA = "0xAE2AFC", Offset = "0xAE2AFC", VA = "0xAE2AFC")]
		public void StartedLookingAtPiece(GamePiece piece)
		{
		}

		[Address(RVA = "0xAE2AF4", Offset = "0xAE2AF4", VA = "0xAE2AF4")]
		public void StoppedLookingAtPiece()
		{
		}

		[Address(RVA = "0xAE2B04", Offset = "0xAE2B04", VA = "0xAE2B04")]
		public void StartedLookingAtPosition(BoardPosition position)
		{
		}

		[Address(RVA = "0xAE2E10", Offset = "0xAE2E10", VA = "0xAE2E10")]
		public void ClearProposedMove()
		{
		}

		[Address(RVA = "0xAE5120", Offset = "0xAE5120", VA = "0xAE5120")]
		public void TrySelectPiece()
		{
		}

		[Address(RVA = "0xAE522C", Offset = "0xAE522C", VA = "0xAE522C")]
		public void TryPlacePiece()
		{
		}

		[Address(RVA = "0xAE5A70", Offset = "0xAE5A70", VA = "0xAE5A70")]
		public void QuitButtonPressed()
		{
		}

		[Address(RVA = "0xAE5A78", Offset = "0xAE5A78", VA = "0xAE5A78")]
		public void AddPowerballs(uint count)
		{
		}

		[Address(RVA = "0xAE4474", Offset = "0xAE4474", VA = "0xAE4474")]
		private void UpdateScores()
		{
		}

		[Address(RVA = "0xAE4684", Offset = "0xAE4684", VA = "0xAE4684")]
		private void UpdateGamePieceColors()
		{
		}

		[Address(RVA = "0xAE5BF8", Offset = "0xAE5BF8", VA = "0xAE5BF8")]
		public GameController()
		{
		}
	}
	public class GamePiece : MonoBehaviour
	{
		public enum Piece
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			A,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			B,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			PowerBall
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Piece m_type;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject m_prefabA;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_prefabB;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_prefabPower;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BoardPosition m_position;

		public Piece Type
		{
			[Address(RVA = "0xAE5808", Offset = "0xAE5808", VA = "0xAE5808")]
			get
			{
				return default(Piece);
			}
		}

		public BoardPosition Position
		{
			[Address(RVA = "0xAE5800", Offset = "0xAE5800", VA = "0xAE5800")]
			get
			{
				return null;
			}
			[Address(RVA = "0xAE42C4", Offset = "0xAE42C4", VA = "0xAE42C4")]
			set
			{
			}
		}

		public GameObject Prefab
		{
			[Address(RVA = "0xAE560C", Offset = "0xAE560C", VA = "0xAE560C")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xAE5748", Offset = "0xAE5748", VA = "0xAE5748")]
		public GameObject PrefabFor(Piece p)
		{
			return null;
		}

		[Address(RVA = "0xAE5C5C", Offset = "0xAE5C5C", VA = "0xAE5C5C")]
		public GamePiece()
		{
		}
	}
	public class IAPManager : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameController m_gameController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text m_priceText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string CONSUMABLE_1 = "PowerballPack1";

		[Address(RVA = "0xAE5C64", Offset = "0xAE5C64", VA = "0xAE5C64")]
		private void Start()
		{
		}

		[Address(RVA = "0xAE5C88", Offset = "0xAE5C88", VA = "0xAE5C88")]
		public void FetchProductPrices()
		{
		}

		[Address(RVA = "0xAE5E54", Offset = "0xAE5E54", VA = "0xAE5E54")]
		private void GetProductsBySKUCallback(Message<ProductList> msg)
		{
		}

		[Address(RVA = "0xAE5DA8", Offset = "0xAE5DA8", VA = "0xAE5DA8")]
		public void FetchPurchasedProducts()
		{
		}

		[Address(RVA = "0xAE6360", Offset = "0xAE6360", VA = "0xAE6360")]
		private void GetViewerPurchasesCallback(Message<PurchaseList> msg)
		{
		}

		[Address(RVA = "0xAE679C", Offset = "0xAE679C", VA = "0xAE679C")]
		public void BuyPowerBallsPressed()
		{
		}

		[Address(RVA = "0xAE6854", Offset = "0xAE6854", VA = "0xAE6854")]
		private void LaunchCheckoutFlowCallback(Message<Purchase> msg)
		{
		}

		[Address(RVA = "0xAE6960", Offset = "0xAE6960", VA = "0xAE6960")]
		public IAPManager()
		{
		}
	}
	public class MatchmakingManager : MonoBehaviour
	{
		private enum MatchRoomState
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			None,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Queued,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Configuring,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			MyTurn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RemoteTurn
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameController m_gameController;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text m_matchButtonText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Text m_infoText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string POOL = "VR_BOARD_GAME_POOL";

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ulong m_matchRoom;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Oculus.Platform.Models.User m_remotePlayer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_lastUpdateTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float POLL_FREQUENCY = 30f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private MatchRoomState m_state;

		[Address(RVA = "0xAE6968", Offset = "0xAE6968", VA = "0xAE6968")]
		private void Start()
		{
		}

		[Address(RVA = "0xAE6BD8", Offset = "0xAE6BD8", VA = "0xAE6BD8")]
		private void Update()
		{
		}

		[Address(RVA = "0xAE6D04", Offset = "0xAE6D04", VA = "0xAE6D04")]
		public void MatchButtonPressed()
		{
		}

		[Address(RVA = "0xAE4CC0", Offset = "0xAE4CC0", VA = "0xAE4CC0")]
		public void EndMatch(int localScore, int remoteScore)
		{
		}

		[Address(RVA = "0xAE6DC4", Offset = "0xAE6DC4", VA = "0xAE6DC4")]
		private void OnApplicationQuit()
		{
		}

		[Address(RVA = "0xAE6A28", Offset = "0xAE6A28", VA = "0xAE6A28")]
		private void TransitionToState(MatchRoomState state)
		{
		}

		[Address(RVA = "0xAE6E00", Offset = "0xAE6E00", VA = "0xAE6E00")]
		private void MatchmakingEnqueueCallback(Message untyped_msg)
		{
		}

		[Address(RVA = "0xAE7204", Offset = "0xAE7204", VA = "0xAE7204")]
		private void MatchFoundCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAE73BC", Offset = "0xAE73BC", VA = "0xAE73BC")]
		private void MatchmakingJoinRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAE7D20", Offset = "0xAE7D20", VA = "0xAE7D20")]
		private void MatchmakingRoomUpdateCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAE77BC", Offset = "0xAE77BC", VA = "0xAE77BC")]
		private void ProcessRoomData(Room room)
		{
		}

		[Address(RVA = "0xAE8274", Offset = "0xAE8274", VA = "0xAE8274")]
		private void ProcessRemoteMove(string moveString)
		{
		}

		[Address(RVA = "0xAE5810", Offset = "0xAE5810", VA = "0xAE5810")]
		public void SendLocalMove(GamePiece.Piece piece, int boardX, int boardY)
		{
		}

		[Address(RVA = "0xAE8508", Offset = "0xAE8508", VA = "0xAE8508")]
		private void UpdateDataStoreCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0xAE821C", Offset = "0xAE821C", VA = "0xAE821C")]
		private bool DoesLocalUserGoFirst()
		{
			return default(bool);
		}

		[Address(RVA = "0xAE854C", Offset = "0xAE854C", VA = "0xAE854C")]
		private void GenericErrorCheckCallback(Message msg)
		{
		}

		[Address(RVA = "0xAE8624", Offset = "0xAE8624", VA = "0xAE8624")]
		public MatchmakingManager()
		{
		}
	}
	public class PlatformManager : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong m_myID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string m_myOculusID;

		public static ulong MyID
		{
			[Address(RVA = "0xAE6D1C", Offset = "0xAE6D1C", VA = "0xAE6D1C")]
			get
			{
				return default(ulong);
			}
		}

		public static string MyOculusID
		{
			[Address(RVA = "0xAE5B20", Offset = "0xAE5B20", VA = "0xAE5B20")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xAE862C", Offset = "0xAE862C", VA = "0xAE862C")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAE876C", Offset = "0xAE876C", VA = "0xAE876C")]
		private void Start()
		{
		}

		[Address(RVA = "0xAE8808", Offset = "0xAE8808", VA = "0xAE8808")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Address(RVA = "0xAE89AC", Offset = "0xAE89AC", VA = "0xAE89AC")]
		private void GetLoggedInUserCallback(Message<Oculus.Platform.Models.User> msg)
		{
		}

		[Address(RVA = "0xAE62A8", Offset = "0xAE62A8", VA = "0xAE62A8")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Address(RVA = "0xAE8ACC", Offset = "0xAE8ACC", VA = "0xAE8ACC")]
		public PlatformManager()
		{
		}
	}
}
namespace Oculus.Platform.Samples.SimplePlatformSample
{
	public class DataEntry : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text dataOutput;

		[Address(RVA = "0x97C040", Offset = "0x97C040", VA = "0x97C040")]
		private void Start()
		{
		}

		[Address(RVA = "0x97C140", Offset = "0x97C140", VA = "0x97C140")]
		private void Update()
		{
		}

		[Address(RVA = "0x97C21C", Offset = "0x97C21C", VA = "0x97C21C")]
		private void SubmitCommand(string command)
		{
		}

		[Address(RVA = "0x97E038", Offset = "0x97E038", VA = "0x97E038")]
		private void getLeaderboardEntries(string leaderboardName)
		{
		}

		[Address(RVA = "0x97DF20", Offset = "0x97DF20", VA = "0x97DF20")]
		private void writeLeaderboardEntry(string leaderboardName, string value)
		{
		}

		[Address(RVA = "0x97DE64", Offset = "0x97DE64", VA = "0x97DE64")]
		private void addFieldsAchievement(string achievementName, string fields)
		{
		}

		[Address(RVA = "0x97DD7C", Offset = "0x97DD7C", VA = "0x97DD7C")]
		private void addCountAchievement(string achievementName, string count)
		{
		}

		[Address(RVA = "0x97DCC8", Offset = "0x97DCC8", VA = "0x97DCC8")]
		private void unlockAchievement(string achievementName)
		{
		}

		[Address(RVA = "0x97DBA8", Offset = "0x97DBA8", VA = "0x97DBA8")]
		private void getAchievementProgress(string achievementName)
		{
		}

		[Address(RVA = "0x97DA88", Offset = "0x97DA88", VA = "0x97DA88")]
		private void getAchievementDefinition(string achievementName)
		{
		}

		[Address(RVA = "0x97C0AC", Offset = "0x97C0AC", VA = "0x97C0AC")]
		private void checkEntitlement()
		{
		}

		[Address(RVA = "0x97D9C8", Offset = "0x97D9C8", VA = "0x97D9C8")]
		private void getUserNonce()
		{
		}

		[Address(RVA = "0x97CB30", Offset = "0x97CB30", VA = "0x97CB30")]
		private void createAndJoinPrivateRoom(string joinPolicy, string maxUsers)
		{
		}

		[Address(RVA = "0x97CC3C", Offset = "0x97CC3C", VA = "0x97CC3C")]
		private void getCurrentRoom()
		{
		}

		[Address(RVA = "0x97CCF8", Offset = "0x97CCF8", VA = "0x97CCF8")]
		private void getRoom(string roomID)
		{
		}

		[Address(RVA = "0x97CDF4", Offset = "0x97CDF4", VA = "0x97CDF4")]
		private void joinRoom(string roomID)
		{
		}

		[Address(RVA = "0x97CEF4", Offset = "0x97CEF4", VA = "0x97CEF4")]
		private void leaveRoom(string roomID)
		{
		}

		[Address(RVA = "0x97CFF0", Offset = "0x97CFF0", VA = "0x97CFF0")]
		private void kickUser(string roomID, string userID)
		{
		}

		[Address(RVA = "0x97D11C", Offset = "0x97D11C", VA = "0x97D11C")]
		private void getLoggedInUser()
		{
		}

		[Address(RVA = "0x97D1DC", Offset = "0x97D1DC", VA = "0x97D1DC")]
		private void getUser(string userID)
		{
		}

		[Address(RVA = "0x97D2DC", Offset = "0x97D2DC", VA = "0x97D2DC")]
		private void getLoggedInFriends()
		{
		}

		[Address(RVA = "0x97D39C", Offset = "0x97D39C", VA = "0x97D39C")]
		private void getInvitableUsers()
		{
		}

		[Address(RVA = "0x97D458", Offset = "0x97D458", VA = "0x97D458")]
		private void inviteUser(string roomID, string inviteToken)
		{
		}

		[Address(RVA = "0x97D56C", Offset = "0x97D56C", VA = "0x97D56C")]
		private void setRoomDescription(string roomID, string description)
		{
		}

		[Address(RVA = "0x97D680", Offset = "0x97D680", VA = "0x97D680")]
		private void updateRoomDataStore(string roomID, string key, string value)
		{
		}

		[Address(RVA = "0x97E0F4", Offset = "0x97E0F4", VA = "0x97E0F4")]
		private void printOutputLine(string newLine)
		{
		}

		[Address(RVA = "0x97E1BC", Offset = "0x97E1BC", VA = "0x97E1BC")]
		private void outputRoomDetails(Room room)
		{
		}

		[Address(RVA = "0x97E8DC", Offset = "0x97E8DC", VA = "0x97E8DC")]
		private void outputUserArray(UserList users)
		{
		}

		[Address(RVA = "0x97EE20", Offset = "0x97EE20", VA = "0x97EE20")]
		private void userProofCallback(Message<UserProof> msg)
		{
		}

		[Address(RVA = "0x97EF14", Offset = "0x97EF14", VA = "0x97EF14")]
		private void getEntitlementCallback(Message msg)
		{
		}

		[Address(RVA = "0x97EF90", Offset = "0x97EF90", VA = "0x97EF90")]
		private void leaderboardGetCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Address(RVA = "0x97F5A0", Offset = "0x97F5A0", VA = "0x97F5A0")]
		private void leaderboardWriteCallback(Message msg)
		{
		}

		[Address(RVA = "0x97F7A4", Offset = "0x97F7A4", VA = "0x97F7A4")]
		private void achievementFieldsCallback(Message msg)
		{
		}

		[Address(RVA = "0x97F864", Offset = "0x97F864", VA = "0x97F864")]
		private void achievementCountCallback(Message msg)
		{
		}

		[Address(RVA = "0x97F924", Offset = "0x97F924", VA = "0x97F924")]
		private void achievementUnlockCallback(Message msg)
		{
		}

		[Address(RVA = "0x97F9E4", Offset = "0x97F9E4", VA = "0x97F9E4")]
		private void achievementProgressCallback(Message<AchievementProgressList> msg)
		{
		}

		[Address(RVA = "0x97FD9C", Offset = "0x97FD9C", VA = "0x97FD9C")]
		private void achievementDefinitionCallback(Message<AchievementDefinitionList> msg)
		{
		}

		[Address(RVA = "0x9801CC", Offset = "0x9801CC", VA = "0x9801CC")]
		private void createAndJoinPrivateRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0x9802BC", Offset = "0x9802BC", VA = "0x9802BC")]
		private void getCurrentRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0x9803AC", Offset = "0x9803AC", VA = "0x9803AC")]
		private void joinRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0x98049C", Offset = "0x98049C", VA = "0x98049C")]
		private void leaveRoomCallback(Message<Room> msg)
		{
		}

		[Address(RVA = "0x98058C", Offset = "0x98058C", VA = "0x98058C")]
		private void getUserCallback(Message<Oculus.Platform.Models.User> msg)
		{
		}

		[Address(RVA = "0x980954", Offset = "0x980954", VA = "0x980954")]
		private void getFriendsCallback(Message<UserList> msg)
		{
		}

		[Address(RVA = "0x980A44", Offset = "0x980A44", VA = "0x980A44")]
		private void getInvitableUsersCallback(Message<UserList> msg)
		{
		}

		[Address(RVA = "0x980B34", Offset = "0x980B34", VA = "0x980B34")]
		private void inviteUserCallback(Message msg)
		{
		}

		[Address(RVA = "0x980BF4", Offset = "0x980BF4", VA = "0x980BF4")]
		public DataEntry()
		{
		}
	}
}
namespace Oculus.Platform.Samples.NetChat
{
	internal enum states
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NOT_INIT,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IDLE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		REQUEST_FIND,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FINDING_ROOM,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		REQUEST_CREATE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		REQUEST_JOIN,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		REQUEST_LEAVE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IN_EMPTY_ROOM,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IN_FULL_ROOM
	}
	public static class Constants
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const int BUFFER_SIZE = 512;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string BOUT_POOL = "bout_pool";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string FILTER_POOL = "filter_pool";
	}
	public class chatPacket
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x672394", Offset = "0x672394")]
		private int <packetID>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6723A4", Offset = "0x6723A4")]
		private string <textString>k__BackingField;

		public int packetID
		{
			[Address(RVA = "0x97BDAC", Offset = "0x97BDAC", VA = "0x97BDAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6813CC", Offset = "0x6813CC")]
			get
			{
				return default(int);
			}
			[Address(RVA = "0x97B7A0", Offset = "0x97B7A0", VA = "0x97B7A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6813DC", Offset = "0x6813DC")]
			set
			{
			}
		}

		public string textString
		{
			[Address(RVA = "0x97BDA4", Offset = "0x97BDA4", VA = "0x97BDA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6813EC", Offset = "0x6813EC")]
			get
			{
				return null;
			}
			[Address(RVA = "0x97B7A8", Offset = "0x97B7A8", VA = "0x97B7A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6813FC", Offset = "0x6813FC")]
			set
			{
			}
		}

		[Address(RVA = "0x97B7B0", Offset = "0x97B7B0", VA = "0x97B7B0")]
		public byte[] Serialize()
		{
			return null;
		}

		[Address(RVA = "0x97BACC", Offset = "0x97BACC", VA = "0x97BACC")]
		public static chatPacket Deserialize(byte[] data)
		{
			return null;
		}

		[Address(RVA = "0x97B798", Offset = "0x97B798", VA = "0x97B798")]
		public chatPacket()
		{
		}
	}
	public class DataEntry : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text dataOutput;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private states currentState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Oculus.Platform.Models.User localUser;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Oculus.Platform.Models.User remoteUser;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Room currentRoom;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int lastPacketID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool ratedMatchStarted;

		[Address(RVA = "0x979298", Offset = "0x979298", VA = "0x979298")]
		private void Start()
		{
		}

		[Address(RVA = "0x979418", Offset = "0x979418", VA = "0x979418")]
		private void Update()
		{
		}

		[Address(RVA = "0x9794FC", Offset = "0x9794FC", VA = "0x9794FC")]
		private void SubmitCommand(string command)
		{
		}

		[Address(RVA = "0x97A9E0", Offset = "0x97A9E0", VA = "0x97A9E0")]
		private void printOutputLine(string newLine)
		{
		}

		[Address(RVA = "0x979384", Offset = "0x979384", VA = "0x979384")]
		private void checkEntitlement()
		{
		}

		[Address(RVA = "0x97AAA8", Offset = "0x97AAA8", VA = "0x97AAA8")]
		private void getEntitlementCallback(Message msg)
		{
		}

		[Address(RVA = "0x97ABA0", Offset = "0x97ABA0", VA = "0x97ABA0")]
		private void init(Message<Oculus.Platform.Models.User> msg)
		{
		}

		[Address(RVA = "0x979A1C", Offset = "0x979A1C", VA = "0x979A1C")]
		private void requestCreateRoom()
		{
		}

		[Address(RVA = "0x97ACE4", Offset = "0x97ACE4", VA = "0x97ACE4")]
		private void createRoomResponse(Message<MatchmakingEnqueueResultAndRoom> msg)
		{
		}

		[Address(RVA = "0x979B9C", Offset = "0x979B9C", VA = "0x979B9C")]
		private void requestCreateFilterRoom()
		{
		}

		[Address(RVA = "0x979F94", Offset = "0x979F94", VA = "0x979F94")]
		private void requestFindRoom()
		{
		}

		[Address(RVA = "0x97A10C", Offset = "0x97A10C", VA = "0x97A10C")]
		private void requestFindFilteredRoom()
		{
		}

		[Address(RVA = "0x97AE44", Offset = "0x97AE44", VA = "0x97AE44")]
		private void foundMatch(Message<Room> msg)
		{
		}

		[Address(RVA = "0x97AFA8", Offset = "0x97AFA8", VA = "0x97AFA8")]
		private void joinRoomResponse(Message<Room> msg)
		{
		}

		[Address(RVA = "0x979E1C", Offset = "0x979E1C", VA = "0x979E1C")]
		private void requestFindMatch()
		{
		}

		[Address(RVA = "0x97B30C", Offset = "0x97B30C", VA = "0x97B30C")]
		private void searchingStarted(Message msg)
		{
		}

		[Address(RVA = "0x97B3E8", Offset = "0x97B3E8", VA = "0x97B3E8")]
		private void updateRoom(Message<Room> msg)
		{
		}

		[Address(RVA = "0x97A494", Offset = "0x97A494", VA = "0x97A494")]
		private void sendChat(string chatMessage)
		{
		}

		[Address(RVA = "0x97987C", Offset = "0x97987C", VA = "0x97987C")]
		private void processNetPackets()
		{
		}

		[Address(RVA = "0x97A5AC", Offset = "0x97A5AC", VA = "0x97A5AC")]
		private void requestLeaveRoom()
		{
		}

		[Address(RVA = "0x97BDB4", Offset = "0x97BDB4", VA = "0x97BDB4")]
		private void leaveRoomResponse(Message<Room> msg)
		{
		}

		[Address(RVA = "0x97A6E0", Offset = "0x97A6E0", VA = "0x97A6E0")]
		private void requestStartRatedMatch()
		{
		}

		[Address(RVA = "0x97BE94", Offset = "0x97BE94", VA = "0x97BE94")]
		private void startRatedMatchResponse(Message msg)
		{
		}

		[Address(RVA = "0x97A7F0", Offset = "0x97A7F0", VA = "0x97A7F0")]
		private void requestReportResults()
		{
		}

		[Address(RVA = "0x97BF70", Offset = "0x97BF70", VA = "0x97BF70")]
		private void reportResultsResponse(Message msg)
		{
		}

		[Address(RVA = "0x97C038", Offset = "0x97C038", VA = "0x97C038")]
		public DataEntry()
		{
		}
	}
}
namespace Oculus.Platform.Samples.EntitlementCheck
{
	public class EntitlementCheck : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool exitAppOnFailure;

		public static event Action UserFailedEntitlementCheck
		{
			[Address(RVA = "0x978A6C", Offset = "0x978A6C", VA = "0x978A6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68140C", Offset = "0x68140C")]
			add
			{
			}
			[Address(RVA = "0x978B68", Offset = "0x978B68", VA = "0x978B68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68141C", Offset = "0x68141C")]
			remove
			{
			}
		}

		public static event Action UserPassedEntitlementCheck
		{
			[Address(RVA = "0x978C64", Offset = "0x978C64", VA = "0x978C64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68142C", Offset = "0x68142C")]
			add
			{
			}
			[Address(RVA = "0x978D64", Offset = "0x978D64", VA = "0x978D64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68143C", Offset = "0x68143C")]
			remove
			{
			}
		}

		[Address(RVA = "0x978E64", Offset = "0x978E64", VA = "0x978E64")]
		private void Start()
		{
		}

		[Address(RVA = "0x97924C", Offset = "0x97924C", VA = "0x97924C")]
		private void EntitlementCheckCallback(Message msg)
		{
		}

		[Address(RVA = "0x978FCC", Offset = "0x978FCC", VA = "0x978FCC")]
		private void HandleEntitlementCheckResult(bool result)
		{
		}

		[Address(RVA = "0x979288", Offset = "0x979288", VA = "0x979288")]
		public EntitlementCheck()
		{
		}
	}
}
namespace Oculus.Avatar
{
	public static class AvatarLogger
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string LogAvatar = "[Avatars] - ";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string Tab = "    ";

		[Address(RVA = "0xE724DC", Offset = "0xE724DC", VA = "0xE724DC")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x68144C", Offset = "0x68144C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x68144C", Offset = "0x68144C")]
		public static void Log(string logMsg)
		{
		}

		[Address(RVA = "0xE72564", Offset = "0xE72564", VA = "0xE72564")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x6814AC", Offset = "0x6814AC")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x6814AC", Offset = "0x6814AC")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Address(RVA = "0xE725FC", Offset = "0xE725FC", VA = "0xE725FC")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x68150C", Offset = "0x68150C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x68150C", Offset = "0x68150C")]
		public static void LogWarning(string logMsg)
		{
		}

		[Address(RVA = "0xE72684", Offset = "0xE72684", VA = "0xE72684")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x68156C", Offset = "0x68156C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x68156C", Offset = "0x68156C")]
		public static void LogError(string logMsg)
		{
		}
	}
	public class CAPI
	{
		public enum Result
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Success = 0,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure = -1000,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure_InvalidParameter = -1001,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure_NotInitialized = -1002,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure_InvalidOperation = -1003,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure_Unsupported = -1004,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure_NotYetImplemented = -1005,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure_OperationFailed = -1006,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Failure_InsufficientSize = -1007
		}

		private static class OVRP_1_30_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Address(RVA = "0xE78C0C", Offset = "0xE78C0C", VA = "0xE78C0C")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string LibFile = "ovravatarloader";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Address(RVA = "0xE7270C", Offset = "0xE7270C", VA = "0xE7270C")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[PreserveSig]
		[Address(RVA = "0xE727BC", Offset = "0xE727BC", VA = "0xE727BC")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Address(RVA = "0xE7284C", Offset = "0xE7284C", VA = "0xE7284C")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Address(RVA = "0xE728DC", Offset = "0xE728DC", VA = "0xE728DC")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Address(RVA = "0xE7297C", Offset = "0xE7297C", VA = "0xE7297C")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Address(RVA = "0xE72A54", Offset = "0xE72A54", VA = "0xE72A54")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Address(RVA = "0xE72AF4", Offset = "0xE72AF4", VA = "0xE72AF4")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Address(RVA = "0xE72BCC", Offset = "0xE72BCC", VA = "0xE72BCC")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Address(RVA = "0xE72C6C", Offset = "0xE72C6C", VA = "0xE72C6C")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Address(RVA = "0xE72D0C", Offset = "0xE72D0C", VA = "0xE72D0C")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE72DAC", Offset = "0xE72DAC", VA = "0xE72DAC")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Address(RVA = "0xE72E4C", Offset = "0xE72E4C", VA = "0xE72E4C")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Address(RVA = "0xE72EFC", Offset = "0xE72EFC", VA = "0xE72EFC")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Address(RVA = "0xE72FAC", Offset = "0xE72FAC", VA = "0xE72FAC")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Address(RVA = "0xE7305C", Offset = "0xE7305C", VA = "0xE7305C")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Address(RVA = "0xE730FC", Offset = "0xE730FC", VA = "0xE730FC")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Address(RVA = "0xE7319C", Offset = "0xE7319C", VA = "0xE7319C")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Address(RVA = "0xE7324C", Offset = "0xE7324C", VA = "0xE7324C")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Address(RVA = "0xE732FC", Offset = "0xE732FC", VA = "0xE732FC")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Address(RVA = "0xE733AC", Offset = "0xE733AC", VA = "0xE733AC")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Address(RVA = "0xE7344C", Offset = "0xE7344C", VA = "0xE7344C")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Address(RVA = "0xE73514", Offset = "0xE73514", VA = "0xE73514")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE7354C", Offset = "0xE7354C", VA = "0xE7354C")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Address(RVA = "0xE7360C", Offset = "0xE7360C", VA = "0xE7360C")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Address(RVA = "0xE736EC", Offset = "0xE736EC", VA = "0xE736EC")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Address(RVA = "0xE737DC", Offset = "0xE737DC", VA = "0xE737DC")]
		public static extern void ovrAvatarPose_Update3DofHands(IntPtr avatar, IntPtr inputStateLeft, IntPtr inputStateRight, ovrAvatarControllerType type);

		[Address(RVA = "0xE738A4", Offset = "0xE738A4", VA = "0xE738A4")]
		public static void ovrAvatarPose_UpdateSDK3DofHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE73D44", Offset = "0xE73D44", VA = "0xE73D44")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Address(RVA = "0xE73A84", Offset = "0xE73A84", VA = "0xE73A84")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Address(RVA = "0xE73B34", Offset = "0xE73B34", VA = "0xE73B34")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Address(RVA = "0xE73BE4", Offset = "0xE73BE4", VA = "0xE73BE4")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Address(RVA = "0xE73C94", Offset = "0xE73C94", VA = "0xE73C94")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Address(RVA = "0xE73DF4", Offset = "0xE73DF4", VA = "0xE73DF4")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Address(RVA = "0xE73E94", Offset = "0xE73E94", VA = "0xE73E94")]
		public static ovrAvatarComponent ovrAvatarComponent_Get(IntPtr avatar, uint index)
		{
			return default(ovrAvatarComponent);
		}

		[PreserveSig]
		[Address(RVA = "0xE73F98", Offset = "0xE73F98", VA = "0xE73F98")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Address(RVA = "0xE74048", Offset = "0xE74048", VA = "0xE74048")]
		public static ovrAvatarBaseComponent? ovrAvatarPose_GetBaseComponent(IntPtr avatar)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE74184", Offset = "0xE74184", VA = "0xE74184")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Address(RVA = "0xE74224", Offset = "0xE74224", VA = "0xE74224")]
		public static ovrAvatarBodyComponent? ovrAvatarPose_GetBodyComponent(IntPtr avatar)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE7437C", Offset = "0xE7437C", VA = "0xE7437C")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Address(RVA = "0xE7441C", Offset = "0xE7441C", VA = "0xE7441C")]
		public static ovrAvatarControllerComponent? ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE74574", Offset = "0xE74574", VA = "0xE74574")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Address(RVA = "0xE74614", Offset = "0xE74614", VA = "0xE74614")]
		public static ovrAvatarControllerComponent? ovrAvatarPose_GetRightControllerComponent(IntPtr avatar)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE7476C", Offset = "0xE7476C", VA = "0xE7476C")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Address(RVA = "0xE7480C", Offset = "0xE7480C", VA = "0xE7480C")]
		public static ovrAvatarHandComponent? ovrAvatarPose_GetLeftHandComponent(IntPtr avatar)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE74964", Offset = "0xE74964", VA = "0xE74964")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Address(RVA = "0xE74A04", Offset = "0xE74A04", VA = "0xE74A04")]
		public static ovrAvatarHandComponent? ovrAvatarPose_GetRightHandComponent(IntPtr avatar)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE74B5C", Offset = "0xE74B5C", VA = "0xE74B5C")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Address(RVA = "0xE74BFC", Offset = "0xE74BFC", VA = "0xE74BFC")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Address(RVA = "0xE74C9C", Offset = "0xE74C9C", VA = "0xE74C9C")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Address(RVA = "0xE74D54", Offset = "0xE74D54", VA = "0xE74D54")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Address(RVA = "0xE74DF4", Offset = "0xE74DF4", VA = "0xE74DF4")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Address(RVA = "0xE74F90", Offset = "0xE74F90", VA = "0xE74F90")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Address(RVA = "0xE7508C", Offset = "0xE7508C", VA = "0xE7508C")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Address(RVA = "0xE74EF0", Offset = "0xE74EF0", VA = "0xE74EF0")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Address(RVA = "0xE7512C", Offset = "0xE7512C", VA = "0xE7512C")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Address(RVA = "0xE751CC", Offset = "0xE751CC", VA = "0xE751CC")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Address(RVA = "0xE7527C", Offset = "0xE7527C", VA = "0xE7527C")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Address(RVA = "0xE7531C", Offset = "0xE7531C", VA = "0xE7531C")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Address(RVA = "0xE753CC", Offset = "0xE753CC", VA = "0xE753CC")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Address(RVA = "0xE7546C", Offset = "0xE7546C", VA = "0xE7546C")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Address(RVA = "0xE7550C", Offset = "0xE7550C", VA = "0xE7550C")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE75714", Offset = "0xE75714", VA = "0xE75714")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Address(RVA = "0xE757C4", Offset = "0xE757C4", VA = "0xE757C4")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref Vector4 offset)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE75954", Offset = "0xE75954", VA = "0xE75954")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Address(RVA = "0xE75A0C", Offset = "0xE75A0C", VA = "0xE75A0C")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Address(RVA = "0xE75AF8", Offset = "0xE75AF8", VA = "0xE75AF8")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Address(RVA = "0xE75B98", Offset = "0xE75B98", VA = "0xE75B98")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Address(RVA = "0xE75C38", Offset = "0xE75C38", VA = "0xE75C38")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Address(RVA = "0xE75D20", Offset = "0xE75D20", VA = "0xE75D20")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Address(RVA = "0xE75DC0", Offset = "0xE75DC0", VA = "0xE75DC0")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Address(RVA = "0xE75EA8", Offset = "0xE75EA8", VA = "0xE75EA8")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE75F48", Offset = "0xE75F48", VA = "0xE75F48")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE75FF8", Offset = "0xE75FF8", VA = "0xE75FF8")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE760A8", Offset = "0xE760A8", VA = "0xE760A8")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE76158", Offset = "0xE76158", VA = "0xE76158")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE761F8", Offset = "0xE761F8", VA = "0xE761F8")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE762A0", Offset = "0xE762A0", VA = "0xE762A0")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE76348", Offset = "0xE76348", VA = "0xE76348")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE763E8", Offset = "0xE763E8", VA = "0xE763E8")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE76488", Offset = "0xE76488", VA = "0xE76488")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE7655C", Offset = "0xE7655C", VA = "0xE7655C")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE7660C", Offset = "0xE7660C", VA = "0xE7660C")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Address(RVA = "0xE766BC", Offset = "0xE766BC", VA = "0xE766BC")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE7675C", Offset = "0xE7675C", VA = "0xE7675C")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE767FC", Offset = "0xE767FC", VA = "0xE767FC")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE7689C", Offset = "0xE7689C", VA = "0xE7689C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Address(RVA = "0xE76954", Offset = "0xE76954", VA = "0xE76954")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Address(RVA = "0xE76A0C", Offset = "0xE76A0C", VA = "0xE76A0C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Address(RVA = "0xE76AC4", Offset = "0xE76AC4", VA = "0xE76AC4")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE76B64", Offset = "0xE76B64", VA = "0xE76B64")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Address(RVA = "0xE76C04", Offset = "0xE76C04", VA = "0xE76C04")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Address(RVA = "0xE76CEC", Offset = "0xE76CEC", VA = "0xE76CEC")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Address(RVA = "0xE76D8C", Offset = "0xE76D8C", VA = "0xE76D8C")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Address(RVA = "0xE76E74", Offset = "0xE76E74", VA = "0xE76E74")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Address(RVA = "0xE76F14", Offset = "0xE76F14", VA = "0xE76F14")]
		public static ovrAvatarBlendShapeParams ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart)
		{
			return default(ovrAvatarBlendShapeParams);
		}

		[PreserveSig]
		[Address(RVA = "0xE76FEC", Offset = "0xE76FEC", VA = "0xE76FEC")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Address(RVA = "0xE7708C", Offset = "0xE7708C", VA = "0xE7708C")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Address(RVA = "0xE77214", Offset = "0xE77214", VA = "0xE77214")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Address(RVA = "0xE77478", Offset = "0xE77478", VA = "0xE77478")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Address(RVA = "0xE77174", Offset = "0xE77174", VA = "0xE77174")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Address(RVA = "0xE77528", Offset = "0xE77528", VA = "0xE77528")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Address(RVA = "0xE775C8", Offset = "0xE775C8", VA = "0xE775C8")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Address(RVA = "0xE77678", Offset = "0xE77678", VA = "0xE77678")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Address(RVA = "0xE77728", Offset = "0xE77728", VA = "0xE77728")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Address(RVA = "0xE777D8", Offset = "0xE777D8", VA = "0xE777D8")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Address(RVA = "0xE77898", Offset = "0xE77898", VA = "0xE77898")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Address(RVA = "0xE77958", Offset = "0xE77958", VA = "0xE77958")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Address(RVA = "0xE77A18", Offset = "0xE77A18", VA = "0xE77A18")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Address(RVA = "0xE77AB8", Offset = "0xE77AB8", VA = "0xE77AB8")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Address(RVA = "0xE77B58", Offset = "0xE77B58", VA = "0xE77B58")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Address(RVA = "0xE77BF8", Offset = "0xE77BF8", VA = "0xE77BF8")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Address(RVA = "0xE77C98", Offset = "0xE77C98", VA = "0xE77C98")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Address(RVA = "0xE77D38", Offset = "0xE77D38", VA = "0xE77D38")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Address(RVA = "0xE77E7C", Offset = "0xE77E7C", VA = "0xE77E7C")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Address(RVA = "0xE77F34", Offset = "0xE77F34", VA = "0xE77F34")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Address(RVA = "0xE77FD4", Offset = "0xE77FD4", VA = "0xE77FD4")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Address(RVA = "0xE77FDC", Offset = "0xE77FDC", VA = "0xE77FDC")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE780D8", Offset = "0xE780D8", VA = "0xE780D8")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Address(RVA = "0xE78188", Offset = "0xE78188", VA = "0xE78188")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE78284", Offset = "0xE78284", VA = "0xE78284")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Address(RVA = "0xE78334", Offset = "0xE78334", VA = "0xE78334")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Address(RVA = "0xE783FC", Offset = "0xE783FC", VA = "0xE783FC")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE784F0", Offset = "0xE784F0", VA = "0xE784F0")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Address(RVA = "0xE78590", Offset = "0xE78590", VA = "0xE78590")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Address(RVA = "0xE78648", Offset = "0xE78648", VA = "0xE78648")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Address(RVA = "0xE7873C", Offset = "0xE7873C", VA = "0xE7873C")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Address(RVA = "0xE787DC", Offset = "0xE787DC", VA = "0xE787DC")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Address(RVA = "0xE78894", Offset = "0xE78894", VA = "0xE78894")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Address(RVA = "0xE78D08", Offset = "0xE78D08", VA = "0xE78D08")]
		private static extern IntPtr _ovrp_GetVersion();

		[Address(RVA = "0xE78B9C", Offset = "0xE78B9C", VA = "0xE78B9C")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Address(RVA = "0xE78D98", Offset = "0xE78D98", VA = "0xE78D98")]
		public CAPI()
		{
		}
	}
}
namespace OVR
{
	public class TestScript : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "InspectorNoteAttribute", RVA = "0x6723D4", Offset = "0x6723D4")]
		public SoundFXRef testSound1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundFXRef testSound2;

		[Address(RVA = "0xE6380C", Offset = "0xE6380C", VA = "0xE6380C")]
		private void Start()
		{
		}

		[Address(RVA = "0xE63810", Offset = "0xE63810", VA = "0xE63810")]
		private void Update()
		{
		}

		[Address(RVA = "0xE63918", Offset = "0xE63918", VA = "0xE63918")]
		public TestScript()
		{
		}
	}
	public class AmbienceEmitter : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SoundFXRef[] ambientSounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoActivate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672420", Offset = "0x672420")]
		public bool autoRetrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x672458", Offset = "0x672458")]
		public Vector2 randomRetriggerDelaySecs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67247C", Offset = "0x67247C")]
		public Transform[] playPositions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool activated;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int playingIdx;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float nextPlayTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float fadeTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastPosIdx;

		[Address(RVA = "0xE58E4C", Offset = "0xE58E4C", VA = "0xE58E4C")]
		private void Awake()
		{
		}

		[Address(RVA = "0xE58FC8", Offset = "0xE58FC8", VA = "0xE58FC8")]
		private void Update()
		{
		}

		[Address(RVA = "0xE5924C", Offset = "0xE5924C", VA = "0xE5924C")]
		public void OnTriggerEnter(Collider col)
		{
		}

		[Address(RVA = "0xE59028", Offset = "0xE59028", VA = "0xE59028")]
		public void Play()
		{
		}

		[Address(RVA = "0xE593B4", Offset = "0xE593B4", VA = "0xE593B4")]
		public void EnableEmitter(bool enable)
		{
		}

		[Address(RVA = "0xE59548", Offset = "0xE59548", VA = "0xE59548")]
		public AmbienceEmitter()
		{
		}
	}
	public enum PreloadSounds
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Default,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Preload,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ManualPreload
	}
	public enum Fade
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		In,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Out
	}
	[Serializable]
	public class SoundGroup
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SoundFX[] soundList;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerGroup mixerGroup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6724B4", Offset = "0x6724B4")]
		public int maxPlayingSounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PreloadSounds preloadAudio;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float volumeOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6724D0", Offset = "0x6724D0")]
		public int playingSoundCount;

		[Address(RVA = "0xE636EC", Offset = "0xE636EC", VA = "0xE636EC")]
		public SoundGroup(string name)
		{
		}

		[Address(RVA = "0xE63780", Offset = "0xE63780", VA = "0xE63780")]
		public SoundGroup()
		{
		}

		[Address(RVA = "0xE61EE0", Offset = "0xE61EE0", VA = "0xE61EE0")]
		public void IncrementPlayCount()
		{
		}

		[Address(RVA = "0xE62018", Offset = "0xE62018", VA = "0xE62018")]
		public void DecrementPlayCount()
		{
		}

		[Address(RVA = "0xE62CA8", Offset = "0xE62CA8", VA = "0xE62CA8")]
		public bool CanPlaySound()
		{
			return default(bool);
		}
	}
	public class AudioManager : MonoBehaviour
	{
		public enum Fade
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			In,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Out
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B5E4", Offset = "0x65B5E4")]
		private sealed class <>c__DisplayClass75_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SoundPriority priority;

			[Address(RVA = "0xE5E678", Offset = "0xE5E678", VA = "0xE5E678")]
			public <>c__DisplayClass75_0()
			{
			}

			[Address(RVA = "0xE61810", Offset = "0xE61810", VA = "0xE61810")]
			internal bool <FindFreeEmitter>b__0(SoundEmitter item)
			{
				return default(bool);
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B5F4", Offset = "0x65B5F4")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<SoundEmitter> <>9__75_1;

			[Address(RVA = "0xE61774", Offset = "0xE61774", VA = "0xE61774")]
			public <>c()
			{
			}

			[Address(RVA = "0xE6177C", Offset = "0xE6177C", VA = "0xE6177C")]
			internal bool <FindFreeEmitter>b__75_1(SoundEmitter item)
			{
				return default(bool);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6724E0", Offset = "0x6724E0")]
		public bool makePersistent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672518", Offset = "0x672518")]
		public bool enableSpatializedAudio;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672550", Offset = "0x672550")]
		public bool enableSpatializedFastOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672588", Offset = "0x672588")]
		public AudioMixer audioMixer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6725C0", Offset = "0x6725C0")]
		public AudioMixerGroup defaultMixerGroup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6725F8", Offset = "0x6725F8")]
		public AudioMixerGroup reservedMixerGroup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672630", Offset = "0x672630")]
		public AudioMixerGroup voiceChatMixerGroup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672668", Offset = "0x672668")]
		public bool verboseLogging;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6726A0", Offset = "0x6726A0")]
		public int maxSoundEmitters;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6726D8", Offset = "0x6726D8")]
		public float volumeSoundFX;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672710", Offset = "0x672710")]
		public float soundFxFadeSecs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float audioMinFallOffDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float audioMaxFallOffDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SoundGroup[] soundGroupings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<string, SoundFX> soundFXCache;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager theAudioManager;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static FastList<string> names;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string[] defaultSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static SoundFX nullSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool hideWarnings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float audioMaxFallOffDistanceSqr;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SoundEmitter[] soundEmitters;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FastList<SoundEmitter> playingEmitters;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FastList<SoundEmitter> nextFreeEmitters;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MixerSnapshot currentSnapshot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject soundEmitterParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Transform staticListenerPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static bool showPlayingEmitterCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private static bool forceShowEmitterCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private static bool soundEnabled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly AnimationCurve defaultReverbZoneMix;

		public static bool enableSpatialization
		{
			[Address(RVA = "0xE59604", Offset = "0xE59604", VA = "0xE59604")]
			get
			{
				return default(bool);
			}
		}

		public static AudioManager Instance
		{
			[Address(RVA = "0xE596E8", Offset = "0xE596E8", VA = "0xE596E8")]
			get
			{
				return null;
			}
		}

		public static float NearFallOff
		{
			[Address(RVA = "0xE59750", Offset = "0xE59750", VA = "0xE59750")]
			get
			{
				return default(float);
			}
		}

		public static float FarFallOff
		{
			[Address(RVA = "0xE597C8", Offset = "0xE597C8", VA = "0xE597C8")]
			get
			{
				return default(float);
			}
		}

		public static AudioMixerGroup EmitterGroup
		{
			[Address(RVA = "0xE59840", Offset = "0xE59840", VA = "0xE59840")]
			get
			{
				return null;
			}
		}

		public static AudioMixerGroup ReservedGroup
		{
			[Address(RVA = "0xE598B8", Offset = "0xE598B8", VA = "0xE598B8")]
			get
			{
				return null;
			}
		}

		public static AudioMixerGroup VoipGroup
		{
			[Address(RVA = "0xE59930", Offset = "0xE59930", VA = "0xE59930")]
			get
			{
				return null;
			}
		}

		public static bool SoundEnabled
		{
			[Address(RVA = "0xE5BF94", Offset = "0xE5BF94", VA = "0xE5BF94")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xE599A8", Offset = "0xE599A8", VA = "0xE599A8")]
		private void Awake()
		{
		}

		[Address(RVA = "0xE59BE0", Offset = "0xE59BE0", VA = "0xE59BE0")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0xE599AC", Offset = "0xE599AC", VA = "0xE599AC")]
		private void Init()
		{
		}

		[Address(RVA = "0xE5AD84", Offset = "0xE5AD84", VA = "0xE5AD84")]
		private void Update()
		{
		}

		[Address(RVA = "0xE59D38", Offset = "0xE59D38", VA = "0xE59D38")]
		private void RebuildSoundFXCache()
		{
		}

		[Address(RVA = "0xE5B518", Offset = "0xE5B518", VA = "0xE5B518")]
		public static SoundFX FindSoundFX(string name, bool rebuildCache = false)
		{
			return null;
		}

		[Address(RVA = "0xE5B6CC", Offset = "0xE5B6CC", VA = "0xE5B6CC")]
		private static bool FindAudioManager()
		{
			return default(bool);
		}

		[Address(RVA = "0xE5B884", Offset = "0xE5B884", VA = "0xE5B884")]
		public static GameObject GetGameObject()
		{
			return null;
		}

		[Address(RVA = "0xE5B98C", Offset = "0xE5B98C", VA = "0xE5B98C")]
		public static string NameMinusGroup(string name)
		{
			return null;
		}

		[Address(RVA = "0xE5BA50", Offset = "0xE5BA50", VA = "0xE5BA50")]
		public static string[] GetSoundFXNames(string currentValue, out int currentIdx)
		{
			return null;
		}

		[Address(RVA = "0xE5A524", Offset = "0xE5A524", VA = "0xE5A524")]
		private void InitializeSoundSystem()
		{
		}

		[Address(RVA = "0xE5AD88", Offset = "0xE5AD88", VA = "0xE5AD88")]
		private void UpdateFreeEmitters()
		{
		}

		[Address(RVA = "0xE5C274", Offset = "0xE5C274", VA = "0xE5C274")]
		private string Fmt(int count)
		{
			return null;
		}

		[Address(RVA = "0xE5C370", Offset = "0xE5C370", VA = "0xE5C370")]
		private string FmtFree(int count)
		{
			return null;
		}

		[Address(RVA = "0xE5C470", Offset = "0xE5C470", VA = "0xE5C470")]
		private void OnPreSceneLoad()
		{
		}

		[Address(RVA = "0xE5C0F4", Offset = "0xE5C0F4", VA = "0xE5C0F4")]
		private void ResetFreeEmitters()
		{
		}

		[Address(RVA = "0xE5C650", Offset = "0xE5C650", VA = "0xE5C650")]
		public static void FadeOutSoundChannel(int channel, float delaySecs, float fadeTime)
		{
		}

		[Address(RVA = "0xE5C7D8", Offset = "0xE5C7D8", VA = "0xE5C7D8")]
		public static bool StopSound(int idx, bool fadeOut = true, bool stopReserved = false)
		{
			return default(bool);
		}

		[Address(RVA = "0xE5CA14", Offset = "0xE5CA14", VA = "0xE5CA14")]
		public static void FadeInSound(int idx, float fadeTime, float volume)
		{
		}

		[Address(RVA = "0xE592E4", Offset = "0xE592E4", VA = "0xE592E4")]
		public static void FadeInSound(int idx, float fadeTime)
		{
		}

		[Address(RVA = "0xE59478", Offset = "0xE59478", VA = "0xE59478")]
		public static void FadeOutSound(int idx, float fadeTime)
		{
		}

		[Address(RVA = "0xE5CBF0", Offset = "0xE5CBF0", VA = "0xE5CBF0")]
		public static void StopAllSounds(bool fadeOut, bool stopReserved = false)
		{
		}

		[Address(RVA = "0xE5CCD4", Offset = "0xE5CCD4", VA = "0xE5CCD4")]
		public void MuteAllSounds(bool mute, bool muteReserved = false)
		{
		}

		[Address(RVA = "0xE5CDA0", Offset = "0xE5CDA0", VA = "0xE5CDA0")]
		public void UnMuteAllSounds(bool unmute, bool unmuteReserved = false)
		{
		}

		[Address(RVA = "0xE5CECC", Offset = "0xE5CECC", VA = "0xE5CECC")]
		public static float GetEmitterEndTime(int idx)
		{
			return default(float);
		}

		[Address(RVA = "0xE5CF8C", Offset = "0xE5CF8C", VA = "0xE5CF8C")]
		public static float SetEmitterTime(int idx, float time)
		{
			return default(float);
		}

		[Address(RVA = "0xE5D0A4", Offset = "0xE5D0A4", VA = "0xE5D0A4")]
		public static int PlaySound(AudioClip clip, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitchVariance = 1f, bool loop = false)
		{
			return default(int);
		}

		[Address(RVA = "0xE5DE8C", Offset = "0xE5DE8C", VA = "0xE5DE8C")]
		private static int FindFreeEmitter(EmitterChannel src, SoundPriority priority)
		{
			return default(int);
		}

		[Address(RVA = "0xE5E680", Offset = "0xE5E680", VA = "0xE5E680")]
		public static int PlaySound(SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f)
		{
			return default(int);
		}

		[Address(RVA = "0xE5E82C", Offset = "0xE5E82C", VA = "0xE5E82C")]
		public static int PlaySoundAt(Vector3 position, SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Address(RVA = "0xE5FA10", Offset = "0xE5FA10", VA = "0xE5FA10")]
		public static int PlayRandomSoundAt(Vector3 position, AudioClip[] clips, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Address(RVA = "0xE5D278", Offset = "0xE5D278", VA = "0xE5D278")]
		public static int PlaySoundAt(Vector3 position, AudioClip clip, float volume = 1f, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Address(RVA = "0xE5FB34", Offset = "0xE5FB34", VA = "0xE5FB34")]
		public static void SetOnFinished(int emitterIdx, Action onFinished)
		{
		}

		[Address(RVA = "0xE5FC48", Offset = "0xE5FC48", VA = "0xE5FC48")]
		public static void SetOnFinished(int emitterIdx, Action<object> onFinished, object obj)
		{
		}

		[Address(RVA = "0xE5FD68", Offset = "0xE5FD68", VA = "0xE5FD68")]
		public static void AttachSoundToParent(int idx, Transform parent)
		{
		}

		[Address(RVA = "0xE60210", Offset = "0xE60210", VA = "0xE60210")]
		public static void DetachSoundFromParent(int idx)
		{
		}

		[Address(RVA = "0xE60460", Offset = "0xE60460", VA = "0xE60460")]
		public static void DetachSoundsFromParent(SoundEmitter[] emitters, bool stopSounds = true)
		{
		}

		[Address(RVA = "0xE6058C", Offset = "0xE6058C", VA = "0xE6058C")]
		public static void SetEmitterMixerGroup(int idx, AudioMixerGroup mixerGroup)
		{
		}

		[Address(RVA = "0xE6077C", Offset = "0xE6077C", VA = "0xE6077C")]
		public static MixerSnapshot GetActiveSnapshot()
		{
			return null;
		}

		[Address(RVA = "0xE60858", Offset = "0xE60858", VA = "0xE60858")]
		public static void SetCurrentSnapshot(MixerSnapshot mixerSnapshot)
		{
		}

		[Address(RVA = "0xE609A8", Offset = "0xE609A8", VA = "0xE609A8")]
		public static void BlendWithCurrentSnapshot(MixerSnapshot blendSnapshot, float weight, float blendTime = 0f)
		{
		}

		[Address(RVA = "0xE60E64", Offset = "0xE60E64", VA = "0xE60E64")]
		public AudioManager()
		{
		}
	}
	public enum EmitterChannel
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = -1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Reserved,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Any
	}
	[Serializable]
	public class MixerSnapshot
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioMixerSnapshot snapshot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float transitionTime;

		[Address(RVA = "0xE61910", Offset = "0xE61910", VA = "0xE61910")]
		public MixerSnapshot()
		{
		}
	}
	public class MinMaxAttribute : PropertyAttribute
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float minDefaultVal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxDefaultVal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float min;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float max;

		[Address(RVA = "0xE618B4", Offset = "0xE618B4", VA = "0xE618B4")]
		public MinMaxAttribute(float minDefaultVal, float maxDefaultVal, float min, float max)
		{
		}
	}
	public class SoundEmitter : MonoBehaviour
	{
		public enum FadeState
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Null,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			FadingIn,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			FadingOut,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Ducking
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B604", Offset = "0x65B604")]
		private sealed class <DelayedSyncTo>d__57 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundEmitter <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundEmitter other;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float fadeTime;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float toVolume;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xE625D8", Offset = "0xE625D8", VA = "0xE625D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xE62648", Offset = "0xE62648", VA = "0xE62648", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xE62214", Offset = "0xE62214", VA = "0xE62214")]
			[DebuggerHidden]
			public <DelayedSyncTo>d__57(int <>1__state)
			{
			}

			[Address(RVA = "0xE624C0", Offset = "0xE624C0", VA = "0xE624C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xE624C4", Offset = "0xE624C4", VA = "0xE624C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xE625E0", Offset = "0xE625E0", VA = "0xE625E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B614", Offset = "0x65B614")]
		private sealed class <FadeSoundChannelTo>d__63 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundEmitter <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float toVolume;

			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float fadeTime;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <start>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <end>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__5;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xE62B44", Offset = "0xE62B44", VA = "0xE62B44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xE62BB4", Offset = "0xE62BB4", VA = "0xE62BB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xE62450", Offset = "0xE62450", VA = "0xE62450")]
			[DebuggerHidden]
			public <FadeSoundChannelTo>d__63(int <>1__state)
			{
			}

			[Address(RVA = "0xE629A0", Offset = "0xE629A0", VA = "0xE629A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xE629A4", Offset = "0xE629A4", VA = "0xE629A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xE62B4C", Offset = "0xE62B4C", VA = "0xE62B4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B624", Offset = "0x65B624")]
		private sealed class <FadeSoundChannel>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySecs;

			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Fade fadeType;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float defaultVolume;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SoundEmitter <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float fadeTime;

			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <start>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <end>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private bool <restartPlay>5__4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <startTime>5__5;

			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <elapsedTime>5__6;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xE62928", Offset = "0xE62928", VA = "0xE62928", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xE62998", Offset = "0xE62998", VA = "0xE62998", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xE6247C", Offset = "0xE6247C", VA = "0xE6247C")]
			[DebuggerHidden]
			public <FadeSoundChannel>d__64(int <>1__state)
			{
			}

			[Address(RVA = "0xE62650", Offset = "0xE62650", VA = "0xE62650", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xE62654", Offset = "0xE62654", VA = "0xE62654", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xE62930", Offset = "0xE62930", VA = "0xE62930", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EmitterChannel channel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disableSpatialization;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FadeState state;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x672748", Offset = "0x672748")]
		public AudioSource audioSource;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x672758", Offset = "0x672758")]
		public SoundPriority priority;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x672768", Offset = "0x672768")]
		public ONSPAudioSource osp;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x672778", Offset = "0x672778")]
		public float endPlayTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lastParentTransform;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x672788", Offset = "0x672788")]
		public float defaultVolume;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x672798", Offset = "0x672798")]
		public Transform defaultParent;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6727A8", Offset = "0x6727A8")]
		public int originalIdx;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6727B8", Offset = "0x6727B8")]
		public Action onFinished;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6727C8", Offset = "0x6727C8")]
		public Action<object> onFinishedObject;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6727D8", Offset = "0x6727D8")]
		public object onFinishedParam;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x6727E8", Offset = "0x6727E8")]
		public SoundGroup playingSoundGroup;

		public float volume
		{
			[Address(RVA = "0xE5F9E0", Offset = "0xE5F9E0", VA = "0xE5F9E0")]
			get
			{
				return default(float);
			}
			[Address(RVA = "0xE619B0", Offset = "0xE619B0", VA = "0xE619B0")]
			set
			{
			}
		}

		public float pitch
		{
			[Address(RVA = "0xE619F0", Offset = "0xE619F0", VA = "0xE619F0")]
			get
			{
				return default(float);
			}
			[Address(RVA = "0xE61A20", Offset = "0xE61A20", VA = "0xE61A20")]
			set
			{
			}
		}

		public AudioClip clip
		{
			[Address(RVA = "0xE61A60", Offset = "0xE61A60", VA = "0xE61A60")]
			get
			{
				return null;
			}
			[Address(RVA = "0xE61A90", Offset = "0xE61A90", VA = "0xE61A90")]
			set
			{
			}
		}

		public float time
		{
			[Address(RVA = "0xE61AC8", Offset = "0xE61AC8", VA = "0xE61AC8")]
			get
			{
				return default(float);
			}
			[Address(RVA = "0xE5D064", Offset = "0xE5D064", VA = "0xE5D064")]
			set
			{
			}
		}

		public float length
		{
			[Address(RVA = "0xE61AF8", Offset = "0xE61AF8", VA = "0xE61AF8")]
			get
			{
				return default(float);
			}
		}

		public bool loop
		{
			[Address(RVA = "0xE61BD0", Offset = "0xE61BD0", VA = "0xE61BD0")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xE61C00", Offset = "0xE61C00", VA = "0xE61C00")]
			set
			{
			}
		}

		public bool mute
		{
			[Address(RVA = "0xE61C38", Offset = "0xE61C38", VA = "0xE61C38")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xE61C68", Offset = "0xE61C68", VA = "0xE61C68")]
			set
			{
			}
		}

		public AudioVelocityUpdateMode velocityUpdateMode
		{
			[Address(RVA = "0xE61CA0", Offset = "0xE61CA0", VA = "0xE61CA0")]
			get
			{
				return default(AudioVelocityUpdateMode);
			}
			[Address(RVA = "0xE61CD0", Offset = "0xE61CD0", VA = "0xE61CD0")]
			set
			{
			}
		}

		public bool isPlaying
		{
			[Address(RVA = "0xE61D08", Offset = "0xE61D08", VA = "0xE61D08")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xE61D38", Offset = "0xE61D38", VA = "0xE61D38")]
		private void Awake()
		{
		}

		[Address(RVA = "0xE5F9CC", Offset = "0xE5F9CC", VA = "0xE5F9CC")]
		public void SetPlayingSoundGroup(SoundGroup soundGroup)
		{
		}

		[Address(RVA = "0xE5FC40", Offset = "0xE5FC40", VA = "0xE5FC40")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Address(RVA = "0xE5FD60", Offset = "0xE5FD60", VA = "0xE5FD60")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Address(RVA = "0xE5C004", Offset = "0xE5C004", VA = "0xE5C004")]
		public void SetChannel(int _channel)
		{
		}

		[Address(RVA = "0xE5BFFC", Offset = "0xE5BFFC", VA = "0xE5BFFC")]
		public void SetDefaultParent(Transform parent)
		{
		}

		[Address(RVA = "0xE606CC", Offset = "0xE606CC", VA = "0xE606CC")]
		public void SetAudioMixer(AudioMixerGroup _mixer)
		{
		}

		[Address(RVA = "0xE5C20C", Offset = "0xE5C20C", VA = "0xE5C20C")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Address(RVA = "0xE61F70", Offset = "0xE61F70", VA = "0xE61F70")]
		public void Play()
		{
		}

		[Address(RVA = "0xE61FD8", Offset = "0xE61FD8", VA = "0xE61FD8")]
		public void Pause()
		{
		}

		[Address(RVA = "0xE5C00C", Offset = "0xE5C00C", VA = "0xE5C00C")]
		public void Stop()
		{
		}

		[Address(RVA = "0xE620A8", Offset = "0xE620A8", VA = "0xE620A8")]
		private int GetSampleTime()
		{
			return default(int);
		}

		[Address(RVA = "0xE60100", Offset = "0xE60100", VA = "0xE60100")]
		public void ParentTo(Transform parent)
		{
		}

		[Address(RVA = "0xE6037C", Offset = "0xE6037C", VA = "0xE6037C")]
		public void DetachFromParent()
		{
		}

		[Address(RVA = "0xE5C600", Offset = "0xE5C600", VA = "0xE5C600")]
		public void ResetParent(Transform parent)
		{
		}

		[Address(RVA = "0xE6211C", Offset = "0xE6211C", VA = "0xE6211C")]
		public void SyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
		}

		[Address(RVA = "0xE62148", Offset = "0xE62148", VA = "0xE62148")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6815CC", Offset = "0x6815CC")]
		private IEnumerator DelayedSyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
			return null;
		}

		[Address(RVA = "0xE62240", Offset = "0xE62240", VA = "0xE62240")]
		public void FadeTo(float fadeTime, float toVolume)
		{
		}

		[Address(RVA = "0xE5CAEC", Offset = "0xE5CAEC", VA = "0xE5CAEC")]
		public void FadeIn(float fadeTime, float defaultVolume)
		{
		}

		[Address(RVA = "0xE5CB70", Offset = "0xE5CB70", VA = "0xE5CB70")]
		public void FadeIn(float fadeTime)
		{
		}

		[Address(RVA = "0xE5C968", Offset = "0xE5C968", VA = "0xE5C968")]
		public void FadeOut(float fadeTime)
		{
		}

		[Address(RVA = "0xE5C728", Offset = "0xE5C728", VA = "0xE5C728")]
		public void FadeOutDelayed(float delayedSecs, float fadeTime)
		{
		}

		[Address(RVA = "0xE622B8", Offset = "0xE622B8", VA = "0xE622B8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681630", Offset = "0x681630")]
		private IEnumerator FadeSoundChannelTo(float fadeTime, float toVolume)
		{
			return null;
		}

		[Address(RVA = "0xE62364", Offset = "0xE62364", VA = "0xE62364")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681694", Offset = "0x681694")]
		private IEnumerator FadeSoundChannel(float delaySecs, float fadeTime, Fade fadeType, float defaultVolume)
		{
			return null;
		}

		[Address(RVA = "0xE624A8", Offset = "0xE624A8", VA = "0xE624A8")]
		public SoundEmitter()
		{
		}
	}
	public enum SoundFXNext
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Random,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Sequential
	}
	public enum FreqHint
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Wide,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Narrow
	}
	public enum SoundPriority
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VeryLow = -2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Low,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Default,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		High,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VeryHigh
	}
	[Serializable]
	public class OSPProps
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6727F8", Offset = "0x6727F8")]
		public bool enableSpatialization;

		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672830", Offset = "0x672830")]
		public bool useFastOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672868", Offset = "0x672868")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x672868", Offset = "0x672868")]
		public float gain;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6728BC", Offset = "0x6728BC")]
		public bool enableInvSquare;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6728F4", Offset = "0x6728F4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6728F4", Offset = "0x6728F4")]
		public float volumetric;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67294C", Offset = "0x67294C")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x67294C", Offset = "0x67294C")]
		public Vector2 invSquareFalloff;

		[Address(RVA = "0xE61920", Offset = "0xE61920", VA = "0xE61920")]
		public OSPProps()
		{
		}
	}
	[Serializable]
	public class SoundFX
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6729AC", Offset = "0x6729AC")]
		public string name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6729E4", Offset = "0x6729E4")]
		public SoundFXNext playback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672A1C", Offset = "0x672A1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x672A1C", Offset = "0x672A1C")]
		public float volume;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672A70", Offset = "0x672A70")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x672A70", Offset = "0x672A70")]
		public Vector2 pitchVariance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672ACC", Offset = "0x672ACC")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x672ACC", Offset = "0x672ACC")]
		public Vector2 falloffDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672B2C", Offset = "0x672B2C")]
		public AudioRolloffMode falloffCurve;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672B64", Offset = "0x672B64")]
		public AnimationCurve volumeFalloffCurve;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672B9C", Offset = "0x672B9C")]
		public AnimationCurve reverbZoneMix;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672BD4", Offset = "0x672BD4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x672BD4", Offset = "0x672BD4")]
		public float spread;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672C2C", Offset = "0x672C2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x672C2C", Offset = "0x672C2C")]
		public float pctChanceToPlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672C80", Offset = "0x672C80")]
		public SoundPriority priority;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672CB8", Offset = "0x672CB8")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x672CB8", Offset = "0x672CB8")]
		public Vector2 delay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672D14", Offset = "0x672D14")]
		public bool looping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OSPProps ospProps;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672D4C", Offset = "0x672D4C")]
		public AudioClip[] soundClips;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool visibilityToggle;

		[NonSerialized]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SoundGroup soundGroup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int lastIdx;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int playingIdx;

		public int Length
		{
			[Address(RVA = "0xE62BBC", Offset = "0xE62BBC", VA = "0xE62BBC")]
			get
			{
				return default(int);
			}
		}

		public bool IsValid
		{
			[Address(RVA = "0xE62BE8", Offset = "0xE62BE8", VA = "0xE62BE8")]
			get
			{
				return default(bool);
			}
		}

		public SoundGroup Group
		{
			[Address(RVA = "0xE5F9C4", Offset = "0xE5F9C4", VA = "0xE5F9C4")]
			get
			{
				return null;
			}
			[Address(RVA = "0xE5B510", Offset = "0xE5B510", VA = "0xE5B510")]
			set
			{
			}
		}

		public float MaxFalloffDistSquared
		{
			[Address(RVA = "0xE5F8C8", Offset = "0xE5F8C8", VA = "0xE5F8C8")]
			get
			{
				return default(float);
			}
		}

		public float GroupVolumeOverride
		{
			[Address(RVA = "0xE5F8FC", Offset = "0xE5F8FC", VA = "0xE5F8FC")]
			get
			{
				return default(float);
			}
		}

		[Address(RVA = "0xE6119C", Offset = "0xE6119C", VA = "0xE6119C")]
		public SoundFX()
		{
		}

		[Address(RVA = "0xE5F750", Offset = "0xE5F750", VA = "0xE5F750")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Address(RVA = "0xE5F920", Offset = "0xE5F920", VA = "0xE5F920")]
		public AudioMixerGroup GetMixerGroup(AudioMixerGroup defaultMixerGroup)
		{
			return null;
		}

		[Address(RVA = "0xE5F8D4", Offset = "0xE5F8D4", VA = "0xE5F8D4")]
		public bool ReachedGroupPlayLimit()
		{
			return default(bool);
		}

		[Address(RVA = "0xE62CC8", Offset = "0xE62CC8", VA = "0xE62CC8")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Address(RVA = "0xE5F914", Offset = "0xE5F914", VA = "0xE5F914")]
		public float GetPitch()
		{
			return default(float);
		}

		[Address(RVA = "0xE62E18", Offset = "0xE62E18", VA = "0xE62E18")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Address(RVA = "0xE62EF4", Offset = "0xE62EF4", VA = "0xE62EF4")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Address(RVA = "0xE63008", Offset = "0xE63008", VA = "0xE63008")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Address(RVA = "0xE63094", Offset = "0xE63094", VA = "0xE63094")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Address(RVA = "0xE63128", Offset = "0xE63128", VA = "0xE63128")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Address(RVA = "0xE631B4", Offset = "0xE631B4", VA = "0xE631B4")]
		public void AttachToParent(Transform parent)
		{
		}

		[Address(RVA = "0xE63240", Offset = "0xE63240", VA = "0xE63240")]
		public void DetachFromParent()
		{
		}
	}
	[Serializable]
	public class SoundFXRef
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string soundFXName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool initialized;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SoundFX soundFXCached;

		public SoundFX soundFX
		{
			[Address(RVA = "0xE632B8", Offset = "0xE632B8", VA = "0xE632B8")]
			get
			{
				return null;
			}
		}

		public string name
		{
			[Address(RVA = "0xE633AC", Offset = "0xE633AC", VA = "0xE633AC")]
			get
			{
				return null;
			}
			[Address(RVA = "0xE633B4", Offset = "0xE633B4", VA = "0xE633B4")]
			set
			{
			}
		}

		public int Length
		{
			[Address(RVA = "0xE633BC", Offset = "0xE633BC", VA = "0xE633BC")]
			get
			{
				return default(int);
			}
		}

		public bool IsValid
		{
			[Address(RVA = "0xE6340C", Offset = "0xE6340C", VA = "0xE6340C")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0xE632E8", Offset = "0xE632E8", VA = "0xE632E8")]
		private void Init()
		{
		}

		[Address(RVA = "0xE6344C", Offset = "0xE6344C", VA = "0xE6344C")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Address(RVA = "0xE6348C", Offset = "0xE6348C", VA = "0xE6348C")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Address(RVA = "0xE634D4", Offset = "0xE634D4", VA = "0xE634D4")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Address(RVA = "0xE5925C", Offset = "0xE5925C", VA = "0xE5925C")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volume = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Address(RVA = "0xE63524", Offset = "0xE63524", VA = "0xE63524")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Address(RVA = "0xE6356C", Offset = "0xE6356C", VA = "0xE6356C")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Address(RVA = "0xE635C4", Offset = "0xE635C4", VA = "0xE635C4")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Address(RVA = "0xE63604", Offset = "0xE63604", VA = "0xE63604")]
		public void AttachToParent(Transform parent)
		{
		}

		[Address(RVA = "0xE6364C", Offset = "0xE6364C", VA = "0xE6364C")]
		public void DetachFromParent()
		{
		}

		[Address(RVA = "0xE6368C", Offset = "0xE6368C", VA = "0xE6368C")]
		public SoundFXRef()
		{
		}
	}
}
namespace The_Amazing_Impact_VFX
{
	public class ButtonAnimation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float initial_size_x;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float initial_size_y;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float factor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool GO;

		[Address(RVA = "0x7302E4", Offset = "0x7302E4", VA = "0x7302E4")]
		private void Awake()
		{
		}

		[Address(RVA = "0x73034C", Offset = "0x73034C", VA = "0x73034C")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0x7304C0", Offset = "0x7304C0", VA = "0x7304C0")]
		private void Go()
		{
		}

		[Address(RVA = "0x730540", Offset = "0x730540", VA = "0x730540")]
		public ButtonAnimation()
		{
		}
	}
	public class SampleManager : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMesh text_fx_name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] fx_prefabs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index_fx;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Ray ray;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private RaycastHit2D ray_cast_hit;

		[Address(RVA = "0x730558", Offset = "0x730558", VA = "0x730558")]
		private void Start()
		{
		}

		[Address(RVA = "0x7307A4", Offset = "0x7307A4", VA = "0x7307A4")]
		private void Update()
		{
		}

		[Address(RVA = "0x732410", Offset = "0x732410", VA = "0x732410")]
		public SampleManager()
		{
		}
	}
	public class SelfDestruct : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float selfdestruct_in;

		[Address(RVA = "0x732418", Offset = "0x732418", VA = "0x732418")]
		private void Start()
		{
		}

		[Address(RVA = "0x7324C0", Offset = "0x7324C0", VA = "0x7324C0")]
		public SelfDestruct()
		{
		}
	}
}
namespace LIV.SDK.Unity
{
	public static class Calibration
	{
		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B634", Offset = "0x65B634")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Address(RVA = "0x70BFD0", Offset = "0x70BFD0", VA = "0x70BFD0")]
			public <>c()
			{
			}

			[Address(RVA = "0x70BFD8", Offset = "0x70BFD8", VA = "0x70BFD8")]
			internal void <.cctor>b__20_0(object o, FileSystemEventArgs e)
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string ConfigFileName = "externalcamera.cfg";

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static float X;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static float Y;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static float Z;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float Yaw;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static float Pitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static float Roll;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static float FieldOfVision;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static float NearClip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static float FarClip;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static float HMDOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static float NearOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly FileSystemWatcher ConfigWatcher;

		public static Vector3 PositionOffset
		{
			[Address(RVA = "0x70B214", Offset = "0x70B214", VA = "0x70B214")]
			get
			{
				return default(Vector3);
			}
		}

		public static Quaternion RotationOffset
		{
			[Address(RVA = "0x70B2A4", Offset = "0x70B2A4", VA = "0x70B2A4")]
			get
			{
				return default(Quaternion);
			}
		}

		public static event EventHandler Changed
		{
			[Address(RVA = "0x709FBC", Offset = "0x709FBC", VA = "0x709FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6816F8", Offset = "0x6816F8")]
			add
			{
			}
			[Address(RVA = "0x70B0E8", Offset = "0x70B0E8", VA = "0x70B0E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681708", Offset = "0x681708")]
			remove
			{
			}
		}

		[Address(RVA = "0x70B350", Offset = "0x70B350", VA = "0x70B350")]
		static Calibration()
		{
		}

		[Address(RVA = "0x70BE1C", Offset = "0x70BE1C", VA = "0x70BE1C")]
		private static void Reset()
		{
		}

		[Address(RVA = "0x70B5B0", Offset = "0x70B5B0", VA = "0x70B5B0")]
		public static void Read()
		{
		}

		[Address(RVA = "0x70BEE4", Offset = "0x70BEE4", VA = "0x70BEE4")]
		private static bool TryParseInvariantFloat(string number, out float result)
		{
			return default(bool);
		}
	}
	public static class Extensions
	{
		[Address(RVA = "0x70C034", Offset = "0x70C034", VA = "0x70C034")]
		private static float _copysign(float sizeval, float signval)
		{
			return default(float);
		}

		[Address(RVA = "0x70C0F4", Offset = "0x70C0F4", VA = "0x70C0F4")]
		public static Quaternion GetRotation(this Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Address(RVA = "0x70C2C0", Offset = "0x70C2C0", VA = "0x70C2C0")]
		public static Vector3 GetPosition(this Matrix4x4 matrix)
		{
			return default(Vector3);
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x65956C", Offset = "0x65956C")]
	public class ExternalCamera : MonoBehaviour
	{
		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B644", Offset = "0x65B644")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<TrackedDevicePose_t, int, <>f__AnonymousType0<TrackedDevicePose_t, uint>> <>9__17_0;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<<>f__AnonymousType0<TrackedDevicePose_t, uint>, bool> <>9__17_1;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<<>f__AnonymousType0<TrackedDevicePose_t, uint>, <>f__AnonymousType1<TrackedDevicePose_t, uint, ETrackedDeviceClass>> <>9__17_2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<<>f__AnonymousType1<TrackedDevicePose_t, uint, ETrackedDeviceClass>, bool> <>9__17_3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<<>f__AnonymousType1<TrackedDevicePose_t, uint, ETrackedDeviceClass>, <>f__AnonymousType2<TrackedDevicePose_t, uint, ETrackedDeviceClass, ETrackedControllerRole, string, string>> <>9__17_4;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<<>f__AnonymousType2<TrackedDevicePose_t, uint, ETrackedDeviceClass, ETrackedControllerRole, string, string>, int> <>9__17_5;

			[Address(RVA = "0x70CF9C", Offset = "0x70CF9C", VA = "0x70CF9C")]
			public <>c()
			{
			}

			[Address(RVA = "0x70CFA4", Offset = "0x70CFA4", VA = "0x70CFA4")]
			internal <>f__AnonymousType0<TrackedDevicePose_t, uint> <IdentifyExternalCameraDevice>b__17_0(TrackedDevicePose_t pose, int index)
			{
				return null;
			}

			[Address(RVA = "0x70D050", Offset = "0x70D050", VA = "0x70D050")]
			internal bool <IdentifyExternalCameraDevice>b__17_1(<>f__AnonymousType0<TrackedDevicePose_t, uint> candidate)
			{
				return default(bool);
			}

			[Address(RVA = "0x70D0C0", Offset = "0x70D0C0", VA = "0x70D0C0")]
			internal <>f__AnonymousType1<TrackedDevicePose_t, uint, ETrackedDeviceClass> <IdentifyExternalCameraDevice>b__17_2(<>f__AnonymousType0<TrackedDevicePose_t, uint> candidate)
			{
				return null;
			}

			[Address(RVA = "0x70D214", Offset = "0x70D214", VA = "0x70D214")]
			internal bool <IdentifyExternalCameraDevice>b__17_3(<>f__AnonymousType1<TrackedDevicePose_t, uint, ETrackedDeviceClass> candidate)
			{
				return default(bool);
			}

			[Address(RVA = "0x70D2A4", Offset = "0x70D2A4", VA = "0x70D2A4")]
			internal <>f__AnonymousType2<TrackedDevicePose_t, uint, ETrackedDeviceClass, ETrackedControllerRole, string, string> <IdentifyExternalCameraDevice>b__17_4(<>f__AnonymousType1<TrackedDevicePose_t, uint, ETrackedDeviceClass> candidate)
			{
				return null;
			}

			[Address(RVA = "0x70D4A0", Offset = "0x70D4A0", VA = "0x70D4A0")]
			internal int <IdentifyExternalCameraDevice>b__17_5(<>f__AnonymousType2<TrackedDevicePose_t, uint, ETrackedDeviceClass, ETrackedControllerRole, string, string> candidate)
			{
				return default(int);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x672D94", Offset = "0x672D94")]
		private uint <OpenVRTrackedDeviceId>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private TrackedDevicePose_t _trackedDevicePose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private TrackedDevicePose_t[] _devices;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TrackedDevicePose_t[] _gameDevices;

		public bool IsValid
		{
			[Address(RVA = "0x70C2FC", Offset = "0x70C2FC", VA = "0x70C2FC")]
			get
			{
				return default(bool);
			}
		}

		public uint OpenVRTrackedDeviceId
		{
			[Address(RVA = "0x70C30C", Offset = "0x70C30C", VA = "0x70C30C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681738", Offset = "0x681738")]
			get
			{
				return default(uint);
			}
			[Address(RVA = "0x70C314", Offset = "0x70C314", VA = "0x70C314")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681748", Offset = "0x681748")]
			protected set
			{
			}
		}

		[Address(RVA = "0x70C31C", Offset = "0x70C31C", VA = "0x70C31C")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x70C3AC", Offset = "0x70C3AC", VA = "0x70C3AC")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x70C400", Offset = "0x70C400", VA = "0x70C400")]
		private void LateUpdate()
		{
		}

		[Address(RVA = "0x70C488", Offset = "0x70C488", VA = "0x70C488")]
		private void OnPreCull()
		{
		}

		[Address(RVA = "0x70C404", Offset = "0x70C404", VA = "0x70C404")]
		private void UpdateCamera()
		{
		}

		[Address(RVA = "0x70C48C", Offset = "0x70C48C", VA = "0x70C48C")]
		private void UpdateOpenVRPose()
		{
		}

		[Address(RVA = "0x70C56C", Offset = "0x70C56C", VA = "0x70C56C")]
		private void UpdateTransform(HmdMatrix34_t deviceToAbsolute)
		{
		}

		[Address(RVA = "0x70C388", Offset = "0x70C388", VA = "0x70C388")]
		private void UpdateOpenVRDevice()
		{
		}

		[Address(RVA = "0x70C804", Offset = "0x70C804", VA = "0x70C804")]
		private uint IdentifyExternalCameraDevice()
		{
			return default(uint);
		}

		[Address(RVA = "0x70CD50", Offset = "0x70CD50", VA = "0x70CD50")]
		private static string GetStringTrackedDeviceProperty(uint device, ETrackedDeviceProperty property)
		{
			return null;
		}

		[Address(RVA = "0x70CEC8", Offset = "0x70CEC8", VA = "0x70CEC8")]
		public ExternalCamera()
		{
		}
	}
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x6595A4", Offset = "0x6595A4")]
	public class HelpAttribute : PropertyAttribute
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string text;

		[Address(RVA = "0x70D644", Offset = "0x70D644", VA = "0x70D644")]
		public HelpAttribute(string text)
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x6595E0", Offset = "0x6595E0")]
	public class LIV : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672DA4", Offset = "0x672DA4")]
		public Transform TrackedSpaceOrigin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x672DDC", Offset = "0x672DDC")]
		public Camera HMDCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x672DEC", Offset = "0x672DEC")]
		public bool DisableStandardAssets;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x672DFC", Offset = "0x672DFC")]
		public LayerMask SpectatorLayerMask;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool WasActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SharedTextureProtocol _sharedTextureProtocol;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ExternalCamera _externalCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MixedRealityRender _mixedRealityRender;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _wasSteamVRExternalCameraActive;

		public Transform Origin
		{
			[Address(RVA = "0x70D670", Offset = "0x70D670", VA = "0x70D670")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x70D718", Offset = "0x70D718", VA = "0x70D718")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x70D9E8", Offset = "0x70D9E8", VA = "0x70D9E8")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x70DBE0", Offset = "0x70DBE0", VA = "0x70DBE0")]
		private void Update()
		{
		}

		[Address(RVA = "0x70DC38", Offset = "0x70DC38", VA = "0x70DC38")]
		private void OnCompositorActivated()
		{
		}

		[Address(RVA = "0x70DA74", Offset = "0x70DA74", VA = "0x70DA74")]
		private void OnCompositorDeactivated()
		{
		}

		[Address(RVA = "0x70DDE4", Offset = "0x70DDE4", VA = "0x70DDE4")]
		private void CreateSharedTextureProtocol()
		{
		}

		[Address(RVA = "0x70E5BC", Offset = "0x70E5BC", VA = "0x70E5BC")]
		private void DestroySharedTextureProtocol()
		{
		}

		[Address(RVA = "0x70DE54", Offset = "0x70DE54", VA = "0x70DE54")]
		private void CreateExternalCamera()
		{
		}

		[Address(RVA = "0x70E734", Offset = "0x70E734", VA = "0x70E734")]
		private void DestroyExternalCamera()
		{
		}

		[Address(RVA = "0x70DF2C", Offset = "0x70DF2C", VA = "0x70DF2C")]
		private void CreateMixedRealityRender()
		{
		}

		[Address(RVA = "0x70E668", Offset = "0x70E668", VA = "0x70E668")]
		private void DestroyMixedRealityRender()
		{
		}

		[Address(RVA = "0x70E9C0", Offset = "0x70E9C0", VA = "0x70E9C0")]
		public LIV()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x659618", Offset = "0x659618")]
	public class MixedRealityRender : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B654", Offset = "0x65B654")]
		private sealed class <RenderLoop>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MixedRealityRender <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x711180", Offset = "0x711180", VA = "0x711180", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x7111F0", Offset = "0x7111F0", VA = "0x7111F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x71103C", Offset = "0x71103C", VA = "0x71103C")]
			[DebuggerHidden]
			public <RenderLoop>d__20(int <>1__state)
			{
			}

			[Address(RVA = "0x711070", Offset = "0x711070", VA = "0x711070", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x711074", Offset = "0x711074", VA = "0x711074", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x711188", Offset = "0x711188", VA = "0x711188", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _isSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LIV _liv;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera _mrCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _hmd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject _clipQuad;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _clipMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _blitMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture _compositeTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture _foregroundTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture _backgroundTexture;

		[Address(RVA = "0x70E800", Offset = "0x70E800", VA = "0x70E800")]
		public void Setup(LIV liv)
		{
		}

		[Address(RVA = "0x70E9F4", Offset = "0x70E9F4", VA = "0x70E9F4")]
		private void CreateClipQuad()
		{
		}

		[Address(RVA = "0x70ECF8", Offset = "0x70ECF8", VA = "0x70ECF8")]
		private void UpdateCamera()
		{
		}

		[Address(RVA = "0x70EF58", Offset = "0x70EF58", VA = "0x70EF58")]
		private void UpdateTextures()
		{
		}

		[Address(RVA = "0x70F340", Offset = "0x70F340", VA = "0x70F340")]
		public float GetDistanceToHMD()
		{
			return default(float);
		}

		[Address(RVA = "0x70F648", Offset = "0x70F648", VA = "0x70F648")]
		private void OrientClipQuad()
		{
		}

		[Address(RVA = "0x70F984", Offset = "0x70F984", VA = "0x70F984")]
		private void RenderNear()
		{
		}

		[Address(RVA = "0x70FDC8", Offset = "0x70FDC8", VA = "0x70FDC8")]
		private void RenderFar()
		{
		}

		[Address(RVA = "0x70FE4C", Offset = "0x70FE4C", VA = "0x70FE4C")]
		private void Composite()
		{
		}

		[Address(RVA = "0x70FF9C", Offset = "0x70FF9C", VA = "0x70FF9C")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x70FFC8", Offset = "0x70FFC8", VA = "0x70FFC8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681758", Offset = "0x681758")]
		private IEnumerator RenderLoop()
		{
			return null;
		}

		[Address(RVA = "0x711068", Offset = "0x711068", VA = "0x711068")]
		public MixedRealityRender()
		{
		}
	}
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x659650", Offset = "0x659650")]
	public class SharedTextureProtocol : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65B664", Offset = "0x65B664")]
		private sealed class <CallPluginAtEndOfFrames>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SharedTextureProtocol <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x7116AC", Offset = "0x7116AC", VA = "0x7116AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x71171C", Offset = "0x71171C", VA = "0x71171C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x71156C", Offset = "0x71156C", VA = "0x71156C")]
			[DebuggerHidden]
			public <CallPluginAtEndOfFrames>d__13(int <>1__state)
			{
			}

			[Address(RVA = "0x7115E0", Offset = "0x7115E0", VA = "0x7115E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x7115E4", Offset = "0x7115E4", VA = "0x7115E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x7116B4", Offset = "0x7116B4", VA = "0x7116B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		public static bool IsActive
		{
			[Address(RVA = "0x70DC34", Offset = "0x70DC34", VA = "0x70DC34")]
			get
			{
				return default(bool);
			}
		}

		public static int TextureWidth
		{
			[Address(RVA = "0x70F338", Offset = "0x70F338", VA = "0x70F338")]
			get
			{
				return default(int);
			}
		}

		public static int TextureHeight
		{
			[Address(RVA = "0x70F33C", Offset = "0x70F33C", VA = "0x70F33C")]
			get
			{
				return default(int);
			}
		}

		[PreserveSig]
		[Address(RVA = "0x7111F8", Offset = "0x7111F8", VA = "0x7111F8")]
		private static extern IntPtr GetRenderEventFunc();

		[PreserveSig]
		[Address(RVA = "0x711284", Offset = "0x711284", VA = "0x711284")]
		private static extern bool GetIsCaptureActive();

		[PreserveSig]
		[Address(RVA = "0x711318", Offset = "0x711318", VA = "0x711318")]
		private static extern int GetTextureWidth();

		[PreserveSig]
		[Address(RVA = "0x7113A4", Offset = "0x7113A4", VA = "0x7113A4")]
		private static extern int GetTextureHeight();

		[PreserveSig]
		[Address(RVA = "0x711430", Offset = "0x711430", VA = "0x711430")]
		private static extern void SetTexture(IntPtr texture);

		[Address(RVA = "0x70FF54", Offset = "0x70FF54", VA = "0x70FF54")]
		public static void SetOutputTexture(Texture texture)
		{
		}

		[Address(RVA = "0x7114CC", Offset = "0x7114CC", VA = "0x7114CC")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x7114F8", Offset = "0x7114F8", VA = "0x7114F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6817BC", Offset = "0x6817BC")]
		private IEnumerator CallPluginAtEndOfFrames()
		{
			return null;
		}

		[Address(RVA = "0x711598", Offset = "0x711598", VA = "0x711598")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x7115D8", Offset = "0x7115D8", VA = "0x7115D8")]
		public SharedTextureProtocol()
		{
		}
	}
	internal static class SteamVRCompatibility
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool IsAvailable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Type SteamVRCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Type SteamVRExternalCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Type SteamVRFade;

		[Address(RVA = "0x711724", Offset = "0x711724", VA = "0x711724")]
		static SteamVRCompatibility()
		{
		}

		[Address(RVA = "0x71177C", Offset = "0x71177C", VA = "0x71177C")]
		private static bool FindSteamVRAsset()
		{
			return default(bool);
		}
	}
}
namespace Valve.VR
{
	public struct IVRSystem
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B674", Offset = "0x65B674")]
		internal delegate void _GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B688", Offset = "0x65B688")]
		internal delegate HmdMatrix44_t _GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B69C", Offset = "0x65B69C")]
		internal delegate void _GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B6B0", Offset = "0x65B6B0")]
		internal delegate bool _ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B6C4", Offset = "0x65B6C4")]
		internal delegate HmdMatrix34_t _GetEyeToHeadTransform(EVREye eEye);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B6D8", Offset = "0x65B6D8")]
		internal delegate bool _GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B6EC", Offset = "0x65B6EC")]
		internal delegate int _GetD3D9AdapterIndex();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B700", Offset = "0x65B700")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B714", Offset = "0x65B714")]
		internal delegate void _GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B728", Offset = "0x65B728")]
		internal delegate bool _IsDisplayOnDesktop();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B73C", Offset = "0x65B73C")]
		internal delegate bool _SetDisplayVisibility(bool bIsVisibleOnDesktop);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B750", Offset = "0x65B750")]
		internal delegate void _GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, [In][Out] TrackedDevicePose_t[] pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B764", Offset = "0x65B764")]
		internal delegate void _ResetSeatedZeroPose();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B778", Offset = "0x65B778")]
		internal delegate HmdMatrix34_t _GetSeatedZeroPoseToStandingAbsoluteTrackingPose();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B78C", Offset = "0x65B78C")]
		internal delegate HmdMatrix34_t _GetRawZeroPoseToStandingAbsoluteTrackingPose();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B7A0", Offset = "0x65B7A0")]
		internal delegate uint _GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, [In][Out] uint[] punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B7B4", Offset = "0x65B7B4")]
		internal delegate EDeviceActivityLevel _GetTrackedDeviceActivityLevel(uint unDeviceId);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B7C8", Offset = "0x65B7C8")]
		internal delegate void _ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B7DC", Offset = "0x65B7DC")]
		internal delegate uint _GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B7F0", Offset = "0x65B7F0")]
		internal delegate ETrackedControllerRole _GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B804", Offset = "0x65B804")]
		internal delegate ETrackedDeviceClass _GetTrackedDeviceClass(uint unDeviceIndex);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B818", Offset = "0x65B818")]
		internal delegate bool _IsTrackedDeviceConnected(uint unDeviceIndex);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B82C", Offset = "0x65B82C")]
		internal delegate bool _GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B840", Offset = "0x65B840")]
		internal delegate float _GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B854", Offset = "0x65B854")]
		internal delegate int _GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B868", Offset = "0x65B868")]
		internal delegate ulong _GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B87C", Offset = "0x65B87C")]
		internal delegate HmdMatrix34_t _GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B890", Offset = "0x65B890")]
		internal delegate uint _GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B8A4", Offset = "0x65B8A4")]
		internal delegate uint _GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B8B8", Offset = "0x65B8B8")]
		internal delegate IntPtr _GetPropErrorNameFromEnum(ETrackedPropertyError error);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B8CC", Offset = "0x65B8CC")]
		internal delegate bool _PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B8E0", Offset = "0x65B8E0")]
		internal delegate bool _PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B8F4", Offset = "0x65B8F4")]
		internal delegate IntPtr _GetEventTypeNameFromEnum(EVREventType eType);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B908", Offset = "0x65B908")]
		internal delegate HiddenAreaMesh_t _GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B91C", Offset = "0x65B91C")]
		internal delegate bool _GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B930", Offset = "0x65B930")]
		internal delegate bool _GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B944", Offset = "0x65B944")]
		internal delegate void _TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B958", Offset = "0x65B958")]
		internal delegate IntPtr _GetButtonIdNameFromEnum(EVRButtonId eButtonId);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B96C", Offset = "0x65B96C")]
		internal delegate IntPtr _GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B980", Offset = "0x65B980")]
		internal delegate bool _IsInputAvailable();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B994", Offset = "0x65B994")]
		internal delegate bool _IsSteamVRDrawingControllers();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B9A8", Offset = "0x65B9A8")]
		internal delegate bool _ShouldApplicationPause();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B9BC", Offset = "0x65B9BC")]
		internal delegate bool _ShouldApplicationReduceRenderingWork();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B9D0", Offset = "0x65B9D0")]
		internal delegate uint _DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B9E4", Offset = "0x65B9E4")]
		internal delegate EVRFirmwareError _PerformFirmwareUpdate(uint unDeviceIndex);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65B9F8", Offset = "0x65B9F8")]
		internal delegate void _AcknowledgeQuit_Exiting();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA0C", Offset = "0x65BA0C")]
		internal delegate void _AcknowledgeQuit_UserPrompt();

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetRecommendedRenderTargetSize GetRecommendedRenderTargetSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetProjectionMatrix GetProjectionMatrix;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetProjectionRaw GetProjectionRaw;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ComputeDistortion ComputeDistortion;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetEyeToHeadTransform GetEyeToHeadTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetTimeSinceLastVsync GetTimeSinceLastVsync;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetD3D9AdapterIndex GetD3D9AdapterIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOutputDevice GetOutputDevice;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _IsDisplayOnDesktop IsDisplayOnDesktop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetDisplayVisibility SetDisplayVisibility;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetDeviceToAbsoluteTrackingPose GetDeviceToAbsoluteTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ResetSeatedZeroPose ResetSeatedZeroPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetSeatedZeroPoseToStandingAbsoluteTrackingPose GetSeatedZeroPoseToStandingAbsoluteTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetRawZeroPoseToStandingAbsoluteTrackingPose GetRawZeroPoseToStandingAbsoluteTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetSortedTrackedDeviceIndicesOfClass GetSortedTrackedDeviceIndicesOfClass;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetTrackedDeviceActivityLevel GetTrackedDeviceActivityLevel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ApplyTransform ApplyTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetTrackedDeviceIndexForControllerRole GetTrackedDeviceIndexForControllerRole;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetControllerRoleForTrackedDeviceIndex GetControllerRoleForTrackedDeviceIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetTrackedDeviceClass GetTrackedDeviceClass;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsTrackedDeviceConnected IsTrackedDeviceConnected;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetBoolTrackedDeviceProperty GetBoolTrackedDeviceProperty;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetFloatTrackedDeviceProperty GetFloatTrackedDeviceProperty;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetInt32TrackedDeviceProperty GetInt32TrackedDeviceProperty;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetUint64TrackedDeviceProperty GetUint64TrackedDeviceProperty;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _GetMatrix34TrackedDeviceProperty GetMatrix34TrackedDeviceProperty;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetArrayTrackedDeviceProperty GetArrayTrackedDeviceProperty;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _GetStringTrackedDeviceProperty GetStringTrackedDeviceProperty;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetPropErrorNameFromEnum GetPropErrorNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _PollNextEvent PollNextEvent;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _PollNextEventWithPose PollNextEventWithPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetEventTypeNameFromEnum GetEventTypeNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetHiddenAreaMesh GetHiddenAreaMesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetControllerState GetControllerState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetControllerStateWithPose GetControllerStateWithPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _TriggerHapticPulse TriggerHapticPulse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _GetButtonIdNameFromEnum GetButtonIdNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetControllerAxisTypeNameFromEnum GetControllerAxisTypeNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _IsInputAvailable IsInputAvailable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _IsSteamVRDrawingControllers IsSteamVRDrawingControllers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShouldApplicationPause ShouldApplicationPause;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _ShouldApplicationReduceRenderingWork ShouldApplicationReduceRenderingWork;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _DriverDebugRequest DriverDebugRequest;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _PerformFirmwareUpdate PerformFirmwareUpdate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _AcknowledgeQuit_Exiting AcknowledgeQuit_Exiting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _AcknowledgeQuit_UserPrompt AcknowledgeQuit_UserPrompt;
	}
	public struct IVRExtendedDisplay
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA20", Offset = "0x65BA20")]
		internal delegate void _GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA34", Offset = "0x65BA34")]
		internal delegate void _GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA48", Offset = "0x65BA48")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetWindowBounds GetWindowBounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetEyeOutputViewport GetEyeOutputViewport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;
	}
	public struct IVRTrackedCamera
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA5C", Offset = "0x65BA5C")]
		internal delegate IntPtr _GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA70", Offset = "0x65BA70")]
		internal delegate EVRTrackedCameraError _HasCamera(uint nDeviceIndex, ref bool pHasCamera);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA84", Offset = "0x65BA84")]
		internal delegate EVRTrackedCameraError _GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BA98", Offset = "0x65BA98")]
		internal delegate EVRTrackedCameraError _GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BAAC", Offset = "0x65BAAC")]
		internal delegate EVRTrackedCameraError _GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BAC0", Offset = "0x65BAC0")]
		internal delegate EVRTrackedCameraError _AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BAD4", Offset = "0x65BAD4")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamingService(ulong hTrackedCamera);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BAE8", Offset = "0x65BAE8")]
		internal delegate EVRTrackedCameraError _GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BAFC", Offset = "0x65BAFC")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB10", Offset = "0x65BB10")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB24", Offset = "0x65BB24")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB38", Offset = "0x65BB38")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HasCamera HasCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetCameraFrameSize GetCameraFrameSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetCameraIntrinsics GetCameraIntrinsics;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetCameraProjection GetCameraProjection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _AcquireVideoStreamingService AcquireVideoStreamingService;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ReleaseVideoStreamingService ReleaseVideoStreamingService;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetVideoStreamTextureSize GetVideoStreamTextureSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetVideoStreamTextureGL GetVideoStreamTextureGL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL;
	}
	public struct IVRApplications
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB4C", Offset = "0x65BB4C")]
		internal delegate EVRApplicationError _AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB60", Offset = "0x65BB60")]
		internal delegate EVRApplicationError _RemoveApplicationManifest(string pchApplicationManifestFullPath);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB74", Offset = "0x65BB74")]
		internal delegate bool _IsApplicationInstalled(string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB88", Offset = "0x65BB88")]
		internal delegate uint _GetApplicationCount();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BB9C", Offset = "0x65BB9C")]
		internal delegate EVRApplicationError _GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BBB0", Offset = "0x65BBB0")]
		internal delegate EVRApplicationError _GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BBC4", Offset = "0x65BBC4")]
		internal delegate EVRApplicationError _LaunchApplication(string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BBD8", Offset = "0x65BBD8")]
		internal delegate EVRApplicationError _LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, [In][Out] AppOverrideKeys_t[] pKeys, uint unKeys);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BBEC", Offset = "0x65BBEC")]
		internal delegate EVRApplicationError _LaunchApplicationFromMimeType(string pchMimeType, string pchArgs);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC00", Offset = "0x65BC00")]
		internal delegate EVRApplicationError _LaunchDashboardOverlay(string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC14", Offset = "0x65BC14")]
		internal delegate bool _CancelApplicationLaunch(string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC28", Offset = "0x65BC28")]
		internal delegate EVRApplicationError _IdentifyApplication(uint unProcessId, string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC3C", Offset = "0x65BC3C")]
		internal delegate uint _GetApplicationProcessId(string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC50", Offset = "0x65BC50")]
		internal delegate IntPtr _GetApplicationsErrorNameFromEnum(EVRApplicationError error);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC64", Offset = "0x65BC64")]
		internal delegate uint _GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC78", Offset = "0x65BC78")]
		internal delegate bool _GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BC8C", Offset = "0x65BC8C")]
		internal delegate ulong _GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BCA0", Offset = "0x65BCA0")]
		internal delegate EVRApplicationError _SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BCB4", Offset = "0x65BCB4")]
		internal delegate bool _GetApplicationAutoLaunch(string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BCC8", Offset = "0x65BCC8")]
		internal delegate EVRApplicationError _SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BCDC", Offset = "0x65BCDC")]
		internal delegate bool _GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BCF0", Offset = "0x65BCF0")]
		internal delegate bool _GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD04", Offset = "0x65BD04")]
		internal delegate uint _GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD18", Offset = "0x65BD18")]
		internal delegate uint _GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD2C", Offset = "0x65BD2C")]
		internal delegate EVRApplicationError _GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD40", Offset = "0x65BD40")]
		internal delegate EVRApplicationTransitionState _GetTransitionState();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD54", Offset = "0x65BD54")]
		internal delegate EVRApplicationError _PerformApplicationPrelaunchCheck(string pchAppKey);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD68", Offset = "0x65BD68")]
		internal delegate IntPtr _GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD7C", Offset = "0x65BD7C")]
		internal delegate bool _IsQuitUserPromptRequested();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BD90", Offset = "0x65BD90")]
		internal delegate EVRApplicationError _LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BDA4", Offset = "0x65BDA4")]
		internal delegate uint _GetCurrentSceneProcessId();

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _AddApplicationManifest AddApplicationManifest;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveApplicationManifest RemoveApplicationManifest;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _IsApplicationInstalled IsApplicationInstalled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetApplicationCount GetApplicationCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetApplicationKeyByIndex GetApplicationKeyByIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetApplicationKeyByProcessId GetApplicationKeyByProcessId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _LaunchApplication LaunchApplication;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _LaunchTemplateApplication LaunchTemplateApplication;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _LaunchApplicationFromMimeType LaunchApplicationFromMimeType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _LaunchDashboardOverlay LaunchDashboardOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _CancelApplicationLaunch CancelApplicationLaunch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _IdentifyApplication IdentifyApplication;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetApplicationProcessId GetApplicationProcessId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetApplicationPropertyString GetApplicationPropertyString;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetApplicationPropertyBool GetApplicationPropertyBool;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetApplicationPropertyUint64 GetApplicationPropertyUint64;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _SetApplicationAutoLaunch SetApplicationAutoLaunch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetApplicationAutoLaunch GetApplicationAutoLaunch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetApplicationLaunchArguments GetApplicationLaunchArguments;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetStartingApplication GetStartingApplication;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetTransitionState GetTransitionState;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _IsQuitUserPromptRequested IsQuitUserPromptRequested;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _LaunchInternalProcess LaunchInternalProcess;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetCurrentSceneProcessId GetCurrentSceneProcessId;
	}
	public struct IVRChaperone
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BDB8", Offset = "0x65BDB8")]
		internal delegate ChaperoneCalibrationState _GetCalibrationState();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BDCC", Offset = "0x65BDCC")]
		internal delegate bool _GetPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BDE0", Offset = "0x65BDE0")]
		internal delegate bool _GetPlayAreaRect(ref HmdQuad_t rect);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BDF4", Offset = "0x65BDF4")]
		internal delegate void _ReloadInfo();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE08", Offset = "0x65BE08")]
		internal delegate void _SetSceneColor(HmdColor_t color);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE1C", Offset = "0x65BE1C")]
		internal delegate void _GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE30", Offset = "0x65BE30")]
		internal delegate bool _AreBoundsVisible();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE44", Offset = "0x65BE44")]
		internal delegate void _ForceBoundsVisible(bool bForce);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCalibrationState GetCalibrationState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetPlayAreaSize GetPlayAreaSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetPlayAreaRect GetPlayAreaRect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ReloadInfo ReloadInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetSceneColor SetSceneColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetBoundsColor GetBoundsColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _AreBoundsVisible AreBoundsVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _ForceBoundsVisible ForceBoundsVisible;
	}
	public struct IVRChaperoneSetup
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE58", Offset = "0x65BE58")]
		internal delegate bool _CommitWorkingCopy(EChaperoneConfigFile configFile);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE6C", Offset = "0x65BE6C")]
		internal delegate void _RevertWorkingCopy();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE80", Offset = "0x65BE80")]
		internal delegate bool _GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BE94", Offset = "0x65BE94")]
		internal delegate bool _GetWorkingPlayAreaRect(ref HmdQuad_t rect);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BEA8", Offset = "0x65BEA8")]
		internal delegate bool _GetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BEBC", Offset = "0x65BEBC")]
		internal delegate bool _GetLiveCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BED0", Offset = "0x65BED0")]
		internal delegate bool _GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BEE4", Offset = "0x65BEE4")]
		internal delegate bool _GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BEF8", Offset = "0x65BEF8")]
		internal delegate void _SetWorkingPlayAreaSize(float sizeX, float sizeZ);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF0C", Offset = "0x65BF0C")]
		internal delegate void _SetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF20", Offset = "0x65BF20")]
		internal delegate void _SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF34", Offset = "0x65BF34")]
		internal delegate void _SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF48", Offset = "0x65BF48")]
		internal delegate void _ReloadFromDisk(EChaperoneConfigFile configFile);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF5C", Offset = "0x65BF5C")]
		internal delegate bool _GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF70", Offset = "0x65BF70")]
		internal delegate void _SetWorkingCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, uint unTagCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF84", Offset = "0x65BF84")]
		internal delegate bool _GetLiveCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, ref uint punTagCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BF98", Offset = "0x65BF98")]
		internal delegate bool _SetWorkingPhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BFAC", Offset = "0x65BFAC")]
		internal delegate bool _GetLivePhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BFC0", Offset = "0x65BFC0")]
		internal delegate bool _ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BFD4", Offset = "0x65BFD4")]
		internal delegate bool _ImportFromBufferToWorking(string pBuffer, uint nImportFlags);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CommitWorkingCopy CommitWorkingCopy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RevertWorkingCopy RevertWorkingCopy;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetWorkingPlayAreaSize GetWorkingPlayAreaSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetWorkingPlayAreaRect GetWorkingPlayAreaRect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetWorkingPlayAreaSize SetWorkingPlayAreaSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ReloadFromDisk ReloadFromDisk;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetWorkingCollisionBoundsTagsInfo SetWorkingCollisionBoundsTagsInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetLiveCollisionBoundsTagsInfo GetLiveCollisionBoundsTagsInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetWorkingPhysicalBoundsInfo SetWorkingPhysicalBoundsInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetLivePhysicalBoundsInfo GetLivePhysicalBoundsInfo;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _ExportLiveToBuffer ExportLiveToBuffer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _ImportFromBufferToWorking ImportFromBufferToWorking;
	}
	public struct IVRCompositor
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BFE8", Offset = "0x65BFE8")]
		internal delegate void _SetTrackingSpace(ETrackingUniverseOrigin eOrigin);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65BFFC", Offset = "0x65BFFC")]
		internal delegate ETrackingUniverseOrigin _GetTrackingSpace();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C010", Offset = "0x65C010")]
		internal delegate EVRCompositorError _WaitGetPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C024", Offset = "0x65C024")]
		internal delegate EVRCompositorError _GetLastPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C038", Offset = "0x65C038")]
		internal delegate EVRCompositorError _GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C04C", Offset = "0x65C04C")]
		internal delegate EVRCompositorError _Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C060", Offset = "0x65C060")]
		internal delegate void _ClearLastSubmittedFrame();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C074", Offset = "0x65C074")]
		internal delegate void _PostPresentHandoff();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C088", Offset = "0x65C088")]
		internal delegate bool _GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C09C", Offset = "0x65C09C")]
		internal delegate uint _GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C0B0", Offset = "0x65C0B0")]
		internal delegate float _GetFrameTimeRemaining();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C0C4", Offset = "0x65C0C4")]
		internal delegate void _GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C0D8", Offset = "0x65C0D8")]
		internal delegate void _FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C0EC", Offset = "0x65C0EC")]
		internal delegate HmdColor_t _GetCurrentFadeColor(bool bBackground);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C100", Offset = "0x65C100")]
		internal delegate void _FadeGrid(float fSeconds, bool bFadeIn);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C114", Offset = "0x65C114")]
		internal delegate float _GetCurrentGridAlpha();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C128", Offset = "0x65C128")]
		internal delegate EVRCompositorError _SetSkyboxOverride([In][Out] Texture_t[] pTextures, uint unTextureCount);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C13C", Offset = "0x65C13C")]
		internal delegate void _ClearSkyboxOverride();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C150", Offset = "0x65C150")]
		internal delegate void _CompositorBringToFront();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C164", Offset = "0x65C164")]
		internal delegate void _CompositorGoToBack();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C178", Offset = "0x65C178")]
		internal delegate void _CompositorQuit();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C18C", Offset = "0x65C18C")]
		internal delegate bool _IsFullscreen();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C1A0", Offset = "0x65C1A0")]
		internal delegate uint _GetCurrentSceneFocusProcess();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C1B4", Offset = "0x65C1B4")]
		internal delegate uint _GetLastFrameRenderer();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C1C8", Offset = "0x65C1C8")]
		internal delegate bool _CanRenderScene();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C1DC", Offset = "0x65C1DC")]
		internal delegate void _ShowMirrorWindow();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C1F0", Offset = "0x65C1F0")]
		internal delegate void _HideMirrorWindow();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C204", Offset = "0x65C204")]
		internal delegate bool _IsMirrorWindowVisible();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C218", Offset = "0x65C218")]
		internal delegate void _CompositorDumpImages();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C22C", Offset = "0x65C22C")]
		internal delegate bool _ShouldAppRenderWithLowResources();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C240", Offset = "0x65C240")]
		internal delegate void _ForceInterleavedReprojectionOn(bool bOverride);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C254", Offset = "0x65C254")]
		internal delegate void _ForceReconnectProcess();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C268", Offset = "0x65C268")]
		internal delegate void _SuspendRendering(bool bSuspend);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C27C", Offset = "0x65C27C")]
		internal delegate EVRCompositorError _GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C290", Offset = "0x65C290")]
		internal delegate void _ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C2A4", Offset = "0x65C2A4")]
		internal delegate EVRCompositorError _GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C2B8", Offset = "0x65C2B8")]
		internal delegate bool _ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C2CC", Offset = "0x65C2CC")]
		internal delegate void _LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C2E0", Offset = "0x65C2E0")]
		internal delegate void _UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C2F4", Offset = "0x65C2F4")]
		internal delegate uint _GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C308", Offset = "0x65C308")]
		internal delegate uint _GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C31C", Offset = "0x65C31C")]
		internal delegate void _SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C330", Offset = "0x65C330")]
		internal delegate EVRCompositorError _SubmitExplicitTimingData();

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetTrackingSpace SetTrackingSpace;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetTrackingSpace GetTrackingSpace;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _WaitGetPoses WaitGetPoses;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetLastPoses GetLastPoses;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetLastPoseForTrackedDeviceIndex GetLastPoseForTrackedDeviceIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _Submit Submit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ClearLastSubmittedFrame ClearLastSubmittedFrame;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _PostPresentHandoff PostPresentHandoff;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFrameTiming GetFrameTiming;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetFrameTimings GetFrameTimings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetFrameTimeRemaining GetFrameTimeRemaining;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetCumulativeStats GetCumulativeStats;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _FadeToColor FadeToColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetCurrentFadeColor GetCurrentFadeColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _FadeGrid FadeGrid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetCurrentGridAlpha GetCurrentGridAlpha;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetSkyboxOverride SetSkyboxOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ClearSkyboxOverride ClearSkyboxOverride;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _CompositorBringToFront CompositorBringToFront;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _CompositorGoToBack CompositorGoToBack;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _CompositorQuit CompositorQuit;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsFullscreen IsFullscreen;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetCurrentSceneFocusProcess GetCurrentSceneFocusProcess;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetLastFrameRenderer GetLastFrameRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _CanRenderScene CanRenderScene;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _ShowMirrorWindow ShowMirrorWindow;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _HideMirrorWindow HideMirrorWindow;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _IsMirrorWindowVisible IsMirrorWindowVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _CompositorDumpImages CompositorDumpImages;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _ShouldAppRenderWithLowResources ShouldAppRenderWithLowResources;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _ForceInterleavedReprojectionOn ForceInterleavedReprojectionOn;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _ForceReconnectProcess ForceReconnectProcess;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _SuspendRendering SuspendRendering;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetMirrorTextureD3D11 GetMirrorTextureD3D11;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _ReleaseMirrorTextureD3D11 ReleaseMirrorTextureD3D11;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetMirrorTextureGL GetMirrorTextureGL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _ReleaseSharedGLTexture ReleaseSharedGLTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _LockGLSharedTextureForAccess LockGLSharedTextureForAccess;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _UnlockGLSharedTextureForAccess UnlockGLSharedTextureForAccess;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetVulkanInstanceExtensionsRequired GetVulkanInstanceExtensionsRequired;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _GetVulkanDeviceExtensionsRequired GetVulkanDeviceExtensionsRequired;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _SetExplicitTimingMode SetExplicitTimingMode;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _SubmitExplicitTimingData SubmitExplicitTimingData;
	}
	public struct IVROverlay
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C344", Offset = "0x65C344")]
		internal delegate EVROverlayError _FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C358", Offset = "0x65C358")]
		internal delegate EVROverlayError _CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C36C", Offset = "0x65C36C")]
		internal delegate EVROverlayError _DestroyOverlay(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C380", Offset = "0x65C380")]
		internal delegate EVROverlayError _SetHighQualityOverlay(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C394", Offset = "0x65C394")]
		internal delegate ulong _GetHighQualityOverlay();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C3A8", Offset = "0x65C3A8")]
		internal delegate uint _GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C3BC", Offset = "0x65C3BC")]
		internal delegate uint _GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C3D0", Offset = "0x65C3D0")]
		internal delegate EVROverlayError _SetOverlayName(ulong ulOverlayHandle, string pchName);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C3E4", Offset = "0x65C3E4")]
		internal delegate EVROverlayError _GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C3F8", Offset = "0x65C3F8")]
		internal delegate IntPtr _GetOverlayErrorNameFromEnum(EVROverlayError error);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C40C", Offset = "0x65C40C")]
		internal delegate EVROverlayError _SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C420", Offset = "0x65C420")]
		internal delegate uint _GetOverlayRenderingPid(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C434", Offset = "0x65C434")]
		internal delegate EVROverlayError _SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C448", Offset = "0x65C448")]
		internal delegate EVROverlayError _GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C45C", Offset = "0x65C45C")]
		internal delegate EVROverlayError _SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C470", Offset = "0x65C470")]
		internal delegate EVROverlayError _GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C484", Offset = "0x65C484")]
		internal delegate EVROverlayError _SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C498", Offset = "0x65C498")]
		internal delegate EVROverlayError _GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C4AC", Offset = "0x65C4AC")]
		internal delegate EVROverlayError _SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C4C0", Offset = "0x65C4C0")]
		internal delegate EVROverlayError _GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C4D4", Offset = "0x65C4D4")]
		internal delegate EVROverlayError _SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C4E8", Offset = "0x65C4E8")]
		internal delegate EVROverlayError _GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C4FC", Offset = "0x65C4FC")]
		internal delegate EVROverlayError _SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C510", Offset = "0x65C510")]
		internal delegate EVROverlayError _GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C524", Offset = "0x65C524")]
		internal delegate EVROverlayError _SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C538", Offset = "0x65C538")]
		internal delegate EVROverlayError _GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C54C", Offset = "0x65C54C")]
		internal delegate EVROverlayError _SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C560", Offset = "0x65C560")]
		internal delegate EVROverlayError _GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C574", Offset = "0x65C574")]
		internal delegate EVROverlayError _SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C588", Offset = "0x65C588")]
		internal delegate EVROverlayError _GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C59C", Offset = "0x65C59C")]
		internal delegate uint _GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C5B0", Offset = "0x65C5B0")]
		internal delegate EVROverlayError _SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C5C4", Offset = "0x65C5C4")]
		internal delegate EVROverlayError _GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C5D8", Offset = "0x65C5D8")]
		internal delegate EVROverlayError _SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C5EC", Offset = "0x65C5EC")]
		internal delegate EVROverlayError _GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C600", Offset = "0x65C600")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C614", Offset = "0x65C614")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C628", Offset = "0x65C628")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C63C", Offset = "0x65C63C")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C650", Offset = "0x65C650")]
		internal delegate EVROverlayError _GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C664", Offset = "0x65C664")]
		internal delegate EVROverlayError _SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C678", Offset = "0x65C678")]
		internal delegate EVROverlayError _ShowOverlay(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C68C", Offset = "0x65C68C")]
		internal delegate EVROverlayError _HideOverlay(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C6A0", Offset = "0x65C6A0")]
		internal delegate bool _IsOverlayVisible(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C6B4", Offset = "0x65C6B4")]
		internal delegate EVROverlayError _GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C6C8", Offset = "0x65C6C8")]
		internal delegate bool _PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C6DC", Offset = "0x65C6DC")]
		internal delegate EVROverlayError _GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C6F0", Offset = "0x65C6F0")]
		internal delegate EVROverlayError _SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C704", Offset = "0x65C704")]
		internal delegate EVROverlayError _GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C718", Offset = "0x65C718")]
		internal delegate EVROverlayError _SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C72C", Offset = "0x65C72C")]
		internal delegate bool _ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C740", Offset = "0x65C740")]
		internal delegate bool _IsHoverTargetOverlay(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C754", Offset = "0x65C754")]
		internal delegate ulong _GetGamepadFocusOverlay();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C768", Offset = "0x65C768")]
		internal delegate EVROverlayError _SetGamepadFocusOverlay(ulong ulNewFocusOverlay);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C77C", Offset = "0x65C77C")]
		internal delegate EVROverlayError _SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C790", Offset = "0x65C790")]
		internal delegate EVROverlayError _MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C7A4", Offset = "0x65C7A4")]
		internal delegate EVROverlayError _SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C7B8", Offset = "0x65C7B8")]
		internal delegate EVROverlayError _GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C7CC", Offset = "0x65C7CC")]
		internal delegate EVROverlayError _SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C7E0", Offset = "0x65C7E0")]
		internal delegate EVROverlayError _ClearOverlayTexture(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C7F4", Offset = "0x65C7F4")]
		internal delegate EVROverlayError _SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C808", Offset = "0x65C808")]
		internal delegate EVROverlayError _SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C81C", Offset = "0x65C81C")]
		internal delegate EVROverlayError _GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C830", Offset = "0x65C830")]
		internal delegate EVROverlayError _ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C844", Offset = "0x65C844")]
		internal delegate EVROverlayError _GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C858", Offset = "0x65C858")]
		internal delegate EVROverlayError _CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C86C", Offset = "0x65C86C")]
		internal delegate bool _IsDashboardVisible();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C880", Offset = "0x65C880")]
		internal delegate bool _IsActiveDashboardOverlay(ulong ulOverlayHandle);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C894", Offset = "0x65C894")]
		internal delegate EVROverlayError _SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C8A8", Offset = "0x65C8A8")]
		internal delegate EVROverlayError _GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C8BC", Offset = "0x65C8BC")]
		internal delegate void _ShowDashboard(string pchOverlayToShow);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C8D0", Offset = "0x65C8D0")]
		internal delegate uint _GetPrimaryDashboardDevice();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C8E4", Offset = "0x65C8E4")]
		internal delegate EVROverlayError _ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C8F8", Offset = "0x65C8F8")]
		internal delegate EVROverlayError _ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C90C", Offset = "0x65C90C")]
		internal delegate uint _GetKeyboardText(StringBuilder pchText, uint cchText);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C920", Offset = "0x65C920")]
		internal delegate void _HideKeyboard();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C934", Offset = "0x65C934")]
		internal delegate void _SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C948", Offset = "0x65C948")]
		internal delegate void _SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C95C", Offset = "0x65C95C")]
		internal delegate EVROverlayError _SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C970", Offset = "0x65C970")]
		internal delegate EVROverlayError _GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C984", Offset = "0x65C984")]
		internal delegate VRMessageOverlayResponse _ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C998", Offset = "0x65C998")]
		internal delegate void _CloseMessageOverlay();

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _FindOverlay FindOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _CreateOverlay CreateOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _DestroyOverlay DestroyOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetHighQualityOverlay SetHighQualityOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetHighQualityOverlay GetHighQualityOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetOverlayKey GetOverlayKey;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetOverlayName GetOverlayName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _SetOverlayName SetOverlayName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOverlayImageData GetOverlayImageData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetOverlayErrorNameFromEnum GetOverlayErrorNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetOverlayRenderingPid SetOverlayRenderingPid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetOverlayRenderingPid GetOverlayRenderingPid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _SetOverlayFlag SetOverlayFlag;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetOverlayFlag GetOverlayFlag;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetOverlayColor SetOverlayColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetOverlayColor GetOverlayColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetOverlayAlpha SetOverlayAlpha;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetOverlayAlpha GetOverlayAlpha;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _SetOverlayTexelAspect SetOverlayTexelAspect;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetOverlayTexelAspect GetOverlayTexelAspect;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _SetOverlaySortOrder SetOverlaySortOrder;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetOverlaySortOrder GetOverlaySortOrder;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _SetOverlayWidthInMeters SetOverlayWidthInMeters;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetOverlayWidthInMeters GetOverlayWidthInMeters;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _SetOverlayAutoCurveDistanceRangeInMeters SetOverlayAutoCurveDistanceRangeInMeters;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetOverlayAutoCurveDistanceRangeInMeters GetOverlayAutoCurveDistanceRangeInMeters;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _SetOverlayTextureColorSpace SetOverlayTextureColorSpace;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetOverlayTextureColorSpace GetOverlayTextureColorSpace;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _SetOverlayTextureBounds SetOverlayTextureBounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetOverlayTextureBounds GetOverlayTextureBounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetOverlayRenderModel GetOverlayRenderModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _SetOverlayRenderModel SetOverlayRenderModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetOverlayTransformType GetOverlayTransformType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _SetOverlayTransformAbsolute SetOverlayTransformAbsolute;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetOverlayTransformAbsolute GetOverlayTransformAbsolute;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _SetOverlayTransformTrackedDeviceRelative SetOverlayTransformTrackedDeviceRelative;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _GetOverlayTransformTrackedDeviceRelative GetOverlayTransformTrackedDeviceRelative;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _SetOverlayTransformTrackedDeviceComponent SetOverlayTransformTrackedDeviceComponent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetOverlayTransformTrackedDeviceComponent GetOverlayTransformTrackedDeviceComponent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetOverlayTransformOverlayRelative GetOverlayTransformOverlayRelative;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _SetOverlayTransformOverlayRelative SetOverlayTransformOverlayRelative;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShowOverlay ShowOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _HideOverlay HideOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _IsOverlayVisible IsOverlayVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _GetTransformForOverlayCoordinates GetTransformForOverlayCoordinates;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _PollNextOverlayEvent PollNextOverlayEvent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _GetOverlayInputMethod GetOverlayInputMethod;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		internal _SetOverlayInputMethod SetOverlayInputMethod;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		internal _GetOverlayMouseScale GetOverlayMouseScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		internal _SetOverlayMouseScale SetOverlayMouseScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		internal _ComputeOverlayIntersection ComputeOverlayIntersection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		internal _IsHoverTargetOverlay IsHoverTargetOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		internal _GetGamepadFocusOverlay GetGamepadFocusOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		internal _SetGamepadFocusOverlay SetGamepadFocusOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		internal _SetOverlayNeighbor SetOverlayNeighbor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		internal _MoveGamepadFocusToNeighbor MoveGamepadFocusToNeighbor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		internal _SetOverlayDualAnalogTransform SetOverlayDualAnalogTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		internal _GetOverlayDualAnalogTransform GetOverlayDualAnalogTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		internal _SetOverlayTexture SetOverlayTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		internal _ClearOverlayTexture ClearOverlayTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		internal _SetOverlayRaw SetOverlayRaw;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		internal _SetOverlayFromFile SetOverlayFromFile;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		internal _GetOverlayTexture GetOverlayTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		internal _ReleaseNativeOverlayHandle ReleaseNativeOverlayHandle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		internal _GetOverlayTextureSize GetOverlayTextureSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		internal _CreateDashboardOverlay CreateDashboardOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		internal _IsDashboardVisible IsDashboardVisible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		internal _IsActiveDashboardOverlay IsActiveDashboardOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		internal _SetDashboardOverlaySceneProcess SetDashboardOverlaySceneProcess;

		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		internal _GetDashboardOverlaySceneProcess GetDashboardOverlaySceneProcess;

		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		internal _ShowDashboard ShowDashboard;

		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		internal _GetPrimaryDashboardDevice GetPrimaryDashboardDevice;

		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		internal _ShowKeyboard ShowKeyboard;

		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		internal _ShowKeyboardForOverlay ShowKeyboardForOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		internal _GetKeyboardText GetKeyboardText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		internal _HideKeyboard HideKeyboard;

		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		internal _SetKeyboardTransformAbsolute SetKeyboardTransformAbsolute;

		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		internal _SetKeyboardPositionForOverlay SetKeyboardPositionForOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		internal _SetOverlayIntersectionMask SetOverlayIntersectionMask;

		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		internal _GetOverlayFlags GetOverlayFlags;

		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		internal _ShowMessageOverlay ShowMessageOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		internal _CloseMessageOverlay CloseMessageOverlay;
	}
	public struct IVRRenderModels
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C9AC", Offset = "0x65C9AC")]
		internal delegate EVRRenderModelError _LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C9C0", Offset = "0x65C9C0")]
		internal delegate void _FreeRenderModel(IntPtr pRenderModel);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C9D4", Offset = "0x65C9D4")]
		internal delegate EVRRenderModelError _LoadTexture_Async(int textureId, ref IntPtr ppTexture);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C9E8", Offset = "0x65C9E8")]
		internal delegate void _FreeTexture(IntPtr pTexture);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65C9FC", Offset = "0x65C9FC")]
		internal delegate EVRRenderModelError _LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA10", Offset = "0x65CA10")]
		internal delegate EVRRenderModelError _LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA24", Offset = "0x65CA24")]
		internal delegate void _FreeTextureD3D11(IntPtr pD3D11Texture2D);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA38", Offset = "0x65CA38")]
		internal delegate uint _GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA4C", Offset = "0x65CA4C")]
		internal delegate uint _GetRenderModelCount();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA60", Offset = "0x65CA60")]
		internal delegate uint _GetComponentCount(string pchRenderModelName);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA74", Offset = "0x65CA74")]
		internal delegate uint _GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA88", Offset = "0x65CA88")]
		internal delegate ulong _GetComponentButtonMask(string pchRenderModelName, string pchComponentName);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CA9C", Offset = "0x65CA9C")]
		internal delegate uint _GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CAB0", Offset = "0x65CAB0")]
		internal delegate bool _GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CAC4", Offset = "0x65CAC4")]
		internal delegate bool _RenderModelHasComponent(string pchRenderModelName, string pchComponentName);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CAD8", Offset = "0x65CAD8")]
		internal delegate uint _GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CAEC", Offset = "0x65CAEC")]
		internal delegate uint _GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB00", Offset = "0x65CB00")]
		internal delegate IntPtr _GetRenderModelErrorNameFromEnum(EVRRenderModelError error);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadRenderModel_Async LoadRenderModel_Async;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _FreeRenderModel FreeRenderModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _LoadTexture_Async LoadTexture_Async;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _FreeTexture FreeTexture;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _LoadTextureD3D11_Async LoadTextureD3D11_Async;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _LoadIntoTextureD3D11_Async LoadIntoTextureD3D11_Async;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _FreeTextureD3D11 FreeTextureD3D11;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetRenderModelName GetRenderModelName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetRenderModelCount GetRenderModelCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetComponentCount GetComponentCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetComponentName GetComponentName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetComponentButtonMask GetComponentButtonMask;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetComponentRenderModelName GetComponentRenderModelName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetComponentState GetComponentState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _RenderModelHasComponent RenderModelHasComponent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetRenderModelThumbnailURL GetRenderModelThumbnailURL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetRenderModelOriginalPath GetRenderModelOriginalPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetRenderModelErrorNameFromEnum GetRenderModelErrorNameFromEnum;
	}
	public struct IVRNotifications
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB14", Offset = "0x65CB14")]
		internal delegate EVRNotificationError _CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB28", Offset = "0x65CB28")]
		internal delegate EVRNotificationError _RemoveNotification(uint notificationId);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateNotification CreateNotification;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveNotification RemoveNotification;
	}
	public struct IVRSettings
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB3C", Offset = "0x65CB3C")]
		internal delegate IntPtr _GetSettingsErrorNameFromEnum(EVRSettingsError eError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB50", Offset = "0x65CB50")]
		internal delegate bool _Sync(bool bForce, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB64", Offset = "0x65CB64")]
		internal delegate void _SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB78", Offset = "0x65CB78")]
		internal delegate void _SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CB8C", Offset = "0x65CB8C")]
		internal delegate void _SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CBA0", Offset = "0x65CBA0")]
		internal delegate void _SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CBB4", Offset = "0x65CBB4")]
		internal delegate bool _GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CBC8", Offset = "0x65CBC8")]
		internal delegate int _GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CBDC", Offset = "0x65CBDC")]
		internal delegate float _GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CBF0", Offset = "0x65CBF0")]
		internal delegate void _GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC04", Offset = "0x65CC04")]
		internal delegate void _RemoveSection(string pchSection, ref EVRSettingsError peError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC18", Offset = "0x65CC18")]
		internal delegate void _RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetSettingsErrorNameFromEnum GetSettingsErrorNameFromEnum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _Sync Sync;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _SetBool SetBool;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetInt32 SetInt32;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetFloat SetFloat;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetString SetString;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetBool GetBool;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetInt32 GetInt32;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFloat GetFloat;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetString GetString;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _RemoveSection RemoveSection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _RemoveKeyInSection RemoveKeyInSection;
	}
	public struct IVRScreenshots
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC2C", Offset = "0x65CC2C")]
		internal delegate EVRScreenshotError _RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC40", Offset = "0x65CC40")]
		internal delegate EVRScreenshotError _HookScreenshot([In][Out] EVRScreenshotType[] pSupportedTypes, int numTypes);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC54", Offset = "0x65CC54")]
		internal delegate EVRScreenshotType _GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC68", Offset = "0x65CC68")]
		internal delegate uint _GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC7C", Offset = "0x65CC7C")]
		internal delegate EVRScreenshotError _UpdateScreenshotProgress(uint screenshotHandle, float flProgress);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CC90", Offset = "0x65CC90")]
		internal delegate EVRScreenshotError _TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CCA4", Offset = "0x65CCA4")]
		internal delegate EVRScreenshotError _SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _RequestScreenshot RequestScreenshot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HookScreenshot HookScreenshot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetScreenshotPropertyType GetScreenshotPropertyType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetScreenshotPropertyFilename GetScreenshotPropertyFilename;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _UpdateScreenshotProgress UpdateScreenshotProgress;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _TakeStereoScreenshot TakeStereoScreenshot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _SubmitScreenshot SubmitScreenshot;
	}
	public struct IVRResources
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CCB8", Offset = "0x65CCB8")]
		internal delegate uint _LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CCCC", Offset = "0x65CCCC")]
		internal delegate uint _GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadSharedResource LoadSharedResource;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetResourceFullPath GetResourceFullPath;
	}
	public struct IVRDriverManager
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CCE0", Offset = "0x65CCE0")]
		internal delegate uint _GetDriverCount();

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CCF4", Offset = "0x65CCF4")]
		internal delegate uint _GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize);

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CD08", Offset = "0x65CD08")]
		internal delegate ulong _GetDriverHandle(string pchDriverName);

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetDriverCount GetDriverCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetDriverName GetDriverName;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetDriverHandle GetDriverHandle;
	}
	public class CVRSystem
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CD1C", Offset = "0x65CD1C")]
		internal delegate bool _PollNextEventPacked(ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		private struct PollNextEventUnion
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._PollNextEvent pPollNextEvent;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextEventPacked pPollNextEventPacked;
		}

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CD30", Offset = "0x65CD30")]
		internal delegate bool _GetControllerStatePacked(uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize);

		[StructLayout(2)]
		private struct GetControllerStateUnion
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerState pGetControllerState;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStatePacked pGetControllerStatePacked;
		}

		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CD44", Offset = "0x65CD44")]
		internal delegate bool _GetControllerStateWithPosePacked(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[StructLayout(2)]
		private struct GetControllerStateWithPoseUnion
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerStateWithPose pGetControllerStateWithPose;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStateWithPosePacked pGetControllerStateWithPosePacked;
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSystem FnTable;

		[Address(RVA = "0x89F430", Offset = "0x89F430", VA = "0x89F430")]
		internal CVRSystem(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89F518", Offset = "0x89F518", VA = "0x89F518")]
		public void GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Address(RVA = "0x89F568", Offset = "0x89F568", VA = "0x89F568")]
		public HmdMatrix44_t GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ)
		{
			return default(HmdMatrix44_t);
		}

		[Address(RVA = "0x89F5C8", Offset = "0x89F5C8", VA = "0x89F5C8")]
		public void GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom)
		{
		}

		[Address(RVA = "0x89F640", Offset = "0x89F640", VA = "0x89F640")]
		public bool ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates)
		{
			return default(bool);
		}

		[Address(RVA = "0x89F6A0", Offset = "0x89F6A0", VA = "0x89F6A0")]
		public HmdMatrix34_t GetEyeToHeadTransform(EVREye eEye)
		{
			return default(HmdMatrix34_t);
		}

		[Address(RVA = "0x89F6E8", Offset = "0x89F6E8", VA = "0x89F6E8")]
		public bool GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter)
		{
			return default(bool);
		}

		[Address(RVA = "0x89F738", Offset = "0x89F738", VA = "0x89F738")]
		public int GetD3D9AdapterIndex()
		{
			return default(int);
		}

		[Address(RVA = "0x89F768", Offset = "0x89F768", VA = "0x89F768")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex)
		{
		}

		[Address(RVA = "0x89F7A4", Offset = "0x89F7A4", VA = "0x89F7A4")]
		public void GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance)
		{
		}

		[Address(RVA = "0x89F7F8", Offset = "0x89F7F8", VA = "0x89F7F8")]
		public bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Address(RVA = "0x89F828", Offset = "0x89F828", VA = "0x89F828")]
		public bool SetDisplayVisibility(bool bIsVisibleOnDesktop)
		{
			return default(bool);
		}

		[Address(RVA = "0x89F860", Offset = "0x89F860", VA = "0x89F860")]
		public void GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t[] pTrackedDevicePoseArray)
		{
		}

		[Address(RVA = "0x89F8D0", Offset = "0x89F8D0", VA = "0x89F8D0")]
		public void ResetSeatedZeroPose()
		{
		}

		[Address(RVA = "0x89F900", Offset = "0x89F900", VA = "0x89F900")]
		public HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Address(RVA = "0x89F938", Offset = "0x89F938", VA = "0x89F938")]
		public HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Address(RVA = "0x89F970", Offset = "0x89F970", VA = "0x89F970")]
		public uint GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, uint[] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex)
		{
			return default(uint);
		}

		[Address(RVA = "0x89F9D8", Offset = "0x89F9D8", VA = "0x89F9D8")]
		public EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId)
		{
			return default(EDeviceActivityLevel);
		}

		[Address(RVA = "0x89FA10", Offset = "0x89FA10", VA = "0x89FA10")]
		public void ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform)
		{
		}

		[Address(RVA = "0x89FA60", Offset = "0x89FA60", VA = "0x89FA60")]
		public uint GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType)
		{
			return default(uint);
		}

		[Address(RVA = "0x89FA98", Offset = "0x89FA98", VA = "0x89FA98")]
		public ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex)
		{
			return default(ETrackedControllerRole);
		}

		[Address(RVA = "0x89FAD0", Offset = "0x89FAD0", VA = "0x89FAD0")]
		public ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex)
		{
			return default(ETrackedDeviceClass);
		}

		[Address(RVA = "0x89FB08", Offset = "0x89FB08", VA = "0x89FB08")]
		public bool IsTrackedDeviceConnected(uint unDeviceIndex)
		{
			return default(bool);
		}

		[Address(RVA = "0x89FB40", Offset = "0x89FB40", VA = "0x89FB40")]
		public bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(bool);
		}

		[Address(RVA = "0x89FB90", Offset = "0x89FB90", VA = "0x89FB90")]
		public float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(float);
		}

		[Address(RVA = "0x89FBE0", Offset = "0x89FBE0", VA = "0x89FBE0")]
		public int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(int);
		}

		[Address(RVA = "0x89FC30", Offset = "0x89FC30", VA = "0x89FC30")]
		public ulong GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(ulong);
		}

		[Address(RVA = "0x89FC80", Offset = "0x89FC80", VA = "0x89FC80")]
		public HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(HmdMatrix34_t);
		}

		[Address(RVA = "0x89FCE0", Offset = "0x89FCE0", VA = "0x89FCE0")]
		public uint GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89FD58", Offset = "0x89FD58", VA = "0x89FD58")]
		public uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89FDC0", Offset = "0x89FDC0", VA = "0x89FDC0")]
		public string GetPropErrorNameFromEnum(ETrackedPropertyError error)
		{
			return null;
		}

		[Address(RVA = "0x89FE5C", Offset = "0x89FE5C", VA = "0x89FE5C")]
		public bool PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Address(RVA = "0x8A0488", Offset = "0x8A0488", VA = "0x8A0488")]
		public bool PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Address(RVA = "0x8A04E8", Offset = "0x8A04E8", VA = "0x8A04E8")]
		public string GetEventTypeNameFromEnum(EVREventType eType)
		{
			return null;
		}

		[Address(RVA = "0x8A0584", Offset = "0x8A0584", VA = "0x8A0584")]
		public HiddenAreaMesh_t GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type)
		{
			return default(HiddenAreaMesh_t);
		}

		[Address(RVA = "0x8A05CC", Offset = "0x8A05CC", VA = "0x8A05CC")]
		public bool GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize)
		{
			return default(bool);
		}

		[Address(RVA = "0x8A0C60", Offset = "0x8A0C60", VA = "0x8A0C60")]
		public bool GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Address(RVA = "0x8A1364", Offset = "0x8A1364", VA = "0x8A1364")]
		public void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, char usDurationMicroSec)
		{
		}

		[Address(RVA = "0x8A13B4", Offset = "0x8A13B4", VA = "0x8A13B4")]
		public string GetButtonIdNameFromEnum(EVRButtonId eButtonId)
		{
			return null;
		}

		[Address(RVA = "0x8A1450", Offset = "0x8A1450", VA = "0x8A1450")]
		public string GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType)
		{
			return null;
		}

		[Address(RVA = "0x8A14EC", Offset = "0x8A14EC", VA = "0x8A14EC")]
		public bool IsInputAvailable()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A151C", Offset = "0x8A151C", VA = "0x8A151C")]
		public bool IsSteamVRDrawingControllers()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A154C", Offset = "0x8A154C", VA = "0x8A154C")]
		public bool ShouldApplicationPause()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A157C", Offset = "0x8A157C", VA = "0x8A157C")]
		public bool ShouldApplicationReduceRenderingWork()
		{
			return default(bool);
		}

		[Address(RVA = "0x8A15AC", Offset = "0x8A15AC", VA = "0x8A15AC")]
		public uint DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize)
		{
			return default(uint);
		}

		[Address(RVA = "0x8A160C", Offset = "0x8A160C", VA = "0x8A160C")]
		public EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex)
		{
			return default(EVRFirmwareError);
		}

		[Address(RVA = "0x8A1644", Offset = "0x8A1644", VA = "0x8A1644")]
		public void AcknowledgeQuit_Exiting()
		{
		}

		[Address(RVA = "0x8A1674", Offset = "0x8A1674", VA = "0x8A1674")]
		public void AcknowledgeQuit_UserPrompt()
		{
		}
	}
	public class CVRExtendedDisplay
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRExtendedDisplay FnTable;

		[Address(RVA = "0x89B19C", Offset = "0x89B19C", VA = "0x89B19C")]
		internal CVRExtendedDisplay(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89B284", Offset = "0x89B284", VA = "0x89B284")]
		public void GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Address(RVA = "0x89B2F4", Offset = "0x89B2F4", VA = "0x89B2F4")]
		public void GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Address(RVA = "0x89B36C", Offset = "0x89B36C", VA = "0x89B36C")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex)
		{
		}
	}
	public class CVRTrackedCamera
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRTrackedCamera FnTable;

		[Address(RVA = "0x8A1CE0", Offset = "0x8A1CE0", VA = "0x8A1CE0")]
		internal CVRTrackedCamera(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x8A1DC8", Offset = "0x8A1DC8", VA = "0x8A1DC8")]
		public string GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError)
		{
			return null;
		}

		[Address(RVA = "0x8A1E64", Offset = "0x8A1E64", VA = "0x8A1E64")]
		public EVRTrackedCameraError HasCamera(uint nDeviceIndex, ref bool pHasCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A1EB0", Offset = "0x8A1EB0", VA = "0x8A1EB0")]
		public EVRTrackedCameraError GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A1F24", Offset = "0x8A1F24", VA = "0x8A1F24")]
		public EVRTrackedCameraError GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A1F84", Offset = "0x8A1F84", VA = "0x8A1F84")]
		public EVRTrackedCameraError GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A1FEC", Offset = "0x8A1FEC", VA = "0x8A1FEC")]
		public EVRTrackedCameraError AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A2038", Offset = "0x8A2038", VA = "0x8A2038")]
		public EVRTrackedCameraError ReleaseVideoStreamingService(ulong hTrackedCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A2070", Offset = "0x8A2070", VA = "0x8A2070")]
		public EVRTrackedCameraError GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A20E8", Offset = "0x8A20E8", VA = "0x8A20E8")]
		public EVRTrackedCameraError GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A2158", Offset = "0x8A2158", VA = "0x8A2158")]
		public EVRTrackedCameraError GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A21D0", Offset = "0x8A21D0", VA = "0x8A21D0")]
		public EVRTrackedCameraError GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Address(RVA = "0x8A223C", Offset = "0x8A223C", VA = "0x8A223C")]
		public EVRTrackedCameraError ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId)
		{
			return default(EVRTrackedCameraError);
		}
	}
	public class CVRApplications
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRApplications FnTable;

		[Address(RVA = "0x88B774", Offset = "0x88B774", VA = "0x88B774")]
		internal CVRApplications(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x88B85C", Offset = "0x88B85C", VA = "0x88B85C")]
		public EVRApplicationError AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88C030", Offset = "0x88C030", VA = "0x88C030")]
		public EVRApplicationError RemoveApplicationManifest(string pchApplicationManifestFullPath)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88C7B4", Offset = "0x88C7B4", VA = "0x88C7B4")]
		public bool IsApplicationInstalled(string pchAppKey)
		{
			return default(bool);
		}

		[Address(RVA = "0x88CF40", Offset = "0x88CF40", VA = "0x88CF40")]
		public uint GetApplicationCount()
		{
			return default(uint);
		}

		[Address(RVA = "0x88D388", Offset = "0x88D388", VA = "0x88D388")]
		public EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88D88C", Offset = "0x88D88C", VA = "0x88D88C")]
		public EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88DD90", Offset = "0x88DD90", VA = "0x88DD90")]
		public EVRApplicationError LaunchApplication(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88E514", Offset = "0x88E514", VA = "0x88E514")]
		public EVRApplicationError LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, AppOverrideKeys_t[] pKeys)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88ED8C", Offset = "0x88ED8C", VA = "0x88ED8C")]
		public EVRApplicationError LaunchApplicationFromMimeType(string pchMimeType, string pchArgs)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88F560", Offset = "0x88F560", VA = "0x88F560")]
		public EVRApplicationError LaunchDashboardOverlay(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x88FCE4", Offset = "0x88FCE4", VA = "0x88FCE4")]
		public bool CancelApplicationLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Address(RVA = "0x890470", Offset = "0x890470", VA = "0x890470")]
		public EVRApplicationError IdentifyApplication(uint unProcessId, string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x89093C", Offset = "0x89093C", VA = "0x89093C")]
		public uint GetApplicationProcessId(string pchAppKey)
		{
			return default(uint);
		}

		[Address(RVA = "0x8910C0", Offset = "0x8910C0", VA = "0x8910C0")]
		public string GetApplicationsErrorNameFromEnum(EVRApplicationError error)
		{
			return null;
		}

		[Address(RVA = "0x8915A8", Offset = "0x8915A8", VA = "0x8915A8")]
		public uint GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError)
		{
			return default(uint);
		}

		[Address(RVA = "0x891E5C", Offset = "0x891E5C", VA = "0x891E5C")]
		public bool GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(bool);
		}

		[Address(RVA = "0x892688", Offset = "0x892688", VA = "0x892688")]
		public ulong GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(ulong);
		}

		[Address(RVA = "0x892EAC", Offset = "0x892EAC", VA = "0x892EAC")]
		public EVRApplicationError SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x893680", Offset = "0x893680", VA = "0x893680")]
		public bool GetApplicationAutoLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Address(RVA = "0x893E0C", Offset = "0x893E0C", VA = "0x893E0C")]
		public EVRApplicationError SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x8945E0", Offset = "0x8945E0", VA = "0x8945E0")]
		public bool GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(bool);
		}

		[Address(RVA = "0x894E0C", Offset = "0x894E0C", VA = "0x894E0C")]
		public bool GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer)
		{
			return default(bool);
		}

		[Address(RVA = "0x895638", Offset = "0x895638", VA = "0x895638")]
		public uint GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer)
		{
			return default(uint);
		}

		[Address(RVA = "0x895E5C", Offset = "0x895E5C", VA = "0x895E5C")]
		public uint GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs)
		{
			return default(uint);
		}

		[Address(RVA = "0x896360", Offset = "0x896360", VA = "0x896360")]
		public EVRApplicationError GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x896B34", Offset = "0x896B34", VA = "0x896B34")]
		public EVRApplicationTransitionState GetTransitionState()
		{
			return default(EVRApplicationTransitionState);
		}

		[Address(RVA = "0x896F7C", Offset = "0x896F7C", VA = "0x896F7C")]
		public EVRApplicationError PerformApplicationPrelaunchCheck(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x897700", Offset = "0x897700", VA = "0x897700")]
		public string GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state)
		{
			return null;
		}

		[Address(RVA = "0x897BE8", Offset = "0x897BE8", VA = "0x897BE8")]
		public bool IsQuitUserPromptRequested()
		{
			return default(bool);
		}

		[Address(RVA = "0x898038", Offset = "0x898038", VA = "0x898038")]
		public EVRApplicationError LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory)
		{
			return default(EVRApplicationError);
		}

		[Address(RVA = "0x89885C", Offset = "0x89885C", VA = "0x89885C")]
		public uint GetCurrentSceneProcessId()
		{
			return default(uint);
		}
	}
	public class CVRChaperone
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperone FnTable;

		[Address(RVA = "0x898CA4", Offset = "0x898CA4", VA = "0x898CA4")]
		internal CVRChaperone(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x898D8C", Offset = "0x898D8C", VA = "0x898D8C")]
		public ChaperoneCalibrationState GetCalibrationState()
		{
			return default(ChaperoneCalibrationState);
		}

		[Address(RVA = "0x898DBC", Offset = "0x898DBC", VA = "0x898DBC")]
		public bool GetPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Address(RVA = "0x898E0C", Offset = "0x898E0C", VA = "0x898E0C")]
		public bool GetPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Address(RVA = "0x898E44", Offset = "0x898E44", VA = "0x898E44")]
		public void ReloadInfo()
		{
		}

		[Address(RVA = "0x898E74", Offset = "0x898E74", VA = "0x898E74")]
		public void SetSceneColor(HmdColor_t color)
		{
		}

		[Address(RVA = "0x898ED4", Offset = "0x898ED4", VA = "0x898ED4")]
		public void GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor)
		{
		}

		[Address(RVA = "0x8993F8", Offset = "0x8993F8", VA = "0x8993F8")]
		public bool AreBoundsVisible()
		{
			return default(bool);
		}

		[Address(RVA = "0x899848", Offset = "0x899848", VA = "0x899848")]
		public void ForceBoundsVisible(bool bForce)
		{
		}
	}
	public class CVRChaperoneSetup
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperoneSetup FnTable;

		[Address(RVA = "0x899CBC", Offset = "0x899CBC", VA = "0x899CBC")]
		internal CVRChaperoneSetup(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x899DA4", Offset = "0x899DA4", VA = "0x899DA4")]
		public bool CommitWorkingCopy(EChaperoneConfigFile configFile)
		{
			return default(bool);
		}

		[Address(RVA = "0x899DDC", Offset = "0x899DDC", VA = "0x899DDC")]
		public void RevertWorkingCopy()
		{
		}

		[Address(RVA = "0x899E0C", Offset = "0x899E0C", VA = "0x899E0C")]
		public bool GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Address(RVA = "0x899E5C", Offset = "0x899E5C", VA = "0x899E5C")]
		public bool GetWorkingPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Address(RVA = "0x899E94", Offset = "0x899E94", VA = "0x899E94")]
		public bool GetWorkingCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Address(RVA = "0x899F4C", Offset = "0x899F4C", VA = "0x899F4C")]
		public bool GetLiveCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A004", Offset = "0x89A004", VA = "0x89A004")]
		public bool GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A03C", Offset = "0x89A03C", VA = "0x89A03C")]
		public bool GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A074", Offset = "0x89A074", VA = "0x89A074")]
		public void SetWorkingPlayAreaSize(float sizeX, float sizeZ)
		{
		}

		[Address(RVA = "0x89A0BC", Offset = "0x89A0BC", VA = "0x89A0BC")]
		public void SetWorkingCollisionBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
		}

		[Address(RVA = "0x89A10C", Offset = "0x89A10C", VA = "0x89A10C")]
		public void SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose)
		{
		}

		[Address(RVA = "0x89A144", Offset = "0x89A144", VA = "0x89A144")]
		public void SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose)
		{
		}

		[Address(RVA = "0x89A17C", Offset = "0x89A17C", VA = "0x89A17C")]
		public void ReloadFromDisk(EChaperoneConfigFile configFile)
		{
		}

		[Address(RVA = "0x89A1B4", Offset = "0x89A1B4", VA = "0x89A1B4")]
		public bool GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A1EC", Offset = "0x89A1EC", VA = "0x89A1EC")]
		public void SetWorkingCollisionBoundsTagsInfo(byte[] pTagsBuffer)
		{
		}

		[Address(RVA = "0x89A23C", Offset = "0x89A23C", VA = "0x89A23C")]
		public bool GetLiveCollisionBoundsTagsInfo(out byte[] pTagsBuffer)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A2F4", Offset = "0x89A2F4", VA = "0x89A2F4")]
		public bool SetWorkingPhysicalBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A344", Offset = "0x89A344", VA = "0x89A344")]
		public bool GetLivePhysicalBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A3FC", Offset = "0x89A3FC", VA = "0x89A3FC")]
		public bool ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A448", Offset = "0x89A448", VA = "0x89A448")]
		public bool ImportFromBufferToWorking(string pBuffer, uint nImportFlags)
		{
			return default(bool);
		}
	}
	public class CVRCompositor
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRCompositor FnTable;

		[Address(RVA = "0x89A490", Offset = "0x89A490", VA = "0x89A490")]
		internal CVRCompositor(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89A578", Offset = "0x89A578", VA = "0x89A578")]
		public void SetTrackingSpace(ETrackingUniverseOrigin eOrigin)
		{
		}

		[Address(RVA = "0x89A5B0", Offset = "0x89A5B0", VA = "0x89A5B0")]
		public ETrackingUniverseOrigin GetTrackingSpace()
		{
			return default(ETrackingUniverseOrigin);
		}

		[Address(RVA = "0x89A5E0", Offset = "0x89A5E0", VA = "0x89A5E0")]
		public EVRCompositorError WaitGetPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Address(RVA = "0x89A654", Offset = "0x89A654", VA = "0x89A654")]
		public EVRCompositorError GetLastPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Address(RVA = "0x89A6C8", Offset = "0x89A6C8", VA = "0x89A6C8")]
		public EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose)
		{
			return default(EVRCompositorError);
		}

		[Address(RVA = "0x89A718", Offset = "0x89A718", VA = "0x89A718")]
		public EVRCompositorError Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags)
		{
			return default(EVRCompositorError);
		}

		[Address(RVA = "0x89A778", Offset = "0x89A778", VA = "0x89A778")]
		public void ClearLastSubmittedFrame()
		{
		}

		[Address(RVA = "0x89A7A8", Offset = "0x89A7A8", VA = "0x89A7A8")]
		public void PostPresentHandoff()
		{
		}

		[Address(RVA = "0x89A7D8", Offset = "0x89A7D8", VA = "0x89A7D8")]
		public bool GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo)
		{
			return default(bool);
		}

		[Address(RVA = "0x89A820", Offset = "0x89A820", VA = "0x89A820")]
		public uint GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames)
		{
			return default(uint);
		}

		[Address(RVA = "0x89A868", Offset = "0x89A868", VA = "0x89A868")]
		public float GetFrameTimeRemaining()
		{
			return default(float);
		}

		[Address(RVA = "0x89A898", Offset = "0x89A898", VA = "0x89A898")]
		public void GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes)
		{
		}

		[Address(RVA = "0x89A8E0", Offset = "0x89A8E0", VA = "0x89A8E0")]
		public void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground)
		{
		}

		[Address(RVA = "0x89A958", Offset = "0x89A958", VA = "0x89A958")]
		public HmdColor_t GetCurrentFadeColor(bool bBackground)
		{
			return default(HmdColor_t);
		}

		[Address(RVA = "0x89A990", Offset = "0x89A990", VA = "0x89A990")]
		public void FadeGrid(float fSeconds, bool bFadeIn)
		{
		}

		[Address(RVA = "0x89A9D8", Offset = "0x89A9D8", VA = "0x89A9D8")]
		public float GetCurrentGridAlpha()
		{
			return default(float);
		}

		[Address(RVA = "0x89AA08", Offset = "0x89AA08", VA = "0x89AA08")]
		public EVRCompositorError SetSkyboxOverride(Texture_t[] pTextures)
		{
			return default(EVRCompositorError);
		}

		[Address(RVA = "0x89AA58", Offset = "0x89AA58", VA = "0x89AA58")]
		public void ClearSkyboxOverride()
		{
		}

		[Address(RVA = "0x89AA88", Offset = "0x89AA88", VA = "0x89AA88")]
		public void CompositorBringToFront()
		{
		}

		[Address(RVA = "0x89AAB8", Offset = "0x89AAB8", VA = "0x89AAB8")]
		public void CompositorGoToBack()
		{
		}

		[Address(RVA = "0x89AAE8", Offset = "0x89AAE8", VA = "0x89AAE8")]
		public void CompositorQuit()
		{
		}

		[Address(RVA = "0x89AB18", Offset = "0x89AB18", VA = "0x89AB18")]
		public bool IsFullscreen()
		{
			return default(bool);
		}

		[Address(RVA = "0x89AB48", Offset = "0x89AB48", VA = "0x89AB48")]
		public uint GetCurrentSceneFocusProcess()
		{
			return default(uint);
		}

		[Address(RVA = "0x89AB78", Offset = "0x89AB78", VA = "0x89AB78")]
		public uint GetLastFrameRenderer()
		{
			return default(uint);
		}

		[Address(RVA = "0x89ABA8", Offset = "0x89ABA8", VA = "0x89ABA8")]
		public bool CanRenderScene()
		{
			return default(bool);
		}

		[Address(RVA = "0x89ABD8", Offset = "0x89ABD8", VA = "0x89ABD8")]
		public void ShowMirrorWindow()
		{
		}

		[Address(RVA = "0x89AC08", Offset = "0x89AC08", VA = "0x89AC08")]
		public void HideMirrorWindow()
		{
		}

		[Address(RVA = "0x89AC38", Offset = "0x89AC38", VA = "0x89AC38")]
		public bool IsMirrorWindowVisible()
		{
			return default(bool);
		}

		[Address(RVA = "0x89AC68", Offset = "0x89AC68", VA = "0x89AC68")]
		public void CompositorDumpImages()
		{
		}

		[Address(RVA = "0x89AC98", Offset = "0x89AC98", VA = "0x89AC98")]
		public bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Address(RVA = "0x89ACC8", Offset = "0x89ACC8", VA = "0x89ACC8")]
		public void ForceInterleavedReprojectionOn(bool bOverride)
		{
		}

		[Address(RVA = "0x89AD00", Offset = "0x89AD00", VA = "0x89AD00")]
		public void ForceReconnectProcess()
		{
		}

		[Address(RVA = "0x89AD30", Offset = "0x89AD30", VA = "0x89AD30")]
		public void SuspendRendering(bool bSuspend)
		{
		}

		[Address(RVA = "0x89AD68", Offset = "0x89AD68", VA = "0x89AD68")]
		public EVRCompositorError GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView)
		{
			return default(EVRCompositorError);
		}

		[Address(RVA = "0x89ADB8", Offset = "0x89ADB8", VA = "0x89ADB8")]
		public void ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView)
		{
		}

		[Address(RVA = "0x89ADF0", Offset = "0x89ADF0", VA = "0x89ADF0")]
		public EVRCompositorError GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle)
		{
			return default(EVRCompositorError);
		}

		[Address(RVA = "0x89AE44", Offset = "0x89AE44", VA = "0x89AE44")]
		public bool ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle)
		{
			return default(bool);
		}

		[Address(RVA = "0x89AE8C", Offset = "0x89AE8C", VA = "0x89AE8C")]
		public void LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Address(RVA = "0x89AEC4", Offset = "0x89AEC4", VA = "0x89AEC4")]
		public void UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Address(RVA = "0x89AEFC", Offset = "0x89AEFC", VA = "0x89AEFC")]
		public uint GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Address(RVA = "0x89AF44", Offset = "0x89AF44", VA = "0x89AF44")]
		public uint GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Address(RVA = "0x89AF94", Offset = "0x89AF94", VA = "0x89AF94")]
		public void SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode)
		{
		}

		[Address(RVA = "0x89AFCC", Offset = "0x89AFCC", VA = "0x89AFCC")]
		public EVRCompositorError SubmitExplicitTimingData()
		{
			return default(EVRCompositorError);
		}
	}
	public class CVROverlay
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CD58", Offset = "0x65CD58")]
		internal delegate bool _PollNextOverlayEventPacked(ulong ulOverlayHandle, ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		private struct PollNextOverlayEventUnion
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVROverlay._PollNextOverlayEvent pPollNextOverlayEvent;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextOverlayEventPacked pPollNextOverlayEventPacked;
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVROverlay FnTable;

		[Address(RVA = "0x89B558", Offset = "0x89B558", VA = "0x89B558")]
		internal CVROverlay(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89B640", Offset = "0x89B640", VA = "0x89B640")]
		public EVROverlayError FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89B68C", Offset = "0x89B68C", VA = "0x89B68C")]
		public EVROverlayError CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89B6E0", Offset = "0x89B6E0", VA = "0x89B6E0")]
		public EVROverlayError DestroyOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89B718", Offset = "0x89B718", VA = "0x89B718")]
		public EVROverlayError SetHighQualityOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89B750", Offset = "0x89B750", VA = "0x89B750")]
		public ulong GetHighQualityOverlay()
		{
			return default(ulong);
		}

		[Address(RVA = "0x89B780", Offset = "0x89B780", VA = "0x89B780")]
		public uint GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89B7E0", Offset = "0x89B7E0", VA = "0x89B7E0")]
		public uint GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89B840", Offset = "0x89B840", VA = "0x89B840")]
		public EVROverlayError SetOverlayName(ulong ulOverlayHandle, string pchName)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89B888", Offset = "0x89B888", VA = "0x89B888")]
		public EVROverlayError GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89B8F8", Offset = "0x89B8F8", VA = "0x89B8F8")]
		public string GetOverlayErrorNameFromEnum(EVROverlayError error)
		{
			return null;
		}

		[Address(RVA = "0x89B994", Offset = "0x89B994", VA = "0x89B994")]
		public EVROverlayError SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89B9DC", Offset = "0x89B9DC", VA = "0x89B9DC")]
		public uint GetOverlayRenderingPid(ulong ulOverlayHandle)
		{
			return default(uint);
		}

		[Address(RVA = "0x89BA14", Offset = "0x89BA14", VA = "0x89BA14")]
		public EVROverlayError SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BA64", Offset = "0x89BA64", VA = "0x89BA64")]
		public EVROverlayError GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BAB8", Offset = "0x89BAB8", VA = "0x89BAB8")]
		public EVROverlayError SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BB18", Offset = "0x89BB18", VA = "0x89BB18")]
		public EVROverlayError GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BB84", Offset = "0x89BB84", VA = "0x89BB84")]
		public EVROverlayError SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BBCC", Offset = "0x89BBCC", VA = "0x89BBCC")]
		public EVROverlayError GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BC18", Offset = "0x89BC18", VA = "0x89BC18")]
		public EVROverlayError SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BC60", Offset = "0x89BC60", VA = "0x89BC60")]
		public EVROverlayError GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BCAC", Offset = "0x89BCAC", VA = "0x89BCAC")]
		public EVROverlayError SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BCF4", Offset = "0x89BCF4", VA = "0x89BCF4")]
		public EVROverlayError GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BD40", Offset = "0x89BD40", VA = "0x89BD40")]
		public EVROverlayError SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BD88", Offset = "0x89BD88", VA = "0x89BD88")]
		public EVROverlayError GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BDD4", Offset = "0x89BDD4", VA = "0x89BDD4")]
		public EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BE24", Offset = "0x89BE24", VA = "0x89BE24")]
		public EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BE7C", Offset = "0x89BE7C", VA = "0x89BE7C")]
		public EVROverlayError SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BEC4", Offset = "0x89BEC4", VA = "0x89BEC4")]
		public EVROverlayError GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BF0C", Offset = "0x89BF0C", VA = "0x89BF0C")]
		public EVROverlayError SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BF54", Offset = "0x89BF54", VA = "0x89BF54")]
		public EVROverlayError GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89BF9C", Offset = "0x89BF9C", VA = "0x89BF9C")]
		public uint GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89C004", Offset = "0x89C004", VA = "0x89C004")]
		public EVROverlayError SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C054", Offset = "0x89C054", VA = "0x89C054")]
		public EVROverlayError GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C09C", Offset = "0x89C09C", VA = "0x89C09C")]
		public EVROverlayError SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C0EC", Offset = "0x89C0EC", VA = "0x89C0EC")]
		public EVROverlayError GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C13C", Offset = "0x89C13C", VA = "0x89C13C")]
		public EVROverlayError SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C18C", Offset = "0x89C18C", VA = "0x89C18C")]
		public EVROverlayError GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C1E0", Offset = "0x89C1E0", VA = "0x89C1E0")]
		public EVROverlayError SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C230", Offset = "0x89C230", VA = "0x89C230")]
		public EVROverlayError GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C294", Offset = "0x89C294", VA = "0x89C294")]
		public EVROverlayError GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C2E8", Offset = "0x89C2E8", VA = "0x89C2E8")]
		public EVROverlayError SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C338", Offset = "0x89C338", VA = "0x89C338")]
		public EVROverlayError ShowOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C370", Offset = "0x89C370", VA = "0x89C370")]
		public EVROverlayError HideOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C3A8", Offset = "0x89C3A8", VA = "0x89C3A8")]
		public bool IsOverlayVisible(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Address(RVA = "0x89C3E0", Offset = "0x89C3E0", VA = "0x89C3E0")]
		public EVROverlayError GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89C448", Offset = "0x89C448", VA = "0x89C448")]
		public bool PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Address(RVA = "0x89CAB8", Offset = "0x89CAB8", VA = "0x89CAB8")]
		public EVROverlayError GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CB00", Offset = "0x89CB00", VA = "0x89CB00")]
		public EVROverlayError SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CB48", Offset = "0x89CB48", VA = "0x89CB48")]
		public EVROverlayError GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CB90", Offset = "0x89CB90", VA = "0x89CB90")]
		public EVROverlayError SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CBD8", Offset = "0x89CBD8", VA = "0x89CBD8")]
		public bool ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults)
		{
			return default(bool);
		}

		[Address(RVA = "0x89CC28", Offset = "0x89CC28", VA = "0x89CC28")]
		public bool IsHoverTargetOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Address(RVA = "0x89CC60", Offset = "0x89CC60", VA = "0x89CC60")]
		public ulong GetGamepadFocusOverlay()
		{
			return default(ulong);
		}

		[Address(RVA = "0x89CC90", Offset = "0x89CC90", VA = "0x89CC90")]
		public EVROverlayError SetGamepadFocusOverlay(ulong ulNewFocusOverlay)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CCC8", Offset = "0x89CCC8", VA = "0x89CCC8")]
		public EVROverlayError SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CD18", Offset = "0x89CD18", VA = "0x89CD18")]
		public EVROverlayError MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CD60", Offset = "0x89CD60", VA = "0x89CD60")]
		public EVROverlayError SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CDC0", Offset = "0x89CDC0", VA = "0x89CDC0")]
		public EVROverlayError GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CE24", Offset = "0x89CE24", VA = "0x89CE24")]
		public EVROverlayError SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CE6C", Offset = "0x89CE6C", VA = "0x89CE6C")]
		public EVROverlayError ClearOverlayTexture(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CEA4", Offset = "0x89CEA4", VA = "0x89CEA4")]
		public EVROverlayError SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CF0C", Offset = "0x89CF0C", VA = "0x89CF0C")]
		public EVROverlayError SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CF54", Offset = "0x89CF54", VA = "0x89CF54")]
		public EVROverlayError GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89CFF0", Offset = "0x89CFF0", VA = "0x89CFF0")]
		public EVROverlayError ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D038", Offset = "0x89D038", VA = "0x89D038")]
		public EVROverlayError GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D090", Offset = "0x89D090", VA = "0x89D090")]
		public EVROverlayError CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D0F8", Offset = "0x89D0F8", VA = "0x89D0F8")]
		public bool IsDashboardVisible()
		{
			return default(bool);
		}

		[Address(RVA = "0x89D128", Offset = "0x89D128", VA = "0x89D128")]
		public bool IsActiveDashboardOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Address(RVA = "0x89D160", Offset = "0x89D160", VA = "0x89D160")]
		public EVROverlayError SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D1A8", Offset = "0x89D1A8", VA = "0x89D1A8")]
		public EVROverlayError GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D1F4", Offset = "0x89D1F4", VA = "0x89D1F4")]
		public void ShowDashboard(string pchOverlayToShow)
		{
		}

		[Address(RVA = "0x89D22C", Offset = "0x89D22C", VA = "0x89D22C")]
		public uint GetPrimaryDashboardDevice()
		{
			return default(uint);
		}

		[Address(RVA = "0x89D25C", Offset = "0x89D25C", VA = "0x89D25C")]
		public EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D2DC", Offset = "0x89D2DC", VA = "0x89D2DC")]
		public EVROverlayError ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D368", Offset = "0x89D368", VA = "0x89D368")]
		public uint GetKeyboardText(StringBuilder pchText, uint cchText)
		{
			return default(uint);
		}

		[Address(RVA = "0x89D3B0", Offset = "0x89D3B0", VA = "0x89D3B0")]
		public void HideKeyboard()
		{
		}

		[Address(RVA = "0x89D3E0", Offset = "0x89D3E0", VA = "0x89D3E0")]
		public void SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform)
		{
		}

		[Address(RVA = "0x89D428", Offset = "0x89D428", VA = "0x89D428")]
		public void SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect)
		{
		}

		[Address(RVA = "0x89D490", Offset = "0x89D490", VA = "0x89D490")]
		public EVROverlayError SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D4F0", Offset = "0x89D4F0", VA = "0x89D4F0")]
		public EVROverlayError GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags)
		{
			return default(EVROverlayError);
		}

		[Address(RVA = "0x89D53C", Offset = "0x89D53C", VA = "0x89D53C")]
		public VRMessageOverlayResponse ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text)
		{
			return default(VRMessageOverlayResponse);
		}

		[Address(RVA = "0x89D5B4", Offset = "0x89D5B4", VA = "0x89D5B4")]
		public void CloseMessageOverlay()
		{
		}
	}
	public class CVRRenderModels
	{
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x65CD6C", Offset = "0x65CD6C")]
		internal delegate bool _GetComponentStatePacked(string pchRenderModelName, string pchComponentName, ref VRControllerState_t_Packed pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[StructLayout(2)]
		private struct GetComponentStateUnion
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRRenderModels._GetComponentState pGetComponentState;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetComponentStatePacked pGetComponentStatePacked;
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRRenderModels FnTable;

		[Address(RVA = "0x89D7F0", Offset = "0x89D7F0", VA = "0x89D7F0")]
		internal CVRRenderModels(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89D8D8", Offset = "0x89D8D8", VA = "0x89D8D8")]
		public EVRRenderModelError LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel)
		{
			return default(EVRRenderModelError);
		}

		[Address(RVA = "0x89D920", Offset = "0x89D920", VA = "0x89D920")]
		public void FreeRenderModel(IntPtr pRenderModel)
		{
		}

		[Address(RVA = "0x89D958", Offset = "0x89D958", VA = "0x89D958")]
		public EVRRenderModelError LoadTexture_Async(int textureId, ref IntPtr ppTexture)
		{
			return default(EVRRenderModelError);
		}

		[Address(RVA = "0x89D9A0", Offset = "0x89D9A0", VA = "0x89D9A0")]
		public void FreeTexture(IntPtr pTexture)
		{
		}

		[Address(RVA = "0x89D9D8", Offset = "0x89D9D8", VA = "0x89D9D8")]
		public EVRRenderModelError LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D)
		{
			return default(EVRRenderModelError);
		}

		[Address(RVA = "0x89DA28", Offset = "0x89DA28", VA = "0x89DA28")]
		public EVRRenderModelError LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture)
		{
			return default(EVRRenderModelError);
		}

		[Address(RVA = "0x89DA70", Offset = "0x89DA70", VA = "0x89DA70")]
		public void FreeTextureD3D11(IntPtr pD3D11Texture2D)
		{
		}

		[Address(RVA = "0x89DAA8", Offset = "0x89DAA8", VA = "0x89DAA8")]
		public uint GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen)
		{
			return default(uint);
		}

		[Address(RVA = "0x89DAF8", Offset = "0x89DAF8", VA = "0x89DAF8")]
		public uint GetRenderModelCount()
		{
			return default(uint);
		}

		[Address(RVA = "0x89DB28", Offset = "0x89DB28", VA = "0x89DB28")]
		public uint GetComponentCount(string pchRenderModelName)
		{
			return default(uint);
		}

		[Address(RVA = "0x89DB60", Offset = "0x89DB60", VA = "0x89DB60")]
		public uint GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen)
		{
			return default(uint);
		}

		[Address(RVA = "0x89DBC0", Offset = "0x89DBC0", VA = "0x89DBC0")]
		public ulong GetComponentButtonMask(string pchRenderModelName, string pchComponentName)
		{
			return default(ulong);
		}

		[Address(RVA = "0x89DC08", Offset = "0x89DC08", VA = "0x89DC08")]
		public uint GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen)
		{
			return default(uint);
		}

		[Address(RVA = "0x89DC68", Offset = "0x89DC68", VA = "0x89DC68")]
		public bool GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Address(RVA = "0x89E5E4", Offset = "0x89E5E4", VA = "0x89E5E4")]
		public bool RenderModelHasComponent(string pchRenderModelName, string pchComponentName)
		{
			return default(bool);
		}

		[Address(RVA = "0x89E62C", Offset = "0x89E62C", VA = "0x89E62C")]
		public uint GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89E68C", Offset = "0x89E68C", VA = "0x89E68C")]
		public uint GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89E6EC", Offset = "0x89E6EC", VA = "0x89E6EC")]
		public string GetRenderModelErrorNameFromEnum(EVRRenderModelError error)
		{
			return null;
		}
	}
	public class CVRNotifications
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRNotifications FnTable;

		[Address(RVA = "0x89B3BC", Offset = "0x89B3BC", VA = "0x89B3BC")]
		internal CVRNotifications(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89B49C", Offset = "0x89B49C", VA = "0x89B49C")]
		public EVRNotificationError CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId)
		{
			return default(EVRNotificationError);
		}

		[Address(RVA = "0x89B520", Offset = "0x89B520", VA = "0x89B520")]
		public EVRNotificationError RemoveNotification(uint notificationId)
		{
			return default(EVRNotificationError);
		}
	}
	public class CVRSettings
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSettings FnTable;

		[Address(RVA = "0x89EEF4", Offset = "0x89EEF4", VA = "0x89EEF4")]
		internal CVRSettings(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89EFDC", Offset = "0x89EFDC", VA = "0x89EFDC")]
		public string GetSettingsErrorNameFromEnum(EVRSettingsError eError)
		{
			return null;
		}

		[Address(RVA = "0x89F078", Offset = "0x89F078", VA = "0x89F078")]
		public bool Sync(bool bForce, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Address(RVA = "0x89F0C0", Offset = "0x89F0C0", VA = "0x89F0C0")]
		public void SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError)
		{
		}

		[Address(RVA = "0x89F120", Offset = "0x89F120", VA = "0x89F120")]
		public void SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError)
		{
		}

		[Address(RVA = "0x89F180", Offset = "0x89F180", VA = "0x89F180")]
		public void SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError)
		{
		}

		[Address(RVA = "0x89F1E0", Offset = "0x89F1E0", VA = "0x89F1E0")]
		public void SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError)
		{
		}

		[Address(RVA = "0x89F240", Offset = "0x89F240", VA = "0x89F240")]
		public bool GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Address(RVA = "0x89F290", Offset = "0x89F290", VA = "0x89F290")]
		public int GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(int);
		}

		[Address(RVA = "0x89F2E0", Offset = "0x89F2E0", VA = "0x89F2E0")]
		public float GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(float);
		}

		[Address(RVA = "0x89F330", Offset = "0x89F330", VA = "0x89F330")]
		public void GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError)
		{
		}

		[Address(RVA = "0x89F398", Offset = "0x89F398", VA = "0x89F398")]
		public void RemoveSection(string pchSection, ref EVRSettingsError peError)
		{
		}

		[Address(RVA = "0x89F3E0", Offset = "0x89F3E0", VA = "0x89F3E0")]
		public void RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
		}
	}
	public class CVRScreenshots
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRScreenshots FnTable;

		[Address(RVA = "0x89EBA4", Offset = "0x89EBA4", VA = "0x89EBA4")]
		internal CVRScreenshots(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89EC94", Offset = "0x89EC94", VA = "0x89EC94")]
		public EVRScreenshotError RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Address(RVA = "0x89ECF8", Offset = "0x89ECF8", VA = "0x89ECF8")]
		public EVRScreenshotError HookScreenshot(EVRScreenshotType[] pSupportedTypes)
		{
			return default(EVRScreenshotError);
		}

		[Address(RVA = "0x89ED48", Offset = "0x89ED48", VA = "0x89ED48")]
		public EVRScreenshotType GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError)
		{
			return default(EVRScreenshotType);
		}

		[Address(RVA = "0x89ED90", Offset = "0x89ED90", VA = "0x89ED90")]
		public uint GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError)
		{
			return default(uint);
		}

		[Address(RVA = "0x89EDF8", Offset = "0x89EDF8", VA = "0x89EDF8")]
		public EVRScreenshotError UpdateScreenshotProgress(uint screenshotHandle, float flProgress)
		{
			return default(EVRScreenshotError);
		}

		[Address(RVA = "0x89EE40", Offset = "0x89EE40", VA = "0x89EE40")]
		public EVRScreenshotError TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Address(RVA = "0x89EE94", Offset = "0x89EE94", VA = "0x89EE94")]
		public EVRScreenshotError SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename)
		{
			return default(EVRScreenshotError);
		}
	}
	public class CVRResources
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRResources FnTable;

		[Address(RVA = "0x89EA14", Offset = "0x89EA14", VA = "0x89EA14")]
		internal CVRResources(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89EAF4", Offset = "0x89EAF4", VA = "0x89EAF4")]
		public uint LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen)
		{
			return default(uint);
		}

		[Address(RVA = "0x89EB44", Offset = "0x89EB44", VA = "0x89EB44")]
		public uint GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen)
		{
			return default(uint);
		}
	}
	public class CVRDriverManager
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRDriverManager FnTable;

		[Address(RVA = "0x89AFFC", Offset = "0x89AFFC", VA = "0x89AFFC")]
		internal CVRDriverManager(IntPtr pInterface)
		{
		}

		[Address(RVA = "0x89B0E4", Offset = "0x89B0E4", VA = "0x89B0E4")]
		public uint GetDriverCount()
		{
			return default(uint);
		}

		[Address(RVA = "0x89B114", Offset = "0x89B114", VA = "0x89B114")]
		public uint GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Address(RVA = "0x89B164", Offset = "0x89B164", VA = "0x89B164")]
		public ulong GetDriverHandle(string pchDriverName)
		{
			return default(ulong);
		}
	}
	public class OpenVRInterop
	{
		[PreserveSig]
		[Address(RVA = "0x800DA4", Offset = "0x800DA4", VA = "0x800DA4")]
		internal static extern uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType);

		[PreserveSig]
		[Address(RVA = "0x800E58", Offset = "0x800E58", VA = "0x800E58")]
		internal static extern void ShutdownInternal();

		[PreserveSig]
		[Address(RVA = "0x800EEC", Offset = "0x800EEC", VA = "0x800EEC")]
		internal static extern bool IsHmdPresent();

		[PreserveSig]
		[Address(RVA = "0x800F88", Offset = "0x800F88", VA = "0x800F88")]
		internal static extern bool IsRuntimeInstalled();

		[PreserveSig]
		[Address(RVA = "0x801098", Offset = "0x801098", VA = "0x801098")]
		internal static extern IntPtr GetStringForHmdError(EVRInitError error);

		[PreserveSig]
		[Address(RVA = "0x80113C", Offset = "0x80113C", VA = "0x80113C")]
		internal static extern IntPtr GetGenericInterface([In] string pchInterfaceVersion, ref EVRInitError peError);

		[PreserveSig]
		[Address(RVA = "0x801208", Offset = "0x801208", VA = "0x801208")]
		internal static extern bool IsInterfaceVersionValid([In] string pchInterfaceVersion);

		[PreserveSig]
		[Address(RVA = "0x8012C8", Offset = "0x8012C8", VA = "0x8012C8")]
		internal static extern uint GetInitToken();

		[Address(RVA = "0x8024AC", Offset = "0x8024AC", VA = "0x8024AC")]
		public OpenVRInterop()
		{
		}
	}
	public enum EVREye
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Eye_Left,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Eye_Right
	}
	public enum ETextureType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DirectX,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OpenGL,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Vulkan,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IOSurface,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DirectX12,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DXGISharedHandle
	}
	public enum EColorSpace
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Auto,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Gamma,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Linear
	}
	public enum ETrackingResult
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Uninitialized = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Calibrating_InProgress = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Calibrating_OutOfRange = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Running_OK = 200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Running_OutOfRange = 201
	}
	public enum ETrackedDeviceClass
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Invalid,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		HMD,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Controller,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		GenericTracker,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackingReference,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DisplayRedirect
	}
	public enum ETrackedControllerRole
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Invalid,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LeftHand,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RightHand,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OptOut
	}
	public enum ETrackingUniverseOrigin
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackingUniverseSeated,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackingUniverseStanding,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackingUniverseRawAndUncalibrated
	}
	public enum ETrackedDeviceProperty
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Invalid = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_TrackingSystemName_String = 1000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ModelNumber_String = 1001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_SerialNumber_String = 1002,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_RenderModelName_String = 1003,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_WillDriftInYaw_Bool = 1004,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ManufacturerName_String = 1005,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_TrackingFirmwareVersion_String = 1006,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HardwareRevision_String = 1007,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_AllWirelessDongleDescriptions_String = 1008,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ConnectedWirelessDongle_String = 1009,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DeviceIsWireless_Bool = 1010,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DeviceIsCharging_Bool = 1011,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DeviceBatteryPercentage_Float = 1012,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_StatusDisplayTransform_Matrix34 = 1013,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Firmware_UpdateAvailable_Bool = 1014,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Firmware_ManualUpdate_Bool = 1015,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Firmware_ManualUpdateURL_String = 1016,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HardwareRevision_Uint64 = 1017,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_FirmwareVersion_Uint64 = 1018,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_FPGAVersion_Uint64 = 1019,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_VRCVersion_Uint64 = 1020,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_RadioVersion_Uint64 = 1021,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DongleVersion_Uint64 = 1022,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_BlockServerShutdown_Bool = 1023,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ContainsProximitySensor_Bool = 1025,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DeviceProvidesBatteryStatus_Bool = 1026,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DeviceCanPowerOff_Bool = 1027,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Firmware_ProgrammingTarget_String = 1028,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DeviceClass_Int32 = 1029,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HasCamera_Bool = 1030,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DriverVersion_String = 1031,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Firmware_ForceUpdateRequired_Bool = 1032,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ViveSystemButtonFixRequired_Bool = 1033,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ParentDriver_Uint64 = 1034,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ResourceRoot_String = 1035,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_RegisteredDeviceType_String = 1036,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_InputProfilePath_String = 1037,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NeverTracked_Bool = 1038,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ReportsTimeSinceVSync_Bool = 2000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_SecondsFromVsyncToPhotons_Float = 2001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayFrequency_Float = 2002,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_UserIpdMeters_Float = 2003,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_CurrentUniverseId_Uint64 = 2004,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_PreviousUniverseId_Uint64 = 2005,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayFirmwareVersion_Uint64 = 2006,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_IsOnDesktop_Bool = 2007,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCType_Int32 = 2008,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCOffset_Float = 2009,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCScale_Float = 2010,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_EdidVendorID_Int32 = 2011,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCImageLeft_String = 2012,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCImageRight_String = 2013,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayGCBlackClamp_Float = 2014,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_EdidProductID_Int32 = 2015,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_CameraToHeadTransform_Matrix34 = 2016,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayGCType_Int32 = 2017,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayGCOffset_Float = 2018,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayGCScale_Float = 2019,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayGCPrescale_Float = 2020,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayGCImage_String = 2021,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_LensCenterLeftU_Float = 2022,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_LensCenterLeftV_Float = 2023,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_LensCenterRightU_Float = 2024,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_LensCenterRightV_Float = 2025,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_UserHeadToEyeDepthMeters_Float = 2026,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_CameraFirmwareVersion_Uint64 = 2027,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_CameraFirmwareDescription_String = 2028,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayFPGAVersion_Uint64 = 2029,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayBootloaderVersion_Uint64 = 2030,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayHardwareVersion_Uint64 = 2031,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_AudioFirmwareVersion_Uint64 = 2032,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_CameraCompatibilityMode_Int32 = 2033,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ScreenshotHorizontalFieldOfViewDegrees_Float = 2034,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ScreenshotVerticalFieldOfViewDegrees_Float = 2035,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplaySuppressed_Bool = 2036,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayAllowNightMode_Bool = 2037,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCImageWidth_Int32 = 2038,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCImageHeight_Int32 = 2039,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCImageNumChannels_Int32 = 2040,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayMCImageData_Binary = 2041,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_SecondsFromPhotonsToVblank_Float = 2042,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DriverDirectModeSendsVsyncEvents_Bool = 2043,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayDebugMode_Bool = 2044,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_GraphicsAdapterLuid_Uint64 = 2045,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DriverProvidedChaperonePath_String = 2048,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ExpectedTrackingReferenceCount_Int32 = 2049,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ExpectedControllerCount_Int32 = 2050,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathControllerLeftDeviceOff_String = 2051,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathControllerRightDeviceOff_String = 2052,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathTrackingReferenceDeviceOff_String = 2053,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DoNotApplyPrediction_Bool = 2054,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_CameraToHeadTransforms_Matrix34_Array = 2055,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DistortionMeshResolution_Int32 = 2056,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DriverIsDrawingControllers_Bool = 2057,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DriverRequestsApplicationPause_Bool = 2058,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DriverRequestsReducedRendering_Bool = 2059,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_MinimumIpdStepMeters_Float = 2060,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_AudioBridgeFirmwareVersion_Uint64 = 2061,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ImageBridgeFirmwareVersion_Uint64 = 2062,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_AttachedDeviceId_String = 3000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_SupportedButtons_Uint64 = 3001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Axis0Type_Int32 = 3002,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Axis1Type_Int32 = 3003,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Axis2Type_Int32 = 3004,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Axis3Type_Int32 = 3005,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_Axis4Type_Int32 = 3006,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ControllerRoleHint_Int32 = 3007,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_FieldOfViewLeftDegrees_Float = 4000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_FieldOfViewRightDegrees_Float = 4001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_FieldOfViewTopDegrees_Float = 4002,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_FieldOfViewBottomDegrees_Float = 4003,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_TrackingRangeMinimumMeters_Float = 4004,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_TrackingRangeMaximumMeters_Float = 4005,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ModeLabel_String = 4006,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_IconPathName_String = 5000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceOff_String = 5001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceSearching_String = 5002,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceSearchingAlert_String = 5003,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceReady_String = 5004,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceReadyAlert_String = 5005,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceNotReady_String = 5006,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceStandby_String = 5007,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_NamedIconPathDeviceAlertLow_String = 5008,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayHiddenArea_Binary_Start = 5100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_DisplayHiddenArea_Binary_End = 5150,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ParentContainer = 5151,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_UserConfigPath_String = 6000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_InstallPath_String = 6001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HasDisplayComponent_Bool = 6002,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HasControllerComponent_Bool = 6003,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HasCameraComponent_Bool = 6004,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HasDriverDirectModeComponent_Bool = 6005,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_HasVirtualDisplayComponent_Bool = 6006,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_ControllerType_String = 7000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_LegacyInputProfile_String = 7001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_VendorSpecific_Reserved_Start = 10000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_VendorSpecific_Reserved_End = 10999,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Prop_TrackedDeviceProperty_Max = 1000000
	}
	public enum ETrackedPropertyError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_Success,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_WrongDataType,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_WrongDeviceClass,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_BufferTooSmall,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_UnknownProperty,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_InvalidDevice,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_CouldNotContactServer,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_ValueNotProvidedByDevice,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_StringExceedsMaximumLength,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_NotYetAvailable,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_PermissionDenied,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_InvalidOperation,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TrackedProp_CannotWriteToWildcards
	}
	public enum EVRSubmitFlags
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Submit_Default = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Submit_LensDistortionAlreadyApplied = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Submit_GlRenderBuffer = 2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Submit_Reserved = 4,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Submit_TextureWithPose = 8,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Submit_TextureWithDepth = 0x10
	}
	public enum EVRState
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Undefined = -1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Off,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Searching,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Searching_Alert,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Ready,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Ready_Alert,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotReady,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Standby,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Ready_Alert_Low
	}
	public enum EVREventType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedDeviceActivated = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedDeviceDeactivated = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedDeviceUpdated = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedDeviceUserInteractionStarted = 103,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedDeviceUserInteractionEnded = 104,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_IpdChanged = 105,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_EnterStandbyMode = 106,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_LeaveStandbyMode = 107,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedDeviceRoleChanged = 108,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_WatchdogWakeUpRequested = 109,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_LensDistortionChanged = 110,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_PropertyChanged = 111,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_WirelessDisconnect = 112,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_WirelessReconnect = 113,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ButtonPress = 200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ButtonUnpress = 201,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ButtonTouch = 202,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ButtonUntouch = 203,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_Press = 250,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_Unpress = 251,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_Touch = 252,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_Untouch = 253,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_Move = 254,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_ModeSwitch1 = 255,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_ModeSwitch2 = 256,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DualAnalog_Cancel = 257,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_MouseMove = 300,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_MouseButtonDown = 301,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_MouseButtonUp = 302,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_FocusEnter = 303,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_FocusLeave = 304,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Scroll = 305,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TouchPadMove = 306,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_OverlayFocusChanged = 307,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_InputFocusCaptured = 400,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_InputFocusReleased = 401,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SceneFocusLost = 402,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SceneFocusGained = 403,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SceneApplicationChanged = 404,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SceneFocusChanged = 405,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_InputFocusChanged = 406,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SceneApplicationSecondaryRenderingStarted = 407,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SceneApplicationUsingWrongGraphicsAdapter = 408,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_HideRenderModels = 410,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ShowRenderModels = 411,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ConsoleOpened = 420,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ConsoleClosed = 421,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_OverlayShown = 500,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_OverlayHidden = 501,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DashboardActivated = 502,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DashboardDeactivated = 503,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DashboardThumbSelected = 504,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DashboardRequested = 505,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ResetDashboard = 506,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_RenderToast = 507,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ImageLoaded = 508,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ShowKeyboard = 509,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_HideKeyboard = 510,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_OverlayGamepadFocusGained = 511,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_OverlayGamepadFocusLost = 512,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_OverlaySharedTextureChanged = 513,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ScreenshotTriggered = 516,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ImageFailed = 517,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DashboardOverlayCreated = 518,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SwitchGamepadFocus = 519,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_RequestScreenshot = 520,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ScreenshotTaken = 521,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ScreenshotFailed = 522,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SubmitScreenshotToDashboard = 523,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ScreenshotProgressToDashboard = 524,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_PrimaryDashboardDeviceChanged = 525,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_RoomViewShown = 526,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_RoomViewHidden = 527,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Notification_Shown = 600,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Notification_Hidden = 601,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Notification_BeginInteraction = 602,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Notification_Destroyed = 603,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Quit = 700,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ProcessQuit = 701,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_QuitAborted_UserPrompt = 702,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_QuitAcknowledged = 703,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DriverRequestedQuit = 704,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ChaperoneDataHasChanged = 800,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ChaperoneUniverseHasChanged = 801,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ChaperoneTempDataHasChanged = 802,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ChaperoneSettingsHaveChanged = 803,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SeatedZeroPoseReset = 804,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_AudioSettingsHaveChanged = 820,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_BackgroundSettingHasChanged = 850,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_CameraSettingsHaveChanged = 851,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ReprojectionSettingHasChanged = 852,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ModelSkinSettingsHaveChanged = 853,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_EnvironmentSettingsHaveChanged = 854,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_PowerSettingsHaveChanged = 855,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_EnableHomeAppSettingsHaveChanged = 856,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_SteamVRSectionSettingChanged = 857,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_LighthouseSectionSettingChanged = 858,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_NullSectionSettingChanged = 859,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_UserInterfaceSectionSettingChanged = 860,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_NotificationsSectionSettingChanged = 861,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_KeyboardSectionSettingChanged = 862,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_PerfSectionSettingChanged = 863,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_DashboardSectionSettingChanged = 864,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_WebInterfaceSectionSettingChanged = 865,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_StatusUpdate = 900,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_WebInterface_InstallDriverCompleted = 950,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_MCImageUpdated = 1000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_FirmwareUpdateStarted = 1100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_FirmwareUpdateFinished = 1101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_KeyboardClosed = 1200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_KeyboardCharInput = 1201,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_KeyboardDone = 1202,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ApplicationTransitionStarted = 1300,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ApplicationTransitionAborted = 1301,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ApplicationTransitionNewAppStarted = 1302,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ApplicationListUpdated = 1303,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ApplicationMimeTypeLoad = 1304,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ApplicationTransitionNewAppLaunchComplete = 1305,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ProcessConnected = 1306,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_ProcessDisconnected = 1307,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Compositor_MirrorWindowShown = 1400,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Compositor_MirrorWindowHidden = 1401,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Compositor_ChaperoneBoundsShown = 1410,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Compositor_ChaperoneBoundsHidden = 1411,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedCamera_StartVideoStream = 1500,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedCamera_StopVideoStream = 1501,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedCamera_PauseVideoStream = 1502,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedCamera_ResumeVideoStream = 1503,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_TrackedCamera_EditingSurface = 1550,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_PerformanceTest_EnableCapture = 1600,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_PerformanceTest_DisableCapture = 1601,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_PerformanceTest_FidelityLevel = 1602,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_MessageOverlay_Closed = 1650,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_MessageOverlayCloseRequested = 1651,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_Input_HapticVibration = 1700,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_VendorSpecific_Reserved_Start = 10000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VREvent_VendorSpecific_Reserved_End = 19999
	}
	public enum EDeviceActivityLevel
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EDeviceActivityLevel_Unknown = -1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EDeviceActivityLevel_Idle,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EDeviceActivityLevel_UserInteraction,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EDeviceActivityLevel_UserInteraction_Timeout,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EDeviceActivityLevel_Standby
	}
	public enum EVRButtonId
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_System = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_ApplicationMenu = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Grip = 2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_DPad_Left = 3,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_DPad_Up = 4,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_DPad_Right = 5,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_DPad_Down = 6,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_A = 7,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_ProximitySensor = 31,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Axis0 = 32,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Axis1 = 33,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Axis2 = 34,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Axis3 = 35,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Axis4 = 36,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_SteamVR_Touchpad = 32,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_SteamVR_Trigger = 33,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Dashboard_Back = 2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EButton_Max = 64
	}
	public enum EVRMouseButton
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Left = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Right = 2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Middle = 4
	}
	public enum EDualAnalogWhich
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EDualAnalog_Left,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EDualAnalog_Right
	}
	public enum EVRInputError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NameNotFound,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WrongType,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidHandle,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidParam,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoSteam,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MaxCapacityReached,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPCError,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoActiveActionSet,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidDevice
	}
	public enum EHiddenAreaMeshType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eHiddenAreaMesh_Standard,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eHiddenAreaMesh_Inverse,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eHiddenAreaMesh_LineLoop,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eHiddenAreaMesh_Max
	}
	public enum EVRControllerAxisType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eControllerAxis_None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eControllerAxis_TrackPad,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eControllerAxis_Joystick,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_eControllerAxis_Trigger
	}
	public enum EVRControllerEventOutputType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ControllerEventOutput_OSEvents,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ControllerEventOutput_VREvents
	}
	public enum ECollisionBoundsStyle
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		COLLISION_BOUNDS_STYLE_BEGINNER,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		COLLISION_BOUNDS_STYLE_INTERMEDIATE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		COLLISION_BOUNDS_STYLE_SQUARES,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		COLLISION_BOUNDS_STYLE_ADVANCED,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		COLLISION_BOUNDS_STYLE_NONE,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		COLLISION_BOUNDS_STYLE_COUNT
	}
	public enum EVROverlayError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UnknownOverlay = 10,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidHandle = 11,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PermissionDenied = 12,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OverlayLimitExceeded = 13,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WrongVisibilityType = 14,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		KeyTooLong = 15,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NameTooLong = 16,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		KeyInUse = 17,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WrongTransformType = 18,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidTrackedDevice = 19,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidParameter = 20,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ThumbnailCantBeDestroyed = 21,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ArrayTooSmall = 22,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RequestFailed = 23,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidTexture = 24,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UnableToLoadFile = 25,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		KeyboardAlreadyInUse = 26,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoNeighbor = 27,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TooManyMaskPrimitives = 29,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BadMaskPrimitive = 30,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TextureAlreadyLocked = 31,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TextureLockCapacityReached = 32,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TextureNotLocked = 33
	}
	public enum EVRApplicationType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_Other,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_Scene,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_Overlay,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_Background,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_Utility,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_VRMonitor,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_SteamWatchdog,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_Bootstrapper,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplication_Max
	}
	public enum EVRFirmwareError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Success,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Fail
	}
	public enum EVRNotificationError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OK = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidNotificationId = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotificationQueueFull = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidOverlayHandle = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SystemWithUserValueAlreadyExists = 103
	}
	public enum EVRInitError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Unknown = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_InstallationNotFound = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_InstallationCorrupt = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRClientDLLNotFound = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_FileNotFound = 103,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_FactoryNotFound = 104,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_InterfaceNotFound = 105,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_InvalidInterface = 106,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_UserConfigDirectoryInvalid = 107,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_HmdNotFound = 108,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_NotInitialized = 109,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_PathRegistryNotFound = 110,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_NoConfigPath = 111,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_NoLogPath = 112,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_PathRegistryNotWritable = 113,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_AppInfoInitFailed = 114,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_Retry = 115,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_InitCanceledByUser = 116,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_AnotherAppLaunching = 117,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_SettingsInitFailed = 118,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_ShuttingDown = 119,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_TooManyObjects = 120,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_NoServerForBackgroundApp = 121,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_NotSupportedWithCompositor = 122,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_NotAvailableToUtilityApps = 123,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_Internal = 124,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_HmdDriverIdIsNone = 125,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_HmdNotFoundPresenceFailed = 126,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRMonitorNotFound = 127,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRMonitorStartupFailed = 128,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_LowPowerWatchdogNotSupported = 129,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_InvalidApplicationType = 130,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_NotAvailableToWatchdogApps = 131,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_WatchdogDisabledInSettings = 132,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRDashboardNotFound = 133,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRDashboardStartupFailed = 134,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRHomeNotFound = 135,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRHomeStartupFailed = 136,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_RebootingBusy = 137,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_FirmwareUpdateBusy = 138,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_FirmwareRecoveryBusy = 139,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_USBServiceBusy = 140,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Init_VRWebHelperStartupFailed = 141,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_Failed = 200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_Unknown = 201,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_HmdUnknown = 202,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_NotLoaded = 203,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_RuntimeOutOfDate = 204,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_HmdInUse = 205,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_NotCalibrated = 206,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_CalibrationInvalid = 207,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_HmdDisplayNotFound = 208,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_TrackedDeviceInterfaceUnknown = 209,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_HmdDriverIdOutOfBounds = 211,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Driver_HmdDisplayMirrored = 212,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_ServerInitFailed = 300,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_ConnectFailed = 301,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_SharedStateInitFailed = 302,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_CompositorInitFailed = 303,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_MutexInitFailed = 304,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_Failed = 305,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_CompositorConnectFailed = 306,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_CompositorInvalidConnectResponse = 307,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPC_ConnectFailedAfterMultipleAttempts = 308,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Compositor_Failed = 400,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Compositor_D3D11HardwareRequired = 401,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Compositor_FirmwareRequiresUpdate = 402,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Compositor_OverlayInitFailed = 403,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Compositor_ScreenshotsInitFailed = 404,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Compositor_UnableToCreateDevice = 405,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_UnableToConnectToOculusRuntime = 1000,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_WindowsNotInDevMode = 1001,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_CantOpenDevice = 1101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_NoStoredConfig = 1103,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_ConfigTooBig = 1104,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_ConfigTooSmall = 1105,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_UnableToInitZLib = 1106,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_UserDataAddressRange = 1111,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_UserDataError = 1112,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Steam_SteamInstallationNotFound = 2000
	}
	public enum EVRScreenshotType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Mono,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Stereo,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Cubemap,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MonoPanorama,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		StereoPanorama
	}
	public enum EVRScreenshotPropertyFilenames
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Preview,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VR
	}
	public enum EVRTrackedCameraError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OperationFailed = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidHandle = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidFrameHeaderVersion = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OutOfHandles = 103,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPCFailure = 104,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotSupportedForThisDevice = 105,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SharedMemoryFailure = 106,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FrameBufferingFailure = 107,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		StreamSetupFailure = 108,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidGLTextureId = 109,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidSharedTextureHandle = 110,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		FailedToGetGLTextureId = 111,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SharedTextureFailure = 112,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoFrameAvailable = 113,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidArgument = 114,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidFrameBufferSize = 115
	}
	public enum EVRTrackedCameraFrameType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Distorted,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Undistorted,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MaximumUndistorted,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MAX_CAMERA_FRAME_TYPES
	}
	public enum EVRApplicationError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		AppKeyAlreadyExists = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoManifest = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoApplication = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidIndex = 103,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UnknownApplication = 104,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPCFailed = 105,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ApplicationAlreadyRunning = 106,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidManifest = 107,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidApplication = 108,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LaunchFailed = 109,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ApplicationAlreadyStarting = 110,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LaunchInProgress = 111,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OldApplicationQuitting = 112,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TransitionAborted = 113,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsTemplate = 114,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SteamVRIsExiting = 115,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BufferTooSmall = 200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		PropertyNotSet = 201,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UnknownProperty = 202,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidParameter = 203
	}
	public enum EVRApplicationProperty
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Name_String = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LaunchType_String = 11,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WorkingDirectory_String = 12,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BinaryPath_String = 13,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Arguments_String = 14,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		URL_String = 15,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Description_String = 50,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NewsURL_String = 51,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ImagePath_String = 52,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Source_String = 53,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ActionManifestURL_String = 54,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsDashboardOverlay_Bool = 60,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsTemplate_Bool = 61,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsInstanced_Bool = 62,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsInternal_Bool = 63,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WantsCompositorPauseInStandby_Bool = 64,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		LastLaunchTime_Uint64 = 70
	}
	public enum EVRApplicationTransitionState
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplicationTransition_None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplicationTransition_OldAppQuitSent = 10,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplicationTransition_WaitingForExternalLaunch = 11,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VRApplicationTransition_NewAppLaunched = 20
	}
	public enum ChaperoneCalibrationState
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OK = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Warning = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Warning_BaseStationMayHaveMoved = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Warning_BaseStationRemoved = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Warning_SeatedBoundsInvalid = 103,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Error = 200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Error_BaseStationUninitialized = 201,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Error_BaseStationConflict = 202,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Error_PlayAreaInvalid = 203,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Error_CollisionBoundsInvalid = 204
	}
	public enum EChaperoneConfigFile
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Live = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Temp
	}
	public enum EChaperoneImportFlags
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		EChaperoneImport_BoundsOnly = 1
	}
	public enum EVRCompositorError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RequestFailed = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IncompatibleVersion = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DoNotHaveFocus = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidTexture = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsNotSceneApplication = 103,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TextureIsOnWrongDevice = 104,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TextureUsesUnsupportedFormat = 105,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SharedTexturesNotSupported = 106,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IndexOutOfRange = 107,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		AlreadySubmitted = 108,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidBounds = 109
	}
	public enum EVRCompositorTimingMode
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Implicit,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Explicit_RuntimePerformsPostPresentHandoff,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Explicit_ApplicationPerformsPostPresentHandoff
	}
	public enum VROverlayInputMethod
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Mouse,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		DualAnalog
	}
	public enum VROverlayTransformType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VROverlayTransform_Absolute,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VROverlayTransform_TrackedDeviceRelative,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VROverlayTransform_SystemOverlay,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VROverlayTransform_TrackedComponent
	}
	public enum VROverlayFlags
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Curved,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RGSS4X,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoDashboardTab,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		AcceptsGamepadEvents,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ShowGamepadFocus,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SendVRScrollEvents,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SendVRTouchpadEvents,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ShowTouchPadScrollWheel,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TransferOwnershipToInternalProcess,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SideBySide_Parallel,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SideBySide_Crossed,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Panorama,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		StereoPanorama,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		SortWithNonSceneOverlays,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		VisibleInDashboard
	}
	public enum VRMessageOverlayResponse
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ButtonPress_0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ButtonPress_1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ButtonPress_2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ButtonPress_3,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CouldntFindSystemOverlay,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		CouldntFindOrCreateClientOverlay,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ApplicationQuit
	}
	public enum EGamepadTextInputMode
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EGamepadTextInputModeNormal,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EGamepadTextInputModePassword,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EGamepadTextInputModeSubmit
	}
	public enum EGamepadTextInputLineMode
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EGamepadTextInputLineModeSingleLine,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	public enum EOverlayDirection
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Up,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Down,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Left,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Right,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Count
	}
	public enum EVROverlayIntersectionMaskPrimitiveType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OverlayIntersectionPrimitiveType_Rectangle,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		OverlayIntersectionPrimitiveType_Circle
	}
	public enum EVRRenderModelError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Loading = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotSupported = 200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidArg = 300,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidModel = 301,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NoShapes = 302,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MultipleShapes = 303,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		TooManyVertices = 304,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		MultipleTextures = 305,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BufferTooSmall = 306,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotEnoughNormals = 307,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotEnoughTexCoords = 308,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		InvalidTexture = 400
	}
	public enum EVRComponentProperty
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsStatic = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsVisible = 2,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsTouched = 4,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsPressed = 8,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IsScrolled = 0x10
	}
	public enum EVRNotificationType
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Transient,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Persistent,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Transient_SystemWithUserValue
	}
	public enum EVRNotificationStyle
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Application = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Contact_Disabled = 200,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Contact_Enabled = 201,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		Contact_Active = 202
	}
	public enum EVRSettingsError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IPCFailed,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		WriteFailed,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ReadFailed,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		JsonParseFailed,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		UnsetSettingHasNoDefault
	}
	public enum EVRScreenshotError
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		None = 0,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		RequestFailed = 1,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		IncompatibleVersion = 100,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		NotFound = 101,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		BufferTooSmall = 102,
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		ScreenshotAlreadyInProgress = 108
	}
	[StructLayout(2)]
	public struct VREvent_Data_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Reserved_t reserved;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Controller_t controller;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Mouse_t mouse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Scroll_t scroll;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Process_t process;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Notification_t notification;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Overlay_t overlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Status_t status;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Ipd_t ipd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Chaperone_t chaperone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_PerformanceTest_t performanceTest;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_TouchPadMove_t touchPadMove;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Screenshot_t screenshot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ScreenshotProgress_t screenshotProgress;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ApplicationLaunch_t applicationLaunch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_EditingCameraSurface_t cameraSurface;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_MessageOverlay_t messageOverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Property_t property;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_DualAnalog_t dualAnalog;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_HapticVibration_t hapticVibration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Keyboard_t keyboard;
	}
	[StructLayout(2)]
	public struct VROverlayIntersectionMaskPrimitive_Data_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskRectangle_t m_Rectangle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskCircle_t m_Circle;
	}
	public struct HmdMatrix34_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;
	}
	public struct HmdMatrix44_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m12;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m13;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m14;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m15;
	}
	public struct HmdVector3_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;
	}
	public struct HmdVector4_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float v3;
	}
	public struct HmdVector3d_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double v0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double v1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double v2;
	}
	public struct HmdVector2_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;
	}
	public struct HmdQuaternion_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double w;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double x;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double y;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double z;
	}
	public struct HmdColor_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;
	}
	public struct HmdQuad_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vCorners0;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vCorners1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector3_t vCorners2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HmdVector3_t vCorners3;
	}
	public struct HmdRect2_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector2_t vTopLeft;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector2_t vBottomRight;
	}
	public struct DistortionCoordinates_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rfRed0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rfRed1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rfGreen0;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rfGreen1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float rfBlue0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rfBlue1;
	}
	public struct Texture_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETextureType eType;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EColorSpace eColorSpace;
	}
	public struct TrackedDevicePose_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdVector3_t vVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public HmdVector3_t vAngularVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ETrackingResult eTrackingResult;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bPoseIsValid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool bDeviceIsConnected;
	}
	public struct VRTextureBounds_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float uMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float vMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float uMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float vMax;
	}
	public struct VRTextureWithPose_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;
	}
	public struct VRTextureDepthInfo_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdMatrix44_t mProjection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public HmdVector2_t vRange;
	}
	public struct VRTextureWithDepth_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	public struct VRTextureWithPoseAndDepth_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	public struct VRVulkanTextureData_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nImage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pDevice;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pPhysicalDevice;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pInstance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pQueue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nQueueFamilyIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nHeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nFormat;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nSampleCount;
	}
	public struct D3D12TextureData_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pResource;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pCommandQueue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNodeMask;
	}
	public struct VREvent_Controller_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint button;
	}
	public struct VREvent_Mouse_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint button;
	}
	public struct VREvent_Scroll_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float xdelta;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ydelta;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint repeatCount;
	}
	public struct VREvent_TouchPadMove_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bFingerDown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float flSecondsFingerDown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fValueXFirst;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fValueYFirst;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fValueXRaw;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fValueYRaw;
	}
	public struct VREvent_Notification_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulUserValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint notificationId;
	}
	public struct VREvent_Process_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint oldPid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool bForced;
	}
	public struct VREvent_Overlay_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;
	}
	public struct VREvent_Status_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint statusState;
	}
	public struct VREvent_Keyboard_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte cNewInput0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte cNewInput1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte cNewInput2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte cNewInput3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte cNewInput4;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public byte cNewInput5;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public byte cNewInput6;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public byte cNewInput7;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong uUserValue;
	}
	public struct VREvent_Ipd_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float ipdMeters;
	}
	public struct VREvent_Chaperone_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nPreviousUniverse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_nCurrentUniverse;
	}
	public struct VREvent_Reserved_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong reserved0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong reserved1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong reserved2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong reserved3;
	}
	public struct VREvent_PerformanceTest_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nFidelityLevel;
	}
	public struct VREvent_SeatedZeroPoseReset_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bResetBySystemMenu;
	}
	public struct VREvent_Screenshot_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint handle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint type;
	}
	public struct VREvent_ScreenshotProgress_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float progress;
	}
	public struct VREvent_ApplicationLaunch_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unArgsHandle;
	}
	public struct VREvent_EditingCameraSurface_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nVisualMode;
	}
	public struct VREvent_MessageOverlay_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unVRMessageOverlayResponse;
	}
	public struct VREvent_Property_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong container;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETrackedDeviceProperty prop;
	}
	public struct VREvent_DualAnalog_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float transformedX;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float transformedY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EDualAnalogWhich which;
	}
	public struct VREvent_HapticVibration_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong containerHandle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong componentHandle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fDurationSeconds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fFrequency;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fAmplitude;
	}
	public struct VREvent_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VREvent_Data_t data;
	}
	public struct VREvent_t_Packed
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VREvent_Data_t data;

		[Address(RVA = "0x8026C4", Offset = "0x8026C4", VA = "0x8026C4")]
		public VREvent_t_Packed(VREvent_t unpacked)
		{
		}

		[Address(RVA = "0x802740", Offset = "0x802740", VA = "0x802740")]
		public void Unpack(ref VREvent_t unpacked)
		{
		}
	}
	public struct HiddenAreaMesh_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pVertexData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unTriangleCount;
	}
	public struct VRControllerAxis_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}
	public struct VRControllerState_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulButtonTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRControllerAxis_t rAxis0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRControllerAxis_t rAxis1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRControllerAxis_t rAxis2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRControllerAxis_t rAxis3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRControllerAxis_t rAxis4;
	}
	public struct VRControllerState_t_Packed
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtonPressed;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong ulButtonTouched;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VRControllerAxis_t rAxis0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public VRControllerAxis_t rAxis1;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VRControllerAxis_t rAxis2;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public VRControllerAxis_t rAxis3;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VRControllerAxis_t rAxis4;

		[Address(RVA = "0x802638", Offset = "0x802638", VA = "0x802638")]
		public VRControllerState_t_Packed(VRControllerState_t unpacked)
		{
		}

		[Address(RVA = "0x8026BC", Offset = "0x8026BC", VA = "0x8026BC")]
		public void Unpack(ref VRControllerState_t unpacked)
		{
		}
	}
	public struct Compositor_OverlaySettings
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool curved;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool antialias;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scale;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float alpha;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float uOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float vOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float uScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float vScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float gridDivs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float gridWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float gridScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix44_t transform;
	}
	public struct CameraVideoStreamFrameHeader_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVRTrackedCameraFrameType eFrameType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint nWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nHeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint nBytesPerPixel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nFrameSequence;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TrackedDevicePose_t standingTrackedDevicePose;
	}
	public struct DriverDirectMode_FrameTiming
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumMisPresented;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumDroppedFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nReprojectionFlags;
	}
	public struct AppOverrideKeys_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pchKey;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pchValue;
	}
	public struct Compositor_FrameTiming
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nFrameIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumFramePresents;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumMisPresented;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumDroppedFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nReprojectionFlags;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double m_flSystemTimeInSeconds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_flPreSubmitGpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_flPostSubmitGpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_flTotalRenderGpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_flCompositorRenderGpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_flCompositorRenderCpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_flCompositorIdleCpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_flClientFrameIntervalMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m_flPresentCallCpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float m_flWaitForPresentCpuMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float m_flSubmitFrameMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float m_flWaitGetPosesCalledMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float m_flNewPosesReadyMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float m_flNewFrameReadyMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float m_flCompositorUpdateStartMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float m_flCompositorUpdateEndMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float m_flCompositorRenderStartMs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TrackedDevicePose_t m_HmdPose;
	}
	public struct Compositor_CumulativeStats
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nPid;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumDroppedFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumReprojectedFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumFramePresentsOnStartup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nNumDroppedFramesOnStartup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nNumReprojectedFramesOnStartup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nNumLoading;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_nNumFramePresentsLoading;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nNumDroppedFramesLoading;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nNumReprojectedFramesLoading;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nNumTimedOut;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nNumFramePresentsTimedOut;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nNumDroppedFramesTimedOut;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nNumReprojectedFramesTimedOut;
	}
	public struct VROverlayIntersectionParams_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vDirection;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ETrackingUniverseOrigin eOrigin;
	}
	public struct VROverlayIntersectionResults_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector2_t vUVs;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fDistance;
	}
	public struct IntersectionMaskRectangle_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flTopLeftX;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flTopLeftY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m_flHeight;
	}
	public struct IntersectionMaskCircle_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flCenterX;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flCenterY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flRadius;
	}
	public struct VROverlayIntersectionMaskPrimitive_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVROverlayIntersectionMaskPrimitiveType m_nPrimitiveType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VROverlayIntersectionMaskPrimitive_Data_t m_Primitive;
	}
	public struct RenderModel_ComponentState_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mTrackingToComponentRenderModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix34_t mTrackingToComponentLocal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint uProperties;
	}
	public struct RenderModel_Vertex_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rfTextureCoord0;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rfTextureCoord1;
	}
	public struct RenderModel_TextureMap_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;
	}
	public struct RenderModel_TextureMap_t_Packed
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public char unWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public char unHeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;

		[Address(RVA = "0x80252C", Offset = "0x80252C", VA = "0x80252C")]
		public RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t unpacked)
		{
		}

		[Address(RVA = "0x80255C", Offset = "0x80255C", VA = "0x80255C")]
		public void Unpack(ref RenderModel_TextureMap_t unpacked)
		{
		}
	}
	public struct RenderModel_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr rIndexData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unTriangleCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int diffuseTextureId;
	}
	public struct RenderModel_t_Packed
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr rIndexData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTriangleCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int diffuseTextureId;

		[Address(RVA = "0x802578", Offset = "0x802578", VA = "0x802578")]
		public RenderModel_t_Packed(RenderModel_t unpacked)
		{
		}

		[Address(RVA = "0x8025C8", Offset = "0x8025C8", VA = "0x8025C8")]
		public void Unpack(ref RenderModel_t unpacked)
		{
		}
	}
	public struct RenderModel_ControllerMode_State_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bScrollWheelVisible;
	}
	public struct NotificationBitmap_t
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pImageData;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nHeight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nBytesPerPixel;
	}
	public struct COpenVRContext
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pVRSystem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pVRChaperone;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pVRChaperoneSetup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pVRCompositor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pVROverlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr m_pVRResources;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr m_pVRRenderModels;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr m_pVRExtendedDisplay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IntPtr m_pVRSettings;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntPtr m_pVRApplications;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IntPtr m_pVRTrackedCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr m_pVRScreenshots;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntPtr m_pVRDriverManager;
	}
	public class OpenVR
	{
		private class COpenVRContext
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private CVRSystem m_pVRSystem;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CVRChaperone m_pVRChaperone;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CVRChaperoneSetup m_pVRChaperoneSetup;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRCompositor m_pVRCompositor;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CVROverlay m_pVROverlay;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRRenderModels m_pVRRenderModels;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CVRExtendedDisplay m_pVRExtendedDisplay;

			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private CVRSettings m_pVRSettings;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CVRApplications m_pVRApplications;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private CVRScreenshots m_pVRScreenshots;

			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private CVRTrackedCamera m_pVRTrackedCamera;

			[Address(RVA = "0x801508", Offset = "0x801508", VA = "0x801508")]
			public COpenVRContext()
			{
			}

			[Address(RVA = "0x80236C", Offset = "0x80236C", VA = "0x80236C")]
			public void Clear()
			{
			}

			[Address(RVA = "0x8023F4", Offset = "0x8023F4", VA = "0x8023F4")]
			private void CheckClear()
			{
			}

			[Address(RVA = "0x8015A8", Offset = "0x8015A8", VA = "0x8015A8")]
			public CVRSystem VRSystem()
			{
				return null;
			}

			[Address(RVA = "0x8016D8", Offset = "0x8016D8", VA = "0x8016D8")]
			public CVRChaperone VRChaperone()
			{
				return null;
			}

			[Address(RVA = "0x801808", Offset = "0x801808", VA = "0x801808")]
			public CVRChaperoneSetup VRChaperoneSetup()
			{
				return null;
			}

			[Address(RVA = "0x801938", Offset = "0x801938", VA = "0x801938")]
			public CVRCompositor VRCompositor()
			{
				return null;
			}

			[Address(RVA = "0x801A68", Offset = "0x801A68", VA = "0x801A68")]
			public CVROverlay VROverlay()
			{
				return null;
			}

			[Address(RVA = "0x801B98", Offset = "0x801B98", VA = "0x801B98")]
			public CVRRenderModels VRRenderModels()
			{
				return null;
			}

			[Address(RVA = "0x801CC8", Offset = "0x801CC8", VA = "0x801CC8")]
			public CVRExtendedDisplay VRExtendedDisplay()
			{
				return null;
			}

			[Address(RVA = "0x801DF8", Offset = "0x801DF8", VA = "0x801DF8")]
			public CVRSettings VRSettings()
			{
				return null;
			}

			[Address(RVA = "0x801F28", Offset = "0x801F28", VA = "0x801F28")]
			public CVRApplications VRApplications()
			{
				return null;
			}

			[Address(RVA = "0x802058", Offset = "0x802058", VA = "0x802058")]
			public CVRScreenshots VRScreenshots()
			{
				return null;
			}

			[Address(RVA = "0x802188", Offset = "0x802188", VA = "0x802188")]
			public CVRTrackedCamera VRTrackedCamera()
			{
				return null;
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_nDriverNone = uint.MaxValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unMaxDriverDebugResponseSize = 32768u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unTrackedDeviceIndex_Hmd = 0u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unMaxTrackedDeviceCount = 64u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unTrackedDeviceIndexOther = 4294967294u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unTrackedDeviceIndexInvalid = uint.MaxValue;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong k_ulInvalidPropertyContainer = 0uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unInvalidPropertyTag = 0u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong k_ulInvalidDriverHandle = 0uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unFloatPropertyTag = 1u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unInt32PropertyTag = 2u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unUint64PropertyTag = 3u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unBoolPropertyTag = 4u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unStringPropertyTag = 5u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unHmdMatrix34PropertyTag = 20u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unHmdMatrix44PropertyTag = 21u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unHmdVector3PropertyTag = 22u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unHmdVector4PropertyTag = 23u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unHiddenAreaPropertyTag = 30u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unPathHandleInfoTag = 31u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unActionPropertyTag = 32u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unInputValuePropertyTag = 33u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unWildcardPropertyTag = 34u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unHapticVibrationPropertyTag = 35u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unOpenVRInternalReserved_Start = 1000u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unOpenVRInternalReserved_End = 10000u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unMaxPropertyStringSize = 32768u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unControllerStateAxisCount = 5u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const ulong k_ulOverlayHandleInvalid = 0uL;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unScreenshotHandleInvalid = 0u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRSystem_Version = "IVRSystem_019";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRExtendedDisplay_Version = "IVRExtendedDisplay_001";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRTrackedCamera_Version = "IVRTrackedCamera_003";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unMaxApplicationKeyLength = 128u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_MimeType_HomeApp = "vr/home";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_MimeType_GameTheater = "vr/game_theater";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRApplications_Version = "IVRApplications_006";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRChaperone_Version = "IVRChaperone_003";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRChaperoneSetup_Version = "IVRChaperoneSetup_005";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRCompositor_Version = "IVRCompositor_022";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unVROverlayMaxKeyLength = 128u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unVROverlayMaxNameLength = 128u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unMaxOverlayCount = 64u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unMaxOverlayIntersectionMaskPrimitivesCount = 32u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVROverlay_Version = "IVROverlay_018";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Controller_Component_GDC2015 = "gdc2015";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Controller_Component_Base = "base";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Controller_Component_Tip = "tip";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Controller_Component_HandGrip = "handgrip";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Controller_Component_Status = "status";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRRenderModels_Version = "IVRRenderModels_005";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unNotificationTextMaxSize = 256u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRNotifications_Version = "IVRNotifications_002";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const uint k_unMaxSettingsKeyLength = 128u;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRSettings_Version = "IVRSettings_002";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_Section = "steamvr";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_RequireHmd_String = "requireHmd";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ForcedDriverKey_String = "forcedDriver";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ForcedHmdKey_String = "forcedHmd";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DisplayDebug_Bool = "displayDebug";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DebugProcessPipe_String = "debugProcessPipe";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DisplayDebugX_Int32 = "displayDebugX";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DisplayDebugY_Int32 = "displayDebugY";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_SendSystemButtonToAllApps_Bool = "sendSystemButtonToAllApps";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_LogLevel_Int32 = "loglevel";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_IPD_Float = "ipd";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_Background_String = "background";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_BackgroundUseDomeProjection_Bool = "backgroundUseDomeProjection";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_BackgroundCameraHeight_Float = "backgroundCameraHeight";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_BackgroundDomeRadius_Float = "backgroundDomeRadius";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_GridColor_String = "gridColor";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_PlayAreaColor_String = "playAreaColor";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ShowStage_Bool = "showStage";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ActivateMultipleDrivers_Bool = "activateMultipleDrivers";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DirectMode_Bool = "directMode";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DirectModeEdidVid_Int32 = "directModeEdidVid";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DirectModeEdidPid_Int32 = "directModeEdidPid";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_UsingSpeakers_Bool = "usingSpeakers";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = "speakersForwardYawOffsetDegrees";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_BaseStationPowerManagement_Bool = "basestationPowerManagement";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_NeverKillProcesses_Bool = "neverKillProcesses";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_SupersampleScale_Float = "supersampleScale";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_AllowAsyncReprojection_Bool = "allowAsyncReprojection";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_AllowReprojection_Bool = "allowInterleavedReprojection";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ForceReprojection_Bool = "forceReprojection";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ForceFadeOnBadTracking_Bool = "forceFadeOnBadTracking";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DefaultMirrorView_Int32 = "defaultMirrorView";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ShowMirrorView_Bool = "showMirrorView";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_MirrorViewGeometry_String = "mirrorViewGeometry";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_StartMonitorFromAppLaunch = "startMonitorFromAppLaunch";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = "startCompositorFromAppLaunch";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = "startDashboardFromAppLaunch";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = "startOverlayAppsFromDashboard";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_EnableHomeApp = "enableHomeApp";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = "CycleBackgroundImageTimeSec";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_RetailDemo_Bool = "retailDemo";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_IpdOffset_Float = "ipdOffset";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_AllowSupersampleFiltering_Bool = "allowSupersampleFiltering";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_EnableLinuxVulkanAsync_Bool = "enableLinuxVulkanAsync";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_AllowDisplayLockedMode_Bool = "allowDisplayLockedMode";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool = "haveStartedTutorialForNativeChaperoneDriver";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_ForceWindows32bitVRMonitor = "forceWindows32BitVRMonitor";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_SteamVR_DebugInput = "debugInput";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_Section = "driver_lighthouse";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_DisableIMU_Bool = "disableimu";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_DisableIMUExceptHMD_Bool = "disableimuexcepthmd";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_UseDisambiguation_String = "usedisambiguation";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_DisambiguationDebug_Int32 = "disambiguationdebug";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_PrimaryBasestation_Int32 = "primarybasestation";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_DBHistory_Bool = "dbhistory";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_EnableBluetooth_Bool = "enableBluetooth";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Lighthouse_PowerManagedBaseStations_String = "PowerManagedBaseStations";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_Section = "driver_null";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_SerialNumber_String = "serialNumber";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_ModelNumber_String = "modelNumber";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_WindowX_Int32 = "windowX";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_WindowY_Int32 = "windowY";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_WindowWidth_Int32 = "windowWidth";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_WindowHeight_Int32 = "windowHeight";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_RenderWidth_Int32 = "renderWidth";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_RenderHeight_Int32 = "renderHeight";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_SecondsFromVsyncToPhotons_Float = "secondsFromVsyncToPhotons";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Null_DisplayFrequency_Float = "displayFrequency";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_UserInterface_Section = "userinterface";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_UserInterface_StatusAlwaysOnTop_Bool = "StatusAlwaysOnTop";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_UserInterface_MinimizeToTray_Bool = "MinimizeToTray";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_UserInterface_Screenshots_Bool = "screenshots";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_UserInterface_ScreenshotType_Int = "screenshotType";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Notifications_Section = "notifications";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Notifications_DoNotDisturb_Bool = "DoNotDisturb";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_Section = "keyboard";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_TutorialCompletions = "TutorialCompletions";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_ScaleX = "ScaleX";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_ScaleY = "ScaleY";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_OffsetLeftX = "OffsetLeftX";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_OffsetRightX = "OffsetRightX";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_OffsetY = "OffsetY";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Keyboard_Smoothing = "Smoothing";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_Section = "perfcheck";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_HeuristicActive_Bool = "heuristicActive";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_NotifyInHMD_Bool = "warnInHMD";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_NotifyOnlyOnce_Bool = "warnOnlyOnce";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_AllowTimingStore_Bool = "allowTimingStore";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_SaveTimingsOnExit_Bool = "saveTimingsOnExit";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_TestData_Float = "perfTestData";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Perf_LinuxGPUProfiling_Bool = "linuxGPUProfiling";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_Section = "collisionBounds";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_Style_Int32 = "CollisionBoundsStyle";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_GroundPerimeterOn_Bool = "CollisionBoundsGroundPerimeterOn";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_CenterMarkerOn_Bool = "CollisionBoundsCenterMarkerOn";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_PlaySpaceOn_Bool = "CollisionBoundsPlaySpaceOn";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_FadeDistance_Float = "CollisionBoundsFadeDistance";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_ColorGammaR_Int32 = "CollisionBoundsColorGammaR";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_ColorGammaG_Int32 = "CollisionBoundsColorGammaG";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_ColorGammaB_Int32 = "CollisionBoundsColorGammaB";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_CollisionBounds_ColorGammaA_Int32 = "CollisionBoundsColorGammaA";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_Section = "camera";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_EnableCamera_Bool = "enableCamera";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_EnableCameraInDashboard_Bool = "enableCameraInDashboard";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_EnableCameraForCollisionBounds_Bool = "enableCameraForCollisionBounds";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_EnableCameraForRoomView_Bool = "enableCameraForRoomView";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_BoundsColorGammaR_Int32 = "cameraBoundsColorGammaR";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_BoundsColorGammaG_Int32 = "cameraBoundsColorGammaG";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_BoundsColorGammaB_Int32 = "cameraBoundsColorGammaB";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_BoundsColorGammaA_Int32 = "cameraBoundsColorGammaA";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Camera_BoundsStrength_Int32 = "cameraBoundsStrength";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_audio_Section = "audio";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_audio_OnPlaybackDevice_String = "onPlaybackDevice";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_audio_OnRecordDevice_String = "onRecordDevice";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_audio_OnPlaybackMirrorDevice_String = "onPlaybackMirrorDevice";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_audio_OffPlaybackDevice_String = "offPlaybackDevice";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_audio_OffRecordDevice_String = "offRecordDevice";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_audio_VIVEHDMIGain = "viveHDMIGain";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Power_Section = "power";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Power_PowerOffOnExit_Bool = "powerOffOnExit";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Power_TurnOffScreensTimeout_Float = "turnOffScreensTimeout";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Power_TurnOffControllersTimeout_Float = "turnOffControllersTimeout";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Power_ReturnToWatchdogTimeout_Float = "returnToWatchdogTimeout";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Power_AutoLaunchSteamVROnButtonPress = "autoLaunchSteamVROnButtonPress";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Power_PauseCompositorOnStandby_Bool = "pauseCompositorOnStandby";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Dashboard_Section = "dashboard";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Dashboard_EnableDashboard_Bool = "enableDashboard";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Dashboard_ArcadeMode_Bool = "arcadeMode";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Dashboard_EnableWebUI = "webUI";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_modelskin_Section = "modelskins";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_Driver_Enable_Bool = "enable";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_WebInterface_Section = "WebInterface";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string k_pch_WebInterface_WebPort_String = "WebPort";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRScreenshots_Version = "IVRScreenshots_001";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRResources_Version = "IVRResources_001";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const string IVRDriverManager_Version = "IVRDriverManager_001";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x672E0C", Offset = "0x672E0C")]
		private static uint <VRToken>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string FnTable_Prefix = "FnTable:";

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static COpenVRContext _OpenVRInternal_ModuleContext;

		private static uint VRToken
		{
			[Address(RVA = "0x801358", Offset = "0x801358", VA = "0x801358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681820", Offset = "0x681820")]
			get
			{
				return default(uint);
			}
			[Address(RVA = "0x8013C0", Offset = "0x8013C0", VA = "0x8013C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681830", Offset = "0x681830")]
			set
			{
			}
		}

		private static COpenVRContext OpenVRInternal_ModuleContext
		{
			[Address(RVA = "0x80142C", Offset = "0x80142C", VA = "0x80142C")]
			get
			{
				return null;
			}
		}

		public static CVRSystem System
		{
			[Address(RVA = "0x801538", Offset = "0x801538", VA = "0x801538")]
			get
			{
				return null;
			}
		}

		public static CVRChaperone Chaperone
		{
			[Address(RVA = "0x801668", Offset = "0x801668", VA = "0x801668")]
			get
			{
				return null;
			}
		}

		public static CVRChaperoneSetup ChaperoneSetup
		{
			[Address(RVA = "0x801798", Offset = "0x801798", VA = "0x801798")]
			get
			{
				return null;
			}
		}

		public static CVRCompositor Compositor
		{
			[Address(RVA = "0x8018C8", Offset = "0x8018C8", VA = "0x8018C8")]
			get
			{
				return null;
			}
		}

		public static CVROverlay Overlay
		{
			[Address(RVA = "0x8019F8", Offset = "0x8019F8", VA = "0x8019F8")]
			get
			{
				return null;
			}
		}

		public static CVRRenderModels RenderModels
		{
			[Address(RVA = "0x801B28", Offset = "0x801B28", VA = "0x801B28")]
			get
			{
				return null;
			}
		}

		public static CVRExtendedDisplay ExtendedDisplay
		{
			[Address(RVA = "0x801C58", Offset = "0x801C58", VA = "0x801C58")]
			get
			{
				return null;
			}
		}

		public static CVRSettings Settings
		{
			[Address(RVA = "0x801D88", Offset = "0x801D88", VA = "0x801D88")]
			get
			{
				return null;
			}
		}

		public static CVRApplications Applications
		{
			[Address(RVA = "0x801EB8", Offset = "0x801EB8", VA = "0x801EB8")]
			get
			{
				return null;
			}
		}

		public static CVRScreenshots Screenshots
		{
			[Address(RVA = "0x801FE8", Offset = "0x801FE8", VA = "0x801FE8")]
			get
			{
				return null;
			}
		}

		public static CVRTrackedCamera TrackedCamera
		{
			[Address(RVA = "0x802118", Offset = "0x802118", VA = "0x802118")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0x800DA0", Offset = "0x800DA0", VA = "0x800DA0")]
		public static uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType)
		{
			return default(uint);
		}

		[Address(RVA = "0x800E54", Offset = "0x800E54", VA = "0x800E54")]
		public static void ShutdownInternal()
		{
		}

		[Address(RVA = "0x800EE8", Offset = "0x800EE8", VA = "0x800EE8")]
		public static bool IsHmdPresent()
		{
			return default(bool);
		}

		[Address(RVA = "0x800F84", Offset = "0x800F84", VA = "0x800F84")]
		public static bool IsRuntimeInstalled()
		{
			return default(bool);
		}

		[Address(RVA = "0x801020", Offset = "0x801020", VA = "0x801020")]
		public static string GetStringForHmdError(EVRInitError error)
		{
			return null;
		}

		[Address(RVA = "0x801138", Offset = "0x801138", VA = "0x801138")]
		public static IntPtr GetGenericInterface(string pchInterfaceVersion, ref EVRInitError peError)
		{
			return default(IntPtr);
		}

		[Address(RVA = "0x801204", Offset = "0x801204", VA = "0x801204")]
		public static bool IsInterfaceVersionValid(string pchInterfaceVersion)
		{
			return default(bool);
		}

		[Address(RVA = "0x8012C4", Offset = "0x8012C4", VA = "0x8012C4")]
		public static uint GetInitToken()
		{
			return default(uint);
		}

		[Address(RVA = "0x802248", Offset = "0x802248", VA = "0x802248")]
		public static CVRSystem Init(ref EVRInitError peError, EVRApplicationType eApplicationType = EVRApplicationType.VRApplication_Scene)
		{
			return null;
		}

		[Address(RVA = "0x80238C", Offset = "0x80238C", VA = "0x80238C")]
		public static void Shutdown()
		{
		}

		[Address(RVA = "0x8023E8", Offset = "0x8023E8", VA = "0x8023E8")]
		public OpenVR()
		{
		}
	}
}
namespace Valve.VR.InteractionSystem
{
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659688", Offset = "0x659688")]
	public class DestroyOnParticleSystemDeath : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particles;

		[Address(RVA = "0xACE7C8", Offset = "0xACE7C8", VA = "0xACE7C8")]
		private void Awake()
		{
		}

		[Address(RVA = "0xACE840", Offset = "0xACE840", VA = "0xACE840")]
		private void CheckParticleSystem()
		{
		}

		[Address(RVA = "0xACE8E8", Offset = "0xACE8E8", VA = "0xACE8E8")]
		public DestroyOnParticleSystemDeath()
		{
		}
	}
	public class LinearAnimation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animation animation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationState animState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float animLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float lastValue;

		[Address(RVA = "0xAD63A0", Offset = "0xAD63A0", VA = "0xAD63A0")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD6554", Offset = "0xAD6554", VA = "0xAD6554")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD65C0", Offset = "0xAD65C0", VA = "0xAD65C0")]
		public LinearAnimation()
		{
		}
	}
	public class LinearAnimator : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentLinearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int framesUnchanged;

		[Address(RVA = "0xAD65C8", Offset = "0xAD65C8", VA = "0xAD65C8")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD66D4", Offset = "0xAD66D4", VA = "0xAD66D4")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD67C4", Offset = "0xAD67C4", VA = "0xAD67C4")]
		public LinearAnimator()
		{
		}
	}
	public class LinearAudioPitch : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchCurve;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool applyContinuously;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource audioSource;

		[Address(RVA = "0xAD67D4", Offset = "0xAD67D4", VA = "0xAD67D4")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD68B4", Offset = "0xAD68B4", VA = "0xAD68B4")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD68C4", Offset = "0xAD68C4", VA = "0xAD68C4")]
		private void Apply()
		{
		}

		[Address(RVA = "0xAD69A8", Offset = "0xAD69A8", VA = "0xAD69A8")]
		public LinearAudioPitch()
		{
		}
	}
	public class LinearDisplacement : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 displacement;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialPosition;

		[Address(RVA = "0xAD6B30", Offset = "0xAD6B30", VA = "0xAD6B30")]
		private void Start()
		{
		}

		[Address(RVA = "0xAD6BEC", Offset = "0xAD6BEC", VA = "0xAD6BEC")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD6D60", Offset = "0xAD6D60", VA = "0xAD6D60")]
		public LinearDisplacement()
		{
		}
	}
	public class LinearMapping : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Address(RVA = "0xAD77EC", Offset = "0xAD77EC", VA = "0xAD77EC")]
		public LinearMapping()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x6596EC", Offset = "0x6596EC")]
	public class BodyCollider : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform head;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CapsuleCollider capsuleCollider;

		[Address(RVA = "0x111C268", Offset = "0x111C268", VA = "0x111C268")]
		private void Awake()
		{
		}

		[Address(RVA = "0x111C2C0", Offset = "0x111C2C0", VA = "0x111C2C0")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0x111C4A8", Offset = "0x111C4A8", VA = "0x111C4A8")]
		public BodyCollider()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659750", Offset = "0x659750")]
	public class CircularDrive : MonoBehaviour
	{
		public enum Axis_t
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			XAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			YAxis,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ZAxis
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CD80", Offset = "0x65CD80")]
		private sealed class <HapticPulses>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_Controller.Device controller;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float flMagnitude;

			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int nCount;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <nRangeMax>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private ushort <i>5__3;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xAC61A8", Offset = "0xAC61A8", VA = "0xAC61A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xAC6218", Offset = "0xAC6218", VA = "0xAC6218", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xAC44A8", Offset = "0xAC44A8", VA = "0xAC44A8")]
			[DebuggerHidden]
			public <HapticPulses>d__43(int <>1__state)
			{
			}

			[Address(RVA = "0xAC6034", Offset = "0xAC6034", VA = "0xAC6034", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xAC6038", Offset = "0xAC6038", VA = "0xAC6038", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xAC61B0", Offset = "0xAC61B0", VA = "0xAC61B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672E1C", Offset = "0x672E1C")]
		public Axis_t axisOfRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672E54", Offset = "0x672E54")]
		public Collider childCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672E8C", Offset = "0x672E8C")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672EC4", Offset = "0x672EC4")]
		public bool hoverLock;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x672EFC", Offset = "0x672EFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672EFC", Offset = "0x672EFC")]
		public bool limited;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 frozenDistanceMinMaxThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onFrozenDistanceThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x672F5C", Offset = "0x672F5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672F5C", Offset = "0x672F5C")]
		public float minAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672FBC", Offset = "0x672FBC")]
		public bool freezeOnMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x672FF4", Offset = "0x672FF4")]
		public UnityEvent onMinAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x67302C", Offset = "0x67302C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67302C", Offset = "0x67302C")]
		public float maxAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67308C", Offset = "0x67308C")]
		public bool freezeOnMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6730C4", Offset = "0x6730C4")]
		public UnityEvent onMaxAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6730FC", Offset = "0x6730FC")]
		public bool forceStart;

		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673134", Offset = "0x673134")]
		public float startAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67316C", Offset = "0x67316C")]
		public bool rotateGameObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6731A4", Offset = "0x6731A4")]
		public bool debugPath;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6731DC", Offset = "0x6731DC")]
		public int dbgPathLimit;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673214", Offset = "0x673214")]
		public TextMesh debugText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67324C", Offset = "0x67324C")]
		public float outAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion start;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 worldPlaneNormal;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 localPlaneNormal;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lastHandProjected;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Color red;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Color green;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GameObject[] dbgHandObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GameObject[] dbgProjObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GameObject dbgObjectsParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int dbgObjectCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int dbgObjectIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool driving;

		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float minMaxAngularThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool frozen;

		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float frozenAngle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 frozenHandWorldPos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector2 frozenSqDistanceMinMaxThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Hand handHoverLocked;

		[Address(RVA = "0xAC3C60", Offset = "0xAC3C60", VA = "0xAC3C60")]
		private void Freeze(Hand hand)
		{
		}

		[Address(RVA = "0xAC3CD8", Offset = "0xAC3CD8", VA = "0xAC3CD8")]
		private void UnFreeze()
		{
		}

		[Address(RVA = "0xAC3CF8", Offset = "0xAC3CF8", VA = "0xAC3CF8")]
		private void Start()
		{
		}

		[Address(RVA = "0xAC418C", Offset = "0xAC418C", VA = "0xAC418C")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xAC43F0", Offset = "0xAC43F0", VA = "0xAC43F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681840", Offset = "0x681840")]
		private IEnumerator HapticPulses(SteamVR_Controller.Device controller, float flMagnitude, int nCount)
		{
			return null;
		}

		[Address(RVA = "0xAC44D4", Offset = "0xAC44D4", VA = "0xAC44D4")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Address(RVA = "0xAC4610", Offset = "0xAC4610", VA = "0xAC4610")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Address(RVA = "0xAC479C", Offset = "0xAC479C", VA = "0xAC479C")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Address(RVA = "0xAC4A58", Offset = "0xAC4A58", VA = "0xAC4A58")]
		private Vector3 ComputeToTransformProjected(Transform xForm)
		{
			return default(Vector3);
		}

		[Address(RVA = "0xAC5244", Offset = "0xAC5244", VA = "0xAC5244")]
		private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
		{
		}

		[Address(RVA = "0xAC5B6C", Offset = "0xAC5B6C", VA = "0xAC5B6C")]
		private void UpdateLinearMapping()
		{
		}

		[Address(RVA = "0xAC5D4C", Offset = "0xAC5D4C", VA = "0xAC5D4C")]
		private void UpdateGameObject()
		{
		}

		[Address(RVA = "0xAC5C40", Offset = "0xAC5C40", VA = "0xAC5C40")]
		private void UpdateDebugText()
		{
		}

		[Address(RVA = "0xAC4160", Offset = "0xAC4160", VA = "0xAC4160")]
		private void UpdateAll()
		{
		}

		[Address(RVA = "0xAC4D9C", Offset = "0xAC4D9C", VA = "0xAC4D9C")]
		private void ComputeAngle(Hand hand)
		{
		}

		[Address(RVA = "0xAC5E8C", Offset = "0xAC5E8C", VA = "0xAC5E8C")]
		public CircularDrive()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x6597B4", Offset = "0x6597B4")]
	public class ComplexThrowable : MonoBehaviour
	{
		public enum AttachMode
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			FixedJoint,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Force
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float attachForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float attachForceDamper;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttachMode attachMode;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "EnumFlags", RVA = "0x673284", Offset = "0x673284")]
		public Hand.AttachmentFlags attachmentFlags;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Hand> holdingHands;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Rigidbody> holdingBodies;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Vector3> holdingPoints;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Rigidbody> rigidBodies;

		[Address(RVA = "0xAC6220", Offset = "0xAC6220", VA = "0xAC6220")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAC6274", Offset = "0xAC6274", VA = "0xAC6274")]
		private void Update()
		{
		}

		[Address(RVA = "0xAC6550", Offset = "0xAC6550", VA = "0xAC6550")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Address(RVA = "0xAC65FC", Offset = "0xAC65FC", VA = "0xAC65FC")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Address(RVA = "0xAC66A8", Offset = "0xAC66A8", VA = "0xAC66A8")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Address(RVA = "0xAC66F4", Offset = "0xAC66F4", VA = "0xAC66F4")]
		private void PhysicsAttach(Hand hand)
		{
		}

		[Address(RVA = "0xAC6368", Offset = "0xAC6368", VA = "0xAC6368")]
		private bool PhysicsDetach(Hand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xAC74E0", Offset = "0xAC74E0", VA = "0xAC74E0")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0xAC7840", Offset = "0xAC7840", VA = "0xAC7840")]
		public ComplexThrowable()
		{
		}
	}
	public class ControllerHoverHighlight : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material highLightMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fireHapticsOnHightlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshRenderer bodyMeshRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer trackingHatMeshRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_RenderModel renderModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool renderModelLoaded;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Address(RVA = "0xACD63C", Offset = "0xACD63C", VA = "0xACD63C")]
		private void Start()
		{
		}

		[Address(RVA = "0xACD694", Offset = "0xACD694", VA = "0xACD694")]
		private void Awake()
		{
		}

		[Address(RVA = "0xACD738", Offset = "0xACD738", VA = "0xACD738")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xACD76C", Offset = "0xACD76C", VA = "0xACD76C")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xACD7A0", Offset = "0xACD7A0", VA = "0xACD7A0")]
		private void OnHandInitialized(int deviceIndex)
		{
		}

		[Address(RVA = "0xACD84C", Offset = "0xACD84C", VA = "0xACD84C")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool success)
		{
		}

		[Address(RVA = "0xACDF20", Offset = "0xACDF20", VA = "0xACDF20")]
		private void OnParentHandHoverBegin(Interactable other)
		{
		}

		[Address(RVA = "0xACE164", Offset = "0xACE164", VA = "0xACE164")]
		private void OnParentHandHoverEnd(Interactable other)
		{
		}

		[Address(RVA = "0xACE2A8", Offset = "0xACE2A8", VA = "0xACE2A8")]
		private void OnParentHandInputFocusAcquired()
		{
		}

		[Address(RVA = "0xACE3F8", Offset = "0xACE3F8", VA = "0xACE3F8")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Address(RVA = "0xACE024", Offset = "0xACE024", VA = "0xACE024")]
		public void ShowHighlight()
		{
		}

		[Address(RVA = "0xACE168", Offset = "0xACE168", VA = "0xACE168")]
		public void HideHighlight()
		{
		}

		[Address(RVA = "0xACE3FC", Offset = "0xACE3FC", VA = "0xACE3FC")]
		public ControllerHoverHighlight()
		{
		}
	}
	public static class CustomEvents
	{
		[Serializable]
		public class UnityEventSingleFloat : UnityEvent<float>
		{
			[Address(RVA = "0xACE45C", Offset = "0xACE45C", VA = "0xACE45C")]
			public UnityEventSingleFloat()
			{
			}
		}

		[Serializable]
		public class UnityEventHand : UnityEvent<Hand>
		{
			[Address(RVA = "0xACE40C", Offset = "0xACE40C", VA = "0xACE40C")]
			public UnityEventHand()
			{
			}
		}
	}
	public class DebugUI : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Player player;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DebugUI _instance;

		public static DebugUI instance
		{
			[Address(RVA = "0xACE4AC", Offset = "0xACE4AC", VA = "0xACE4AC")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xACE578", Offset = "0xACE578", VA = "0xACE578")]
		private void Start()
		{
		}

		[Address(RVA = "0xACE59C", Offset = "0xACE59C", VA = "0xACE59C")]
		private void OnGUI()
		{
		}

		[Address(RVA = "0xACE73C", Offset = "0xACE73C", VA = "0xACE73C")]
		public DebugUI()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659818", Offset = "0x659818")]
	public class DestroyOnDetachedFromHand : MonoBehaviour
	{
		[Address(RVA = "0xACE744", Offset = "0xACE744", VA = "0xACE744")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0xACE7C0", Offset = "0xACE7C0", VA = "0xACE7C0")]
		public DestroyOnDetachedFromHand()
		{
		}
	}
	public class DestroyOnTriggerEnter : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string tagFilter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useTag;

		[Address(RVA = "0xACE8F0", Offset = "0xACE8F0", VA = "0xACE8F0")]
		private void Start()
		{
		}

		[Address(RVA = "0xACE924", Offset = "0xACE924", VA = "0xACE924")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Address(RVA = "0xACEA58", Offset = "0xACEA58", VA = "0xACEA58")]
		public DestroyOnTriggerEnter()
		{
		}
	}
	public class DistanceHaptics : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CD90", Offset = "0x65CD90")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DistanceHaptics <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xACED8C", Offset = "0xACED8C", VA = "0xACED8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xACEDFC", Offset = "0xACEDFC", VA = "0xACEDFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xACEAD4", Offset = "0xACEAD4", VA = "0xACEAD4")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Address(RVA = "0xACEB70", Offset = "0xACEB70", VA = "0xACEB70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xACEB74", Offset = "0xACEB74", VA = "0xACEB74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xACED94", Offset = "0xACED94", VA = "0xACED94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform firstTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform secondTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve distanceIntensityCurve;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve pulseIntervalCurve;

		[Address(RVA = "0xACEA60", Offset = "0xACEA60", VA = "0xACEA60")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6818A4", Offset = "0x6818A4")]
		private IEnumerator Start()
		{
			return null;
		}

		[Address(RVA = "0xACEB00", Offset = "0xACEB00", VA = "0xACEB00")]
		public DistanceHaptics()
		{
		}
	}
	public class DontDestroyOnLoad : MonoBehaviour
	{
		[Address(RVA = "0xACEE04", Offset = "0xACEE04", VA = "0xACEE04")]
		private void Awake()
		{
		}

		[Address(RVA = "0xACEE6C", Offset = "0xACEE6C", VA = "0xACEE6C")]
		public DontDestroyOnLoad()
		{
		}
	}
	public class EnumFlags : PropertyAttribute
	{
		[Address(RVA = "0xACEE74", Offset = "0xACEE74", VA = "0xACEE74")]
		public EnumFlags()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x65987C", Offset = "0x65987C")]
	public class FallbackCameraController : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float shiftSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showInstructions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 startEulerAngles;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 startMousePosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float realTime;

		[Address(RVA = "0xACEF6C", Offset = "0xACEF6C", VA = "0xACEF6C")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xACEF94", Offset = "0xACEF94", VA = "0xACEF94")]
		private void Update()
		{
		}

		[Address(RVA = "0xACF35C", Offset = "0xACF35C", VA = "0xACF35C")]
		private void OnGUI()
		{
		}

		[Address(RVA = "0xACF410", Offset = "0xACF410", VA = "0xACF410")]
		public FallbackCameraController()
		{
		}
	}
	public class Hand : MonoBehaviour
	{
		public enum HandType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Left,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Any
		}

		[Flags]
		public enum AttachmentFlags
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SnapOnAttach = 1,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			DetachOthers = 2,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			DetachFromOtherHand = 4,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			ParentToHand = 8
		}

		public struct AttachedObject
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject attachedObject;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GameObject originalParent;

			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isParentedToHand;
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CDB0", Offset = "0x65CDB0")]
		private sealed class <>c__DisplayClass42_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject objectToDetach;

			[Address(RVA = "0xAD08C8", Offset = "0xAD08C8", VA = "0xAD08C8")]
			public <>c__DisplayClass42_0()
			{
			}

			[Address(RVA = "0xAD2568", Offset = "0xAD2568", VA = "0xAD2568")]
			internal bool <DetachObject>b__0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CDC0", Offset = "0x65CDC0")]
		private sealed class <>c
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<AttachedObject> <>9__45_0;

			[Address(RVA = "0xAD24F0", Offset = "0xAD24F0", VA = "0xAD24F0")]
			public <>c()
			{
			}

			[Address(RVA = "0xAD24F8", Offset = "0xAD24F8", VA = "0xAD24F8")]
			internal bool <CleanUpAttachedObjectStack>b__45_0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CDD0", Offset = "0x65CDD0")]
		private sealed class <Start>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xAD2A3C", Offset = "0xAD2A3C", VA = "0xAD2A3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xAD2AAC", Offset = "0xAD2AAC", VA = "0xAD2AAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xAD0CC8", Offset = "0xAD0CC8", VA = "0xAD0CC8")]
			[DebuggerHidden]
			public <Start>d__47(int <>1__state)
			{
			}

			[Address(RVA = "0xAD2688", Offset = "0xAD2688", VA = "0xAD2688", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xAD268C", Offset = "0xAD268C", VA = "0xAD268C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xAD2A44", Offset = "0xAD2A44", VA = "0xAD2A44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CDE0", Offset = "0x65CDE0")]
		private sealed class <>c__DisplayClass48_0
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Interactable contacting;

			[Address(RVA = "0xAD0CF4", Offset = "0xAD0CF4", VA = "0xAD0CF4")]
			public <>c__DisplayClass48_0()
			{
			}

			[Address(RVA = "0xAD25E8", Offset = "0xAD25E8", VA = "0xAD25E8")]
			internal bool <UpdateHovering>b__0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const AttachmentFlags defaultAttachmentFlags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand otherHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandType startingHandType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform hoverSphereTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float hoverSphereRadius;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask hoverLayerMask;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float hoverUpdateInterval;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Camera noSteamVRFallbackCamera;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float noSteamVRFallbackMaxDistanceNoItem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float noSteamVRFallbackMaxDistanceWithItem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float noSteamVRFallbackInteractorDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SteamVR_Controller.Device controller;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject controllerPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject controllerObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool showDebugText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool spewDebugText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<AttachedObject> attachedObjects;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673294", Offset = "0x673294")]
		private bool <hoverLocked>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Interactable _hoveringInteractable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TextMesh debugText;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int prevOverlappingColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const int ColliderArraySize = 16;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Collider[] overlappingColliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Player playerInstance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject applicationLostFocusObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private SteamVR_Events.Action inputFocusAction;

		public ReadOnlyCollection<AttachedObject> AttachedObjects
		{
			[Address(RVA = "0xACF98C", Offset = "0xACF98C", VA = "0xACF98C")]
			get
			{
				return null;
			}
		}

		public bool hoverLocked
		{
			[Address(RVA = "0xACF9EC", Offset = "0xACF9EC", VA = "0xACF9EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681908", Offset = "0x681908")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xACF9F4", Offset = "0xACF9F4", VA = "0xACF9F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681918", Offset = "0x681918")]
			private set
			{
			}
		}

		public Interactable hoveringInteractable
		{
			[Address(RVA = "0xAC523C", Offset = "0xAC523C", VA = "0xAC523C")]
			get
			{
				return null;
			}
			[Address(RVA = "0xACFA00", Offset = "0xACFA00", VA = "0xACFA00")]
			set
			{
			}
		}

		public GameObject currentAttachedObject
		{
			[Address(RVA = "0xACFD44", Offset = "0xACFD44", VA = "0xACFD44")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xACFF30", Offset = "0xACFF30", VA = "0xACFF30")]
		public Transform GetAttachmentTransform(string attachmentPoint = "")
		{
			return null;
		}

		[Address(RVA = "0xAD0008", Offset = "0xAD0008", VA = "0xAD0008")]
		public HandType GuessCurrentHandType()
		{
			return default(HandType);
		}

		[Address(RVA = "0xAC6C50", Offset = "0xAC6C50", VA = "0xAC6C50")]
		public void AttachObject(GameObject objectToAttach, AttachmentFlags flags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand, string attachmentPoint = "")
		{
		}

		[Address(RVA = "0xAC70EC", Offset = "0xAC70EC", VA = "0xAC70EC")]
		public void DetachObject(GameObject objectToDetach, bool restoreOriginalParent = true)
		{
		}

		[Address(RVA = "0xAD08D0", Offset = "0xAD08D0", VA = "0xAD08D0")]
		public Vector3 GetTrackedObjectVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xAD09D0", Offset = "0xAD09D0", VA = "0xAD09D0")]
		public Vector3 GetTrackedObjectAngularVelocity()
		{
			return default(Vector3);
		}

		[Address(RVA = "0xACFE2C", Offset = "0xACFE2C", VA = "0xACFE2C")]
		private void CleanUpAttachedObjectStack()
		{
		}

		[Address(RVA = "0xAD0AD0", Offset = "0xAD0AD0", VA = "0xAD0AD0")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD0C54", Offset = "0xAD0C54", VA = "0xAD0C54")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681928", Offset = "0x681928")]
		private IEnumerator Start()
		{
			return null;
		}

		[Address(RVA = "0xAD0150", Offset = "0xAD0150", VA = "0xAD0150")]
		private void UpdateHovering()
		{
		}

		[Address(RVA = "0xAD0CFC", Offset = "0xAD0CFC", VA = "0xAD0CFC")]
		private void UpdateNoSteamVRFallback()
		{
		}

		[Address(RVA = "0xAD1130", Offset = "0xAD1130", VA = "0xAD1130")]
		private void UpdateDebugText()
		{
		}

		[Address(RVA = "0xAD186C", Offset = "0xAD186C", VA = "0xAD186C")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xAD198C", Offset = "0xAD198C", VA = "0xAD198C")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xAD19D0", Offset = "0xAD19D0", VA = "0xAD19D0")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD1AF4", Offset = "0xAD1AF4", VA = "0xAD1AF4")]
		private void LateUpdate()
		{
		}

		[Address(RVA = "0xAD1BB8", Offset = "0xAD1BB8", VA = "0xAD1BB8")]
		private void OnInputFocus(bool hasFocus)
		{
		}

		[Address(RVA = "0xAD1E78", Offset = "0xAD1E78", VA = "0xAD1E78")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0xAD1E7C", Offset = "0xAD1E7C", VA = "0xAD1E7C")]
		private void OnDrawGizmos()
		{
		}

		[Address(RVA = "0xACFC78", Offset = "0xACFC78", VA = "0xACFC78")]
		private void HandDebugLog(string msg)
		{
		}

		[Address(RVA = "0xAD1CA8", Offset = "0xAD1CA8", VA = "0xAD1CA8")]
		private void UpdateHandPoses()
		{
		}

		[Address(RVA = "0xAC4D1C", Offset = "0xAC4D1C", VA = "0xAC4D1C")]
		public void HoverLock(Interactable interactable)
		{
		}

		[Address(RVA = "0xAC4344", Offset = "0xAC4344", VA = "0xAC4344")]
		public void HoverUnlock(Interactable interactable)
		{
		}

		[Address(RVA = "0xAC49B8", Offset = "0xAC49B8", VA = "0xAC49B8")]
		public bool GetStandardInteractionButtonDown()
		{
			return default(bool);
		}

		[Address(RVA = "0xAC519C", Offset = "0xAC519C", VA = "0xAC519C")]
		public bool GetStandardInteractionButtonUp()
		{
			return default(bool);
		}

		[Address(RVA = "0xAC46FC", Offset = "0xAC46FC", VA = "0xAC46FC")]
		public bool GetStandardInteractionButton()
		{
			return default(bool);
		}

		[Address(RVA = "0xAD1F6C", Offset = "0xAD1F6C", VA = "0xAD1F6C")]
		private void InitController(int index)
		{
		}

		[Address(RVA = "0xAD23E4", Offset = "0xAD23E4", VA = "0xAD23E4")]
		public Hand()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x6598E0", Offset = "0x6598E0")]
	public class HapticRack : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6732A4", Offset = "0x6732A4")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6732DC", Offset = "0x6732DC")]
		public int teethCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673314", Offset = "0x673314")]
		public int minimumPulseDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67334C", Offset = "0x67334C")]
		public int maximumPulseDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673384", Offset = "0x673384")]
		public UnityEvent onPulse;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int previousToothIndex;

		[Address(RVA = "0xAD2B00", Offset = "0xAD2B00", VA = "0xAD2B00")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD2B90", Offset = "0xAD2B90", VA = "0xAD2B90")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Address(RVA = "0xAD2B98", Offset = "0xAD2B98", VA = "0xAD2B98")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Address(RVA = "0xAD2BA0", Offset = "0xAD2BA0", VA = "0xAD2BA0")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD2C54", Offset = "0xAD2C54", VA = "0xAD2C54")]
		private void Pulse()
		{
		}

		[Address(RVA = "0xAD2D74", Offset = "0xAD2D74", VA = "0xAD2D74")]
		public HapticRack()
		{
		}
	}
	public class HideOnHandFocusLost : MonoBehaviour
	{
		[Address(RVA = "0xAD2D98", Offset = "0xAD2D98", VA = "0xAD2D98")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Address(RVA = "0xAD2DD0", Offset = "0xAD2DD0", VA = "0xAD2DD0")]
		public HideOnHandFocusLost()
		{
		}
	}
	public class IgnoreHovering : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6733BC", Offset = "0x6733BC")]
		public Hand onlyIgnoreHand;

		[Address(RVA = "0xAD2DD8", Offset = "0xAD2DD8", VA = "0xAD2DD8")]
		public IgnoreHovering()
		{
		}
	}
	public class InputModule : BaseInputModule
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject submitObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputModule _instance;

		public static InputModule instance
		{
			[Address(RVA = "0xAD2DE8", Offset = "0xAD2DE8", VA = "0xAD2DE8")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xAD2EB4", Offset = "0xAD2EB4", VA = "0xAD2EB4", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Address(RVA = "0xAD2F44", Offset = "0xAD2F44", VA = "0xAD2F44")]
		public void HoverBegin(GameObject gameObject)
		{
		}

		[Address(RVA = "0xAD3004", Offset = "0xAD3004", VA = "0xAD3004")]
		public void HoverEnd(GameObject gameObject)
		{
		}

		[Address(RVA = "0xAD30E0", Offset = "0xAD30E0", VA = "0xAD30E0")]
		public void Submit(GameObject gameObject)
		{
		}

		[Address(RVA = "0xAD30E8", Offset = "0xAD30E8", VA = "0xAD30E8", Slot = "17")]
		public override void Process()
		{
		}

		[Address(RVA = "0xAD31E4", Offset = "0xAD31E4", VA = "0xAD31E4")]
		public InputModule()
		{
		}
	}
	public class Interactable : MonoBehaviour
	{
		public delegate void OnAttachedToHandDelegate(Hand hand);

		public delegate void OnDetachedFromHandDelegate(Hand hand);

		[AttributeAttribute(Name = "HideInInspector", RVA = "0x688C80", Offset = "0x688C80")]
		public event OnAttachedToHandDelegate onAttachedToHand
		{
			[Address(RVA = "0xAD31EC", Offset = "0xAD31EC", VA = "0xAD31EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68198C", Offset = "0x68198C")]
			add
			{
			}
			[Address(RVA = "0xAD32D8", Offset = "0xAD32D8", VA = "0xAD32D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x68199C", Offset = "0x68199C")]
			remove
			{
			}
		}

		[AttributeAttribute(Name = "HideInInspector", RVA = "0x688C90", Offset = "0x688C90")]
		public event OnDetachedFromHandDelegate onDetachedFromHand
		{
			[Address(RVA = "0xAD33C4", Offset = "0xAD33C4", VA = "0xAD33C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6819AC", Offset = "0x6819AC")]
			add
			{
			}
			[Address(RVA = "0xAD34B0", Offset = "0xAD34B0", VA = "0xAD34B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x6819BC", Offset = "0x6819BC")]
			remove
			{
			}
		}

		[Address(RVA = "0xAD359C", Offset = "0xAD359C", VA = "0xAD359C")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Address(RVA = "0xAD3CE0", Offset = "0xAD3CE0", VA = "0xAD3CE0")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0xAD4424", Offset = "0xAD4424", VA = "0xAD4424")]
		public Interactable()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659944", Offset = "0x659944")]
	public class InteractableButtonEvents : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onTriggerDown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onTriggerUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onGripDown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onGripUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onTouchpadDown;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onTouchpadUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onTouchpadTouch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onTouchpadRelease;

		[Address(RVA = "0xAD44AC", Offset = "0xAD44AC", VA = "0xAD44AC")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD48EC", Offset = "0xAD48EC", VA = "0xAD48EC")]
		public InteractableButtonEvents()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x6599A8", Offset = "0x6599A8")]
	public class InteractableHoverEvents : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onHandHoverBegin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onHandHoverEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onAttachedToHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onDetachedFromHand;

		[Address(RVA = "0xAD4F74", Offset = "0xAD4F74", VA = "0xAD4F74")]
		private void OnHandHoverBegin()
		{
		}

		[Address(RVA = "0xAD4FA4", Offset = "0xAD4FA4", VA = "0xAD4FA4")]
		private void OnHandHoverEnd()
		{
		}

		[Address(RVA = "0xAD4FD4", Offset = "0xAD4FD4", VA = "0xAD4FD4")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Address(RVA = "0xAD5004", Offset = "0xAD5004", VA = "0xAD5004")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0xAD5034", Offset = "0xAD5034", VA = "0xAD5034")]
		public InteractableHoverEvents()
		{
		}
	}
	public class ItemPackage : MonoBehaviour
	{
		public enum ItemPackageType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Unrestricted,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OneHanded,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			TwoHanded
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemPackageType packageType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject itemPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject otherHandItemPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject previewPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject fadedPreviewPrefab;

		[Address(RVA = "0xAD503C", Offset = "0xAD503C", VA = "0xAD503C")]
		public ItemPackage()
		{
		}
	}
	public class ItemPackageReference : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage itemPackage;

		[Address(RVA = "0xAD5044", Offset = "0xAD5044", VA = "0xAD5044")]
		public ItemPackageReference()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659A0C", Offset = "0x659A0C")]
	public class ItemPackageSpawner : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage _itemPackage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useItemPackagePreview;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool useFadedPreview;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject previewObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool requireTriggerPressToTake;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool requireTriggerPressToReturn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool showTriggerHint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "EnumFlags", RVA = "0x673414", Offset = "0x673414")]
		public Hand.AttachmentFlags attachmentFlags;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string attachmentPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool takeBackItem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool acceptDifferentItems;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject spawnedItem;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool itemIsSpawned;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent pickupEvent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent dropEvent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool justPickedUpItem;

		public ItemPackage itemPackage
		{
			[Address(RVA = "0xAD504C", Offset = "0xAD504C", VA = "0xAD504C")]
			get
			{
				return null;
			}
			[Address(RVA = "0xAD5054", Offset = "0xAD5054", VA = "0xAD5054")]
			set
			{
			}
		}

		[Address(RVA = "0xAD5058", Offset = "0xAD5058", VA = "0xAD5058")]
		private void CreatePreviewObject()
		{
		}

		[Address(RVA = "0xAD5698", Offset = "0xAD5698", VA = "0xAD5698")]
		private void Start()
		{
		}

		[Address(RVA = "0xAD569C", Offset = "0xAD569C", VA = "0xAD569C")]
		private void VerifyItemPackage()
		{
		}

		[Address(RVA = "0xAD5778", Offset = "0xAD5778", VA = "0xAD5778")]
		private void ItemPackageNotValid()
		{
		}

		[Address(RVA = "0xAD5330", Offset = "0xAD5330", VA = "0xAD5330")]
		private void ClearPreview()
		{
		}

		[Address(RVA = "0xAD5874", Offset = "0xAD5874", VA = "0xAD5874")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD5928", Offset = "0xAD5928", VA = "0xAD5928")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Address(RVA = "0xAD5B44", Offset = "0xAD5B44", VA = "0xAD5B44")]
		private void TakeBackItem(Hand hand)
		{
		}

		[Address(RVA = "0xAD5A24", Offset = "0xAD5A24", VA = "0xAD5A24")]
		private ItemPackage GetAttachedItemPackage(Hand hand)
		{
			return null;
		}

		[Address(RVA = "0xAD6120", Offset = "0xAD6120", VA = "0xAD6120")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Address(RVA = "0xAD617C", Offset = "0xAD617C", VA = "0xAD617C")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Address(RVA = "0xAD5F1C", Offset = "0xAD5F1C", VA = "0xAD5F1C")]
		private void RemoveMatchingItemsFromHandStack(ItemPackage package, Hand hand)
		{
		}

		[Address(RVA = "0xAD61C4", Offset = "0xAD61C4", VA = "0xAD61C4")]
		private void RemoveMatchingItemTypesFromHand(ItemPackage.ItemPackageType packageType, Hand hand)
		{
		}

		[Address(RVA = "0xAD5BC0", Offset = "0xAD5BC0", VA = "0xAD5BC0")]
		private void SpawnAndAttachObject(Hand hand)
		{
		}

		[Address(RVA = "0xAD6388", Offset = "0xAD6388", VA = "0xAD6388")]
		public ItemPackageSpawner()
		{
		}
	}
	public class LinearBlendshape : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer skinnedMesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastValue;

		[Address(RVA = "0xAD69B8", Offset = "0xAD69B8", VA = "0xAD69B8")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD6A98", Offset = "0xAD6A98", VA = "0xAD6A98")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD6B28", Offset = "0xAD6B28", VA = "0xAD6B28")]
		public LinearBlendshape()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659A70", Offset = "0x659A70")]
	public class LinearDrive : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform startPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform endPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool repositionGameObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool maintainMomemntum;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float momemtumDampenRate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float initialMappingOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int numMappingChangeSamples;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] mappingChangeSamples;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float prevMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float mappingChangeRate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int sampleCount;

		[Address(RVA = "0xAD6D68", Offset = "0xAD6D68", VA = "0xAD6D68")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD6DC0", Offset = "0xAD6DC0", VA = "0xAD6DC0")]
		private void Start()
		{
		}

		[Address(RVA = "0xAD718C", Offset = "0xAD718C", VA = "0xAD718C")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Address(RVA = "0xAD74A4", Offset = "0xAD74A4", VA = "0xAD74A4")]
		private void CalculateMappingChangeRate()
		{
		}

		[Address(RVA = "0xAD6F10", Offset = "0xAD6F10", VA = "0xAD6F10")]
		private void UpdateLinearMapping(Transform tr)
		{
		}

		[Address(RVA = "0xAD7308", Offset = "0xAD7308", VA = "0xAD7308")]
		private float CalculateLinearMapping(Transform tr)
		{
			return default(float);
		}

		[Address(RVA = "0xAD75B4", Offset = "0xAD75B4", VA = "0xAD75B4")]
		private void Update()
		{
		}

		[Address(RVA = "0xAD77CC", Offset = "0xAD77CC", VA = "0xAD77CC")]
		public LinearDrive()
		{
		}
	}
	public class Player : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673424", Offset = "0x673424")]
		public Transform trackingOriginTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67345C", Offset = "0x67345C")]
		public Transform[] hmdTransforms;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673494", Offset = "0x673494")]
		public Hand[] hands;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6734CC", Offset = "0x6734CC")]
		public Collider headCollider;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673504", Offset = "0x673504")]
		public GameObject rigSteamVR;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67353C", Offset = "0x67353C")]
		public GameObject rig2DFallback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673574", Offset = "0x673574")]
		public Transform audioListener;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool allowToggleTo2D;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Player _instance;

		public static Player instance
		{
			[Address(RVA = "0xAC7A20", Offset = "0xAC7A20", VA = "0xAC7A20")]
			get
			{
				return null;
			}
		}

		public int handCount
		{
			[Address(RVA = "0xAD4820", Offset = "0xAD4820", VA = "0xAD4820")]
			get
			{
				return default(int);
			}
		}

		public Hand leftHand
		{
			[Address(RVA = "0xAD9764", Offset = "0xAD9764", VA = "0xAD9764")]
			get
			{
				return null;
			}
		}

		public Hand rightHand
		{
			[Address(RVA = "0xAD98A4", Offset = "0xAD98A4", VA = "0xAD98A4")]
			get
			{
				return null;
			}
		}

		public SteamVR_Controller.Device leftController
		{
			[Address(RVA = "0xAD99E8", Offset = "0xAD99E8", VA = "0xAD99E8")]
			get
			{
				return null;
			}
		}

		public SteamVR_Controller.Device rightController
		{
			[Address(RVA = "0xAD9A80", Offset = "0xAD9A80", VA = "0xAD9A80")]
			get
			{
				return null;
			}
		}

		public Transform hmdTransform
		{
			[Address(RVA = "0xACBB20", Offset = "0xACBB20", VA = "0xACBB20")]
			get
			{
				return null;
			}
		}

		public float eyeHeight
		{
			[Address(RVA = "0xAD9B18", Offset = "0xAD9B18", VA = "0xAD9B18")]
			get
			{
				return default(float);
			}
		}

		public Vector3 feetPositionGuess
		{
			[Address(RVA = "0xAD9CD0", Offset = "0xAD9CD0", VA = "0xAD9CD0")]
			get
			{
				return default(Vector3);
			}
		}

		public Vector3 bodyDirectionGuess
		{
			[Address(RVA = "0xAD9EB8", Offset = "0xAD9EB8", VA = "0xAD9EB8")]
			get
			{
				return default(Vector3);
			}
		}

		[Address(RVA = "0xAD4718", Offset = "0xAD4718", VA = "0xAD4718")]
		public Hand GetHand(int i)
		{
			return null;
		}

		[Address(RVA = "0xADA0BC", Offset = "0xADA0BC", VA = "0xADA0BC")]
		private void Awake()
		{
		}

		[Address(RVA = "0xADA144", Offset = "0xADA144", VA = "0xADA144")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xADA424", Offset = "0xADA424", VA = "0xADA424")]
		private void OnDrawGizmos()
		{
		}

		[Address(RVA = "0xACE5C8", Offset = "0xACE5C8", VA = "0xACE5C8")]
		public void Draw2DDebug()
		{
		}

		[Address(RVA = "0xADA1D4", Offset = "0xADA1D4", VA = "0xADA1D4")]
		private void ActivateRig(GameObject rig)
		{
		}

		[Address(RVA = "0xADAA44", Offset = "0xADAA44", VA = "0xADAA44")]
		public void PlayerShotSelf()
		{
		}

		[Address(RVA = "0xADAA48", Offset = "0xADAA48", VA = "0xADAA48")]
		public Player()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659AD4", Offset = "0x659AD4")]
	public class PlaySound : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6735AC", Offset = "0x6735AC")]
		public AudioClip[] waveFile;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6735E4", Offset = "0x6735E4")]
		public bool stopOnPlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67361C", Offset = "0x67361C")]
		public bool disableOnEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673654", Offset = "0x673654")]
		public bool looping;

		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67368C", Offset = "0x67368C")]
		public bool stopOnEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6736C4", Offset = "0x6736C4")]
		public bool playOnAwakeWithDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6736FC", Offset = "0x6736FC")]
		public bool useRandomVolume;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673734", Offset = "0x673734")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673734", Offset = "0x673734")]
		public float volMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673788", Offset = "0x673788")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673788", Offset = "0x673788")]
		public float volMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6737DC", Offset = "0x6737DC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6737DC", Offset = "0x6737DC")]
		public bool useRandomPitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67383C", Offset = "0x67383C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x67383C", Offset = "0x67383C")]
		public float pitchMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673890", Offset = "0x673890")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673890", Offset = "0x673890")]
		public float pitchMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x6738E4", Offset = "0x6738E4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6738E4", Offset = "0x6738E4")]
		public bool useRetriggerTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673944", Offset = "0x673944")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673944", Offset = "0x673944")]
		public float timeInitial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x67399C", Offset = "0x67399C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x67399C", Offset = "0x67399C")]
		public float timeMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x6739F4", Offset = "0x6739F4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x6739F4", Offset = "0x6739F4")]
		public float timeMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x673A4C", Offset = "0x673A4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673A4C", Offset = "0x673A4C")]
		public bool useRandomSilence;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673AAC", Offset = "0x673AAC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x673AAC", Offset = "0x673AAC")]
		public float percentToNotPlay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x673B00", Offset = "0x673B00")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673B00", Offset = "0x673B00")]
		public float delayOffsetTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioClip clip;

		[Address(RVA = "0xAD9170", Offset = "0xAD9170", VA = "0xAD9170")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD92C8", Offset = "0xAD92C8", VA = "0xAD92C8")]
		public void Play()
		{
		}

		[Address(RVA = "0xAD92D8", Offset = "0xAD92D8", VA = "0xAD92D8")]
		public void PlayWithDelay(float delayTime)
		{
		}

		[Address(RVA = "0xAD944C", Offset = "0xAD944C", VA = "0xAD944C")]
		public AudioClip PlayOneShotSound()
		{
			return null;
		}

		[Address(RVA = "0xAD9350", Offset = "0xAD9350", VA = "0xAD9350")]
		public AudioClip PlayLooping()
		{
			return null;
		}

		[Address(RVA = "0xAD96DC", Offset = "0xAD96DC", VA = "0xAD96DC")]
		public void Disable()
		{
		}

		[Address(RVA = "0xAD9714", Offset = "0xAD9714", VA = "0xAD9714")]
		public void Stop()
		{
		}

		[Address(RVA = "0xAD9548", Offset = "0xAD9548", VA = "0xAD9548")]
		private void SetAudioSource()
		{
		}

		[Address(RVA = "0xAD9744", Offset = "0xAD9744", VA = "0xAD9744")]
		public PlaySound()
		{
		}
	}
	public class SeeThru : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material seeThruMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject seeThru;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Interactable interactable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Renderer sourceRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Renderer destRenderer;

		[Address(RVA = "0xADAA58", Offset = "0xADAA58", VA = "0xADAA58")]
		private void Awake()
		{
		}

		[Address(RVA = "0xADB2A0", Offset = "0xADB2A0", VA = "0xADB2A0")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xADB374", Offset = "0xADB374", VA = "0xADB374")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xADB448", Offset = "0xADB448", VA = "0xADB448")]
		private void AttachedToHand(Hand hand)
		{
		}

		[Address(RVA = "0xADB47C", Offset = "0xADB47C", VA = "0xADB47C")]
		private void DetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0xADB4B0", Offset = "0xADB4B0", VA = "0xADB4B0")]
		private void Update()
		{
		}

		[Address(RVA = "0xADB818", Offset = "0xADB818", VA = "0xADB818")]
		public SeeThru()
		{
		}
	}
	public class SleepOnAwake : MonoBehaviour
	{
		[Address(RVA = "0xADB820", Offset = "0xADB820", VA = "0xADB820")]
		private void Awake()
		{
		}

		[Address(RVA = "0xADB8CC", Offset = "0xADB8CC", VA = "0xADB8CC")]
		public SleepOnAwake()
		{
		}
	}
	public class SoundDeparent : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool destroyAfterPlayOnce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Address(RVA = "0xADB934", Offset = "0xADB934", VA = "0xADB934")]
		private void Awake()
		{
		}

		[Address(RVA = "0xADB98C", Offset = "0xADB98C", VA = "0xADB98C")]
		private void Start()
		{
		}

		[Address(RVA = "0xADBAA0", Offset = "0xADBAA0", VA = "0xADBAA0")]
		public SoundDeparent()
		{
		}
	}
	public class SoundPlayOneshot : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] waveFiles;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float volMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float pitchMin;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitchMax;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool playOnAwake;

		[Address(RVA = "0xADBAB0", Offset = "0xADBAB0", VA = "0xADBAB0")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD8704", Offset = "0xAD8704", VA = "0xAD8704")]
		public void Play()
		{
		}

		[Address(RVA = "0xADBB20", Offset = "0xADBB20", VA = "0xADBB20")]
		public void Pause()
		{
		}

		[Address(RVA = "0xADBBBC", Offset = "0xADBBBC", VA = "0xADBBBC")]
		public void UnPause()
		{
		}

		[Address(RVA = "0xADBC58", Offset = "0xADBC58", VA = "0xADBC58")]
		public SoundPlayOneshot()
		{
		}
	}
	public class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemPrefab;

		[Address(RVA = "0xADBC60", Offset = "0xADBC60", VA = "0xADBC60")]
		private void Start()
		{
		}

		[Address(RVA = "0xADBCB8", Offset = "0xADBCB8", VA = "0xADBCB8")]
		private void Update()
		{
		}

		[Address(RVA = "0xADBEE4", Offset = "0xADBEE4", VA = "0xADBEE4")]
		public SpawnAndAttachAfterControllerIsTracking()
		{
		}
	}
	public class SpawnAndAttachToHand : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject prefab;

		[Address(RVA = "0xADBEEC", Offset = "0xADBEEC", VA = "0xADBEEC")]
		public void SpawnAndAttach(Hand passedInhand)
		{
		}

		[Address(RVA = "0xADC004", Offset = "0xADC004", VA = "0xADC004")]
		public SpawnAndAttachToHand()
		{
		}
	}
	public class SpawnRenderModel : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material[] materials;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SteamVR_RenderModel[] renderModels;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<MeshRenderer> renderers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<SpawnRenderModel> spawnRenderModels;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int lastFrameUpdated;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int spawnRenderModelUpdateIndex;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Address(RVA = "0xADC00C", Offset = "0xADC00C", VA = "0xADC00C")]
		private void Awake()
		{
		}

		[Address(RVA = "0xADC0D8", Offset = "0xADC0D8", VA = "0xADC0D8")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xADC578", Offset = "0xADC578", VA = "0xADC578")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xADC778", Offset = "0xADC778", VA = "0xADC778")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Address(RVA = "0xADC780", Offset = "0xADC780", VA = "0xADC780")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0xADC788", Offset = "0xADC788", VA = "0xADC788")]
		private void Update()
		{
		}

		[Address(RVA = "0xADC18C", Offset = "0xADC18C", VA = "0xADC18C")]
		private void ShowController()
		{
		}

		[Address(RVA = "0xADC62C", Offset = "0xADC62C", VA = "0xADC62C")]
		private void HideController()
		{
		}

		[Address(RVA = "0xADCA0C", Offset = "0xADCA0C", VA = "0xADCA0C")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool success)
		{
		}

		[Address(RVA = "0xADCE30", Offset = "0xADCE30", VA = "0xADCE30")]
		public SpawnRenderModel()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659B38", Offset = "0x659B38")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659B38", Offset = "0x659B38")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659B38", Offset = "0x659B38")]
	public class Throwable : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CDF0", Offset = "0x65CDF0")]
		private sealed class <LateDetach>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Throwable <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x7FDC70", Offset = "0x7FDC70", VA = "0x7FDC70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x7FDCE0", Offset = "0x7FDCE0", VA = "0x7FDCE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x7FDA34", Offset = "0x7FDA34", VA = "0x7FDA34")]
			[DebuggerHidden]
			public <LateDetach>d__24(int <>1__state)
			{
			}

			[Address(RVA = "0x7FDB70", Offset = "0x7FDB70", VA = "0x7FDB70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x7FDB74", Offset = "0x7FDB74", VA = "0x7FDB74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x7FDC78", Offset = "0x7FDC78", VA = "0x7FDC78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "EnumFlags", RVA = "0x673B60", Offset = "0x673B60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673B60", Offset = "0x673B60")]
		public Hand.AttachmentFlags attachmentFlags;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673BAC", Offset = "0x673BAC")]
		public string attachmentPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673BE4", Offset = "0x673BE4")]
		public float catchSpeedThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673C1C", Offset = "0x673C1C")]
		public bool restoreOriginalParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool attachEaseIn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve snapAttachEaseInCurve;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float snapAttachEaseInTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] attachEaseInAttachmentNames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VelocityEstimator velocityEstimator;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool attached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float attachTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 attachPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion attachRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform attachEaseInTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onPickUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onDetachFromHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool snapAttachEaseInCompleted;

		[Address(RVA = "0x7FC528", Offset = "0x7FC528", VA = "0x7FC528")]
		private void Awake()
		{
		}

		[Address(RVA = "0x7FC5C4", Offset = "0x7FC5C4", VA = "0x7FC5C4")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Address(RVA = "0x7FC6CC", Offset = "0x7FC6CC", VA = "0x7FC6CC")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Address(RVA = "0x7FC758", Offset = "0x7FC758", VA = "0x7FC758")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Address(RVA = "0x7FC858", Offset = "0x7FC858", VA = "0x7FC858")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Address(RVA = "0x7FCB98", Offset = "0x7FCB98", VA = "0x7FCB98")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0x7FD5D4", Offset = "0x7FD5D4", VA = "0x7FD5D4")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Address(RVA = "0x7FD8C8", Offset = "0x7FD8C8", VA = "0x7FD8C8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x6819CC", Offset = "0x6819CC")]
		private IEnumerator LateDetach(Hand hand)
		{
			return null;
		}

		[Address(RVA = "0x7FDA60", Offset = "0x7FDA60", VA = "0x7FDA60")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Address(RVA = "0x7FDAB4", Offset = "0x7FDAB4", VA = "0x7FDAB4")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Address(RVA = "0x7FDB1C", Offset = "0x7FDB1C", VA = "0x7FDB1C")]
		public Throwable()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659BEC", Offset = "0x659BEC")]
	public class UIElement : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CustomEvents.UnityEventHand onHandClick;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand currentHand;

		[Address(RVA = "0x7FDCE8", Offset = "0x7FDCE8", VA = "0x7FDCE8")]
		private void Awake()
		{
		}

		[Address(RVA = "0x7FDDF0", Offset = "0x7FDDF0", VA = "0x7FDDF0")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Address(RVA = "0x7FDEC4", Offset = "0x7FDEC4", VA = "0x7FDEC4")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Address(RVA = "0x7FDF9C", Offset = "0x7FDF9C", VA = "0x7FDF9C")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Address(RVA = "0x7FE098", Offset = "0x7FE098", VA = "0x7FE098")]
		private void OnButtonClick()
		{
		}

		[Address(RVA = "0x7FE100", Offset = "0x7FE100", VA = "0x7FE100")]
		public UIElement()
		{
		}
	}
	public class Unparent : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform oldParent;

		[Address(RVA = "0x7FE108", Offset = "0x7FE108", VA = "0x7FE108")]
		private void Start()
		{
		}

		[Address(RVA = "0x7FE244", Offset = "0x7FE244", VA = "0x7FE244")]
		private void Update()
		{
		}

		[Address(RVA = "0x7FE308", Offset = "0x7FE308", VA = "0x7FE308")]
		public Transform GetOldParent()
		{
			return null;
		}

		[Address(RVA = "0x7FE310", Offset = "0x7FE310", VA = "0x7FE310")]
		public Unparent()
		{
		}
	}
	public static class Util
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE00", Offset = "0x65CE00")]
		private sealed class <WrapCoroutine>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IEnumerator coroutine;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action onCoroutineFinished;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x80044C", Offset = "0x80044C", VA = "0x80044C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x8004BC", Offset = "0x8004BC", VA = "0x8004BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x7FFA48", Offset = "0x7FFA48", VA = "0x7FFA48")]
			[DebuggerHidden]
			public <WrapCoroutine>d__43(int <>1__state)
			{
			}

			[Address(RVA = "0x8002CC", Offset = "0x8002CC", VA = "0x8002CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x8002D0", Offset = "0x8002D0", VA = "0x8002D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x800454", Offset = "0x800454", VA = "0x800454", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Serializable]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE10", Offset = "0x65CE10")]
		private sealed class <>c__47<T>
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__47<T> <>9;

			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, T> <>9__47_0;

			internal T <Median>b__47_0(T x)
			{
				return (T)null;
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float FeetToMeters = 0.3048f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float FeetToCentimeters = 30.48f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float InchesToMeters = 0.0254f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float InchesToCentimeters = 2.54f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float MetersToFeet = 3.28084f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float MetersToInches = 39.3701f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float CentimetersToFeet = 0.0328084f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float CentimetersToInches = 0.393701f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float KilometersToMiles = 0.621371f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public const float MilesToKilometers = 1.60934f;

		[Address(RVA = "0x7FE318", Offset = "0x7FE318", VA = "0x7FE318")]
		public static float RemapNumber(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Address(RVA = "0x7FD960", Offset = "0x7FD960", VA = "0x7FD960")]
		public static float RemapNumberClamped(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Address(RVA = "0x7FE334", Offset = "0x7FE334", VA = "0x7FE334")]
		public static float Approach(float target, float value, float speed)
		{
			return default(float);
		}

		[Address(RVA = "0x7FE35C", Offset = "0x7FE35C", VA = "0x7FE35C")]
		public static Vector3 BezierInterpolate3(Vector3 p0, Vector3 c0, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7FE474", Offset = "0x7FE474", VA = "0x7FE474")]
		public static Vector3 BezierInterpolate4(Vector3 p0, Vector3 c0, Vector3 c1, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7FE64C", Offset = "0x7FE64C", VA = "0x7FE64C")]
		public static Vector3 Vector3FromString(string szString)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7FE7FC", Offset = "0x7FE7FC", VA = "0x7FE7FC")]
		public static Vector2 Vector2FromString(string szString)
		{
			return default(Vector2);
		}

		[Address(RVA = "0x7FE99C", Offset = "0x7FE99C", VA = "0x7FE99C")]
		public static float Normalize(float value, float min, float max)
		{
			return default(float);
		}

		[Address(RVA = "0x7FE9AC", Offset = "0x7FE9AC", VA = "0x7FE9AC")]
		public static Vector3 Vector2AsVector3(Vector2 v)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7FE9E8", Offset = "0x7FE9E8", VA = "0x7FE9E8")]
		public static Vector2 Vector3AsVector2(Vector3 v)
		{
			return default(Vector2);
		}

		[Address(RVA = "0x7FEA18", Offset = "0x7FEA18", VA = "0x7FEA18")]
		public static float AngleOf(Vector2 v)
		{
			return default(float);
		}

		[Address(RVA = "0x7FEAD4", Offset = "0x7FEAD4", VA = "0x7FEAD4")]
		public static float YawOf(Vector3 v)
		{
			return default(float);
		}

		public static void Swap<T>(ref T lhs, ref T rhs)
		{
		}

		public static void Shuffle<T>(T[] array)
		{
		}

		public static void Shuffle<T>(List<T> list)
		{
		}

		[Address(RVA = "0x7FEBA0", Offset = "0x7FEBA0", VA = "0x7FEBA0")]
		public static int RandomWithLookback(int min, int max, List<int> history, int historyCount)
		{
			return default(int);
		}

		[Address(RVA = "0x7FED4C", Offset = "0x7FED4C", VA = "0x7FED4C")]
		public static Transform FindChild(Transform parent, string name)
		{
			return null;
		}

		public static bool IsNullOrEmpty<T>(T[] array)
		{
			return default(bool);
		}

		public static bool IsValidIndex<T>(T[] array, int i)
		{
			return default(bool);
		}

		public static bool IsValidIndex<T>(List<T> list, int i)
		{
			return default(bool);
		}

		public static int FindOrAdd<T>(List<T> list, T item)
		{
			return default(int);
		}

		public static List<T> FindAndRemove<T>(List<T> list, Predicate<T> match)
		{
			return null;
		}

		public static T FindOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		public static void FastRemove<T>(List<T> list, int index)
		{
		}

		public static void ReplaceGameObject<T, U>(T replace, U replaceWith) where T : MonoBehaviour where U : MonoBehaviour
		{
		}

		[Address(RVA = "0x7FF090", Offset = "0x7FF090", VA = "0x7FF090")]
		public static void SwitchLayerRecursively(Transform transform, int fromLayer, int toLayer)
		{
		}

		[Address(RVA = "0x7F98F4", Offset = "0x7F98F4", VA = "0x7F98F4")]
		public static void DrawCross(Vector3 origin, Color crossColor, float size)
		{
		}

		[Address(RVA = "0x7FF188", Offset = "0x7FF188", VA = "0x7FF188")]
		public static void ResetTransform(Transform t, bool resetScale = true)
		{
		}

		[Address(RVA = "0x7FF2E8", Offset = "0x7FF2E8", VA = "0x7FF2E8")]
		public static Vector3 ClosestPointOnLine(Vector3 vA, Vector3 vB, Vector3 vPoint)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7FF4D4", Offset = "0x7FF4D4", VA = "0x7FF4D4")]
		public static void AfterTimer(GameObject go, float _time, Action callback, bool trigger_if_destroyed_early = false)
		{
		}

		[Address(RVA = "0x7FF570", Offset = "0x7FF570", VA = "0x7FF570")]
		public static void SendPhysicsMessage(Collider collider, string message, SendMessageOptions sendMessageOptions)
		{
		}

		[Address(RVA = "0x7FF6BC", Offset = "0x7FF6BC", VA = "0x7FF6BC")]
		public static void SendPhysicsMessage(Collider collider, string message, object arg, SendMessageOptions sendMessageOptions)
		{
		}

		[Address(RVA = "0x7FF81C", Offset = "0x7FF81C", VA = "0x7FF81C")]
		public static void IgnoreCollisions(GameObject goA, GameObject goB)
		{
		}

		[Address(RVA = "0x7FF9B0", Offset = "0x7FF9B0", VA = "0x7FF9B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681A30", Offset = "0x681A30")]
		public static IEnumerator WrapCoroutine(IEnumerator coroutine, Action onCoroutineFinished)
		{
			return null;
		}

		[Address(RVA = "0x7FFA74", Offset = "0x7FFA74", VA = "0x7FFA74")]
		public static Color ColorWithAlpha(this Color color, float alpha)
		{
			return default(Color);
		}

		[Address(RVA = "0x7FFA7C", Offset = "0x7FFA7C", VA = "0x7FFA7C")]
		public static void Quit()
		{
		}

		[Address(RVA = "0x7FFAF4", Offset = "0x7FFAF4", VA = "0x7FFAF4")]
		public static decimal FloatToDecimal(float value, int decimalPlaces = 2)
		{
			return default(decimal);
		}

		public static T Median<T>(this IEnumerable<T> source)
		{
			return (T)null;
		}

		public static void ForEach<T>(this IEnumerable<T> source, Action<T> action)
		{
		}

		[Address(RVA = "0x7FFBAC", Offset = "0x7FFBAC", VA = "0x7FFBAC")]
		public static string FixupNewlines(string text)
		{
			return null;
		}

		[Address(RVA = "0x7FFC7C", Offset = "0x7FFC7C", VA = "0x7FFC7C")]
		public static float PathLength(NavMeshPath path)
		{
			return default(float);
		}

		[Address(RVA = "0x7FFE50", Offset = "0x7FFE50", VA = "0x7FFE50")]
		public static bool HasCommandLineArgument(string argumentName)
		{
			return default(bool);
		}

		[Address(RVA = "0x7FFEF0", Offset = "0x7FFEF0", VA = "0x7FFEF0")]
		public static int GetCommandLineArgValue(string argumentName, int nDefaultValue)
		{
			return default(int);
		}

		[Address(RVA = "0x7FFFE8", Offset = "0x7FFFE8", VA = "0x7FFFE8")]
		public static float GetCommandLineArgValue(string argumentName, float flDefaultValue)
		{
			return default(float);
		}

		[Address(RVA = "0x80011C", Offset = "0x80011C", VA = "0x80011C")]
		public static void SetActive(GameObject gameObject, bool active)
		{
		}

		[Address(RVA = "0x8001C4", Offset = "0x8001C4", VA = "0x8001C4")]
		public static string CombinePaths(params string[] paths)
		{
			return null;
		}
	}
	[Serializable]
	public class AfterTimer_Component : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE20", Offset = "0x65CE20")]
		private sealed class <Wait>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AfterTimer_Component <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x1116FF8", Offset = "0x1116FF8", VA = "0x1116FF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x1117068", Offset = "0x1117068", VA = "0x1117068", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x1116E38", Offset = "0x1116E38", VA = "0x1116E38")]
			[DebuggerHidden]
			public <Wait>d__5(int <>1__state)
			{
			}

			[Address(RVA = "0x1116ED8", Offset = "0x1116ED8", VA = "0x1116ED8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x1116EDC", Offset = "0x1116EDC", VA = "0x1116EDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x1117000", Offset = "0x1117000", VA = "0x1117000", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action callback;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float triggerTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool timerActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool triggerOnEarlyDestroy;

		[Address(RVA = "0x1116D80", Offset = "0x1116D80", VA = "0x1116D80")]
		public void Init(float _time, Action _callback, bool earlydestroy)
		{
		}

		[Address(RVA = "0x1116DC4", Offset = "0x1116DC4", VA = "0x1116DC4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681AC4", Offset = "0x681AC4")]
		private IEnumerator Wait()
		{
			return null;
		}

		[Address(RVA = "0x1116E64", Offset = "0x1116E64", VA = "0x1116E64")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0x1116ED0", Offset = "0x1116ED0", VA = "0x1116ED0")]
		public AfterTimer_Component()
		{
		}
	}
	public class VelocityEstimator : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE30", Offset = "0x65CE30")]
		private sealed class <EstimateVelocityCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VelocityEstimator <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x800D28", Offset = "0x800D28", VA = "0x800D28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x800D98", Offset = "0x800D98", VA = "0x800D98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x8007FC", Offset = "0x8007FC", VA = "0x8007FC")]
			[DebuggerHidden]
			public <EstimateVelocityCoroutine>d__13(int <>1__state)
			{
			}

			[Address(RVA = "0x80083C", Offset = "0x80083C", VA = "0x80083C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x800840", Offset = "0x800840", VA = "0x800840", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x800D30", Offset = "0x800D30", VA = "0x800D30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673C54", Offset = "0x673C54")]
		public int velocityAverageFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673C8C", Offset = "0x673C8C")]
		public int angularVelocityAverageFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool estimateOnAwake;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine routine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int sampleCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] velocitySamples;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] angularVelocitySamples;

		[Address(RVA = "0x7FCB48", Offset = "0x7FCB48", VA = "0x7FCB48")]
		public void BeginEstimatingVelocity()
		{
		}

		[Address(RVA = "0x7FD1E0", Offset = "0x7FD1E0", VA = "0x7FD1E0")]
		public void FinishEstimatingVelocity()
		{
		}

		[Address(RVA = "0x7FD214", Offset = "0x7FD214", VA = "0x7FD214")]
		public Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7FD3F4", Offset = "0x7FD3F4", VA = "0x7FD3F4")]
		public Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x800538", Offset = "0x800538", VA = "0x800538")]
		public Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Address(RVA = "0x80077C", Offset = "0x80077C", VA = "0x80077C")]
		private void Awake()
		{
		}

		[Address(RVA = "0x8004C4", Offset = "0x8004C4", VA = "0x8004C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681B28", Offset = "0x681B28")]
		private IEnumerator EstimateVelocityCoroutine()
		{
			return null;
		}

		[Address(RVA = "0x800828", Offset = "0x800828", VA = "0x800828")]
		public VelocityEstimator()
		{
		}
	}
	public class ControllerButtonHints : MonoBehaviour
	{
		private enum OffsetType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Up,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Forward,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Back
		}

		private class ButtonHintInfo
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string componentName;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<MeshRenderer> renderers;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform localTransform;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject textHintObject;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform textStartAnchor;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform textEndAnchor;

			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 textEndOffsetDir;

			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform canvasOffset;

			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Text text;

			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public TextMesh textMesh;

			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Canvas textCanvas;

			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public LineRenderer line;

			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float distanceFromCenter;

			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public bool textHintActive;

			[Address(RVA = "0xACA808", Offset = "0xACA808", VA = "0xACA808")]
			public ButtonHintInfo()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE40", Offset = "0x65CE40")]
		private sealed class <TestButtonHints>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xACC9C4", Offset = "0xACC9C4", VA = "0xACC9C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xACCA34", Offset = "0xACCA34", VA = "0xACCA34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xACB21C", Offset = "0xACB21C", VA = "0xACB21C")]
			[DebuggerHidden]
			public <TestButtonHints>d__36(int <>1__state)
			{
			}

			[Address(RVA = "0xACC6C4", Offset = "0xACC6C4", VA = "0xACC6C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xACC6C8", Offset = "0xACC6C8", VA = "0xACC6C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xACC9CC", Offset = "0xACC9CC", VA = "0xACC9CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE50", Offset = "0x65CE50")]
		private sealed class <TestTextHints>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xACCCB8", Offset = "0xACCCB8", VA = "0xACCCB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xACCD28", Offset = "0xACCD28", VA = "0xACCD28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xACB2BC", Offset = "0xACB2BC", VA = "0xACB2BC")]
			[DebuggerHidden]
			public <TestTextHints>d__37(int <>1__state)
			{
			}

			[Address(RVA = "0xACCA3C", Offset = "0xACCA3C", VA = "0xACCA3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xACCA40", Offset = "0xACCA40", VA = "0xACCA40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xACCCC0", Offset = "0xACCCC0", VA = "0xACCCC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material controllerMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color flashColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject textHintPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x673CC4", Offset = "0x673CC4")]
		public bool debugHints;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SteamVR_RenderModel renderModel;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Player player;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<MeshRenderer> renderers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<MeshRenderer> flashingRenderers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float tickCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<EVRButtonId, ButtonHintInfo> buttonHintInfos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform textHintParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<KeyValuePair<string, ulong>> componentButtonMasks;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int colorID;

		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673CFC", Offset = "0x673CFC")]
		private bool <initialized>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 centerPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SteamVR_Events.Action renderModelLoadedAction;

		public bool initialized
		{
			[Address(RVA = "0xAC792C", Offset = "0xAC792C", VA = "0xAC792C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681B8C", Offset = "0x681B8C")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xAC7934", Offset = "0xAC7934", VA = "0xAC7934")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681B9C", Offset = "0x681B9C")]
			private set
			{
			}
		}

		[Address(RVA = "0xAC7940", Offset = "0xAC7940", VA = "0xAC7940")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAC79FC", Offset = "0xAC79FC", VA = "0xAC79FC")]
		private void Start()
		{
		}

		[Address(RVA = "0xAC7AEC", Offset = "0xAC7AEC", VA = "0xAC7AEC")]
		private void HintDebugLog(string msg)
		{
		}

		[Address(RVA = "0xAC7B98", Offset = "0xAC7B98", VA = "0xAC7B98")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xAC7BCC", Offset = "0xAC7BCC", VA = "0xAC7BCC")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xAC7C90", Offset = "0xAC7C90", VA = "0xAC7C90")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Address(RVA = "0xAC7EA8", Offset = "0xAC7EA8", VA = "0xAC7EA8")]
		private void OnHandInitialized(int deviceIndex)
		{
		}

		[Address(RVA = "0xAC8164", Offset = "0xAC8164", VA = "0xAC8164")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool succeess)
		{
		}

		[Address(RVA = "0xAC8B1C", Offset = "0xAC8B1C", VA = "0xAC8B1C")]
		private void CreateAndAddButtonInfo(EVRButtonId buttonID)
		{
		}

		[Address(RVA = "0xACA048", Offset = "0xACA048", VA = "0xACA048")]
		private void ComputeTextEndTransforms()
		{
		}

		[Address(RVA = "0xACA810", Offset = "0xACA810", VA = "0xACA810")]
		private void ShowButtonHint(params EVRButtonId[] buttons)
		{
		}

		[Address(RVA = "0xAC7CB4", Offset = "0xAC7CB4", VA = "0xAC7CB4")]
		private void HideAllButtonHints()
		{
		}

		[Address(RVA = "0xACACB4", Offset = "0xACACB4", VA = "0xACACB4")]
		private void HideButtonHint(params EVRButtonId[] buttons)
		{
		}

		[Address(RVA = "0xACAFE4", Offset = "0xACAFE4", VA = "0xACAFE4")]
		private bool IsButtonHintActive(EVRButtonId button)
		{
			return default(bool);
		}

		[Address(RVA = "0xACB1A8", Offset = "0xACB1A8", VA = "0xACB1A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681BAC", Offset = "0x681BAC")]
		private IEnumerator TestButtonHints()
		{
			return null;
		}

		[Address(RVA = "0xACB248", Offset = "0xACB248", VA = "0xACB248")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681C10", Offset = "0x681C10")]
		private IEnumerator TestTextHints()
		{
			return null;
		}

		[Address(RVA = "0xACB2E8", Offset = "0xACB2E8", VA = "0xACB2E8")]
		private void Update()
		{
		}

		[Address(RVA = "0xACB6E8", Offset = "0xACB6E8", VA = "0xACB6E8")]
		private void UpdateTextHint(ButtonHintInfo hintInfo)
		{
		}

		[Address(RVA = "0xAC7C0C", Offset = "0xAC7C0C", VA = "0xAC7C0C")]
		private void Clear()
		{
		}

		[Address(RVA = "0xACBC14", Offset = "0xACBC14", VA = "0xACBC14")]
		private void ShowText(EVRButtonId button, string text, bool highlightButton = true)
		{
		}

		[Address(RVA = "0xACBE54", Offset = "0xACBE54", VA = "0xACBE54")]
		private void HideText(EVRButtonId button)
		{
		}

		[Address(RVA = "0xAC7D08", Offset = "0xAC7D08", VA = "0xAC7D08")]
		private void HideAllText()
		{
		}

		[Address(RVA = "0xACBF78", Offset = "0xACBF78", VA = "0xACBF78")]
		private string GetActiveHintText(EVRButtonId button)
		{
			return null;
		}

		[Address(RVA = "0xACC070", Offset = "0xACC070", VA = "0xACC070")]
		private static ControllerButtonHints GetControllerButtonHints(Hand hand)
		{
			return null;
		}

		[Address(RVA = "0xAC455C", Offset = "0xAC455C", VA = "0xAC455C")]
		public static void ShowButtonHint(Hand hand, params EVRButtonId[] buttons)
		{
		}

		[Address(RVA = "0xAC4290", Offset = "0xAC4290", VA = "0xAC4290")]
		public static void HideButtonHint(Hand hand, params EVRButtonId[] buttons)
		{
		}

		[Address(RVA = "0xACC154", Offset = "0xACC154", VA = "0xACC154")]
		public static void HideAllButtonHints(Hand hand)
		{
		}

		[Address(RVA = "0xACC1F4", Offset = "0xACC1F4", VA = "0xACC1F4")]
		public static bool IsButtonHintActive(Hand hand, EVRButtonId button)
		{
			return default(bool);
		}

		[Address(RVA = "0xACC2AC", Offset = "0xACC2AC", VA = "0xACC2AC")]
		public static void ShowTextHint(Hand hand, EVRButtonId button, string text, bool highlightButton = true)
		{
		}

		[Address(RVA = "0xACC37C", Offset = "0xACC37C", VA = "0xACC37C")]
		public static void HideTextHint(Hand hand, EVRButtonId button)
		{
		}

		[Address(RVA = "0xACC430", Offset = "0xACC430", VA = "0xACC430")]
		public static void HideAllTextHints(Hand hand)
		{
		}

		[Address(RVA = "0xACC4D0", Offset = "0xACC4D0", VA = "0xACC4D0")]
		public static string GetActiveHintText(Hand hand, EVRButtonId button)
		{
			return null;
		}

		[Address(RVA = "0xACC598", Offset = "0xACC598", VA = "0xACC598")]
		public ControllerButtonHints()
		{
		}
	}
	public class ArcheryTarget : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE60", Offset = "0x65CE60")]
		private sealed class <FallDown>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArcheryTarget <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Quaternion <startingRot>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <rotLerp>5__4;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x1117444", Offset = "0x1117444", VA = "0x1117444", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x11174B4", Offset = "0x11174B4", VA = "0x11174B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x1117160", Offset = "0x1117160", VA = "0x1117160")]
			[DebuggerHidden]
			public <FallDown>d__11(int <>1__state)
			{
			}

			[Address(RVA = "0x11171A4", Offset = "0x11171A4", VA = "0x11171A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x11171A8", Offset = "0x11171A8", VA = "0x11171A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x111744C", Offset = "0x111744C", VA = "0x111744C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onTakeDamage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool onceOnly;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform targetCenter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform baseTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform fallenDownTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fallTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float targetRadius = 0.25f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool targetEnabled;

		[Address(RVA = "0x1117080", Offset = "0x1117080", VA = "0x1117080")]
		private void ApplyDamage()
		{
		}

		[Address(RVA = "0x11170E8", Offset = "0x11170E8", VA = "0x11170E8")]
		private void FireExposure()
		{
		}

		[Address(RVA = "0x1117084", Offset = "0x1117084", VA = "0x1117084")]
		private void OnDamageTaken()
		{
		}

		[Address(RVA = "0x11170EC", Offset = "0x11170EC", VA = "0x11170EC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681C74", Offset = "0x681C74")]
		private IEnumerator FallDown()
		{
			return null;
		}

		[Address(RVA = "0x111718C", Offset = "0x111718C", VA = "0x111718C")]
		public ArcheryTarget()
		{
		}
	}
	public class Arrow : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem glintParticle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody arrowHeadRB;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody shaftRB;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhysicMaterial targetPhysMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 prevPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion prevRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 prevVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 prevHeadPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SoundPlayOneshot fireReleaseSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SoundPlayOneshot airReleaseSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SoundPlayOneshot hitTargetSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public PlaySound hitGroundSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool inFlight;

		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool released;

		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool hasSpreadFire;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int travelledFrames;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject scaleParentObject;

		[Address(RVA = "0x11174BC", Offset = "0x11174BC", VA = "0x11174BC")]
		private void Start()
		{
		}

		[Address(RVA = "0x1117544", Offset = "0x1117544", VA = "0x1117544")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0x1117668", Offset = "0x1117668", VA = "0x1117668")]
		public void ArrowReleased(float inputVelocity)
		{
		}

		[Address(RVA = "0x1117B24", Offset = "0x1117B24", VA = "0x1117B24")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x11183FC", Offset = "0x11183FC", VA = "0x11183FC")]
		private void StickInTarget(Collision collision, bool bSkipRayCast)
		{
		}

		[Address(RVA = "0x1118C94", Offset = "0x1118C94", VA = "0x1118C94")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0x1118D48", Offset = "0x1118D48", VA = "0x1118D48")]
		public Arrow()
		{
		}
	}
	public class ArrowHand : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE70", Offset = "0x65CE70")]
		private sealed class <ArrowReleaseHaptics>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArrowHand <>4__this;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x111A2A0", Offset = "0x111A2A0", VA = "0x111A2A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x111A310", Offset = "0x111A310", VA = "0x111A310", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x1119F40", Offset = "0x1119F40", VA = "0x1119F40")]
			[DebuggerHidden]
			public <ArrowReleaseHaptics>d__24(int <>1__state)
			{
			}

			[Address(RVA = "0x111A000", Offset = "0x111A000", VA = "0x111A000", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x111A004", Offset = "0x111A004", VA = "0x111A004", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x111A2A8", Offset = "0x111A2A8", VA = "0x111A2A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Longbow bow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject currentArrow;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject arrowPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform arrowNockTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float nockDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lerpCompleteDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationLerpThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float positionLerpThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool allowArrowSpawn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool nocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool inNockRange;

		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		private bool arrowLerpComplete;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SoundPlayOneshot arrowSpawnSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AllowTeleportWhileAttachedToHand allowTeleport;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int maxArrowCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<GameObject> arrowList;

		[Address(RVA = "0x1118D50", Offset = "0x1118D50", VA = "0x1118D50")]
		private void Awake()
		{
		}

		[Address(RVA = "0x1118DF8", Offset = "0x1118DF8", VA = "0x1118DF8")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Address(RVA = "0x1118E78", Offset = "0x1118E78", VA = "0x1118E78")]
		private GameObject InstantiateArrow()
		{
			return null;
		}

		[Address(RVA = "0x111912C", Offset = "0x111912C", VA = "0x111912C")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Address(RVA = "0x1119E44", Offset = "0x1119E44", VA = "0x1119E44")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0x1119A4C", Offset = "0x1119A4C", VA = "0x1119A4C")]
		private void FireArrow()
		{
		}

		[Address(RVA = "0x1119F34", Offset = "0x1119F34", VA = "0x1119F34")]
		private void EnableArrowSpawn()
		{
		}

		[Address(RVA = "0x1119EC0", Offset = "0x1119EC0", VA = "0x1119EC0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681CD8", Offset = "0x681CD8")]
		private IEnumerator ArrowReleaseHaptics()
		{
			return null;
		}

		[Address(RVA = "0x1119F6C", Offset = "0x1119F6C", VA = "0x1119F6C")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Address(RVA = "0x1119FA4", Offset = "0x1119FA4", VA = "0x1119FA4")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Address(RVA = "0x1118E00", Offset = "0x1118E00", VA = "0x1118E00")]
		private void FindBow()
		{
		}

		[Address(RVA = "0x1119FDC", Offset = "0x1119FDC", VA = "0x1119FDC")]
		public ArrowHand()
		{
		}
	}
	public class ArrowheadRotation : MonoBehaviour
	{
		[Address(RVA = "0x111A318", Offset = "0x111A318", VA = "0x111A318")]
		private void Start()
		{
		}

		[Address(RVA = "0x111A3B4", Offset = "0x111A3B4", VA = "0x111A3B4")]
		public ArrowheadRotation()
		{
		}
	}
	public class Balloon : MonoBehaviour
	{
		public enum BalloonColor
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Red,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			OrangeRed,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Orange,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			YellowOrange,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Yellow,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			GreenYellow,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Green,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			BlueGreen,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Blue,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			VioletBlue,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Violet,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			RedViolet,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			LightGray,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			DarkGray,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Random
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject popPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lifetime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool burstOnLifetimeEnd;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject lifetimeEndParticlePrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot lifetimeEndSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float destructTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float releaseTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SoundPlayOneshot collisionSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastSoundTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float soundDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody balloonRigidbody;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool bParticlesSpawned;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float s_flLastDeathSound;

		[Address(RVA = "0x111A3BC", Offset = "0x111A3BC", VA = "0x111A3BC")]
		private void Start()
		{
		}

		[Address(RVA = "0x111A458", Offset = "0x111A458", VA = "0x111A458")]
		private void Update()
		{
		}

		[Address(RVA = "0x111A514", Offset = "0x111A514", VA = "0x111A514")]
		private void SpawnParticles(GameObject particlePrefab, SoundPlayOneshot sound)
		{
		}

		[Address(RVA = "0x111A7EC", Offset = "0x111A7EC", VA = "0x111A7EC")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0x111A91C", Offset = "0x111A91C", VA = "0x111A91C")]
		private void ApplyDamage()
		{
		}

		[Address(RVA = "0x111A9A8", Offset = "0x111A9A8", VA = "0x111A9A8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Address(RVA = "0x111AD78", Offset = "0x111AD78", VA = "0x111AD78")]
		public void SetColor(BalloonColor color)
		{
		}

		[Address(RVA = "0x111AE44", Offset = "0x111AE44", VA = "0x111AE44")]
		private Color BalloonColorToRGB(BalloonColor balloonColorVar)
		{
			return default(Color);
		}

		[Address(RVA = "0x111B07C", Offset = "0x111B07C", VA = "0x111B07C")]
		public Balloon()
		{
		}
	}
	public class BalloonColliders : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] colliders;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] colliderLocalPositions;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion[] colliderLocalRotations;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Address(RVA = "0x111B0AC", Offset = "0x111B0AC", VA = "0x111B0AC")]
		private void Awake()
		{
		}

		[Address(RVA = "0x111B3E0", Offset = "0x111B3E0", VA = "0x111B3E0")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0x111B830", Offset = "0x111B830", VA = "0x111B830")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0x111B9E4", Offset = "0x111B9E4", VA = "0x111B9E4")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0x111BAC0", Offset = "0x111BAC0", VA = "0x111BAC0")]
		public BalloonColliders()
		{
		}
	}
	public class BalloonHapticBump : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject physParent;

		[Address(RVA = "0x111BAC8", Offset = "0x111BAC8", VA = "0x111BAC8")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Address(RVA = "0x111BC1C", Offset = "0x111BC1C", VA = "0x111BC1C")]
		public BalloonHapticBump()
		{
		}
	}
	public class BalloonSpawner : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minSpawnTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxSpawnTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float nextSpawnTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject balloonPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool autoSpawn;

		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool spawnAtStartup;

		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool playSounds;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SoundPlayOneshot inflateSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot stretchSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool sendSpawnMessageToParent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float scale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnDirectionTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float spawnForce;

		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool attachBalloon;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Balloon.BalloonColor color;

		[Address(RVA = "0x111BC24", Offset = "0x111BC24", VA = "0x111BC24")]
		private void Start()
		{
		}

		[Address(RVA = "0x111C168", Offset = "0x111C168", VA = "0x111C168")]
		private void Update()
		{
		}

		[Address(RVA = "0x111BCE0", Offset = "0x111BCE0", VA = "0x111BCE0")]
		public GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)
		{
			return null;
		}

		[Address(RVA = "0x111C230", Offset = "0x111C230", VA = "0x111C230")]
		public void SpawnBalloonFromEvent(int color)
		{
		}

		[Address(RVA = "0x111C234", Offset = "0x111C234", VA = "0x111C234")]
		public BalloonSpawner()
		{
		}
	}
	public class ExplosionWobble : MonoBehaviour
	{
		[Address(RVA = "0xACEE7C", Offset = "0xACEE7C", VA = "0xACEE7C")]
		public void ExplosionEvent(Vector3 explosionPos)
		{
		}

		[Address(RVA = "0xACEF64", Offset = "0xACEF64", VA = "0xACEF64")]
		public ExplosionWobble()
		{
		}
	}
	public class FireSource : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject fireParticlePrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool startActive;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject fireObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem customParticles;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isBurning;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float burnTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ignitionDelay;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float ignitionTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSource ignitionSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool canSpreadFromThisSource;

		[Address(RVA = "0xACF42C", Offset = "0xACF42C", VA = "0xACF42C")]
		private void Start()
		{
		}

		[Address(RVA = "0xACF6BC", Offset = "0xACF6BC", VA = "0xACF6BC")]
		private void Update()
		{
		}

		[Address(RVA = "0xACF7CC", Offset = "0xACF7CC", VA = "0xACF7CC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Address(RVA = "0xACF85C", Offset = "0xACF85C", VA = "0xACF85C")]
		private void FireExposure()
		{
		}

		[Address(RVA = "0xACF43C", Offset = "0xACF43C", VA = "0xACF43C")]
		private void StartBurning()
		{
		}

		[Address(RVA = "0xACF97C", Offset = "0xACF97C", VA = "0xACF97C")]
		public FireSource()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659C60", Offset = "0x659C60")]
	public class Longbow : MonoBehaviour
	{
		public enum Handedness
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Left,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			Right
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE80", Offset = "0x65CE80")]
		private sealed class <ResetDrawAnim>d__55 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Longbow <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <startLerp>5__3;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xAD90F8", Offset = "0xAD90F8", VA = "0xAD90F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xAD9168", Offset = "0xAD9168", VA = "0xAD9168", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xAD891C", Offset = "0xAD891C", VA = "0xAD891C")]
			[DebuggerHidden]
			public <ResetDrawAnim>d__55(int <>1__state)
			{
			}

			[Address(RVA = "0xAD8FDC", Offset = "0xAD8FDC", VA = "0xAD8FDC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xAD8FE0", Offset = "0xAD8FE0", VA = "0xAD8FE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xAD9100", Offset = "0xAD9100", VA = "0xAD9100", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Handedness currentHandGuess;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float timeOfPossibleHandSwitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float timeBeforeConfirmingHandSwitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool possibleHandSwitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform pivotTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform handleTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ArrowHand arrowHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform nockTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform nockRestTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool autoSpawnArrowHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ItemPackage arrowHandItemPackage;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject arrowHandPrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool nocked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool pulled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float minPull = 0.05f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float maxPull = 0.5f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float nockDistanceTravelled;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float hapticDistanceThreshold;

		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float lastTickDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float bowPullPulseStrengthLow = 100f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float bowPullPulseStrengthHigh = 500f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 bowLeftVector;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float arrowMinVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float arrowMaxVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float arrowVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float minStrainTickTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float maxStrainTickTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float nextStrainTick;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool lerpBackToZeroRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float lerpStartTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float lerpDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion lerpStartRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float nockLerpStartTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion nockLerpStartRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float drawOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public LinearMapping bowDrawLinearMapping;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool deferNewPoses;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 lateUpdatePos;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Quaternion lateUpdateRot;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public SoundBowClick drawSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float drawTension;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SoundPlayOneshot arrowSlideSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SoundPlayOneshot releaseSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public SoundPlayOneshot nockSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SteamVR_Events.Action newPosesAppliedAction;

		[Address(RVA = "0xAD77F4", Offset = "0xAD77F4", VA = "0xAD77F4")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Address(RVA = "0xAD77FC", Offset = "0xAD77FC", VA = "0xAD77FC")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD7898", Offset = "0xAD7898", VA = "0xAD7898")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xAD78CC", Offset = "0xAD78CC", VA = "0xAD78CC")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xAD7900", Offset = "0xAD7900", VA = "0xAD7900")]
		private void LateUpdate()
		{
		}

		[Address(RVA = "0xAD797C", Offset = "0xAD797C", VA = "0xAD797C")]
		private void OnNewPosesApplied()
		{
		}

		[Address(RVA = "0xAD7A28", Offset = "0xAD7A28", VA = "0xAD7A28")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Address(RVA = "0xAD85D4", Offset = "0xAD85D4", VA = "0xAD85D4")]
		public void ArrowReleased()
		{
		}

		[Address(RVA = "0xAD88A8", Offset = "0xAD88A8", VA = "0xAD88A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681D3C", Offset = "0x681D3C")]
		private IEnumerator ResetDrawAnim()
		{
			return null;
		}

		[Address(RVA = "0xAD8948", Offset = "0xAD8948", VA = "0xAD8948")]
		public float GetArrowVelocity()
		{
			return default(float);
		}

		[Address(RVA = "0xAD8950", Offset = "0xAD8950", VA = "0xAD8950")]
		public void StartRotationLerp()
		{
		}

		[Address(RVA = "0xAD89B0", Offset = "0xAD89B0", VA = "0xAD89B0")]
		public void StartNock(ArrowHand currentArrowHand)
		{
		}

		[Address(RVA = "0xAD8448", Offset = "0xAD8448", VA = "0xAD8448")]
		private void EvaluateHandedness()
		{
		}

		[Address(RVA = "0xAD8A88", Offset = "0xAD8A88", VA = "0xAD8A88")]
		private void DoHandednessCheck()
		{
		}

		[Address(RVA = "0xAD8B0C", Offset = "0xAD8B0C", VA = "0xAD8B0C")]
		public void ArrowInPosition()
		{
		}

		[Address(RVA = "0xAD8BAC", Offset = "0xAD8BAC", VA = "0xAD8BAC")]
		public void ReleaseNock()
		{
		}

		[Address(RVA = "0xAD8C40", Offset = "0xAD8C40", VA = "0xAD8C40")]
		private void ShutDown()
		{
		}

		[Address(RVA = "0xAD8E84", Offset = "0xAD8E84", VA = "0xAD8E84")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Address(RVA = "0xAD8EBC", Offset = "0xAD8EBC", VA = "0xAD8EBC")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Address(RVA = "0xAD8F0C", Offset = "0xAD8F0C", VA = "0xAD8F0C")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0xAD8F88", Offset = "0xAD8F88", VA = "0xAD8F88")]
		private void OnDestroy()
		{
		}

		[Address(RVA = "0xAD8F8C", Offset = "0xAD8F8C", VA = "0xAD8F8C")]
		public Longbow()
		{
		}
	}
	public class SoundBowClick : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip bowClick;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchTensionCurve;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource thisAudioSource;

		[Address(RVA = "0xADB8D4", Offset = "0xADB8D4", VA = "0xADB8D4")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD8534", Offset = "0xAD8534", VA = "0xAD8534")]
		public void PlayBowTensionClicks(float normalizedTension)
		{
		}

		[Address(RVA = "0xADB92C", Offset = "0xADB92C", VA = "0xADB92C")]
		public SoundBowClick()
		{
		}
	}
	public class ControllerHintsExample : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CE90", Offset = "0x65CE90")]
		private sealed class <TestButtonHints>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xACD300", Offset = "0xACD300", VA = "0xACD300", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xACD370", Offset = "0xACD370", VA = "0xACD370", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xACCF80", Offset = "0xACCF80", VA = "0xACCF80")]
			[DebuggerHidden]
			public <TestButtonHints>d__5(int <>1__state)
			{
			}

			[Address(RVA = "0xACCFE0", Offset = "0xACCFE0", VA = "0xACCFE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xACCFE4", Offset = "0xACCFE4", VA = "0xACCFE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xACD308", Offset = "0xACD308", VA = "0xACD308", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CEA0", Offset = "0x65CEA0")]
		private sealed class <TestTextHints>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xACD5C4", Offset = "0xACD5C4", VA = "0xACD5C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xACD634", Offset = "0xACD634", VA = "0xACD634", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xACCFAC", Offset = "0xACCFAC", VA = "0xACCFAC")]
			[DebuggerHidden]
			public <TestTextHints>d__6(int <>1__state)
			{
			}

			[Address(RVA = "0xACD378", Offset = "0xACD378", VA = "0xACD378", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xACD37C", Offset = "0xACD37C", VA = "0xACD37C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xACD5CC", Offset = "0xACD5CC", VA = "0xACD5CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine buttonHintCoroutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine textHintCoroutine;

		[Address(RVA = "0xACCD30", Offset = "0xACCD30", VA = "0xACCD30")]
		public void ShowButtonHints(Hand hand)
		{
		}

		[Address(RVA = "0xACCDF8", Offset = "0xACCDF8", VA = "0xACCDF8")]
		public void ShowTextHints(Hand hand)
		{
		}

		[Address(RVA = "0xACCEC0", Offset = "0xACCEC0", VA = "0xACCEC0")]
		public void DisableHints()
		{
		}

		[Address(RVA = "0xACCD84", Offset = "0xACCD84", VA = "0xACCD84")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681DA0", Offset = "0x681DA0")]
		private IEnumerator TestButtonHints(Hand hand)
		{
			return null;
		}

		[Address(RVA = "0xACCE4C", Offset = "0xACCE4C", VA = "0xACCE4C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681E04", Offset = "0x681E04")]
		private IEnumerator TestTextHints(Hand hand)
		{
			return null;
		}

		[Address(RVA = "0xACCFD8", Offset = "0xACCFD8", VA = "0xACCFD8")]
		public ControllerHintsExample()
		{
		}
	}
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x659CC4", Offset = "0x659CC4")]
	public class InteractableExample : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMesh textMesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 oldPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion oldRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float attachTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand.AttachmentFlags attachmentFlags;

		[Address(RVA = "0xAD48F4", Offset = "0xAD48F4", VA = "0xAD48F4")]
		private void Awake()
		{
		}

		[Address(RVA = "0xAD496C", Offset = "0xAD496C", VA = "0xAD496C")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Address(RVA = "0xAD4A0C", Offset = "0xAD4A0C", VA = "0xAD4A0C")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Address(RVA = "0xAD4A70", Offset = "0xAD4A70", VA = "0xAD4A70")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Address(RVA = "0xAD4D24", Offset = "0xAD4D24", VA = "0xAD4D24")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Address(RVA = "0xAD4DD4", Offset = "0xAD4DD4", VA = "0xAD4DD4")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Address(RVA = "0xAD4E74", Offset = "0xAD4E74", VA = "0xAD4E74")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Address(RVA = "0xAD4F5C", Offset = "0xAD4F5C", VA = "0xAD4F5C")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Address(RVA = "0xAD4F60", Offset = "0xAD4F60", VA = "0xAD4F60")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Address(RVA = "0xAD4F64", Offset = "0xAD4F64", VA = "0xAD4F64")]
		public InteractableExample()
		{
		}
	}
	public class AllowTeleportWhileAttachedToHand : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool teleportAllowed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool overrideHoverLock;

		[Address(RVA = "0x1117070", Offset = "0x1117070", VA = "0x1117070")]
		public AllowTeleportWhileAttachedToHand()
		{
		}
	}
	public class ChaperoneInfo : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CEB0", Offset = "0x65CEB0")]
		private sealed class <Start>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ChaperoneInfo <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRChaperone <chaperone>5__2;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0xAC3BE8", Offset = "0xAC3BE8", VA = "0xAC3BE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0xAC3C58", Offset = "0xAC3C58", VA = "0xAC3C58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0xAC3780", Offset = "0xAC3780", VA = "0xAC3780")]
			[DebuggerHidden]
			public <Start>d__21(int <>1__state)
			{
			}

			[Address(RVA = "0xAC3820", Offset = "0xAC3820", VA = "0xAC3820", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0xAC3824", Offset = "0xAC3824", VA = "0xAC3824", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0xAC3BF0", Offset = "0xAC3BF0", VA = "0xAC3BF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673D0C", Offset = "0x673D0C")]
		private bool <initialized>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673D1C", Offset = "0x673D1C")]
		private float <playAreaSizeX>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673D2C", Offset = "0x673D2C")]
		private float <playAreaSizeZ>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673D3C", Offset = "0x673D3C")]
		private bool <roomscale>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event Initialized;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ChaperoneInfo _instance;

		public bool initialized
		{
			[Address(RVA = "0xAC3428", Offset = "0xAC3428", VA = "0xAC3428")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681E68", Offset = "0x681E68")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xAC3430", Offset = "0xAC3430", VA = "0xAC3430")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681E78", Offset = "0x681E78")]
			private set
			{
			}
		}

		public float playAreaSizeX
		{
			[Address(RVA = "0xAC343C", Offset = "0xAC343C", VA = "0xAC343C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681E88", Offset = "0x681E88")]
			get
			{
				return default(float);
			}
			[Address(RVA = "0xAC3444", Offset = "0xAC3444", VA = "0xAC3444")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681E98", Offset = "0x681E98")]
			private set
			{
			}
		}

		public float playAreaSizeZ
		{
			[Address(RVA = "0xAC344C", Offset = "0xAC344C", VA = "0xAC344C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681EA8", Offset = "0x681EA8")]
			get
			{
				return default(float);
			}
			[Address(RVA = "0xAC3454", Offset = "0xAC3454", VA = "0xAC3454")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681EB8", Offset = "0x681EB8")]
			private set
			{
			}
		}

		public bool roomscale
		{
			[Address(RVA = "0xAC345C", Offset = "0xAC345C", VA = "0xAC345C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681EC8", Offset = "0x681EC8")]
			get
			{
				return default(bool);
			}
			[Address(RVA = "0xAC3464", Offset = "0xAC3464", VA = "0xAC3464")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681ED8", Offset = "0x681ED8")]
			private set
			{
			}
		}

		public static ChaperoneInfo instance
		{
			[Address(RVA = "0xAC350C", Offset = "0xAC350C", VA = "0xAC350C")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xAC3470", Offset = "0xAC3470", VA = "0xAC3470")]
		public static SteamVR_Events.Action InitializedAction(UnityAction action)
		{
			return null;
		}

		[Address(RVA = "0xAC370C", Offset = "0xAC370C", VA = "0xAC370C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681EE8", Offset = "0x681EE8")]
		private IEnumerator Start()
		{
			return null;
		}

		[Address(RVA = "0xAC37AC", Offset = "0xAC37AC", VA = "0xAC37AC")]
		public ChaperoneInfo()
		{
		}
	}
	public class IgnoreTeleportTrace : MonoBehaviour
	{
		[Address(RVA = "0xAD2DE0", Offset = "0xAD2DE0", VA = "0xAD2DE0")]
		public IgnoreTeleportTrace()
		{
		}
	}
	public class Teleport : MonoBehaviour
	{
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x65CEC0", Offset = "0x65CEC0")]
		private sealed class <TeleportHintCoroutine>d__105 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Teleport <>4__this;

			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <prevBreakTime>5__2;

			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <prevHapticPulseTime>5__3;

			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <pulsed>5__4;

			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Address(RVA = "0x7F8898", Offset = "0x7F8898", VA = "0x7F8898", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			private object System.Collections.IEnumerator.Current
			{
				[Address(RVA = "0x7F8908", Offset = "0x7F8908", VA = "0x7F8908", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Address(RVA = "0x7F85CC", Offset = "0x7F85CC", VA = "0x7F85CC")]
			[DebuggerHidden]
			public <TeleportHintCoroutine>d__105(int <>1__state)
			{
			}

			[Address(RVA = "0x7F85F8", Offset = "0x7F85F8", VA = "0x7F85F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Address(RVA = "0x7F85FC", Offset = "0x7F85FC", VA = "0x7F85FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Address(RVA = "0x7F88A0", Offset = "0x7F88A0", VA = "0x7F88A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask traceLayerMask;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask floorFixupTraceLayerMask;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float floorFixupMaximumTraceDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material areaVisibleMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material areaLockedMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material areaHighlightedMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material pointVisibleMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material pointLockedMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material pointHighlightedMaterial;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform destinationReticleTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform invalidReticleTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject playAreaPreviewCorner;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject playAreaPreviewSide;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color pointerValidColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color pointerInvalidColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color pointerLockedColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool showPlayAreaMarker;

		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float teleportFadeTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float meshFadeTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float arcDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x673D4C", Offset = "0x673D4C")]
		public Transform onActivateObjectTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform onDeactivateObjectTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float activateObjectTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float deactivateObjectTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x673D84", Offset = "0x673D84")]
		public AudioSource pointerAudioSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioSource loopingAudioSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioSource headAudioSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioSource reticleAudioSource;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x673DBC", Offset = "0x673DBC")]
		public AudioClip teleportSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioClip pointerStartSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioClip pointerLoopSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioClip pointerStopSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioClip goodHighlightSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioClip badHighlightSound;

		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x673DF4", Offset = "0x673DF4")]
		public bool debugFloor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool showOffsetReticle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Transform offsetReticleTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MeshRenderer floorDebugSphere;

		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public LineRenderer floorDebugLine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private LineRenderer pointerLineRenderer;

		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private GameObject teleportPointerObject;

		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Transform pointerStartTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Hand pointerHand;

		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Player player;

		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private TeleportArc teleportArc;

		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool visible;

		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private TeleportMarkerBase[] teleportMarkers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private TeleportMarkerBase pointedAtTeleportMarker;

		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private TeleportMarkerBase teleportingToMarker;

		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 pointedAtPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private Vector3 prevPointedAtPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private bool teleporting;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private float currentFadeTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float meshAlphaPercent;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float pointerShowStartTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private float pointerHideStartTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool meshFading;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float fullTintAlpha;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float invalidReticleMinScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float invalidReticleMaxScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float invalidReticleMinScaleDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private float invalidReticleMaxScaleDistance;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 invalidReticleScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Quaternion invalidReticleTargetRotation;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Transform playAreaPreviewTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Transform[] playAreaPreviewCorners;

		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Transform[] playAreaPreviewSides;

		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float loopingAudioMaxVolume;

		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Coroutine hintCoroutine;

		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool originalHoverLockState;

		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Interactable originalHoveringInteractable;

		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private AllowTeleportWhileAttachedToHand allowTeleportWhileAttached;

		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Vector3 startingFeetOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private bool movedFeetFarEnough;

		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private SteamVR_Events.Action chaperoneInfoInitializedAction;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event<float> ChangeScene;

		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static SteamVR_Events.Event<TeleportMarkerBase> Player;

		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static SteamVR_Events.Event<TeleportMarkerBase> PlayerPre;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Teleport _instance;

		public static Teleport instance
		{
			[Address(RVA = "0xADD100", Offset = "0xADD100", VA = "0xADD100")]
			get
			{
				return null;
			}
		}

		[Address(RVA = "0xADCF14", Offset = "0xADCF14", VA = "0xADCF14")]
		public static SteamVR_Events.Action<float> ChangeSceneAction(UnityAction<float> action)
		{
			return null;
		}

		[Address(RVA = "0xADCFB8", Offset = "0xADCFB8", VA = "0xADCFB8")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Address(RVA = "0xADD05C", Offset = "0xADD05C", VA = "0xADD05C")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerPreAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Address(RVA = "0xADD228", Offset = "0xADD228", VA = "0xADD228")]
		private void Awake()
		{
		}

		[Address(RVA = "0xADD438", Offset = "0xADD438", VA = "0xADD438")]
		private void Start()
		{
		}

		[Address(RVA = "0xADDAA8", Offset = "0xADDAA8", VA = "0xADDAA8")]
		private void OnEnable()
		{
		}

		[Address(RVA = "0xADEDD8", Offset = "0xADEDD8", VA = "0xADEDD8")]
		private void OnDisable()
		{
		}

		[Address(RVA = "0xADD960", Offset = "0xADD960", VA = "0xADD960")]
		private void CheckForSpawnPoint()
		{
		}

		[Address(RVA = "0xADF360", Offset = "0xADF360", VA = "0xADF360")]
		public void HideTeleportPointer()
		{
		}

		[Address(RVA = "0xADF3E8", Offset = "0xADF3E8", VA = "0xADF3E8")]
		private void Update()
		{
		}

		[Address(RVA = "0xAE0130", Offset = "0xAE0130", VA = "0xAE0130")]
		private void UpdatePointer()
		{
		}

		[Address(RVA = "0xAE1414", Offset = "0xAE1414", VA = "0xAE1414")]
		private void FixedUpdate()
		{
		}

		[Address(RVA = "0xADDAE8", Offset = "0xADDAE8", VA = "0xADDAE8")]
		private void OnChaperoneInfoInitialized()
		{
		}

		[Address(RVA = "0xADD560", Offset = "0xADD560", VA = "0xADD560")]
		private void HidePointer()
		{
		}

		[Address(RVA = "0xADF994", Offset = "0xADF994", VA = "0xADF994")]
		private void ShowPointer(Hand newPointerHand, Hand oldPointerHand)
		{
		}

		[Address(RVA = "0xAE0FFC", Offset = "0xAE0FFC", VA = "0xAE0FFC")]
		private void UpdateTeleportColors()
		{
		}

		[Address(RVA = "0xAE1A88", Offset = "0xAE1A88", VA = "0xAE1A88")]
		private void PlayAudioClip(AudioSource source, AudioClip clip)
		{
		}

		[Address(RVA = "0xAE1BC0", Offset = "0xAE1BC0", VA = "0xAE1BC0")]
		private void PlayPointerHaptic(bool validLocation)
		{
		}

		[Address(RVA = "0xADF804", Offset = "0xADF804", VA = "0xADF804")]
		private void TryTeleportPlayer()
		{
		}

		[Address(RVA = "0xAE1C50", Offset = "0xAE1C50", VA = "0xAE1C50")]
		private void InitiateTeleportFade()
		{
		}

		[Address(RVA = "0xADEE18", Offset = "0xADEE18", VA = "0xADEE18")]
		private void TeleportPlayer()
		{
		}

		[Address(RVA = "0xAE1128", Offset = "0xAE1128", VA = "0xAE1128")]
		private void HighlightSelected(TeleportMarkerBase hitTeleportMarker)
		{
		}

		[Address(RVA = "0xAE1FF0", Offset = "0xAE1FF0", VA = "0xAE1FF0")]
		public void ShowTeleportHint()
		{
		}

		[Address(RVA = "0xAE1F14", Offset = "0xAE1F14", VA = "0xAE1F14")]
		public void CancelTeleportHint()
		{
		}

		[Address(RVA = "0xAE202C", Offset = "0xAE202C", VA = "0xAE202C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x681F4C", Offset = "0x681F4C")]
		private IEnumerator TeleportHintCoroutine()
		{
			return null;
		}

		[Address(RVA = "0xAE20A0", Offset = "0xAE20A0", VA = "0xAE20A0")]
		public bool IsEligibleForTeleport(Hand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xAE19F8", Offset = "0xAE19F8", VA = "0xAE19F8")]
		private bool ShouldOverrideHoverLock()
		{
			return default(bool);
		}

		[Address(RVA = "0xADF734", Offset = "0xADF734", VA = "0xADF734")]
		private bool WasTeleportButtonReleased(Hand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xAE0060", Offset = "0xAE0060", VA = "0xAE0060")]
		private bool IsTeleportButtonDown(Hand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xADF8C4", Offset = "0xADF8C4", VA = "0xADF8C4")]
		private bool WasTeleportButtonPressed(Hand hand)
		{
			return default(bool);
		}

		[Address(RVA = "0xAE1AE8", Offset = "0xAE1AE8", VA = "0xAE1AE8")]
		private Transform GetPointerStartTransform(Hand hand)
		{
			return null;
		}

		[Address(RVA = "0xAE227C", Offset = "0xAE227C", VA = "0xAE227C")]
		public Teleport()
		{
		}
	}
	public class TeleportArc : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int segmentCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float thickness;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673E2C", Offset = "0x673E2C")]
		public float arcDuration;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673E64", Offset = "0x673E64")]
		public float segmentBreak;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x673E9C", Offset = "0x673E9C")]
		public float arcSpeed;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HideInInspector", RVA = "0x673ED4", Offset = "0x673ED4")]
		public int traceLayerMask;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineRenderer[] lineRenderers;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float arcTimeOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float prevThickness;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int prevSegmentCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool showArc;

		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 startPos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 projectileVelocity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useGravity;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform arcObjectsTransfrom;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool arcInvalid;

		[Address(RVA = "0x7F8910", Offset = "0x7F8910", VA = "0x7F8910")]
		private void Start()
		{
		}

		[Address(RVA = "0x7F8938", Offset = "0x7F8938", VA = "0x7F8938")]
		private void Update()
		{
		}

		[Address(RVA = "0x7F8984", Offset = "0x7F8984", VA = "0x7F8984")]
		private void CreateLineRendererObjects()
		{
		}

		[Address(RVA = "0x7F8EC4", Offset = "0x7F8EC4", VA = "0x7F8EC4")]
		public void SetArcData(Vector3 position, Vector3 velocity, bool gravity, bool pointerAtBadAngle)
		{
		}

		[Address(RVA = "0x7F8F18", Offset = "0x7F8F18", VA = "0x7F8F18")]
		public void Show()
		{
		}

		[Address(RVA = "0x7F8F30", Offset = "0x7F8F30", VA = "0x7F8F30")]
		public void Hide()
		{
		}

		[Address(RVA = "0x7F9008", Offset = "0x7F9008", VA = "0x7F9008")]
		public bool DrawArc(out RaycastHit hitInfo)
		{
			return default(bool);
		}

		[Address(RVA = "0x7F965C", Offset = "0x7F965C", VA = "0x7F965C")]
		private void DrawArcSegment(int index, float startTime, float endTime)
		{
		}

		[Address(RVA = "0x7F97D4", Offset = "0x7F97D4", VA = "0x7F97D4")]
		public void SetColor(Color color)
		{
		}

		[Address(RVA = "0x7F92A4", Offset = "0x7F92A4", VA = "0x7F92A4")]
		private float FindProjectileCollision(out RaycastHit hitInfo)
		{
			return default(float);
		}

		[Address(RVA = "0x7F9504", Offset = "0x7F9504", VA = "0x7F9504")]
		public Vector3 GetArcPositionAtTime(float time)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7F8F68", Offset = "0x7F8F68", VA = "0x7F8F68")]
		private void HideLineSegments(int startSegment, int endSegment)
		{
		}

		[Address(RVA = "0x7F9BE8", Offset = "0x7F9BE8", VA = "0x7F9BE8")]
		public TeleportArc()
		{
		}
	}
	public class TeleportArea : TeleportMarkerBase
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x673EE4", Offset = "0x673EE4")]
		private Bounds <meshBounds>k__BackingField;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer areaMesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int tintColorId;

		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color visibleTintColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color highlightedTintColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color lockedTintColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool highlighted;

		public Bounds meshBounds
		{
			[Address(RVA = "0x7F9C10", Offset = "0x7F9C10", VA = "0x7F9C10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681FB0", Offset = "0x681FB0")]
			get
			{
				return default(Bounds);
			}
			[Address(RVA = "0x7F9C24", Offset = "0x7F9C24", VA = "0x7F9C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x681FC0", Offset = "0x681FC0")]
			private set
			{
			}
		}

		[Address(RVA = "0x7F9C38", Offset = "0x7F9C38", VA = "0x7F9C38")]
		public void Awake()
		{
		}

		[Address(RVA = "0x7F9DD0", Offset = "0x7F9DD0", VA = "0x7F9DD0")]
		public void Start()
		{
		}

		[Address(RVA = "0x7F9EF8", Offset = "0x7F9EF8", VA = "0x7F9EF8", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Address(RVA = "0x7F9F00", Offset = "0x7F9F00", VA = "0x7F9F00", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Address(RVA = "0x7F9F08", Offset = "0x7F9F08", VA = "0x7F9F08", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Address(RVA = "0x7FA000", Offset = "0x7FA000", VA = "0x7FA000", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Address(RVA = "0x7FA138", Offset = "0x7FA138", VA = "0x7FA138", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Address(RVA = "0x7FA208", Offset = "0x7FA208", VA = "0x7FA208")]
		public void UpdateVisualsInEditor()
		{
		}

		[Address(RVA = "0x7F9CAC", Offset = "0x7F9CAC", VA = "0x7F9CAC")]
		private bool CalculateBounds()
		{
			return default(bool);
		}

		[Address(RVA = "0x7FA0DC", Offset = "0x7FA0DC", VA = "0x7FA0DC")]
		private Color GetTintColor()
		{
			return default(Color);
		}

		[Address(RVA = "0x7FA2F0", Offset = "0x7FA2F0", VA = "0x7FA2F0")]
		public TeleportArea()
		{
		}
	}
	public abstract class TeleportMarkerBase : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool locked;

		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool markerActive;

		public virtual bool showReticle
		{
			[Address(RVA = "0x7FA35C", Offset = "0x7FA35C", VA = "0x7FA35C", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0x7FA364", Offset = "0x7FA364", VA = "0x7FA364")]
		public void SetLocked(bool locked)
		{
		}

		[Address(RVA = "0x7FA378", Offset = "0x7FA378", VA = "0x7FA378", Slot = "5")]
		public virtual void TeleportPlayer(Vector3 pointedAtPosition)
		{
		}

		public abstract void UpdateVisuals();

		public abstract void Highlight(bool highlight);

		public abstract void SetAlpha(float tintAlpha, float alphaPercent);

		public abstract bool ShouldActivate(Vector3 playerPosition);

		public abstract bool ShouldMovePlayer();

		[Address(RVA = "0x7FA34C", Offset = "0x7FA34C", VA = "0x7FA34C")]
		protected TeleportMarkerBase()
		{
		}
	}
	public class TeleportPoint : TeleportMarkerBase
	{
		public enum TeleportPointType
		{
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			MoveToLocation,
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			SwitchToNewScene
		}

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TeleportPointType teleportType;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string title;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string switchToScene;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color titleVisibleColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color titleHighlightedColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color titleLockedColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool playerSpawnPoint;

		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool gotReleventComponents;

		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshRenderer markerMesh;

		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MeshRenderer switchSceneIcon;

		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshRenderer moveLocationIcon;

		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MeshRenderer lockedIcon;

		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MeshRenderer pointIcon;

		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform lookAtJointTransform;

		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Animation animation;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Text titleText;

		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Player player;

		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 lookAtPosition;

		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int tintColorID;

		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Color tintColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Color titleColor;

		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float fullTitleAlpha;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string switchSceneAnimation = "switch_scenes_idle";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string moveLocationAnimation = "move_location_idle";

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const string lockedAnimation = "locked_idle";

		public override bool showReticle
		{
			[Address(RVA = "0x7FA37C", Offset = "0x7FA37C", VA = "0x7FA37C", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Address(RVA = "0x7FA384", Offset = "0x7FA384", VA = "0x7FA384")]
		private void Awake()
		{
		}

		[Address(RVA = "0x7FA6C0", Offset = "0x7FA6C0", VA = "0x7FA6C0")]
		private void Start()
		{
		}

		[Address(RVA = "0x7FA6E8", Offset = "0x7FA6E8", VA = "0x7FA6E8")]
		private void Update()
		{
		}

		[Address(RVA = "0x7FA7F0", Offset = "0x7FA7F0", VA = "0x7FA7F0", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Address(RVA = "0x7FA8D0", Offset = "0x7FA8D0", VA = "0x7FA8D0", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Address(RVA = "0x7FA8D8", Offset = "0x7FA8D8", VA = "0x7FA8D8", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Address(RVA = "0x7FAB44", Offset = "0x7FAB44", VA = "0x7FAB44", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Address(RVA = "0x7FAD34", Offset = "0x7FAD34", VA = "0x7FAD34", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Address(RVA = "0x7FAA40", Offset = "0x7FAA40", VA = "0x7FAA40")]
		public void SetMeshMaterials(Material material, Color textColor)
		{
		}

		[Address(RVA = "0x7FAF50", Offset = "0x7FAF50", VA = "0x7FAF50")]
		public void TeleportToScene()
		{
		}

		[Address(RVA = "0x7FA4B0", Offset = "0x7FA4B0", VA = "0x7FA4B0")]
		public void GetRelevantComponents()
		{
		}

		[Address(RVA = "0x7FC038", Offset = "0x7FC038", VA = "0x7FC038")]
		public void ReleaseRelevantComponents()
		{
		}

		[Address(RVA = "0x7FC050", Offset = "0x7FC050", VA = "0x7FC050")]
		public void UpdateVisualsInEditor()
		{
		}

		[Address(RVA = "0x7FC488", Offset = "0x7FC488", VA = "0x7FC488")]
		public TeleportPoint()
		{
		}
	}
}
namespace FastShadowProjector
{
	public static class FSPDebugUtils
	{
		[Address(RVA = "0x7D5C50", Offset = "0x7D5C50", VA = "0x7D5C50")]
		public static void DrawCameraFrustumPlanes(Camera camera)
		{
		}
	}
	public static class FSPUtils
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Action<Plane[], Matrix4x4> _calculateFrustumPlanes_Imp;

		[Address(RVA = "0x7D67C4", Offset = "0x7D67C4", VA = "0x7D67C4")]
		public static void CalculateFrustumPlanes(Plane[] planes, Camera camera)
		{
		}

		[Address(RVA = "0x7D6378", Offset = "0x7D6378", VA = "0x7D6378")]
		public static Vector3 Get3PlaneConcurrencePoint(Plane planeA, Plane planeB, Plane planeC)
		{
			return default(Vector3);
		}

		[Address(RVA = "0x7D6C3C", Offset = "0x7D6C3C", VA = "0x7D6C3C")]
		public static float Determinant3x3(Vector3 col1, Vector3 col2, Vector3 col3)
		{
			return default(float);
		}

		[Address(RVA = "0x7D68D8", Offset = "0x7D68D8", VA = "0x7D68D8")]
		private static void CalculateFrustumPlanesNonAlloc(Plane[] planes, Matrix4x4 worldToProjectMatrix)
		{
		}
	}
}
namespace FSP_Samples
{
	public class CubeGen : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject _cubePrefab;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _cubeCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float _genWidth;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _angle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float _groundOffset;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float _scale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool _rotate;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject _cubeGameObject;

		[Address(RVA = "0x7CA870", Offset = "0x7CA870", VA = "0x7CA870")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CA874", Offset = "0x7CA874", VA = "0x7CA874")]
		private void Generate()
		{
		}

		[Address(RVA = "0x7CACCC", Offset = "0x7CACCC", VA = "0x7CACCC")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CADE8", Offset = "0x7CADE8", VA = "0x7CADE8")]
		public CubeGen()
		{
		}
	}
	public class CubeMove : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 _initialPos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion _initialRot;

		[Address(RVA = "0x7CAE14", Offset = "0x7CAE14", VA = "0x7CAE14")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CAF5C", Offset = "0x7CAF5C", VA = "0x7CAF5C")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CAF60", Offset = "0x7CAF60", VA = "0x7CAF60")]
		public void Reset()
		{
		}

		[Address(RVA = "0x7CB0D4", Offset = "0x7CB0D4", VA = "0x7CB0D4")]
		public CubeMove()
		{
		}
	}
	public class FloatAnimation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 _initialPos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _angle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _angleY;

		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float _xFloatDist;

		[Address(RVA = "0x7CB7D0", Offset = "0x7CB7D0", VA = "0x7CB7D0")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CB850", Offset = "0x7CB850", VA = "0x7CB850")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CBAB4", Offset = "0x7CBAB4", VA = "0x7CBAB4")]
		public FloatAnimation()
		{
		}
	}
	public class FPSCounter
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double m_LastTickCount;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_FPS;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FrameTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_DropFrameTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_LastDropTime;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float FPSDropThres = 0.002f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float DropTimeout = 0.5f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float AvgFactor = 0.1f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_Dt;

		public float timeDelta
		{
			[Address(RVA = "0x7CB0DC", Offset = "0x7CB0DC", VA = "0x7CB0DC")]
			get
			{
				return default(float);
			}
		}

		[Address(RVA = "0x7CB0E4", Offset = "0x7CB0E4", VA = "0x7CB0E4")]
		public FPSCounter()
		{
		}

		[Address(RVA = "0x7CB110", Offset = "0x7CB110", VA = "0x7CB110")]
		public void Update()
		{
		}

		[Address(RVA = "0x7CB268", Offset = "0x7CB268", VA = "0x7CB268")]
		public float GetFPS()
		{
			return default(float);
		}

		[Address(RVA = "0x7CB270", Offset = "0x7CB270", VA = "0x7CB270")]
		public float GetDropFPS()
		{
			return default(float);
		}

		[Address(RVA = "0x7CB294", Offset = "0x7CB294", VA = "0x7CB294")]
		public float GetAverageFrameTime()
		{
			return default(float);
		}
	}
	public class FPSLabel : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPSCounter m_FPSCounter;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GUIText m_Label;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool m_ShowFPSDrop;

		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StringBuilder m_FPSTextBuilder;

		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private char[] m_FPSChars;

		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private char[] m_FPSDropChars;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const int FPSTextLen = 10;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float LabelUpdateFrequency = 0.5f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_TimeSinceLastLabelUpdate;

		[Address(RVA = "0x7CB29C", Offset = "0x7CB29C", VA = "0x7CB29C")]
		private void Awake()
		{
		}

		[Address(RVA = "0x7CB388", Offset = "0x7CB388", VA = "0x7CB388")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CB58C", Offset = "0x7CB58C", VA = "0x7CB58C")]
		private void FloatToCharArray(char[] charArray, float number)
		{
		}

		[Address(RVA = "0x7CB790", Offset = "0x7CB790", VA = "0x7CB790")]
		private int GetDecLen(float number)
		{
			return default(int);
		}

		[Address(RVA = "0x7CB7C8", Offset = "0x7CB7C8", VA = "0x7CB7C8")]
		public FPSLabel()
		{
		}
	}
	public class Menu : MonoBehaviour
	{
		[Address(RVA = "0x7CBAC4", Offset = "0x7CBAC4", VA = "0x7CBAC4")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CBAD0", Offset = "0x7CBAD0", VA = "0x7CBAD0")]
		private void OnGUI()
		{
		}

		[Address(RVA = "0x7CBD0C", Offset = "0x7CBD0C", VA = "0x7CBD0C")]
		public Menu()
		{
		}
	}
	public class MovementAnimation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float _animSpeed = 0.7f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float _movementLength;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 _initialPos;

		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _angle;

		[Address(RVA = "0x7CBD14", Offset = "0x7CBD14", VA = "0x7CBD14")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CBD58", Offset = "0x7CBD58", VA = "0x7CBD58")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CBE98", Offset = "0x7CBE98", VA = "0x7CBE98")]
		public MovementAnimation()
		{
		}
	}
	public class RollingCubes : MonoBehaviour
	{
		[Address(RVA = "0x7CBEA8", Offset = "0x7CBEA8", VA = "0x7CBEA8")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CBEAC", Offset = "0x7CBEAC", VA = "0x7CBEAC")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CBEB0", Offset = "0x7CBEB0", VA = "0x7CBEB0")]
		private void OnGUI()
		{
		}

		[Address(RVA = "0x7CC0A0", Offset = "0x7CC0A0", VA = "0x7CC0A0")]
		public RollingCubes()
		{
		}
	}
	public class ScaleAnimation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _scaleUp;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _curScale;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float MaxScale = 0.7f;

		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private const float AnimationSpeed = 3f;

		[Address(RVA = "0x7CC0A8", Offset = "0x7CC0A8", VA = "0x7CC0A8")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CC0E8", Offset = "0x7CC0E8", VA = "0x7CC0E8")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CC240", Offset = "0x7CC240", VA = "0x7CC240")]
		public ScaleAnimation()
		{
		}
	}
	public class ScalingSphere : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ShadowTrigger shadowAreaTrigger;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool inShadow;

		[Address(RVA = "0x7CC250", Offset = "0x7CC250", VA = "0x7CC250")]
		private void Start()
		{
		}

		[Address(RVA = "0x7CC360", Offset = "0x7CC360", VA = "0x7CC360")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CC4B8", Offset = "0x7CC4B8", VA = "0x7CC4B8")]
		private void OnShadowEnter()
		{
		}

		[Address(RVA = "0x7CC4C4", Offset = "0x7CC4C4", VA = "0x7CC4C4")]
		private void OnShadowStay()
		{
		}

		[Address(RVA = "0x7CC4C8", Offset = "0x7CC4C8", VA = "0x7CC4C8")]
		private void OnShadowExit()
		{
		}

		[Address(RVA = "0x7CC4D0", Offset = "0x7CC4D0", VA = "0x7CC4D0")]
		public ScalingSphere()
		{
		}
	}
	public class ShadowSwitch : MonoBehaviour
	{
		[Address(RVA = "0x7CC4D8", Offset = "0x7CC4D8", VA = "0x7CC4D8")]
		private void OnGUI()
		{
		}

		[Address(RVA = "0x7CC604", Offset = "0x7CC604", VA = "0x7CC604")]
		public ShadowSwitch()
		{
		}
	}
	public class SpinAnimation : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _angle;

		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float AnimationSpeed;

		[Address(RVA = "0x7CC60C", Offset = "0x7CC60C", VA = "0x7CC60C")]
		private void Update()
		{
		}

		[Address(RVA = "0x7CC720", Offset = "0x7CC720", VA = "0x7CC720")]
		public SpinAnimation()
		{
		}
	}
	public class TerrainShadowSwitch : MonoBehaviour
	{
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Terrain duplicateTerrain;

		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material terrainMat;

		[Address(RVA = "0x7CC728", Offset = "0x7CC728", VA = "0x7CC728")]
		private void Awake()
		{
		}

		[Address(RVA = "0x7CC83C", Offset = "0x7CC83C", VA = "0x7CC83C")]
		private void OnGUI()
		{
		}

		[Address(RVA = "0x7CC9DC", Offset = "0x7CC9DC", VA = "0x7CC9DC")]
		public TerrainShadowSwitch()
		{
		}
	}
}
