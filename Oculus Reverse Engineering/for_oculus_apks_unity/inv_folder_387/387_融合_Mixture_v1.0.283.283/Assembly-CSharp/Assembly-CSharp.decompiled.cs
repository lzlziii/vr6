using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using AOT;
using Cinemachine;
using Cinemachine.Utility;
using CloudFine.ThrowLab;
using CloudFine.ThrowLab.UI;
using CloudFine.ThrowLab.UnityXR;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Options;
using FMOD;
using FMOD.Studio;
using FMODUnity;
using Fungus;
using Gamekit3D;
using Gamekit3D.Message;
using HutongGames.PlayMaker;
using HutongGames.PlayMaker.Actions;
using HutongGames.PlayMaker.TweenEnums;
using Il2CppDummyDll;
using Lightbug.CharacterControllerPro.Core;
using Lightbug.CharacterControllerPro.Demo;
using Lightbug.CharacterControllerPro.Implementation;
using Lightbug.Utilities;
using Lowscope.Saving;
using Mathos.Parser;
using MoonSharp.Interpreter;
using Oculus.Platform;
using Oculus.Platform.Models;
using PDollarGestureRecognizer;
using Pixelplacement;
using Pixelplacement.TweenSystem;
using PlayMaker.ConditionalExpression;
using RGBSchemes;
using RootMotion;
using RootMotion.FinalIK;
using TMPro;
using Unity.Profiling;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations;
using UnityEngine.Animations.Rigging;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Controls;
using UnityEngine.InputSystem.Utilities;
using UnityEngine.Playables;
using UnityEngine.Profiling;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;
using ch.sycoforge.Decal;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class OculusSpatializerFMOD : MonoBehaviour
{
	[Token(Token = "0x2000003")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioRaycastCallback _raycastCallback;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float particleSize;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float particleOffset;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject room;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] dims;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] coefs;

	[Token(Token = "0x4000010")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] points;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3[] normals;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem sys;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x4000016")]
	private const string strOSP = "OculusSpatializerFMOD";

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x11CD73C", Offset = "0x11CD73C", VA = "0x11CD73C")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x11CD744", Offset = "0x11CD744", VA = "0x11CD744")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x11CD8D4", Offset = "0x11CD8D4", VA = "0x11CD8D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x11CDA28", Offset = "0x11CDA28", VA = "0x11CDA28")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x11CDB20", Offset = "0x11CDB20", VA = "0x11CDB20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x11CE48C", Offset = "0x11CE48C", VA = "0x11CE48C")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000007")]
	[Address(RVA = "0x11CDA9C", Offset = "0x11CDA9C", VA = "0x11CDA9C")]
	private static extern int OSP_FMOD_AssignRayCastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000008")]
	[Address(RVA = "0x11CE220", Offset = "0x11CE220", VA = "0x11CE220")]
	private static extern int OSP_FMOD_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x6000009")]
	[Address(RVA = "0x11CE29C", Offset = "0x11CE29C", VA = "0x11CE29C")]
	private static extern int OSP_FMOD_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x600000A")]
	[Address(RVA = "0x11CE318", Offset = "0x11CE318", VA = "0x11CE318")]
	private static extern int OSP_FMOD_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x600000B")]
	[Address(RVA = "0x11CE394", Offset = "0x11CE394", VA = "0x11CE394")]
	private static extern int OSP_FMOD_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x600000C")]
	[Address(RVA = "0x11CE410", Offset = "0x11CE410", VA = "0x11CE410")]
	private static extern int OSP_FMOD_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x600000D")]
	[Address(RVA = "0x11CF214", Offset = "0x11CF214", VA = "0x11CF214")]
	private static extern int OSP_FMOD_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x600000E")]
	[Address(RVA = "0x11CF2B8", Offset = "0x11CF2B8", VA = "0x11CF2B8")]
	private static extern int OSP_FMOD_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x11CF35C", Offset = "0x11CF35C", VA = "0x11CF35C")]
	public OculusSpatializerFMOD()
	{
	}
}
[Token(Token = "0x2000004")]
[RequireComponent(typeof(ParticleSystem))]
public class particleAttractorLinear : MonoBehaviour
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float delay;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxMoveTime;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve curve;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int numParticlesAlive;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float time;

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x11CF698", Offset = "0x11CF698", VA = "0x11CF698")]
	private void Start()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x11CF770", Offset = "0x11CF770", VA = "0x11CF770")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x11CF778", Offset = "0x11CF778", VA = "0x11CF778")]
	private void Update()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x11CF960", Offset = "0x11CF960", VA = "0x11CF960")]
	public particleAttractorLinear()
	{
	}
}
[Token(Token = "0x2000005")]
[RequireComponent(typeof(ParticleSystem))]
public class particleAttractorLinearMoth : MonoBehaviour
{
	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minDistanceToMoth;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool destroyOnTarget;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onMothReached;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float speed;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int numParticlesAlive;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform target;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool invoke;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x11CF9AC", Offset = "0x11CF9AC", VA = "0x11CF9AC")]
	private void Start()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x11CFA7C", Offset = "0x11CFA7C", VA = "0x11CFA7C")]
	private void Update()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x11CFD5C", Offset = "0x11CFD5C", VA = "0x11CFD5C")]
	public particleAttractorLinearMoth()
	{
	}
}
[Token(Token = "0x2000006")]
[RequireComponent(typeof(ParticleSystem))]
public class particleAttractorMove : MonoBehaviour
{
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int numParticlesAlive;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x11CFD80", Offset = "0x11CFD80", VA = "0x11CFD80")]
	private void Start()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x11CFE58", Offset = "0x11CFE58", VA = "0x11CFE58")]
	private void Update()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x11D00C0", Offset = "0x11D00C0", VA = "0x11D00C0")]
	public particleAttractorMove()
	{
	}
}
[Token(Token = "0x2000007")]
[RequireComponent(typeof(ParticleSystem))]
public class particleAttractorSelf : MonoBehaviour
{
	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int numParticlesAlive;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x11D00D0", Offset = "0x11D00D0", VA = "0x11D00D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x11D01A8", Offset = "0x11D01A8", VA = "0x11D01A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x11D0354", Offset = "0x11D0354", VA = "0x11D0354")]
	public particleAttractorSelf()
	{
	}
}
[Token(Token = "0x2000008")]
[RequireComponent(typeof(ParticleSystem))]
public class particleAttractorSpherical : MonoBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] m_Particles;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int numParticlesAlive;

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x11D0364", Offset = "0x11D0364", VA = "0x11D0364")]
	private void Start()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x11D043C", Offset = "0x11D043C", VA = "0x11D043C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x11D05CC", Offset = "0x11D05CC", VA = "0x11D05CC")]
	public particleAttractorSpherical()
	{
	}
}
[Token(Token = "0x2000009")]
public class rotation : MonoBehaviour
{
	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float xRotation;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float yRotation;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float zRotation;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x11D05DC", Offset = "0x11D05DC", VA = "0x11D05DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x11D0634", Offset = "0x11D0634", VA = "0x11D0634")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x11D063C", Offset = "0x11D063C", VA = "0x11D063C")]
	public void clickOn()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x11D0694", Offset = "0x11D0694", VA = "0x11D0694")]
	public void clickOff()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x11D069C", Offset = "0x11D069C", VA = "0x11D069C")]
	private void rotate()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x11D06EC", Offset = "0x11D06EC", VA = "0x11D06EC")]
	public rotation()
	{
	}
}
[Token(Token = "0x200000A")]
[RequireComponent(typeof(ParticleSystem))]
[ExecuteInEditMode]
public class ParticleGroundAttractor : ParticleSystemActions
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float multiplier;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 standardRotation;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool useTransform;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ParticleSystem.Particle[] currentParticles;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_EnvironmentLayer;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private RaycastHit hit;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int numParticlesAlive;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform trans;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 particlePosition;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Vector3 particleRotation;

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x11D06F4", Offset = "0x11D06F4", VA = "0x11D06F4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x11D0774", Offset = "0x11D0774", VA = "0x11D0774")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x11D081C", Offset = "0x11D081C", VA = "0x11D081C", Slot = "6")]
	protected override void UpdateLifeEvents()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x11D0D04", Offset = "0x11D0D04", VA = "0x11D0D04")]
	public ParticleGroundAttractor()
	{
	}
}
[Token(Token = "0x200000B")]
[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(PlayMakerFSM))]
public class PlayMakerAnimatorIKProxy : MonoBehaviour
{
	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator _animator;

	[Token(Token = "0x14000001")]
	public event Action<int> OnAnimatorIKEvent
	{
		[Token(Token = "0x600002F")]
		[Address(RVA = "0x11D0D24", Offset = "0x11D0D24", VA = "0x11D0D24")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000030")]
		[Address(RVA = "0x11D0DD4", Offset = "0x11D0DD4", VA = "0x11D0DD4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x11D0E84", Offset = "0x11D0E84", VA = "0x11D0E84")]
	private void OnAnimatorIK(int layerIndex)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x11D0EA0", Offset = "0x11D0EA0", VA = "0x11D0EA0")]
	public PlayMakerAnimatorIKProxy()
	{
	}
}
[Token(Token = "0x200000C")]
[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(PlayMakerFSM))]
public class PlayMakerAnimatorMoveProxy : MonoBehaviour
{
	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool applyRootMotion;

	[Token(Token = "0x14000002")]
	public event Action OnAnimatorMoveEvent
	{
		[Token(Token = "0x6000033")]
		[Address(RVA = "0x11D0EA8", Offset = "0x11D0EA8", VA = "0x11D0EA8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000034")]
		[Address(RVA = "0x11D0F44", Offset = "0x11D0F44", VA = "0x11D0F44")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x11D0FE0", Offset = "0x11D0FE0", VA = "0x11D0FE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x11D0FE4", Offset = "0x11D0FE4", VA = "0x11D0FE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x11D0FE8", Offset = "0x11D0FE8", VA = "0x11D0FE8")]
	private void OnAnimatorMove()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x11D1004", Offset = "0x11D1004", VA = "0x11D1004")]
	public PlayMakerAnimatorMoveProxy()
	{
	}
}
[Token(Token = "0x200000D")]
public class PlayMakerAnimatorStateSynchronization : MonoBehaviour
{
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int LayerIndex;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayMakerFSM Fsm;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool EveryFrame;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool debug;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator animator;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int lastState;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int lastTransition;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<int, FsmState> fsmStateLUT;

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x11D100C", Offset = "0x11D100C", VA = "0x11D100C")]
	private void Start()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x11D11F4", Offset = "0x11D11F4", VA = "0x11D11F4")]
	private void RegisterHash(string key, FsmState state)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x11D1300", Offset = "0x11D1300", VA = "0x11D1300")]
	private void Update()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x11D1310", Offset = "0x11D1310", VA = "0x11D1310")]
	public void Synchronize()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x11D1788", Offset = "0x11D1788", VA = "0x11D1788")]
	private void SwitchState(Fsm fsm, FsmState state)
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x11D189C", Offset = "0x11D189C", VA = "0x11D189C")]
	public PlayMakerAnimatorStateSynchronization()
	{
	}
}
[Token(Token = "0x200000E")]
public class PlayMakerActionsUtils
{
	[Token(Token = "0x200000F")]
	public enum EveryFrameUpdateSelector
	{
		[Token(Token = "0x4000051")]
		OnUpdate,
		[Token(Token = "0x4000052")]
		OnLateUpdate,
		[Token(Token = "0x4000053")]
		OnFixedUpdate
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x11D18AC", Offset = "0x11D18AC", VA = "0x11D18AC")]
	public PlayMakerActionsUtils()
	{
	}
}
[Token(Token = "0x2000010")]
public static class PlayMakerUtils_Extensions
{
	[Token(Token = "0x6000040")]
	[Address(RVA = "0x11D18B4", Offset = "0x11D18B4", VA = "0x11D18B4")]
	public static int IndexOf(ArrayList target, object value)
	{
		return default(int);
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x11D1ABC", Offset = "0x11D1ABC", VA = "0x11D1ABC")]
	public static int IndexOf(ArrayList target, object value, int startIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x11D18F8", Offset = "0x11D18F8", VA = "0x11D18F8")]
	public static int IndexOf(ArrayList target, object value, int startIndex, int count)
	{
		return default(int);
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x11D1B80", Offset = "0x11D1B80", VA = "0x11D1B80")]
	public static int LastIndexOf(ArrayList target, object value)
	{
		return default(int);
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x11D1D9C", Offset = "0x11D1D9C", VA = "0x11D1D9C")]
	public static int LastIndexOf(ArrayList target, object value, int startIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x11D1BDC", Offset = "0x11D1BDC", VA = "0x11D1BDC")]
	public static int LastIndexOf(ArrayList target, object value, int startIndex, int count)
	{
		return default(int);
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x11D1DA4", Offset = "0x11D1DA4", VA = "0x11D1DA4")]
	public static string GetPath(this Transform current)
	{
		return null;
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x11D1E90", Offset = "0x11D1E90", VA = "0x11D1E90")]
	public static string GetPath(this Component component)
	{
		return null;
	}
}
[Token(Token = "0x2000011")]
public static class PlayMakerUtilsDotNetExtensions
{
	[Token(Token = "0x6000048")]
	[Address(RVA = "0x11D1EAC", Offset = "0x11D1EAC", VA = "0x11D1EAC")]
	public static bool Contains(this VariableType[] target, VariableType vType)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000012")]
public class PlayMakerUtils
{
	[Token(Token = "0x6000049")]
	[Address(RVA = "0x11D1F00", Offset = "0x11D1F00", VA = "0x11D1F00")]
	public static void CreateIfNeededGlobalEvent(string globalEventName)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x11D1FB4", Offset = "0x11D1FB4", VA = "0x11D1FB4")]
	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent, bool includeChildren)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x11D21C4", Offset = "0x11D21C4", VA = "0x11D21C4")]
	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x11D21D0", Offset = "0x11D21D0", VA = "0x11D21D0")]
	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent, FsmEventData eventData)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x11D1FC0", Offset = "0x11D1FC0", VA = "0x11D1FC0")]
	public static void SendEventToGameObject(PlayMakerFSM fromFsm, GameObject target, string fsmEvent, bool includeChildren, FsmEventData eventData)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x11D21DC", Offset = "0x11D21DC", VA = "0x11D21DC")]
	public static bool DoesTargetImplementsEvent(FsmEventTarget target, string eventName)
	{
		return default(bool);
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x11D2558", Offset = "0x11D2558", VA = "0x11D2558")]
	public static bool DoesGameObjectImplementsEvent(GameObject go, string fsmEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x11D2658", Offset = "0x11D2658", VA = "0x11D2658")]
	public static bool DoesGameObjectImplementsEvent(GameObject go, string fsmName, string fsmEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x11D23B4", Offset = "0x11D23B4", VA = "0x11D23B4")]
	public static bool DoesFsmImplementsEvent(PlayMakerFSM fsm, string fsmEvent)
	{
		return default(bool);
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x11D2790", Offset = "0x11D2790", VA = "0x11D2790")]
	public FsmEvent CreateGlobalEvent(string EventName)
	{
		return null;
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x11D27A8", Offset = "0x11D27A8", VA = "0x11D27A8")]
	public FsmEvent CreateGlobalEvent(string EventName, out bool ExistsAlready)
	{
		return null;
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x11D289C", Offset = "0x11D289C", VA = "0x11D289C")]
	public static PlayMakerFSM FindFsmOnGameObject(GameObject go, string fsmName)
	{
		return null;
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x11D29B0", Offset = "0x11D29B0", VA = "0x11D29B0")]
	public static void RefreshValueFromFsmVar(Fsm fromFsm, FsmVar fsmVar)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x11D2B10", Offset = "0x11D2B10", VA = "0x11D2B10")]
	public static object GetValueFromFsmVar(Fsm fromFsm, FsmVar fsmVar)
	{
		return null;
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x11D2FE8", Offset = "0x11D2FE8", VA = "0x11D2FE8")]
	public static bool ApplyValueToFsmVar(Fsm fromFsm, FsmVar fsmVar, object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x11D4318", Offset = "0x11D4318", VA = "0x11D4318")]
	public static float GetFloatFromObject(object _obj, VariableType targetType, bool fastProcessingIfPossible)
	{
		return default(float);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x11D47B4", Offset = "0x11D47B4", VA = "0x11D47B4")]
	public static string ParseFsmVarToString(Fsm fsm, FsmVar fsmVar)
	{
		return null;
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x11D53A0", Offset = "0x11D53A0", VA = "0x11D53A0")]
	public static string ParseValueToString(object item, bool useBytes)
	{
		return null;
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x11D53E0", Offset = "0x11D53E0", VA = "0x11D53E0")]
	public static string ParseValueToString(object item)
	{
		return null;
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x11D6A2C", Offset = "0x11D6A2C", VA = "0x11D6A2C")]
	public static object ParseValueFromString(string source, bool useBytes)
	{
		return null;
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x11D6A34", Offset = "0x11D6A34", VA = "0x11D6A34")]
	public static object ParseValueFromString(string source, VariableType type)
	{
		return null;
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x11D8544", Offset = "0x11D8544", VA = "0x11D8544")]
	public static object ParseValueFromString(string source, Type type)
	{
		return null;
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x11D6C0C", Offset = "0x11D6C0C", VA = "0x11D6C0C")]
	public static object ParseValueFromString(string source)
	{
		return null;
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x11D9F44", Offset = "0x11D9F44", VA = "0x11D9F44")]
	public PlayMakerUtils()
	{
	}
}
[Token(Token = "0x2000013")]
public class mParent : MonoBehaviour
{
	[Token(Token = "0x2000014")]
	private enum Mode
	{
		[Token(Token = "0x4000057")]
		Idle,
		[Token(Token = "0x4000058")]
		Ground,
		[Token(Token = "0x4000059")]
		Hand,
		[Token(Token = "0x400005A")]
		Back
	}

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject mParentCon;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Mode m_Mode;

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x11D9F4C", Offset = "0x11D9F4C", VA = "0x11D9F4C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x11DA088", Offset = "0x11DA088", VA = "0x11DA088")]
	public void Start()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x11DA0FC", Offset = "0x11DA0FC", VA = "0x11DA0FC")]
	public void hand()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x11DA170", Offset = "0x11DA170", VA = "0x11DA170")]
	public void back()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x11DA1E4", Offset = "0x11DA1E4", VA = "0x11DA1E4")]
	public mParent()
	{
	}
}
[Token(Token = "0x2000015")]
public class AlchemyBottle : Projectile
{
	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyModificationBase ability;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Explode")]
	public int damageAmount;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float pushbackAmount;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool additiveAnimation;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask damageMask;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float explosionRadius;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float explosionTimer;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float groundCollisionTimer;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PoolingEffect explosionVFX;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PoolingEffect failedExplosionVFX;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool vfxOnGround;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool explodeOnGround;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float particleScaleCorrect;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onExploded;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AttackScriptableObject attackType;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Shake")]
	public float minDistanceToShaked;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float distanceToShakedExplode;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject shakedParticle;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ShaterredPooling shatteredBottle;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float checkVelocityDelay;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float minVelocityShake;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent onShake;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float shakeMultiplier;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Bounce")]
	public string bouncerTag;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float bounceVelocity;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float bounceCollisionTimer;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool explodeOnBounce;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	public bool bounceOnShake;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Haptic")]
	public XRAbsoluteHaptics stopHaptic;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public XRAbsoluteHaptics shakeHaptic;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public XRAbsoluteHaptics chargedHaptic;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public XRAbsoluteHaptics explodeHaptic;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Space(10f)]
	public StudioEventEmitter loopEmitter;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public StudioEventEmitter bounceEmitter;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Space(50f)]
	[SerializeField]
	private UnlockableAbilityScriptableObject shakeAbility;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected float m_SinceFired;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected Rigidbody rigidbody;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected ThrowHandle throwHandle;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected RangeWeapon m_Shooter;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int m_EnvironmentLayer;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private bool exploding;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
	private bool isShaked;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
	private bool isDetach;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private float shakeDistance;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private XRControllerVelocity controllerVelocity;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private ThrowLabXRGrabInteractable throwInteractible;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool isMoving;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private Vector3 angularVelocity;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Vector3 velocity;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float enableTime;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool shakeUnlocked;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float startExplosionTimer;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static Collider[] m_ExplosionHitCache;

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x11DA1EC", Offset = "0x11DA1EC", VA = "0x11DA1EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x11DA324", Offset = "0x11DA324", VA = "0x11DA324")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x11DA4C4", Offset = "0x11DA4C4", VA = "0x11DA4C4")]
	private void OnDetach()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x11DA658", Offset = "0x11DA658", VA = "0x11DA658")]
	private void Update()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x11DB34C", Offset = "0x11DB34C", VA = "0x11DB34C")]
	public void OnSelectEntered()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x11DB350", Offset = "0x11DB350", VA = "0x11DB350")]
	public void OnSelectExiting()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x11DB3B8", Offset = "0x11DB3B8", VA = "0x11DB3B8")]
	public void CheckVelocity()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x11DB740", Offset = "0x11DB740", VA = "0x11DB740", Slot = "4")]
	public override void Shot(Vector3 target)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x11DB744", Offset = "0x11DB744", VA = "0x11DB744")]
	private float GetRadius()
	{
		return default(float);
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x11DB75C", Offset = "0x11DB75C", VA = "0x11DB75C")]
	private int GetDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x11DB7E0", Offset = "0x11DB7E0", VA = "0x11DB7E0")]
	private float GetForce()
	{
		return default(float);
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x11DA6BC", Offset = "0x11DA6BC", VA = "0x11DA6BC")]
	public void Explode(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x11DB7F8", Offset = "0x11DB7F8", VA = "0x11DB7F8")]
	private void OnCollisionEnter(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x11DBB30", Offset = "0x11DBB30", VA = "0x11DBB30")]
	private void SlickCollision(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x11DB8EC", Offset = "0x11DB8EC", VA = "0x11DB8EC")]
	private void BounceCollision(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x11DBB4C", Offset = "0x11DBB4C", VA = "0x11DBB4C")]
	public AlchemyBottle()
	{
	}
}
[Token(Token = "0x2000016")]
public class AlchemyBottleShattered : ShatteredInteractible
{
	[Token(Token = "0x6000077")]
	[Address(RVA = "0x11DBC78", Offset = "0x11DBC78", VA = "0x11DBC78")]
	public AlchemyBottleShattered()
	{
	}
}
[Token(Token = "0x2000017")]
[DefaultExecutionOrder(-1)]
public class AlchemyBottleSpawner : PoolSpawner
{
	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform _target;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int limit;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Component _prefab;

	[Token(Token = "0x17000001")]
	public override int Limit
	{
		[Token(Token = "0x6000078")]
		[Address(RVA = "0x11DBC80", Offset = "0x11DBC80", VA = "0x11DBC80", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000002")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6000079")]
		[Address(RVA = "0x11DBC88", Offset = "0x11DBC88", VA = "0x11DBC88", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000003")]
	public override Component Prefab
	{
		[Token(Token = "0x600007A")]
		[Address(RVA = "0x11DBC90", Offset = "0x11DBC90", VA = "0x11DBC90", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000004")]
	public override Transform Target
	{
		[Token(Token = "0x600007B")]
		[Address(RVA = "0x11DBC98", Offset = "0x11DBC98", VA = "0x11DBC98", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x11DBD50", Offset = "0x11DBD50", VA = "0x11DBD50", Slot = "10")]
	public virtual bool TrySpawnBottle(AlchemyBottle prefab, out AlchemyBottle result)
	{
		return default(bool);
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x11DBE58", Offset = "0x11DBE58", VA = "0x11DBE58")]
	public AlchemyBottleSpawner()
	{
	}
}
[Token(Token = "0x2000018")]
public class AlchemyBottleUI : MonoBehaviour
{
	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AnimationCurve fillCurve;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer rend;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color standardEffectColor;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Color standardEffectFillColor;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Color cantAlchemyEffectColor;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Color cantAlchemyEffectFillColor;

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x11DBE68", Offset = "0x11DBE68", VA = "0x11DBE68")]
	public void Show()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x11DC070", Offset = "0x11DC070", VA = "0x11DC070")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x11DC094", Offset = "0x11DC094", VA = "0x11DC094")]
	private void Update()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x11DBEC4", Offset = "0x11DBEC4", VA = "0x11DBEC4")]
	private void SetBootleParameters(float fill, Color liquidColor, Color surfaceColor, Color fresnelColor)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x11DC6B0", Offset = "0x11DC6B0", VA = "0x11DC6B0")]
	public AlchemyBottleUI()
	{
	}
}
[Token(Token = "0x2000019")]
public class AlchemyEvent : UnityEvent<AlchemyModificationBase>
{
	[Token(Token = "0x6000083")]
	[Address(RVA = "0x11DC6B8", Offset = "0x11DC6B8", VA = "0x11DC6B8")]
	public AlchemyEvent()
	{
	}
}
[Token(Token = "0x200001A")]
public class AlchemyChangedEvent : UnityEvent<SwipeDirection, AlchemyModificationBase>
{
	[Token(Token = "0x6000084")]
	[Address(RVA = "0x11DC700", Offset = "0x11DC700", VA = "0x11DC700")]
	public AlchemyChangedEvent()
	{
	}
}
[Token(Token = "0x200001B")]
public class AlchemyController : MonoBehaviour
{
	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected AlchemyDatabase model;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected List<AlchemyData> alchemyItems;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AlchemyGesture gestureLogic;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Events")]
	public AlchemyEvent onBottleCrafted;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AlchemyEvent onBottleGrabbed;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onBottleThrowed;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AlchemyChangedEvent onAlchemyChanged;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AlchemyModificationBase currentBottle;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int panel;

	[Token(Token = "0x17000005")]
	public AlchemyModificationBase CurrentBottle
	{
		[Token(Token = "0x6000085")]
		[Address(RVA = "0x11DC748", Offset = "0x11DC748", VA = "0x11DC748")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000006")]
	public List<AlchemyData> Alchemies
	{
		[Token(Token = "0x6000086")]
		[Address(RVA = "0x11DC750", Offset = "0x11DC750", VA = "0x11DC750")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000007")]
	public AlchemyDatabase Database
	{
		[Token(Token = "0x6000087")]
		[Address(RVA = "0x11DC758", Offset = "0x11DC758", VA = "0x11DC758")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	public AlchemyGesture Gesture
	{
		[Token(Token = "0x6000088")]
		[Address(RVA = "0x11DC760", Offset = "0x11DC760", VA = "0x11DC760")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x11DC768", Offset = "0x11DC768", VA = "0x11DC768")]
	public AlchemyModificationBase Alchemy(SwipeDirection gesture)
	{
		return null;
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x11DC8A0", Offset = "0x11DC8A0", VA = "0x11DC8A0")]
	public AlchemyModificationBase Alchemy(AlchemyModificationBase bottle)
	{
		return null;
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x11DC77C", Offset = "0x11DC77C", VA = "0x11DC77C")]
	public AlchemyModificationBase GetBottle(SwipeDirection gesture)
	{
		return null;
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x11DC988", Offset = "0x11DC988", VA = "0x11DC988")]
	public void OnCraftBottleCompleted(AlchemyModificationBase bottle)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x11DC9F8", Offset = "0x11DC9F8", VA = "0x11DC9F8")]
	public void OnGrabBottle()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x11DCA54", Offset = "0x11DCA54", VA = "0x11DCA54")]
	public void OnThrowBottle()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x11DCA88", Offset = "0x11DCA88", VA = "0x11DCA88")]
	public bool IsAlchemyUnlocked(AlchemyModificationBase bottle)
	{
		return default(bool);
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x11DCB90", Offset = "0x11DCB90", VA = "0x11DCB90")]
	public void UnlockBottle(AlchemyModificationBase bottle)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x11DCC58", Offset = "0x11DCC58", VA = "0x11DCC58")]
	public bool CanCast(SwipeDirection gesture)
	{
		return default(bool);
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x11DC31C", Offset = "0x11DC31C", VA = "0x11DC31C")]
	public bool CanCast(AlchemyModificationBase bottle)
	{
		return default(bool);
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x11DCD00", Offset = "0x11DCD00", VA = "0x11DCD00")]
	public void InsertAlchemy(SwipeDirection direction, AlchemyModificationBase newAlchemy)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x11DCDB0", Offset = "0x11DCDB0", VA = "0x11DCDB0")]
	public void SetPanel(int newPanel)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x11DCDB8", Offset = "0x11DCDB8", VA = "0x11DCDB8")]
	public AlchemyController()
	{
	}
}
[Serializable]
[Token(Token = "0x200001E")]
public class AlchemyData
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SwipeDirection direction;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyModificationBase alchemy;

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x11DCF48", Offset = "0x11DCF48", VA = "0x11DCF48")]
	public AlchemyData()
	{
	}
}
[Token(Token = "0x200001F")]
public class AlchemyFillAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000020")]
	public struct AlchemyFillData
	{
		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AlchemyModificationBase alchemy;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public StudioEventEmitter emitter;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FMODStudioParameterSetterUpdate updateLogic;
	}

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyFillData[] alchemy;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AlchemyModificationBase lastAlchemy;

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x11DCF50", Offset = "0x11DCF50", VA = "0x11DCF50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x11DCFFC", Offset = "0x11DCFFC", VA = "0x11DCFFC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x11DD000", Offset = "0x11DD000", VA = "0x11DD000")]
	private void Update()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x11DCF70", Offset = "0x11DCF70", VA = "0x11DCF70")]
	private void DisableAll()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x11DD10C", Offset = "0x11DD10C", VA = "0x11DD10C")]
	private void PlayAlchemy()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x11DD244", Offset = "0x11DD244", VA = "0x11DD244")]
	public AlchemyFillAudio()
	{
	}
}
[Token(Token = "0x2000021")]
public class AlchemyGesture : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000022")]
	public struct AlchemyGestureData
	{
		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AlchemyModificationBase alchemy;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform target;
	}

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AlchemyGestureData[] gestures;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform hand;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform bottle;

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x11DD24C", Offset = "0x11DD24C", VA = "0x11DD24C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x11DC1F0", Offset = "0x11DC1F0", VA = "0x11DC1F0")]
	public AlchemyModificationBase GetClosestAlchemy()
	{
		return null;
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x11DC518", Offset = "0x11DC518", VA = "0x11DC518")]
	public float GetProgress(AlchemyModificationBase alchemy)
	{
		return default(float);
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x11DD330", Offset = "0x11DD330", VA = "0x11DD330")]
	public float GetSingualarityProgress(AlchemyModificationBase alchemy)
	{
		return default(float);
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x11DD4F4", Offset = "0x11DD4F4", VA = "0x11DD4F4")]
	public Vector3 GetBottlePosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x11DD510", Offset = "0x11DD510", VA = "0x11DD510")]
	public AlchemyGesture()
	{
	}
}
[Serializable]
[Token(Token = "0x2000023")]
public class ModificationEvent : UnityEvent<ModificationScriptableObject>
{
	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x11DD518", Offset = "0x11DD518", VA = "0x11DD518")]
	public ModificationEvent()
	{
	}
}
[Token(Token = "0x2000024")]
public class AlchemyModificationReceiver : ModificationReceiverBase
{
	[Token(Token = "0x2000025")]
	public enum VFXReactionType
	{
		[Token(Token = "0x40000BA")]
		AtCollision,
		[Token(Token = "0x40000BB")]
		ToGround,
		[Token(Token = "0x40000BC")]
		CustomPoint
	}

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ModificationEvent onAlchemyPreAdded;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ModificationEvent onAlchemyAdded;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ModificationEvent onAlchemyReseted;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ModificationEvent onAlchemyRemoved;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool showVFX;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VFXReactionType vfxType;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform customVFXPoint;

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x11DD560", Offset = "0x11DD560", VA = "0x11DD560", Slot = "6")]
	public override void AddModification(ModificationSenderBase.ModificationSignal modificationSignalEvent)
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x11DD998", Offset = "0x11DD998", VA = "0x11DD998", Slot = "8")]
	public override bool RemoveModification(ModificationScriptableObject modification)
	{
		return default(bool);
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x11DDA10", Offset = "0x11DDA10", VA = "0x11DDA10")]
	public AlchemyModificationReceiver()
	{
	}
}
[Token(Token = "0x2000027")]
public class AlchemyModificationSender : ModificationSenderBase
{
	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x11DDB10", Offset = "0x11DDB10", VA = "0x11DDB10", Slot = "8")]
	protected override ModificationReceiverBase GetModificationReceiver(Collider coll)
	{
		return null;
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x11DDB60", Offset = "0x11DDB60", VA = "0x11DDB60")]
	public AlchemyModificationSender()
	{
	}
}
[Token(Token = "0x2000028")]
public class AlchemyTrail : MonoBehaviour
{
	[Token(Token = "0x2000029")]
	[CompilerGenerated]
	private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AlchemyTrail <>4__this;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B5")]
			[Address(RVA = "0x11DDE88", Offset = "0x11DDE88", VA = "0x11DDE88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B7")]
			[Address(RVA = "0x11DDED0", Offset = "0x11DDED0", VA = "0x11DDED0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x11DDBDC", Offset = "0x11DDBDC", VA = "0x11DDBDC")]
		[DebuggerHidden]
		public <Start>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x11DDC1C", Offset = "0x11DDC1C", VA = "0x11DDC1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x11DDC20", Offset = "0x11DDC20", VA = "0x11DDC20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x11DDE90", Offset = "0x11DDE90", VA = "0x11DDE90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveDuration;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool rotate;

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x11DDB68", Offset = "0x11DDB68", VA = "0x11DDB68")]
	[IteratorStateMachine(typeof(<Start>d__2))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x11DDC04", Offset = "0x11DDC04", VA = "0x11DDC04")]
	public AlchemyTrail()
	{
	}
}
[Token(Token = "0x200002A")]
public class BottleThrowHandle : ThrowHandle
{
	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public AlchemyModificationBase alchemy;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public LayerMask obstacleMask;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private readonly Vector3 lineOffset;

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x11DDED8", Offset = "0x11DDED8", VA = "0x11DDED8", Slot = "5")]
	protected override ThrowTarget FindBestGazeBasedThrowTarget(List<ThrowTarget> targets)
	{
		return null;
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x11DE6BC", Offset = "0x11DE6BC", VA = "0x11DE6BC", Slot = "4")]
	public override void UpdateVelocity()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x11DE984", Offset = "0x11DE984", VA = "0x11DE984")]
	public BottleThrowHandle()
	{
	}
}
[Token(Token = "0x200002C")]
public class CorrosionEnemyModifier : IntervalDamageModifier
{
	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x11DEBE8", Offset = "0x11DEBE8", VA = "0x11DEBE8")]
	public CorrosionEnemyModifier()
	{
	}
}
[Token(Token = "0x200002D")]
public class CorrosionEnvironmentModifier : ModifierBase
{
	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject damager;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform renderersParent;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent onCorrosionDeactivate;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool ignoreNextDeactivateEvent;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent onCorrosionActivate;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool ignoreNextActivateEvent;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Renderer[] renderers;

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x11DEBF0", Offset = "0x11DEBF0", VA = "0x11DEBF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x11DEC50", Offset = "0x11DEC50", VA = "0x11DEC50", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x11DED54", Offset = "0x11DED54", VA = "0x11DED54", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x11DEE54", Offset = "0x11DEE54", VA = "0x11DEE54")]
	public void ResetMaterial()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x11DEEF0", Offset = "0x11DEEF0", VA = "0x11DEEF0")]
	public CorrosionEnvironmentModifier()
	{
	}
}
[Token(Token = "0x200002E")]
public class CrystalEnemyModifier : ModifierBase
{
	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LaserWeapon laser;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LaserWeapon laserHelper;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform moth;

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x11DEEF8", Offset = "0x11DEEF8", VA = "0x11DEEF8", Slot = "11")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x11DF1A0", Offset = "0x11DF1A0", VA = "0x11DF1A0", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x11DF2C0", Offset = "0x11DF2C0", VA = "0x11DF2C0", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x11DF380", Offset = "0x11DF380", VA = "0x11DF380")]
	public CrystalEnemyModifier()
	{
	}
}
[Token(Token = "0x200002F")]
[RequireComponent(typeof(CrystalModifierNode))]
public class CrystalModifier : ModifierBase
{
	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CrystalModifierNode _rootNode;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool lockWhenConnectedToNextRoot;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected UnityEvent onConnectedToNextRoot;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool poweredOnStart;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected UnityEvent onPowerOn;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected UnityEvent onPowerOff;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected float onNodeConnectedTimeIncrease;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected UnityEvent onNodeConnected;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool _powered;

	[Token(Token = "0x1700000B")]
	public bool Powered
	{
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x11DF388", Offset = "0x11DF388", VA = "0x11DF388")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x11DF390", Offset = "0x11DF390", VA = "0x11DF390")]
		set
		{
		}
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x11DF3C8", Offset = "0x11DF3C8", VA = "0x11DF3C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x11DF484", Offset = "0x11DF484", VA = "0x11DF484")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x11DF578", Offset = "0x11DF578", VA = "0x11DF578")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x11DF60C", Offset = "0x11DF60C", VA = "0x11DF60C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x11DF658", Offset = "0x11DF658", VA = "0x11DF658", Slot = "4")]
	public override void Init(ModificationReceiverBase owner)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x11DF660", Offset = "0x11DF660", VA = "0x11DF660", Slot = "11")]
	protected virtual void SetupCrystalModifier()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x11DF728", Offset = "0x11DF728", VA = "0x11DF728", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x11DF804", Offset = "0x11DF804", VA = "0x11DF804", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x11DFB30", Offset = "0x11DFB30", VA = "0x11DFB30", Slot = "9")]
	public override void Deactivate()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x11DFB34", Offset = "0x11DFB34", VA = "0x11DFB34")]
	public void ResetCrystalModifier()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x11DFB80", Offset = "0x11DFB80", VA = "0x11DFB80")]
	private void OnChainModifiedListener()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x11DF868", Offset = "0x11DF868", VA = "0x11DF868")]
	private bool TryGetNextRoot(out CrystalModifierNode nextRoot)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x11DFC74", Offset = "0x11DFC74", VA = "0x11DFC74")]
	public CrystalModifier()
	{
	}
}
[Token(Token = "0x2000030")]
[RequireComponent(typeof(Collider))]
[DisallowMultipleComponent]
public class CrystalModifierNode : MonoBehaviour
{
	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CrystalModifierNode _source;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CrystalModifierNode _target;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LaserWeapon laserWeapon;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float delay;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform _laserReceivePosition;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform _laserEmitPosition;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onActivate;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onDeactivate;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public UnityEvent onChainModified;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Optional Config")]
	[SerializeField]
	protected bool customLaserFollower;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected Transform laserFollower;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private bool stopNode;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected UnityEvent onStopNodeReached;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected UnityEvent onNodeConnected;

	[Token(Token = "0x1700000C")]
	public bool IsActive
	{
		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x11DFC84", Offset = "0x11DFC84", VA = "0x11DFC84")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x11DFC8C", Offset = "0x11DFC8C", VA = "0x11DFC8C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public bool Locked
	{
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x11DFC98", Offset = "0x11DFC98", VA = "0x11DFC98")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x11DFCA0", Offset = "0x11DFCA0", VA = "0x11DFCA0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public bool IsStopNode
	{
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x11DFCAC", Offset = "0x11DFCAC", VA = "0x11DFCAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x11DFCB4", Offset = "0x11DFCB4", VA = "0x11DFCB4")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public CrystalModifierNode Source
	{
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x11DFCC0", Offset = "0x11DFCC0", VA = "0x11DFCC0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x11DFCC8", Offset = "0x11DFCC8", VA = "0x11DFCC8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public CrystalModifierNode Target
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x11DFE60", Offset = "0x11DFE60", VA = "0x11DFE60")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x11DFE68", Offset = "0x11DFE68", VA = "0x11DFE68")]
		private set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public Transform LaserReceivePosition
	{
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x11DFF80", Offset = "0x11DFF80", VA = "0x11DFF80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000012")]
	public Transform LaserEmitPosition
	{
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x11E0000", Offset = "0x11E0000", VA = "0x11E0000")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000013")]
	protected Transform FollowTarget
	{
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x11E01F8", Offset = "0x11E01F8", VA = "0x11E01F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x11DFDCC", Offset = "0x11DFDCC", VA = "0x11DFDCC")]
	protected void ChainModified(bool modifiedAhead = true)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x11E0080", Offset = "0x11E0080", VA = "0x11E0080")]
	private void NotifyChain(ref List<CrystalModifierNode> notifiedModifiers, bool modifiedAhead)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x11E033C", Offset = "0x11E033C", VA = "0x11E033C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x11E04F8", Offset = "0x11E04F8", VA = "0x11E04F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x11E0644", Offset = "0x11E0644", VA = "0x11E0644")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x11E0734", Offset = "0x11E0734", VA = "0x11E0734")]
	private void OnColliderLaserHit(Collider collider)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x11DF764", Offset = "0x11DF764", VA = "0x11DF764")]
	public void Activate()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x11DFA40", Offset = "0x11DFA40", VA = "0x11DFA40")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x11E0844", Offset = "0x11E0844", VA = "0x11E0844")]
	public void PowerNode(CrystalModifierNode targetNode)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x11E094C", Offset = "0x11E094C", VA = "0x11E094C")]
	public void ResetNodeForward()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x11E0A2C", Offset = "0x11E0A2C", VA = "0x11E0A2C")]
	public CrystalModifierNode()
	{
	}
}
[Token(Token = "0x2000031")]
public class FragileEnemyModifier : ModifierBase
{
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Damageable damageable;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public EnemyBehaviour enemyBehaviour;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Range(0f, 1f)]
	public float enemySpeed;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Range(0f, 2f)]
	public float armor;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] lightCones;

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x11E1A34", Offset = "0x11E1A34", VA = "0x11E1A34", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x11E1AD8", Offset = "0x11E1AD8", VA = "0x11E1AD8", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x11E1B7C", Offset = "0x11E1B7C", VA = "0x11E1B7C")]
	public FragileEnemyModifier()
	{
	}
}
[Token(Token = "0x2000032")]
public class FragileEnvironmentModifier : ModifierBase
{
	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Damageable damageable;

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x11E1B90", Offset = "0x11E1B90", VA = "0x11E1B90", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x11E1C14", Offset = "0x11E1C14", VA = "0x11E1C14", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x11E1C98", Offset = "0x11E1C98", VA = "0x11E1C98")]
	public FragileEnvironmentModifier()
	{
	}
}
[Token(Token = "0x2000033")]
public class GlueEnemyModifier : ModifierBase
{
	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ReadOnly]
	public float hits;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float hitTimeReduced;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public EnemyBehaviour enemy;

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x11E1CA0", Offset = "0x11E1CA0", VA = "0x11E1CA0", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x11E1DC8", Offset = "0x11E1DC8", VA = "0x11E1DC8", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x11E1EA4", Offset = "0x11E1EA4", VA = "0x11E1EA4")]
	private void OnTakeDamage()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x11E1EB8", Offset = "0x11E1EB8", VA = "0x11E1EB8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x11E1F50", Offset = "0x11E1F50", VA = "0x11E1F50")]
	public GlueEnemyModifier()
	{
	}
}
[Token(Token = "0x2000034")]
public class GluePlatformEnvironmentModifier : ModifierBase
{
	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Flowchart platformLogic;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x11E1F60", Offset = "0x11E1F60", VA = "0x11E1F60", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x11E1FC8", Offset = "0x11E1FC8", VA = "0x11E1FC8", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x11E2030", Offset = "0x11E2030", VA = "0x11E2030")]
	public GluePlatformEnvironmentModifier()
	{
	}
}
[Token(Token = "0x2000035")]
public class ManyFacesFragileModifier : FragileEnemyModifier
{
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Damageable masksDamageable;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public EnemyCloneController clone;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x11E2038", Offset = "0x11E2038", VA = "0x11E2038", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x11E230C", Offset = "0x11E230C", VA = "0x11E230C", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x11E2354", Offset = "0x11E2354", VA = "0x11E2354")]
	public void TakeMasksDamage()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x11E25C0", Offset = "0x11E25C0", VA = "0x11E25C0")]
	public ManyFacesFragileModifier()
	{
	}
}
[Token(Token = "0x2000036")]
public class ManyFacesGlueReceiver : MonoBehaviour
{
	[Token(Token = "0x6000102")]
	[Address(RVA = "0x11E25D4", Offset = "0x11E25D4", VA = "0x11E25D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x11E25D8", Offset = "0x11E25D8", VA = "0x11E25D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x11E25DC", Offset = "0x11E25DC", VA = "0x11E25DC")]
	public ManyFacesGlueReceiver()
	{
	}
}
[Token(Token = "0x2000037")]
public class ModifierAudio : MonoBehaviour
{
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ModifierBase modifier;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StudioEventEmitter emitter;

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x11E25E4", Offset = "0x11E25E4", VA = "0x11E25E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x11E271C", Offset = "0x11E271C", VA = "0x11E271C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x11E2854", Offset = "0x11E2854", VA = "0x11E2854")]
	private void PlayAudio()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x11E28D4", Offset = "0x11E28D4", VA = "0x11E28D4")]
	private void StopAudio()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x11E2954", Offset = "0x11E2954", VA = "0x11E2954")]
	public ModifierAudio()
	{
	}
}
[Token(Token = "0x2000038")]
public class TankFragileModifier : FragileEnemyModifier
{
	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject headDamageable;

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x11E295C", Offset = "0x11E295C", VA = "0x11E295C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x11E2998", Offset = "0x11E2998", VA = "0x11E2998", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x11E29D4", Offset = "0x11E29D4", VA = "0x11E29D4")]
	public void OnHeadDestroy()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x11E2A08", Offset = "0x11E2A08", VA = "0x11E2A08")]
	public TankFragileModifier()
	{
	}
}
[Token(Token = "0x2000039")]
public class WobbleEnemyModifier : ModifierBase
{
	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public EnemyBehaviour enemy;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float multipier;

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x11E2A1C", Offset = "0x11E2A1C", VA = "0x11E2A1C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x11E2A88", Offset = "0x11E2A88", VA = "0x11E2A88", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x11E2AF4", Offset = "0x11E2AF4", VA = "0x11E2AF4")]
	public WobbleEnemyModifier()
	{
	}
}
[Token(Token = "0x200003A")]
public class WobbleEnvironmentModifier : ModifierBase
{
	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public WobbleDamageable damageable;

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x11E2B08", Offset = "0x11E2B08", VA = "0x11E2B08", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x11E2B30", Offset = "0x11E2B30", VA = "0x11E2B30", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x11E2B54", Offset = "0x11E2B54", VA = "0x11E2B54")]
	public WobbleEnvironmentModifier()
	{
	}
}
[Token(Token = "0x200003B")]
public enum MusicState
{
	[Token(Token = "0x4000101")]
	Quiet,
	[Token(Token = "0x4000102")]
	Exploration,
	[Token(Token = "0x4000103")]
	Combat
}
[Token(Token = "0x200003C")]
public enum CombatMusicState
{
	[Token(Token = "0x4000105")]
	Random,
	[Token(Token = "0x4000106")]
	First,
	[Token(Token = "0x4000107")]
	Second
}
[Token(Token = "0x200003D")]
public enum GameAudioState
{
	[Token(Token = "0x4000109")]
	STANDARD,
	[Token(Token = "0x400010A")]
	PAUSE,
	[Token(Token = "0x400010B")]
	DIALOGUE,
	[Token(Token = "0x400010C")]
	CUTSCENE
}
[Token(Token = "0x200003E")]
public class AudioPooledEmitter : PoolSpawner
{
	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private StudioEventEmitter customEventPrefab;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("Without handling emitter it will be only Enabled and Disabled")]
	public bool HandleEventEmitter;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[EventRef]
	[Header("Event handling configuration")]
	public string Event;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("Disposes emitter right after playing it.")]
	public bool IsOneshot;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool PlayEmitterOnSpawn;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool StopEmitterOnDispose;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private StudioEventEmitter _currentEmitter;

	[Token(Token = "0x17000014")]
	public override int Limit
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0x11E2B5C", Offset = "0x11E2B5C", VA = "0x11E2B5C", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000015")]
	public override Component Prefab
	{
		[Token(Token = "0x6000115")]
		[Address(RVA = "0x11E2B64", Offset = "0x11E2B64", VA = "0x11E2B64", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000016")]
	public override Transform Target
	{
		[Token(Token = "0x6000116")]
		[Address(RVA = "0x11E2C28", Offset = "0x11E2C28", VA = "0x11E2C28", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000017")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6000117")]
		[Address(RVA = "0x11E2C48", Offset = "0x11E2C48", VA = "0x11E2C48", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x11E2C50", Offset = "0x11E2C50", VA = "0x11E2C50")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x11E2D0C", Offset = "0x11E2D0C", VA = "0x11E2D0C")]
	[ContextMenu("PlayAudio")]
	public void PlayAudio()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x11E2E48", Offset = "0x11E2E48", VA = "0x11E2E48")]
	[ContextMenu("StopAudio")]
	public void StopAudio()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x11E2EEC", Offset = "0x11E2EEC", VA = "0x11E2EEC")]
	public AudioPooledEmitter()
	{
	}
}
[Token(Token = "0x200003F")]
public class BhapticEventAlchemistVO : BhapticEventBase
{
	[Token(Token = "0x17000018")]
	public override string EventID
	{
		[Token(Token = "0x600011C")]
		[Address(RVA = "0x11E2F54", Offset = "0x11E2F54", VA = "0x11E2F54", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x11E2F94", Offset = "0x11E2F94", VA = "0x11E2F94", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x11E3030", Offset = "0x11E3030", VA = "0x11E3030", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x11E30CC", Offset = "0x11E30CC", VA = "0x11E30CC")]
	public BhapticEventAlchemistVO()
	{
	}
}
[Token(Token = "0x2000040")]
public abstract class BhapticEventBase : MonoBehaviour
{
	[Token(Token = "0x17000019")]
	public abstract string EventID
	{
		[Token(Token = "0x6000120")]
		get;
	}

	[Token(Token = "0x6000121")]
	public abstract void RegisterListener();

	[Token(Token = "0x6000122")]
	public abstract void UnregisterListener();

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x11E30DC", Offset = "0x11E30DC", VA = "0x11E30DC", Slot = "7")]
	public virtual void Play()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x11E30D4", Offset = "0x11E30D4", VA = "0x11E30D4")]
	protected BhapticEventBase()
	{
	}
}
[Token(Token = "0x2000041")]
public class BhapticEventInscriptionRead : BhapticEventBase
{
	[Token(Token = "0x1700001A")]
	public override string EventID
	{
		[Token(Token = "0x6000125")]
		[Address(RVA = "0x11E314C", Offset = "0x11E314C", VA = "0x11E314C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001B")]
	public string ReadingEventID
	{
		[Token(Token = "0x6000126")]
		[Address(RVA = "0x11E318C", Offset = "0x11E318C", VA = "0x11E318C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x11E31CC", Offset = "0x11E31CC", VA = "0x11E31CC", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x11E32F8", Offset = "0x11E32F8", VA = "0x11E32F8", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x11E3424", Offset = "0x11E3424", VA = "0x11E3424")]
	public void OnReading()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x11E34FC", Offset = "0x11E34FC", VA = "0x11E34FC")]
	public void OnReadingStopped()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x11E35D4", Offset = "0x11E35D4", VA = "0x11E35D4")]
	public BhapticEventInscriptionRead()
	{
	}
}
[Token(Token = "0x2000042")]
public class BhapticEventMixtureCreated : BhapticEventBase
{
	[Token(Token = "0x1700001C")]
	public override string EventID
	{
		[Token(Token = "0x600012C")]
		[Address(RVA = "0x11E35DC", Offset = "0x11E35DC", VA = "0x11E35DC", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x11E361C", Offset = "0x11E361C", VA = "0x11E361C", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x11E36E0", Offset = "0x11E36E0", VA = "0x11E36E0", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x11E37A4", Offset = "0x11E37A4", VA = "0x11E37A4")]
	private void OnMixtureCreated(AlchemyModificationBase obj)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x11E37B0", Offset = "0x11E37B0", VA = "0x11E37B0")]
	public BhapticEventMixtureCreated()
	{
	}
}
[Token(Token = "0x2000043")]
public class BhapticEventMixtureWobble : BhapticEventBase
{
	[Token(Token = "0x1700001D")]
	public override string EventID
	{
		[Token(Token = "0x6000131")]
		[Address(RVA = "0x11E37B8", Offset = "0x11E37B8", VA = "0x11E37B8", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x11E37F8", Offset = "0x11E37F8", VA = "0x11E37F8", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x11E3900", Offset = "0x11E3900", VA = "0x11E3900", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x11E3A08", Offset = "0x11E3A08", VA = "0x11E3A08")]
	private void OnMixtureStarted(AlchemyModificationBase alchemy)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x11E3A78", Offset = "0x11E3A78", VA = "0x11E3A78")]
	private void MixtureMoveStopped(AlchemyModificationBase alchemy)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x11E3A84", Offset = "0x11E3A84", VA = "0x11E3A84")]
	public BhapticEventMixtureWobble()
	{
	}
}
[Token(Token = "0x2000044")]
public class BhapticEventMothAddHealth : BhapticEventBase
{
	[Token(Token = "0x1700001E")]
	public override string EventID
	{
		[Token(Token = "0x6000137")]
		[Address(RVA = "0x11E3A8C", Offset = "0x11E3A8C", VA = "0x11E3A8C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x11E3ACC", Offset = "0x11E3ACC", VA = "0x11E3ACC", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x11E3B68", Offset = "0x11E3B68", VA = "0x11E3B68", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x11E3C04", Offset = "0x11E3C04", VA = "0x11E3C04")]
	public BhapticEventMothAddHealth()
	{
	}
}
[Token(Token = "0x2000045")]
public class BhapticEventMothCheckpointReached : BhapticEventBase
{
	[Token(Token = "0x1700001F")]
	public override string EventID
	{
		[Token(Token = "0x600013B")]
		[Address(RVA = "0x11E3C0C", Offset = "0x11E3C0C", VA = "0x11E3C0C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x11E3C4C", Offset = "0x11E3C4C", VA = "0x11E3C4C", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x11E3CE8", Offset = "0x11E3CE8", VA = "0x11E3CE8", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x11E3D84", Offset = "0x11E3D84", VA = "0x11E3D84")]
	public BhapticEventMothCheckpointReached()
	{
	}
}
[Token(Token = "0x2000046")]
public class BhapticEventMothDie : BhapticEventBase
{
	[Token(Token = "0x17000020")]
	public override string EventID
	{
		[Token(Token = "0x600013F")]
		[Address(RVA = "0x11E3D8C", Offset = "0x11E3D8C", VA = "0x11E3D8C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x11E3DCC", Offset = "0x11E3DCC", VA = "0x11E3DCC", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x11E3E68", Offset = "0x11E3E68", VA = "0x11E3E68", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x11E3F04", Offset = "0x11E3F04", VA = "0x11E3F04")]
	public BhapticEventMothDie()
	{
	}
}
[Token(Token = "0x2000047")]
public class BhapticEventMothRespawn : BhapticEventBase
{
	[Token(Token = "0x17000021")]
	public override string EventID
	{
		[Token(Token = "0x6000143")]
		[Address(RVA = "0x11E3F0C", Offset = "0x11E3F0C", VA = "0x11E3F0C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x11E3F4C", Offset = "0x11E3F4C", VA = "0x11E3F4C", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x11E3FE8", Offset = "0x11E3FE8", VA = "0x11E3FE8", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x11E4084", Offset = "0x11E4084", VA = "0x11E4084")]
	public BhapticEventMothRespawn()
	{
	}
}
[Token(Token = "0x2000048")]
public class BhapticEventMothTakeDamage : BhapticEventBase
{
	[Token(Token = "0x17000022")]
	public override string EventID
	{
		[Token(Token = "0x6000147")]
		[Address(RVA = "0x11E408C", Offset = "0x11E408C", VA = "0x11E408C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x11E40CC", Offset = "0x11E40CC", VA = "0x11E40CC", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x11E4168", Offset = "0x11E4168", VA = "0x11E4168", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x11E4204", Offset = "0x11E4204", VA = "0x11E4204")]
	public BhapticEventMothTakeDamage()
	{
	}
}
[Token(Token = "0x2000049")]
public class BhapticEventResourceCollect : BhapticEventBase
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Resource salt;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Resource sulfur;

	[Token(Token = "0x17000023")]
	public override string EventID
	{
		[Token(Token = "0x600014B")]
		[Address(RVA = "0x11E420C", Offset = "0x11E420C", VA = "0x11E420C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000024")]
	public string SaltEventID
	{
		[Token(Token = "0x600014C")]
		[Address(RVA = "0x11E424C", Offset = "0x11E424C", VA = "0x11E424C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000025")]
	public string SulfurEventID
	{
		[Token(Token = "0x600014D")]
		[Address(RVA = "0x11E428C", Offset = "0x11E428C", VA = "0x11E428C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x11E42CC", Offset = "0x11E42CC", VA = "0x11E42CC", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x11E4390", Offset = "0x11E4390", VA = "0x11E4390", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x11E4454", Offset = "0x11E4454", VA = "0x11E4454")]
	private void OnResourceCollected(XRCollectableResourceGroup resourceGroup, LimitedResource resource)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x11E45AC", Offset = "0x11E45AC", VA = "0x11E45AC")]
	private void OnResourceAdded(AmountResources resource)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x11E4704", Offset = "0x11E4704", VA = "0x11E4704")]
	public BhapticEventResourceCollect()
	{
	}
}
[Token(Token = "0x200004A")]
public class BhapticEventUICombat : BhapticEventBase
{
	[Token(Token = "0x17000026")]
	public override string EventID
	{
		[Token(Token = "0x6000153")]
		[Address(RVA = "0x11E470C", Offset = "0x11E470C", VA = "0x11E470C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x11E474C", Offset = "0x11E474C", VA = "0x11E474C", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x11E4A60", Offset = "0x11E4A60", VA = "0x11E4A60", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x11E4D74", Offset = "0x11E4D74", VA = "0x11E4D74")]
	private void OnMothStab1()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x11E4DDC", Offset = "0x11E4DDC", VA = "0x11E4DDC")]
	private void OnMothStab2()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x11E4E44", Offset = "0x11E4E44", VA = "0x11E4E44")]
	private void OnMothStab3()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x11E4EAC", Offset = "0x11E4EAC", VA = "0x11E4EAC")]
	private void OnMothStabFinisher()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x11E4F14", Offset = "0x11E4F14", VA = "0x11E4F14")]
	private void OnMothSlash1()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x11E4F7C", Offset = "0x11E4F7C", VA = "0x11E4F7C")]
	private void OnMothSlash2()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x11E4FE4", Offset = "0x11E4FE4", VA = "0x11E4FE4")]
	private void OnMothSlash3()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x11E504C", Offset = "0x11E504C", VA = "0x11E504C")]
	private void OnMothSlash4()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x11E50B4", Offset = "0x11E50B4", VA = "0x11E50B4")]
	private void OnMothSlash5()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x11E511C", Offset = "0x11E511C", VA = "0x11E511C")]
	private void OnMothSlash6()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x11E5184", Offset = "0x11E5184", VA = "0x11E5184")]
	public BhapticEventUICombat()
	{
	}
}
[Token(Token = "0x200004B")]
public class BhapticEventUIDash : BhapticEventBase
{
	[Token(Token = "0x17000027")]
	public override string EventID
	{
		[Token(Token = "0x6000161")]
		[Address(RVA = "0x11E518C", Offset = "0x11E518C", VA = "0x11E518C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x11E51CC", Offset = "0x11E51CC", VA = "0x11E51CC", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x11E5268", Offset = "0x11E5268", VA = "0x11E5268", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x11E5304", Offset = "0x11E5304", VA = "0x11E5304")]
	public BhapticEventUIDash()
	{
	}
}
[Token(Token = "0x200004C")]
public class BhapticEventUITouched : BhapticEventBase
{
	[Token(Token = "0x17000028")]
	public override string EventID
	{
		[Token(Token = "0x6000165")]
		[Address(RVA = "0x11E530C", Offset = "0x11E530C", VA = "0x11E530C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x11E534C", Offset = "0x11E534C", VA = "0x11E534C", Slot = "5")]
	public override void RegisterListener()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x11E5350", Offset = "0x11E5350", VA = "0x11E5350", Slot = "6")]
	public override void UnregisterListener()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x11E5354", Offset = "0x11E5354", VA = "0x11E5354")]
	private void OnMixtureCreated(AlchemyModificationBase obj)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x11E5360", Offset = "0x11E5360", VA = "0x11E5360")]
	public BhapticEventUITouched()
	{
	}
}
[Token(Token = "0x200004D")]
public class BhapticsController : MonoBehaviour
{
	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BhapticEventBase[] events;

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x11E5368", Offset = "0x11E5368", VA = "0x11E5368")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x11E53CC", Offset = "0x11E53CC", VA = "0x11E53CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x11E5430", Offset = "0x11E5430", VA = "0x11E5430")]
	public BhapticsController()
	{
	}
}
[Token(Token = "0x200004E")]
public class AspectRatioFix : MonoBehaviour
{
	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float initialAspect;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 StartLocation;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float XPos;

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x11E5438", Offset = "0x11E5438", VA = "0x11E5438")]
	private void Start()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x11E556C", Offset = "0x11E556C", VA = "0x11E556C")]
	private void Update()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x11E5620", Offset = "0x11E5620", VA = "0x11E5620")]
	public AspectRatioFix()
	{
	}
}
[Token(Token = "0x200004F")]
[ExecuteInEditMode]
public class CameraLocationTracker : MonoBehaviour
{
	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string RuntimeCamTag;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool DebugReport;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Vector3 cameraLoc;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Transform cameraTransform;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static int frameCount;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static float Aspect;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static float FOV;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static GameObject CameraToTrack;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 lastCamLoc;

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x11E5630", Offset = "0x11E5630", VA = "0x11E5630")]
	private void Start()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x11E5790", Offset = "0x11E5790", VA = "0x11E5790")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x11E5B60", Offset = "0x11E5B60", VA = "0x11E5B60")]
	public CameraLocationTracker()
	{
	}
}
[Token(Token = "0x2000050")]
[ExecuteInEditMode]
public class GetRes : MonoBehaviour
{
	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool resSet;

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x11E5BB8", Offset = "0x11E5BB8", VA = "0x11E5BB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x11E5C64", Offset = "0x11E5C64", VA = "0x11E5C64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x11E5E94", Offset = "0x11E5E94", VA = "0x11E5E94")]
	public GetRes()
	{
	}
}
[Token(Token = "0x2000051")]
[ExecuteInEditMode]
public class MirrorMainCamera : MonoBehaviour
{
	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Texture2D Lighting;

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x11E5E9C", Offset = "0x11E5E9C", VA = "0x11E5E9C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x11E5EA0", Offset = "0x11E5EA0", VA = "0x11E5EA0")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x11E5F84", Offset = "0x11E5F84", VA = "0x11E5F84")]
	public MirrorMainCamera()
	{
	}
}
[Token(Token = "0x2000052")]
[ExecuteInEditMode]
public class SetChild : MonoBehaviour
{
	[Token(Token = "0x6000179")]
	[Address(RVA = "0x11E5F8C", Offset = "0x11E5F8C", VA = "0x11E5F8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x11E6028", Offset = "0x11E6028", VA = "0x11E6028")]
	private void Update()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x11E611C", Offset = "0x11E611C", VA = "0x11E611C")]
	public SetChild()
	{
	}
}
[Token(Token = "0x2000053")]
[ExecuteInEditMode]
public class SetRes : MonoBehaviour
{
	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int pixelScale;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static RenderTexture SceneBuffer;

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x11E6124", Offset = "0x11E6124", VA = "0x11E6124")]
	private void Start()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x11E63B8", Offset = "0x11E63B8", VA = "0x11E63B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x11E6504", Offset = "0x11E6504", VA = "0x11E6504")]
	public SetRes()
	{
	}
}
[Token(Token = "0x2000054")]
[ExecuteInEditMode]
public class SetSceneBuffer : MonoBehaviour
{
	[Token(Token = "0x6000180")]
	[Address(RVA = "0x11E6558", Offset = "0x11E6558", VA = "0x11E6558")]
	private void Update()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x11E664C", Offset = "0x11E664C", VA = "0x11E664C")]
	public SetSceneBuffer()
	{
	}
}
[Token(Token = "0x2000055")]
public class ViewPanOffset : MonoBehaviour
{
	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RotationConstraint refConstraint;

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x11E6654", Offset = "0x11E6654", VA = "0x11E6654")]
	private void Start()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x11E6658", Offset = "0x11E6658", VA = "0x11E6658")]
	private void Update()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x11E665C", Offset = "0x11E665C", VA = "0x11E665C")]
	public ViewPanOffset()
	{
	}
}
[Token(Token = "0x2000056")]
[DocumentationSorting(DocumentationSortingAttribute.Level.UserRef)]
[SaveDuringPlay]
[AddComponentMenu("")]
public class CinemachineBartixTrackedDolly : CinemachineComponentBase
{
	[Token(Token = "0x2000057")]
	public enum CameraPosition
	{
		[Token(Token = "0x400013F")]
		Behind,
		[Token(Token = "0x4000140")]
		Front
	}

	[Token(Token = "0x2000058")]
	[DocumentationSorting(DocumentationSortingAttribute.Level.UserRef)]
	public enum CameraUpMode
	{
		[Token(Token = "0x4000142")]
		Default,
		[Token(Token = "0x4000143")]
		Path,
		[Token(Token = "0x4000144")]
		PathNoRoll,
		[Token(Token = "0x4000145")]
		FollowTarget,
		[Token(Token = "0x4000146")]
		FollowTargetNoRoll,
		[Token(Token = "0x4000147")]
		Bartix,
		[Token(Token = "0x4000148")]
		Forward,
		[Token(Token = "0x4000149")]
		Custom,
		[Token(Token = "0x400014A")]
		None
	}

	[Serializable]
	[Token(Token = "0x2000059")]
	[DocumentationSorting(DocumentationSortingAttribute.Level.UserRef)]
	public struct AutoDolly
	{
		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[UnityEngine.Tooltip("If checked, will enable automatic dolly, which chooses a path position that is as close as possible to the Follow target.  Note: this can have significant performance impact")]
		public bool m_Enabled;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[UnityEngine.Tooltip("Offset, in current position units, from the closest point on the path to the follow target")]
		public float m_PositionOffset;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[UnityEngine.Tooltip("Search up to this many waypoints on either side of the current position.  Use 0 for Entire path.")]
		public int m_SearchRadius;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[UnityEngine.Tooltip("We search between waypoints by dividing the segment into this many straight pieces.  he higher the number, the more accurate the result, but performance is proportionally slower for higher numbers")]
		[FormerlySerializedAs("m_StepsPerSegment")]
		public int m_SearchResolution;

		[Token(Token = "0x6000194")]
		[Address(RVA = "0x11E77E0", Offset = "0x11E77E0", VA = "0x11E77E0")]
		public AutoDolly(bool enabled, float positionOffset, int searchRadius, int stepsPerSegment)
		{
		}
	}

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("The path to which the camera will be constrained.  This must be non-null.")]
	public CinemachinePathBase m_Path;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("The position along the path at which the camera will be placed.  This can be animated directly, or set automatically by the Auto-Dolly feature to get as close as possible to the Follow target.  The value is interpreted according to the Position Units setting.")]
	public float m_PathPosition;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public CameraPosition cameraPosition;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useSafeArena;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool useRadius;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("How to interpret Path Position.  If set to Path Units, values are as follows: 0 represents the first waypoint on the path, 1 is the second, and so on.  Values in-between are points on the path in between the waypoints.  If set to Distance, then Path Position represents distance along the path.")]
	public CinemachinePathBase.PositionUnits m_PositionUnits;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("Where to put the camera relative to the path position.  X is perpendicular to the path, Y is up, and Z is parallel to the path.  This allows the camera to be offset from the path itself (as if on a tripod, for example).")]
	public Vector3 m_PathOffset;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Range(0f, 20f)]
	[UnityEngine.Tooltip("How aggressively the camera tries to maintain its position in a direction perpendicular to the path.  Small numbers are more responsive, rapidly translating the camera to keep the target's x-axis offset.  Larger numbers give a more heavy slowly responding camera. Using different settings per axis can yield a wide range of camera behaviors.")]
	public float m_XDamping;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(0f, 20f)]
	[UnityEngine.Tooltip("How aggressively the camera tries to maintain its position in the path-local up direction.  Small numbers are more responsive, rapidly translating the camera to keep the target's y-axis offset.  Larger numbers give a more heavy slowly responding camera. Using different settings per axis can yield a wide range of camera behaviors.")]
	public float m_YDamping;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Range(0f, 20f)]
	[UnityEngine.Tooltip("How aggressively the camera tries to maintain its position in a direction parallel to the path.  Small numbers are more responsive, rapidly translating the camera to keep the target's z-axis offset.  Larger numbers give a more heavy slowly responding camera. Using different settings per axis can yield a wide range of camera behaviors.")]
	public float m_ZDamping;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("How to set the virtual camera's Up vector.  This will affect the screen composition, because the camera Aim behaviours will always try to respect the Up direction.")]
	public CameraUpMode m_CameraUp;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 customCameraUp;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Range(0f, 20f)]
	[UnityEngine.Tooltip("How aggressively the camera tries to track the target rotation's X angle.  Small numbers are more responsive.  Larger numbers give a more heavy slowly responding camera.")]
	public float m_PitchDamping;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[UnityEngine.Tooltip("How aggressively the camera tries to track the target rotation's Y angle.  Small numbers are more responsive.  Larger numbers give a more heavy slowly responding camera.")]
	[Range(0f, 20f)]
	public float m_YawDamping;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Range(0f, 20f)]
	[UnityEngine.Tooltip("How aggressively the camera tries to track the target rotation's Z angle.  Small numbers are more responsive.  Larger numbers give a more heavy slowly responding camera.")]
	public float m_RollDamping;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool moveForward;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startZOffset;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool ignoreDamp;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[UnityEngine.Tooltip("Controls how automatic dollying occurs.  A Follow target is necessary to use this feature.")]
	public AutoDolly m_AutoDolly;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_PreviousPathPosition;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Quaternion m_PreviousOrientation;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 m_PreviousCameraPosition;

	[Token(Token = "0x17000029")]
	public override bool IsValid
	{
		[Token(Token = "0x6000185")]
		[Address(RVA = "0x11E6664", Offset = "0x11E6664", VA = "0x11E6664", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002A")]
	public override CinemachineCore.Stage Stage
	{
		[Token(Token = "0x6000186")]
		[Address(RVA = "0x11E66E4", Offset = "0x11E66E4", VA = "0x11E66E4", Slot = "6")]
		get
		{
			return default(CinemachineCore.Stage);
		}
	}

	[Token(Token = "0x1700002B")]
	private Vector3 AngularDamping
	{
		[Token(Token = "0x6000190")]
		[Address(RVA = "0x11E6730", Offset = "0x11E6730", VA = "0x11E6730")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x11E66EC", Offset = "0x11E66EC", VA = "0x11E66EC", Slot = "12")]
	public override float GetMaxDampTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x11E67C0", Offset = "0x11E67C0", VA = "0x11E67C0")]
	protected int GetRadius()
	{
		return default(int);
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x11E67D4", Offset = "0x11E67D4", VA = "0x11E67D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x11E67E0", Offset = "0x11E67E0", VA = "0x11E67E0", Slot = "8")]
	public override void MutateCameraState(ref CameraState curState, float deltaTime)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x11E71C4", Offset = "0x11E71C4", VA = "0x11E71C4")]
	private void CheckOffset(float distanceAbs, float offsetDistance, bool forwardValue)
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x11E7228", Offset = "0x11E7228", VA = "0x11E7228")]
	private Quaternion GetCameraOrientationAtPathPoint(Quaternion pathOrientation, Vector3 up)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x11E7444", Offset = "0x11E7444", VA = "0x11E7444")]
	public void ResetCamera()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x11E74F0", Offset = "0x11E74F0", VA = "0x11E74F0")]
	public bool CanRotate()
	{
		return default(bool);
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x11E7500", Offset = "0x11E7500", VA = "0x11E7500")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x11E75A0", Offset = "0x11E75A0", VA = "0x11E75A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x11E75A4", Offset = "0x11E75A4", VA = "0x11E75A4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x11E76A0", Offset = "0x11E76A0", VA = "0x11E76A0")]
	public CinemachineBartixTrackedDolly()
	{
	}
}
[Token(Token = "0x200005A")]
public class Shot : MonoBehaviour
{
	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool fade;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadeInDuration;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeOutDuration;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CinemachineVirtualCamera virtual1Camera;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CinemachineVirtualCamera virtual2Camera;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useActiveCamera;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool compareCameras;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CinemachineVirtualCamera _previousCamera;

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x11E77F4", Offset = "0x11E77F4", VA = "0x11E77F4", Slot = "4")]
	public virtual void CutToShot()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x11E7B68", Offset = "0x11E7B68", VA = "0x11E7B68")]
	public void CutToShot(Action onCompleted)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x11E7B7C", Offset = "0x11E7B7C", VA = "0x11E7B7C")]
	public void CutToReverseShot(Action onCompleted)
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x11E7804", Offset = "0x11E7804", VA = "0x11E7804")]
	protected void Cut(CinemachineVirtualCamera cameraFrom, CinemachineVirtualCamera cameraTo, bool fade, Action onCompleted)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x11E7C48", Offset = "0x11E7C48", VA = "0x11E7C48")]
	public Shot()
	{
	}
}
[Token(Token = "0x200005C")]
[Obsolete("DEPRECATED! Use Shot instead.")]
public class ShotBasicBehaviour : Shot
{
	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onShotComplete;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onReverseShotComplete;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected Quaternion originalShotRotation;

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x11E7D9C", Offset = "0x11E7D9C", VA = "0x11E7D9C", Slot = "4")]
	public override void CutToShot()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x11E7E80", Offset = "0x11E7E80", VA = "0x11E7E80")]
	public void CutToReverseShot()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x11E7F00", Offset = "0x11E7F00", VA = "0x11E7F00")]
	public void SetSourceCamera(CinemachineVirtualCamera camera)
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x11E7F08", Offset = "0x11E7F08", VA = "0x11E7F08")]
	public void SetDestinationCamera(CinemachineVirtualCamera camera)
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x11E7F10", Offset = "0x11E7F10", VA = "0x11E7F10")]
	protected void RotateToVirtualCamera(CinemachineVirtualCamera camera)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x11E8054", Offset = "0x11E8054", VA = "0x11E8054")]
	public ShotBasicBehaviour()
	{
	}
}
[Token(Token = "0x200005D")]
[Obsolete("DEPRECATED! Use multiple Shot instead.")]
public class ShotTeleportBehaviour : ShotBasicBehaviour
{
	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool lookAtMoth;

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x11E8138", Offset = "0x11E8138", VA = "0x11E8138", Slot = "4")]
	public override void CutToShot()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x11E821C", Offset = "0x11E821C", VA = "0x11E821C")]
	public ShotTeleportBehaviour()
	{
	}
}
[Token(Token = "0x200005E")]
public class ShotZone : BasicCharacterDetector
{
	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Camer shot")]
	public Shot targetShot;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool onlyOnce;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected UnityEvent onShotCompleted;

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x11E824C", Offset = "0x11E824C", VA = "0x11E824C", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x11E82FC", Offset = "0x11E82FC", VA = "0x11E82FC")]
	[ContextMenu("Shot")]
	public void Shot()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x11E838C", Offset = "0x11E838C", VA = "0x11E838C")]
	public void ReverseShot()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x11E8414", Offset = "0x11E8414", VA = "0x11E8414")]
	public void Shot(Action onComplete)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x11E850C", Offset = "0x11E850C", VA = "0x11E850C")]
	public ShotZone()
	{
	}
}
[Token(Token = "0x200005F")]
public class ShotZonesController : MonoBehaviour
{
	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ShotZoneHandler> shotZones;

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x11E8564", Offset = "0x11E8564", VA = "0x11E8564")]
	public void CutToShot(string shotName)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x11E8908", Offset = "0x11E8908", VA = "0x11E8908")]
	public ShotZonesController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000061")]
public struct ShotZoneHandler
{
	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string name;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ShotZone shotZone;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent onShotCompleted;

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x11E8784", Offset = "0x11E8784", VA = "0x11E8784")]
	public void Shot()
	{
	}
}
[Token(Token = "0x2000063")]
public enum AIBehaviourType
{
	[Token(Token = "0x4000169")]
	GROUND = 0,
	[Token(Token = "0x400016A")]
	FLYING = 1479372276,
	[Token(Token = "0x400016B")]
	STATIONARY = 69,
	[Token(Token = "0x400016C")]
	MIDDLE = -1923039037
}
[Token(Token = "0x2000064")]
public class AIBehaviour : CharacterAIBehaviour
{
	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public AIBehaviourType agentType;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected CharacterStateController stateController;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected Transform trans;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected CharacterActorBase characterActor;

	[Token(Token = "0x1700002C")]
	public new virtual CharacterActorBase CharacterActor
	{
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x11E89D4", Offset = "0x11E89D4", VA = "0x11E89D4", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002D")]
	public virtual Transform Trans
	{
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x11E8A80", Offset = "0x11E8A80", VA = "0x11E8A80", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002E")]
	public Vector3 Position
	{
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x11E8B14", Offset = "0x11E8B14", VA = "0x11E8B14")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700002F")]
	public Vector3 AIPosition
	{
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x11E8B94", Offset = "0x11E8B94", VA = "0x11E8B94")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000030")]
	public virtual CharacterStateController CharacterStateController
	{
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x11E8C18", Offset = "0x11E8C18", VA = "0x11E8C18", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x11E8CC4", Offset = "0x11E8CC4", VA = "0x11E8CC4", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x11E8CDC", Offset = "0x11E8CDC", VA = "0x11E8CDC", Slot = "5")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x11E8CE0", Offset = "0x11E8CE0", VA = "0x11E8CE0")]
	public void SetMovementReferenceMode(MovementReferenceParameters.MovementReferenceMode reference, Transform externalReference)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x11E8D40", Offset = "0x11E8D40", VA = "0x11E8D40")]
	public void Move(Vector3 direction)
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x11E8D48", Offset = "0x11E8D48", VA = "0x11E8D48")]
	public AIBehaviour()
	{
	}
}
[Token(Token = "0x2000065")]
public class CharacterActorBase : CharacterActor
{
	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
	public float maxRootMotionMultiplier;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
	protected float rootMotionMultiplier;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
	protected CharacterStateController characterStateController;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
	[SerializeField]
	[Header("Vertical Offset")]
	protected float verticalOffset;

	[Token(Token = "0x17000031")]
	public CharacterStateController StateController
	{
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x11E8D50", Offset = "0x11E8D50", VA = "0x11E8D50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000032")]
	public float RootMotionMultiplier
	{
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x11E8D58", Offset = "0x11E8D58", VA = "0x11E8D58")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x11E8D60", Offset = "0x11E8D60", VA = "0x11E8D60")]
		set
		{
		}
	}

	[Token(Token = "0x17000033")]
	public float VerticalOffset
	{
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x11E8D80", Offset = "0x11E8D80", VA = "0x11E8D80")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000034")]
	public Vector3 VerticalOffsetVector
	{
		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x11E8B84", Offset = "0x11E8B84", VA = "0x11E8B84")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x11E8D88", Offset = "0x11E8D88", VA = "0x11E8D88", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x11E8DF0", Offset = "0x11E8DF0", VA = "0x11E8DF0", Slot = "17")]
	public virtual void AddForce(ForceMessage message)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x11E8EA0", Offset = "0x11E8EA0", VA = "0x11E8EA0", Slot = "18")]
	public virtual void SlideStart(Vector3 direction)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x11E9010", Offset = "0x11E9010", VA = "0x11E9010", Slot = "19")]
	public virtual void SlideEnd()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x11E9104", Offset = "0x11E9104", VA = "0x11E9104")]
	public void DisableCollider()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x11E9200", Offset = "0x11E9200", VA = "0x11E9200")]
	public void EnableCollider()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x11E92FC", Offset = "0x11E92FC", VA = "0x11E92FC")]
	public Collider GetCollider(bool trigger)
	{
		return null;
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x11E9394", Offset = "0x11E9394", VA = "0x11E9394")]
	public CharacterActorBase()
	{
	}
}
[Token(Token = "0x2000066")]
public class ForceMessage
{
	[Token(Token = "0x2000067")]
	public enum ForceType
	{
		[Token(Token = "0x400017A")]
		STANDARD,
		[Token(Token = "0x400017B")]
		JUMP_PAD
	}

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 force;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool add;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool forceNotGrounded;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ForceType forceType;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x11E93A8", Offset = "0x11E93A8", VA = "0x11E93A8")]
	public ForceMessage()
	{
	}
}
[Token(Token = "0x2000068")]
[DefaultExecutionOrder(10)]
public class CharacterBlocker : MonoBehaviour
{
	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Character")]
	public CharacterBody body;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider characterCollider;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Collider[] otherColliders;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Blocker")]
	public Collider blockerCollider;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CapsuleCollider capsuleCollider;

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x11E93B8", Offset = "0x11E93B8", VA = "0x11E93B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x11E959C", Offset = "0x11E959C", VA = "0x11E959C")]
	public CharacterBlocker()
	{
	}
}
[Token(Token = "0x2000069")]
public abstract class CustomCharacterDetector : MonoBehaviour
{
	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Dictionary<int, CharacterActor> characters;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected List<int> onEnterDirtyTransforms;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected List<int> onStayDirtyTransforms;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected List<int> onExitDirtyTransforms;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool reliableOnTriggerExit;

	[Token(Token = "0x17000035")]
	public int CharactersNumber
	{
		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x11E95B0", Offset = "0x11E95B0", VA = "0x11E95B0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x11E95A4", Offset = "0x11E95A4", VA = "0x11E95A4", Slot = "4")]
	protected virtual void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x11E95A8", Offset = "0x11E95A8", VA = "0x11E95A8", Slot = "5")]
	protected virtual void ProcessStayAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x11E95AC", Offset = "0x11E95AC", VA = "0x11E95AC", Slot = "6")]
	protected virtual void ProcessExitAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x11E9600", Offset = "0x11E9600", VA = "0x11E9600")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x11E991C", Offset = "0x11E991C", VA = "0x11E991C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x11E9830", Offset = "0x11E9830", VA = "0x11E9830")]
	protected void ProcessAction(CharacterActor characterActor, List<int> characterActorsIDList, Action<CharacterActor> Action)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x11E99B8", Offset = "0x11E99B8", VA = "0x11E99B8")]
	protected void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x11E9C94", Offset = "0x11E9C94", VA = "0x11E9C94")]
	protected void OnTriggerEnter2D(Collider2D collider)
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x11E9D4C", Offset = "0x11E9D4C", VA = "0x11E9D4C")]
	protected void OnTriggerStay(Collider collider)
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x11E9E30", Offset = "0x11E9E30", VA = "0x11E9E30")]
	protected void OnTriggerStay2D(Collider2D collider)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x11E9F14", Offset = "0x11E9F14", VA = "0x11E9F14")]
	protected void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x11EA18C", Offset = "0x11EA18C", VA = "0x11EA18C")]
	protected void OnTriggerExit2D(Collider2D collider)
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x11E9AE8", Offset = "0x11E9AE8", VA = "0x11E9AE8")]
	protected bool TryAddCharacter(GameObject characterObject, out CharacterActor character)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x11E9FF0", Offset = "0x11E9FF0", VA = "0x11E9FF0")]
	protected bool TryRemoveCharacter(GameObject characterObject, out CharacterActor character)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x11EA244", Offset = "0x11EA244", VA = "0x11EA244")]
	protected CustomCharacterDetector()
	{
	}
}
[Token(Token = "0x200006A")]
public class EnemyBehaviour : AIBehaviour, IMessageReceiver
{
	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public TargetScanner targetScanner;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool useTargetDistributor;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public List<PlayMakerFSM> stateMachines;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("Multipliers")]
	public MultiplicativeFloatStat weight;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public MultiplicativeFloatStat enemySpeedMultiplier;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Header("Events")]
	public UnityEvent onSetup;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public UnityEvent onDispose;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public UnityEvent onDefeat;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public UnityEvent onEngage;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public UnityEvent onDisengage;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public bool snapOnSetup;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	public bool checkStationary;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	protected Animator animator;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	protected Damageable damageable;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected TargetDistributor.TargetFollower m_FollowerInstance;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	protected bool listenDamageableEvents;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	protected Vector3 lastPosition;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	protected float lastDifferentPositionTime;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashHit;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int hitType;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int hashDeath;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string setupFSMEvent;

	[Token(Token = "0x17000036")]
	public Animator Animator
	{
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x11EA374", Offset = "0x11EA374", VA = "0x11EA374")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000037")]
	public Damageable.DamageMessage DamagableMessageData
	{
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x11EA37C", Offset = "0x11EA37C", VA = "0x11EA37C")]
		[CompilerGenerated]
		get
		{
			return default(Damageable.DamageMessage);
		}
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x11EA38C", Offset = "0x11EA38C", VA = "0x11EA38C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000038")]
	public TargetDistributor.TargetFollower followerData
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x11EA3B0", Offset = "0x11EA3B0", VA = "0x11EA3B0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x11EA3B8", Offset = "0x11EA3B8", VA = "0x11EA3B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public bool InCombat
	{
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x11EA3C8", Offset = "0x11EA3C8", VA = "0x11EA3C8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x11EA3D0", Offset = "0x11EA3D0", VA = "0x11EA3D0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public bool IsDead
	{
		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x11EA3DC", Offset = "0x11EA3DC", VA = "0x11EA3DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003B")]
	public bool Defeated
	{
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x11EA400", Offset = "0x11EA400", VA = "0x11EA400")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x11EA408", Offset = "0x11EA408", VA = "0x11EA408")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003C")]
	public EnemyType EnemyType
	{
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x11EA414", Offset = "0x11EA414", VA = "0x11EA414")]
		[CompilerGenerated]
		get
		{
			return default(EnemyType);
		}
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x11EA41C", Offset = "0x11EA41C", VA = "0x11EA41C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public IArenaWave ArenaWave
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x11EA424", Offset = "0x11EA424", VA = "0x11EA424")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x11EA42C", Offset = "0x11EA42C", VA = "0x11EA42C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public Damageable Damageable
	{
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x11EA43C", Offset = "0x11EA43C", VA = "0x11EA43C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003F")]
	public bool ListenDamageableEvents
	{
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x11EA444", Offset = "0x11EA444", VA = "0x11EA444")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x11EA44C", Offset = "0x11EA44C", VA = "0x11EA44C")]
		set
		{
		}
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x11EA458", Offset = "0x11EA458", VA = "0x11EA458", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x11EA4F8", Offset = "0x11EA4F8", VA = "0x11EA4F8", Slot = "12")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x11EA60C", Offset = "0x11EA60C", VA = "0x11EA60C", Slot = "13")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x11EA800", Offset = "0x11EA800", VA = "0x11EA800", Slot = "5")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x11EA804", Offset = "0x11EA804", VA = "0x11EA804")]
	[ContextMenu("SetupEnemy")]
	public void Setup()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x11EAD98", Offset = "0x11EAD98", VA = "0x11EAD98")]
	public void Teleport(Transform target)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x11EAECC", Offset = "0x11EAECC", VA = "0x11EAECC")]
	public void Teleport(Vector3 position)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x11EAFB4", Offset = "0x11EAFB4", VA = "0x11EAFB4")]
	public void OnSetup()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x11EB038", Offset = "0x11EB038", VA = "0x11EB038")]
	public void OnDispose()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x11EB16C", Offset = "0x11EB16C", VA = "0x11EB16C")]
	public void ForceOnDispose()
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x11EB1FC", Offset = "0x11EB1FC", VA = "0x11EB1FC")]
	public void OnEngage()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x11EB0E8", Offset = "0x11EB0E8", VA = "0x11EB0E8")]
	public void OnDisengage()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x11EA78C", Offset = "0x11EA78C", VA = "0x11EA78C")]
	public void ForceOnDisengage()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x11EA714", Offset = "0x11EA714", VA = "0x11EA714")]
	public void ForceOnDefeat()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x11EB284", Offset = "0x11EB284", VA = "0x11EB284")]
	public void OnDefeat()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x11EAC94", Offset = "0x11EAC94", VA = "0x11EAC94")]
	private void EnableFSMachines()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x11EB31C", Offset = "0x11EB31C", VA = "0x11EB31C")]
	private void DisableFSMachines()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x11EAD24", Offset = "0x11EAD24", VA = "0x11EAD24")]
	public void SendEvent(string fsmEvent)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x11EB3AC", Offset = "0x11EB3AC", VA = "0x11EB3AC")]
	public void SendEvent(string fsmEvent, int fsmIndex)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x11EB420", Offset = "0x11EB420", VA = "0x11EB420")]
	public void SendEvent(string fsmEvent, string fsmName)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x11EB4EC", Offset = "0x11EB4EC", VA = "0x11EB4EC")]
	public bool IsOnState(string state)
	{
		return default(bool);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x11EB55C", Offset = "0x11EB55C", VA = "0x11EB55C")]
	public bool CheckStationary()
	{
		return default(bool);
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x11EB620", Offset = "0x11EB620", VA = "0x11EB620", Slot = "11")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x11EB71C", Offset = "0x11EB71C", VA = "0x11EB71C")]
	public void Death(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x11EB7D4", Offset = "0x11EB7D4", VA = "0x11EB7D4")]
	public void ApplyDamage(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x11EB868", Offset = "0x11EB868", VA = "0x11EB868")]
	public void InstantKill()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x11EBBCC", Offset = "0x11EBBCC", VA = "0x11EBBCC")]
	private void OnEnemySpeedChanged(float value)
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x11EBBE8", Offset = "0x11EBBE8", VA = "0x11EBBE8")]
	public EnemyBehaviour()
	{
	}
}
[Token(Token = "0x200006B")]
public enum EnemyType
{
	[Token(Token = "0x40001A3")]
	Default = 0,
	[Token(Token = "0x40001A4")]
	Custom = 1,
	[Token(Token = "0x40001A5")]
	Environmental = 3,
	[Token(Token = "0x40001A6")]
	Arena = 5,
	[Token(Token = "0x40001A7")]
	Boss = 10,
	[Token(Token = "0x40001A8")]
	Zombie = 20,
	[Token(Token = "0x40001A9")]
	Clone = 30
}
[Token(Token = "0x200006C")]
public class EnemyCharacterActor : CharacterActorBase
{
	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
	[SerializeField]
	protected bool forceGroundedWithOffsetAtStart;

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x11EBD74", Offset = "0x11EBD74", VA = "0x11EBD74", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x11EA9A8", Offset = "0x11EA9A8", VA = "0x11EA9A8")]
	public void ForceStartGrounded()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x11EBEEC", Offset = "0x11EBEEC", VA = "0x11EBEEC")]
	[ContextMenu("Calculate Vertical Offset")]
	public void CalculateOffset()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x11EBFB8", Offset = "0x11EBFB8", VA = "0x11EBFB8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x11EC0DC", Offset = "0x11EC0DC", VA = "0x11EC0DC")]
	public EnemyCharacterActor()
	{
	}
}
[Token(Token = "0x200006D")]
public class FlyingMovement : NormalMovement
{
	[Token(Token = "0x200006E")]
	public enum FlyState
	{
		[Token(Token = "0x40001BA")]
		DISABLE,
		[Token(Token = "0x40001BB")]
		EQUAL,
		[Token(Token = "0x40001BC")]
		UP,
		[Token(Token = "0x40001BD")]
		BELOW
	}

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Space(10f)]
	public GroundOffsetParameters offsetMovementParameters;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Header("Position Settings")]
	public float agentRadius;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public LayerMask groundLayer;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public bool checkGround;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
	public bool planar;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
	public bool gravity;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x113")]
	public bool projectAtNavmesh;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public AIBehaviourType behaviourType;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private int agentType;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private EnemyCharacterActor actorBase;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Vector3 currentNavmeshPosition;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private HitInfoFilter filter;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Lightbug.CharacterControllerPro.Core.CollisionInfo collisionInfo;

	[Token(Token = "0x17000040")]
	public FlyState CurrentFlyState
	{
		[Token(Token = "0x6000215")]
		[Address(RVA = "0x11EC0F0", Offset = "0x11EC0F0", VA = "0x11EC0F0")]
		[CompilerGenerated]
		get
		{
			return default(FlyState);
		}
		[Token(Token = "0x6000216")]
		[Address(RVA = "0x11EC0F8", Offset = "0x11EC0F8", VA = "0x11EC0F8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x11EC100", Offset = "0x11EC100", VA = "0x11EC100", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x11EC164", Offset = "0x11EC164", VA = "0x11EC164", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x11EC268", Offset = "0x11EC268", VA = "0x11EC268", Slot = "33")]
	protected override void HandleVelocity(float dt)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x11EC2A0", Offset = "0x11EC2A0", VA = "0x11EC2A0", Slot = "34")]
	protected virtual void ProcessGroundOffset(float dt)
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x11EC628", Offset = "0x11EC628", VA = "0x11EC628", Slot = "23")]
	protected override void ProcessPlanarMovement(float dt)
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x11ECE90", Offset = "0x11ECE90", VA = "0x11ECE90")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x11ED070", Offset = "0x11ED070", VA = "0x11ED070")]
	public FlyingMovement()
	{
	}
}
[Serializable]
[Token(Token = "0x200006F")]
public class GroundOffsetParameters
{
	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool offsetEnabled;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float offsetSpeedMultiplier;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float mindDistanceToMove;

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x11ED10C", Offset = "0x11ED10C", VA = "0x11ED10C")]
	public GroundOffsetParameters()
	{
	}
}
[Token(Token = "0x2000070")]
public class InputSystemHandler : InputHandler
{
	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private InputSystem inputSystem;

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x11ED128", Offset = "0x11ED128", VA = "0x11ED128", Slot = "7")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x11ED1A8", Offset = "0x11ED1A8", VA = "0x11ED1A8", Slot = "4")]
	public override bool GetBool(string actionName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x11ED1C8", Offset = "0x11ED1C8", VA = "0x11ED1C8", Slot = "5")]
	public override float GetFloat(string actionName)
	{
		return default(float);
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x11ED1E8", Offset = "0x11ED1E8", VA = "0x11ED1E8", Slot = "6")]
	public override Vector2 GetVector2(string actionName)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x11ED208", Offset = "0x11ED208", VA = "0x11ED208")]
	public InputSystemHandler()
	{
	}
}
[Token(Token = "0x2000071")]
public class NPCBehaviour : AIBehaviour
{
	[Token(Token = "0x6000224")]
	[Address(RVA = "0x11ED210", Offset = "0x11ED210", VA = "0x11ED210")]
	public NPCBehaviour()
	{
	}
}
[Token(Token = "0x2000072")]
[RequireComponent(typeof(LookAtConstraint))]
public class AnimatorControlledLookAtConstraint : AnimatorControlledTrackingBaseConstraint
{
	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LookAtConstraint m_LookAtConstraint;

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x11ED218", Offset = "0x11ED218", VA = "0x11ED218")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x11ED280", Offset = "0x11ED280", VA = "0x11ED280", Slot = "6")]
	public override void StartTracking()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x11ED298", Offset = "0x11ED298", VA = "0x11ED298", Slot = "7")]
	public override void StopTracking()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x11ED2A8", Offset = "0x11ED2A8", VA = "0x11ED2A8", Slot = "8")]
	public override void SetWeight()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x11ED39C", Offset = "0x11ED39C", VA = "0x11ED39C")]
	public AnimatorControlledLookAtConstraint()
	{
	}
}
[Token(Token = "0x2000073")]
[RequireComponent(typeof(Renderer))]
public class AnimatorControlledMaterialConstraint : AnimatorControlledTrackingBaseConstraint
{
	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string materialParamName;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int materialIndex;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool useMaterialBlock;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer rend;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MaterialPropertyBlock block;

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x11ED3AC", Offset = "0x11ED3AC", VA = "0x11ED3AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x11ED468", Offset = "0x11ED468", VA = "0x11ED468", Slot = "6")]
	public override void StartTracking()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x11ED47C", Offset = "0x11ED47C", VA = "0x11ED47C", Slot = "8")]
	public override void SetWeight()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x11ED660", Offset = "0x11ED660", VA = "0x11ED660")]
	public AnimatorControlledMaterialConstraint()
	{
	}
}
[Token(Token = "0x2000074")]
[RequireComponent(typeof(Rig))]
public class AnimatorControlledRigConstraint : AnimatorControlledTrackingBaseConstraint
{
	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rig rig;

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x11ED670", Offset = "0x11ED670", VA = "0x11ED670")]
	private void Awake()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x11ED6D8", Offset = "0x11ED6D8", VA = "0x11ED6D8", Slot = "8")]
	public override void SetWeight()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x11ED7CC", Offset = "0x11ED7CC", VA = "0x11ED7CC", Slot = "6")]
	public override void StartTracking()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x11ED7F8", Offset = "0x11ED7F8", VA = "0x11ED7F8", Slot = "7")]
	public override void StopTracking()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x11ED820", Offset = "0x11ED820", VA = "0x11ED820")]
	public AnimatorControlledRigConstraint()
	{
	}
}
[Token(Token = "0x2000075")]
public abstract class AnimatorControlledTrackingBaseConstraint : MonoBehaviour
{
	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected bool tracking;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Animator targetAnimator;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected string targetAnimatorFloat;

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x11ED828", Offset = "0x11ED828", VA = "0x11ED828", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x11ED844", Offset = "0x11ED844", VA = "0x11ED844", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x11ED28C", Offset = "0x11ED28C", VA = "0x11ED28C", Slot = "6")]
	public virtual void StartTracking()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x11ED2A0", Offset = "0x11ED2A0", VA = "0x11ED2A0", Slot = "7")]
	public virtual void StopTracking()
	{
	}

	[Token(Token = "0x6000237")]
	public abstract void SetWeight();

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x11ED3A4", Offset = "0x11ED3A4", VA = "0x11ED3A4")]
	protected AnimatorControlledTrackingBaseConstraint()
	{
	}
}
[Token(Token = "0x2000076")]
[RequireComponent(typeof(LookAtConstraint))]
public class MultipleSourcesControlledLookAtConstraint : AnimatorControlledTrackingBaseConstraint
{
	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private LookAtConstraint m_LookAtConstraint;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LookAtConstraint bodyLookAtConstraint;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("LookAt Settings")]
	public float lookAtWeightStartSpeed;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float lookAtWeightEndSpeed;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float maxHeadWeight;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxBodyWeight;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Sources")]
	public float smoothTargetSpeed;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Range(0f, 4f)]
	public int sourceIndexTarget;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TweenerCore<float, float, FloatOptions> tween;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TweenerCore<float, float, FloatOptions> bodyTween;

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x11ED85C", Offset = "0x11ED85C", VA = "0x11ED85C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x11ED9B8", Offset = "0x11ED9B8", VA = "0x11ED9B8", Slot = "6")]
	public override void StartTracking()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x11EDC1C", Offset = "0x11EDC1C", VA = "0x11EDC1C", Slot = "7")]
	public override void StopTracking()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x11EDEE0", Offset = "0x11EDEE0", VA = "0x11EDEE0", Slot = "8")]
	public override void SetWeight()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x11EE0E0", Offset = "0x11EE0E0", VA = "0x11EE0E0")]
	public MultipleSourcesControlledLookAtConstraint()
	{
	}
}
[Token(Token = "0x2000077")]
public class PlayerBehaviour : AIBehaviour
{
	[Token(Token = "0x6000247")]
	[Address(RVA = "0x11EE1E4", Offset = "0x11EE1E4", VA = "0x11EE1E4")]
	public PlayerBehaviour()
	{
	}
}
[Token(Token = "0x2000078")]
public class RootMotionMovement : CharacterState
{
	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PhysicsActor.RootMotionVelocityType velocityType;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public PhysicsActor.RootMotionRotationType rotationType;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool updatePosition;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool updateRotation;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Animation")]
	protected string groundedParameter;

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x11EE1EC", Offset = "0x11EE1EC", VA = "0x11EE1EC", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x11EE218", Offset = "0x11EE218", VA = "0x11EE218", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x11EE21C", Offset = "0x11EE21C", VA = "0x11EE21C", Slot = "13")]
	public override void PreCharacterSimulation(float dt)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x11EE278", Offset = "0x11EE278", VA = "0x11EE278")]
	public RootMotionMovement()
	{
	}
}
[Token(Token = "0x2000079")]
public class StationaryMovement : CharacterState
{
	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool resetVelocity;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool useRootMotion;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x11EE2E0", Offset = "0x11EE2E0", VA = "0x11EE2E0", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x11EE348", Offset = "0x11EE348", VA = "0x11EE348", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x11EE3BC", Offset = "0x11EE3BC", VA = "0x11EE3BC")]
	public StationaryMovement()
	{
	}
}
[Token(Token = "0x200007A")]
[DisallowMultipleComponent]
[ExecuteAlways]
public class CinemachineBartixDollyCart : MonoBehaviour
{
	[Token(Token = "0x200007B")]
	public enum UpdateMethod
	{
		[Token(Token = "0x40001E5")]
		Update,
		[Token(Token = "0x40001E6")]
		FixedUpdate,
		[Token(Token = "0x40001E7")]
		LateUpdate
	}

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("The path to follow")]
	public CinemachinePathBase m_Path;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("When to move the cart, if Velocity is non-zero")]
	public UpdateMethod m_UpdateMethod;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("How to interpret the Path Position.  If set to Path Units, values are as follows: 0 represents the first waypoint on the path, 1 is the second, and so on.  Values in-between are points on the path in between the waypoints.  If set to Distance, then Path Position represents distance along the path.")]
	public CinemachinePathBase.PositionUnits m_PositionUnits;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[FormerlySerializedAs("m_Velocity")]
	[UnityEngine.Tooltip("Move the cart with this speed along the path.  The value is interpreted according to the Position Units setting.")]
	public float m_Speed;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool pingPong;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool repeat;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[FormerlySerializedAs("m_CurrentDistance")]
	[UnityEngine.Tooltip("The position along the path at which the cart will be placed.  This can be animated directly or, if the velocity is non-zero, will be updated automatically.  The value is interpreted according to the Position Units setting.")]
	public float m_Position;

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x11EE3CC", Offset = "0x11EE3CC", VA = "0x11EE3CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x11EE3E8", Offset = "0x11EE3E8", VA = "0x11EE3E8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x11EE5B8", Offset = "0x11EE5B8", VA = "0x11EE5B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x11EE610", Offset = "0x11EE610", VA = "0x11EE610")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x11EE434", Offset = "0x11EE434", VA = "0x11EE434")]
	private void SetCartPosition(float distanceAlongPath)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x11EE670", Offset = "0x11EE670", VA = "0x11EE670")]
	public CinemachineBartixDollyCart()
	{
	}
}
[Token(Token = "0x200007C")]
public class Collectable : Projectile
{
	[Token(Token = "0x200007D")]
	[CompilerGenerated]
	private sealed class <Follow>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collectable <>4__this;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <startPosition>5__3;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <jump>5__4;

		[Token(Token = "0x17000041")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600025D")]
			[Address(RVA = "0x11EEBB0", Offset = "0x11EEBB0", VA = "0x11EEBB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000042")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600025F")]
			[Address(RVA = "0x11EEBF8", Offset = "0x11EEBF8", VA = "0x11EEBF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x11EE7C4", Offset = "0x11EE7C4", VA = "0x11EE7C4")]
		[DebuggerHidden]
		public <Follow>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x11EE8A4", Offset = "0x11EE8A4", VA = "0x11EE8A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x11EE8A8", Offset = "0x11EE8A8", VA = "0x11EE8A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x11EEBB8", Offset = "0x11EEBB8", VA = "0x11EEBB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AmountResources resource;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float moveDuration;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onMagnetcompleted;

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x11EE680", Offset = "0x11EE680", VA = "0x11EE680")]
	private void OnMagnetCompleted()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x11EE750", Offset = "0x11EE750", VA = "0x11EE750")]
	[IteratorStateMachine(typeof(<Follow>d__4))]
	private IEnumerator Follow()
	{
		return null;
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x11EE7EC", Offset = "0x11EE7EC", VA = "0x11EE7EC")]
	public void Pull()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x11EE890", Offset = "0x11EE890", VA = "0x11EE890", Slot = "4")]
	public override void Shot(Vector3 target)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x11EE894", Offset = "0x11EE894", VA = "0x11EE894")]
	public Collectable()
	{
	}
}
[Token(Token = "0x200007E")]
public class EnemiesController : MonoBehaviour
{
	[Token(Token = "0x200007F")]
	[CompilerGenerated]
	private sealed class <CheckEnemies>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemiesController <>4__this;

		[Token(Token = "0x17000043")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600026B")]
			[Address(RVA = "0x11EF0BC", Offset = "0x11EF0BC", VA = "0x11EF0BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600026D")]
			[Address(RVA = "0x11EF104", Offset = "0x11EF104", VA = "0x11EF104", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x11EED1C", Offset = "0x11EED1C", VA = "0x11EED1C")]
		[DebuggerHidden]
		public <CheckEnemies>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x11EEFBC", Offset = "0x11EEFBC", VA = "0x11EEFBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x11EEFC0", Offset = "0x11EEFC0", VA = "0x11EEFC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x11EF0C4", Offset = "0x11EF0C4", VA = "0x11EF0C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 floor;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool checkFloor;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float checkInterval;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CombatManager combatManager;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private EnemyBehaviour[] enemies;

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x11EEC00", Offset = "0x11EEC00", VA = "0x11EEC00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x11EED14", Offset = "0x11EED14", VA = "0x11EED14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x11EECA0", Offset = "0x11EECA0", VA = "0x11EECA0")]
	[IteratorStateMachine(typeof(<CheckEnemies>d__7))]
	private IEnumerator CheckEnemies()
	{
		return null;
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x11EED44", Offset = "0x11EED44", VA = "0x11EED44")]
	private void CheckPosition()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x11EEDE8", Offset = "0x11EEDE8", VA = "0x11EEDE8")]
	private void CheckMovement()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x11EEEC8", Offset = "0x11EEEC8", VA = "0x11EEEC8")]
	private void CheckHealth()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x11EEF48", Offset = "0x11EEF48", VA = "0x11EEF48")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x11EEFAC", Offset = "0x11EEFAC", VA = "0x11EEFAC")]
	public EnemiesController()
	{
	}
}
[Token(Token = "0x2000080")]
[ExecuteInEditMode]
public class LightingControl : MonoBehaviour
{
	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool dynamicPerfAdjust;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool Shadows;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool AdvancedAmbient;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool AdvancedFog;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D LitProbe;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D AmbientProbe;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D EdgeLitProbe;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Cubemap SkyBoxMap;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool EnableShadows;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool EnableAdvancedAmbient;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool EnableAdvancedFog;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject mainSceneLight;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material[] modifiedMaterials;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material LitMat;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material AmbientMat;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material EdgeLitMat;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material SkyboxMat;

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x11EF10C", Offset = "0x11EF10C", VA = "0x11EF10C")]
	private void UpdateLighting()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x11EF608", Offset = "0x11EF608", VA = "0x11EF608")]
	private void Start()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x11EF634", Offset = "0x11EF634", VA = "0x11EF634")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x11EF638", Offset = "0x11EF638", VA = "0x11EF638")]
	public LightingControl()
	{
	}
}
[Token(Token = "0x2000081")]
public class GameManager : MonoBehaviour
{
	[Token(Token = "0x6000273")]
	[Address(RVA = "0x11EF698", Offset = "0x11EF698", VA = "0x11EF698")]
	private void Start()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x11EF69C", Offset = "0x11EF69C", VA = "0x11EF69C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x11EF6A0", Offset = "0x11EF6A0", VA = "0x11EF6A0")]
	public GameManager()
	{
	}
}
[Token(Token = "0x2000082")]
public class SceneLinkedSMB<TMonoBehaviour> : SealedSMB where TMonoBehaviour : MonoBehaviour
{
	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected TMonoBehaviour m_MonoBehaviour;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool m_LastFrameHappened;

	[Token(Token = "0x6000276")]
	public static void Initialise(Animator animator, TMonoBehaviour monoBehaviour)
	{
	}

	[Token(Token = "0x6000277")]
	protected void InternalInitialise(Animator animator, TMonoBehaviour monoBehaviour)
	{
	}

	[Token(Token = "0x6000278")]
	public sealed override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x6000279")]
	public sealed override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x600027A")]
	public sealed override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x600027B")]
	public virtual void OnStart(Animator animator)
	{
	}

	[Token(Token = "0x600027C")]
	public virtual void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600027D")]
	public virtual void OnSLTransitionToStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600027E")]
	public virtual void OnSLStatePostEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600027F")]
	public virtual void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000280")]
	public virtual void OnSLStatePreExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000281")]
	public virtual void OnSLTransitionFromStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000282")]
	public virtual void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000283")]
	public virtual void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x6000284")]
	public virtual void OnSLTransitionToStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x6000285")]
	public virtual void OnSLStatePostEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x6000286")]
	public virtual void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x6000287")]
	public virtual void OnSLStatePreExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x6000288")]
	public virtual void OnSLTransitionFromStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x6000289")]
	public virtual void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex, AnimatorControllerPlayable controller)
	{
	}

	[Token(Token = "0x600028A")]
	public SceneLinkedSMB()
	{
	}
}
[Token(Token = "0x2000083")]
public abstract class SealedSMB : StateMachineBehaviour
{
	[Token(Token = "0x600028B")]
	[Address(RVA = "0x11EF6A8", Offset = "0x11EF6A8", VA = "0x11EF6A8", Slot = "4")]
	public sealed override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x11EF6AC", Offset = "0x11EF6AC", VA = "0x11EF6AC", Slot = "5")]
	public sealed override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x11EF6B0", Offset = "0x11EF6B0", VA = "0x11EF6B0", Slot = "6")]
	public sealed override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x11EF6B4", Offset = "0x11EF6B4", VA = "0x11EF6B4")]
	protected SealedSMB()
	{
	}
}
[Token(Token = "0x2000084")]
public class CharacterContactDamager : BasicCharacterDetector
{
	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Damager config")]
	public LayerMask damagedLayers;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int damageAmount;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float force;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Damager optional config")]
	public GameObject damagerOwner;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform damageSourcePosition;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Attacks attackType;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool disableAfterApplyingDamage;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	public bool throwing;

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x11EF6BC", Offset = "0x11EF6BC", VA = "0x11EF6BC", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x11EF794", Offset = "0x11EF794", VA = "0x11EF794", Slot = "7")]
	protected virtual void DamageCharaterActor(CharacterActor characterActor, Damageable damageable)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x11EFAE0", Offset = "0x11EFAE0", VA = "0x11EFAE0")]
	public CharacterContactDamager()
	{
	}
}
[Token(Token = "0x2000085")]
public class Damageable : MonoBehaviour
{
	[Token(Token = "0x2000086")]
	public struct DamageMessage
	{
		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MonoBehaviour damager;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int amount;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 direction;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 damageSource;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 damagePoint;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool throwing;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pushForce;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int attackType;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool additiveAnimation;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AttackScriptableObject attackScriptableObject;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool stopCamera;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float ragdollPushForce;
	}

	[Serializable]
	[Token(Token = "0x2000087")]
	public struct CustomDamageReceiverEvent
	{
		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Attacks attackType;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEvent onReceiveDamage;

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x11F0CD4", Offset = "0x11F0CD4", VA = "0x11F0CD4")]
		public bool DoesAttackTypeMatch(DamageMessage damageMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x11F0CE8", Offset = "0x11F0CE8", VA = "0x11F0CE8")]
		public void Invoke()
		{
		}
	}

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxHitPoints;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("Time that this gameObject is invulnerable for, after receiving damage.")]
	public float invulnerabiltyTime;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isInvulnerableOnHit;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("The angle from the which that damageable is hitable. Always in the world XZ plane, with the forward being rotate by hitForwardRoation")]
	[Range(0f, 360f)]
	public float hitAngle;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 360f)]
	[UnityEngine.Tooltip("Allow to rotate the world forward vector of the damageable used to define the hitAngle zone")]
	[FormerlySerializedAs("hitForwardRoation")]
	public float hitForwardRotation;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem hitParticlePrefab;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool invulnerableOnStart;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MultiplicativeFloatStat armor;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<AttackScriptableObject> applyAttacks;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnDeath;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent OnReceiveDamage;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent OnHitWhileInvulnerable;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent OnBecomeVulnerable;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent OnResetDamage;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent OnGainHealth;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent onDisable;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CustomDamageReceiverEvent[] damageReceivers;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[UnityEngine.Tooltip("When this gameObject is damaged, these other gameObjects are notified.")]
	[EnforceType(typeof(IMessageReceiver))]
	public List<MonoBehaviour> onDamageMessageReceivers;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected float m_timeSinceLastHit;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected List<Collider> m_Colliders;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected Action schedule;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	protected GameObject m_HitEffectGameObject;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected PooledParticleEffect m_HitEffect;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected PooledParticleEffectCulling m_HitEffectCulling;

	[Token(Token = "0x17000045")]
	public float ArmorValue
	{
		[Token(Token = "0x6000292")]
		[Address(RVA = "0x11EFAE8", Offset = "0x11EFAE8", VA = "0x11EFAE8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000293")]
		[Address(RVA = "0x11EFB04", Offset = "0x11EFB04", VA = "0x11EFB04")]
		set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public bool isInvulnerable
	{
		[Token(Token = "0x6000294")]
		[Address(RVA = "0x11EFB44", Offset = "0x11EFB44", VA = "0x11EFB44")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000295")]
		[Address(RVA = "0x11EFB4C", Offset = "0x11EFB4C", VA = "0x11EFB4C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public int currentHitPoints
	{
		[Token(Token = "0x6000296")]
		[Address(RVA = "0x11EFB58", Offset = "0x11EFB58", VA = "0x11EFB58")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000297")]
		[Address(RVA = "0x11EFB60", Offset = "0x11EFB60", VA = "0x11EFB60")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public float CurrentPercentage
	{
		[Token(Token = "0x6000298")]
		[Address(RVA = "0x11EFB68", Offset = "0x11EFB68", VA = "0x11EFB68")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000049")]
	public bool CanDamage
	{
		[Token(Token = "0x6000299")]
		[Address(RVA = "0x11EFB80", Offset = "0x11EFB80", VA = "0x11EFB80")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x11EFB94", Offset = "0x11EFB94", VA = "0x11EFB94")]
	private void Awake()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x11EFF18", Offset = "0x11EFF18", VA = "0x11EFF18")]
	private void Start()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x11EFF74", Offset = "0x11EFF74", VA = "0x11EFF74")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x11EFF88", Offset = "0x11EFF88", VA = "0x11EFF88")]
	private void Update()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x11EA968", Offset = "0x11EA968", VA = "0x11EA968")]
	[ContextMenu("ResetDamage")]
	public void ResetDamage()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x11EFFF8", Offset = "0x11EFFF8", VA = "0x11EFFF8")]
	public void SetColliderState(bool enabled)
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x11F019C", Offset = "0x11F019C", VA = "0x11F019C", Slot = "4")]
	public virtual void ApplyDamage(DamageMessage data)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x11E2090", Offset = "0x11E2090", VA = "0x11E2090")]
	public void AddHealth(int value)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x11EB884", Offset = "0x11EB884", VA = "0x11EB884")]
	public void SetHealth(int value)
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x11F0A24", Offset = "0x11F0A24", VA = "0x11F0A24")]
	public void SetHealth(int value, DamageMessage message)
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x11F0990", Offset = "0x11F0990", VA = "0x11F0990")]
	protected void InvokeReceiveDamageEvent([Optional] DamageMessage damageMessage)
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x11F0D04", Offset = "0x11F0D04", VA = "0x11F0D04")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x11F08CC", Offset = "0x11F08CC", VA = "0x11F08CC")]
	private bool CanAttack(AttackScriptableObject type)
	{
		return default(bool);
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x11F0D40", Offset = "0x11F0D40", VA = "0x11F0D40")]
	public void AddAttack(AttackScriptableObject type)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x11F0E28", Offset = "0x11F0E28", VA = "0x11F0E28")]
	public void RemoveAttack(AttackScriptableObject type)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x11EFC74", Offset = "0x11EFC74", VA = "0x11EFC74")]
	private void SetupHitEffect()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x11F0EB8", Offset = "0x11F0EB8", VA = "0x11F0EB8")]
	public Damageable()
	{
	}
}
[Token(Token = "0x2000088")]
public class DamagerAreaBase : MonoBehaviour
{
	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x11F0F84", Offset = "0x11F0F84", VA = "0x11F0F84", Slot = "4")]
	public virtual void OnEnter(GameObject target)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x11F0F88", Offset = "0x11F0F88", VA = "0x11F0F88", Slot = "5")]
	public virtual void OnExit(GameObject target)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x11F0F8C", Offset = "0x11F0F8C", VA = "0x11F0F8C")]
	public void AttachEffect()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x11F0F90", Offset = "0x11F0F90", VA = "0x11F0F90")]
	public DamagerAreaBase()
	{
	}
}
[Token(Token = "0x2000089")]
[RequireComponent(typeof(DamagerAreaBase))]
public class DamagerAreaCharacterDetector : CustomCharacterDetector
{
	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private DamagerAreaBase damager;

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x11F0F98", Offset = "0x11F0F98", VA = "0x11F0F98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x11F1048", Offset = "0x11F1048", VA = "0x11F1048", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x11F1080", Offset = "0x11F1080", VA = "0x11F1080", Slot = "6")]
	protected override void ProcessExitAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x11F10B8", Offset = "0x11F10B8", VA = "0x11F10B8")]
	public DamagerAreaCharacterDetector()
	{
	}
}
[Token(Token = "0x200008A")]
public abstract class DamagerAreaLine : DamagerAreaBase
{
	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Collider[] colldiers;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected int currentTargets;

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x11F10BC", Offset = "0x11F10BC", VA = "0x11F10BC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002B6")]
	protected abstract int FindTargets();

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x11F10C8", Offset = "0x11F10C8", VA = "0x11F10C8")]
	protected DamagerAreaLine()
	{
	}
}
[Token(Token = "0x200008B")]
public class DamagerAreaTrigger : DamagerAreaBase
{
	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x11F10D0", Offset = "0x11F10D0", VA = "0x11F10D0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x11F1104", Offset = "0x11F1104", VA = "0x11F1104")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x11F1138", Offset = "0x11F1138", VA = "0x11F1138")]
	public DamagerAreaTrigger()
	{
	}
}
[Token(Token = "0x200008C")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(Collider))]
public class DamageZone : MonoBehaviour
{
	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damageAmount;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool stopCamera;

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x11F1140", Offset = "0x11F1140", VA = "0x11F1140")]
	private void Reset()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x11F11CC", Offset = "0x11F11CC", VA = "0x11F11CC")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x11F1330", Offset = "0x11F1330", VA = "0x11F1330")]
	public DamageZone()
	{
	}
}
[Token(Token = "0x200008D")]
[RequireComponent(typeof(Collider))]
public class DeathVolume : MonoBehaviour
{
	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider[] results;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Collider m_Collider;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool checkOnFixedUpdate;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool instantDefeat;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private LayerMask fixedUpdateLayerMask;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Attacks attackType;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TagFilter ignoredTags;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool requireTrigger;

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x11F1340", Offset = "0x11F1340", VA = "0x11F1340")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x11F1404", Offset = "0x11F1404", VA = "0x11F1404")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x11F1600", Offset = "0x11F1600", VA = "0x11F1600")]
	public void OnEnter(Collider other)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x11F1344", Offset = "0x11F1344", VA = "0x11F1344")]
	private void Reset()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x11F1890", Offset = "0x11F1890", VA = "0x11F1890")]
	public DeathVolume()
	{
	}
}
[Token(Token = "0x200008E")]
public class LineDamager : MonoBehaviour
{
	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Damage Settings")]
	public int amount;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(1f, 10f)]
	public float force;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask layerMask;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Damageable owner;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AttackScriptableObject attackScriptableObject;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Positions")]
	public Transform start;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 startOffset;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform end;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 endOffset;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RaycastHit[] hits;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int currentHitsAmount;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 startPosition;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 endPosition;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 direction;

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x11F1988", Offset = "0x11F1988", VA = "0x11F1988")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x11F1BB4", Offset = "0x11F1BB4", VA = "0x11F1BB4")]
	private void TakeDamage(Collider other)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x11F1EDC", Offset = "0x11F1EDC", VA = "0x11F1EDC")]
	public LineDamager()
	{
	}
}
[Token(Token = "0x200008F")]
public class WobbleDamageable : Damageable
{
	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x11F1F48", Offset = "0x11F1F48", VA = "0x11F1F48", Slot = "4")]
	public override void ApplyDamage(DamageMessage data)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x11F2410", Offset = "0x11F2410", VA = "0x11F2410")]
	public WobbleDamageable()
	{
	}
}
[Token(Token = "0x2000090")]
public enum ArrowType
{
	[Token(Token = "0x4000259")]
	Default,
	[Token(Token = "0x400025A")]
	Thin,
	[Token(Token = "0x400025B")]
	Double,
	[Token(Token = "0x400025C")]
	Triple,
	[Token(Token = "0x400025D")]
	Solid,
	[Token(Token = "0x400025E")]
	Fat,
	[Token(Token = "0x400025F")]
	ThreeD
}
[Token(Token = "0x2000091")]
public static class DrawArrow
{
	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x11F2414", Offset = "0x11F2414", VA = "0x11F2414")]
	public static void ForGizmo(Vector3 pos, Vector3 direction, [Optional] Color? color, bool doubled = false, float arrowHeadLength = 0.2f, float arrowHeadAngle = 20f)
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x11F2798", Offset = "0x11F2798", VA = "0x11F2798")]
	public static void ForDebug(Vector3 pos, Vector3 direction, float duration = 0.5f, [Optional] Color? color, ArrowType type = ArrowType.Default, float arrowHeadLength = 0.2f, float arrowHeadAngle = 30f, bool sceneCamFollows = false)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x11F3330", Offset = "0x11F3330", VA = "0x11F3330")]
	public static void randomStar(Vector3 center, Color color)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x11F34B0", Offset = "0x11F34B0", VA = "0x11F34B0")]
	public static void comparePositions(Transform t1, Transform t2)
	{
	}
}
[Token(Token = "0x2000092")]
[CreateAssetMenu(fileName = "AlchemyLootTable", menuName = "ScriptableObjects/Loots/New Alchemy Loot Table", order = 1)]
public class AlchemyLootTable : LootTable
{
	[Serializable]
	[Token(Token = "0x2000093")]
	public class AlchemyLootData : Loot
	{
		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collectable collectable;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Resource resource;

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x11F3804", Offset = "0x11F3804", VA = "0x11F3804")]
		public AlchemyLootData()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000094")]
	public class AlchemyLoot
	{
		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ModificationScriptableObject alchemy;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AlchemyLootData[] loot;

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x11F3814", Offset = "0x11F3814", VA = "0x11F3814")]
		public AlchemyLoot()
		{
		}
	}

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AlchemyLoot[] alchemyLoots;

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x11F3574", Offset = "0x11F3574", VA = "0x11F3574", Slot = "5")]
	public virtual List<AlchemyLoot> GetAlchemyLoot(ModificationScriptableObject alchemy)
	{
		return null;
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x11F37F4", Offset = "0x11F37F4", VA = "0x11F37F4")]
	public AlchemyLootTable()
	{
	}
}
[Token(Token = "0x2000095")]
public class DropController : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool requireAlchemy;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Health Loot")]
	public HealthLootTable lootTable;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 offset;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Resources Loot")]
	public AlchemyLootTable alchemyLootTable;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 resourceOffset;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnlockableAbilityScriptableObject dropResourcesAbility;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AlchemyModificationReceiver effectController;

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x11F381C", Offset = "0x11F381C", VA = "0x11F381C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x11F3888", Offset = "0x11F3888", VA = "0x11F3888")]
	public void Loot()
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x11F3F70", Offset = "0x11F3F70", VA = "0x11F3F70", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x11F3F80", Offset = "0x11F3F80", VA = "0x11F3F80")]
	public DropController()
	{
	}
}
[Token(Token = "0x2000096")]
public class Droppable : MonoBehaviour
{
	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidbody;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minUpForce;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxUpForce;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minSideForce;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxSideForce;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minOverallForce;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxOverallForce;

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x11F3FA8", Offset = "0x11F3FA8", VA = "0x11F3FA8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x11F3FAC", Offset = "0x11F3FAC", VA = "0x11F3FAC")]
	public void Drop()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x11F40EC", Offset = "0x11F40EC", VA = "0x11F40EC")]
	public Droppable()
	{
	}
}
[Token(Token = "0x2000097")]
[CreateAssetMenu(fileName = "HealthLootTable", menuName = "ScriptableObjects/Loots/New Health Loot Table", order = 1)]
public class HealthLootTable : LootTable
{
	[Serializable]
	[Token(Token = "0x2000098")]
	public class HealthLootData : Loot
	{
		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FollowMoth health;

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x11F427C", Offset = "0x11F427C", VA = "0x11F427C")]
		public HealthLootData()
		{
		}
	}

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HealthLootData[] healthLoots;

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x11F410C", Offset = "0x11F410C", VA = "0x11F410C", Slot = "5")]
	public virtual List<HealthLootData> GetHealthLoot()
	{
		return null;
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x11F4274", Offset = "0x11F4274", VA = "0x11F4274")]
	public HealthLootTable()
	{
	}
}
[Serializable]
[Token(Token = "0x2000099")]
public class Loot
{
	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float chance;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int minQuantity;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxQuantity;

	[Token(Token = "0x1700004A")]
	public int Quantity
	{
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x11F4284", Offset = "0x11F4284", VA = "0x11F4284")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x11F428C", Offset = "0x11F428C", VA = "0x11F428C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x11F380C", Offset = "0x11F380C", VA = "0x11F380C")]
	public Loot()
	{
	}
}
[Token(Token = "0x200009A")]
[CreateAssetMenu(fileName = "LootTable", menuName = "ScriptableObjects/Loots/New Loot Table", order = 1)]
public class LootTable : ScriptableObject
{
	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Loot[] loots;

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x11F4294", Offset = "0x11F4294", VA = "0x11F4294", Slot = "4")]
	public virtual List<Loot> GetLoot()
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x11F37D4", Offset = "0x11F37D4", VA = "0x11F37D4")]
	public int RandomQuantity(Loot loot)
	{
		return default(int);
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x11F37FC", Offset = "0x11F37FC", VA = "0x11F37FC")]
	public LootTable()
	{
	}
}
[Token(Token = "0x200009B")]
public class DropResources : MonoBehaviour
{
	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] resources;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x11F43FC", Offset = "0x11F43FC", VA = "0x11F43FC")]
	public void Drop()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x11F4570", Offset = "0x11F4570", VA = "0x11F4570")]
	public DropResources()
	{
	}
}
[Token(Token = "0x200009C")]
public class AnimationEffectsController : MonoBehaviour
{
	[Token(Token = "0x200009D")]
	[CompilerGenerated]
	private sealed class <InvokeReturn>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectInfoAdapterPooledEffect effect;

		[Token(Token = "0x1700004B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002EE")]
			[Address(RVA = "0x11F548C", Offset = "0x11F548C", VA = "0x11F548C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F0")]
			[Address(RVA = "0x11F54D4", Offset = "0x11F54D4", VA = "0x11F54D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x11F4F44", Offset = "0x11F4F44", VA = "0x11F4F44")]
		[DebuggerHidden]
		public <InvokeReturn>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x11F5350", Offset = "0x11F5350", VA = "0x11F5350", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x11F5354", Offset = "0x11F5354", VA = "0x11F5354", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x11F5494", Offset = "0x11F5494", VA = "0x11F5494", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EffectInfo[] Effects;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected EffectInfoAdapterPooledEffect[] pooledEffects;

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x11F4580", Offset = "0x11F4580", VA = "0x11F4580")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x11F4954", Offset = "0x11F4954", VA = "0x11F4954", Slot = "4")]
	public virtual void InstantiateEffect(string effectName)
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x11F4ED0", Offset = "0x11F4ED0", VA = "0x11F4ED0")]
	[IteratorStateMachine(typeof(<InvokeReturn>d__4))]
	private IEnumerator InvokeReturn(EffectInfoAdapterPooledEffect effect)
	{
		return null;
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x11F4F6C", Offset = "0x11F4F6C", VA = "0x11F4F6C")]
	public void StopEffect(string effectName)
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x11F4D54", Offset = "0x11F4D54", VA = "0x11F4D54")]
	public void StopAll()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x11F5184", Offset = "0x11F5184", VA = "0x11F5184")]
	public void PlayAnimationEffect(string effectName)
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x11F5268", Offset = "0x11F5268", VA = "0x11F5268")]
	public void StopAnimationEffect(string effectName)
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x11F5344", Offset = "0x11F5344", VA = "0x11F5344")]
	public void StopAllAnimationEffects()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x11F5348", Offset = "0x11F5348", VA = "0x11F5348")]
	public AnimationEffectsController()
	{
	}
}
[Serializable]
[Token(Token = "0x200009E")]
public class EffectInfo
{
	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PoolingEffect Effect;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform StartPositionRotation;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float DestroyAfter;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool UseLocalPosition;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool loop;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int poolAmount;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool StopAllBeforePlaying;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer meshReference;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool useSceneInstance;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParticleSystem sceneParticle;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool waitForSceneParticleToEnd;

	[Token(Token = "0x1700004D")]
	public bool IsPlaying
	{
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x11F54DC", Offset = "0x11F54DC", VA = "0x11F54DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x11F550C", Offset = "0x11F550C", VA = "0x11F550C")]
	public void Play()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x11F555C", Offset = "0x11F555C", VA = "0x11F555C")]
	public void Stop()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x11F55BC", Offset = "0x11F55BC", VA = "0x11F55BC")]
	public EffectInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x200009F")]
public class EffectInfoAdapterPooledEffect
{
	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private EffectInfo _effectInfo;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject _pooledEffectObject;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PooledParticleEffect _pooledEffect;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PooledParticleEffectCulling _culling;

	[Token(Token = "0x1700004E")]
	public EffectInfo Info
	{
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x11F55DC", Offset = "0x11F55DC", VA = "0x11F55DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004F")]
	public bool IsPlaying
	{
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x11F4CB0", Offset = "0x11F4CB0", VA = "0x11F4CB0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x11F46F8", Offset = "0x11F46F8", VA = "0x11F46F8")]
	public EffectInfoAdapterPooledEffect(EffectInfo effectInfo)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x11F4728", Offset = "0x11F4728", VA = "0x11F4728")]
	public void Initialize(GameObject controller)
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x11F4DB0", Offset = "0x11F4DB0", VA = "0x11F4DB0")]
	public void Play()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x11F5020", Offset = "0x11F5020", VA = "0x11F5020")]
	public void Stop()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x11F55E4", Offset = "0x11F55E4", VA = "0x11F55E4")]
	protected void SetupPooledEffect(Transform parent)
	{
	}
}
[Token(Token = "0x20000A0")]
public class CustomParticleCullingBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cullingRadius;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float minDistanceToView;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem target;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CullingGroup m_CullingGroup;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer[] m_ParticleRenderers;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isShow;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isInDistance;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool isInCamera;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform mainCamera;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform targetTransform;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float currentDistance;

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x11F5810", Offset = "0x11F5810", VA = "0x11F5810")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x11F58F0", Offset = "0x11F58F0", VA = "0x11F58F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x11F5ED8", Offset = "0x11F5ED8", VA = "0x11F5ED8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x11F6030", Offset = "0x11F6030", VA = "0x11F6030")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x11F6044", Offset = "0x11F6044", VA = "0x11F6044")]
	private void OnCameraMove()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x11F607C", Offset = "0x11F607C", VA = "0x11F607C")]
	private void OnStateChanged(CullingGroupEvent sphere)
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x11F5D38", Offset = "0x11F5D38", VA = "0x11F5D38")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x11F5E14", Offset = "0x11F5E14", VA = "0x11F5E14")]
	private void CheckCulling()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x11F5E4C", Offset = "0x11F5E4C", VA = "0x11F5E4C")]
	private void Cull(bool visible)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x11F5FC8", Offset = "0x11F5FC8", VA = "0x11F5FC8")]
	private void SetRenderers(bool enable)
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x11F60C8", Offset = "0x11F60C8", VA = "0x11F60C8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x11F6180", Offset = "0x11F6180", VA = "0x11F6180")]
	public CustomParticleCullingBehaviour()
	{
	}
}
[Token(Token = "0x20000A1")]
public interface ICulling<T>
{
	[Token(Token = "0x17000050")]
	CullingGroup CullingGroup
	{
		[Token(Token = "0x6000308")]
		get;
	}

	[Token(Token = "0x17000051")]
	float CullingRadius
	{
		[Token(Token = "0x6000309")]
		get;
		[Token(Token = "0x600030A")]
		set;
	}

	[Token(Token = "0x17000052")]
	float ViewDistance
	{
		[Token(Token = "0x600030B")]
		get;
		[Token(Token = "0x600030C")]
		set;
	}

	[Token(Token = "0x600030D")]
	void Cull(bool visible);

	[Token(Token = "0x600030E")]
	void Setup(T target);
}
[Token(Token = "0x20000A2")]
public class ColorOverLifetime : OverLifetimeBase
{
	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Renderer rend;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected Gradient gradient;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected string colorParamName;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Vector3 startSize;

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x12B653C", Offset = "0x12B653C", VA = "0x12B653C", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x12B6640", Offset = "0x12B6640", VA = "0x12B6640", Slot = "5")]
	protected override void Execute(float value)
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x12B66A8", Offset = "0x12B66A8", VA = "0x12B66A8")]
	public ColorOverLifetime()
	{
	}
}
[Token(Token = "0x20000A3")]
public class DecalColorOverLifetime : ColorOverLifetime
{
	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected EasyDecal decal;

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x12B6708", Offset = "0x12B6708", VA = "0x12B6708", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x12B6840", Offset = "0x12B6840", VA = "0x12B6840", Slot = "5")]
	protected override void Execute(float value)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x12B68A8", Offset = "0x12B68A8", VA = "0x12B68A8")]
	public DecalColorOverLifetime()
	{
	}
}
[Token(Token = "0x20000A4")]
public class FloatOverLifetime : MonoBehaviour
{
	[Token(Token = "0x6000315")]
	[Address(RVA = "0x12B68AC", Offset = "0x12B68AC", VA = "0x12B68AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x12B68B0", Offset = "0x12B68B0", VA = "0x12B68B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x12B68B4", Offset = "0x12B68B4", VA = "0x12B68B4")]
	public FloatOverLifetime()
	{
	}
}
[Token(Token = "0x20000A5")]
public abstract class OverLifetimeBase : MonoBehaviour
{
	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected AnimationCurve curve;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected float duration;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected float time;

	[Token(Token = "0x17000053")]
	public float Lifetime
	{
		[Token(Token = "0x6000318")]
		[Address(RVA = "0x12B68BC", Offset = "0x12B68BC", VA = "0x12B68BC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000319")]
		[Address(RVA = "0x12B68C4", Offset = "0x12B68C4", VA = "0x12B68C4")]
		set
		{
		}
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x12B6608", Offset = "0x12B6608", VA = "0x12B6608", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x12B68CC", Offset = "0x12B68CC", VA = "0x12B68CC")]
	private void Update()
	{
	}

	[Token(Token = "0x600031C")]
	protected abstract void Execute(float value);

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x12B6700", Offset = "0x12B6700", VA = "0x12B6700")]
	protected OverLifetimeBase()
	{
	}
}
[Token(Token = "0x20000A6")]
public class SizeOverLifetime : OverLifetimeBase
{
	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Vector3 minSize;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected Vector3 maxSize;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected Transform trans;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Vector3 startSize;

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x12B6944", Offset = "0x12B6944", VA = "0x12B6944", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x12B69A8", Offset = "0x12B69A8", VA = "0x12B69A8", Slot = "5")]
	protected override void Execute(float value)
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x12B69E0", Offset = "0x12B69E0", VA = "0x12B69E0")]
	public SizeOverLifetime()
	{
	}
}
[Token(Token = "0x20000A7")]
public class ParticleDecal : MonoBehaviour
{
	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem particle;

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x12B69E8", Offset = "0x12B69E8", VA = "0x12B69E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x12B6A10", Offset = "0x12B6A10", VA = "0x12B6A10")]
	public ParticleDecal()
	{
	}
}
[Token(Token = "0x20000A8")]
public class ParticleSystemCallbackListener : MonoBehaviour
{
	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem _particleSystem;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent _onParticleSystemStopped;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action onParticleSystemStoppedAction;

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x12B6A18", Offset = "0x12B6A18", VA = "0x12B6A18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x12B6AD4", Offset = "0x12B6AD4", VA = "0x12B6AD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x12B6B70", Offset = "0x12B6B70", VA = "0x12B6B70")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x12B6C0C", Offset = "0x12B6C0C", VA = "0x12B6C0C")]
	private void OnParticleSystemStopped()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x12B6C48", Offset = "0x12B6C48", VA = "0x12B6C48")]
	public ParticleSystemCallbackListener()
	{
	}
}
[Token(Token = "0x20000A9")]
public class ParticleSystemRenderersHandler : MonoBehaviour
{
	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem _particleSystem;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action onParticleSystemStoppedAction;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _setupFinish;

	[Token(Token = "0x17000054")]
	public Renderer[] Renderers
	{
		[Token(Token = "0x6000328")]
		[Address(RVA = "0x12B6C50", Offset = "0x12B6C50", VA = "0x12B6C50")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000329")]
		[Address(RVA = "0x12B6C58", Offset = "0x12B6C58", VA = "0x12B6C58")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x12B6C60", Offset = "0x12B6C60", VA = "0x12B6C60")]
	private void Awake()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x12B6C64", Offset = "0x12B6C64", VA = "0x12B6C64")]
	private bool TrySetupRenderers()
	{
		return default(bool);
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x12B6CD8", Offset = "0x12B6CD8", VA = "0x12B6CD8")]
	public void SetRenderers(bool enabled)
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x12B6DC0", Offset = "0x12B6DC0", VA = "0x12B6DC0")]
	public ParticleSystemRenderersHandler()
	{
	}
}
[Token(Token = "0x20000AA")]
[DefaultExecutionOrder(-1)]
[RequireComponent(typeof(PooledParticleEffectCulling))]
public class PooledParticleEffect : PoolSpawner
{
	[Serializable]
	[Token(Token = "0x20000AB")]
	public struct ParticleTimer
	{
		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float particleClock;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float hideTime;

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x12B8220", Offset = "0x12B8220", VA = "0x12B8220")]
		public ParticleTimer(float particleClock, float hideTime)
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x12B8590", Offset = "0x12B8590", VA = "0x12B8590")]
		public float SimulationTime(float currentTime)
		{
			return default(float);
		}
	}

	[Token(Token = "0x20000AD")]
	[CompilerGenerated]
	private sealed class <StopParticleCoroutine>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem particleSystem;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PooledParticleEffect <>4__this;

		[Token(Token = "0x1700005C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000354")]
			[Address(RVA = "0x12B8928", Offset = "0x12B8928", VA = "0x12B8928", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000356")]
			[Address(RVA = "0x12B8970", Offset = "0x12B8970", VA = "0x12B8970", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x12B817C", Offset = "0x12B817C", VA = "0x12B817C")]
		[DebuggerHidden]
		public <StopParticleCoroutine>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x12B8780", Offset = "0x12B8780", VA = "0x12B8780", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x12B8784", Offset = "0x12B8784", VA = "0x12B8784", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x12B8930", Offset = "0x12B8930", VA = "0x12B8930", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PooledParticleEffectCulling _culling;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ReadOnly]
	[SerializeField]
	private List<ParticleTimer> _particleHideTimers;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[ReadOnly]
	private bool _isHidden;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	[ReadOnly]
	private bool _isPlaying;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[SerializeField]
	[ReadOnly]
	private bool _callbackCalled;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem _particleSystemPrefab;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool _targetIsParent;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform _target;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Advanced")]
	[SerializeField]
	private Renderer _targetRenderer;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Min(0f)]
	[SerializeField]
	[Header("Optimalization")]
	private int _particlesLimit;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private bool _isCullingActive;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	[SerializeField]
	private bool _resimulateBeforeShowing;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	[SerializeField]
	private bool _waitForEmissionFinish;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	[SerializeField]
	private bool _stopParticleOnDisable;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool _stopIfParticleExceedsDuration;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[SerializeField]
	private bool _pauseParticlesOnHide;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool playOnStart;

	[Token(Token = "0x17000055")]
	private float ParticleCallbackDelay
	{
		[Token(Token = "0x600032E")]
		[Address(RVA = "0x12B6DC8", Offset = "0x12B6DC8", VA = "0x12B6DC8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000056")]
	public override int Limit
	{
		[Token(Token = "0x600032F")]
		[Address(RVA = "0x12B6DF4", Offset = "0x12B6DF4", VA = "0x12B6DF4", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000057")]
	public override Component Prefab
	{
		[Token(Token = "0x6000330")]
		[Address(RVA = "0x12B6DFC", Offset = "0x12B6DFC", VA = "0x12B6DFC", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000058")]
	public override Transform Target
	{
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x12B6E04", Offset = "0x12B6E04", VA = "0x12B6E04", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000059")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6000332")]
		[Address(RVA = "0x12B6E84", Offset = "0x12B6E84", VA = "0x12B6E84", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005A")]
	public bool IsCullingActive
	{
		[Token(Token = "0x6000333")]
		[Address(RVA = "0x12B6E8C", Offset = "0x12B6E8C", VA = "0x12B6E8C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000334")]
		[Address(RVA = "0x12B6E94", Offset = "0x12B6E94", VA = "0x12B6E94")]
		set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000335")]
		[Address(RVA = "0x12B7278", Offset = "0x12B7278", VA = "0x12B7278")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x12B7280", Offset = "0x12B7280", VA = "0x12B7280")]
	public void Reconfigure(ParticleSystem particleSystemPrefab, bool targetIsParent, Transform target, Renderer targetRenderer, int particlesLimit, bool isCullingActive, bool resimulateBeforeShowing = false, bool waitForEmissionFinish = false, bool stopIfParticleExceedsDuration = true)
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x12B7434", Offset = "0x12B7434", VA = "0x12B7434")]
	public void SetTarget(Transform target)
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x12B743C", Offset = "0x12B743C", VA = "0x12B743C")]
	public void SetIsTargetParent(bool isParent)
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x12B7448", Offset = "0x12B7448", VA = "0x12B7448", Slot = "8")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x12B7464", Offset = "0x12B7464", VA = "0x12B7464", Slot = "9")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x12B7348", Offset = "0x12B7348", VA = "0x12B7348")]
	private void Awake()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x12B7758", Offset = "0x12B7758", VA = "0x12B7758")]
	private void Start()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x12B7894", Offset = "0x12B7894", VA = "0x12B7894")]
	private ParticleSystem SpawnParticle()
	{
		return null;
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x12B7E3C", Offset = "0x12B7E3C", VA = "0x12B7E3C")]
	private void HandleParticleDelayedStop(ParticleSystem particleSystem)
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x12B80B4", Offset = "0x12B80B4", VA = "0x12B80B4")]
	private float ParticleRealDuration(ParticleSystem particleSystem)
	{
		return default(float);
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x12B8024", Offset = "0x12B8024", VA = "0x12B8024")]
	[IteratorStateMachine(typeof(<StopParticleCoroutine>d__42))]
	private IEnumerator StopParticleCoroutine(ParticleSystem particleSystem)
	{
		return null;
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x12B81A4", Offset = "0x12B81A4", VA = "0x12B81A4")]
	protected void UpdateEffects()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x12B6F90", Offset = "0x12B6F90", VA = "0x12B6F90")]
	private bool TryDisableCulling()
	{
		return default(bool);
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x12B6EE4", Offset = "0x12B6EE4", VA = "0x12B6EE4")]
	private bool TryEnableCulling()
	{
		return default(bool);
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x12B7768", Offset = "0x12B7768", VA = "0x12B7768")]
	[ContextMenu("Play")]
	public void Play()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x12B733C", Offset = "0x12B733C", VA = "0x12B733C")]
	[ContextMenu("Stop")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x12B8228", Offset = "0x12B8228", VA = "0x12B8228")]
	[ContextMenu("ForceStop")]
	public void ForceStop()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x12B7470", Offset = "0x12B7470", VA = "0x12B7470")]
	protected void StopInternal(bool forceStop = false, bool onDisable = false)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x12B8234", Offset = "0x12B8234", VA = "0x12B8234")]
	private void HandleAllParticlesStop(bool forceStop, bool onDisable)
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x12B834C", Offset = "0x12B834C", VA = "0x12B834C")]
	[ContextMenu("Hide")]
	public void Hide()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x12B7030", Offset = "0x12B7030", VA = "0x12B7030")]
	[ContextMenu("Show")]
	public void Show()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x12B7D88", Offset = "0x12B7D88", VA = "0x12B7D88")]
	private void SetParticleRenderers(ParticleSystem particleSystem, bool enabled)
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x12B85A0", Offset = "0x12B85A0", VA = "0x12B85A0")]
	public PooledParticleEffect()
	{
	}
}
[Token(Token = "0x20000AE")]
public class PooledParticleEffectCulling : MonoBehaviour, ICulling<PooledParticleEffect>
{
	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float _cullingRadius;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float _viewDistance;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float _viewDistanceCheckOffset;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool playOnDisable;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PooledParticleEffect _target;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	[SerializeField]
	private bool _applicationQuitting;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CullingGroup cullingGroup;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isInDistance;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isInCamera;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool isShowing;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform mainCamera;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float currentDistance;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool IsInitialized;

	[Token(Token = "0x1700005E")]
	public CullingGroup CullingGroup
	{
		[Token(Token = "0x6000357")]
		[Address(RVA = "0x12B8978", Offset = "0x12B8978", VA = "0x12B8978", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005F")]
	public float CullingRadius
	{
		[Token(Token = "0x6000358")]
		[Address(RVA = "0x12B8980", Offset = "0x12B8980", VA = "0x12B8980", Slot = "5")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000359")]
		[Address(RVA = "0x12B8988", Offset = "0x12B8988", VA = "0x12B8988", Slot = "6")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public float ViewDistance
	{
		[Token(Token = "0x600035A")]
		[Address(RVA = "0x12B8990", Offset = "0x12B8990", VA = "0x12B8990", Slot = "7")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600035B")]
		[Address(RVA = "0x12B8998", Offset = "0x12B8998", VA = "0x12B8998", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x12B89A0", Offset = "0x12B89A0", VA = "0x12B89A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x12B8BF4", Offset = "0x12B8BF4", VA = "0x12B8BF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x12B8D0C", Offset = "0x12B8D0C", VA = "0x12B8D0C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x12B8D20", Offset = "0x12B8D20", VA = "0x12B8D20")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x12B8D2C", Offset = "0x12B8D2C", VA = "0x12B8D2C")]
	private void OnCameraMove()
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x12B8D54", Offset = "0x12B8D54", VA = "0x12B8D54")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x12B8E4C", Offset = "0x12B8E4C", VA = "0x12B8E4C")]
	private void CheckCulling()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x12B7540", Offset = "0x12B7540", VA = "0x12B7540", Slot = "10")]
	public void Setup(PooledParticleEffect target)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x12B8EE4", Offset = "0x12B8EE4", VA = "0x12B8EE4")]
	private void OnStateChanged(CullingGroupEvent sphere)
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x12B8A58", Offset = "0x12B8A58", VA = "0x12B8A58")]
	private void Init()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x12B8EAC", Offset = "0x12B8EAC", VA = "0x12B8EAC", Slot = "9")]
	public void Cull(bool visible)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x12B8F38", Offset = "0x12B8F38", VA = "0x12B8F38")]
	public PooledParticleEffectCulling()
	{
	}
}
[Token(Token = "0x20000AF")]
public class PoolingEffect : MonoBehaviour, IPooled<PoolingEffect>
{
	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timeToReturn;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool returnOnEnable;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool waitForEffectEnd;

	[Token(Token = "0x17000061")]
	public int poolID
	{
		[Token(Token = "0x6000368")]
		[Address(RVA = "0x12B8F60", Offset = "0x12B8F60", VA = "0x12B8F60", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000369")]
		[Address(RVA = "0x12B8F68", Offset = "0x12B8F68", VA = "0x12B8F68", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public ObjectPooler<PoolingEffect> pool
	{
		[Token(Token = "0x600036A")]
		[Address(RVA = "0x12B8F70", Offset = "0x12B8F70", VA = "0x12B8F70", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600036B")]
		[Address(RVA = "0x12B8F78", Offset = "0x12B8F78", VA = "0x12B8F78", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x12B8F80", Offset = "0x12B8F80", VA = "0x12B8F80")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x12B8F84", Offset = "0x12B8F84", VA = "0x12B8F84")]
	public void InvokeReturn()
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x12B900C", Offset = "0x12B900C", VA = "0x12B900C")]
	public void ReturnToPool()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x12B910C", Offset = "0x12B910C", VA = "0x12B910C")]
	private void OnParticleSystemStopped()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x12B9094", Offset = "0x12B9094", VA = "0x12B9094")]
	private void ForceReturnToPool()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x12B911C", Offset = "0x12B911C", VA = "0x12B911C")]
	public PoolingEffect()
	{
	}
}
[Token(Token = "0x20000B0")]
[DefaultExecutionOrder(100)]
public class ArcherBehaviour : EnemyBehaviourBase
{
	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashHaveEnemy;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int hashFleeing;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int hashIdleState;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float fleeingDistance;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public RangeWeapon rangeWeapon;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject arrow;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public TrailRenderer trail;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Renderer renderer;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float hideValue;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool isStationary;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	protected bool m_Fleeing;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected Vector3 m_RememberedTargetPosition;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	protected Vector3 startPosition;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float _pointNavmeshBelongingThreshold;

	[Token(Token = "0x17000063")]
	public bool Fleeing
	{
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x12B9134", Offset = "0x12B9134", VA = "0x12B9134")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000373")]
		[Address(RVA = "0x12B913C", Offset = "0x12B913C", VA = "0x12B913C")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x12B9148", Offset = "0x12B9148", VA = "0x12B9148", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x12B9294", Offset = "0x12B9294", VA = "0x12B9294")]
	private void PlayStep(int frontFoot)
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x12B9298", Offset = "0x12B9298", VA = "0x12B9298")]
	public void Grunt()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x12B929C", Offset = "0x12B929C", VA = "0x12B929C")]
	public void Spotted()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x12B92A0", Offset = "0x12B92A0", VA = "0x12B92A0")]
	public void AttackPrepare()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x12B92B8", Offset = "0x12B92B8", VA = "0x12B92B8")]
	public void Shoot()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x12B9368", Offset = "0x12B9368", VA = "0x12B9368")]
	public void Hide()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x12B93CC", Offset = "0x12B93CC", VA = "0x12B93CC")]
	public void Show()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x12B9430", Offset = "0x12B9430", VA = "0x12B9430", Slot = "13")]
	public override void OnDieDissolve()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x12B9434", Offset = "0x12B9434", VA = "0x12B9434")]
	public void Dissapear()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x12B945C", Offset = "0x12B945C", VA = "0x12B945C")]
	public void Appear()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x12B9484", Offset = "0x12B9484", VA = "0x12B9484")]
	public void RememberTargetPosition()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x12B9514", Offset = "0x12B9514", VA = "0x12B9514")]
	public void CheckNeedFleeing()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x12B9C60", Offset = "0x12B9C60", VA = "0x12B9C60")]
	public new void FindTarget()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x12B9D74", Offset = "0x12B9D74", VA = "0x12B9D74", Slot = "9")]
	public override void ApplyDamage(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x12B9F50", Offset = "0x12B9F50", VA = "0x12B9F50", Slot = "8")]
	public override void Death(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x12BA274", Offset = "0x12BA274", VA = "0x12BA274")]
	public ArcherBehaviour()
	{
	}
}
[Token(Token = "0x20000B1")]
public class ArcherSMBAppear : SceneLinkedSMB<ArcherBehaviour>
{
	[Token(Token = "0x6000386")]
	[Address(RVA = "0x12BA3F8", Offset = "0x12BA3F8", VA = "0x12BA3F8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x12BA43C", Offset = "0x12BA43C", VA = "0x12BA43C", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x12BA4F0", Offset = "0x12BA4F0", VA = "0x12BA4F0")]
	public ArcherSMBAppear()
	{
	}
}
[Token(Token = "0x20000B2")]
public class ArcherSMBCooldown : SceneLinkedSMB<ArcherBehaviour>
{
	[Token(Token = "0x6000389")]
	[Address(RVA = "0x12BA538", Offset = "0x12BA538", VA = "0x12BA538", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x12BA560", Offset = "0x12BA560", VA = "0x12BA560")]
	public ArcherSMBCooldown()
	{
	}
}
[Token(Token = "0x20000B3")]
public class ArcherSMBDissapear : SceneLinkedSMB<ArcherBehaviour>
{
	[Token(Token = "0x600038B")]
	[Address(RVA = "0x12BA5A8", Offset = "0x12BA5A8", VA = "0x12BA5A8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x12BA5F0", Offset = "0x12BA5F0", VA = "0x12BA5F0", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x12BA69C", Offset = "0x12BA69C", VA = "0x12BA69C")]
	public ArcherSMBDissapear()
	{
	}
}
[Token(Token = "0x20000B4")]
public class ArcherSMBFleeing : SceneLinkedSMB<ArcherBehaviour>
{
	[Token(Token = "0x600038E")]
	[Address(RVA = "0x12BA6E4", Offset = "0x12BA6E4", VA = "0x12BA6E4", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x12BA708", Offset = "0x12BA708", VA = "0x12BA708", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x12BA730", Offset = "0x12BA730", VA = "0x12BA730", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x12BA7C4", Offset = "0x12BA7C4", VA = "0x12BA7C4")]
	public ArcherSMBFleeing()
	{
	}
}
[Token(Token = "0x20000B5")]
public class ArcherSMBIdle : SceneLinkedSMB<ArcherBehaviour>
{
	[Token(Token = "0x6000392")]
	[Address(RVA = "0x12BA80C", Offset = "0x12BA80C", VA = "0x12BA80C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x12BA8BC", Offset = "0x12BA8BC", VA = "0x12BA8BC", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x12BAA34", Offset = "0x12BAA34", VA = "0x12BAA34")]
	public ArcherSMBIdle()
	{
	}
}
[Token(Token = "0x20000B6")]
public class ArcherSMBShoot : SceneLinkedSMB<ArcherBehaviour>
{
	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_IdleStateHash;

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x12BAA7C", Offset = "0x12BAA7C", VA = "0x12BAA7C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x12BAD14", Offset = "0x12BAD14", VA = "0x12BAD14", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x12BAD2C", Offset = "0x12BAD2C", VA = "0x12BAD2C", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x12BADE0", Offset = "0x12BADE0", VA = "0x12BADE0")]
	public ArcherSMBShoot()
	{
	}
}
[Token(Token = "0x20000B7")]
public class ArcherSMBSpotted : SceneLinkedSMB<ArcherBehaviour>
{
	[Token(Token = "0x600039A")]
	[Address(RVA = "0x12BAE90", Offset = "0x12BAE90", VA = "0x12BAE90", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x12BAEC4", Offset = "0x12BAEC4", VA = "0x12BAEC4")]
	public ArcherSMBSpotted()
	{
	}
}
[Token(Token = "0x20000B8")]
public class Attack : MonoBehaviour
{
	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected float cooldown;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Range(0f, 1f)]
	protected float probability;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected bool isUnlocked;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	[Header("Health Settings")]
	protected bool checkHealth;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	protected int minHealth;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Damageable damageable;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Distance Settings")]
	[SerializeField]
	protected bool checkDistance;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected float distance;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Transform start;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool useRange;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	protected Vector2 range;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float lastAttackTime;

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x12BAF0C", Offset = "0x12BAF0C", VA = "0x12BAF0C", Slot = "4")]
	public virtual bool CanAttack(GameObject target)
	{
		return default(bool);
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x12BB050", Offset = "0x12BB050", VA = "0x12BB050")]
	public void UpdateTimer()
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x12BB06C", Offset = "0x12BB06C", VA = "0x12BB06C")]
	public void UnlockAttack()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x12BB078", Offset = "0x12BB078", VA = "0x12BB078")]
	public void BlockAttack()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x12BB080", Offset = "0x12BB080", VA = "0x12BB080")]
	public Attack()
	{
	}
}
[Token(Token = "0x20000B9")]
public class AttacksController : MonoBehaviour
{
	[Token(Token = "0x20000BA")]
	[CompilerGenerated]
	private sealed class <Cooldown>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttacksController <>4__this;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Attack attack;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003AB")]
			[Address(RVA = "0x12BB43C", Offset = "0x12BB43C", VA = "0x12BB43C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003AD")]
			[Address(RVA = "0x12BB484", Offset = "0x12BB484", VA = "0x12BB484", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x12BB300", Offset = "0x12BB300", VA = "0x12BB300")]
		[DebuggerHidden]
		public <Cooldown>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x12BB358", Offset = "0x12BB358", VA = "0x12BB358", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x12BB35C", Offset = "0x12BB35C", VA = "0x12BB35C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x12BB444", Offset = "0x12BB444", VA = "0x12BB444", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BB")]
	[CompilerGenerated]
	private sealed class <CooldownAll>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttacksController <>4__this;

		[Token(Token = "0x17000066")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B1")]
			[Address(RVA = "0x12BB5A0", Offset = "0x12BB5A0", VA = "0x12BB5A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0x12BB5E8", Offset = "0x12BB5E8", VA = "0x12BB5E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x12BB328", Offset = "0x12BB328", VA = "0x12BB328")]
		[DebuggerHidden]
		public <CooldownAll>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x12BB48C", Offset = "0x12BB48C", VA = "0x12BB48C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x12BB490", Offset = "0x12BB490", VA = "0x12BB490", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x12BB5A8", Offset = "0x12BB5A8", VA = "0x12BB5A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Attack[] attacks;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float attacksFrequency;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool waiting;

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x12BB098", Offset = "0x12BB098", VA = "0x12BB098")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x12BB0D8", Offset = "0x12BB0D8", VA = "0x12BB0D8")]
	public int GetAttack(GameObject target)
	{
		return default(int);
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x12BB0B8", Offset = "0x12BB0B8", VA = "0x12BB0B8")]
	public void RegisterAttackTime()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x12BB250", Offset = "0x12BB250", VA = "0x12BB250")]
	public void RegisterAttackTime(Attack attack)
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x12BB270", Offset = "0x12BB270", VA = "0x12BB270")]
	[IteratorStateMachine(typeof(<Cooldown>d__7))]
	private IEnumerator Cooldown(Attack attack)
	{
		return null;
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x12BB1DC", Offset = "0x12BB1DC", VA = "0x12BB1DC")]
	[IteratorStateMachine(typeof(<CooldownAll>d__8))]
	private IEnumerator CooldownAll()
	{
		return null;
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x12BB350", Offset = "0x12BB350", VA = "0x12BB350")]
	public AttacksController()
	{
	}
}
[Token(Token = "0x20000BC")]
public class EnemyAttack : MonoBehaviour
{
	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x12BB5F0", Offset = "0x12BB5F0", VA = "0x12BB5F0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x12BB5F4", Offset = "0x12BB5F4", VA = "0x12BB5F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x12BB5F8", Offset = "0x12BB5F8", VA = "0x12BB5F8")]
	public EnemyAttack()
	{
	}
}
[Token(Token = "0x20000BD")]
public class WaspAttack : Attack
{
	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Waypoint")]
	[SerializeField]
	protected bool checkWaypoint;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected WaspBehaviour wasp;

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x12BB600", Offset = "0x12BB600", VA = "0x12BB600", Slot = "4")]
	public override bool CanAttack(GameObject target)
	{
		return default(bool);
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x12BB654", Offset = "0x12BB654", VA = "0x12BB654")]
	public WaspAttack()
	{
	}
}
[Token(Token = "0x20000BE")]
public class Bomber : MonoBehaviour
{
	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RangeWeapon rangeWeapon;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x12BB674", Offset = "0x12BB674", VA = "0x12BB674")]
	public void Throw()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x12BB724", Offset = "0x12BB724", VA = "0x12BB724")]
	public Bomber()
	{
	}
}
[Token(Token = "0x20000BF")]
public class GoatBossChargeHelper : MonoBehaviour
{
	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnStun;

	[Token(Token = "0x17000068")]
	public bool IsChargeActive
	{
		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x12BB72C", Offset = "0x12BB72C", VA = "0x12BB72C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x12BB734", Offset = "0x12BB734", VA = "0x12BB734")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000069")]
	public GameObject ChargeHitTarget
	{
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x12BB740", Offset = "0x12BB740", VA = "0x12BB740")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x12BB748", Offset = "0x12BB748", VA = "0x12BB748")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x12BB750", Offset = "0x12BB750", VA = "0x12BB750")]
	public void TryStunGoat()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x12BB76C", Offset = "0x12BB76C", VA = "0x12BB76C")]
	public GoatBossChargeHelper()
	{
	}
}
[Token(Token = "0x20000C0")]
public class HedgehogRegenerationController : MonoBehaviour
{
	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int _healthEffectCounter;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<HedgehogHealthOrb> _healthOrbs;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _healOrbsAmount;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected Damageable hedgehogDamagable;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Transform healTarget;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected HedgehogHealthOrb healthOrbPrefab;

	[Token(Token = "0x1700006A")]
	public float HealthFollowTime
	{
		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x12BB774", Offset = "0x12BB774", VA = "0x12BB774")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x12BB77C", Offset = "0x12BB77C", VA = "0x12BB77C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public int HealthStep
	{
		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x12BB784", Offset = "0x12BB784", VA = "0x12BB784")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x12BB78C", Offset = "0x12BB78C", VA = "0x12BB78C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006C")]
	public int MinimalHealthLevel
	{
		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x12BB794", Offset = "0x12BB794", VA = "0x12BB794")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x12BB79C", Offset = "0x12BB79C", VA = "0x12BB79C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public Transform[] HealthEffectTransforms
	{
		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x12BB7A4", Offset = "0x12BB7A4", VA = "0x12BB7A4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x12BB7AC", Offset = "0x12BB7AC", VA = "0x12BB7AC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public bool AllOrbsSpawned
	{
		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x12BB7B4", Offset = "0x12BB7B4", VA = "0x12BB7B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x12BB7C8", Offset = "0x12BB7C8", VA = "0x12BB7C8")]
	[ContextMenu("Start Healing")]
	public void InitilizeRegeneration()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x12BB854", Offset = "0x12BB854", VA = "0x12BB854")]
	[ContextMenu("Heal Step")]
	public void RegenerationStep()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x12BBAC0", Offset = "0x12BBAC0", VA = "0x12BBAC0")]
	public void RegenerationEnd()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x12BBBA0", Offset = "0x12BBBA0", VA = "0x12BBBA0")]
	public void RegenerationReset()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x12BB87C", Offset = "0x12BB87C", VA = "0x12BB87C")]
	protected void SpawnNextHealthEffect()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x12BBCA0", Offset = "0x12BBCA0", VA = "0x12BBCA0")]
	public HedgehogRegenerationController()
	{
	}
}
[Token(Token = "0x20000C1")]
public class Spike : MonoBehaviour
{
	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x12BBD3C", Offset = "0x12BBD3C", VA = "0x12BBD3C")]
	public Spike()
	{
	}
}
[Token(Token = "0x20000C2")]
public class SpikesController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000C3")]
	public struct SpikesColumn
	{
		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<Spike> spikeColumn;
	}

	[Token(Token = "0x20000C4")]
	[CompilerGenerated]
	private sealed class <AnimateWaveRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpikesController <>4__this;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <longestColumnValue>5__2;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x1700006F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003DF")]
			[Address(RVA = "0x12BC38C", Offset = "0x12BC38C", VA = "0x12BC38C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003E1")]
			[Address(RVA = "0x12BC3D4", Offset = "0x12BC3D4", VA = "0x12BC3D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x12BBE08", Offset = "0x12BBE08", VA = "0x12BBE08")]
		[DebuggerHidden]
		public <AnimateWaveRoutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x12BC1DC", Offset = "0x12BC1DC", VA = "0x12BC1DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x12BC1E0", Offset = "0x12BC1E0", VA = "0x12BC1E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x12BC394", Offset = "0x12BC394", VA = "0x12BC394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C5")]
	[CompilerGenerated]
	private sealed class <AnimateWaveRowRoutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpikesController <>4__this;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int row;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003E5")]
			[Address(RVA = "0x12BC4C4", Offset = "0x12BC4C4", VA = "0x12BC4C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003E7")]
			[Address(RVA = "0x12BC50C", Offset = "0x12BC50C", VA = "0x12BC50C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x12BBED4", Offset = "0x12BBED4", VA = "0x12BBED4")]
		[DebuggerHidden]
		public <AnimateWaveRowRoutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x12BC3DC", Offset = "0x12BC3DC", VA = "0x12BC3DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x12BC3E0", Offset = "0x12BC3E0", VA = "0x12BC3E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x12BC4CC", Offset = "0x12BC4CC", VA = "0x12BC4CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float interval;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float activeDuration;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SpikesColumn> spikeWave;

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x12BBD44", Offset = "0x12BBD44", VA = "0x12BBD44")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x12BBD54", Offset = "0x12BBD54", VA = "0x12BBD54")]
	[ContextMenu("AnimateWave")]
	public void AnimateWave()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x12BBDE8", Offset = "0x12BBDE8", VA = "0x12BBDE8")]
	[ContextMenu("ResetWave")]
	public void ResetWave()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x12BBD74", Offset = "0x12BBD74", VA = "0x12BBD74")]
	[IteratorStateMachine(typeof(<AnimateWaveRoutine>d__6))]
	protected IEnumerator AnimateWaveRoutine()
	{
		return null;
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x12BBE30", Offset = "0x12BBE30", VA = "0x12BBE30")]
	public void AnimateWaveRow(int row)
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x12BBE50", Offset = "0x12BBE50", VA = "0x12BBE50")]
	[IteratorStateMachine(typeof(<AnimateWaveRowRoutine>d__8))]
	protected IEnumerator AnimateWaveRowRoutine(int row)
	{
		return null;
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x12BBEFC", Offset = "0x12BBEFC", VA = "0x12BBEFC")]
	private void SetActiveRow(List<SpikesColumn> spikeWave, int row, bool active)
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x12BC020", Offset = "0x12BC020", VA = "0x12BC020")]
	[ContextMenu("ShowSpikes")]
	private void ShowSpikes()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x12BBD4C", Offset = "0x12BBD4C", VA = "0x12BBD4C")]
	[ContextMenu("HideSpikes")]
	private void HideSpikes()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x12BC028", Offset = "0x12BC028", VA = "0x12BC028")]
	private void SetActiveSpikes(bool active)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x12BC1C8", Offset = "0x12BC1C8", VA = "0x12BC1C8")]
	public SpikesController()
	{
	}
}
[Token(Token = "0x20000C6")]
public class OctopusBossController : MonoBehaviour
{
	[Token(Token = "0x20000C8")]
	[CompilerGenerated]
	private sealed class <InvokeSequenceRoutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float initialDelay;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OctopusBossController <>4__this;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OctopusBossActionData[] actionsData;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <i>5__2;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OctopusBossActionConfig <config>5__3;

		[Token(Token = "0x17000073")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003F2")]
			[Address(RVA = "0x12BCCAC", Offset = "0x12BCCAC", VA = "0x12BCCAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003F4")]
			[Address(RVA = "0x12BCCF4", Offset = "0x12BCCF4", VA = "0x12BCCF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x12BC90C", Offset = "0x12BC90C", VA = "0x12BC90C")]
		[DebuggerHidden]
		public <InvokeSequenceRoutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x12BC97C", Offset = "0x12BC97C", VA = "0x12BC97C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x12BC980", Offset = "0x12BC980", VA = "0x12BC980", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x12BCCB4", Offset = "0x12BCCB4", VA = "0x12BCCB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OctopusBossActionConfig> actionConfigs;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OctopusBossActionConfig _lastConfig;

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x12BC514", Offset = "0x12BC514", VA = "0x12BC514")]
	public OctopusBossActionConfig GetActionConfig(OctopusBossActionData actionData)
	{
		return default(OctopusBossActionConfig);
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x12BC78C", Offset = "0x12BC78C", VA = "0x12BC78C")]
	public void InvokeSequence(OctopusBossActionData[] actionsData, float initialDelay = 0f)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x12BC878", Offset = "0x12BC878", VA = "0x12BC878")]
	public void StopSequence()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x12BC7D8", Offset = "0x12BC7D8", VA = "0x12BC7D8")]
	[IteratorStateMachine(typeof(<InvokeSequenceRoutine>d__5))]
	private IEnumerator InvokeSequenceRoutine(OctopusBossActionData[] actionsData, float initialDelay = 0f)
	{
		return null;
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x12BC934", Offset = "0x12BC934", VA = "0x12BC934")]
	public OctopusBossController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C9")]
public struct OctopusBossActionConfig
{
	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public OctopusBossActionType actionType;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public OctopusBossAttackPosition actionPosition;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Header("FSM Config")]
	public PlayMakerFSM attackFSM;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string attackEvent;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string stopEvent;

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x12BCCFC", Offset = "0x12BCCFC", VA = "0x12BCCFC")]
	public OctopusBossActionConfig(OctopusBossActionType actionType = OctopusBossActionType.None, OctopusBossAttackPosition actionPosition = OctopusBossAttackPosition.None, float duration = 0f)
	{
	}
}
[Serializable]
[Token(Token = "0x20000CA")]
public class OctopusBossActionData
{
	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public OctopusBossAttackPosition actionPosition;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public OctopusBossActionType actionType;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x12BCDC0", Offset = "0x12BCDC0", VA = "0x12BCDC0")]
	public OctopusBossActionData()
	{
	}
}
[Token(Token = "0x20000CB")]
public enum OctopusBossActionType
{
	[Token(Token = "0x4000331")]
	None = 0,
	[Token(Token = "0x4000332")]
	LightAttack = 1,
	[Token(Token = "0x4000333")]
	HeavyAttack = 2,
	[Token(Token = "0x4000334")]
	SwipeAttack = 3,
	[Token(Token = "0x4000335")]
	Scream = 5
}
[Token(Token = "0x20000CC")]
public enum OctopusBossAttackPosition
{
	[Token(Token = "0x4000337")]
	None = 0,
	[Token(Token = "0x4000338")]
	F = 10,
	[Token(Token = "0x4000339")]
	L = 20,
	[Token(Token = "0x400033A")]
	R = 30,
	[Token(Token = "0x400033B")]
	F0 = 11,
	[Token(Token = "0x400033C")]
	F1 = 12,
	[Token(Token = "0x400033D")]
	F2 = 13,
	[Token(Token = "0x400033E")]
	F3 = 14,
	[Token(Token = "0x400033F")]
	F4 = 15,
	[Token(Token = "0x4000340")]
	F5 = 16,
	[Token(Token = "0x4000341")]
	L0 = 21,
	[Token(Token = "0x4000342")]
	L1 = 22,
	[Token(Token = "0x4000343")]
	L2 = 23,
	[Token(Token = "0x4000344")]
	L3 = 24,
	[Token(Token = "0x4000345")]
	L4 = 25,
	[Token(Token = "0x4000346")]
	L5 = 26,
	[Token(Token = "0x4000347")]
	R0 = 31,
	[Token(Token = "0x4000348")]
	R1 = 32,
	[Token(Token = "0x4000349")]
	R2 = 33,
	[Token(Token = "0x400034A")]
	R3 = 34,
	[Token(Token = "0x400034B")]
	R4 = 35,
	[Token(Token = "0x400034C")]
	R5 = 36
}
[Token(Token = "0x20000CD")]
public class SpiderBossController : MonoBehaviour
{
	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 100f)]
	[SerializeField]
	private int _attackChargeLevel;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator animator;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<MeshRenderer> renderers;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<SpiderBossActionConfig> actionConfigs;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject legTarget;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RangeWeapon bombWeapon;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject bombTarget;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onChargeLevelChange;

	[Token(Token = "0x17000075")]
	public SpiderBossLeg CurrentLeg
	{
		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x12BCDC8", Offset = "0x12BCDC8", VA = "0x12BCDC8")]
		[CompilerGenerated]
		get
		{
			return default(SpiderBossLeg);
		}
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x12BCDD0", Offset = "0x12BCDD0", VA = "0x12BCDD0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000076")]
	public int AttackChargeLevel
	{
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x12BCDE0", Offset = "0x12BCDE0", VA = "0x12BCDE0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x12BCDE8", Offset = "0x12BCDE8", VA = "0x12BCDE8")]
		set
		{
		}
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x12BCDD8", Offset = "0x12BCDD8", VA = "0x12BCDD8")]
	public void SetLeg(int leg)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x12BCDF0", Offset = "0x12BCDF0", VA = "0x12BCDF0")]
	public SpiderBossActionConfig GetActionConfig(SpiderBossActionType actionType)
	{
		return default(SpiderBossActionConfig);
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x12BD030", Offset = "0x12BD030", VA = "0x12BD030")]
	public void ExecuteAction(SpiderBossActionType actionType)
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x12BD1D0", Offset = "0x12BD1D0", VA = "0x12BD1D0")]
	public SpiderBossController()
	{
	}
}
[Token(Token = "0x20000CF")]
public enum SpiderBossActionType
{
	[Token(Token = "0x4000358")]
	None = 0,
	[Token(Token = "0x4000359")]
	PierceAttackNormal = 1,
	[Token(Token = "0x400035A")]
	PierceAttackStrong = 2,
	[Token(Token = "0x400035B")]
	PierceAttackStorm = 3,
	[Token(Token = "0x400035C")]
	StunBombAttack = 5,
	[Token(Token = "0x400035D")]
	QuickBombAttack = 6,
	[Token(Token = "0x400035E")]
	BombAttack = 7,
	[Token(Token = "0x400035F")]
	VomitAttackStart = 8,
	[Token(Token = "0x4000360")]
	VomitAttackStop = 9,
	[Token(Token = "0x4000361")]
	TripleBombAttack = 10,
	[Token(Token = "0x4000362")]
	EatSnack = 11,
	[Token(Token = "0x4000363")]
	EatMoth = 12,
	[Token(Token = "0x4000364")]
	ReviveEnemies = 15
}
[Token(Token = "0x20000D0")]
public enum SpiderBossLeg
{
	[Token(Token = "0x4000366")]
	Default,
	[Token(Token = "0x4000367")]
	FarLeft,
	[Token(Token = "0x4000368")]
	Left,
	[Token(Token = "0x4000369")]
	Right,
	[Token(Token = "0x400036A")]
	FarRight
}
[Serializable]
[Token(Token = "0x20000D1")]
public struct SpiderBossActionConfig
{
	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public SpiderBossActionType actionType;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float duration;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string defaultTrigger;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("LegTriggers")]
	public string farLeftLegTrigger;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string leftLegTrigger;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string rightLegTrigger;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string farRightLegTrigger;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Anticipation")]
	public PooledParticleEffect anticipationEffect;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float anticipationStart;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float anticipationStop;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Additional Event")]
	public UnityEvent onExecuteAction;

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x12BD1F4", Offset = "0x12BD1F4", VA = "0x12BD1F4")]
	public SpiderBossActionConfig(SpiderBossActionType actionType = SpiderBossActionType.None, float duration = 0f)
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x12BD2F8", Offset = "0x12BD2F8", VA = "0x12BD2F8")]
	public bool Validate([Optional] GameObject owner)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000D2")]
public class CloneController : MonoBehaviour
{
	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CloneData[] items;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Damageable damageable;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool activeOnStart;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool cloneOnDeath;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool autoClone;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	private bool cloneEnabled;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool invokeEvent;

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x12BD440", Offset = "0x12BD440", VA = "0x12BD440")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x12BD5A8", Offset = "0x12BD5A8", VA = "0x12BD5A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x12BD6EC", Offset = "0x12BD6EC", VA = "0x12BD6EC")]
	public void OnTakeDamage()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x12BD820", Offset = "0x12BD820", VA = "0x12BD820", Slot = "4")]
	public virtual void Clone(int index)
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x12BD7C4", Offset = "0x12BD7C4", VA = "0x12BD7C4")]
	public bool IsInRange(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x12BD85C", Offset = "0x12BD85C", VA = "0x12BD85C")]
	public bool Resolve()
	{
		return default(bool);
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x12BD8E8", Offset = "0x12BD8E8", VA = "0x12BD8E8")]
	public void SetActive(bool active)
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x12BD8F4", Offset = "0x12BD8F4", VA = "0x12BD8F4")]
	public CloneController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D3")]
public struct CloneData
{
	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public PoolSpawner spawner;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float cloneThreshold;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool raised;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[HideInInspector]
	public bool enabled;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent onClone;
}
[Token(Token = "0x20000D4")]
public class DamagerArea : MonoBehaviour
{
	[Token(Token = "0x600040B")]
	[Address(RVA = "0x12BD910", Offset = "0x12BD910", VA = "0x12BD910")]
	public void OnEnter()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x12BD914", Offset = "0x12BD914", VA = "0x12BD914")]
	public void OnExit()
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x12BD918", Offset = "0x12BD918", VA = "0x12BD918")]
	public void AttachEffect()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x12BD91C", Offset = "0x12BD91C", VA = "0x12BD91C")]
	public DamagerArea()
	{
	}
}
[Token(Token = "0x20000D5")]
public class EnemiesPoolFixer : MonoBehaviour
{
	[Token(Token = "0x20000D6")]
	[CompilerGenerated]
	private sealed class <FixCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemiesPoolFixer <>4__this;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<MonoBehaviour> <enemies>5__2;

		[Token(Token = "0x17000077")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000417")]
			[Address(RVA = "0x12BDF94", Offset = "0x12BDF94", VA = "0x12BDF94", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000419")]
			[Address(RVA = "0x12BDFDC", Offset = "0x12BDFDC", VA = "0x12BDFDC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x12BDB34", Offset = "0x12BDB34", VA = "0x12BDB34")]
		[DebuggerHidden]
		public <FixCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x12BDC28", Offset = "0x12BDC28", VA = "0x12BDC28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x12BDC2C", Offset = "0x12BDC2C", VA = "0x12BDC2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x12BDF9C", Offset = "0x12BDF9C", VA = "0x12BDF9C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 InitilizePosition;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int InitializeAmount;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<MonoBehaviour> EnemiesPrefabs;

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x12BD924", Offset = "0x12BD924", VA = "0x12BD924")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x12BD9CC", Offset = "0x12BD9CC", VA = "0x12BD9CC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x12BDA74", Offset = "0x12BDA74", VA = "0x12BDA74")]
	public void FixEnemiesPools()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x12BDAC0", Offset = "0x12BDAC0", VA = "0x12BDAC0")]
	[IteratorStateMachine(typeof(<FixCoroutine>d__6))]
	private IEnumerator FixCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x12BDB5C", Offset = "0x12BDB5C", VA = "0x12BDB5C")]
	public EnemiesPoolFixer()
	{
	}
}
[Token(Token = "0x20000D7")]
public class EnemyAnimationEventInvoker : UnityEventInvoker
{
	[Serializable]
	[Token(Token = "0x20000D8")]
	public struct EnemyAnimationEvent
	{
		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string eventName;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PlayMakerFSM fsm;

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x12BE694", Offset = "0x12BE694", VA = "0x12BE694")]
		public EnemyAnimationEvent(string name, PlayMakerFSM playMaker)
		{
		}
	}

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<EnemyAnimationEvent> enemyEvents;

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x12BDFE4", Offset = "0x12BDFE4", VA = "0x12BDFE4", Slot = "4")]
	public override void InvokeEvent(string eventName)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x12BE184", Offset = "0x12BE184", VA = "0x12BE184")]
	public EnemyAnimationEventInvoker()
	{
	}
}
[Token(Token = "0x20000D9")]
public class EnemyBehaviourBase : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Scanner")]
	public TargetScanner playerScanner;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float timeToLeaveSpotted;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool useTargetDistributor;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool checkNavmesh;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 3f)]
	[Space]
	public float weight;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxPushback;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Events")]
	public UnityEvent onHitStart;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onHitCompleted;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform hitTransform;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform hitRecoilTransform;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MonoBehaviour[] dieDisableComponents;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashHit;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int hashAttack;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int hashDeath;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int hitType;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int stun;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static readonly int startStun;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly int hashSpotted;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static readonly int hashDie;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly int hashHitAdditive;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static readonly int hashGrounded;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected XRCharacter m_Target;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected EnemyController m_Controller;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Damageable damageable;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool hit;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected TargetDistributor.TargetFollower m_FollowerInstance;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected float m_TimerSinceLostTarget;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected bool reactOnHit;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected DissolveEffect dissolveEffect;

	[Token(Token = "0x17000079")]
	public EnemyController controller
	{
		[Token(Token = "0x600041D")]
		[Address(RVA = "0x12BE6C4", Offset = "0x12BE6C4", VA = "0x12BE6C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007A")]
	public XRCharacter target
	{
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x12BE6CC", Offset = "0x12BE6CC", VA = "0x12BE6CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007B")]
	public Damageable Damageable
	{
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x12BE6D4", Offset = "0x12BE6D4", VA = "0x12BE6D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007C")]
	public TargetDistributor.TargetFollower followerData
	{
		[Token(Token = "0x6000420")]
		[Address(RVA = "0x12BE6DC", Offset = "0x12BE6DC", VA = "0x12BE6DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007D")]
	public bool InCombat
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0x12BE6E4", Offset = "0x12BE6E4", VA = "0x12BE6E4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000422")]
		[Address(RVA = "0x12BE6EC", Offset = "0x12BE6EC", VA = "0x12BE6EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	public bool Defeated
	{
		[Token(Token = "0x6000423")]
		[Address(RVA = "0x12BE6F8", Offset = "0x12BE6F8", VA = "0x12BE6F8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000424")]
		[Address(RVA = "0x12BE700", Offset = "0x12BE700", VA = "0x12BE700")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700007F")]
	public IArenaWave ArenaWave
	{
		[Token(Token = "0x6000425")]
		[Address(RVA = "0x12BE70C", Offset = "0x12BE70C", VA = "0x12BE70C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000426")]
		[Address(RVA = "0x12BE714", Offset = "0x12BE714", VA = "0x12BE714")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000080")]
	public Wave Wave
	{
		[Token(Token = "0x6000427")]
		[Address(RVA = "0x12BE71C", Offset = "0x12BE71C", VA = "0x12BE71C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000428")]
		[Address(RVA = "0x12BE724", Offset = "0x12BE724", VA = "0x12BE724")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000081")]
	public bool IsSpawnable
	{
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x12BE72C", Offset = "0x12BE72C", VA = "0x12BE72C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000082")]
	public bool ReactOnHit
	{
		[Token(Token = "0x600042A")]
		[Address(RVA = "0x12BE78C", Offset = "0x12BE78C", VA = "0x12BE78C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600042B")]
		[Address(RVA = "0x12BE794", Offset = "0x12BE794", VA = "0x12BE794")]
		set
		{
		}
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x12BE7A0", Offset = "0x12BE7A0", VA = "0x12BE7A0", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x12B923C", Offset = "0x12B923C", VA = "0x12B923C", Slot = "6")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x12BE86C", Offset = "0x12BE86C", VA = "0x12BE86C", Slot = "7")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x12BE898", Offset = "0x12BE898", VA = "0x12BE898", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x12BA018", Offset = "0x12BA018", VA = "0x12BA018", Slot = "8")]
	public virtual void Death(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x12B9E3C", Offset = "0x12B9E3C", VA = "0x12B9E3C", Slot = "9")]
	public virtual void ApplyDamage(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x12BEBCC", Offset = "0x12BEBCC", VA = "0x12BEBCC")]
	public void Pushback(Vector3 direction, float power, bool rotate, int attackType)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x12BEDB4", Offset = "0x12BEDB4", VA = "0x12BEDB4", Slot = "10")]
	public virtual void HitStart()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x12BEE48", Offset = "0x12BEE48", VA = "0x12BEE48", Slot = "11")]
	public virtual void HitStop()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x12BA9BC", Offset = "0x12BA9BC", VA = "0x12BA9BC")]
	public void TriggerAttack()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x12BEE5C", Offset = "0x12BEE5C", VA = "0x12BEE5C", Slot = "12")]
	public virtual void OnDieStarted()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x12BEE60", Offset = "0x12BEE60", VA = "0x12BEE60", Slot = "13")]
	public virtual void OnDieDissolve()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x12BEE8C", Offset = "0x12BEE8C", VA = "0x12BEE8C")]
	public void OnDieCompleted()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x12BEEDC", Offset = "0x12BEEDC", VA = "0x12BEEDC")]
	protected void Defeat()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x12BEFD0", Offset = "0x12BEFD0", VA = "0x12BEFD0")]
	public void Spawn()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x12BF07C", Offset = "0x12BF07C", VA = "0x12BF07C")]
	public void SpawnStarted()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x12BF190", Offset = "0x12BF190", VA = "0x12BF190")]
	public void OnAttackCompleted()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x12BA5EC", Offset = "0x12BA5EC", VA = "0x12BA5EC")]
	public void RotateToPlayer()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x12BF194", Offset = "0x12BF194", VA = "0x12BF194")]
	public void SetWeight(float newValue)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x12BF19C", Offset = "0x12BF19C", VA = "0x12BF19C")]
	public void SetStun(bool value)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x12BF2BC", Offset = "0x12BF2BC", VA = "0x12BF2BC", Slot = "14")]
	public virtual void FindTarget()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x12BF608", Offset = "0x12BF608", VA = "0x12BF608")]
	public void TargetLost()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x12BE9B8", Offset = "0x12BE9B8", VA = "0x12BE9B8")]
	private void SetHitTransforms(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x12BA304", Offset = "0x12BA304", VA = "0x12BA304")]
	public EnemyBehaviourBase()
	{
	}
}
[Token(Token = "0x20000DA")]
public class EnemyCloneController : CloneController
{
	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EnemyBehaviour enemy;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float enemyRadius;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask enemyMask;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool findFreePosition;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform debug;

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x12BF8C8", Offset = "0x12BF8C8", VA = "0x12BF8C8", Slot = "4")]
	public override void Clone(int index)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x12BFB0C", Offset = "0x12BFB0C", VA = "0x12BFB0C")]
	public EnemyCloneController()
	{
	}
}
[Token(Token = "0x20000DB")]
[DefaultExecutionOrder(-1)]
public class EnemyController : MonoBehaviour
{
	[Token(Token = "0x20000DC")]
	public enum EnemyMovementType
	{
		[Token(Token = "0x40003C6")]
		STATIONARY,
		[Token(Token = "0x40003C7")]
		MOVING
	}

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool interpolateTurning;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool applyAnimationRotation;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool useRootMotion;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float extraRotationSpeed;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MultiplicativeFloatStat animatorSpeed;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MultiplicativeFloatStat movementSpeed;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected NavMeshAgent m_NavMeshAgent;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected bool m_FollowNavmeshAgent;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Animator m_Animator;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected bool m_UnderExternalForce;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	protected bool m_ExternalForceAddGravity;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected Vector3 m_ExternalForce;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected bool m_Grounded;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	protected bool mixedForce;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected float mixedForceValue;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Rigidbody m_Rigidbody;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected EnemyMovementType enemyType;

	[Token(Token = "0x40003C4")]
	private const float k_GroundedRayDistance = 0.018f;

	[Token(Token = "0x17000083")]
	public Animator animator
	{
		[Token(Token = "0x6000447")]
		[Address(RVA = "0x12BFB34", Offset = "0x12BFB34", VA = "0x12BFB34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000084")]
	public Vector3 externalForce
	{
		[Token(Token = "0x6000448")]
		[Address(RVA = "0x12BFB3C", Offset = "0x12BFB3C", VA = "0x12BFB3C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000085")]
	public NavMeshAgent navmeshAgent
	{
		[Token(Token = "0x6000449")]
		[Address(RVA = "0x12BFB48", Offset = "0x12BFB48", VA = "0x12BFB48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000086")]
	public bool followNavmeshAgent
	{
		[Token(Token = "0x600044A")]
		[Address(RVA = "0x12BFB50", Offset = "0x12BFB50", VA = "0x12BFB50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000087")]
	public bool grounded
	{
		[Token(Token = "0x600044B")]
		[Address(RVA = "0x12BFB58", Offset = "0x12BFB58", VA = "0x12BFB58")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000088")]
	public float Speed
	{
		[Token(Token = "0x600044C")]
		[Address(RVA = "0x12BFB60", Offset = "0x12BFB60", VA = "0x12BFB60")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600044D")]
		[Address(RVA = "0x12BFB68", Offset = "0x12BFB68", VA = "0x12BFB68")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x12BFB70", Offset = "0x12BFB70", VA = "0x12BFB70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x12BFE24", Offset = "0x12BFE24", VA = "0x12BFE24")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x12BFE54", Offset = "0x12BFE54", VA = "0x12BFE54")]
	private void CheckGrounded()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x12C00EC", Offset = "0x12C00EC", VA = "0x12C00EC")]
	private void ForceMovement()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x12C02BC", Offset = "0x12C02BC", VA = "0x12C02BC")]
	private void OnAnimatorMove()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x12B9B7C", Offset = "0x12B9B7C", VA = "0x12B9B7C")]
	public void SetFollowNavmeshAgent(bool follow)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x12C0890", Offset = "0x12C0890", VA = "0x12C0890")]
	public void AddForce(Vector3 force, bool useGravity = true)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x12BEB14", Offset = "0x12BEB14", VA = "0x12BEB14")]
	public void AddMixedForce(float force)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x12C0934", Offset = "0x12C0934", VA = "0x12C0934")]
	public void ClearForce()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x12BAB88", Offset = "0x12BAB88", VA = "0x12BAB88")]
	public void SetForward(Vector3 forward)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x12B9C44", Offset = "0x12B9C44", VA = "0x12B9C44")]
	public bool SetTarget(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x12B9A78", Offset = "0x12B9A78", VA = "0x12B9A78")]
	public bool IsPositionReachable(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x12B9A44", Offset = "0x12B9A44", VA = "0x12B9A44")]
	public bool IsTargetOnNavmesh(Vector3 position, float radius = 0.2f)
	{
		return default(bool);
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x12C06DC", Offset = "0x12C06DC", VA = "0x12C06DC")]
	private void ExtraRotation()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x12C09BC", Offset = "0x12C09BC", VA = "0x12C09BC")]
	public EnemyController()
	{
	}
}
[Token(Token = "0x20000DD")]
public class EnemyHitStateReceiver : MonoBehaviour
{
	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnemyBehaviourBase enemy;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Events")]
	public UnityEvent onHitStarted;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onHitCompleted;

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x12C09F4", Offset = "0x12C09F4", VA = "0x12C09F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x12C09F8", Offset = "0x12C09F8", VA = "0x12C09F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x12C0A54", Offset = "0x12C0A54", VA = "0x12C0A54")]
	private void OnHitStart()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x12C0A68", Offset = "0x12C0A68", VA = "0x12C0A68")]
	private void OnHitCompleted()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x12C0A7C", Offset = "0x12C0A7C", VA = "0x12C0A7C")]
	public EnemyHitStateReceiver()
	{
	}
}
[Token(Token = "0x20000DE")]
public class IntervalContactDamager : MonoBehaviour
{
	[Token(Token = "0x20000E0")]
	[CompilerGenerated]
	private sealed class <DamagerCoroutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntervalContactDamager <>4__this;

		[Token(Token = "0x17000089")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000470")]
			[Address(RVA = "0x12C14B0", Offset = "0x12C14B0", VA = "0x12C14B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000472")]
			[Address(RVA = "0x12C14F8", Offset = "0x12C14F8", VA = "0x12C14F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x12C104C", Offset = "0x12C104C", VA = "0x12C104C")]
		[DebuggerHidden]
		public <DamagerCoroutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x12C1208", Offset = "0x12C1208", VA = "0x12C1208", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x12C120C", Offset = "0x12C120C", VA = "0x12C120C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x12C14B8", Offset = "0x12C14B8", VA = "0x12C14B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int amount;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(1f, 10f)]
	public float force;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float interval;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask damagedLayers;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Collider> colliders;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Coroutine coroutine;

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x12C0A84", Offset = "0x12C0A84", VA = "0x12C0A84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x12C0AF4", Offset = "0x12C0AF4", VA = "0x12C0AF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x12C0B38", Offset = "0x12C0B38", VA = "0x12C0B38")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x12C0F98", Offset = "0x12C0F98", VA = "0x12C0F98")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x12C0C58", Offset = "0x12C0C58", VA = "0x12C0C58")]
	[IteratorStateMachine(typeof(<DamagerCoroutine>d__10))]
	private IEnumerator DamagerCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x12C0CCC", Offset = "0x12C0CCC", VA = "0x12C0CCC")]
	private void Collide(Collider other)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x12C1074", Offset = "0x12C1074", VA = "0x12C1074")]
	public IntervalContactDamager()
	{
	}
}
[Token(Token = "0x20000E1")]
public class KamikazeBehaviour : EnemyBehaviourBase
{
	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float distanceToExplode;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject explodeEffect;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform explodeOrigin;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public MeleeWeapon explodeDamager;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashExplode;

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x12C1500", Offset = "0x12C1500", VA = "0x12C1500", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x12C1594", Offset = "0x12C1594", VA = "0x12C1594")]
	public void Explode()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x12C1608", Offset = "0x12C1608", VA = "0x12C1608")]
	public void RequestTargetPosition()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x12C17CC", Offset = "0x12C17CC", VA = "0x12C17CC")]
	public KamikazeBehaviour()
	{
	}
}
[Token(Token = "0x20000E2")]
public class KamikazeEffectsController : AlchemyModificationReceiver
{
	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Damageable enemy;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public DropController dropController;

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x12C18B0", Offset = "0x12C18B0", VA = "0x12C18B0", Slot = "6")]
	public override void AddModification(ModificationSenderBase.ModificationSignal ability)
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x12C19E4", Offset = "0x12C19E4", VA = "0x12C19E4")]
	public KamikazeEffectsController()
	{
	}
}
[Token(Token = "0x20000E3")]
public class KamikazeSMBExplode : SceneLinkedSMB<KamikazeBehaviour>
{
	[Token(Token = "0x600047A")]
	[Address(RVA = "0x12C19EC", Offset = "0x12C19EC", VA = "0x12C19EC", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0x12C1AB4", Offset = "0x12C1AB4", VA = "0x12C1AB4")]
	public KamikazeSMBExplode()
	{
	}
}
[Token(Token = "0x20000E4")]
public class KamikazeSMBFollow : SceneLinkedSMB<KamikazeBehaviour>
{
	[Token(Token = "0x600047C")]
	[Address(RVA = "0x12C1AFC", Offset = "0x12C1AFC", VA = "0x12C1AFC", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x12C1B24", Offset = "0x12C1B24", VA = "0x12C1B24", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0x12C1DEC", Offset = "0x12C1DEC", VA = "0x12C1DEC")]
	public KamikazeSMBFollow()
	{
	}
}
[Token(Token = "0x20000E5")]
public class KamikazeSMBSpawn : SceneLinkedSMB<KamikazeBehaviour>
{
	[Token(Token = "0x600047F")]
	[Address(RVA = "0x12C1E34", Offset = "0x12C1E34", VA = "0x12C1E34", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x12C1E94", Offset = "0x12C1E94", VA = "0x12C1E94")]
	public KamikazeSMBSpawn()
	{
	}
}
[Token(Token = "0x20000E6")]
public class LivingStonesBehaviour : EnemyBehaviourBase
{
	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Combat")]
	public float attackDistance;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public MeleeWeapon jumpAttack;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected Vector3 originalPosition;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashReturn;

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x12C1EDC", Offset = "0x12C1EDC", VA = "0x12C1EDC", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x12C1F80", Offset = "0x12C1F80", VA = "0x12C1F80")]
	public void OnAttackStarted()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x12C1FA0", Offset = "0x12C1FA0", VA = "0x12C1FA0")]
	public new void OnAttackCompleted()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x12C1FBC", Offset = "0x12C1FBC", VA = "0x12C1FBC")]
	public void RequestTargetPosition()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x12C2180", Offset = "0x12C2180", VA = "0x12C2180")]
	public void WalkBackToBase()
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x12C22C8", Offset = "0x12C22C8", VA = "0x12C22C8", Slot = "10")]
	public override void HitStart()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x12C22EC", Offset = "0x12C22EC", VA = "0x12C22EC", Slot = "8")]
	public override void Death(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x12C232C", Offset = "0x12C232C", VA = "0x12C232C")]
	public LivingStonesBehaviour()
	{
	}
}
[Token(Token = "0x20000E7")]
public class LivingStonesSMBAttack : SceneLinkedSMB<LivingStonesBehaviour>
{
	[Token(Token = "0x600048A")]
	[Address(RVA = "0x12C2418", Offset = "0x12C2418", VA = "0x12C2418", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x12C24FC", Offset = "0x12C24FC", VA = "0x12C24FC", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x12C25B0", Offset = "0x12C25B0", VA = "0x12C25B0")]
	public LivingStonesSMBAttack()
	{
	}
}
[Token(Token = "0x20000E8")]
public class LivingStonesSMBFollow : SceneLinkedSMB<LivingStonesBehaviour>
{
	[Token(Token = "0x600048D")]
	[Address(RVA = "0x12C25F8", Offset = "0x12C25F8", VA = "0x12C25F8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x12C2620", Offset = "0x12C2620", VA = "0x12C2620", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x12C28E8", Offset = "0x12C28E8", VA = "0x12C28E8")]
	public LivingStonesSMBFollow()
	{
	}
}
[Token(Token = "0x20000E9")]
public class LivingStonesSMBHidden : SceneLinkedSMB<LivingStonesBehaviour>
{
	[Token(Token = "0x6000490")]
	[Address(RVA = "0x12C2930", Offset = "0x12C2930", VA = "0x12C2930", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x12C29E0", Offset = "0x12C29E0", VA = "0x12C29E0")]
	public LivingStonesSMBHidden()
	{
	}
}
[Token(Token = "0x20000EA")]
public class LivingStonesSMBIdle : SceneLinkedSMB<LivingStonesBehaviour>
{
	[Token(Token = "0x6000492")]
	[Address(RVA = "0x12C2A28", Offset = "0x12C2A28", VA = "0x12C2A28", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x12C2AE0", Offset = "0x12C2AE0", VA = "0x12C2AE0", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x12C2B90", Offset = "0x12C2B90", VA = "0x12C2B90")]
	public LivingStonesSMBIdle()
	{
	}
}
[Token(Token = "0x20000EB")]
public class LivingStonesSMBReturn : SceneLinkedSMB<LivingStonesBehaviour>
{
	[Token(Token = "0x6000495")]
	[Address(RVA = "0x12C2BD8", Offset = "0x12C2BD8", VA = "0x12C2BD8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x12C2C8C", Offset = "0x12C2C8C", VA = "0x12C2C8C", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x12C2D48", Offset = "0x12C2D48", VA = "0x12C2D48", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x12C2E00", Offset = "0x12C2E00", VA = "0x12C2E00")]
	public LivingStonesSMBReturn()
	{
	}
}
[Token(Token = "0x20000EC")]
public class ManyFacesBehaviour : EnemyBehaviourBase
{
	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashInPursuit;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int hashAttackSlash1;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int hashAttackSlash2;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int hashAttackTornado;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int hashBreakAttackTornado;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public MeleeWeapon slash1;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public MeleeWeapon slash2;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public MeleeWeapon tornado;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float timeToStopPursuit;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[Header("Patrol")]
	public float patrolSpeed;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float patrolRadius;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float waypointDistance;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Header("Pursuit")]
	public float pursuitSpeed;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[Header("Combat")]
	public float slashAttackDistance;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float tornadoAttackDistance;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float timeToTornado;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public float tornadoDuration;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public float tornadoSpeed;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public int minHealthToTornado;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	protected float lastTornadoAttack;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	protected bool inTornado;

	[Token(Token = "0x1700008B")]
	public Vector3 originalPosition
	{
		[Token(Token = "0x6000499")]
		[Address(RVA = "0x12C2E48", Offset = "0x12C2E48", VA = "0x12C2E48")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600049A")]
		[Address(RVA = "0x12C2E54", Offset = "0x12C2E54", VA = "0x12C2E54")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x1700008C")]
	public Vector3 PatrolPosition
	{
		[Token(Token = "0x600049B")]
		[Address(RVA = "0x12C2E60", Offset = "0x12C2E60", VA = "0x12C2E60")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600049C")]
		[Address(RVA = "0x12C2E6C", Offset = "0x12C2E6C", VA = "0x12C2E6C")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x12C2E78", Offset = "0x12C2E78", VA = "0x12C2E78", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x12C3058", Offset = "0x12C3058", VA = "0x12C3058", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x12C3108", Offset = "0x12C3108", VA = "0x12C3108")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x12C318C", Offset = "0x12C318C", VA = "0x12C318C")]
	public void StartPursuit()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x12C33D4", Offset = "0x12C33D4", VA = "0x12C33D4")]
	public void ResetPursuit()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x12C33F4", Offset = "0x12C33F4", VA = "0x12C33F4")]
	public void StopPursuit()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x12C3220", Offset = "0x12C3220", VA = "0x12C3220")]
	public void RequestTargetPosition()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x12C3014", Offset = "0x12C3014", VA = "0x12C3014")]
	public void RequestNewPatrolPosition()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x12C347C", Offset = "0x12C347C", VA = "0x12C347C")]
	public void WalkBackToBase()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x12C34DC", Offset = "0x12C34DC", VA = "0x12C34DC")]
	public bool CanTornadoAttack()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x12C3530", Offset = "0x12C3530", VA = "0x12C3530")]
	public void TriggerTornadoAttack()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x12C35A8", Offset = "0x12C35A8", VA = "0x12C35A8")]
	public void BreakTornadoAttack()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x12C3640", Offset = "0x12C3640", VA = "0x12C3640")]
	public void TriggerSlashAttack(bool slash1)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x12C36D0", Offset = "0x12C36D0", VA = "0x12C36D0")]
	public void AttackBegin()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x12C36F0", Offset = "0x12C36F0", VA = "0x12C36F0")]
	public void AttackEnd()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x12C370C", Offset = "0x12C370C", VA = "0x12C370C")]
	public void Attack2Begin()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x12C372C", Offset = "0x12C372C", VA = "0x12C372C")]
	public void Attack2End()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x12C3748", Offset = "0x12C3748", VA = "0x12C3748")]
	public void TornadoBegin()
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x12C37E0", Offset = "0x12C37E0", VA = "0x12C37E0")]
	public void TornadoEnd()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x12C3808", Offset = "0x12C3808", VA = "0x12C3808", Slot = "10")]
	public override void HitStart()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x12C38E8", Offset = "0x12C38E8", VA = "0x12C38E8")]
	public void OnHit(Collider coll)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x12C399C", Offset = "0x12C399C", VA = "0x12C399C")]
	public ManyFacesBehaviour()
	{
	}
}
[Token(Token = "0x20000ED")]
public class ManyFacesPatrol : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x12C3B64", Offset = "0x12C3B64", VA = "0x12C3B64", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x12C3C18", Offset = "0x12C3C18", VA = "0x12C3C18", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x12C3DD0", Offset = "0x12C3DD0", VA = "0x12C3DD0")]
	public ManyFacesPatrol()
	{
	}
}
[Token(Token = "0x20000EE")]
public class ManyFacesSMBAttackDistributor : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Vector3 m_AttackPosition;

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x12C3E18", Offset = "0x12C3E18", VA = "0x12C3E18", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x12C3F90", Offset = "0x12C3F90", VA = "0x12C3F90")]
	public ManyFacesSMBAttackDistributor()
	{
	}
}
[Token(Token = "0x20000EF")]
public class ManyFacesSMBPursuit : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x12C3FD8", Offset = "0x12C3FD8", VA = "0x12C3FD8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x12C4004", Offset = "0x12C4004", VA = "0x12C4004", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x12C4304", Offset = "0x12C4304", VA = "0x12C4304")]
	public ManyFacesSMBPursuit()
	{
	}
}
[Token(Token = "0x20000F0")]
public class ManyFacesSMBReturn : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x12C434C", Offset = "0x12C434C", VA = "0x12C434C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x12C4364", Offset = "0x12C4364", VA = "0x12C4364", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x12C4474", Offset = "0x12C4474", VA = "0x12C4474")]
	public ManyFacesSMBReturn()
	{
	}
}
[Token(Token = "0x20000F1")]
public class ManyFacesSMBSlash : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x60004BF")]
	[Address(RVA = "0x12C44BC", Offset = "0x12C44BC", VA = "0x12C44BC", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x12C45A0", Offset = "0x12C45A0", VA = "0x12C45A0", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x12C4654", Offset = "0x12C4654", VA = "0x12C4654")]
	public ManyFacesSMBSlash()
	{
	}
}
[Token(Token = "0x20000F2")]
public class ManyFacesSMBSpotted : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x12C469C", Offset = "0x12C469C", VA = "0x12C469C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x12C46C0", Offset = "0x12C46C0", VA = "0x12C46C0", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x12C49D4", Offset = "0x12C49D4", VA = "0x12C49D4")]
	public ManyFacesSMBSpotted()
	{
	}
}
[Token(Token = "0x20000F3")]
public class ManyFacesSMBTornado : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected float duration;

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x12C4A1C", Offset = "0x12C4A1C", VA = "0x12C4A1C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x12C4AD8", Offset = "0x12C4AD8", VA = "0x12C4AD8", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x12C4CD8", Offset = "0x12C4CD8", VA = "0x12C4CD8", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x12C4DA0", Offset = "0x12C4DA0", VA = "0x12C4DA0")]
	public ManyFacesSMBTornado()
	{
	}
}
[Token(Token = "0x20000F4")]
public class ManyFacesSMBTornadoStart : SceneLinkedSMB<ManyFacesBehaviour>
{
	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Vector3 m_AttackPosition;

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x12C4DE8", Offset = "0x12C4DE8", VA = "0x12C4DE8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x12C4ECC", Offset = "0x12C4ECC", VA = "0x12C4ECC", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x12C4F78", Offset = "0x12C4F78", VA = "0x12C4F78")]
	public ManyFacesSMBTornadoStart()
	{
	}
}
[Token(Token = "0x20000F5")]
public class MasterMindBehaviour : EnemyBehaviourBase
{
	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float dashInterval;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float enemyDistance;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float fleeSpeed;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Vector3 originalPosition;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float lastDashTime;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Collider[] enemies;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Transform enemy;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashReturn;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int hashDash;

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x12C4FC0", Offset = "0x12C4FC0", VA = "0x12C4FC0", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x12C5040", Offset = "0x12C5040", VA = "0x12C5040", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x12C5044", Offset = "0x12C5044", VA = "0x12C5044")]
	public void CheckNeedFleeing()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x12C5254", Offset = "0x12C5254", VA = "0x12C5254")]
	public void FindClosestEnemy()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x12C5590", Offset = "0x12C5590", VA = "0x12C5590")]
	public void WalkBackToBase()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x12C5728", Offset = "0x12C5728", VA = "0x12C5728")]
	public void CheckDash()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x12C57D4", Offset = "0x12C57D4", VA = "0x12C57D4", Slot = "14")]
	public override void FindTarget()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x12C5B54", Offset = "0x12C5B54", VA = "0x12C5B54")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x12C5BA0", Offset = "0x12C5BA0", VA = "0x12C5BA0")]
	public MasterMindBehaviour()
	{
	}
}
[Token(Token = "0x20000F6")]
public class MasterMindSMBDash : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x12C5D08", Offset = "0x12C5D08", VA = "0x12C5D08", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x12C5D34", Offset = "0x12C5D34", VA = "0x12C5D34")]
	public MasterMindSMBDash()
	{
	}
}
[Token(Token = "0x20000F7")]
public class MasterMindSMBDie : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x12C5D7C", Offset = "0x12C5D7C", VA = "0x12C5D7C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x12C5DD4", Offset = "0x12C5DD4", VA = "0x12C5DD4")]
	public MasterMindSMBDie()
	{
	}
}
[Token(Token = "0x20000F8")]
public class MasterMindSMBEscape : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x12C5E1C", Offset = "0x12C5E1C", VA = "0x12C5E1C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x12C5E44", Offset = "0x12C5E44", VA = "0x12C5E44", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x12C5E84", Offset = "0x12C5E84", VA = "0x12C5E84")]
	public MasterMindSMBEscape()
	{
	}
}
[Token(Token = "0x20000F9")]
public class MastermindSMBFall : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x12C5ECC", Offset = "0x12C5ECC", VA = "0x12C5ECC", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x12C5FC4", Offset = "0x12C5FC4", VA = "0x12C5FC4", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x12C6078", Offset = "0x12C6078", VA = "0x12C6078", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x12C6124", Offset = "0x12C6124", VA = "0x12C6124")]
	public MastermindSMBFall()
	{
	}
}
[Token(Token = "0x20000FA")]
public class MasterMindSMBHit : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x12C616C", Offset = "0x12C616C", VA = "0x12C616C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x12C618C", Offset = "0x12C618C", VA = "0x12C618C", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x12C61AC", Offset = "0x12C61AC", VA = "0x12C61AC")]
	public MasterMindSMBHit()
	{
	}
}
[Token(Token = "0x20000FB")]
public class MasterMindSMBIdle : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x12C61F4", Offset = "0x12C61F4", VA = "0x12C61F4", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x12C62BC", Offset = "0x12C62BC", VA = "0x12C62BC", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x12C636C", Offset = "0x12C636C", VA = "0x12C636C")]
	public MasterMindSMBIdle()
	{
	}
}
[Token(Token = "0x20000FC")]
public class MasterMindSMBReturn : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x12C63B4", Offset = "0x12C63B4", VA = "0x12C63B4", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x12C6468", Offset = "0x12C6468", VA = "0x12C6468", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x12C6530", Offset = "0x12C6530", VA = "0x12C6530")]
	public MasterMindSMBReturn()
	{
	}
}
[Token(Token = "0x20000FD")]
public class MasterMindSMBWait : SceneLinkedSMB<MasterMindBehaviour>
{
	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x12C6578", Offset = "0x12C6578", VA = "0x12C6578", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x12C6640", Offset = "0x12C6640", VA = "0x12C6640", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x12C6664", Offset = "0x12C6664", VA = "0x12C6664")]
	public MasterMindSMBWait()
	{
	}
}
[Token(Token = "0x20000FE")]
public class PrologueArenaCage : MonoBehaviour
{
	[Token(Token = "0x2000100")]
	[CompilerGenerated]
	private sealed class <ResizeToState>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CageState cageState;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PrologueArenaCage <>4__this;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <time>5__2;

		[Token(Token = "0x1700008D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0x12C6C68", Offset = "0x12C6C68", VA = "0x12C6C68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004F8")]
			[Address(RVA = "0x12C6CB0", Offset = "0x12C6CB0", VA = "0x12C6CB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x12C69A4", Offset = "0x12C69A4", VA = "0x12C69A4")]
		[DebuggerHidden]
		public <ResizeToState>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x12C69FC", Offset = "0x12C69FC", VA = "0x12C69FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x12C6A00", Offset = "0x12C6A00", VA = "0x12C6A00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x12C6C70", Offset = "0x12C6C70", VA = "0x12C6C70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform cage;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<CageState> cageStates;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 _startPosition;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 _startScale;

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x12C66AC", Offset = "0x12C66AC", VA = "0x12C66AC")]
	public void ResizeToState(string stateName)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x12C6908", Offset = "0x12C6908", VA = "0x12C6908")]
	[IteratorStateMachine(typeof(<ResizeToState>d__5))]
	private IEnumerator ResizeToState(CageState cageState)
	{
		return null;
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x12C69CC", Offset = "0x12C69CC", VA = "0x12C69CC")]
	public PrologueArenaCage()
	{
	}
}
[Serializable]
[Token(Token = "0x2000101")]
public struct CageState
{
	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string stateName;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform cageStateTransform;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float stateTransitionTime;
}
[Token(Token = "0x2000102")]
public class PrologueBossBehaviour : MonoBehaviour
{
	[Token(Token = "0x2000103")]
	[CompilerGenerated]
	private sealed class <TongueAttackCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PrologueBossBehaviour <>4__this;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <playerPosition>5__2;

		[Token(Token = "0x1700008F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000506")]
			[Address(RVA = "0x12C7598", Offset = "0x12C7598", VA = "0x12C7598", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000508")]
			[Address(RVA = "0x12C75E0", Offset = "0x12C75E0", VA = "0x12C75E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x12C7088", Offset = "0x12C7088", VA = "0x12C7088")]
		[DebuggerHidden]
		public <TongueAttackCoroutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x12C73C0", Offset = "0x12C73C0", VA = "0x12C73C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x12C73C4", Offset = "0x12C73C4", VA = "0x12C73C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x12C75A0", Offset = "0x12C75A0", VA = "0x12C75A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000104")]
	[CompilerGenerated]
	private sealed class <ExecuteEveryFrameFor>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action function;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float seconds;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__2;

		[Token(Token = "0x17000091")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600050C")]
			[Address(RVA = "0x12C76FC", Offset = "0x12C76FC", VA = "0x12C76FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600050E")]
			[Address(RVA = "0x12C7744", Offset = "0x12C7744", VA = "0x12C7744", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x12C7134", Offset = "0x12C7134", VA = "0x12C7134")]
		[DebuggerHidden]
		public <ExecuteEveryFrameFor>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x12C75E8", Offset = "0x12C75E8", VA = "0x12C75E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x12C75EC", Offset = "0x12C75EC", VA = "0x12C75EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x12C7704", Offset = "0x12C7704", VA = "0x12C7704", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000105")]
	[CompilerGenerated]
	private sealed class <Transition>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool quick;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Pose pose;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PrologueBossBehaviour <>4__this;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <time>5__2;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <transitionTime>5__3;

		[Token(Token = "0x17000093")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000512")]
			[Address(RVA = "0x12C7950", Offset = "0x12C7950", VA = "0x12C7950", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000514")]
			[Address(RVA = "0x12C7998", Offset = "0x12C7998", VA = "0x12C7998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x12C715C", Offset = "0x12C715C", VA = "0x12C715C")]
		[DebuggerHidden]
		public <Transition>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x12C774C", Offset = "0x12C774C", VA = "0x12C774C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x12C7750", Offset = "0x12C7750", VA = "0x12C7750", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x12C7958", Offset = "0x12C7958", VA = "0x12C7958", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform model;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform head;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform tongue;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Tongue attack configuration")]
	public float HeadFollowTime;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float PreperationTime;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float AttackTime;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float RetriveTime;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnAttackFinished;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _attackInProgress;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _attackInterupted;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Poses")]
	public Pose[] poses;

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x12C6CB8", Offset = "0x12C6CB8", VA = "0x12C6CB8")]
	public void TongueAttack()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x12C6D4C", Offset = "0x12C6D4C", VA = "0x12C6D4C")]
	public void ChangePose(string poseName)
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x12C6F34", Offset = "0x12C6F34", VA = "0x12C6F34")]
	public void QuickChangedPose(string poseName)
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x12C7074", Offset = "0x12C7074", VA = "0x12C7074")]
	public void InterruptAttack()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x12C6CD8", Offset = "0x12C6CD8", VA = "0x12C6CD8")]
	[IteratorStateMachine(typeof(<TongueAttackCoroutine>d__15))]
	private IEnumerator TongueAttackCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x12C70B0", Offset = "0x12C70B0", VA = "0x12C70B0")]
	[IteratorStateMachine(typeof(<ExecuteEveryFrameFor>d__16))]
	private IEnumerator ExecuteEveryFrameFor(float seconds, Action function)
	{
		return null;
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x12C6E8C", Offset = "0x12C6E8C", VA = "0x12C6E8C")]
	[IteratorStateMachine(typeof(<Transition>d__17))]
	private IEnumerator Transition(Pose pose, bool quick = false)
	{
		return null;
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x12C7184", Offset = "0x12C7184", VA = "0x12C7184")]
	private void HeadFollowPlayer()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x12C7240", Offset = "0x12C7240", VA = "0x12C7240")]
	private void TongueAttackAtPosition(Vector3 position)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x12C73AC", Offset = "0x12C73AC", VA = "0x12C73AC")]
	public PrologueBossBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000107")]
public struct Pose
{
	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string name;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform transform;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Time")]
	public float TransitionTime;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float QuickTransitionTime;
}
[Token(Token = "0x2000108")]
public class PrologueBossStrangleDamager : MonoBehaviour
{
	[Token(Token = "0x2000109")]
	[CompilerGenerated]
	private sealed class <StrangleRoutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PrologueBossStrangleDamager <>4__this;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x17000095")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000527")]
			[Address(RVA = "0x12C8138", Offset = "0x12C8138", VA = "0x12C8138", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000529")]
			[Address(RVA = "0x12C8180", Offset = "0x12C8180", VA = "0x12C8180", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x12C7D08", Offset = "0x12C7D08", VA = "0x12C7D08")]
		[DebuggerHidden]
		public <StrangleRoutine>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x12C7FDC", Offset = "0x12C7FDC", VA = "0x12C7FDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x12C7FE0", Offset = "0x12C7FE0", VA = "0x12C7FE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x12C8140", Offset = "0x12C8140", VA = "0x12C8140", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010A")]
	[CompilerGenerated]
	private sealed class <StranglePlayerRoutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PrologueBossStrangleDamager <>4__this;

		[Token(Token = "0x17000097")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600052D")]
			[Address(RVA = "0x12C84C0", Offset = "0x12C84C0", VA = "0x12C84C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600052F")]
			[Address(RVA = "0x12C8508", Offset = "0x12C8508", VA = "0x12C8508", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x12C7D30", Offset = "0x12C7D30", VA = "0x12C7D30")]
		[DebuggerHidden]
		public <StranglePlayerRoutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x12C8188", Offset = "0x12C8188", VA = "0x12C8188", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x12C818C", Offset = "0x12C818C", VA = "0x12C818C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x12C84C8", Offset = "0x12C84C8", VA = "0x12C84C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _inSafeZone;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool _inDangerZone;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool _ongoingStrangulation;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool _playerStragnled;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _safeZoneInitialRadius;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int damageAmount;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("Capsule radius should not by scaled by GameObject")]
	public CapsuleCollider safeZone;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform strangulationCenter;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve safeZoneRadiusChangeNormalCurve;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float safeZoneRadiusChangeTime;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onPlayerDamaged;

	[Token(Token = "0x6000518")]
	[Address(RVA = "0x12C7AC4", Offset = "0x12C7AC4", VA = "0x12C7AC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0x12C7BB4", Offset = "0x12C7BB4", VA = "0x12C7BB4")]
	public void BeginStrangling()
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0x12C7C50", Offset = "0x12C7C50", VA = "0x12C7C50")]
	protected void StranglePlayer()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0x12C7BDC", Offset = "0x12C7BDC", VA = "0x12C7BDC")]
	[IteratorStateMachine(typeof(<StrangleRoutine>d__14))]
	private IEnumerator StrangleRoutine()
	{
		return null;
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0x12C7C94", Offset = "0x12C7C94", VA = "0x12C7C94")]
	[IteratorStateMachine(typeof(<StranglePlayerRoutine>d__15))]
	private IEnumerator StranglePlayerRoutine()
	{
		return null;
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0x12C7D58", Offset = "0x12C7D58", VA = "0x12C7D58")]
	protected void ApplyDamageToPlayer()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x12C7F2C", Offset = "0x12C7F2C", VA = "0x12C7F2C")]
	public void EnteredSafeZone()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0x12C7F38", Offset = "0x12C7F38", VA = "0x12C7F38")]
	public void ExitedSafeZone()
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x12C7F4C", Offset = "0x12C7F4C", VA = "0x12C7F4C")]
	public void EnteredStrangleZone()
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x12C7F64", Offset = "0x12C7F64", VA = "0x12C7F64")]
	public void ExitedStrangleZone()
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x12C7F6C", Offset = "0x12C7F6C", VA = "0x12C7F6C")]
	public void Debug(string text)
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x12C7FCC", Offset = "0x12C7FCC", VA = "0x12C7FCC")]
	public PrologueBossStrangleDamager()
	{
	}
}
[Token(Token = "0x200010B")]
public class EnemyCloneSMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x6000530")]
	[Address(RVA = "0x12C8510", Offset = "0x12C8510", VA = "0x12C8510", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x12C8548", Offset = "0x12C8548", VA = "0x12C8548", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x12C858C", Offset = "0x12C858C", VA = "0x12C858C")]
	public EnemyCloneSMB()
	{
	}
}
[Token(Token = "0x200010C")]
public class EnemyDieSMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x6000533")]
	[Address(RVA = "0x12C85D4", Offset = "0x12C85D4", VA = "0x12C85D4", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x12C86A0", Offset = "0x12C86A0", VA = "0x12C86A0")]
	public EnemyDieSMB()
	{
	}
}
[Token(Token = "0x200010D")]
public class EnemyFallSMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x6000535")]
	[Address(RVA = "0x12C86E8", Offset = "0x12C86E8", VA = "0x12C86E8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0x12C87E0", Offset = "0x12C87E0", VA = "0x12C87E0", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x12C8800", Offset = "0x12C8800", VA = "0x12C8800")]
	public EnemyFallSMB()
	{
	}
}
[Token(Token = "0x200010E")]
public class EnemyHitRecoverySMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x6000538")]
	[Address(RVA = "0x12C8848", Offset = "0x12C8848", VA = "0x12C8848", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x12C888C", Offset = "0x12C888C", VA = "0x12C888C", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0x12C88B4", Offset = "0x12C88B4", VA = "0x12C88B4")]
	public EnemyHitRecoverySMB()
	{
	}
}
[Token(Token = "0x200010F")]
public class EnemyHitSMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x600053B")]
	[Address(RVA = "0x12C88FC", Offset = "0x12C88FC", VA = "0x12C88FC", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x12C8940", Offset = "0x12C8940", VA = "0x12C8940", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x12C8960", Offset = "0x12C8960", VA = "0x12C8960")]
	public EnemyHitSMB()
	{
	}
}
[Token(Token = "0x2000110")]
public class EnemySpawnSMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x600053E")]
	[Address(RVA = "0x12C89A8", Offset = "0x12C89A8", VA = "0x12C89A8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x12C8A4C", Offset = "0x12C8A4C", VA = "0x12C8A4C")]
	public EnemySpawnSMB()
	{
	}
}
[Token(Token = "0x2000111")]
public class EnemyStunDetachSMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x6000540")]
	[Address(RVA = "0x12C8A94", Offset = "0x12C8A94", VA = "0x12C8A94", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0x12C8B60", Offset = "0x12C8B60", VA = "0x12C8B60", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0x12C8C0C", Offset = "0x12C8C0C", VA = "0x12C8C0C")]
	public EnemyStunDetachSMB()
	{
	}
}
[Token(Token = "0x2000112")]
public class EnemyStunSMB : SceneLinkedSMB<EnemyBehaviourBase>
{
	[Token(Token = "0x6000543")]
	[Address(RVA = "0x12C8C54", Offset = "0x12C8C54", VA = "0x12C8C54", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0x12C8D1C", Offset = "0x12C8D1C", VA = "0x12C8D1C")]
	public EnemyStunSMB()
	{
	}
}
[Token(Token = "0x2000113")]
public class TankBehaviour : EnemyBehaviourBase
{
	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int hashInPursuit;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int hashAttackSlash;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int hashAttackSpin;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int hashAttackFront;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int hashBreakAttackTornado;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float timeToStopPursuit;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[Header("Patrol")]
	public float patrolSpeed;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float patrolRadius;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float waypointDistance;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Header("Pursuit")]
	public float pursuitSpeed;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[Header("Combat")]
	public LayerMask attackObstacleMask;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float slashAttackDistance;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float frontAttackDistance;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float spinAttackDistance;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float timeToFront;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float timeToSpin;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public int minHealthToFront;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int minHealthToSpin;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	protected float lastSpinAttack;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected float lastFrontAttack;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Header("Weapons")]
	public MeleeWeapon slash;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject headFront;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public MeleeWeapon head360;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Transform distanceOrigin;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[Header("Chains")]
	public GameObject chainStart;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject chainEnd;

	[Token(Token = "0x17000099")]
	public Vector3 originalPosition
	{
		[Token(Token = "0x6000545")]
		[Address(RVA = "0x12C8D64", Offset = "0x12C8D64", VA = "0x12C8D64")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x12C8D70", Offset = "0x12C8D70", VA = "0x12C8D70")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x1700009A")]
	public Vector3 PatrolPosition
	{
		[Token(Token = "0x6000547")]
		[Address(RVA = "0x12C8D7C", Offset = "0x12C8D7C", VA = "0x12C8D7C")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000548")]
		[Address(RVA = "0x12C8D88", Offset = "0x12C8D88", VA = "0x12C8D88")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x1700009B")]
	public bool HeadDestroyed
	{
		[Token(Token = "0x6000549")]
		[Address(RVA = "0x12C8D94", Offset = "0x12C8D94", VA = "0x12C8D94")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600054A")]
		[Address(RVA = "0x12C8D9C", Offset = "0x12C8D9C", VA = "0x12C8D9C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x12C8DA8", Offset = "0x12C8DA8", VA = "0x12C8DA8", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0x12C8F54", Offset = "0x12C8F54", VA = "0x12C8F54")]
	private void PlayStep(int frontFoot)
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0x12C8F58", Offset = "0x12C8F58", VA = "0x12C8F58")]
	public void Grunt()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0x12C8F5C", Offset = "0x12C8F5C", VA = "0x12C8F5C")]
	public void Spotted()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x12C8F60", Offset = "0x12C8F60", VA = "0x12C8F60")]
	public void StartPursuit()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x12C91A8", Offset = "0x12C91A8", VA = "0x12C91A8")]
	public void ResetPursuit()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x12C91C8", Offset = "0x12C91C8", VA = "0x12C91C8")]
	public void StopPursuit()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x12C8FF4", Offset = "0x12C8FF4", VA = "0x12C8FF4")]
	public void RequestTargetPosition()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x12C8EB0", Offset = "0x12C8EB0", VA = "0x12C8EB0")]
	public void RequestNewPatrolPosition()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x12C8EF4", Offset = "0x12C8EF4", VA = "0x12C8EF4")]
	public void WalkBackToBase()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x12C9250", Offset = "0x12C9250", VA = "0x12C9250")]
	public bool CanSpinAttack()
	{
		return default(bool);
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x12C92AC", Offset = "0x12C92AC", VA = "0x12C92AC")]
	public bool CanFrontAttack()
	{
		return default(bool);
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x12C9394", Offset = "0x12C9394", VA = "0x12C9394")]
	public void TriggerSlashAttack()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x12C940C", Offset = "0x12C940C", VA = "0x12C940C")]
	public void TriggerFrontAttack()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x12C9484", Offset = "0x12C9484", VA = "0x12C9484")]
	public void TriggerSpinAttack()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x12C94FC", Offset = "0x12C94FC", VA = "0x12C94FC")]
	public void EndSpinAttack()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x12C9518", Offset = "0x12C9518", VA = "0x12C9518")]
	public void EndFrontAttack()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x12C9534", Offset = "0x12C9534", VA = "0x12C9534")]
	public void AttackBegin()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x12C9554", Offset = "0x12C9554", VA = "0x12C9554")]
	public void AttackEnd()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x12C9570", Offset = "0x12C9570", VA = "0x12C9570")]
	public void FrontBegin()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x12C9590", Offset = "0x12C9590", VA = "0x12C9590")]
	public void FrontEnd()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x12C95B0", Offset = "0x12C95B0", VA = "0x12C95B0")]
	public void SpinBegin()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x12C95D0", Offset = "0x12C95D0", VA = "0x12C95D0")]
	public void SpinEnd()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x12C95EC", Offset = "0x12C95EC", VA = "0x12C95EC")]
	public void EnableChain()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x12C960C", Offset = "0x12C960C", VA = "0x12C960C")]
	public void DisableChain()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x12C962C", Offset = "0x12C962C", VA = "0x12C962C", Slot = "10")]
	public override void HitStart()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x12C9748", Offset = "0x12C9748", VA = "0x12C9748")]
	public TankBehaviour()
	{
	}
}
[Token(Token = "0x2000114")]
public class TankSMBAttackDistributor : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Vector3 m_AttackPosition;

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x1332178", Offset = "0x1332178", VA = "0x1332178", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x1332318", Offset = "0x1332318", VA = "0x1332318")]
	public TankSMBAttackDistributor()
	{
	}
}
[Token(Token = "0x2000115")]
public class TankSMBFront : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x6000569")]
	[Address(RVA = "0x1332360", Offset = "0x1332360", VA = "0x1332360", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x133245C", Offset = "0x133245C", VA = "0x133245C", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x1332524", Offset = "0x1332524", VA = "0x1332524")]
	public TankSMBFront()
	{
	}
}
[Token(Token = "0x2000116")]
public class TankSMBPatrol : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x600056C")]
	[Address(RVA = "0x133256C", Offset = "0x133256C", VA = "0x133256C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x1332634", Offset = "0x1332634", VA = "0x1332634", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x13327C0", Offset = "0x13327C0", VA = "0x13327C0")]
	public TankSMBPatrol()
	{
	}
}
[Token(Token = "0x2000117")]
public class TankSMBPursuit : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x600056F")]
	[Address(RVA = "0x1332808", Offset = "0x1332808", VA = "0x1332808", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x1332844", Offset = "0x1332844", VA = "0x1332844", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x1332B5C", Offset = "0x1332B5C", VA = "0x1332B5C")]
	public TankSMBPursuit()
	{
	}
}
[Token(Token = "0x2000118")]
public class TankSMBSlash : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x6000572")]
	[Address(RVA = "0x1332BA4", Offset = "0x1332BA4", VA = "0x1332BA4", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x1332CA0", Offset = "0x1332CA0", VA = "0x1332CA0", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x1332D58", Offset = "0x1332D58", VA = "0x1332D58")]
	public TankSMBSlash()
	{
	}
}
[Token(Token = "0x2000119")]
public class TankSMBSpinEnd : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x6000575")]
	[Address(RVA = "0x1332DA0", Offset = "0x1332DA0", VA = "0x1332DA0", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x1332E54", Offset = "0x1332E54", VA = "0x1332E54")]
	public TankSMBSpinEnd()
	{
	}
}
[Token(Token = "0x200011A")]
public class TankSMBSpinStart : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x6000577")]
	[Address(RVA = "0x1332E9C", Offset = "0x1332E9C", VA = "0x1332E9C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x1332EC4", Offset = "0x1332EC4", VA = "0x1332EC4")]
	public TankSMBSpinStart()
	{
	}
}
[Token(Token = "0x200011B")]
public class TankSMBSpotted : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x6000579")]
	[Address(RVA = "0x1332F0C", Offset = "0x1332F0C", VA = "0x1332F0C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x1332F48", Offset = "0x1332F48", VA = "0x1332F48", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x1333260", Offset = "0x1333260", VA = "0x1333260")]
	public TankSMBSpotted()
	{
	}
}
[Token(Token = "0x200011C")]
public class TankSMBTornado : SceneLinkedSMB<TankBehaviour>
{
	[Token(Token = "0x600057C")]
	[Address(RVA = "0x13332A8", Offset = "0x13332A8", VA = "0x13332A8", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x1333350", Offset = "0x1333350", VA = "0x1333350")]
	public TankSMBTornado()
	{
	}
}
[Token(Token = "0x200011D")]
public class TentacleBehaviour : EnemyBehaviourBase
{
	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Tentacle Settings")]
	public float timeToAttack;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject damager;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public AlchemyModificationReceiver effectController;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private readonly int wobbleAttack;

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x1333398", Offset = "0x1333398", VA = "0x1333398", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x13333FC", Offset = "0x13333FC", VA = "0x13333FC")]
	public void OnStartAttack()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x133341C", Offset = "0x133341C", VA = "0x133341C")]
	public void OnEndAttack()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x133343C", Offset = "0x133343C", VA = "0x133343C")]
	public void OnStarDamageable()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x1333440", Offset = "0x1333440", VA = "0x1333440")]
	public void OnEndDamageable()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x1333444", Offset = "0x1333444", VA = "0x1333444")]
	public void WobbleAttack()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x1333470", Offset = "0x1333470", VA = "0x1333470", Slot = "8")]
	public override void Death(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x13334E8", Offset = "0x13334E8", VA = "0x13334E8", Slot = "9")]
	public override void ApplyDamage(Damageable.DamageMessage msg)
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x13336D4", Offset = "0x13336D4", VA = "0x13336D4")]
	public TentacleBehaviour()
	{
	}
}
[Token(Token = "0x200011E")]
public class TentacleSMBAttack : SceneLinkedSMB<TentacleBehaviour>
{
	[Token(Token = "0x6000587")]
	[Address(RVA = "0x1333760", Offset = "0x1333760", VA = "0x1333760")]
	public TentacleSMBAttack()
	{
	}
}
[Token(Token = "0x200011F")]
public class TentacleSMBDie : SceneLinkedSMB<TentacleBehaviour>
{
	[Token(Token = "0x6000588")]
	[Address(RVA = "0x13337A8", Offset = "0x13337A8", VA = "0x13337A8", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x1333854", Offset = "0x1333854", VA = "0x1333854")]
	public TentacleSMBDie()
	{
	}
}
[Token(Token = "0x2000120")]
public class TentacleSMBHide : SceneLinkedSMB<TentacleBehaviour>
{
	[Token(Token = "0x600058A")]
	[Address(RVA = "0x133389C", Offset = "0x133389C", VA = "0x133389C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x133394C", Offset = "0x133394C", VA = "0x133394C", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x13339FC", Offset = "0x13339FC", VA = "0x13339FC")]
	public TentacleSMBHide()
	{
	}
}
[Token(Token = "0x2000121")]
public class TentacleSMBHit : SceneLinkedSMB<TentacleBehaviour>
{
	[Token(Token = "0x600058D")]
	[Address(RVA = "0x1333A44", Offset = "0x1333A44", VA = "0x1333A44")]
	public TentacleSMBHit()
	{
	}
}
[Token(Token = "0x2000122")]
public class TentacleSMBIdle : SceneLinkedSMB<TentacleBehaviour>
{
	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_AttackPosition;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float currentTime;

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x1333A8C", Offset = "0x1333A8C", VA = "0x1333A8C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x1333B40", Offset = "0x1333B40", VA = "0x1333B40", Slot = "22")]
	public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x1333CE0", Offset = "0x1333CE0", VA = "0x1333CE0", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x1333D8C", Offset = "0x1333D8C", VA = "0x1333D8C")]
	public TentacleSMBIdle()
	{
	}
}
[Token(Token = "0x2000123")]
public class TentacleSMBShow : SceneLinkedSMB<TentacleBehaviour>
{
	[Token(Token = "0x6000592")]
	[Address(RVA = "0x1333DD4", Offset = "0x1333DD4", VA = "0x1333DD4", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x1333EB8", Offset = "0x1333EB8", VA = "0x1333EB8")]
	public TentacleSMBShow()
	{
	}
}
[Token(Token = "0x2000124")]
public class TumbleweedBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CinemachineBartixDollyCart dollyCart;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speedPerDistance;

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x1333F00", Offset = "0x1333F00", VA = "0x1333F00")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x1333F48", Offset = "0x1333F48", VA = "0x1333F48")]
	public TumbleweedBehaviour()
	{
	}
}
[Token(Token = "0x2000125")]
public class WaspBehaviour : MonoBehaviour
{
	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayMakerFSM controllerFSM;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayMakerFSM damageableFSM;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LookAtTarget lookAt;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] damageables;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Spline")]
	public float splineDamp;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SplineFollower follower;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Spline[] splines;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Parabola")]
	public float parabolaDamp;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve parabolaHorizontalSpeedCurve;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationCurve parabolaForwardSpeedCurve;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve parabolaMultiplierCurve;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Laser Weapon")]
	public BouncingLaserWeapon laserWeapon;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform[] laserOrigins;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Events")]
	public UnityEvent onFirstStingDestroyed;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEvent onSecondStingDestroyed;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEvent onAllStingDestroyed;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform trans;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int currentHealth;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private readonly int horizontalHash;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private readonly int forwardHash;

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x1333F5C", Offset = "0x1333F5C", VA = "0x1333F5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x1333FC4", Offset = "0x1333FC4", VA = "0x1333FC4")]
	public void UpdateSplineMovement()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x1334078", Offset = "0x1334078", VA = "0x1334078")]
	public void UpdateParabolaMovement(float startTime, float duration, Vector3 destination)
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x1334420", Offset = "0x1334420", VA = "0x1334420")]
	public void SetSpline(Spline newSpline, float startDistance = 0.5f)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x1334534", Offset = "0x1334534", VA = "0x1334534")]
	public Spline GetSpline(int platform)
	{
		return null;
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x13344DC", Offset = "0x13344DC", VA = "0x13344DC")]
	public void DisableSplineMovement()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x13344FC", Offset = "0x13344FC", VA = "0x13344FC")]
	public void EnableSplineMovement(bool setDistance = false, float startDistance = 0.5f)
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x1334564", Offset = "0x1334564", VA = "0x1334564")]
	public void SetSplineDistance(float value)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x1334580", Offset = "0x1334580", VA = "0x1334580")]
	public void EnableLookAt()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0x13345A0", Offset = "0x13345A0", VA = "0x13345A0")]
	public void DisableLookAt()
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x13345C0", Offset = "0x13345C0", VA = "0x13345C0")]
	public bool IsInWaypoint()
	{
		return default(bool);
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x13345F0", Offset = "0x13345F0", VA = "0x13345F0")]
	public void StingDestroy()
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x1334750", Offset = "0x1334750", VA = "0x1334750")]
	public void StingDamage()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x13347A4", Offset = "0x13347A4", VA = "0x13347A4")]
	public void StingPrepare()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x1333F88", Offset = "0x1333F88", VA = "0x1333F88")]
	public void ResetWasp()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x13347F8", Offset = "0x13347F8", VA = "0x13347F8")]
	public WaspBehaviour()
	{
	}
}
[Token(Token = "0x2000126")]
public class WaspRigController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000127")]
	public struct WaspRigData
	{
		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float maxDistance;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float waspAreaDistance;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AnimationCurve curve;
	}

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WaspRigData[] waspData;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ChainIKConstraint rig;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ChainIKConstraintData data;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform self;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform moth;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float distance;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float currentValue;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int currentDataIndex;

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x1334894", Offset = "0x1334894", VA = "0x1334894")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x1334994", Offset = "0x1334994", VA = "0x1334994")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x1334B4C", Offset = "0x1334B4C", VA = "0x1334B4C")]
	public void SetArea(int value)
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x1334B54", Offset = "0x1334B54", VA = "0x1334B54")]
	public WaspRigController()
	{
	}
}
[Token(Token = "0x2000128")]
public class ColliderPlayerSafeController : MonoBehaviour
{
	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider[] _colliders;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<Collider, Bounds> _collidersBounds;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] safePositions;

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x1334B5C", Offset = "0x1334B5C", VA = "0x1334B5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x1334DB0", Offset = "0x1334DB0", VA = "0x1334DB0")]
	public void EnableColliders()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x1335244", Offset = "0x1335244", VA = "0x1335244")]
	public void DisableColliders()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x1334F20", Offset = "0x1334F20", VA = "0x1334F20")]
	private bool IsPlayerInsideColliders()
	{
		return default(bool);
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x133507C", Offset = "0x133507C", VA = "0x133507C")]
	private Transform GetClosestSafeTransform()
	{
		return null;
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x1335328", Offset = "0x1335328", VA = "0x1335328")]
	public ColliderPlayerSafeController()
	{
	}
}
[Token(Token = "0x2000129")]
public class CuboidRepeatScroller : MonoBehaviour
{
	[Token(Token = "0x200012A")]
	[CompilerGenerated]
	private sealed class <LaunchRoutine>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CuboidRepeatScroller <>4__this;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool scrollWhenFinished;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__2;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <startOffset>5__3;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 <endOffset>5__4;

		[Token(Token = "0x1700009F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005C7")]
			[Address(RVA = "0x13362A4", Offset = "0x13362A4", VA = "0x13362A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005C9")]
			[Address(RVA = "0x13362EC", Offset = "0x13362EC", VA = "0x13362EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x1335DBC", Offset = "0x1335DBC", VA = "0x1335DBC")]
		[DebuggerHidden]
		public <LaunchRoutine>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x133606C", Offset = "0x133606C", VA = "0x133606C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x1336070", Offset = "0x1336070", VA = "0x1336070", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x13362AC", Offset = "0x13362AC", VA = "0x13362AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012B")]
	[CompilerGenerated]
	private sealed class <StopRoutine>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CuboidRepeatScroller <>4__this;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <startOffset>5__3;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <endOffset>5__4;

		[Token(Token = "0x170000A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005CD")]
			[Address(RVA = "0x1336518", Offset = "0x1336518", VA = "0x1336518", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005CF")]
			[Address(RVA = "0x1336560", Offset = "0x1336560", VA = "0x1336560", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x1335E58", Offset = "0x1335E58", VA = "0x1335E58")]
		[DebuggerHidden]
		public <StopRoutine>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x13362F4", Offset = "0x13362F4", VA = "0x13362F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x13362F8", Offset = "0x13362F8", VA = "0x13362F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x1336520", Offset = "0x1336520", VA = "0x1336520", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012C")]
	[CompilerGenerated]
	private sealed class <ScrollRoutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CuboidRepeatScroller <>4__this;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float customDistance;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__2;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <scrollTime>5__3;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startOffset>5__4;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <endOffset>5__5;

		[Token(Token = "0x170000A3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005D3")]
			[Address(RVA = "0x1336820", Offset = "0x1336820", VA = "0x1336820", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005D5")]
			[Address(RVA = "0x1336868", Offset = "0x1336868", VA = "0x1336868", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x1335F04", Offset = "0x1335F04", VA = "0x1335F04")]
		[DebuggerHidden]
		public <ScrollRoutine>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x1336568", Offset = "0x1336568", VA = "0x1336568", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x133656C", Offset = "0x133656C", VA = "0x133656C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x1336828", Offset = "0x1336828", VA = "0x1336828", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected BoxCollider boundingCollider;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected float baseVelocity;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	protected float launchDistance;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected float launchTime;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("Launch Curve must be an ascending function.")]
	protected AnimationCurve launchCurve;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected float stopDistance;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	protected float stopTime;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Stop Curve must be a descending function.")]
	protected AnimationCurve stopCurve;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool allowScrollRespawn;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected Vector3 currentOffset;

	[Token(Token = "0x1700009C")]
	protected Vector3 NormalVector
	{
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x13353B0", Offset = "0x13353B0", VA = "0x13353B0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700009D")]
	protected float Velocity
	{
		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x13354A0", Offset = "0x13354A0", VA = "0x13354A0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700009E")]
	protected Vector3 BoundingColliderOffset
	{
		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x13354A8", Offset = "0x13354A8", VA = "0x13354A8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x13355E4", Offset = "0x13355E4", VA = "0x13355E4", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x13357DC", Offset = "0x13357DC", VA = "0x13357DC", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x13357E8", Offset = "0x13357E8", VA = "0x13357E8")]
	private bool IsInside(Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x133576C", Offset = "0x133576C", VA = "0x133576C")]
	private bool IsOutsideScrollBounds(Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x1335854", Offset = "0x1335854", VA = "0x1335854")]
	public void ScrollObjectsByOffset(float offsetLength)
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x1335B34", Offset = "0x1335B34", VA = "0x1335B34")]
	protected void ScrollObjectsToOffset(float offset)
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x1335B64", Offset = "0x1335B64", VA = "0x1335B64")]
	protected void ScrollObjectsToOffset(Vector3 offset)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x1335A44", Offset = "0x1335A44", VA = "0x1335A44")]
	protected void MoveScrollingObject(Transform scrolledObject, Vector3 offset)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x1335AC0", Offset = "0x1335AC0", VA = "0x1335AC0")]
	protected void ScrollRespawnObject(Transform scrollingObject)
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x1335C90", Offset = "0x1335C90", VA = "0x1335C90", Slot = "6")]
	[ContextMenu("Launch scrolling")]
	public virtual void Launch()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x1335CC8", Offset = "0x1335CC8", VA = "0x1335CC8", Slot = "7")]
	[ContextMenu("Stop scrolling")]
	public virtual void Stop()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x1335CFC", Offset = "0x1335CFC", VA = "0x1335CFC", Slot = "8")]
	[ContextMenu("Scrolling")]
	public virtual void Scroll()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x1335D34", Offset = "0x1335D34", VA = "0x1335D34", Slot = "9")]
	[IteratorStateMachine(typeof(<LaunchRoutine>d__28))]
	protected virtual IEnumerator LaunchRoutine(bool scrollWhenFinished = true)
	{
		return null;
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x1335DE4", Offset = "0x1335DE4", VA = "0x1335DE4", Slot = "10")]
	[IteratorStateMachine(typeof(<StopRoutine>d__29))]
	protected virtual IEnumerator StopRoutine()
	{
		return null;
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x1335E80", Offset = "0x1335E80", VA = "0x1335E80", Slot = "11")]
	[IteratorStateMachine(typeof(<ScrollRoutine>d__30))]
	protected virtual IEnumerator ScrollRoutine(float customDistance = -1f)
	{
		return null;
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x1335F2C", Offset = "0x1335F2C", VA = "0x1335F2C", Slot = "12")]
	[ContextMenu("Reset scrolling")]
	public virtual void Reset()
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x133603C", Offset = "0x133603C", VA = "0x133603C")]
	public CuboidRepeatScroller()
	{
	}
}
[Token(Token = "0x200012D")]
public class CuboidWaypointScroller : CuboidRepeatScroller
{
	[Token(Token = "0x200012E")]
	[CompilerGenerated]
	private sealed class <ScrollToNextWaypointRoutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CuboidWaypointScroller <>4__this;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScrollWaypoint waypoint;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float <scrollDistance>5__2;

		[Token(Token = "0x170000A5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005E1")]
			[Address(RVA = "0x1337110", Offset = "0x1337110", VA = "0x1337110", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005E3")]
			[Address(RVA = "0x1337158", Offset = "0x1337158", VA = "0x1337158", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x1336D08", Offset = "0x1336D08", VA = "0x1336D08")]
		[DebuggerHidden]
		public <ScrollToNextWaypointRoutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x1336D60", Offset = "0x1336D60", VA = "0x1336D60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x1336D64", Offset = "0x1336D64", VA = "0x1336D64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x1337118", Offset = "0x1337118", VA = "0x1337118", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float targetDistance;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ScrollWaypoint[] waypoints;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _currentWaypoint;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool _scrollingToWaypoint;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float _defaultVelocity;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float _defaultLaunchDistance;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float _defaultLaunchTime;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float _defaultStopDistance;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _defaultStopTime;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AnimationCurve _defaultLaunchCurve;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private AnimationCurve _defaultStopCurve;

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0x1336870", Offset = "0x1336870", VA = "0x1336870", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0x13368C4", Offset = "0x13368C4", VA = "0x13368C4")]
	private void ResetDefaultParameters()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0x1336904", Offset = "0x1336904", VA = "0x1336904", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0x1336AFC", Offset = "0x1336AFC", VA = "0x1336AFC", Slot = "12")]
	[ContextMenu("Reset with Waypoints")]
	public override void Reset()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x13369AC", Offset = "0x13369AC", VA = "0x13369AC")]
	public void JumpToWaypoint(int waypointNumber)
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0x1336B30", Offset = "0x1336B30", VA = "0x1336B30")]
	[ContextMenu("Scroll to next Waypoint")]
	public void ScrollToNextWaypoint()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x1336C6C", Offset = "0x1336C6C", VA = "0x1336C6C")]
	[IteratorStateMachine(typeof(<ScrollToNextWaypointRoutine>d__17))]
	protected IEnumerator ScrollToNextWaypointRoutine(ScrollWaypoint waypoint)
	{
		return null;
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x1336D30", Offset = "0x1336D30", VA = "0x1336D30")]
	public CuboidWaypointScroller()
	{
	}
}
[Serializable]
[Token(Token = "0x200012F")]
public struct ScrollWaypoint
{
	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Range(0f, 100f)]
	public float pathPercentage;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public bool overrideScrollingTime;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float scrollingTime;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent onWaypointReached;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Launch")]
	public bool overrideLaunchParameters;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float launchDistance;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float launchTime;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve launchCurve;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Stop")]
	public bool overrideStopParameters;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float stopDistance;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float stopTime;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve stopCurve;
}
[Token(Token = "0x2000130")]
public class AnimationFMODStudioParameterSetter : FMODStudioParameterSetterUpdate
{
	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator animator;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string paramName;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool clamp01;

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x1337160", Offset = "0x1337160", VA = "0x1337160", Slot = "6")]
	public override void TriggerParameters()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0x13373E8", Offset = "0x13373E8", VA = "0x13373E8")]
	public AnimationFMODStudioParameterSetter()
	{
	}
}
[Token(Token = "0x2000131")]
public class DamageableFMODStudioParameterSetter : FMODStudioParameterSetterUpdate
{
	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Damageable damageable;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool autoSet;

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x13373F8", Offset = "0x13373F8", VA = "0x13373F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x13374C8", Offset = "0x13374C8", VA = "0x13374C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x1337598", Offset = "0x1337598", VA = "0x1337598", Slot = "6")]
	public override void TriggerParameters()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x13375C0", Offset = "0x13375C0", VA = "0x13375C0")]
	public DamageableFMODStudioParameterSetter()
	{
	}
}
[Token(Token = "0x2000132")]
[DefaultExecutionOrder(9000)]
[RequireComponent(typeof(StudioEventEmitter))]
public class FMODEventEmitterCulling : MonoBehaviour, ICulling<StudioEventEmitter>
{
	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("To change culling distance add SphereCollider and set its' radius.")]
	[Space(5f)]
	[Space(5f)]
	public bool overrideCullingDistance;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool _wasPlayingBefore;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[UnityEngine.Tooltip("If player exited from cull range when event was playing, then it will replay if player come back into cull range.")]
	public bool replayIfInterrupted;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly float defaultCullingDistance;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StudioEventEmitter _target;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly TagFilter _detectedTags;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _showing;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool _applicationQuitting;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SphereCollider _collider;

	[Token(Token = "0x170000A7")]
	public bool Showing
	{
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x13375D0", Offset = "0x13375D0", VA = "0x13375D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A8")]
	public CullingGroup CullingGroup
	{
		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x13375D8", Offset = "0x13375D8", VA = "0x13375D8", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A9")]
	public float CullingRadius
	{
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x13375E0", Offset = "0x13375E0", VA = "0x13375E0", Slot = "5")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x13375FC", Offset = "0x13375FC", VA = "0x13375FC", Slot = "6")]
		set
		{
		}
	}

	[Token(Token = "0x170000AA")]
	public float ViewDistance
	{
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x1337618", Offset = "0x1337618", VA = "0x1337618", Slot = "7")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x1337634", Offset = "0x1337634", VA = "0x1337634", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x1337650", Offset = "0x1337650", VA = "0x1337650")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x133799C", Offset = "0x133799C", VA = "0x133799C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x1337AE8", Offset = "0x1337AE8", VA = "0x1337AE8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x1337CA8", Offset = "0x1337CA8", VA = "0x1337CA8", Slot = "10")]
	public void Setup(StudioEventEmitter target)
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x1337CDC", Offset = "0x1337CDC", VA = "0x1337CDC")]
	private void OnPlayerRespawn()
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x1337D38", Offset = "0x1337D38", VA = "0x1337D38")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x13376C0", Offset = "0x13376C0", VA = "0x13376C0")]
	private void SetupCullingSphere()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x1337A4C", Offset = "0x1337A4C", VA = "0x1337A4C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x1337BFC", Offset = "0x1337BFC", VA = "0x1337BFC", Slot = "9")]
	public void Cull(bool visible)
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x1337CF8", Offset = "0x1337CF8", VA = "0x1337CF8")]
	public void CullCheck()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x1337E1C", Offset = "0x1337E1C", VA = "0x1337E1C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x1337E90", Offset = "0x1337E90", VA = "0x1337E90")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x1337D44", Offset = "0x1337D44", VA = "0x1337D44")]
	private float GetPlayerDistance()
	{
		return default(float);
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x1337F04", Offset = "0x1337F04", VA = "0x1337F04")]
	public FMODEventEmitterCulling()
	{
	}
}
[Token(Token = "0x2000133")]
[RequireComponent(typeof(StudioParameterTrigger))]
public class FMODStudioParameterSetter : MonoBehaviour
{
	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StudioParameterTrigger trigger;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string fmodParamName;

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x1337270", Offset = "0x1337270", VA = "0x1337270", Slot = "4")]
	public virtual void TriggerParameters(float value)
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x1338088", Offset = "0x1338088", VA = "0x1338088")]
	public FMODStudioParameterSetter()
	{
	}
}
[Token(Token = "0x2000134")]
public abstract class FMODStudioParameterSetterUpdate : FMODStudioParameterSetter
{
	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool update;

	[Token(Token = "0x170000AB")]
	public bool SetUpdate
	{
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1338090", Offset = "0x1338090", VA = "0x1338090")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x1338098", Offset = "0x1338098", VA = "0x1338098")]
		set
		{
		}
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x13380A4", Offset = "0x13380A4", VA = "0x13380A4", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000604")]
	public abstract void TriggerParameters();

	[Token(Token = "0x6000605")]
	[Address(RVA = "0x13373F0", Offset = "0x13373F0", VA = "0x13373F0")]
	protected FMODStudioParameterSetterUpdate()
	{
	}
}
[Token(Token = "0x2000135")]
public class ShaderFMODStudioParameterSetter : FMODStudioParameterSetterUpdate
{
	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer renderer;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string rendererName;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float multiplier;

	[Token(Token = "0x6000606")]
	[Address(RVA = "0x13380BC", Offset = "0x13380BC", VA = "0x13380BC", Slot = "6")]
	public override void TriggerParameters()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0x13381C0", Offset = "0x13381C0", VA = "0x13381C0")]
	public ShaderFMODStudioParameterSetter()
	{
	}
}
[Token(Token = "0x2000136")]
[CommandInfo("Settings", "BossStageCompleted", "", 0)]
public class BossStageCompletedEvent : Command
{
	[Token(Token = "0x6000608")]
	[Address(RVA = "0x13381D0", Offset = "0x13381D0", VA = "0x13381D0", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x1338248", Offset = "0x1338248", VA = "0x1338248")]
	public BossStageCompletedEvent()
	{
	}
}
[Token(Token = "0x2000137")]
[CommandInfo("Progress", "Check Canister", "", 0)]
public class CheckCanister : Command
{
	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BooleanData result;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SaveCollectable saveCollectable;

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x1338250", Offset = "0x1338250", VA = "0x1338250", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x1338294", Offset = "0x1338294", VA = "0x1338294")]
	public CheckCanister()
	{
	}
}
[Token(Token = "0x2000138")]
[CommandInfo("Player", "Check Hands", "", 0)]
public class CheckHands : Command
{
	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BooleanData result;

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x133829C", Offset = "0x133829C", VA = "0x133829C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0x1338398", Offset = "0x1338398", VA = "0x1338398")]
	public CheckHands()
	{
	}
}
[Token(Token = "0x2000139")]
[CommandInfo("Progress", "Check Scene", "", 0)]
public class CheckScene : Command
{
	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BooleanData result;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SceneData scene;

	[Token(Token = "0x600060E")]
	[Address(RVA = "0x13383A0", Offset = "0x13383A0", VA = "0x13383A0", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0x1338490", Offset = "0x1338490", VA = "0x1338490")]
	public CheckScene()
	{
	}
}
[Token(Token = "0x200013A")]
[CommandInfo("Effects", "Animate Cansa Group", "Moves a canvas group property to value.", 0)]
public class AnimateCanvasGroup : BaseDotTweenCommand
{
	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected float value;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	protected CanvasGroup group;

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x1338498", Offset = "0x1338498", VA = "0x1338498", Slot = "44")]
	public override Tweener ExecuteTween()
	{
		return null;
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0x13384D4", Offset = "0x13384D4", VA = "0x13384D4")]
	public AnimateCanvasGroup()
	{
	}
}
[Token(Token = "0x200013B")]
[CommandInfo("Effects", "Animate HDR Color", "Moves a hdr color property to value.", 0)]
public class AnimateColor : BaseDotTweenCommand
{
	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private float lightIntensivity;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	private Color destinationColor;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private MeshRenderer light;

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x133855C", Offset = "0x133855C", VA = "0x133855C", Slot = "44")]
	public override Tweener ExecuteTween()
	{
		return null;
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0x1338670", Offset = "0x1338670", VA = "0x1338670")]
	public AnimateColor()
	{
	}
}
[Token(Token = "0x200013C")]
[AddComponentMenu("")]
[CommandInfo("Effects", "Animate Mask Alpha", "Moves a mask alpha property to value.", 0)]
public class AnimateMaskAlpha : BaseDotTweenCommand
{
	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected float value;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	protected SpriteMask mask;

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x1338674", Offset = "0x1338674", VA = "0x1338674", Slot = "44")]
	public override Tweener ExecuteTween()
	{
		return null;
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x1338790", Offset = "0x1338790", VA = "0x1338790")]
	public AnimateMaskAlpha()
	{
	}
}
[Token(Token = "0x200013D")]
[CommandInfo("Effects", "Animate MAterial", "Moves a material property to value.", 0)]
[AddComponentMenu("")]
public class AnimateMaterial : BaseDotTweenCommand
{
	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected float value;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	protected string valueName;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	protected Renderer target;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	protected int materialIndex;

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x13387D4", Offset = "0x13387D4", VA = "0x13387D4", Slot = "44")]
	public override Tweener ExecuteTween()
	{
		return null;
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x1338850", Offset = "0x1338850", VA = "0x1338850")]
	public AnimateMaterial()
	{
	}
}
[Token(Token = "0x200013E")]
[CommandInfo("Effects", "Animate Mesh Color", "Moves a mesh color property to value.", 0)]
public class AnimateMaterialColor : BaseDotTweenCommand
{
	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected Color value;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	protected Renderer target;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	protected int index;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	protected string param;

	[Token(Token = "0x600061A")]
	[Address(RVA = "0x133885C", Offset = "0x133885C", VA = "0x133885C", Slot = "44")]
	public override Tweener ExecuteTween()
	{
		return null;
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0x13388F0", Offset = "0x13388F0", VA = "0x13388F0")]
	public AnimateMaterialColor()
	{
	}
}
[Token(Token = "0x200013F")]
[CommandInfo("Effects", "Animate Sprite Color", "Moves a sprite color property to value.", 0)]
public class AnimateSpriteColor : BaseDotTweenCommand
{
	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected Color value;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	protected SpriteRenderer target;

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x1338944", Offset = "0x1338944", VA = "0x1338944", Slot = "44")]
	public override Tweener ExecuteTween()
	{
		return null;
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0x1338998", Offset = "0x1338998", VA = "0x1338998")]
	public AnimateSpriteColor()
	{
	}
}
[Token(Token = "0x2000140")]
[CommandInfo("Audio", "Play Audio", "", 0)]
[AddComponentMenu("")]
public class PlayAudio : Command
{
	[Token(Token = "0x600061E")]
	[Address(RVA = "0x133899C", Offset = "0x133899C", VA = "0x133899C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0x1338A30", Offset = "0x1338A30", VA = "0x1338A30")]
	public PlayAudio()
	{
	}
}
[Token(Token = "0x2000141")]
[CommandInfo("Audio", "Set Music State", "", 0)]
[AddComponentMenu("")]
public class SetMusicStateCommand : Command
{
	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MusicState state;

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x1338A38", Offset = "0x1338A38", VA = "0x1338A38", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0x1338AD0", Offset = "0x1338AD0", VA = "0x1338AD0")]
	public SetMusicStateCommand()
	{
	}
}
[Token(Token = "0x2000142")]
[CommandInfo("Audio", "Stop Audio", "", 0)]
[AddComponentMenu("")]
public class StopAudio : Command
{
	[Token(Token = "0x6000622")]
	[Address(RVA = "0x1338AD8", Offset = "0x1338AD8", VA = "0x1338AD8", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x1338B6C", Offset = "0x1338B6C", VA = "0x1338B6C")]
	public StopAudio()
	{
	}
}
[Token(Token = "0x2000143")]
[ExecuteInEditMode]
public abstract class BaseDotTweenCommand : Command
{
	[Token(Token = "0x2000144")]
	public enum ToFrom
	{
		[Token(Token = "0x4000501")]
		To,
		[Token(Token = "0x4000502")]
		From
	}

	[Token(Token = "0x2000145")]
	public enum AbsAdd
	{
		[Token(Token = "0x4000504")]
		Absolute,
		[Token(Token = "0x4000505")]
		Additive
	}

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Target game object to apply the Tween to")]
	[SerializeField]
	protected GameObjectData _targetObject;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("The time in seconds the animation will take to complete")]
	[SerializeField]
	protected FloatData _duration;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("The delay in seconds")]
	[SerializeField]
	protected FloatData _delay;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Does the tween act from current TO destination or is it reversed and act FROM destination to its current")]
	[SerializeField]
	protected ToFrom _toFrom;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	[UnityEngine.Tooltip("Does the tween use the value as a target or as a delta to be added to current.")]
	protected AbsAdd _absAdd;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[UnityEngine.Tooltip("The shape of the easing curve applied to the animation")]
	protected Ease easeType;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected AnimationCurve curve;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[UnityEngine.Tooltip("The type of loop to apply once the animation has completed")]
	protected DG.Tweening.LoopType loopType;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	[UnityEngine.Tooltip("Number of times to repeat the tween, -1 is infinite.")]
	protected int repeats;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[UnityEngine.Tooltip("Stop any previously LeanTweens on this object before adding this one. Warning; expensive.")]
	[SerializeField]
	protected bool stopPreviousTweens;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	[SerializeField]
	[UnityEngine.Tooltip("Wait until the tween has finished before executing the next command")]
	protected bool waitUntilFinished;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	protected Tweener ourTween;

	[Token(Token = "0x170000AC")]
	public bool IsInFromMode
	{
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x1338B74", Offset = "0x1338B74", VA = "0x1338B74")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000AD")]
	public bool IsInAddativeMode
	{
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x1338B84", Offset = "0x1338B84", VA = "0x1338B84")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x1338B94", Offset = "0x1338B94", VA = "0x1338B94", Slot = "43")]
	protected virtual void OnTweenComplete()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x1338BA4", Offset = "0x1338BA4", VA = "0x1338BA4", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000628")]
	public abstract Tweener ExecuteTween();

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x1338DF8", Offset = "0x1338DF8", VA = "0x1338DF8", Slot = "34")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x1338F18", Offset = "0x1338F18", VA = "0x1338F18", Slot = "39")]
	public override Color GetButtonColor()
	{
		return default(Color);
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x1338F38", Offset = "0x1338F38", VA = "0x1338F38", Slot = "31")]
	public override bool HasReference(Variable variable)
	{
		return default(bool);
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x13384D8", Offset = "0x13384D8", VA = "0x13384D8")]
	protected BaseDotTweenCommand()
	{
	}
}
[Token(Token = "0x2000146")]
[CommandInfo("Scripting", "BroadcastPlaymakerEvent", "", 0)]
public class BroadcastFsmEvent : Command
{
	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string fsmEventName;

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x1338FE0", Offset = "0x1338FE0", VA = "0x1338FE0", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x1339050", Offset = "0x1339050", VA = "0x1339050")]
	public BroadcastFsmEvent()
	{
	}
}
[Token(Token = "0x2000147")]
[CommandInfo("", "Camera Shake", "", 0)]
[AddComponentMenu("")]
public class CameraShakeCommand : Command
{
	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float magnitude;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float length;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float exponent;

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x1339058", Offset = "0x1339058", VA = "0x1339058", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0x13390CC", Offset = "0x13390CC", VA = "0x13390CC")]
	public CameraShakeCommand()
	{
	}
}
[Token(Token = "0x2000148")]
[CommandInfo("Scripting", "Check Distance", "", 0)]
public class CheckDistance : Command
{
	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform source;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected FloatData value;

	[Token(Token = "0x6000631")]
	[Address(RVA = "0x13390E4", Offset = "0x13390E4", VA = "0x13390E4", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0x13391CC", Offset = "0x13391CC", VA = "0x13391CC")]
	public CheckDistance()
	{
	}
}
[Token(Token = "0x2000149")]
[CommandInfo("Scripting", "Check Character Grounded", "", 0)]
public class CheckGrounded : Command
{
	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CharacterActor character;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected BooleanData value;

	[Token(Token = "0x6000633")]
	[Address(RVA = "0x13391D4", Offset = "0x13391D4", VA = "0x13391D4", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0x1339224", Offset = "0x1339224", VA = "0x1339224")]
	public CheckGrounded()
	{
	}
}
[Token(Token = "0x200014A")]
[CommandInfo("Scripting", "Check Player Visibility", "", 0)]
public class CheckPlayerVisibility : Command
{
	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BooleanData value;

	[Token(Token = "0x6000635")]
	[Address(RVA = "0x133922C", Offset = "0x133922C", VA = "0x133922C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0x13392DC", Offset = "0x13392DC", VA = "0x13392DC")]
	public CheckPlayerVisibility()
	{
	}
}
[Token(Token = "0x200014B")]
[CommandInfo("Scripting", "Check Target Visibility", "", 0)]
public class CheckTargetVisibility : Command
{
	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LookTarget target;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BooleanData value;

	[Token(Token = "0x6000637")]
	[Address(RVA = "0x13392E4", Offset = "0x13392E4", VA = "0x13392E4", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0x1339320", Offset = "0x1339320", VA = "0x1339320")]
	public CheckTargetVisibility()
	{
	}
}
[Token(Token = "0x200014C")]
[CommandInfo("Scripting", "Copy position", "", 0)]
public class CopyPosition : Command
{
	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform source;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target;

	[Token(Token = "0x6000639")]
	[Address(RVA = "0x1339328", Offset = "0x1339328", VA = "0x1339328", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0x1339380", Offset = "0x1339380", VA = "0x1339380")]
	public CopyPosition()
	{
	}
}
[Token(Token = "0x200014D")]
[AddComponentMenu("")]
[CommandInfo("", "Fade Camera VR", "", 0)]
public class FadeCameraVR : Command
{
	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float value;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float duration;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float delay;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool black;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool resetValue;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	public bool waitForFade;

	[Token(Token = "0x600063B")]
	[Address(RVA = "0x1339388", Offset = "0x1339388", VA = "0x1339388", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0x13394F0", Offset = "0x13394F0", VA = "0x13394F0")]
	public FadeCameraVR()
	{
	}
}
[Token(Token = "0x200014E")]
[AddComponentMenu("")]
[CommandInfo("Effects", "Fade Material", "", 0)]
[ExecuteInEditMode]
public class FadeMaterialColor : Command
{
	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Sprite object to be faded")]
	[SerializeField]
	protected MeshRenderer meshRenderer;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected string paramName;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Length of time to perform the fade")]
	[SerializeField]
	protected FloatData _duration;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("Target color to fade to. To only fade transparency level, set the color to white and set the alpha to required transparency.")]
	[SerializeField]
	protected FloatData _targetColor;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Wait until the fade has finished before executing the next command")]
	[SerializeField]
	protected bool waitUntilFinished;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[FormerlySerializedAs("duration")]
	[HideInInspector]
	public float durationOLD;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	[FormerlySerializedAs("targetColor")]
	public float targetColorOLD;

	[Token(Token = "0x600063E")]
	[Address(RVA = "0x1339510", Offset = "0x1339510", VA = "0x1339510", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0x1339664", Offset = "0x1339664", VA = "0x1339664", Slot = "34")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x1339750", Offset = "0x1339750", VA = "0x1339750", Slot = "39")]
	public override Color GetButtonColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x1339770", Offset = "0x1339770", VA = "0x1339770", Slot = "31")]
	public override bool HasReference(Variable variable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x133982C", Offset = "0x133982C", VA = "0x133982C", Slot = "43")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x1339874", Offset = "0x1339874", VA = "0x1339874")]
	public FadeMaterialColor()
	{
	}
}
[Token(Token = "0x200014F")]
[CommandInfo("Scripting", "Finish", "", 0)]
public class FinishCommand : Command
{
	[Token(Token = "0x6000644")]
	[Address(RVA = "0x133993C", Offset = "0x133993C", VA = "0x133993C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x13399E8", Offset = "0x13399E8", VA = "0x13399E8")]
	public FinishCommand()
	{
	}
}
[Token(Token = "0x2000150")]
[CommandInfo("Animation", "Get Anim Float", "", 0)]
public class GetAnimFloat : Command
{
	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Reference to an Animator component in a game object")]
	[SerializeField]
	protected AnimatorData _animator;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Name of the float Animator parameter that will have its value changed")]
	[SerializeField]
	protected StringData _parameterName;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[UnityEngine.Tooltip("The float value to set the parameter to")]
	protected FloatData value;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[FormerlySerializedAs("animator")]
	[HideInInspector]
	public Animator animatorOLD;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	[FormerlySerializedAs("parameterName")]
	public string parameterNameOLD;

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x13399F0", Offset = "0x13399F0", VA = "0x13399F0", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x1339AC0", Offset = "0x1339AC0", VA = "0x1339AC0", Slot = "34")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x1339BD4", Offset = "0x1339BD4", VA = "0x1339BD4", Slot = "39")]
	public override Color GetButtonColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x1339BF4", Offset = "0x1339BF4", VA = "0x1339BF4", Slot = "31")]
	public override bool HasReference(Variable variable)
	{
		return default(bool);
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x1339CD8", Offset = "0x1339CD8", VA = "0x1339CD8", Slot = "43")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x1339DC4", Offset = "0x1339DC4", VA = "0x1339DC4")]
	public GetAnimFloat()
	{
	}
}
[Token(Token = "0x2000151")]
[CommandInfo("Alchemy", "Get Resource Amount", "", 0)]
[AddComponentMenu("")]
public class GetResourceAmount : Command
{
	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected FloatData resourceValue;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Resource resource;

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x1339E1C", Offset = "0x1339E1C", VA = "0x1339E1C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x1339ECC", Offset = "0x1339ECC", VA = "0x1339ECC", Slot = "34")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x1339FBC", Offset = "0x1339FBC", VA = "0x1339FBC", Slot = "39")]
	public override Color GetButtonColor()
	{
		return default(Color);
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x1339FDC", Offset = "0x1339FDC", VA = "0x1339FDC", Slot = "31")]
	public override bool HasReference(Variable variable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x133A048", Offset = "0x133A048", VA = "0x133A048")]
	public GetResourceAmount()
	{
	}
}
[Token(Token = "0x2000152")]
[CommandInfo("", "Player Teleport", "", 0)]
[AddComponentMenu("")]
public class TeleportInteractible : Command
{
	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform playerTarget;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float duration;

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x133A050", Offset = "0x133A050", VA = "0x133A050", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x133A124", Offset = "0x133A124", VA = "0x133A124")]
	public TeleportInteractible()
	{
	}
}
[Token(Token = "0x2000153")]
[CommandInfo("Scripting", "Lerp Target", "", 0)]
public class LerpTarget : Command
{
	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform source;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool timeDependent;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected FloatData speed;

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x133A138", Offset = "0x133A138", VA = "0x133A138", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x133A238", Offset = "0x133A238", VA = "0x133A238")]
	public LerpTarget()
	{
	}
}
[Token(Token = "0x2000154")]
[CommandInfo("", "Load Last Checkpoint", "", 0)]
[AddComponentMenu("")]
public class LoadLastCheckpoint : Command
{
	[Token(Token = "0x6000655")]
	[Address(RVA = "0x133A248", Offset = "0x133A248", VA = "0x133A248", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x133A2F0", Offset = "0x133A2F0", VA = "0x133A2F0")]
	public LoadLastCheckpoint()
	{
	}
}
[Token(Token = "0x2000155")]
[CommandInfo("", "Scene Load", "", 0)]
[AddComponentMenu("")]
public class LoadScene : Command
{
	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StringData scene;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool stopAudio;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool fade;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public IntegerData checkpoint;

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x133A2F8", Offset = "0x133A2F8", VA = "0x133A2F8", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x133A400", Offset = "0x133A400", VA = "0x133A400")]
	public LoadScene()
	{
	}
}
[Token(Token = "0x2000156")]
[CommandInfo("Bartix", "Move To", "Moves a game object to a specified position over time. The position can be defined by a transform in another object (using To Transform) or by setting an absolute position (using To Position, if To Transform is set to None).", 0)]
[AddComponentMenu("")]
[ExecuteInEditMode]
public class MoveTo : Fungus.MoveTo
{
	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float maxDistance;

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x133A410", Offset = "0x133A410", VA = "0x133A410", Slot = "44")]
	public override void DoTween()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x133A8EC", Offset = "0x133A8EC", VA = "0x133A8EC")]
	public MoveTo()
	{
	}
}
[Token(Token = "0x2000157")]
[CommandInfo("Math", "Mul", "", 0)]
[AddComponentMenu("")]
public class Pow : Command
{
	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected FloatData baseValue;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected FloatData multiplierValue;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected FloatData outValue;

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x133A8FC", Offset = "0x133A8FC", VA = "0x133A8FC", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x133A95C", Offset = "0x133A95C", VA = "0x133A95C", Slot = "34")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x133ABE0", Offset = "0x133ABE0", VA = "0x133ABE0", Slot = "39")]
	public override Color GetButtonColor()
	{
		return default(Color);
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x133AC00", Offset = "0x133AC00", VA = "0x133AC00", Slot = "31")]
	public override bool HasReference(Variable variable)
	{
		return default(bool);
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0x133ACD0", Offset = "0x133ACD0", VA = "0x133ACD0")]
	public Pow()
	{
	}
}
[Token(Token = "0x2000158")]
[CommandInfo("Animations", "NPCLookAt", "", 0)]
[AddComponentMenu("")]
public class NPCLookAt : Command
{
	[Token(Token = "0x2000159")]
	public enum TARGETS
	{
		[Token(Token = "0x400053A")]
		MOTH,
		[Token(Token = "0x400053B")]
		WOLF,
		[Token(Token = "0x400053C")]
		WALRUS,
		[Token(Token = "0x400053D")]
		OWL,
		[Token(Token = "0x400053E")]
		HEDGEHOG,
		[Token(Token = "0x400053F")]
		ALCHEMIST
	}

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MultipleSourcesControlledLookAtConstraint constraint;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TARGETS target;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float weight;

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x133ACD8", Offset = "0x133ACD8", VA = "0x133ACD8", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x133AD3C", Offset = "0x133AD3C", VA = "0x133AD3C", Slot = "34")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x133AEC0", Offset = "0x133AEC0", VA = "0x133AEC0")]
	public NPCLookAt()
	{
	}
}
[Token(Token = "0x200015A")]
[AddComponentMenu("")]
[CommandInfo("Particles", "Particles Pause", "", 0)]
public class ParticlePause : Command
{
	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem[] particles;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool state;

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x133AED0", Offset = "0x133AED0", VA = "0x133AED0", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x133AF5C", Offset = "0x133AF5C", VA = "0x133AF5C")]
	public ParticlePause()
	{
	}
}
[Token(Token = "0x200015B")]
[CommandInfo("Particles", "Particles Toggle", "", 0)]
[AddComponentMenu("")]
public class ParticleToggle : Command
{
	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem[] particles;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool state;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool withChildren;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public ParticleSystemStopBehavior stopBehaviour;

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x133AF64", Offset = "0x133AF64", VA = "0x133AF64", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x133B004", Offset = "0x133B004", VA = "0x133B004")]
	public ParticleToggle()
	{
	}
}
[Token(Token = "0x200015C")]
[CommandInfo("Progress", "All Alchemy/Abilities", "", 0)]
[AddComponentMenu("")]
public class AllAlchemyAbilities : Command
{
	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool alchemy;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool abilities;

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x133B00C", Offset = "0x133B00C", VA = "0x133B00C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x133B0EC", Offset = "0x133B0EC", VA = "0x133B0EC")]
	public AllAlchemyAbilities()
	{
	}
}
[Token(Token = "0x200015D")]
[CommandInfo("Progress", "Check New Game", "", 0)]
[AddComponentMenu("")]
public class CheckNewGame : Command
{
	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BooleanData newGame;

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x133B0FC", Offset = "0x133B0FC", VA = "0x133B0FC", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x133B1C0", Offset = "0x133B1C0", VA = "0x133B1C0")]
	public CheckNewGame()
	{
	}
}
[Token(Token = "0x200015E")]
[CommandInfo("Progress", "Continue Game", "", 0)]
[AddComponentMenu("")]
public class ContinueGame : Command
{
	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StringData scene;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public IntegerData checkpoint;

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x133B1C8", Offset = "0x133B1C8", VA = "0x133B1C8", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x133B2F4", Offset = "0x133B2F4", VA = "0x133B2F4")]
	public ContinueGame()
	{
	}
}
[Token(Token = "0x200015F")]
[AddComponentMenu("")]
[CommandInfo("Progress", "New Game", "", 0)]
public class NewGame : Command
{
	[Token(Token = "0x600066D")]
	[Address(RVA = "0x133B2FC", Offset = "0x133B2FC", VA = "0x133B2FC", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x133B390", Offset = "0x133B390", VA = "0x133B390")]
	public NewGame()
	{
	}
}
[Token(Token = "0x2000160")]
[CommandInfo("Progress", "Reset Saves", "", 0)]
[AddComponentMenu("")]
public class ResetSaves : Command
{
	[Token(Token = "0x600066F")]
	[Address(RVA = "0x133B398", Offset = "0x133B398", VA = "0x133B398", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x133B42C", Offset = "0x133B42C", VA = "0x133B42C")]
	public ResetSaves()
	{
	}
}
[Token(Token = "0x2000161")]
[CommandInfo("Progress", "Unlock Canister", "", 0)]
public class UnlockCanister : Command
{
	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public IntegerData coins;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SaveCollectable saveCollectable;

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x133B434", Offset = "0x133B434", VA = "0x133B434", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x133B51C", Offset = "0x133B51C", VA = "0x133B51C")]
	public UnlockCanister()
	{
	}
}
[Token(Token = "0x2000162")]
[CommandInfo("Progress", "Unlock Mixture", "", 0)]
public class UnlockMixture : Command
{
	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AlchemyModificationBase mixture;

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x133B524", Offset = "0x133B524", VA = "0x133B524", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x133B660", Offset = "0x133B660", VA = "0x133B660")]
	public UnlockMixture()
	{
	}
}
[Token(Token = "0x2000163")]
[CommandInfo("AI", "Rotate To Player", "", 0)]
[AddComponentMenu("")]
public class RotateNPCToPlayer : Command
{
	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool stopAgent;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool useAnimator;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float rotateDuration;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshAgent agent;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator animator;

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x133B668", Offset = "0x133B668", VA = "0x133B668")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x133B6F8", Offset = "0x133B6F8", VA = "0x133B6F8", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x133B94C", Offset = "0x133B94C", VA = "0x133B94C")]
	public void AnimateRotateTo(Vector3 target, float duration)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x133B978", Offset = "0x133B978", VA = "0x133B978")]
	public void AnimateRotateTo(Quaternion target, float duration)
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x133BA74", Offset = "0x133BA74", VA = "0x133BA74")]
	private void OnRotateCompleted()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x133BAE8", Offset = "0x133BAE8", VA = "0x133BAE8")]
	public RotateNPCToPlayer()
	{
	}
}
[Token(Token = "0x2000164")]
[CommandInfo("Narrative", "Set Bartix Language", "Set the active language for the scene. A Localization object with a localization file must be present in the scene.", 0)]
[ExecuteInEditMode]
[AddComponentMenu("")]
public class SetBartixLanguage : Command
{
	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Code of the language to set. e.g. ES, DE, JA")]
	protected StringData _languageCode;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string mostRecentLanguage;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("languageCode")]
	[HideInInspector]
	public string languageCodeOLD;

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x133BB00", Offset = "0x133BB00", VA = "0x133BB00", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x133BC20", Offset = "0x133BC20", VA = "0x133BC20", Slot = "34")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x133BC2C", Offset = "0x133BC2C", VA = "0x133BC2C", Slot = "39")]
	public override Color GetButtonColor()
	{
		return default(Color);
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x133BC4C", Offset = "0x133BC4C", VA = "0x133BC4C", Slot = "31")]
	public override bool HasReference(Variable variable)
	{
		return default(bool);
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x133BCE0", Offset = "0x133BCE0", VA = "0x133BCE0", Slot = "43")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x133BD60", Offset = "0x133BD60", VA = "0x133BD60")]
	public SetBartixLanguage()
	{
	}
}
[Token(Token = "0x2000165")]
[AddComponentMenu("")]
[CommandInfo("Alchemy", "Set Force Bottle", "", 0)]
public class SetForceBottle : Command
{
	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AlchemyModificationBase bottle;

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x133BE24", Offset = "0x133BE24", VA = "0x133BE24", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x133BF4C", Offset = "0x133BF4C", VA = "0x133BF4C")]
	public SetForceBottle()
	{
	}
}
[Token(Token = "0x2000166")]
[CommandInfo("Animation", "Set Look Weight", "", 0)]
public class SetLookAtWeight : Command
{
	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AimConstraint aimConstraint;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LookAtIK lookAtIK;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FloatData value;

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x133BF54", Offset = "0x133BF54", VA = "0x133BF54", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x133C03C", Offset = "0x133C03C", VA = "0x133C03C")]
	public SetLookAtWeight()
	{
	}
}
[Token(Token = "0x2000167")]
[CommandInfo("Rendering", "Set Materials Count", "", 0)]
[AddComponentMenu("")]
public class SetMaterialsCount : Command
{
	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer target;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int count;

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x133C044", Offset = "0x133C044", VA = "0x133C044", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x133C184", Offset = "0x133C184", VA = "0x133C184")]
	public SetMaterialsCount()
	{
	}
}
[Token(Token = "0x2000168")]
[CommandInfo("AI", "Set Destination", "", 0)]
[AddComponentMenu("")]
public class SetNavmeshDestination : Command
{
	[Token(Token = "0x2000169")]
	[CompilerGenerated]
	private sealed class <WaitUntilReachTarget>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SetNavmeshDestination <>4__this;

		[Token(Token = "0x170000AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000694")]
			[Address(RVA = "0x133C880", Offset = "0x133C880", VA = "0x133C880", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000696")]
			[Address(RVA = "0x133C8C8", Offset = "0x133C8C8", VA = "0x133C8C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x133C570", Offset = "0x133C570", VA = "0x133C570")]
		[DebuggerHidden]
		public <WaitUntilReachTarget>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x133C6FC", Offset = "0x133C6FC", VA = "0x133C6FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x133C700", Offset = "0x133C700", VA = "0x133C700", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x133C888", Offset = "0x133C888", VA = "0x133C888", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TransformData target;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool waitForReachDestination;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool addExtraRotation;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float extraRotationSpeed;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private NavMeshAgent agent;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isMoving;

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x133C18C", Offset = "0x133C18C", VA = "0x133C18C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x133C1E4", Offset = "0x133C1E4", VA = "0x133C1E4", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x133C3A4", Offset = "0x133C3A4", VA = "0x133C3A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x133C31C", Offset = "0x133C31C", VA = "0x133C31C")]
	[IteratorStateMachine(typeof(<WaitUntilReachTarget>d__9))]
	private IEnumerator WaitUntilReachTarget()
	{
		return null;
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x133C390", Offset = "0x133C390", VA = "0x133C390")]
	private void OnReachDestination()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x133C598", Offset = "0x133C598", VA = "0x133C598")]
	private bool PathComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x133C3BC", Offset = "0x133C3BC", VA = "0x133C3BC")]
	private void ExtraRotation()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0x133C6E0", Offset = "0x133C6E0", VA = "0x133C6E0")]
	public SetNavmeshDestination()
	{
	}
}
[Token(Token = "0x200016A")]
[AddComponentMenu("")]
[CommandInfo("Animations", "Set Player GrounderIK", "", 0)]
public class SetPlayerGrounderIK : Command
{
	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float value;

	[Token(Token = "0x6000697")]
	[Address(RVA = "0x133C8D0", Offset = "0x133C8D0", VA = "0x133C8D0", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0x133C97C", Offset = "0x133C97C", VA = "0x133C97C")]
	public SetPlayerGrounderIK()
	{
	}
}
[Token(Token = "0x200016B")]
[CommandInfo("", "Set Player Position", "", 0)]
[AddComponentMenu("")]
public class SetPlayerPosition : Command
{
	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform target;

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x133C984", Offset = "0x133C984", VA = "0x133C984", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x133CA88", Offset = "0x133CA88", VA = "0x133CA88")]
	public SetPlayerPosition()
	{
	}
}
[Token(Token = "0x200016C")]
[CommandInfo("Animations", "Set Player Trigger", "", 0)]
[AddComponentMenu("")]
public class SetPlayerTrigger : Command
{
	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string trigger;

	[Token(Token = "0x600069B")]
	[Address(RVA = "0x133CA90", Offset = "0x133CA90", VA = "0x133CA90", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0x133CB48", Offset = "0x133CB48", VA = "0x133CB48")]
	public SetPlayerTrigger()
	{
	}
}
[Token(Token = "0x200016D")]
[CommandInfo("", "Set Quest Settings", "", 0)]
[AddComponentMenu("")]
public class SetQuestSettings : Command
{
	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float eyeTextureResolutionScale;

	[Token(Token = "0x600069D")]
	[Address(RVA = "0x133CB50", Offset = "0x133CB50", VA = "0x133CB50", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x133CB7C", Offset = "0x133CB7C", VA = "0x133CB7C")]
	public SetQuestSettings()
	{
	}
}
[Token(Token = "0x200016E")]
[CommandInfo("Settings", "Alchemy Settings", "", 0)]
[AddComponentMenu("")]
public class AlchemySettings : Command
{
	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MainMenuToggleUI toggleUI;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool load;

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x133CB8C", Offset = "0x133CB8C", VA = "0x133CB8C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x133CC80", Offset = "0x133CC80", VA = "0x133CC80")]
	public AlchemySettings()
	{
	}
}
[Token(Token = "0x200016F")]
[CommandInfo("Settings", "God Settings", "", 0)]
[AddComponentMenu("")]
public class GodSettings : Command
{
	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MainMenuToggleUI toggleUI;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool load;

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0x133CC88", Offset = "0x133CC88", VA = "0x133CC88", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0x133CD7C", Offset = "0x133CD7C", VA = "0x133CD7C")]
	public GodSettings()
	{
	}
}
[Token(Token = "0x2000170")]
[CommandInfo("Settings", "Reset Settings", "", 0)]
[AddComponentMenu("")]
public class ResetSettings : Command
{
	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MainMenuToggleUI toggleUI;

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x133CD84", Offset = "0x133CD84", VA = "0x133CD84", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x133CE24", Offset = "0x133CE24", VA = "0x133CE24")]
	public ResetSettings()
	{
	}
}
[Token(Token = "0x2000171")]
[CommandInfo("Scripting", "Set Slope State", "", 0)]
public class SlopeState : Command
{
	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool slope;

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x133CE2C", Offset = "0x133CE2C", VA = "0x133CE2C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x133CEB8", Offset = "0x133CEB8", VA = "0x133CEB8")]
	public SlopeState()
	{
	}
}
[Token(Token = "0x2000172")]
[CommandInfo("Narrative", "Start Dialogue", "", 0)]
public class StartDialogue : Command
{
	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool lookAt;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool targetIsAlchemist;

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x133CEC8", Offset = "0x133CEC8", VA = "0x133CEC8", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x133CF84", Offset = "0x133CF84", VA = "0x133CF84")]
	public static void StartDialogueStatic([Optional] Transform target)
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x133D0DC", Offset = "0x133D0DC", VA = "0x133D0DC")]
	public StartDialogue()
	{
	}
}
[Token(Token = "0x2000173")]
[CommandInfo("Narrative", "End Dialogue", "", 0)]
public class StopDialogue : Command
{
	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x133D0E4", Offset = "0x133D0E4", VA = "0x133D0E4", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x133D108", Offset = "0x133D108", VA = "0x133D108")]
	public static void StopDialogueStatic()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x133D2B8", Offset = "0x133D2B8", VA = "0x133D2B8")]
	public StopDialogue()
	{
	}
}
[Token(Token = "0x2000174")]
[CommandInfo("AI", "Stop Navmesh", "", 0)]
[AddComponentMenu("")]
public class StopNavmesh : Command
{
	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private NavMeshAgent agent;

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x133D2C0", Offset = "0x133D2C0", VA = "0x133D2C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x133D318", Offset = "0x133D318", VA = "0x133D318", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x133D3BC", Offset = "0x133D3BC", VA = "0x133D3BC")]
	public StopNavmesh()
	{
	}
}
[Token(Token = "0x2000175")]
[CommandInfo("Animations", "Play Timeline", "", 0)]
public class PlayTimeline : Command
{
	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PlayableDirector director;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PlayableAsset timeline;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private DirectorWrapMode mode;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	protected bool waitUntilFinished;

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x133D3C4", Offset = "0x133D3C4", VA = "0x133D3C4", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x133D4DC", Offset = "0x133D4DC", VA = "0x133D4DC")]
	private void OnPlayableDirectorStopped(PlayableDirector aDirector)
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x133D5D4", Offset = "0x133D5D4", VA = "0x133D5D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x133D660", Offset = "0x133D660", VA = "0x133D660")]
	public PlayTimeline()
	{
	}
}
[Token(Token = "0x2000176")]
[CommandInfo("Animations", "Stop Timeline", "", 0)]
public class StopTimeline : Command
{
	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PlayableDirector director;

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x133D670", Offset = "0x133D670", VA = "0x133D670", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x133D6A4", Offset = "0x133D6A4", VA = "0x133D6A4")]
	public StopTimeline()
	{
	}
}
[Token(Token = "0x2000177")]
[CommandInfo("Scripting", "Toggle Cloth", "", 0)]
public class ToggleCloth : Command
{
	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Cloth cloth;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool enable;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float interpolationTime;

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x133D6AC", Offset = "0x133D6AC", VA = "0x133D6AC", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x133D6F0", Offset = "0x133D6F0", VA = "0x133D6F0")]
	public ToggleCloth()
	{
	}
}
[Token(Token = "0x2000178")]
[CommandInfo("Camera", "Toggle Dolly Camera", "", 0)]
[AddComponentMenu("")]
public class ToggleDollyCamera : Command
{
	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CinemachineVirtualCamera camera;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool value;

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x133D70C", Offset = "0x133D70C", VA = "0x133D70C", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x133D7B4", Offset = "0x133D7B4", VA = "0x133D7B4")]
	public ToggleDollyCamera()
	{
	}
}
[Token(Token = "0x2000179")]
[CommandInfo("", "ToggleGameplayPause", "", 0)]
[AddComponentMenu("")]
public class ToggleGameplayPause : Command
{
	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool pause;

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x133D7BC", Offset = "0x133D7BC", VA = "0x133D7BC", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x133D858", Offset = "0x133D858", VA = "0x133D858")]
	public ToggleGameplayPause()
	{
	}
}
[Token(Token = "0x200017A")]
[CommandInfo("Input", "Toggle Input", "", 0)]
public class ToggleInputManager : Command
{
	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool disable;

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x133D860", Offset = "0x133D860", VA = "0x133D860", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x133D8F4", Offset = "0x133D8F4", VA = "0x133D8F4")]
	public ToggleInputManager()
	{
	}
}
[Token(Token = "0x200017B")]
[CommandInfo("", "WaitForFlowchartFinishCommand", "", 0)]
public class WaitForFlowchartFinishCommand : Command
{
	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Flowchart flowchart;

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x133D904", Offset = "0x133D904", VA = "0x133D904", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x133DA48", Offset = "0x133DA48", VA = "0x133DA48", Slot = "28")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x133D984", Offset = "0x133D984", VA = "0x133D984")]
	private void RegisterListener()
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x133DA64", Offset = "0x133DA64", VA = "0x133DA64")]
	private void RemoveListener()
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x133DB28", Offset = "0x133DB28", VA = "0x133DB28")]
	private void OnFlowchartFinished(Flowchart flow)
	{
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x133DBBC", Offset = "0x133DBBC", VA = "0x133DBBC")]
	public WaitForFlowchartFinishCommand()
	{
	}
}
[Token(Token = "0x200017C")]
[CommandInfo("Gameplay", "Wave", "", 0)]
public class WaveCommand : Command, IArenaWave
{
	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool _requiredToCompleteArena;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	private bool _requiredIfWaveStarted;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool continueBlockIfArenaCompleted;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public EnemySpawnHandler[] enemiesToSpawn;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onWaveStart;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onWaveReset;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent onWaveComplete;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	private bool _resettingWave;

	[Token(Token = "0x170000B0")]
	public ArenaController Arena
	{
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x133DBC4", Offset = "0x133DBC4", VA = "0x133DBC4", Slot = "43")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x133DBCC", Offset = "0x133DBCC", VA = "0x133DBCC", Slot = "44")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000B1")]
	public List<EnemyBehaviourBase> Enemies_Deprecated
	{
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x133DBD4", Offset = "0x133DBD4", VA = "0x133DBD4", Slot = "46")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x133DBDC", Offset = "0x133DBDC", VA = "0x133DBDC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B2")]
	public bool Required
	{
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x133DBE4", Offset = "0x133DBE4", VA = "0x133DBE4", Slot = "48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B3")]
	public bool InProgress
	{
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x133DC0C", Offset = "0x133DC0C", VA = "0x133DC0C", Slot = "49")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x133DC14", Offset = "0x133DC14", VA = "0x133DC14")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B4")]
	public bool Completed
	{
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x133DC20", Offset = "0x133DC20", VA = "0x133DC20", Slot = "50")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x133DC28", Offset = "0x133DC28", VA = "0x133DC28")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B5")]
	public bool StartingWave
	{
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x133DC34", Offset = "0x133DC34", VA = "0x133DC34", Slot = "47")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B6")]
	public List<EnemyBehaviour> EnemiesEngaged
	{
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x133DC3C", Offset = "0x133DC3C", VA = "0x133DC3C", Slot = "45")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x133DC8C", Offset = "0x133DC8C", VA = "0x133DC8C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x133DD50", Offset = "0x133DD50", VA = "0x133DD50")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x133DE14", Offset = "0x133DE14", VA = "0x133DE14", Slot = "53")]
	public void CompleteWave()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x133E098", Offset = "0x133E098", VA = "0x133E098", Slot = "52")]
	public void ResetWave()
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x133E484", Offset = "0x133E484", VA = "0x133E484", Slot = "51")]
	public void StartWave()
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x133E868", Offset = "0x133E868", VA = "0x133E868", Slot = "27")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x133E888", Offset = "0x133E888", VA = "0x133E888", Slot = "24")]
	public override void OnStopExecuting()
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x133E8BC", Offset = "0x133E8BC", VA = "0x133E8BC")]
	private void OnEnemyDefeated(EnemyBehaviourBase enemy)
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x133E8E8", Offset = "0x133E8E8", VA = "0x133E8E8")]
	private bool AreAllEnemiesDefeated()
	{
		return default(bool);
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x133E74C", Offset = "0x133E74C", VA = "0x133E74C")]
	private void InitializeEnemies()
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x133E2F0", Offset = "0x133E2F0", VA = "0x133E2F0")]
	private void ClearEnemies()
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x133E9FC", Offset = "0x133E9FC", VA = "0x133E9FC", Slot = "54")]
	public void AddEnemyWhileInProgress(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x133EA3C", Offset = "0x133EA3C", VA = "0x133EA3C")]
	public WaveCommand()
	{
	}
}
[Token(Token = "0x200017E")]
public class BecameVisibleObject : MonoBehaviour
{
	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x133EB6C", Offset = "0x133EB6C", VA = "0x133EB6C")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x133EC9C", Offset = "0x133EC9C", VA = "0x133EC9C")]
	public BecameVisibleObject()
	{
	}
}
[Token(Token = "0x200017F")]
public enum ClickMode
{
	[Token(Token = "0x400058F")]
	Disabled,
	[Token(Token = "0x4000590")]
	ClickAnywhere,
	[Token(Token = "0x4000591")]
	ClickOnDialog,
	[Token(Token = "0x4000592")]
	ClickOnButton
}
[Token(Token = "0x2000180")]
public class DialogInput : MonoBehaviour
{
	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Click to advance story")]
	protected ClickMode clickMode;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[UnityEngine.Tooltip("Delay between consecutive clicks. Useful to prevent accidentally clicking through story.")]
	protected float nextClickDelay;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Allow holding Cancel to fast forward text")]
	protected bool cancelEnabled;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[UnityEngine.Tooltip("Ignore input if a Menu dialog is currently active")]
	[SerializeField]
	protected bool ignoreMenuClicks;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected string submitButtonAction;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected string cancelButtonAction;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool dialogClickedFlag;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	protected bool nextLineInputFlag;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected float ignoreClickTimer;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Writer writer;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected InputSystem inputSystem;

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x133ECA4", Offset = "0x133ECA4", VA = "0x133ECA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x133ED24", Offset = "0x133ED24", VA = "0x133ED24", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x133ED7C", Offset = "0x133ED7C", VA = "0x133ED7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x133EE10", Offset = "0x133EE10", VA = "0x133EE10")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x133EEA4", Offset = "0x133EEA4", VA = "0x133EEA4")]
	private void OnSubmitPressed()
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x133EEB0", Offset = "0x133EEB0", VA = "0x133EEB0", Slot = "5")]
	protected virtual void CheckEventSystem()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x133EFE8", Offset = "0x133EFE8", VA = "0x133EFE8", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x133F36C", Offset = "0x133F36C", VA = "0x133F36C", Slot = "7")]
	public virtual void SetNextLineFlag()
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x133F378", Offset = "0x133F378", VA = "0x133F378", Slot = "8")]
	public virtual void SetDialogClickedFlag()
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x133F3A0", Offset = "0x133F3A0", VA = "0x133F3A0", Slot = "9")]
	public virtual void SetButtonClickedFlag()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x133F3B8", Offset = "0x133F3B8", VA = "0x133F3B8")]
	public DialogInput()
	{
	}
}
[Token(Token = "0x2000181")]
public class AreaStarted : MonoBehaviour
{
	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x133F3C8", Offset = "0x133F3C8", VA = "0x133F3C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x133F3CC", Offset = "0x133F3CC", VA = "0x133F3CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x133F3D0", Offset = "0x133F3D0", VA = "0x133F3D0")]
	public AreaStarted()
	{
	}
}
[Token(Token = "0x2000182")]
[EventHandlerInfo("", "Arena Started", "")]
[AddComponentMenu("")]
public class ArenaStarted : Fungus.EventHandler
{
	[Token(Token = "0x2000183")]
	public class ArenaStartedEvent
	{
		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject target;

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x133F724", Offset = "0x133F724", VA = "0x133F724")]
		public ArenaStartedEvent(GameObject target)
		{
		}
	}

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected GameObject objectRef;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected EventDispatcher eventDispatcher;

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x133F3D8", Offset = "0x133F3D8", VA = "0x133F3D8", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x133F4D4", Offset = "0x133F4D4", VA = "0x133F4D4", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0x133F5A8", Offset = "0x133F5A8", VA = "0x133F5A8", Slot = "10")]
	protected virtual void OnAreaStartedEvent(ArenaStartedEvent evt)
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0x133F5C8", Offset = "0x133F5C8", VA = "0x133F5C8", Slot = "11")]
	public virtual void OnCrafted(GameObject showedObject)
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0x133F680", Offset = "0x133F680", VA = "0x133F680", Slot = "7")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0x133F71C", Offset = "0x133F71C", VA = "0x133F71C")]
	public ArenaStarted()
	{
	}
}
[Token(Token = "0x2000184")]
[EventHandlerInfo("", "Became Showed", "")]
[AddComponentMenu("")]
public class BecameShowed : Fungus.EventHandler
{
	[Token(Token = "0x2000185")]
	public class BecameShowedEvent
	{
		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject target;

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x133EC6C", Offset = "0x133EC6C", VA = "0x133EC6C")]
		public BecameShowedEvent(GameObject target)
		{
		}
	}

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected GameObject objectRef;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected EventDispatcher eventDispatcher;

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x133F754", Offset = "0x133F754", VA = "0x133F754", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0x133F850", Offset = "0x133F850", VA = "0x133F850", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0x133F924", Offset = "0x133F924", VA = "0x133F924", Slot = "10")]
	protected virtual void OnBecameShowedEvent(BecameShowedEvent evt)
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0x133F944", Offset = "0x133F944", VA = "0x133F944", Slot = "11")]
	public virtual void OnCrafted(GameObject showedObject)
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x133F9FC", Offset = "0x133F9FC", VA = "0x133F9FC", Slot = "7")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x133FA98", Offset = "0x133FA98", VA = "0x133FA98")]
	public BecameShowed()
	{
	}
}
[Token(Token = "0x2000186")]
[EventHandlerInfo("Alchemy", "Bottle Crafted", "")]
[AddComponentMenu("")]
public class BottleCrafted : Fungus.EventHandler
{
	[Token(Token = "0x2000187")]
	public class BottleCraftedEvent
	{
		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AlchemyModificationBase ability;

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x133FDE4", Offset = "0x133FDE4", VA = "0x133FDE4")]
		public BottleCraftedEvent(AlchemyModificationBase ability)
		{
		}
	}

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AlchemyModificationBase abilityRef;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected EventDispatcher eventDispatcher;

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0x133FAA0", Offset = "0x133FAA0", VA = "0x133FAA0", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0x133FB9C", Offset = "0x133FB9C", VA = "0x133FB9C", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0x133FC70", Offset = "0x133FC70", VA = "0x133FC70", Slot = "10")]
	protected virtual void OnBottleCraftedEvent(BottleCraftedEvent evt)
	{
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x133FC90", Offset = "0x133FC90", VA = "0x133FC90", Slot = "11")]
	public virtual void OnCrafted(AlchemyModificationBase craftedObject)
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x133FD48", Offset = "0x133FD48", VA = "0x133FD48", Slot = "7")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0x133FDDC", Offset = "0x133FDDC", VA = "0x133FDDC")]
	public BottleCrafted()
	{
	}
}
[Token(Token = "0x2000188")]
[EventHandlerInfo("Alchemy", "Effect Added", "")]
[AddComponentMenu("")]
public class EffectAdded : Fungus.EventHandler
{
	[Token(Token = "0x2000189")]
	public class EffectAddedEvent
	{
		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ModificationScriptableObject effect;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AlchemyModificationReceiver controller;

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x134020C", Offset = "0x134020C", VA = "0x134020C")]
		public EffectAddedEvent(ModificationScriptableObject effect, AlchemyModificationReceiver controller)
		{
		}
	}

	[Token(Token = "0x200018A")]
	public enum CheckType
	{
		[Token(Token = "0x40005AE")]
		ONE,
		[Token(Token = "0x40005AF")]
		ALL
	}

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ModificationScriptableObject effectRef;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<AlchemyModificationReceiver> controllers;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CheckType checkType;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected EventDispatcher eventDispatcher;

	[Token(Token = "0x6000704")]
	[Address(RVA = "0x133FE14", Offset = "0x133FE14", VA = "0x133FE14", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0x133FF10", Offset = "0x133FF10", VA = "0x133FF10", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0x133FFE4", Offset = "0x133FFE4", VA = "0x133FFE4", Slot = "10")]
	protected virtual void OnEffectAddedEvent(EffectAddedEvent evt)
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0x1340008", Offset = "0x1340008", VA = "0x1340008", Slot = "11")]
	public virtual void OnAdded(ModificationScriptableObject craftedObject, AlchemyModificationReceiver controller)
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0x1340170", Offset = "0x1340170", VA = "0x1340170", Slot = "7")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0x1340204", Offset = "0x1340204", VA = "0x1340204")]
	public EffectAdded()
	{
	}
}
[Token(Token = "0x200018B")]
[AddComponentMenu("")]
[EventHandlerInfo("Input", "Input Action Executed", "")]
public class InputActionExecuted : Fungus.EventHandler
{
	[Token(Token = "0x200018C")]
	public enum ActioType
	{
		[Token(Token = "0x40005B3")]
		PERFORMED,
		[Token(Token = "0x40005B4")]
		CANCELED
	}

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputActionReference reference;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ActioType type;

	[Token(Token = "0x600070B")]
	[Address(RVA = "0x1340250", Offset = "0x1340250", VA = "0x1340250")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x134035C", Offset = "0x134035C", VA = "0x134035C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x1340468", Offset = "0x1340468", VA = "0x1340468")]
	private void Action_performed(InputAction.CallbackContext obj)
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x1340474", Offset = "0x1340474", VA = "0x1340474")]
	public InputActionExecuted()
	{
	}
}
[Token(Token = "0x200018D")]
[EventHandlerInfo("", "On Application Paused", "")]
[AddComponentMenu("")]
public class OnApplicationPaused : Fungus.EventHandler
{
	[Token(Token = "0x200018E")]
	public class OnApplicationPausedEvent
	{
		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool pause;

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x13406C8", Offset = "0x13406C8", VA = "0x13406C8")]
		public OnApplicationPausedEvent(bool pause)
		{
		}
	}

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool pause;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected EventDispatcher eventDispatcher;

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x134047C", Offset = "0x134047C", VA = "0x134047C", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x1340578", Offset = "0x1340578", VA = "0x1340578", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x134064C", Offset = "0x134064C", VA = "0x134064C", Slot = "10")]
	protected virtual void OnApplicationPause(OnApplicationPausedEvent evt)
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x1340680", Offset = "0x1340680", VA = "0x1340680", Slot = "7")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x13406C0", Offset = "0x13406C0", VA = "0x13406C0")]
	public OnApplicationPaused()
	{
	}
}
[Token(Token = "0x200018F")]
[EventHandlerInfo("", "Player Teleported", "")]
[AddComponentMenu("")]
public class PlayerTeleported : Fungus.EventHandler
{
	[Token(Token = "0x2000190")]
	public class PlayerTeleportedEvent
	{
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x1340914", Offset = "0x1340914", VA = "0x1340914")]
		public PlayerTeleportedEvent()
		{
		}
	}

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected EventDispatcher eventDispatcher;

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x13406F0", Offset = "0x13406F0", VA = "0x13406F0", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x13407EC", Offset = "0x13407EC", VA = "0x13407EC", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x13408C0", Offset = "0x13408C0", VA = "0x13408C0", Slot = "10")]
	protected virtual void OnPlayerTeleportedEvent(PlayerTeleportedEvent evt)
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x13408CC", Offset = "0x13408CC", VA = "0x13408CC", Slot = "7")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x134090C", Offset = "0x134090C", VA = "0x134090C")]
	public PlayerTeleported()
	{
	}
}
[Token(Token = "0x2000191")]
[AddComponentMenu("")]
[EventHandlerInfo("Alchemy", "Resource Attracted", "")]
public class ResourceAttracted : Fungus.EventHandler
{
	[Token(Token = "0x2000192")]
	public class ResourceAttractedEvent
	{
		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Resource resource;

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x1340C60", Offset = "0x1340C60", VA = "0x1340C60")]
		public ResourceAttractedEvent(Resource resource)
		{
		}
	}

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Resource resourceRef;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected EventDispatcher eventDispatcher;

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x134091C", Offset = "0x134091C", VA = "0x134091C", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x1340A18", Offset = "0x1340A18", VA = "0x1340A18", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x1340AEC", Offset = "0x1340AEC", VA = "0x1340AEC", Slot = "10")]
	protected virtual void OnResourceCraftedEvent(ResourceAttractedEvent evt)
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x1340B0C", Offset = "0x1340B0C", VA = "0x1340B0C", Slot = "11")]
	public virtual void OnAttracted(Resource resourceObject)
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x1340BC4", Offset = "0x1340BC4", VA = "0x1340BC4", Slot = "7")]
	public override string GetSummary()
	{
		return null;
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0x1340C58", Offset = "0x1340C58", VA = "0x1340C58")]
	public ResourceAttracted()
	{
	}
}
[Token(Token = "0x2000193")]
public class BartixLocalization : MonoBehaviour, ISubstitutionHandler
{
	[Token(Token = "0x2000194")]
	protected class TextItem
	{
		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string description;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string standardText;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<string, string> localizedStrings;

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x13419F4", Offset = "0x13419F4", VA = "0x13419F4")]
		public TextItem()
		{
		}
	}

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Language to use at startup, usually defined by a two letter language code (e.g DE = German)")]
	[SerializeField]
	protected string activeLanguage;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("CSV file containing localization data which can be easily edited in a spreadsheet tool")]
	[SerializeField]
	protected TextAsset localizationFile;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("CSV file containing localization data which can be easily edited in a spreadsheet tool")]
	[SerializeField]
	protected TextAsset masterLocalizationFile;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Dictionary<string, ILocalizable> localizeableObjects;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected string notificationText;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected bool initialized;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static Dictionary<string, string> localizedStrings;

	[Token(Token = "0x170000B7")]
	public virtual string ActiveLanguage
	{
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x13424E0", Offset = "0x13424E0", VA = "0x13424E0", Slot = "13")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B8")]
	public virtual TextAsset LocalizationFile
	{
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x13424E8", Offset = "0x13424E8", VA = "0x13424E8", Slot = "14")]
		get
		{
			return null;
		}
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x13424F0", Offset = "0x13424F0", VA = "0x13424F0", Slot = "15")]
		set
		{
		}
	}

	[Token(Token = "0x170000B9")]
	public virtual string NotificationText
	{
		[Token(Token = "0x6000730")]
		[Address(RVA = "0x13424F8", Offset = "0x13424F8", VA = "0x13424F8", Slot = "16")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x1342500", Offset = "0x1342500", VA = "0x1342500", Slot = "17")]
		set
		{
		}
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0x1340C90", Offset = "0x1340C90", VA = "0x1340C90", Slot = "5")]
	protected virtual void LevelWasLoaded()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0x1340D40", Offset = "0x1340D40", VA = "0x1340D40")]
	private void SceneManager_activeSceneChanged(Scene arg0, Scene arg1)
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0x1340D4C", Offset = "0x1340D4C", VA = "0x1340D4C", Slot = "6")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x1340E20", Offset = "0x1340E20", VA = "0x1340E20", Slot = "7")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x1340EF4", Offset = "0x1340EF4", VA = "0x1340EF4", Slot = "8")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x1340F00", Offset = "0x1340F00", VA = "0x1340F00", Slot = "9")]
	protected virtual void Init()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0x13410AC", Offset = "0x13410AC", VA = "0x13410AC", Slot = "10")]
	protected virtual void CacheLocalizeableObjects()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0x13412AC", Offset = "0x13412AC", VA = "0x13412AC", Slot = "11")]
	public virtual void MigrateData()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0x1341AB8", Offset = "0x1341AB8", VA = "0x1341AB8")]
	protected Dictionary<string, TextItem> FindTextItems()
	{
		return null;
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x1342064", Offset = "0x1342064", VA = "0x1342064", Slot = "12")]
	protected virtual void AddCSVDataItems(Dictionary<string, TextItem> textItems, string csvData)
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x13423EC", Offset = "0x13423EC", VA = "0x13423EC")]
	public static string GetLocalizedString(string stringId)
	{
		return null;
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x1342508", Offset = "0x1342508", VA = "0x1342508", Slot = "18")]
	public virtual void ClearLocalizeableCache()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x1342558", Offset = "0x1342558", VA = "0x1342558", Slot = "19")]
	public virtual string GetCSVData()
	{
		return null;
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x1342DEC", Offset = "0x1342DEC", VA = "0x1342DEC", Slot = "20")]
	public virtual void SetActiveLanguage(string languageCode, bool forceUpdateSceneText = false)
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x13431C8", Offset = "0x13431C8", VA = "0x13431C8", Slot = "21")]
	public virtual bool PopulateTextProperty(string stringId, string newText)
	{
		return default(bool);
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x13432FC", Offset = "0x13432FC", VA = "0x13432FC", Slot = "22")]
	public virtual string GetStandardText()
	{
		return null;
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x13435D0", Offset = "0x13435D0", VA = "0x13435D0", Slot = "23")]
	public virtual void SetStandardText(string textData)
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x1343818", Offset = "0x1343818", VA = "0x1343818", Slot = "24")]
	public virtual bool SubstituteStrings(StringBuilder input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x13439D4", Offset = "0x13439D4", VA = "0x13439D4")]
	public BartixLocalization()
	{
	}
}
[Token(Token = "0x2000195")]
public enum SayDialogueHeightTypes
{
	[Token(Token = "0x40005C7")]
	NONE = 0,
	[Token(Token = "0x40005C8")]
	LOW = 1,
	[Token(Token = "0x40005C9")]
	MEDIUM = 2,
	[Token(Token = "0x40005CA")]
	HIGH = 3,
	[Token(Token = "0x40005CB")]
	CUSTOM = 101
}
[Serializable]
[Token(Token = "0x2000196")]
public struct SayDialogHeightData
{
	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public SayDialogueHeightTypes type;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 position;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 rotation;
}
[Token(Token = "0x2000197")]
public class Screenshot : MonoBehaviour
{
	[Token(Token = "0x600073C")]
	[Address(RVA = "0x1343B30", Offset = "0x1343B30", VA = "0x1343B30")]
	private void Update()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x1343BAC", Offset = "0x1343BAC", VA = "0x1343BAC")]
	public Screenshot()
	{
	}
}
[Token(Token = "0x2000198")]
[DefaultExecutionOrder(-1000)]
public class GameTime : MonoBehaviour
{
	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MultiplicativeFloatStat multiplier;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool adjustFixedDeltaTime;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float slowmotionMultiplier;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startFixedDeltaTime;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TweenerCore<float, float, FloatOptions> tween;

	[Token(Token = "0x600073E")]
	[Address(RVA = "0x1343BB4", Offset = "0x1343BB4", VA = "0x1343BB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x1343BC4", Offset = "0x1343BC4", VA = "0x1343BC4")]
	public void OnMultiplierChanged()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x1343C28", Offset = "0x1343C28", VA = "0x1343C28")]
	public void AnimateMultiplier(float value, float duration)
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x1343E00", Offset = "0x1343E00", VA = "0x1343E00")]
	public void ResetTime()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x1343E3C", Offset = "0x1343E3C", VA = "0x1343E3C")]
	public GameTime()
	{
	}
}
[Token(Token = "0x2000199")]
public class BasicCharacterDetector : CustomCharacterDetector
{
	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[Header("Characted Detector")]
	public bool IsGroundObject;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TagFilter detectedTags;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onEnter;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onStay;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onExit;

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x1343E6C", Offset = "0x1343E6C", VA = "0x1343E6C", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0x1343ED8", Offset = "0x1343ED8", VA = "0x1343ED8", Slot = "5")]
	protected override void ProcessStayAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0x1343F04", Offset = "0x1343F04", VA = "0x1343F04", Slot = "6")]
	protected override void ProcessExitAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x1343F30", Offset = "0x1343F30", VA = "0x1343F30")]
	protected bool HasCharacterTag(CharacterActor characterActor, bool acceptIfEmpty = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x1343F98", Offset = "0x1343F98", VA = "0x1343F98")]
	protected bool CheckGround(CharacterActor characterActor)
	{
		return default(bool);
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x1343E98", Offset = "0x1343E98", VA = "0x1343E98")]
	protected bool IsDetectable(CharacterActor characterActor)
	{
		return default(bool);
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x1344040", Offset = "0x1344040", VA = "0x1344040")]
	public BasicCharacterDetector()
	{
	}
}
[Token(Token = "0x200019A")]
public class CharacterTeleporter : MonoBehaviour
{
	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CharacterActorBase characterActor;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetTransform;

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x1344170", Offset = "0x1344170", VA = "0x1344170")]
	public void Teleport()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x13443D0", Offset = "0x13443D0", VA = "0x13443D0")]
	public CharacterTeleporter()
	{
	}
}
[Token(Token = "0x200019B")]
public class CircularTransformBounds : MonoBehaviour
{
	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float _radius;

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x13443D8", Offset = "0x13443D8", VA = "0x13443D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x13443DC", Offset = "0x13443DC", VA = "0x13443DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x13443E0", Offset = "0x13443E0", VA = "0x13443E0")]
	public CircularTransformBounds()
	{
	}
}
[Token(Token = "0x200019C")]
public class CollisionExtendedCharacterDetector : ExtendedCharacterDetector
{
	[Token(Token = "0x6000752")]
	[Address(RVA = "0x13443F0", Offset = "0x13443F0", VA = "0x13443F0")]
	private void OnCollisionEnter(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x13444BC", Offset = "0x13444BC", VA = "0x13444BC")]
	private void OnCollisionStay(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x13445B0", Offset = "0x13445B0", VA = "0x13445B0")]
	private void OnCollisionExit(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x134467C", Offset = "0x134467C", VA = "0x134467C")]
	public CollisionExtendedCharacterDetector()
	{
	}
}
[Token(Token = "0x200019D")]
public class ExtendedCharacterDetector : BasicCharacterDetector
{
	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Collider Events")]
	public ColliderEvent onEnterCollider;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Collider Events")]
	public ColliderEvent onStayCollider;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Collider Events")]
	public ColliderEvent onExitCollider;

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x1344684", Offset = "0x1344684", VA = "0x1344684", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x1344740", Offset = "0x1344740", VA = "0x1344740", Slot = "5")]
	protected override void ProcessStayAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x13447FC", Offset = "0x13447FC", VA = "0x13447FC", Slot = "6")]
	protected override void ProcessExitAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x1344680", Offset = "0x1344680", VA = "0x1344680")]
	public ExtendedCharacterDetector()
	{
	}
}
[Token(Token = "0x200019E")]
[ExecuteInEditMode]
public class FaceCamera : MonoBehaviour
{
	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DebugReport;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 cameraDir;

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x13448B8", Offset = "0x13448B8", VA = "0x13448B8")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x1344DC8", Offset = "0x1344DC8", VA = "0x1344DC8")]
	public FaceCamera()
	{
	}
}
[Token(Token = "0x200019F")]
[ExecuteInEditMode]
public class MatchOrientation : MonoBehaviour
{
	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool TrackInEditor;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ReferenceObj;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 oldPos;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 pos;

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x1344DD0", Offset = "0x1344DD0", VA = "0x1344DD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x1344DD4", Offset = "0x1344DD4", VA = "0x1344DD4")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x1344E54", Offset = "0x1344E54", VA = "0x1344E54")]
	public MatchOrientation()
	{
	}
}
[Token(Token = "0x20001A0")]
public class MatrixCharacterDetector : BasicCharacterDetector
{
	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Matrix")]
	protected BasicCharacterDetector[] columns;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected BasicCharacterDetector[] rows;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Header("Areas")]
	protected MatrixDetectorArea[] areas;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int _row;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int _column;

	[Token(Token = "0x170000BA")]
	public int Row
	{
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x134519C", Offset = "0x134519C", VA = "0x134519C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x13451A4", Offset = "0x13451A4", VA = "0x13451A4")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000BB")]
	public int Column
	{
		[Token(Token = "0x6000762")]
		[Address(RVA = "0x13451FC", Offset = "0x13451FC", VA = "0x13451FC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1345204", Offset = "0x1345204", VA = "0x1345204")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000BC")]
	protected MatrixDetectorArea Area
	{
		[Token(Token = "0x6000764")]
		[Address(RVA = "0x134520C", Offset = "0x134520C", VA = "0x134520C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x1345214", Offset = "0x1345214", VA = "0x1345214")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0x1344EC8", Offset = "0x1344EC8", VA = "0x1344EC8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0x13451AC", Offset = "0x13451AC", VA = "0x13451AC")]
	protected void UpdatePosition()
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0x134521C", Offset = "0x134521C", VA = "0x134521C")]
	private MatrixDetectorArea GetCurrentArea()
	{
		return null;
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x1344ECC", Offset = "0x1344ECC", VA = "0x1344ECC")]
	protected void SetupMatrix()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x134555C", Offset = "0x134555C", VA = "0x134555C")]
	protected void EnteredColumn(int index)
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x1345564", Offset = "0x1345564", VA = "0x1345564")]
	protected void EnteredRow(int index)
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x134556C", Offset = "0x134556C", VA = "0x134556C")]
	public MatrixCharacterDetector()
	{
	}
}
[Serializable]
[Token(Token = "0x20001A3")]
public class MatrixDetectorArea
{
	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Takes sum of the areas created by rows and columns")]
	public bool sumSet;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Min(0f)]
	[UnityEngine.Tooltip("The Lower number the more important.")]
	public int priority;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Area")]
	public List<int> columns;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<int> rows;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onEnter;

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x13452C8", Offset = "0x13452C8", VA = "0x13452C8")]
	public bool Contains(int column, int row)
	{
		return default(bool);
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x13455C8", Offset = "0x13455C8", VA = "0x13455C8")]
	public MatrixDetectorArea()
	{
	}
}
[Token(Token = "0x20001A5")]
public class MothGrabListener : MonoBehaviour
{
	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onMothGrabStart;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onMothGrabStop;

	[Token(Token = "0x6000779")]
	[Address(RVA = "0x13457AC", Offset = "0x13457AC", VA = "0x13457AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0x13458A0", Offset = "0x13458A0", VA = "0x13458A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0x1345994", Offset = "0x1345994", VA = "0x1345994")]
	protected void OnMothGrabStart()
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0x13459A8", Offset = "0x13459A8", VA = "0x13459A8")]
	protected void OnMothGrabStop()
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0x13459BC", Offset = "0x13459BC", VA = "0x13459BC")]
	public MothGrabListener()
	{
	}
}
[Token(Token = "0x20001A6")]
public class ParticleCharacterDetector : ExtendedCharacterDetector
{
	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Colliders")]
	public Collider[] colliders;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool enemies;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool player;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	[Space(10f)]
	public bool debug;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<ParticleSystem.Particle> insideList;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ParticleSystem ps;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ParticleSystem.TriggerModule triggerModule;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool wasInArea;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	private bool useCollidersData;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Collider> currentColliders;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<Collider> previousColliders;

	[Token(Token = "0x600077E")]
	[Address(RVA = "0x13459C4", Offset = "0x13459C4", VA = "0x13459C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0x1345B18", Offset = "0x1345B18", VA = "0x1345B18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0x1345D68", Offset = "0x1345D68", VA = "0x1345D68")]
	private void OnParticleTrigger()
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0x1346248", Offset = "0x1346248", VA = "0x1346248")]
	public ParticleCharacterDetector()
	{
	}
}
[Token(Token = "0x20001A7")]
public class RandomRotation : MonoBehaviour
{
	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotSpeed;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float driftSpeed;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float randomSpinSpeed;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 randomDir;

	[Token(Token = "0x6000782")]
	[Address(RVA = "0x1346254", Offset = "0x1346254", VA = "0x1346254")]
	private void Start()
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0x1346288", Offset = "0x1346288", VA = "0x1346288")]
	private void Update()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x1346394", Offset = "0x1346394", VA = "0x1346394")]
	public RandomRotation()
	{
	}
}
[Token(Token = "0x20001A8")]
public class RotationConstraint : MonoBehaviour
{
	[Token(Token = "0x20001A9")]
	public enum ConstraintAxis
	{
		[Token(Token = "0x4000611")]
		X,
		[Token(Token = "0x4000612")]
		Y,
		[Token(Token = "0x4000613")]
		Z
	}

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ConstraintAxis axis;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float min;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float max;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform thisTransform;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 rotateAround;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Quaternion minQuaternion;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion maxQuaternion;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float range;

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x13463A4", Offset = "0x13463A4", VA = "0x13463A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x13466B0", Offset = "0x13466B0", VA = "0x13466B0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x13469E0", Offset = "0x13469E0", VA = "0x13469E0")]
	public RotationConstraint()
	{
	}
}
[Token(Token = "0x20001AA")]
[ExecuteInEditMode]
public class Rotator : MonoBehaviour
{
	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Rate;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool rotateVertically;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool rotateinEditor;

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x13469E8", Offset = "0x13469E8", VA = "0x13469E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x13469EC", Offset = "0x13469EC", VA = "0x13469EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x1346B04", Offset = "0x1346B04", VA = "0x1346B04")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x1346C24", Offset = "0x1346C24", VA = "0x1346C24")]
	public Rotator()
	{
	}
}
[Token(Token = "0x20001AB")]
public class SingleAxisDistanceCalculator : MonoBehaviour
{
	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Axis axis;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform source;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform target;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Min(0f)]
	public float maxDistance;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool clamp;

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x1346C3C", Offset = "0x1346C3C", VA = "0x1346C3C")]
	public float GetDistance()
	{
		return default(float);
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x1346EB4", Offset = "0x1346EB4", VA = "0x1346EB4")]
	public SingleAxisDistanceCalculator()
	{
	}
}
[Token(Token = "0x20001AC")]
public class GlyphProjector : MonoBehaviour
{
	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color canColor;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color cantColor;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public XRCastLineVisual lineVisual;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 offset;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Projector projector;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform trans;

	[Token(Token = "0x600078E")]
	[Address(RVA = "0x1346EBC", Offset = "0x1346EBC", VA = "0x1346EBC")]
	public void Init()
	{
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x1346F30", Offset = "0x1346F30", VA = "0x1346F30")]
	public void Enable(float radius)
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x1346F74", Offset = "0x1346F74", VA = "0x1346F74")]
	public void Disable()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x1346FA4", Offset = "0x1346FA4", VA = "0x1346FA4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x1346FE8", Offset = "0x1346FE8", VA = "0x1346FE8")]
	public GlyphProjector()
	{
	}
}
[Token(Token = "0x20001AD")]
public static class AnimationCurveExtensions
{
	[Token(Token = "0x20001AE")]
	[CompilerGenerated]
	private sealed class <GetPointSlopes>d__3 : IEnumerable<float>, IEnumerable, IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimationCurve curve;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve <>3__curve;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int resolution;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int <>3__resolution;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <i>5__2;

		[Token(Token = "0x170000BD")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600079B")]
			[Address(RVA = "0x1348664", Offset = "0x1348664", VA = "0x1348664", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600079D")]
			[Address(RVA = "0x13486AC", Offset = "0x13486AC", VA = "0x13486AC", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x13485B0", Offset = "0x13485B0", VA = "0x13485B0")]
		[DebuggerHidden]
		public <GetPointSlopes>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x13485E4", Offset = "0x13485E4", VA = "0x13485E4", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x13485E8", Offset = "0x13485E8", VA = "0x13485E8", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x134866C", Offset = "0x134866C", VA = "0x134866C", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1348708", Offset = "0x1348708", VA = "0x1348708", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<float> System.Collections.Generic.IEnumerable<System.Single>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x13487BC", Offset = "0x13487BC", VA = "0x13487BC", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000622")]
	private const float Delta = 1E-06f;

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x1347004", Offset = "0x1347004", VA = "0x1347004")]
	public static float Differentiate(this AnimationCurve curve, float x)
	{
		return default(float);
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x1347100", Offset = "0x1347100", VA = "0x1347100")]
	public static float Differentiate(this AnimationCurve curve, float x, float xMin, float xMax)
	{
		return default(float);
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x134717C", Offset = "0x134717C", VA = "0x134717C")]
	[IteratorStateMachine(typeof(<GetPointSlopes>d__3))]
	private static IEnumerable<float> GetPointSlopes(AnimationCurve curve, int resolution)
	{
		return null;
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x1347200", Offset = "0x1347200", VA = "0x1347200")]
	public static AnimationCurve Derivative(this AnimationCurve curve, int resolution = 100, float smoothing = 0.05f)
	{
		return null;
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x1347504", Offset = "0x1347504", VA = "0x1347504")]
	public static float Integrate(this AnimationCurve curve, float xStart = 0f, float xEnd = 1f, int sliceCount = 100)
	{
		return default(float);
	}
}
[Token(Token = "0x20001B1")]
[Obsolete("Use UnityEventInvoker instead", false)]
public class AnimationEventInvoker : MonoBehaviour
{
	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AnimationEvent[] animationEvents;

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x1348878", Offset = "0x1348878", VA = "0x1348878", Slot = "4")]
	public virtual void InvokeEvent(string eventName)
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x134892C", Offset = "0x134892C", VA = "0x134892C")]
	public AnimationEventInvoker()
	{
	}
}
[Serializable]
[Token(Token = "0x20001B2")]
public struct AnimationEvent
{
	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string Name;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public UnityEvent Event;

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x1348918", Offset = "0x1348918", VA = "0x1348918")]
	public void InvokeAnimationEvent()
	{
	}
}
[Token(Token = "0x20001B3")]
public class BlendShapeEventInvoker : MonoBehaviour
{
	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected BlendShapeEventPair[] blendShapeEvents;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, int> blendShapesKeys;

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x1348934", Offset = "0x1348934", VA = "0x1348934")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x1348A48", Offset = "0x1348A48", VA = "0x1348A48")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x1348938", Offset = "0x1348938", VA = "0x1348938")]
	private void SetupBlendShapesDictionary()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x1348B18", Offset = "0x1348B18", VA = "0x1348B18")]
	private float BlendShapeValue(string blendShapeName)
	{
		return default(float);
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x1348C50", Offset = "0x1348C50", VA = "0x1348C50", Slot = "4")]
	public virtual void InvokeEvent(string eventKey)
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x1348D18", Offset = "0x1348D18", VA = "0x1348D18")]
	public BlendShapeEventInvoker()
	{
	}
}
[Serializable]
[Token(Token = "0x20001B4")]
public class BlendShapeEventPair
{
	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string BlendShapeName;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ActivationThreshold;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent Event;

	[Token(Token = "0x170000BF")]
	public bool ThresholdReached
	{
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x1348D20", Offset = "0x1348D20", VA = "0x1348D20")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x1348D28", Offset = "0x1348D28", VA = "0x1348D28")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x1348D04", Offset = "0x1348D04", VA = "0x1348D04")]
	public void Invoke()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x1348D34", Offset = "0x1348D34", VA = "0x1348D34")]
	public BlendShapeEventPair()
	{
	}
}
[Token(Token = "0x20001B5")]
public class BoxColliderGizmos : MonoBehaviour
{
	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x1348D3C", Offset = "0x1348D3C", VA = "0x1348D3C")]
	public BoxColliderGizmos()
	{
	}
}
[Token(Token = "0x20001B6")]
[AttributeUsage(AttributeTargets.Field)]
public class ConditionalFieldAttribute : PropertyAttribute
{
	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string FieldToCheck;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string[] CompareValues;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public readonly bool Inverse;

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x1348D44", Offset = "0x1348D44", VA = "0x1348D44")]
	public ConditionalFieldAttribute(string fieldToCheck, bool inverse = false, params object[] compareValues)
	{
	}
}
[Token(Token = "0x20001B8")]
public class DollyTrackVisual : MonoBehaviour
{
	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool show;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool cameraView;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 combatSize;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 MovementSize;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 enviroSize;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CinemachineSmoothPath path;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CinemachineSmoothPath cameraPath;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Vector3 offset;

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x1348F4C", Offset = "0x1348F4C", VA = "0x1348F4C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x1349434", Offset = "0x1349434", VA = "0x1349434")]
	public DollyTrackVisual()
	{
	}
}
[Token(Token = "0x20001B9")]
public class EasyDecalDisabler : MonoBehaviour
{
	[Token(Token = "0x20001BA")]
	[CompilerGenerated]
	private sealed class <DisableRoutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EasyDecalDisabler <>4__this;

		[Token(Token = "0x170000C0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007C3")]
			[Address(RVA = "0x1349B9C", Offset = "0x1349B9C", VA = "0x1349B9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007C5")]
			[Address(RVA = "0x1349BE4", Offset = "0x1349BE4", VA = "0x1349BE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x134993C", Offset = "0x134993C", VA = "0x134993C")]
		[DebuggerHidden]
		public <DisableRoutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x13499A8", Offset = "0x13499A8", VA = "0x13499A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x13499AC", Offset = "0x13499AC", VA = "0x13499AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x1349BA4", Offset = "0x1349BA4", VA = "0x1349BA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001BB")]
	[CompilerGenerated]
	private sealed class <EnableRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EasyDecalDisabler <>4__this;

		[Token(Token = "0x170000C2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007C9")]
			[Address(RVA = "0x1349DBC", Offset = "0x1349DBC", VA = "0x1349DBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007CB")]
			[Address(RVA = "0x1349E04", Offset = "0x1349E04", VA = "0x1349E04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x1349964", Offset = "0x1349964", VA = "0x1349964")]
		[DebuggerHidden]
		public <EnableRoutine>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x1349BEC", Offset = "0x1349BEC", VA = "0x1349BEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x1349BF0", Offset = "0x1349BF0", VA = "0x1349BF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x1349DC4", Offset = "0x1349DC4", VA = "0x1349DC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool findChildrenEasyDecals;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadeOutTime;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeInTime;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool disableThisObject;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public EasyDecal[] easyDecals;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onEnable;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onDisable;

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x1349474", Offset = "0x1349474", VA = "0x1349474")]
	public void Awake()
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x134962C", Offset = "0x134962C", VA = "0x134962C")]
	[ContextMenu("DisableDecals")]
	public void DisableDecals()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x1349854", Offset = "0x1349854", VA = "0x1349854")]
	[ContextMenu("EnableDecals")]
	public void EnableDecals()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x13497E0", Offset = "0x13497E0", VA = "0x13497E0")]
	[IteratorStateMachine(typeof(<DisableRoutine>d__10))]
	public IEnumerator DisableRoutine()
	{
		return null;
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x13498C8", Offset = "0x13498C8", VA = "0x13498C8")]
	[IteratorStateMachine(typeof(<EnableRoutine>d__11))]
	public IEnumerator EnableRoutine()
	{
		return null;
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x13496A4", Offset = "0x13496A4", VA = "0x13496A4")]
	private void SetObjectsActive(bool areActive = true)
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x134998C", Offset = "0x134998C", VA = "0x134998C")]
	public EasyDecalDisabler()
	{
	}
}
[Token(Token = "0x20001BC")]
public class EnemySummoner : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001BD")]
	private struct EnemyHolder
	{
		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EnemyConfig Enemy;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform PreviewModel;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<EnemyConfig> EnemyVariants;
	}

	[Serializable]
	[Token(Token = "0x20001BE")]
	private struct EnemySummonButtonKit
	{
		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform Parent;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ButtonBase Button;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshPro ButtonText;
	}

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool instantiateModel;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EnemyHolder _currentEnemy;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _currentEnemyIndex;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform _currentModel;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private StandaloneEnemyPoolSpawner spawner;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<EnemyHolder> enemies;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private EnemySummonButtonKit standardButton;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<EnemySummonButtonKit> variantButtons;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform previewModelPosition;

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x1349E0C", Offset = "0x1349E0C", VA = "0x1349E0C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x1349F60", Offset = "0x1349F60", VA = "0x1349F60")]
	public void SetupEnemy(int index)
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x134A478", Offset = "0x134A478", VA = "0x134A478")]
	public void SetupNext()
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x134A4D4", Offset = "0x134A4D4", VA = "0x134A4D4")]
	public void SetupPrevious()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x134A4E8", Offset = "0x134A4E8", VA = "0x134A4E8")]
	public EnemySummoner()
	{
	}
}
[Token(Token = "0x20001C0")]
public class FixedRotation : MonoBehaviour
{
	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion initRotation;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform trans;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool local;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 startRotation;

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x134A5C4", Offset = "0x134A5C4", VA = "0x134A5C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x134A6C8", Offset = "0x134A6C8", VA = "0x134A6C8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x134A700", Offset = "0x134A700", VA = "0x134A700")]
	public FixedRotation()
	{
	}
}
[Token(Token = "0x20001C1")]
public static class LayerMaskExtensions
{
	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x134A708", Offset = "0x134A708", VA = "0x134A708")]
	public static bool Contains(this LayerMask layers, GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x134A758", Offset = "0x134A758", VA = "0x134A758")]
	public static int LayermaskToLayer(int bitmask)
	{
		return default(int);
	}
}
[Token(Token = "0x20001C2")]
public class LookAtTarget : MonoBehaviour
{
	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float damping;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool onlyY;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform trans;

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x134A784", Offset = "0x134A784", VA = "0x134A784")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x134A7A8", Offset = "0x134A7A8", VA = "0x134A7A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x134A8C0", Offset = "0x134A8C0", VA = "0x134A8C0")]
	public LookAtTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C3")]
public struct PriorityUniqueQueue<T>
{
	[Token(Token = "0x20001C4")]
	private struct PrioritizedObject<T1>
	{
		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T1 value;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int priority;

		[Token(Token = "0x60007E5")]
		public PrioritizedObject(T1 value, int priority = 0)
		{
		}
	}

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<PrioritizedObject<T>> objList;

	[Token(Token = "0x60007DC")]
	public PriorityUniqueQueue([Optional] List<T> initialObjects, int initialObjectsPriority = 0)
	{
	}

	[Token(Token = "0x60007DD")]
	public T Peek()
	{
		return (T)null;
	}

	[Token(Token = "0x60007DE")]
	public bool IsEmpty()
	{
		return default(bool);
	}

	[Token(Token = "0x60007DF")]
	public bool Contains(T obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60007E0")]
	public int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60007E1")]
	public bool Enqueue(T obj, int priority = 0)
	{
		return default(bool);
	}

	[Token(Token = "0x60007E2")]
	public T Dequeue()
	{
		return (T)null;
	}

	[Token(Token = "0x60007E3")]
	public bool Remove(T obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60007E4")]
	public void Clear()
	{
	}
}
[Token(Token = "0x20001C8")]
public class RandomStateSMB : StateMachineBehaviour
{
	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int numberOfStates;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float minNormTime;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxNormTime;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected float m_RandomNormTime;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly int m_HashRandomIdle;

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x134A8D0", Offset = "0x134A8D0", VA = "0x134A8D0", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x134A8F0", Offset = "0x134A8F0", VA = "0x134A8F0", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x134A9FC", Offset = "0x134A9FC", VA = "0x134A9FC")]
	public RandomStateSMB()
	{
	}
}
[Token(Token = "0x20001C9")]
public class ReliableOnTriggerExit : MonoBehaviour
{
	[Token(Token = "0x20001CA")]
	public delegate void _OnTriggerExit(Collider c);

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider thisCollider;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool ignoreNotifyTriggerExit;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<GameObject, _OnTriggerExit> waitingForOnTriggerExit;

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x134AA64", Offset = "0x134AA64", VA = "0x134AA64")]
	public static void NotifyTriggerEnter(Collider c, GameObject caller, _OnTriggerExit onTriggerExit)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x134AC98", Offset = "0x134AC98", VA = "0x134AC98")]
	public static void NotifyTriggerExit(Collider c, GameObject caller)
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x134AE50", Offset = "0x134AE50", VA = "0x134AE50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x134B098", Offset = "0x134B098", VA = "0x134B098")]
	private void Update()
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x134AE88", Offset = "0x134AE88", VA = "0x134AE88")]
	private void CallCallbacks()
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x134B154", Offset = "0x134B154", VA = "0x134B154")]
	public ReliableOnTriggerExit()
	{
	}
}
[Token(Token = "0x20001CB")]
public class RigidbodyDelayedForce : MonoBehaviour
{
	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 forceToAdd;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxAngularVelocity;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxForceVelocity;

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x134B358", Offset = "0x134B358", VA = "0x134B358")]
	public void AddForce()
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x134B4B4", Offset = "0x134B4B4", VA = "0x134B4B4")]
	public RigidbodyDelayedForce()
	{
	}
}
[Token(Token = "0x20001CC")]
public class SkinnedMeshSwapper : MonoBehaviour
{
	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkinnedMeshRenderer targetRenderer;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool swapOnEnable;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool resetOnDisable;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("SkinnedMesh Config")]
	public Transform rootBone;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform[] oldBones;

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x134B4C8", Offset = "0x134B4C8", VA = "0x134B4C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x134B5B8", Offset = "0x134B5B8", VA = "0x134B5B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x134B884", Offset = "0x134B884", VA = "0x134B884")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x134B5C8", Offset = "0x134B5C8", VA = "0x134B5C8")]
	[ContextMenu("SwapSkinnedMesh")]
	public void SwapSkinnedMesh()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x134B894", Offset = "0x134B894", VA = "0x134B894")]
	public void ResetSkinnedMesh()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x134B9AC", Offset = "0x134B9AC", VA = "0x134B9AC")]
	public SkinnedMeshSwapper()
	{
	}
}
[Token(Token = "0x20001CD")]
public class SphereColliderGizmos : MonoBehaviour
{
	[Token(Token = "0x6000801")]
	[Address(RVA = "0x134B9B4", Offset = "0x134B9B4", VA = "0x134B9B4")]
	public SphereColliderGizmos()
	{
	}
}
[Serializable]
[Token(Token = "0x20001CE")]
public struct TagFilter
{
	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private List<string> tags;

	[Token(Token = "0x170000C4")]
	public int Count
	{
		[Token(Token = "0x6000802")]
		[Address(RVA = "0x134B9BC", Offset = "0x134B9BC", VA = "0x134B9BC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x134BA04", Offset = "0x134BA04", VA = "0x134BA04")]
	public TagFilter([Optional] List<string> tags)
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x134BA88", Offset = "0x134BA88", VA = "0x134BA88")]
	public static bool operator ==(TagFilter tag1, TagFilter tag2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x134BC1C", Offset = "0x134BC1C", VA = "0x134BC1C")]
	public static bool operator !=(TagFilter tag1, TagFilter tag2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x134BC34", Offset = "0x134BC34", VA = "0x134BC34")]
	public bool Has(string tag)
	{
		return default(bool);
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x134BD4C", Offset = "0x134BD4C", VA = "0x134BD4C")]
	public void Add(string tag)
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x134BDFC", Offset = "0x134BDFC", VA = "0x134BDFC")]
	public void Remove(string tag)
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x134BE54", Offset = "0x134BE54", VA = "0x134BE54")]
	public void Clear()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D1")]
public class TargetScanner
{
	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float heightOffset;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float detectionRadius;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 360f)]
	public float detectionAngle;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxHeightDifference;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask targetLayerMask;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask viewBlockerLayerMask;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool checkBlockers;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Collider[] hits;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform player;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject playerObject;

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x134BF40", Offset = "0x134BF40", VA = "0x134BF40")]
	public XRCharacter Detect(Transform detector, bool useHeightDifference = true)
	{
		return null;
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x134C5A4", Offset = "0x134C5A4", VA = "0x134C5A4")]
	public GameObject Detect(Transform detector, Vector3 position, bool useHeightDifference = true, bool checkNavmesh = true, int agentType = 0, float radius = 0.2f, bool projectToNavmesh = false)
	{
		return null;
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x134CC90", Offset = "0x134CC90", VA = "0x134CC90")]
	public GameObject DetectAll(Transform detector, Vector3 position, bool useHeightDifference = true, bool checkNavmesh = true, int agentType = 0, float radius = 0.2f, bool projectToNavmesh = false)
	{
		return null;
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x134D4B0", Offset = "0x134D4B0", VA = "0x134D4B0")]
	public TargetScanner()
	{
	}
}
[Token(Token = "0x20001D2")]
public class UnityEventInvoker : MonoBehaviour
{
	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected UnityEventPair[] unityEvents;

	[Token(Token = "0x6000812")]
	[Address(RVA = "0x134D528", Offset = "0x134D528", VA = "0x134D528", Slot = "4")]
	public virtual void InvokeEvent(string eventKey)
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0x134D5E8", Offset = "0x134D5E8", VA = "0x134D5E8")]
	public UnityEventInvoker()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D3")]
public struct UnityEventPair
{
	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string Key;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public UnityEvent Event;

	[Token(Token = "0x6000814")]
	[Address(RVA = "0x134D5D4", Offset = "0x134D5D4", VA = "0x134D5D4")]
	public void Invoke()
	{
	}
}
[Token(Token = "0x20001D4")]
[RequireComponent(typeof(VideoPlayer))]
public class VideoPlayerLoopHelper : MonoBehaviour
{
	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x134D5F0", Offset = "0x134D5F0", VA = "0x134D5F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x134D6AC", Offset = "0x134D6AC", VA = "0x134D6AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x134D7A0", Offset = "0x134D7A0", VA = "0x134D7A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x134D894", Offset = "0x134D894", VA = "0x134D894")]
	private void OnErrorReceived(VideoPlayer source, string msg)
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x134D8EC", Offset = "0x134D8EC", VA = "0x134D8EC")]
	private void OnLoopPointReached(VideoPlayer source)
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x134D898", Offset = "0x134D898", VA = "0x134D898")]
	[ContextMenu("Restart Video")]
	public void RestartVideo()
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x134D8F0", Offset = "0x134D8F0", VA = "0x134D8F0")]
	public VideoPlayerLoopHelper()
	{
	}
}
[Token(Token = "0x20001D5")]
public class ActivateEvents : MonoBehaviour
{
	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onEnable;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onDisable;

	[Token(Token = "0x600081C")]
	[Address(RVA = "0x134D8F8", Offset = "0x134D8F8", VA = "0x134D8F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x134D90C", Offset = "0x134D90C", VA = "0x134D90C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x134D920", Offset = "0x134D920", VA = "0x134D920")]
	public ActivateEvents()
	{
	}
}
[Token(Token = "0x20001D6")]
public class MellowingSpikeBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent _onMellowing;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent _onHarshening;

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x134D928", Offset = "0x134D928", VA = "0x134D928")]
	public void Mellow()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x134D93C", Offset = "0x134D93C", VA = "0x134D93C")]
	public void Harsh()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0x134D950", Offset = "0x134D950", VA = "0x134D950")]
	public MellowingSpikeBehaviour()
	{
	}
}
[Token(Token = "0x20001D7")]
public class MellowingSpikesController : MonoBehaviour
{
	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MellowingSpikeBehaviour[] _mellowingSpikes;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Collider[] _spikesDamagers;

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x134D958", Offset = "0x134D958", VA = "0x134D958")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x134D9C0", Offset = "0x134D9C0", VA = "0x134D9C0")]
	public void MellowSpikes()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x134DB24", Offset = "0x134DB24", VA = "0x134DB24")]
	public void HarshSpikes()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0x134DC88", Offset = "0x134DC88", VA = "0x134DC88")]
	public MellowingSpikesController()
	{
	}
}
[Token(Token = "0x20001D8")]
public class AlchemyIntervalInteractable : MonoBehaviour
{
	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyModificationReceiver alchemyReceiver;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageModificationReceiver receiver;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ModificationScriptableObject modification;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Collider collider;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public XRBaseInteractable interactable;

	[Token(Token = "0x6000826")]
	[Address(RVA = "0x134DC90", Offset = "0x134DC90", VA = "0x134DC90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0x134DE6C", Offset = "0x134DE6C", VA = "0x134DE6C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x134DF70", Offset = "0x134DF70", VA = "0x134DF70")]
	private void OnAlchemyAdded(ModificationScriptableObject newModification)
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x134E044", Offset = "0x134E044", VA = "0x134E044")]
	private void OnAlchemyRemoved(ModificationScriptableObject newModification)
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x134DF74", Offset = "0x134DF74", VA = "0x134DF74")]
	private void Activate()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x134DD9C", Offset = "0x134DD9C", VA = "0x134DD9C")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x134E048", Offset = "0x134E048", VA = "0x134E048")]
	private void Shoot(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x134E0DC", Offset = "0x134E0DC", VA = "0x134E0DC")]
	public AlchemyIntervalInteractable()
	{
	}
}
[Token(Token = "0x20001D9")]
public class BaseInteractible : MonoBehaviour
{
	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useInteractAction;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool checkGameplayInteractionState;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool onlyWhenGrounded;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool resetWhenInteractionEnabled;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Events")]
	public UnityEvent onInteract;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onShowInteraction;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onHideInteraction;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool playerEnter;

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x134E0E4", Offset = "0x134E0E4", VA = "0x134E0E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x134E1E0", Offset = "0x134E1E0", VA = "0x134E1E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x134E2E4", Offset = "0x134E2E4", VA = "0x134E2E4")]
	private void OnInteractPressed()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x134E2F0", Offset = "0x134E2F0", VA = "0x134E2F0", Slot = "4")]
	public virtual void OnInteract()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x134E31C", Offset = "0x134E31C", VA = "0x134E31C", Slot = "5")]
	public virtual void OnInteractWithCheck()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x134E350", Offset = "0x134E350", VA = "0x134E350", Slot = "6")]
	public virtual void ShowInteraction()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x134E444", Offset = "0x134E444", VA = "0x134E444", Slot = "7")]
	public virtual void HideInteraction()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x134E538", Offset = "0x134E538", VA = "0x134E538", Slot = "8")]
	public virtual void OnPlayerEnter()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x134E610", Offset = "0x134E610", VA = "0x134E610", Slot = "9")]
	public virtual void OnPlayerExit()
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x134E6BC", Offset = "0x134E6BC", VA = "0x134E6BC")]
	private void OnInteractionDisabled()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x134E6C8", Offset = "0x134E6C8", VA = "0x134E6C8")]
	private void OnInteractionEnabled()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x134E6E8", Offset = "0x134E6E8", VA = "0x134E6E8", Slot = "10")]
	protected virtual bool CanInteract()
	{
		return default(bool);
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x134E7C8", Offset = "0x134E7C8", VA = "0x134E7C8")]
	public BaseInteractible()
	{
	}
}
[Token(Token = "0x20001DA")]
public class ButtonBase : MonoBehaviour
{
	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public UnityEvent OnActivate;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public UnityEvent OnDeactivate;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public UnityEvent OnToggle;

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x134E7D8", Offset = "0x134E7D8", VA = "0x134E7D8", Slot = "4")]
	[ContextMenu("Activate")]
	public virtual void Activate()
	{
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x134E80C", Offset = "0x134E80C", VA = "0x134E80C", Slot = "5")]
	[ContextMenu("Deactivate")]
	public virtual void Deactivate()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x134E840", Offset = "0x134E840", VA = "0x134E840")]
	public ButtonBase()
	{
	}
}
[Token(Token = "0x20001DB")]
public class Checkpoint : MonoBehaviour
{
	[Token(Token = "0x20001DC")]
	[CompilerGenerated]
	private sealed class <CheckpointReloadablesRoutine>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Checkpoint <>4__this;

		[Token(Token = "0x170000CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000853")]
			[Address(RVA = "0x134F15C", Offset = "0x134F15C", VA = "0x134F15C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000855")]
			[Address(RVA = "0x134F1A4", Offset = "0x134F1A4", VA = "0x134F1A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x134EFFC", Offset = "0x134EFFC", VA = "0x134EFFC")]
		[DebuggerHidden]
		public <CheckpointReloadablesRoutine>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x134F038", Offset = "0x134F038", VA = "0x134F038", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x134F03C", Offset = "0x134F03C", VA = "0x134F03C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x134F164", Offset = "0x134F164", VA = "0x134F164", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform resetPosition;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem[] signLights;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MeshRenderer[] lights;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private EasyDecal[] decals;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool resetDamage;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Events")]
	[SerializeField]
	private UnityEvent onCheckpointReached;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UnityEvent onCheckpointReloaded;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private UnityEvent onLevelRestart;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private CheckpointReloadableBase[] reloadables;

	[Token(Token = "0x170000C5")]
	public bool WasReached
	{
		[Token(Token = "0x600083E")]
		[Address(RVA = "0x134E848", Offset = "0x134E848", VA = "0x134E848")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600083F")]
		[Address(RVA = "0x134E850", Offset = "0x134E850", VA = "0x134E850")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000C6")]
	public CinemachineVirtualCamera Camera
	{
		[Token(Token = "0x6000840")]
		[Address(RVA = "0x134E85C", Offset = "0x134E85C", VA = "0x134E85C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000841")]
		[Address(RVA = "0x134E864", Offset = "0x134E864", VA = "0x134E864")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000C7")]
	public bool ResetDollyOnReload
	{
		[Token(Token = "0x6000842")]
		[Address(RVA = "0x134E86C", Offset = "0x134E86C", VA = "0x134E86C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000843")]
		[Address(RVA = "0x134E874", Offset = "0x134E874", VA = "0x134E874")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000C8")]
	public CheckpointType CheckpointType
	{
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x134E880", Offset = "0x134E880", VA = "0x134E880")]
		[CompilerGenerated]
		get
		{
			return default(CheckpointType);
		}
		[Token(Token = "0x6000845")]
		[Address(RVA = "0x134E888", Offset = "0x134E888", VA = "0x134E888")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000C9")]
	private bool FindReloadablesInChildren
	{
		[Token(Token = "0x6000846")]
		[Address(RVA = "0x134E890", Offset = "0x134E890", VA = "0x134E890")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000847")]
		[Address(RVA = "0x134E898", Offset = "0x134E898", VA = "0x134E898")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000CA")]
	public CheckpointReloadableBase[] Reloadables
	{
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x134E8A4", Offset = "0x134E8A4", VA = "0x134E8A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0x134E8AC", Offset = "0x134E8AC", VA = "0x134E8AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x134EAFC", Offset = "0x134EAFC", VA = "0x134EAFC")]
	public void Activate()
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0x134E98C", Offset = "0x134E98C", VA = "0x134E98C")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x134EC84", Offset = "0x134EC84", VA = "0x134EC84")]
	public void OnCheckpointReached()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x134EED8", Offset = "0x134EED8", VA = "0x134EED8")]
	public void ReloadCheckpoint(bool levelRestart = false)
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x134EF88", Offset = "0x134EF88", VA = "0x134EF88")]
	[IteratorStateMachine(typeof(<CheckpointReloadablesRoutine>d__36))]
	private IEnumerator CheckpointReloadablesRoutine()
	{
		return null;
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x134F024", Offset = "0x134F024", VA = "0x134F024")]
	public Checkpoint()
	{
	}
}
[Serializable]
[Token(Token = "0x20001DD")]
public enum CheckpointType
{
	[Token(Token = "0x40006BC")]
	Default = 0,
	[Token(Token = "0x40006BD")]
	Teleport = 10,
	[Token(Token = "0x40006BE")]
	Invisible = 11,
	[Token(Token = "0x40006BF")]
	InvisibleWithoutSave = 101
}
[Token(Token = "0x20001DE")]
public abstract class CheckpointReloadableBase : MonoBehaviour
{
	[Token(Token = "0x6000856")]
	public abstract void OnCheckpointReloaded();

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x134F1AC", Offset = "0x134F1AC", VA = "0x134F1AC")]
	protected CheckpointReloadableBase()
	{
	}
}
[Token(Token = "0x20001DF")]
public class CheckpointReloadableBehaviour : CheckpointReloadableBase
{
	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onCheckpointReloaded;

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x134F1B4", Offset = "0x134F1B4", VA = "0x134F1B4", Slot = "4")]
	[ContextMenu("OnCheckpointReloaded")]
	public override void OnCheckpointReloaded()
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x134F1C8", Offset = "0x134F1C8", VA = "0x134F1C8")]
	public CheckpointReloadableBehaviour()
	{
	}
}
[Token(Token = "0x20001E0")]
public class DestructibleBox : ShatteredInteractible, IMessageReceiver
{
	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Collider coll;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject lights;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Damageable damageable;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float defaultForce;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private Vector3 defaultDirection;

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x134F1D0", Offset = "0x134F1D0", VA = "0x134F1D0")]
	protected void Start()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x134F300", Offset = "0x134F300", VA = "0x134F300", Slot = "4")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x134F6AC", Offset = "0x134F6AC", VA = "0x134F6AC", Slot = "7")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x134FD8C", Offset = "0x134FD8C", VA = "0x134FD8C")]
	[ContextMenu("DefaultDestruct")]
	public void DefaultDestruct()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x134FD98", Offset = "0x134FD98", VA = "0x134FD98")]
	public void DefaultDestructWithForce(float pushForce)
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x134FC6C", Offset = "0x134FC6C", VA = "0x134FC6C")]
	private void DestructChunks(float pushForce, Vector3 direction)
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x134FE9C", Offset = "0x134FE9C", VA = "0x134FE9C", Slot = "6")]
	public override void ResetToSolid()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x13500C0", Offset = "0x13500C0", VA = "0x13500C0")]
	public DestructibleBox()
	{
	}
}
[Token(Token = "0x20001E1")]
public class EnemyBouncerAura : MonoBehaviour
{
	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hideOnStart;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool hideOnUpdate;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject bigSphere;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject smallSphere;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float showDuration;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool isBig;

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x1350174", Offset = "0x1350174", VA = "0x1350174")]
	private void Start()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x13501A0", Offset = "0x13501A0", VA = "0x13501A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x1350248", Offset = "0x1350248", VA = "0x1350248")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x13501B0", Offset = "0x13501B0", VA = "0x13501B0")]
	[ContextMenu("Bounce")]
	public void Bounce()
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x1350250", Offset = "0x1350250", VA = "0x1350250")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x1350288", Offset = "0x1350288", VA = "0x1350288")]
	public EnemyBouncerAura()
	{
	}
}
[Token(Token = "0x20001E2")]
public class HealtOrbInteractible : MonoBehaviour
{
	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int value;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int easyDifficultyValue;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool destroy;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem[] particles;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform head;

	[Token(Token = "0x170000CD")]
	public int HealingValue
	{
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x13502A8", Offset = "0x13502A8", VA = "0x13502A8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x1350344", Offset = "0x1350344", VA = "0x1350344", Slot = "4")]
	public virtual void Exec()
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x1350434", Offset = "0x1350434", VA = "0x1350434", Slot = "5")]
	protected virtual void DisableParticles()
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x135068C", Offset = "0x135068C", VA = "0x135068C")]
	public HealtOrbInteractible()
	{
	}
}
[Token(Token = "0x20001E3")]
public class HedgehogHealthOrb : MonoBehaviour
{
	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem[] particles;

	[Token(Token = "0x170000CE")]
	public Transform Target
	{
		[Token(Token = "0x600086C")]
		[Address(RVA = "0x13506A0", Offset = "0x13506A0", VA = "0x13506A0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600086D")]
		[Address(RVA = "0x13506A8", Offset = "0x13506A8", VA = "0x13506A8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000CF")]
	public FollowTarget Follower
	{
		[Token(Token = "0x600086E")]
		[Address(RVA = "0x13506B0", Offset = "0x13506B0", VA = "0x13506B0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600086F")]
		[Address(RVA = "0x13506B8", Offset = "0x13506B8", VA = "0x13506B8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000D0")]
	public bool FollowOnEnable
	{
		[Token(Token = "0x6000870")]
		[Address(RVA = "0x13506C0", Offset = "0x13506C0", VA = "0x13506C0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x13506C8", Offset = "0x13506C8", VA = "0x13506C8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public float FollowTime
	{
		[Token(Token = "0x6000872")]
		[Address(RVA = "0x13506D4", Offset = "0x13506D4", VA = "0x13506D4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000873")]
		[Address(RVA = "0x13506DC", Offset = "0x13506DC", VA = "0x13506DC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000D2")]
	public float DisposeDelay
	{
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x13506E4", Offset = "0x13506E4", VA = "0x13506E4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000875")]
		[Address(RVA = "0x13506EC", Offset = "0x13506EC", VA = "0x13506EC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x13506F4", Offset = "0x13506F4", VA = "0x13506F4")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x135077C", Offset = "0x135077C", VA = "0x135077C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x1350780", Offset = "0x1350780", VA = "0x1350780")]
	public void Follow(bool follow)
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x1350818", Offset = "0x1350818", VA = "0x1350818")]
	public void Hide()
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x1350824", Offset = "0x1350824", VA = "0x1350824")]
	public void Dispose()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x1350870", Offset = "0x1350870", VA = "0x1350870")]
	public void AnimateHeal()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0x1350900", Offset = "0x1350900", VA = "0x1350900", Slot = "4")]
	protected virtual void DisableParticles()
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0x1350828", Offset = "0x1350828", VA = "0x1350828")]
	protected void DisposeOrb()
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0x1350AC0", Offset = "0x1350AC0", VA = "0x1350AC0")]
	public HedgehogHealthOrb()
	{
	}
}
[Token(Token = "0x20001E4")]
[RequireComponent(typeof(Rigidbody))]
public class HittableRigidbody : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float pushForceFactor;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxPushForce;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Use Activate() and Deactivate() to change with event invoking")]
	private bool isActive;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[UnityEngine.Tooltip("Use Property MaxDepenetrationVelocity during runtime")]
	private float _maxDepenetrationVelocity;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onActivate;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onDeactivate;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onHit;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onHitWhileInactive;

	[Token(Token = "0x170000D3")]
	public bool IsActive
	{
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x1350AC8", Offset = "0x1350AC8", VA = "0x1350AC8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x1350AD0", Offset = "0x1350AD0", VA = "0x1350AD0")]
		set
		{
		}
	}

	[Token(Token = "0x170000D4")]
	public float MaxDepenetrationVelocity
	{
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x1350ADC", Offset = "0x1350ADC", VA = "0x1350ADC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x1350AE4", Offset = "0x1350AE4", VA = "0x1350AE4")]
		set
		{
		}
	}

	[Token(Token = "0x170000D5")]
	public float PushForceFactor
	{
		[Token(Token = "0x6000886")]
		[Address(RVA = "0x1350C9C", Offset = "0x1350C9C", VA = "0x1350C9C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x1350CA4", Offset = "0x1350CA4", VA = "0x1350CA4")]
		set
		{
		}
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x1350BDC", Offset = "0x1350BDC", VA = "0x1350BDC")]
	[ContextMenu("Activate")]
	public void Activate()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x1350C04", Offset = "0x1350C04", VA = "0x1350C04")]
	[ContextMenu("Deactivate")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x1350C28", Offset = "0x1350C28", VA = "0x1350C28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x1350CAC", Offset = "0x1350CAC", VA = "0x1350CAC", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x1350F08", Offset = "0x1350F08", VA = "0x1350F08")]
	public void UnblockRigidbody()
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x1350CF0", Offset = "0x1350CF0", VA = "0x1350CF0")]
	public void HitRigidbody(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x1350F28", Offset = "0x1350F28", VA = "0x1350F28")]
	public HittableRigidbody()
	{
	}
}
[Token(Token = "0x20001E5")]
public class Inscription : MonoBehaviour
{
	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string inscriptionKey;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject inscriptionResult;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject collider;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent onRecognizedKey;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isDecoded;

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x1350F44", Offset = "0x1350F44", VA = "0x1350F44")]
	private void Awake()
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0x1350F48", Offset = "0x1350F48", VA = "0x1350F48")]
	public void Activate()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x1351034", Offset = "0x1351034", VA = "0x1351034")]
	private void OnRecognized(string name)
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x13510A8", Offset = "0x13510A8", VA = "0x13510A8")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x135116C", Offset = "0x135116C", VA = "0x135116C")]
	public Inscription()
	{
	}
}
[Token(Token = "0x20001E6")]
public class JumpInteractible : MonoBehaviour
{
	[Token(Token = "0x20001E7")]
	public enum DirectionType
	{
		[Token(Token = "0x40006EA")]
		UP,
		[Token(Token = "0x40006EB")]
		FORWARD
	}

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float jumpPower;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool add;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DirectionType direction;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool disableOnUse;

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x1351174", Offset = "0x1351174", VA = "0x1351174")]
	public void OnJump()
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x1351250", Offset = "0x1351250", VA = "0x1351250")]
	private Vector3 GetDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x1351288", Offset = "0x1351288", VA = "0x1351288")]
	public JumpInteractible()
	{
	}
}
[Token(Token = "0x20001E8")]
public class JumpWallInteractible : WallInteractible
{
	[Token(Token = "0x20001E9")]
	public enum JumpType
	{
		[Token(Token = "0x40006EF")]
		Small,
		[Token(Token = "0x40006F0")]
		Middle,
		[Token(Token = "0x40006F1")]
		High
	}

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Transform origin;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected JumpType type;

	[Token(Token = "0x170000D6")]
	public JumpType Type
	{
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x13512A0", Offset = "0x13512A0", VA = "0x13512A0")]
		get
		{
			return default(JumpType);
		}
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x13512A8", Offset = "0x13512A8", VA = "0x13512A8")]
	public JumpWallInteractible()
	{
	}
}
[Token(Token = "0x20001EA")]
public class LockableJumpPad : BasicCharacterDetector
{
	[Token(Token = "0x20001EB")]
	[CompilerGenerated]
	private sealed class <IntervalLock>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LockableJumpPad <>4__this;

		[Token(Token = "0x170000D8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008A4")]
			[Address(RVA = "0x1351C20", Offset = "0x1351C20", VA = "0x1351C20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008A6")]
			[Address(RVA = "0x1351C68", Offset = "0x1351C68", VA = "0x1351C68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x1351A24", Offset = "0x1351A24", VA = "0x1351A24")]
		[DebuggerHidden]
		public <IntervalLock>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x1351AFC", Offset = "0x1351AFC", VA = "0x1351AFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x1351B00", Offset = "0x1351B00", VA = "0x1351B00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x1351C28", Offset = "0x1351C28", VA = "0x1351C28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Jump Pad")]
	public float jumpVelocity;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool locked;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool additiveForce;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool repeatOnStay;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float jumpMinimalInterval;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Animation")]
	public Animator jumpPadAnimator;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly int standingHash;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private readonly int jumpHash;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private IEnumerator _intervalLockCoroutine;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _jumpIntervalLock;

	[Token(Token = "0x170000D7")]
	private bool JumpIntervalLock
	{
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x13512E0", Offset = "0x13512E0", VA = "0x13512E0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000897")]
		[Address(RVA = "0x13512E8", Offset = "0x13512E8", VA = "0x13512E8")]
		set
		{
		}
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0x13512F4", Offset = "0x13512F4", VA = "0x13512F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0x13512FC", Offset = "0x13512FC", VA = "0x13512FC", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0x13518A0", Offset = "0x13518A0", VA = "0x13518A0", Slot = "6")]
	protected override void ProcessExitAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0x1351950", Offset = "0x1351950", VA = "0x1351950", Slot = "5")]
	protected override void ProcessStayAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0x13513D8", Offset = "0x13513D8", VA = "0x13513D8")]
	protected void Jump(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x13519B0", Offset = "0x13519B0", VA = "0x13519B0")]
	[IteratorStateMachine(typeof(<IntervalLock>d__18))]
	private IEnumerator IntervalLock()
	{
		return null;
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x1351A4C", Offset = "0x1351A4C", VA = "0x1351A4C")]
	public void Lock()
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x1351A58", Offset = "0x1351A58", VA = "0x1351A58")]
	public void Unlock()
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0x1351A60", Offset = "0x1351A60", VA = "0x1351A60")]
	public LockableJumpPad()
	{
	}
}
[Token(Token = "0x20001EC")]
public class LookTarget : MonoBehaviour
{
	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float distance;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float angle;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onBecameVisible;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onStayVisible;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onBecameInvisible;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isVisible;

	[Token(Token = "0x170000DA")]
	public bool IsVisible
	{
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x1351C70", Offset = "0x1351C70", VA = "0x1351C70")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0x1351C78", Offset = "0x1351C78", VA = "0x1351C78")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0x1351EEC", Offset = "0x1351EEC", VA = "0x1351EEC")]
	public LookTarget()
	{
	}
}
[Token(Token = "0x20001ED")]
public class MultiDestructibleBox : MonoBehaviour
{
	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private DestructibleBox[] boxes;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onCutCompleted;

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x1351F00", Offset = "0x1351F00", VA = "0x1351F00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0x1351FDC", Offset = "0x1351FDC", VA = "0x1351FDC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x13520B8", Offset = "0x13520B8", VA = "0x13520B8")]
	private void TestCompleted()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x1352120", Offset = "0x1352120", VA = "0x1352120")]
	public MultiDestructibleBox()
	{
	}
}
[Token(Token = "0x20001EE")]
public class OnEnableEvent : MonoBehaviour
{
	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onEnable;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onDisable;

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x1352128", Offset = "0x1352128", VA = "0x1352128")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x135213C", Offset = "0x135213C", VA = "0x135213C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0x1352150", Offset = "0x1352150", VA = "0x1352150")]
	public OnEnableEvent()
	{
	}
}
[Token(Token = "0x20001EF")]
public class OnPauseEvent : MonoBehaviour
{
	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onPause;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onResume;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onDashPause;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onDashResume;

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0x1352158", Offset = "0x1352158", VA = "0x1352158")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0x13522D4", Offset = "0x13522D4", VA = "0x13522D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0x1352450", Offset = "0x1352450", VA = "0x1352450")]
	private void OnPause()
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0x1352464", Offset = "0x1352464", VA = "0x1352464")]
	private void OnResume()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x1352478", Offset = "0x1352478", VA = "0x1352478")]
	private void OnDashPause()
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x135248C", Offset = "0x135248C", VA = "0x135248C")]
	private void OnDashResume()
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x13524A0", Offset = "0x13524A0", VA = "0x13524A0")]
	public OnPauseEvent()
	{
	}
}
[Token(Token = "0x20001F0")]
public class PhysicsInteractableBase : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidbody;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float _pushForceFactor;

	[Token(Token = "0x170000DB")]
	public float PushForceFactor
	{
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x13524A8", Offset = "0x13524A8", VA = "0x13524A8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x13524B0", Offset = "0x13524B0", VA = "0x13524B0")]
		set
		{
		}
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x13524B8", Offset = "0x13524B8", VA = "0x13524B8", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x1352684", Offset = "0x1352684", VA = "0x1352684")]
	public void UnblockRigidbody()
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x13526A4", Offset = "0x13526A4", VA = "0x13526A4")]
	public PhysicsInteractableBase()
	{
	}
}
[Token(Token = "0x20001F1")]
public abstract class SimpleTransformer : MonoBehaviour
{
	[Token(Token = "0x20001F2")]
	public enum LoopType
	{
		[Token(Token = "0x4000720")]
		Once,
		[Token(Token = "0x4000721")]
		PingPong,
		[Token(Token = "0x4000722")]
		Repeat,
		[Token(Token = "0x4000723")]
		OncePingPing
	}

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LoopType loopType;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onStartMovement;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onStopMovement;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onLoopOnceFinished;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float duration;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve accelCurve;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _activate;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public StudioEventEmitter startAudio;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public StudioEventEmitter endAudio;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public StudioEventEmitter loopAudio;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Range(0f, 1f)]
	public float previewPosition;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected float time;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected float position;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected float prevPosition;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected bool moveUp;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Platform m_Platform;

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x13526B4", Offset = "0x13526B4", VA = "0x13526B4", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0x135270C", Offset = "0x135270C", VA = "0x135270C")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x13527D8", Offset = "0x13527D8", VA = "0x13527D8")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x1352898", Offset = "0x1352898", VA = "0x1352898")]
	[ContextMenu("PerformInteraction")]
	public void PerformInteraction()
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x13528A8", Offset = "0x13528A8", VA = "0x13528A8")]
	[ContextMenu("PerformInteractionWithoutReset")]
	public void PerformInteractionWithoutReset()
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x13528B4", Offset = "0x13528B4", VA = "0x13528B4")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x1352B24", Offset = "0x1352B24", VA = "0x1352B24", Slot = "5")]
	public virtual void PerformTransform(float position)
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x1352A28", Offset = "0x1352A28", VA = "0x1352A28")]
	private void LoopPingPong()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x1352A6C", Offset = "0x1352A6C", VA = "0x1352A6C")]
	private void LoopRepeat()
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x1352A94", Offset = "0x1352A94", VA = "0x1352A94")]
	private void LoopOncePingPong()
	{
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x13529C8", Offset = "0x13529C8", VA = "0x13529C8")]
	private void LoopOnce()
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x1352B28", Offset = "0x1352B28", VA = "0x1352B28")]
	protected SimpleTransformer()
	{
	}
}
[Token(Token = "0x20001F3")]
public class SimpleTranslator : SimpleTransformer
{
	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Rigidbody rigidbody;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Vector3 start;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Vector3 end;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool _reveresed;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool startEnableState;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 startCachePosition;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 endCachePosition;

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x1352B40", Offset = "0x1352B40", VA = "0x1352B40", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x1352B88", Offset = "0x1352B88", VA = "0x1352B88")]
	private void MoveToPosition(Vector3 position)
	{
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0x1352BA4", Offset = "0x1352BA4", VA = "0x1352BA4")]
	private Vector3 EvaluatePosition(float position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0x1352C28", Offset = "0x1352C28", VA = "0x1352C28", Slot = "5")]
	public override void PerformTransform(float position)
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0x1352E04", Offset = "0x1352E04", VA = "0x1352E04")]
	[ContextMenu("PerformInteractionWithReverse")]
	public void PerformInteractionWithReverse()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0x1352EA0", Offset = "0x1352EA0", VA = "0x1352EA0")]
	[ContextMenu("Reverse")]
	public void Reverse()
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x1352F5C", Offset = "0x1352F5C", VA = "0x1352F5C")]
	public void ResetTranslator()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0x1352FA4", Offset = "0x1352FA4", VA = "0x1352FA4")]
	[ContextMenu("Move To Start Position")]
	public void MoveToStartPosition()
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0x1352FCC", Offset = "0x1352FCC", VA = "0x1352FCC")]
	[ContextMenu("Move To End Position")]
	public void MoveToEndPosition()
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0x1352FF4", Offset = "0x1352FF4", VA = "0x1352FF4")]
	public SimpleTranslator()
	{
	}
}
[Token(Token = "0x20001F4")]
public class Platform : MonoBehaviour
{
	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layers;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected CharacterController m_CharacterController;

	[Token(Token = "0x400072D")]
	private const float k_SqrMaxCharacterMovement = 0.1f;

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x13530C8", Offset = "0x13530C8", VA = "0x13530C8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x13531B0", Offset = "0x13531B0", VA = "0x13531B0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x1352D2C", Offset = "0x1352D2C", VA = "0x1352D2C")]
	public void MoveCharacterController(Vector3 deltaPosition)
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x13532D0", Offset = "0x13532D0", VA = "0x13532D0")]
	public Platform()
	{
	}
}
[Token(Token = "0x20001F5")]
public class PlayerRepulsiveCollider : MonoBehaviour
{
	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform repulsePushDirection;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float repulsePushForce;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool inflictDamage;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Min(0f)]
	public int repluseDamageAmount;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string playerTag;

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x13532D8", Offset = "0x13532D8", VA = "0x13532D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x1353338", Offset = "0x1353338", VA = "0x1353338")]
	private void RepulsePlayer()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x13533A8", Offset = "0x13533A8", VA = "0x13533A8")]
	private void RepulseDamage(Collider other)
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x13535F4", Offset = "0x13535F4", VA = "0x13535F4")]
	public PlayerRepulsiveCollider()
	{
	}
}
[Token(Token = "0x20001F6")]
public class PushInteractable : CustomCharacterDetector
{
	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float pushForce;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool resetCurrentForce;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("Additional configuration")]
	public Axis customPushRelativeAxis;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool repeatOnStayAction;

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x135364C", Offset = "0x135364C", VA = "0x135364C", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x1353710", Offset = "0x1353710", VA = "0x1353710", Slot = "5")]
	protected override void ProcessStayAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x13536AC", Offset = "0x13536AC", VA = "0x13536AC")]
	protected Vector3 GetPushDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x1353728", Offset = "0x1353728", VA = "0x1353728", Slot = "7")]
	protected virtual void AddForceToCharacter(CharacterActor characterActor, Vector3 force, bool forceNotGrounded = true)
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0x1353808", Offset = "0x1353808", VA = "0x1353808")]
	public PushInteractable()
	{
	}
}
[Token(Token = "0x20001F7")]
public class RustInteractible : MonoBehaviour
{
	[Token(Token = "0x20001F8")]
	[CompilerGenerated]
	private sealed class <DamagerCoroutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RustInteractible <>4__this;

		[Token(Token = "0x170000DC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008EA")]
			[Address(RVA = "0x1353E50", Offset = "0x1353E50", VA = "0x1353E50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008EC")]
			[Address(RVA = "0x1353E98", Offset = "0x1353E98", VA = "0x1353E98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x13539F4", Offset = "0x13539F4", VA = "0x13539F4")]
		[DebuggerHidden]
		public <DamagerCoroutine>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x1353CFC", Offset = "0x1353CFC", VA = "0x1353CFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x1353D00", Offset = "0x1353D00", VA = "0x1353D00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x1353E58", Offset = "0x1353E58", VA = "0x1353E58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int amount;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(1f, 10f)]
	public float force;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float interval;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Coroutine coroutine;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool collideWithPlayer;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float currentValue;

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x1353820", Offset = "0x1353820", VA = "0x1353820")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x1353830", Offset = "0x1353830", VA = "0x1353830")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x1353874", Offset = "0x1353874", VA = "0x1353874")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x1353980", Offset = "0x1353980", VA = "0x1353980")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x135390C", Offset = "0x135390C", VA = "0x135390C")]
	[IteratorStateMachine(typeof(<DamagerCoroutine>d__11))]
	private IEnumerator DamagerCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x1353A1C", Offset = "0x1353A1C", VA = "0x1353A1C")]
	private void TakeDamage()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x1353CDC", Offset = "0x1353CDC", VA = "0x1353CDC")]
	public RustInteractible()
	{
	}
}
[Token(Token = "0x20001F9")]
public class BossWobbleRockBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnSpawn;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnDestruct;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _throwTarget;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Min(1f)]
	[UnityEngine.Tooltip("Units per Seconds")]
	public float ThrowVelocity;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float ThrowPower;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float TargetRelativeVelocity;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnTargetHit;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private BossWobbleRockHolder _bossWobbleRockHolder;

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x1353EA0", Offset = "0x1353EA0", VA = "0x1353EA0")]
	public void SetHolder(BossWobbleRockHolder bossWobbleRockHolder)
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x1353EA8", Offset = "0x1353EA8", VA = "0x1353EA8")]
	private bool isHolderSet()
	{
		return default(bool);
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x1353FB0", Offset = "0x1353FB0", VA = "0x1353FB0")]
	public void SetThrowTarget(Transform throwTarget)
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x13540B8", Offset = "0x13540B8", VA = "0x13540B8")]
	public void ThrowAtTarget()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x13546E8", Offset = "0x13546E8", VA = "0x13546E8")]
	public void Spawn()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x1354808", Offset = "0x1354808", VA = "0x1354808")]
	public void Destruct()
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x135490C", Offset = "0x135490C", VA = "0x135490C")]
	public BossWobbleRockBehaviour()
	{
	}
}
[Token(Token = "0x20001FA")]
public class BossWobbleRockHolder : MonoBehaviour
{
	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BossWobbleRockBehaviour RockPrefab;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform StartPosition;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BossWobbleRockBehaviour _currentTargetRock;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnSpawn;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnDestruct;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform ThrowTarget;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent OnTargetHit;

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x1354954", Offset = "0x1354954", VA = "0x1354954")]
	public void Spawn()
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0x1354AA4", Offset = "0x1354AA4", VA = "0x1354AA4")]
	public void Destruct()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x1354ABC", Offset = "0x1354ABC", VA = "0x1354ABC")]
	public void ThrowAtTarget()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x1354AD4", Offset = "0x1354AD4", VA = "0x1354AD4")]
	public BossWobbleRockHolder()
	{
	}
}
[Token(Token = "0x20001FB")]
public class ShaterredPooling : ShatteredInteractible
{
	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x1354ADC", Offset = "0x1354ADC", VA = "0x1354ADC", Slot = "5")]
	protected override void OnCutCompleted()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x1354B34", Offset = "0x1354B34", VA = "0x1354B34")]
	public ShaterredPooling()
	{
	}
}
[Token(Token = "0x20001FC")]
public class ShatteredInteractible : MonoBehaviour
{
	[Token(Token = "0x20001FD")]
	[CompilerGenerated]
	private sealed class <CutCoroutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShatteredInteractible <>4__this;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 direction;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float force;

		[Token(Token = "0x170000E1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600090F")]
			[Address(RVA = "0x1355504", Offset = "0x1355504", VA = "0x1355504", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000911")]
			[Address(RVA = "0x135554C", Offset = "0x135554C", VA = "0x135554C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x1355088", Offset = "0x1355088", VA = "0x1355088")]
		[DebuggerHidden]
		public <CutCoroutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x1355294", Offset = "0x1355294", VA = "0x1355294", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x1355298", Offset = "0x1355298", VA = "0x1355298", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x135550C", Offset = "0x135550C", VA = "0x135550C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Selected parent will be automatically activated and deactivated on Cut.")]
	protected GameObject solidParent;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected ShateredChunk[] chunks;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected float cuttingDuration;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	protected float scaleDelay;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected bool disableOnCompleted;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	protected bool random;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected float force;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onCut;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onCutCompleted;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onCutAnimationCompleted;

	[Token(Token = "0x170000DE")]
	public bool HideParentOnShatter
	{
		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x1354B5C", Offset = "0x1354B5C", VA = "0x1354B5C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x1354B64", Offset = "0x1354B64", VA = "0x1354B64")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000DF")]
	public bool ShowParentOnReset
	{
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x1354B70", Offset = "0x1354B70", VA = "0x1354B70")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x1354B78", Offset = "0x1354B78", VA = "0x1354B78")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000E0")]
	public bool IsDestroyed
	{
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x1354B84", Offset = "0x1354B84", VA = "0x1354B84")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000900")]
		[Address(RVA = "0x1354B8C", Offset = "0x1354B8C", VA = "0x1354B8C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0x1354B98", Offset = "0x1354B98", VA = "0x1354B98")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0x1354C50", Offset = "0x1354C50", VA = "0x1354C50", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0x134FAA4", Offset = "0x134FAA4", VA = "0x134FAA4")]
	public void CutChunk(int index, Vector3 direction, float force)
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0x134FDE8", Offset = "0x134FDE8", VA = "0x134FDE8")]
	public void CutAll(Vector3 direction, float force)
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x1354FEC", Offset = "0x1354FEC", VA = "0x1354FEC")]
	[IteratorStateMachine(typeof(<CutCoroutine>d__26))]
	protected IEnumerator CutCoroutine(Vector3 direction, float force)
	{
		return null;
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0x13550B0", Offset = "0x13550B0", VA = "0x13550B0", Slot = "5")]
	protected virtual void OnCutCompleted()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x1355104", Offset = "0x1355104", VA = "0x1355104")]
	[ContextMenu("Create Chunks")]
	public void CreateChunks()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0x1354F24", Offset = "0x1354F24", VA = "0x1354F24")]
	private void SolidToSchatter()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0x134FFD0", Offset = "0x134FFD0", VA = "0x134FFD0", Slot = "6")]
	public virtual void ResetToSolid()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0x135528C", Offset = "0x135528C", VA = "0x135528C")]
	public void SetCuttingDelay(float value)
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0x135014C", Offset = "0x135014C", VA = "0x135014C")]
	public ShatteredInteractible()
	{
	}
}
[Serializable]
[Token(Token = "0x20001FE")]
public class ShateredChunk
{
	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Rigidbody rigid;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool disableGravity;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[HideInInspector]
	public bool isAnimate;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 startPosition;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startRotation;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 startScale;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private TweenerCore<Vector3, Vector3, VectorOptions> tween;

	[Token(Token = "0x170000E3")]
	public bool IsActive
	{
		[Token(Token = "0x6000916")]
		[Address(RVA = "0x134FA94", Offset = "0x134FA94", VA = "0x134FA94")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x1354BF4", Offset = "0x1354BF4", VA = "0x1354BF4")]
	public void Init()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x134F50C", Offset = "0x134F50C", VA = "0x134F50C")]
	public void RestartChunk(bool show)
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0x1354D74", Offset = "0x1354D74", VA = "0x1354D74")]
	public void CutChunk(Vector3 force, float duration, float delay)
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x1354D44", Offset = "0x1354D44", VA = "0x1354D44")]
	public void ToggleVisibility(bool show)
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x135527C", Offset = "0x135527C", VA = "0x135527C")]
	public ShateredChunk()
	{
	}
}
[Token(Token = "0x20001FF")]
public class SlideArea : MonoBehaviour
{
	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform SlideDirection;

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x135555C", Offset = "0x135555C", VA = "0x135555C")]
	public Vector3 GetSlideDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x13555E4", Offset = "0x13555E4", VA = "0x13555E4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x1355788", Offset = "0x1355788", VA = "0x1355788")]
	public SlideArea()
	{
	}
}
[Token(Token = "0x2000200")]
public class TriggerEnter : MonoBehaviour, IPlayerRespawnListener
{
	[Serializable]
	[Token(Token = "0x2000201")]
	public class TriggerEvent : UnityEvent<Collider>
	{
		[Token(Token = "0x6000923")]
		[Address(RVA = "0x1355ACC", Offset = "0x1355ACC", VA = "0x1355ACC")]
		public TriggerEvent()
		{
		}
	}

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onEnter;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onStay;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onExit;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TriggerEvent onEnterCollider;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TriggerEvent onStayCollider;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TriggerEvent onExitCollider;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public new string tag;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool disableOnEnter;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool pushExitOnDisable;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	public bool checkLayer;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public LayerMask includeLayers;

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x1355790", Offset = "0x1355790", VA = "0x1355790")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x13557AC", Offset = "0x13557AC", VA = "0x13557AC", Slot = "4")]
	public void OnPlayerRespawn()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x13557B0", Offset = "0x13557B0", VA = "0x13557B0")]
	public void ResetTrigger()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x1355818", Offset = "0x1355818", VA = "0x1355818", Slot = "5")]
	protected virtual void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x1355948", Offset = "0x1355948", VA = "0x1355948", Slot = "6")]
	protected virtual void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x1355A28", Offset = "0x1355A28", VA = "0x1355A28", Slot = "7")]
	protected virtual void OnTriggerStay(Collider collider)
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x1355AC4", Offset = "0x1355AC4", VA = "0x1355AC4")]
	public TriggerEnter()
	{
	}
}
[Token(Token = "0x2000202")]
public class WallClimbInteractible : WallInteractible
{
	[Token(Token = "0x6000924")]
	[Address(RVA = "0x1355B14", Offset = "0x1355B14", VA = "0x1355B14")]
	public WallClimbInteractible()
	{
	}
}
[Token(Token = "0x2000203")]
public class WallInteractible : MonoBehaviour
{
	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected float forwardOffset;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	protected float verticalOffset;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Direction facingDirection;

	[Token(Token = "0x170000E4")]
	public float ForwardOffset
	{
		[Token(Token = "0x6000925")]
		[Address(RVA = "0x1355B30", Offset = "0x1355B30", VA = "0x1355B30")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000E5")]
	public float VerticalOffset
	{
		[Token(Token = "0x6000926")]
		[Address(RVA = "0x1355B38", Offset = "0x1355B38", VA = "0x1355B38")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000E6")]
	public Vector3 FacingDirectionVector
	{
		[Token(Token = "0x6000927")]
		[Address(RVA = "0x1355B40", Offset = "0x1355B40", VA = "0x1355B40")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0x13512C4", Offset = "0x13512C4", VA = "0x13512C4")]
	public WallInteractible()
	{
	}
}
[Token(Token = "0x2000204")]
public class WindInteractible : MonoBehaviour
{
	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform forward;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float force;

	[Token(Token = "0x6000929")]
	[Address(RVA = "0x1355C3C", Offset = "0x1355C3C", VA = "0x1355C3C")]
	public void Push()
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0x1355CAC", Offset = "0x1355CAC", VA = "0x1355CAC")]
	public WindInteractible()
	{
	}
}
[Token(Token = "0x2000205")]
public class WindPushInteractable : PushInteractable
{
	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Header("Wind configuration")]
	protected CapsuleCollider capsuleCollider;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve normalForceCurve;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float orthogonalPushForce;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool preventVerticalOrthogonalPushForce;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationCurve normalOrthogonalForceCurve;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected bool forceNotGroundedWhilePush;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 ortaghonalCharacterVector;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEvent OnEnter;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEvent OnExit;

	[Token(Token = "0x170000E7")]
	public bool IsCharacterInWind
	{
		[Token(Token = "0x600092B")]
		[Address(RVA = "0x1355CBC", Offset = "0x1355CBC", VA = "0x1355CBC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600092C")]
		[Address(RVA = "0x1355CC4", Offset = "0x1355CC4", VA = "0x1355CC4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E8")]
	public float CurrentForce
	{
		[Token(Token = "0x600092D")]
		[Address(RVA = "0x1355CD0", Offset = "0x1355CD0", VA = "0x1355CD0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600092E")]
		[Address(RVA = "0x1355CD8", Offset = "0x1355CD8", VA = "0x1355CD8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E9")]
	public float CurrentOrthagonalForce
	{
		[Token(Token = "0x600092F")]
		[Address(RVA = "0x1355CE0", Offset = "0x1355CE0", VA = "0x1355CE0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000930")]
		[Address(RVA = "0x1355CE8", Offset = "0x1355CE8", VA = "0x1355CE8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x1355CF0", Offset = "0x1355CF0", VA = "0x1355CF0", Slot = "8")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x1355DE0", Offset = "0x1355DE0", VA = "0x1355DE0", Slot = "4")]
	protected override void ProcessEnterAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x13564E0", Offset = "0x13564E0", VA = "0x13564E0", Slot = "6")]
	protected override void ProcessExitAction(CharacterActor characterActor)
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x13563B8", Offset = "0x13563B8", VA = "0x13563B8")]
	protected float GetWindForceAtPosition(Vector3 globalPosition)
	{
		return default(float);
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x1356290", Offset = "0x1356290", VA = "0x1356290")]
	protected float GetOrthagonalWindForceAtPosition(Vector3 globalPosition)
	{
		return default(float);
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x1356558", Offset = "0x1356558", VA = "0x1356558")]
	private Vector3 GetWindSource()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x1355F98", Offset = "0x1355F98", VA = "0x1355F98")]
	protected void CalculateOrtaghonalCharacterVector(Vector3 globalPosition)
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x13566AC", Offset = "0x13566AC", VA = "0x13566AC")]
	public WindPushInteractable()
	{
	}
}
[Token(Token = "0x2000206")]
public class JellyClickReceiver : MonoBehaviour
{
	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RaycastHit hit;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Ray clickRay;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Renderer modelRenderer;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float controlTime;

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x1356720", Offset = "0x1356720", VA = "0x1356720")]
	private void Start()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x1356724", Offset = "0x1356724", VA = "0x1356724")]
	private void Update()
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x13568CC", Offset = "0x13568CC", VA = "0x13568CC")]
	public JellyClickReceiver()
	{
	}
}
[Token(Token = "0x2000207")]
public class CombatManager : ManagerBase
{
	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<EnemyBehaviour> _enemies;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<EnemyBehaviour> _engagedEnemies;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PriorityUniqueQueue<CombatGameState> _gameStateQueue;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CombatGameState _currentCombatGameState;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool _enemiesEngaged;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UnityEvent onCombatStateChange;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CombatGameState initialCombatState;

	[Token(Token = "0x170000EA")]
	public CombatGameState CurrentCombatState
	{
		[Token(Token = "0x600093C")]
		[Address(RVA = "0x13568D4", Offset = "0x13568D4", VA = "0x13568D4")]
		get
		{
			return default(CombatGameState);
		}
	}

	[Token(Token = "0x170000EB")]
	public List<EnemyZombieControllerBehaviour> EnemyZombieControllers
	{
		[Token(Token = "0x600093E")]
		[Address(RVA = "0x13568E4", Offset = "0x13568E4", VA = "0x13568E4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x13568EC", Offset = "0x13568EC", VA = "0x13568EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000EC")]
	public bool PlayerInCombat
	{
		[Token(Token = "0x600094C")]
		[Address(RVA = "0x1357DF0", Offset = "0x1357DF0", VA = "0x1357DF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x13568DC", Offset = "0x13568DC", VA = "0x13568DC")]
	public CombatGameState GetCurrentCombatState()
	{
		return default(CombatGameState);
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x13568F4", Offset = "0x13568F4", VA = "0x13568F4", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x1356BF4", Offset = "0x1356BF4", VA = "0x1356BF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x1356EE0", Offset = "0x1356EE0", VA = "0x1356EE0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0x1357210", Offset = "0x1357210", VA = "0x1357210")]
	private void RegisterEnemy(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0x1357394", Offset = "0x1357394", VA = "0x1357394")]
	private void UnregisterDefeatedEnemy(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0x13574BC", Offset = "0x13574BC", VA = "0x13574BC")]
	private void UnregisterEnemy(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x13575FC", Offset = "0x13575FC", VA = "0x13575FC")]
	private void EnemyEngaged(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0x135780C", Offset = "0x135780C", VA = "0x135780C")]
	private void EnemyDisengaged(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0x1357B88", Offset = "0x1357B88", VA = "0x1357B88")]
	private void EnemyDefeated(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0x1357B98", Offset = "0x1357B98", VA = "0x1357B98")]
	private void OnArenaStared(ArenaController arena)
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0x1357C60", Offset = "0x1357C60", VA = "0x1357C60")]
	private void OnArenaResetted(ArenaController arena)
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x1357D28", Offset = "0x1357D28", VA = "0x1357D28")]
	private void OnArenaCompleted(ArenaController arena)
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0x1357EF8", Offset = "0x1357EF8", VA = "0x1357EF8")]
	public void PauseCombat()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0x1357F64", Offset = "0x1357F64", VA = "0x1357F64")]
	public void ContinueCombat()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0x1357FD0", Offset = "0x1357FD0", VA = "0x1357FD0")]
	public EnemyBehaviour[] GetAllEnemies()
	{
		return null;
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0x1358020", Offset = "0x1358020", VA = "0x1358020")]
	public EnemyBehaviour[] GetEnemiesInCombat()
	{
		return null;
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0x1356A1C", Offset = "0x1356A1C", VA = "0x1356A1C")]
	public void ActivateState(CombatGameState state)
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x1357988", Offset = "0x1357988", VA = "0x1357988")]
	public void DeactivateState(CombatGameState state)
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x13577B4", Offset = "0x13577B4", VA = "0x13577B4")]
	public bool IsStateActive(CombatGameState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x13580A0", Offset = "0x13580A0", VA = "0x13580A0")]
	public void RegisterZombieController(EnemyZombieControllerBehaviour controller)
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x1358188", Offset = "0x1358188", VA = "0x1358188")]
	public void UnregisterZombieController(EnemyZombieControllerBehaviour controller)
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x1358218", Offset = "0x1358218", VA = "0x1358218")]
	public CombatManager()
	{
	}
}
[Token(Token = "0x2000209")]
public enum CombatGameState
{
	[Token(Token = "0x4000795")]
	None,
	[Token(Token = "0x4000796")]
	Standard,
	[Token(Token = "0x4000797")]
	Arena,
	[Token(Token = "0x4000798")]
	Boss
}
[Token(Token = "0x200020A")]
public class EmptyGameplaySceneManager : MonoBehaviour
{
	[Token(Token = "0x200020B")]
	[CompilerGenerated]
	private sealed class <ResetCamera>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EmptyGameplaySceneManager <>4__this;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x170000ED")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000961")]
			[Address(RVA = "0x1358930", Offset = "0x1358930", VA = "0x1358930", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000963")]
			[Address(RVA = "0x1358978", Offset = "0x1358978", VA = "0x1358978", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x1358620", Offset = "0x1358620", VA = "0x1358620")]
		[DebuggerHidden]
		public <ResetCamera>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x1358658", Offset = "0x1358658", VA = "0x1358658", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x135865C", Offset = "0x135865C", VA = "0x135865C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x1358938", Offset = "0x1358938", VA = "0x1358938", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float fadeDelay;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool fade;

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x13584A8", Offset = "0x13584A8", VA = "0x13584A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x135851C", Offset = "0x135851C", VA = "0x135851C")]
	private void Start()
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x13585AC", Offset = "0x13585AC", VA = "0x13585AC")]
	[IteratorStateMachine(typeof(<ResetCamera>d__4))]
	private IEnumerator ResetCamera()
	{
		return null;
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x1358648", Offset = "0x1358648", VA = "0x1358648")]
	public EmptyGameplaySceneManager()
	{
	}
}
[Token(Token = "0x200020C")]
public class GameplayManager : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x400079F")]
	[SerializeField]
	private const string PlayerRespawnEventFSM = "PLAYER RESPAWN";

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Checkpoint currentCheckpoint;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 playerStartPosition;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _onDeathRespawDelay;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameplayManager instance;

	[Token(Token = "0x170000EF")]
	public static GameplayManager Instance
	{
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x1358980", Offset = "0x1358980", VA = "0x1358980")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x1358A54", Offset = "0x1358A54", VA = "0x1358A54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x1358C10", Offset = "0x1358C10", VA = "0x1358C10")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x1358D4C", Offset = "0x1358D4C", VA = "0x1358D4C")]
	public void OnPlayerDie()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0x1358E14", Offset = "0x1358E14", VA = "0x1358E14")]
	public void CheckpointReached(Checkpoint checkpoint)
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0x1358EDC", Offset = "0x1358EDC", VA = "0x1358EDC")]
	public void ResetToCheckpoint(Vector3 position)
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x1359434", Offset = "0x1359434", VA = "0x1359434", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x1359068", Offset = "0x1359068", VA = "0x1359068")]
	private void CallPlayerRespawnListeners()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x1359444", Offset = "0x1359444", VA = "0x1359444")]
	public GameplayManager()
	{
	}
}
[Token(Token = "0x200020E")]
public class GameplayStatePushdownAutomata : MonoBehaviour
{
	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayMakerFSM MainGameplayStateMachine;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameplayState FallbackGameplayState;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameplayStateEventHandler> GameplayStateMachines;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LinkedList<GameplayState> _gameplayStates;

	[Token(Token = "0x170000F0")]
	public GameplayState CurrentState
	{
		[Token(Token = "0x6000970")]
		[Address(RVA = "0x1359664", Offset = "0x1359664", VA = "0x1359664")]
		get
		{
			return default(GameplayState);
		}
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0x13596E0", Offset = "0x13596E0", VA = "0x13596E0")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0x1359D00", Offset = "0x1359D00", VA = "0x1359D00")]
	public void EnterState(GameplayState state)
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0x1359FD8", Offset = "0x1359FD8", VA = "0x1359FD8")]
	public void ExitState(GameplayState state)
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0x1359F48", Offset = "0x1359F48", VA = "0x1359F48")]
	private void AddState(GameplayState state)
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0x135A268", Offset = "0x135A268", VA = "0x135A268")]
	private void RemoveState(GameplayState state)
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0x135A2C0", Offset = "0x135A2C0", VA = "0x135A2C0")]
	public GameplayStatePushdownAutomata()
	{
	}
}
[Token(Token = "0x2000213")]
public enum GameplayState
{
	[Token(Token = "0x40007AF")]
	None,
	[Token(Token = "0x40007B0")]
	Standard,
	[Token(Token = "0x40007B1")]
	Combat,
	[Token(Token = "0x40007B2")]
	Cutscene,
	[Token(Token = "0x40007B3")]
	Conversation
}
[Serializable]
[Token(Token = "0x2000214")]
public struct GameplayStateEventHandler
{
	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public GameplayState state;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public PlayMakerFSM stateMachine;
}
[Serializable]
[Token(Token = "0x2000215")]
public class LevelData
{
	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public int[] startCheckpoints;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Checkpoint currentCheckpoint;

	[Token(Token = "0x170000F1")]
	public List<XRCollectableResourceGroup> ResourceGroups
	{
		[Token(Token = "0x6000980")]
		[Address(RVA = "0x135A45C", Offset = "0x135A45C", VA = "0x135A45C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000981")]
		[Address(RVA = "0x135A464", Offset = "0x135A464", VA = "0x135A464")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000F2")]
	public XRCollectableResourceGroup MostRecentResourceGroup
	{
		[Token(Token = "0x6000982")]
		[Address(RVA = "0x135A46C", Offset = "0x135A46C", VA = "0x135A46C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000983")]
		[Address(RVA = "0x135A474", Offset = "0x135A474", VA = "0x135A474")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000F3")]
	public LimitedResource MostRecentResource
	{
		[Token(Token = "0x6000984")]
		[Address(RVA = "0x135A47C", Offset = "0x135A47C", VA = "0x135A47C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000985")]
		[Address(RVA = "0x135A484", Offset = "0x135A484", VA = "0x135A484")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000F4")]
	public float MostRecentResourceCollectGameTime
	{
		[Token(Token = "0x6000986")]
		[Address(RVA = "0x135A48C", Offset = "0x135A48C", VA = "0x135A48C")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000987")]
		[Address(RVA = "0x135A494", Offset = "0x135A494", VA = "0x135A494")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000F5")]
	public Checkpoint[] LevelCheckpoints
	{
		[Token(Token = "0x6000988")]
		[Address(RVA = "0x135A49C", Offset = "0x135A49C", VA = "0x135A49C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000989")]
		[Address(RVA = "0x135A4A4", Offset = "0x135A4A4", VA = "0x135A4A4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000F6")]
	public Checkpoint CurrentCheckpoint
	{
		[Token(Token = "0x600098A")]
		[Address(RVA = "0x135A4AC", Offset = "0x135A4AC", VA = "0x135A4AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600098B")]
		[Address(RVA = "0x135A4B4", Offset = "0x135A4B4", VA = "0x135A4B4")]
		set
		{
		}
	}

	[Token(Token = "0x170000F7")]
	public int CurrentCheckpointIndex
	{
		[Token(Token = "0x600098C")]
		[Address(RVA = "0x135A4BC", Offset = "0x135A4BC", VA = "0x135A4BC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000F8")]
	public bool IsStartingCheckpoint
	{
		[Token(Token = "0x600098D")]
		[Address(RVA = "0x135A508", Offset = "0x135A508", VA = "0x135A508")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F9")]
	public Vector3 playerStartPosition
	{
		[Token(Token = "0x600098E")]
		[Address(RVA = "0x135A568", Offset = "0x135A568", VA = "0x135A568")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x135A574", Offset = "0x135A574", VA = "0x135A574")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0x135A580", Offset = "0x135A580", VA = "0x135A580")]
	public void SetupLevelData()
	{
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0x135A888", Offset = "0x135A888", VA = "0x135A888")]
	public void RegisterResourceGroup(XRCollectableResourceGroup group)
	{
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0x135A970", Offset = "0x135A970", VA = "0x135A970")]
	public LevelData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000216")]
public struct SceneCheckpoint
{
	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public SceneData scene;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Checkpoint checkpoint;
}
[Token(Token = "0x2000217")]
public abstract class ManagerBase : MonoBehaviour
{
	[Token(Token = "0x6000993")]
	public abstract bool Setup();

	[Token(Token = "0x6000994")]
	[Address(RVA = "0x1358410", Offset = "0x1358410", VA = "0x1358410")]
	protected ManagerBase()
	{
	}
}
[Token(Token = "0x2000218")]
[DefaultExecutionOrder(-1000)]
public class NewGameplayManager : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x200021A")]
	[CompilerGenerated]
	private sealed class <OnPlayerDie>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NewGameplayManager <>4__this;

		[Token(Token = "0x17000100")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009B7")]
			[Address(RVA = "0x135C07C", Offset = "0x135C07C", VA = "0x135C07C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009B9")]
			[Address(RVA = "0x135C0C4", Offset = "0x135C0C4", VA = "0x135C0C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x135B4CC", Offset = "0x135B4CC", VA = "0x135B4CC")]
		[DebuggerHidden]
		public <OnPlayerDie>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x135BDC8", Offset = "0x135BDC8", VA = "0x135BDC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x135BDCC", Offset = "0x135BDCC", VA = "0x135BDCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x135C084", Offset = "0x135C084", VA = "0x135C084", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021B")]
	[CompilerGenerated]
	private sealed class <ResetCameraRoutine>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CinemachineVirtualCamera camera;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NewGameplayManager <>4__this;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <timer>5__2;

		[Token(Token = "0x17000102")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0x135C488", Offset = "0x135C488", VA = "0x135C488", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0x135C4D0", Offset = "0x135C4D0", VA = "0x135C4D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x135B6C0", Offset = "0x135B6C0", VA = "0x135B6C0")]
		[DebuggerHidden]
		public <ResetCameraRoutine>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x135C0CC", Offset = "0x135C0CC", VA = "0x135C0CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x135C0D0", Offset = "0x135C0D0", VA = "0x135C0D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x135C490", Offset = "0x135C490", VA = "0x135C490", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021C")]
	[CompilerGenerated]
	private sealed class <ResetCheckpointCameraRoutine>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CinemachineVirtualCamera camera;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool resetDolly;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NewGameplayManager <>4__this;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool <changeCamera>5__2;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <timer>5__3;

		[Token(Token = "0x17000104")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0x135C7A4", Offset = "0x135C7A4", VA = "0x135C7A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000105")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009C5")]
			[Address(RVA = "0x135C7EC", Offset = "0x135C7EC", VA = "0x135C7EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x135B784", Offset = "0x135B784", VA = "0x135B784")]
		[DebuggerHidden]
		public <ResetCheckpointCameraRoutine>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x135C4D8", Offset = "0x135C4D8", VA = "0x135C4D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x135C4DC", Offset = "0x135C4DC", VA = "0x135C4DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x135C7AC", Offset = "0x135C7AC", VA = "0x135C7AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Player")]
	[SerializeField]
	private XRCharacter player;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Managers")]
	private CombatManager combatManager;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Config")]
	[SerializeField]
	private GameplayStatePushdownAutomata gameplayStateController;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PlayMakerFSM restartFSM;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Space(10f)]
	[SerializeField]
	private SaveLevel saveLevel;

	[Token(Token = "0x40007C6")]
	[SerializeField]
	private const string PlayerRespawnEventFSM = "PLAYER RESPAWN";

	[Token(Token = "0x40007C7")]
	[SerializeField]
	private const string PlayerDeathFSM = "PLAYER DIED";

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _onDeathRespawDelay;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private bool _useRespawnFadeOutDelay;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float _onRespawnFadeOutDelay;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MothState currentMothState;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool canInteract;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool currentInteractState;

	[Token(Token = "0x170000FA")]
	public XRCharacter Player
	{
		[Token(Token = "0x6000995")]
		[Address(RVA = "0x135A9F8", Offset = "0x135A9F8", VA = "0x135A9F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FB")]
	public CombatManager CombatManager
	{
		[Token(Token = "0x6000996")]
		[Address(RVA = "0x135AA00", Offset = "0x135AA00", VA = "0x135AA00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FC")]
	public LevelData LevelData
	{
		[Token(Token = "0x6000997")]
		[Address(RVA = "0x135AA08", Offset = "0x135AA08", VA = "0x135AA08")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x135AA10", Offset = "0x135AA10", VA = "0x135AA10")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000FD")]
	public bool WasVisited
	{
		[Token(Token = "0x6000999")]
		[Address(RVA = "0x135AA18", Offset = "0x135AA18", VA = "0x135AA18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000FE")]
	public bool IsCompleted
	{
		[Token(Token = "0x600099A")]
		[Address(RVA = "0x135AA34", Offset = "0x135AA34", VA = "0x135AA34")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000FF")]
	public bool CanInteract
	{
		[Token(Token = "0x600099B")]
		[Address(RVA = "0x135AA50", Offset = "0x135AA50", VA = "0x135AA50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x135AA58", Offset = "0x135AA58", VA = "0x135AA58")]
	private void Awake()
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0x135AC24", Offset = "0x135AC24", VA = "0x135AC24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x135ACE8", Offset = "0x135ACE8", VA = "0x135ACE8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0x135ADAC", Offset = "0x135ADAC", VA = "0x135ADAC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0x135AB90", Offset = "0x135AB90", VA = "0x135AB90")]
	protected void LoadManagers()
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x135AB94", Offset = "0x135AB94", VA = "0x135AB94")]
	protected void SetupManagers()
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x1358070", Offset = "0x1358070", VA = "0x1358070")]
	public void EnterState(GameplayState state)
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x1358088", Offset = "0x1358088", VA = "0x1358088")]
	public void ExitState(GameplayState state)
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x135AFCC", Offset = "0x135AFCC", VA = "0x135AFCC")]
	private void Start()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x135B458", Offset = "0x135B458", VA = "0x135B458")]
	[IteratorStateMachine(typeof(<OnPlayerDie>d__36))]
	public IEnumerator OnPlayerDie()
	{
		return null;
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0x134ED70", Offset = "0x134ED70", VA = "0x134ED70")]
	public void CheckpointReached(Checkpoint checkpoint, bool resetDamage = true)
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x135B208", Offset = "0x135B208", VA = "0x135B208")]
	public void RestartLevel()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x135B630", Offset = "0x135B630", VA = "0x135B630")]
	[IteratorStateMachine(typeof(<ResetCameraRoutine>d__39))]
	private IEnumerator ResetCameraRoutine(CinemachineVirtualCamera camera)
	{
		return null;
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x135B6E8", Offset = "0x135B6E8", VA = "0x135B6E8")]
	[IteratorStateMachine(typeof(<ResetCheckpointCameraRoutine>d__40))]
	private IEnumerator ResetCheckpointCameraRoutine(CinemachineVirtualCamera camera, bool resetDolly = true)
	{
		return null;
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x135B4F4", Offset = "0x135B4F4", VA = "0x135B4F4")]
	public void ResetToCheckpoint(Checkpoint checkpoint)
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x135BB78", Offset = "0x135BB78", VA = "0x135BB78")]
	public void CompleteLevel(bool markSceneAsCompleted)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x135BC2C", Offset = "0x135BC2C", VA = "0x135BC2C", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x135B7AC", Offset = "0x135B7AC", VA = "0x135B7AC")]
	private void CallPlayerRespawnListeners()
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x135BC64", Offset = "0x135BC64", VA = "0x135BC64")]
	private void OnResourceCollected(XRCollectableResourceGroup resourceGroup, LimitedResource resource)
	{
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x135BCBC", Offset = "0x135BCBC", VA = "0x135BCBC")]
	public NewGameplayManager()
	{
	}
}
[Token(Token = "0x200021D")]
public class ModificationLeashBehaviour : BezierLine
{
	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LineRenderer line;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 offset;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 originOffset;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 middleOffset;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 targetOffset;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float time;

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0x135C7F4", Offset = "0x135C7F4", VA = "0x135C7F4")]
	public void Show(Transform origin, Transform target)
	{
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x135C968", Offset = "0x135C968", VA = "0x135C968")]
	public void Hide()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x135C98C", Offset = "0x135C98C", VA = "0x135C98C")]
	public ModificationLeashBehaviour()
	{
	}
}
[Token(Token = "0x200021E")]
public class ModificationReceiverBase : MonoBehaviour
{
	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Starts Effects")]
	public List<ModifierBase> objectEffects;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isInvulnerable;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onEffectAdded;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onEffectRemoved;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected List<ModifierBase> currentModifiers;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool _callExitEventOnStart;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected List<Collider> m_Colliders;

	[Token(Token = "0x17000106")]
	public bool HasEffect
	{
		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x135C9A0", Offset = "0x135C9A0", VA = "0x135C9A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000107")]
	public ModifierBase CurrentEffect
	{
		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x135C9F0", Offset = "0x135C9F0", VA = "0x135C9F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x135CA44", Offset = "0x135CA44", VA = "0x135CA44", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0x135CBEC", Offset = "0x135CBEC", VA = "0x135CBEC", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x135CD64", Offset = "0x135CD64", VA = "0x135CD64")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0x135CDFC", Offset = "0x135CDFC", VA = "0x135CDFC", Slot = "6")]
	public virtual void AddModification(ModificationSenderBase.ModificationSignal modificationEvent)
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x135D01C", Offset = "0x135D01C", VA = "0x135D01C", Slot = "7")]
	public virtual void AddModifier(ModifierBase modifier)
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x135D120", Offset = "0x135D120", VA = "0x135D120", Slot = "8")]
	public virtual bool RemoveModification(ModificationScriptableObject modification)
	{
		return default(bool);
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0x135D230", Offset = "0x135D230", VA = "0x135D230", Slot = "9")]
	public virtual void RemoveModifier(ModifierBase modifier)
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x135D2B8", Offset = "0x135D2B8", VA = "0x135D2B8")]
	public void SetInvulnerable(bool Invulnerable)
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x135D364", Offset = "0x135D364", VA = "0x135D364")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x135CD68", Offset = "0x135CD68", VA = "0x135CD68")]
	public void RemoveAllModifications()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x135D468", Offset = "0x135D468", VA = "0x135D468")]
	public void SetColliderState(bool enable)
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x135D5D4", Offset = "0x135D5D4", VA = "0x135D5D4")]
	public bool HasModificator(ModificationScriptableObject modification)
	{
		return default(bool);
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x135CF38", Offset = "0x135CF38", VA = "0x135CF38")]
	public bool HasCurrentModificator(ModificationScriptableObject modification)
	{
		return default(bool);
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x135D6C0", Offset = "0x135D6C0", VA = "0x135D6C0")]
	public ModifierBase GetModificator(ModificationScriptableObject modification)
	{
		return null;
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0x135D7C4", Offset = "0x135D7C4", VA = "0x135D7C4")]
	public ModificationReceiverBase()
	{
	}
}
[Token(Token = "0x2000220")]
public abstract class ModificationSenderBase : MonoBehaviour
{
	[Token(Token = "0x2000221")]
	public class ModificationSignal
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ModificationScriptableObject modification;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool resetWhenApplied;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canTransfer;

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x135DE00", Offset = "0x135DE00", VA = "0x135DE00")]
		public ModificationSignal()
		{
		}
	}

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected ModificationScriptableObject modification;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected float radius;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	protected LayerMask modificationMask;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider owner;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected bool resetWhenApplied;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Collider[] previousHits;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Transform trans;

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0x135D920", Offset = "0x135D920", VA = "0x135D920", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0x135D944", Offset = "0x135D944", VA = "0x135D944", Slot = "5")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0x135DA94", Offset = "0x135DA94", VA = "0x135DA94", Slot = "6")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0x135DA98", Offset = "0x135DA98", VA = "0x135DA98", Slot = "7")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x60009E0")]
	protected abstract ModificationReceiverBase GetModificationReceiver(Collider coll);

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0x135D948", Offset = "0x135D948", VA = "0x135D948")]
	public void Disable()
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x135DD8C", Offset = "0x135DD8C", VA = "0x135DD8C")]
	protected ModificationSenderBase()
	{
	}
}
[Token(Token = "0x2000223")]
public class ModifierBase : MonoBehaviour
{
	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Events")]
	public UnityEvent onStart;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Events")]
	public UnityEvent onReset;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Events")]
	public UnityEvent onExit;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Scriptable Object Settings")]
	public ModificationScriptableObject modificatorScriptableObject;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool overrideModificationDuration;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ConditionalField("overrideModificationDuration", false, new object[] { })]
	public float customModificationDuration;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool disableWhenExit;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	protected bool isActive;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected float currentTime;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected ModificationReceiverBase controller;

	[Token(Token = "0x17000108")]
	public float CurrentTime
	{
		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x135DE98", Offset = "0x135DE98", VA = "0x135DE98")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000109")]
	public float FullTime
	{
		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x135DEA0", Offset = "0x135DEA0", VA = "0x135DEA0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700010A")]
	public float PercentageTime
	{
		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x135DED0", Offset = "0x135DED0", VA = "0x135DED0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700010B")]
	public bool DependOfDuration
	{
		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x135DF08", Offset = "0x135DF08", VA = "0x135DF08")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700010C")]
	public bool IsActive
	{
		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x135DF2C", Offset = "0x135DF2C", VA = "0x135DF2C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700010D")]
	public bool CanTransfer
	{
		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x135DF34", Offset = "0x135DF34", VA = "0x135DF34")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x135DF3C", Offset = "0x135DF3C", VA = "0x135DF3C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x135DF48", Offset = "0x135DF48", VA = "0x135DF48", Slot = "4")]
	public virtual void Init(ModificationReceiverBase owner)
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x135DF50", Offset = "0x135DF50", VA = "0x135DF50", Slot = "5")]
	public virtual void OnStart()
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x135DFF0", Offset = "0x135DFF0", VA = "0x135DFF0", Slot = "6")]
	public virtual void OnReset()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x135E05C", Offset = "0x135E05C", VA = "0x135E05C", Slot = "7")]
	public virtual void OnUpdate()
	{
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x135E090", Offset = "0x135E090", VA = "0x135E090", Slot = "8")]
	public virtual void OnExit()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x135E0C0", Offset = "0x135E0C0", VA = "0x135E0C0", Slot = "9")]
	public virtual void Deactivate()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x135DFBC", Offset = "0x135DFBC", VA = "0x135DFBC")]
	public void ResetTime()
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0x135E0FC", Offset = "0x135E0FC", VA = "0x135E0FC", Slot = "10")]
	public virtual bool CanRemove()
	{
		return default(bool);
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0x135E148", Offset = "0x135E148", VA = "0x135E148")]
	public ModifierBase()
	{
	}
}
[Token(Token = "0x2000224")]
public class ArmorModifier : ArmorModifierBase
{
	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ModificationScriptableObject alchemy;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Damageable armorDamageable;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Animator enemyAnimator;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private bool activateArmorOnSetup;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private ModificationScriptableObject wobbleAlchemy;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private PlayMakerFSM damageableController;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int startHitPoints;

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x135E160", Offset = "0x135E160", VA = "0x135E160")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x135E204", Offset = "0x135E204", VA = "0x135E204")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x135E298", Offset = "0x135E298", VA = "0x135E298", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0x135E420", Offset = "0x135E420", VA = "0x135E420", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0x135E4F4", Offset = "0x135E4F4", VA = "0x135E4F4")]
	private void OnEnemySetup()
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0x135E510", Offset = "0x135E510", VA = "0x135E510", Slot = "14")]
	protected override void OnAddAlchemyEffect(ModificationScriptableObject modificator)
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0x135E720", Offset = "0x135E720", VA = "0x135E720", Slot = "15")]
	protected override void OnRemoveAlchemyEffect()
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0x135E7F8", Offset = "0x135E7F8", VA = "0x135E7F8")]
	public void OnDieMessage()
	{
	}

	[Token(Token = "0x60009FE")]
	[Address(RVA = "0x135E808", Offset = "0x135E808", VA = "0x135E808")]
	protected void OnReceiveDamage()
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0x135E8A8", Offset = "0x135E8A8", VA = "0x135E8A8")]
	public ArmorModifier()
	{
	}
}
[Token(Token = "0x2000225")]
public class ArmorModifierBase : DisableHitReactModifier
{
	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected AlchemyModificationReceiver alchemyModificationReceiver;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Visual effects")]
	public UnityEvent OnHitWhenActiveArmor;

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0x135E8E4", Offset = "0x135E8E4", VA = "0x135E8E4", Slot = "11")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0x135EB60", Offset = "0x135EB60", VA = "0x135EB60", Slot = "12")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0x135EDDC", Offset = "0x135EDDC", VA = "0x135EDDC", Slot = "13")]
	protected virtual void TakeDamage()
	{
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0x135E3E8", Offset = "0x135E3E8", VA = "0x135E3E8", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0x135E4BC", Offset = "0x135E4BC", VA = "0x135E4BC", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0x135EE9C", Offset = "0x135EE9C", VA = "0x135EE9C", Slot = "14")]
	protected virtual void OnAddAlchemyEffect(ModificationScriptableObject modificator)
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0x135EEA0", Offset = "0x135EEA0", VA = "0x135EEA0", Slot = "15")]
	protected virtual void OnRemoveAlchemyEffect()
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0x135EEA4", Offset = "0x135EEA4", VA = "0x135EEA4", Slot = "16")]
	public virtual void ActivateArmor()
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0x135EF2C", Offset = "0x135EF2C", VA = "0x135EF2C", Slot = "17")]
	public virtual void DeactivateArmor()
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0x135E8CC", Offset = "0x135E8CC", VA = "0x135E8CC")]
	public ArmorModifierBase()
	{
	}
}
[Token(Token = "0x2000226")]
public class DisableHitReactModifier : ModifierBase
{
	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public EnemyBehaviour enemyBehaviour;

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0x135EE24", Offset = "0x135EE24", VA = "0x135EE24", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0x135EE60", Offset = "0x135EE60", VA = "0x135EE60", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0x135EF54", Offset = "0x135EF54", VA = "0x135EF54")]
	public DisableHitReactModifier()
	{
	}
}
[Token(Token = "0x2000227")]
public class IntervalDamageModifier : ModifierBase
{
	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Damageable target;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float interval;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int damage;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AttackScriptableObject attackType;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool additiveAnimation;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Transform trans;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected float intervalTime;

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0x135EF6C", Offset = "0x135EF6C", VA = "0x135EF6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0x135EF90", Offset = "0x135EF90", VA = "0x135EF90", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0x135F0BC", Offset = "0x135F0BC", VA = "0x135F0BC", Slot = "7")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0x135EFA8", Offset = "0x135EFA8", VA = "0x135EFA8")]
	private void Damage()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0x135F11C", Offset = "0x135F11C", VA = "0x135F11C")]
	public IntervalDamageModifier()
	{
	}
}
[Token(Token = "0x2000228")]
public class InvulnerabiltyModifier : ModifierBase
{
	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Damageable damageable;

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0x135F140", Offset = "0x135F140", VA = "0x135F140", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x135F168", Offset = "0x135F168", VA = "0x135F168", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x135F268", Offset = "0x135F268", VA = "0x135F268")]
	public InvulnerabiltyModifier()
	{
	}
}
[Token(Token = "0x2000229")]
public class MothArmorModifier : ModifierBase
{
	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private XRCharacter moth;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private DamageModificationReceiver damageReceiver;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float regenerationDuration;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Damageable armorDamageable;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int startHitPoints;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float regenerationTimer;

	[Token(Token = "0x1700010E")]
	public bool IsArmorActive
	{
		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x135F280", Offset = "0x135F280", VA = "0x135F280")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x135F288", Offset = "0x135F288", VA = "0x135F288")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x135F294", Offset = "0x135F294", VA = "0x135F294")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x135F2B4", Offset = "0x135F2B4", VA = "0x135F2B4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0x135F4B4", Offset = "0x135F4B4", VA = "0x135F4B4", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0x135F698", Offset = "0x135F698", VA = "0x135F698")]
	public void OnArmorRegenerated()
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x135F6C8", Offset = "0x135F6C8", VA = "0x135F6C8")]
	public void OnArmorDestroyed()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0x135F738", Offset = "0x135F738", VA = "0x135F738")]
	private void DeactivateWithArmor()
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x135F744", Offset = "0x135F744", VA = "0x135F744")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x135F2CC", Offset = "0x135F2CC", VA = "0x135F2CC")]
	private void ActivateArmor()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x135F4F0", Offset = "0x135F4F0", VA = "0x135F4F0")]
	private void DeactivateArmor()
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x135F790", Offset = "0x135F790", VA = "0x135F790")]
	public MothArmorModifier()
	{
	}
}
[Token(Token = "0x200022A")]
public class ResourcesModifier : ModifierBase
{
	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public XRCollectableResourceGroup interactable;

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0x135F7B4", Offset = "0x135F7B4", VA = "0x135F7B4", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0x135F7D8", Offset = "0x135F7D8", VA = "0x135F7D8", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0x135F818", Offset = "0x135F818", VA = "0x135F818")]
	public ResourcesModifier()
	{
	}
}
[Token(Token = "0x200022B")]
public class SuperArmorModifier : ArmorModifierBase
{
	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("SuperArmor Timers")]
	public float resetTime;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float decreaseDelay;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("SuperArmor parameters")]
	public float enemySpeedIncrease;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float superArmorSpeedDecrease;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool disableDamage;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool interruptOnAlchemy;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Particles")]
	public ParticleSystem startParticles;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public ParticleSystem stopParticles;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int superArmor;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool _isAlchemyActive;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float _lastActivatedTime;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float _lastTakeDamageTime;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float _currentArmor;

	[Token(Token = "0x1700010F")]
	public float CurrentArmor
	{
		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x135F95C", Offset = "0x135F95C", VA = "0x135F95C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x135F964", Offset = "0x135F964", VA = "0x135F964")]
		set
		{
		}
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0x135F830", Offset = "0x135F830", VA = "0x135F830")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0x135F9A4", Offset = "0x135F9A4", VA = "0x135F9A4", Slot = "13")]
	protected override void TakeDamage()
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0x135FA5C", Offset = "0x135FA5C", VA = "0x135FA5C", Slot = "5")]
	public override void OnStart()
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0x135FAB8", Offset = "0x135FAB8", VA = "0x135FAB8", Slot = "8")]
	public override void OnExit()
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0x135FB10", Offset = "0x135FB10", VA = "0x135FB10", Slot = "14")]
	protected override void OnAddAlchemyEffect(ModificationScriptableObject modificator)
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0x135FB4C", Offset = "0x135FB4C", VA = "0x135FB4C", Slot = "15")]
	protected override void OnRemoveAlchemyEffect()
	{
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0x135FB54", Offset = "0x135FB54", VA = "0x135FB54", Slot = "16")]
	public override void ActivateArmor()
	{
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0x135FB78", Offset = "0x135FB78", VA = "0x135FB78", Slot = "17")]
	public override void DeactivateArmor()
	{
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0x135FBB0", Offset = "0x135FBB0", VA = "0x135FBB0")]
	public SuperArmorModifier()
	{
	}
}
[Serializable]
[Token(Token = "0x200022C")]
public class FloatStatEvent : UnityEvent<float>
{
	[Token(Token = "0x6000A30")]
	[Address(RVA = "0x135FC4C", Offset = "0x135FC4C", VA = "0x135FC4C")]
	public FloatStatEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x200022D")]
public class MultiplicativeFloatStat
{
	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float baseValue;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FloatStatEvent onValueChanged;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<float> multipliers;

	[Token(Token = "0x17000110")]
	public float CurrentValue
	{
		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x135FC94", Offset = "0x135FC94", VA = "0x135FC94")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0x135E638", Offset = "0x135E638", VA = "0x135E638")]
	public void AddMultiplier(float value)
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0x135E758", Offset = "0x135E758", VA = "0x135E758")]
	public void RemoveMultiplier(float value)
	{
	}

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0x135E360", Offset = "0x135E360", VA = "0x135E360")]
	public void ResetValue()
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0x135FD28", Offset = "0x135FD28", VA = "0x135FD28")]
	public MultiplicativeFloatStat()
	{
	}
}
[Token(Token = "0x200022E")]
public class ArmorModificationReceiver : ModificationReceiverBase
{
	[Token(Token = "0x6000A36")]
	[Address(RVA = "0x135FDF0", Offset = "0x135FDF0", VA = "0x135FDF0")]
	public ArmorModificationReceiver()
	{
	}
}
[Token(Token = "0x200022F")]
public class DamageModificationReceiver : ModificationReceiverBase
{
	[Token(Token = "0x6000A37")]
	[Address(RVA = "0x135FDF8", Offset = "0x135FDF8", VA = "0x135FDF8")]
	public DamageModificationReceiver()
	{
	}
}
[Token(Token = "0x2000230")]
public class EnemyModificationReceiver : ModificationReceiverBase
{
	[Token(Token = "0x6000A38")]
	[Address(RVA = "0x135FE00", Offset = "0x135FE00", VA = "0x135FE00")]
	public EnemyModificationReceiver()
	{
	}
}
[Token(Token = "0x2000231")]
public class DamageModificationSender : ModificationSenderBase
{
	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected bool overrideExitModificationMask;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	protected LayerMask exitModificationMask;

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0x135FE08", Offset = "0x135FE08", VA = "0x135FE08", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0x135FE0C", Offset = "0x135FE0C", VA = "0x135FE0C")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0x135FF4C", Offset = "0x135FF4C", VA = "0x135FF4C")]
	private void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0x135FE10", Offset = "0x135FE10", VA = "0x135FE10")]
	public void OnAreaEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0x1360048", Offset = "0x1360048", VA = "0x1360048")]
	public void OnAreaStay(Collider collider)
	{
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0x135FF50", Offset = "0x135FF50", VA = "0x135FF50")]
	public void OnAreaExit(Collider collider)
	{
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x1360184", Offset = "0x1360184", VA = "0x1360184", Slot = "8")]
	protected override ModificationReceiverBase GetModificationReceiver(Collider coll)
	{
		return null;
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0x13601D4", Offset = "0x13601D4", VA = "0x13601D4")]
	public DamageModificationSender()
	{
	}
}
[Token(Token = "0x2000232")]
public class EnemyModificationBaseSender : ModificationSenderBase
{
	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x13601DC", Offset = "0x13601DC", VA = "0x13601DC", Slot = "8")]
	protected override ModificationReceiverBase GetModificationReceiver(Collider coll)
	{
		return null;
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0x136022C", Offset = "0x136022C", VA = "0x136022C")]
	public EnemyModificationBaseSender()
	{
	}
}
[Token(Token = "0x2000233")]
public class LeashModificationSender : EnemyModificationBaseSender
{
	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject linePrefab;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform lineParent;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform lineOrigin;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<ModificationLeashBehaviour> lines;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private QueryTriggerInteraction triggerColliders;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ModificationSignal modificatorSignalEvent;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ModificationReceiverBase modificatorController;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Collider[] currentHits;

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0x1360234", Offset = "0x1360234", VA = "0x1360234", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0x13602C0", Offset = "0x13602C0", VA = "0x13602C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0x1360348", Offset = "0x1360348", VA = "0x1360348", Slot = "6")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0x1360494", Offset = "0x1360494", VA = "0x1360494", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0x1360B6C", Offset = "0x1360B6C", VA = "0x1360B6C")]
	public LeashModificationSender()
	{
	}
}
[Token(Token = "0x2000235")]
public static class NavmeshHelpers
{
	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0x1360C68", Offset = "0x1360C68", VA = "0x1360C68")]
	public static bool IsPositionReachable(Vector3 position, Vector3 target, NavMeshPath path, int agentType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0x1360D50", Offset = "0x1360D50", VA = "0x1360D50")]
	public static bool IsOnNavmesh(Vector3 position, float radius, int agentType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0x1360D8C", Offset = "0x1360D8C", VA = "0x1360D8C")]
	public static Vector3 SamplePosition(Vector3 postion, float radius, int agentType, out bool result)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0x1360E1C", Offset = "0x1360E1C", VA = "0x1360E1C")]
	public static bool FindClosestEdge(Vector3 postion, int agentType, out Vector3 edge, float radius = 0.2f)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0x1360F1C", Offset = "0x1360F1C", VA = "0x1360F1C")]
	public static bool Raycast(Vector3 startPosition, Vector3 endPosition, out NavMeshHit hit, int agentType)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000236")]
public class NVBoids : MonoBehaviour
{
	[Token(Token = "0x2000237")]
	[CompilerGenerated]
	private sealed class <Danger>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVBoids <>4__this;

		[Token(Token = "0x17000111")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0x1362020", Offset = "0x1362020", VA = "0x1362020", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A5E")]
			[Address(RVA = "0x1362068", Offset = "0x1362068", VA = "0x1362068", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x1361D2C", Offset = "0x1361D2C", VA = "0x1361D2C")]
		[DebuggerHidden]
		public <Danger>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x1361DF8", Offset = "0x1361DF8", VA = "0x1361DF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x1361DFC", Offset = "0x1361DFC", VA = "0x1361DFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x1362028", Offset = "0x1362028", VA = "0x1362028", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000238")]
	[CompilerGenerated]
	private sealed class <BehavioralChange>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVBoids <>4__this;

		[Token(Token = "0x17000113")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A62")]
			[Address(RVA = "0x13622AC", Offset = "0x13622AC", VA = "0x13622AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0x13622F4", Offset = "0x13622F4", VA = "0x13622F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x1361D54", Offset = "0x1361D54", VA = "0x1361D54")]
		[DebuggerHidden]
		public <BehavioralChange>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x1362070", Offset = "0x1362070", VA = "0x1362070", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x1362074", Offset = "0x1362074", VA = "0x1362074", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x13622B4", Offset = "0x13622B4", VA = "0x13622B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("General Settings")]
	public Vector2 behavioralCh;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool debug;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("Flock Settings")]
	[Range(1f, 150f)]
	public int flockNum;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 5000f)]
	public int fragmentedFlock;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 1f)]
	public float fragmentedFlockYLimit;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 1f)]
	public float migrationFrequency;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 1f)]
	public float posChangeFrequency;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 100f)]
	public float smoothChFrequency;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Bird Settings")]
	public GameObject birdPref;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(1f, 9999f)]
	public int birdsNum;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Range(0f, 150f)]
	public float birdSpeed;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Range(0f, 100f)]
	public int fragmentedBirds;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Range(0f, 1f)]
	public float fragmentedBirdsYLimit;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(0f, 10f)]
	public float soaring;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Range(0.01f, 500f)]
	public float verticalWawe;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool rotationClamp;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Range(0f, 360f)]
	public float rotationClampValue;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector2 scaleRandom;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Danger Settings (one flock)")]
	public bool danger;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float dangerRadius;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float dangerSpeed;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float dangerSoaring;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public LayerMask dangerLayer;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform thisTransform;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform dangerTransform;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int dangerBird;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform[] birdsTransform;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform[] flocksTransform;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3[] rdTargetPos;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3[] flockPos;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3[] velFlocks;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float[] birdsSpeed;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float[] birdsSpeedCur;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float[] spVelocity;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private int[] curentFlock;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float dangerSpeedCh;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float dangerSoaringCh;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float timeTime;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static WaitForSeconds delay0;

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x1360F30", Offset = "0x1360F30", VA = "0x1360F30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0x1361750", Offset = "0x1361750", VA = "0x1361750")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0x1361768", Offset = "0x1361768", VA = "0x1361768")]
	private void FlocksMove()
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x13618A8", Offset = "0x13618A8", VA = "0x13618A8")]
	private void BirdsMove()
	{
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x13616DC", Offset = "0x13616DC", VA = "0x13616DC")]
	[IteratorStateMachine(typeof(<Danger>d__43))]
	private IEnumerator Danger()
	{
		return null;
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0x1361668", Offset = "0x1361668", VA = "0x1361668")]
	[IteratorStateMachine(typeof(<BehavioralChange>d__44))]
	private IEnumerator BehavioralChange()
	{
		return null;
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0x1360F94", Offset = "0x1360F94", VA = "0x1360F94")]
	private void CreateFlock()
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0x13612B0", Offset = "0x13612B0", VA = "0x13612B0")]
	private void CreateBird()
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0x1361CA8", Offset = "0x1361CA8", VA = "0x1361CA8")]
	private static Quaternion BirdsRotationClamp(Quaternion rotationCur, float rotationClampValue)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0x1361D7C", Offset = "0x1361D7C", VA = "0x1361D7C")]
	public NVBoids()
	{
	}
}
[Token(Token = "0x2000239")]
public class ActionXRInputProvider : HandProviderBase
{
	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Left")]
	public InputActionProperty analogLeft;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public InputActionProperty analogRight;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public InputActionProperty gripLeft;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public InputActionProperty gripRight;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public InputActionProperty analogTouchLeft;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public InputActionProperty analogTouchRight;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public InputActionProperty triggerButtonLeft;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public InputActionProperty triggerButtonRight;

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0x13622FC", Offset = "0x13622FC", VA = "0x13622FC", Slot = "9")]
	public override Vector2 Analog(bool right)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0x1362364", Offset = "0x1362364", VA = "0x1362364", Slot = "5")]
	public override float Flex(bool right)
	{
		return default(float);
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0x13623CC", Offset = "0x13623CC", VA = "0x13623CC", Slot = "8")]
	public override bool IsGivingThumbsUp(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0x1362448", Offset = "0x1362448", VA = "0x1362448", Slot = "7")]
	public override bool IsPointing(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0x13624C4", Offset = "0x13624C4", VA = "0x13624C4", Slot = "6")]
	public override float Pinch(bool right)
	{
		return default(float);
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0x136252C", Offset = "0x136252C", VA = "0x136252C", Slot = "12")]
	public override Vector3 OffsetInteractorPosition(bool right)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0x1362570", Offset = "0x1362570", VA = "0x1362570", Slot = "11")]
	public override Vector3 OffsetPosition(bool right)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0x13625B4", Offset = "0x13625B4", VA = "0x13625B4", Slot = "10")]
	public override Vector3 OffsetRotation(bool right)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0x13625F8", Offset = "0x13625F8", VA = "0x13625F8")]
	public void ReplaceButtons()
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0x136272C", Offset = "0x136272C", VA = "0x136272C")]
	public ActionXRInputProvider()
	{
	}
}
[Token(Token = "0x200023A")]
public class XRCharacterClimbDownSMB : SceneLinkedSMB<XRCharacter>
{
	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x136273C", Offset = "0x136273C", VA = "0x136273C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0x1362764", Offset = "0x1362764", VA = "0x1362764", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0x136278C", Offset = "0x136278C", VA = "0x136278C")]
	public XRCharacterClimbDownSMB()
	{
	}
}
[Token(Token = "0x200023B")]
public class XRCharacterClimbJumpSMB : SceneLinkedSMB<XRCharacter>
{
	[Token(Token = "0x6000A72")]
	[Address(RVA = "0x13627D4", Offset = "0x13627D4", VA = "0x13627D4", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0x13627FC", Offset = "0x13627FC", VA = "0x13627FC")]
	public XRCharacterClimbJumpSMB()
	{
	}
}
[Token(Token = "0x200023C")]
public class XRCharacterComboSMB : SceneLinkedSMB<XRCharacter>
{
	[Token(Token = "0x6000A74")]
	[Address(RVA = "0x1362844", Offset = "0x1362844", VA = "0x1362844", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0x1362848", Offset = "0x1362848", VA = "0x1362848", Slot = "10")]
	public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0x136284C", Offset = "0x136284C", VA = "0x136284C", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x13628E0", Offset = "0x13628E0", VA = "0x13628E0", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0x1362974", Offset = "0x1362974", VA = "0x1362974")]
	public XRCharacterComboSMB()
	{
	}
}
[Token(Token = "0x200023D")]
public class XRCharacterDiveLoopSMB : SceneLinkedSMB<XRCharacter>
{
	[Token(Token = "0x6000A79")]
	[Address(RVA = "0x13629BC", Offset = "0x13629BC", VA = "0x13629BC", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0x13629E4", Offset = "0x13629E4", VA = "0x13629E4", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x1362A0C", Offset = "0x1362A0C", VA = "0x1362A0C")]
	public XRCharacterDiveLoopSMB()
	{
	}
}
[Token(Token = "0x200023E")]
public class XRCharacterDiveSMB : SceneLinkedSMB<XRCharacter>
{
	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0x1362A54", Offset = "0x1362A54", VA = "0x1362A54", Slot = "10")]
	public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x1362A58", Offset = "0x1362A58", VA = "0x1362A58")]
	public XRCharacterDiveSMB()
	{
	}
}
[Token(Token = "0x200023F")]
public class XRCharacterGlideSMB : SceneLinkedSMB<XRCharacter>
{
	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x1362AA0", Offset = "0x1362AA0", VA = "0x1362AA0", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x1362AE8", Offset = "0x1362AE8", VA = "0x1362AE8", Slot = "25")]
	public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x1362B10", Offset = "0x1362B10", VA = "0x1362B10")]
	public XRCharacterGlideSMB()
	{
	}
}
[Token(Token = "0x2000240")]
public class XRCharacterHurtSMB : SceneLinkedSMB<XRCharacter>
{
	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x1362B58", Offset = "0x1362B58", VA = "0x1362B58", Slot = "19")]
	public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x1362B80", Offset = "0x1362B80", VA = "0x1362B80")]
	public XRCharacterHurtSMB()
	{
	}
}
[Token(Token = "0x2000241")]
public class Cape : MonoBehaviour
{
	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CapeScriptableObject cape;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] capeRenderers;

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x1362BC8", Offset = "0x1362BC8", VA = "0x1362BC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x1362DCC", Offset = "0x1362DCC", VA = "0x1362DCC")]
	public Cape()
	{
	}
}
[Token(Token = "0x2000242")]
public class AbilityBase : MonoBehaviour
{
	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnlockableAbilityScriptableObject scriptableObject;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool activateOnStart;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float cooldown;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool isActivated;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected float lastTime;

	[Token(Token = "0x17000115")]
	public bool IsActivated
	{
		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x1362DD4", Offset = "0x1362DD4", VA = "0x1362DD4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x1362DDC", Offset = "0x1362DDC", VA = "0x1362DDC", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0x1362DF8", Offset = "0x1362DF8", VA = "0x1362DF8")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x1362E20", Offset = "0x1362E20", VA = "0x1362E20", Slot = "5")]
	protected virtual void RegisterListeners()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0x1362E24", Offset = "0x1362E24", VA = "0x1362E24", Slot = "6")]
	protected virtual void RemoveListeners()
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0x1362E28", Offset = "0x1362E28", VA = "0x1362E28", Slot = "7")]
	public virtual void TryActivate()
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x1362E74", Offset = "0x1362E74", VA = "0x1362E74", Slot = "8")]
	[ContextMenu("Activate")]
	protected virtual void Activate()
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x1362E80", Offset = "0x1362E80", VA = "0x1362E80", Slot = "9")]
	protected virtual void Deactivate()
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x1362EA0", Offset = "0x1362EA0", VA = "0x1362EA0")]
	public void OnAbilityUnlocked()
	{
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0x1362EAC", Offset = "0x1362EAC", VA = "0x1362EAC")]
	public AbilityBase()
	{
	}
}
[Token(Token = "0x2000243")]
public class ArmorDashAbility : AbilityBase
{
	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ArmorModificationReceiver modificationReceiver;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ModificationScriptableObject armorModification;

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0x1362EBC", Offset = "0x1362EBC", VA = "0x1362EBC", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0x1362F4C", Offset = "0x1362F4C", VA = "0x1362F4C", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0x1362F84", Offset = "0x1362F84", VA = "0x1362F84")]
	public ArmorDashAbility()
	{
	}
}
[Token(Token = "0x2000244")]
public class BombDashAbility : DashAbility
{
	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public RangeWeapon[] weapons;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float pushPower;

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0x1362F94", Offset = "0x1362F94", VA = "0x1362F94", Slot = "10")]
	protected override void DashLogic_OnDashStart(Vector3 obj)
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0x1362FE8", Offset = "0x1362FE8", VA = "0x1362FE8", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0x13630E8", Offset = "0x13630E8", VA = "0x13630E8")]
	public BombDashAbility()
	{
	}
}
[Token(Token = "0x2000245")]
public class ChargedAttacksAbility : UnlockableAbilityBase
{
	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CombatChargedState combat;

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0x1363110", Offset = "0x1363110", VA = "0x1363110", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0x1363134", Offset = "0x1363134", VA = "0x1363134", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0x1363164", Offset = "0x1363164", VA = "0x1363164")]
	public ChargedAttacksAbility()
	{
	}
}
[Token(Token = "0x2000246")]
public class DashAbility : AbilityBase
{
	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DashState dashFrontLogic;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public DashState dashBackLogic;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onDashStarted;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Vector3 direction;

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0x1363184", Offset = "0x1363184", VA = "0x1363184")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0x136318C", Offset = "0x136318C", VA = "0x136318C", Slot = "5")]
	protected override void RegisterListeners()
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0x13632C4", Offset = "0x13632C4", VA = "0x13632C4", Slot = "6")]
	protected override void RemoveListeners()
	{
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0x1362FC8", Offset = "0x1362FC8", VA = "0x1362FC8", Slot = "10")]
	protected virtual void DashLogic_OnDashStart(Vector3 obj)
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0x13633FC", Offset = "0x13633FC", VA = "0x13633FC", Slot = "11")]
	protected virtual void DashLogic_OnDashEnd(Vector3 obj)
	{
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0x1363100", Offset = "0x1363100", VA = "0x1363100")]
	public DashAbility()
	{
	}
}
[Token(Token = "0x2000247")]
public class DashAttacksAbility : UnlockableAbilityBase
{
	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DashState[] states;

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0x1363400", Offset = "0x1363400", VA = "0x1363400", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0x136345C", Offset = "0x136345C", VA = "0x136345C", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0x13634C4", Offset = "0x13634C4", VA = "0x13634C4")]
	public DashAttacksAbility()
	{
	}
}
[Token(Token = "0x2000248")]
public class DiveAttackAbility : UnlockableAbilityBase
{
	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CombatDiveState combat;

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0x13634D4", Offset = "0x13634D4", VA = "0x13634D4", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0x13634F8", Offset = "0x13634F8", VA = "0x13634F8", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0x1363528", Offset = "0x1363528", VA = "0x1363528")]
	public DiveAttackAbility()
	{
	}
}
[Token(Token = "0x2000249")]
public class DoubleDashAbility : AbilityBase
{
	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DashState dashLogic;

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0x1363538", Offset = "0x1363538", VA = "0x1363538", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0x1363568", Offset = "0x1363568", VA = "0x1363568", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x13635A4", Offset = "0x13635A4", VA = "0x13635A4")]
	public DoubleDashAbility()
	{
	}
}
[Token(Token = "0x200024A")]
public class FinishersAttacksAbility : UnlockableAbilityBase
{
	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PlayerAnimator playerAnimator;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly int canFinisherHash;

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x13635B4", Offset = "0x13635B4", VA = "0x13635B4", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0x136360C", Offset = "0x136360C", VA = "0x136360C", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0x136364C", Offset = "0x136364C", VA = "0x136364C")]
	public FinishersAttacksAbility()
	{
	}
}
[Token(Token = "0x200024B")]
public class TrailDashAbility : DashAbility
{
	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public PooledParticleEffect particleEffect;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 startRotation;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem particles;

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0x13636AC", Offset = "0x13636AC", VA = "0x13636AC", Slot = "10")]
	protected override void DashLogic_OnDashStart(Vector3 obj)
	{
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0x13636E0", Offset = "0x13636E0", VA = "0x13636E0", Slot = "11")]
	protected override void DashLogic_OnDashEnd(Vector3 obj)
	{
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x13636EC", Offset = "0x13636EC", VA = "0x13636EC", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0x136385C", Offset = "0x136385C", VA = "0x136385C", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x1363918", Offset = "0x1363918", VA = "0x1363918")]
	public TrailDashAbility()
	{
	}
}
[Token(Token = "0x200024C")]
public class TrippleDashAbility : AbilityBase
{
	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DashState dashLogic;

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x1363928", Offset = "0x1363928", VA = "0x1363928", Slot = "8")]
	protected override void Activate()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x1363958", Offset = "0x1363958", VA = "0x1363958", Slot = "9")]
	protected override void Deactivate()
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x1363994", Offset = "0x1363994", VA = "0x1363994")]
	public TrippleDashAbility()
	{
	}
}
[Token(Token = "0x200024D")]
public abstract class UnlockableAbilityBase : AbilityBase
{
	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x13639A4", Offset = "0x13639A4", VA = "0x13639A4", Slot = "7")]
	public override void TryActivate()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x1363174", Offset = "0x1363174", VA = "0x1363174")]
	protected UnlockableAbilityBase()
	{
	}
}
[Token(Token = "0x200024E")]
public class CustomHand : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200024F")]
	public class HandAbilityEvent : UnityEvent<HandAbilityBase>
	{
		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x1365014", Offset = "0x1365014", VA = "0x1365014")]
		public HandAbilityEvent()
		{
		}
	}

	[Token(Token = "0x400088B")]
	public const string ANIM_LAYER_NAME_POINT = "Point Layer";

	[Token(Token = "0x400088C")]
	public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

	[Token(Token = "0x400088D")]
	public const string ANIM_PARAM_NAME_FLEX = "Flex";

	[Token(Token = "0x400088E")]
	public const string ANIM_PARAM_NAME_POSE = "Pose";

	[Token(Token = "0x400088F")]
	public const string ANIM_PARAM_NAME_BLOCK = "Block";

	[Token(Token = "0x4000890")]
	public const string ANIM_PARAM_NAME_PINCH = "Pinch";

	[Token(Token = "0x4000891")]
	public const float THRESH_COLLISION_FLEX = 0.9f;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float INPUT_RATE_CHANGE;

	[Token(Token = "0x4000893")]
	public const float COLLIDER_SCALE_MIN = 0.01f;

	[Token(Token = "0x4000894")]
	public const float COLLIDER_SCALE_MAX = 1f;

	[Token(Token = "0x4000895")]
	public const float COLLIDER_SCALE_PER_SECOND = 1f;

	[Token(Token = "0x4000896")]
	public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

	[Token(Token = "0x4000897")]
	public const float THUMB_DEBOUNCE_TIME = 0.15f;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Animator m_animator;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected HandPose m_defaultGrabPose;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected HandPose genericPose;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected bool isRightHand;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected Transform offset;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject chain;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject ghost;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform mothOrigin;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform rotationParent;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public HandUIController[] uiControllers;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Renderer[] pauseRenderers;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Events")]
	[SerializeField]
	private HandAbilityEvent onAbilityChanged;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected XRRayInteractor interactor;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected XRControllerVelocity velocityController;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected int m_animLayerIndexThumb;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected int m_animLayerIndexPoint;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected int m_animParamIndexFlex;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected int m_animParamIndexPose;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected int m_animParamPinchPose;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected bool m_isPointing;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	protected bool m_isGivingThumbsUp;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected float m_pointBlend;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	protected float m_thumbsUpBlend;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected HandInputProvider inputProvider;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected HandAbilityBase currentHandAbility;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private HandAbilityBase[] abilities;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected bool restoreOnInputAcquired;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	public bool debug;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	protected bool isActivate;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected List<Renderer> showAfterInputFocusAcquired;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private List<Collider> showCollidersFocusAquired;

	[Token(Token = "0x17000116")]
	public XRControllerVelocity VelocityController
	{
		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x1363A78", Offset = "0x1363A78", VA = "0x1363A78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000117")]
	public Animator HandAnimator
	{
		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x1363A80", Offset = "0x1363A80", VA = "0x1363A80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000118")]
	public bool HasAbility
	{
		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1363A88", Offset = "0x1363A88", VA = "0x1363A88")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000119")]
	public bool IsGhostEnabled
	{
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x1363AE8", Offset = "0x1363AE8", VA = "0x1363AE8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x1363B04", Offset = "0x1363B04", VA = "0x1363B04", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0x1363DA4", Offset = "0x1363DA4", VA = "0x1363DA4")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0x1363DFC", Offset = "0x1363DFC", VA = "0x1363DFC", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0x1363ECC", Offset = "0x1363ECC", VA = "0x1363ECC")]
	protected void UpdateCapTouchStates()
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0x1363F30", Offset = "0x1363F30", VA = "0x1363F30")]
	protected float InputValueRateChange(bool isDown, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0x1363F90", Offset = "0x1363F90", VA = "0x1363F90", Slot = "6")]
	protected virtual void UpdateAnimStates()
	{
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0x136413C", Offset = "0x136413C", VA = "0x136413C")]
	protected bool BlockLayers()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0x136423C", Offset = "0x136423C", VA = "0x136423C", Slot = "7")]
	public virtual void Pause()
	{
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0x1364614", Offset = "0x1364614", VA = "0x1364614", Slot = "8")]
	public virtual void Resume()
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x1364810", Offset = "0x1364810", VA = "0x1364810", Slot = "9")]
	public virtual void PauseGameplay()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x13648AC", Offset = "0x13648AC", VA = "0x13648AC", Slot = "10")]
	public virtual void ResumeGameplay()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x1364948", Offset = "0x1364948", VA = "0x1364948")]
	public void RegisterAbility(HandAbilityBase handAbility)
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x1364AAC", Offset = "0x1364AAC", VA = "0x1364AAC")]
	public void RemoveAbility(bool withActivate = true)
	{
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x1364B8C", Offset = "0x1364B8C", VA = "0x1364B8C")]
	public void BreakAbilities()
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0x13649C8", Offset = "0x13649C8", VA = "0x13649C8")]
	public void DeactivateAbilities(bool leaveCurrent)
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x1364B28", Offset = "0x1364B28", VA = "0x1364B28")]
	public void ActivateAbilities()
	{
	}

	[Token(Token = "0x6000AC8")]
	public bool TryGetAbility<T>(out T ability) where T : HandAbilityBase
	{
		return default(bool);
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0x1364C00", Offset = "0x1364C00", VA = "0x1364C00", Slot = "11")]
	public virtual void Activate()
	{
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0x1364C1C", Offset = "0x1364C1C", VA = "0x1364C1C", Slot = "12")]
	public virtual void Deactivate()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x1364C38", Offset = "0x1364C38", VA = "0x1364C38")]
	public void MothJumpIn()
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x1364D34", Offset = "0x1364D34", VA = "0x1364D34")]
	public void MothJumpOff()
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x1364E3C", Offset = "0x1364E3C", VA = "0x1364E3C")]
	public bool CanJumpIn()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0x1364F20", Offset = "0x1364F20", VA = "0x1364F20")]
	public CustomHand()
	{
	}
}
[Token(Token = "0x2000250")]
public class DashEvent : MonoBehaviour
{
	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DashState dashFrontLogic;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DashState dashBackLogic;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onDashStarted;

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x136505C", Offset = "0x136505C", VA = "0x136505C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x136511C", Offset = "0x136511C", VA = "0x136511C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x13651DC", Offset = "0x13651DC", VA = "0x13651DC", Slot = "4")]
	protected virtual void DashLogic_OnDashStart(Vector3 obj)
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0x13651F0", Offset = "0x13651F0", VA = "0x13651F0")]
	public DashEvent()
	{
	}
}
[Token(Token = "0x2000251")]
public class DifficultyHealthHandler : MonoBehaviour
{
	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Damageable mothDamageable;

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0x13651F8", Offset = "0x13651F8", VA = "0x13651F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x13652A0", Offset = "0x13652A0", VA = "0x13652A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x1365348", Offset = "0x1365348", VA = "0x1365348")]
	protected void OnBossStageCompleted()
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x13653E8", Offset = "0x13653E8", VA = "0x13653E8")]
	public DifficultyHealthHandler()
	{
	}
}
[Token(Token = "0x2000252")]
public class Freezer : MonoBehaviour
{
	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0x13653F0", Offset = "0x13653F0", VA = "0x13653F0")]
	public Freezer()
	{
	}
}
[Token(Token = "0x2000253")]
public class AlchemyAbility : HandAbilityBase
{
	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected CustomHand leftHand;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Throw")]
	protected AlchemyBottleSpawner spawner;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected Transform castParent;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected XRDirectInteractor directInteractor;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected float timeScale;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	protected float swipeProgressDamping;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected AlchemyBottle emptyBottlePrefab;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected AlchemyBottle dissolveEmptyBottlePrefab;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected int dissolveCount;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	protected float dissolveCooldown;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	protected AlchemyBottleUI bottleUI;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected Collider alchemyCollider;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Events")]
	public UnityEvent onAlchemyStarted;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent onGrabBottle;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEvent onThrowBottle;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEvent onGestureStarted;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public UnityEvent onGestureCompleted;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public UnityEvent onEmptyBottleUngrabbed;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float slowMotionDuration;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected XRInteractionManager interactionManager;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool isAnimate;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private AlchemyModificationBase bottle;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float lastEmptyBootleTimer;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private int emptyBootlesCount;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float closeHandTimer;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private AlchemyBottle currentBottleProjectile;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private readonly int AlchemyHash;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private readonly int StartAlchemyHash;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private readonly int SendHash;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private readonly int ThrowHash;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private readonly int GrabHash;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private readonly int SwipePowerHash;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private readonly int SwipeHash;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private readonly int ForceBottleHash;

	[Token(Token = "0x1700011A")]
	public AlchemyModificationBase ForceBottle
	{
		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x13653F8", Offset = "0x13653F8", VA = "0x13653F8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x1365400", Offset = "0x1365400", VA = "0x1365400")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700011B")]
	public InputActionReference AlchemyButton
	{
		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x1365410", Offset = "0x1365410", VA = "0x1365410")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x1365418", Offset = "0x1365418", VA = "0x1365418")]
		set
		{
		}
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0x13654A0", Offset = "0x13654A0", VA = "0x13654A0", Slot = "8")]
	public override void Init(CustomHand controller)
	{
	}

	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0x1365540", Offset = "0x1365540", VA = "0x1365540", Slot = "11")]
	public override void RegisterAbility()
	{
	}

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0x1365570", Offset = "0x1365570", VA = "0x1365570", Slot = "6")]
	protected override void RegisterInput()
	{
	}

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0x13656A0", Offset = "0x13656A0", VA = "0x13656A0", Slot = "7")]
	protected override void RemoveInput()
	{
	}

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0x13657D0", Offset = "0x13657D0", VA = "0x13657D0", Slot = "12")]
	public override void RemoveAbility()
	{
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0x1365800", Offset = "0x1365800", VA = "0x1365800")]
	private void ResetAlchemyAbility()
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0x1365AC8", Offset = "0x1365AC8", VA = "0x1365AC8", Slot = "10")]
	[ContextMenu("OnDisable Alchemy")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0x1365B18", Offset = "0x1365B18", VA = "0x1365B18", Slot = "13")]
	[ContextMenu("Break Alchemy")]
	public override void Break()
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x1365B70", Offset = "0x1365B70", VA = "0x1365B70", Slot = "4")]
	protected override void OnButtonDown(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0x13660A8", Offset = "0x13660A8", VA = "0x13660A8", Slot = "5")]
	protected override void OnButtonUp(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0x1366464", Offset = "0x1366464", VA = "0x1366464")]
	public bool OnSwipe(AlchemyModificationBase alchemy)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0x13667A4", Offset = "0x13667A4", VA = "0x13667A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0x13669A4", Offset = "0x13669A4", VA = "0x13669A4")]
	private void GrabBottle()
	{
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0x1366AF0", Offset = "0x1366AF0", VA = "0x1366AF0")]
	private void UngrabBottle()
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0x136629C", Offset = "0x136629C", VA = "0x136629C")]
	private void UngrabEmptyBottle()
	{
	}

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0x1366CA4", Offset = "0x1366CA4", VA = "0x1366CA4")]
	public void OnGrabBottleUI()
	{
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x1366CC0", Offset = "0x1366CC0", VA = "0x1366CC0")]
	public void OnFlexEnter()
	{
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0x1366CDC", Offset = "0x1366CDC", VA = "0x1366CDC")]
	public void OnAlchemyStarted()
	{
	}

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0x1365E28", Offset = "0x1365E28", VA = "0x1365E28")]
	public void OnAlchemyCompleted()
	{
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x1366C68", Offset = "0x1366C68", VA = "0x1366C68")]
	public void OnThrowCompleted()
	{
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0x1366CE0", Offset = "0x1366CE0", VA = "0x1366CE0")]
	public void ForceDown()
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0x1366CF4", Offset = "0x1366CF4", VA = "0x1366CF4")]
	public void ForceUp()
	{
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0x1366D08", Offset = "0x1366D08", VA = "0x1366D08")]
	public AlchemyAbility()
	{
	}
}
[Token(Token = "0x2000254")]
public class AlchemyHandAbility : SwipeHandAbility
{
	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected AlchemyDatabase database;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected CustomHand leftHand;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AlchemyUI alchemyUI;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FollowTarget followTarget;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AlchemyModificationBase craftAbility;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool isAnimate;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private readonly int AlchemyHash;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly int SendHash;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private readonly int GetureHash;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly int SpawnHash;

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0x1366EAC", Offset = "0x1366EAC", VA = "0x1366EAC", Slot = "8")]
	public override void Init(CustomHand controller)
	{
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x1366F10", Offset = "0x1366F10", VA = "0x1366F10", Slot = "11")]
	public override void RegisterAbility()
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x1366F40", Offset = "0x1366F40", VA = "0x1366F40", Slot = "12")]
	public override void RemoveAbility()
	{
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0x1366F70", Offset = "0x1366F70", VA = "0x1366F70", Slot = "4")]
	protected override void OnButtonDown(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0x1367260", Offset = "0x1367260", VA = "0x1367260", Slot = "5")]
	protected override void OnButtonUp(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0x136738C", Offset = "0x136738C", VA = "0x136738C", Slot = "14")]
	protected override void OnSwipe(SwipeData gesture)
	{
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0x1367390", Offset = "0x1367390", VA = "0x1367390")]
	private void Fail()
	{
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0x1367498", Offset = "0x1367498", VA = "0x1367498")]
	public void OnSpawn()
	{
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0x136749C", Offset = "0x136749C", VA = "0x136749C")]
	public void OnAlchemyCompleted()
	{
	}

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0x13676CC", Offset = "0x13676CC", VA = "0x13676CC")]
	public AlchemyHandAbility()
	{
	}
}
[Token(Token = "0x2000255")]
public class AlchemyShootHandAbility : SelectHandAbility
{
	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject particle;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public StudioEventEmitter emitter;

	[Token(Token = "0x1700011C")]
	protected override string HoverAnimatorParam
	{
		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x13677A8", Offset = "0x13677A8", VA = "0x13677A8", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011D")]
	protected override string SelectAnimatorParam
	{
		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x13677E8", Offset = "0x13677E8", VA = "0x13677E8", Slot = "15")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0x1367828", Offset = "0x1367828", VA = "0x1367828", Slot = "19")]
	public override void OnSelectEntered(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0x13679C8", Offset = "0x13679C8", VA = "0x13679C8", Slot = "20")]
	public override void OnSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0x1367B60", Offset = "0x1367B60", VA = "0x1367B60", Slot = "16")]
	protected override bool CheckType(XRBaseInteractable interactable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x1367BD8", Offset = "0x1367BD8", VA = "0x1367BD8")]
	public AlchemyShootHandAbility()
	{
	}
}
[Token(Token = "0x2000256")]
public class DraggableHandAbility : SelectHandAbility
{
	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ParticleSystem magnetParticle;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public StudioEventEmitter startEmitter;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public StudioEventEmitter stopEmitter;

	[Token(Token = "0x1700011E")]
	protected override string HoverAnimatorParam
	{
		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x1367BE8", Offset = "0x1367BE8", VA = "0x1367BE8", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011F")]
	protected override string SelectAnimatorParam
	{
		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x1367C28", Offset = "0x1367C28", VA = "0x1367C28", Slot = "15")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x1367C68", Offset = "0x1367C68", VA = "0x1367C68", Slot = "19")]
	public override void OnSelectEntered(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0x1367E20", Offset = "0x1367E20", VA = "0x1367E20", Slot = "20")]
	public override void OnSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0x1367FB4", Offset = "0x1367FB4", VA = "0x1367FB4", Slot = "16")]
	protected override bool CheckType(XRBaseInteractable interactable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0x136802C", Offset = "0x136802C", VA = "0x136802C", Slot = "13")]
	public override void Break()
	{
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0x13681E0", Offset = "0x13681E0", VA = "0x13681E0")]
	public DraggableHandAbility()
	{
	}
}
[Token(Token = "0x2000257")]
public class HandAbilityBase : MonoBehaviour
{
	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected InputActionReference button;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected CustomHand hand;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool isAnimated;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	protected bool isDown;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	protected bool isActivated;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onButtonDown;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onButtonUp;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onDisable;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onBreak;

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0x1366070", Offset = "0x1366070", VA = "0x1366070", Slot = "4")]
	protected virtual void OnButtonDown(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0x1366430", Offset = "0x1366430", VA = "0x1366430", Slot = "5")]
	protected virtual void OnButtonUp(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0x13681E8", Offset = "0x13681E8", VA = "0x13681E8", Slot = "6")]
	protected virtual void RegisterInput()
	{
	}

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0x1368318", Offset = "0x1368318", VA = "0x1368318", Slot = "7")]
	protected virtual void RemoveInput()
	{
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0x1368448", Offset = "0x1368448", VA = "0x1368448", Slot = "8")]
	public virtual void Init(CustomHand controller)
	{
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0x1368450", Offset = "0x1368450", VA = "0x1368450", Slot = "9")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0x1365AE0", Offset = "0x1365AE0", VA = "0x1365AE0", Slot = "10")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0x136845C", Offset = "0x136845C", VA = "0x136845C", Slot = "11")]
	public virtual void RegisterAbility()
	{
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0x1368488", Offset = "0x1368488", VA = "0x1368488", Slot = "12")]
	public virtual void RemoveAbility()
	{
	}

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0x1365B30", Offset = "0x1365B30", VA = "0x1365B30", Slot = "13")]
	[ContextMenu("Break")]
	public virtual void Break()
	{
	}

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0x1366EA4", Offset = "0x1366EA4", VA = "0x1366EA4")]
	public HandAbilityBase()
	{
	}
}
[Token(Token = "0x2000258")]
public class HandMothGrabAbility : HandAbilityBase
{
	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject mothCollider;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private XRDirectInteractor interactor;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float handTriggerCooldown;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float jumpOffTime;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool hoverMoth;

	[Token(Token = "0x17000120")]
	public bool Collider
	{
		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x13684C0", Offset = "0x13684C0", VA = "0x13684C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000121")]
	public bool IsTouchingMoth
	{
		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x1368580", Offset = "0x1368580", VA = "0x1368580")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000122")]
	public bool CanJump
	{
		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x1364EE4", Offset = "0x1364EE4", VA = "0x1364EE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0x136851C", Offset = "0x136851C", VA = "0x136851C", Slot = "8")]
	public override void Init(CustomHand controller)
	{
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0x1368568", Offset = "0x1368568", VA = "0x1368568", Slot = "10")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000B1B")]
	[Address(RVA = "0x1364CA8", Offset = "0x1364CA8", VA = "0x1364CA8")]
	public void OnMothJumpIn()
	{
	}

	[Token(Token = "0x6000B1C")]
	[Address(RVA = "0x1364DA4", Offset = "0x1364DA4", VA = "0x1364DA4")]
	public void OnMothJumpOff()
	{
	}

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0x1368588", Offset = "0x1368588", VA = "0x1368588")]
	public void OnMothHoverEnter(HoverEnterEventArgs args)
	{
	}

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0x1368608", Offset = "0x1368608", VA = "0x1368608")]
	public void OnMothHoverExit(HoverExitEventArgs args)
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0x1368684", Offset = "0x1368684", VA = "0x1368684", Slot = "13")]
	public override void Break()
	{
	}

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0x136869C", Offset = "0x136869C", VA = "0x136869C")]
	public HandMothGrabAbility()
	{
	}
}
[Token(Token = "0x2000259")]
public class HandUIController : MonoBehaviour
{
	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider collider;

	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CustomHand hand;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HandUIController anotherController;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CapsuleCustomCollider capsule;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TriggerEnter triggerEnter;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ColliderButton button;

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0x13686AC", Offset = "0x13686AC", VA = "0x13686AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0x13686CC", Offset = "0x13686CC", VA = "0x13686CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0x1368930", Offset = "0x1368930", VA = "0x1368930")]
	public void OnHoverEnter(Collider coll)
	{
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0x136876C", Offset = "0x136876C", VA = "0x136876C")]
	public void OnHoverExit(Collider coll)
	{
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0x1368BB4", Offset = "0x1368BB4", VA = "0x1368BB4")]
	private void ColliderButton_OnClickGlobal(ColliderButton obj)
	{
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0x1368C94", Offset = "0x1368C94", VA = "0x1368C94")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0x1368E08", Offset = "0x1368E08", VA = "0x1368E08")]
	private void Activate()
	{
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0x1368DDC", Offset = "0x1368DDC", VA = "0x1368DDC")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0x136486C", Offset = "0x136486C", VA = "0x136486C")]
	public void PauseGameplay()
	{
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0x1364908", Offset = "0x1364908", VA = "0x1364908")]
	public void ResumeGameplay()
	{
	}

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0x1368E28", Offset = "0x1368E28", VA = "0x1368E28")]
	public HandUIController()
	{
	}
}
[Token(Token = "0x200025A")]
public class HandVisuals : MonoBehaviour
{
	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Glass")]
	protected Renderer glassRenderer;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected int glassIndex;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Texture2D[] abilityGlassTextures;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected readonly int textureHash;

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0x1368E30", Offset = "0x1368E30", VA = "0x1368E30", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0x1368E34", Offset = "0x1368E34", VA = "0x1368E34")]
	public void OnAbilityUnlocked()
	{
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0x1368F40", Offset = "0x1368F40", VA = "0x1368F40")]
	public HandVisuals()
	{
	}
}
[Token(Token = "0x200025B")]
public class ClearInventoryHandAbility : SwipeHandAbility
{
	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly int DumpHash;

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0x1368F98", Offset = "0x1368F98", VA = "0x1368F98", Slot = "4")]
	protected override void OnButtonDown(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x1368FDC", Offset = "0x1368FDC", VA = "0x1368FDC", Slot = "12")]
	public override void RemoveAbility()
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x1369024", Offset = "0x1369024", VA = "0x1369024", Slot = "14")]
	protected override void OnSwipe(SwipeData obj)
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0x1369068", Offset = "0x1369068", VA = "0x1369068")]
	public void OnDumpResources()
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0x1369244", Offset = "0x1369244", VA = "0x1369244")]
	public void OnDumpCompleted()
	{
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0x1369254", Offset = "0x1369254", VA = "0x1369254")]
	public ClearInventoryHandAbility()
	{
	}
}
[Token(Token = "0x200025C")]
public class InscriptionHandAbility : DraggableHandAbility
{
	[Token(Token = "0x17000123")]
	protected override string HoverAnimatorParam
	{
		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x13692AC", Offset = "0x13692AC", VA = "0x13692AC", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000124")]
	protected override string SelectAnimatorParam
	{
		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x13692EC", Offset = "0x13692EC", VA = "0x13692EC", Slot = "15")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0x136932C", Offset = "0x136932C", VA = "0x136932C", Slot = "16")]
	protected override bool CheckType(XRBaseInteractable interactable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0x13693B0", Offset = "0x13693B0", VA = "0x13693B0")]
	public InscriptionHandAbility()
	{
	}
}
[Token(Token = "0x200025D")]
public class InventoryHand : MonoBehaviour
{
	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InventoryHandSlot[] slots;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator animator;

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0x13693B8", Offset = "0x13693B8", VA = "0x13693B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0x1369944", Offset = "0x1369944", VA = "0x1369944")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0x1369A40", Offset = "0x1369A40", VA = "0x1369A40")]
	private void OnIventoryChanged(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0x1369B3C", Offset = "0x1369B3C", VA = "0x1369B3C")]
	public InventoryHand()
	{
	}
}
[Serializable]
[Token(Token = "0x200025E")]
public class InventoryHandSlot
{
	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Resource resource;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer renderer;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] materials;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject updateParticle;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject updateLineParticle;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] steps;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public FMODStudioParameterSetter parameterSetter;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public StudioEventEmitter collectEmitter;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MaterialPropertyBlock block;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float currentValue;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TweenerCore<float, float, FloatOptions> tween;

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0x13695A0", Offset = "0x13695A0", VA = "0x13695A0")]
	public void Init()
	{
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0x1369610", Offset = "0x1369610", VA = "0x1369610")]
	public void Update(AmountResources resources, bool enableParticle = true)
	{
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0x1369B44", Offset = "0x1369B44", VA = "0x1369B44")]
	private void OnUpdate()
	{
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0x1369C20", Offset = "0x1369C20", VA = "0x1369C20")]
	public InventoryHandSlot()
	{
	}
}
[Token(Token = "0x200025F")]
public class MagnetHandAbility : DraggableHandAbility
{
	[Token(Token = "0x17000125")]
	protected override string HoverAnimatorParam
	{
		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x1369C38", Offset = "0x1369C38", VA = "0x1369C38", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000126")]
	protected override string SelectAnimatorParam
	{
		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x1369C78", Offset = "0x1369C78", VA = "0x1369C78", Slot = "15")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0x1369CB8", Offset = "0x1369CB8", VA = "0x1369CB8", Slot = "16")]
	protected override bool CheckType(XRBaseInteractable interactable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0x1369D3C", Offset = "0x1369D3C", VA = "0x1369D3C")]
	public MagnetHandAbility()
	{
	}
}
[Token(Token = "0x2000260")]
public class ResourcesHandAbility : SelectHandAbility
{
	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected StudioEventEmitter failEventTrigger;

	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Header("Particles")]
	protected ParticleSystem failMagnetParticle;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected ParticleSystem magnetParticle;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	protected ParticleSystem saltMagnet;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected ParticleSystem sulfurMagnet;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected ParticleSystem mercuryMagnet;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private readonly int grabResourcebHash;

	[Token(Token = "0x17000127")]
	protected override string HoverAnimatorParam
	{
		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x1369D44", Offset = "0x1369D44", VA = "0x1369D44", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000128")]
	protected override string SelectAnimatorParam
	{
		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1369D84", Offset = "0x1369D84", VA = "0x1369D84", Slot = "15")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0x1369DC4", Offset = "0x1369DC4", VA = "0x1369DC4", Slot = "6")]
	protected override void RegisterInput()
	{
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0x136A0B4", Offset = "0x136A0B4", VA = "0x136A0B4", Slot = "7")]
	protected override void RemoveInput()
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0x136A3A4", Offset = "0x136A3A4", VA = "0x136A3A4")]
	private void PlayMagnetParticles(Resource resource)
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0x136A4D8", Offset = "0x136A4D8", VA = "0x136A4D8", Slot = "17")]
	public override void OnHoverEntered(HoverEnterEventArgs args)
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0x136A678", Offset = "0x136A678", VA = "0x136A678", Slot = "19")]
	public override void OnSelectEntered(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0x136ABC8", Offset = "0x136ABC8", VA = "0x136ABC8")]
	private void OnInventoryChanged(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0x136AC10", Offset = "0x136AC10", VA = "0x136AC10", Slot = "16")]
	protected override bool CheckType(XRBaseInteractable interactable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0x136AC64", Offset = "0x136AC64", VA = "0x136AC64")]
	public ResourcesHandAbility()
	{
	}
}
[Token(Token = "0x2000261")]
public class CastHandAbility : HandAbilityBase
{
	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected InputActionReference velocityAction;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected Transform castParent;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected XRInteractionManager interactionManager;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected XRDirectInteractor directInteractor;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float minVelocityToThrow;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ThrowLabXRGrabInteractable currentInteractable;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly int throwHash;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private readonly int grabHash;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly int grabEmptyHash;

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0x136ACBC", Offset = "0x136ACBC", VA = "0x136ACBC", Slot = "4")]
	protected override void OnButtonDown(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0x136ADCC", Offset = "0x136ADCC", VA = "0x136ADCC", Slot = "5")]
	protected override void OnButtonUp(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0x136AF5C", Offset = "0x136AF5C", VA = "0x136AF5C")]
	public void OnThrowCompleted()
	{
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0x136AF6C", Offset = "0x136AF6C", VA = "0x136AF6C")]
	public CastHandAbility()
	{
	}
}
[Token(Token = "0x2000262")]
public class RightHandVisuals : HandVisuals
{
	[Token(Token = "0x2000263")]
	[CompilerGenerated]
	private sealed class <UnlockCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RightHandVisuals <>4__this;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int mixtureIndex;

		[Token(Token = "0x17000129")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0x136BAFC", Offset = "0x136BAFC", VA = "0x136BAFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0x136BB44", Offset = "0x136BB44", VA = "0x136BB44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x136B758", Offset = "0x136B758", VA = "0x136B758")]
		[DebuggerHidden]
		public <UnlockCoroutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x136B850", Offset = "0x136B850", VA = "0x136B850", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x136B854", Offset = "0x136B854", VA = "0x136B854", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x136BB04", Offset = "0x136BB04", VA = "0x136BB04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Renderer handRenderer;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected int handMaterialIndex;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Renderer alchemyRenderer;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected int materialIndex;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Alchemy")]
	public HandMixtureData[] mixtureDatas;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected readonly int emmisionHash;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected readonly int blendHash;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected readonly int glyphHash;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected readonly int glyphColorHash;

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0x136B020", Offset = "0x136B020", VA = "0x136B020", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0x136B2B8", Offset = "0x136B2B8", VA = "0x136B2B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0x136B514", Offset = "0x136B514", VA = "0x136B514")]
	public void OnBottleCrafted(AlchemyModificationBase bottle)
	{
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0x136B518", Offset = "0x136B518", VA = "0x136B518")]
	public void OnBottleThrowed()
	{
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0x136B57C", Offset = "0x136B57C", VA = "0x136B57C")]
	public void OnBottleGrabbed(AlchemyModificationBase bottle)
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0x136B5E8", Offset = "0x136B5E8", VA = "0x136B5E8")]
	public void OnAlchemyUnlocked(AlchemyModificationBase mixture)
	{
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0x136B6D4", Offset = "0x136B6D4", VA = "0x136B6D4")]
	[IteratorStateMachine(typeof(<UnlockCoroutine>d__15))]
	private IEnumerator UnlockCoroutine(int mixtureIndex)
	{
		return null;
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0x136B780", Offset = "0x136B780", VA = "0x136B780")]
	public RightHandVisuals()
	{
	}
}
[Serializable]
[Token(Token = "0x2000264")]
public class HandMixtureData
{
	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AlchemyModificationBase alchemy;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject particle;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture glyphsTexture;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture alchemyHandTexture;

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0x136BB4C", Offset = "0x136BB4C", VA = "0x136BB4C")]
	public HandMixtureData()
	{
	}
}
[Token(Token = "0x2000265")]
public abstract class SelectHandAbility : HandAbilityBase
{
	[Serializable]
	[Token(Token = "0x2000266")]
	public class SelectHandAbilityEvent : UnityEvent<SelectHandAbility>
	{
		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x136BDDC", Offset = "0x136BDDC", VA = "0x136BDDC")]
		public SelectHandAbilityEvent()
		{
		}
	}

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected XRRayOverrideInteractor interactor;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Events")]
	protected SelectHandAbilityEvent onHover;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected SelectHandAbilityEvent onDeactivate;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected XRBaseInteractable currentInteractable;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected bool hover;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	protected bool select;

	[Token(Token = "0x1700012B")]
	protected abstract string HoverAnimatorParam
	{
		[Token(Token = "0x6000B64")]
		get;
	}

	[Token(Token = "0x1700012C")]
	protected abstract string SelectAnimatorParam
	{
		[Token(Token = "0x6000B65")]
		get;
	}

	[Token(Token = "0x6000B66")]
	protected abstract bool CheckType(XRBaseInteractable interactable);

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0x1369E90", Offset = "0x1369E90", VA = "0x1369E90", Slot = "6")]
	protected override void RegisterInput()
	{
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0x136A180", Offset = "0x136A180", VA = "0x136A180", Slot = "7")]
	protected override void RemoveInput()
	{
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0x136BB54", Offset = "0x136BB54", VA = "0x136BB54", Slot = "17")]
	public virtual void OnHoverEntered(HoverEnterEventArgs args)
	{
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x136BC2C", Offset = "0x136BC2C", VA = "0x136BC2C", Slot = "18")]
	public virtual void OnHoverExited(HoverExitEventArgs args)
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x136BCB0", Offset = "0x136BCB0", VA = "0x136BCB0", Slot = "19")]
	public virtual void OnSelectEntered(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x136BD40", Offset = "0x136BD40", VA = "0x136BD40", Slot = "20")]
	public virtual void OnSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0x1367AE0", Offset = "0x1367AE0", VA = "0x1367AE0")]
	protected void ResetInteractable()
	{
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0x1368144", Offset = "0x1368144", VA = "0x1368144", Slot = "13")]
	public override void Break()
	{
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0x1367BE0", Offset = "0x1367BE0", VA = "0x1367BE0")]
	protected SelectHandAbility()
	{
	}
}
[Token(Token = "0x2000267")]
public abstract class SwipeHandAbility : HandAbilityBase
{
	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected SwipeDetector swipeDetector;

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0x1366EE4", Offset = "0x1366EE4", VA = "0x1366EE4", Slot = "8")]
	public override void Init(CustomHand controller)
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0x136BE24", Offset = "0x136BE24", VA = "0x136BE24", Slot = "6")]
	protected override void RegisterInput()
	{
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0x136BEA8", Offset = "0x136BEA8", VA = "0x136BEA8", Slot = "7")]
	protected override void RemoveInput()
	{
	}

	[Token(Token = "0x6000B74")]
	protected abstract void OnSwipe(SwipeData obj);

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0x13677A0", Offset = "0x13677A0", VA = "0x13677A0")]
	protected SwipeHandAbility()
	{
	}
}
[Token(Token = "0x2000268")]
public class HandAnimatorProvider : MonoBehaviour
{
	[Token(Token = "0x6000B76")]
	[Address(RVA = "0x136BF2C", Offset = "0x136BF2C", VA = "0x136BF2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0x136BF30", Offset = "0x136BF30", VA = "0x136BF30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0x136BF34", Offset = "0x136BF34", VA = "0x136BF34")]
	public HandAnimatorProvider()
	{
	}
}
[Token(Token = "0x2000269")]
public class HandInputProvider : MonoBehaviour
{
	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandProviderBase currentProvider;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string currentController;

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0x136BF3C", Offset = "0x136BF3C", VA = "0x136BF3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0x136BF5C", Offset = "0x136BF5C", VA = "0x136BF5C")]
	public HandInputProvider()
	{
	}
}
[Token(Token = "0x200026A")]
public enum HandPoseId
{
	[Token(Token = "0x400093F")]
	Default,
	[Token(Token = "0x4000940")]
	Cast
}
[Token(Token = "0x200026B")]
public class HandPose : MonoBehaviour
{
	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_allowPointing;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool m_allowThumbsUp;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private HandPoseId m_poseId;

	[Token(Token = "0x1700012D")]
	public bool AllowPointing
	{
		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x136BF64", Offset = "0x136BF64", VA = "0x136BF64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012E")]
	public bool AllowThumbsUp
	{
		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x136BF6C", Offset = "0x136BF6C", VA = "0x136BF6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012F")]
	public HandPoseId PoseId
	{
		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x136BF74", Offset = "0x136BF74", VA = "0x136BF74")]
		get
		{
			return default(HandPoseId);
		}
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0x136BF7C", Offset = "0x136BF7C", VA = "0x136BF7C")]
	public HandPose()
	{
	}
}
[Token(Token = "0x200026C")]
public abstract class HandProviderBase : MonoBehaviour
{
	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 referenceLeftOffset;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 referenceRightOffset;

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0x136BF84", Offset = "0x136BF84", VA = "0x136BF84", Slot = "4")]
	public virtual void Init()
	{
	}

	[Token(Token = "0x6000B80")]
	public abstract float Flex(bool right);

	[Token(Token = "0x6000B81")]
	public abstract float Pinch(bool right);

	[Token(Token = "0x6000B82")]
	public abstract bool IsPointing(bool right);

	[Token(Token = "0x6000B83")]
	public abstract bool IsGivingThumbsUp(bool right);

	[Token(Token = "0x6000B84")]
	public abstract Vector2 Analog(bool right);

	[Token(Token = "0x6000B85")]
	public abstract Vector3 OffsetRotation(bool right);

	[Token(Token = "0x6000B86")]
	public abstract Vector3 OffsetPosition(bool right);

	[Token(Token = "0x6000B87")]
	public abstract Vector3 OffsetInteractorPosition(bool right);

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x1362734", Offset = "0x1362734", VA = "0x1362734")]
	protected HandProviderBase()
	{
	}
}
[Token(Token = "0x200026D")]
public class InventoryUI : MonoBehaviour
{
	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InventoryUIitem[] uIitems;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 angleRange;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool alwaysVisible;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PlayerInventory inventory;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isActive;

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x136BF88", Offset = "0x136BF88", VA = "0x136BF88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x136C124", Offset = "0x136C124", VA = "0x136C124")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x136C1B4", Offset = "0x136C1B4", VA = "0x136C1B4")]
	public void Show()
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x136C284", Offset = "0x136C284", VA = "0x136C284")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x136C3C0", Offset = "0x136C3C0", VA = "0x136C3C0")]
	private void OnIventoryChanged(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x136C3C4", Offset = "0x136C3C4", VA = "0x136C3C4")]
	private void OnIventoryClear()
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0x136C3C8", Offset = "0x136C3C8", VA = "0x136C3C8")]
	public InventoryUI()
	{
	}
}
[Token(Token = "0x200026E")]
public class InventoryUIitem : MonoBehaviour
{
	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI nameTB;

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0x136C2E4", Offset = "0x136C2E4", VA = "0x136C2E4")]
	public void Show(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0x136C39C", Offset = "0x136C39C", VA = "0x136C39C")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0x136C3E4", Offset = "0x136C3E4", VA = "0x136C3E4")]
	public InventoryUIitem()
	{
	}
}
[Token(Token = "0x200026F")]
public class PlayerInventory : MonoBehaviour
{
	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxItems;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int minResources;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool stack;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<AmountResources> resources;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<AmountResources> flyingResources;

	[Token(Token = "0x17000130")]
	public List<AmountResources> Resources
	{
		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x136C3EC", Offset = "0x136C3EC", VA = "0x136C3EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x136C3F4", Offset = "0x136C3F4", VA = "0x136C3F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x136C46C", Offset = "0x136C46C", VA = "0x136C46C")]
	public void AddFlyingResource(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x136C62C", Offset = "0x136C62C", VA = "0x136C62C")]
	public void RemoveFlyingItem(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x136C74C", Offset = "0x136C74C", VA = "0x136C74C")]
	public void AddResource(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0x136CA80", Offset = "0x136CA80", VA = "0x136CA80")]
	public void RemoveItem(AmountResources resource)
	{
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x136CC6C", Offset = "0x136CC6C", VA = "0x136CC6C")]
	public void RemoveItems(AmountResources[] resources)
	{
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0x136914C", Offset = "0x136914C", VA = "0x136914C")]
	public void ClearItems()
	{
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0x136CCD8", Offset = "0x136CCD8", VA = "0x136CCD8")]
	public float GetResourceAmount(Resource resource)
	{
		return default(float);
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0x136AA4C", Offset = "0x136AA4C", VA = "0x136AA4C")]
	public bool IsFullResource(Resource resource)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0x136CDE4", Offset = "0x136CDE4", VA = "0x136CDE4")]
	public PlayerInventory()
	{
	}
}
[Token(Token = "0x2000276")]
public class LeftHand : CustomHand
{
	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform collectableOrigin;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject throwParticle;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public ParticleSystem alchemyResourcesParticle;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public HandResourceSlot[] resourceSlots;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Transform pointerHelper;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public XRPointerBezier pointer;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public XRPointerVisuals pointerVisual;

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x136D250", Offset = "0x136D250", VA = "0x136D250")]
	public Vector3 GetResourceFollowPosition(Resource resource)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x13670D8", Offset = "0x13670D8", VA = "0x13670D8")]
	public void EnableAlchemyLoopParticle(bool play)
	{
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x136D33C", Offset = "0x136D33C", VA = "0x136D33C", Slot = "11")]
	public override void Activate()
	{
	}

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0x136D3A4", Offset = "0x136D3A4", VA = "0x136D3A4", Slot = "12")]
	public override void Deactivate()
	{
	}

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0x136D3FC", Offset = "0x136D3FC", VA = "0x136D3FC", Slot = "7")]
	public override void Pause()
	{
	}

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0x136D414", Offset = "0x136D414", VA = "0x136D414", Slot = "8")]
	public override void Resume()
	{
	}

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0x136D42C", Offset = "0x136D42C", VA = "0x136D42C", Slot = "9")]
	public override void PauseGameplay()
	{
	}

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0x136D444", Offset = "0x136D444", VA = "0x136D444", Slot = "10")]
	public override void ResumeGameplay()
	{
	}

	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0x136D35C", Offset = "0x136D35C", VA = "0x136D35C")]
	public void EnablePointer()
	{
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0x136D3C4", Offset = "0x136D3C4", VA = "0x136D3C4")]
	public void DisablePointer()
	{
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0x136D45C", Offset = "0x136D45C", VA = "0x136D45C")]
	public LeftHand()
	{
	}
}
[Serializable]
[Token(Token = "0x2000277")]
public struct HandResourceSlot
{
	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Resource resource;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform slot;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ParticleSystem alchemyLoop;
}
[Token(Token = "0x2000278")]
public class LeftHandAnimationProvider : HandAnimatorProvider
{
	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0x136D460", Offset = "0x136D460", VA = "0x136D460")]
	public LeftHandAnimationProvider()
	{
	}
}
[Token(Token = "0x2000279")]
public class MothCharacterActor : CharacterActorBase
{
	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
	private CharacterActions characterActions;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
	private PlayerAnimator playerAnimator;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
	private Damageable damageable;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
	private PlayerEffect effects;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
	private PlayerAudio audio;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
	private Animator animator;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
	private NavMeshAgent aiAgent;

	[Token(Token = "0x17000131")]
	public bool IsDying
	{
		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x136D468", Offset = "0x136D468", VA = "0x136D468")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000132")]
	public PlayerAnimator PlayerAnimator
	{
		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x136D48C", Offset = "0x136D48C", VA = "0x136D48C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000133")]
	public PlayerEffect Effects
	{
		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x136D494", Offset = "0x136D494", VA = "0x136D494")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000134")]
	public PlayerAudio Audio
	{
		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x136D49C", Offset = "0x136D49C", VA = "0x136D49C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000135")]
	public Damageable Damageable
	{
		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x136D4A4", Offset = "0x136D4A4", VA = "0x136D4A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000136")]
	public NavMeshAgent Agent
	{
		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x136D4AC", Offset = "0x136D4AC", VA = "0x136D4AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000137")]
	public MothCharacterActor CharacterActor
	{
		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x136D4B4", Offset = "0x136D4B4", VA = "0x136D4B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000138")]
	public CharacterActions CharacterActions
	{
		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x136D4B8", Offset = "0x136D4B8", VA = "0x136D4B8")]
		get
		{
			return default(CharacterActions);
		}
	}

	[Token(Token = "0x17000139")]
	public Damageable.DamageMessage LastDamageMessage
	{
		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x136D4C8", Offset = "0x136D4C8", VA = "0x136D4C8")]
		[CompilerGenerated]
		get
		{
			return default(Damageable.DamageMessage);
		}
		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x136D4D8", Offset = "0x136D4D8", VA = "0x136D4D8")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x6000BC2")]
	[Address(RVA = "0x136D4FC", Offset = "0x136D4FC", VA = "0x136D4FC", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x136D5C0", Offset = "0x136D5C0", VA = "0x136D5C0", Slot = "17")]
	public override void AddForce(ForceMessage message)
	{
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x136D690", Offset = "0x136D690", VA = "0x136D690")]
	public MothCharacterActor()
	{
	}
}
[Token(Token = "0x200027A")]
public class MovementRecognizer : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200027B")]
	public class MovementRecognizerEvent : UnityEvent<string>
	{
		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x136E328", Offset = "0x136E328", VA = "0x136E328")]
		public MovementRecognizerEvent()
		{
		}
	}

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XRNode inputSource;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public InputHelpers.Button inputButton;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float inputThreshold;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform movementSource;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float newPositionThresholdDistance;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float recognitionThreshold;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MovementRecognizerEvent onRecognized;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool creationMode;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string newGestureName;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool disableCreationWhenSave;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool debug;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject debugPrefab;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMesh resultText;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool loadDefaultGestures;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Gesture> trainingSet;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isMoving;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Vector3> postionosList;

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x136D698", Offset = "0x136D698", VA = "0x136D698")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x136D8AC", Offset = "0x136D8AC", VA = "0x136D8AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x136D990", Offset = "0x136D990", VA = "0x136D990")]
	private void StartMovement()
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x136DB6C", Offset = "0x136DB6C", VA = "0x136DB6C")]
	private void EndMovement()
	{
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x136DFA4", Offset = "0x136DFA4", VA = "0x136DFA4")]
	private void UpdateMovement()
	{
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x136E228", Offset = "0x136E228", VA = "0x136E228")]
	public MovementRecognizer()
	{
	}
}
[Serializable]
[Token(Token = "0x200027C")]
public struct PlayerActions
{
	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public BoolAction interact;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BoolAction dash;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BoolAction melee;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public BoolAction glide;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector2Action movement;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector2Action climbing;

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0x136E370", Offset = "0x136E370", VA = "0x136E370")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0x136E3C0", Offset = "0x136E3C0", VA = "0x136E3C0")]
	public void InitializeActions()
	{
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0x136E42C", Offset = "0x136E42C", VA = "0x136E42C")]
	public void SetValues(InputHandler inputHandler)
	{
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0x136E5C4", Offset = "0x136E5C4", VA = "0x136E5C4")]
	public void SetValues(PlayerActions characterActions)
	{
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0x136E608", Offset = "0x136E608", VA = "0x136E608")]
	public void Update(float dt)
	{
	}
}
[Token(Token = "0x200027D")]
public class PlayerAmulet : BlinkEffect
{
	[Token(Token = "0x200027E")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerAmulet <>4__this;

		[Token(Token = "0x1700013A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x136EB48", Offset = "0x136EB48", VA = "0x136EB48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x136EB90", Offset = "0x136EB90", VA = "0x136EB90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x136E6EC", Offset = "0x136E6EC", VA = "0x136E6EC")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x136E910", Offset = "0x136E910", VA = "0x136E910", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x136E914", Offset = "0x136E914", VA = "0x136E914", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x136EB50", Offset = "0x136EB50", VA = "0x136EB50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float maxDistance;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float signIntensity;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float minIntensity;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float maxIntensity;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform amuletOrigin;

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected new readonly string colorHash;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isGlowing;

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0x136E658", Offset = "0x136E658", VA = "0x136E658", Slot = "4")]
	public override void Blink()
	{
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0x136E678", Offset = "0x136E678", VA = "0x136E678", Slot = "5")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__8))]
	protected override IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0x136E714", Offset = "0x136E714", VA = "0x136E714")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0x136E8AC", Offset = "0x136E8AC", VA = "0x136E8AC")]
	public PlayerAmulet()
	{
	}
}
[Token(Token = "0x200027F")]
public class PlayerAnimationEventInvoker : AnimationEventInvoker
{
	[Token(Token = "0x2000280")]
	public class PlayerCombatEvents
	{
		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityAction<string> onAttackStarted;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityAction<string> onAttackCompleted;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityAction onDamageStarted;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityAction onDamageCompleted;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityAction onDiveLoopStarted;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityAction onDiveAttackStarted;

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x136F1E4", Offset = "0x136F1E4", VA = "0x136F1E4")]
		public PlayerCombatEvents()
		{
		}
	}

	[Token(Token = "0x2000281")]
	public class PlayerClimbEvents
	{
		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityAction onStartClimbCompleted;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityAction onWallLedgeCompleted;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityAction onWallJumpCompleted;

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x136F1EC", Offset = "0x136F1EC", VA = "0x136F1EC")]
		public PlayerClimbEvents()
		{
		}
	}

	[Token(Token = "0x2000282")]
	public class PlayerActionEvents
	{
		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityAction onLedgeCompleted;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityAction onReactCompleted;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityAction onSpawnCompleted;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityAction onTeleportCompleted;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityAction onStandardStarted;

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x136F1F4", Offset = "0x136F1F4", VA = "0x136F1F4")]
		public PlayerActionEvents()
		{
		}
	}

	[Token(Token = "0x2000283")]
	public class PlayerJumpEvents
	{
		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityAction onJumpStarted;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityAction onJumpLanded;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityAction onJumpCompleted;

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x136F1FC", Offset = "0x136F1FC", VA = "0x136F1FC")]
		public PlayerJumpEvents()
		{
		}
	}

	[Token(Token = "0x2000284")]
	public class PlayerSlideEvents
	{
		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityAction onStartSlideCompleted;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityAction onEndSlideCompleted;

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x136F204", Offset = "0x136F204", VA = "0x136F204")]
		public PlayerSlideEvents()
		{
		}
	}

	[Token(Token = "0x2000285")]
	public class PlayerDashEvents
	{
		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityAction onDashFrontStarted;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityAction onDashFrontCompleted;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityAction onDashBackStarted;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityAction onDashBackCompleted;

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x136F20C", Offset = "0x136F20C", VA = "0x136F20C")]
		public PlayerDashEvents()
		{
		}
	}

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayerCombatEvents CombatEvents;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayerClimbEvents ClimbEvents;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PlayerActionEvents ActionEvents;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PlayerJumpEvents JumpEvents;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlayerSlideEvents SlideEvents;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PlayerDashEvents DashEvents;

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0x136EB98", Offset = "0x136EB98", VA = "0x136EB98")]
	public void OnAttackStart(string name)
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0x136EBCC", Offset = "0x136EBCC", VA = "0x136EBCC")]
	public void OnAttackCompleted(string name)
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0x136EC00", Offset = "0x136EC00", VA = "0x136EC00")]
	public void DamageStart()
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x136EC34", Offset = "0x136EC34", VA = "0x136EC34")]
	public void DamageEnd()
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0x136EC68", Offset = "0x136EC68", VA = "0x136EC68")]
	public void OnDiveLoopStarted()
	{
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0x136EC9C", Offset = "0x136EC9C", VA = "0x136EC9C")]
	public void OnDiveAttackStarted()
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0x136ECD0", Offset = "0x136ECD0", VA = "0x136ECD0")]
	public void OnStandardEntered()
	{
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0x136ED04", Offset = "0x136ED04", VA = "0x136ED04")]
	public void OnJumpStarted()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0x136ED38", Offset = "0x136ED38", VA = "0x136ED38")]
	public void OnJumpLanded()
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0x136ED6C", Offset = "0x136ED6C", VA = "0x136ED6C")]
	public void OnJumpCompleted()
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0x136EDA0", Offset = "0x136EDA0", VA = "0x136EDA0")]
	public void OnStartClimbCompleted()
	{
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0x136EDD4", Offset = "0x136EDD4", VA = "0x136EDD4")]
	public void OnWallLedgeCompleted()
	{
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0x136EE08", Offset = "0x136EE08", VA = "0x136EE08")]
	public void WallJumpCompleted()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0x136EE3C", Offset = "0x136EE3C", VA = "0x136EE3C")]
	public void OnLedgeCompleted()
	{
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0x136EE70", Offset = "0x136EE70", VA = "0x136EE70")]
	public void OnReactCompleted()
	{
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0x136EEA4", Offset = "0x136EEA4", VA = "0x136EEA4")]
	public void OnSpawnCompleted()
	{
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0x136EED8", Offset = "0x136EED8", VA = "0x136EED8")]
	public void OnTeleportCompleted()
	{
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0x136EF0C", Offset = "0x136EF0C", VA = "0x136EF0C")]
	public void OnStartSlideCompleted()
	{
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0x136EF40", Offset = "0x136EF40", VA = "0x136EF40")]
	public void OnEndSlideCompleted()
	{
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0x136EF74", Offset = "0x136EF74", VA = "0x136EF74")]
	public void OnDashFrontStarted()
	{
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0x136EFA8", Offset = "0x136EFA8", VA = "0x136EFA8")]
	public void OnDashFrontCompleted()
	{
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0x136EFDC", Offset = "0x136EFDC", VA = "0x136EFDC")]
	public void OnDashBackStarted()
	{
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0x136F010", Offset = "0x136F010", VA = "0x136F010")]
	public void OnDashBackCompleted()
	{
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0x136F044", Offset = "0x136F044", VA = "0x136F044")]
	public PlayerAnimationEventInvoker()
	{
	}
}
[Token(Token = "0x2000286")]
public static class CharacterAnimatorParamId
{
	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int horizontalSpeedHash;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int verticalSpeedHash;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int horizontalAxisHash;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int verticalAxisHash;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int moveMagnitudeHash;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static readonly int deltaAngleHash;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly int inputDetectedHash;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static readonly int meleeAttack;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly int timeoutToIdleHash;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static readonly int dieHash;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly int dieWaterHash;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static readonly int groundedHash;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly int hurtXHash;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static readonly int hurtYHash;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly int hurtHash;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static readonly int stateTimeHash;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly int glideHash;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static readonly int glideDurationHash;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static readonly int ledgeHash;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public static readonly int teleportHash;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static readonly int interactionTypeHash;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public static readonly int interactHash;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static readonly int climbHash;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public static readonly int climbSpeedHash;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static readonly int wallJumpHash;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public static readonly int touchHash;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static readonly int touchWaitStartHash;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public static readonly int touchWaitStopHash;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static readonly int wallJumpXHash;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public static readonly int wallJumpYHash;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static readonly int additiveHitHash;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public static readonly int talkingHash;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static readonly int healHash;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public static readonly int mixtureHash;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static readonly int footPositionHash;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public static readonly int mothFootPositionHash;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static readonly int chargedHash;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public static readonly int canClimbUpHash;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static readonly int edgeWarningHash;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public static readonly int damagedEnemyHash;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static readonly int conversationStartHash;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public static readonly int conversationEndHash;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static readonly int cutscenedHash;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public static readonly int cutsceneEndHash;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static readonly int rotateHash;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public static readonly int landHash;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly int dashInAirHash;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public static readonly int turnHash;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static readonly int stopsHash;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public static readonly int chargedDashHash;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static readonly int chargedJumpHash;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public static readonly int slideStartHash;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static readonly int slideEndHash;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public static readonly int touchTypeHash;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static readonly int diveBoolHash;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public static readonly int startCageHash;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static readonly int stopCageHash;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public static readonly int landStateHash;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static readonly int landRunStateHash;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public static readonly int dashFrontStateHash;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static readonly int dashBackStateHash;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public static readonly int hurtStateHash;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static readonly int hurtAirStateHash;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public static readonly int slash1StateHash;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static readonly int slash2StateHash;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public static readonly int slash3StateHash;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static readonly int slash4StateHash;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public static readonly int stab1StateHash;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static readonly int stab2StateHash;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public static readonly int stab3StateHash;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static readonly int stab4StateHash;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public static readonly int chargedStartStateHash;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static readonly int chargedLoopStateHash;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public static readonly int chargedAttackStateHash;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public static readonly int chargedAttackDashStateHash;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public static readonly int diveStartStateHash;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public static readonly int diveLoopStateHash;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public static readonly int diveAttackStateHash;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public static readonly int dashForwardAttackStateHash;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public static readonly int dashBackAttackStateHash;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public static readonly int slashFinisherStateHash;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public static readonly int stabFinisherStateHash;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public static readonly int locomotionStateHash;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public static readonly int landingStateHash;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public static readonly int glideStateHash;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public static readonly int airStateHash;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public static readonly int teleportStateHash;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public static readonly int spawnStateHash;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public static readonly int wallClimbDownHash;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public static readonly int wallClimbUpHash;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public static readonly int wallClimbStartHash;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public static readonly int wallClimbLedgeHash;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public static readonly int wallClimbJumpHash;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public static readonly int wallClimbIdleHash;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public static readonly int turnRightStateHash;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public static readonly int recoilAttack;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public static readonly int dieSpiderHash;
}
[Token(Token = "0x2000287")]
public class PlayerAnimator : MonoBehaviour
{
	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerAnimationEventInvoker animationEventInvoker;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Animator scytheAnimator;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private XRCharacter character;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GrounderFBBIK grounder;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private LookAtIK lookAt;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected AnimatorStateInfo currentStateInfo;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected AnimatorStateInfo nextStateInfo;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected bool isAnimatorTransitioning;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected AnimatorStateInfo previousCurrentStateInfo;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected AnimatorStateInfo previousNextStateInfo;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	protected bool previousIsAnimatorTransitioning;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected float currentStateTime;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private TweenerCore<float, float, FloatOptions> grounderTween;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private TweenerCore<float, float, FloatOptions> lookAtTween;

	[Token(Token = "0x1700013C")]
	public float CurrentStateTime
	{
		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x13702CC", Offset = "0x13702CC", VA = "0x13702CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700013D")]
	public Animator Animator
	{
		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x13702D4", Offset = "0x13702D4", VA = "0x13702D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700013E")]
	public Animator ScytheAnimator
	{
		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x13702DC", Offset = "0x13702DC", VA = "0x13702DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0x13702E4", Offset = "0x13702E4", VA = "0x13702E4")]
	public void CacheAnimatorState()
	{
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0x1370434", Offset = "0x1370434", VA = "0x1370434")]
	public void UpdateStats()
	{
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0x13705E4", Offset = "0x13705E4", VA = "0x13705E4")]
	public void UpdateLocomotionStats(float angle, bool reset = false)
	{
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0x1370980", Offset = "0x1370980", VA = "0x1370980")]
	public void CacheFootPosition(bool inputDetected)
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0x1370A60", Offset = "0x1370A60", VA = "0x1370A60")]
	public bool LocomotionRootMotion()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0x1370B20", Offset = "0x1370B20", VA = "0x1370B20")]
	public bool IsInState(string stateName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0x1370B44", Offset = "0x1370B44", VA = "0x1370B44")]
	public bool IsInState(int stateHash)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0x1370B98", Offset = "0x1370B98", VA = "0x1370B98")]
	public bool IsInState(int[] stateHash)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0x1370C70", Offset = "0x1370C70", VA = "0x1370C70")]
	public bool IsInTransition()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0x1370C78", Offset = "0x1370C78", VA = "0x1370C78")]
	public bool IsInHurt()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0x1370DC4", Offset = "0x1370DC4", VA = "0x1370DC4")]
	public void Heal()
	{
	}

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0x1370E4C", Offset = "0x1370E4C", VA = "0x1370E4C")]
	public void Melee()
	{
	}

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0x1370EB8", Offset = "0x1370EB8", VA = "0x1370EB8")]
	public void ResetMelee()
	{
	}

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0x1370F28", Offset = "0x1370F28", VA = "0x1370F28")]
	public void Dive(bool state)
	{
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0x1370FA4", Offset = "0x1370FA4", VA = "0x1370FA4")]
	public void Recoil()
	{
	}

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0x1371010", Offset = "0x1371010", VA = "0x1371010")]
	public void ChargedDashAttack()
	{
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0x137107C", Offset = "0x137107C", VA = "0x137107C")]
	public void DamagedEnemy()
	{
	}

	[Token(Token = "0x6000C0E")]
	[Address(RVA = "0x13710E8", Offset = "0x13710E8", VA = "0x13710E8")]
	public void ResetDamagedEnemy()
	{
	}

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0x1371158", Offset = "0x1371158", VA = "0x1371158")]
	public void ChargedJumpAttack()
	{
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0x13711C4", Offset = "0x13711C4", VA = "0x13711C4")]
	public void ChargedAttack(bool state)
	{
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0x1371244", Offset = "0x1371244", VA = "0x1371244")]
	public void DashFront()
	{
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0x13712BC", Offset = "0x13712BC", VA = "0x13712BC")]
	public void DashBack()
	{
	}

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0x1371334", Offset = "0x1371334", VA = "0x1371334")]
	public void Idle()
	{
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0x13713A0", Offset = "0x13713A0", VA = "0x13713A0")]
	public void ResetIdle()
	{
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0x1371410", Offset = "0x1371410", VA = "0x1371410")]
	public void AdditiveHit()
	{
	}

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0x137147C", Offset = "0x137147C", VA = "0x137147C")]
	public void Die()
	{
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0x13714E8", Offset = "0x13714E8", VA = "0x13714E8")]
	public void DieWater()
	{
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0x1371554", Offset = "0x1371554", VA = "0x1371554")]
	public void DieSpider()
	{
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0x13715C0", Offset = "0x13715C0", VA = "0x13715C0")]
	public void Ledge()
	{
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0x137162C", Offset = "0x137162C", VA = "0x137162C")]
	public void Hurt(float x, float z, float force)
	{
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0x1371728", Offset = "0x1371728", VA = "0x1371728")]
	public void WallJump(float x, float z)
	{
	}

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0x13717E8", Offset = "0x13717E8", VA = "0x13717E8")]
	public void JumpHandIn()
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0x137188C", Offset = "0x137188C", VA = "0x137188C")]
	public void JumpHandOff()
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0x1371908", Offset = "0x1371908", VA = "0x1371908")]
	public void Interact(int type)
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0x13719A4", Offset = "0x13719A4", VA = "0x13719A4")]
	public void EdgeWarning()
	{
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0x1371A10", Offset = "0x1371A10", VA = "0x1371A10")]
	public void Mixture()
	{
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0x1371A7C", Offset = "0x1371A7C", VA = "0x1371A7C")]
	public void Cage(bool start)
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0x1371B08", Offset = "0x1371B08", VA = "0x1371B08")]
	public void Teleport()
	{
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0x1371B74", Offset = "0x1371B74", VA = "0x1371B74")]
	public void Touch(int index)
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0x1371C10", Offset = "0x1371C10", VA = "0x1371C10")]
	public void TouchWaitStart()
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0x1371C7C", Offset = "0x1371C7C", VA = "0x1371C7C")]
	public void TouchWaitStop()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0x1371CE8", Offset = "0x1371CE8", VA = "0x1371CE8")]
	public void Spawn()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0x1371D60", Offset = "0x1371D60", VA = "0x1371D60")]
	public void Land()
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0x1371DCC", Offset = "0x1371DCC", VA = "0x1371DCC")]
	public void StartConversation(bool lookAt = true)
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0x1371E3C", Offset = "0x1371E3C", VA = "0x1371E3C")]
	public void StopConversation()
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0x1371EAC", Offset = "0x1371EAC", VA = "0x1371EAC")]
	public void Stops()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0x1371F18", Offset = "0x1371F18", VA = "0x1371F18")]
	public void ResetStops()
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0x1371F88", Offset = "0x1371F88", VA = "0x1371F88")]
	public void Turn()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0x1371FF4", Offset = "0x1371FF4", VA = "0x1371FF4")]
	public void ResetTurn()
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0x1372064", Offset = "0x1372064", VA = "0x1372064")]
	public void SetInput(bool detected)
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0x13720E4", Offset = "0x13720E4", VA = "0x13720E4")]
	public void Climb(bool value)
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x1372164", Offset = "0x1372164", VA = "0x1372164")]
	public void ClimbSpeed(float speed)
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x13721E4", Offset = "0x13721E4", VA = "0x13721E4")]
	public void CanClimbUp(bool value)
	{
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x13708D4", Offset = "0x13708D4", VA = "0x13708D4")]
	public void Glide(bool glide, float duration)
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x1372264", Offset = "0x1372264", VA = "0x1372264")]
	public void SlideStart()
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x13722F0", Offset = "0x13722F0", VA = "0x13722F0")]
	public void SlideEnd()
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x137080C", Offset = "0x137080C", VA = "0x137080C")]
	public void Angle(float angle, float damp = 0.1f)
	{
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x1372360", Offset = "0x1372360", VA = "0x1372360")]
	public void SetGrounder(float value, float duration = 1f)
	{
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x13724AC", Offset = "0x13724AC", VA = "0x13724AC")]
	public void SetGrounderHandData()
	{
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x13724E4", Offset = "0x13724E4", VA = "0x13724E4")]
	public void ResetGrounderHandData()
	{
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x137251C", Offset = "0x137251C", VA = "0x137251C")]
	public void LookAtTarget(Transform target, float value = 1f, float duration = 1f)
	{
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0x1370E30", Offset = "0x1370E30", VA = "0x1370E30")]
	public void SetTrigger(int trigger)
	{
	}

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0x1372688", Offset = "0x1372688", VA = "0x1372688")]
	public void SetTrigger(string trigger)
	{
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0x13635EC", Offset = "0x13635EC", VA = "0x13635EC")]
	public void SetBool(int hash, bool value)
	{
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0x13726A4", Offset = "0x13726A4", VA = "0x13726A4")]
	public PlayerAnimator()
	{
	}
}
[Token(Token = "0x2000288")]
public class PlayerAudio : MonoBehaviour
{
	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerAudioEffect[] effects;

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0x137372C", Offset = "0x137372C", VA = "0x137372C")]
	public void PlayAudioEffect(int index)
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0x137377C", Offset = "0x137377C", VA = "0x137377C")]
	public void PlayAudioEffect(string name)
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0x1373828", Offset = "0x1373828", VA = "0x1373828")]
	public void StopAudioEffect(int index)
	{
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0x1373878", Offset = "0x1373878", VA = "0x1373878")]
	public void StopAudioEffect(string name)
	{
	}

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0x1373924", Offset = "0x1373924", VA = "0x1373924")]
	public PlayerAudio()
	{
	}
}
[Serializable]
[Token(Token = "0x2000289")]
public struct PlayerAudioEffect
{
	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string name;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public StudioEventEmitter eventEmitter;
}
[Token(Token = "0x200028A")]
public class PlayerBezierChain : BezierLine
{
	[Token(Token = "0x6000C47")]
	[Address(RVA = "0x137392C", Offset = "0x137392C", VA = "0x137392C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000C48")]
	[Address(RVA = "0x13739F0", Offset = "0x13739F0", VA = "0x13739F0")]
	public void OnGameSetup()
	{
	}

	[Token(Token = "0x6000C49")]
	[Address(RVA = "0x1373A14", Offset = "0x1373A14", VA = "0x1373A14")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C4A")]
	[Address(RVA = "0x1373AD8", Offset = "0x1373AD8", VA = "0x1373AD8")]
	private void OnSceneLoaded(SceneData scene)
	{
	}

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0x1373D00", Offset = "0x1373D00", VA = "0x1373D00")]
	public PlayerBezierChain()
	{
	}
}
[Token(Token = "0x200028B")]
public class PlayerBuilder : MonoBehaviour
{
	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int testCape;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool godMode;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int seeds;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Cape[] capes;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Damageable damageable;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnlockableAbilityBase[] combatAbilities;

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0x1373D08", Offset = "0x1373D08", VA = "0x1373D08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0x1373EDC", Offset = "0x1373EDC", VA = "0x1373EDC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0x1374030", Offset = "0x1374030", VA = "0x1374030")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0x1373E1C", Offset = "0x1373E1C", VA = "0x1373E1C")]
	private void OnCapeSelected(int capeIndex)
	{
	}

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0x1374184", Offset = "0x1374184", VA = "0x1374184")]
	private void OnUpgradeUnlocked(UnlockableAbilityScriptableObject upgrade)
	{
	}

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0x1374288", Offset = "0x1374288", VA = "0x1374288")]
	public PlayerBuilder()
	{
	}
}
[Token(Token = "0x200028C")]
public class PlayerChain : MonoBehaviour
{
	[Token(Token = "0x200028D")]
	[CompilerGenerated]
	private sealed class <Animate>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerChain <>4__this;

		[Token(Token = "0x17000140")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x13751B8", Offset = "0x13751B8", VA = "0x13751B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x1375200", Offset = "0x1375200", VA = "0x1375200", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1374FE0", Offset = "0x1374FE0", VA = "0x1374FE0")]
		[DebuggerHidden]
		public <Animate>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x13750F8", Offset = "0x13750F8", VA = "0x13750F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x13750FC", Offset = "0x13750FC", VA = "0x13750FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x13751C0", Offset = "0x13751C0", VA = "0x13751C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool showAtStart;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool onlyWhenInvisible;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GradientAlphaKey[] startAlphaKeys;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GradientColorKey[] startColorKeys;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GradientAlphaKey[] currentAlphaKeys;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Gradient currentGradient;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float alpha;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool isActive;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private TweenerCore<float, float, FloatOptions> tween;

	[Token(Token = "0x1700013F")]
	public bool IsActive
	{
		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1374290", Offset = "0x1374290", VA = "0x1374290")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000C53")]
	[Address(RVA = "0x1374298", Offset = "0x1374298", VA = "0x1374298")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C54")]
	[Address(RVA = "0x137488C", Offset = "0x137488C", VA = "0x137488C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C55")]
	[Address(RVA = "0x13749CC", Offset = "0x13749CC", VA = "0x13749CC")]
	private void OnSceneLoaded(SceneData scene)
	{
	}

	[Token(Token = "0x6000C56")]
	[Address(RVA = "0x13747F0", Offset = "0x13747F0", VA = "0x13747F0")]
	private void UpdateGradient()
	{
	}

	[Token(Token = "0x6000C57")]
	[Address(RVA = "0x1374AF8", Offset = "0x1374AF8", VA = "0x1374AF8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C58")]
	[Address(RVA = "0x1374F6C", Offset = "0x1374F6C", VA = "0x1374F6C")]
	[IteratorStateMachine(typeof(<Animate>d__17))]
	private IEnumerator Animate()
	{
		return null;
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0x1375008", Offset = "0x1375008", VA = "0x1375008")]
	private void OnCameraMoveStarted()
	{
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0x1374DB4", Offset = "0x1374DB4", VA = "0x1374DB4")]
	public void Show(float showDuration = 1f)
	{
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0x1374C00", Offset = "0x1374C00", VA = "0x1374C00")]
	public void Hide(float hideDuration = 1f)
	{
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0x13750C0", Offset = "0x13750C0", VA = "0x13750C0")]
	public PlayerChain()
	{
	}
}
[Token(Token = "0x200028E")]
public class PlayerCombatVFX : StateMachineBehaviour
{
	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Attacks attack;

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0x1375208", Offset = "0x1375208", VA = "0x1375208", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0x1375238", Offset = "0x1375238", VA = "0x1375238")]
	public PlayerCombatVFX()
	{
	}
}
[Token(Token = "0x200028F")]
public class PlayerCrackWallDamager : ContactDamager
{
	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Damageable mothDamageable;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int mothDamage;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float mothforce;

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0x1375240", Offset = "0x1375240", VA = "0x1375240", Slot = "4")]
	protected override void Collide(Collider other)
	{
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0x1375928", Offset = "0x1375928", VA = "0x1375928")]
	public PlayerCrackWallDamager()
	{
	}
}
[Token(Token = "0x2000290")]
public class PlayerEffect : AnimationEffectsController
{
	[Serializable]
	[Token(Token = "0x2000291")]
	public class DieSettings
	{
		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float duration;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material standardBodyMaterial;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material bodyMaterial;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material standardWingsMaterial;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material wingsMaterial;

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x1375CFC", Offset = "0x1375CFC", VA = "0x1375CFC")]
		public DieSettings()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000292")]
	public class RendererSettings
	{
		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Renderer helmetRenderer;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer furRenderer;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer bodyRenderer;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer wingsRenderer;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer furFurRenderer;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer helmetSimpleRenderer;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Renderer bodySimpleRenderer;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer furSimpleFurRenderer;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Renderer wingsSimpleRenderer;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Renderer physicsFur;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Renderer shadow;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Renderer scythe;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Renderer feathers;

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x1375D0C", Offset = "0x1375D0C", VA = "0x1375D0C")]
		public RendererSettings()
		{
		}
	}

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RendererSettings settings;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DieSettings dieSettings;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem[] diveLoopParticles;

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0x137593C", Offset = "0x137593C", VA = "0x137593C")]
	public void DieEffect()
	{
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0x1375AB8", Offset = "0x1375AB8", VA = "0x1375AB8")]
	public void ResetMaterials()
	{
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0x1375C34", Offset = "0x1375C34", VA = "0x1375C34")]
	public void DiveLoopStart()
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0x1375C94", Offset = "0x1375C94", VA = "0x1375C94")]
	public void DiveLoopEnd()
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0x1375CF4", Offset = "0x1375CF4", VA = "0x1375CF4")]
	public PlayerEffect()
	{
	}
}
[Token(Token = "0x2000293")]
public class PlayerFootstep : AnimationEffectsController
{
	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MaterialController materialController;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlayerAudio playerAudio;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string effectTag;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly int stepDefaultIndex;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly string stepDefaultTag;

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0x1375D14", Offset = "0x1375D14", VA = "0x1375D14", Slot = "4")]
	public override void InstantiateEffect(string effectName)
	{
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0x1375E3C", Offset = "0x1375E3C", VA = "0x1375E3C")]
	public PlayerFootstep()
	{
	}
}
[Token(Token = "0x2000294")]
public class PlayerGroundIndicator : MonoBehaviour
{
	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform startOrigin;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem particleSystem;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private LayerMask mask;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float floorMargin;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool alignWithNormal;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private RaycastHit hit;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform particleTrans;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isHidden;

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0x1375E9C", Offset = "0x1375E9C", VA = "0x1375E9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0x1375F30", Offset = "0x1375F30", VA = "0x1375F30")]
	public void Show()
	{
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0x1375ED4", Offset = "0x1375ED4", VA = "0x1375ED4")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0x1375F88", Offset = "0x1375F88", VA = "0x1375F88")]
	public void UpdateState(bool isGrounded)
	{
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0x13762E4", Offset = "0x13762E4", VA = "0x13762E4")]
	public PlayerGroundIndicator()
	{
	}
}
[Token(Token = "0x2000295")]
public class XRIDefaultInputActions : IInputActionCollection2, IInputActionCollection, IEnumerable<InputAction>, IEnumerable, IDisposable
{
	[Token(Token = "0x2000296")]
	public struct XRIHMDActions
	{
		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private XRIDefaultInputActions m_Wrapper;

		[Token(Token = "0x1700014E")]
		public InputAction Position
		{
			[Token(Token = "0x6000C91")]
			[Address(RVA = "0x1377B10", Offset = "0x1377B10", VA = "0x1377B10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		public InputAction Rotation
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0x1377B2C", Offset = "0x1377B2C", VA = "0x1377B2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		public bool enabled
		{
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0x1377BAC", Offset = "0x1377BAC", VA = "0x1377BAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x1377B08", Offset = "0x1377B08", VA = "0x1377B08")]
		public XRIHMDActions(XRIDefaultInputActions wrapper)
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x1377B48", Offset = "0x1377B48", VA = "0x1377B48")]
		public InputActionMap Get()
		{
			return null;
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x1377B64", Offset = "0x1377B64", VA = "0x1377B64")]
		public void Enable()
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x1377B88", Offset = "0x1377B88", VA = "0x1377B88")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x1377BD0", Offset = "0x1377BD0", VA = "0x1377BD0")]
		public static implicit operator InputActionMap(XRIHMDActions set)
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x1377BE8", Offset = "0x1377BE8", VA = "0x1377BE8")]
		public void SetCallbacks(IXRIHMDActions instance)
		{
		}
	}

	[Token(Token = "0x2000297")]
	public struct XRILeftHandActions
	{
		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private XRIDefaultInputActions m_Wrapper;

		[Token(Token = "0x17000151")]
		public InputAction Position
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0x1378384", Offset = "0x1378384", VA = "0x1378384")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		public InputAction Rotation
		{
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0x13783A0", Offset = "0x13783A0", VA = "0x13783A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		public InputAction Select
		{
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0x13783BC", Offset = "0x13783BC", VA = "0x13783BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public InputAction Activate
		{
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0x13783D8", Offset = "0x13783D8", VA = "0x13783D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		public InputAction UIPress
		{
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0x13783F4", Offset = "0x13783F4", VA = "0x13783F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		public InputAction HapticDevice
		{
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x1378410", Offset = "0x1378410", VA = "0x1378410")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		public InputAction TeleportSelect
		{
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0x137842C", Offset = "0x137842C", VA = "0x137842C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		public InputAction TeleportModeActivate
		{
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0x1378448", Offset = "0x1378448", VA = "0x1378448")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		public InputAction TeleportModeCancel
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x1378464", Offset = "0x1378464", VA = "0x1378464")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		public InputAction Turn
		{
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x1378480", Offset = "0x1378480", VA = "0x1378480")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015B")]
		public InputAction PlayerMove
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x137849C", Offset = "0x137849C", VA = "0x137849C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		public InputAction PlayerClimb
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x13784B8", Offset = "0x13784B8", VA = "0x13784B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015D")]
		public InputAction RotateAnchor
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x13784D4", Offset = "0x13784D4", VA = "0x13784D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		public InputAction TranslateAnchor
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x13784F0", Offset = "0x13784F0", VA = "0x13784F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015F")]
		public InputAction Magnet
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x137850C", Offset = "0x137850C", VA = "0x137850C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000160")]
		public InputAction TouchSubmit
		{
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x1378528", Offset = "0x1378528", VA = "0x1378528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000161")]
		public InputAction Dump
		{
			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0x1378544", Offset = "0x1378544", VA = "0x1378544")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000162")]
		public InputAction Pause
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x1378560", Offset = "0x1378560", VA = "0x1378560")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		public InputAction Resume
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x137857C", Offset = "0x137857C", VA = "0x137857C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000164")]
		public InputAction Exit
		{
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0x1378598", Offset = "0x1378598", VA = "0x1378598")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		public InputAction Velocity
		{
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0x13785B4", Offset = "0x13785B4", VA = "0x13785B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		public InputAction AngularVelocity
		{
			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0x13785D0", Offset = "0x13785D0", VA = "0x13785D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		public InputAction AlchemySelection
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0x13785EC", Offset = "0x13785EC", VA = "0x13785EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000168")]
		public InputAction HandAnalog
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x1378608", Offset = "0x1378608", VA = "0x1378608")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		public InputAction HandGrip
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x1378624", Offset = "0x1378624", VA = "0x1378624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016A")]
		public InputAction HandAnalogTouch
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x1378640", Offset = "0x1378640", VA = "0x1378640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		public InputAction HandTrigger
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x137865C", Offset = "0x137865C", VA = "0x137865C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		public InputAction Aim
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x1378678", Offset = "0x1378678", VA = "0x1378678")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		public InputAction DialogueSubmit
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x1378694", Offset = "0x1378694", VA = "0x1378694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		public InputAction DialogueCancel
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x13786B0", Offset = "0x13786B0", VA = "0x13786B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		public InputAction Interact
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x13786CC", Offset = "0x13786CC", VA = "0x13786CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000170")]
		public InputAction Cast
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x13786E8", Offset = "0x13786E8", VA = "0x13786E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000171")]
		public InputAction Recenter
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x1378704", Offset = "0x1378704", VA = "0x1378704")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		public InputAction WallJump
		{
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x1378720", Offset = "0x1378720", VA = "0x1378720")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000173")]
		public InputAction Glide
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x137873C", Offset = "0x137873C", VA = "0x137873C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		public InputAction Melee
		{
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0x1378758", Offset = "0x1378758", VA = "0x1378758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		public InputAction Dash
		{
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0x1378774", Offset = "0x1378774", VA = "0x1378774")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000176")]
		public bool enabled
		{
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0x13787F4", Offset = "0x13787F4", VA = "0x13787F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x137837C", Offset = "0x137837C", VA = "0x137837C")]
		public XRILeftHandActions(XRIDefaultInputActions wrapper)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x1378790", Offset = "0x1378790", VA = "0x1378790")]
		public InputActionMap Get()
		{
			return null;
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x13787AC", Offset = "0x13787AC", VA = "0x13787AC")]
		public void Enable()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x13787D0", Offset = "0x13787D0", VA = "0x13787D0")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x1378818", Offset = "0x1378818", VA = "0x1378818")]
		public static implicit operator InputActionMap(XRILeftHandActions set)
		{
			return null;
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x1378830", Offset = "0x1378830", VA = "0x1378830")]
		public void SetCallbacks(IXRILeftHandActions instance)
		{
		}
	}

	[Token(Token = "0x2000298")]
	public struct XRIRightHandActions
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private XRIDefaultInputActions m_Wrapper;

		[Token(Token = "0x17000177")]
		public InputAction Position
		{
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0x1380C7C", Offset = "0x1380C7C", VA = "0x1380C7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000178")]
		public InputAction Rotation
		{
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0x1380C98", Offset = "0x1380C98", VA = "0x1380C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000179")]
		public InputAction Select
		{
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0x1380CB4", Offset = "0x1380CB4", VA = "0x1380CB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		public InputAction Activate
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0x1380CD0", Offset = "0x1380CD0", VA = "0x1380CD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017B")]
		public InputAction UIPress
		{
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0x1380CEC", Offset = "0x1380CEC", VA = "0x1380CEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017C")]
		public InputAction HapticDevice
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0x1380D08", Offset = "0x1380D08", VA = "0x1380D08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		public InputAction TeleportSelect
		{
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0x1380D24", Offset = "0x1380D24", VA = "0x1380D24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017E")]
		public InputAction TeleportModeActivate
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0x1380D40", Offset = "0x1380D40", VA = "0x1380D40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017F")]
		public InputAction TeleportModeCancel
		{
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0x1380D5C", Offset = "0x1380D5C", VA = "0x1380D5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		public InputAction Turn
		{
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0x1380D78", Offset = "0x1380D78", VA = "0x1380D78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000181")]
		public InputAction Move
		{
			[Token(Token = "0x6000CD0")]
			[Address(RVA = "0x1380D94", Offset = "0x1380D94", VA = "0x1380D94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		public InputAction RotateAnchor
		{
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0x1380DB0", Offset = "0x1380DB0", VA = "0x1380DB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000183")]
		public InputAction TranslateAnchor
		{
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0x1380DCC", Offset = "0x1380DCC", VA = "0x1380DCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		public InputAction Glide
		{
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0x1380DE8", Offset = "0x1380DE8", VA = "0x1380DE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		public InputAction Melee
		{
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0x1380E04", Offset = "0x1380E04", VA = "0x1380E04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		public InputAction Interact
		{
			[Token(Token = "0x6000CD5")]
			[Address(RVA = "0x1380E20", Offset = "0x1380E20", VA = "0x1380E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000187")]
		public InputAction Dash
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0x1380E3C", Offset = "0x1380E3C", VA = "0x1380E3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		public InputAction WallJump
		{
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0x1380E58", Offset = "0x1380E58", VA = "0x1380E58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000189")]
		public InputAction CastVelocity
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0x1380E74", Offset = "0x1380E74", VA = "0x1380E74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018A")]
		public InputAction Cast
		{
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0x1380E90", Offset = "0x1380E90", VA = "0x1380E90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018B")]
		public InputAction Gesture
		{
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0x1380EAC", Offset = "0x1380EAC", VA = "0x1380EAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018C")]
		public InputAction Glyphs
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0x1380EC8", Offset = "0x1380EC8", VA = "0x1380EC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018D")]
		public InputAction Aim
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0x1380EE4", Offset = "0x1380EE4", VA = "0x1380EE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018E")]
		public InputAction DialogueSubmit
		{
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0x1380F00", Offset = "0x1380F00", VA = "0x1380F00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018F")]
		public InputAction DialogueCancel
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0x1380F1C", Offset = "0x1380F1C", VA = "0x1380F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		public InputAction Velocity
		{
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0x1380F38", Offset = "0x1380F38", VA = "0x1380F38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000191")]
		public InputAction AngularVelocity
		{
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0x1380F54", Offset = "0x1380F54", VA = "0x1380F54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public InputAction ChangePanel
		{
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0x1380F70", Offset = "0x1380F70", VA = "0x1380F70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000193")]
		public InputAction TouchSubmit
		{
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0x1380F8C", Offset = "0x1380F8C", VA = "0x1380F8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		public InputAction Recenter
		{
			[Token(Token = "0x6000CE3")]
			[Address(RVA = "0x1380FA8", Offset = "0x1380FA8", VA = "0x1380FA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000195")]
		public InputAction HandAnalog
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0x1380FC4", Offset = "0x1380FC4", VA = "0x1380FC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public InputAction HandGrip
		{
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0x1380FE0", Offset = "0x1380FE0", VA = "0x1380FE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000197")]
		public InputAction HandAnalogTouch
		{
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0x1380FFC", Offset = "0x1380FFC", VA = "0x1380FFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000198")]
		public InputAction HandTrigger
		{
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0x1381018", Offset = "0x1381018", VA = "0x1381018")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000199")]
		public InputAction PlayerClimb
		{
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0x1381034", Offset = "0x1381034", VA = "0x1381034")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		public InputAction Pause
		{
			[Token(Token = "0x6000CE9")]
			[Address(RVA = "0x1381050", Offset = "0x1381050", VA = "0x1381050")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019B")]
		public InputAction Magnet
		{
			[Token(Token = "0x6000CEA")]
			[Address(RVA = "0x138106C", Offset = "0x138106C", VA = "0x138106C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019C")]
		public bool enabled
		{
			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0x13810EC", Offset = "0x13810EC", VA = "0x13810EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x1380C74", Offset = "0x1380C74", VA = "0x1380C74")]
		public XRIRightHandActions(XRIDefaultInputActions wrapper)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x1381088", Offset = "0x1381088", VA = "0x1381088")]
		public InputActionMap Get()
		{
			return null;
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x13810A4", Offset = "0x13810A4", VA = "0x13810A4")]
		public void Enable()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x13810C8", Offset = "0x13810C8", VA = "0x13810C8")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x1381110", Offset = "0x1381110", VA = "0x1381110")]
		public static implicit operator InputActionMap(XRIRightHandActions set)
		{
			return null;
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x1381128", Offset = "0x1381128", VA = "0x1381128")]
		public void SetCallbacks(IXRIRightHandActions instance)
		{
		}
	}

	[Token(Token = "0x2000299")]
	public struct UIActions
	{
		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private XRIDefaultInputActions m_Wrapper;

		[Token(Token = "0x1700019D")]
		public InputAction UINavigate
		{
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0x1389578", Offset = "0x1389578", VA = "0x1389578")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		public InputAction UIPress
		{
			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0x1389594", Offset = "0x1389594", VA = "0x1389594")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019F")]
		public InputAction UIBack
		{
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0x13895B0", Offset = "0x13895B0", VA = "0x13895B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A0")]
		public InputAction UIDebug
		{
			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0x13895CC", Offset = "0x13895CC", VA = "0x13895CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		public bool enabled
		{
			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0x138964C", Offset = "0x138964C", VA = "0x138964C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x1389570", Offset = "0x1389570", VA = "0x1389570")]
		public UIActions(XRIDefaultInputActions wrapper)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x13895E8", Offset = "0x13895E8", VA = "0x13895E8")]
		public InputActionMap Get()
		{
			return null;
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x1389604", Offset = "0x1389604", VA = "0x1389604")]
		public void Enable()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x1389628", Offset = "0x1389628", VA = "0x1389628")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x1389670", Offset = "0x1389670", VA = "0x1389670")]
		public static implicit operator InputActionMap(UIActions set)
		{
			return null;
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x1389688", Offset = "0x1389688", VA = "0x1389688")]
		public void SetCallbacks(IUIActions instance)
		{
		}
	}

	[Token(Token = "0x200029A")]
	public interface IXRIHMDActions
	{
		[Token(Token = "0x6000CFC")]
		void OnPosition(InputAction.CallbackContext context);

		[Token(Token = "0x6000CFD")]
		void OnRotation(InputAction.CallbackContext context);
	}

	[Token(Token = "0x200029B")]
	public interface IXRILeftHandActions
	{
		[Token(Token = "0x6000CFE")]
		void OnPosition(InputAction.CallbackContext context);

		[Token(Token = "0x6000CFF")]
		void OnRotation(InputAction.CallbackContext context);

		[Token(Token = "0x6000D00")]
		void OnSelect(InputAction.CallbackContext context);

		[Token(Token = "0x6000D01")]
		void OnActivate(InputAction.CallbackContext context);

		[Token(Token = "0x6000D02")]
		void OnUIPress(InputAction.CallbackContext context);

		[Token(Token = "0x6000D03")]
		void OnHapticDevice(InputAction.CallbackContext context);

		[Token(Token = "0x6000D04")]
		void OnTeleportSelect(InputAction.CallbackContext context);

		[Token(Token = "0x6000D05")]
		void OnTeleportModeActivate(InputAction.CallbackContext context);

		[Token(Token = "0x6000D06")]
		void OnTeleportModeCancel(InputAction.CallbackContext context);

		[Token(Token = "0x6000D07")]
		void OnTurn(InputAction.CallbackContext context);

		[Token(Token = "0x6000D08")]
		void OnPlayerMove(InputAction.CallbackContext context);

		[Token(Token = "0x6000D09")]
		void OnPlayerClimb(InputAction.CallbackContext context);

		[Token(Token = "0x6000D0A")]
		void OnRotateAnchor(InputAction.CallbackContext context);

		[Token(Token = "0x6000D0B")]
		void OnTranslateAnchor(InputAction.CallbackContext context);

		[Token(Token = "0x6000D0C")]
		void OnMagnet(InputAction.CallbackContext context);

		[Token(Token = "0x6000D0D")]
		void OnTouchSubmit(InputAction.CallbackContext context);

		[Token(Token = "0x6000D0E")]
		void OnDump(InputAction.CallbackContext context);

		[Token(Token = "0x6000D0F")]
		void OnPause(InputAction.CallbackContext context);

		[Token(Token = "0x6000D10")]
		void OnResume(InputAction.CallbackContext context);

		[Token(Token = "0x6000D11")]
		void OnExit(InputAction.CallbackContext context);

		[Token(Token = "0x6000D12")]
		void OnVelocity(InputAction.CallbackContext context);

		[Token(Token = "0x6000D13")]
		void OnAngularVelocity(InputAction.CallbackContext context);

		[Token(Token = "0x6000D14")]
		void OnAlchemySelection(InputAction.CallbackContext context);

		[Token(Token = "0x6000D15")]
		void OnHandAnalog(InputAction.CallbackContext context);

		[Token(Token = "0x6000D16")]
		void OnHandGrip(InputAction.CallbackContext context);

		[Token(Token = "0x6000D17")]
		void OnHandAnalogTouch(InputAction.CallbackContext context);

		[Token(Token = "0x6000D18")]
		void OnHandTrigger(InputAction.CallbackContext context);

		[Token(Token = "0x6000D19")]
		void OnAim(InputAction.CallbackContext context);

		[Token(Token = "0x6000D1A")]
		void OnDialogueSubmit(InputAction.CallbackContext context);

		[Token(Token = "0x6000D1B")]
		void OnDialogueCancel(InputAction.CallbackContext context);

		[Token(Token = "0x6000D1C")]
		void OnInteract(InputAction.CallbackContext context);

		[Token(Token = "0x6000D1D")]
		void OnCast(InputAction.CallbackContext context);

		[Token(Token = "0x6000D1E")]
		void OnRecenter(InputAction.CallbackContext context);

		[Token(Token = "0x6000D1F")]
		void OnWallJump(InputAction.CallbackContext context);

		[Token(Token = "0x6000D20")]
		void OnGlide(InputAction.CallbackContext context);

		[Token(Token = "0x6000D21")]
		void OnMelee(InputAction.CallbackContext context);

		[Token(Token = "0x6000D22")]
		void OnDash(InputAction.CallbackContext context);
	}

	[Token(Token = "0x200029C")]
	public interface IXRIRightHandActions
	{
		[Token(Token = "0x6000D23")]
		void OnPosition(InputAction.CallbackContext context);

		[Token(Token = "0x6000D24")]
		void OnRotation(InputAction.CallbackContext context);

		[Token(Token = "0x6000D25")]
		void OnSelect(InputAction.CallbackContext context);

		[Token(Token = "0x6000D26")]
		void OnActivate(InputAction.CallbackContext context);

		[Token(Token = "0x6000D27")]
		void OnUIPress(InputAction.CallbackContext context);

		[Token(Token = "0x6000D28")]
		void OnHapticDevice(InputAction.CallbackContext context);

		[Token(Token = "0x6000D29")]
		void OnTeleportSelect(InputAction.CallbackContext context);

		[Token(Token = "0x6000D2A")]
		void OnTeleportModeActivate(InputAction.CallbackContext context);

		[Token(Token = "0x6000D2B")]
		void OnTeleportModeCancel(InputAction.CallbackContext context);

		[Token(Token = "0x6000D2C")]
		void OnTurn(InputAction.CallbackContext context);

		[Token(Token = "0x6000D2D")]
		void OnMove(InputAction.CallbackContext context);

		[Token(Token = "0x6000D2E")]
		void OnRotateAnchor(InputAction.CallbackContext context);

		[Token(Token = "0x6000D2F")]
		void OnTranslateAnchor(InputAction.CallbackContext context);

		[Token(Token = "0x6000D30")]
		void OnGlide(InputAction.CallbackContext context);

		[Token(Token = "0x6000D31")]
		void OnMelee(InputAction.CallbackContext context);

		[Token(Token = "0x6000D32")]
		void OnInteract(InputAction.CallbackContext context);

		[Token(Token = "0x6000D33")]
		void OnDash(InputAction.CallbackContext context);

		[Token(Token = "0x6000D34")]
		void OnWallJump(InputAction.CallbackContext context);

		[Token(Token = "0x6000D35")]
		void OnCastVelocity(InputAction.CallbackContext context);

		[Token(Token = "0x6000D36")]
		void OnCast(InputAction.CallbackContext context);

		[Token(Token = "0x6000D37")]
		void OnGesture(InputAction.CallbackContext context);

		[Token(Token = "0x6000D38")]
		void OnGlyphs(InputAction.CallbackContext context);

		[Token(Token = "0x6000D39")]
		void OnAim(InputAction.CallbackContext context);

		[Token(Token = "0x6000D3A")]
		void OnDialogueSubmit(InputAction.CallbackContext context);

		[Token(Token = "0x6000D3B")]
		void OnDialogueCancel(InputAction.CallbackContext context);

		[Token(Token = "0x6000D3C")]
		void OnVelocity(InputAction.CallbackContext context);

		[Token(Token = "0x6000D3D")]
		void OnAngularVelocity(InputAction.CallbackContext context);

		[Token(Token = "0x6000D3E")]
		void OnChangePanel(InputAction.CallbackContext context);

		[Token(Token = "0x6000D3F")]
		void OnTouchSubmit(InputAction.CallbackContext context);

		[Token(Token = "0x6000D40")]
		void OnRecenter(InputAction.CallbackContext context);

		[Token(Token = "0x6000D41")]
		void OnHandAnalog(InputAction.CallbackContext context);

		[Token(Token = "0x6000D42")]
		void OnHandGrip(InputAction.CallbackContext context);

		[Token(Token = "0x6000D43")]
		void OnHandAnalogTouch(InputAction.CallbackContext context);

		[Token(Token = "0x6000D44")]
		void OnHandTrigger(InputAction.CallbackContext context);

		[Token(Token = "0x6000D45")]
		void OnPlayerClimb(InputAction.CallbackContext context);

		[Token(Token = "0x6000D46")]
		void OnPause(InputAction.CallbackContext context);

		[Token(Token = "0x6000D47")]
		void OnMagnet(InputAction.CallbackContext context);
	}

	[Token(Token = "0x200029D")]
	public interface IUIActions
	{
		[Token(Token = "0x6000D48")]
		void OnUINavigate(InputAction.CallbackContext context);

		[Token(Token = "0x6000D49")]
		void OnUIPress(InputAction.CallbackContext context);

		[Token(Token = "0x6000D4A")]
		void OnUIBack(InputAction.CallbackContext context);

		[Token(Token = "0x6000D4B")]
		void OnUIDebug(InputAction.CallbackContext context);
	}

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly InputActionMap m_XRIHMD;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IXRIHMDActions m_XRIHMDActionsCallbackInterface;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly InputAction m_XRIHMD_Position;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly InputAction m_XRIHMD_Rotation;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly InputActionMap m_XRILeftHand;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private IXRILeftHandActions m_XRILeftHandActionsCallbackInterface;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly InputAction m_XRILeftHand_Position;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly InputAction m_XRILeftHand_Rotation;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly InputAction m_XRILeftHand_Select;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly InputAction m_XRILeftHand_Activate;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly InputAction m_XRILeftHand_UIPress;

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly InputAction m_XRILeftHand_HapticDevice;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly InputAction m_XRILeftHand_TeleportSelect;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly InputAction m_XRILeftHand_TeleportModeActivate;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly InputAction m_XRILeftHand_TeleportModeCancel;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private readonly InputAction m_XRILeftHand_Turn;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private readonly InputAction m_XRILeftHand_PlayerMove;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private readonly InputAction m_XRILeftHand_PlayerClimb;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private readonly InputAction m_XRILeftHand_RotateAnchor;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private readonly InputAction m_XRILeftHand_TranslateAnchor;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private readonly InputAction m_XRILeftHand_Magnet;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private readonly InputAction m_XRILeftHand_TouchSubmit;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private readonly InputAction m_XRILeftHand_Dump;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private readonly InputAction m_XRILeftHand_Pause;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private readonly InputAction m_XRILeftHand_Resume;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private readonly InputAction m_XRILeftHand_Exit;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private readonly InputAction m_XRILeftHand_Velocity;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private readonly InputAction m_XRILeftHand_AngularVelocity;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private readonly InputAction m_XRILeftHand_AlchemySelection;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private readonly InputAction m_XRILeftHand_HandAnalog;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private readonly InputAction m_XRILeftHand_HandGrip;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private readonly InputAction m_XRILeftHand_HandAnalogTouch;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private readonly InputAction m_XRILeftHand_HandTrigger;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private readonly InputAction m_XRILeftHand_Aim;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private readonly InputAction m_XRILeftHand_DialogueSubmit;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private readonly InputAction m_XRILeftHand_DialogueCancel;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private readonly InputAction m_XRILeftHand_Interact;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private readonly InputAction m_XRILeftHand_Cast;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private readonly InputAction m_XRILeftHand_Recenter;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private readonly InputAction m_XRILeftHand_WallJump;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private readonly InputAction m_XRILeftHand_Glide;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private readonly InputAction m_XRILeftHand_Melee;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private readonly InputAction m_XRILeftHand_Dash;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private readonly InputActionMap m_XRIRightHand;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private IXRIRightHandActions m_XRIRightHandActionsCallbackInterface;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private readonly InputAction m_XRIRightHand_Position;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private readonly InputAction m_XRIRightHand_Rotation;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private readonly InputAction m_XRIRightHand_Select;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private readonly InputAction m_XRIRightHand_Activate;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private readonly InputAction m_XRIRightHand_UIPress;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private readonly InputAction m_XRIRightHand_HapticDevice;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private readonly InputAction m_XRIRightHand_TeleportSelect;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private readonly InputAction m_XRIRightHand_TeleportModeActivate;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private readonly InputAction m_XRIRightHand_TeleportModeCancel;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private readonly InputAction m_XRIRightHand_Turn;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private readonly InputAction m_XRIRightHand_Move;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private readonly InputAction m_XRIRightHand_RotateAnchor;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private readonly InputAction m_XRIRightHand_TranslateAnchor;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private readonly InputAction m_XRIRightHand_Glide;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private readonly InputAction m_XRIRightHand_Melee;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private readonly InputAction m_XRIRightHand_Interact;

	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private readonly InputAction m_XRIRightHand_Dash;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private readonly InputAction m_XRIRightHand_WallJump;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private readonly InputAction m_XRIRightHand_CastVelocity;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private readonly InputAction m_XRIRightHand_Cast;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private readonly InputAction m_XRIRightHand_Gesture;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private readonly InputAction m_XRIRightHand_Glyphs;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private readonly InputAction m_XRIRightHand_Aim;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private readonly InputAction m_XRIRightHand_DialogueSubmit;

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private readonly InputAction m_XRIRightHand_DialogueCancel;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private readonly InputAction m_XRIRightHand_Velocity;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private readonly InputAction m_XRIRightHand_AngularVelocity;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private readonly InputAction m_XRIRightHand_ChangePanel;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private readonly InputAction m_XRIRightHand_TouchSubmit;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private readonly InputAction m_XRIRightHand_Recenter;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private readonly InputAction m_XRIRightHand_HandAnalog;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private readonly InputAction m_XRIRightHand_HandGrip;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private readonly InputAction m_XRIRightHand_HandAnalogTouch;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private readonly InputAction m_XRIRightHand_HandTrigger;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private readonly InputAction m_XRIRightHand_PlayerClimb;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private readonly InputAction m_XRIRightHand_Pause;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private readonly InputAction m_XRIRightHand_Magnet;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private readonly InputActionMap m_UI;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private IUIActions m_UIActionsCallbackInterface;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private readonly InputAction m_UI_UINavigate;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private readonly InputAction m_UI_UIPress;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private readonly InputAction m_UI_UIBack;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private readonly InputAction m_UI_UIDebug;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	private int m_GenericXRControllerSchemeIndex;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
	private int m_ContinuousMoveSchemeIndex;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private int m_NoncontinuousMoveSchemeIndex;

	[Token(Token = "0x17000142")]
	public InputActionAsset asset
	{
		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x13762EC", Offset = "0x13762EC", VA = "0x13762EC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000143")]
	public InputBinding? bindingMask
	{
		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x13775FC", Offset = "0x13775FC", VA = "0x13775FC", Slot = "7")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x1377624", Offset = "0x1377624", VA = "0x1377624", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x17000144")]
	public ReadOnlyArray<UnityEngine.InputSystem.InputDevice>? devices
	{
		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x1377670", Offset = "0x1377670", VA = "0x1377670", Slot = "9")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x13776B0", Offset = "0x13776B0", VA = "0x13776B0", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x17000145")]
	public ReadOnlyArray<InputControlScheme> controlSchemes
	{
		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x13776FC", Offset = "0x13776FC", VA = "0x13776FC", Slot = "11")]
		get
		{
			return default(ReadOnlyArray<InputControlScheme>);
		}
	}

	[Token(Token = "0x17000146")]
	public IEnumerable<InputBinding> bindings
	{
		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x13777A4", Offset = "0x13777A4", VA = "0x13777A4", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000147")]
	public XRIHMDActions XRIHMD
	{
		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x137783C", Offset = "0x137783C", VA = "0x137783C")]
		get
		{
			return default(XRIHMDActions);
		}
	}

	[Token(Token = "0x17000148")]
	public XRILeftHandActions XRILeftHand
	{
		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x137785C", Offset = "0x137785C", VA = "0x137785C")]
		get
		{
			return default(XRILeftHandActions);
		}
	}

	[Token(Token = "0x17000149")]
	public XRIRightHandActions XRIRightHand
	{
		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x137787C", Offset = "0x137787C", VA = "0x137787C")]
		get
		{
			return default(XRIRightHandActions);
		}
	}

	[Token(Token = "0x1700014A")]
	public UIActions UI
	{
		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x137789C", Offset = "0x137789C", VA = "0x137789C")]
		get
		{
			return default(UIActions);
		}
	}

	[Token(Token = "0x1700014B")]
	public InputControlScheme GenericXRControllerScheme
	{
		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x13778BC", Offset = "0x13778BC", VA = "0x13778BC")]
		get
		{
			return default(InputControlScheme);
		}
	}

	[Token(Token = "0x1700014C")]
	public InputControlScheme ContinuousMoveScheme
	{
		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x1377980", Offset = "0x1377980", VA = "0x1377980")]
		get
		{
			return default(InputControlScheme);
		}
	}

	[Token(Token = "0x1700014D")]
	public InputControlScheme NoncontinuousMoveScheme
	{
		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x1377A44", Offset = "0x1377A44", VA = "0x1377A44")]
		get
		{
			return default(InputControlScheme);
		}
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0x13762F4", Offset = "0x13762F4", VA = "0x13762F4")]
	public XRIDefaultInputActions()
	{
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0x13775A0", Offset = "0x13775A0", VA = "0x13775A0", Slot = "17")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0x1377718", Offset = "0x1377718", VA = "0x1377718", Slot = "12")]
	public bool Contains(InputAction action)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0x1377734", Offset = "0x1377734", VA = "0x1377734", Slot = "15")]
	public IEnumerator<InputAction> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0x1377750", Offset = "0x1377750", VA = "0x1377750", Slot = "16")]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0x137776C", Offset = "0x137776C", VA = "0x137776C", Slot = "13")]
	public void Enable()
	{
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0x1377788", Offset = "0x1377788", VA = "0x1377788", Slot = "14")]
	public void Disable()
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0x13777C0", Offset = "0x13777C0", VA = "0x13777C0", Slot = "5")]
	public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
	{
		return null;
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0x13777E0", Offset = "0x13777E0", VA = "0x13777E0", Slot = "6")]
	public int FindBinding(InputBinding bindingMask, out InputAction action)
	{
		return default(int);
	}
}
[Token(Token = "0x200029E")]
public class PlayerTouchController : MonoBehaviour
{
	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private XRSimpleInteractable interactable;

	[Token(Token = "0x170001A2")]
	public bool CanTouch
	{
		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x138A548", Offset = "0x138A548", VA = "0x138A548")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x138A550", Offset = "0x138A550", VA = "0x138A550")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001A3")]
	public bool IsTouching
	{
		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x138A55C", Offset = "0x138A55C", VA = "0x138A55C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A4")]
	public bool IsInGrabArea
	{
		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x138A5C4", Offset = "0x138A5C4", VA = "0x138A5C4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x138A5CC", Offset = "0x138A5CC", VA = "0x138A5CC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x138A5D8", Offset = "0x138A5D8", VA = "0x138A5D8")]
	public PlayerTouchController()
	{
	}
}
[Token(Token = "0x200029F")]
public class RightHand : CustomHand
{
	[Serializable]
	[Token(Token = "0x20002A0")]
	public class UnlockMixtureEvent : UnityEvent<AlchemyModificationBase>
	{
		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x138A784", Offset = "0x138A784", VA = "0x138A784")]
		public UnlockMixtureEvent()
		{
		}
	}

	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform castTranform;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UnlockMixtureEvent unlockMixtureEvent;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Transform abilitiesOrigin;

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x138A5E8", Offset = "0x138A5E8", VA = "0x138A5E8")]
	public void UnlockMixture(AlchemyModificationBase mixture)
	{
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x138A77C", Offset = "0x138A77C", VA = "0x138A77C")]
	public RightHand()
	{
	}
}
[Token(Token = "0x20002A1")]
public class RightHandAnimationProvider : HandAnimatorProvider
{
	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnThrowCompleted;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onAlchemyCompleted;

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0x138A7CC", Offset = "0x138A7CC", VA = "0x138A7CC")]
	public void OnThrow()
	{
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0x138A7E0", Offset = "0x138A7E0", VA = "0x138A7E0")]
	public void OnAlchemyCompleted()
	{
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0x138A7F4", Offset = "0x138A7F4", VA = "0x138A7F4")]
	public RightHandAnimationProvider()
	{
	}
}
[Token(Token = "0x20002A2")]
public class Scythe : MonoBehaviour
{
	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator scytheAnimator;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator mothAnimator;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] animations;

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0x138A7FC", Offset = "0x138A7FC", VA = "0x138A7FC")]
	public void Update()
	{
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0x138A950", Offset = "0x138A950", VA = "0x138A950")]
	public Scythe()
	{
	}
}
[Token(Token = "0x20002A3")]
public class AttackRecoil : MothState
{
	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float timeToDash;

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0x138B278", Offset = "0x138B278", VA = "0x138B278", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0x138B294", Offset = "0x138B294", VA = "0x138B294", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0x138B2E4", Offset = "0x138B2E4", VA = "0x138B2E4", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0x138B350", Offset = "0x138B350", VA = "0x138B350")]
	protected void CheckDash()
	{
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0x138B408", Offset = "0x138B408", VA = "0x138B408")]
	public AttackRecoil()
	{
	}
}
[Token(Token = "0x20002A4")]
public class CombatChargedFrontState : CombatStateBase
{
	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x138B41C", Offset = "0x138B41C", VA = "0x138B41C", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x138B4A0", Offset = "0x138B4A0", VA = "0x138B4A0", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x138B508", Offset = "0x138B508", VA = "0x138B508", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0x138B7B8", Offset = "0x138B7B8", VA = "0x138B7B8", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0x138B914", Offset = "0x138B914", VA = "0x138B914", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0x138B5A0", Offset = "0x138B5A0", VA = "0x138B5A0")]
	private void CheckAttack()
	{
	}

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0x138B99C", Offset = "0x138B99C", VA = "0x138B99C")]
	public CombatChargedFrontState()
	{
	}
}
[Token(Token = "0x20002A5")]
public class CombatChargedState : MothState
{
	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float holdDurationToEnterState;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float holdDurationToAttack;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool canAttack;

	[Token(Token = "0x6000D66")]
	[Address(RVA = "0x138BA04", Offset = "0x138BA04", VA = "0x138BA04", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0x138BA48", Offset = "0x138BA48", VA = "0x138BA48", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D68")]
	[Address(RVA = "0x138BA7C", Offset = "0x138BA7C", VA = "0x138BA7C", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0x138BAB0", Offset = "0x138BAB0", VA = "0x138BAB0", Slot = "12")]
	public override void PostUpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0x138BAF8", Offset = "0x138BAF8", VA = "0x138BAF8", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0x138BBC0", Offset = "0x138BBC0", VA = "0x138BBC0")]
	public CombatChargedState()
	{
	}
}
[Token(Token = "0x20002A6")]
public class CombatChargedUpState : CombatStateBase
{
	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float timeToDive;

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0x138BBD4", Offset = "0x138BBD4", VA = "0x138BBD4", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0x138BC58", Offset = "0x138BC58", VA = "0x138BC58", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0x138BCE8", Offset = "0x138BCE8", VA = "0x138BCE8", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0x138BDB4", Offset = "0x138BDB4", VA = "0x138BDB4")]
	public CombatChargedUpState()
	{
	}
}
[Token(Token = "0x20002A7")]
public class CombatDiveState : CombatStateBase
{
	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float minDistanceToDive;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float verticalSpeed;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float timeToDie;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool isUnlocked;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float maxStateDuration;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float currentStateTime;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float currentForceStateTime;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool checkTimer;

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0x138BDC4", Offset = "0x138BDC4", VA = "0x138BDC4", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0x138BE1C", Offset = "0x138BE1C", VA = "0x138BE1C", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0x138BF18", Offset = "0x138BF18", VA = "0x138BF18", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000D73")]
	[Address(RVA = "0x138BF9C", Offset = "0x138BF9C", VA = "0x138BF9C", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000D74")]
	[Address(RVA = "0x138C0C0", Offset = "0x138C0C0", VA = "0x138C0C0", Slot = "20")]
	protected override void RegisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000D75")]
	[Address(RVA = "0x138C588", Offset = "0x138C588", VA = "0x138C588", Slot = "21")]
	protected override void UnregisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000D76")]
	[Address(RVA = "0x138BFD0", Offset = "0x138BFD0", VA = "0x138BFD0")]
	private void CheckDieInAir(float dt)
	{
	}

	[Token(Token = "0x6000D77")]
	[Address(RVA = "0x138C020", Offset = "0x138C020", VA = "0x138C020")]
	private void CheckForceStateExit(float dt)
	{
	}

	[Token(Token = "0x6000D78")]
	[Address(RVA = "0x138CA50", Offset = "0x138CA50", VA = "0x138CA50")]
	public void OnDiveLoopStarted()
	{
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0x138CAF0", Offset = "0x138CAF0", VA = "0x138CAF0")]
	public void OnDiveAttackStarted()
	{
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0x138CB78", Offset = "0x138CB78", VA = "0x138CB78")]
	public CombatDiveState()
	{
	}
}
[Token(Token = "0x20002A8")]
public class CombatState : CombatStateBase
{
	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public CombatItem[] attacks;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool waitForStart;

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0x138CB94", Offset = "0x138CB94", VA = "0x138CB94", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0x138CCA4", Offset = "0x138CCA4", VA = "0x138CCA4", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0x138CD64", Offset = "0x138CD64", VA = "0x138CD64", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0x138CD98", Offset = "0x138CD98", VA = "0x138CD98")]
	private void OnMeleePressed()
	{
	}

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0x138CDE8", Offset = "0x138CDE8", VA = "0x138CDE8")]
	private void OnMeleeCanceled()
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0x138CE0C", Offset = "0x138CE0C", VA = "0x138CE0C", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000D81")]
	[Address(RVA = "0x138CE88", Offset = "0x138CE88", VA = "0x138CE88", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000D82")]
	[Address(RVA = "0x138CF10", Offset = "0x138CF10", VA = "0x138CF10", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000D83")]
	[Address(RVA = "0x138CF5C", Offset = "0x138CF5C", VA = "0x138CF5C")]
	private void ResetAllAttacks()
	{
	}

	[Token(Token = "0x6000D84")]
	[Address(RVA = "0x138CFC4", Offset = "0x138CFC4", VA = "0x138CFC4", Slot = "23")]
	public override void OnAttackStarted(string name)
	{
	}

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0x138D1D8", Offset = "0x138D1D8", VA = "0x138D1D8", Slot = "25")]
	public override void DamageStarted()
	{
	}

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0x138D28C", Offset = "0x138D28C", VA = "0x138D28C", Slot = "26")]
	public override void DamageEnded()
	{
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0x138D2CC", Offset = "0x138D2CC", VA = "0x138D2CC", Slot = "22")]
	protected override bool CheckCharged()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0x138D38C", Offset = "0x138D38C", VA = "0x138D38C")]
	public CombatState()
	{
	}
}
[Token(Token = "0x20002A9")]
public class CombatStateBase : MothState
{
	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public CombatItem attack;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Vector3 currentDirection;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected Collider[] overlapResult;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected bool damagerActive;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected int enemyLayer;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected bool isActive;

	[Token(Token = "0x4000AD5")]
	protected const float minEnemyDotCoeff = 0.2f;

	[Token(Token = "0x6000D89")]
	[Address(RVA = "0x138CC14", Offset = "0x138CC14", VA = "0x138CC14", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0x138B4CC", Offset = "0x138B4CC", VA = "0x138B4CC", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0x138B560", Offset = "0x138B560", VA = "0x138B560", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0x138D7C0", Offset = "0x138D7C0", VA = "0x138D7C0", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0x138B940", Offset = "0x138B940", VA = "0x138B940", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000D8E")]
	[Address(RVA = "0x138C25C", Offset = "0x138C25C", VA = "0x138C25C", Slot = "20")]
	protected override void RegisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000D8F")]
	[Address(RVA = "0x138C724", Offset = "0x138C724", VA = "0x138C724", Slot = "21")]
	protected override void UnregisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000D90")]
	[Address(RVA = "0x138B840", Offset = "0x138B840", VA = "0x138B840")]
	protected bool CheckDash()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D91")]
	[Address(RVA = "0x138D848", Offset = "0x138D848", VA = "0x138D848", Slot = "22")]
	protected virtual bool CheckCharged()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D92")]
	[Address(RVA = "0x138D390", Offset = "0x138D390", VA = "0x138D390")]
	protected void RotateToEnemy()
	{
	}

	[Token(Token = "0x6000D93")]
	[Address(RVA = "0x138D0A0", Offset = "0x138D0A0", VA = "0x138D0A0", Slot = "23")]
	public virtual void OnAttackStarted(string name)
	{
	}

	[Token(Token = "0x6000D94")]
	[Address(RVA = "0x138D900", Offset = "0x138D900", VA = "0x138D900", Slot = "24")]
	public virtual void OnAttackCompleted(string name)
	{
	}

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0x138D1E8", Offset = "0x138D1E8", VA = "0x138D1E8", Slot = "25")]
	public virtual void DamageStarted()
	{
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0x138D29C", Offset = "0x138D29C", VA = "0x138D29C", Slot = "26")]
	public virtual void DamageEnded()
	{
	}

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0x138D9A0", Offset = "0x138D9A0", VA = "0x138D9A0")]
	public void OnRecoilHit()
	{
	}

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0x138DA0C", Offset = "0x138DA0C", VA = "0x138DA0C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0x138B9A0", Offset = "0x138B9A0", VA = "0x138B9A0")]
	public CombatStateBase()
	{
	}
}
[Serializable]
[Token(Token = "0x20002AA")]
public class CombatItem
{
	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AttackScriptableObject attackInfo;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeleeWeapon damager;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool rotateOnStartAttack;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool rotateWhenApplyDamage;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool canDash;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float timeToDash;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool canCharged;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeToCharged;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isUnlocked;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool canRecoil;

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0x138DB3C", Offset = "0x138DB3C", VA = "0x138DB3C")]
	public CombatItem()
	{
	}
}
[Token(Token = "0x20002AB")]
public class ConversationState : MothState
{
	[Token(Token = "0x20002AC")]
	public enum ConversationStates
	{
		[Token(Token = "0x4000AE6")]
		Rotate,
		[Token(Token = "0x4000AE7")]
		Idle,
		[Token(Token = "0x4000AE8")]
		Talk
	}

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public CharacterState[] notBreakableStates;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CharacterState standardState;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool rotationStarted;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ConversationStates currentState;

	[Token(Token = "0x170001A5")]
	public Transform Target
	{
		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x138DB54", Offset = "0x138DB54", VA = "0x138DB54")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x138DB5C", Offset = "0x138DB5C", VA = "0x138DB5C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0x138DB64", Offset = "0x138DB64", VA = "0x138DB64", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0x138E0A8", Offset = "0x138E0A8", VA = "0x138E0A8", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0x138E0AC", Offset = "0x138E0AC", VA = "0x138E0AC", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0x138E12C", Offset = "0x138E12C", VA = "0x138E12C")]
	private void Talking(bool talking)
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0x138E130", Offset = "0x138E130", VA = "0x138E130")]
	public void OnConversationStarted()
	{
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0x138E134", Offset = "0x138E134", VA = "0x138E134")]
	public void OnConversationCompleted()
	{
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0x138E138", Offset = "0x138E138", VA = "0x138E138")]
	public void OnRotationStarted()
	{
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0x138E144", Offset = "0x138E144", VA = "0x138E144")]
	public void OnRotationCompleted()
	{
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0x138DFF0", Offset = "0x138DFF0", VA = "0x138DFF0")]
	private bool IsBreakable(CharacterState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0x138E1B0", Offset = "0x138E1B0", VA = "0x138E1B0")]
	public CharacterState GetNextState()
	{
		return null;
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0x138E1F0", Offset = "0x138E1F0", VA = "0x138E1F0")]
	public ConversationState()
	{
	}
}
[Token(Token = "0x20002AD")]
public class CutsceneState : MothState
{
	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public PlayerAnimatorLink rootMotion;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform graphic;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool useBuiltinRootMotion;

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0x138E1F8", Offset = "0x138E1F8", VA = "0x138E1F8", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0x138E334", Offset = "0x138E334", VA = "0x138E334", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0x138E45C", Offset = "0x138E45C", VA = "0x138E45C")]
	public CutsceneState()
	{
	}
}
[Token(Token = "0x20002AE")]
public class DashBackState : DashState
{
	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0x138E474", Offset = "0x138E474", VA = "0x138E474", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0x138E570", Offset = "0x138E570", VA = "0x138E570", Slot = "22")]
	protected override void DashStart()
	{
	}

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0x138EB68", Offset = "0x138EB68", VA = "0x138EB68")]
	public DashBackState()
	{
	}
}
[Token(Token = "0x20002AF")]
public class DashFrontState : DashState
{
	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private DashMovementType startMovementType;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private bool physicsMovementCompleted;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
	private bool wasInAir;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private readonly int wasInAirHash;

	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0x138EB88", Offset = "0x138EB88", VA = "0x138EB88", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DAF")]
	[Address(RVA = "0x138EC34", Offset = "0x138EC34", VA = "0x138EC34", Slot = "20")]
	protected override void RegisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000DB0")]
	[Address(RVA = "0x138ED28", Offset = "0x138ED28", VA = "0x138ED28", Slot = "21")]
	protected override void UnregisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000DB1")]
	[Address(RVA = "0x138EE1C", Offset = "0x138EE1C", VA = "0x138EE1C", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DB2")]
	[Address(RVA = "0x138EE94", Offset = "0x138EE94", VA = "0x138EE94", Slot = "22")]
	protected override void DashStart()
	{
	}

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0x138EED4", Offset = "0x138EED4", VA = "0x138EED4", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0x138EFD0", Offset = "0x138EFD0", VA = "0x138EFD0")]
	private void OnMovePhysicsMovementCompleted()
	{
	}

	[Token(Token = "0x6000DB5")]
	[Address(RVA = "0x138F0A8", Offset = "0x138F0A8", VA = "0x138F0A8")]
	private void OnDashFrontCompleted()
	{
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0x138F0E0", Offset = "0x138F0E0", VA = "0x138F0E0")]
	public DashFrontState()
	{
	}
}
[Token(Token = "0x20002B0")]
public enum DashRotationType
{
	[Token(Token = "0x4000AF1")]
	FacingDirection,
	[Token(Token = "0x4000AF2")]
	InputDirection
}
[Token(Token = "0x20002B1")]
public enum DashMovementType
{
	[Token(Token = "0x4000AF4")]
	RootMotion,
	[Token(Token = "0x4000AF5")]
	Velocity,
	[Token(Token = "0x4000AF6")]
	AddForce
}
[Token(Token = "0x20002B2")]
public enum DashVelocityType
{
	[Token(Token = "0x4000AF8")]
	VELOCITY,
	[Token(Token = "0x4000AF9")]
	PLANAR
}
[Serializable]
[Token(Token = "0x20002B3")]
public class DashSettings
{
	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public DashRotationType rotationType;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public DashMovementType movementType;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DashVelocityType velocityType;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool ignoreSpeedMultipliers;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool alwaysNotGrounded;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool forceNotGrounded;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[UnityEngine.Tooltip("Whether or not to allow the dash to be canceled by others rigidbodies.")]
	public bool cancelOnContact;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("If the contact point velocity (magnitude) is greater than this value, the Dash will be instantly canceled.")]
	public float contactVelocityTolerance;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("Physics Movement")]
	public float dashDuration;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float dashSpeed;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve dashCurve;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool rotate;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Min(0f)]
	public float rotationTime;

	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool cooldown;

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float cooldownDuration;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onDashDepletion;

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int availableDashes;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool changeLayer;

	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool upWhenNotGrounded;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(0f, 1f)]
	public float upSpeed;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public readonly int dashLayer;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public readonly int standardLayer;

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x138F140", Offset = "0x138F140", VA = "0x138F140")]
	public DashSettings()
	{
	}
}
[Token(Token = "0x20002B4")]
public class DashState : MothState
{
	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DashSettings dashSettings;

	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool canAttack;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MaterialController materialController;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected float currentSpeedMultiplier;

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected float dashCursor;

	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected Vector3 dashLookingDirection;

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected float currentRotationTime;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected float currentRotationDuration;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	protected int dashLeft;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected float lastDashTime;

	[Token(Token = "0x14000003")]
	public event Action<Vector3> OnDashStart
	{
		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x138F1CC", Offset = "0x138F1CC", VA = "0x138F1CC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x138F27C", Offset = "0x138F27C", VA = "0x138F27C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<Vector3> OnDashEnd
	{
		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x138F32C", Offset = "0x138F32C", VA = "0x138F32C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x138F3DC", Offset = "0x138F3DC", VA = "0x138F3DC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0x138F48C", Offset = "0x138F48C", VA = "0x138F48C", Slot = "19")]
	public override string GetInfo()
	{
		return null;
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0x138EBB0", Offset = "0x138EBB0", VA = "0x138EBB0", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0x138E4EC", Offset = "0x138E4EC", VA = "0x138E4EC", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0x138F5DC", Offset = "0x138F5DC", VA = "0x138F5DC", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0x138F70C", Offset = "0x138F70C", VA = "0x138F70C", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0x138E59C", Offset = "0x138E59C", VA = "0x138E59C", Slot = "22")]
	protected virtual void DashStart()
	{
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0x138F860", Offset = "0x138F860", VA = "0x138F860", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0x138EF6C", Offset = "0x138EF6C", VA = "0x138EF6C", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0x138FB48", Offset = "0x138FB48", VA = "0x138FB48", Slot = "23")]
	public virtual void ResetDash()
	{
	}

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0x138FB58", Offset = "0x138FB58", VA = "0x138FB58")]
	private bool CheckContacts()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0x138FA7C", Offset = "0x138FA7C", VA = "0x138FA7C")]
	protected void HandlePhysicsMovement(float dt)
	{
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0x138FC28", Offset = "0x138FC28", VA = "0x138FC28", Slot = "24")]
	protected virtual void HandleRotation(float dt)
	{
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x138FBC8", Offset = "0x138FBC8", VA = "0x138FBC8")]
	private Vector3 GetMovementDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0x138EB78", Offset = "0x138EB78", VA = "0x138EB78")]
	public DashState()
	{
	}
}
[Token(Token = "0x20002B5")]
public class DieState : MothState
{
	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject graphic;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly int waterDamageType;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private readonly int slideDamageType;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly int spiderDamageType;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool wallCollided;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int attackType;

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0x138FEF0", Offset = "0x138FEF0", VA = "0x138FEF0", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0x138FEF4", Offset = "0x138FEF4", VA = "0x138FEF4", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0x13902A8", Offset = "0x13902A8", VA = "0x13902A8", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0x1390394", Offset = "0x1390394", VA = "0x1390394", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DCE")]
	[Address(RVA = "0x1390170", Offset = "0x1390170", VA = "0x1390170")]
	private void OnWallCollision()
	{
	}

	[Token(Token = "0x6000DCF")]
	[Address(RVA = "0x13903F8", Offset = "0x13903F8", VA = "0x13903F8")]
	public DieState()
	{
	}
}
[Token(Token = "0x20002B6")]
public class FallWarningState : MothState
{
	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float frequence;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform originEdge;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float edgeRadius;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public LayerMask groundLayerMask;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float lastWarningTime;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private HitInfoFilter hitInfoFilter;

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x1390414", Offset = "0x1390414", VA = "0x1390414", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0x1390470", Offset = "0x1390470", VA = "0x1390470", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x139055C", Offset = "0x139055C", VA = "0x139055C", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x1390640", Offset = "0x1390640", VA = "0x1390640", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0x13906A4", Offset = "0x13906A4", VA = "0x13906A4", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0x13904F4", Offset = "0x13904F4", VA = "0x13904F4")]
	protected bool CheckEdge()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0x13906C0", Offset = "0x13906C0", VA = "0x13906C0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0x139070C", Offset = "0x139070C", VA = "0x139070C")]
	public FallWarningState()
	{
	}
}
[Token(Token = "0x20002B7")]
public class GlideState : MothState
{
	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Header("Planar movement")]
	protected float targetPlanarSpeed;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	protected float minPlanarSpeed;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Header("Vertical movement")]
	protected float targetVerticalSpeed;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	protected float duration;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected bool rotate;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Min(0f)]
	[SerializeField]
	protected float rotationSpeed;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	protected float glideDuration;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	protected bool canGrab;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected PlayerGroundIndicator groundIndicator;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected Vector3 smoothDampVelocity;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	protected float angle;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected float currentGlideTimer;

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0x1390728", Offset = "0x1390728", VA = "0x1390728")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0x1390898", Offset = "0x1390898", VA = "0x1390898")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0x139088C", Offset = "0x139088C", VA = "0x139088C")]
	private void OnGroundedStateEnter(Vector3 localVelocity)
	{
	}

	[Token(Token = "0x6000DDB")]
	[Address(RVA = "0x13909D0", Offset = "0x13909D0", VA = "0x13909D0")]
	private void ResetTimer()
	{
	}

	[Token(Token = "0x6000DDC")]
	[Address(RVA = "0x13909DC", Offset = "0x13909DC", VA = "0x13909DC", Slot = "19")]
	public override string GetInfo()
	{
		return null;
	}

	[Token(Token = "0x6000DDD")]
	[Address(RVA = "0x1390A1C", Offset = "0x1390A1C", VA = "0x1390A1C", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DDE")]
	[Address(RVA = "0x1390A58", Offset = "0x1390A58", VA = "0x1390A58", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000DDF")]
	[Address(RVA = "0x1390A94", Offset = "0x1390A94", VA = "0x1390A94", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DE0")]
	[Address(RVA = "0x1390AB8", Offset = "0x1390AB8", VA = "0x1390AB8", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000DE1")]
	[Address(RVA = "0x1390D28", Offset = "0x1390D28", VA = "0x1390D28", Slot = "12")]
	public override void PostUpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000DE2")]
	[Address(RVA = "0x1390D90", Offset = "0x1390D90", VA = "0x1390D90", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000DE3")]
	[Address(RVA = "0x1390F28", Offset = "0x1390F28", VA = "0x1390F28")]
	private void CheckStandardState()
	{
	}

	[Token(Token = "0x6000DE4")]
	[Address(RVA = "0x1390FA4", Offset = "0x1390FA4", VA = "0x1390FA4", Slot = "13")]
	public override void PreCharacterSimulation(float dt)
	{
	}

	[Token(Token = "0x6000DE5")]
	[Address(RVA = "0x1390D18", Offset = "0x1390D18", VA = "0x1390D18")]
	private void UpdateGlideTimer(float dt)
	{
	}

	[Token(Token = "0x6000DE6")]
	[Address(RVA = "0x1390FD8", Offset = "0x1390FD8", VA = "0x1390FD8", Slot = "22")]
	protected virtual void HandleRotation(float dt)
	{
	}

	[Token(Token = "0x6000DE7")]
	[Address(RVA = "0x13914A4", Offset = "0x13914A4", VA = "0x13914A4")]
	public GlideState()
	{
	}
}
[Token(Token = "0x20002B8")]
public class HandState : MothState
{
	[Token(Token = "0x20002B9")]
	private enum HandStateType
	{
		[Token(Token = "0x4000B49")]
		IN,
		[Token(Token = "0x4000B4A")]
		HAND,
		[Token(Token = "0x4000B4B")]
		OFF
	}

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float minDistanceToMoth;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float minDistanceToMothAir;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float jumpPower;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private float jumpDuration;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AnimationCurve jumpInEase;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private AnimationCurve jumpInRotateEase;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Vector3 endPower;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GameObject groundCollider;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private List<Collider> ignoreColliders;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private HandStateType currentHandState;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 startPosition;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float jumpTime;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private XRControllerVelocity velocity;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Transform mothTransform;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private CustomHand leftHand;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private CustomHand rightHand;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private CustomHand currentHand;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool collideWithEnviroment;

	[Token(Token = "0x170001A6")]
	public bool CanGrab
	{
		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x139151C", Offset = "0x139151C", VA = "0x139151C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x1391524", Offset = "0x1391524", VA = "0x1391524")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001A7")]
	public bool PreventExitJump
	{
		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x1391530", Offset = "0x1391530", VA = "0x1391530")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x1391538", Offset = "0x1391538", VA = "0x1391538")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001A8")]
	private bool LeftHandRotation
	{
		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x13918C4", Offset = "0x13918C4", VA = "0x13918C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A9")]
	private bool RightHandRotation
	{
		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x13919D0", Offset = "0x13919D0", VA = "0x13919D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0x1391544", Offset = "0x1391544", VA = "0x1391544", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DED")]
	[Address(RVA = "0x1391618", Offset = "0x1391618", VA = "0x1391618", Slot = "8")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000DEE")]
	[Address(RVA = "0x13916A0", Offset = "0x13916A0", VA = "0x13916A0", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DEF")]
	[Address(RVA = "0x1391ADC", Offset = "0x1391ADC", VA = "0x1391ADC", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000DF0")]
	[Address(RVA = "0x1391CD8", Offset = "0x1391CD8", VA = "0x1391CD8", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000DF1")]
	[Address(RVA = "0x1391FEC", Offset = "0x1391FEC", VA = "0x1391FEC", Slot = "12")]
	public override void PostUpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000DF2")]
	[Address(RVA = "0x1392190", Offset = "0x1392190", VA = "0x1392190", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000DF3")]
	[Address(RVA = "0x13924A0", Offset = "0x13924A0", VA = "0x13924A0", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DF4")]
	[Address(RVA = "0x1391C74", Offset = "0x1391C74", VA = "0x1391C74")]
	public void StartJump()
	{
	}

	[Token(Token = "0x6000DF5")]
	[Address(RVA = "0x1391FB4", Offset = "0x1391FB4", VA = "0x1391FB4")]
	private void OnJumpInCompleted()
	{
	}

	[Token(Token = "0x6000DF6")]
	[Address(RVA = "0x1392388", Offset = "0x1392388", VA = "0x1392388")]
	public void Jump()
	{
	}

	[Token(Token = "0x6000DF9")]
	[Address(RVA = "0x13926A0", Offset = "0x13926A0", VA = "0x13926A0")]
	public void OnCollideEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000DFA")]
	[Address(RVA = "0x139284C", Offset = "0x139284C", VA = "0x139284C")]
	public void OnCollideExit(Collider collider)
	{
	}

	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0x1392854", Offset = "0x1392854", VA = "0x1392854")]
	public HandState()
	{
	}
}
[Token(Token = "0x20002BA")]
public class HurtState : MothState
{
	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Range(0f, 50f)]
	[SerializeField]
	private float hurtMultiplier;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float maxForce;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool hurtInAir;

	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0x1392870", Offset = "0x1392870", VA = "0x1392870", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0x1392AB4", Offset = "0x1392AB4", VA = "0x1392AB4", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0x1392B38", Offset = "0x1392B38", VA = "0x1392B38", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0x1392BB8", Offset = "0x1392BB8", VA = "0x1392BB8")]
	public HurtState()
	{
	}
}
[Token(Token = "0x20002BB")]
public class IdleState : MothState
{
	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool inputDetected;

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0x1392BCC", Offset = "0x1392BCC", VA = "0x1392BCC", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0x1392BF4", Offset = "0x1392BF4", VA = "0x1392BF4", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E02")]
	[Address(RVA = "0x1392C80", Offset = "0x1392C80", VA = "0x1392C80", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E03")]
	[Address(RVA = "0x1392E78", Offset = "0x1392E78", VA = "0x1392E78", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E04")]
	[Address(RVA = "0x1392E9C", Offset = "0x1392E9C", VA = "0x1392E9C")]
	public IdleState()
	{
	}
}
[Token(Token = "0x20002BC")]
public class JumpPadState : StandardMovementState
{
	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float reduceAirControl;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float duration;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float currentTime;

	[Token(Token = "0x6000E05")]
	[Address(RVA = "0x1392EA4", Offset = "0x1392EA4", VA = "0x1392EA4", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E06")]
	[Address(RVA = "0x13931DC", Offset = "0x13931DC", VA = "0x13931DC", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E07")]
	[Address(RVA = "0x1393358", Offset = "0x1393358", VA = "0x1393358", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0x1393464", Offset = "0x1393464", VA = "0x1393464", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E09")]
	[Address(RVA = "0x1393560", Offset = "0x1393560", VA = "0x1393560")]
	public JumpPadState()
	{
	}
}
[Token(Token = "0x20002BD")]
public class JumpState : MothState
{
	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private bool useInteractAction;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected JumpWallInteractible currentJumper;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool jumpCompleted;

	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0x13936D0", Offset = "0x13936D0", VA = "0x13936D0", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E0B")]
	[Address(RVA = "0x13939A4", Offset = "0x13939A4", VA = "0x13939A4", Slot = "20")]
	protected override void RegisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0x1393BDC", Offset = "0x1393BDC", VA = "0x1393BDC", Slot = "21")]
	protected override void UnregisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0x1393E14", Offset = "0x1393E14", VA = "0x1393E14", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0x139404C", Offset = "0x139404C", VA = "0x139404C", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0x13940B0", Offset = "0x13940B0", VA = "0x13940B0", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0x13940D0", Offset = "0x13940D0", VA = "0x13940D0")]
	public void OnJumpStarted()
	{
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0x13940D4", Offset = "0x13940D4", VA = "0x13940D4")]
	public void OnJumpLanded()
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0x1394114", Offset = "0x1394114", VA = "0x1394114")]
	public void OnJumpCompleted()
	{
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0x1394120", Offset = "0x1394120", VA = "0x1394120")]
	public JumpState()
	{
	}
}
[Token(Token = "0x20002BE")]
public class LedgeClimbState : MothState
{
	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Header("Filter")]
	protected LayerMask layerMask;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	protected bool filterByTag;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	[SerializeField]
	protected bool exludeByTag;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected string tagName;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Detection")]
	[SerializeField]
	protected bool groundedDetection;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Min(0f)]
	[SerializeField]
	protected float forwardDetectionOffset;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Min(0.05f)]
	protected float upwardsDetectionOffset;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[Min(0.05f)]
	[SerializeField]
	protected float separationBetweenHands;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Min(0.05f)]
	[UnityEngine.Tooltip("The distance used by the raycast methods.")]
	[SerializeField]
	protected float ledgeDetectionDistance;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[Header("Offset")]
	[SerializeField]
	protected float verticalOffset;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected float forwardOffset;

	[Token(Token = "0x4000B61")]
	protected const float MaxLedgeVerticalAngle = 50f;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected bool forceAutoClimbUp;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected HitInfoFilter ledgeHitInfoFilter;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private HitInfo leftHitInfo;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private HitInfo rightHitInfo;

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0x1394128", Offset = "0x1394128", VA = "0x1394128", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0x1394184", Offset = "0x1394184", VA = "0x1394184", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0x13944FC", Offset = "0x13944FC", VA = "0x13944FC", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0x139487C", Offset = "0x139487C", VA = "0x139487C", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0x13948E0", Offset = "0x13948E0", VA = "0x13948E0", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0x13941F4", Offset = "0x13941F4", VA = "0x13941F4")]
	private bool IsValidLedge(Vector3 characterPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0x1394974", Offset = "0x1394974", VA = "0x1394974")]
	private void DetectLedge(Vector3 position, out HitInfo leftHitInfo, out HitInfo rightHitInfo)
	{
	}

	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0x1394C58", Offset = "0x1394C58", VA = "0x1394C58")]
	public LedgeClimbState()
	{
	}
}
[Token(Token = "0x20002BF")]
public class MixtureState : MothState
{
	[Token(Token = "0x6000E1C")]
	[Address(RVA = "0x1394CCC", Offset = "0x1394CCC", VA = "0x1394CCC", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E1D")]
	[Address(RVA = "0x1394D90", Offset = "0x1394D90", VA = "0x1394D90", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E1E")]
	[Address(RVA = "0x1394E1C", Offset = "0x1394E1C", VA = "0x1394E1C", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E1F")]
	[Address(RVA = "0x1394E80", Offset = "0x1394E80", VA = "0x1394E80")]
	public MixtureState()
	{
	}
}
[Token(Token = "0x20002C0")]
public class MothCageState : MothState
{
	[Token(Token = "0x6000E20")]
	[Address(RVA = "0x1394E88", Offset = "0x1394E88", VA = "0x1394E88", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0x1394EC4", Offset = "0x1394EC4", VA = "0x1394EC4", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E22")]
	[Address(RVA = "0x1394F54", Offset = "0x1394F54", VA = "0x1394F54", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E23")]
	[Address(RVA = "0x1394FC0", Offset = "0x1394FC0", VA = "0x1394FC0")]
	public MothCageState()
	{
	}
}
[Token(Token = "0x20002C1")]
public class MothState : CharacterState
{
	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isAnimationState;

	[Token(Token = "0x4000B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string[] animationStateNames;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool canBreakByStandard;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected XRCharacter behaviourManager;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected bool animationStarted;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	protected bool animationFinished;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int[] stateHashs;

	[Token(Token = "0x6000E24")]
	[Address(RVA = "0x138F4CC", Offset = "0x138F4CC", VA = "0x138F4CC", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000E25")]
	[Address(RVA = "0x138F600", Offset = "0x138F600", VA = "0x138F600", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0x138FA6C", Offset = "0x138FA6C", VA = "0x138FA6C", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E27")]
	[Address(RVA = "0x1394FC8", Offset = "0x1394FC8", VA = "0x1394FC8")]
	protected void UpdateAnimationState()
	{
	}

	[Token(Token = "0x6000E28")]
	[Address(RVA = "0x138F968", Offset = "0x138F968", VA = "0x138F968", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E29")]
	[Address(RVA = "0x1395044", Offset = "0x1395044", VA = "0x1395044")]
	public void OnStandardStarted()
	{
	}

	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0x138ED24", Offset = "0x138ED24", VA = "0x138ED24", Slot = "20")]
	protected virtual void RegisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0x138EE18", Offset = "0x138EE18", VA = "0x138EE18", Slot = "21")]
	protected virtual void UnregisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0x138E46C", Offset = "0x138E46C", VA = "0x138E46C")]
	public MothState()
	{
	}
}
[Token(Token = "0x20002C2")]
public class RespawnState : MothState
{
	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0x1395124", Offset = "0x1395124", VA = "0x1395124", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0x1395210", Offset = "0x1395210", VA = "0x1395210", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E2F")]
	[Address(RVA = "0x1395274", Offset = "0x1395274", VA = "0x1395274", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E30")]
	[Address(RVA = "0x13952E0", Offset = "0x13952E0", VA = "0x13952E0")]
	public RespawnState()
	{
	}
}
[Token(Token = "0x20002C3")]
public class SlideState : MothState
{
	[Token(Token = "0x20002C4")]
	private enum SlideStates
	{
		[Token(Token = "0x4000B81")]
		START,
		[Token(Token = "0x4000B82")]
		MOVING,
		[Token(Token = "0x4000B83")]
		END
	}

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float landSpeed;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float landRotationSpeed;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float slideSpeed;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float rotationSpeed;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float acceleration;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float maxDeltaAngle;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool ignoreSpeedMultipliers;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	public bool canDash;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject crakWallDamager;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float angleDampTime;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float angleAnimatorParamSpeed;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool checkWallCollision;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private SlideStates currentSlideState;

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 slideDirection;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 mothLookingDirection;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float angle;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float currentSpeedMultiplier;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private MaterialController materialController;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 targetLookingDirection;

	[Token(Token = "0x6000E31")]
	[Address(RVA = "0x13952E8", Offset = "0x13952E8", VA = "0x13952E8", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000E32")]
	[Address(RVA = "0x139534C", Offset = "0x139534C", VA = "0x139534C", Slot = "20")]
	protected override void RegisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E33")]
	[Address(RVA = "0x13954E0", Offset = "0x13954E0", VA = "0x13954E0", Slot = "21")]
	protected override void UnregisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E34")]
	[Address(RVA = "0x1395674", Offset = "0x1395674", VA = "0x1395674", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E35")]
	[Address(RVA = "0x13957F4", Offset = "0x13957F4", VA = "0x13957F4", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0x139597C", Offset = "0x139597C", VA = "0x139597C", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E37")]
	[Address(RVA = "0x13962A4", Offset = "0x13962A4", VA = "0x13962A4", Slot = "13")]
	public override void PreCharacterSimulation(float dt)
	{
	}

	[Token(Token = "0x6000E38")]
	[Address(RVA = "0x13962F4", Offset = "0x13962F4", VA = "0x13962F4", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0x1396424", Offset = "0x1396424", VA = "0x1396424", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0x139644C", Offset = "0x139644C", VA = "0x139644C", Slot = "22")]
	protected virtual void HandleRotation(float dt, float speed)
	{
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0x1395F98", Offset = "0x1395F98", VA = "0x1395F98")]
	private bool CheckAngle(Vector3 forward, Vector3 direction)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0x1395730", Offset = "0x1395730", VA = "0x1395730")]
	private bool SlideContact()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0x1395EE8", Offset = "0x1395EE8", VA = "0x1395EE8")]
	private void ResolveDirection()
	{
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0x1396180", Offset = "0x1396180", VA = "0x1396180")]
	private void TakeDamage()
	{
	}

	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0x139660C", Offset = "0x139660C", VA = "0x139660C")]
	public void OnStartSlideCompleted()
	{
	}

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0x1396618", Offset = "0x1396618", VA = "0x1396618")]
	public void OnEndSlideCompleted()
	{
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0x139668C", Offset = "0x139668C", VA = "0x139668C")]
	public void OnSlideStarted(Vector3 direction)
	{
	}

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0x13963A8", Offset = "0x13963A8", VA = "0x13963A8")]
	public void OnSlideEnded()
	{
	}

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0x1396698", Offset = "0x1396698", VA = "0x1396698")]
	public SlideState()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C5")]
public class PlanarMovementParameters
{
	[Serializable]
	[Token(Token = "0x20002C6")]
	public struct PlanarMovementProperties
	{
		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[UnityEngine.Tooltip("How fast the character increses its current velocity.")]
		public float acceleration;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[UnityEngine.Tooltip("How fast the character reduces its current velocity.")]
		public float deceleration;

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x13966F8", Offset = "0x13966F8", VA = "0x13966F8")]
		public PlanarMovementProperties(float acceleration, float deceleration)
		{
		}
	}

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Min(0f)]
	public float baseSpeedLimit;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[Header("Stable grounded parameters")]
	public float stableGroundedAcceleration;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float stableGroundedDeceleration;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Unstable grounded parameters")]
	public float unstableGroundedAcceleration;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float unstableGroundedDeceleration;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("Not grounded parameters")]
	public float notGroundedAcceleration;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float notGroundedDeceleration;

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0x13966D0", Offset = "0x13966D0", VA = "0x13966D0")]
	public PlanarMovementParameters()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C7")]
public class VerticalMovementParameters
{
	[Token(Token = "0x20002C8")]
	public enum UnstableJumpMode
	{
		[Token(Token = "0x4000B91")]
		Vertical,
		[Token(Token = "0x4000B92")]
		GroundNormal
	}

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Gravity")]
	[UnityEngine.Tooltip("It enables/disables gravity. The gravity value is calculated based on the jump apex height and duration.")]
	public bool useGravity;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float gravity;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxVerticalSpeed;

	[Token(Token = "0x6000E46")]
	[Address(RVA = "0x1396700", Offset = "0x1396700", VA = "0x1396700")]
	public VerticalMovementParameters()
	{
	}
}
[Serializable]
[Token(Token = "0x20002C9")]
public class LookingDirectionParameters
{
	[Token(Token = "0x20002CA")]
	public enum LookingDirectionMode
	{
		[Token(Token = "0x4000B9C")]
		Movement,
		[Token(Token = "0x4000B9D")]
		Target,
		[Token(Token = "0x4000B9E")]
		ExternalReference
	}

	[Token(Token = "0x20002CB")]
	public enum LookingDirectionMovementSource
	{
		[Token(Token = "0x4000BA0")]
		Velocity,
		[Token(Token = "0x4000BA1")]
		Input
	}

	[Token(Token = "0x20002CC")]
	public enum LookingDirectionType
	{
		[Token(Token = "0x4000BA3")]
		SLERP,
		[Token(Token = "0x4000BA4")]
		LERP,
		[Token(Token = "0x4000BA5")]
		TOWARDS
	}

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool changeLookingDirection;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[Header("Lerp properties")]
	public float speed;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LookingDirectionType rotationType;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Target Direction")]
	public LookingDirectionMode lookingDirectionMode;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space(5f)]
	[Condition("lookingDirectionMode", ConditionAttribute.ConditionType.IsEqualTo, ConditionAttribute.VisibilityType.Hidden, 1f)]
	public Transform target;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space(5f)]
	[Condition("lookingDirectionMode", ConditionAttribute.ConditionType.IsEqualTo, ConditionAttribute.VisibilityType.Hidden, 0f)]
	public LookingDirectionMovementSource stableGroundedLookingDirectionMode;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Condition("lookingDirectionMode", ConditionAttribute.ConditionType.IsEqualTo, ConditionAttribute.VisibilityType.Hidden, 0f)]
	public LookingDirectionMovementSource unstableGroundedLookingDirectionMode;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Condition("lookingDirectionMode", ConditionAttribute.ConditionType.IsEqualTo, ConditionAttribute.VisibilityType.Hidden, 0f)]
	public LookingDirectionMovementSource notGroundedLookingDirectionMode;

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0x139671C", Offset = "0x139671C", VA = "0x139671C")]
	public LookingDirectionParameters()
	{
	}
}
[Token(Token = "0x20002CD")]
public enum InputMode
{
	[Token(Token = "0x4000BA7")]
	Toggle,
	[Token(Token = "0x4000BA8")]
	Hold
}
[Token(Token = "0x20002CE")]
public class StandardMovementState : MothState
{
	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Space(10f)]
	public PlanarMovementParameters planarMovementParameters;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public VerticalMovementParameters verticalMovementParameters;

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LookingDirectionParameters lookingDirectionParameters;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float idleTimeout;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private float minAngleTo180Turn;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private bool edgeWarningAnimation;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool canDieInAir;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private float timeToDieInTheAir;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private bool showGroundIndicator;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	protected PlayerGroundIndicator groundIndicator;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected MaterialController materialController;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected float currentPlanarSpeedLimit;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected Vector3 targetLookingDirection;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected PlanarMovementParameters.PlanarMovementProperties currentMotion;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float idleTimer;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private bool reducedAirControlFlag;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float reducedAirControlInitialTime;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float reductionDuration;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float angle;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool inputDetected;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float currentTimeInAir;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool disableGlideFlag;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float disableGlideInitialTime;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float disableGlideDuration;

	[Token(Token = "0x170001AA")]
	public bool CanTouchInState
	{
		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x139673C", Offset = "0x139673C", VA = "0x139673C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x1396744", Offset = "0x1396744", VA = "0x1396744")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001AB")]
	public bool UseGravity
	{
		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x1396B30", Offset = "0x1396B30", VA = "0x1396B30")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x1396B4C", Offset = "0x1396B4C", VA = "0x1396B4C")]
		set
		{
		}
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0x1396750", Offset = "0x1396750", VA = "0x1396750", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0x13967B4", Offset = "0x13967B4", VA = "0x13967B4", Slot = "22")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0x139693C", Offset = "0x139693C", VA = "0x139693C", Slot = "23")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0x1396AC4", Offset = "0x1396AC4", VA = "0x1396AC4", Slot = "19")]
	public override string GetInfo()
	{
		return null;
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0x1396B04", Offset = "0x1396B04", VA = "0x1396B04")]
	private void OnTeleport(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x6000E51")]
	[Address(RVA = "0x1396B6C", Offset = "0x1396B6C", VA = "0x1396B6C", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E52")]
	[Address(RVA = "0x1392FA4", Offset = "0x1392FA4", VA = "0x1392FA4", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E53")]
	[Address(RVA = "0x1393504", Offset = "0x1393504", VA = "0x1393504", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E54")]
	[Address(RVA = "0x1393384", Offset = "0x1393384", VA = "0x1393384", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E55")]
	[Address(RVA = "0x1397388", Offset = "0x1397388", VA = "0x1397388", Slot = "13")]
	public override void PreCharacterSimulation(float dt)
	{
	}

	[Token(Token = "0x6000E56")]
	[Address(RVA = "0x1396EA0", Offset = "0x1396EA0", VA = "0x1396EA0")]
	private void ProcessVerticalMovement(float dt)
	{
	}

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0x139746C", Offset = "0x139746C", VA = "0x139746C", Slot = "24")]
	protected virtual void ProcessPlanarMovement(float dt)
	{
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0x13978D4", Offset = "0x13978D4", VA = "0x13978D4")]
	private void SetMotionValues()
	{
	}

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0x1397A64", Offset = "0x1397A64", VA = "0x1397A64", Slot = "25")]
	protected virtual void HandleRotation(float dt)
	{
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0x1398048", Offset = "0x1398048", VA = "0x1398048")]
	private void SetTargetLookingDirection(LookingDirectionParameters.LookingDirectionMovementSource lookingDirectionMode)
	{
	}

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0x1397024", Offset = "0x1397024", VA = "0x1397024")]
	private void TimeoutToIdle(float dt)
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0x13931AC", Offset = "0x13931AC", VA = "0x13931AC")]
	public void ReduceAirControl(float reductionDuration = 0.5f)
	{
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0x1396E70", Offset = "0x1396E70", VA = "0x1396E70")]
	public void DisableInputControl(float reductionDuration = 0.5f)
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0x139733C", Offset = "0x139733C", VA = "0x139733C")]
	public void ProcessDisableGlide()
	{
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0x13970E4", Offset = "0x13970E4", VA = "0x13970E4")]
	private void CheckLanding()
	{
	}

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0x1397130", Offset = "0x1397130", VA = "0x1397130")]
	private void CheckTurn()
	{
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0x1397194", Offset = "0x1397194", VA = "0x1397194")]
	private void CheckStops()
	{
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0x1397280", Offset = "0x1397280", VA = "0x1397280")]
	private void CopyFootPosition()
	{
	}

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0x13972AC", Offset = "0x13972AC", VA = "0x13972AC")]
	private void CheckDieInAir(float dt)
	{
	}

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0x1395974", Offset = "0x1395974", VA = "0x1395974")]
	public void ResetTimeInAir()
	{
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0x13981C4", Offset = "0x13981C4", VA = "0x13981C4")]
	public void SetTouch(bool value)
	{
	}

	[Token(Token = "0x6000E66")]
	[Address(RVA = "0x1393570", Offset = "0x1393570", VA = "0x1393570")]
	public StandardMovementState()
	{
	}
}
[Token(Token = "0x20002CF")]
public class TeleportState : MothState
{
	[Token(Token = "0x6000E67")]
	[Address(RVA = "0x13981D0", Offset = "0x13981D0", VA = "0x13981D0", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0x1398270", Offset = "0x1398270", VA = "0x1398270", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0x13982D4", Offset = "0x13982D4", VA = "0x13982D4")]
	public TeleportState()
	{
	}
}
[Token(Token = "0x20002D0")]
public class TouchState : MothState
{
	[Serializable]
	[Token(Token = "0x20002D1")]
	public struct TouchData
	{
		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool applyRootRotation;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool rotate;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool swapToRootmotionAfterRotate;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rotateDuration;
	}

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private TouchData[] touches;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 mothLookingDirection;

	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool isSwapped;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int currentState;

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0x13982DC", Offset = "0x13982DC", VA = "0x13982DC", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0x13982F8", Offset = "0x13982F8", VA = "0x13982F8", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0x1398564", Offset = "0x1398564", VA = "0x1398564", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0x13985A4", Offset = "0x13985A4", VA = "0x13985A4", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0x1398608", Offset = "0x1398608", VA = "0x1398608", Slot = "22")]
	protected virtual void HandleRotation(float dt)
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0x13989C0", Offset = "0x13989C0", VA = "0x13989C0")]
	public TouchState()
	{
	}
}
[Token(Token = "0x20002D2")]
public class TouchWaitState : MothState
{
	[Token(Token = "0x20002D3")]
	public enum WaitState
	{
		[Token(Token = "0x4000BCF")]
		START,
		[Token(Token = "0x4000BD0")]
		LOOP,
		[Token(Token = "0x4000BD1")]
		END
	}

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float rotateDuration;

	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 mothLookingDirection;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool wasTouched;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private WaitState currentState;

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0x13989C8", Offset = "0x13989C8", VA = "0x13989C8", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0x13989E4", Offset = "0x13989E4", VA = "0x13989E4", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0x1398C10", Offset = "0x1398C10", VA = "0x1398C10", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0x1398CD8", Offset = "0x1398CD8", VA = "0x1398CD8", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E74")]
	[Address(RVA = "0x1398D3C", Offset = "0x1398D3C", VA = "0x1398D3C", Slot = "22")]
	protected virtual void HandleRotation(float dt)
	{
	}

	[Token(Token = "0x6000E75")]
	[Address(RVA = "0x1398FF4", Offset = "0x1398FF4", VA = "0x1398FF4")]
	public void OnTouchWaitStartCompleted()
	{
	}

	[Token(Token = "0x6000E76")]
	[Address(RVA = "0x1398CA4", Offset = "0x1398CA4", VA = "0x1398CA4")]
	private void OnTouch()
	{
	}

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0x1399000", Offset = "0x1399000", VA = "0x1399000")]
	public TouchWaitState()
	{
	}
}
[Token(Token = "0x20002D4")]
public class WallClimbState : MothState
{
	[Token(Token = "0x4000BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private bool useInteractAction;

	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	public Vector2 wallJumpPower;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	protected LayerMask wallLayerMask;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected float wallDistanceDetector;

	[Token(Token = "0x4000BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	protected Transform climbOrigin;

	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private WallClimbInteractible currentWall;

	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool forceExit;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector2 climbInput;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool canMove;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	private bool isOnTheWall;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
	private bool canClimbUp;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
	private bool withForce;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool checkInput;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected HitInfoFilter climbHitInfoFilter;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected HitInfo hitInfo;

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0x1399010", Offset = "0x1399010", VA = "0x1399010", Slot = "7")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0x139906C", Offset = "0x139906C", VA = "0x139906C", Slot = "20")]
	protected override void RegisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0x13992A4", Offset = "0x13992A4", VA = "0x13992A4", Slot = "21")]
	protected override void UnregisterAnimationListeners()
	{
	}

	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0x13994DC", Offset = "0x13994DC", VA = "0x13994DC", Slot = "17")]
	public override bool CheckEnterTransition(CharacterState fromState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E7C")]
	[Address(RVA = "0x139970C", Offset = "0x139970C", VA = "0x139970C", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0x13999F4", Offset = "0x13999F4", VA = "0x13999F4", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0x1399C08", Offset = "0x1399C08", VA = "0x1399C08", Slot = "12")]
	public override void PostUpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0x1399C50", Offset = "0x1399C50", VA = "0x1399C50", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0x1399CB4", Offset = "0x1399CB4", VA = "0x1399CB4", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0x1399668", Offset = "0x1399668", VA = "0x1399668")]
	private bool CheckLedge()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E82")]
	[Address(RVA = "0x1399B38", Offset = "0x1399B38", VA = "0x1399B38")]
	public void StopClimbing()
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0x1399AB0", Offset = "0x1399AB0", VA = "0x1399AB0")]
	private void InputJump()
	{
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0x1399BCC", Offset = "0x1399BCC", VA = "0x1399BCC")]
	private void LedgeJump()
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0x1399E9C", Offset = "0x1399E9C", VA = "0x1399E9C")]
	private void OnStartClimbCompleted()
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0x1399EA8", Offset = "0x1399EA8", VA = "0x1399EA8")]
	private void OnWallLedgeCompleted()
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0x1399F28", Offset = "0x1399F28", VA = "0x1399F28")]
	private void WallJumpCompleted()
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0x1399F2C", Offset = "0x1399F2C", VA = "0x1399F2C")]
	public WallClimbState()
	{
	}
}
[Token(Token = "0x20002D5")]
public class WobbleJumpState : StandardMovementState
{
	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float reduceAirControl;

	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float duration;

	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float currentTime;

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0x1399F64", Offset = "0x1399F64", VA = "0x1399F64", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0x139A064", Offset = "0x139A064", VA = "0x139A064", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0x139A1E0", Offset = "0x139A1E0", VA = "0x139A1E0", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0x139A20C", Offset = "0x139A20C", VA = "0x139A20C", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0x139A244", Offset = "0x139A244", VA = "0x139A244")]
	public WobbleJumpState()
	{
	}
}
[Token(Token = "0x20002D6")]
[DefaultExecutionOrder(-505)]
public class VRCharacter : SystemBase
{
	[Token(Token = "0x20002D7")]
	public enum VRCharacterHandsStates
	{
		[Token(Token = "0x4000BF1")]
		NO_HANDS,
		[Token(Token = "0x4000BF2")]
		CHAINS,
		[Token(Token = "0x4000BF3")]
		STANDARD,
		[Token(Token = "0x4000BF4")]
		STANDARD_NO_ABILITIES
	}

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PlayerInventory inventory;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AlchemyController alchemyController;

	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private VRCharacterHandsStates currentHandsState;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform trans;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LeftHand leftHand;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RightHand rightHand;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform camera;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private IXRSnap snapProvider;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private XRCharacter moth;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private IXRDollyMove move;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private XRSnapConfigManager snapConfigManager;

	[Token(Token = "0x170001AC")]
	public VRCharacterDamageable Damageable
	{
		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x139A254", Offset = "0x139A254", VA = "0x139A254")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x139A25C", Offset = "0x139A25C", VA = "0x139A25C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001AD")]
	public LeftHand LeftHand
	{
		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x139A264", Offset = "0x139A264", VA = "0x139A264")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001AE")]
	public RightHand RightHand
	{
		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x139A26C", Offset = "0x139A26C", VA = "0x139A26C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001AF")]
	public Transform Camera
	{
		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x139A274", Offset = "0x139A274", VA = "0x139A274")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001B0")]
	public PlayerInventory Inventory
	{
		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x139A27C", Offset = "0x139A27C", VA = "0x139A27C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001B1")]
	public AlchemyController AlchemyController
	{
		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x139A284", Offset = "0x139A284", VA = "0x139A284")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001B2")]
	public VRCharacterHandsStates HandsState
	{
		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x139A28C", Offset = "0x139A28C", VA = "0x139A28C")]
		get
		{
			return default(VRCharacterHandsStates);
		}
	}

	[Token(Token = "0x170001B3")]
	public IXRSnap SnapProvider
	{
		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x139A294", Offset = "0x139A294", VA = "0x139A294")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001B4")]
	public Quaternion Rotation
	{
		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x139A348", Offset = "0x139A348", VA = "0x139A348")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x139A3F0", Offset = "0x139A3F0", VA = "0x139A3F0")]
		set
		{
		}
	}

	[Token(Token = "0x6000E99")]
	[Address(RVA = "0x139A4CC", Offset = "0x139A4CC", VA = "0x139A4CC")]
	public float GetDistanceToMoth()
	{
		return default(float);
	}

	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0x139A598", Offset = "0x139A598", VA = "0x139A598")]
	public void SetHandsState(VRCharacterHandsStates newState)
	{
	}

	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0x139A7C8", Offset = "0x139A7C8", VA = "0x139A7C8")]
	public void ShowLeftHand()
	{
	}

	[Token(Token = "0x6000E9C")]
	[Address(RVA = "0x139A7CC", Offset = "0x139A7CC", VA = "0x139A7CC")]
	public void EnableRightHand()
	{
	}

	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0x139A818", Offset = "0x139A818", VA = "0x139A818", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E9E")]
	[Address(RVA = "0x139A984", Offset = "0x139A984", VA = "0x139A984")]
	public void SetupGameplay(XRCharacter player)
	{
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0x139A9E4", Offset = "0x139A9E4", VA = "0x139A9E4")]
	public void ResetStartPosition()
	{
	}

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0x139AB08", Offset = "0x139AB08", VA = "0x139AB08")]
	public void ResetPlayer(bool withRotation = false)
	{
	}

	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0x139AC34", Offset = "0x139AC34", VA = "0x139AC34")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0x139AC6C", Offset = "0x139AC6C", VA = "0x139AC6C")]
	public void Resume()
	{
	}

	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0x139ACA4", Offset = "0x139ACA4", VA = "0x139ACA4")]
	public void PauseGameplay()
	{
	}

	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0x139ACDC", Offset = "0x139ACDC", VA = "0x139ACDC")]
	public void ResumeGameplay()
	{
	}

	[Token(Token = "0x6000EA5")]
	[Address(RVA = "0x139AD14", Offset = "0x139AD14", VA = "0x139AD14")]
	public void DisableRotation()
	{
	}

	[Token(Token = "0x6000EA6")]
	[Address(RVA = "0x139ADDC", Offset = "0x139ADDC", VA = "0x139ADDC")]
	public void EnableRotation()
	{
	}

	[Token(Token = "0x6000EA7")]
	[Address(RVA = "0x139AEA4", Offset = "0x139AEA4", VA = "0x139AEA4")]
	public void LoadSegmentConfigState(SceneData config)
	{
	}

	[Token(Token = "0x6000EA8")]
	[Address(RVA = "0x139AEBC", Offset = "0x139AEBC", VA = "0x139AEBC")]
	public VRCharacter()
	{
	}
}
[Token(Token = "0x20002D8")]
[RequireComponent(typeof(Collider))]
public class VRCharacterDamageable : MonoBehaviour
{
	[Token(Token = "0x20002D9")]
	[CompilerGenerated]
	private sealed class <AfterHitRoutine>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRCharacterDamageable <>4__this;

		[Token(Token = "0x170001BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x139B694", Offset = "0x139B694", VA = "0x139B694", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0x139B6DC", Offset = "0x139B6DC", VA = "0x139B6DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x139B580", Offset = "0x139B580", VA = "0x139B580")]
		[DebuggerHidden]
		public <AfterHitRoutine>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x139B5C4", Offset = "0x139B5C4", VA = "0x139B5C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x139B5C8", Offset = "0x139B5C8", VA = "0x139B5C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x139B69C", Offset = "0x139B69C", VA = "0x139B69C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnHit;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent OnKill;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnReset;

	[Token(Token = "0x170001B5")]
	public int HitPoints
	{
		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x139AEC4", Offset = "0x139AEC4", VA = "0x139AEC4")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x139AECC", Offset = "0x139AECC", VA = "0x139AECC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001B6")]
	protected bool ConnectToMainCamera
	{
		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x139AED4", Offset = "0x139AED4", VA = "0x139AED4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x139AEDC", Offset = "0x139AEDC", VA = "0x139AEDC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001B7")]
	protected Vector3 CameraOffset
	{
		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x139AEE8", Offset = "0x139AEE8", VA = "0x139AEE8")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x139AEF4", Offset = "0x139AEF4", VA = "0x139AEF4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001B8")]
	public int MaxHitPoints
	{
		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x139AF00", Offset = "0x139AF00", VA = "0x139AF00")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x139AF08", Offset = "0x139AF08", VA = "0x139AF08")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001B9")]
	public bool IsInvulnerableOnStart
	{
		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x139AF10", Offset = "0x139AF10", VA = "0x139AF10")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x139AF18", Offset = "0x139AF18", VA = "0x139AF18")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001BA")]
	public float AfterHitInvulnerabilityDuration
	{
		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x139AF24", Offset = "0x139AF24", VA = "0x139AF24")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x139AF2C", Offset = "0x139AF2C", VA = "0x139AF2C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001BB")]
	public float IndicatorMultilicator
	{
		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x139AF34", Offset = "0x139AF34", VA = "0x139AF34")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x139AF3C", Offset = "0x139AF3C", VA = "0x139AF3C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001BC")]
	public bool IsInvulnerable
	{
		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x139AF44", Offset = "0x139AF44", VA = "0x139AF44")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x139AF4C", Offset = "0x139AF4C", VA = "0x139AF4C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0x139AF58", Offset = "0x139AF58", VA = "0x139AF58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0x139B064", Offset = "0x139B064", VA = "0x139B064")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0x139B128", Offset = "0x139B128", VA = "0x139B128")]
	private void OnSceneUnloaded(SceneData _)
	{
	}

	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0x139B194", Offset = "0x139B194", VA = "0x139B194")]
	public void ApplyDamage(Damageable.DamageMessage message)
	{
	}

	[Token(Token = "0x6000EBD")]
	[Address(RVA = "0x139B540", Offset = "0x139B540", VA = "0x139B540")]
	[ContextMenu("ResetDamage")]
	public void ResetDamage()
	{
	}

	[Token(Token = "0x6000EBE")]
	[Address(RVA = "0x139B560", Offset = "0x139B560", VA = "0x139B560")]
	private void OnLevelWasLoaded(int level)
	{
	}

	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0x139B4CC", Offset = "0x139B4CC", VA = "0x139B4CC")]
	[IteratorStateMachine(typeof(<AfterHitRoutine>d__41))]
	private IEnumerator AfterHitRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000EC0")]
	[Address(RVA = "0x139B054", Offset = "0x139B054", VA = "0x139B054")]
	public void Setup()
	{
	}

	[Token(Token = "0x6000EC1")]
	[Address(RVA = "0x139B408", Offset = "0x139B408", VA = "0x139B408")]
	protected void SetPositionToCamera()
	{
	}

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0x139B5A8", Offset = "0x139B5A8", VA = "0x139B5A8")]
	public VRCharacterDamageable()
	{
	}
}
[Token(Token = "0x20002DA")]
[RequireComponent(typeof(Collider))]
public class VRCharacterDamageableExtender : MonoBehaviour
{
	[Token(Token = "0x170001BF")]
	[SerializeField]
	public bool IsInvurnable
	{
		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x139B6E4", Offset = "0x139B6E4", VA = "0x139B6E4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x139B768", Offset = "0x139B768", VA = "0x139B768")]
		set
		{
		}
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0x139B7F4", Offset = "0x139B7F4", VA = "0x139B7F4")]
	public void ApplyDamage(Damageable.DamageMessage message)
	{
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0x139B8AC", Offset = "0x139B8AC", VA = "0x139B8AC")]
	public void ResetDamage()
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0x139B94C", Offset = "0x139B94C", VA = "0x139B94C")]
	public VRCharacterDamageableExtender()
	{
	}
}
[Token(Token = "0x20002DB")]
public class VRCharacterDamager : VRCharacterTriggerDetector
{
	[Token(Token = "0x170001C0")]
	public int Amount
	{
		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x139B954", Offset = "0x139B954", VA = "0x139B954")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x139B95C", Offset = "0x139B95C", VA = "0x139B95C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001C1")]
	public float PushForce
	{
		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x139B964", Offset = "0x139B964", VA = "0x139B964")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x139B96C", Offset = "0x139B96C", VA = "0x139B96C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0x139B974", Offset = "0x139B974", VA = "0x139B974", Slot = "4")]
	protected override void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0x139BC30", Offset = "0x139BC30", VA = "0x139BC30")]
	public VRCharacterDamager()
	{
	}
}
[Token(Token = "0x20002DC")]
public class VRCharacterTriggerDetector : MonoBehaviour
{
	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Characted Detector")]
	public TagFilter detectedTags;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onEnter;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onExit;

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0x139BD6C", Offset = "0x139BD6C", VA = "0x139BD6C")]
	protected bool HasTag(Collider other, bool acceptIfEmpty = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0x139BDD4", Offset = "0x139BDD4", VA = "0x139BDD4", Slot = "4")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0x139BE04", Offset = "0x139BE04", VA = "0x139BE04", Slot = "5")]
	protected virtual void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0x139BC28", Offset = "0x139BC28", VA = "0x139BC28")]
	protected bool IsDetectable(Collider other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0x139BC3C", Offset = "0x139BC3C", VA = "0x139BC3C")]
	public VRCharacterTriggerDetector()
	{
	}
}
[Token(Token = "0x20002DD")]
[DefaultExecutionOrder(-500)]
public class XRCharacter : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x20002DE")]
	[CompilerGenerated]
	private sealed class <DelayChangeState>d__101<T> : IEnumerator<object>, IEnumerator, IDisposable where T : CharacterState
	{
		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object <>2__current;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float delay;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool force;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public XRCharacter <>4__this;

		[Token(Token = "0x170001D9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F1C")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F1E")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F19")]
		[DebuggerHidden]
		public <DelayChangeState>d__101(int <>1__state)
		{
		}

		[Token(Token = "0x6000F1A")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F1B")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1D")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002DF")]
	[CompilerGenerated]
	private sealed class <DelayChangeState>d__102 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool force;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public XRCharacter <>4__this;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CharacterState state;

		[Token(Token = "0x170001DB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F22")]
			[Address(RVA = "0x139D564", Offset = "0x139D564", VA = "0x139D564", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F24")]
			[Address(RVA = "0x139D5AC", Offset = "0x139D5AC", VA = "0x139D5AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x139CE90", Offset = "0x139CE90", VA = "0x139CE90")]
		[DebuggerHidden]
		public <DelayChangeState>d__102(int <>1__state)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x139D488", Offset = "0x139D488", VA = "0x139D488", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x139D48C", Offset = "0x139D48C", VA = "0x139D48C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x139D56C", Offset = "0x139D56C", VA = "0x139D56C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool canTouch;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityAction onForceAdded;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CharacterStateController characterStateController;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MothCharacterActor characterActor;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CharacterActions characterActions;

	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private CharacterBrain characterBrain;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private PlayerAnimator playerAnimator;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private PlayerTouchController playerTouchController;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Damageable damageable;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private PlayerEffect effects;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private PlayerAudio audio;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private PlayerBehaviour playerBehaviour;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private AlchemyModificationReceiver alchemyReceiver;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private LODGroup lod;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private RecoilController recoilController;

	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private DamageModificationReceiver damageReceiver;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected bool listenDamageableEvents;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool isInitialized;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private Vector3 pausePlanarVelocity;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Vector3 pauseVelocity;

	[Token(Token = "0x170001C2")]
	public PlayerAnimator Animator
	{
		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x139BE34", Offset = "0x139BE34", VA = "0x139BE34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C3")]
	public PlayerEffect Effects
	{
		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x139BE3C", Offset = "0x139BE3C", VA = "0x139BE3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C4")]
	public PlayerAudio Audio
	{
		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x139BE44", Offset = "0x139BE44", VA = "0x139BE44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C5")]
	public Damageable Damageable
	{
		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x139BE4C", Offset = "0x139BE4C", VA = "0x139BE4C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C6")]
	public CharacterStateController StateController
	{
		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x139BE54", Offset = "0x139BE54", VA = "0x139BE54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C7")]
	public MothCharacterActor CharacterActor
	{
		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x139BE5C", Offset = "0x139BE5C", VA = "0x139BE5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C8")]
	public CharacterBody CharacterBody
	{
		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x139BE64", Offset = "0x139BE64", VA = "0x139BE64")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x139BE6C", Offset = "0x139BE6C", VA = "0x139BE6C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001C9")]
	public CharacterBrain CharacterBrain
	{
		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x139BE7C", Offset = "0x139BE7C", VA = "0x139BE7C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001CA")]
	public CharacterActions CharacterActions
	{
		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x139BE84", Offset = "0x139BE84", VA = "0x139BE84")]
		get
		{
			return default(CharacterActions);
		}
	}

	[Token(Token = "0x170001CB")]
	public BaseInteractible CurrentInteractible
	{
		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x139BE94", Offset = "0x139BE94", VA = "0x139BE94")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x139BE9C", Offset = "0x139BE9C", VA = "0x139BE9C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001CC")]
	public PlayerBehaviour PlayerBehaviour
	{
		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x139BEAC", Offset = "0x139BEAC", VA = "0x139BEAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001CD")]
	public PlayerTouchController PlayerTouchController
	{
		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x139BEB4", Offset = "0x139BEB4", VA = "0x139BEB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001CE")]
	public RecoilController RecoilController
	{
		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x139BEBC", Offset = "0x139BEBC", VA = "0x139BEBC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001CF")]
	public DamageModificationReceiver DamageReceiver
	{
		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x139BEC4", Offset = "0x139BEC4", VA = "0x139BEC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001D0")]
	public bool IsInIdle
	{
		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x1394D08", Offset = "0x1394D08", VA = "0x1394D08")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D1")]
	public bool IsInCutscene
	{
		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x139BECC", Offset = "0x139BECC", VA = "0x139BECC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D2")]
	public bool IsDying
	{
		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x139BF54", Offset = "0x139BF54", VA = "0x139BF54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D3")]
	public bool IsAI
	{
		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x139BF78", Offset = "0x139BF78", VA = "0x139BF78")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D4")]
	public Damageable.DamageMessage LastDamageMessage
	{
		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x139BF9C", Offset = "0x139BF9C", VA = "0x139BF9C")]
		[CompilerGenerated]
		get
		{
			return default(Damageable.DamageMessage);
		}
		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x139BFAC", Offset = "0x139BFAC", VA = "0x139BFAC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D5")]
	public bool ListenDamageableEvents
	{
		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x139BFD0", Offset = "0x139BFD0", VA = "0x139BFD0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x139BFD8", Offset = "0x139BFD8", VA = "0x139BFD8")]
		set
		{
		}
	}

	[Token(Token = "0x170001D6")]
	public MothArmorModifier MothArmor
	{
		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x139BFE4", Offset = "0x139BFE4", VA = "0x139BFE4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x139BFEC", Offset = "0x139BFEC", VA = "0x139BFEC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001D7")]
	public Scythe Scythe
	{
		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x139BFFC", Offset = "0x139BFFC", VA = "0x139BFFC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x139C004", Offset = "0x139C004", VA = "0x139C004")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D8")]
	public bool IsVisible
	{
		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x13922A8", Offset = "0x13922A8", VA = "0x13922A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0x139C014", Offset = "0x139C014", VA = "0x139C014")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0x139C3D4", Offset = "0x139C3D4", VA = "0x139C3D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0x139C508", Offset = "0x139C508", VA = "0x139C508")]
	public void InitializeAnimator()
	{
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0x139C578", Offset = "0x139C578", VA = "0x139C578")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0x139C650", Offset = "0x139C650", VA = "0x139C650")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0x139C680", Offset = "0x139C680", VA = "0x139C680")]
	public void Teleport(Vector3 target)
	{
	}

	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0x139C69C", Offset = "0x139C69C", VA = "0x139C69C")]
	public void Teleport(Vector3 target, Quaternion rotation)
	{
	}

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0x139C6B8", Offset = "0x139C6B8", VA = "0x139C6B8")]
	public void Teleport()
	{
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0x139C708", Offset = "0x139C708", VA = "0x139C708")]
	public void AnimateMoveTo(Vector3 target, float duration)
	{
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0x139C70C", Offset = "0x139C70C", VA = "0x139C70C")]
	public void AnimateRotateTo(Vector3 target, float duration)
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0x139C774", Offset = "0x139C774", VA = "0x139C774")]
	public void AnimateRotateTo(Quaternion target, float duration)
	{
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0x139258C", Offset = "0x139258C", VA = "0x139258C")]
	public void AddForce(Vector3 force, bool add = true, bool forceNotGrounded = true)
	{
	}

	[Token(Token = "0x6000F02")]
	[Address(RVA = "0x139C7CC", Offset = "0x139C7CC", VA = "0x139C7CC")]
	public void ResetSpeed()
	{
	}

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0x139C7D0", Offset = "0x139C7D0", VA = "0x139C7D0")]
	public void DisableCollider()
	{
	}

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0x139C82C", Offset = "0x139C82C", VA = "0x139C82C")]
	public void EnableCollider()
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0x139C888", Offset = "0x139C888", VA = "0x139C888")]
	public void EnableTimelineMode()
	{
	}

	[Token(Token = "0x6000F06")]
	[Address(RVA = "0x139C95C", Offset = "0x139C95C", VA = "0x139C95C")]
	public void DisableTimelineMode()
	{
	}

	[Token(Token = "0x6000F07")]
	[Address(RVA = "0x139C9E4", Offset = "0x139C9E4", VA = "0x139C9E4")]
	public void EnableCutsceneMode(bool useBuiltinRootMotion = true)
	{
	}

	[Token(Token = "0x6000F08")]
	[Address(RVA = "0x139CAAC", Offset = "0x139CAAC", VA = "0x139CAAC")]
	public void DisableCutsceneMode()
	{
	}

	[Token(Token = "0x6000F09")]
	[Address(RVA = "0x139CB20", Offset = "0x139CB20", VA = "0x139CB20")]
	public void EnableAIMode()
	{
	}

	[Token(Token = "0x6000F0A")]
	[Address(RVA = "0x139CB8C", Offset = "0x139CB8C", VA = "0x139CB8C")]
	public void DisableAIMode()
	{
	}

	[Token(Token = "0x6000F0B")]
	[Address(RVA = "0x139CBB4", Offset = "0x139CBB4", VA = "0x139CBB4")]
	public void EnableConversation(Transform conversationTarget)
	{
	}

	[Token(Token = "0x6000F0C")]
	[Address(RVA = "0x139CC98", Offset = "0x139CC98", VA = "0x139CC98")]
	public void DisableConversation()
	{
	}

	[Token(Token = "0x6000F0D")]
	[Address(RVA = "0x139CE20", Offset = "0x139CE20", VA = "0x139CE20")]
	public void OnAlchemyAdded(ModificationScriptableObject effect)
	{
	}

	[Token(Token = "0x6000F0E")]
	[IteratorStateMachine(typeof(<DelayChangeState>d__101<>))]
	public IEnumerator DelayChangeState<T>(float delay, bool force = true) where T : CharacterState
	{
		return null;
	}

	[Token(Token = "0x6000F0F")]
	[Address(RVA = "0x139CD74", Offset = "0x139CD74", VA = "0x139CD74")]
	[IteratorStateMachine(typeof(<DelayChangeState>d__102))]
	public IEnumerator DelayChangeState(CharacterState state, float delay, bool force = true)
	{
		return null;
	}

	[Token(Token = "0x6000F10")]
	[Address(RVA = "0x139CEB8", Offset = "0x139CEB8", VA = "0x139CEB8", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object data)
	{
	}

	[Token(Token = "0x6000F11")]
	[Address(RVA = "0x139CFD0", Offset = "0x139CFD0", VA = "0x139CFD0")]
	private void Damaged(Damageable.DamageMessage damageMessage)
	{
	}

	[Token(Token = "0x6000F12")]
	[Address(RVA = "0x139D08C", Offset = "0x139D08C", VA = "0x139D08C")]
	public void Die(Damageable.DamageMessage damageMessage)
	{
	}

	[Token(Token = "0x6000F13")]
	[Address(RVA = "0x139D188", Offset = "0x139D188", VA = "0x139D188")]
	public void AddHealth()
	{
	}

	[Token(Token = "0x6000F14")]
	[Address(RVA = "0x139D1F4", Offset = "0x139D1F4", VA = "0x139D1F4")]
	public void Respawn(Checkpoint checkpoint, bool changeState = true)
	{
	}

	[Token(Token = "0x6000F15")]
	[Address(RVA = "0x139D2D4", Offset = "0x139D2D4", VA = "0x139D2D4")]
	public float GetDistanceToGround()
	{
		return default(float);
	}

	[Token(Token = "0x6000F16")]
	[Address(RVA = "0x139D3E0", Offset = "0x139D3E0", VA = "0x139D3E0")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000F17")]
	[Address(RVA = "0x139D42C", Offset = "0x139D42C", VA = "0x139D42C")]
	public void Resume()
	{
	}

	[Token(Token = "0x6000F18")]
	[Address(RVA = "0x139D474", Offset = "0x139D474", VA = "0x139D474")]
	public XRCharacter()
	{
	}
}
[Token(Token = "0x20002E0")]
public class XRInputProvider : HandProviderBase
{
	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private InputDeviceCharacteristics controllerLeftCharacteristics;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private InputDeviceCharacteristics controllerRightCharacteristics;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.XR.InputDevice leftDevice;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.XR.InputDevice rightDevice;

	[Token(Token = "0x6000F25")]
	[Address(RVA = "0x139D5B4", Offset = "0x139D5B4", VA = "0x139D5B4", Slot = "4")]
	public override void Init()
	{
	}

	[Token(Token = "0x6000F26")]
	[Address(RVA = "0x139D6A4", Offset = "0x139D6A4", VA = "0x139D6A4", Slot = "5")]
	public override float Flex(bool right)
	{
		return default(float);
	}

	[Token(Token = "0x6000F27")]
	[Address(RVA = "0x139D758", Offset = "0x139D758", VA = "0x139D758", Slot = "8")]
	public override bool IsGivingThumbsUp(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0x139D818", Offset = "0x139D818", VA = "0x139D818", Slot = "7")]
	public override bool IsPointing(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0x139D8D8", Offset = "0x139D8D8", VA = "0x139D8D8", Slot = "9")]
	public override Vector2 Analog(bool right)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0x139D98C", Offset = "0x139D98C", VA = "0x139D98C", Slot = "12")]
	public override Vector3 OffsetInteractorPosition(bool right)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0x139D9D0", Offset = "0x139D9D0", VA = "0x139D9D0", Slot = "11")]
	public override Vector3 OffsetPosition(bool right)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0x139DA14", Offset = "0x139DA14", VA = "0x139DA14", Slot = "10")]
	public override Vector3 OffsetRotation(bool right)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0x139DA58", Offset = "0x139DA58", VA = "0x139DA58", Slot = "6")]
	public override float Pinch(bool right)
	{
		return default(float);
	}

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0x139DB0C", Offset = "0x139DB0C", VA = "0x139DB0C")]
	public XRInputProvider()
	{
	}
}
[Token(Token = "0x20002E1")]
[ActionCategory("AI")]
public class SetFlyingDestination : SetDestination
{
	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public FsmFloat findRadius;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform targetTransform;

	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0x139DB14", Offset = "0x139DB14", VA = "0x139DB14", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F30")]
	[Address(RVA = "0x139DD40", Offset = "0x139DD40", VA = "0x139DD40", Slot = "63")]
	protected override void UpdateFollowTargetBehaviour()
	{
	}

	[Token(Token = "0x6000F31")]
	[Address(RVA = "0x139E0A0", Offset = "0x139E0A0", VA = "0x139E0A0")]
	public SetFlyingDestination()
	{
	}
}
[Token(Token = "0x20002E2")]
[ActionCategory("AI")]
public class SetPlayerDestination : SetDestination
{
	[Token(Token = "0x170001DD")]
	protected override AIBehaviour aiBehaviour
	{
		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x139E0D8", Offset = "0x139E0D8", VA = "0x139E0D8", Slot = "62")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F33")]
	[Address(RVA = "0x139E15C", Offset = "0x139E15C", VA = "0x139E15C", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F34")]
	[Address(RVA = "0x139E288", Offset = "0x139E288", VA = "0x139E288")]
	public SetPlayerDestination()
	{
	}
}
[Token(Token = "0x20002E3")]
[ActionCategory(ActionCategory.Animation)]
public class MothLookAt : FsmStateAction
{
	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[RequiredField]
	public FsmGameObject target;

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float weight;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float duration;

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0x139E290", Offset = "0x139E290", VA = "0x139E290", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0x139E2B8", Offset = "0x139E2B8", VA = "0x139E2B8", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F37")]
	[Address(RVA = "0x139E3D8", Offset = "0x139E3D8", VA = "0x139E3D8")]
	public MothLookAt()
	{
	}
}
[Token(Token = "0x20002E4")]
[ActionCategory(ActionCategory.Animation)]
public class SetDirectionByBool : ComponentAction<Animator>
{
	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[RequiredField]
	public FsmOwnerDefault gameObject;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[RequiredField]
	public FsmBool value;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string parameter;

	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float damp;

	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool everyFrame;

	[Token(Token = "0x170001DE")]
	protected virtual Animator Animator
	{
		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x139E458", Offset = "0x139E458", VA = "0x139E458", Slot = "62")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0x139E3E0", Offset = "0x139E3E0", VA = "0x139E3E0", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0x139E460", Offset = "0x139E460", VA = "0x139E460", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0x139E578", Offset = "0x139E578", VA = "0x139E578", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0x139E4F0", Offset = "0x139E4F0", VA = "0x139E4F0")]
	private void Set()
	{
	}

	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0x139E57C", Offset = "0x139E57C", VA = "0x139E57C")]
	public SetDirectionByBool()
	{
	}
}
[Token(Token = "0x20002E5")]
public class RotatePlayerActor : RotateActor
{
	[Token(Token = "0x170001DF")]
	protected override CharacterActorBase characterActor
	{
		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x139E5C4", Offset = "0x139E5C4", VA = "0x139E5C4", Slot = "62")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0x139E648", Offset = "0x139E648", VA = "0x139E648", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0x139E6D8", Offset = "0x139E6D8", VA = "0x139E6D8")]
	public RotatePlayerActor()
	{
	}
}
[Token(Token = "0x20002E6")]
[ActionCategory(ActionCategory.Effects)]
public class ProjectDecal : FsmStateAction
{
	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmGameObject owner;

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmVector3 position;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[RequiredField]
	public FsmGameObject prefab;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UIHint(UIHint.Layer)]
	public FsmInt[] layerMask;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool projectAt;

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0x139E6E0", Offset = "0x139E6E0", VA = "0x139E6E0", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0x139E758", Offset = "0x139E758", VA = "0x139E758", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0x139E774", Offset = "0x139E774", VA = "0x139E774")]
	private void Project()
	{
	}

	[Token(Token = "0x6000F44")]
	[Address(RVA = "0x139EAC8", Offset = "0x139EAC8", VA = "0x139EAC8")]
	public ProjectDecal()
	{
	}
}
[Token(Token = "0x20002E7")]
public class RicochetMovement : CharacterState
{
	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 startVelocity;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float maxForceLength;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float forceMultiplier;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float velocityDivider;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool checkBounces;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private int maxBounces;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool autoExit;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	private bool resetY;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float minVelocityToBreak;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float deceleration;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 lastFrameVelocity;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentBounces;

	[Token(Token = "0x6000F45")]
	[Address(RVA = "0x139EAD0", Offset = "0x139EAD0", VA = "0x139EAD0", Slot = "9")]
	public override void EnterBehaviour(float dt, CharacterState fromState)
	{
	}

	[Token(Token = "0x6000F46")]
	[Address(RVA = "0x139ECA0", Offset = "0x139ECA0", VA = "0x139ECA0")]
	private void CharacterActor_OnWallHit(Contact obj)
	{
	}

	[Token(Token = "0x6000F47")]
	[Address(RVA = "0x139ECAC", Offset = "0x139ECAC", VA = "0x139ECAC")]
	private void Bounce(Vector3 collisionNormal)
	{
	}

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0x139EF68", Offset = "0x139EF68", VA = "0x139EF68", Slot = "11")]
	public override void UpdateBehaviour(float dt)
	{
	}

	[Token(Token = "0x6000F49")]
	[Address(RVA = "0x139F100", Offset = "0x139F100", VA = "0x139F100", Slot = "16")]
	public override void CheckExitTransition()
	{
	}

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0x139F230", Offset = "0x139F230", VA = "0x139F230", Slot = "15")]
	public override void ExitBehaviour(float dt, CharacterState toState)
	{
	}

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0x139F170", Offset = "0x139F170", VA = "0x139F170")]
	public bool CheckExit()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x139F2BC", Offset = "0x139F2BC", VA = "0x139F2BC")]
	public RicochetMovement()
	{
	}
}
[Token(Token = "0x20002E8")]
[ActionCategory(ActionCategory.GameObject)]
public class GetGameObject : FsmStateAction
{
	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ObjectType(typeof(Component))]
	public FsmObject targetComponent;

	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmGameObject storeValue;

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0x139F2F8", Offset = "0x139F2F8", VA = "0x139F2F8", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0x139F320", Offset = "0x139F320", VA = "0x139F320", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0x139F4F0", Offset = "0x139F4F0", VA = "0x139F4F0")]
	public GetGameObject()
	{
	}
}
[Token(Token = "0x20002E9")]
[ActionCategory(ActionCategory.Transform)]
public class GetGroundPosition : FsmStateAction
{
	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmGameObject gameObject;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmVector3 position;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string layerName;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FsmVector3 storeValue;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private LayerMask layerMask;

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0x139F4F8", Offset = "0x139F4F8", VA = "0x139F4F8", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0x139F568", Offset = "0x139F568", VA = "0x139F568", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0x139F6C8", Offset = "0x139F6C8", VA = "0x139F6C8")]
	public GetGroundPosition()
	{
	}
}
[Token(Token = "0x20002EA")]
[ActionCategory(ActionCategory.GameObject)]
public class GetMothCharacterBrainGameObject : FsmStateAction
{
	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmGameObject storeGameObject;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HutongGames.PlayMaker.Tooltip("Repeat every frame.")]
	public bool everyFrame;

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0x139F6D0", Offset = "0x139F6D0", VA = "0x139F6D0", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0x139F6DC", Offset = "0x139F6DC", VA = "0x139F6DC", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0x139F7F0", Offset = "0x139F7F0", VA = "0x139F7F0", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0x139F708", Offset = "0x139F708", VA = "0x139F708")]
	private void DoGetGameObject()
	{
	}

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0x139F7F4", Offset = "0x139F7F4", VA = "0x139F7F4")]
	public GetMothCharacterBrainGameObject()
	{
	}
}
[Token(Token = "0x20002EB")]
[ActionCategory(ActionCategory.GameObject)]
public class GetMothGameObject : FsmStateAction
{
	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmGameObject moth;

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0x139F7FC", Offset = "0x139F7FC", VA = "0x139F7FC", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0x139F808", Offset = "0x139F808", VA = "0x139F808", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0x139F8B4", Offset = "0x139F8B4", VA = "0x139F8B4")]
	public GetMothGameObject()
	{
	}
}
[Token(Token = "0x20002EC")]
[ActionCategory(ActionCategory.Transform)]
public class GetMothTransform : FsmStateAction
{
	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ObjectType(typeof(Transform))]
	public FsmObject moth;

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0x139F8BC", Offset = "0x139F8BC", VA = "0x139F8BC", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0x139F8C8", Offset = "0x139F8C8", VA = "0x139F8C8", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F5D")]
	[Address(RVA = "0x139F974", Offset = "0x139F974", VA = "0x139F974")]
	public GetMothTransform()
	{
	}
}
[Token(Token = "0x20002ED")]
[ActionCategory(ActionCategory.Transform)]
public class GetSplinePosition : FsmStateAction
{
	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ObjectType(typeof(Spline))]
	public FsmObject spline;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmFloat percentage;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FsmVector3 storePosition;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool everyFrame;

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0x139F97C", Offset = "0x139F97C", VA = "0x139F97C", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0x139F988", Offset = "0x139F988", VA = "0x139F988", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F60")]
	[Address(RVA = "0x139FA78", Offset = "0x139FA78", VA = "0x139FA78", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0x139F9B4", Offset = "0x139F9B4", VA = "0x139F9B4")]
	private void GetPosition()
	{
	}

	[Token(Token = "0x6000F62")]
	[Address(RVA = "0x139FA7C", Offset = "0x139FA7C", VA = "0x139FA7C")]
	public GetSplinePosition()
	{
	}
}
[Token(Token = "0x20002EE")]
[SerializeField]
public enum VRCharacterTransform
{
	[Token(Token = "0x4000C5B")]
	Camera,
	[Token(Token = "0x4000C5C")]
	LeftHand,
	[Token(Token = "0x4000C5D")]
	RightHand
}
[Token(Token = "0x20002EF")]
[ActionCategory(ActionCategory.Scene)]
[HutongGames.PlayMaker.Tooltip("Gets the Angle between a GameObject's forward axis and a Target. The Target can be defined as a GameObject or a world Position. If you specify both, then the Position will be used as a local offset from the Target Object's position.")]
public class LoadLevel : FsmStateAction
{
	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[RequiredField]
	public FsmString levelName;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmBool loadingScene;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FsmBool fade;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FsmInt checkpointIndex;

	[Token(Token = "0x6000F63")]
	[Address(RVA = "0x139FA84", Offset = "0x139FA84", VA = "0x139FA84", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F64")]
	[Address(RVA = "0x139FAF0", Offset = "0x139FAF0", VA = "0x139FAF0", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F65")]
	[Address(RVA = "0x139FBE8", Offset = "0x139FBE8", VA = "0x139FBE8")]
	public LoadLevel()
	{
	}
}
[Token(Token = "0x20002F0")]
[ActionCategory(ActionCategory.Transform)]
public class RandomPositionInsideRadius : FsmStateAction
{
	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmVector3 startPosition;

	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmFloat radius;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FsmBool ztoY;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FsmVector3 storeVariable;

	[Token(Token = "0x6000F66")]
	[Address(RVA = "0x139FBF0", Offset = "0x139FBF0", VA = "0x139FBF0", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F67")]
	[Address(RVA = "0x139FC44", Offset = "0x139FC44", VA = "0x139FC44", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F68")]
	[Address(RVA = "0x139FC6C", Offset = "0x139FC6C", VA = "0x139FC6C")]
	public void RequestNewPosition()
	{
	}

	[Token(Token = "0x6000F69")]
	[Address(RVA = "0x139FD18", Offset = "0x139FD18", VA = "0x139FD18")]
	public RandomPositionInsideRadius()
	{
	}
}
[Token(Token = "0x20002F1")]
[ActionCategory(ActionCategory.GameLogic)]
public class SaveGame : FsmStateAction
{
	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmBool snapshot;

	[Token(Token = "0x6000F6A")]
	[Address(RVA = "0x139FD20", Offset = "0x139FD20", VA = "0x139FD20", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F6B")]
	[Address(RVA = "0x139FD48", Offset = "0x139FD48", VA = "0x139FD48", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F6C")]
	[Address(RVA = "0x139FE08", Offset = "0x139FE08", VA = "0x139FE08")]
	public SaveGame()
	{
	}
}
[Token(Token = "0x20002F2")]
[ActionCategory(ActionCategory.Time)]
public class TestCooldown : FsmStateAction
{
	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmFloat lastTime;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmFloat cooldown;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FsmBool storeResult;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool everyFrame;

	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0x139FE10", Offset = "0x139FE10", VA = "0x139FE10", Slot = "30")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0x139FE3C", Offset = "0x139FE3C", VA = "0x139FE3C", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0x139FE80", Offset = "0x139FE80", VA = "0x139FE80", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0x139FF24", Offset = "0x139FF24", VA = "0x139FF24", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0x139FEB8", Offset = "0x139FEB8", VA = "0x139FEB8")]
	private void Test()
	{
	}

	[Token(Token = "0x6000F72")]
	[Address(RVA = "0x139FF40", Offset = "0x139FF40", VA = "0x139FF40")]
	public TestCooldown()
	{
	}
}
[Token(Token = "0x20002F3")]
[ActionCategory(ActionCategory.Logic)]
public class TestStationary : FsmStateAction
{
	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform enemy;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float minThreshold;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FsmFloat cooldown;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FsmBool storeResult;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FsmEvent stationary;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public FsmFloat lastTime;

	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool everyFrame;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 lastPosition;

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0x139FF48", Offset = "0x139FF48", VA = "0x139FF48", Slot = "30")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0x139FF98", Offset = "0x139FF98", VA = "0x139FF98", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0x139FFFC", Offset = "0x139FFFC", VA = "0x139FFFC", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0x13A01E4", Offset = "0x13A01E4", VA = "0x13A01E4", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0x13A0034", Offset = "0x13A0034", VA = "0x13A0034")]
	private void Test()
	{
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0x13A0200", Offset = "0x13A0200", VA = "0x13A0200")]
	public TestStationary()
	{
	}
}
[Token(Token = "0x20002F4")]
[ActionCategory(ActionCategory.Controller)]
public class UnlockAchievement : FsmStateAction
{
	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AchievementConfig achivement;

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0x13A0214", Offset = "0x13A0214", VA = "0x13A0214", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0x13A0460", Offset = "0x13A0460", VA = "0x13A0460")]
	public UnlockAchievement()
	{
	}
}
[Token(Token = "0x20002F5")]
[ActionCategory(ActionCategory.ScriptControl)]
public class GetButton : FsmStateAction
{
	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string button;

	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ignoreBlocked;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HutongGames.PlayMaker.Tooltip("The Event to send when the key is pressed.")]
	public FsmEvent sendEvent;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UIHint(UIHint.Variable)]
	[HutongGames.PlayMaker.Tooltip("Store the result in a Bool Variable. True if pressed, otherwise False.")]
	public FsmBool storeResult;

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0x13A0468", Offset = "0x13A0468", VA = "0x13A0468", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0x13A0490", Offset = "0x13A0490", VA = "0x13A0490", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0x13A05E4", Offset = "0x13A05E4", VA = "0x13A05E4")]
	public GetButton()
	{
	}
}
[Token(Token = "0x20002F6")]
[ActionCategory(ActionCategory.ScriptControl)]
public class GetButtonDown : FsmStateAction
{
	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string button;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ignoreBlocked;

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HutongGames.PlayMaker.Tooltip("The Event to send when the key is pressed.")]
	public FsmEvent sendEvent;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UIHint(UIHint.Variable)]
	[HutongGames.PlayMaker.Tooltip("Store the result in a Bool Variable. True if pressed, otherwise False.")]
	public FsmBool storeResult;

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0x13A05F4", Offset = "0x13A05F4", VA = "0x13A05F4", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0x13A061C", Offset = "0x13A061C", VA = "0x13A061C", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6000F80")]
	[Address(RVA = "0x13A0770", Offset = "0x13A0770", VA = "0x13A0770")]
	public GetButtonDown()
	{
	}
}
[Token(Token = "0x20002F7")]
public class EnableLeftHandAbilities : FsmStateAction
{
	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool enable;

	[Token(Token = "0x6000F81")]
	[Address(RVA = "0x13A0780", Offset = "0x13A0780", VA = "0x13A0780", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F82")]
	[Address(RVA = "0x13A0828", Offset = "0x13A0828", VA = "0x13A0828")]
	public EnableLeftHandAbilities()
	{
	}
}
[Token(Token = "0x20002F8")]
public class EnableRightHandAbilities : FsmStateAction
{
	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool enable;

	[Token(Token = "0x6000F83")]
	[Address(RVA = "0x13A0838", Offset = "0x13A0838", VA = "0x13A0838", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F84")]
	[Address(RVA = "0x13A08E0", Offset = "0x13A08E0", VA = "0x13A08E0")]
	public EnableRightHandAbilities()
	{
	}
}
[Token(Token = "0x20002F9")]
public class GhostHands : FsmStateAction
{
	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool enable;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool left;

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0x13A08F0", Offset = "0x13A08F0", VA = "0x13A08F0", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0x13A0AC8", Offset = "0x13A0AC8", VA = "0x13A0AC8")]
	public GhostHands()
	{
	}
}
[Token(Token = "0x20002FA")]
public class OpenLeftHandChain : FsmStateAction
{
	[Token(Token = "0x6000F87")]
	[Address(RVA = "0x13A0AD8", Offset = "0x13A0AD8", VA = "0x13A0AD8", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F88")]
	[Address(RVA = "0x13A0BAC", Offset = "0x13A0BAC", VA = "0x13A0BAC")]
	public OpenLeftHandChain()
	{
	}
}
[Token(Token = "0x20002FB")]
public class OpenRightHandChain : FsmStateAction
{
	[Token(Token = "0x6000F89")]
	[Address(RVA = "0x13A0BB4", Offset = "0x13A0BB4", VA = "0x13A0BB4", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0x13A0C88", Offset = "0x13A0C88", VA = "0x13A0C88")]
	public OpenRightHandChain()
	{
	}
}
[Token(Token = "0x20002FC")]
[ActionCategory("Player")]
public class SetHandState : FsmStateAction
{
	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ObjectType(typeof(Transform))]
	public FsmBool EnterState;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FsmBool LockToHand;

	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0x13A0C90", Offset = "0x13A0C90", VA = "0x13A0C90", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0x13A0CD4", Offset = "0x13A0CD4", VA = "0x13A0CD4", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0x13A11A4", Offset = "0x13A11A4", VA = "0x13A11A4")]
	public SetHandState()
	{
	}
}
[Token(Token = "0x20002FD")]
[ActionCategory("Player")]
public class ShowLeftHand : FsmStateAction
{
	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0x13A11F4", Offset = "0x13A11F4", VA = "0x13A11F4", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0x13A12D4", Offset = "0x13A12D4", VA = "0x13A12D4")]
	public ShowLeftHand()
	{
	}
}
[Token(Token = "0x20002FE")]
public class ShowRightHand : FsmStateAction
{
	[Token(Token = "0x6000F90")]
	[Address(RVA = "0x13A12DC", Offset = "0x13A12DC", VA = "0x13A12DC", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F91")]
	[Address(RVA = "0x13A13BC", Offset = "0x13A13BC", VA = "0x13A13BC")]
	public ShowRightHand()
	{
	}
}
[Token(Token = "0x20002FF")]
[ActionCategory("Player")]
public class TeleportCharacterActor : FsmStateAction
{
	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ObjectType(typeof(CharacterActorBase))]
	public FsmObject characterActor;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[ObjectType(typeof(Transform))]
	public FsmObject targetTransform;

	[Token(Token = "0x6000F92")]
	[Address(RVA = "0x13A13C4", Offset = "0x13A13C4", VA = "0x13A13C4", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F93")]
	[Address(RVA = "0x13A13EC", Offset = "0x13A13EC", VA = "0x13A13EC", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F94")]
	[Address(RVA = "0x13A19E4", Offset = "0x13A19E4", VA = "0x13A19E4")]
	public TeleportCharacterActor()
	{
	}
}
[Token(Token = "0x2000300")]
[ActionCategory("Player")]
public class TeleportPlayer : FsmStateAction
{
	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[ObjectType(typeof(Transform))]
	public FsmObject targetMothPosition;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool resetDolly;

	[Token(Token = "0x6000F95")]
	[Address(RVA = "0x13A19EC", Offset = "0x13A19EC", VA = "0x13A19EC", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F96")]
	[Address(RVA = "0x13A1A14", Offset = "0x13A1A14", VA = "0x13A1A14", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F97")]
	[Address(RVA = "0x13A1BA4", Offset = "0x13A1BA4", VA = "0x13A1BA4")]
	public TeleportPlayer()
	{
	}
}
[Token(Token = "0x2000301")]
[ActionCategory("Player")]
public class TeleportPlayerToPosition : BaseUpdateAction
{
	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FsmVector3 worldPosition;

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool resetDolly;

	[Token(Token = "0x6000F98")]
	[Address(RVA = "0x13A1BB4", Offset = "0x13A1BB4", VA = "0x13A1BB4", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6000F99")]
	[Address(RVA = "0x13A1BC4", Offset = "0x13A1BC4", VA = "0x13A1BC4", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0x13A1D0C", Offset = "0x13A1D0C", VA = "0x13A1D0C", Slot = "62")]
	public override void OnActionUpdate()
	{
	}

	[Token(Token = "0x6000F9B")]
	[Address(RVA = "0x13A1C70", Offset = "0x13A1C70", VA = "0x13A1C70")]
	protected void DoTeleportPlayer()
	{
	}

	[Token(Token = "0x6000F9C")]
	[Address(RVA = "0x13A1D10", Offset = "0x13A1D10", VA = "0x13A1D10")]
	public TeleportPlayerToPosition()
	{
	}
}
[Token(Token = "0x2000302")]
public class FSMEventSequenceInvoker : MonoBehaviour
{
	[Token(Token = "0x2000305")]
	[CompilerGenerated]
	private sealed class <InvokeSequenceRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FSMEventSequenceInvoker <>4__this;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170001E0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x13A248C", Offset = "0x13A248C", VA = "0x13A248C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0x13A24D4", Offset = "0x13A24D4", VA = "0x13A24D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x13A20F8", Offset = "0x13A20F8", VA = "0x13A20F8")]
		[DebuggerHidden]
		public <InvokeSequenceRoutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x13A225C", Offset = "0x13A225C", VA = "0x13A225C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x13A2260", Offset = "0x13A2260", VA = "0x13A2260", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x13A2494", Offset = "0x13A2494", VA = "0x13A2494", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Min(0f)]
	private float sequenceInitialDelay;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Additional Config")]
	[SerializeField]
	private bool playOnAwake;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[SerializeField]
	private bool repeat;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float sequenceRepeatInitialDelay;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float sequenceRepeatDelay;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Sequence Config")]
	[SerializeField]
	private List<FSMHandler> FSMs;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<FSMEventInfo> events;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool[,] matrix;

	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0x13A1D20", Offset = "0x13A1D20", VA = "0x13A1D20")]
	public PlayMakerFSM GetFsm(string key)
	{
		return null;
	}

	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0x13A1F00", Offset = "0x13A1F00", VA = "0x13A1F00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0x13A1F1C", Offset = "0x13A1F1C", VA = "0x13A1F1C")]
	[ContextMenu("Start Repeating Sequence")]
	public void RepeatingSequence()
	{
	}

	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0x13A207C", Offset = "0x13A207C", VA = "0x13A207C")]
	[ContextMenu("Stop Repeating Sequence")]
	public void StopRepeatingSequence()
	{
	}

	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0x13A2050", Offset = "0x13A2050", VA = "0x13A2050")]
	[ContextMenu("InvokeSequence")]
	public void InvokeSequence()
	{
	}

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0x13A2084", Offset = "0x13A2084", VA = "0x13A2084")]
	[IteratorStateMachine(typeof(<InvokeSequenceRoutine>d__13))]
	private IEnumerator InvokeSequenceRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0x13A2120", Offset = "0x13A2120", VA = "0x13A2120")]
	[ContextMenu("StopSequence")]
	public void StopSequence()
	{
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0x13A2128", Offset = "0x13A2128", VA = "0x13A2128")]
	public FSMEventSequenceInvoker()
	{
	}
}
[Serializable]
[Token(Token = "0x2000306")]
public struct FSMEventInfo
{
	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string eventName;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Min(0f)]
	public float eventDelay;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string fsmKey;
}
[Serializable]
[Token(Token = "0x2000307")]
public struct FSMHandler
{
	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string key;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public PlayMakerFSM fsm;
}
[Token(Token = "0x2000308")]
public class FSMVariableSetter : MonoBehaviour
{
	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected PlayMakerFSM target;

	[Token(Token = "0x6000FB1")]
	[Address(RVA = "0x13A24DC", Offset = "0x13A24DC", VA = "0x13A24DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FB2")]
	[Address(RVA = "0x13A2844", Offset = "0x13A2844", VA = "0x13A2844")]
	public void SetVariable(string input)
	{
	}

	[Token(Token = "0x6000FB3")]
	[Address(RVA = "0x13A3338", Offset = "0x13A3338", VA = "0x13A3338")]
	public FSMVariableSetter()
	{
	}
}
[Token(Token = "0x2000309")]
public class RigDrawer : MonoBehaviour
{
	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject origin;

	[Token(Token = "0x6000FB4")]
	[Address(RVA = "0x13A3340", Offset = "0x13A3340", VA = "0x13A3340")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000FB5")]
	[Address(RVA = "0x13A3498", Offset = "0x13A3498", VA = "0x13A3498")]
	public RigDrawer()
	{
	}
}
[Token(Token = "0x200030A")]
[CreateAssetMenu(fileName = "Cape", menuName = "ScriptableObjects/Capes/New Cape", order = 1)]
public class CapeScriptableObject : UnlockableAbilityScriptableObject
{
	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material material;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnlockableAbilityScriptableObject[] abilities;

	[Token(Token = "0x6000FB6")]
	[Address(RVA = "0x13A34A0", Offset = "0x13A34A0", VA = "0x13A34A0")]
	public CapeScriptableObject()
	{
	}
}
[Token(Token = "0x200030B")]
[CreateAssetMenu(fileName = "Teleport", menuName = "ScriptableObjects/Teleports/New Teleport", order = 1)]
public class TeleportScriptableObject : UnlockableAbilityScriptableObject
{
	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SceneData sceneData;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int checkpoint;

	[Token(Token = "0x6000FB7")]
	[Address(RVA = "0x13A34B0", Offset = "0x13A34B0", VA = "0x13A34B0")]
	public TeleportScriptableObject()
	{
	}
}
[Token(Token = "0x200030C")]
[CreateAssetMenu(fileName = "UnlockableAbility", menuName = "ScriptableObjects/UnlockableAbilities/New Unlockable Ability", order = 1)]
public class UnlockableAbilityScriptableObject : ScriptableObject
{
	[Token(Token = "0x200030D")]
	public enum UnlockableType
	{
		[Token(Token = "0x4000CAB")]
		ALCHEMY_ABILITY,
		[Token(Token = "0x4000CAC")]
		MOTH_ABILITY,
		[Token(Token = "0x4000CAD")]
		CAPE,
		[Token(Token = "0x4000CAE")]
		CAPE_ABILITY,
		[Token(Token = "0x4000CAF")]
		TELEPORT
	}

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string description;

	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite icon;

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VideoClip video;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int price;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool requireRecipe;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnlockableType unlockableType;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool unlockAtStart;

	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0x13A34A8", Offset = "0x13A34A8", VA = "0x13A34A8")]
	public UnlockableAbilityScriptableObject()
	{
	}
}
[Token(Token = "0x200030E")]
[CreateAssetMenu(fileName = "UnlockableRecipe", menuName = "ScriptableObjects/UnlockableAbilities/New Unlockable Recipe", order = 1)]
public class UnlockableRecipeScriptableObject : ScriptableObject
{
	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite icon;

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0x13A34B8", Offset = "0x13A34B8", VA = "0x13A34B8")]
	public UnlockableRecipeScriptableObject()
	{
	}
}
[Token(Token = "0x200030F")]
[CreateAssetMenu(fileName = "AlchemyDatabase", menuName = "ScriptableObjects/AlchemyDatabase", order = 1)]
public class AlchemyDatabase : ScriptableObject
{
	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyModificationBase[] items;

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0x13A34C0", Offset = "0x13A34C0", VA = "0x13A34C0")]
	public int GetAlchemyIndex(AlchemyModificationBase alchemy)
	{
		return default(int);
	}

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0x13A3574", Offset = "0x13A3574", VA = "0x13A3574")]
	public AlchemyDatabase()
	{
	}
}
[Token(Token = "0x2000310")]
[CreateAssetMenu(fileName = "Attack", menuName = "ScriptableObjects/Attacks/New Attack", order = 1)]
public class AttackScriptableObject : ScriptableObject
{
	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string parameterName;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int parameterIndex;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int startAttackMessageIndex;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int startAttackDamageMessageIndex;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int endAttackMessageIndex;

	[Token(Token = "0x6000FBC")]
	[Address(RVA = "0x13A357C", Offset = "0x13A357C", VA = "0x13A357C")]
	public AttackScriptableObject()
	{
	}
}
[Token(Token = "0x2000311")]
[CreateAssetMenu(fileName = "AchievementConfig", menuName = "ScriptableObjects/Achievements/New Achievement", order = 1)]
public class AchievementConfig : ScriptableObject
{
	[Token(Token = "0x2000312")]
	public enum AchievementType
	{
		[Token(Token = "0x4000CBC")]
		Achievement,
		[Token(Token = "0x4000CBD")]
		Stats
	}

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string id;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AchievementType achievementType;

	[Token(Token = "0x6000FBD")]
	[Address(RVA = "0x13A3594", Offset = "0x13A3594", VA = "0x13A3594")]
	public AchievementConfig()
	{
	}
}
[Token(Token = "0x2000313")]
[CreateAssetMenu(fileName = "New AudioGameSegmentConfig", menuName = "ScriptableObjects/SystemsConfiguration/Audio/AudioGameSegmentConfig", order = 1)]
public class AudioGameSegmentConfig : ScriptableObject
{
	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Optimalization")]
	[BankRef]
	public List<string> Banks;

	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0x13A359C", Offset = "0x13A359C", VA = "0x13A359C")]
	public AudioGameSegmentConfig()
	{
	}
}
[Token(Token = "0x2000314")]
[CreateAssetMenu(fileName = "New AudioSceneConfig", menuName = "ScriptableObjects/SystemsConfiguration/Audio/AudioSceneConfig", order = 1)]
public class AudioSceneConfig : ScriptableObject
{
	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Audio States")]
	public bool PreserveMusicState;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public MusicState InitialState;

	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0x13A35A4", Offset = "0x13A35A4", VA = "0x13A35A4")]
	public AudioSceneConfig()
	{
	}
}
[Token(Token = "0x2000315")]
[CreateAssetMenu(fileName = "New Enemy", menuName = "ScriptableObjects/Combat/DEPRECATED/Enemy")]
public class EnemyBase : ScriptableObject
{
	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string enemyName;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("DEPRECATED")]
	public EnemyBehaviourBase enemyPrefab;

	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0x13A35AC", Offset = "0x13A35AC", VA = "0x13A35AC")]
	public EnemyBase()
	{
	}
}
[Token(Token = "0x2000316")]
[CreateAssetMenu(fileName = "New EnemyConfig", menuName = "ScriptableObjects/Combat/EnemyConfig")]
public class EnemyConfig : ScriptableObject
{
	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string enemyName;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EnemyBehaviour enemyPrefab;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyBehaviour enemyZombieAllyPrefab;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EnemyBehaviour enemyZombiePrefab;

	[Token(Token = "0x6000FC1")]
	[Address(RVA = "0x13A35B4", Offset = "0x13A35B4", VA = "0x13A35B4")]
	public EnemyConfig()
	{
	}
}
[Token(Token = "0x2000317")]
[CreateAssetMenu(fileName = "New GameSegment", menuName = "ScriptableObjects/Core/GameSegment", order = 1)]
public class GameSegment : ScriptableObject
{
	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string segmentName;

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("AudioConfig")]
	public AudioGameSegmentConfig audioGameSegmentConfig;

	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0x13A35BC", Offset = "0x13A35BC", VA = "0x13A35BC")]
	public GameSegment()
	{
	}
}
[Token(Token = "0x2000318")]
[CreateAssetMenu(fileName = "New PoolSceneConfig", menuName = "ScriptableObjects/SystemsConfiguration/Core/PoolSceneConfig", order = 1)]
public class PoolSceneConfig : ScriptableObject
{
	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool InvokeMessageKitMessage;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int MessageKitMessageNo;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PoolConfig[] pools;

	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0x13A35C4", Offset = "0x13A35C4", VA = "0x13A35C4")]
	public PoolSceneConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000319")]
public struct PoolConfig
{
	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public GameObject pooledObjectPrefab;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Min(1f)]
	public int startupPoolSize;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool allowPoolExtension;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool disposeToPoolTransform;

	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0x13A35D4", Offset = "0x13A35D4", VA = "0x13A35D4")]
	public PoolConfig([Optional] GameObject pooledObjectPrefab, int startupPoolSize = 1, bool allowPoolExtension = true, bool disposeToPoolTransform = true)
	{
	}
}
[Token(Token = "0x200031A")]
[CreateAssetMenu(fileName = "New SceneData", menuName = "ScriptableObjects/Core/SceneData", order = 1)]
public class SceneData : ScriptableObject
{
	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string _displayName;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string sceneName;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VRCharacter.VRCharacterHandsStates playerStartState;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameSegment gameSegment;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("AudioConfig")]
	public AudioSceneConfig audioSceneConfig;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Pooling System Config")]
	public PoolSceneConfig[] poolSceneConfigs;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Alchemy")]
	public AlchemySceneData alchemy;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Materials")]
	public MaterialsSceneData[] materials;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("")]
	public int seeds;

	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int inscriptions;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Recenter")]
	public bool checkDistance;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float distance;

	[Token(Token = "0x170001E2")]
	public string DisplayName
	{
		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x13A3614", Offset = "0x13A3614", VA = "0x13A3614")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0x13A3644", Offset = "0x13A3644", VA = "0x13A3644")]
	public SceneData()
	{
	}
}
[Serializable]
[Token(Token = "0x200031B")]
public class AlchemySceneData
{
	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float assistDistance;

	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float assistCameraAngle;

	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0x13A3654", Offset = "0x13A3654", VA = "0x13A3654")]
	public AlchemySceneData()
	{
	}
}
[Serializable]
[Token(Token = "0x200031C")]
public class MaterialsSceneData
{
	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material material;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string tintParamName;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color tintColor;

	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0x13A3668", Offset = "0x13A3668", VA = "0x13A3668")]
	public MaterialsSceneData()
	{
	}
}
[Token(Token = "0x200031D")]
[CreateAssetMenu(fileName = "Ability", menuName = "ScriptableObjects/Modifications/Alchemy Abilities/New Alchemy Modification", order = 1)]
public class AlchemyModificationBase : ModificationScriptableObject
{
	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Data")]
	public AmountResources[] resources;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SwipeDirection swipeAction;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AlchemyBottle bottlePrefab;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int uiIndex;

	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("Settings")]
	public float radius;

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture glass;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color effectColor;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Color effectFillColor;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int useAmount;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Sprite icon;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int handIndexParameter;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool unlockedAtStart;

	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Alchemy UI")]
	public Sprite normalIcon;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Sprite BlockedIcon;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Sprite InactiveIcon;

	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float fillDistance;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float singularityDistance;

	[Token(Token = "0x6000FC9")]
	[Address(RVA = "0x13A36C0", Offset = "0x13A36C0", VA = "0x13A36C0")]
	public AlchemyModificationBase()
	{
	}
}
[Token(Token = "0x200031E")]
[CreateAssetMenu(fileName = "Modification", menuName = "ScriptableObjects/Modifications/New Modification", order = 1)]
public class ModificationScriptableObject : ScriptableObject
{
	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float modificatorDuration;

	[Token(Token = "0x6000FCA")]
	[Address(RVA = "0x13A36E4", Offset = "0x13A36E4", VA = "0x13A36E4")]
	public ModificationScriptableObject()
	{
	}
}
[Token(Token = "0x200031F")]
public class SuperArmorModification : ModificationScriptableObject
{
	[Token(Token = "0x6000FCB")]
	[Address(RVA = "0x13A36EC", Offset = "0x13A36EC", VA = "0x13A36EC")]
	public SuperArmorModification()
	{
	}
}
[Token(Token = "0x2000320")]
[CreateAssetMenu(fileName = "ObjectiveScriptableObject", menuName = "ScriptableObjects/New Objective", order = 1)]
public class ObjectiveScriptableObject : ScriptableObject
{
	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int index;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string description;

	[Token(Token = "0x6000FCC")]
	[Address(RVA = "0x13A36F4", Offset = "0x13A36F4", VA = "0x13A36F4")]
	public ObjectiveScriptableObject()
	{
	}
}
[Token(Token = "0x2000321")]
[CreateAssetMenu(fileName = "Resource", menuName = "ScriptableObjects/Resources/New Resource", order = 1)]
public class Resource : ScriptableObject
{
	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string description;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite icon;

	[Token(Token = "0x6000FCD")]
	[Address(RVA = "0x13A36FC", Offset = "0x13A36FC", VA = "0x13A36FC")]
	public Resource()
	{
	}
}
[Token(Token = "0x2000322")]
[CreateAssetMenu(fileName = "RecenterSettings", menuName = "ScriptableObjects/RecenterSettings", order = 1)]
public class RecenterScriptiableObject : ScriptableObject
{
	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneData[] excludedScenes;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x6000FCE")]
	[Address(RVA = "0x13A3704", Offset = "0x13A3704", VA = "0x13A3704")]
	public RecenterScriptiableObject()
	{
	}
}
[Token(Token = "0x2000323")]
[CreateAssetMenu(fileName = "New SnapModeSettings", menuName = "ScriptableObjects/Settings/SnapModeSettings")]
public class SnapModeSettings : ScriptableObject
{
	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SettingsPair> settings;

	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0x13A3718", Offset = "0x13A3718", VA = "0x13A3718")]
	public float GetValue(int key)
	{
		return default(float);
	}

	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0x13A3840", Offset = "0x13A3840", VA = "0x13A3840")]
	public SnapModeSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x2000325")]
public struct SettingsPair
{
	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int key;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float value;

	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0x13A3858", Offset = "0x13A3858", VA = "0x13A3858")]
	public SettingsPair(int key = 0, float value = 0f)
	{
	}
}
[Token(Token = "0x2000326")]
[CreateAssetMenu(fileName = "UnlockableDatabase", menuName = "ScriptableObjects/UnlockableDatabase", order = 1)]
public class UnlockablesDatabase : ScriptableObject
{
	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnlockableAbilityScriptableObject[] items;

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0x13A3864", Offset = "0x13A3864", VA = "0x13A3864")]
	public bool TryGetItemIndex(UnlockableAbilityScriptableObject item, out int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0x13A3934", Offset = "0x13A3934", VA = "0x13A3934")]
	public bool TryGetItemIndex(UnlockableAbilityScriptableObject item, UnlockableAbilityScriptableObject.UnlockableType type, out int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0x13A3A4C", Offset = "0x13A3A4C", VA = "0x13A3A4C")]
	public UnlockablesDatabase()
	{
	}
}
[Token(Token = "0x2000327")]
public class ShadowCaster : MonoBehaviour
{
	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject shadow;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask mask;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float fadeoutDistance;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float floorMargin;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool alignWithNormal;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool onlyOne;

	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float marginFromCenter;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer shadowRenderer;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RaycastHit hit;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform trans;

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0x13A3A54", Offset = "0x13A3A54", VA = "0x13A3A54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0x13A3AD0", Offset = "0x13A3AD0", VA = "0x13A3AD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FD9")]
	[Address(RVA = "0x13A3F48", Offset = "0x13A3F48", VA = "0x13A3F48")]
	public ShadowCaster()
	{
	}
}
[Serializable]
[Token(Token = "0x2000328")]
public struct AnimationAudioHandler
{
	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string AudioKey;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public StudioEventEmitter EventEmitter;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool IsLoop;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool StopAllBeforePlaying;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool DoNotStopOnDestroy;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationFMODStudioParameterSetter ParameterSetter;

	[Token(Token = "0x6000FDA")]
	[Address(RVA = "0x13A3F50", Offset = "0x13A3F50", VA = "0x13A3F50")]
	public AnimationAudioHandler(string audioKey = "", [Optional] StudioEventEmitter eventEmitter, bool isLoop = false, bool stopAllBeforePlaying = false, bool doNotStopOnDestroy = false, [Optional] AnimationFMODStudioParameterSetter parameterSetter)
	{
	}

	[Token(Token = "0x6000FDB")]
	[Address(RVA = "0x13A3FBC", Offset = "0x13A3FBC", VA = "0x13A3FBC")]
	public void PlayAudio()
	{
	}

	[Token(Token = "0x6000FDC")]
	[Address(RVA = "0x13A40EC", Offset = "0x13A40EC", VA = "0x13A40EC")]
	public void UpdateParameter()
	{
	}

	[Token(Token = "0x6000FDD")]
	[Address(RVA = "0x13A41C8", Offset = "0x13A41C8", VA = "0x13A41C8")]
	public void StopAudio()
	{
	}

	[Token(Token = "0x6000FDE")]
	[Address(RVA = "0x13A42A4", Offset = "0x13A42A4", VA = "0x13A42A4")]
	public bool IsPlayingAudio()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000329")]
public class AnimationAudioController : MonoBehaviour
{
	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationAudioHandler[] animationAudios;

	[Token(Token = "0x6000FDF")]
	[Address(RVA = "0x13A4364", Offset = "0x13A4364", VA = "0x13A4364")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0x13A43D0", Offset = "0x13A43D0", VA = "0x13A43D0")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x13A443C", Offset = "0x13A443C", VA = "0x13A443C")]
	public void PlayAnimationAudio(string audioKey)
	{
	}

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0x13A462C", Offset = "0x13A462C", VA = "0x13A462C")]
	public void UpdateAnimationAudio(string audioKey)
	{
	}

	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0x13A4658", Offset = "0x13A4658", VA = "0x13A4658")]
	public void StopAnimationAudio(string audioKey)
	{
	}

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0x13A45CC", Offset = "0x13A45CC", VA = "0x13A45CC")]
	public void StopAllAnimationAudio()
	{
	}

	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0x13A447C", Offset = "0x13A447C", VA = "0x13A447C")]
	private AnimationAudioHandler GetAnimationAudioHandler(string audioKey)
	{
		return default(AnimationAudioHandler);
	}

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0x13A4684", Offset = "0x13A4684", VA = "0x13A4684")]
	public AnimationAudioController()
	{
	}
}
[Token(Token = "0x200032A")]
public class AudioParticles : MonoBehaviour
{
	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private StudioEventEmitter emitter;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string parameterName;

	[Token(Token = "0x4000D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem particleSystem;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool invert;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[ReadOnly]
	public float percentage;

	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float maxparticles;

	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0x13A46E8", Offset = "0x13A46E8", VA = "0x13A46E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0x13A47A0", Offset = "0x13A47A0", VA = "0x13A47A0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0x13A480C", Offset = "0x13A480C", VA = "0x13A480C")]
	public AudioParticles()
	{
	}
}
[Token(Token = "0x200032B")]
public class ArenaController : MonoBehaviour
{
	[Token(Token = "0x200032D")]
	[CompilerGenerated]
	private sealed class <ShowEngagedEnemiesRoutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArenaController <>4__this;

		[Token(Token = "0x170001E5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001001")]
			[Address(RVA = "0x13A64E4", Offset = "0x13A64E4", VA = "0x13A64E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0x13A652C", Offset = "0x13A652C", VA = "0x13A652C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x13A62E8", Offset = "0x13A62E8", VA = "0x13A62E8")]
		[DebuggerHidden]
		public <ShowEngagedEnemiesRoutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x13A6430", Offset = "0x13A6430", VA = "0x13A6430", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x13A6434", Offset = "0x13A6434", VA = "0x13A6434", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x13A64EC", Offset = "0x13A64EC", VA = "0x13A64EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BarrierController[] barrierControllers;

	[Token(Token = "0x4000D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onArenaStart;

	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onArenaReset;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onArenaComplete;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool _preventResettingWhenCompleted;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	protected bool autocompleteArena;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Coroutine debugEngagedEnemiesCoroutine;

	[Token(Token = "0x170001E3")]
	public List<IArenaWave> ArenaWaves
	{
		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x13A4814", Offset = "0x13A4814", VA = "0x13A4814")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x13A481C", Offset = "0x13A481C", VA = "0x13A481C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001E4")]
	public bool IsCompleted
	{
		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x13A4824", Offset = "0x13A4824", VA = "0x13A4824")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x13A482C", Offset = "0x13A482C", VA = "0x13A482C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0x13A4838", Offset = "0x13A4838", VA = "0x13A4838")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0x13A483C", Offset = "0x13A483C", VA = "0x13A483C")]
	private void InitializeArenaWaves()
	{
	}

	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0x13A4AF0", Offset = "0x13A4AF0", VA = "0x13A4AF0")]
	public void RegisterArenaWave(IArenaWave arenaWave)
	{
	}

	[Token(Token = "0x6000FF1")]
	[Address(RVA = "0x13A4C08", Offset = "0x13A4C08", VA = "0x13A4C08")]
	[ContextMenu("Start Arena")]
	public void StartArena()
	{
	}

	[Token(Token = "0x6000FF2")]
	[Address(RVA = "0x13A5054", Offset = "0x13A5054", VA = "0x13A5054")]
	[ContextMenu("Reset Arena")]
	public void ResetArena()
	{
	}

	[Token(Token = "0x6000FF3")]
	[Address(RVA = "0x13A54B4", Offset = "0x13A54B4", VA = "0x13A54B4")]
	[ContextMenu("Complete Arena")]
	public void CompleteArena()
	{
	}

	[Token(Token = "0x6000FF4")]
	[Address(RVA = "0x13A5610", Offset = "0x13A5610", VA = "0x13A5610")]
	public void KillEngagedEnemies()
	{
	}

	[Token(Token = "0x6000FF5")]
	[Address(RVA = "0x13A588C", Offset = "0x13A588C", VA = "0x13A588C")]
	public void UpdateArena()
	{
	}

	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0x13A58C4", Offset = "0x13A58C4", VA = "0x13A58C4")]
	private bool AreWavesCompleted()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0x13A5A5C", Offset = "0x13A5A5C", VA = "0x13A5A5C")]
	public List<EnemyBehaviour> GetEngagedEnemies()
	{
		return null;
	}

	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0x13A5C54", Offset = "0x13A5C54", VA = "0x13A5C54")]
	private void DebugEngagedEnemies()
	{
	}

	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0x13A6274", Offset = "0x13A6274", VA = "0x13A6274")]
	[IteratorStateMachine(typeof(<ShowEngagedEnemiesRoutine>d__26))]
	private IEnumerator ShowEngagedEnemiesRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0x13A6310", Offset = "0x13A6310", VA = "0x13A6310")]
	public ArenaController()
	{
	}
}
[Token(Token = "0x200032E")]
public class BarrierController : MonoBehaviour
{
	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool findChildBarriers;

	[Token(Token = "0x4000D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Barrier[] barriers;

	[Token(Token = "0x6001004")]
	[Address(RVA = "0x13A6534", Offset = "0x13A6534", VA = "0x13A6534")]
	public void Awake()
	{
	}

	[Token(Token = "0x6001005")]
	[Address(RVA = "0x13A4F40", Offset = "0x13A4F40", VA = "0x13A4F40")]
	[ContextMenu("ActivateBarriers")]
	public void ActivateBarriers()
	{
	}

	[Token(Token = "0x6001006")]
	[Address(RVA = "0x13A53A0", Offset = "0x13A53A0", VA = "0x13A53A0")]
	[ContextMenu("DeactivateBarriers")]
	public void DeactivateBarriers()
	{
	}

	[Token(Token = "0x6001007")]
	[Address(RVA = "0x13A660C", Offset = "0x13A660C", VA = "0x13A660C")]
	public BarrierController()
	{
	}
}
[Token(Token = "0x200032F")]
public interface IArenaWave
{
	[Token(Token = "0x170001E7")]
	ArenaController Arena
	{
		[Token(Token = "0x6001008")]
		get;
		[Token(Token = "0x6001009")]
		set;
	}

	[Token(Token = "0x170001E8")]
	List<EnemyBehaviour> EnemiesEngaged
	{
		[Token(Token = "0x600100A")]
		get;
	}

	[Token(Token = "0x170001E9")]
	List<EnemyBehaviourBase> Enemies_Deprecated
	{
		[Token(Token = "0x600100B")]
		get;
	}

	[Token(Token = "0x170001EA")]
	bool StartingWave
	{
		[Token(Token = "0x600100C")]
		get;
	}

	[Token(Token = "0x170001EB")]
	bool Required
	{
		[Token(Token = "0x600100D")]
		get;
	}

	[Token(Token = "0x170001EC")]
	bool InProgress
	{
		[Token(Token = "0x600100E")]
		get;
	}

	[Token(Token = "0x170001ED")]
	bool Completed
	{
		[Token(Token = "0x600100F")]
		get;
	}

	[Token(Token = "0x6001010")]
	void StartWave();

	[Token(Token = "0x6001011")]
	void ResetWave();

	[Token(Token = "0x6001012")]
	void CompleteWave();

	[Token(Token = "0x6001013")]
	void AddEnemyWhileInProgress(EnemyBehaviour enemy);
}
[Token(Token = "0x2000330")]
public class ArenaEnemyPoolSpawner : EnemyPoolSpawnerBase
{
	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EnemyBehaviour _prefab;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EnemyType _enemyType;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Effect config")]
	[SerializeField]
	protected PooledParticleEffect spawnEffect;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Transform spawnEffectTarget;

	[Token(Token = "0x4000D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Min(0f)]
	public float spawnExternalDelay;

	[Token(Token = "0x170001EE")]
	public override int Limit
	{
		[Token(Token = "0x6001014")]
		[Address(RVA = "0x13A661C", Offset = "0x13A661C", VA = "0x13A661C", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001EF")]
	public override Component Prefab
	{
		[Token(Token = "0x6001015")]
		[Address(RVA = "0x13A6624", Offset = "0x13A6624", VA = "0x13A6624", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F0")]
	public override Transform Target
	{
		[Token(Token = "0x6001016")]
		[Address(RVA = "0x13A662C", Offset = "0x13A662C", VA = "0x13A662C", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F1")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6001017")]
		[Address(RVA = "0x13A6634", Offset = "0x13A6634", VA = "0x13A6634", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001F2")]
	public override EnemyType EnemyType
	{
		[Token(Token = "0x6001018")]
		[Address(RVA = "0x13A663C", Offset = "0x13A663C", VA = "0x13A663C", Slot = "10")]
		get
		{
			return default(EnemyType);
		}
		[Token(Token = "0x6001019")]
		[Address(RVA = "0x13A6644", Offset = "0x13A6644", VA = "0x13A6644", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x600101A")]
	[Address(RVA = "0x13A664C", Offset = "0x13A664C", VA = "0x13A664C")]
	public EnemyBehaviour SpawnArenaEnemy(EnemyBehaviour enemyPrefab)
	{
		return null;
	}

	[Token(Token = "0x600101B")]
	[Address(RVA = "0x13A673C", Offset = "0x13A673C", VA = "0x13A673C")]
	public void PlaySpawnEffect()
	{
	}

	[Token(Token = "0x600101C")]
	[Address(RVA = "0x13A695C", Offset = "0x13A695C", VA = "0x13A695C")]
	public ArenaEnemyPoolSpawner()
	{
	}
}
[Token(Token = "0x2000331")]
public class CloneEnemyPoolSpawner : EnemyPoolSpawnerBase
{
	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyBehaviour clone;

	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool targetIsParent;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private EnemyType _enemyType;

	[Token(Token = "0x170001F3")]
	public override int Limit
	{
		[Token(Token = "0x600101D")]
		[Address(RVA = "0x13A6974", Offset = "0x13A6974", VA = "0x13A6974", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001F4")]
	public override Component Prefab
	{
		[Token(Token = "0x600101E")]
		[Address(RVA = "0x13A697C", Offset = "0x13A697C", VA = "0x13A697C", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F5")]
	public override Transform Target
	{
		[Token(Token = "0x600101F")]
		[Address(RVA = "0x13A6984", Offset = "0x13A6984", VA = "0x13A6984", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F6")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6001020")]
		[Address(RVA = "0x13A698C", Offset = "0x13A698C", VA = "0x13A698C", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001F7")]
	public override EnemyType EnemyType
	{
		[Token(Token = "0x6001021")]
		[Address(RVA = "0x13A6994", Offset = "0x13A6994", VA = "0x13A6994", Slot = "10")]
		get
		{
			return default(EnemyType);
		}
		[Token(Token = "0x6001022")]
		[Address(RVA = "0x13A699C", Offset = "0x13A699C", VA = "0x13A699C", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x6001023")]
	[Address(RVA = "0x13A69A4", Offset = "0x13A69A4", VA = "0x13A69A4")]
	public CloneEnemyPoolSpawner()
	{
	}
}
[Token(Token = "0x2000332")]
[Obsolete("Use StandaloneEnemyPoolSpawner instead.")]
public class EnemyPoolSpawner : EnemyPoolSpawnerBase
{
	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyConfig _enemy;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private EnemyType _enemyType;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool targetIsParent;

	[Token(Token = "0x170001F8")]
	public override int Limit
	{
		[Token(Token = "0x6001024")]
		[Address(RVA = "0x13A69B0", Offset = "0x13A69B0", VA = "0x13A69B0", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001F9")]
	public override Component Prefab
	{
		[Token(Token = "0x6001025")]
		[Address(RVA = "0x13A69B8", Offset = "0x13A69B8", VA = "0x13A69B8", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001FA")]
	public override Transform Target
	{
		[Token(Token = "0x6001026")]
		[Address(RVA = "0x13A69E8", Offset = "0x13A69E8", VA = "0x13A69E8", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001FB")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6001027")]
		[Address(RVA = "0x13A69F0", Offset = "0x13A69F0", VA = "0x13A69F0", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001FC")]
	public override EnemyType EnemyType
	{
		[Token(Token = "0x6001028")]
		[Address(RVA = "0x13A69F8", Offset = "0x13A69F8", VA = "0x13A69F8", Slot = "10")]
		get
		{
			return default(EnemyType);
		}
		[Token(Token = "0x6001029")]
		[Address(RVA = "0x13A6A00", Offset = "0x13A6A00", VA = "0x13A6A00", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x600102A")]
	[Address(RVA = "0x13A6A08", Offset = "0x13A6A08", VA = "0x13A6A08")]
	public EnemyPoolSpawner()
	{
	}
}
[Token(Token = "0x2000333")]
public abstract class EnemyPoolSpawnerBase : PoolSpawner
{
	[Token(Token = "0x170001FD")]
	public abstract EnemyType EnemyType
	{
		[Token(Token = "0x600102B")]
		get;
		[Token(Token = "0x600102C")]
		set;
	}

	[Token(Token = "0x600102D")]
	[Address(RVA = "0x13A6A0C", Offset = "0x13A6A0C", VA = "0x13A6A0C", Slot = "12")]
	[ContextMenu("Spawn Enemy")]
	public virtual void SpawnEnemy()
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0x13A6AE4", Offset = "0x13A6AE4", VA = "0x13A6AE4", Slot = "13")]
	public virtual bool TrySpawnEnemy(out EnemyBehaviour spawnedEnemy)
	{
		return default(bool);
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0x13A6C2C", Offset = "0x13A6C2C", VA = "0x13A6C2C", Slot = "14")]
	public virtual void DisposeEnemies()
	{
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0x13A6DC4", Offset = "0x13A6DC4", VA = "0x13A6DC4", Slot = "15")]
	public virtual void InstantKillEnemies()
	{
	}

	[Token(Token = "0x6001031")]
	[Address(RVA = "0x13A6970", Offset = "0x13A6970", VA = "0x13A6970")]
	protected EnemyPoolSpawnerBase()
	{
	}
}
[Token(Token = "0x2000334")]
public class EnemyRevive : MonoBehaviour, IMessageReceiver
{
	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LootTable lootTable;

	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 offset;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool requireAlchemy;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AlchemyModificationReceiver effectController;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private EnemyPoolSpawnerBase _spawner;

	[Token(Token = "0x6001032")]
	[Address(RVA = "0x13A6F78", Offset = "0x13A6F78", VA = "0x13A6F78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001033")]
	[Address(RVA = "0x13A6FE4", Offset = "0x13A6FE4", VA = "0x13A6FE4")]
	public void Revive()
	{
	}

	[Token(Token = "0x6001034")]
	[Address(RVA = "0x13A7410", Offset = "0x13A7410", VA = "0x13A7410", Slot = "4")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x6001035")]
	[Address(RVA = "0x13A7448", Offset = "0x13A7448", VA = "0x13A7448")]
	public EnemyRevive()
	{
	}
}
[Token(Token = "0x2000335")]
public class EnemySpawner : MonoBehaviour
{
	[Token(Token = "0x2000336")]
	[CompilerGenerated]
	private sealed class <SpawnRoutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySpawner <>4__this;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyBehaviourBase enemy;

		[Token(Token = "0x170001FE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600103C")]
			[Address(RVA = "0x13A7728", Offset = "0x13A7728", VA = "0x13A7728", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600103E")]
			[Address(RVA = "0x13A7770", Offset = "0x13A7770", VA = "0x13A7770", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x13A760C", Offset = "0x13A760C", VA = "0x13A760C")]
		[DebuggerHidden]
		public <SpawnRoutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x13A763C", Offset = "0x13A763C", VA = "0x13A763C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x13A7640", Offset = "0x13A7640", VA = "0x13A7640", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x13A7730", Offset = "0x13A7730", VA = "0x13A7730", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent beforeSpawn;

	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Min(0f)]
	public float spawnDelay;

	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onSpawn;

	[Token(Token = "0x6001036")]
	[Address(RVA = "0x13A7468", Offset = "0x13A7468", VA = "0x13A7468")]
	public EnemyBehaviourBase SpawnEnemy(EnemyBase enemy)
	{
		return null;
	}

	[Token(Token = "0x6001037")]
	[Address(RVA = "0x13A757C", Offset = "0x13A757C", VA = "0x13A757C")]
	[IteratorStateMachine(typeof(<SpawnRoutine>d__4))]
	private IEnumerator SpawnRoutine(EnemyBehaviourBase enemy)
	{
		return null;
	}

	[Token(Token = "0x6001038")]
	[Address(RVA = "0x13A7634", Offset = "0x13A7634", VA = "0x13A7634")]
	public EnemySpawner()
	{
	}
}
[Serializable]
[Token(Token = "0x2000337")]
public struct EnemySpawnHandler
{
	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public EnemyBase Enemy;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public EnemySpawner Spawner;

	[Token(Token = "0x600103F")]
	[Address(RVA = "0x13A7778", Offset = "0x13A7778", VA = "0x13A7778")]
	public EnemyBehaviourBase SpawnEnemy()
	{
		return null;
	}
}
[Token(Token = "0x2000338")]
[RequireComponent(typeof(EnemyBehaviour))]
public class EnemyZombieBehaviour : MonoBehaviour
{
	[Token(Token = "0x2000339")]
	public enum ZombieType
	{
		[Token(Token = "0x4000D4D")]
		Ally,
		[Token(Token = "0x4000D4E")]
		Enemy
	}

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask zombieTargets;

	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LayerMask behaviourLayer;

	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ZombieType zombieType;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MeleeWeapon[] weapons;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Behaviour config")]
	[SerializeField]
	protected bool killAfterCertainTime;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Min(0f)]
	[UnityEngine.Tooltip("Time after which zombie dies.")]
	[SerializeField]
	protected float lifetime;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected TimerBaseUI timer;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool killOnArenaCompleted;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	protected bool killOnWaveCompleted;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private EnemyBehaviour _enemy;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _waitingForTimer;

	[Token(Token = "0x6001040")]
	[Address(RVA = "0x13A7798", Offset = "0x13A7798", VA = "0x13A7798")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001041")]
	[Address(RVA = "0x13A793C", Offset = "0x13A793C", VA = "0x13A793C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001042")]
	[Address(RVA = "0x13A7E50", Offset = "0x13A7E50", VA = "0x13A7E50")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001043")]
	[Address(RVA = "0x13A8300", Offset = "0x13A8300", VA = "0x13A8300")]
	private void OnArenaResetted(ArenaController arena)
	{
	}

	[Token(Token = "0x6001044")]
	[Address(RVA = "0x13A84F0", Offset = "0x13A84F0", VA = "0x13A84F0")]
	private void OnArenaCompleted(ArenaController arena)
	{
	}

	[Token(Token = "0x6001045")]
	[Address(RVA = "0x13A8604", Offset = "0x13A8604", VA = "0x13A8604")]
	private void OnWaveResetted(IArenaWave wave)
	{
	}

	[Token(Token = "0x6001046")]
	[Address(RVA = "0x13A8634", Offset = "0x13A8634", VA = "0x13A8634")]
	private void OnWaveCompleted(IArenaWave wave)
	{
	}

	[Token(Token = "0x6001047")]
	[Address(RVA = "0x13A866C", Offset = "0x13A866C", VA = "0x13A866C")]
	private void OnEnemyDefeated(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x6001048")]
	[Address(RVA = "0x13A840C", Offset = "0x13A840C", VA = "0x13A840C")]
	public void KillZombie()
	{
	}

	[Token(Token = "0x6001049")]
	[Address(RVA = "0x13A7CF8", Offset = "0x13A7CF8", VA = "0x13A7CF8")]
	public void StartZombieBehaviour()
	{
	}

	[Token(Token = "0x600104A")]
	[Address(RVA = "0x13A81B4", Offset = "0x13A81B4", VA = "0x13A81B4")]
	public void StopZombieBehaviour()
	{
	}

	[Token(Token = "0x600104B")]
	[Address(RVA = "0x13A86F4", Offset = "0x13A86F4", VA = "0x13A86F4")]
	private void TryToKillZombie()
	{
	}

	[Token(Token = "0x600104C")]
	[Address(RVA = "0x13A870C", Offset = "0x13A870C", VA = "0x13A870C")]
	public EnemyZombieBehaviour()
	{
	}
}
[Token(Token = "0x200033A")]
public class EnemyZombieControllerBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _isPooled;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected ZombieEnemyPoolSpawner spawner;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IArenaWave _arenaWave;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Behaviour config")]
	[SerializeField]
	protected bool removeAfterCertainTime;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Min(0f)]
	[UnityEngine.Tooltip("Time after which zombie dies.")]
	protected float lifetime;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected TimerBaseUI timer;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool removeOnArenaCompleted;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	protected bool removeOnWaveCompleted;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected UnityEvent onEnable;

	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected UnityEvent onDisable;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected UnityEvent onSpawn;

	[Token(Token = "0x600104D")]
	[Address(RVA = "0x13A872C", Offset = "0x13A872C", VA = "0x13A872C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600104E")]
	[Address(RVA = "0x13A8A08", Offset = "0x13A8A08", VA = "0x13A8A08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600104F")]
	[Address(RVA = "0x13A8CE4", Offset = "0x13A8CE4", VA = "0x13A8CE4")]
	private void OnArenaResetted(ArenaController arena)
	{
	}

	[Token(Token = "0x6001050")]
	[Address(RVA = "0x13A8F50", Offset = "0x13A8F50", VA = "0x13A8F50")]
	private void OnArenaCompleted(ArenaController arena)
	{
	}

	[Token(Token = "0x6001051")]
	[Address(RVA = "0x13A90C4", Offset = "0x13A90C4", VA = "0x13A90C4")]
	private void OnWaveResetted(IArenaWave wave)
	{
	}

	[Token(Token = "0x6001052")]
	[Address(RVA = "0x13A918C", Offset = "0x13A918C", VA = "0x13A918C")]
	private void OnWaveCompleted(IArenaWave wave)
	{
	}

	[Token(Token = "0x6001053")]
	[Address(RVA = "0x13A925C", Offset = "0x13A925C", VA = "0x13A925C")]
	public void Setup(EnemyBehaviour enemy, bool IsPooled = false)
	{
	}

	[Token(Token = "0x6001054")]
	[Address(RVA = "0x13A9338", Offset = "0x13A9338", VA = "0x13A9338")]
	protected void SetupAutoDispose()
	{
	}

	[Token(Token = "0x6001055")]
	[Address(RVA = "0x13A9360", Offset = "0x13A9360", VA = "0x13A9360")]
	public void SpawnZombie(int type)
	{
	}

	[Token(Token = "0x6001056")]
	[Address(RVA = "0x13A9388", Offset = "0x13A9388", VA = "0x13A9388")]
	[ContextMenu("Spawn")]
	public void SpawnZombie()
	{
	}

	[Token(Token = "0x6001057")]
	[Address(RVA = "0x13A93A0", Offset = "0x13A93A0", VA = "0x13A93A0")]
	public void SpawnZombie(out EnemyBehaviour zombie)
	{
	}

	[Token(Token = "0x6001058")]
	[Address(RVA = "0x13A8E50", Offset = "0x13A8E50", VA = "0x13A8E50")]
	public void RemoveZombieController()
	{
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0x13A9488", Offset = "0x13A9488", VA = "0x13A9488")]
	public EnemyZombieControllerBehaviour()
	{
	}
}
[Token(Token = "0x200033B")]
[RequireComponent(typeof(EnemyBehaviour))]
public class FlowerControllerSpawner : PoolSpawner, IMessageReceiver
{
	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private FlowerMineControllerBehaviour prefab;

	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AlchemyModificationBase requireAlchemy;

	[Token(Token = "0x17000200")]
	public override int Limit
	{
		[Token(Token = "0x600105A")]
		[Address(RVA = "0x13A94A8", Offset = "0x13A94A8", VA = "0x13A94A8", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000201")]
	public override Component Prefab
	{
		[Token(Token = "0x600105B")]
		[Address(RVA = "0x13A94B0", Offset = "0x13A94B0", VA = "0x13A94B0", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000202")]
	public override Transform Target
	{
		[Token(Token = "0x600105C")]
		[Address(RVA = "0x13A94B8", Offset = "0x13A94B8", VA = "0x13A94B8", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000203")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x600105D")]
		[Address(RVA = "0x13A94D8", Offset = "0x13A94D8", VA = "0x13A94D8", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600105E")]
	[Address(RVA = "0x13A94E0", Offset = "0x13A94E0", VA = "0x13A94E0", Slot = "10")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x600105F")]
	[Address(RVA = "0x13A94F0", Offset = "0x13A94F0", VA = "0x13A94F0")]
	public void SpawnZombieController()
	{
	}

	[Token(Token = "0x6001060")]
	[Address(RVA = "0x13A9758", Offset = "0x13A9758", VA = "0x13A9758")]
	public FlowerControllerSpawner()
	{
	}
}
[Token(Token = "0x200033C")]
public class FlowerMineControllerBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _isPooled;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IArenaWave _arenaWave;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Behaviour config")]
	[SerializeField]
	protected bool removeAfterCertainTime;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Min(0f)]
	[UnityEngine.Tooltip("Time after which zombie dies.")]
	[SerializeField]
	protected float lifetime;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected TimerBaseUI timer;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected PlayMakerFSM fsm;

	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool removeOnArenaCompleted;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	protected bool removeOnWaveCompleted;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected UnityEvent onEnable;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected UnityEvent onDisable;

	[Token(Token = "0x6001061")]
	[Address(RVA = "0x13A975C", Offset = "0x13A975C", VA = "0x13A975C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001062")]
	[Address(RVA = "0x13A9964", Offset = "0x13A9964", VA = "0x13A9964")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001063")]
	[Address(RVA = "0x13A9B6C", Offset = "0x13A9B6C", VA = "0x13A9B6C")]
	private void OnArenaResetted(ArenaController arena)
	{
	}

	[Token(Token = "0x6001064")]
	[Address(RVA = "0x13A9D2C", Offset = "0x13A9D2C", VA = "0x13A9D2C")]
	private void OnArenaCompleted(ArenaController arena)
	{
	}

	[Token(Token = "0x6001065")]
	[Address(RVA = "0x13A9704", Offset = "0x13A9704", VA = "0x13A9704")]
	public void Setup(EnemyBehaviour enemy, bool IsPooled = false)
	{
	}

	[Token(Token = "0x6001066")]
	[Address(RVA = "0x13A9EA0", Offset = "0x13A9EA0", VA = "0x13A9EA0")]
	protected void SetupAutoDispose()
	{
	}

	[Token(Token = "0x6001067")]
	[Address(RVA = "0x13A9EC8", Offset = "0x13A9EC8", VA = "0x13A9EC8")]
	public void MineActivate()
	{
	}

	[Token(Token = "0x6001068")]
	[Address(RVA = "0x13A9CD8", Offset = "0x13A9CD8", VA = "0x13A9CD8")]
	public void MineDeactivate()
	{
	}

	[Token(Token = "0x6001069")]
	[Address(RVA = "0x13AA014", Offset = "0x13AA014", VA = "0x13AA014")]
	public void RemoveMineController()
	{
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0x13AA0B0", Offset = "0x13AA0B0", VA = "0x13AA0B0")]
	public FlowerMineControllerBehaviour()
	{
	}
}
[Token(Token = "0x200033D")]
public class StandaloneEnemyPoolSpawner : EnemyPoolSpawnerBase
{
	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StandaloneEnemyPoolSpawnerCulling _culling;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private EnemyConfig _enemy;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private EnemyType _enemyType;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool spawnOnStart;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool targetIsParent;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private EnemyBehaviour _currentEnemy;

	[Token(Token = "0x17000204")]
	public override int Limit
	{
		[Token(Token = "0x600106B")]
		[Address(RVA = "0x13AA0D0", Offset = "0x13AA0D0", VA = "0x13AA0D0", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000205")]
	public override Component Prefab
	{
		[Token(Token = "0x600106C")]
		[Address(RVA = "0x13AA0D8", Offset = "0x13AA0D8", VA = "0x13AA0D8", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000206")]
	public override Transform Target
	{
		[Token(Token = "0x600106D")]
		[Address(RVA = "0x13AA0F4", Offset = "0x13AA0F4", VA = "0x13AA0F4", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000207")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x600106E")]
		[Address(RVA = "0x13AA0FC", Offset = "0x13AA0FC", VA = "0x13AA0FC", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000208")]
	public override EnemyType EnemyType
	{
		[Token(Token = "0x600106F")]
		[Address(RVA = "0x13AA104", Offset = "0x13AA104", VA = "0x13AA104", Slot = "10")]
		get
		{
			return default(EnemyType);
		}
		[Token(Token = "0x6001070")]
		[Address(RVA = "0x13AA10C", Offset = "0x13AA10C", VA = "0x13AA10C", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x17000209")]
	public EnemyConfig Enemy
	{
		[Token(Token = "0x6001071")]
		[Address(RVA = "0x13AA114", Offset = "0x13AA114", VA = "0x13AA114")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001072")]
		[Address(RVA = "0x13AA11C", Offset = "0x13AA11C", VA = "0x13AA11C")]
		set
		{
		}
	}

	[Token(Token = "0x1700020A")]
	public bool IsAlive
	{
		[Token(Token = "0x6001073")]
		[Address(RVA = "0x13AA124", Offset = "0x13AA124", VA = "0x13AA124")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001074")]
		[Address(RVA = "0x13AA12C", Offset = "0x13AA12C", VA = "0x13AA12C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001075")]
	[Address(RVA = "0x13AA138", Offset = "0x13AA138", VA = "0x13AA138", Slot = "8")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6001076")]
	[Address(RVA = "0x13AA200", Offset = "0x13AA200", VA = "0x13AA200", Slot = "9")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6001077")]
	[Address(RVA = "0x13AA33C", Offset = "0x13AA33C", VA = "0x13AA33C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001078")]
	[Address(RVA = "0x13AA3F4", Offset = "0x13AA3F4", VA = "0x13AA3F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001079")]
	[Address(RVA = "0x13AA4D4", Offset = "0x13AA4D4", VA = "0x13AA4D4", Slot = "14")]
	public override void DisposeEnemies()
	{
	}

	[Token(Token = "0x600107A")]
	[Address(RVA = "0x13AA4DC", Offset = "0x13AA4DC", VA = "0x13AA4DC", Slot = "12")]
	public override void SpawnEnemy()
	{
	}

	[Token(Token = "0x600107B")]
	[Address(RVA = "0x13AA5B4", Offset = "0x13AA5B4", VA = "0x13AA5B4")]
	public void Show()
	{
	}

	[Token(Token = "0x600107C")]
	[Address(RVA = "0x13AA5F4", Offset = "0x13AA5F4", VA = "0x13AA5F4")]
	public void Hide()
	{
	}

	[Token(Token = "0x600107D")]
	[Address(RVA = "0x13AA65C", Offset = "0x13AA65C", VA = "0x13AA65C")]
	private void OnDefeatListener(EnemyBehaviour enemy)
	{
	}

	[Token(Token = "0x600107E")]
	[Address(RVA = "0x13AA71C", Offset = "0x13AA71C", VA = "0x13AA71C")]
	public StandaloneEnemyPoolSpawner()
	{
	}
}
[Token(Token = "0x200033E")]
[RequireComponent(typeof(SphereCollider))]
public class StandaloneEnemyPoolSpawnerCulling : MonoBehaviour, ICulling<StandaloneEnemyPoolSpawner>
{
	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly TagFilter _detectedTags;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StandaloneEnemyPoolSpawner _target;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _showing;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool _applicationQuitting;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SphereCollider _collider;

	[Token(Token = "0x4000D72")]
	private const float MothDistanceDelta = 0.25f;

	[Token(Token = "0x1700020B")]
	public bool Showing
	{
		[Token(Token = "0x600107F")]
		[Address(RVA = "0x13AA730", Offset = "0x13AA730", VA = "0x13AA730")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700020C")]
	public CullingGroup CullingGroup
	{
		[Token(Token = "0x6001080")]
		[Address(RVA = "0x13AA738", Offset = "0x13AA738", VA = "0x13AA738", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700020D")]
	public float CullingRadius
	{
		[Token(Token = "0x6001081")]
		[Address(RVA = "0x13AA740", Offset = "0x13AA740", VA = "0x13AA740", Slot = "5")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001082")]
		[Address(RVA = "0x13AA75C", Offset = "0x13AA75C", VA = "0x13AA75C", Slot = "6")]
		set
		{
		}
	}

	[Token(Token = "0x1700020E")]
	public float ViewDistance
	{
		[Token(Token = "0x6001083")]
		[Address(RVA = "0x13AA778", Offset = "0x13AA778", VA = "0x13AA778", Slot = "7")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001084")]
		[Address(RVA = "0x13AA794", Offset = "0x13AA794", VA = "0x13AA794", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x6001085")]
	[Address(RVA = "0x13AA7B0", Offset = "0x13AA7B0", VA = "0x13AA7B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001086")]
	[Address(RVA = "0x13AA7FC", Offset = "0x13AA7FC", VA = "0x13AA7FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001087")]
	[Address(RVA = "0x13AA9BC", Offset = "0x13AA9BC", VA = "0x13AA9BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001088")]
	[Address(RVA = "0x13AAB24", Offset = "0x13AAB24", VA = "0x13AAB24")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6001089")]
	[Address(RVA = "0x13AAB30", Offset = "0x13AAB30", VA = "0x13AAB30")]
	private void OnPlayerRespawn()
	{
	}

	[Token(Token = "0x600108A")]
	[Address(RVA = "0x13AAAD0", Offset = "0x13AAAD0", VA = "0x13AAAD0", Slot = "9")]
	public void Cull(bool visible)
	{
	}

	[Token(Token = "0x600108B")]
	[Address(RVA = "0x13AA4A0", Offset = "0x13AA4A0", VA = "0x13AA4A0", Slot = "10")]
	public void Setup(StandaloneEnemyPoolSpawner target)
	{
	}

	[Token(Token = "0x600108C")]
	[Address(RVA = "0x13AA930", Offset = "0x13AA930", VA = "0x13AA930")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600108D")]
	[Address(RVA = "0x13AAB4C", Offset = "0x13AAB4C", VA = "0x13AAB4C")]
	public void CullCheck()
	{
	}

	[Token(Token = "0x600108E")]
	[Address(RVA = "0x13AACD0", Offset = "0x13AACD0", VA = "0x13AACD0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600108F")]
	[Address(RVA = "0x13AAD44", Offset = "0x13AAD44", VA = "0x13AAD44")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001090")]
	[Address(RVA = "0x13AAB94", Offset = "0x13AAB94", VA = "0x13AAB94")]
	private float GetPlayerDistance()
	{
		return default(float);
	}

	[Token(Token = "0x6001091")]
	[Address(RVA = "0x13AADB8", Offset = "0x13AADB8", VA = "0x13AADB8")]
	public StandaloneEnemyPoolSpawnerCulling()
	{
	}
}
[Token(Token = "0x200033F")]
[RequireComponent(typeof(EnemyBehaviour))]
public class ZombieControllerSpawner : PoolSpawner, IMessageReceiver
{
	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyZombieControllerBehaviour prefab;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool checkAlchemy;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AlchemyModificationBase requireAlchemy;

	[Token(Token = "0x1700020F")]
	public override int Limit
	{
		[Token(Token = "0x6001092")]
		[Address(RVA = "0x13AAEE8", Offset = "0x13AAEE8", VA = "0x13AAEE8", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000210")]
	public override Component Prefab
	{
		[Token(Token = "0x6001093")]
		[Address(RVA = "0x13AAEF0", Offset = "0x13AAEF0", VA = "0x13AAEF0", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000211")]
	public override Transform Target
	{
		[Token(Token = "0x6001094")]
		[Address(RVA = "0x13AAEF8", Offset = "0x13AAEF8", VA = "0x13AAEF8", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000212")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6001095")]
		[Address(RVA = "0x13AAF18", Offset = "0x13AAF18", VA = "0x13AAF18", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001096")]
	[Address(RVA = "0x13AAF20", Offset = "0x13AAF20", VA = "0x13AAF20", Slot = "10")]
	public void OnReceiveMessage(MessageType type, object sender, object msg)
	{
	}

	[Token(Token = "0x6001097")]
	[Address(RVA = "0x13AAF30", Offset = "0x13AAF30", VA = "0x13AAF30")]
	public void SpawnZombieController()
	{
	}

	[Token(Token = "0x6001098")]
	[Address(RVA = "0x13AB0E4", Offset = "0x13AB0E4", VA = "0x13AB0E4")]
	public ZombieControllerSpawner()
	{
	}
}
[Token(Token = "0x2000340")]
public class ZombieEnemyPoolSpawner : EnemyPoolSpawnerBase
{
	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyConfig _enemy;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private EnemyType _enemyType;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private EnemyZombieBehaviour.ZombieType _zombieType;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool targetIsParent;

	[Token(Token = "0x17000213")]
	public override int Limit
	{
		[Token(Token = "0x6001099")]
		[Address(RVA = "0x13AB0F0", Offset = "0x13AB0F0", VA = "0x13AB0F0", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000214")]
	public override Component Prefab
	{
		[Token(Token = "0x600109A")]
		[Address(RVA = "0x13AB0F8", Offset = "0x13AB0F8", VA = "0x13AB0F8", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000215")]
	public override Transform Target
	{
		[Token(Token = "0x600109B")]
		[Address(RVA = "0x13AB128", Offset = "0x13AB128", VA = "0x13AB128", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000216")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x600109C")]
		[Address(RVA = "0x13AB130", Offset = "0x13AB130", VA = "0x13AB130", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000217")]
	public override EnemyType EnemyType
	{
		[Token(Token = "0x600109D")]
		[Address(RVA = "0x13AB138", Offset = "0x13AB138", VA = "0x13AB138", Slot = "10")]
		get
		{
			return default(EnemyType);
		}
		[Token(Token = "0x600109E")]
		[Address(RVA = "0x13AB140", Offset = "0x13AB140", VA = "0x13AB140", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x17000218")]
	public EnemyZombieBehaviour.ZombieType ZombieType
	{
		[Token(Token = "0x600109F")]
		[Address(RVA = "0x13AB148", Offset = "0x13AB148", VA = "0x13AB148")]
		get
		{
			return default(EnemyZombieBehaviour.ZombieType);
		}
		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x13AB150", Offset = "0x13AB150", VA = "0x13AB150")]
		set
		{
		}
	}

	[Token(Token = "0x60010A1")]
	[Address(RVA = "0x13AB158", Offset = "0x13AB158", VA = "0x13AB158")]
	public ZombieEnemyPoolSpawner()
	{
	}
}
[Serializable]
[Token(Token = "0x2000341")]
public struct CustomLogCategoryHandler
{
	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public CustomLogCategory Category;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public bool ShowInConsole;

	[Token(Token = "0x17000219")]
	public string Name
	{
		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x13AB174", Offset = "0x13AB174", VA = "0x13AB174")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60010A2")]
	[Address(RVA = "0x13AB164", Offset = "0x13AB164", VA = "0x13AB164")]
	public CustomLogCategoryHandler(CustomLogCategory category, bool showInConsole = true)
	{
	}
}
[Token(Token = "0x2000342")]
public class CustomLog : MonoBehaviour
{
	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<CustomLog> _listenersList;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CustomLogCategoryHandler[] Categories;

	[Token(Token = "0x60010A4")]
	[Address(RVA = "0x13AB1DC", Offset = "0x13AB1DC", VA = "0x13AB1DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60010A5")]
	[Address(RVA = "0x13AB308", Offset = "0x13AB308", VA = "0x13AB308")]
	private void CustomLogHandler(string logString, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x60010A6")]
	[Address(RVA = "0x13AB3CC", Offset = "0x13AB3CC", VA = "0x13AB3CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60010A7")]
	[Address(RVA = "0x13AB44C", Offset = "0x13AB44C", VA = "0x13AB44C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60010A8")]
	[Address(RVA = "0x13A1748", Offset = "0x13A1748", VA = "0x13A1748")]
	public static void Info(string message, CustomLogCategory category = CustomLogCategory.General, [Optional] UnityEngine.Object context)
	{
	}

	[Token(Token = "0x60010A9")]
	[Address(RVA = "0x13A25A8", Offset = "0x13A25A8", VA = "0x13A25A8")]
	public static void Warning(string message, CustomLogCategory category = CustomLogCategory.General, [Optional] UnityEngine.Object context)
	{
	}

	[Token(Token = "0x60010AA")]
	[Address(RVA = "0x13A0F08", Offset = "0x13A0F08", VA = "0x13A0F08")]
	public static void Error(string message, CustomLogCategory category = CustomLogCategory.General, [Optional] UnityEngine.Object context)
	{
	}

	[Token(Token = "0x60010AB")]
	[Address(RVA = "0x13AB230", Offset = "0x13AB230", VA = "0x13AB230")]
	public static void AddListenerObject(CustomLog cLog)
	{
	}

	[Token(Token = "0x60010AC")]
	[Address(RVA = "0x13AB4E4", Offset = "0x13AB4E4", VA = "0x13AB4E4")]
	public static void RemoveListenerObject(CustomLog cLog)
	{
	}

	[Token(Token = "0x60010AD")]
	[Address(RVA = "0x13AB564", Offset = "0x13AB564", VA = "0x13AB564")]
	private bool IsCategoryActive(CustomLogCategory category)
	{
		return default(bool);
	}

	[Token(Token = "0x60010AE")]
	[Address(RVA = "0x13AB5D4", Offset = "0x13AB5D4", VA = "0x13AB5D4")]
	private void MonoInfo(string message, CustomLogCategory category = CustomLogCategory.General)
	{
	}

	[Token(Token = "0x60010AF")]
	[Address(RVA = "0x13AB600", Offset = "0x13AB600", VA = "0x13AB600")]
	private void MonoWarning(string message, CustomLogCategory category = CustomLogCategory.General)
	{
	}

	[Token(Token = "0x60010B0")]
	[Address(RVA = "0x13AB62C", Offset = "0x13AB62C", VA = "0x13AB62C")]
	private void MonoError(string message, CustomLogCategory category = CustomLogCategory.General)
	{
	}

	[Token(Token = "0x60010B1")]
	[Address(RVA = "0x13AB658", Offset = "0x13AB658", VA = "0x13AB658")]
	public void DebugLog(string message)
	{
	}

	[Token(Token = "0x60010B2")]
	[Address(RVA = "0x13AB684", Offset = "0x13AB684", VA = "0x13AB684")]
	public CustomLog()
	{
	}
}
[Token(Token = "0x2000346")]
public enum CustomLogCategory
{
	[Token(Token = "0x4000D85")]
	General = 0,
	[Token(Token = "0x4000D86")]
	Unity = 1,
	[Token(Token = "0x4000D87")]
	Debug = 2,
	[Token(Token = "0x4000D88")]
	Core = 100,
	[Token(Token = "0x4000D89")]
	Audio = 101,
	[Token(Token = "0x4000D8A")]
	Animation = 102,
	[Token(Token = "0x4000D8B")]
	UI = 103,
	[Token(Token = "0x4000D8C")]
	FX = 104,
	[Token(Token = "0x4000D8D")]
	Combat = 105,
	[Token(Token = "0x4000D8E")]
	GameplayFlow = 106,
	[Token(Token = "0x4000D8F")]
	Shaders = 110,
	[Token(Token = "0x4000D90")]
	Player = 200,
	[Token(Token = "0x4000D91")]
	Alchemy = 300,
	[Token(Token = "0x4000D92")]
	DamageSystem = 301,
	[Token(Token = "0x4000D93")]
	NPCs = 302,
	[Token(Token = "0x4000D94")]
	Enemies = 303,
	[Token(Token = "0x4000D95")]
	Interactables = 304
}
[Token(Token = "0x2000347")]
public class InteractionIndicator : MonoBehaviour
{
	[Token(Token = "0x4000D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IndicatorType indicatorType;

	[Token(Token = "0x4000D97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RotateToPlayer rotator;

	[Token(Token = "0x4000D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI textBox;

	[Token(Token = "0x4000D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject panel;

	[Token(Token = "0x4000D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CanvasGroup canvasGroup;

	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MeshRenderer renderer;

	[Token(Token = "0x60010BA")]
	[Address(RVA = "0x13AB7C0", Offset = "0x13AB7C0", VA = "0x13AB7C0")]
	public void Awake()
	{
	}

	[Token(Token = "0x60010BB")]
	[Address(RVA = "0x13AB924", Offset = "0x13AB924", VA = "0x13AB924")]
	private void Start()
	{
	}

	[Token(Token = "0x60010BC")]
	[Address(RVA = "0x13ABA2C", Offset = "0x13ABA2C", VA = "0x13ABA2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60010BD")]
	[Address(RVA = "0x13ABB34", Offset = "0x13ABB34", VA = "0x13ABB34")]
	public void Show(IndicatorConfig config)
	{
	}

	[Token(Token = "0x60010BE")]
	[Address(RVA = "0x13ABF00", Offset = "0x13ABF00", VA = "0x13ABF00")]
	public void Hide(IndicatorConfig config)
	{
	}

	[Token(Token = "0x60010BF")]
	[Address(RVA = "0x13ABE0C", Offset = "0x13ABE0C", VA = "0x13ABE0C")]
	protected void FadeIn()
	{
	}

	[Token(Token = "0x60010C0")]
	[Address(RVA = "0x13ABF18", Offset = "0x13ABF18", VA = "0x13ABF18")]
	protected void FadeOut()
	{
	}

	[Token(Token = "0x60010C1")]
	[Address(RVA = "0x13AC0BC", Offset = "0x13AC0BC", VA = "0x13AC0BC")]
	public InteractionIndicator()
	{
	}
}
[Serializable]
[Token(Token = "0x2000348")]
public struct IndicatorConfig
{
	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IndicatorType indicatorType;

	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform transform;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string message;

	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool rotateToPlayer;
}
[Token(Token = "0x2000349")]
public enum IndicatorType
{
	[Token(Token = "0x4000DA1")]
	Default = 0,
	[Token(Token = "0x4000DA2")]
	DialogueInteraction = 101
}
[Token(Token = "0x200034A")]
public class InteractionIndicatorInvoker : MonoBehaviour
{
	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IndicatorConfig config;

	[Token(Token = "0x60010C4")]
	[Address(RVA = "0x13AC104", Offset = "0x13AC104", VA = "0x13AC104")]
	public void ShowIndicator()
	{
	}

	[Token(Token = "0x60010C5")]
	[Address(RVA = "0x13AC194", Offset = "0x13AC194", VA = "0x13AC194")]
	public void HideIndicator()
	{
	}

	[Token(Token = "0x60010C6")]
	[Address(RVA = "0x13AC224", Offset = "0x13AC224", VA = "0x13AC224")]
	public void SetConfigTransform(Transform transform)
	{
	}

	[Token(Token = "0x60010C7")]
	[Address(RVA = "0x13AC22C", Offset = "0x13AC22C", VA = "0x13AC22C")]
	public InteractionIndicatorInvoker()
	{
	}
}
[Token(Token = "0x200034B")]
public class TransformBasicSetter : MonoBehaviour
{
	[Token(Token = "0x60010C8")]
	[Address(RVA = "0x13AC234", Offset = "0x13AC234", VA = "0x13AC234")]
	public void SetPosition(Transform targetPosition)
	{
	}

	[Token(Token = "0x60010C9")]
	[Address(RVA = "0x13AC278", Offset = "0x13AC278", VA = "0x13AC278")]
	public void SetRotation(Transform targetRotation)
	{
	}

	[Token(Token = "0x60010CA")]
	[Address(RVA = "0x13AC2BC", Offset = "0x13AC2BC", VA = "0x13AC2BC")]
	public void SetPositionAndRotation(Transform targetTransform)
	{
	}

	[Token(Token = "0x60010CB")]
	[Address(RVA = "0x13AC2E4", Offset = "0x13AC2E4", VA = "0x13AC2E4")]
	public void SetScale(Transform targetScale)
	{
	}

	[Token(Token = "0x60010CC")]
	[Address(RVA = "0x13AC328", Offset = "0x13AC328", VA = "0x13AC328")]
	public void SetPositionRotationAndScale(Transform targetTransform)
	{
	}

	[Token(Token = "0x60010CD")]
	[Address(RVA = "0x13AC35C", Offset = "0x13AC35C", VA = "0x13AC35C")]
	public TransformBasicSetter()
	{
	}
}
[Token(Token = "0x200034C")]
public interface IPlayerRespawnListener
{
	[Token(Token = "0x60010CE")]
	void OnPlayerRespawn();
}
[Token(Token = "0x200034D")]
public class RespawnEventListener : MonoBehaviour
{
	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onPlayerRespawn;

	[Token(Token = "0x60010CF")]
	[Address(RVA = "0x13AC364", Offset = "0x13AC364", VA = "0x13AC364")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60010D0")]
	[Address(RVA = "0x13AC40C", Offset = "0x13AC40C", VA = "0x13AC40C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60010D1")]
	[Address(RVA = "0x13AC4B4", Offset = "0x13AC4B4", VA = "0x13AC4B4")]
	private void OnPlayerRespawn()
	{
	}

	[Token(Token = "0x60010D2")]
	[Address(RVA = "0x13AC4C8", Offset = "0x13AC4C8", VA = "0x13AC4C8")]
	public RespawnEventListener()
	{
	}
}
[Token(Token = "0x200034E")]
public class SwipeDebugger : MonoBehaviour
{
	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI nameTB;

	[Token(Token = "0x60010D3")]
	[Address(RVA = "0x13AC4D0", Offset = "0x13AC4D0", VA = "0x13AC4D0")]
	public void Show(SwipeData data)
	{
	}

	[Token(Token = "0x60010D4")]
	[Address(RVA = "0x13AC5B0", Offset = "0x13AC5B0", VA = "0x13AC5B0")]
	public SwipeDebugger()
	{
	}
}
[Token(Token = "0x200034F")]
public class SwipeDetector : MonoBehaviour
{
	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private XRNode inputSource;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private InputHelpers.Button inputButton;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform movementSource;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float newPositionThresholtDistance;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float inputTreshold;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool onlyOnce;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	private bool detectSwipeOnlyAfterRelease;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float minDistanceForSwipe;

	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private SwipeDirection[] detectionDirections;

	[Token(Token = "0x4000DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 handUpPosition;

	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 handDownPosition;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isMoving;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isTriggered;

	[Token(Token = "0x1700021A")]
	public XRNode InputSource
	{
		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x13AC878", Offset = "0x13AC878", VA = "0x13AC878")]
		get
		{
			return default(XRNode);
		}
		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x13AC880", Offset = "0x13AC880", VA = "0x13AC880")]
		set
		{
		}
	}

	[Token(Token = "0x1700021B")]
	public InputHelpers.Button InputButton
	{
		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x13AC888", Offset = "0x13AC888", VA = "0x13AC888")]
		get
		{
			return default(InputHelpers.Button);
		}
		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x13AC890", Offset = "0x13AC890", VA = "0x13AC890")]
		set
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action<SwipeData> OnSwipe
	{
		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x13AC5B8", Offset = "0x13AC5B8", VA = "0x13AC5B8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x13AC668", Offset = "0x13AC668", VA = "0x13AC668")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action<SwipeDirection, float> OnSwipeUpdate
	{
		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x13AC718", Offset = "0x13AC718", VA = "0x13AC718")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x13AC7C8", Offset = "0x13AC7C8", VA = "0x13AC7C8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60010DD")]
	[Address(RVA = "0x13AC898", Offset = "0x13AC898", VA = "0x13AC898")]
	public void Activate()
	{
	}

	[Token(Token = "0x60010DE")]
	[Address(RVA = "0x13AC8A8", Offset = "0x13AC8A8", VA = "0x13AC8A8")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x60010DF")]
	[Address(RVA = "0x13AC8B4", Offset = "0x13AC8B4", VA = "0x13AC8B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60010E0")]
	[Address(RVA = "0x13ACB6C", Offset = "0x13ACB6C", VA = "0x13ACB6C")]
	private void DetectSwipe()
	{
	}

	[Token(Token = "0x60010E1")]
	[Address(RVA = "0x13ACD14", Offset = "0x13ACD14", VA = "0x13ACD14")]
	private bool SwipeDistanceCheckMet()
	{
		return default(bool);
	}

	[Token(Token = "0x60010E2")]
	[Address(RVA = "0x13ACDB0", Offset = "0x13ACDB0", VA = "0x13ACDB0")]
	private void Check()
	{
	}

	[Token(Token = "0x60010E3")]
	[Address(RVA = "0x13ACB9C", Offset = "0x13ACB9C", VA = "0x13ACB9C")]
	public SwipeDirection GetSwipeDirection()
	{
		return default(SwipeDirection);
	}

	[Token(Token = "0x60010E4")]
	[Address(RVA = "0x13ACE50", Offset = "0x13ACE50", VA = "0x13ACE50")]
	private void SendSwipe(SwipeDirection direction)
	{
	}

	[Token(Token = "0x60010E5")]
	[Address(RVA = "0x13ACDF4", Offset = "0x13ACDF4", VA = "0x13ACDF4")]
	private bool HasDirection(SwipeDirection direction)
	{
		return default(bool);
	}

	[Token(Token = "0x60010E6")]
	[Address(RVA = "0x13ACE94", Offset = "0x13ACE94", VA = "0x13ACE94")]
	public SwipeDetector()
	{
	}
}
[Token(Token = "0x2000351")]
public struct SwipeData
{
	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector2 StartPosition;

	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector2 EndPosition;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SwipeDirection Direction;
}
[Token(Token = "0x2000352")]
public enum SwipeDirection
{
	[Token(Token = "0x4000DBC")]
	Left,
	[Token(Token = "0x4000DBD")]
	Up,
	[Token(Token = "0x4000DBE")]
	Right,
	[Token(Token = "0x4000DBF")]
	Down,
	[Token(Token = "0x4000DC0")]
	Forward,
	[Token(Token = "0x4000DC1")]
	Back,
	[Token(Token = "0x4000DC2")]
	None
}
[Token(Token = "0x2000353")]
public class SwipeLogger : MonoBehaviour
{
	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected SwipeDetector swipeDetector;

	[Token(Token = "0x60010EB")]
	[Address(RVA = "0x13AD0CC", Offset = "0x13AD0CC", VA = "0x13AD0CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010EC")]
	[Address(RVA = "0x13AD154", Offset = "0x13AD154", VA = "0x13AD154")]
	private void SwipeDetector_OnSwipe(SwipeData data)
	{
	}

	[Token(Token = "0x60010ED")]
	[Address(RVA = "0x13AD224", Offset = "0x13AD224", VA = "0x13AD224")]
	public SwipeLogger()
	{
	}
}
[Token(Token = "0x2000354")]
public abstract class AchievementBaseProvider
{
	[Token(Token = "0x60010EE")]
	public abstract void Init(Action onInitCompleted);

	[Token(Token = "0x60010EF")]
	public abstract void UnlockAchievement(string key);

	[Token(Token = "0x60010F0")]
	public abstract void UpdateStats(string key, float currentValue, float difference);

	[Token(Token = "0x60010F1")]
	public abstract bool IsUnlockedAchievement(string key);

	[Token(Token = "0x60010F2")]
	public abstract float GetStatValue(string key);

	[Token(Token = "0x60010F3")]
	[Address(RVA = "0x13AD22C", Offset = "0x13AD22C", VA = "0x13AD22C")]
	protected AchievementBaseProvider()
	{
	}
}
[Token(Token = "0x2000355")]
public class AchievementOculusProvider : AchievementBaseProvider
{
	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isInit;

	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Action onInitCompleted;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AchievementProgressList progressList;

	[Token(Token = "0x60010F4")]
	[Address(RVA = "0x13AD234", Offset = "0x13AD234", VA = "0x13AD234", Slot = "4")]
	public override void Init(Action onInitCompleted)
	{
	}

	[Token(Token = "0x60010F5")]
	[Address(RVA = "0x13AD4F8", Offset = "0x13AD4F8", VA = "0x13AD4F8", Slot = "8")]
	public override float GetStatValue(string key)
	{
		return default(float);
	}

	[Token(Token = "0x60010F6")]
	[Address(RVA = "0x13AD7F0", Offset = "0x13AD7F0", VA = "0x13AD7F0", Slot = "7")]
	public override bool IsUnlockedAchievement(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60010F7")]
	[Address(RVA = "0x13ADADC", Offset = "0x13ADADC", VA = "0x13ADADC", Slot = "5")]
	public override void UnlockAchievement(string key)
	{
	}

	[Token(Token = "0x60010F8")]
	[Address(RVA = "0x13ADC98", Offset = "0x13ADC98", VA = "0x13ADC98", Slot = "6")]
	public override void UpdateStats(string key, float currentValue, float difference)
	{
	}

	[Token(Token = "0x60010F9")]
	[Address(RVA = "0x13ADB20", Offset = "0x13ADB20", VA = "0x13ADB20")]
	private void CheckForAchievmentUpdates(string key)
	{
	}

	[Token(Token = "0x60010FA")]
	[Address(RVA = "0x13ADD3C", Offset = "0x13ADD3C", VA = "0x13ADD3C")]
	public AchievementOculusProvider()
	{
	}
}
[Token(Token = "0x2000358")]
public class AchievementsSystem : SystemBase
{
	[Serializable]
	[Token(Token = "0x2000359")]
	public class AchievementData
	{
		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AchievementConfig config;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool isUnlocked;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public float currentValue;

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x13AE4C8", Offset = "0x13AE4C8", VA = "0x13AE4C8")]
		public AchievementData()
		{
		}
	}

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AchievementData[] achievements;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AchievementBaseProvider achievementProvider;

	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isInitialized;

	[Token(Token = "0x60010FF")]
	[Address(RVA = "0x13AE1BC", Offset = "0x13AE1BC", VA = "0x13AE1BC", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6001100")]
	[Address(RVA = "0x13AE2A8", Offset = "0x13AE2A8", VA = "0x13AE2A8")]
	private void OnProviderSetupCompleted()
	{
	}

	[Token(Token = "0x6001101")]
	[Address(RVA = "0x13A036C", Offset = "0x13A036C", VA = "0x13A036C")]
	public void UnlockAchievement(AchievementConfig achievement)
	{
	}

	[Token(Token = "0x6001102")]
	[Address(RVA = "0x13AE47C", Offset = "0x13AE47C", VA = "0x13AE47C")]
	public bool IsAchievementUnlocked(AchievementConfig achievement)
	{
		return default(bool);
	}

	[Token(Token = "0x6001103")]
	[Address(RVA = "0x13A03D8", Offset = "0x13A03D8", VA = "0x13A03D8")]
	public void UpdateStats(AchievementConfig achievement)
	{
	}

	[Token(Token = "0x6001104")]
	[Address(RVA = "0x13AE37C", Offset = "0x13AE37C", VA = "0x13AE37C")]
	private bool TryGetAchievement(AchievementConfig config, out AchievementData achievement)
	{
		return default(bool);
	}

	[Token(Token = "0x6001105")]
	[Address(RVA = "0x13AE4C0", Offset = "0x13AE4C0", VA = "0x13AE4C0")]
	public AchievementsSystem()
	{
	}
}
[Token(Token = "0x200035A")]
public class AudioSystem : SystemBase
{
	[Serializable]
	[Token(Token = "0x200035B")]
	public struct GameAudioSnapshots
	{
		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameAudioState State;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public StudioEventEmitter snapshot;
	}

	[Token(Token = "0x4000DD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("UI Events")]
	[SerializeField]
	private StudioEventEmitter ConfirmEvent;

	[Token(Token = "0x4000DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private StudioEventEmitter ConfirmDialogueEvent;

	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private StudioEventEmitter ConfirmAlchemyEvent;

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private StudioEventEmitter HighlightEvent;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private StudioEventEmitter HighlightDialogueEvent;

	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private StudioEventEmitter HighlightAlchemyEvent;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private StudioEventEmitter ShopConfirmEvent;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Header("Alchemy")]
	private StudioEventEmitter throwTargetEvent;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform throwTargetTransform;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Pause Events")]
	private StudioEventEmitter PauseEvent;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly string musicStateParameter;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly string gameStateParameter;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AudioSceneConfig _currentAudioSceneConfig;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private AudioGameSegmentConfig _currentAudioGameSegmentConfig;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private StudioBankLoader studioBankLoader;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private StudioEventEmitter defaultEventEmitterPrefab;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameAudioSnapshots[] snapshots;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Bus musicBus;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Bus sfxBus;

	[Token(Token = "0x1700021C")]
	public StudioEventEmitter DefaultEventEmitter
	{
		[Token(Token = "0x6001107")]
		[Address(RVA = "0x13AE4D0", Offset = "0x13AE4D0", VA = "0x13AE4D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001108")]
	[Address(RVA = "0x13AE4D8", Offset = "0x13AE4D8", VA = "0x13AE4D8", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6001109")]
	[Address(RVA = "0x13AE614", Offset = "0x13AE614", VA = "0x13AE614")]
	public void ForcePauseAudio()
	{
	}

	[Token(Token = "0x600110A")]
	[Address(RVA = "0x13AE668", Offset = "0x13AE668", VA = "0x13AE668")]
	public void ForceResumeAudio()
	{
	}

	[Token(Token = "0x600110B")]
	[Address(RVA = "0x13AE6BC", Offset = "0x13AE6BC", VA = "0x13AE6BC")]
	public void PauseAudio()
	{
	}

	[Token(Token = "0x600110C")]
	[Address(RVA = "0x13AE6D8", Offset = "0x13AE6D8", VA = "0x13AE6D8")]
	public void ResumeAudio()
	{
	}

	[Token(Token = "0x600110D")]
	[Address(RVA = "0x13AE6F4", Offset = "0x13AE6F4", VA = "0x13AE6F4")]
	public void StopAudio()
	{
	}

	[Token(Token = "0x600110E")]
	[Address(RVA = "0x13AE744", Offset = "0x13AE744", VA = "0x13AE744")]
	public void LoadGameSegmentConfig(AudioGameSegmentConfig config)
	{
	}

	[Token(Token = "0x600110F")]
	[Address(RVA = "0x13AE8FC", Offset = "0x13AE8FC", VA = "0x13AE8FC")]
	public void LoadSceneConfig(AudioSceneConfig config)
	{
	}

	[Token(Token = "0x6001110")]
	[Address(RVA = "0x13AE820", Offset = "0x13AE820", VA = "0x13AE820")]
	protected void UnloadGameSegmentConfig(AudioGameSegmentConfig config)
	{
	}

	[Token(Token = "0x6001111")]
	[Address(RVA = "0x13AEA58", Offset = "0x13AEA58", VA = "0x13AEA58")]
	protected void UnloadSceneConfig(AudioSceneConfig config)
	{
	}

	[Token(Token = "0x6001112")]
	[Address(RVA = "0x13AEA64", Offset = "0x13AEA64", VA = "0x13AEA64")]
	public bool LoadBuses()
	{
		return default(bool);
	}

	[Token(Token = "0x6001113")]
	[Address(RVA = "0x13AE84C", Offset = "0x13AE84C", VA = "0x13AE84C")]
	private void LoadBanks(List<string> banks)
	{
	}

	[Token(Token = "0x6001114")]
	[Address(RVA = "0x13AE9A8", Offset = "0x13AE9A8", VA = "0x13AE9A8")]
	private void UnloadBanks(List<string> banks)
	{
	}

	[Token(Token = "0x6001115")]
	[Address(RVA = "0x13AEB98", Offset = "0x13AEB98", VA = "0x13AEB98")]
	public void SetMusicVolume(int volume)
	{
	}

	[Token(Token = "0x6001116")]
	[Address(RVA = "0x13AEBB0", Offset = "0x13AEBB0", VA = "0x13AEBB0")]
	public void SetSFXVolume(int volume)
	{
	}

	[Token(Token = "0x6001117")]
	[Address(RVA = "0x13AE924", Offset = "0x13AE924", VA = "0x13AE924")]
	public void SetMusicState(MusicState state)
	{
	}

	[Token(Token = "0x6001118")]
	[Address(RVA = "0x13AEBC8", Offset = "0x13AEBC8", VA = "0x13AEBC8")]
	public void SetGameAudioState(GameAudioState state)
	{
	}

	[Token(Token = "0x6001119")]
	[Address(RVA = "0x13AEC70", Offset = "0x13AEC70", VA = "0x13AEC70")]
	public void StopAllEvents()
	{
	}

	[Token(Token = "0x600111A")]
	[Address(RVA = "0x13AECC0", Offset = "0x13AECC0", VA = "0x13AECC0")]
	public void PlayHighlightUI(ButtonUIBase.ButtonType type)
	{
	}

	[Token(Token = "0x600111B")]
	[Address(RVA = "0x13AED0C", Offset = "0x13AED0C", VA = "0x13AED0C")]
	public void PlayConfirmUI(ButtonUIBase.ButtonType type)
	{
	}

	[Token(Token = "0x600111C")]
	[Address(RVA = "0x13AED74", Offset = "0x13AED74", VA = "0x13AED74")]
	public void PlayThrowTargetSFX(Vector3 position)
	{
	}

	[Token(Token = "0x600111D")]
	[Address(RVA = "0x13AEDA4", Offset = "0x13AEDA4", VA = "0x13AEDA4")]
	public AudioSystem()
	{
	}
}
[Token(Token = "0x200035C")]
public class BHapticsSystem : SystemBase
{
	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject bhapticPrefab;

	[Token(Token = "0x600111E")]
	[Address(RVA = "0x13AEE28", Offset = "0x13AEE28", VA = "0x13AEE28", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x600111F")]
	[Address(RVA = "0x13AEEC0", Offset = "0x13AEEC0", VA = "0x13AEEC0")]
	public BHapticsSystem()
	{
	}
}
[Token(Token = "0x200035D")]
public class CameraSystem : SystemBase
{
	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CinemachineBrain cinemachineBrain;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera playerCamera;

	[Token(Token = "0x1700021D")]
	public bool IsCameraActivated
	{
		[Token(Token = "0x6001120")]
		[Address(RVA = "0x13AEEC8", Offset = "0x13AEEC8", VA = "0x13AEEC8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001121")]
		[Address(RVA = "0x13AEED0", Offset = "0x13AEED0", VA = "0x13AEED0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700021E")]
	public Camera MainCamera
	{
		[Token(Token = "0x6001124")]
		[Address(RVA = "0x13AF218", Offset = "0x13AF218", VA = "0x13AF218")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001122")]
	[Address(RVA = "0x13AEEDC", Offset = "0x13AEEDC", VA = "0x13AEEDC", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6001123")]
	[Address(RVA = "0x13AF050", Offset = "0x13AF050", VA = "0x13AF050")]
	public void InitializeCameras(XRCharacter player)
	{
	}

	[Token(Token = "0x6001125")]
	[Address(RVA = "0x13AF220", Offset = "0x13AF220", VA = "0x13AF220")]
	public bool TryGetVirtualCamera(out CinemachineVirtualCamera virtualCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x6001126")]
	[Address(RVA = "0x13AF390", Offset = "0x13AF390", VA = "0x13AF390")]
	public bool TryGetDollyTruck(out CinemachineBartixTrackedDolly dolly)
	{
		return default(bool);
	}

	[Token(Token = "0x6001127")]
	[Address(RVA = "0x13AF468", Offset = "0x13AF468", VA = "0x13AF468")]
	public bool ResetToCamera(CinemachineVirtualCamera camera, bool resetDolly = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6001128")]
	[Address(RVA = "0x13A1B54", Offset = "0x13A1B54", VA = "0x13A1B54")]
	public void ResetDollyTrack()
	{
	}

	[Token(Token = "0x6001129")]
	[Address(RVA = "0x13AF918", Offset = "0x13AF918", VA = "0x13AF918")]
	public bool IgnoreSnapping(string cameraFrom, string cameraTo)
	{
		return default(bool);
	}

	[Token(Token = "0x600112A")]
	[Address(RVA = "0x13AF580", Offset = "0x13AF580", VA = "0x13AF580")]
	public bool SetActiveCamera(CinemachineVirtualCamera camera)
	{
		return default(bool);
	}

	[Token(Token = "0x600112B")]
	[Address(RVA = "0x13AF9F0", Offset = "0x13AF9F0", VA = "0x13AF9F0")]
	public void DisableActiveCamera()
	{
	}

	[Token(Token = "0x600112C")]
	[Address(RVA = "0x13AFAD4", Offset = "0x13AFAD4", VA = "0x13AFAD4")]
	public CameraSystem()
	{
	}
}
[Token(Token = "0x200035E")]
public class GameMaster : Singleton<GameMaster>
{
	[Token(Token = "0x4000DEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onGameSetupCompleted;

	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onGameplaySetupCompleted;

	[Token(Token = "0x4000DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AchievementsSystem achievementsSystem;

	[Token(Token = "0x4000DED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSystem audioSystem;

	[Token(Token = "0x4000DEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ScenesSystem scenesSystem;

	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private InputSystem inputSystem;

	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SaveSystem saveSystem;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private PoolingSystem poolingSystem;

	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private NewGameplayManager gameplayManager;

	[Token(Token = "0x4000DF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CameraSystem cameraSystem;

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UISystem uiSystem;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private VRCharacter vrCharacter;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameTime gameTime;

	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private EventSystem eventSystem;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RigSystem rigSystem;

	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private BHapticsSystem bhapticsSystem;

	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LocalizationSystem localizationSystem;

	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private ActionXRInputProvider actionInputProvider;

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
	private bool pauseRaised;

	[Token(Token = "0x1700021F")]
	public AudioSystem AudioSystem
	{
		[Token(Token = "0x600112E")]
		[Address(RVA = "0x13AFAE8", Offset = "0x13AFAE8", VA = "0x13AFAE8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000220")]
	public AchievementsSystem AchievementsSystem
	{
		[Token(Token = "0x600112F")]
		[Address(RVA = "0x13AFAF0", Offset = "0x13AFAF0", VA = "0x13AFAF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000221")]
	public ScenesSystem ScenesSystem
	{
		[Token(Token = "0x6001130")]
		[Address(RVA = "0x13AFAF8", Offset = "0x13AFAF8", VA = "0x13AFAF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000222")]
	public InputSystem InputSystem
	{
		[Token(Token = "0x6001131")]
		[Address(RVA = "0x13AFB00", Offset = "0x13AFB00", VA = "0x13AFB00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000223")]
	public SaveSystem SaveSystem
	{
		[Token(Token = "0x6001132")]
		[Address(RVA = "0x13AFB08", Offset = "0x13AFB08", VA = "0x13AFB08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000224")]
	public PoolingSystem PoolingSystem
	{
		[Token(Token = "0x6001133")]
		[Address(RVA = "0x13AFB10", Offset = "0x13AFB10", VA = "0x13AFB10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000225")]
	public CameraSystem CameraSystem
	{
		[Token(Token = "0x6001134")]
		[Address(RVA = "0x13AFB18", Offset = "0x13AFB18", VA = "0x13AFB18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000226")]
	public UISystem UISystem
	{
		[Token(Token = "0x6001135")]
		[Address(RVA = "0x13AFB20", Offset = "0x13AFB20", VA = "0x13AFB20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000227")]
	public NewGameplayManager GameplayManager
	{
		[Token(Token = "0x6001136")]
		[Address(RVA = "0x13AFB28", Offset = "0x13AFB28", VA = "0x13AFB28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000228")]
	public VRCharacter VRCharacter
	{
		[Token(Token = "0x6001137")]
		[Address(RVA = "0x13AFB30", Offset = "0x13AFB30", VA = "0x13AFB30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000229")]
	public RigSystem RigSystem
	{
		[Token(Token = "0x6001138")]
		[Address(RVA = "0x13AFB38", Offset = "0x13AFB38", VA = "0x13AFB38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022A")]
	public LocalizationSystem LocalizationSystem
	{
		[Token(Token = "0x6001139")]
		[Address(RVA = "0x13AFB40", Offset = "0x13AFB40", VA = "0x13AFB40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022B")]
	public GameTime GameTime
	{
		[Token(Token = "0x600113A")]
		[Address(RVA = "0x13AFB48", Offset = "0x13AFB48", VA = "0x13AFB48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022C")]
	public EventSystem EventSystem
	{
		[Token(Token = "0x600113B")]
		[Address(RVA = "0x13AFB50", Offset = "0x13AFB50", VA = "0x13AFB50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022D")]
	public ActionXRInputProvider ActionXRInputProvider
	{
		[Token(Token = "0x600113C")]
		[Address(RVA = "0x13AFB58", Offset = "0x13AFB58", VA = "0x13AFB58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022E")]
	public bool IsGameplayPaused
	{
		[Token(Token = "0x600113D")]
		[Address(RVA = "0x13AFB60", Offset = "0x13AFB60", VA = "0x13AFB60")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600113E")]
		[Address(RVA = "0x13AFB68", Offset = "0x13AFB68", VA = "0x13AFB68")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700022F")]
	public bool IsDashPaused
	{
		[Token(Token = "0x600113F")]
		[Address(RVA = "0x13AFB74", Offset = "0x13AFB74", VA = "0x13AFB74")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001140")]
		[Address(RVA = "0x13AFB7C", Offset = "0x13AFB7C", VA = "0x13AFB7C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000230")]
	public bool IsHeadsetUnmounted
	{
		[Token(Token = "0x6001141")]
		[Address(RVA = "0x13AFB88", Offset = "0x13AFB88", VA = "0x13AFB88")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001142")]
		[Address(RVA = "0x13AFB90", Offset = "0x13AFB90", VA = "0x13AFB90")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001143")]
	[Address(RVA = "0x13AFB9C", Offset = "0x13AFB9C", VA = "0x13AFB9C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001144")]
	[Address(RVA = "0x13AFC60", Offset = "0x13AFC60", VA = "0x13AFC60")]
	protected void LoadSystems()
	{
	}

	[Token(Token = "0x6001145")]
	[Address(RVA = "0x13AFF98", Offset = "0x13AFF98", VA = "0x13AFF98")]
	protected void SetupSystems()
	{
	}

	[Token(Token = "0x6001146")]
	[Address(RVA = "0x13B07E0", Offset = "0x13B07E0", VA = "0x13B07E0")]
	public void SetupEmptyScene()
	{
	}

	[Token(Token = "0x6001147")]
	[Address(RVA = "0x13B08C0", Offset = "0x13B08C0", VA = "0x13B08C0")]
	public void SetupGameplay(NewGameplayManager gameplayManager)
	{
	}

	[Token(Token = "0x6001148")]
	[Address(RVA = "0x13B09A8", Offset = "0x13B09A8", VA = "0x13B09A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001149")]
	[Address(RVA = "0x13B0B14", Offset = "0x13B0B14", VA = "0x13B0B14")]
	[ContextMenu("OnInputFocusLost")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x600114A")]
	[Address(RVA = "0x13B0C4C", Offset = "0x13B0C4C", VA = "0x13B0C4C")]
	[ContextMenu("OnInputFocusAcquired")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x600114B")]
	[Address(RVA = "0x13B0D88", Offset = "0x13B0D88", VA = "0x13B0D88")]
	[ContextMenu("OnGameplayPaused")]
	public void OnGameplayPaused()
	{
	}

	[Token(Token = "0x600114C")]
	[Address(RVA = "0x13B10F0", Offset = "0x13B10F0", VA = "0x13B10F0")]
	[ContextMenu("OnGameplayResumed")]
	public void OnGameplayResumed()
	{
	}

	[Token(Token = "0x600114D")]
	[Address(RVA = "0x13B0BDC", Offset = "0x13B0BDC", VA = "0x13B0BDC")]
	public void PauseGame()
	{
	}

	[Token(Token = "0x600114E")]
	[Address(RVA = "0x13B0D10", Offset = "0x13B0D10", VA = "0x13B0D10")]
	public void ResumeGame()
	{
	}

	[Token(Token = "0x600114F")]
	[Address(RVA = "0x13B13C0", Offset = "0x13B13C0", VA = "0x13B13C0")]
	private void PostResumeEvent()
	{
	}

	[Token(Token = "0x6001150")]
	[Address(RVA = "0x13B1084", Offset = "0x13B1084", VA = "0x13B1084")]
	private void PostPauseEvent()
	{
	}

	[Token(Token = "0x6001151")]
	[Address(RVA = "0x13B1440", Offset = "0x13B1440", VA = "0x13B1440")]
	[ContextMenu("OVRManager_HMDUnmounted")]
	public void OVRManager_HMDUnmounted()
	{
	}

	[Token(Token = "0x6001152")]
	[Address(RVA = "0x13B14FC", Offset = "0x13B14FC", VA = "0x13B14FC")]
	[ContextMenu("OVRManager_HMDMounted")]
	public void OVRManager_HMDMounted()
	{
	}

	[Token(Token = "0x6001153")]
	[Address(RVA = "0x13B15BC", Offset = "0x13B15BC", VA = "0x13B15BC")]
	public GameMaster()
	{
	}
}
[Token(Token = "0x200035F")]
[DefaultExecutionOrder(-10000)]
public class GameMasterLoader : MonoBehaviour
{
	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameMaster _prefab;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EventSystem temporalEventSystem;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private BaseInputModule inputModule;

	[Token(Token = "0x6001154")]
	[Address(RVA = "0x13B1628", Offset = "0x13B1628", VA = "0x13B1628")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001155")]
	[Address(RVA = "0x13B1848", Offset = "0x13B1848", VA = "0x13B1848")]
	public GameMasterLoader()
	{
	}
}
[Token(Token = "0x2000360")]
public class InitSettings : MonoBehaviour
{
	[Token(Token = "0x2000361")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InitSettings <>4__this;

		[Token(Token = "0x17000232")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0x13B1B28", Offset = "0x13B1B28", VA = "0x13B1B28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000233")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600115F")]
			[Address(RVA = "0x13B1B70", Offset = "0x13B1B70", VA = "0x13B1B70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x13B18D8", Offset = "0x13B18D8", VA = "0x13B18D8")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x13B1908", Offset = "0x13B1908", VA = "0x13B1908", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x13B190C", Offset = "0x13B190C", VA = "0x13B190C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x13B1B30", Offset = "0x13B1B30", VA = "0x13B1B30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onCompleted;

	[Token(Token = "0x17000231")]
	public bool IsCompleted
	{
		[Token(Token = "0x6001156")]
		[Address(RVA = "0x13B1850", Offset = "0x13B1850", VA = "0x13B1850")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001157")]
		[Address(RVA = "0x13B1858", Offset = "0x13B1858", VA = "0x13B1858")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001158")]
	[Address(RVA = "0x13B1864", Offset = "0x13B1864", VA = "0x13B1864")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6001159")]
	[Address(RVA = "0x13B1900", Offset = "0x13B1900", VA = "0x13B1900")]
	public InitSettings()
	{
	}
}
[Token(Token = "0x2000362")]
public class InputSystem : SystemBase
{
	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerInput playerInput;

	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onInputDetected;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onInteractPressed;

	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onSubmitPressed;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool externalDisable;

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<string, InputAction> inputActionsDictionary;

	[Token(Token = "0x17000234")]
	public DominantHand CurrentDominantHand
	{
		[Token(Token = "0x6001160")]
		[Address(RVA = "0x13B1B78", Offset = "0x13B1B78", VA = "0x13B1B78")]
		[CompilerGenerated]
		get
		{
			return default(DominantHand);
		}
		[Token(Token = "0x6001161")]
		[Address(RVA = "0x13B1B80", Offset = "0x13B1B80", VA = "0x13B1B80")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000235")]
	public bool ExternalDisable
	{
		[Token(Token = "0x6001162")]
		[Address(RVA = "0x13B1B88", Offset = "0x13B1B88", VA = "0x13B1B88")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001163")]
		[Address(RVA = "0x13B1B90", Offset = "0x13B1B90", VA = "0x13B1B90")]
		set
		{
		}
	}

	[Token(Token = "0x6001164")]
	[Address(RVA = "0x13B1B9C", Offset = "0x13B1B9C", VA = "0x13B1B9C", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6001165")]
	[Address(RVA = "0x13B26E0", Offset = "0x13B26E0", VA = "0x13B26E0")]
	public void SetDominantHandActionMap(DominantHand dominantHand)
	{
	}

	[Token(Token = "0x6001166")]
	[Address(RVA = "0x13B0E80", Offset = "0x13B0E80", VA = "0x13B0E80")]
	public void PauseInput(bool full)
	{
	}

	[Token(Token = "0x6001167")]
	[Address(RVA = "0x13B11E4", Offset = "0x13B11E4", VA = "0x13B11E4")]
	public void ResumeInput(bool full)
	{
	}

	[Token(Token = "0x6001168")]
	[Address(RVA = "0x13B29A8", Offset = "0x13B29A8", VA = "0x13B29A8")]
	public void Haptic(InputDeviceCharacteristics controller, float amplitude = 0.5f, float duration = 1f)
	{
	}

	[Token(Token = "0x6001169")]
	[Address(RVA = "0x13B2B94", Offset = "0x13B2B94", VA = "0x13B2B94")]
	public void Haptic(InputDeviceCharacteristics controller, byte[] buffer)
	{
	}

	[Token(Token = "0x600116A")]
	[Address(RVA = "0x13A06D4", Offset = "0x13A06D4", VA = "0x13A06D4")]
	public bool GetButtonDown(string button, bool ignoreCheck = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600116B")]
	[Address(RVA = "0x13A0548", Offset = "0x13A0548", VA = "0x13A0548")]
	public bool GetButton(string button, bool ignoreCheck = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600116C")]
	[Address(RVA = "0x13B2D78", Offset = "0x13B2D78", VA = "0x13B2D78")]
	public bool GetButtonUp(string button, bool ignoreCheck = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600116D")]
	[Address(RVA = "0x13B2E14", Offset = "0x13B2E14", VA = "0x13B2E14")]
	public bool GetBool(string actionName, bool ignoreCheck = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600116E")]
	[Address(RVA = "0x13B2F10", Offset = "0x13B2F10", VA = "0x13B2F10")]
	public float GetFloat(string actionName, bool ignoreCheck = false)
	{
		return default(float);
	}

	[Token(Token = "0x600116F")]
	[Address(RVA = "0x13B2FB8", Offset = "0x13B2FB8", VA = "0x13B2FB8")]
	public Vector2 GetVector2(string actionName, bool ignoreCheck = false)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6001170")]
	[Address(RVA = "0x13B3094", Offset = "0x13B3094", VA = "0x13B3094")]
	public InputSystem()
	{
	}
}
[Token(Token = "0x2000363")]
public class LocalizationSystem : SystemBase
{
	[Serializable]
	[Token(Token = "0x2000364")]
	public struct LocalizationData
	{
		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string language;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TMP_FontAsset font;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material standardMaterial;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material dissolveMaterial;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material overlayMaterial;
	}

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LocalizationData[] localizations;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_SpriteAsset spriteAsset;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentLanguageIndex;

	[Token(Token = "0x17000236")]
	public int LanguageIndex
	{
		[Token(Token = "0x6001175")]
		[Address(RVA = "0x13B3160", Offset = "0x13B3160", VA = "0x13B3160")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000237")]
	public TMP_FontAsset Font
	{
		[Token(Token = "0x6001176")]
		[Address(RVA = "0x13B3168", Offset = "0x13B3168", VA = "0x13B3168")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000238")]
	public Material Material
	{
		[Token(Token = "0x6001177")]
		[Address(RVA = "0x13B31A0", Offset = "0x13B31A0", VA = "0x13B31A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000239")]
	public Material DissolveMaterial
	{
		[Token(Token = "0x6001178")]
		[Address(RVA = "0x13B31D8", Offset = "0x13B31D8", VA = "0x13B31D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023A")]
	public Material OverlayMaterial
	{
		[Token(Token = "0x6001179")]
		[Address(RVA = "0x13B3210", Offset = "0x13B3210", VA = "0x13B3210")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600117A")]
	[Address(RVA = "0x13B3248", Offset = "0x13B3248", VA = "0x13B3248", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x600117B")]
	[Address(RVA = "0x13B3474", Offset = "0x13B3474", VA = "0x13B3474")]
	public void SetLanguage(int index)
	{
	}

	[Token(Token = "0x600117C")]
	[Address(RVA = "0x13B32F0", Offset = "0x13B32F0", VA = "0x13B32F0")]
	private void ResolveDefaultLanguage()
	{
	}

	[Token(Token = "0x600117D")]
	[Address(RVA = "0x13B373C", Offset = "0x13B373C", VA = "0x13B373C")]
	private int GetLanguageIndex(string languageKey)
	{
		return default(int);
	}

	[Token(Token = "0x600117E")]
	[Address(RVA = "0x13B35C4", Offset = "0x13B35C4", VA = "0x13B35C4")]
	private void ResolveSpriteScale()
	{
	}

	[Token(Token = "0x600117F")]
	[Address(RVA = "0x13B37B8", Offset = "0x13B37B8", VA = "0x13B37B8")]
	public LocalizationSystem()
	{
	}
}
[Token(Token = "0x2000365")]
public class GenericPoolSpawner : PoolSpawner
{
	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int limit;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Component prefab;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool targetIsParent;

	[Token(Token = "0x1700023B")]
	public override int Limit
	{
		[Token(Token = "0x6001180")]
		[Address(RVA = "0x13B37C8", Offset = "0x13B37C8", VA = "0x13B37C8", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023C")]
	public override Component Prefab
	{
		[Token(Token = "0x6001181")]
		[Address(RVA = "0x13B37D0", Offset = "0x13B37D0", VA = "0x13B37D0", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023D")]
	public override Transform Target
	{
		[Token(Token = "0x6001182")]
		[Address(RVA = "0x13B37D8", Offset = "0x13B37D8", VA = "0x13B37D8", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023E")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x6001183")]
		[Address(RVA = "0x13B37E0", Offset = "0x13B37E0", VA = "0x13B37E0", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001184")]
	[Address(RVA = "0x13B37E8", Offset = "0x13B37E8", VA = "0x13B37E8")]
	public GenericPoolSpawner()
	{
	}
}
[Token(Token = "0x2000366")]
public class PooledObject : MonoBehaviour, IPooled<PooledObject>
{
	[Token(Token = "0x4000E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onSpawn;

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onDispose;

	[Token(Token = "0x1700023F")]
	public int poolID
	{
		[Token(Token = "0x6001185")]
		[Address(RVA = "0x13B37EC", Offset = "0x13B37EC", VA = "0x13B37EC", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001186")]
		[Address(RVA = "0x13B37F4", Offset = "0x13B37F4", VA = "0x13B37F4", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000240")]
	public ObjectPooler<PooledObject> pool
	{
		[Token(Token = "0x6001187")]
		[Address(RVA = "0x13B37FC", Offset = "0x13B37FC", VA = "0x13B37FC", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001188")]
		[Address(RVA = "0x13B3804", Offset = "0x13B3804", VA = "0x13B3804", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000241")]
	public bool InUse
	{
		[Token(Token = "0x6001189")]
		[Address(RVA = "0x13B380C", Offset = "0x13B380C", VA = "0x13B380C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600118A")]
		[Address(RVA = "0x13B3814", Offset = "0x13B3814", VA = "0x13B3814")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600118B")]
	[Address(RVA = "0x13B3820", Offset = "0x13B3820", VA = "0x13B3820")]
	public void DisposeSelf()
	{
	}

	[Token(Token = "0x600118C")]
	[Address(RVA = "0x13B38B4", Offset = "0x13B38B4", VA = "0x13B38B4", Slot = "8")]
	public virtual void OnSpawn()
	{
	}

	[Token(Token = "0x600118D")]
	[Address(RVA = "0x13B38D4", Offset = "0x13B38D4", VA = "0x13B38D4", Slot = "9")]
	public virtual void OnDispose()
	{
	}

	[Token(Token = "0x600118E")]
	[Address(RVA = "0x13B38F0", Offset = "0x13B38F0", VA = "0x13B38F0")]
	public PooledObject()
	{
	}
}
[Token(Token = "0x2000367")]
public class PoolHandler : MonoBehaviour
{
	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject pooledObjectPrefab;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Min(1f)]
	public int startupPoolSize;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool allowPoolExtension;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool disposeToPoolTransform;

	[Token(Token = "0x17000242")]
	public ObjectPooler<PooledObject> Pool
	{
		[Token(Token = "0x600118F")]
		[Address(RVA = "0x13B38F8", Offset = "0x13B38F8", VA = "0x13B38F8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001190")]
		[Address(RVA = "0x13B3900", Offset = "0x13B3900", VA = "0x13B3900")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000243")]
	public int ID
	{
		[Token(Token = "0x6001191")]
		[Address(RVA = "0x13B3908", Offset = "0x13B3908", VA = "0x13B3908")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001192")]
		[Address(RVA = "0x13B3910", Offset = "0x13B3910", VA = "0x13B3910")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000244")]
	public bool DynamicPool
	{
		[Token(Token = "0x6001193")]
		[Address(RVA = "0x13B3918", Offset = "0x13B3918", VA = "0x13B3918")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001194")]
		[Address(RVA = "0x13B3920", Offset = "0x13B3920", VA = "0x13B3920")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000245")]
	public bool ScenePool
	{
		[Token(Token = "0x6001195")]
		[Address(RVA = "0x13B392C", Offset = "0x13B392C", VA = "0x13B392C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001196")]
		[Address(RVA = "0x13B3934", Offset = "0x13B3934", VA = "0x13B3934")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001197")]
	[Address(RVA = "0x13B3940", Offset = "0x13B3940", VA = "0x13B3940")]
	public GameObject Initiate(out PooledObject pooledObject, bool invokeOnSpawn = true)
	{
		return null;
	}

	[Token(Token = "0x6001198")]
	[Address(RVA = "0x13B39D8", Offset = "0x13B39D8", VA = "0x13B39D8")]
	public void Dispose(GameObject pooledObject)
	{
	}

	[Token(Token = "0x6001199")]
	[Address(RVA = "0x13B3B18", Offset = "0x13B3B18", VA = "0x13B3B18")]
	public void InitializePool(GameObject prefab, int startupSize = 1, bool allowExtension = true, bool disposeToTransform = true)
	{
	}

	[Token(Token = "0x600119A")]
	[Address(RVA = "0x13B3B5C", Offset = "0x13B3B5C", VA = "0x13B3B5C")]
	public void InitializePool()
	{
	}

	[Token(Token = "0x600119B")]
	[Address(RVA = "0x13B3E3C", Offset = "0x13B3E3C", VA = "0x13B3E3C")]
	public void ClearPool()
	{
	}

	[Token(Token = "0x600119C")]
	[Address(RVA = "0x13B3FA4", Offset = "0x13B3FA4", VA = "0x13B3FA4")]
	public PoolHandler()
	{
	}
}
[Token(Token = "0x2000368")]
public abstract class PoolSpawner : MonoBehaviour
{
	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected List<Component> spawnedObjects;

	[Token(Token = "0x17000246")]
	public abstract int Limit
	{
		[Token(Token = "0x600119D")]
		get;
	}

	[Token(Token = "0x17000247")]
	public abstract Component Prefab
	{
		[Token(Token = "0x600119E")]
		get;
	}

	[Token(Token = "0x17000248")]
	public abstract Transform Target
	{
		[Token(Token = "0x600119F")]
		get;
	}

	[Token(Token = "0x17000249")]
	public abstract bool TargetIsParent
	{
		[Token(Token = "0x60011A0")]
		get;
	}

	[Token(Token = "0x60011A1")]
	[Address(RVA = "0x13AA1FC", Offset = "0x13AA1FC", VA = "0x13AA1FC", Slot = "8")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60011A2")]
	[Address(RVA = "0x13AA2CC", Offset = "0x13AA2CC", VA = "0x13AA2CC", Slot = "9")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60011A3")]
	[Address(RVA = "0x13A6FFC", Offset = "0x13A6FFC", VA = "0x13A6FFC")]
	public void Spawn()
	{
	}

	[Token(Token = "0x60011A4")]
	public bool TrySpawn<T>(out T spawnedObject) where T : Component
	{
		return default(bool);
	}

	[Token(Token = "0x60011A5")]
	[Address(RVA = "0x13B3FBC", Offset = "0x13B3FBC", VA = "0x13B3FBC")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60011A6")]
	[Address(RVA = "0x13B409C", Offset = "0x13B409C", VA = "0x13B409C")]
	protected void UpdateSpawnedObjectsList()
	{
	}

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0x13A6EF0", Offset = "0x13A6EF0", VA = "0x13A6EF0")]
	protected PoolSpawner()
	{
	}
}
[Token(Token = "0x200036A")]
public class PoolingSystem : SystemBase
{
	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<int, PoolHandler> _pools;

	[Token(Token = "0x4000E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PoolHandler[] _startupPools;

	[Token(Token = "0x4000E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Dynamic Pools Configuration")]
	[Min(1f)]
	public int defaultDynamicPoolStartupSize;

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0x13B44DC", Offset = "0x13B44DC", VA = "0x13B44DC")]
	private PoolHandler AddDynamicPool(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x60011AC")]
	[Address(RVA = "0x13B47AC", Offset = "0x13B47AC", VA = "0x13B47AC")]
	private PoolHandler AddScenePool(PoolConfig poolConfig)
	{
		return null;
	}

	[Token(Token = "0x60011AD")]
	[Address(RVA = "0x13B4620", Offset = "0x13B4620", VA = "0x13B4620")]
	private void AddPool(PoolHandler poolHandler, bool overridePool = false)
	{
	}

	[Token(Token = "0x60011AE")]
	[Address(RVA = "0x13B4998", Offset = "0x13B4998", VA = "0x13B4998")]
	private void InitializePools()
	{
	}

	[Token(Token = "0x60011AF")]
	[Address(RVA = "0x13B4A74", Offset = "0x13B4A74", VA = "0x13B4A74")]
	public void InitiateScenePools(PoolSceneConfig config)
	{
	}

	[Token(Token = "0x60011B0")]
	[Address(RVA = "0x13B4C2C", Offset = "0x13B4C2C", VA = "0x13B4C2C")]
	public void ClearScenePools()
	{
	}

	[Token(Token = "0x60011B1")]
	[Address(RVA = "0x13B4F90", Offset = "0x13B4F90", VA = "0x13B4F90")]
	public void ClearDynamicPools()
	{
	}

	[Token(Token = "0x60011B2")]
	[Address(RVA = "0x13B52F4", Offset = "0x13B52F4", VA = "0x13B52F4", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x60011B3")]
	private static T InternalInitiate<T>(T prefab, out PooledObject pooledObject, bool invokeInitiateEvent = true) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60011B4")]
	public static T Initiate<T>(T prefab) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60011B5")]
	public static T Initiate<T>(T prefab, Transform parent) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60011B6")]
	public static T Initiate<T>(T prefab, Vector3 position, Quaternion rotation) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60011B7")]
	public static T Initiate<T>(T prefab, Vector3 position, Quaternion rotation, Transform parent) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60011B8")]
	public static void Dispose<T>(T behaviour) where T : Component
	{
	}

	[Token(Token = "0x60011B9")]
	public static bool IsInUse<T>(T behaviour) where T : Component
	{
		return default(bool);
	}

	[Token(Token = "0x60011BA")]
	[Address(RVA = "0x13B53C4", Offset = "0x13B53C4", VA = "0x13B53C4")]
	public PoolingSystem()
	{
	}
}
[Token(Token = "0x200036B")]
public class RigSystem : SystemBase
{
	[Token(Token = "0x4000E2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject pcvrRig;

	[Token(Token = "0x4000E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject androidRig;

	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject psvrRig;

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool enable;

	[Token(Token = "0x1700024A")]
	public GameObject CurrentRig
	{
		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x13B5454", Offset = "0x13B5454", VA = "0x13B5454")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x13B545C", Offset = "0x13B545C", VA = "0x13B545C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60011BD")]
	[Address(RVA = "0x13B5464", Offset = "0x13B5464", VA = "0x13B5464", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x60011BE")]
	[Address(RVA = "0x13B2520", Offset = "0x13B2520", VA = "0x13B2520")]
	public bool IsHeadsetPresent()
	{
		return default(bool);
	}

	[Token(Token = "0x60011BF")]
	[Address(RVA = "0x13B5524", Offset = "0x13B5524", VA = "0x13B5524")]
	public RigSystem()
	{
	}
}
[Token(Token = "0x200036C")]
public class SaveAnimator : MonoBehaviour, ISaveable
{
	[Serializable]
	[Token(Token = "0x200036D")]
	public struct SaveData
	{
		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int[] states;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] time;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimatorData[] parameters;
	}

	[Serializable]
	[Token(Token = "0x200036E")]
	public struct AnimatorData
	{
		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int hash;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AnimatorControllerParameterType type;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string value;
	}

	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x60011C0")]
	[Address(RVA = "0x13B5534", Offset = "0x13B5534", VA = "0x13B5534", Slot = "5")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011C1")]
	[Address(RVA = "0x13B57B8", Offset = "0x13B57B8", VA = "0x13B57B8", Slot = "4")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011C2")]
	[Address(RVA = "0x13B5C2C", Offset = "0x13B5C2C", VA = "0x13B5C2C", Slot = "6")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011C3")]
	[Address(RVA = "0x13B5CB4", Offset = "0x13B5CB4", VA = "0x13B5CB4")]
	public void OnInit()
	{
	}

	[Token(Token = "0x60011C4")]
	[Address(RVA = "0x13B5CB8", Offset = "0x13B5CB8", VA = "0x13B5CB8")]
	public SaveAnimator()
	{
	}
}
[Token(Token = "0x200036F")]
public class SaveFungus : MonoBehaviour, ISaveable
{
	[Token(Token = "0x60011C5")]
	[Address(RVA = "0x13B5CC0", Offset = "0x13B5CC0", VA = "0x13B5CC0")]
	public void OnInit()
	{
	}

	[Token(Token = "0x60011C6")]
	[Address(RVA = "0x13B5CC4", Offset = "0x13B5CC4", VA = "0x13B5CC4", Slot = "5")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011C7")]
	[Address(RVA = "0x13B5D68", Offset = "0x13B5D68", VA = "0x13B5D68", Slot = "4")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011C8")]
	[Address(RVA = "0x13B5DC0", Offset = "0x13B5DC0", VA = "0x13B5DC0", Slot = "6")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011C9")]
	[Address(RVA = "0x13B5DC8", Offset = "0x13B5DC8", VA = "0x13B5DC8")]
	public SaveFungus()
	{
	}
}
[Token(Token = "0x2000370")]
public class SaveInteractible : MonoBehaviour, ISaveable
{
	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool wasInteract;

	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool checkLevelCompleted;

	[Token(Token = "0x60011CA")]
	[Address(RVA = "0x13B5DD0", Offset = "0x13B5DD0", VA = "0x13B5DD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011CB")]
	[Address(RVA = "0x13B5ED8", Offset = "0x13B5ED8", VA = "0x13B5ED8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60011CC")]
	[Address(RVA = "0x13B5FF4", Offset = "0x13B5FF4", VA = "0x13B5FF4", Slot = "5")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011CD")]
	[Address(RVA = "0x13B60D4", Offset = "0x13B60D4", VA = "0x13B60D4", Slot = "4")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011CE")]
	[Address(RVA = "0x13B6140", Offset = "0x13B6140", VA = "0x13B6140", Slot = "6")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011CF")]
	[Address(RVA = "0x13B6148", Offset = "0x13B6148", VA = "0x13B6148")]
	private void OnInteract()
	{
	}

	[Token(Token = "0x60011D0")]
	[Address(RVA = "0x13B5EDC", Offset = "0x13B5EDC", VA = "0x13B5EDC")]
	private void Disable()
	{
	}

	[Token(Token = "0x60011D1")]
	[Address(RVA = "0x13B6154", Offset = "0x13B6154", VA = "0x13B6154")]
	public SaveInteractible()
	{
	}
}
[Token(Token = "0x2000371")]
public class SavePlaymaker : MonoBehaviour, ISaveable
{
	[Serializable]
	[Token(Token = "0x2000372")]
	public struct PlaymakerData
	{
		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float[] floatData;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int[] intData;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool[] boolData;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] stringData;
	}

	[Token(Token = "0x4000E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool saveFloatVariables;

	[Token(Token = "0x4000E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool saveIntVariables;

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool saveBoolVariables;

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool saveStringVariables;

	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool sendLoadEvent;

	[Token(Token = "0x60011D2")]
	[Address(RVA = "0x13B615C", Offset = "0x13B615C", VA = "0x13B615C")]
	public void OnInit()
	{
	}

	[Token(Token = "0x60011D3")]
	[Address(RVA = "0x13B6160", Offset = "0x13B6160", VA = "0x13B6160", Slot = "5")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011D4")]
	[Address(RVA = "0x13B6424", Offset = "0x13B6424", VA = "0x13B6424", Slot = "4")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011D5")]
	[Address(RVA = "0x13B6854", Offset = "0x13B6854", VA = "0x13B6854", Slot = "6")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011D6")]
	[Address(RVA = "0x13B685C", Offset = "0x13B685C", VA = "0x13B685C")]
	public SavePlaymaker()
	{
	}
}
[Token(Token = "0x2000373")]
public class SaveAlchemy : SaveData, ISaveable
{
	[Serializable]
	[Token(Token = "0x2000374")]
	public struct AlchemyData
	{
		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AlchemyDataItem[] items;
	}

	[Serializable]
	[Token(Token = "0x2000375")]
	public struct AlchemyDataItem
	{
		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool isUnlocked;
	}

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyData alchemy;

	[Token(Token = "0x60011D7")]
	[Address(RVA = "0x13B6870", Offset = "0x13B6870", VA = "0x13B6870", Slot = "6")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011D8")]
	[Address(RVA = "0x13B68D4", Offset = "0x13B68D4", VA = "0x13B68D4", Slot = "5")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011D9")]
	[Address(RVA = "0x13B6938", Offset = "0x13B6938", VA = "0x13B6938", Slot = "7")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011DA")]
	[Address(RVA = "0x13B6940", Offset = "0x13B6940", VA = "0x13B6940", Slot = "4")]
	public override void ResetData()
	{
	}

	[Token(Token = "0x60011DB")]
	[Address(RVA = "0x13B6AB0", Offset = "0x13B6AB0", VA = "0x13B6AB0")]
	public int GetUnlockedAlchemyAmount()
	{
		return default(int);
	}

	[Token(Token = "0x60011DC")]
	[Address(RVA = "0x13B6B10", Offset = "0x13B6B10", VA = "0x13B6B10")]
	public void UnlockAll()
	{
	}

	[Token(Token = "0x60011DD")]
	[Address(RVA = "0x13B6B64", Offset = "0x13B6B64", VA = "0x13B6B64")]
	public SaveAlchemy()
	{
	}
}
[Token(Token = "0x2000376")]
public class SaveAlchemyUpgrades : MonoBehaviour, ISaveable
{
	[Token(Token = "0x60011DE")]
	[Address(RVA = "0x13B6B74", Offset = "0x13B6B74", VA = "0x13B6B74", Slot = "5")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011DF")]
	[Address(RVA = "0x13B6B78", Offset = "0x13B6B78", VA = "0x13B6B78", Slot = "4")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011E0")]
	[Address(RVA = "0x13B6BC0", Offset = "0x13B6BC0", VA = "0x13B6BC0", Slot = "6")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011E1")]
	[Address(RVA = "0x13B6BC8", Offset = "0x13B6BC8", VA = "0x13B6BC8")]
	public SaveAlchemyUpgrades()
	{
	}
}
[Serializable]
[Token(Token = "0x2000377")]
public abstract class SaveData : MonoBehaviour
{
	[Token(Token = "0x60011E2")]
	public abstract void ResetData();

	[Token(Token = "0x60011E3")]
	[Address(RVA = "0x13B6B6C", Offset = "0x13B6B6C", VA = "0x13B6B6C")]
	protected SaveData()
	{
	}
}
[Token(Token = "0x2000378")]
public class SaveGameplay : SaveData, ISaveable
{
	[Serializable]
	[Token(Token = "0x2000379")]
	public struct GameplayData
	{
		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int lastLevelIndex;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int lastCheckpointIndex;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int coins;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int cape;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int touchState;
	}

	[Token(Token = "0x4000E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameplayData gameplay;

	[Token(Token = "0x60011E4")]
	[Address(RVA = "0x13B6BD0", Offset = "0x13B6BD0", VA = "0x13B6BD0", Slot = "6")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011E5")]
	[Address(RVA = "0x13B6C4C", Offset = "0x13B6C4C", VA = "0x13B6C4C", Slot = "5")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011E6")]
	[Address(RVA = "0x13B6CB8", Offset = "0x13B6CB8", VA = "0x13B6CB8", Slot = "7")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011E7")]
	[Address(RVA = "0x13B6CC0", Offset = "0x13B6CC0", VA = "0x13B6CC0", Slot = "4")]
	public override void ResetData()
	{
	}

	[Token(Token = "0x60011E8")]
	[Address(RVA = "0x13B6CD4", Offset = "0x13B6CD4", VA = "0x13B6CD4")]
	public void AddCoins(int value)
	{
	}

	[Token(Token = "0x60011E9")]
	[Address(RVA = "0x13B6D5C", Offset = "0x13B6D5C", VA = "0x13B6D5C")]
	public void RemoveCoins(int value)
	{
	}

	[Token(Token = "0x60011EA")]
	[Address(RVA = "0x13B6D6C", Offset = "0x13B6D6C", VA = "0x13B6D6C")]
	public int GetCoins()
	{
		return default(int);
	}

	[Token(Token = "0x60011EB")]
	[Address(RVA = "0x13B6D74", Offset = "0x13B6D74", VA = "0x13B6D74")]
	public void UpdateLevelIndex(SceneData scene)
	{
	}

	[Token(Token = "0x60011EC")]
	[Address(RVA = "0x13B6E98", Offset = "0x13B6E98", VA = "0x13B6E98")]
	public void UpdateCheckpointIndex(int checkpointIndex)
	{
	}

	[Token(Token = "0x60011ED")]
	[Address(RVA = "0x13B6EA0", Offset = "0x13B6EA0", VA = "0x13B6EA0")]
	public void EquipCape(CapeScriptableObject cape)
	{
	}

	[Token(Token = "0x60011EE")]
	[Address(RVA = "0x13B6F9C", Offset = "0x13B6F9C", VA = "0x13B6F9C")]
	public bool IsCapeEquiped(CapeScriptableObject cape)
	{
		return default(bool);
	}

	[Token(Token = "0x60011EF")]
	[Address(RVA = "0x13B7060", Offset = "0x13B7060", VA = "0x13B7060")]
	public void UpdateTouchState(int newState)
	{
	}

	[Token(Token = "0x60011F0")]
	[Address(RVA = "0x13B7078", Offset = "0x13B7078", VA = "0x13B7078")]
	public SaveGameplay()
	{
	}
}
[Token(Token = "0x200037A")]
public class SaveLevel : MonoBehaviour, ISaveable
{
	[Serializable]
	[Token(Token = "0x200037B")]
	public struct LevelData
	{
		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isCompleted;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool wasVisited;
	}

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LevelData levelData;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onLevelCompleted;

	[Token(Token = "0x60011F1")]
	[Address(RVA = "0x13B7080", Offset = "0x13B7080", VA = "0x13B7080", Slot = "5")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011F2")]
	[Address(RVA = "0x13B7100", Offset = "0x13B7100", VA = "0x13B7100", Slot = "4")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011F3")]
	[Address(RVA = "0x13B7164", Offset = "0x13B7164", VA = "0x13B7164", Slot = "6")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011F4")]
	[Address(RVA = "0x13B716C", Offset = "0x13B716C", VA = "0x13B716C")]
	public SaveLevel()
	{
	}
}
[Token(Token = "0x200037C")]
public class SaveSettings : SaveData, ISaveable
{
	[Serializable]
	[Token(Token = "0x200037D")]
	public struct SettingsData
	{
		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool godMode;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool allAlchemy;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int musicVolume;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int sfxVolume;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int languageIndex;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool aiming;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int hand;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int snapMode;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int snapModeSpeed;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int snapModeVignetteStrength;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int difficultyLevel;

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x13B72A8", Offset = "0x13B72A8", VA = "0x13B72A8")]
		public void Copy(SettingsData data)
		{
		}
	}

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SettingsData settings;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SnapModeSettings rotationModeSpeedSettings;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SnapModeSettings vignetteSettings;

	[Token(Token = "0x60011F5")]
	[Address(RVA = "0x13B7174", Offset = "0x13B7174", VA = "0x13B7174", Slot = "6")]
	public void OnLoad(string data)
	{
	}

	[Token(Token = "0x60011F6")]
	[Address(RVA = "0x13B71F8", Offset = "0x13B71F8", VA = "0x13B71F8", Slot = "5")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011F7")]
	[Address(RVA = "0x13B7268", Offset = "0x13B7268", VA = "0x13B7268", Slot = "7")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011F8")]
	[Address(RVA = "0x13B7270", Offset = "0x13B7270", VA = "0x13B7270", Slot = "4")]
	public override void ResetData()
	{
	}

	[Token(Token = "0x60011F9")]
	[Address(RVA = "0x13B72A0", Offset = "0x13B72A0", VA = "0x13B72A0")]
	public SaveSettings()
	{
	}
}
[Token(Token = "0x200037E")]
public class SaveUpgrades : UnlockableSaveData, ISaveable
{
	[Token(Token = "0x60011FB")]
	[Address(RVA = "0x13B7310", Offset = "0x13B7310", VA = "0x13B7310", Slot = "6")]
	public void OnLoad(string loadedData)
	{
	}

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0x13B7374", Offset = "0x13B7374", VA = "0x13B7374", Slot = "5")]
	public string OnSave()
	{
		return null;
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0x13B73D8", Offset = "0x13B73D8", VA = "0x13B73D8", Slot = "7")]
	public bool OnSaveCondition()
	{
		return default(bool);
	}

	[Token(Token = "0x60011FE")]
	[Address(RVA = "0x13B73E0", Offset = "0x13B73E0", VA = "0x13B73E0", Slot = "4")]
	public override void ResetData()
	{
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0x13B7538", Offset = "0x13B7538", VA = "0x13B7538")]
	public bool UnlockUpgrade(UnlockableAbilityScriptableObject scriptableObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6001200")]
	[Address(RVA = "0x13B765C", Offset = "0x13B765C", VA = "0x13B765C")]
	public void UnlockRecipe(UnlockableAbilityScriptableObject scriptableObject)
	{
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0x13B772C", Offset = "0x13B772C", VA = "0x13B772C")]
	public bool IsUnlocked(UnlockableAbilityScriptableObject scriptableObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6001202")]
	[Address(RVA = "0x13B7828", Offset = "0x13B7828", VA = "0x13B7828")]
	public int GetUnlockedAbilitiesAmount(UnlockableAbilityScriptableObject.UnlockableType unlockableType)
	{
		return default(int);
	}

	[Token(Token = "0x6001203")]
	[Address(RVA = "0x13B79A0", Offset = "0x13B79A0", VA = "0x13B79A0")]
	public void UnlockAll()
	{
	}

	[Token(Token = "0x6001204")]
	[Address(RVA = "0x13B79F4", Offset = "0x13B79F4", VA = "0x13B79F4")]
	public SaveUpgrades()
	{
	}
}
[Token(Token = "0x200037F")]
public class UnlockableSaveData : SaveData
{
	[Serializable]
	[Token(Token = "0x2000380")]
	public struct UnlockableData
	{
		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnlockableDataItem[] items;
	}

	[Serializable]
	[Token(Token = "0x2000381")]
	public struct UnlockableDataItem
	{
		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool isUnlocked;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool isRecipeUnlocked;
	}

	[Token(Token = "0x4000E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnlockableData data;

	[Token(Token = "0x6001205")]
	[Address(RVA = "0x13B7A04", Offset = "0x13B7A04", VA = "0x13B7A04", Slot = "4")]
	public override void ResetData()
	{
	}

	[Token(Token = "0x6001206")]
	[Address(RVA = "0x13B79FC", Offset = "0x13B79FC", VA = "0x13B79FC")]
	public UnlockableSaveData()
	{
	}
}
[Token(Token = "0x2000382")]
public class SaveSystem : SystemBase
{
	[Token(Token = "0x4000E66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnlockablesDatabase UnlockablesDatabase;

	[Token(Token = "0x4000E67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool forceFill;

	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SaveAlchemy alchemyData;

	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SaveSettings settingsData;

	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SaveGameplay gameplayData;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SaveUpgrades upgradesData;

	[Token(Token = "0x1700024B")]
	public SaveAlchemy AlchemyData
	{
		[Token(Token = "0x6001207")]
		[Address(RVA = "0x13B7A08", Offset = "0x13B7A08", VA = "0x13B7A08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024C")]
	public SaveSettings SettingsData
	{
		[Token(Token = "0x6001208")]
		[Address(RVA = "0x13B7A10", Offset = "0x13B7A10", VA = "0x13B7A10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024D")]
	public SaveGameplay GameplayData
	{
		[Token(Token = "0x6001209")]
		[Address(RVA = "0x13B7A18", Offset = "0x13B7A18", VA = "0x13B7A18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024E")]
	public SaveUpgrades UpgradesData
	{
		[Token(Token = "0x600120A")]
		[Address(RVA = "0x13B7A20", Offset = "0x13B7A20", VA = "0x13B7A20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024F")]
	public bool IsNewGame
	{
		[Token(Token = "0x600120B")]
		[Address(RVA = "0x13B7A28", Offset = "0x13B7A28", VA = "0x13B7A28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600120C")]
	[Address(RVA = "0x13B7A48", Offset = "0x13B7A48", VA = "0x13B7A48", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x600120D")]
	[Address(RVA = "0x13B7C78", Offset = "0x13B7C78", VA = "0x13B7C78")]
	public void Continue()
	{
	}

	[Token(Token = "0x600120E")]
	[Address(RVA = "0x13B7C7C", Offset = "0x13B7C7C", VA = "0x13B7C7C")]
	public void NewGame()
	{
	}

	[Token(Token = "0x600120F")]
	[Address(RVA = "0x13B7D5C", Offset = "0x13B7D5C", VA = "0x13B7D5C")]
	[ContextMenu("Save")]
	public void Save()
	{
	}

	[Token(Token = "0x6001210")]
	[Address(RVA = "0x13B7CA0", Offset = "0x13B7CA0", VA = "0x13B7CA0")]
	public void ResetSaves()
	{
	}

	[Token(Token = "0x6001211")]
	[Address(RVA = "0x13B7BAC", Offset = "0x13B7BAC", VA = "0x13B7BAC")]
	private void Fill(bool all)
	{
	}

	[Token(Token = "0x6001212")]
	[Address(RVA = "0x13B7D0C", Offset = "0x13B7D0C", VA = "0x13B7D0C")]
	[ContextMenu("Snapshot")]
	public void Snapshot()
	{
	}

	[Token(Token = "0x6001213")]
	[Address(RVA = "0x13B7DB0", Offset = "0x13B7DB0", VA = "0x13B7DB0")]
	public void CollectiblesSnapshot()
	{
	}

	[Token(Token = "0x6001214")]
	[Address(RVA = "0x13B7E00", Offset = "0x13B7E00", VA = "0x13B7E00")]
	[ContextMenu("ReloadToCheckpoint")]
	public void ReloadToCheckpoint()
	{
	}

	[Token(Token = "0x6001215")]
	[Address(RVA = "0x13B7E50", Offset = "0x13B7E50", VA = "0x13B7E50")]
	public SaveSystem()
	{
	}
}
[Token(Token = "0x2000383")]
public class ScenesSystem : SystemBase
{
	[Token(Token = "0x2000384")]
	public delegate void LoadLevel();

	[Token(Token = "0x2000385")]
	[CompilerGenerated]
	private sealed class <LoadCoroutine>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScenesSystem <>4__this;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fade;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool loadingScene;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int sceneIndex;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncOperation <asyncLoadLevel>5__2;

		[Token(Token = "0x1700025A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600123C")]
			[Address(RVA = "0x13B9930", Offset = "0x13B9930", VA = "0x13B9930", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600123E")]
			[Address(RVA = "0x13B9978", Offset = "0x13B9978", VA = "0x13B9978", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x13B8D7C", Offset = "0x13B8D7C", VA = "0x13B8D7C")]
		[DebuggerHidden]
		public <LoadCoroutine>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x13B90F8", Offset = "0x13B90F8", VA = "0x13B90F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x13B90FC", Offset = "0x13B90FC", VA = "0x13B90FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x13B9938", Offset = "0x13B9938", VA = "0x13B9938", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int previousScene;

	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int startCheckpointIndex;

	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isLoading;

	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SceneData _defaultSceneData;

	[Token(Token = "0x4000E70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Make sure that levels have distinct names")]
	private SceneData[] _scenes;

	[Token(Token = "0x17000250")]
	public SceneData CurrentSceneData
	{
		[Token(Token = "0x6001216")]
		[Address(RVA = "0x13B7E60", Offset = "0x13B7E60", VA = "0x13B7E60")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001217")]
		[Address(RVA = "0x13B7E68", Offset = "0x13B7E68", VA = "0x13B7E68")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000251")]
	public static int ActiveSceneIndex
	{
		[Token(Token = "0x6001220")]
		[Address(RVA = "0x13B875C", Offset = "0x13B875C", VA = "0x13B875C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000252")]
	public static string ActiveSceneName
	{
		[Token(Token = "0x6001221")]
		[Address(RVA = "0x13B87F8", Offset = "0x13B87F8", VA = "0x13B87F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000253")]
	public static int MainMenuScene
	{
		[Token(Token = "0x6001222")]
		[Address(RVA = "0x13B8860", Offset = "0x13B8860", VA = "0x13B8860")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000254")]
	public static int LoadingScene
	{
		[Token(Token = "0x6001223")]
		[Address(RVA = "0x13B88C4", Offset = "0x13B88C4", VA = "0x13B88C4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000255")]
	public static int CreditsScene
	{
		[Token(Token = "0x6001224")]
		[Address(RVA = "0x13B8928", Offset = "0x13B8928", VA = "0x13B8928")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000256")]
	public static int HubScene
	{
		[Token(Token = "0x6001225")]
		[Address(RVA = "0x13B898C", Offset = "0x13B898C", VA = "0x13B898C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000257")]
	public static int PreviousScene
	{
		[Token(Token = "0x6001226")]
		[Address(RVA = "0x13B89F0", Offset = "0x13B89F0", VA = "0x13B89F0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000258")]
	public static int StartCheckpointIndex
	{
		[Token(Token = "0x6001227")]
		[Address(RVA = "0x13B8A48", Offset = "0x13B8A48", VA = "0x13B8A48")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000259")]
	public bool IsLoading
	{
		[Token(Token = "0x6001228")]
		[Address(RVA = "0x13B8AA0", Offset = "0x13B8AA0", VA = "0x13B8AA0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001218")]
	[Address(RVA = "0x13B7E70", Offset = "0x13B7E70", VA = "0x13B7E70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001219")]
	[Address(RVA = "0x13B7F70", Offset = "0x13B7F70", VA = "0x13B7F70")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600121A")]
	[Address(RVA = "0x13B8070", Offset = "0x13B8070", VA = "0x13B8070")]
	private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0x13B8544", Offset = "0x13B8544", VA = "0x13B8544")]
	private void OnSceneUnloaded(Scene scene)
	{
	}

	[Token(Token = "0x600121C")]
	[Address(RVA = "0x13B8144", Offset = "0x13B8144", VA = "0x13B8144")]
	private bool TryGetSceneData(string sceneName, out SceneData sceneData)
	{
		return default(bool);
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0x13B821C", Offset = "0x13B821C", VA = "0x13B821C")]
	private void ConfigureScene(SceneData sceneData)
	{
	}

	[Token(Token = "0x600121E")]
	[Address(RVA = "0x13B85BC", Offset = "0x13B85BC", VA = "0x13B85BC")]
	private void ClearCurrentScene()
	{
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0x13B8654", Offset = "0x13B8654", VA = "0x13B8654", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0x13B8AA8", Offset = "0x13B8AA8", VA = "0x13B8AA8")]
	public bool IsOnScene(SceneData scene)
	{
		return default(bool);
	}

	[Token(Token = "0x600122A")]
	[Address(RVA = "0x13B8B14", Offset = "0x13B8B14", VA = "0x13B8B14")]
	public bool HasLevel(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600122B")]
	[Address(RVA = "0x13B8B74", Offset = "0x13B8B74", VA = "0x13B8B74")]
	public void Load(string sceneName, bool loadingScene = true, bool fade = true, int checkpointIndex = 0)
	{
	}

	[Token(Token = "0x600122C")]
	[Address(RVA = "0x13B8C00", Offset = "0x13B8C00", VA = "0x13B8C00")]
	public void Load(int sceneIndex, bool loadingScene = true, bool fade = true, int checkpointIndex = 0)
	{
	}

	[Token(Token = "0x600122D")]
	[Address(RVA = "0x13B8CD8", Offset = "0x13B8CD8", VA = "0x13B8CD8")]
	[IteratorStateMachine(typeof(<LoadCoroutine>d__40))]
	private IEnumerator LoadCoroutine(int sceneIndex, bool loadingScene = true, bool fade = true)
	{
		return null;
	}

	[Token(Token = "0x600122E")]
	[Address(RVA = "0x13B8DA4", Offset = "0x13B8DA4", VA = "0x13B8DA4")]
	private void LoadScene(int sceneIndex, bool additive)
	{
	}

	[Token(Token = "0x600122F")]
	[Address(RVA = "0x13B8E10", Offset = "0x13B8E10", VA = "0x13B8E10")]
	private AsyncOperation LoadAsyncScene(int sceneIndex, bool additive)
	{
		return null;
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0x13B8E7C", Offset = "0x13B8E7C", VA = "0x13B8E7C")]
	public void RestartLevel()
	{
	}

	[Token(Token = "0x6001231")]
	[Address(RVA = "0x13B8EE4", Offset = "0x13B8EE4", VA = "0x13B8EE4")]
	public static string NameFromIndex(int BuildIndex)
	{
		return null;
	}

	[Token(Token = "0x6001232")]
	[Address(RVA = "0x13B6DE0", Offset = "0x13B6DE0", VA = "0x13B6DE0")]
	public static int SceneIndexFromName(string sceneName)
	{
		return default(int);
	}

	[Token(Token = "0x6001233")]
	[Address(RVA = "0x13B8F98", Offset = "0x13B8F98", VA = "0x13B8F98")]
	public ScenesSystem()
	{
	}
}
[Token(Token = "0x2000386")]
public abstract class SystemBase : MonoBehaviour
{
	[Token(Token = "0x600123F")]
	public abstract bool Setup();

	[Token(Token = "0x6001240")]
	[Address(RVA = "0x13B7E58", Offset = "0x13B7E58", VA = "0x13B7E58")]
	protected SystemBase()
	{
	}
}
[Token(Token = "0x2000387")]
public class UISystem : SystemBase
{
	[Token(Token = "0x4000E79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Dialog System")]
	[SerializeField]
	private List<Menu.MenuDialogPair> menuDialogs;

	[Token(Token = "0x1700025C")]
	public bool DialogueInProgress
	{
		[Token(Token = "0x6001241")]
		[Address(RVA = "0x13B9980", Offset = "0x13B9980", VA = "0x13B9980")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001242")]
		[Address(RVA = "0x13B9988", Offset = "0x13B9988", VA = "0x13B9988")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001243")]
	[Address(RVA = "0x13B9994", Offset = "0x13B9994", VA = "0x13B9994", Slot = "4")]
	public override bool Setup()
	{
		return default(bool);
	}

	[Token(Token = "0x6001244")]
	[Address(RVA = "0x13B9B40", Offset = "0x13B9B40", VA = "0x13B9B40")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001245")]
	[Address(RVA = "0x13B9D08", Offset = "0x13B9D08", VA = "0x13B9D08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001246")]
	[Address(RVA = "0x13B9ED0", Offset = "0x13B9ED0", VA = "0x13B9ED0")]
	private void OnSceneLoaded(SceneData sceneData)
	{
	}

	[Token(Token = "0x6001247")]
	[Address(RVA = "0x13B9F5C", Offset = "0x13B9F5C", VA = "0x13B9F5C")]
	private void OnPlayerRespawn()
	{
	}

	[Token(Token = "0x6001248")]
	[Address(RVA = "0x13B9F60", Offset = "0x13B9F60", VA = "0x13B9F60")]
	private void OnDialogueStarted()
	{
	}

	[Token(Token = "0x6001249")]
	[Address(RVA = "0x13B9F6C", Offset = "0x13B9F6C", VA = "0x13B9F6C")]
	private void OnDialogueCompleted()
	{
	}

	[Token(Token = "0x600124A")]
	[Address(RVA = "0x13B9ED4", Offset = "0x13B9ED4", VA = "0x13B9ED4")]
	public void Reset()
	{
	}

	[Token(Token = "0x600124B")]
	[Address(RVA = "0x13B9F74", Offset = "0x13B9F74", VA = "0x13B9F74")]
	public UISystem()
	{
	}
}
[Token(Token = "0x2000389")]
public class Teleport : MonoBehaviour
{
	[Token(Token = "0x4000E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x600124F")]
	[Address(RVA = "0x13BA000", Offset = "0x13BA000", VA = "0x13BA000")]
	public void TeleportPlayer()
	{
	}

	[Token(Token = "0x6001250")]
	[Address(RVA = "0x13BA074", Offset = "0x13BA074", VA = "0x13BA074")]
	public void TeleportPlayer(Transform target)
	{
	}

	[Token(Token = "0x6001251")]
	[Address(RVA = "0x13BA12C", Offset = "0x13BA12C", VA = "0x13BA12C")]
	public Teleport()
	{
	}
}
[Token(Token = "0x200038A")]
public class ThrowController : MonoBehaviour
{
	[Token(Token = "0x4000E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputActionProperty aimToggleAction;

	[Token(Token = "0x4000E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool AutoAiming;

	[Token(Token = "0x6001252")]
	[Address(RVA = "0x13BA134", Offset = "0x13BA134", VA = "0x13BA134")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001253")]
	[Address(RVA = "0x13BA138", Offset = "0x13BA138", VA = "0x13BA138")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001254")]
	[Address(RVA = "0x13BA13C", Offset = "0x13BA13C", VA = "0x13BA13C")]
	private void Toggle(InputAction.CallbackContext obj)
	{
	}

	[Token(Token = "0x6001255")]
	[Address(RVA = "0x13BA208", Offset = "0x13BA208", VA = "0x13BA208")]
	public ThrowController()
	{
	}
}
[Token(Token = "0x200038B")]
public class AlchemuUI3D : MonoBehaviour
{
	[Token(Token = "0x200038C")]
	[CompilerGenerated]
	private sealed class <DelayInput>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AlchemuUI3D <>4__this;

		[Token(Token = "0x1700025D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001266")]
			[Address(RVA = "0x13BB29C", Offset = "0x13BB29C", VA = "0x13BB29C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001268")]
			[Address(RVA = "0x13BB2E4", Offset = "0x13BB2E4", VA = "0x13BB2E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x13BAFD0", Offset = "0x13BAFD0", VA = "0x13BAFD0")]
		[DebuggerHidden]
		public <DelayInput>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x13BB16C", Offset = "0x13BB16C", VA = "0x13BB16C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x13BB170", Offset = "0x13BB170", VA = "0x13BB170", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x13BB2A4", Offset = "0x13BB2A4", VA = "0x13BB2A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyUIRecipe3D[] recipes;

	[Token(Token = "0x4000E81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AlchemyAbility alchemyAbility;

	[Token(Token = "0x4000E82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FollowTarget follow;

	[Token(Token = "0x4000E83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(20f)]
	public Ease showEase;

	[Token(Token = "0x4000E84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float showDuration;

	[Token(Token = "0x4000E85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Ease hideEase;

	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float hideDuration;

	[Token(Token = "0x4000E87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 hideScale;

	[Token(Token = "0x4000E88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool waitingForGesture;

	[Token(Token = "0x4000E89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private TweenerCore<Vector3, Vector3, VectorOptions> tween;

	[Token(Token = "0x6001257")]
	[Address(RVA = "0x13BA25C", Offset = "0x13BA25C", VA = "0x13BA25C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001258")]
	[Address(RVA = "0x13BA730", Offset = "0x13BA730", VA = "0x13BA730")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001259")]
	[Address(RVA = "0x13BA928", Offset = "0x13BA928", VA = "0x13BA928")]
	[ContextMenu("Show")]
	public void Show()
	{
	}

	[Token(Token = "0x600125A")]
	[Address(RVA = "0x13BADD4", Offset = "0x13BADD4", VA = "0x13BADD4")]
	public void Hide()
	{
	}

	[Token(Token = "0x600125B")]
	[Address(RVA = "0x13BAD30", Offset = "0x13BAD30", VA = "0x13BAD30")]
	private void ResetTween()
	{
	}

	[Token(Token = "0x600125C")]
	[Address(RVA = "0x13BAD60", Offset = "0x13BAD60", VA = "0x13BAD60")]
	[IteratorStateMachine(typeof(<DelayInput>d__15))]
	private IEnumerator DelayInput()
	{
		return null;
	}

	[Token(Token = "0x600125D")]
	[Address(RVA = "0x13BAFF8", Offset = "0x13BAFF8", VA = "0x13BAFF8")]
	[ContextMenu("OnButtonDown")]
	public void OnButtonDown()
	{
	}

	[Token(Token = "0x600125E")]
	[Address(RVA = "0x13BAFFC", Offset = "0x13BAFFC", VA = "0x13BAFFC")]
	[ContextMenu("OnButtonUp")]
	public void OnButtonUp()
	{
	}

	[Token(Token = "0x600125F")]
	[Address(RVA = "0x13BB000", Offset = "0x13BB000", VA = "0x13BB000")]
	private void OnInventoryChanged(AmountResources resource)
	{
	}

	[Token(Token = "0x6001260")]
	[Address(RVA = "0x13BB05C", Offset = "0x13BB05C", VA = "0x13BB05C")]
	public void OnButtonClick(int index)
	{
	}

	[Token(Token = "0x6001261")]
	[Address(RVA = "0x13BB130", Offset = "0x13BB130", VA = "0x13BB130")]
	public AlchemuUI3D()
	{
	}
}
[Token(Token = "0x200038D")]
public class AlchemyUIRecipe3D : MonoBehaviour
{
	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("References")]
	public AlchemyModificationBase ability;

	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PooledParticleEffect spawner;

	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject active;

	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject inactive;

	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ColliderButton button;

	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Collider buttonCollider;

	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Singularity")]
	public Renderer renderer;

	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int materialIndex;

	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform zOffset;

	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float maxDistance;

	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int x;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int y;

	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float z;

	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected bool isUnlocked;

	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	protected bool canCraft;

	[Token(Token = "0x4000E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float progress;

	[Token(Token = "0x4000E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 bottlePosition;

	[Token(Token = "0x4000E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform alchemyUIParent;

	[Token(Token = "0x4000E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 localBottlePosition;

	[Token(Token = "0x4000EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int singularityHash;

	[Token(Token = "0x4000EA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int pointHash;

	[Token(Token = "0x6001269")]
	[Address(RVA = "0x13BA69C", Offset = "0x13BA69C", VA = "0x13BA69C")]
	public void Setup(Transform parent)
	{
	}

	[Token(Token = "0x600126A")]
	[Address(RVA = "0x13BABC4", Offset = "0x13BABC4", VA = "0x13BABC4")]
	public void Init()
	{
	}

	[Token(Token = "0x600126B")]
	[Address(RVA = "0x13BB2EC", Offset = "0x13BB2EC", VA = "0x13BB2EC", Slot = "4")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600126C")]
	[Address(RVA = "0x13BB520", Offset = "0x13BB520", VA = "0x13BB520", Slot = "5")]
	protected virtual void UpdateState()
	{
	}

	[Token(Token = "0x600126D")]
	[Address(RVA = "0x13BB10C", Offset = "0x13BB10C", VA = "0x13BB10C")]
	public void Activate()
	{
	}

	[Token(Token = "0x600126E")]
	[Address(RVA = "0x13BB264", Offset = "0x13BB264", VA = "0x13BB264")]
	public void EnableButton()
	{
	}

	[Token(Token = "0x600126F")]
	[Address(RVA = "0x13BACF8", Offset = "0x13BACF8", VA = "0x13BACF8")]
	public void DisableButton()
	{
	}

	[Token(Token = "0x6001270")]
	[Address(RVA = "0x13BB594", Offset = "0x13BB594", VA = "0x13BB594")]
	public AlchemyUIRecipe3D()
	{
	}
}
[Token(Token = "0x200038E")]
public class AlchemyUIResource3D : MonoBehaviour
{
	[Token(Token = "0x4000EA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Resource resource;

	[Token(Token = "0x4000EA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject active;

	[Token(Token = "0x4000EA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject inactive;

	[Token(Token = "0x4000EA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AlchemyModificationBase ability;

	[Token(Token = "0x6001271")]
	[Address(RVA = "0x13BB5C0", Offset = "0x13BB5C0", VA = "0x13BB5C0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6001272")]
	[Address(RVA = "0x13BB6C0", Offset = "0x13BB6C0", VA = "0x13BB6C0")]
	public AlchemyUIResource3D()
	{
	}
}
[Token(Token = "0x200038F")]
public class NewAlchemyUIResourceLine3D : MonoBehaviour
{
	[Token(Token = "0x4000EA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Resource resource;

	[Token(Token = "0x4000EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AlchemyModificationBase ability;

	[Token(Token = "0x4000EA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x6001273")]
	[Address(RVA = "0x13BB6C8", Offset = "0x13BB6C8", VA = "0x13BB6C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001274")]
	[Address(RVA = "0x13BB7AC", Offset = "0x13BB7AC", VA = "0x13BB7AC")]
	public NewAlchemyUIResourceLine3D()
	{
	}
}
[Token(Token = "0x2000390")]
public class AlchemyEffectUI : MonoBehaviour
{
	[Token(Token = "0x2000391")]
	[CompilerGenerated]
	private sealed class <AnimateFillAmount>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AlchemyEffectUI <>4__this;

		[Token(Token = "0x1700025F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600127F")]
			[Address(RVA = "0x13BBE0C", Offset = "0x13BBE0C", VA = "0x13BBE0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000260")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001281")]
			[Address(RVA = "0x13BBE54", Offset = "0x13BBE54", VA = "0x13BBE54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x13BBC78", Offset = "0x13BBC78", VA = "0x13BBC78")]
		[DebuggerHidden]
		public <AnimateFillAmount>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x13BBCD0", Offset = "0x13BBCD0", VA = "0x13BBCD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x13BBCD4", Offset = "0x13BBCD4", VA = "0x13BBCD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x13BBE14", Offset = "0x13BBE14", VA = "0x13BBE14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyModificationReceiver effectController;

	[Token(Token = "0x4000EAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image icon;

	[Token(Token = "0x4000EAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image circle;

	[Token(Token = "0x4000EAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image background;

	[Token(Token = "0x4000EAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject panel;

	[Token(Token = "0x4000EAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Coroutine tween;

	[Token(Token = "0x6001275")]
	[Address(RVA = "0x13BB7B4", Offset = "0x13BB7B4", VA = "0x13BB7B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001276")]
	[Address(RVA = "0x13BB984", Offset = "0x13BB984", VA = "0x13BB984")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001277")]
	[Address(RVA = "0x13BBAF0", Offset = "0x13BBAF0", VA = "0x13BBAF0")]
	public void OnEffectAdded(ModificationScriptableObject modificator)
	{
	}

	[Token(Token = "0x6001278")]
	[Address(RVA = "0x13BBC04", Offset = "0x13BBC04", VA = "0x13BBC04")]
	[IteratorStateMachine(typeof(<AnimateFillAmount>d__9))]
	private IEnumerator AnimateFillAmount()
	{
		return null;
	}

	[Token(Token = "0x6001279")]
	[Address(RVA = "0x13BBCA0", Offset = "0x13BBCA0", VA = "0x13BBCA0")]
	public void OnEffectReseted(ModificationScriptableObject modificator)
	{
	}

	[Token(Token = "0x600127A")]
	[Address(RVA = "0x13BB928", Offset = "0x13BB928", VA = "0x13BB928")]
	public void OnEffectRemoved()
	{
	}

	[Token(Token = "0x600127B")]
	[Address(RVA = "0x13BBCC8", Offset = "0x13BBCC8", VA = "0x13BBCC8")]
	public AlchemyEffectUI()
	{
	}
}
[Token(Token = "0x2000392")]
public class AlchemySelectionUI : MonoBehaviour
{
	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputActionProperty selectionAction;

	[Token(Token = "0x4000EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AlchemyUI alchemyUI;

	[Token(Token = "0x4000EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool changePanels;

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text currentAlchemyText;

	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text[] slots;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Button corrosionButton;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Button leftSlotButton;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AlchemyModificationBase currentAlchemy;

	[Token(Token = "0x6001282")]
	[Address(RVA = "0x13BBE5C", Offset = "0x13BBE5C", VA = "0x13BBE5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001283")]
	[Address(RVA = "0x13BBE84", Offset = "0x13BBE84", VA = "0x13BBE84")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001284")]
	[Address(RVA = "0x13BBE88", Offset = "0x13BBE88", VA = "0x13BBE88")]
	public void OnAlchemySelect(AlchemyModificationBase alchemy)
	{
	}

	[Token(Token = "0x6001285")]
	[Address(RVA = "0x13BBF70", Offset = "0x13BBF70", VA = "0x13BBF70")]
	public void OnSlotSelected(int direction)
	{
	}

	[Token(Token = "0x6001286")]
	[Address(RVA = "0x13BC0E8", Offset = "0x13BC0E8", VA = "0x13BC0E8")]
	public void Show()
	{
	}

	[Token(Token = "0x6001287")]
	[Address(RVA = "0x13BBE60", Offset = "0x13BBE60", VA = "0x13BBE60")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001288")]
	[Address(RVA = "0x13BC394", Offset = "0x13BC394", VA = "0x13BC394")]
	public AlchemySelectionUI()
	{
	}
}
[Token(Token = "0x2000393")]
public class AlchemyUI : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000394")]
	public struct AlchemyUIPanel
	{
		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AlchemyUIPanelData[] items;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject panel;
	}

	[Serializable]
	[Token(Token = "0x2000395")]
	public struct AlchemyUIPanelData
	{
		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SwipeDirection direction;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AlchemyUIRecipe recipe;
	}

	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyUIPanel[] panels;

	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SwipeDetector swipeDetector;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AlchemyUISwipe swipeProgressLogic;

	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InputActionProperty selectionAction;

	[Token(Token = "0x4000EBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AlchemyAbility alchemyAbility;

	[Token(Token = "0x4000EBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FollowTarget follow;

	[Token(Token = "0x4000EC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int currentPanel;

	[Token(Token = "0x4000EC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isActive;

	[Token(Token = "0x6001289")]
	[Address(RVA = "0x13BC39C", Offset = "0x13BC39C", VA = "0x13BC39C")]
	private void OnButtonDown()
	{
	}

	[Token(Token = "0x600128A")]
	[Address(RVA = "0x13BC75C", Offset = "0x13BC75C", VA = "0x13BC75C")]
	private void OnButtonUp()
	{
	}

	[Token(Token = "0x600128B")]
	[Address(RVA = "0x13BC984", Offset = "0x13BC984", VA = "0x13BC984")]
	private void Start()
	{
	}

	[Token(Token = "0x600128C")]
	[Address(RVA = "0x13BCCB4", Offset = "0x13BCCB4", VA = "0x13BCCB4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600128D")]
	[Address(RVA = "0x13BCE2C", Offset = "0x13BCE2C", VA = "0x13BCE2C")]
	private void SetPanel(InputAction.CallbackContext obj)
	{
	}

	[Token(Token = "0x600128E")]
	[Address(RVA = "0x13BCE7C", Offset = "0x13BCE7C", VA = "0x13BCE7C")]
	public void SetPanel(int index)
	{
	}

	[Token(Token = "0x600128F")]
	[Address(RVA = "0x13BC3E8", Offset = "0x13BC3E8", VA = "0x13BC3E8")]
	public void Show()
	{
	}

	[Token(Token = "0x6001290")]
	[Address(RVA = "0x13BC7A4", Offset = "0x13BC7A4", VA = "0x13BC7A4")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001291")]
	[Address(RVA = "0x13BCF3C", Offset = "0x13BCF3C", VA = "0x13BCF3C")]
	private void OnSwipeUpdate(SwipeDirection direction, float percentage)
	{
	}

	[Token(Token = "0x6001292")]
	[Address(RVA = "0x13BD04C", Offset = "0x13BD04C", VA = "0x13BD04C")]
	private void OnInventoryChanged(AmountResources resource)
	{
	}

	[Token(Token = "0x6001293")]
	[Address(RVA = "0x13BD0D0", Offset = "0x13BD0D0", VA = "0x13BD0D0")]
	public AlchemyUI()
	{
	}
}
[Token(Token = "0x2000396")]
public class AlchemyUIRecipe : MonoBehaviour
{
	[Token(Token = "0x4000EC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("References")]
	public AlchemyModificationBase ability;

	[Token(Token = "0x4000EC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AlchemyUISwipe swipeProgressLogic;

	[Token(Token = "0x4000EC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AlchemyUIResource[] resources;

	[Token(Token = "0x4000EC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Images")]
	public Image blockedImage;

	[Token(Token = "0x4000ECA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image inactiveImage;

	[Token(Token = "0x4000ECB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image normalImage;

	[Token(Token = "0x4000ECC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Scale")]
	public Vector3 maxScale;

	[Token(Token = "0x4000ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public CanvasGroup canvasGroup;

	[Token(Token = "0x4000ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected bool isUnlocked;

	[Token(Token = "0x4000ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	protected bool canCraft;

	[Token(Token = "0x6001294")]
	[Address(RVA = "0x13BD0D8", Offset = "0x13BD0D8", VA = "0x13BD0D8", Slot = "4")]
	public virtual void Init()
	{
	}

	[Token(Token = "0x6001295")]
	[Address(RVA = "0x13BD338", Offset = "0x13BD338", VA = "0x13BD338", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6001296")]
	[Address(RVA = "0x13BCFEC", Offset = "0x13BCFEC", VA = "0x13BCFEC")]
	public void UpdateSwipeProgress(float percentage)
	{
	}

	[Token(Token = "0x6001297")]
	[Address(RVA = "0x13BD544", Offset = "0x13BD544", VA = "0x13BD544", Slot = "6")]
	protected virtual void UpdateState()
	{
	}

	[Token(Token = "0x6001298")]
	[Address(RVA = "0x13BD87C", Offset = "0x13BD87C", VA = "0x13BD87C", Slot = "7")]
	public virtual void SetAlchemy(AlchemyModificationBase newAlchemy)
	{
	}

	[Token(Token = "0x6001299")]
	[Address(RVA = "0x13BD9F8", Offset = "0x13BD9F8", VA = "0x13BD9F8")]
	public AlchemyUIRecipe()
	{
	}
}
[Token(Token = "0x2000397")]
public class AlchemyUIResource : MonoBehaviour
{
	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Resource resource;

	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image resourceIcon;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject noResourceIcon;

	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color inactiveResourceColor;

	[Token(Token = "0x600129A")]
	[Address(RVA = "0x13BD7E8", Offset = "0x13BD7E8", VA = "0x13BD7E8")]
	public void UpdateResource(bool canCraft, bool isUnlocked)
	{
	}

	[Token(Token = "0x600129B")]
	[Address(RVA = "0x13BD9C0", Offset = "0x13BD9C0", VA = "0x13BD9C0")]
	public void SetResource(Resource newResource)
	{
	}

	[Token(Token = "0x600129C")]
	[Address(RVA = "0x13BDA1C", Offset = "0x13BDA1C", VA = "0x13BDA1C")]
	public AlchemyUIResource()
	{
	}
}
[Token(Token = "0x2000398")]
public class AlchemyUISwipe : MonoBehaviour
{
	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image swipeProgress;

	[Token(Token = "0x4000ED5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image inactiveImage;

	[Token(Token = "0x4000ED6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform trans;

	[Token(Token = "0x4000ED7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 activePosition;

	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 inactivePosition;

	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 activeScale;

	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 inactiveScale;

	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float tweenSpeed;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected bool isActivated;

	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected float lastPercentage;

	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected TweenerCore<Vector3, Vector3, VectorOptions> moveTween;

	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected TweenerCore<Vector3, Vector3, VectorOptions> scaleTween;

	[Token(Token = "0x600129D")]
	[Address(RVA = "0x13BD4D8", Offset = "0x13BD4D8", VA = "0x13BD4D8")]
	public void UpdateFill(float percentage)
	{
	}

	[Token(Token = "0x600129E")]
	[Address(RVA = "0x13BD314", Offset = "0x13BD314", VA = "0x13BD314")]
	public void SetActive(bool active)
	{
	}

	[Token(Token = "0x600129F")]
	[Address(RVA = "0x13BD2CC", Offset = "0x13BD2CC", VA = "0x13BD2CC")]
	public void Show()
	{
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0x13BD29C", Offset = "0x13BD29C", VA = "0x13BD29C")]
	public void Hide()
	{
	}

	[Token(Token = "0x60012A1")]
	[Address(RVA = "0x13BDA30", Offset = "0x13BDA30", VA = "0x13BDA30")]
	private void Activate()
	{
	}

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0x13BDA9C", Offset = "0x13BDA9C", VA = "0x13BDA9C")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0x13BDB00", Offset = "0x13BDB00", VA = "0x13BDB00")]
	private void ResetTween()
	{
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0x13BDB3C", Offset = "0x13BDB3C", VA = "0x13BDB3C")]
	public AlchemyUISwipe()
	{
	}
}
[Token(Token = "0x2000399")]
public class ButtonAlchemyUI : MonoBehaviour
{
	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AlchemyUIRecipe[] recipes;

	[Token(Token = "0x4000EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AlchemyAbility alchemyAbility;

	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FollowTarget follow;

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0x13BDBB0", Offset = "0x13BDBB0", VA = "0x13BDBB0")]
	private void OnButtonDown()
	{
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0x13BDDA0", Offset = "0x13BDDA0", VA = "0x13BDDA0")]
	private void OnButtonUp()
	{
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0x13BDEB4", Offset = "0x13BDEB4", VA = "0x13BDEB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0x13BE1F8", Offset = "0x13BE1F8", VA = "0x13BE1F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0x13BDBEC", Offset = "0x13BDBEC", VA = "0x13BDBEC")]
	[ContextMenu("Show")]
	public void Show()
	{
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0x13BDDDC", Offset = "0x13BDDDC", VA = "0x13BDDDC")]
	public void Hide()
	{
	}

	[Token(Token = "0x60012AB")]
	[Address(RVA = "0x13BE370", Offset = "0x13BE370", VA = "0x13BE370")]
	private void OnInventoryChanged(AmountResources resource)
	{
	}

	[Token(Token = "0x60012AC")]
	[Address(RVA = "0x13BE3D4", Offset = "0x13BE3D4", VA = "0x13BE3D4")]
	public void OnButtonClick(int index)
	{
	}

	[Token(Token = "0x60012AD")]
	[Address(RVA = "0x13BE4B0", Offset = "0x13BE4B0", VA = "0x13BE4B0")]
	public ButtonAlchemyUI()
	{
	}
}
[Token(Token = "0x200039A")]
public class NewAlchemyUIRecipe : AlchemyUIRecipe
{
	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GenericPoolSpawner spawner;

	[Token(Token = "0x60012AE")]
	[Address(RVA = "0x13BE4B8", Offset = "0x13BE4B8", VA = "0x13BE4B8", Slot = "4")]
	public override void Init()
	{
	}

	[Token(Token = "0x60012AF")]
	[Address(RVA = "0x13BE600", Offset = "0x13BE600", VA = "0x13BE600", Slot = "6")]
	protected override void UpdateState()
	{
	}

	[Token(Token = "0x60012B0")]
	[Address(RVA = "0x13BE658", Offset = "0x13BE658", VA = "0x13BE658", Slot = "7")]
	public override void SetAlchemy(AlchemyModificationBase newAlchemy)
	{
	}

	[Token(Token = "0x60012B1")]
	[Address(RVA = "0x13BE664", Offset = "0x13BE664", VA = "0x13BE664", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60012B2")]
	[Address(RVA = "0x13BE4AC", Offset = "0x13BE4AC", VA = "0x13BE4AC")]
	public void Spawn()
	{
	}

	[Token(Token = "0x60012B3")]
	[Address(RVA = "0x13BE804", Offset = "0x13BE804", VA = "0x13BE804")]
	public NewAlchemyUIRecipe()
	{
	}
}
[Token(Token = "0x200039B")]
[DefaultExecutionOrder(-1)]
public class NewAlchemyUIRecipeSpawner : PoolSpawner
{
	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform _target;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Component _prefab;

	[Token(Token = "0x17000261")]
	public override int Limit
	{
		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x13BE828", Offset = "0x13BE828", VA = "0x13BE828", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000262")]
	public override bool TargetIsParent
	{
		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x13BE830", Offset = "0x13BE830", VA = "0x13BE830", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000263")]
	public override Component Prefab
	{
		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x13BE838", Offset = "0x13BE838", VA = "0x13BE838", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000264")]
	public override Transform Target
	{
		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x13BE840", Offset = "0x13BE840", VA = "0x13BE840", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012B8")]
	[Address(RVA = "0x13BE8F8", Offset = "0x13BE8F8", VA = "0x13BE8F8", Slot = "10")]
	public virtual bool TrySpawnBottle(AlchemyBottle prefab, out AlchemyBottle result)
	{
		return default(bool);
	}

	[Token(Token = "0x60012B9")]
	[Address(RVA = "0x13BEA00", Offset = "0x13BEA00", VA = "0x13BEA00")]
	public NewAlchemyUIRecipeSpawner()
	{
	}
}
[Token(Token = "0x200039C")]
public class NewAlchemyUIResource : MonoBehaviour
{
	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Resource resource;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image resourceIcon;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image inactiveResourceIcon;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AlchemyModificationBase ability;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CanvasGroup canvasGroup;

	[Token(Token = "0x60012BA")]
	[Address(RVA = "0x13BEA08", Offset = "0x13BEA08", VA = "0x13BEA08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012BB")]
	[Address(RVA = "0x13BEBBC", Offset = "0x13BEBBC", VA = "0x13BEBBC")]
	public NewAlchemyUIResource()
	{
	}
}
[Token(Token = "0x200039D")]
public class NewAlchemyUIResourceLine : MonoBehaviour
{
	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Resource resource;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AlchemyModificationBase ability;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CanvasGroup canvasGroup;

	[Token(Token = "0x60012BC")]
	[Address(RVA = "0x13BEBC4", Offset = "0x13BEBC4", VA = "0x13BEBC4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012BD")]
	[Address(RVA = "0x13BED00", Offset = "0x13BED00", VA = "0x13BED00")]
	public NewAlchemyUIResourceLine()
	{
	}
}
[Token(Token = "0x200039E")]
public class AngerUI : BarUILogicProvider
{
	[Token(Token = "0x4000EEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Damageable damageable;

	[Token(Token = "0x4000EEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SuperArmorModifier superArmor;

	[Token(Token = "0x4000EF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BarUI barUI;

	[Token(Token = "0x4000EF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool showProgress;

	[Token(Token = "0x60012BE")]
	[Address(RVA = "0x13BED08", Offset = "0x13BED08", VA = "0x13BED08")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60012BF")]
	[Address(RVA = "0x13BEF0C", Offset = "0x13BEF0C", VA = "0x13BEF0C")]
	private void OnReceiveDamage()
	{
	}

	[Token(Token = "0x60012C0")]
	[Address(RVA = "0x13BEF3C", Offset = "0x13BEF3C", VA = "0x13BEF3C")]
	private void OnDeath()
	{
	}

	[Token(Token = "0x60012C1")]
	[Address(RVA = "0x13BEF94", Offset = "0x13BEF94", VA = "0x13BEF94")]
	private void OnSuperArmorActivated()
	{
	}

	[Token(Token = "0x60012C2")]
	[Address(RVA = "0x13BEFBC", Offset = "0x13BEFBC", VA = "0x13BEFBC")]
	private void OnSuperArmorDeactivated()
	{
	}

	[Token(Token = "0x60012C3")]
	[Address(RVA = "0x13BEFE4", Offset = "0x13BEFE4", VA = "0x13BEFE4", Slot = "4")]
	public override void Init()
	{
	}

	[Token(Token = "0x60012C4")]
	[Address(RVA = "0x13BF1DC", Offset = "0x13BF1DC", VA = "0x13BF1DC", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60012C5")]
	[Address(RVA = "0x13BF21C", Offset = "0x13BF21C", VA = "0x13BF21C")]
	public AngerUI()
	{
	}
}
[Token(Token = "0x200039F")]
public class BarUI : MonoBehaviour
{
	[Token(Token = "0x4000EF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hideOnStart;

	[Token(Token = "0x4000EF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool hideOnUpdate;

	[Token(Token = "0x4000EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float showDuration;

	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image valueImage;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image background;

	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI currentValueTB;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI maxValueTB;

	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool follow;

	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform target;

	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 offset;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private BarUILogicProvider barProvider;

	[Token(Token = "0x60012C6")]
	[Address(RVA = "0x13BF22C", Offset = "0x13BF22C", VA = "0x13BF22C")]
	private void Start()
	{
	}

	[Token(Token = "0x60012C7")]
	[Address(RVA = "0x13BF3BC", Offset = "0x13BF3BC", VA = "0x13BF3BC", Slot = "4")]
	public virtual void UpdateBar(float currentValue, float maxValue)
	{
	}

	[Token(Token = "0x60012C8")]
	[Address(RVA = "0x13BF4B0", Offset = "0x13BF4B0", VA = "0x13BF4B0")]
	public void Show()
	{
	}

	[Token(Token = "0x60012C9")]
	[Address(RVA = "0x13BF398", Offset = "0x13BF398", VA = "0x13BF398")]
	public void Hide()
	{
	}

	[Token(Token = "0x60012CA")]
	[Address(RVA = "0x13BEF78", Offset = "0x13BEF78", VA = "0x13BEF78")]
	public void ForceHide()
	{
	}

	[Token(Token = "0x60012CB")]
	[Address(RVA = "0x13BF4D4", Offset = "0x13BF4D4", VA = "0x13BF4D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60012CC")]
	[Address(RVA = "0x13BF5D0", Offset = "0x13BF5D0", VA = "0x13BF5D0")]
	public BarUI()
	{
	}
}
[Token(Token = "0x20003A0")]
public abstract class BarUILogicProvider : MonoBehaviour
{
	[Token(Token = "0x60012CD")]
	public abstract void Init();

	[Token(Token = "0x60012CE")]
	protected abstract void Update();

	[Token(Token = "0x60012CF")]
	[Address(RVA = "0x13BF224", Offset = "0x13BF224", VA = "0x13BF224")]
	protected BarUILogicProvider()
	{
	}
}
[Token(Token = "0x20003A1")]
public class ButtonUIBase : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
{
	[Token(Token = "0x20003A2")]
	public enum ButtonType
	{
		[Token(Token = "0x4000F00")]
		Standard,
		[Token(Token = "0x4000F01")]
		Dialogue,
		[Token(Token = "0x4000F02")]
		Alchemy,
		[Token(Token = "0x4000F03")]
		Shop
	}

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ButtonType buttonType;

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected bool isSelect;

	[Token(Token = "0x60012D0")]
	[Address(RVA = "0x13BF5E8", Offset = "0x13BF5E8", VA = "0x13BF5E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012D1")]
	[Address(RVA = "0x13BF77C", Offset = "0x13BF77C", VA = "0x13BF77C", Slot = "6")]
	public virtual void OnDeselect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x60012D2")]
	[Address(RVA = "0x13BF794", Offset = "0x13BF794", VA = "0x13BF794", Slot = "7")]
	public virtual void OnClick()
	{
	}

	[Token(Token = "0x60012D3")]
	[Address(RVA = "0x13BF818", Offset = "0x13BF818", VA = "0x13BF818", Slot = "8")]
	public virtual void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x60012D4")]
	[Address(RVA = "0x13BF8BC", Offset = "0x13BF8BC", VA = "0x13BF8BC")]
	public void OnDeselect()
	{
	}

	[Token(Token = "0x60012D5")]
	[Address(RVA = "0x13BF8CC", Offset = "0x13BF8CC", VA = "0x13BF8CC")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x60012D6")]
	[Address(RVA = "0x13BF5FC", Offset = "0x13BF5FC", VA = "0x13BF5FC")]
	private void DoColor(Color color)
	{
	}

	[Token(Token = "0x60012D7")]
	[Address(RVA = "0x13BF8DC", Offset = "0x13BF8DC", VA = "0x13BF8DC")]
	public ButtonUIBase()
	{
	}
}
[Token(Token = "0x20003A3")]
public class ButtonUIClickInvoker : MonoBehaviour
{
	[Token(Token = "0x4000F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button referenceToTheButton;

	[Token(Token = "0x60012D8")]
	[Address(RVA = "0x13BF8E4", Offset = "0x13BF8E4", VA = "0x13BF8E4")]
	[ContextMenu("OnClick")]
	public void OnClick()
	{
	}

	[Token(Token = "0x60012D9")]
	[Address(RVA = "0x13BF918", Offset = "0x13BF918", VA = "0x13BF918")]
	public ButtonUIClickInvoker()
	{
	}
}
[Token(Token = "0x20003A4")]
public class CameraFollowUI : MonoBehaviour
{
	[Token(Token = "0x4000F05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _isFollowing;

	[Token(Token = "0x4000F06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _previousRealtimeRecorded;

	[Token(Token = "0x4000F07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float _followFactor;

	[Token(Token = "0x4000F08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 _targetPosition;

	[Token(Token = "0x4000F09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion _targetRotation;

	[Token(Token = "0x4000F0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform _transform;

	[Token(Token = "0x4000F0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform mainCamera;

	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 positionOffset;

	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Vector3 rotationOffset;

	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FollowDeadzone followStartDeadzone;

	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FollowDeadzone followStopDeadzone;

	[Token(Token = "0x4000F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Options")]
	[Min(0.001f)]
	public float followVelocity;

	[Token(Token = "0x4000F11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AnimationCurve followStartCurve;

	[Token(Token = "0x4000F12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float followStartDuration;

	[Token(Token = "0x4000F13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AnimationCurve followStopCurve;

	[Token(Token = "0x4000F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float followStopDuration;

	[Token(Token = "0x4000F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool lockRoll;

	[Token(Token = "0x4000F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool followOnUpdate;

	[Token(Token = "0x17000265")]
	private float DeltaTime
	{
		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x13BFA38", Offset = "0x13BFA38", VA = "0x13BFA38")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x13BFA40", Offset = "0x13BFA40", VA = "0x13BFA40")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60012DA")]
	[Address(RVA = "0x13BF920", Offset = "0x13BF920", VA = "0x13BF920")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012DB")]
	[Address(RVA = "0x13BFA1C", Offset = "0x13BFA1C", VA = "0x13BFA1C")]
	private void Start()
	{
	}

	[Token(Token = "0x60012DE")]
	[Address(RVA = "0x13BFA48", Offset = "0x13BFA48", VA = "0x13BFA48")]
	private void UpdateDeltaTime()
	{
	}

	[Token(Token = "0x60012DF")]
	[Address(RVA = "0x13BFA70", Offset = "0x13BFA70", VA = "0x13BFA70")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012E0")]
	[Address(RVA = "0x13BFBA8", Offset = "0x13BFBA8", VA = "0x13BFBA8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60012E1")]
	[Address(RVA = "0x13BFCD4", Offset = "0x13BFCD4", VA = "0x13BFCD4")]
	private void OnUpdate()
	{
	}

	[Token(Token = "0x60012E2")]
	[Address(RVA = "0x13BFCE4", Offset = "0x13BFCE4", VA = "0x13BFCE4")]
	public void TryFollowing()
	{
	}

	[Token(Token = "0x60012E3")]
	[Address(RVA = "0x13C0084", Offset = "0x13C0084", VA = "0x13C0084")]
	private void StartFollowing()
	{
	}

	[Token(Token = "0x60012E4")]
	[Address(RVA = "0x13BFF9C", Offset = "0x13BFF9C", VA = "0x13BFF9C")]
	private void StopFollowing()
	{
	}

	[Token(Token = "0x60012E5")]
	[Address(RVA = "0x13BFD80", Offset = "0x13BFD80", VA = "0x13BFD80")]
	protected bool IsInDeadzone(FollowDeadzone deadzone)
	{
		return default(bool);
	}

	[Token(Token = "0x60012E6")]
	[Address(RVA = "0x13C01F0", Offset = "0x13C01F0", VA = "0x13C01F0", Slot = "4")]
	protected virtual void UpdateTarget()
	{
	}

	[Token(Token = "0x60012E7")]
	[Address(RVA = "0x13C030C", Offset = "0x13C030C", VA = "0x13C030C", Slot = "5")]
	protected virtual void FollowTarget()
	{
	}

	[Token(Token = "0x60012E8")]
	[Address(RVA = "0x13C0618", Offset = "0x13C0618", VA = "0x13C0618", Slot = "6")]
	protected virtual void Reset()
	{
	}

	[Token(Token = "0x60012E9")]
	[Address(RVA = "0x13C06C8", Offset = "0x13C06C8", VA = "0x13C06C8")]
	public CameraFollowUI()
	{
	}
}
[Serializable]
[Token(Token = "0x20003A5")]
public struct FollowDeadzone
{
	[Token(Token = "0x4000F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Range(0f, 180f)]
	public float angle;

	[Token(Token = "0x4000F19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[Min(0f)]
	public float distance;
}
[Token(Token = "0x20003A6")]
public class ColliderButtonProgress : MonoBehaviour
{
	[Token(Token = "0x4000F1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ColliderButton colliderButton;

	[Token(Token = "0x4000F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Spline spline;

	[Token(Token = "0x4000F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image progressImage;

	[Token(Token = "0x4000F1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform moveParent;

	[Token(Token = "0x4000F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private StudioEventEmitter emitter;

	[Token(Token = "0x4000F1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool rotate;

	[Token(Token = "0x60012EE")]
	[Address(RVA = "0x13C07E4", Offset = "0x13C07E4", VA = "0x13C07E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60012EF")]
	[Address(RVA = "0x13C0998", Offset = "0x13C0998", VA = "0x13C0998")]
	public ColliderButtonProgress()
	{
	}
}
[Token(Token = "0x20003A7")]
[RequireComponent(typeof(Collider))]
public class ColliderButtonInteraction : MonoBehaviour
{
	[Token(Token = "0x60012F0")]
	[Address(RVA = "0x13C09A8", Offset = "0x13C09A8", VA = "0x13C09A8")]
	private void Reset()
	{
	}

	[Token(Token = "0x60012F1")]
	[Address(RVA = "0x13C0A04", Offset = "0x13C0A04", VA = "0x13C0A04")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012F2")]
	[Address(RVA = "0x13C0A60", Offset = "0x13C0A60", VA = "0x13C0A60")]
	public ColliderButtonInteraction()
	{
	}
}
[Token(Token = "0x20003A8")]
public class ColliderButtonSelector : MonoBehaviour
{
	[Token(Token = "0x4000F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Chooser chooser;

	[Token(Token = "0x4000F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool loopAround;

	[Token(Token = "0x4000F22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public KeyCode previousKey;

	[Token(Token = "0x4000F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public KeyCode nextKey;

	[Token(Token = "0x4000F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ColliderButton[] colliderButtons;

	[Token(Token = "0x4000F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _index;

	[Token(Token = "0x60012F3")]
	[Address(RVA = "0x13C0A68", Offset = "0x13C0A68", VA = "0x13C0A68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012F4")]
	[Address(RVA = "0x13C0B18", Offset = "0x13C0B18", VA = "0x13C0B18")]
	private void Reset()
	{
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0x13C0B70", Offset = "0x13C0B70", VA = "0x13C0B70")]
	private void Update()
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0x13C0A74", Offset = "0x13C0A74", VA = "0x13C0A74")]
	public void Next()
	{
	}

	[Token(Token = "0x60012F7")]
	[Address(RVA = "0x13C0BB4", Offset = "0x13C0BB4", VA = "0x13C0BB4")]
	public void Previous()
	{
	}

	[Token(Token = "0x60012F8")]
	[Address(RVA = "0x13C0C50", Offset = "0x13C0C50", VA = "0x13C0C50")]
	public ColliderButtonSelector()
	{
	}
}
[Token(Token = "0x20003A9")]
public class ContentFitterRefresh : MonoBehaviour
{
	[Token(Token = "0x4000F26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x60012F9")]
	[Address(RVA = "0x13C0C64", Offset = "0x13C0C64", VA = "0x13C0C64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60012FA")]
	[Address(RVA = "0x13C0CB4", Offset = "0x13C0CB4", VA = "0x13C0CB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60012FB")]
	[Address(RVA = "0x13C0CBC", Offset = "0x13C0CBC", VA = "0x13C0CBC")]
	public void RefreshContentFitters()
	{
	}

	[Token(Token = "0x60012FC")]
	[Address(RVA = "0x13C0D30", Offset = "0x13C0D30", VA = "0x13C0D30")]
	private void RefreshContentFitter(RectTransform transform)
	{
	}

	[Token(Token = "0x60012FD")]
	[Address(RVA = "0x13C1158", Offset = "0x13C1158", VA = "0x13C1158")]
	public ContentFitterRefresh()
	{
	}
}
[Token(Token = "0x20003AA")]
public class DamagableUI : BarUILogicProvider
{
	[Token(Token = "0x4000F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Damageable damageable;

	[Token(Token = "0x4000F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BarUI barUI;

	[Token(Token = "0x60012FE")]
	[Address(RVA = "0x13C1160", Offset = "0x13C1160", VA = "0x13C1160")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60012FF")]
	[Address(RVA = "0x13C12D0", Offset = "0x13C12D0", VA = "0x13C12D0")]
	private void OnReceiveDamage()
	{
	}

	[Token(Token = "0x6001300")]
	[Address(RVA = "0x13C130C", Offset = "0x13C130C", VA = "0x13C130C")]
	private void OnDeath()
	{
	}

	[Token(Token = "0x6001301")]
	[Address(RVA = "0x13C1334", Offset = "0x13C1334", VA = "0x13C1334", Slot = "4")]
	public override void Init()
	{
	}

	[Token(Token = "0x6001302")]
	[Address(RVA = "0x13C12D4", Offset = "0x13C12D4", VA = "0x13C12D4")]
	public void UpdateBarHitPoints()
	{
	}

	[Token(Token = "0x6001303")]
	[Address(RVA = "0x13C14A4", Offset = "0x13C14A4", VA = "0x13C14A4", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001304")]
	[Address(RVA = "0x13C14A8", Offset = "0x13C14A8", VA = "0x13C14A8")]
	public DamagableUI()
	{
	}
}
[Token(Token = "0x20003AB")]
public class HandVelocityDebug : MonoBehaviour
{
	[Token(Token = "0x4000F29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI angularText;

	[Token(Token = "0x4000F2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI velocityText;

	[Token(Token = "0x4000F2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private XRControllerVelocity controllerVelocity;

	[Token(Token = "0x6001305")]
	[Address(RVA = "0x13C14B0", Offset = "0x13C14B0", VA = "0x13C14B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001306")]
	[Address(RVA = "0x13C1540", Offset = "0x13C1540", VA = "0x13C1540")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001307")]
	[Address(RVA = "0x13C15F4", Offset = "0x13C15F4", VA = "0x13C15F4")]
	public HandVelocityDebug()
	{
	}
}
[Token(Token = "0x20003AC")]
public class MainMenuToggleUI : MonoBehaviour, ISelectHandler, IEventSystemHandler
{
	[Token(Token = "0x4000F2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image checkmark;

	[Token(Token = "0x4000F2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Toggle myToggle;

	[Token(Token = "0x4000F2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite spriteOn;

	[Token(Token = "0x4000F2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite spriteOff;

	[Token(Token = "0x4000F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Flowchart flowchart;

	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string block;

	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isOn;

	[Token(Token = "0x17000266")]
	public bool IsOn
	{
		[Token(Token = "0x6001308")]
		[Address(RVA = "0x13C15FC", Offset = "0x13C15FC", VA = "0x13C15FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001309")]
	[Address(RVA = "0x13C1604", Offset = "0x13C1604", VA = "0x13C1604")]
	public void Init(bool on)
	{
	}

	[Token(Token = "0x600130A")]
	[Address(RVA = "0x13C1648", Offset = "0x13C1648", VA = "0x13C1648", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x600130B")]
	[Address(RVA = "0x13C1610", Offset = "0x13C1610", VA = "0x13C1610")]
	private void UpdateSprite()
	{
	}

	[Token(Token = "0x600130C")]
	[Address(RVA = "0x13C1684", Offset = "0x13C1684", VA = "0x13C1684")]
	public MainMenuToggleUI()
	{
	}
}
[Token(Token = "0x20003AD")]
public class MainMenu_Button_UI : ButtonUIBase, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI text;

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Flowchart flowchart;

	[Token(Token = "0x4000F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string blockName;

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string variableName;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string variableValue;

	[Token(Token = "0x600130D")]
	[Address(RVA = "0x13C168C", Offset = "0x13C168C", VA = "0x13C168C", Slot = "6")]
	public override void OnDeselect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x600130E")]
	[Address(RVA = "0x13C16EC", Offset = "0x13C16EC", VA = "0x13C16EC", Slot = "7")]
	public override void OnClick()
	{
	}

	[Token(Token = "0x600130F")]
	[Address(RVA = "0x13C175C", Offset = "0x13C175C", VA = "0x13C175C", Slot = "9")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6001310")]
	[Address(RVA = "0x13C1790", Offset = "0x13C1790", VA = "0x13C1790", Slot = "10")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6001311")]
	[Address(RVA = "0x13C17D4", Offset = "0x13C17D4", VA = "0x13C17D4")]
	public MainMenu_Button_UI()
	{
	}
}
[Token(Token = "0x20003AE")]
public class MothBarUI : BarUI
{
	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] healthSprites;

	[Token(Token = "0x6001312")]
	[Address(RVA = "0x13C183C", Offset = "0x13C183C", VA = "0x13C183C", Slot = "4")]
	public override void UpdateBar(float currentValue, float maxValue)
	{
	}

	[Token(Token = "0x6001313")]
	[Address(RVA = "0x13C19B8", Offset = "0x13C19B8", VA = "0x13C19B8")]
	public MothBarUI()
	{
	}
}
[Token(Token = "0x20003AF")]
public class NoInputUI : MonoBehaviour
{
	[Token(Token = "0x20003B0")]
	[CompilerGenerated]
	private sealed class <ShowCoroutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NoInputUI <>4__this;

		[Token(Token = "0x17000267")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600131D")]
			[Address(RVA = "0x13C1E34", Offset = "0x13C1E34", VA = "0x13C1E34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000268")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600131F")]
			[Address(RVA = "0x13C1E7C", Offset = "0x13C1E7C", VA = "0x13C1E7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x13C1CD8", Offset = "0x13C1CD8", VA = "0x13C1CD8")]
		[DebuggerHidden]
		public <ShowCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x13C1D10", Offset = "0x13C1D10", VA = "0x13C1D10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x13C1D14", Offset = "0x13C1D14", VA = "0x13C1D14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x13C1E3C", Offset = "0x13C1E3C", VA = "0x13C1E3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float showDuration;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject panel;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Canvas canvas;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isActivated;

	[Token(Token = "0x6001314")]
	[Address(RVA = "0x13C19D0", Offset = "0x13C19D0", VA = "0x13C19D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001315")]
	[Address(RVA = "0x13C1A08", Offset = "0x13C1A08", VA = "0x13C1A08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001316")]
	[Address(RVA = "0x13C1AE0", Offset = "0x13C1AE0", VA = "0x13C1AE0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001317")]
	[Address(RVA = "0x13C1BB8", Offset = "0x13C1BB8", VA = "0x13C1BB8")]
	private void OnInputActivated()
	{
	}

	[Token(Token = "0x6001318")]
	[Address(RVA = "0x13C1C64", Offset = "0x13C1C64", VA = "0x13C1C64")]
	[IteratorStateMachine(typeof(<ShowCoroutine>d__8))]
	private IEnumerator ShowCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001319")]
	[Address(RVA = "0x13C1D00", Offset = "0x13C1D00", VA = "0x13C1D00")]
	public NoInputUI()
	{
	}
}
[Token(Token = "0x20003B1")]
public class DepthsPauseMapUI : PauseMapUI
{
	[Token(Token = "0x6001320")]
	[Address(RVA = "0x13C1E84", Offset = "0x13C1E84", VA = "0x13C1E84", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6001321")]
	[Address(RVA = "0x13C2144", Offset = "0x13C2144", VA = "0x13C2144")]
	public DepthsPauseMapUI()
	{
	}
}
[Token(Token = "0x20003B2")]
public class PauseBiomeUI : MonoBehaviour
{
	[Token(Token = "0x4000F40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BiomeData[] biomes;

	[Token(Token = "0x6001322")]
	[Address(RVA = "0x13C2154", Offset = "0x13C2154", VA = "0x13C2154")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001323")]
	[Address(RVA = "0x13C2344", Offset = "0x13C2344", VA = "0x13C2344")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001324")]
	[Address(RVA = "0x13C23AC", Offset = "0x13C23AC", VA = "0x13C23AC")]
	public PauseBiomeUI()
	{
	}
}
[Serializable]
[Token(Token = "0x20003B3")]
public struct BiomeData
{
	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string name;

	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public SceneData[] scenes;

	[Token(Token = "0x4000F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject image;

	[Token(Token = "0x6001325")]
	[Address(RVA = "0x13C228C", Offset = "0x13C228C", VA = "0x13C228C")]
	public bool HasScene(SceneData scene)
	{
		return default(bool);
	}
}
[Token(Token = "0x20003B4")]
public class PauseMapUI : MonoBehaviour
{
	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected PauseData[] scenes;

	[Token(Token = "0x4000F45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject biomeName;

	[Token(Token = "0x4000F46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject translationName;

	[Token(Token = "0x6001326")]
	[Address(RVA = "0x13C23B4", Offset = "0x13C23B4", VA = "0x13C23B4", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001327")]
	[Address(RVA = "0x13C214C", Offset = "0x13C214C", VA = "0x13C214C")]
	public PauseMapUI()
	{
	}
}
[Serializable]
[Token(Token = "0x20003B5")]
public struct PauseData
{
	[Token(Token = "0x4000F47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public SceneData scene;

	[Token(Token = "0x4000F48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GameObject image;

	[Token(Token = "0x4000F49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject name;
}
[Token(Token = "0x20003B6")]
public class PauseObjectivesUI : MonoBehaviour
{
	[Token(Token = "0x4000F4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] objectives;

	[Token(Token = "0x6001328")]
	[Address(RVA = "0x13C25FC", Offset = "0x13C25FC", VA = "0x13C25FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001329")]
	[Address(RVA = "0x13C26FC", Offset = "0x13C26FC", VA = "0x13C26FC")]
	public PauseObjectivesUI()
	{
	}
}
[Token(Token = "0x20003B7")]
public class PauseStatsUI : MonoBehaviour
{
	[Token(Token = "0x4000F4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected TextMeshProUGUI seeds;

	[Token(Token = "0x4000F4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected TextMeshProUGUI inscriptions;

	[Token(Token = "0x4000F4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected GameObject silverFrame;

	[Token(Token = "0x4000F4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected GameObject goldFrame;

	[Token(Token = "0x600132A")]
	[Address(RVA = "0x13C2704", Offset = "0x13C2704", VA = "0x13C2704", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600132B")]
	[Address(RVA = "0x13C29D4", Offset = "0x13C29D4", VA = "0x13C29D4")]
	public PauseStatsUI()
	{
	}
}
[Token(Token = "0x20003B8")]
public class RadialLayout : LayoutGroup
{
	[Token(Token = "0x4000F4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected float radius;

	[Token(Token = "0x4000F50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	protected bool clockwise;

	[Token(Token = "0x4000F51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Range(0f, 360f)]
	[SerializeField]
	protected float minAngle;

	[Token(Token = "0x4000F52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[Range(0f, 360f)]
	protected float maxAngle;

	[Token(Token = "0x4000F53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Range(0f, 360f)]
	protected float startAngle;

	[Token(Token = "0x4000F54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	protected bool customRebuild;

	[Token(Token = "0x4000F55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Range(0f, 360f)]
	[Header("Child rotation")]
	protected float startElementAngle;

	[Token(Token = "0x4000F56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	protected bool rotateElements;

	[Token(Token = "0x4000F57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[SerializeField]
	[Header("Child width")]
	protected bool expandChildWidth;

	[Token(Token = "0x4000F58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected float childWidthFactor;

	[Token(Token = "0x4000F59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	[Range(0f, 360f)]
	protected float maxWidthFactor;

	[Token(Token = "0x4000F5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected bool childWidthFromRadius;

	[Token(Token = "0x4000F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	protected float childWidthRadiusFactor;

	[Token(Token = "0x4000F5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Header("Child height")]
	protected bool expandChildHeight;

	[Token(Token = "0x4000F5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	protected float childHeight;

	[Token(Token = "0x4000F5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	protected bool childHeightFromRadius;

	[Token(Token = "0x4000F5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	protected float childHeightRadiusFactor;

	[Token(Token = "0x17000269")]
	public float Radius
	{
		[Token(Token = "0x600132C")]
		[Address(RVA = "0x13C29DC", Offset = "0x13C29DC", VA = "0x13C29DC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600132D")]
		[Address(RVA = "0x13C29E4", Offset = "0x13C29E4", VA = "0x13C29E4")]
		set
		{
		}
	}

	[Token(Token = "0x1700026A")]
	public bool Clockwise
	{
		[Token(Token = "0x600132E")]
		[Address(RVA = "0x13C2A14", Offset = "0x13C2A14", VA = "0x13C2A14")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600132F")]
		[Address(RVA = "0x13C2A1C", Offset = "0x13C2A1C", VA = "0x13C2A1C")]
		set
		{
		}
	}

	[Token(Token = "0x1700026B")]
	public float MinAngle
	{
		[Token(Token = "0x6001330")]
		[Address(RVA = "0x13C2A40", Offset = "0x13C2A40", VA = "0x13C2A40")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001331")]
		[Address(RVA = "0x13C2A48", Offset = "0x13C2A48", VA = "0x13C2A48")]
		set
		{
		}
	}

	[Token(Token = "0x1700026C")]
	public float MaxAngle
	{
		[Token(Token = "0x6001332")]
		[Address(RVA = "0x13C2A68", Offset = "0x13C2A68", VA = "0x13C2A68")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001333")]
		[Address(RVA = "0x13C2A70", Offset = "0x13C2A70", VA = "0x13C2A70")]
		set
		{
		}
	}

	[Token(Token = "0x1700026D")]
	public float StartAngle
	{
		[Token(Token = "0x6001334")]
		[Address(RVA = "0x13C2A90", Offset = "0x13C2A90", VA = "0x13C2A90")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001335")]
		[Address(RVA = "0x13C2A98", Offset = "0x13C2A98", VA = "0x13C2A98")]
		set
		{
		}
	}

	[Token(Token = "0x1700026E")]
	public bool CustomRebuild
	{
		[Token(Token = "0x6001336")]
		[Address(RVA = "0x13C2AB8", Offset = "0x13C2AB8", VA = "0x13C2AB8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001337")]
		[Address(RVA = "0x13C2AC0", Offset = "0x13C2AC0", VA = "0x13C2AC0")]
		set
		{
		}
	}

	[Token(Token = "0x1700026F")]
	public bool ExpandChildWidth
	{
		[Token(Token = "0x6001338")]
		[Address(RVA = "0x13C2AE0", Offset = "0x13C2AE0", VA = "0x13C2AE0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001339")]
		[Address(RVA = "0x13C2AE8", Offset = "0x13C2AE8", VA = "0x13C2AE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000270")]
	public float ChildWidthFactor
	{
		[Token(Token = "0x600133A")]
		[Address(RVA = "0x13C2B0C", Offset = "0x13C2B0C", VA = "0x13C2B0C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600133B")]
		[Address(RVA = "0x13C2B14", Offset = "0x13C2B14", VA = "0x13C2B14")]
		set
		{
		}
	}

	[Token(Token = "0x17000271")]
	public bool ChildWidthFromRadius
	{
		[Token(Token = "0x600133C")]
		[Address(RVA = "0x13C2B34", Offset = "0x13C2B34", VA = "0x13C2B34")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600133D")]
		[Address(RVA = "0x13C2B3C", Offset = "0x13C2B3C", VA = "0x13C2B3C")]
		set
		{
		}
	}

	[Token(Token = "0x17000272")]
	public float ChildWidthRadiusFactor
	{
		[Token(Token = "0x600133E")]
		[Address(RVA = "0x13C2B60", Offset = "0x13C2B60", VA = "0x13C2B60")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600133F")]
		[Address(RVA = "0x13C2B68", Offset = "0x13C2B68", VA = "0x13C2B68")]
		set
		{
		}
	}

	[Token(Token = "0x17000273")]
	public bool ExpandChildHeight
	{
		[Token(Token = "0x6001340")]
		[Address(RVA = "0x13C2B88", Offset = "0x13C2B88", VA = "0x13C2B88")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001341")]
		[Address(RVA = "0x13C2B90", Offset = "0x13C2B90", VA = "0x13C2B90")]
		set
		{
		}
	}

	[Token(Token = "0x17000274")]
	public float ChildHeight
	{
		[Token(Token = "0x6001342")]
		[Address(RVA = "0x13C2BB4", Offset = "0x13C2BB4", VA = "0x13C2BB4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001343")]
		[Address(RVA = "0x13C2BBC", Offset = "0x13C2BBC", VA = "0x13C2BBC")]
		set
		{
		}
	}

	[Token(Token = "0x17000275")]
	public bool ChildHeightFromRadius
	{
		[Token(Token = "0x6001344")]
		[Address(RVA = "0x13C2BDC", Offset = "0x13C2BDC", VA = "0x13C2BDC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001345")]
		[Address(RVA = "0x13C2BE4", Offset = "0x13C2BE4", VA = "0x13C2BE4")]
		set
		{
		}
	}

	[Token(Token = "0x17000276")]
	public float ChildHeightRadiusFactor
	{
		[Token(Token = "0x6001346")]
		[Address(RVA = "0x13C2C08", Offset = "0x13C2C08", VA = "0x13C2C08")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001347")]
		[Address(RVA = "0x13C2C10", Offset = "0x13C2C10", VA = "0x13C2C10")]
		set
		{
		}
	}

	[Token(Token = "0x17000277")]
	public RectTransform SelfTransform
	{
		[Token(Token = "0x6001348")]
		[Address(RVA = "0x13C2C30", Offset = "0x13C2C30", VA = "0x13C2C30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001349")]
	[Address(RVA = "0x13C2A04", Offset = "0x13C2A04", VA = "0x13C2A04")]
	public void OnValueChanged()
	{
	}

	[Token(Token = "0x600134A")]
	[Address(RVA = "0x13C3150", Offset = "0x13C3150", VA = "0x13C3150", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600134B")]
	[Address(RVA = "0x13C316C", Offset = "0x13C316C", VA = "0x13C316C", Slot = "37")]
	public override void SetLayoutHorizontal()
	{
	}

	[Token(Token = "0x600134C")]
	[Address(RVA = "0x13C3170", Offset = "0x13C3170", VA = "0x13C3170", Slot = "38")]
	public override void SetLayoutVertical()
	{
	}

	[Token(Token = "0x600134D")]
	[Address(RVA = "0x13C3174", Offset = "0x13C3174", VA = "0x13C3174", Slot = "29")]
	public override void CalculateLayoutInputVertical()
	{
	}

	[Token(Token = "0x600134E")]
	[Address(RVA = "0x13C3178", Offset = "0x13C3178", VA = "0x13C3178", Slot = "28")]
	public override void CalculateLayoutInputHorizontal()
	{
	}

	[Token(Token = "0x600134F")]
	[Address(RVA = "0x13C2C38", Offset = "0x13C2C38", VA = "0x13C2C38")]
	public void CalculateRadial()
	{
	}

	[Token(Token = "0x6001350")]
	[Address(RVA = "0x13C317C", Offset = "0x13C317C", VA = "0x13C317C")]
	public RadialLayout()
	{
	}
}
[Token(Token = "0x20003B9")]
[RequireComponent(typeof(ScrollRect))]
public class ScrollToSelected : MonoBehaviour
{
	[Token(Token = "0x4000F60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Required: Children must have a Y Pivot of 1!")]
	public float scrollSpeed;

	[Token(Token = "0x4000F61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ScrollRect m_ScrollRect;

	[Token(Token = "0x4000F62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform m_RectTransform;

	[Token(Token = "0x4000F63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform m_ContentRectTransform;

	[Token(Token = "0x4000F64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform m_SelectedRectTransform;

	[Token(Token = "0x6001351")]
	[Address(RVA = "0x13C31B8", Offset = "0x13C31B8", VA = "0x13C31B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001352")]
	[Address(RVA = "0x13C3268", Offset = "0x13C3268", VA = "0x13C3268")]
	private void Update()
	{
	}

	[Token(Token = "0x6001353")]
	[Address(RVA = "0x13C326C", Offset = "0x13C326C", VA = "0x13C326C")]
	private void UpdateScrollToSelected()
	{
	}

	[Token(Token = "0x6001354")]
	[Address(RVA = "0x13C359C", Offset = "0x13C359C", VA = "0x13C359C")]
	private float GetContentHeightDifference()
	{
		return default(float);
	}

	[Token(Token = "0x6001355")]
	[Address(RVA = "0x13C3614", Offset = "0x13C3614", VA = "0x13C3614")]
	private float NormalizedToPosition(float normPos, float contentHeightDifference)
	{
		return default(float);
	}

	[Token(Token = "0x6001356")]
	[Address(RVA = "0x13C3624", Offset = "0x13C3624", VA = "0x13C3624")]
	private float PositionToNormalized(float pos, float contentHeightDifference)
	{
		return default(float);
	}

	[Token(Token = "0x6001357")]
	[Address(RVA = "0x13C3634", Offset = "0x13C3634", VA = "0x13C3634")]
	public bool IsClippingTop()
	{
		return default(bool);
	}

	[Token(Token = "0x6001358")]
	[Address(RVA = "0x13C3660", Offset = "0x13C3660", VA = "0x13C3660")]
	public ScrollToSelected()
	{
	}
}
[Token(Token = "0x20003BA")]
public class SeedUI : MonoBehaviour
{
	[Token(Token = "0x20003BB")]
	[CompilerGenerated]
	private sealed class <ShowRoutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SeedUI <>4__this;

		[Token(Token = "0x17000278")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001362")]
			[Address(RVA = "0x13C3ADC", Offset = "0x13C3ADC", VA = "0x13C3ADC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000279")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001364")]
			[Address(RVA = "0x13C3B24", Offset = "0x13C3B24", VA = "0x13C3B24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x13C38F8", Offset = "0x13C38F8", VA = "0x13C38F8")]
		[DebuggerHidden]
		public <ShowRoutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x13C3930", Offset = "0x13C3930", VA = "0x13C3930", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x13C3934", Offset = "0x13C3934", VA = "0x13C3934", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x13C3AE4", Offset = "0x13C3AE4", VA = "0x13C3AE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject panel;

	[Token(Token = "0x4000F66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI text;

	[Token(Token = "0x4000F67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float showDuration;

	[Token(Token = "0x4000F68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas canvas;

	[Token(Token = "0x6001359")]
	[Address(RVA = "0x13C3670", Offset = "0x13C3670", VA = "0x13C3670")]
	private void Start()
	{
	}

	[Token(Token = "0x600135A")]
	[Address(RVA = "0x13C375C", Offset = "0x13C375C", VA = "0x13C375C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600135B")]
	[Address(RVA = "0x13C3794", Offset = "0x13C3794", VA = "0x13C3794")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600135C")]
	[Address(RVA = "0x13C3858", Offset = "0x13C3858", VA = "0x13C3858")]
	private void Show(int coinsAmount)
	{
	}

	[Token(Token = "0x600135D")]
	[Address(RVA = "0x13C3884", Offset = "0x13C3884", VA = "0x13C3884")]
	[IteratorStateMachine(typeof(<ShowRoutine>d__8))]
	private IEnumerator ShowRoutine()
	{
		return null;
	}

	[Token(Token = "0x600135E")]
	[Address(RVA = "0x13C3920", Offset = "0x13C3920", VA = "0x13C3920")]
	public SeedUI()
	{
	}
}
[Token(Token = "0x20003BC")]
public class SetGameVersion : MonoBehaviour
{
	[Token(Token = "0x4000F6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI text;

	[Token(Token = "0x6001365")]
	[Address(RVA = "0x13C3B2C", Offset = "0x13C3B2C", VA = "0x13C3B2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001366")]
	[Address(RVA = "0x13C3B60", Offset = "0x13C3B60", VA = "0x13C3B60")]
	public SetGameVersion()
	{
	}
}
[Token(Token = "0x20003BD")]
public class TimerBaseUI : MonoBehaviour
{
	[Token(Token = "0x4000F6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected float timerDuration;

	[Token(Token = "0x4000F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnStart;

	[Token(Token = "0x4000F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnStop;

	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnReset;

	[Token(Token = "0x4000F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Action onStart;

	[Token(Token = "0x4000F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Action onStop;

	[Token(Token = "0x4000F73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Action onReset;

	[Token(Token = "0x4000F74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Visual")]
	public GameObject panel;

	[Token(Token = "0x4000F75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Image icon;

	[Token(Token = "0x4000F76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Image circle;

	[Token(Token = "0x4000F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Image background;

	[Token(Token = "0x4000F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected TweenerCore<float, float, FloatOptions> tween;

	[Token(Token = "0x4000F79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private TweenerCore<Vector3, Vector3, VectorOptions> _hiddenTween;

	[Token(Token = "0x6001367")]
	[Address(RVA = "0x13C3B68", Offset = "0x13C3B68", VA = "0x13C3B68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001368")]
	[Address(RVA = "0x13C3B8C", Offset = "0x13C3B8C", VA = "0x13C3B8C")]
	public void StartTimer()
	{
	}

	[Token(Token = "0x6001369")]
	[Address(RVA = "0x13C3DAC", Offset = "0x13C3DAC", VA = "0x13C3DAC")]
	public void ResetTimer()
	{
	}

	[Token(Token = "0x600136A")]
	[Address(RVA = "0x13C3E5C", Offset = "0x13C3E5C", VA = "0x13C3E5C")]
	public void ForceStopTimer()
	{
	}

	[Token(Token = "0x600136B")]
	[Address(RVA = "0x13C3E60", Offset = "0x13C3E60", VA = "0x13C3E60")]
	public void StopTimer()
	{
	}

	[Token(Token = "0x600136C")]
	[Address(RVA = "0x13C3EA0", Offset = "0x13C3EA0", VA = "0x13C3EA0")]
	public void SetDuration(float timerDuration)
	{
	}

	[Token(Token = "0x600136D")]
	[Address(RVA = "0x13C3EA8", Offset = "0x13C3EA8", VA = "0x13C3EA8")]
	public void ManualShow(float fillAmount = 1f)
	{
	}

	[Token(Token = "0x600136E")]
	[Address(RVA = "0x13C3EF0", Offset = "0x13C3EF0", VA = "0x13C3EF0")]
	public void ManualHide()
	{
	}

	[Token(Token = "0x600136F")]
	[Address(RVA = "0x13C3BCC", Offset = "0x13C3BCC", VA = "0x13C3BCC")]
	protected void StartTimerTween()
	{
	}

	[Token(Token = "0x6001370")]
	[Address(RVA = "0x13C3DF4", Offset = "0x13C3DF4", VA = "0x13C3DF4")]
	protected void StopTimerTween()
	{
	}

	[Token(Token = "0x6001371")]
	[Address(RVA = "0x13C3F30", Offset = "0x13C3F30", VA = "0x13C3F30")]
	public TimerBaseUI()
	{
	}
}
[Token(Token = "0x20003BE")]
public class UIDebug : MonoBehaviour
{
	[Token(Token = "0x4000F7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onUIDebug;

	[Token(Token = "0x6001374")]
	[Address(RVA = "0x13C3FB8", Offset = "0x13C3FB8", VA = "0x13C3FB8")]
	private void OnUIDebug()
	{
	}

	[Token(Token = "0x6001375")]
	[Address(RVA = "0x13C4040", Offset = "0x13C4040", VA = "0x13C4040")]
	public UIDebug()
	{
	}
}
[Token(Token = "0x20003BF")]
[ExecuteAlways]
[RequireComponent(typeof(CanvasRenderer))]
public class UIMeshRenderer : MonoBehaviour
{
	[Token(Token = "0x4000F7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material Material;

	[Token(Token = "0x4000F7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Mesh mesh;

	[Token(Token = "0x4000F7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool mask;

	[Token(Token = "0x4000F7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool showMaskGraphic;

	[Token(Token = "0x4000F7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[SerializeField]
	private bool maskable;

	[Token(Token = "0x4000F80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	[SerializeField]
	private bool preserveAspect;

	[Token(Token = "0x4000F81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CanvasRenderer canvasRenderer;

	[Token(Token = "0x4000F82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Image[] childImage;

	[Token(Token = "0x4000F83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] baseVertices;

	[Token(Token = "0x4000F84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RectTransform rect;

	[Token(Token = "0x4000F85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float cachedHeight;

	[Token(Token = "0x4000F86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float cachedWidth;

	[Token(Token = "0x6001376")]
	[Address(RVA = "0x13C4048", Offset = "0x13C4048", VA = "0x13C4048")]
	private void Start()
	{
	}

	[Token(Token = "0x6001377")]
	[Address(RVA = "0x13C404C", Offset = "0x13C404C", VA = "0x13C404C")]
	private void SetupMesh()
	{
	}

	[Token(Token = "0x6001378")]
	[Address(RVA = "0x13C4B90", Offset = "0x13C4B90", VA = "0x13C4B90")]
	private void Update()
	{
	}

	[Token(Token = "0x6001379")]
	[Address(RVA = "0x13C4C90", Offset = "0x13C4C90", VA = "0x13C4C90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600137A")]
	[Address(RVA = "0x13C4CB8", Offset = "0x13C4CB8", VA = "0x13C4CB8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600137B")]
	[Address(RVA = "0x13C4204", Offset = "0x13C4204", VA = "0x13C4204")]
	private Mesh CreateNewMesh()
	{
		return null;
	}

	[Token(Token = "0x600137C")]
	[Address(RVA = "0x13C45DC", Offset = "0x13C45DC", VA = "0x13C45DC")]
	private void SetStencilSelf()
	{
	}

	[Token(Token = "0x600137D")]
	[Address(RVA = "0x13C49E8", Offset = "0x13C49E8", VA = "0x13C49E8")]
	private void SetMaskableSelf()
	{
	}

	[Token(Token = "0x600137E")]
	[Address(RVA = "0x13C4758", Offset = "0x13C4758", VA = "0x13C4758")]
	private void SetStencilChildren(Image[] images)
	{
	}

	[Token(Token = "0x600137F")]
	[Address(RVA = "0x13C4CEC", Offset = "0x13C4CEC", VA = "0x13C4CEC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6001380")]
	[Address(RVA = "0x13C4D14", Offset = "0x13C4D14", VA = "0x13C4D14")]
	public UIMeshRenderer()
	{
	}
}
[Token(Token = "0x20003C0")]
public class VignetteController : MonoBehaviour
{
	[Token(Token = "0x4000F87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly string ActivateEvent;

	[Token(Token = "0x4000F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly string DeactivateEvent;

	[Token(Token = "0x4000F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string VignetteStrengthVariable;

	[Token(Token = "0x4000F8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlayMakerFSM apertureController;

	[Token(Token = "0x4000F8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PlayMakerFSM featheringController;

	[Token(Token = "0x6001381")]
	[Address(RVA = "0x13C4D1C", Offset = "0x13C4D1C", VA = "0x13C4D1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001382")]
	[Address(RVA = "0x13C4FB0", Offset = "0x13C4FB0", VA = "0x13C4FB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001383")]
	[Address(RVA = "0x13C5104", Offset = "0x13C5104", VA = "0x13C5104")]
	private void OnVignetteActive(bool active)
	{
	}

	[Token(Token = "0x6001384")]
	[Address(RVA = "0x13C5180", Offset = "0x13C5180", VA = "0x13C5180")]
	private void OnVignetteStrengthChange(float vignetteStrength)
	{
	}

	[Token(Token = "0x6001385")]
	[Address(RVA = "0x13C4F00", Offset = "0x13C4F00", VA = "0x13C4F00")]
	public void SetVignetteStrength(float vignetteStrength)
	{
	}

	[Token(Token = "0x6001386")]
	[Address(RVA = "0x13C5110", Offset = "0x13C5110", VA = "0x13C5110")]
	public void Activate()
	{
	}

	[Token(Token = "0x6001387")]
	[Address(RVA = "0x13C5148", Offset = "0x13C5148", VA = "0x13C5148")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x6001388")]
	[Address(RVA = "0x13C5184", Offset = "0x13C5184", VA = "0x13C5184")]
	public VignetteController()
	{
	}
}
[Token(Token = "0x20003C1")]
public class XRSimulator_ResourcesUI : MonoBehaviour
{
	[Token(Token = "0x4000F8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XRSimulator_ResourceItem[] slots;

	[Token(Token = "0x6001389")]
	[Address(RVA = "0x13C522C", Offset = "0x13C522C", VA = "0x13C522C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600138A")]
	[Address(RVA = "0x13C5434", Offset = "0x13C5434", VA = "0x13C5434")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600138B")]
	[Address(RVA = "0x13C5530", Offset = "0x13C5530", VA = "0x13C5530")]
	private void OnIventoryChanged(AmountResources resource)
	{
	}

	[Token(Token = "0x600138C")]
	[Address(RVA = "0x13C5678", Offset = "0x13C5678", VA = "0x13C5678")]
	public XRSimulator_ResourcesUI()
	{
	}
}
[Serializable]
[Token(Token = "0x20003C2")]
public class XRSimulator_ResourceItem
{
	[Token(Token = "0x4000F8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Resource resource;

	[Token(Token = "0x4000F8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI text;

	[Token(Token = "0x600138D")]
	[Address(RVA = "0x13C5680", Offset = "0x13C5680", VA = "0x13C5680")]
	public XRSimulator_ResourceItem()
	{
	}
}
[Token(Token = "0x20003C3")]
public class AlchemistSayInvoker : MonoBehaviour
{
	[Token(Token = "0x600138E")]
	[Address(RVA = "0x13C5688", Offset = "0x13C5688", VA = "0x13C5688")]
	public void Invoke()
	{
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0x13C56DC", Offset = "0x13C56DC", VA = "0x13C56DC")]
	public AlchemistSayInvoker()
	{
	}
}
[Serializable]
[Token(Token = "0x20003C4")]
public class AmountResources
{
	[Token(Token = "0x4000F8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Resource resource;

	[Token(Token = "0x4000F90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float amount;

	[Token(Token = "0x6001390")]
	[Address(RVA = "0x13C56E4", Offset = "0x13C56E4", VA = "0x13C56E4")]
	public AmountResources()
	{
	}
}
[Token(Token = "0x20003C5")]
public enum Attacks
{
	[Token(Token = "0x4000F92")]
	None = 9999,
	[Token(Token = "0x4000F93")]
	Generic = 0,
	[Token(Token = "0x4000F94")]
	Combo1 = 1,
	[Token(Token = "0x4000F95")]
	Combo2 = 2,
	[Token(Token = "0x4000F96")]
	Combo31 = 3,
	[Token(Token = "0x4000F97")]
	Combo32 = 4,
	[Token(Token = "0x4000F98")]
	Combo41 = 5,
	[Token(Token = "0x4000F99")]
	Combo42 = 6,
	[Token(Token = "0x4000F9A")]
	Stab1 = 7,
	[Token(Token = "0x4000F9B")]
	Stab2 = 8,
	[Token(Token = "0x4000F9C")]
	Stab3 = 9,
	[Token(Token = "0x4000F9D")]
	DashBack = 10,
	[Token(Token = "0x4000F9E")]
	DashFront = 11,
	[Token(Token = "0x4000F9F")]
	Dive = 12,
	[Token(Token = "0x4000FA0")]
	RustDamage = 40,
	[Token(Token = "0x4000FA1")]
	Water = 50,
	[Token(Token = "0x4000FA2")]
	Slide = 60
}
[Token(Token = "0x20003C6")]
public class AutoConnectJoint : MonoBehaviour
{
	[Token(Token = "0x6001391")]
	[Address(RVA = "0x13C56EC", Offset = "0x13C56EC", VA = "0x13C56EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001392")]
	[Address(RVA = "0x13C5788", Offset = "0x13C5788", VA = "0x13C5788")]
	public AutoConnectJoint()
	{
	}
}
[Token(Token = "0x20003C7")]
public class Bezier
{
	[Token(Token = "0x4000FA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int numPoints;

	[Token(Token = "0x1700027A")]
	public int NumberOfPoints
	{
		[Token(Token = "0x6001394")]
		[Address(RVA = "0x13C57B8", Offset = "0x13C57B8", VA = "0x13C57B8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001395")]
		[Address(RVA = "0x13C57C0", Offset = "0x13C57C0", VA = "0x13C57C0")]
		set
		{
		}
	}

	[Token(Token = "0x6001393")]
	[Address(RVA = "0x13C5790", Offset = "0x13C5790", VA = "0x13C5790")]
	public Bezier(int numberOfPoints)
	{
	}

	[Token(Token = "0x6001396")]
	[Address(RVA = "0x13C57C8", Offset = "0x13C57C8", VA = "0x13C57C8")]
	public Vector3[] GetLinearCurvePoints(Vector3 point0, Vector3 point1)
	{
		return null;
	}

	[Token(Token = "0x6001397")]
	[Address(RVA = "0x13C5914", Offset = "0x13C5914", VA = "0x13C5914")]
	public Vector3[] GetQuadraticCurvePoints(Vector3 point0, Vector3 point1, Vector3 point2)
	{
		return null;
	}

	[Token(Token = "0x6001398")]
	[Address(RVA = "0x13C5A88", Offset = "0x13C5A88", VA = "0x13C5A88")]
	public Vector3[] GetCubicCurvePoints(Vector3 point0, Vector3 point1, Vector3 point2, Vector3 point3)
	{
		return null;
	}
}
[Token(Token = "0x20003C8")]
public class BezierLine : MonoBehaviour
{
	[Token(Token = "0x4000FA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected LineRenderer castLine;

	[Token(Token = "0x4000FA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Transform[] curvePoints;

	[Token(Token = "0x4000FA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected int numberOfPointsOnCurve;

	[Token(Token = "0x4000FA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Bezier curveGenerator;

	[Token(Token = "0x6001399")]
	[Address(RVA = "0x13C5BFC", Offset = "0x13C5BFC", VA = "0x13C5BFC", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600139A")]
	[Address(RVA = "0x13C5C84", Offset = "0x13C5C84", VA = "0x13C5C84")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600139B")]
	[Address(RVA = "0x13C5D88", Offset = "0x13C5D88", VA = "0x13C5D88")]
	public BezierLine()
	{
	}
}
[Token(Token = "0x20003C9")]
public class BlinkEffect : MonoBehaviour
{
	[Token(Token = "0x20003CA")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlinkEffect <>4__this;

		[Token(Token = "0x1700027B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x13C638C", Offset = "0x13C638C", VA = "0x13C638C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0x13C63D4", Offset = "0x13C63D4", VA = "0x13C63D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x13C5F54", Offset = "0x13C5F54", VA = "0x13C5F54")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x13C5FE8", Offset = "0x13C5FE8", VA = "0x13C5FE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x13C5FEC", Offset = "0x13C5FEC", VA = "0x13C5FEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x13C6394", Offset = "0x13C6394", VA = "0x13C6394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x4000FA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color color;

	[Token(Token = "0x4000FAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] renderers;

	[Token(Token = "0x4000FAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MaterialPropertyBlock[] blocks;

	[Token(Token = "0x4000FAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected readonly string colorHash;

	[Token(Token = "0x600139C")]
	[Address(RVA = "0x13C5D98", Offset = "0x13C5D98", VA = "0x13C5D98")]
	protected void Start()
	{
	}

	[Token(Token = "0x600139D")]
	[Address(RVA = "0x13C5EAC", Offset = "0x13C5EAC", VA = "0x13C5EAC", Slot = "4")]
	[ContextMenu("Blink")]
	public virtual void Blink()
	{
	}

	[Token(Token = "0x600139E")]
	[Address(RVA = "0x13C5EE0", Offset = "0x13C5EE0", VA = "0x13C5EE0", Slot = "5")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__7))]
	protected virtual IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600139F")]
	[Address(RVA = "0x13C5F7C", Offset = "0x13C5F7C", VA = "0x13C5F7C")]
	public BlinkEffect()
	{
	}
}
[Token(Token = "0x20003CB")]
public class CameraFade : MonoBehaviour
{
	[Token(Token = "0x4000FB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float value;

	[Token(Token = "0x4000FB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static TweenerCore<float, float, FloatOptions> tweenInstance;

	[Token(Token = "0x60013A6")]
	[Address(RVA = "0x13B9380", Offset = "0x13B9380", VA = "0x13B9380")]
	public static void Fade(bool fadeIn, float duration, [Optional] Action onCompleted, float delay = 0f, bool black = true, bool resetValue = true, bool unscaled = true)
	{
	}

	[Token(Token = "0x60013A7")]
	[Address(RVA = "0x13C63DC", Offset = "0x13C63DC", VA = "0x13C63DC")]
	private static void AnimateColor()
	{
	}

	[Token(Token = "0x60013A8")]
	[Address(RVA = "0x13C6488", Offset = "0x13C6488", VA = "0x13C6488")]
	private static void AnimateScale()
	{
	}

	[Token(Token = "0x60013A9")]
	[Address(RVA = "0x13C6548", Offset = "0x13C6548", VA = "0x13C6548")]
	public CameraFade()
	{
	}
}
[Token(Token = "0x20003CD")]
public class CameraParallaxEffect : MonoBehaviour
{
	[Token(Token = "0x4000FB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Refrences")]
	public Camera parallaxCamera;

	[Token(Token = "0x4000FB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform renderMesh;

	[Token(Token = "0x4000FB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform vrCamera;

	[Token(Token = "0x4000FBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Multipliers")]
	private float positionMultiplier;

	[Token(Token = "0x4000FBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float viewMultiplier;

	[Token(Token = "0x4000FBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startFieldOfView;

	[Token(Token = "0x4000FBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 startMeshPosition;

	[Token(Token = "0x60013B1")]
	[Address(RVA = "0x13C678C", Offset = "0x13C678C", VA = "0x13C678C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013B2")]
	[Address(RVA = "0x13C67CC", Offset = "0x13C67CC", VA = "0x13C67CC")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x60013B3")]
	[Address(RVA = "0x13C6848", Offset = "0x13C6848", VA = "0x13C6848")]
	public CameraParallaxEffect()
	{
	}
}
[Token(Token = "0x20003CE")]
public class CapsuleCustomCollider : CustomCollider
{
	[Token(Token = "0x4000FBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject owner;

	[Token(Token = "0x4000FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CapsuleCollider col;

	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Space(5f)]
	public LayerMask mask;

	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public new string tag;

	[Token(Token = "0x4000FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Collider[] previousHits;

	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 direction;

	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float offset;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float radius;

	[Token(Token = "0x4000FC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 localPoint0;

	[Token(Token = "0x4000FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 localPoint1;

	[Token(Token = "0x4000FC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 point0;

	[Token(Token = "0x4000FC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 point1;

	[Token(Token = "0x4000FCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 r;

	[Token(Token = "0x1700027D")]
	public Collider[] Colliders
	{
		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x13C685C", Offset = "0x13C685C", VA = "0x13C685C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013B5")]
	[Address(RVA = "0x13C6864", Offset = "0x13C6864", VA = "0x13C6864")]
	protected void Update()
	{
	}

	[Token(Token = "0x60013B6")]
	[Address(RVA = "0x13C7068", Offset = "0x13C7068", VA = "0x13C7068")]
	public CapsuleCustomCollider()
	{
	}
}
[Token(Token = "0x20003D2")]
public class Comment : MonoBehaviour
{
	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string Notes;

	[Token(Token = "0x60013BD")]
	[Address(RVA = "0x13C72C0", Offset = "0x13C72C0", VA = "0x13C72C0")]
	public Comment()
	{
	}
}
[Token(Token = "0x20003D3")]
public class ConstrainBobble : MonoBehaviour
{
	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform bobble;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform parent;

	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Cloth cloth;

	[Token(Token = "0x4000FD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int verticleIndex;

	[Token(Token = "0x60013BE")]
	[Address(RVA = "0x13C7318", Offset = "0x13C7318", VA = "0x13C7318")]
	private void Update()
	{
	}

	[Token(Token = "0x60013BF")]
	[Address(RVA = "0x13C7384", Offset = "0x13C7384", VA = "0x13C7384")]
	public ConstrainBobble()
	{
	}
}
[Token(Token = "0x20003D4")]
public class OnUpdateUtils
{
	[Token(Token = "0x20003D5")]
	[CompilerGenerated]
	private sealed class <PerformOnUpdateRoutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action onUpdate;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action onComplete;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__2;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <deltaTime>5__3;

		[Token(Token = "0x1700027E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013CC")]
			[Address(RVA = "0x13C7990", Offset = "0x13C7990", VA = "0x13C7990", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013CE")]
			[Address(RVA = "0x13C79D8", Offset = "0x13C79D8", VA = "0x13C79D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0x13C77A4", Offset = "0x13C77A4", VA = "0x13C77A4")]
		[DebuggerHidden]
		public <PerformOnUpdateRoutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x13C784C", Offset = "0x13C784C", VA = "0x13C784C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x13C7850", Offset = "0x13C7850", VA = "0x13C7850", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x13C7998", Offset = "0x13C7998", VA = "0x13C7998", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003D6")]
	[CompilerGenerated]
	private sealed class <PerformOnUpdateRoutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> onUpdate;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action onComplete;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__2;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <deltaTime>5__3;

		[Token(Token = "0x17000280")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013D2")]
			[Address(RVA = "0x13C7B2C", Offset = "0x13C7B2C", VA = "0x13C7B2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000281")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013D4")]
			[Address(RVA = "0x13C7B74", Offset = "0x13C7B74", VA = "0x13C7B74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x13C77CC", Offset = "0x13C77CC", VA = "0x13C77CC")]
		[DebuggerHidden]
		public <PerformOnUpdateRoutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x13C79E0", Offset = "0x13C79E0", VA = "0x13C79E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x13C79E4", Offset = "0x13C79E4", VA = "0x13C79E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x13C7B34", Offset = "0x13C7B34", VA = "0x13C7B34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003D7")]
	[CompilerGenerated]
	private sealed class <PerformOnFixedUpdateRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action onUpdate;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action onComplete;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__2;

		[Token(Token = "0x17000282")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013D8")]
			[Address(RVA = "0x13C7CB4", Offset = "0x13C7CB4", VA = "0x13C7CB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000283")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013DA")]
			[Address(RVA = "0x13C7CFC", Offset = "0x13C7CFC", VA = "0x13C7CFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x13C77F4", Offset = "0x13C77F4", VA = "0x13C77F4")]
		[DebuggerHidden]
		public <PerformOnFixedUpdateRoutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x13C7B7C", Offset = "0x13C7B7C", VA = "0x13C7B7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x13C7B80", Offset = "0x13C7B80", VA = "0x13C7B80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x13C7CBC", Offset = "0x13C7CBC", VA = "0x13C7CBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003D8")]
	[CompilerGenerated]
	private sealed class <PerformOnFixedUpdateRoutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> onUpdate;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action onComplete;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <time>5__2;

		[Token(Token = "0x17000284")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013DE")]
			[Address(RVA = "0x13C7E44", Offset = "0x13C7E44", VA = "0x13C7E44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000285")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013E0")]
			[Address(RVA = "0x13C7E8C", Offset = "0x13C7E8C", VA = "0x13C7E8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x13C781C", Offset = "0x13C781C", VA = "0x13C781C")]
		[DebuggerHidden]
		public <PerformOnFixedUpdateRoutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x13C7D04", Offset = "0x13C7D04", VA = "0x13C7D04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x13C7D08", Offset = "0x13C7D08", VA = "0x13C7D08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x13C7E4C", Offset = "0x13C7E4C", VA = "0x13C7E4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60013C0")]
	[Address(RVA = "0x13C738C", Offset = "0x13C738C", VA = "0x13C738C")]
	public static void PerformOnUpdate(MonoBehaviour behaviour, float duration, Action onUpdate, [Optional] Action onComplete, bool stopAllCoroutines = true)
	{
	}

	[Token(Token = "0x60013C1")]
	[Address(RVA = "0x13C74B4", Offset = "0x13C74B4", VA = "0x13C74B4")]
	public static void PerformOnUpdate(MonoBehaviour behaviour, float duration, Action<float> onUpdate, [Optional] Action onComplete, bool stopAllCoroutines = true)
	{
	}

	[Token(Token = "0x60013C2")]
	[Address(RVA = "0x13C75DC", Offset = "0x13C75DC", VA = "0x13C75DC")]
	public static void PerformOnFixedUpdate(MonoBehaviour behaviour, float duration, Action onUpdate, [Optional] Action onComplete, bool stopAllCoroutines = true)
	{
	}

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0x13C0168", Offset = "0x13C0168", VA = "0x13C0168")]
	public static void PerformOnFixedUpdate(MonoBehaviour behaviour, float duration, Action<float> onUpdate, [Optional] Action onComplete, bool stopAllCoroutines = true)
	{
	}

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0x13C7414", Offset = "0x13C7414", VA = "0x13C7414")]
	[IteratorStateMachine(typeof(<PerformOnUpdateRoutine>d__4))]
	private static IEnumerator PerformOnUpdateRoutine(float duration, Action onUpdate, [Optional] Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0x13C753C", Offset = "0x13C753C", VA = "0x13C753C")]
	[IteratorStateMachine(typeof(<PerformOnUpdateRoutine>d__5))]
	private static IEnumerator PerformOnUpdateRoutine(float duration, Action<float> onUpdate, [Optional] Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x60013C6")]
	[Address(RVA = "0x13C7664", Offset = "0x13C7664", VA = "0x13C7664")]
	[IteratorStateMachine(typeof(<PerformOnFixedUpdateRoutine>d__6))]
	private static IEnumerator PerformOnFixedUpdateRoutine(float duration, Action onUpdate, [Optional] Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x60013C7")]
	[Address(RVA = "0x13C7704", Offset = "0x13C7704", VA = "0x13C7704")]
	[IteratorStateMachine(typeof(<PerformOnFixedUpdateRoutine>d__7))]
	private static IEnumerator PerformOnFixedUpdateRoutine(float duration, Action<float> onUpdate, [Optional] Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x60013C8")]
	[Address(RVA = "0x13C7844", Offset = "0x13C7844", VA = "0x13C7844")]
	public OnUpdateUtils()
	{
	}
}
[Serializable]
[Token(Token = "0x20003D9")]
public class ColliderEvent : UnityEvent<Collider>
{
	[Token(Token = "0x60013E1")]
	[Address(RVA = "0x13C7E94", Offset = "0x13C7E94", VA = "0x13C7E94")]
	public ColliderEvent()
	{
	}
}
[Token(Token = "0x20003DA")]
public class CustomCollider : MonoBehaviour
{
	[Token(Token = "0x4000FF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Events")]
	public ColliderEvent onTriggerEnter;

	[Token(Token = "0x4000FF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ColliderEvent onTriggerExit;

	[Token(Token = "0x60013E2")]
	[Address(RVA = "0x13C70CC", Offset = "0x13C70CC", VA = "0x13C70CC")]
	public CustomCollider()
	{
	}
}
[Token(Token = "0x20003DB")]
public class CustomObjectCulling : MonoBehaviour
{
	[Token(Token = "0x4000FF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cullingRadius;

	[Token(Token = "0x4000FF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float minDistanceToView;

	[Token(Token = "0x4000FF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject target;

	[Token(Token = "0x4000FF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 positionOffset;

	[Token(Token = "0x4000FF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CullingGroup m_CullingGroup;

	[Token(Token = "0x4000FF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isShow;

	[Token(Token = "0x4000FF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isInDistance;

	[Token(Token = "0x4000FF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool isInCamera;

	[Token(Token = "0x4000FFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform mainCamera;

	[Token(Token = "0x4000FFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform targetTransform;

	[Token(Token = "0x4000FFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float currentDistance;

	[Token(Token = "0x60013E3")]
	[Address(RVA = "0x13C7EDC", Offset = "0x13C7EDC", VA = "0x13C7EDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013E4")]
	[Address(RVA = "0x13C7FBC", Offset = "0x13C7FBC", VA = "0x13C7FBC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60013E5")]
	[Address(RVA = "0x13C8604", Offset = "0x13C8604", VA = "0x13C8604")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60013E6")]
	[Address(RVA = "0x13C871C", Offset = "0x13C871C", VA = "0x13C871C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60013E7")]
	[Address(RVA = "0x13C8730", Offset = "0x13C8730", VA = "0x13C8730")]
	private void OnCameraMove()
	{
	}

	[Token(Token = "0x60013E8")]
	[Address(RVA = "0x13C87D4", Offset = "0x13C87D4", VA = "0x13C87D4")]
	private void OnStateChanged(CullingGroupEvent sphere)
	{
	}

	[Token(Token = "0x60013E9")]
	[Address(RVA = "0x13C82FC", Offset = "0x13C82FC", VA = "0x13C82FC")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x60013EA")]
	[Address(RVA = "0x13C8594", Offset = "0x13C8594", VA = "0x13C8594")]
	private void CheckCulling()
	{
	}

	[Token(Token = "0x60013EB")]
	[Address(RVA = "0x13C85CC", Offset = "0x13C85CC", VA = "0x13C85CC")]
	private void Cull(bool visible)
	{
	}

	[Token(Token = "0x60013EC")]
	[Address(RVA = "0x13C8820", Offset = "0x13C8820", VA = "0x13C8820")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0x13C8990", Offset = "0x13C8990", VA = "0x13C8990")]
	public CustomObjectCulling()
	{
	}
}
[Token(Token = "0x20003DC")]
public class CustomRenderQueue : MonoBehaviour
{
	[Token(Token = "0x4000FFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer renderer;

	[Token(Token = "0x4000FFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int value;

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0x13C89A4", Offset = "0x13C89A4", VA = "0x13C89A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60013EF")]
	[Address(RVA = "0x13C89D4", Offset = "0x13C89D4", VA = "0x13C89D4")]
	public CustomRenderQueue()
	{
	}
}
[Token(Token = "0x20003DD")]
public class DecalsCulling : MonoBehaviour
{
	[Token(Token = "0x4000FFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EasyDecal[] Decals;

	[Token(Token = "0x4001000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject parent;

	[Token(Token = "0x4001001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool keepMaterials;

	[Token(Token = "0x4001002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool deleteOriginals;

	[Token(Token = "0x60013F0")]
	[Address(RVA = "0x13C89E4", Offset = "0x13C89E4", VA = "0x13C89E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60013F1")]
	[Address(RVA = "0x13C8A70", Offset = "0x13C8A70", VA = "0x13C8A70")]
	public static GameObject CombineToChild(IList<EasyDecal> decals, GameObject parent, bool keepMaterials, bool deleteOriginals)
	{
		return null;
	}

	[Token(Token = "0x60013F2")]
	[Address(RVA = "0x13C9600", Offset = "0x13C9600", VA = "0x13C9600")]
	[ContextMenu("Init")]
	public void Init()
	{
	}

	[Token(Token = "0x60013F3")]
	[Address(RVA = "0x13C9658", Offset = "0x13C9658", VA = "0x13C9658")]
	public DecalsCulling()
	{
	}
}
[Token(Token = "0x20003DE")]
public class DelaySetParent : MonoBehaviour
{
	[Token(Token = "0x20003DF")]
	[CompilerGenerated]
	private sealed class <SetParent>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DelaySetParent <>4__this;

		[Token(Token = "0x17000286")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013FB")]
			[Address(RVA = "0x13C980C", Offset = "0x13C980C", VA = "0x13C980C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000287")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013FD")]
			[Address(RVA = "0x13C9854", Offset = "0x13C9854", VA = "0x13C9854", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x13C9704", Offset = "0x13C9704", VA = "0x13C9704")]
		[DebuggerHidden]
		public <SetParent>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x13C9734", Offset = "0x13C9734", VA = "0x13C9734", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x13C9738", Offset = "0x13C9738", VA = "0x13C9738", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x13C9814", Offset = "0x13C9814", VA = "0x13C9814", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x4001004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform parent;

	[Token(Token = "0x60013F4")]
	[Address(RVA = "0x13C9668", Offset = "0x13C9668", VA = "0x13C9668")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60013F5")]
	[Address(RVA = "0x13C96FC", Offset = "0x13C96FC", VA = "0x13C96FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60013F6")]
	[Address(RVA = "0x13C9688", Offset = "0x13C9688", VA = "0x13C9688")]
	[IteratorStateMachine(typeof(<SetParent>d__4))]
	private IEnumerator SetParent()
	{
		return null;
	}

	[Token(Token = "0x60013F7")]
	[Address(RVA = "0x13C972C", Offset = "0x13C972C", VA = "0x13C972C")]
	public DelaySetParent()
	{
	}
}
[Token(Token = "0x20003E0")]
[ExecuteInEditMode]
public class DepthTexture : MonoBehaviour
{
	[Token(Token = "0x4001008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera cam;

	[Token(Token = "0x60013FE")]
	[Address(RVA = "0x13C985C", Offset = "0x13C985C", VA = "0x13C985C")]
	private void Start()
	{
	}

	[Token(Token = "0x60013FF")]
	[Address(RVA = "0x13C98CC", Offset = "0x13C98CC", VA = "0x13C98CC")]
	public DepthTexture()
	{
	}
}
[Token(Token = "0x20003E1")]
public class DissolveEffect : MonoBehaviour
{
	[Token(Token = "0x4001009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] renderers;

	[Token(Token = "0x400100A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int materialIndex;

	[Token(Token = "0x400100B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected MaterialPropertyBlock[] blocks;

	[Token(Token = "0x400100C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected float currentValue;

	[Token(Token = "0x400100D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected TweenerCore<float, float, FloatOptions> tween;

	[Token(Token = "0x400100E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected readonly string dissolveHash;

	[Token(Token = "0x6001400")]
	[Address(RVA = "0x13C98D4", Offset = "0x13C98D4", VA = "0x13C98D4", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001401")]
	[Address(RVA = "0x13C99E8", Offset = "0x13C99E8", VA = "0x13C99E8")]
	public void Dissolve(float startValue, float endValue, float duration)
	{
	}

	[Token(Token = "0x6001402")]
	[Address(RVA = "0x13C9BDC", Offset = "0x13C9BDC", VA = "0x13C9BDC", Slot = "5")]
	protected virtual void OnTweenUpdate()
	{
	}

	[Token(Token = "0x6001403")]
	[Address(RVA = "0x13C9C90", Offset = "0x13C9C90", VA = "0x13C9C90")]
	private void Reset()
	{
	}

	[Token(Token = "0x6001404")]
	[Address(RVA = "0x13C9CE8", Offset = "0x13C9CE8", VA = "0x13C9CE8")]
	public void Stop(float endValue)
	{
	}

	[Token(Token = "0x6001405")]
	[Address(RVA = "0x13C9DC0", Offset = "0x13C9DC0", VA = "0x13C9DC0")]
	public DissolveEffect()
	{
	}
}
[Token(Token = "0x20003E2")]
[RequireComponent(typeof(LineRenderer))]
[ExecuteInEditMode]
public class DollyTruckLineRendererVisual : MonoBehaviour
{
	[Token(Token = "0x400100F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CinemachineSmoothPath cameraPath;

	[Token(Token = "0x4001010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x6001408")]
	[Address(RVA = "0x13C9E30", Offset = "0x13C9E30", VA = "0x13C9E30")]
	private void Update()
	{
	}

	[Token(Token = "0x6001409")]
	[Address(RVA = "0x13C9FE4", Offset = "0x13C9FE4", VA = "0x13C9FE4")]
	public DollyTruckLineRendererVisual()
	{
	}
}
[Token(Token = "0x20003E3")]
public class DuplicateObject : MonoBehaviour
{
	[Token(Token = "0x4001011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x4001012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject prefab;

	[Token(Token = "0x4001013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject go;

	[Token(Token = "0x4001014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 startPosition;

	[Token(Token = "0x4001015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 startRotation;

	[Token(Token = "0x600140A")]
	[Address(RVA = "0x13C9FEC", Offset = "0x13C9FEC", VA = "0x13C9FEC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600140B")]
	[Address(RVA = "0x13C9FF0", Offset = "0x13C9FF0", VA = "0x13C9FF0")]
	public void Duplicate()
	{
	}

	[Token(Token = "0x600140C")]
	[Address(RVA = "0x13CA144", Offset = "0x13CA144", VA = "0x13CA144")]
	private void Enable()
	{
	}

	[Token(Token = "0x600140D")]
	[Address(RVA = "0x13CA1BC", Offset = "0x13CA1BC", VA = "0x13CA1BC")]
	public DuplicateObject()
	{
	}
}
[Token(Token = "0x20003E4")]
public class EditorBreak : MonoBehaviour
{
	[Token(Token = "0x600140E")]
	[Address(RVA = "0x13CA1CC", Offset = "0x13CA1CC", VA = "0x13CA1CC")]
	public void Break()
	{
	}

	[Token(Token = "0x600140F")]
	[Address(RVA = "0x13CA21C", Offset = "0x13CA21C", VA = "0x13CA21C")]
	public EditorBreak()
	{
	}
}
[Token(Token = "0x20003E5")]
public class Equipmentizer : MonoBehaviour
{
	[Token(Token = "0x4001016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkinnedMeshRenderer target;

	[Token(Token = "0x4001017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform bone;

	[Token(Token = "0x6001410")]
	[Address(RVA = "0x13CA224", Offset = "0x13CA224", VA = "0x13CA224")]
	private void Start()
	{
	}

	[Token(Token = "0x6001411")]
	[Address(RVA = "0x13CA3F8", Offset = "0x13CA3F8", VA = "0x13CA3F8")]
	private void GetAllSkinnedMeshRenderers(ref Dictionary<string, Transform> map)
	{
	}

	[Token(Token = "0x6001412")]
	[Address(RVA = "0x13CA5BC", Offset = "0x13CA5BC", VA = "0x13CA5BC")]
	public Equipmentizer()
	{
	}
}
[Token(Token = "0x20003E6")]
public class FirstPersonCam : MonoBehaviour
{
	[Token(Token = "0x4001018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speedH;

	[Token(Token = "0x4001019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speedV;

	[Token(Token = "0x400101A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float yaw;

	[Token(Token = "0x400101B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float pitch;

	[Token(Token = "0x400101C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform trans;

	[Token(Token = "0x6001413")]
	[Address(RVA = "0x11F7194", Offset = "0x11F7194", VA = "0x11F7194")]
	private void Start()
	{
	}

	[Token(Token = "0x6001414")]
	[Address(RVA = "0x11F7244", Offset = "0x11F7244", VA = "0x11F7244")]
	private void Update()
	{
	}

	[Token(Token = "0x6001415")]
	[Address(RVA = "0x11F73E4", Offset = "0x11F73E4", VA = "0x11F73E4")]
	public FirstPersonCam()
	{
	}
}
[Token(Token = "0x20003E7")]
public class FollowMoth : MonoBehaviour
{
	[Token(Token = "0x400101D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Optional offset from the target's position to move towards.")]
	public Vector3 followOffset;

	[Token(Token = "0x400101E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Speed to move towards the target.")]
	public float followSpeed;

	[Token(Token = "0x400101F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("True if this object should rotate to face the target.")]
	public bool lookAtTarget;

	[Token(Token = "0x4001020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("Speed to rotate towards the target.")]
	public float lookSpeed;

	[Token(Token = "0x4001021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float distanceToEvent;

	[Token(Token = "0x4001022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float upDuration;

	[Token(Token = "0x4001023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float upSpeed;

	[Token(Token = "0x4001024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float upSpeedDivider;

	[Token(Token = "0x4001025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Events")]
	public UnityEvent onTargetReached;

	[Token(Token = "0x4001026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Target to follow.")]
	private Transform target;

	[Token(Token = "0x4001027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isSended;

	[Token(Token = "0x4001028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float time;

	[Token(Token = "0x6001416")]
	[Address(RVA = "0x11F73F4", Offset = "0x11F73F4", VA = "0x11F73F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001417")]
	[Address(RVA = "0x11F7594", Offset = "0x11F7594", VA = "0x11F7594")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001418")]
	[Address(RVA = "0x11F760C", Offset = "0x11F760C", VA = "0x11F760C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0x11F73F8", Offset = "0x11F73F8", VA = "0x11F73F8")]
	private void SetTargetToMoth()
	{
	}

	[Token(Token = "0x600141A")]
	[Address(RVA = "0x11F7BA0", Offset = "0x11F7BA0", VA = "0x11F7BA0")]
	public FollowMoth()
	{
	}
}
[Token(Token = "0x20003E8")]
public class FollowTarget : MonoBehaviour
{
	[Token(Token = "0x4001029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400102A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform self;

	[Token(Token = "0x400102B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 offset;

	[Token(Token = "0x400102C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x400102D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool useLocal;

	[Token(Token = "0x400102E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	private bool onlyOnStart;

	[Token(Token = "0x400102F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[SerializeField]
	private bool setToTargetOnEnable;

	[Token(Token = "0x4001030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	[SerializeField]
	private bool lookAt;

	[Token(Token = "0x4001031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform lookTransform;

	[Token(Token = "0x4001032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Vector3 lookOffset;

	[Token(Token = "0x4001033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private bool resetXRotation;

	[Token(Token = "0x17000288")]
	public float Speed
	{
		[Token(Token = "0x600141E")]
		[Address(RVA = "0x11F7FE8", Offset = "0x11F7FE8", VA = "0x11F7FE8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600141F")]
		[Address(RVA = "0x11F7FF0", Offset = "0x11F7FF0", VA = "0x11F7FF0")]
		set
		{
		}
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0x11F7BB4", Offset = "0x11F7BB4", VA = "0x11F7BB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600141C")]
	[Address(RVA = "0x11F7D8C", Offset = "0x11F7D8C", VA = "0x11F7D8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600141D")]
	[Address(RVA = "0x11F7FE0", Offset = "0x11F7FE0", VA = "0x11F7FE0")]
	public void SetSpeed(float speed)
	{
	}

	[Token(Token = "0x6001420")]
	[Address(RVA = "0x11F7BC4", Offset = "0x11F7BC4", VA = "0x11F7BC4")]
	public void SetToTarget()
	{
	}

	[Token(Token = "0x6001421")]
	[Address(RVA = "0x11F7FF8", Offset = "0x11F7FF8", VA = "0x11F7FF8")]
	public void SetTarget(Transform target)
	{
	}

	[Token(Token = "0x6001422")]
	[Address(RVA = "0x11F8000", Offset = "0x11F8000", VA = "0x11F8000")]
	public void SetOffset(Vector3 offset)
	{
	}

	[Token(Token = "0x6001423")]
	[Address(RVA = "0x11F800C", Offset = "0x11F800C", VA = "0x11F800C")]
	public FollowTarget()
	{
	}
}
[Token(Token = "0x20003E9")]
public class ImageDissolveEffect : DissolveEffect
{
	[Token(Token = "0x4001034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Image[] images;

	[Token(Token = "0x6001424")]
	[Address(RVA = "0x11F8024", Offset = "0x11F8024", VA = "0x11F8024", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001425")]
	[Address(RVA = "0x11F8028", Offset = "0x11F8028", VA = "0x11F8028", Slot = "5")]
	protected override void OnTweenUpdate()
	{
	}

	[Token(Token = "0x6001426")]
	[Address(RVA = "0x11F80A4", Offset = "0x11F80A4", VA = "0x11F80A4")]
	public ImageDissolveEffect()
	{
	}
}
[Token(Token = "0x20003EA")]
public class KillTheMouse : MonoBehaviour
{
	[Token(Token = "0x4001035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lastselect;

	[Token(Token = "0x6001427")]
	[Address(RVA = "0x11F80AC", Offset = "0x11F80AC", VA = "0x11F80AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001428")]
	[Address(RVA = "0x11F81A8", Offset = "0x11F81A8", VA = "0x11F81A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001429")]
	[Address(RVA = "0x11F82BC", Offset = "0x11F82BC", VA = "0x11F82BC")]
	public void Select(GameObject gameObject)
	{
	}

	[Token(Token = "0x600142A")]
	[Address(RVA = "0x11F835C", Offset = "0x11F835C", VA = "0x11F835C")]
	public KillTheMouse()
	{
	}
}
[Token(Token = "0x20003EB")]
[ExecuteInEditMode]
public class LightmappedLOD : MonoBehaviour
{
	[Token(Token = "0x4001036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MeshRenderer currentRenderer;

	[Token(Token = "0x600142B")]
	[Address(RVA = "0x11F8364", Offset = "0x11F8364", VA = "0x11F8364")]
	private void Awake()
	{
	}

	[Token(Token = "0x600142C")]
	[Address(RVA = "0x11F83D4", Offset = "0x11F83D4", VA = "0x11F83D4")]
	private void RendererInfoTransfer()
	{
	}

	[Token(Token = "0x600142D")]
	[Address(RVA = "0x11F879C", Offset = "0x11F879C", VA = "0x11F879C")]
	[ContextMenu("Test")]
	public void Test()
	{
	}

	[Token(Token = "0x600142E")]
	[Address(RVA = "0x11F8E20", Offset = "0x11F8E20", VA = "0x11F8E20")]
	public LightmappedLOD()
	{
	}
}
[Token(Token = "0x20003EC")]
public class LimitFramerate : MonoBehaviour
{
	[Token(Token = "0x4001037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int frameRate;

	[Token(Token = "0x600142F")]
	[Address(RVA = "0x11F8E28", Offset = "0x11F8E28", VA = "0x11F8E28")]
	public LimitFramerate()
	{
	}
}
[Token(Token = "0x20003ED")]
public class LineCollider : CustomCollider
{
	[Token(Token = "0x20003EE")]
	public enum LineColliderType
	{
		[Token(Token = "0x4001049")]
		RAYCAST,
		[Token(Token = "0x400104A")]
		SPHERECAST
	}

	[Token(Token = "0x4001038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform start;

	[Token(Token = "0x4001039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 startOffset;

	[Token(Token = "0x400103A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform end;

	[Token(Token = "0x400103B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 endOffset;

	[Token(Token = "0x400103C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float rayLength;

	[Token(Token = "0x400103D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LayerMask layerMask;

	[Token(Token = "0x400103E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public LineColliderType colliderType;

	[Token(Token = "0x400103F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float radius;

	[Token(Token = "0x4001040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject owner;

	[Token(Token = "0x4001041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool onlyFirstHit;

	[Token(Token = "0x4001042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected Vector3 currentStartPosition;

	[Token(Token = "0x4001043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Vector3 currentEndPosition;

	[Token(Token = "0x4001044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected Vector3 currentDirection;

	[Token(Token = "0x4001045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected float currentRayLength;

	[Token(Token = "0x4001046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected Transform trans;

	[Token(Token = "0x4001047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected RaycastHit[] previousHits;

	[Token(Token = "0x17000289")]
	public bool HasColiders
	{
		[Token(Token = "0x6001430")]
		[Address(RVA = "0x11F8E38", Offset = "0x11F8E38", VA = "0x11F8E38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700028A")]
	public RaycastHit[] Colliders
	{
		[Token(Token = "0x6001431")]
		[Address(RVA = "0x11F8E5C", Offset = "0x11F8E5C", VA = "0x11F8E5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001432")]
	[Address(RVA = "0x11F8E64", Offset = "0x11F8E64", VA = "0x11F8E64", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001433")]
	[Address(RVA = "0x11F8E88", Offset = "0x11F8E88", VA = "0x11F8E88", Slot = "5")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x6001434")]
	[Address(RVA = "0x11F9740", Offset = "0x11F9740", VA = "0x11F9740")]
	public void Enable(Transform start, Transform end)
	{
	}

	[Token(Token = "0x6001435")]
	[Address(RVA = "0x11F9780", Offset = "0x11F9780", VA = "0x11F9780")]
	public void Enable()
	{
	}

	[Token(Token = "0x6001436")]
	[Address(RVA = "0x11F978C", Offset = "0x11F978C", VA = "0x11F978C")]
	public void Disable()
	{
	}

	[Token(Token = "0x6001437")]
	[Address(RVA = "0x11F94D8", Offset = "0x11F94D8", VA = "0x11F94D8")]
	protected RaycastHit[] GetHits()
	{
		return null;
	}

	[Token(Token = "0x6001438")]
	[Address(RVA = "0x11F97F4", Offset = "0x11F97F4", VA = "0x11F97F4")]
	private RaycastHit[] CastAll()
	{
		return null;
	}

	[Token(Token = "0x6001439")]
	[Address(RVA = "0x11F98CC", Offset = "0x11F98CC", VA = "0x11F98CC")]
	private bool Cast(out RaycastHit hit)
	{
		return default(bool);
	}

	[Token(Token = "0x600143A")]
	[Address(RVA = "0x11F99B8", Offset = "0x11F99B8", VA = "0x11F99B8")]
	public LineCollider()
	{
	}
}
[Token(Token = "0x20003F2")]
public class LODExtendedUtility
{
	[Token(Token = "0x6001440")]
	[Address(RVA = "0x11F9B94", Offset = "0x11F9B94", VA = "0x11F9B94")]
	public static LODGroup GetParentLODGroupComponent(GameObject GO)
	{
		return null;
	}

	[Token(Token = "0x6001441")]
	[Address(RVA = "0x11F9D58", Offset = "0x11F9D58", VA = "0x11F9D58")]
	public static GameObject GetParentLODGroupGameObject(GameObject GO)
	{
		return null;
	}

	[Token(Token = "0x6001442")]
	[Address(RVA = "0x11F9DEC", Offset = "0x11F9DEC", VA = "0x11F9DEC")]
	public static int GetLODid(GameObject GO)
	{
		return default(int);
	}

	[Token(Token = "0x6001443")]
	[Address(RVA = "0x11F9F64", Offset = "0x11F9F64", VA = "0x11F9F64")]
	public static int GetVisibleLOD(LODGroup lodGroup, [Optional] Camera camera)
	{
		return default(int);
	}

	[Token(Token = "0x6001444")]
	[Address(RVA = "0x11FA01C", Offset = "0x11FA01C", VA = "0x11FA01C")]
	private static float GetRelativeHeight(LODGroup lodGroup, Camera camera)
	{
		return default(float);
	}

	[Token(Token = "0x6001445")]
	[Address(RVA = "0x11FA198", Offset = "0x11FA198", VA = "0x11FA198")]
	private static float DistanceToRelativeHeight(Camera camera, float distance, float size)
	{
		return default(float);
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0x11FA138", Offset = "0x11FA138", VA = "0x11FA138")]
	public static int GetMaxLOD(LODGroup lodGroup)
	{
		return default(int);
	}

	[Token(Token = "0x6001447")]
	[Address(RVA = "0x11FA158", Offset = "0x11FA158", VA = "0x11FA158")]
	public static float GetWorldSpaceSize(LODGroup lodGroup)
	{
		return default(float);
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0x11FA214", Offset = "0x11FA214", VA = "0x11FA214")]
	private static float GetWorldSpaceScale(Transform t)
	{
		return default(float);
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0x11FA24C", Offset = "0x11FA24C", VA = "0x11FA24C")]
	public LODExtendedUtility()
	{
	}
}
[Token(Token = "0x20003F5")]
public class LODOptimizer : MonoBehaviour
{
	[Token(Token = "0x20003F6")]
	public enum LODIndex
	{
		[Token(Token = "0x4001058")]
		LOD0,
		[Token(Token = "0x4001059")]
		LOD1,
		[Token(Token = "0x400105A")]
		LOD2
	}

	[Token(Token = "0x4001055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LODIndex lodIndex;

	[Token(Token = "0x4001056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.01f, 1f)]
	public float scale;

	[Token(Token = "0x6001450")]
	[Address(RVA = "0x11FA57C", Offset = "0x11FA57C", VA = "0x11FA57C")]
	public LODOptimizer()
	{
	}
}
[Token(Token = "0x20003F7")]
public class MathParabola
{
	[Token(Token = "0x6001451")]
	[Address(RVA = "0x11FA58C", Offset = "0x11FA58C", VA = "0x11FA58C")]
	public static Vector3 Parabola(Vector3 start, Vector3 end, float height, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001452")]
	[Address(RVA = "0x11FA6D0", Offset = "0x11FA6D0", VA = "0x11FA6D0")]
	public static Vector2 Parabola(Vector2 start, Vector2 end, float height, float t)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6001453")]
	[Address(RVA = "0x11FA7F4", Offset = "0x11FA7F4", VA = "0x11FA7F4")]
	public static Vector3 CalculateLinearCurvePoint(float t, Vector3 point0, Vector3 point1)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0x11FA81C", Offset = "0x11FA81C", VA = "0x11FA81C")]
	public static Vector3 CalculateQuadraticCurvePoint(float t, Vector3 point0, Vector3 point1, Vector3 point2)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001455")]
	[Address(RVA = "0x11FA87C", Offset = "0x11FA87C", VA = "0x11FA87C")]
	public static Vector3 CalculateCubicCurvePoint(float t, Vector3 point0, Vector3 point1, Vector3 point2, Vector3 point3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0x11FA910", Offset = "0x11FA910", VA = "0x11FA910")]
	public MathParabola()
	{
	}
}
[Token(Token = "0x20003FA")]
public class Messages
{
	[Token(Token = "0x400105D")]
	public const int ResourcesAdd = 0;

	[Token(Token = "0x400105E")]
	public const int ResourcesClear = 1;

	[Token(Token = "0x400105F")]
	public const int ResourcesRemove = 2;

	[Token(Token = "0x4001060")]
	public const int CoinsAdd = 3;

	[Token(Token = "0x4001061")]
	public const int CoinsRemove = 4;

	[Token(Token = "0x4001062")]
	public const int CameraMove = 5;

	[Token(Token = "0x4001063")]
	public const int FlowchartFinished = 6;

	[Token(Token = "0x4001064")]
	public const int PlayerRespawn = 10;

	[Token(Token = "0x4001065")]
	public const int VignetteActive = 20;

	[Token(Token = "0x4001066")]
	public const int VignetteStrengthChange = 22;

	[Token(Token = "0x4001067")]
	public const int MothGrabStart = 31;

	[Token(Token = "0x4001068")]
	public const int MothGrabStop = 32;

	[Token(Token = "0x4001069")]
	public const int MothTakeDamage = 33;

	[Token(Token = "0x400106A")]
	public const int MothDie = 34;

	[Token(Token = "0x400106B")]
	public const int MothAddHealth = 35;

	[Token(Token = "0x400106C")]
	public const int MothRespawn = 36;

	[Token(Token = "0x400106D")]
	public const int AlchemistSay = 37;

	[Token(Token = "0x400106E")]
	public const int HandUITouch = 38;

	[Token(Token = "0x400106F")]
	public const int HandUIPress = 39;

	[Token(Token = "0x4001070")]
	public const int MothDash = 40;

	[Token(Token = "0x4001071")]
	public const int MothStab1 = 41;

	[Token(Token = "0x4001072")]
	public const int MothStab2 = 42;

	[Token(Token = "0x4001073")]
	public const int MothStab3 = 43;

	[Token(Token = "0x4001074")]
	public const int MothStabFinisher = 44;

	[Token(Token = "0x4001075")]
	public const int MothSlash1 = 45;

	[Token(Token = "0x4001076")]
	public const int MothSlash2 = 46;

	[Token(Token = "0x4001077")]
	public const int MothSlash3 = 47;

	[Token(Token = "0x4001078")]
	public const int MothSlash4 = 48;

	[Token(Token = "0x4001079")]
	public const int MothSlash5 = 49;

	[Token(Token = "0x400107A")]
	public const int MothSlash6 = 499;

	[Token(Token = "0x400107B")]
	public const int LevelStart = 50;

	[Token(Token = "0x400107C")]
	public const int LevelFinished = 51;

	[Token(Token = "0x400107D")]
	public const int CheckpointReached = 55;

	[Token(Token = "0x400107E")]
	public const int CheckpointReloaded = 56;

	[Token(Token = "0x400107F")]
	public const int EnemyDefeat_depracated = 101;

	[Token(Token = "0x4001080")]
	public const int EnemyDefeated = 108;

	[Token(Token = "0x4001081")]
	public const int EnemySetup = 110;

	[Token(Token = "0x4001082")]
	public const int EnemyDispose = 111;

	[Token(Token = "0x4001083")]
	public const int EnemyEngage = 114;

	[Token(Token = "0x4001084")]
	public const int EnemyDisengage = 115;

	[Token(Token = "0x4001085")]
	public const int ArenaInitialized = 120;

	[Token(Token = "0x4001086")]
	public const int ArenaStarted = 121;

	[Token(Token = "0x4001087")]
	public const int ArenaResetted = 122;

	[Token(Token = "0x4001088")]
	public const int ArenaCompleted = 123;

	[Token(Token = "0x4001089")]
	public const int ArenaWaveStarted = 130;

	[Token(Token = "0x400108A")]
	public const int ArenaWaveResetted = 131;

	[Token(Token = "0x400108B")]
	public const int ArenaWaveCompleted = 132;

	[Token(Token = "0x400108C")]
	public const int BossStageCompleted = 140;

	[Token(Token = "0x400108D")]
	public const int ResourceCollected = 201;

	[Token(Token = "0x400108E")]
	public const int MixtureMoveStopped = 202;

	[Token(Token = "0x400108F")]
	public const int MixtureMoveStarted = 203;

	[Token(Token = "0x4001090")]
	public const int MixtureCreated = 204;

	[Token(Token = "0x4001091")]
	public const int ShowInteractionIndicator = 1001;

	[Token(Token = "0x4001092")]
	public const int HideInteractionIndicator = 1002;

	[Token(Token = "0x4001093")]
	public const int ResetCameraFollowUI = 1010;

	[Token(Token = "0x4001094")]
	public const int DialogueStarted = 2001;

	[Token(Token = "0x4001095")]
	public const int DialogueCompleted = 2002;

	[Token(Token = "0x4001096")]
	public const int GestureRecognized = 3001;

	[Token(Token = "0x4001097")]
	public const int InscriptionMove = 3002;

	[Token(Token = "0x4001098")]
	public const int InscriptionMoveCompleted = 3003;

	[Token(Token = "0x4001099")]
	public const int InscriptionCompleted = 3004;

	[Token(Token = "0x400109A")]
	public const int SceneLoaded = 4001;

	[Token(Token = "0x400109B")]
	public const int AimingChanged = 4002;

	[Token(Token = "0x400109C")]
	public const int LocalizationChanged = 4003;

	[Token(Token = "0x400109D")]
	public const int SceneUnloaded = 4004;

	[Token(Token = "0x400109E")]
	public const int SnapModeChanged = 4005;

	[Token(Token = "0x400109F")]
	public const int SnapModeSpeedChanged = 4007;

	[Token(Token = "0x40010A0")]
	public const int DominantHandChanged = 4101;

	[Token(Token = "0x40010A1")]
	public const int LoadDominantHand = 4102;

	[Token(Token = "0x40010A2")]
	public const int DifficultyLevelChanged = 4200;

	[Token(Token = "0x40010A3")]
	public const int UpgradeUnlocked = 5001;

	[Token(Token = "0x40010A4")]
	public const int CapeSelected = 5002;

	[Token(Token = "0x40010A5")]
	public const int FixEnemiesOnPoolInitialized = 6900;

	[Token(Token = "0x40010A6")]
	public const int InteractionDisabled = 7100;

	[Token(Token = "0x40010A7")]
	public const int InteractionEnabled = 7101;

	[Token(Token = "0x40010A8")]
	public const int None = 20000;

	[Token(Token = "0x40010A9")]
	public const int PauseGame = 30000;

	[Token(Token = "0x40010AA")]
	public const int ResumeGame = 31000;

	[Token(Token = "0x40010AB")]
	public const int DashPauseGame = 32000;

	[Token(Token = "0x40010AC")]
	public const int DashResumeGame = 33000;

	[Token(Token = "0x40010AD")]
	public const int PlayerRecenter = 34000;

	[Token(Token = "0x600145B")]
	[Address(RVA = "0x11FA968", Offset = "0x11FA968", VA = "0x11FA968")]
	public Messages()
	{
	}
}
[Token(Token = "0x20003FB")]
public class ObjectSpawner : MonoBehaviour
{
	[Token(Token = "0x40010AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EnemyBehaviour> objects;

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool spawn;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Wave wave;

	[Token(Token = "0x600145C")]
	[Address(RVA = "0x11FA970", Offset = "0x11FA970", VA = "0x11FA970")]
	public void Spawn()
	{
	}

	[Token(Token = "0x600145D")]
	[Address(RVA = "0x11FAB4C", Offset = "0x11FAB4C", VA = "0x11FAB4C")]
	public ObjectSpawner()
	{
	}
}
[Token(Token = "0x20003FC")]
public class OptimizedDisabler : MonoBehaviour
{
	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 _savedPosition;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion _savedRotation;

	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool _enabled;

	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SerializeField]
	protected bool disableOnStart;

	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected Vector3 hidePosition;

	[Token(Token = "0x40010B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Behaviour[] behavioursToDisable;

	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected GameObject[] gameObjectsToDisable;

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent onBeforeEnable;

	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent onEnable;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent onBeforeDisable;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent onDisable;

	[Token(Token = "0x600145E")]
	[Address(RVA = "0x11FAB5C", Offset = "0x11FAB5C", VA = "0x11FAB5C")]
	public void Start()
	{
	}

	[Token(Token = "0x600145F")]
	[Address(RVA = "0x11FAB6C", Offset = "0x11FAB6C", VA = "0x11FAB6C")]
	[ContextMenu("Optimized Disable")]
	public void Disable()
	{
	}

	[Token(Token = "0x6001460")]
	[Address(RVA = "0x11FAD50", Offset = "0x11FAD50", VA = "0x11FAD50")]
	[ContextMenu("Optimized Enable")]
	public void Enable()
	{
	}

	[Token(Token = "0x6001461")]
	[Address(RVA = "0x11FAF14", Offset = "0x11FAF14", VA = "0x11FAF14")]
	public OptimizedDisabler()
	{
	}
}
[Token(Token = "0x20003FD")]
public class ParticleCollider : CustomCollider
{
	[Token(Token = "0x40010BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Colliders")]
	public Collider[] colliders;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool enemies;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool player;

	[Token(Token = "0x40010C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public LayerMask layer;

	[Token(Token = "0x40010C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Space(10f)]
	public bool debug;

	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool pushExitWhenDisabled;

	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<ParticleSystem.Particle> insideList;

	[Token(Token = "0x40010C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem ps;

	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem.TriggerModule triggerModule;

	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool wasInArea;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool useCollidersData;

	[Token(Token = "0x40010C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Collider> currentColliders;

	[Token(Token = "0x40010C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Collider> previousColliders;

	[Token(Token = "0x6001462")]
	[Address(RVA = "0x11FAF34", Offset = "0x11FAF34", VA = "0x11FAF34")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001463")]
	[Address(RVA = "0x11FB088", Offset = "0x11FB088", VA = "0x11FB088")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001464")]
	[Address(RVA = "0x11FB2D8", Offset = "0x11FB2D8", VA = "0x11FB2D8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001465")]
	[Address(RVA = "0x11FB4C0", Offset = "0x11FB4C0", VA = "0x11FB4C0")]
	private void OnParticleTrigger()
	{
	}

	[Token(Token = "0x6001466")]
	[Address(RVA = "0x11FBA68", Offset = "0x11FBA68", VA = "0x11FBA68")]
	public ParticleCollider()
	{
	}
}
[Token(Token = "0x20003FE")]
[RequireComponent(typeof(ParticleSystem))]
public class ParticleSystemActions : MonoBehaviour
{
	[Token(Token = "0x40010CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Events")]
	[SerializeField]
	protected UnityEvent _particleWasBorn;

	[Token(Token = "0x40010CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected UnityEvent _particleDead;

	[Token(Token = "0x40010CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ParticleSystem _particleSystem;

	[Token(Token = "0x40010CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected int _uniqueID;

	[Token(Token = "0x40010CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected List<float> _currentParticlesIds;

	[Token(Token = "0x40010CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected List<Vector4> customData;

	[Token(Token = "0x6001467")]
	[Address(RVA = "0x11FBA78", Offset = "0x11FBA78", VA = "0x11FBA78", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001468")]
	[Address(RVA = "0x11FBB70", Offset = "0x11FBB70", VA = "0x11FBB70", Slot = "5")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6001469")]
	[Address(RVA = "0x11FBB7C", Offset = "0x11FBB7C", VA = "0x11FBB7C", Slot = "6")]
	protected virtual void UpdateLifeEvents()
	{
	}

	[Token(Token = "0x600146A")]
	[Address(RVA = "0x11FBF00", Offset = "0x11FBF00", VA = "0x11FBF00")]
	public ParticleSystemActions()
	{
	}
}
[Token(Token = "0x2000400")]
public class ProjectileReflectionEmitterUnityNative : MonoBehaviour
{
	[Token(Token = "0x40010D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxReflectionCount;

	[Token(Token = "0x40010D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxStepDistance;

	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask layerMask;

	[Token(Token = "0x40010D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color c;

	[Token(Token = "0x600146E")]
	[Address(RVA = "0x11FC0B8", Offset = "0x11FC0B8", VA = "0x11FC0B8")]
	private void DrawPredictedReflectionPattern(Vector3 position, Vector3 direction, int reflectionsRemaining)
	{
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0x11FC314", Offset = "0x11FC314", VA = "0x11FC314")]
	public ProjectileReflectionEmitterUnityNative()
	{
	}
}
[Token(Token = "0x2000401")]
public class RandomCycleOffset : MonoBehaviour
{
	[Token(Token = "0x40010D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x6001470")]
	[Address(RVA = "0x11FC334", Offset = "0x11FC334", VA = "0x11FC334")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0x11FC44C", Offset = "0x11FC44C", VA = "0x11FC44C")]
	public RandomCycleOffset()
	{
	}
}
[Token(Token = "0x2000402")]
public class ReadOnlyAttribute : PropertyAttribute
{
	[Token(Token = "0x6001472")]
	[Address(RVA = "0x11FC454", Offset = "0x11FC454", VA = "0x11FC454")]
	public ReadOnlyAttribute()
	{
	}
}
[Token(Token = "0x2000403")]
public class RenderStatsScript : MonoBehaviour
{
	[Token(Token = "0x40010D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text setPassTxt;

	[Token(Token = "0x40010D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text drawCallsTxt;

	[Token(Token = "0x40010D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text verticlesTxt;

	[Token(Token = "0x40010DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text trianglesTxt;

	[Token(Token = "0x40010DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ProfilerRecorder setPassCallsRecorder;

	[Token(Token = "0x40010DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ProfilerRecorder drawCallsRecorder;

	[Token(Token = "0x40010DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ProfilerRecorder verticesRecorder;

	[Token(Token = "0x40010DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ProfilerRecorder trianglesRecorder;

	[Token(Token = "0x6001473")]
	[Address(RVA = "0x11FC45C", Offset = "0x11FC45C", VA = "0x11FC45C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001474")]
	[Address(RVA = "0x11FC578", Offset = "0x11FC578", VA = "0x11FC578")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001475")]
	[Address(RVA = "0x11FC5A8", Offset = "0x11FC5A8", VA = "0x11FC5A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001476")]
	[Address(RVA = "0x11FC804", Offset = "0x11FC804", VA = "0x11FC804")]
	public RenderStatsScript()
	{
	}
}
[Token(Token = "0x2000404")]
public class RotateToPlayer : MonoBehaviour
{
	[Token(Token = "0x40010DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform target;

	[Token(Token = "0x40010E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform self;

	[Token(Token = "0x6001477")]
	[Address(RVA = "0x11FC80C", Offset = "0x11FC80C", VA = "0x11FC80C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001478")]
	[Address(RVA = "0x11FC8C0", Offset = "0x11FC8C0", VA = "0x11FC8C0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001479")]
	[Address(RVA = "0x11FC8E4", Offset = "0x11FC8E4", VA = "0x11FC8E4")]
	public RotateToPlayer()
	{
	}
}
[Token(Token = "0x2000405")]
public class SendMessageSMB : StateMachineBehaviour
{
	[Token(Token = "0x40010E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string enterMessage;

	[Token(Token = "0x40010E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string enterMessageValue;

	[Token(Token = "0x40010E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string updateMessage;

	[Token(Token = "0x40010E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string updateMessageValue;

	[Token(Token = "0x40010E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string exitMessage;

	[Token(Token = "0x40010E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string exitMessageValue;

	[Token(Token = "0x600147A")]
	[Address(RVA = "0x11FC8EC", Offset = "0x11FC8EC", VA = "0x11FC8EC", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600147B")]
	[Address(RVA = "0x11FC97C", Offset = "0x11FC97C", VA = "0x11FC97C", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x600147C")]
	[Address(RVA = "0x11FC9FC", Offset = "0x11FC9FC", VA = "0x11FC9FC", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600147D")]
	[Address(RVA = "0x11FCA8C", Offset = "0x11FCA8C", VA = "0x11FCA8C", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600147E")]
	[Address(RVA = "0x11FCB1C", Offset = "0x11FCB1C", VA = "0x11FCB1C", Slot = "10")]
	public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x600147F")]
	[Address(RVA = "0x11FCB9C", Offset = "0x11FCB9C", VA = "0x11FCB9C")]
	public SendMessageSMB()
	{
	}
}
[Token(Token = "0x2000406")]
public class SetMothAnimatorTimelineBinding : MonoBehaviour
{
	[Token(Token = "0x40010E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector playableDirector;

	[Token(Token = "0x40010E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string trackName;

	[Token(Token = "0x6001480")]
	[Address(RVA = "0x11FCBA4", Offset = "0x11FCBA4", VA = "0x11FCBA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001481")]
	[Address(RVA = "0x11FCD1C", Offset = "0x11FCD1C", VA = "0x11FCD1C")]
	public SetMothAnimatorTimelineBinding()
	{
	}
}
[Token(Token = "0x2000407")]
public class SetScytheAnimatorTimelineBinding : MonoBehaviour
{
	[Token(Token = "0x40010E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector playableDirector;

	[Token(Token = "0x40010EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string trackName;

	[Token(Token = "0x6001482")]
	[Address(RVA = "0x11FCD24", Offset = "0x11FCD24", VA = "0x11FCD24")]
	private void Start()
	{
	}

	[Token(Token = "0x6001483")]
	[Address(RVA = "0x11FCE24", Offset = "0x11FCE24", VA = "0x11FCE24")]
	public SetScytheAnimatorTimelineBinding()
	{
	}
}
[Token(Token = "0x2000408")]
public class SetTextureOffset : MonoBehaviour
{
	[Token(Token = "0x40010EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scrollSpeedX;

	[Token(Token = "0x40010EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float scrollSpeedY;

	[Token(Token = "0x40010ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int materialIndex;

	[Token(Token = "0x40010EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer rend;

	[Token(Token = "0x40010EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float offsetX;

	[Token(Token = "0x40010F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float offsetY;

	[Token(Token = "0x6001484")]
	[Address(RVA = "0x11FCE2C", Offset = "0x11FCE2C", VA = "0x11FCE2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001485")]
	[Address(RVA = "0x11FCE84", Offset = "0x11FCE84", VA = "0x11FCE84")]
	private void Update()
	{
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0x11FCF94", Offset = "0x11FCF94", VA = "0x11FCF94")]
	public SetTextureOffset()
	{
	}
}
[Token(Token = "0x2000409")]
public class SetTimelineBinding : MonoBehaviour
{
	[Token(Token = "0x40010F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector playableDirector;

	[Token(Token = "0x40010F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string trackName;

	[Token(Token = "0x6001487")]
	[Address(RVA = "0x11FCFA4", Offset = "0x11FCFA4", VA = "0x11FCFA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001488")]
	[Address(RVA = "0x11FD04C", Offset = "0x11FD04C", VA = "0x11FD04C")]
	public SetTimelineBinding()
	{
	}
}
[Token(Token = "0x200040A")]
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x40010F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x40010F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool unparent;

	[Token(Token = "0x40010F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T _instance;

	[Token(Token = "0x40010F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly object _instanceLock;

	[Token(Token = "0x40010F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _quitting;

	[Token(Token = "0x1700028B")]
	public static T instance
	{
		[Token(Token = "0x6001489")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600148A")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600148B")]
	protected virtual bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x600148C")]
	protected virtual void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600148D")]
	public Singleton()
	{
	}
}
[Token(Token = "0x200040B")]
public class SkyboxAnimation : MonoBehaviour
{
	[Token(Token = "0x40010F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x600148F")]
	[Address(RVA = "0x11FD054", Offset = "0x11FD054", VA = "0x11FD054")]
	private void Update()
	{
	}

	[Token(Token = "0x6001490")]
	[Address(RVA = "0x11FD0C4", Offset = "0x11FD0C4", VA = "0x11FD0C4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001491")]
	[Address(RVA = "0x11FD114", Offset = "0x11FD114", VA = "0x11FD114")]
	public SkyboxAnimation()
	{
	}
}
[Token(Token = "0x200040C")]
public class SnapToGround : MonoBehaviour
{
	[Token(Token = "0x40010F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool snapOnEnable;

	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool snapOnUpdate;

	[Token(Token = "0x40010FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform startPosition;

	[Token(Token = "0x40010FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int environmentLayer;

	[Token(Token = "0x40010FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform trans;

	[Token(Token = "0x6001492")]
	[Address(RVA = "0x11FD128", Offset = "0x11FD128", VA = "0x11FD128")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001493")]
	[Address(RVA = "0x11FD198", Offset = "0x11FD198", VA = "0x11FD198")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001494")]
	[Address(RVA = "0x11FD378", Offset = "0x11FD378", VA = "0x11FD378")]
	private void Update()
	{
	}

	[Token(Token = "0x6001495")]
	[Address(RVA = "0x11FD1A8", Offset = "0x11FD1A8", VA = "0x11FD1A8")]
	public void Snap()
	{
	}

	[Token(Token = "0x6001496")]
	[Address(RVA = "0x11FD388", Offset = "0x11FD388", VA = "0x11FD388")]
	public SnapToGround()
	{
	}
}
[Token(Token = "0x200040D")]
public class SnapToNavmesh : MonoBehaviour
{
	[Token(Token = "0x6001497")]
	[Address(RVA = "0x11FD3A0", Offset = "0x11FD3A0", VA = "0x11FD3A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001498")]
	[Address(RVA = "0x11FD42C", Offset = "0x11FD42C", VA = "0x11FD42C")]
	public SnapToNavmesh()
	{
	}
}
[Token(Token = "0x200040E")]
internal static class SortingHelpers
{
	[Token(Token = "0x6001499")]
	public static void Sort<T>(IList<T> hits, IComparer<T> comparer) where T : struct
	{
	}
}
[Token(Token = "0x200040F")]
public class SortingOrder : MonoBehaviour
{
	[Token(Token = "0x40010FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int MyOrder;

	[Token(Token = "0x40010FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string MyName;

	[Token(Token = "0x600149A")]
	[Address(RVA = "0x11FD434", Offset = "0x11FD434", VA = "0x11FD434")]
	public SortingOrder()
	{
	}
}
[Token(Token = "0x2000410")]
public class SRPBatcherProfiler : MonoBehaviour
{
	[Token(Token = "0x2000411")]
	internal class RecorderEntry
	{
		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string oldName;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int callCount;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float accTime;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Recorder recorder;

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x11FE55C", Offset = "0x11FE55C", VA = "0x11FE55C")]
		public RecorderEntry()
		{
		}
	}

	[Token(Token = "0x2000412")]
	private enum SRPBMarkers
	{
		[Token(Token = "0x400110E")]
		kStdRenderDraw,
		[Token(Token = "0x400110F")]
		kStdShadowDraw,
		[Token(Token = "0x4001110")]
		kSRPBRenderDraw,
		[Token(Token = "0x4001111")]
		kSRPBShadowDraw,
		[Token(Token = "0x4001112")]
		kRenderThreadIdle,
		[Token(Token = "0x4001113")]
		kStdRenderApplyShader,
		[Token(Token = "0x4001114")]
		kStdShadowApplyShader,
		[Token(Token = "0x4001115")]
		kSRPBRenderApplyShader,
		[Token(Token = "0x4001116")]
		kSRPBShadowApplyShader,
		[Token(Token = "0x4001117")]
		kPrepareBatchRendererGroupNodes
	}

	[Token(Token = "0x4001100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_Enable;

	[Token(Token = "0x4001101")]
	private const float kAverageStatDuration = 1f;

	[Token(Token = "0x4001102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int m_frameCount;

	[Token(Token = "0x4001103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_AccDeltaTime;

	[Token(Token = "0x4001104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_statsLabel;

	[Token(Token = "0x4001105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GUIStyle m_style;

	[Token(Token = "0x4001106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_oldBatcherEnable;

	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RecorderEntry[] recordersList;

	[Token(Token = "0x600149B")]
	[Address(RVA = "0x11FD43C", Offset = "0x11FD43C", VA = "0x11FD43C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600149C")]
	[Address(RVA = "0x11FD670", Offset = "0x11FD670", VA = "0x11FD670")]
	private void RazCounters()
	{
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0x11FD61C", Offset = "0x11FD61C", VA = "0x11FD61C")]
	private void ResetStats()
	{
	}

	[Token(Token = "0x600149E")]
	[Address(RVA = "0x11FD6C4", Offset = "0x11FD6C4", VA = "0x11FD6C4")]
	private void ToggleStats()
	{
	}

	[Token(Token = "0x600149F")]
	[Address(RVA = "0x11FD6D4", Offset = "0x11FD6D4", VA = "0x11FD6D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60014A0")]
	[Address(RVA = "0x11FDE3C", Offset = "0x11FDE3C", VA = "0x11FDE3C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0x11FE030", Offset = "0x11FE030", VA = "0x11FE030")]
	public SRPBatcherProfiler()
	{
	}
}
[Token(Token = "0x2000413")]
public class TimelineTool
{
	[Token(Token = "0x4001118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, PlayableBinding> bindingDict;

	[Token(Token = "0x4001119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<TimelineClip, string> clipNameDict;

	[Token(Token = "0x400111A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlayableDirector playableDirector;

	[Token(Token = "0x1700028C")]
	public bool IsModified
	{
		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x11FE564", Offset = "0x11FE564", VA = "0x11FE564")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60014A4")]
	[Address(RVA = "0x11FCCA4", Offset = "0x11FCCA4", VA = "0x11FCCA4")]
	public TimelineTool(PlayableDirector playableDirector)
	{
	}

	[Token(Token = "0x60014A5")]
	[Address(RVA = "0x11FE5C0", Offset = "0x11FE5C0", VA = "0x11FE5C0")]
	public void ConstructBindingDict()
	{
	}

	[Token(Token = "0x60014A6")]
	[Address(RVA = "0x11FE9C8", Offset = "0x11FE9C8", VA = "0x11FE9C8")]
	public void ConstructClipNameDict()
	{
	}

	[Token(Token = "0x60014A7")]
	[Address(RVA = "0x11FEC24", Offset = "0x11FEC24", VA = "0x11FEC24")]
	public void Apply(bool playAfterApplied = true)
	{
	}

	[Token(Token = "0x60014A8")]
	[Address(RVA = "0x11FEC80", Offset = "0x11FEC80", VA = "0x11FEC80")]
	private void ApplyModifiedClipsName()
	{
	}

	[Token(Token = "0x60014A9")]
	[Address(RVA = "0x11FEDEC", Offset = "0x11FEDEC", VA = "0x11FEDEC")]
	private void ModifyClipName(TimelineClip modifiedClip, string clipName)
	{
	}

	[Token(Token = "0x60014AA")]
	[Address(RVA = "0x11FEB34", Offset = "0x11FEB34", VA = "0x11FEB34")]
	public PlayableBinding[] GetAllTracks()
	{
		return null;
	}

	[Token(Token = "0x60014AB")]
	[Address(RVA = "0x11FEE54", Offset = "0x11FEE54", VA = "0x11FEE54")]
	public PlayableBinding GetTrack(string trackName)
	{
		return default(PlayableBinding);
	}

	[Token(Token = "0x60014AC")]
	public TrackType GetBinding<TrackType>(string trackName) where TrackType : UnityEngine.Object
	{
		return null;
	}

	[Token(Token = "0x60014AD")]
	[Address(RVA = "0x11FEFA8", Offset = "0x11FEFA8", VA = "0x11FEFA8")]
	public UnityEngine.Object GetKey(string trackName)
	{
		return null;
	}

	[Token(Token = "0x60014AE")]
	[Address(RVA = "0x11FCCE4", Offset = "0x11FCCE4", VA = "0x11FCCE4")]
	public void SetBinding(string trackName, UnityEngine.Object binding)
	{
	}

	[Token(Token = "0x60014AF")]
	[Address(RVA = "0x11FF000", Offset = "0x11FF000", VA = "0x11FF000")]
	public TimelineClip GetClip(string trackName, string clipName)
	{
		return null;
	}

	[Token(Token = "0x60014B0")]
	[Address(RVA = "0x11FF108", Offset = "0x11FF108", VA = "0x11FF108")]
	public TimelineClip[] GetClips(string trackName, string clipName)
	{
		return null;
	}

	[Token(Token = "0x60014B1")]
	[Address(RVA = "0x11FEBA0", Offset = "0x11FEBA0", VA = "0x11FEBA0")]
	public TimelineClip[] GetAllClips(string trackName)
	{
		return null;
	}

	[Token(Token = "0x60014B2")]
	public ClipAssetType GetClipAsset<ClipAssetType>(string trackName, string clipName) where ClipAssetType : UnityEngine.Object
	{
		return null;
	}

	[Token(Token = "0x60014B3")]
	public ClipAssetType[] GetClipsAsset<ClipAssetType>(string trackName, string clipName) where ClipAssetType : UnityEngine.Object
	{
		return null;
	}

	[Token(Token = "0x60014B4")]
	[Address(RVA = "0x11FF248", Offset = "0x11FF248", VA = "0x11FF248")]
	public void SetCinemachineClip(string trackName, string clipName, CinemachineVirtualCameraBase virtualCamera)
	{
	}

	[Token(Token = "0x60014B5")]
	[Address(RVA = "0x11FF2C8", Offset = "0x11FF2C8", VA = "0x11FF2C8")]
	public void SetCinemachineClips(string trackName, string clipName, CinemachineVirtualCameraBase virtualCamera)
	{
	}

	[Token(Token = "0x60014B6")]
	[Address(RVA = "0x11FF388", Offset = "0x11FF388", VA = "0x11FF388")]
	public void SetAnimationClip(string trackName, string clipName, AnimationClip animationClip)
	{
	}

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0x11FF408", Offset = "0x11FF408", VA = "0x11FF408")]
	public void SetAnimationClips(string trackName, string clipName, AnimationClip animationClip)
	{
	}
}
[Token(Token = "0x2000415")]
public class Timer : MonoBehaviour
{
	[Token(Token = "0x400111E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnFinished;

	[Token(Token = "0x400111F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnStart;

	[Token(Token = "0x4001120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnStop;

	[Token(Token = "0x4001121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnReset;

	[Token(Token = "0x4001122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Action OnFinishedAction;

	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Action OnStartAction;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Action OnStopAction;

	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Action OnResetAction;

	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float timer;

	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float startRealTime;

	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isRunning;

	[Token(Token = "0x1700028D")]
	public float TimerDuration
	{
		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x11FF4EC", Offset = "0x11FF4EC", VA = "0x11FF4EC")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x11FF4F4", Offset = "0x11FF4F4", VA = "0x11FF4F4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700028E")]
	public bool RealTime
	{
		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x11FF4FC", Offset = "0x11FF4FC", VA = "0x11FF4FC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x11FF504", Offset = "0x11FF504", VA = "0x11FF504")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60014BE")]
	[Address(RVA = "0x11FF510", Offset = "0x11FF510", VA = "0x11FF510")]
	private void Update()
	{
	}

	[Token(Token = "0x60014BF")]
	[Address(RVA = "0x11FF5EC", Offset = "0x11FF5EC", VA = "0x11FF5EC")]
	public void StartTimer()
	{
	}

	[Token(Token = "0x60014C0")]
	[Address(RVA = "0x11FF644", Offset = "0x11FF644", VA = "0x11FF644")]
	public void ResetTimer()
	{
	}

	[Token(Token = "0x60014C1")]
	[Address(RVA = "0x11FF5A4", Offset = "0x11FF5A4", VA = "0x11FF5A4")]
	public void StopTimer()
	{
	}

	[Token(Token = "0x60014C2")]
	[Address(RVA = "0x11FF688", Offset = "0x11FF688", VA = "0x11FF688")]
	public Timer()
	{
	}
}
[Token(Token = "0x2000416")]
public static class TransformUtils
{
	[Token(Token = "0x60014C3")]
	[Address(RVA = "0x11FF698", Offset = "0x11FF698", VA = "0x11FF698")]
	public static Vector3 GetFreePosition(Vector3 position, float radius, LayerMask obstacles)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000417")]
public class TweenMaterialBlockFloat : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000418")]
	public struct TweenStep
	{
		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float value;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float duration;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AnimationCurve curve;

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x12001BC", Offset = "0x12001BC", VA = "0x12001BC")]
		public TweenStep(float value, float duration)
		{
		}
	}

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int _currentStep;

	[Token(Token = "0x400112A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer targetRenderer;

	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string propertytName;

	[Token(Token = "0x400112C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<TweenStep> floatValueSteps;

	[Token(Token = "0x400112D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MaterialPropertyBlock materialBlock;

	[Token(Token = "0x60014C4")]
	[Address(RVA = "0x11FF878", Offset = "0x11FF878", VA = "0x11FF878")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014C5")]
	[Address(RVA = "0x11FF8E0", Offset = "0x11FF8E0", VA = "0x11FF8E0")]
	private void SetMaterialFloat(float value)
	{
	}

	[Token(Token = "0x60014C6")]
	[Address(RVA = "0x11FFA28", Offset = "0x11FFA28", VA = "0x11FFA28")]
	[ContextMenu("TweenToNextStep")]
	public void TweenToNextStep()
	{
	}

	[Token(Token = "0x60014C7")]
	[Address(RVA = "0x11FFB84", Offset = "0x11FFB84", VA = "0x11FFB84")]
	[ContextMenu("TweenToPreviousStep")]
	public void TweenToPreviousStep()
	{
	}

	[Token(Token = "0x60014C8")]
	[Address(RVA = "0x11FFCDC", Offset = "0x11FFCDC", VA = "0x11FFCDC")]
	[ContextMenu("TweenToFirstStep")]
	public void TweenToFirstStep()
	{
	}

	[Token(Token = "0x60014C9")]
	[Address(RVA = "0x11FFE68", Offset = "0x11FFE68", VA = "0x11FFE68")]
	public void SetStep(int stepNumber)
	{
	}

	[Token(Token = "0x60014CA")]
	[Address(RVA = "0x11FFFD8", Offset = "0x11FFFD8", VA = "0x11FFFD8")]
	public TweenMaterialBlockFloat()
	{
	}
}
[Token(Token = "0x200041A")]
public static class Util
{
	[Token(Token = "0x60014D3")]
	[Address(RVA = "0x1200610", Offset = "0x1200610", VA = "0x1200610")]
	public static Vector3 SetX(this Vector3 vec, float x)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60014D4")]
	[Address(RVA = "0x1200618", Offset = "0x1200618", VA = "0x1200618")]
	public static Vector3 SetY(this Vector3 vec, float y)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60014D5")]
	[Address(RVA = "0x1200620", Offset = "0x1200620", VA = "0x1200620")]
	public static Vector3 SetZ(this Vector3 vec, float z)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60014D6")]
	[Address(RVA = "0x1200628", Offset = "0x1200628", VA = "0x1200628")]
	public static Vector3 Multiply(this Vector3 vec, float x, float y, float z)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60014D7")]
	[Address(RVA = "0x1200638", Offset = "0x1200638", VA = "0x1200638")]
	public static Vector3 Multiply(this Vector3 vec, Vector3 other)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60014D8")]
	[Address(RVA = "0x1200648", Offset = "0x1200648", VA = "0x1200648")]
	public static Vector3 Clamp(this Vector3 vec, Vector3 min, Vector3 max)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60014D9")]
	[Address(RVA = "0x1200684", Offset = "0x1200684", VA = "0x1200684")]
	public static float Remap(this float f, float fromMin, float fromMax, float toMin, float toMax)
	{
		return default(float);
	}
}
[Token(Token = "0x200041B")]
public class Barrier : MonoBehaviour
{
	[Token(Token = "0x4001133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4001134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly int showHash;

	[Token(Token = "0x60014DA")]
	[Address(RVA = "0x12006A0", Offset = "0x12006A0", VA = "0x12006A0")]
	public void Show()
	{
	}

	[Token(Token = "0x60014DB")]
	[Address(RVA = "0x12006C8", Offset = "0x12006C8", VA = "0x12006C8")]
	public void Hide()
	{
	}

	[Token(Token = "0x60014DC")]
	[Address(RVA = "0x12006F0", Offset = "0x12006F0", VA = "0x12006F0")]
	public Barrier()
	{
	}
}
[Token(Token = "0x200041C")]
[Obsolete("Deprecated! Use ArenaController and IArenaWave")]
public class Wave : MonoBehaviour, IPlayerRespawnListener
{
	[Token(Token = "0x200041D")]
	[CompilerGenerated]
	private sealed class <WaveCoroutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Wave <>4__this;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaveData <currentWave>5__2;

		[Token(Token = "0x1700028F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014EF")]
			[Address(RVA = "0x1201760", Offset = "0x1201760", VA = "0x1201760", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014F1")]
			[Address(RVA = "0x12017A8", Offset = "0x12017A8", VA = "0x12017A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x1200DA0", Offset = "0x1200DA0", VA = "0x1200DA0")]
		[DebuggerHidden]
		public <WaveCoroutine>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x12013C8", Offset = "0x12013C8", VA = "0x12013C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x12013CC", Offset = "0x12013CC", VA = "0x12013CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x1201768", Offset = "0x1201768", VA = "0x1201768", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200041E")]
	[CompilerGenerated]
	private sealed class <EnemySpawnRoutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Wave <>4__this;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index;

		[Token(Token = "0x17000291")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x12018C8", Offset = "0x12018C8", VA = "0x12018C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000292")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014F7")]
			[Address(RVA = "0x1201910", Offset = "0x1201910", VA = "0x1201910", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x1200E4C", Offset = "0x1200E4C", VA = "0x1200E4C")]
		[DebuggerHidden]
		public <EnemySpawnRoutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x12017B0", Offset = "0x12017B0", VA = "0x12017B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x12017B4", Offset = "0x12017B4", VA = "0x12017B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0x12018D0", Offset = "0x12018D0", VA = "0x12018D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WaveData[] waves;

	[Token(Token = "0x4001136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PoolingEffect spawnEffect;

	[Token(Token = "0x4001137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 spawnEffectOffset;

	[Token(Token = "0x4001138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Events")]
	public UnityEvent onWaveStarted;

	[Token(Token = "0x4001139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onWaveCompleted;

	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject additionalCollidersHolder;

	[Token(Token = "0x400113B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Barrier[] barriers;

	[Token(Token = "0x400113C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int _currentWaveCounter;

	[Token(Token = "0x400113D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isRunning;

	[Token(Token = "0x400113E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<EnemyBehaviourBase> currentWaveEnemies;

	[Token(Token = "0x400113F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected ObjectPooler<PoolingEffect> effectsPool;

	[Token(Token = "0x60014DD")]
	[Address(RVA = "0x1200748", Offset = "0x1200748", VA = "0x1200748")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014DE")]
	[Address(RVA = "0x1200830", Offset = "0x1200830", VA = "0x1200830")]
	[ContextMenu("Start Wave")]
	public void StartWave()
	{
	}

	[Token(Token = "0x60014DF")]
	[Address(RVA = "0x1200A14", Offset = "0x1200A14", VA = "0x1200A14")]
	public void EndWave()
	{
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0x1200B68", Offset = "0x1200B68", VA = "0x1200B68")]
	public void ResetArena()
	{
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0x1200D10", Offset = "0x1200D10", VA = "0x1200D10", Slot = "4")]
	public void OnPlayerRespawn()
	{
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0x12009A0", Offset = "0x12009A0", VA = "0x12009A0")]
	[IteratorStateMachine(typeof(<WaveCoroutine>d__16))]
	private IEnumerator WaveCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60014E3")]
	[Address(RVA = "0x1200DC8", Offset = "0x1200DC8", VA = "0x1200DC8")]
	[IteratorStateMachine(typeof(<EnemySpawnRoutine>d__17))]
	private IEnumerator EnemySpawnRoutine(int index)
	{
		return null;
	}

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0x1200E74", Offset = "0x1200E74", VA = "0x1200E74")]
	private void PrepareWave(WaveData wave)
	{
	}

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0x120110C", Offset = "0x120110C", VA = "0x120110C")]
	public void AddNewEnemy(EnemyBehaviourBase clone)
	{
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0x1200C04", Offset = "0x1200C04", VA = "0x1200C04")]
	private void ClearWave()
	{
	}

	[Token(Token = "0x60014E7")]
	[Address(RVA = "0x12011BC", Offset = "0x12011BC", VA = "0x12011BC")]
	private bool IsWaveCompleted()
	{
		return default(bool);
	}

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0x1200944", Offset = "0x1200944", VA = "0x1200944")]
	private void ShowBarriers()
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0x1200B0C", Offset = "0x1200B0C", VA = "0x1200B0C")]
	private void HideBarriers()
	{
	}

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0x12012BC", Offset = "0x12012BC", VA = "0x12012BC")]
	private void LoadEffect(Vector3 position)
	{
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0x12013B0", Offset = "0x12013B0", VA = "0x12013B0")]
	public Wave()
	{
	}
}
[Serializable]
[Token(Token = "0x200041F")]
public struct WaveData
{
	[Token(Token = "0x4001148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public EnemyBehaviourBase[] enemies;

	[Token(Token = "0x4001149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float startDelay;

	[Token(Token = "0x400114A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float endDelay;

	[Token(Token = "0x400114B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent onWaveStarted;

	[Token(Token = "0x400114C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onWaveCompleted;
}
[Token(Token = "0x2000420")]
public class Arrow : RocketWeapon
{
	[Token(Token = "0x60014F8")]
	[Address(RVA = "0x1201918", Offset = "0x1201918", VA = "0x1201918")]
	public Arrow()
	{
	}
}
[Token(Token = "0x2000421")]
public class BombWeapon : RocketWeapon
{
	[Token(Token = "0x2000422")]
	public enum ShotType
	{
		[Token(Token = "0x400114F")]
		HIGHEST_SHOT,
		[Token(Token = "0x4001150")]
		LOWEST_SPEED,
		[Token(Token = "0x4001151")]
		MOST_DIRECT
	}

	[Token(Token = "0x400114D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public ShotType shotType;

	[Token(Token = "0x60014F9")]
	[Address(RVA = "0x1201988", Offset = "0x1201988", VA = "0x1201988", Slot = "15")]
	protected override Vector3 GetVelocity(Vector3 target)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60014FA")]
	[Address(RVA = "0x1201C60", Offset = "0x1201C60", VA = "0x1201C60")]
	public BombWeapon()
	{
	}
}
[Token(Token = "0x2000423")]
public class BouncingLaserWeapon : LaserWeapon
{
	[Token(Token = "0x4001152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public string[] bounceTags;

	[Token(Token = "0x4001153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string[] cutTags;

	[Token(Token = "0x4001154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int maxBounce;

	[Token(Token = "0x4001155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float maxLineVertexDistance;

	[Token(Token = "0x4001156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public UnityEvent onReflect;

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0x1201C64", Offset = "0x1201C64", VA = "0x1201C64")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0x1201D68", Offset = "0x1201D68", VA = "0x1201D68", Slot = "5")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x60014FD")]
	[Address(RVA = "0x1202A08", Offset = "0x1202A08", VA = "0x1202A08")]
	private bool CheckTag(string tag, string[] arrray)
	{
		return default(bool);
	}

	[Token(Token = "0x60014FE")]
	[Address(RVA = "0x120279C", Offset = "0x120279C", VA = "0x120279C")]
	private void AddPointToLineRenderer(LineRenderer line, Vector3 position, bool end)
	{
	}

	[Token(Token = "0x60014FF")]
	[Address(RVA = "0x1202A90", Offset = "0x1202A90", VA = "0x1202A90")]
	public BouncingLaserWeapon()
	{
	}
}
[Token(Token = "0x2000427")]
public class ExplosionProjectile : Projectile
{
	[Token(Token = "0x2000428")]
	public class ExplosionData
	{
		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Collider collider;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 point;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 normal;

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x1203754", Offset = "0x1203754", VA = "0x1203754")]
		public ExplosionData()
		{
		}
	}

	[Token(Token = "0x2000429")]
	[CompilerGenerated]
	private sealed class <WaitForDispose>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExplosionProjectile <>4__this;

		[Token(Token = "0x17000293")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001518")]
			[Address(RVA = "0x120381C", Offset = "0x120381C", VA = "0x120381C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000294")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600151A")]
			[Address(RVA = "0x1203864", Offset = "0x1203864", VA = "0x1203864", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x1203638", Offset = "0x1203638", VA = "0x1203638")]
		[DebuggerHidden]
		public <WaitForDispose>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0x120375C", Offset = "0x120375C", VA = "0x120375C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x1203760", Offset = "0x1203760", VA = "0x1203760", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x1203824", Offset = "0x1203824", VA = "0x1203824", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400115D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Explosion Settings")]
	public int damageAmount;

	[Token(Token = "0x400115E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pushbackAmount;

	[Token(Token = "0x400115F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float explosionRadius;

	[Token(Token = "0x4001160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask damageMask;

	[Token(Token = "0x4001161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onExplosion;

	[Token(Token = "0x4001162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onEnable;

	[Token(Token = "0x4001163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float disposeDelay;

	[Token(Token = "0x4001164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Ground Effect")]
	public PooledParticleEffect particleEffect;

	[Token(Token = "0x4001165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool vfxOnGround;

	[Token(Token = "0x4001166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float particleVerticalOffset;

	[Token(Token = "0x4001167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float particleScaleCorrect;

	[Token(Token = "0x4001168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Trail")]
	public MeshRenderer model;

	[Token(Token = "0x4001169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ParticleSystem[] trailParticles;

	[Token(Token = "0x400116A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected bool isExplosion;

	[Token(Token = "0x400116B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected int m_EnvironmentLayer;

	[Token(Token = "0x400116C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Collider[] m_ExplosionHitCache;

	[Token(Token = "0x6001505")]
	[Address(RVA = "0x1202C78", Offset = "0x1202C78", VA = "0x1202C78", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001506")]
	[Address(RVA = "0x1202CD0", Offset = "0x1202CD0", VA = "0x1202CD0", Slot = "6")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001507")]
	[Address(RVA = "0x1202DE0", Offset = "0x1202DE0", VA = "0x1202DE0", Slot = "4")]
	public override void Shot(Vector3 target)
	{
	}

	[Token(Token = "0x6001508")]
	[Address(RVA = "0x1202DE4", Offset = "0x1202DE4", VA = "0x1202DE4", Slot = "7")]
	public virtual void Explosion(ExplosionData collision)
	{
	}

	[Token(Token = "0x6001509")]
	[Address(RVA = "0x1203138", Offset = "0x1203138", VA = "0x1203138", Slot = "8")]
	protected virtual void TakeDamage(Collider collider, Damageable.DamageMessage message)
	{
	}

	[Token(Token = "0x600150A")]
	[Address(RVA = "0x12032A4", Offset = "0x12032A4", VA = "0x12032A4", Slot = "9")]
	protected virtual void PlayExplosionParticles(ExplosionData collision)
	{
	}

	[Token(Token = "0x600150B")]
	[Address(RVA = "0x1202CFC", Offset = "0x1202CFC", VA = "0x1202CFC")]
	protected void StartTrails()
	{
	}

	[Token(Token = "0x600150C")]
	[Address(RVA = "0x1202FFC", Offset = "0x1202FFC", VA = "0x1202FFC")]
	protected void StopTrails()
	{
	}

	[Token(Token = "0x600150D")]
	[Address(RVA = "0x12030C4", Offset = "0x12030C4", VA = "0x12030C4")]
	[IteratorStateMachine(typeof(<WaitForDispose>d__24))]
	protected IEnumerator WaitForDispose()
	{
		return null;
	}

	[Token(Token = "0x600150E")]
	[Address(RVA = "0x1203660", Offset = "0x1203660", VA = "0x1203660", Slot = "10")]
	protected virtual void OnCollisionEnter(UnityEngine.Collision other)
	{
	}

	[Token(Token = "0x600150F")]
	[Address(RVA = "0x1203664", Offset = "0x1203664", VA = "0x1203664")]
	private void OnParticleSystemStopped()
	{
	}

	[Token(Token = "0x6001510")]
	[Address(RVA = "0x12036B0", Offset = "0x12036B0", VA = "0x12036B0", Slot = "11")]
	public virtual float GetRadius()
	{
		return default(float);
	}

	[Token(Token = "0x6001511")]
	[Address(RVA = "0x12036B8", Offset = "0x12036B8", VA = "0x12036B8", Slot = "12")]
	public virtual float GetForce()
	{
		return default(float);
	}

	[Token(Token = "0x6001512")]
	[Address(RVA = "0x12036C0", Offset = "0x12036C0", VA = "0x12036C0", Slot = "13")]
	public virtual int GetDamage()
	{
		return default(int);
	}

	[Token(Token = "0x6001513")]
	[Address(RVA = "0x12036C8", Offset = "0x12036C8", VA = "0x12036C8")]
	public ExplosionProjectile()
	{
	}
}
[Token(Token = "0x200042A")]
public class LaserWeapon : LineCollider
{
	[Token(Token = "0x4001173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Laser")]
	public Transform target;

	[Token(Token = "0x4001174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float targetSpeed;

	[Token(Token = "0x4001175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("Visual")]
	public LineRenderer lineRenderer;

	[Token(Token = "0x4001176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform lineEndParticle;

	[Token(Token = "0x4001177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Range(0f, 1f)]
	public float particleEndOffset;

	[Token(Token = "0x4001178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private bool _isLayerMaskActive;

	[Token(Token = "0x4001179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int _deactivatedLayerMask;

	[Token(Token = "0x600151B")]
	[Address(RVA = "0x120386C", Offset = "0x120386C", VA = "0x120386C", Slot = "5")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x600151C")]
	[Address(RVA = "0x1203A60", Offset = "0x1203A60", VA = "0x1203A60")]
	public void SetLayerMask(bool active)
	{
	}

	[Token(Token = "0x600151D")]
	[Address(RVA = "0x1202AB8", Offset = "0x1202AB8", VA = "0x1202AB8")]
	public LaserWeapon()
	{
	}
}
[Serializable]
[Token(Token = "0x200042B")]
public class WeaponHitEvent : UnityEvent<Collider>
{
	[Token(Token = "0x600151E")]
	[Address(RVA = "0x1203AD0", Offset = "0x1203AD0", VA = "0x1203AD0")]
	public WeaponHitEvent()
	{
	}
}
[Token(Token = "0x200042C")]
public class MeleeWeapon : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200042D")]
	public class AttackPoint
	{
		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float radius;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 offset;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform attackRoot;

		[Token(Token = "0x600152E")]
		[Address(RVA = "0x12049AC", Offset = "0x12049AC", VA = "0x12049AC")]
		public AttackPoint()
		{
		}
	}

	[Token(Token = "0x400117A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x400117B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	public float pushForce;

	[Token(Token = "0x400117C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float ragdollPushForce;

	[Token(Token = "0x400117D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Attacks attackType;

	[Token(Token = "0x400117E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool stackDamageable;

	[Token(Token = "0x400117F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public QueryTriggerInteraction triggerInteraction;

	[Token(Token = "0x4001180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PooledParticleEffect hitEffect;

	[Token(Token = "0x4001181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LayerMask targetLayers;

	[Token(Token = "0x4001182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AttackScriptableObject attackScriptableObject;

	[Token(Token = "0x4001183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public WeaponHitEvent hitEvent;

	[Token(Token = "0x4001184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AttackPoint[] attackPoints;

	[Token(Token = "0x4001185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected GameObject m_Owner;

	[Token(Token = "0x4001186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Vector3[] m_PreviousPos;

	[Token(Token = "0x4001187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Vector3 m_Direction;

	[Token(Token = "0x4001188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected bool m_IsThrowingHit;

	[Token(Token = "0x4001189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	protected bool m_InAttack;

	[Token(Token = "0x400118A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static RaycastHit[] s_RaycastHitCache;

	[Token(Token = "0x400118B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static Collider[] s_ColliderCache;

	[Token(Token = "0x400118C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Damageable> currentsHits;

	[Token(Token = "0x17000295")]
	public bool throwingHit
	{
		[Token(Token = "0x600151F")]
		[Address(RVA = "0x1203B18", Offset = "0x1203B18", VA = "0x1203B18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001520")]
		[Address(RVA = "0x1203B20", Offset = "0x1203B20", VA = "0x1203B20")]
		set
		{
		}
	}

	[Token(Token = "0x6001521")]
	[Address(RVA = "0x1203B2C", Offset = "0x1203B2C", VA = "0x1203B2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001522")]
	[Address(RVA = "0x1203BA4", Offset = "0x1203BA4", VA = "0x1203BA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001523")]
	[Address(RVA = "0x1203BA8", Offset = "0x1203BA8", VA = "0x1203BA8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001524")]
	[Address(RVA = "0x1203BB8", Offset = "0x1203BB8", VA = "0x1203BB8")]
	public void SetOwner(GameObject owner)
	{
	}

	[Token(Token = "0x6001525")]
	[Address(RVA = "0x1203BC0", Offset = "0x1203BC0", VA = "0x1203BC0")]
	public void BeginAttack(bool thowingAttack)
	{
	}

	[Token(Token = "0x6001526")]
	[Address(RVA = "0x1203BE0", Offset = "0x1203BE0", VA = "0x1203BE0")]
	private void PrepareAttack(bool thowingAttack)
	{
	}

	[Token(Token = "0x6001527")]
	[Address(RVA = "0x1203BB0", Offset = "0x1203BB0", VA = "0x1203BB0")]
	public void EndAttack()
	{
	}

	[Token(Token = "0x6001528")]
	[Address(RVA = "0x1203D70", Offset = "0x1203D70", VA = "0x1203D70")]
	public void ForceBeginAttack()
	{
	}

	[Token(Token = "0x6001529")]
	[Address(RVA = "0x12041C8", Offset = "0x12041C8", VA = "0x12041C8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600152A")]
	[Address(RVA = "0x1203D94", Offset = "0x1203D94", VA = "0x1203D94")]
	private void Attack()
	{
	}

	[Token(Token = "0x600152B")]
	[Address(RVA = "0x12041D8", Offset = "0x12041D8", VA = "0x12041D8")]
	private bool CheckDamage(Collider other, AttackPoint pts)
	{
		return default(bool);
	}

	[Token(Token = "0x600152C")]
	[Address(RVA = "0x1204818", Offset = "0x1204818", VA = "0x1204818")]
	public MeleeWeapon()
	{
	}
}
[Token(Token = "0x200042E")]
public abstract class Projectile : MonoBehaviour
{
	[Token(Token = "0x600152F")]
	public abstract void Shot(Vector3 target);

	[Token(Token = "0x6001530")]
	[Address(RVA = "0x1203668", Offset = "0x1203668", VA = "0x1203668")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6001531")]
	[Address(RVA = "0x120374C", Offset = "0x120374C", VA = "0x120374C")]
	protected Projectile()
	{
	}
}
[Token(Token = "0x200042F")]
public class RangeWeapon : MonoBehaviour
{
	[Token(Token = "0x4001190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 muzzleOffset;

	[Token(Token = "0x4001191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Projectile projectile;

	[Token(Token = "0x4001192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Projectile m_LoadedProjectile;

	[Token(Token = "0x17000296")]
	public Projectile loadedProjectile
	{
		[Token(Token = "0x6001532")]
		[Address(RVA = "0x12049B4", Offset = "0x12049B4", VA = "0x12049B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001533")]
	[Address(RVA = "0x12049BC", Offset = "0x12049BC", VA = "0x12049BC")]
	public void Attack(Vector3 target)
	{
	}

	[Token(Token = "0x6001534")]
	[Address(RVA = "0x1204AAC", Offset = "0x1204AAC", VA = "0x1204AAC")]
	public void LoadProjectile()
	{
	}

	[Token(Token = "0x6001535")]
	[Address(RVA = "0x12049C0", Offset = "0x12049C0", VA = "0x12049C0")]
	private void AttackProjectile(Vector3 target)
	{
	}

	[Token(Token = "0x6001536")]
	[Address(RVA = "0x1204BFC", Offset = "0x1204BFC", VA = "0x1204BFC")]
	public RangeWeapon()
	{
	}
}
[Token(Token = "0x2000430")]
public class RecoilController : MonoBehaviour
{
	[Token(Token = "0x4001193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeleeWeapon[] weapons;

	[Token(Token = "0x4001194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ModificationScriptableObject[] modifications;

	[Token(Token = "0x4001195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onRecoilHit;

	[Token(Token = "0x6001537")]
	[Address(RVA = "0x1204C04", Offset = "0x1204C04", VA = "0x1204C04")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0x1204CF4", Offset = "0x1204CF4", VA = "0x1204CF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001539")]
	[Address(RVA = "0x1204DE4", Offset = "0x1204DE4", VA = "0x1204DE4")]
	public void OnWeaponHit(Collider hit)
	{
	}

	[Token(Token = "0x600153A")]
	[Address(RVA = "0x1205020", Offset = "0x1205020", VA = "0x1205020")]
	private void InvokeEvent()
	{
	}

	[Token(Token = "0x600153B")]
	[Address(RVA = "0x1205034", Offset = "0x1205034", VA = "0x1205034")]
	public RecoilController()
	{
	}
}
[Token(Token = "0x2000431")]
public class RocketWeapon : ExplosionProjectile
{
	[Token(Token = "0x4001196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Movement")]
	public float projectileSpeed;

	[Token(Token = "0x4001197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float explosionTimer;

	[Token(Token = "0x4001198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool rotate;

	[Token(Token = "0x4001199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float sinceFiredCollision;

	[Token(Token = "0x400119A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Manual Collision")]
	public bool collisionInUpdate;

	[Token(Token = "0x400119B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float radius;

	[Token(Token = "0x400119C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public LayerMask layerMask;

	[Token(Token = "0x400119D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Vector3 direction;

	[Token(Token = "0x400119E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float distance;

	[Token(Token = "0x400119F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public QueryTriggerInteraction queryTriggerInteraction;

	[Token(Token = "0x40011A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected float m_SinceFired;

	[Token(Token = "0x40011A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected Rigidbody m_RigidBody;

	[Token(Token = "0x40011A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private protected Vector3 startScale;

	[Token(Token = "0x40011A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected Collider[] colliders;

	[Token(Token = "0x600153C")]
	[Address(RVA = "0x120503C", Offset = "0x120503C", VA = "0x120503C", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600153D")]
	[Address(RVA = "0x12050DC", Offset = "0x12050DC", VA = "0x12050DC", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600153E")]
	[Address(RVA = "0x120513C", Offset = "0x120513C", VA = "0x120513C", Slot = "4")]
	public override void Shot(Vector3 target)
	{
	}

	[Token(Token = "0x600153F")]
	[Address(RVA = "0x1205270", Offset = "0x1205270", VA = "0x1205270", Slot = "14")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x6001540")]
	[Address(RVA = "0x120548C", Offset = "0x120548C", VA = "0x120548C", Slot = "7")]
	public override void Explosion(ExplosionData collision)
	{
	}

	[Token(Token = "0x6001541")]
	[Address(RVA = "0x12054B4", Offset = "0x12054B4", VA = "0x12054B4", Slot = "10")]
	protected override void OnCollisionEnter(UnityEngine.Collision other)
	{
	}

	[Token(Token = "0x6001542")]
	[Address(RVA = "0x1205600", Offset = "0x1205600", VA = "0x1205600", Slot = "15")]
	protected virtual Vector3 GetVelocity(Vector3 target)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001543")]
	[Address(RVA = "0x120191C", Offset = "0x120191C", VA = "0x120191C")]
	public RocketWeapon()
	{
	}
}
[Token(Token = "0x2000432")]
public class ToxicWeapon : MonoBehaviour
{
	[Token(Token = "0x40011A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PooledParticleEffect particleEffect;

	[Token(Token = "0x40011A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyBehaviour enemy;

	[Token(Token = "0x40011A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CorrosionEnemyModifier corrosion;

	[Token(Token = "0x40011A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlayMakerFSM controller;

	[Token(Token = "0x40011A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool stopOnStart;

	[Token(Token = "0x40011A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected ModificationScriptableObject modificationToRemoveOnDisable;

	[Token(Token = "0x40011AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem particles;

	[Token(Token = "0x6001544")]
	[Address(RVA = "0x120568C", Offset = "0x120568C", VA = "0x120568C")]
	private void OnStart()
	{
	}

	[Token(Token = "0x6001545")]
	[Address(RVA = "0x1205718", Offset = "0x1205718", VA = "0x1205718")]
	public void OnSpawn()
	{
	}

	[Token(Token = "0x6001546")]
	[Address(RVA = "0x1205A28", Offset = "0x1205A28", VA = "0x1205A28")]
	private void RemoveListener()
	{
	}

	[Token(Token = "0x6001547")]
	[Address(RVA = "0x1205D8C", Offset = "0x1205D8C", VA = "0x1205D8C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001548")]
	[Address(RVA = "0x1205D90", Offset = "0x1205D90", VA = "0x1205D90")]
	private void OnEnemyDefeat()
	{
	}

	[Token(Token = "0x6001549")]
	[Address(RVA = "0x1205EC0", Offset = "0x1205EC0", VA = "0x1205EC0")]
	private void OnDissolveAdded()
	{
	}

	[Token(Token = "0x600154A")]
	[Address(RVA = "0x1205EC4", Offset = "0x1205EC4", VA = "0x1205EC4")]
	private void OnDissolveCompleted()
	{
	}

	[Token(Token = "0x600154B")]
	[Address(RVA = "0x1205864", Offset = "0x1205864", VA = "0x1205864")]
	[ContextMenu("Start Emmiting")]
	public void ParticleStartEmitting()
	{
	}

	[Token(Token = "0x600154C")]
	[Address(RVA = "0x1205DA8", Offset = "0x1205DA8", VA = "0x1205DA8")]
	[ContextMenu("Stop Emmiting")]
	public void ParticleStopEmitting()
	{
	}

	[Token(Token = "0x600154D")]
	[Address(RVA = "0x1205EC8", Offset = "0x1205EC8", VA = "0x1205EC8")]
	public void OnPlayerRespawn()
	{
	}

	[Token(Token = "0x600154E")]
	[Address(RVA = "0x1205B74", Offset = "0x1205B74", VA = "0x1205B74")]
	public void RemoveModificationFromPlayer()
	{
	}

	[Token(Token = "0x600154F")]
	[Address(RVA = "0x1205EE4", Offset = "0x1205EE4", VA = "0x1205EE4")]
	public ToxicWeapon()
	{
	}
}
[Token(Token = "0x2000433")]
public class Wobble : MonoBehaviour
{
	[Token(Token = "0x40011AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer rend;

	[Token(Token = "0x40011AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 lastPos;

	[Token(Token = "0x40011AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 velocity;

	[Token(Token = "0x40011AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 lastRot;

	[Token(Token = "0x40011AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 angularVelocity;

	[Token(Token = "0x40011B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float MaxWobble;

	[Token(Token = "0x40011B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float WobbleSpeed;

	[Token(Token = "0x40011B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float Recovery;

	[Token(Token = "0x40011B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float wobbleAmountX;

	[Token(Token = "0x40011B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float wobbleAmountZ;

	[Token(Token = "0x40011B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float wobbleAmountToAddX;

	[Token(Token = "0x40011B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float wobbleAmountToAddZ;

	[Token(Token = "0x40011B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float pulse;

	[Token(Token = "0x40011B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float time;

	[Token(Token = "0x40011B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float _WobbleX;

	[Token(Token = "0x40011BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float _WobbleZ;

	[Token(Token = "0x6001550")]
	[Address(RVA = "0x1205EEC", Offset = "0x1205EEC", VA = "0x1205EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001551")]
	[Address(RVA = "0x1205F44", Offset = "0x1205F44", VA = "0x1205F44")]
	private void Update()
	{
	}

	[Token(Token = "0x6001552")]
	[Address(RVA = "0x12061FC", Offset = "0x12061FC", VA = "0x12061FC")]
	public Wobble()
	{
	}
}
[Token(Token = "0x2000434")]
public interface ICollactableResource
{
	[Token(Token = "0x17000297")]
	bool CanMagnet
	{
		[Token(Token = "0x6001553")]
		get;
	}

	[Token(Token = "0x17000298")]
	XRBaseInteractable Interactable
	{
		[Token(Token = "0x6001554")]
		get;
	}

	[Token(Token = "0x17000299")]
	Resource Resource
	{
		[Token(Token = "0x6001555")]
		get;
	}

	[Token(Token = "0x6001556")]
	void Magnet();
}
[Token(Token = "0x2000435")]
public interface IXRDollyMove
{
	[Token(Token = "0x6001557")]
	void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2);

	[Token(Token = "0x6001558")]
	void Move(Vector3 brainPosition, Vector3 verticalTranslation);

	[Token(Token = "0x6001559")]
	void ResetPosition();

	[Token(Token = "0x600155A")]
	void ResetStartPosition();
}
[Token(Token = "0x2000436")]
public interface IXRSnap
{
	[Token(Token = "0x1700029A")]
	bool CanRotate
	{
		[Token(Token = "0x600155F")]
		get;
		[Token(Token = "0x6001560")]
		set;
	}

	[Token(Token = "0x600155B")]
	Quaternion GetRotation();

	[Token(Token = "0x600155C")]
	void Rotate(Quaternion destinationRotation);

	[Token(Token = "0x600155D")]
	void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2);

	[Token(Token = "0x600155E")]
	void ResetRotation();
}
[Token(Token = "0x2000437")]
[DisallowMultipleComponent]
public class LimitedResource : MonoBehaviour
{
	[Token(Token = "0x2000438")]
	[CompilerGenerated]
	private sealed class <ResourceRespawnRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimitedResource <>4__this;

		[Token(Token = "0x1700029F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600156E")]
			[Address(RVA = "0x1206624", Offset = "0x1206624", VA = "0x1206624", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001570")]
			[Address(RVA = "0x120666C", Offset = "0x120666C", VA = "0x120666C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0x1206470", Offset = "0x1206470", VA = "0x1206470")]
		[DebuggerHidden]
		public <ResourceRespawnRoutine>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0x1206524", Offset = "0x1206524", VA = "0x1206524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0x1206528", Offset = "0x1206528", VA = "0x1206528", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0x120662C", Offset = "0x120662C", VA = "0x120662C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40011BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform resourceParent;

	[Token(Token = "0x40011BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer _renderer;

	[Token(Token = "0x40011BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color _startColor;

	[Token(Token = "0x40011BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public readonly string colorHash;

	[Token(Token = "0x40011BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Coroutine _resourceRespawnCoroutine;

	[Token(Token = "0x40011C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int _currentAmount;

	[Token(Token = "0x40011C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("Resource Limit Configuration")]
	public int resourceLimit;

	[Token(Token = "0x40011C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool respawnResource;

	[Token(Token = "0x40011C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[ConditionalField("respawnResource", false, new object[] { })]
	public float respawnTime;

	[Token(Token = "0x40011C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnityEvent onTake;

	[Token(Token = "0x40011C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UnityEvent onDepletion;

	[Token(Token = "0x40011C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private UnityEvent onRespawn;

	[Token(Token = "0x40011C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private TweenerCore<float, float, FloatOptions> scaleTween;

	[Token(Token = "0x1700029B")]
	public Renderer Renderer
	{
		[Token(Token = "0x6001561")]
		[Address(RVA = "0x1206220", Offset = "0x1206220", VA = "0x1206220")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700029C")]
	public Color StartColor
	{
		[Token(Token = "0x6001562")]
		[Address(RVA = "0x1206228", Offset = "0x1206228", VA = "0x1206228")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700029D")]
	public bool IsAvailable
	{
		[Token(Token = "0x6001563")]
		[Address(RVA = "0x1206234", Offset = "0x1206234", VA = "0x1206234")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700029E")]
	public int CurrentAmount
	{
		[Token(Token = "0x6001564")]
		[Address(RVA = "0x1206244", Offset = "0x1206244", VA = "0x1206244")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001565")]
	[Address(RVA = "0x120624C", Offset = "0x120624C", VA = "0x120624C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001566")]
	[Address(RVA = "0x12062AC", Offset = "0x12062AC", VA = "0x12062AC", Slot = "5")]
	public virtual void CollectResource()
	{
	}

	[Token(Token = "0x6001567")]
	[Address(RVA = "0x12063FC", Offset = "0x12063FC", VA = "0x12063FC")]
	[IteratorStateMachine(typeof(<ResourceRespawnRoutine>d__23))]
	private IEnumerator ResourceRespawnRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001568")]
	[Address(RVA = "0x1206498", Offset = "0x1206498", VA = "0x1206498")]
	[ContextMenu("Respawn Resources")]
	public void RespawnResources()
	{
	}

	[Token(Token = "0x6001569")]
	[Address(RVA = "0x1206378", Offset = "0x1206378", VA = "0x1206378")]
	private void UpdateScale(float value, float duration = 0.1f)
	{
	}

	[Token(Token = "0x600156A")]
	[Address(RVA = "0x12064B8", Offset = "0x12064B8", VA = "0x12064B8")]
	public LimitedResource()
	{
	}
}
[Token(Token = "0x2000439")]
public class OVRCheckPause : MonoBehaviour
{
	[Token(Token = "0x200043A")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170002A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001576")]
			[Address(RVA = "0x120687C", Offset = "0x120687C", VA = "0x120687C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001578")]
			[Address(RVA = "0x12068C4", Offset = "0x12068C4", VA = "0x12068C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0x12066D4", Offset = "0x12066D4", VA = "0x12066D4")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0x1206704", Offset = "0x1206704", VA = "0x1206704", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0x1206708", Offset = "0x1206708", VA = "0x1206708", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0x1206884", Offset = "0x1206884", VA = "0x1206884", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6001571")]
	[Address(RVA = "0x1206674", Offset = "0x1206674", VA = "0x1206674")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6001572")]
	[Address(RVA = "0x12066FC", Offset = "0x12066FC", VA = "0x12066FC")]
	public OVRCheckPause()
	{
	}
}
[Token(Token = "0x200043B")]
public class OVROculusRecenter : MonoBehaviour
{
	[Token(Token = "0x40011CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VRCharacter player;

	[Token(Token = "0x40011CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool animate;

	[Token(Token = "0x6001579")]
	[Address(RVA = "0x12068CC", Offset = "0x12068CC", VA = "0x12068CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600157A")]
	[Address(RVA = "0x120694C", Offset = "0x120694C", VA = "0x120694C")]
	private void Start()
	{
	}

	[Token(Token = "0x600157B")]
	[Address(RVA = "0x1206A34", Offset = "0x1206A34", VA = "0x1206A34")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600157C")]
	[Address(RVA = "0x1206B1C", Offset = "0x1206B1C", VA = "0x1206B1C")]
	[ContextMenu("Oculus Home")]
	private void PlayerPressedOculusHome()
	{
	}

	[Token(Token = "0x600157D")]
	[Address(RVA = "0x1206BF8", Offset = "0x1206BF8", VA = "0x1206BF8")]
	public OVROculusRecenter()
	{
	}
}
[Token(Token = "0x200043C")]
public class OVRXRContinous : OVRXRLocomotionBase, IXRSnap
{
	[Token(Token = "0x40011CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool ignoreNextRotation;

	[Token(Token = "0x40011D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public OVRXRDollyMove move;

	[Token(Token = "0x40011D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public bool Teleported;

	[Token(Token = "0x40011D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private InputActionProperty m_LeftHandSnapTurnAction;

	[Token(Token = "0x40011D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private InputActionProperty m_RightHandSnapTurnAction;

	[Token(Token = "0x40011D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private bool m_EnableTurn;

	[Token(Token = "0x40011D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[UnityEngine.Tooltip("The number of degrees/second clockwise to rotate when turning clockwise.")]
	[SerializeField]
	private float m_TurnSpeed;

	[Token(Token = "0x40011D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float amount;

	[Token(Token = "0x170002A3")]
	public InputActionProperty leftHandSnapTurnAction
	{
		[Token(Token = "0x6001580")]
		[Address(RVA = "0x1206D0C", Offset = "0x1206D0C", VA = "0x1206D0C")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x6001581")]
		[Address(RVA = "0x1206D20", Offset = "0x1206D20", VA = "0x1206D20")]
		set
		{
		}
	}

	[Token(Token = "0x170002A4")]
	public InputActionProperty rightHandSnapTurnAction
	{
		[Token(Token = "0x6001582")]
		[Address(RVA = "0x1206DF4", Offset = "0x1206DF4", VA = "0x1206DF4")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x6001583")]
		[Address(RVA = "0x1206E08", Offset = "0x1206E08", VA = "0x1206E08")]
		set
		{
		}
	}

	[Token(Token = "0x170002A5")]
	public bool enableTurn
	{
		[Token(Token = "0x6001584")]
		[Address(RVA = "0x1206E38", Offset = "0x1206E38", VA = "0x1206E38")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001585")]
		[Address(RVA = "0x1206E40", Offset = "0x1206E40", VA = "0x1206E40")]
		set
		{
		}
	}

	[Token(Token = "0x170002A6")]
	public bool SnapModeActive
	{
		[Token(Token = "0x6001586")]
		[Address(RVA = "0x1206E4C", Offset = "0x1206E4C", VA = "0x1206E4C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001587")]
		[Address(RVA = "0x1206E54", Offset = "0x1206E54", VA = "0x1206E54")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002A7")]
	public bool CanRotate
	{
		[Token(Token = "0x6001588")]
		[Address(RVA = "0x1206E60", Offset = "0x1206E60", VA = "0x1206E60", Slot = "12")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001589")]
		[Address(RVA = "0x1206E80", Offset = "0x1206E80", VA = "0x1206E80", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x170002A8")]
	public float turnSpeed
	{
		[Token(Token = "0x600158A")]
		[Address(RVA = "0x1206E8C", Offset = "0x1206E8C", VA = "0x1206E8C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600158B")]
		[Address(RVA = "0x1206E94", Offset = "0x1206E94", VA = "0x1206E94")]
		set
		{
		}
	}

	[Token(Token = "0x600158C")]
	[Address(RVA = "0x1206E9C", Offset = "0x1206E9C", VA = "0x1206E9C")]
	private void Start()
	{
	}

	[Token(Token = "0x600158D")]
	[Address(RVA = "0x1206F60", Offset = "0x1206F60", VA = "0x1206F60", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600158E")]
	[Address(RVA = "0x12071B8", Offset = "0x12071B8", VA = "0x12071B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600158F")]
	[Address(RVA = "0x1207338", Offset = "0x1207338", VA = "0x1207338")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0x1207388", Offset = "0x1207388", VA = "0x1207388", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0x1207454", Offset = "0x1207454", VA = "0x1207454")]
	private void OnSnapModeChanged(MonoBehaviour snapProvider)
	{
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0x1206D50", Offset = "0x1206D50", VA = "0x1206D50")]
	private void SetInputActionProperty(ref InputActionProperty property, InputActionProperty value)
	{
	}

	[Token(Token = "0x6001593")]
	[Address(RVA = "0x12074C8", Offset = "0x12074C8", VA = "0x12074C8")]
	protected Vector2 ReadInput()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6001594")]
	[Address(RVA = "0x12075BC", Offset = "0x12075BC", VA = "0x12075BC", Slot = "14")]
	protected virtual float GetTurnAmount(Vector2 input)
	{
		return default(float);
	}

	[Token(Token = "0x6001595")]
	[Address(RVA = "0x12076D8", Offset = "0x12076D8", VA = "0x12076D8", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001596")]
	[Address(RVA = "0x12077E0", Offset = "0x12077E0", VA = "0x12077E0", Slot = "7")]
	protected override void UpdateTransform(OVRCameraRig rig)
	{
	}

	[Token(Token = "0x6001597")]
	[Address(RVA = "0x1207A54", Offset = "0x1207A54", VA = "0x1207A54", Slot = "10")]
	public void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2)
	{
	}

	[Token(Token = "0x6001598")]
	[Address(RVA = "0x1207F3C", Offset = "0x1207F3C", VA = "0x1207F3C", Slot = "8")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001599")]
	[Address(RVA = "0x1207E08", Offset = "0x1207E08", VA = "0x1207E08", Slot = "9")]
	public void Rotate(Quaternion destinationRotation)
	{
	}

	[Token(Token = "0x600159A")]
	[Address(RVA = "0x1207F58", Offset = "0x1207F58", VA = "0x1207F58")]
	public bool MatchRigUpCameraForward(Vector3 destinationUp, Vector3 destinationForward)
	{
		return default(bool);
	}

	[Token(Token = "0x600159B")]
	[Address(RVA = "0x120824C", Offset = "0x120824C", VA = "0x120824C")]
	public bool MatchRigUp(Vector3 destinationUp)
	{
		return default(bool);
	}

	[Token(Token = "0x600159C")]
	[Address(RVA = "0x120793C", Offset = "0x120793C", VA = "0x120793C")]
	public bool RotateAroundCameraUsingWorldUp(float angleDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x600159D")]
	[Address(RVA = "0x12083F8", Offset = "0x12083F8", VA = "0x12083F8")]
	public bool RotateAroundCameraUsingRigUp(float angleDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x600159E")]
	[Address(RVA = "0x1208384", Offset = "0x1208384", VA = "0x1208384")]
	public bool RotateAroundCameraPosition(Vector3 vector, float angleDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0x1208438", Offset = "0x1208438", VA = "0x1208438", Slot = "11")]
	[ContextMenu("Recenter")]
	public void ResetRotation()
	{
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0x12085F4", Offset = "0x12085F4", VA = "0x12085F4")]
	public OVRXRContinous()
	{
	}
}
[Token(Token = "0x200043D")]
public class OVRXRDollyMove : OVRXRLocomotionBase, IXRDollyMove
{
	[Token(Token = "0x40011D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Vector3 cameraOffset;

	[Token(Token = "0x40011D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private OVRXRSnap snap;

	[Token(Token = "0x40011DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 lastBrainPosition;

	[Token(Token = "0x40011DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 distanceDiff;

	[Token(Token = "0x40011DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool waitForReset;

	[Token(Token = "0x40011DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 currentCameraOffset;

	[Token(Token = "0x170002A9")]
	public Vector3 rigInCameraSpacePos
	{
		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x1208614", Offset = "0x1208614", VA = "0x1208614")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60015A2")]
	[Address(RVA = "0x120864C", Offset = "0x120864C", VA = "0x120864C")]
	private void Start()
	{
	}

	[Token(Token = "0x60015A3")]
	[Address(RVA = "0x1208740", Offset = "0x1208740", VA = "0x1208740")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60015A4")]
	[Address(RVA = "0x1208828", Offset = "0x1208828", VA = "0x1208828", Slot = "7")]
	protected override void UpdateTransform(OVRCameraRig rig)
	{
	}

	[Token(Token = "0x60015A5")]
	[Address(RVA = "0x1208B34", Offset = "0x1208B34", VA = "0x1208B34")]
	public bool MoveCameraToWorldLocation(Vector3 desiredWorldLocation)
	{
		return default(bool);
	}

	[Token(Token = "0x60015A6")]
	[Address(RVA = "0x1208C58", Offset = "0x1208C58", VA = "0x1208C58", Slot = "8")]
	public void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2)
	{
	}

	[Token(Token = "0x60015A7")]
	[Address(RVA = "0x1208A30", Offset = "0x1208A30", VA = "0x1208A30", Slot = "9")]
	public void Move(Vector3 brainPosition, Vector3 verticalTranslation)
	{
	}

	[Token(Token = "0x60015A8")]
	[Address(RVA = "0x12088C8", Offset = "0x12088C8", VA = "0x12088C8", Slot = "10")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x60015A9")]
	[Address(RVA = "0x1208E78", Offset = "0x1208E78", VA = "0x1208E78", Slot = "11")]
	public void ResetStartPosition()
	{
	}

	[Token(Token = "0x60015AA")]
	[Address(RVA = "0x12079A8", Offset = "0x12079A8", VA = "0x12079A8")]
	public void UpdateBrainToRigOffset()
	{
	}

	[Token(Token = "0x60015AB")]
	[Address(RVA = "0x1208E84", Offset = "0x1208E84", VA = "0x1208E84")]
	public OVRXRDollyMove()
	{
	}
}
[Token(Token = "0x200043E")]
public abstract class OVRXRLocomotionBase : MonoBehaviour
{
	[Token(Token = "0x40011DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected OVRCameraRig vRCameraRig;

	[Token(Token = "0x40011DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Transform cinemachineBrain;

	[Token(Token = "0x40011E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool playerControllerEnabled;

	[Token(Token = "0x40011E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected new Transform transform;

	[Token(Token = "0x60015AC")]
	[Address(RVA = "0x12070E8", Offset = "0x12070E8", VA = "0x12070E8", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60015AD")]
	[Address(RVA = "0x1208E9C", Offset = "0x1208E9C", VA = "0x1208E9C", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60015AE")]
	[Address(RVA = "0x1208F28", Offset = "0x1208F28", VA = "0x1208F28", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60015AF")]
	protected abstract void UpdateTransform(OVRCameraRig rig);

	[Token(Token = "0x60015B0")]
	[Address(RVA = "0x120860C", Offset = "0x120860C", VA = "0x120860C")]
	protected OVRXRLocomotionBase()
	{
	}
}
[Token(Token = "0x200043F")]
public class OVRXRSnap : OVRXRLocomotionBase, IXRSnap
{
	[Token(Token = "0x40011E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public OVRXRDollyMove move;

	[Token(Token = "0x40011E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public bool Teleported;

	[Token(Token = "0x40011E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float m_TurnAmount;

	[Token(Token = "0x40011E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float m_DebounceTime;

	[Token(Token = "0x40011E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private bool m_EnableTurnLeftRight;

	[Token(Token = "0x40011E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	[SerializeField]
	private bool m_EnableTurnAround;

	[Token(Token = "0x40011E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private InputActionProperty m_LeftHandSnapTurnAction;

	[Token(Token = "0x40011E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private InputActionProperty m_RightHandSnapTurnAction;

	[Token(Token = "0x40011EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_CurrentTurnAmount;

	[Token(Token = "0x40011EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_TimeStarted;

	[Token(Token = "0x40011ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector2 input;

	[Token(Token = "0x40011EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float amount;

	[Token(Token = "0x170002AA")]
	public float turnAmount
	{
		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x1208FEC", Offset = "0x1208FEC", VA = "0x1208FEC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x1208FF4", Offset = "0x1208FF4", VA = "0x1208FF4")]
		set
		{
		}
	}

	[Token(Token = "0x170002AB")]
	public float debounceTime
	{
		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x1208FFC", Offset = "0x1208FFC", VA = "0x1208FFC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x1209004", Offset = "0x1209004", VA = "0x1209004")]
		set
		{
		}
	}

	[Token(Token = "0x170002AC")]
	public bool enableTurnLeftRight
	{
		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x120900C", Offset = "0x120900C", VA = "0x120900C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x1209014", Offset = "0x1209014", VA = "0x1209014")]
		set
		{
		}
	}

	[Token(Token = "0x170002AD")]
	public bool enableTurnAround
	{
		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x1209020", Offset = "0x1209020", VA = "0x1209020")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x1209028", Offset = "0x1209028", VA = "0x1209028")]
		set
		{
		}
	}

	[Token(Token = "0x170002AE")]
	public InputActionProperty leftHandSnapTurnAction
	{
		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x1209034", Offset = "0x1209034", VA = "0x1209034")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x1209048", Offset = "0x1209048", VA = "0x1209048")]
		set
		{
		}
	}

	[Token(Token = "0x170002AF")]
	public InputActionProperty rightHandSnapTurnAction
	{
		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x120911C", Offset = "0x120911C", VA = "0x120911C")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x1209130", Offset = "0x1209130", VA = "0x1209130")]
		set
		{
		}
	}

	[Token(Token = "0x170002B0")]
	public bool SnapModeActive
	{
		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x1209160", Offset = "0x1209160", VA = "0x1209160")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x1209168", Offset = "0x1209168", VA = "0x1209168")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002B1")]
	public bool CanRotate
	{
		[Token(Token = "0x60015BF")]
		[Address(RVA = "0x1209174", Offset = "0x1209174", VA = "0x1209174", Slot = "12")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x1209194", Offset = "0x1209194", VA = "0x1209194", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x60015C1")]
	[Address(RVA = "0x12091A0", Offset = "0x12091A0", VA = "0x12091A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60015C2")]
	[Address(RVA = "0x1209264", Offset = "0x1209264", VA = "0x1209264", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60015C3")]
	[Address(RVA = "0x12093EC", Offset = "0x12093EC", VA = "0x12093EC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60015C4")]
	[Address(RVA = "0x120956C", Offset = "0x120956C", VA = "0x120956C")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0x12095BC", Offset = "0x12095BC", VA = "0x12095BC", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60015C6")]
	[Address(RVA = "0x1209688", Offset = "0x1209688", VA = "0x1209688")]
	private void OnSnapModeChanged(MonoBehaviour snapProvider)
	{
	}

	[Token(Token = "0x60015C7")]
	[Address(RVA = "0x1209078", Offset = "0x1209078", VA = "0x1209078")]
	private void SetInputActionProperty(ref InputActionProperty property, InputActionProperty value)
	{
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0x12096FC", Offset = "0x12096FC", VA = "0x12096FC")]
	protected Vector2 ReadInput()
	{
		return default(Vector2);
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0x12097F0", Offset = "0x12097F0", VA = "0x12097F0", Slot = "14")]
	protected virtual float GetTurnAmount(Vector2 input)
	{
		return default(float);
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0x12098DC", Offset = "0x12098DC", VA = "0x12098DC", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0x12099D4", Offset = "0x12099D4", VA = "0x12099D4")]
	protected void StartTurn(float amount)
	{
	}

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0x1209A08", Offset = "0x1209A08", VA = "0x1209A08", Slot = "7")]
	protected override void UpdateTransform(OVRCameraRig rig)
	{
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0x1209BB0", Offset = "0x1209BB0", VA = "0x1209BB0", Slot = "10")]
	public void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2)
	{
	}

	[Token(Token = "0x60015CE")]
	[Address(RVA = "0x120A098", Offset = "0x120A098", VA = "0x120A098", Slot = "8")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60015CF")]
	[Address(RVA = "0x1209F64", Offset = "0x1209F64", VA = "0x1209F64", Slot = "9")]
	public void Rotate(Quaternion destinationRotation)
	{
	}

	[Token(Token = "0x60015D0")]
	[Address(RVA = "0x120A0B4", Offset = "0x120A0B4", VA = "0x120A0B4")]
	public bool MatchRigUpCameraForward(Vector3 destinationUp, Vector3 destinationForward)
	{
		return default(bool);
	}

	[Token(Token = "0x60015D1")]
	[Address(RVA = "0x120A3A8", Offset = "0x120A3A8", VA = "0x120A3A8")]
	public bool MatchRigUp(Vector3 destinationUp)
	{
		return default(bool);
	}

	[Token(Token = "0x60015D2")]
	[Address(RVA = "0x1209B44", Offset = "0x1209B44", VA = "0x1209B44")]
	public bool RotateAroundCameraUsingWorldUp(float angleDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x60015D3")]
	[Address(RVA = "0x120A554", Offset = "0x120A554", VA = "0x120A554")]
	public bool RotateAroundCameraUsingRigUp(float angleDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x60015D4")]
	[Address(RVA = "0x120A4E0", Offset = "0x120A4E0", VA = "0x120A4E0")]
	public bool RotateAroundCameraPosition(Vector3 vector, float angleDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x60015D5")]
	[Address(RVA = "0x120A594", Offset = "0x120A594", VA = "0x120A594", Slot = "11")]
	public void ResetRotation()
	{
	}

	[Token(Token = "0x60015D6")]
	[Address(RVA = "0x120A748", Offset = "0x120A748", VA = "0x120A748")]
	public OVRXRSnap()
	{
	}
}
[Token(Token = "0x2000440")]
public class EntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x40011EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayMakerFSM fsm;

	[Token(Token = "0x40011F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool exitAppOnFailure;

	[Token(Token = "0x60015D7")]
	[Address(RVA = "0x120A76C", Offset = "0x120A76C", VA = "0x120A76C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015D8")]
	[Address(RVA = "0x120A9AC", Offset = "0x120A9AC", VA = "0x120A9AC")]
	private void EntitlementCallback(Message msg)
	{
	}

	[Token(Token = "0x60015D9")]
	[Address(RVA = "0x120AB38", Offset = "0x120AB38", VA = "0x120AB38")]
	public EntitlementCheck()
	{
	}
}
[Token(Token = "0x2000441")]
[CreateAssetMenu(menuName = "Oculus FMOD Callback Handler")]
public class OculusFMODCallbackHandler : PlatformCallbackHandler
{
	[Token(Token = "0x60015DA")]
	[Address(RVA = "0x120AB48", Offset = "0x120AB48", VA = "0x120AB48", Slot = "4")]
	public override void PreInitialize(FMOD.Studio.System studioSystem, Action<RESULT, string> reportResult)
	{
	}

	[Token(Token = "0x60015DB")]
	[Address(RVA = "0x120AD20", Offset = "0x120AD20", VA = "0x120AD20")]
	public OculusFMODCallbackHandler()
	{
	}
}
[Token(Token = "0x2000442")]
public class XRPointerBase : MonoBehaviour
{
	[Token(Token = "0x40011F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected XRRayOverrideInteractor interactor;

	[Token(Token = "0x60015DC")]
	[Address(RVA = "0x120AD28", Offset = "0x120AD28", VA = "0x120AD28")]
	public XRPointerBase()
	{
	}
}
[Token(Token = "0x2000443")]
[DefaultExecutionOrder(100)]
public class XRPointerBezier : XRPointerBase
{
	[Token(Token = "0x40011F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LineRenderer castLine;

	[Token(Token = "0x40011F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float inActiveLength;

	[Token(Token = "0x40011F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Space(10f)]
	[SerializeField]
	private float curveActiveFollowSpeed;

	[Token(Token = "0x40011F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float curveInActiveFollowSpeed;

	[Token(Token = "0x40011F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform[] curvePoints;

	[Token(Token = "0x40011F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int numberOfPointsOnCurve;

	[Token(Token = "0x40011F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private LayerMask obstacle;

	[Token(Token = "0x40011F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Bezier curveGenerator;

	[Token(Token = "0x40011FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 curvePointPosition;

	[Token(Token = "0x40011FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool curveLocked;

	[Token(Token = "0x40011FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool check;

	[Token(Token = "0x40011FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<XRBaseInteractable> currentTargets;

	[Token(Token = "0x40011FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private XRPointerTarget currentTarget;

	[Token(Token = "0x40011FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float lastDistance;

	[Token(Token = "0x4001200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private RaycastHit[] hits;

	[Token(Token = "0x60015DD")]
	[Address(RVA = "0x120AD30", Offset = "0x120AD30", VA = "0x120AD30")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015DE")]
	[Address(RVA = "0x120AF44", Offset = "0x120AF44", VA = "0x120AF44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015DF")]
	[Address(RVA = "0x120AFC4", Offset = "0x120AFC4", VA = "0x120AFC4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60015E0")]
	[Address(RVA = "0x120B058", Offset = "0x120B058", VA = "0x120B058")]
	[BeforeRenderOrder(101)]
	private void OnBeforeRenderLineVisual()
	{
	}

	[Token(Token = "0x60015E1")]
	[Address(RVA = "0x120B2B0", Offset = "0x120B2B0", VA = "0x120B2B0")]
	private void CheckForInteractable()
	{
	}

	[Token(Token = "0x60015E2")]
	[Address(RVA = "0x120B664", Offset = "0x120B664", VA = "0x120B664")]
	private void SetCarvePoint(XRBaseInteractable interactable)
	{
	}

	[Token(Token = "0x60015E3")]
	[Address(RVA = "0x120ADC8", Offset = "0x120ADC8", VA = "0x120ADC8")]
	public void ActivateCheck(bool t)
	{
	}

	[Token(Token = "0x60015E4")]
	[Address(RVA = "0x120B41C", Offset = "0x120B41C", VA = "0x120B41C")]
	private void ActivateLine()
	{
	}

	[Token(Token = "0x60015E5")]
	[Address(RVA = "0x120B830", Offset = "0x120B830", VA = "0x120B830")]
	private void DeActivateLine()
	{
	}

	[Token(Token = "0x60015E6")]
	[Address(RVA = "0x120BACC", Offset = "0x120BACC", VA = "0x120BACC")]
	public XRPointerBezier()
	{
	}
}
[Token(Token = "0x2000444")]
public class XRPointerLine : MonoBehaviour
{
	[Token(Token = "0x60015E7")]
	[Address(RVA = "0x120CBE0", Offset = "0x120CBE0", VA = "0x120CBE0")]
	private void Start()
	{
	}

	[Token(Token = "0x60015E8")]
	[Address(RVA = "0x120CBE4", Offset = "0x120CBE4", VA = "0x120CBE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60015E9")]
	[Address(RVA = "0x120CBE8", Offset = "0x120CBE8", VA = "0x120CBE8")]
	public XRPointerLine()
	{
	}
}
[Token(Token = "0x2000445")]
public class XRPointerTarget : MonoBehaviour
{
	[Token(Token = "0x4001201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pointerLock;

	[Token(Token = "0x60015EA")]
	[Address(RVA = "0x120CBF0", Offset = "0x120CBF0", VA = "0x120CBF0")]
	public XRPointerTarget()
	{
	}
}
[Token(Token = "0x2000446")]
public class XRPointerVisuals : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000447")]
	public class PointerData
	{
		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HandAbilityBase ability;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material material;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve activeCurve;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float activeCurveMultiplier;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient activeColorWay;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject reticle;

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x120D0E8", Offset = "0x120D0E8", VA = "0x120D0E8")]
		public PointerData()
		{
		}
	}

	[Token(Token = "0x4001202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PointerData[] pointers;

	[Token(Token = "0x4001203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PointerData defaultSettings;

	[Token(Token = "0x4001204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LineRenderer castLine;

	[Token(Token = "0x4001205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PointerData currentData;

	[Token(Token = "0x170002B2")]
	public PointerData CurrentData
	{
		[Token(Token = "0x60015EB")]
		[Address(RVA = "0x120CBF8", Offset = "0x120CBF8", VA = "0x120CBF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0x120CC00", Offset = "0x120CC00", VA = "0x120CC00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0x120CC40", Offset = "0x120CC40", VA = "0x120CC40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60015EE")]
	[Address(RVA = "0x120CD38", Offset = "0x120CD38", VA = "0x120CD38")]
	public void OnAbilityHover(SelectHandAbility handAbility)
	{
	}

	[Token(Token = "0x60015EF")]
	[Address(RVA = "0x120CC20", Offset = "0x120CC20", VA = "0x120CC20")]
	public void OnAbilityDeactivated(SelectHandAbility handAbility)
	{
	}

	[Token(Token = "0x60015F0")]
	[Address(RVA = "0x120CE54", Offset = "0x120CE54", VA = "0x120CE54")]
	private void UpdateVisual()
	{
	}

	[Token(Token = "0x60015F1")]
	[Address(RVA = "0x120D010", Offset = "0x120D010", VA = "0x120D010")]
	[ContextMenu("TestMagnet")]
	public void TestMagnet()
	{
	}

	[Token(Token = "0x60015F2")]
	[Address(RVA = "0x120D048", Offset = "0x120D048", VA = "0x120D048")]
	[ContextMenu("TestResources")]
	public void TestResources()
	{
	}

	[Token(Token = "0x60015F3")]
	[Address(RVA = "0x120D084", Offset = "0x120D084", VA = "0x120D084")]
	[ContextMenu("TestInscription")]
	public void TestInscription()
	{
	}

	[Token(Token = "0x60015F4")]
	[Address(RVA = "0x120D0C0", Offset = "0x120D0C0", VA = "0x120D0C0")]
	[ContextMenu("TestDefault")]
	public void TestDefault()
	{
	}

	[Token(Token = "0x60015F5")]
	[Address(RVA = "0x120D0E0", Offset = "0x120D0E0", VA = "0x120D0E0")]
	public XRPointerVisuals()
	{
	}
}
[Token(Token = "0x2000448")]
[DefaultExecutionOrder(100)]
[DisallowMultipleComponent]
[RequireComponent(typeof(LineRenderer))]
[AddComponentMenu("XR/Helpers/XR Interactor Line Visual")]
public class XRCastLineVisual : MonoBehaviour, IXRCustomReticleProvider
{
	[Token(Token = "0x400120C")]
	private const float k_MinLineWidth = 0.0001f;

	[Token(Token = "0x400120D")]
	private const float k_MaxLineWidth = 0.05f;

	[Token(Token = "0x400120E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Range(0.0001f, 0.05f)]
	[UnityEngine.Tooltip("Controls the width of the line.")]
	private float m_LineWidth;

	[Token(Token = "0x400120F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls which source is used to determine the length of the line. Set to true to use the Line Length set by this behavior. Set to false have the length of the line determined by the interactor.")]
	private bool m_OverrideInteractorLineLength;

	[Token(Token = "0x4001210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the length of the line when overriding.")]
	private float m_LineLength;

	[Token(Token = "0x4001211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the relative width of the line from start to end.")]
	private AnimationCurve m_WidthCurve;

	[Token(Token = "0x4001212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the color of the line as a gradient from start to end to indicate a valid state.")]
	private Gradient m_ValidColorGradient;

	[Token(Token = "0x4001213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the color of the line as a gradient from start to end to indicate an invalid state.")]
	private Gradient m_InvalidColorGradient;

	[Token(Token = "0x4001214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls whether the rendered segments will be delayed from and smoothly follow the target segments.")]
	private bool m_SmoothMovement;

	[Token(Token = "0x4001215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Controls the speed that the rendered segments will follow the target segments when Smooth Movement is enabled.")]
	[SerializeField]
	private float m_FollowTightness;

	[Token(Token = "0x4001216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the threshold distance between line points at two consecutive frames to snap rendered segments to target segments when Smooth Movement is enabled.")]
	private float m_SnapThresholdDistance;

	[Token(Token = "0x4001217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Stores the reticle that will appear at the end of the line when it is valid.")]
	[SerializeField]
	private GameObject m_Reticle;

	[Token(Token = "0x4001218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("Controls whether the line will always be cut short by this behavior at the first raycast hit, even when invalid.")]
	[SerializeField]
	private bool m_StopLineAtFirstRaycastHit;

	[Token(Token = "0x4001219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 m_ReticlePos;

	[Token(Token = "0x400121A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 m_ReticleNormal;

	[Token(Token = "0x400121B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int m_EndPositionInLine;

	[Token(Token = "0x400121C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_SnapCurve;

	[Token(Token = "0x400121D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool m_PerformSetup;

	[Token(Token = "0x400121E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject m_ReticleToUse;

	[Token(Token = "0x400121F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private LineRenderer m_LineRenderer;

	[Token(Token = "0x4001220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ILineRenderable m_LineRenderable;

	[Token(Token = "0x4001221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3[] m_TargetPoints;

	[Token(Token = "0x4001222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int m_NoTargetPoints;

	[Token(Token = "0x4001223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3[] m_RenderPoints;

	[Token(Token = "0x4001224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int m_NoRenderPoints;

	[Token(Token = "0x4001225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3[] m_PreviousRenderPoints;

	[Token(Token = "0x4001226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int m_NoPreviousRenderPoints;

	[Token(Token = "0x4001227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private readonly Vector3[] m_ClearArray;

	[Token(Token = "0x4001228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject m_CustomReticle;

	[Token(Token = "0x4001229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool m_CustomReticleAttached;

	[Token(Token = "0x170002B3")]
	public float lineWidth
	{
		[Token(Token = "0x60015F7")]
		[Address(RVA = "0x120D0F0", Offset = "0x120D0F0", VA = "0x120D0F0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60015F8")]
		[Address(RVA = "0x120D0F8", Offset = "0x120D0F8", VA = "0x120D0F8")]
		set
		{
		}
	}

	[Token(Token = "0x170002B4")]
	public bool overrideInteractorLineLength
	{
		[Token(Token = "0x60015F9")]
		[Address(RVA = "0x120D108", Offset = "0x120D108", VA = "0x120D108")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x120D110", Offset = "0x120D110", VA = "0x120D110")]
		set
		{
		}
	}

	[Token(Token = "0x170002B5")]
	public float lineLength
	{
		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x120D11C", Offset = "0x120D11C", VA = "0x120D11C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x120D124", Offset = "0x120D124", VA = "0x120D124")]
		set
		{
		}
	}

	[Token(Token = "0x170002B6")]
	public AnimationCurve widthCurve
	{
		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x120D12C", Offset = "0x120D12C", VA = "0x120D12C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x120D134", Offset = "0x120D134", VA = "0x120D134")]
		set
		{
		}
	}

	[Token(Token = "0x170002B7")]
	public Gradient validColorGradient
	{
		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x120D158", Offset = "0x120D158", VA = "0x120D158")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001600")]
		[Address(RVA = "0x120D160", Offset = "0x120D160", VA = "0x120D160")]
		set
		{
		}
	}

	[Token(Token = "0x170002B8")]
	public Gradient invalidColorGradient
	{
		[Token(Token = "0x6001601")]
		[Address(RVA = "0x120D168", Offset = "0x120D168", VA = "0x120D168")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001602")]
		[Address(RVA = "0x120D170", Offset = "0x120D170", VA = "0x120D170")]
		set
		{
		}
	}

	[Token(Token = "0x170002B9")]
	public bool smoothMovement
	{
		[Token(Token = "0x6001603")]
		[Address(RVA = "0x120D178", Offset = "0x120D178", VA = "0x120D178")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001604")]
		[Address(RVA = "0x120D180", Offset = "0x120D180", VA = "0x120D180")]
		set
		{
		}
	}

	[Token(Token = "0x170002BA")]
	public float followTightness
	{
		[Token(Token = "0x6001605")]
		[Address(RVA = "0x120D18C", Offset = "0x120D18C", VA = "0x120D18C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001606")]
		[Address(RVA = "0x120D194", Offset = "0x120D194", VA = "0x120D194")]
		set
		{
		}
	}

	[Token(Token = "0x170002BB")]
	public float snapThresholdDistance
	{
		[Token(Token = "0x6001607")]
		[Address(RVA = "0x120D19C", Offset = "0x120D19C", VA = "0x120D19C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001608")]
		[Address(RVA = "0x120D1A4", Offset = "0x120D1A4", VA = "0x120D1A4")]
		set
		{
		}
	}

	[Token(Token = "0x170002BC")]
	public GameObject reticle
	{
		[Token(Token = "0x6001609")]
		[Address(RVA = "0x120D1AC", Offset = "0x120D1AC", VA = "0x120D1AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600160A")]
		[Address(RVA = "0x120D1B4", Offset = "0x120D1B4", VA = "0x120D1B4")]
		set
		{
		}
	}

	[Token(Token = "0x170002BD")]
	public bool stopLineAtFirstRaycastHit
	{
		[Token(Token = "0x600160B")]
		[Address(RVA = "0x120D1BC", Offset = "0x120D1BC", VA = "0x120D1BC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600160C")]
		[Address(RVA = "0x120D1C4", Offset = "0x120D1C4", VA = "0x120D1C4")]
		set
		{
		}
	}

	[Token(Token = "0x170002BE")]
	public Vector3 ReticlePosition
	{
		[Token(Token = "0x600160D")]
		[Address(RVA = "0x120D1D0", Offset = "0x120D1D0", VA = "0x120D1D0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170002BF")]
	public Vector3 ReticleNormal
	{
		[Token(Token = "0x600160E")]
		[Address(RVA = "0x120D1DC", Offset = "0x120D1DC", VA = "0x120D1DC")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600160F")]
	[Address(RVA = "0x120D1E8", Offset = "0x120D1E8", VA = "0x120D1E8")]
	protected void Reset()
	{
	}

	[Token(Token = "0x6001610")]
	[Address(RVA = "0x120D3CC", Offset = "0x120D3CC", VA = "0x120D3CC")]
	protected void OnValidate()
	{
	}

	[Token(Token = "0x6001611")]
	[Address(RVA = "0x120D3D0", Offset = "0x120D3D0", VA = "0x120D3D0")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6001612")]
	[Address(RVA = "0x120D490", Offset = "0x120D490", VA = "0x120D490")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x6001613")]
	[Address(RVA = "0x120D530", Offset = "0x120D530", VA = "0x120D530")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6001614")]
	[Address(RVA = "0x120D31C", Offset = "0x120D31C", VA = "0x120D31C")]
	private void ClearLineRenderer()
	{
	}

	[Token(Token = "0x6001615")]
	[Address(RVA = "0x120D610", Offset = "0x120D610", VA = "0x120D610")]
	[BeforeRenderOrder(101)]
	private void OnBeforeRenderLineVisual()
	{
	}

	[Token(Token = "0x6001616")]
	[Address(RVA = "0x120D614", Offset = "0x120D614", VA = "0x120D614")]
	private void UpdateLineVisual()
	{
	}

	[Token(Token = "0x6001617")]
	[Address(RVA = "0x120D364", Offset = "0x120D364", VA = "0x120D364")]
	private void UpdateSettings()
	{
	}

	[Token(Token = "0x6001618")]
	[Address(RVA = "0x120D214", Offset = "0x120D214", VA = "0x120D214")]
	private bool TryFindLineRenderer()
	{
		return default(bool);
	}

	[Token(Token = "0x6001619")]
	[Address(RVA = "0x120DFD0", Offset = "0x120DFD0", VA = "0x120DFD0", Slot = "4")]
	public bool AttachCustomReticle(GameObject reticleInstance)
	{
		return default(bool);
	}

	[Token(Token = "0x600161A")]
	[Address(RVA = "0x120E0F4", Offset = "0x120E0F4", VA = "0x120E0F4", Slot = "5")]
	public bool RemoveCustomReticle()
	{
		return default(bool);
	}

	[Token(Token = "0x600161B")]
	[Address(RVA = "0x120E1D4", Offset = "0x120E1D4", VA = "0x120E1D4")]
	public XRCastLineVisual()
	{
	}
}
[Token(Token = "0x2000449")]
[AddComponentMenu("XR/XR Collectable Interactable")]
[DisallowMultipleComponent]
[SelectionBase]
public class XRCollectableInteractable : XRBaseInteractable, ICollactableResource
{
	[Token(Token = "0x200044A")]
	[CompilerGenerated]
	private sealed class <MagnetCoroutine>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRCollectableInteractable <>4__this;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <count>5__2;

		[Token(Token = "0x170002C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600162D")]
			[Address(RVA = "0x120F3A4", Offset = "0x120F3A4", VA = "0x120F3A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600162F")]
			[Address(RVA = "0x120F3EC", Offset = "0x120F3EC", VA = "0x120F3EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0x120EDCC", Offset = "0x120EDCC", VA = "0x120EDCC")]
		[DebuggerHidden]
		public <MagnetCoroutine>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0x120F284", Offset = "0x120F284", VA = "0x120F284", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0x120F288", Offset = "0x120F288", VA = "0x120F288", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0x120F3AC", Offset = "0x120F3AC", VA = "0x120F3AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400122A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public AmountResources resource;

	[Token(Token = "0x400122B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool breakable;

	[Token(Token = "0x400122C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Collectable followResourcePrefab;

	[Token(Token = "0x400122D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform resourceParent;

	[Token(Token = "0x400122E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject magnetParticle;

	[Token(Token = "0x400122F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool interval;

	[Token(Token = "0x4001230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public AnimationCurve durationEase;

	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Vector3 reticleOffset;

	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public UnityEvent onMagnet;

	[Token(Token = "0x4001233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public XRCollectableReticle reticle;

	[Token(Token = "0x4001234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Renderer renderer;

	[Token(Token = "0x4001235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Color startColor;

	[Token(Token = "0x4001236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private bool canMagnet;

	[Token(Token = "0x4001237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private PlayerInventory inventory;

	[Token(Token = "0x4001238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private readonly string colorHash;

	[Token(Token = "0x170002C0")]
	public bool CanMagnet
	{
		[Token(Token = "0x600161C")]
		[Address(RVA = "0x120E644", Offset = "0x120E644", VA = "0x120E644", Slot = "39")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600161D")]
		[Address(RVA = "0x120E64C", Offset = "0x120E64C", VA = "0x120E64C")]
		set
		{
		}
	}

	[Token(Token = "0x170002C1")]
	public XRBaseInteractable Interactable
	{
		[Token(Token = "0x600161E")]
		[Address(RVA = "0x120E658", Offset = "0x120E658", VA = "0x120E658", Slot = "40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002C2")]
	public Resource Resource
	{
		[Token(Token = "0x600161F")]
		[Address(RVA = "0x120E65C", Offset = "0x120E65C", VA = "0x120E65C", Slot = "41")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001620")]
	[Address(RVA = "0x120E678", Offset = "0x120E678", VA = "0x120E678", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001621")]
	[Address(RVA = "0x120E944", Offset = "0x120E944", VA = "0x120E944", Slot = "18")]
	protected override void OnHoverEntered(HoverEnterEventArgs args)
	{
	}

	[Token(Token = "0x6001622")]
	[Address(RVA = "0x120EA04", Offset = "0x120EA04", VA = "0x120EA04", Slot = "20")]
	protected override void OnHoverExited(HoverExitEventArgs args)
	{
	}

	[Token(Token = "0x6001623")]
	[Address(RVA = "0x120EA8C", Offset = "0x120EA8C", VA = "0x120EA8C", Slot = "24")]
	protected override void OnSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x6001624")]
	[Address(RVA = "0x120EAAC", Offset = "0x120EAAC", VA = "0x120EAAC", Slot = "42")]
	public void Magnet()
	{
	}

	[Token(Token = "0x6001625")]
	[Address(RVA = "0x120EB78", Offset = "0x120EB78", VA = "0x120EB78")]
	private void MagnetCollectable()
	{
	}

	[Token(Token = "0x6001626")]
	[Address(RVA = "0x120EB04", Offset = "0x120EB04", VA = "0x120EB04")]
	[IteratorStateMachine(typeof(<MagnetCoroutine>d__28))]
	private IEnumerator MagnetCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001627")]
	[Address(RVA = "0x120EDF4", Offset = "0x120EDF4", VA = "0x120EDF4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001628")]
	[Address(RVA = "0x120F1DC", Offset = "0x120F1DC", VA = "0x120F1DC", Slot = "43")]
	protected virtual void OnMagnet()
	{
	}

	[Token(Token = "0x6001629")]
	[Address(RVA = "0x120F1E0", Offset = "0x120F1E0", VA = "0x120F1E0")]
	public XRCollectableInteractable()
	{
	}
}
[Token(Token = "0x200044B")]
public class XRCollectableResourceGroup : XRBaseInteractable, ICollactableResource
{
	[Token(Token = "0x200044D")]
	[CompilerGenerated]
	private sealed class <MagnetCoroutine>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRCollectableResourceGroup <>4__this;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <count>5__2;

		[Token(Token = "0x170002CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600164D")]
			[Address(RVA = "0x12107C8", Offset = "0x12107C8", VA = "0x12107C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600164F")]
			[Address(RVA = "0x1210810", Offset = "0x1210810", VA = "0x1210810", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x121020C", Offset = "0x121020C", VA = "0x121020C")]
		[DebuggerHidden]
		public <MagnetCoroutine>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0x12106A4", Offset = "0x12106A4", VA = "0x12106A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x12106A8", Offset = "0x12106A8", VA = "0x12106A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0x12107D0", Offset = "0x12107D0", VA = "0x12107D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400123D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private bool _findResourcesInChildren;

	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public List<LimitedResource> limitedResources;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Resource resourceType;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Collectable followResourcePrefab;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject magnetParticle;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool interval;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public AnimationCurve durationEase;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Vector3 reticleOffset;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public UnityEvent onMagnet;

	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public XRCollectableReticle reticle;

	[Token(Token = "0x4001247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Transform pointerTarget;

	[Token(Token = "0x4001248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public LODGroup[] lodGroups;

	[Token(Token = "0x4001249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private bool canMagnet;

	[Token(Token = "0x400124A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private PlayerInventory inventory;

	[Token(Token = "0x170002C5")]
	public bool CanMagnet
	{
		[Token(Token = "0x6001630")]
		[Address(RVA = "0x120F3F4", Offset = "0x120F3F4", VA = "0x120F3F4", Slot = "39")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001631")]
		[Address(RVA = "0x120F6F4", Offset = "0x120F6F4", VA = "0x120F6F4")]
		set
		{
		}
	}

	[Token(Token = "0x170002C6")]
	public bool IsResourceAvailable
	{
		[Token(Token = "0x6001632")]
		[Address(RVA = "0x120F424", Offset = "0x120F424", VA = "0x120F424")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002C7")]
	public int ResourceAmount
	{
		[Token(Token = "0x6001633")]
		[Address(RVA = "0x120F700", Offset = "0x120F700", VA = "0x120F700")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002C8")]
	public int AvailableResourceAmount
	{
		[Token(Token = "0x6001634")]
		[Address(RVA = "0x120F748", Offset = "0x120F748", VA = "0x120F748")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002C9")]
	public float AvailableResourceFactor
	{
		[Token(Token = "0x6001635")]
		[Address(RVA = "0x120F868", Offset = "0x120F868", VA = "0x120F868")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170002CA")]
	protected LimitedResource CurrentResource
	{
		[Token(Token = "0x6001636")]
		[Address(RVA = "0x120F8BC", Offset = "0x120F8BC", VA = "0x120F8BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002CB")]
	public bool IsVisible
	{
		[Token(Token = "0x6001637")]
		[Address(RVA = "0x120F52C", Offset = "0x120F52C", VA = "0x120F52C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002CC")]
	public XRBaseInteractable Interactable
	{
		[Token(Token = "0x6001638")]
		[Address(RVA = "0x120FA94", Offset = "0x120FA94", VA = "0x120FA94", Slot = "40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002CD")]
	public Resource Resource
	{
		[Token(Token = "0x6001639")]
		[Address(RVA = "0x120FA98", Offset = "0x120FA98", VA = "0x120FA98", Slot = "41")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600163A")]
	[Address(RVA = "0x120FAA0", Offset = "0x120FAA0", VA = "0x120FAA0", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600163B")]
	[Address(RVA = "0x120FC84", Offset = "0x120FC84", VA = "0x120FC84", Slot = "18")]
	protected override void OnHoverEntered(HoverEnterEventArgs args)
	{
	}

	[Token(Token = "0x600163C")]
	[Address(RVA = "0x120FDE0", Offset = "0x120FDE0", VA = "0x120FDE0", Slot = "20")]
	protected override void OnHoverExited(HoverExitEventArgs args)
	{
	}

	[Token(Token = "0x600163D")]
	[Address(RVA = "0x120FF0C", Offset = "0x120FF0C", VA = "0x120FF0C", Slot = "24")]
	protected override void OnSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x600163E")]
	[Address(RVA = "0x120FF2C", Offset = "0x120FF2C", VA = "0x120FF2C", Slot = "42")]
	public void Magnet()
	{
	}

	[Token(Token = "0x600163F")]
	[Address(RVA = "0x120FFFC", Offset = "0x120FFFC", VA = "0x120FFFC")]
	private void MagnetCollectable()
	{
	}

	[Token(Token = "0x6001640")]
	[Address(RVA = "0x120FF88", Offset = "0x120FF88", VA = "0x120FF88")]
	[IteratorStateMachine(typeof(<MagnetCoroutine>d__39))]
	private IEnumerator MagnetCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001641")]
	[Address(RVA = "0x1210234", Offset = "0x1210234", VA = "0x1210234")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001642")]
	[Address(RVA = "0x1210558", Offset = "0x1210558", VA = "0x1210558", Slot = "43")]
	protected virtual void OnMagnet()
	{
	}

	[Token(Token = "0x6001643")]
	[Address(RVA = "0x121055C", Offset = "0x121055C", VA = "0x121055C")]
	public XRCollectableResourceGroup()
	{
	}
}
[Token(Token = "0x200044E")]
public class XRCollectableReticle : MonoBehaviour
{
	[Token(Token = "0x4001254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Resource resource;

	[Token(Token = "0x4001255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI currentText;

	[Token(Token = "0x4001256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI maxText;

	[Token(Token = "0x4001257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Image fullImage;

	[Token(Token = "0x4001258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform parent;

	[Token(Token = "0x170002D0")]
	public Transform Parent
	{
		[Token(Token = "0x6001650")]
		[Address(RVA = "0x1210818", Offset = "0x1210818", VA = "0x1210818")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001651")]
	[Address(RVA = "0x1210820", Offset = "0x1210820", VA = "0x1210820")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001652")]
	[Address(RVA = "0x120E9D0", Offset = "0x120E9D0", VA = "0x120E9D0")]
	public void Show(Transform owner)
	{
	}

	[Token(Token = "0x6001653")]
	[Address(RVA = "0x120EA68", Offset = "0x120EA68", VA = "0x120EA68")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001654")]
	[Address(RVA = "0x120F140", Offset = "0x120F140", VA = "0x120F140")]
	public void UpdateValues(float current, int max)
	{
	}

	[Token(Token = "0x6001655")]
	[Address(RVA = "0x1210824", Offset = "0x1210824", VA = "0x1210824")]
	public XRCollectableReticle()
	{
	}
}
[Token(Token = "0x200044F")]
public class XRCollectableReticleController : MonoBehaviour
{
	[Token(Token = "0x4001259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XRCollectableReticle[] reticles;

	[Token(Token = "0x400125A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static XRCollectableReticleController instance;

	[Token(Token = "0x170002D1")]
	public static XRCollectableReticleController Instance
	{
		[Token(Token = "0x6001656")]
		[Address(RVA = "0x120E794", Offset = "0x120E794", VA = "0x120E794")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001657")]
	[Address(RVA = "0x121082C", Offset = "0x121082C", VA = "0x121082C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001658")]
	[Address(RVA = "0x120E868", Offset = "0x120E868", VA = "0x120E868")]
	public XRCollectableReticle GetReticle(Resource resource)
	{
		return null;
	}

	[Token(Token = "0x6001659")]
	[Address(RVA = "0x1210944", Offset = "0x1210944", VA = "0x1210944")]
	public XRCollectableReticleController()
	{
	}
}
[Token(Token = "0x2000450")]
public class XRControllerVelocity : MonoBehaviour
{
	[Token(Token = "0x400125B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InputActionProperty velocityProperty;

	[Token(Token = "0x400125C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private InputActionProperty angluarVelocityProperty;

	[Token(Token = "0x400125D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform movementReference;

	[Token(Token = "0x170002D2")]
	public InputActionProperty VelocityProperty
	{
		[Token(Token = "0x600165A")]
		[Address(RVA = "0x121094C", Offset = "0x121094C", VA = "0x121094C")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x600165B")]
		[Address(RVA = "0x1210960", Offset = "0x1210960", VA = "0x1210960")]
		set
		{
		}
	}

	[Token(Token = "0x170002D3")]
	public InputActionProperty AngluarVelocityProperty
	{
		[Token(Token = "0x600165C")]
		[Address(RVA = "0x1210980", Offset = "0x1210980", VA = "0x1210980")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x600165D")]
		[Address(RVA = "0x1210994", Offset = "0x1210994", VA = "0x1210994")]
		set
		{
		}
	}

	[Token(Token = "0x170002D4")]
	public Vector3 Velocity
	{
		[Token(Token = "0x600165E")]
		[Address(RVA = "0x12109B4", Offset = "0x12109B4", VA = "0x12109B4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170002D5")]
	public Vector3 AngularVelocity
	{
		[Token(Token = "0x600165F")]
		[Address(RVA = "0x1210A0C", Offset = "0x1210A0C", VA = "0x1210A0C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170002D6")]
	public Vector3 VelocityCameraRelative
	{
		[Token(Token = "0x6001660")]
		[Address(RVA = "0x1210A64", Offset = "0x1210A64", VA = "0x1210A64")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001661")]
	[Address(RVA = "0x1210B9C", Offset = "0x1210B9C", VA = "0x1210B9C")]
	public XRControllerVelocity()
	{
	}
}
[Token(Token = "0x2000451")]
public class XRDashTeleportation : TeleportationProvider
{
	[Token(Token = "0x2000452")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass8_0
	{
		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public XRRig xrRig;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRDashTeleportation <>4__this;

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x1210CCC", Offset = "0x1210CCC", VA = "0x1210CCC")]
		public <>c__DisplayClass8_0()
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0x1210CD4", Offset = "0x1210CD4", VA = "0x1210CD4")]
		internal void <DoDash>b__0()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x1210E5C", Offset = "0x1210E5C", VA = "0x1210E5C")]
		internal void <DoDash>b__1()
		{
		}
	}

	[Token(Token = "0x2000453")]
	[CompilerGenerated]
	private sealed class <DoDash>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRDashTeleportation <>4__this;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass8_0 <>8__1;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsed>5__2;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <startPoint>5__3;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion <startRotation>5__4;

		[Token(Token = "0x170002D7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600166C")]
			[Address(RVA = "0x12116BC", Offset = "0x12116BC", VA = "0x12116BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0x1211704", Offset = "0x1211704", VA = "0x1211704", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0x1210C8C", Offset = "0x1210C8C", VA = "0x1210C8C")]
		[DebuggerHidden]
		public <DoDash>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x1210FE4", Offset = "0x1210FE4", VA = "0x1210FE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x1210FE8", Offset = "0x1210FE8", VA = "0x1210FE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0x12116C4", Offset = "0x12116C4", VA = "0x12116C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400125E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float dashTime;

	[Token(Token = "0x400125F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private bool rotate;

	[Token(Token = "0x4001260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool instantRotation;

	[Token(Token = "0x4001261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool onEnd;

	[Token(Token = "0x4001262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool fade;

	[Token(Token = "0x4001263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isDashing;

	[Token(Token = "0x6001662")]
	[Address(RVA = "0x1210BA4", Offset = "0x1210BA4", VA = "0x1210BA4", Slot = "5")]
	public override bool QueueTeleportRequest(TeleportRequest teleportRequest)
	{
		return default(bool);
	}

	[Token(Token = "0x6001663")]
	[Address(RVA = "0x1210C88", Offset = "0x1210C88", VA = "0x1210C88", Slot = "6")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001664")]
	[Address(RVA = "0x1210C14", Offset = "0x1210C14", VA = "0x1210C14")]
	[IteratorStateMachine(typeof(<DoDash>d__8))]
	private IEnumerator DoDash()
	{
		return null;
	}

	[Token(Token = "0x6001665")]
	[Address(RVA = "0x1210CB4", Offset = "0x1210CB4", VA = "0x1210CB4")]
	public XRDashTeleportation()
	{
	}
}
[Token(Token = "0x2000454")]
public class XRDollyMove : LocomotionProvider, IXRDollyMove
{
	[Token(Token = "0x400126D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("The Input System Action that will be used to read Move data from the hand controller. Must be a Value Vector2 Control.")]
	[SerializeField]
	private InputActionProperty handMoveAction;

	[Token(Token = "0x400126E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("The speed, in units per second, to move vertical.")]
	[SerializeField]
	private float verticalMoveSpeed;

	[Token(Token = "0x400126F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float maxHeight;

	[Token(Token = "0x4001270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float minHeight;

	[Token(Token = "0x4001271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform cinemachineBrain;

	[Token(Token = "0x4001272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform playerHead;

	[Token(Token = "0x4001273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private bool verticalMove;

	[Token(Token = "0x4001274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private Vector3 cameraOffset;

	[Token(Token = "0x4001275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 verticalOffset;

	[Token(Token = "0x4001276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 lastBrainPosition;

	[Token(Token = "0x4001277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool moving;

	[Token(Token = "0x4001278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 distanceDiff;

	[Token(Token = "0x170002D9")]
	public InputActionProperty HandMoveAction
	{
		[Token(Token = "0x600166F")]
		[Address(RVA = "0x121170C", Offset = "0x121170C", VA = "0x121170C")]
		get
		{
			return default(InputActionProperty);
		}
		[Token(Token = "0x6001670")]
		[Address(RVA = "0x1211720", Offset = "0x1211720", VA = "0x1211720")]
		set
		{
		}
	}

	[Token(Token = "0x170002DA")]
	public float VerticalMoveSpeed
	{
		[Token(Token = "0x6001671")]
		[Address(RVA = "0x12117F4", Offset = "0x12117F4", VA = "0x12117F4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001672")]
		[Address(RVA = "0x12117FC", Offset = "0x12117FC", VA = "0x12117FC")]
		set
		{
		}
	}

	[Token(Token = "0x170002DB")]
	public bool VerticalMove
	{
		[Token(Token = "0x6001673")]
		[Address(RVA = "0x1211804", Offset = "0x1211804", VA = "0x1211804")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001674")]
		[Address(RVA = "0x121180C", Offset = "0x121180C", VA = "0x121180C")]
		set
		{
		}
	}

	[Token(Token = "0x6001675")]
	[Address(RVA = "0x1211818", Offset = "0x1211818", VA = "0x1211818", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001676")]
	[Address(RVA = "0x1211994", Offset = "0x1211994", VA = "0x1211994")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001677")]
	[Address(RVA = "0x1211A7C", Offset = "0x1211A7C", VA = "0x1211A7C")]
	protected void Update()
	{
	}

	[Token(Token = "0x6001678")]
	[Address(RVA = "0x1211D7C", Offset = "0x1211D7C", VA = "0x1211D7C", Slot = "9")]
	protected virtual Vector3 ComputeVerticalMove(Vector2 input)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001679")]
	[Address(RVA = "0x1211AE0", Offset = "0x1211AE0", VA = "0x1211AE0")]
	private Vector2 ReadVerticalInput()
	{
		return default(Vector2);
	}

	[Token(Token = "0x600167A")]
	[Address(RVA = "0x1211750", Offset = "0x1211750", VA = "0x1211750")]
	private void SetInputActionProperty(ref InputActionProperty property, InputActionProperty value)
	{
	}

	[Token(Token = "0x600167B")]
	[Address(RVA = "0x1211E68", Offset = "0x1211E68", VA = "0x1211E68", Slot = "5")]
	public void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2)
	{
	}

	[Token(Token = "0x600167C")]
	[Address(RVA = "0x1212248", Offset = "0x1212248", VA = "0x1212248")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600167D")]
	[Address(RVA = "0x1211B70", Offset = "0x1211B70", VA = "0x1211B70", Slot = "6")]
	public void Move(Vector3 brainPosition, Vector3 verticalTranslation)
	{
	}

	[Token(Token = "0x600167E")]
	[Address(RVA = "0x12120C4", Offset = "0x12120C4", VA = "0x12120C4", Slot = "7")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x600167F")]
	[Address(RVA = "0x1212334", Offset = "0x1212334", VA = "0x1212334", Slot = "8")]
	public void ResetStartPosition()
	{
	}

	[Token(Token = "0x6001680")]
	[Address(RVA = "0x1212338", Offset = "0x1212338", VA = "0x1212338")]
	public void UpdateBrainToRigOffset()
	{
	}

	[Token(Token = "0x6001681")]
	[Address(RVA = "0x12123B8", Offset = "0x12123B8", VA = "0x12123B8")]
	public XRDollyMove()
	{
	}
}
[Token(Token = "0x2000455")]
public class XRDominantHandConfigManager : MonoBehaviour
{
	[Token(Token = "0x6001682")]
	[Address(RVA = "0x12123EC", Offset = "0x12123EC", VA = "0x12123EC")]
	public XRDominantHandConfigManager()
	{
	}
}
[Token(Token = "0x2000456")]
public class XRDominantHandSwitcher : MonoBehaviour
{
	[Token(Token = "0x400127A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Right Hand")]
	[SerializeField]
	private Transform rightHandTransform;

	[Token(Token = "0x400127B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform rightHandAnchorTransform;

	[Token(Token = "0x400127C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ActionBasedController rightHandController;

	[Token(Token = "0x400127D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private XRControllerVelocity rightHandVelocity;

	[Token(Token = "0x400127E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private XRNodeHaptics rightHandNodeHaptics;

	[Token(Token = "0x400127F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ThrowController rightHandThrowController;

	[Token(Token = "0x4001280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private InputActionProperty leftHandAimInputAction;

	[Token(Token = "0x4001281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private InputActionProperty rightHandAimInputAction;

	[Token(Token = "0x4001282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AlchemyAbility rightHandAlchemyAbility;

	[Token(Token = "0x4001283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private InputActionReference rightHandAlchemyCastInputAction;

	[Token(Token = "0x4001284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private InputActionProperty rightHandSelectInputAction;

	[Token(Token = "0x4001285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private InputActionProperty rightHandMagnetInputAction;

	[Token(Token = "0x4001286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private SwipeDetector rightHandSwipeDetector;

	[Token(Token = "0x4001287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Left Hand")]
	[SerializeField]
	private Transform leftHandTransform;

	[Token(Token = "0x4001288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Transform leftHandAnchorTransform;

	[Token(Token = "0x4001289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private ActionBasedController leftHandController;

	[Token(Token = "0x400128A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private XRControllerVelocity leftHandVelocity;

	[Token(Token = "0x400128B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private UnityXR_DeviceDetector leftHandDeviceDetector;

	[Token(Token = "0x400128C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private InputActionReference leftHandAlchemyCastInputAction;

	[Token(Token = "0x400128D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private InputActionProperty leftHandSelectInputAction;

	[Token(Token = "0x400128E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private InputActionProperty leftHandMagnetInputAction;

	[Token(Token = "0x400128F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private ActionXRInputProvider actionXRInputProvider;

	[Token(Token = "0x170002DC")]
	protected DominantHand CurrentDominantHand
	{
		[Token(Token = "0x6001683")]
		[Address(RVA = "0x12123F4", Offset = "0x12123F4", VA = "0x12123F4")]
		[CompilerGenerated]
		get
		{
			return default(DominantHand);
		}
		[Token(Token = "0x6001684")]
		[Address(RVA = "0x12123FC", Offset = "0x12123FC", VA = "0x12123FC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0x1212404", Offset = "0x1212404", VA = "0x1212404")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0x1212598", Offset = "0x1212598", VA = "0x1212598")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001687")]
	[Address(RVA = "0x12126D8", Offset = "0x12126D8", VA = "0x12126D8")]
	public void LoadDominantHand()
	{
	}

	[Token(Token = "0x6001688")]
	[Address(RVA = "0x1212764", Offset = "0x1212764", VA = "0x1212764")]
	public void SetDominantHand(DominantHand dominantHand)
	{
	}

	[Token(Token = "0x6001689")]
	[Address(RVA = "0x1212838", Offset = "0x1212838", VA = "0x1212838", Slot = "4")]
	protected virtual void SwitchHands()
	{
	}

	[Token(Token = "0x600168A")]
	[Address(RVA = "0x12128FC", Offset = "0x12128FC", VA = "0x12128FC", Slot = "5")]
	protected virtual void SwitchTransforms()
	{
	}

	[Token(Token = "0x600168B")]
	[Address(RVA = "0x1212B90", Offset = "0x1212B90", VA = "0x1212B90", Slot = "6")]
	protected virtual void SwitchSnapAction()
	{
	}

	[Token(Token = "0x600168C")]
	[Address(RVA = "0x1212B94", Offset = "0x1212B94", VA = "0x1212B94", Slot = "7")]
	protected virtual void SetSelectAction()
	{
	}

	[Token(Token = "0x600168D")]
	[Address(RVA = "0x1212C90", Offset = "0x1212C90", VA = "0x1212C90", Slot = "8")]
	protected virtual void SwitchActionBasedControllers()
	{
	}

	[Token(Token = "0x600168E")]
	[Address(RVA = "0x1212FD8", Offset = "0x1212FD8", VA = "0x1212FD8", Slot = "9")]
	protected virtual void SwitchControllerVelocity()
	{
	}

	[Token(Token = "0x600168F")]
	[Address(RVA = "0x12130E0", Offset = "0x12130E0", VA = "0x12130E0", Slot = "10")]
	protected virtual void SwitchNodeHaptics()
	{
	}

	[Token(Token = "0x6001690")]
	[Address(RVA = "0x1213120", Offset = "0x1213120", VA = "0x1213120", Slot = "11")]
	protected virtual void SwitchThrowAction()
	{
	}

	[Token(Token = "0x6001691")]
	[Address(RVA = "0x121318C", Offset = "0x121318C", VA = "0x121318C", Slot = "12")]
	protected virtual void SwitchDeviceDetector()
	{
	}

	[Token(Token = "0x6001692")]
	[Address(RVA = "0x12131CC", Offset = "0x12131CC", VA = "0x12131CC", Slot = "13")]
	protected virtual void SwitchAlchemyAbility()
	{
	}

	[Token(Token = "0x6001693")]
	[Address(RVA = "0x1213214", Offset = "0x1213214", VA = "0x1213214", Slot = "14")]
	protected virtual void SwitchSwipeDetector()
	{
	}

	[Token(Token = "0x6001694")]
	[Address(RVA = "0x1213254", Offset = "0x1213254", VA = "0x1213254", Slot = "15")]
	protected virtual void SwitchActionInputProvider()
	{
	}

	[Token(Token = "0x6001695")]
	[Address(RVA = "0x1213270", Offset = "0x1213270", VA = "0x1213270")]
	public XRDominantHandSwitcher()
	{
	}
}
[Serializable]
[Token(Token = "0x2000457")]
public enum DominantHand
{
	[Token(Token = "0x4001291")]
	Default = -1,
	[Token(Token = "0x4001292")]
	Right,
	[Token(Token = "0x4001293")]
	Left
}
[Token(Token = "0x2000458")]
public class XRDraggable : XRBaseInteractable
{
	[Serializable]
	[Token(Token = "0x2000459")]
	public class MoveEvent : UnityEvent<float>
	{
		[Token(Token = "0x600169F")]
		[Address(RVA = "0x12138F4", Offset = "0x12138F4", VA = "0x12138F4")]
		public MoveEvent()
		{
		}
	}

	[Token(Token = "0x4001294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private CinemachinePathBase path;

	[Token(Token = "0x4001295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private CinemachinePathBase.PositionUnits units;

	[Token(Token = "0x4001296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[SerializeField]
	private float dragSpeed;

	[Token(Token = "0x4001297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x4001298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private int searchRadius;

	[Token(Token = "0x4001299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SerializeField]
	private int stepsPerSegment;

	[Token(Token = "0x400129A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public float zDamping;

	[Token(Token = "0x400129B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[Header("Events")]
	[SerializeField]
	private UnityEvent onPathCompleted;

	[Token(Token = "0x400129C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private MoveEvent onMove;

	[Token(Token = "0x400129D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Vector3 targetPosition;

	[Token(Token = "0x400129E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private Vector3 currentDirection;

	[Token(Token = "0x400129F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool isSelect;

	[Token(Token = "0x40012A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float m_PreviousPathPosition;

	[Token(Token = "0x40012A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float m_PathPosition;

	[Token(Token = "0x40012A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private Vector3 m_PreviousTargetPosition;

	[Token(Token = "0x40012A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float previousProgress;

	[Token(Token = "0x40012A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float currentProgress;

	[Token(Token = "0x170002DD")]
	public float Progress
	{
		[Token(Token = "0x6001696")]
		[Address(RVA = "0x1213278", Offset = "0x1213278", VA = "0x1213278")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001697")]
	[Address(RVA = "0x1213280", Offset = "0x1213280", VA = "0x1213280")]
	private void Start()
	{
	}

	[Token(Token = "0x6001698")]
	[Address(RVA = "0x121331C", Offset = "0x121331C", VA = "0x121331C", Slot = "22")]
	protected override void OnSelectEntered(SelectEnterEventArgs interactor)
	{
	}

	[Token(Token = "0x6001699")]
	[Address(RVA = "0x121333C", Offset = "0x121333C", VA = "0x121333C", Slot = "24")]
	protected override void OnSelectExited(SelectExitEventArgs interactor)
	{
	}

	[Token(Token = "0x600169A")]
	[Address(RVA = "0x1213358", Offset = "0x1213358", VA = "0x1213358", Slot = "14")]
	public override void ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase updatePhase)
	{
	}

	[Token(Token = "0x600169B")]
	[Address(RVA = "0x12133A4", Offset = "0x12133A4", VA = "0x12133A4")]
	private void UpdatePosition()
	{
	}

	[Token(Token = "0x600169C")]
	[Address(RVA = "0x12137EC", Offset = "0x12137EC", VA = "0x12137EC")]
	private void InvokeEvents()
	{
	}

	[Token(Token = "0x600169D")]
	[Address(RVA = "0x1213284", Offset = "0x1213284", VA = "0x1213284")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x600169E")]
	[Address(RVA = "0x121387C", Offset = "0x121387C", VA = "0x121387C")]
	public XRDraggable()
	{
	}
}
[Token(Token = "0x200045A")]
public class XRDraggableSpline : XRBaseInteractable
{
	[Token(Token = "0x200045B")]
	public enum DraggableType
	{
		[Token(Token = "0x40012BC")]
		Magnet,
		[Token(Token = "0x40012BD")]
		Inscription
	}

	[Token(Token = "0x40012A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Spline spline;

	[Token(Token = "0x40012A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float maxRayDistance;

	[Token(Token = "0x40012A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float closestDistance;

	[Token(Token = "0x40012A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public LayerMask layer;

	[Token(Token = "0x40012A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public int resolution;

	[Token(Token = "0x40012AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public SplineFollower splineFollower;

	[Token(Token = "0x40012AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public SplineControlledParticleSystem splineparticles;

	[Token(Token = "0x40012AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public SplineRenderer splineRenderer;

	[Token(Token = "0x40012AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Transform sphere;

	[Token(Token = "0x40012AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public DraggableType draggabletype;

	[Token(Token = "0x40012AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public bool checkDistance;

	[Token(Token = "0x40012B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public float interactionDistance;

	[Token(Token = "0x40012B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Transform interactionOrigin;

	[Token(Token = "0x40012B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	[Header("Events")]
	private UnityEvent onPathCompleted;

	[Token(Token = "0x40012B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private UnityEvent onSelect;

	[Token(Token = "0x40012B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private UnityEvent onDeselect;

	[Token(Token = "0x40012B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[Header("Obstacle")]
	public bool checkObstacle;

	[Token(Token = "0x40012B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public LayerMask obstacleLayer;

	[Token(Token = "0x40012B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public float checkRadius;

	[Token(Token = "0x40012B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private bool select;

	[Token(Token = "0x40012B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float currentPercentage;

	[Token(Token = "0x40012BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private bool isCompleted;

	[Token(Token = "0x60016A0")]
	[Address(RVA = "0x121393C", Offset = "0x121393C", VA = "0x121393C")]
	private void Start()
	{
	}

	[Token(Token = "0x60016A1")]
	[Address(RVA = "0x1213A44", Offset = "0x1213A44", VA = "0x1213A44")]
	public void Select()
	{
	}

	[Token(Token = "0x60016A2")]
	[Address(RVA = "0x1213AF8", Offset = "0x1213AF8", VA = "0x1213AF8")]
	public void Deselect()
	{
	}

	[Token(Token = "0x60016A3")]
	[Address(RVA = "0x1213BA0", Offset = "0x1213BA0", VA = "0x1213BA0", Slot = "14")]
	public override void ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase updatePhase)
	{
	}

	[Token(Token = "0x60016A4")]
	[Address(RVA = "0x1213940", Offset = "0x1213940", VA = "0x1213940")]
	public void ResetPosition()
	{
	}

	[Token(Token = "0x60016A5")]
	[Address(RVA = "0x1213F78", Offset = "0x1213F78", VA = "0x1213F78", Slot = "10")]
	public override bool IsHoverableBy(XRBaseInteractor interactor)
	{
		return default(bool);
	}

	[Token(Token = "0x60016A6")]
	[Address(RVA = "0x12140EC", Offset = "0x12140EC", VA = "0x12140EC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60016A7")]
	[Address(RVA = "0x1214220", Offset = "0x1214220", VA = "0x1214220")]
	public XRDraggableSpline()
	{
	}
}
[Token(Token = "0x200045C")]
public class XRHandMovementTrigger : MonoBehaviour
{
	[Token(Token = "0x40012BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XRControllerVelocity controller;

	[Token(Token = "0x40012BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minForceToMove;

	[Token(Token = "0x40012C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onMoveStarted;

	[Token(Token = "0x40012C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent onMove;

	[Token(Token = "0x40012C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onMoveFinished;

	[Token(Token = "0x40012C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[ReadOnly]
	public bool previousMoving;

	[Token(Token = "0x60016A8")]
	[Address(RVA = "0x1214258", Offset = "0x1214258", VA = "0x1214258")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016A9")]
	[Address(RVA = "0x1214260", Offset = "0x1214260", VA = "0x1214260")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60016AA")]
	[Address(RVA = "0x121427C", Offset = "0x121427C", VA = "0x121427C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60016AB")]
	[Address(RVA = "0x12143D0", Offset = "0x12143D0", VA = "0x12143D0")]
	public XRHandMovementTrigger()
	{
	}
}
[Token(Token = "0x200045D")]
public class XRInteractorToggler : MonoBehaviour
{
	[Token(Token = "0x40012C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InputActionReference activateReference;

	[Token(Token = "0x40012C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MonoBehaviour[] interactorHelpers;

	[Token(Token = "0x40012C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MonoBehaviour[] otherInteractors;

	[Token(Token = "0x40012C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private XRBaseInteractor interactor;

	[Token(Token = "0x40012C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isEnabled;

	[Token(Token = "0x60016AC")]
	[Address(RVA = "0x12143E4", Offset = "0x12143E4", VA = "0x12143E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016AD")]
	[Address(RVA = "0x121443C", Offset = "0x121443C", VA = "0x121443C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016AE")]
	[Address(RVA = "0x1214530", Offset = "0x1214530", VA = "0x1214530")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60016AF")]
	[Address(RVA = "0x1214624", Offset = "0x1214624", VA = "0x1214624")]
	private void ToggleInteractor(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x60016B0")]
	[Address(RVA = "0x1214660", Offset = "0x1214660", VA = "0x1214660")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60016B1")]
	[Address(RVA = "0x1214664", Offset = "0x1214664", VA = "0x1214664")]
	private void ApplyStatus()
	{
	}

	[Token(Token = "0x60016B2")]
	[Address(RVA = "0x1214750", Offset = "0x1214750", VA = "0x1214750")]
	public XRInteractorToggler()
	{
	}
}
[Token(Token = "0x200045E")]
[DefaultExecutionOrder(100)]
[DisallowMultipleComponent]
[RequireComponent(typeof(LineRenderer))]
public class XRLineVisual : MonoBehaviour, IXRCustomReticleProvider
{
	[Token(Token = "0x40012C9")]
	private const float k_MinLineWidth = 0.0001f;

	[Token(Token = "0x40012CA")]
	private const float k_MaxLineWidth = 1f;

	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Controls the width of the line.")]
	[SerializeField]
	[Range(0.0001f, 1f)]
	private float m_LineWidth;

	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Range(0.0001f, 1f)]
	[UnityEngine.Tooltip("Controls the width of the line.")]
	private float min_LineWidth;

	[Token(Token = "0x40012CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls which source is used to determine the length of the line. Set to true to use the Line Length set by this behavior. Set to false have the length of the line determined by the interactor.")]
	private bool m_OverrideInteractorLineLength;

	[Token(Token = "0x40012CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the length of the line when overriding.")]
	private float m_LineLength;

	[Token(Token = "0x40012CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the relative width of the line from start to end.")]
	private AnimationCurve m_WidthCurve;

	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the color of the line as a gradient from start to end to indicate a valid state.")]
	private Gradient m_ValidColorGradient;

	[Token(Token = "0x40012D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the color of the line as a gradient from start to end to indicate an invalid state.")]
	private Gradient m_InvalidColorGradient;

	[Token(Token = "0x40012D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls whether the rendered segments will be delayed from and smoothly follow the target segments.")]
	private bool m_SmoothMovement;

	[Token(Token = "0x40012D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the speed that the rendered segments will follow the target segments when Smooth Movement is enabled.")]
	private float m_FollowTightness;

	[Token(Token = "0x40012D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls the threshold distance between line points at two consecutive frames to snap rendered segments to target segments when Smooth Movement is enabled.")]
	private float m_SnapThresholdDistance;

	[Token(Token = "0x40012D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[UnityEngine.Tooltip("Stores the reticle that will appear at the end of the line when it is valid.")]
	private GameObject m_Reticle;

	[Token(Token = "0x40012D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[UnityEngine.Tooltip("Controls whether the line will always be cut short by this behavior at the first raycast hit, even when invalid.")]
	private bool m_StopLineAtFirstRaycastHit;

	[Token(Token = "0x40012D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 m_ReticlePos;

	[Token(Token = "0x40012D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 m_ReticleNormal;

	[Token(Token = "0x40012D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int m_EndPositionInLine;

	[Token(Token = "0x40012DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_SnapCurve;

	[Token(Token = "0x40012DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject m_ReticleToUse;

	[Token(Token = "0x40012DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private LineRenderer m_LineRenderer;

	[Token(Token = "0x40012DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ILineRenderable m_LineRenderable;

	[Token(Token = "0x40012DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3[] m_TargetPoints;

	[Token(Token = "0x40012DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int m_NoTargetPoints;

	[Token(Token = "0x40012E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3[] m_RenderPoints;

	[Token(Token = "0x40012E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int m_NoRenderPoints;

	[Token(Token = "0x40012E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool m_PerformSetup;

	[Token(Token = "0x40012E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3[] m_PreviousRenderPoints;

	[Token(Token = "0x40012E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int m_NoPreviousRenderPoints;

	[Token(Token = "0x40012E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private readonly Vector3[] m_ClearArray;

	[Token(Token = "0x40012E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject m_CustomReticle;

	[Token(Token = "0x40012E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool m_CustomReticleAttached;

	[Token(Token = "0x170002DE")]
	public float lineWidth
	{
		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x1214758", Offset = "0x1214758", VA = "0x1214758")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016B4")]
		[Address(RVA = "0x1214760", Offset = "0x1214760", VA = "0x1214760")]
		set
		{
		}
	}

	[Token(Token = "0x170002DF")]
	public bool overrideInteractorLineLength
	{
		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x1214768", Offset = "0x1214768", VA = "0x1214768")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x1214770", Offset = "0x1214770", VA = "0x1214770")]
		set
		{
		}
	}

	[Token(Token = "0x170002E0")]
	public float lineLength
	{
		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x121477C", Offset = "0x121477C", VA = "0x121477C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016B8")]
		[Address(RVA = "0x1214784", Offset = "0x1214784", VA = "0x1214784")]
		set
		{
		}
	}

	[Token(Token = "0x170002E1")]
	public AnimationCurve widthCurve
	{
		[Token(Token = "0x60016B9")]
		[Address(RVA = "0x121478C", Offset = "0x121478C", VA = "0x121478C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x1214794", Offset = "0x1214794", VA = "0x1214794")]
		set
		{
		}
	}

	[Token(Token = "0x170002E2")]
	public Gradient validColorGradient
	{
		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x121479C", Offset = "0x121479C", VA = "0x121479C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x12147A4", Offset = "0x12147A4", VA = "0x12147A4")]
		set
		{
		}
	}

	[Token(Token = "0x170002E3")]
	public Gradient invalidColorGradient
	{
		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x12147AC", Offset = "0x12147AC", VA = "0x12147AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x12147B4", Offset = "0x12147B4", VA = "0x12147B4")]
		set
		{
		}
	}

	[Token(Token = "0x170002E4")]
	public bool smoothMovement
	{
		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x12147BC", Offset = "0x12147BC", VA = "0x12147BC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x12147C4", Offset = "0x12147C4", VA = "0x12147C4")]
		set
		{
		}
	}

	[Token(Token = "0x170002E5")]
	public float followTightness
	{
		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x12147D0", Offset = "0x12147D0", VA = "0x12147D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x12147D8", Offset = "0x12147D8", VA = "0x12147D8")]
		set
		{
		}
	}

	[Token(Token = "0x170002E6")]
	public float snapThresholdDistance
	{
		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x12147E0", Offset = "0x12147E0", VA = "0x12147E0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x12147E8", Offset = "0x12147E8", VA = "0x12147E8")]
		set
		{
		}
	}

	[Token(Token = "0x170002E7")]
	public GameObject reticle
	{
		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x12147F0", Offset = "0x12147F0", VA = "0x12147F0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x12147F8", Offset = "0x12147F8", VA = "0x12147F8")]
		set
		{
		}
	}

	[Token(Token = "0x170002E8")]
	public bool stopLineAtFirstRaycastHit
	{
		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x1214800", Offset = "0x1214800", VA = "0x1214800")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x1214808", Offset = "0x1214808", VA = "0x1214808")]
		set
		{
		}
	}

	[Token(Token = "0x60016C9")]
	[Address(RVA = "0x1214814", Offset = "0x1214814", VA = "0x1214814")]
	protected void Reset()
	{
	}

	[Token(Token = "0x60016CA")]
	[Address(RVA = "0x12149E0", Offset = "0x12149E0", VA = "0x12149E0")]
	protected void OnValidate()
	{
	}

	[Token(Token = "0x60016CB")]
	[Address(RVA = "0x12149E4", Offset = "0x12149E4", VA = "0x12149E4")]
	protected void Awake()
	{
	}

	[Token(Token = "0x60016CC")]
	[Address(RVA = "0x1214AA4", Offset = "0x1214AA4", VA = "0x1214AA4")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x60016CD")]
	[Address(RVA = "0x1214B44", Offset = "0x1214B44", VA = "0x1214B44")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x60016CE")]
	[Address(RVA = "0x1214948", Offset = "0x1214948", VA = "0x1214948")]
	private void ClearLineRenderer()
	{
	}

	[Token(Token = "0x60016CF")]
	[Address(RVA = "0x1214C24", Offset = "0x1214C24", VA = "0x1214C24")]
	[BeforeRenderOrder(101)]
	private void OnBeforeRenderLineVisual()
	{
	}

	[Token(Token = "0x60016D0")]
	[Address(RVA = "0x1214C28", Offset = "0x1214C28", VA = "0x1214C28")]
	private void UpdateLineVisual()
	{
	}

	[Token(Token = "0x60016D1")]
	[Address(RVA = "0x1214990", Offset = "0x1214990", VA = "0x1214990")]
	private void UpdateSettings()
	{
	}

	[Token(Token = "0x60016D2")]
	[Address(RVA = "0x1214840", Offset = "0x1214840", VA = "0x1214840")]
	private bool TryFindLineRenderer()
	{
		return default(bool);
	}

	[Token(Token = "0x60016D3")]
	[Address(RVA = "0x1215644", Offset = "0x1215644", VA = "0x1215644", Slot = "4")]
	public bool AttachCustomReticle(GameObject reticleInstance)
	{
		return default(bool);
	}

	[Token(Token = "0x60016D4")]
	[Address(RVA = "0x1215768", Offset = "0x1215768", VA = "0x1215768", Slot = "5")]
	public bool RemoveCustomReticle()
	{
		return default(bool);
	}

	[Token(Token = "0x60016D5")]
	[Address(RVA = "0x1215848", Offset = "0x1215848", VA = "0x1215848")]
	public XRLineVisual()
	{
	}
}
[Token(Token = "0x200045F")]
public class XRLocomotionController : MonoBehaviour
{
	[Token(Token = "0x2000460")]
	public enum LocotomotionState
	{
		[Token(Token = "0x40012EC")]
		DOLLY,
		[Token(Token = "0x40012ED")]
		TELEPORT,
		[Token(Token = "0x40012EE")]
		HYBRID,
		[Token(Token = "0x40012EF")]
		AUTO_TELEPORT
	}

	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LocotomotionState locomotionState;

	[Token(Token = "0x40012E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private XRDollyMove dollyProvider;

	[Token(Token = "0x40012EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TeleportationProvider teleportationProvider;

	[Token(Token = "0x60016D6")]
	[Address(RVA = "0x1215CBC", Offset = "0x1215CBC", VA = "0x1215CBC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016D7")]
	[Address(RVA = "0x1215CD4", Offset = "0x1215CD4", VA = "0x1215CD4")]
	public void SwitchToTeleport()
	{
	}

	[Token(Token = "0x60016D8")]
	[Address(RVA = "0x1215D0C", Offset = "0x1215D0C", VA = "0x1215D0C")]
	public void SwitchToDolly()
	{
	}

	[Token(Token = "0x60016D9")]
	[Address(RVA = "0x1215D44", Offset = "0x1215D44", VA = "0x1215D44")]
	public XRLocomotionController()
	{
	}
}
[Token(Token = "0x2000461")]
public class XRNoPeeking : MonoBehaviour
{
	[Token(Token = "0x40012F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LayerMask collisionLayer;

	[Token(Token = "0x40012F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float fadeSpeed;

	[Token(Token = "0x40012F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float sphereCheckSize;

	[Token(Token = "0x40012F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform sphereOrigin;

	[Token(Token = "0x40012F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Renderer renderer;

	[Token(Token = "0x40012F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material cameraFadeMaterial;

	[Token(Token = "0x40012F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isCameraFadeOut;

	[Token(Token = "0x40012F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int alphaHash;

	[Token(Token = "0x40012F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform brain;

	[Token(Token = "0x40012F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform head;

	[Token(Token = "0x40012FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool checkDistance;

	[Token(Token = "0x40012FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float distance;

	[Token(Token = "0x170002E9")]
	public bool IsCameraFade
	{
		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x1215D54", Offset = "0x1215D54", VA = "0x1215D54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60016DB")]
	[Address(RVA = "0x1215D5C", Offset = "0x1215D5C", VA = "0x1215D5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016DC")]
	[Address(RVA = "0x1215E20", Offset = "0x1215E20", VA = "0x1215E20")]
	private void Start()
	{
	}

	[Token(Token = "0x60016DD")]
	[Address(RVA = "0x1215F58", Offset = "0x1215F58", VA = "0x1215F58")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016DE")]
	[Address(RVA = "0x121601C", Offset = "0x121601C", VA = "0x121601C")]
	private void OnSceneLoaded(SceneData scene)
	{
	}

	[Token(Token = "0x60016DF")]
	[Address(RVA = "0x1216040", Offset = "0x1216040", VA = "0x1216040")]
	private void Update()
	{
	}

	[Token(Token = "0x60016E0")]
	[Address(RVA = "0x1216228", Offset = "0x1216228", VA = "0x1216228")]
	public void CameraFade(float targetAlpha)
	{
	}

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0x12162C4", Offset = "0x12162C4", VA = "0x12162C4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0x12162F0", Offset = "0x12162F0", VA = "0x12162F0")]
	public XRNoPeeking()
	{
	}
}
[Token(Token = "0x2000462")]
public class XRRayOverrideInteractor : XRRayInteractor
{
	[Token(Token = "0x40012FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public XRLineVisual lineVisual;

	[Token(Token = "0x40012FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public Transform attachPoint;

	[Token(Token = "0x40012FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	public LayerMask standardLayerMask;

	[Token(Token = "0x40012FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	public LayerMask gameplayLayerMask;

	[Token(Token = "0x4001301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private bool canInteract;

	[Token(Token = "0x170002EA")]
	public XRBaseInteractable SelectedInteractable
	{
		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x1216304", Offset = "0x1216304", VA = "0x1216304")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x121630C", Offset = "0x121630C", VA = "0x121630C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60016E5")]
	[Address(RVA = "0x121631C", Offset = "0x121631C", VA = "0x121631C", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60016E6")]
	[Address(RVA = "0x1216344", Offset = "0x1216344", VA = "0x1216344", Slot = "24")]
	protected override void OnSelectEntered(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x60016E7")]
	[Address(RVA = "0x121637C", Offset = "0x121637C", VA = "0x121637C", Slot = "26")]
	protected override void OnSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x60016E8")]
	[Address(RVA = "0x12163A0", Offset = "0x12163A0", VA = "0x12163A0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60016E9")]
	[Address(RVA = "0x12164A0", Offset = "0x12164A0", VA = "0x12164A0")]
	public XRRayOverrideInteractor()
	{
	}
}
[Token(Token = "0x2000463")]
public class XRRecenterDetector : MonoBehaviour
{
	[Token(Token = "0x4001302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RecenterScriptiableObject settings;

	[Token(Token = "0x4001303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputActionProperty recenterAction;

	[Token(Token = "0x4001304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private VRCharacter player;

	[Token(Token = "0x4001305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject infoUI;

	[Token(Token = "0x4001306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private XRNoPeeking peeking;

	[Token(Token = "0x4001307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform head;

	[Token(Token = "0x4001308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform brain;

	[Token(Token = "0x4001309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool animate;

	[Token(Token = "0x400130A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool recenter;

	[Token(Token = "0x400130B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	private bool canRecenter;

	[Token(Token = "0x60016EA")]
	[Address(RVA = "0x1216500", Offset = "0x1216500", VA = "0x1216500")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016EB")]
	[Address(RVA = "0x1216710", Offset = "0x1216710", VA = "0x1216710")]
	private void OnSceneLoaded(SceneData scene)
	{
	}

	[Token(Token = "0x60016EC")]
	[Address(RVA = "0x12167D0", Offset = "0x12167D0", VA = "0x12167D0")]
	private void RecenterPressed(InputAction.CallbackContext obj)
	{
	}

	[Token(Token = "0x60016ED")]
	[Address(RVA = "0x12168B8", Offset = "0x12168B8", VA = "0x12168B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016EE")]
	[Address(RVA = "0x12169EC", Offset = "0x12169EC", VA = "0x12169EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60016EF")]
	[Address(RVA = "0x12167F0", Offset = "0x12167F0", VA = "0x12167F0")]
	private void Recenter()
	{
	}

	[Token(Token = "0x60016F0")]
	[Address(RVA = "0x1216A54", Offset = "0x1216A54", VA = "0x1216A54")]
	public XRRecenterDetector()
	{
	}
}
[Token(Token = "0x2000464")]
public class XRShootingInteractable : XRSimpleInteractable
{
	[Token(Token = "0x400130C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public AlchemyModificationReceiver owner;

	[Token(Token = "0x400130D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public ModifierBase modifier;

	[Token(Token = "0x400130E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Collider collider;

	[Token(Token = "0x400130F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float radius;

	[Token(Token = "0x4001310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public LayerMask mask;

	[Token(Token = "0x4001311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public UnityEvent onShoot;

	[Token(Token = "0x4001312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public UnlockableAbilityScriptableObject ability;

	[Token(Token = "0x4001313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool wasActivated;

	[Token(Token = "0x60016F3")]
	[Address(RVA = "0x1216B68", Offset = "0x1216B68", VA = "0x1216B68", Slot = "6")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60016F4")]
	[Address(RVA = "0x1216BB0", Offset = "0x1216BB0", VA = "0x1216BB0")]
	public void Shoot()
	{
	}

	[Token(Token = "0x60016F5")]
	[Address(RVA = "0x1216E4C", Offset = "0x1216E4C", VA = "0x1216E4C")]
	public XRShootingInteractable()
	{
	}
}
[Token(Token = "0x2000465")]
public interface XRSnapBase
{
	[Token(Token = "0x60016F6")]
	void Rotate(Quaternion destinationRotation);

	[Token(Token = "0x60016F7")]
	void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2);
}
[Token(Token = "0x2000466")]
public class XRSnapConfigManager : MonoBehaviour
{
	[Token(Token = "0x4001314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MonoBehaviour stepSnapProviderBehviour;

	[Token(Token = "0x4001315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MonoBehaviour continuousSnapProviderBehviour;

	[Token(Token = "0x4001316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IXRSnap stepSnapProvider;

	[Token(Token = "0x4001317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IXRSnap continuousSnapProvider;

	[Token(Token = "0x4001318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SnapMode currentSnapType;

	[Token(Token = "0x170002EB")]
	public IXRSnap CurrentSnapProvider
	{
		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x1216E5C", Offset = "0x1216E5C", VA = "0x1216E5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60016F9")]
	[Address(RVA = "0x1216E80", Offset = "0x1216E80", VA = "0x1216E80")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016FA")]
	[Address(RVA = "0x1217038", Offset = "0x1217038", VA = "0x1217038")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016FB")]
	[Address(RVA = "0x12172E8", Offset = "0x12172E8", VA = "0x12172E8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60016FC")]
	[Address(RVA = "0x121743C", Offset = "0x121743C", VA = "0x121743C")]
	private void Start()
	{
	}

	[Token(Token = "0x60016FD")]
	[Address(RVA = "0x1217454", Offset = "0x1217454", VA = "0x1217454")]
	private void OnSnapModeChanged(SnapMode snapType)
	{
	}

	[Token(Token = "0x60016FE")]
	[Address(RVA = "0x1217588", Offset = "0x1217588", VA = "0x1217588")]
	private void OnSnapModeSpeedChanged(float speed)
	{
	}

	[Token(Token = "0x60016FF")]
	[Address(RVA = "0x121719C", Offset = "0x121719C", VA = "0x121719C")]
	public void LoadSnapType()
	{
	}

	[Token(Token = "0x6001700")]
	[Address(RVA = "0x121722C", Offset = "0x121722C", VA = "0x121722C")]
	public void LoadSnapSpeed()
	{
	}

	[Token(Token = "0x6001701")]
	[Address(RVA = "0x1217458", Offset = "0x1217458", VA = "0x1217458")]
	public void SetSnapMode(SnapMode snapType)
	{
	}

	[Token(Token = "0x6001702")]
	[Address(RVA = "0x121758C", Offset = "0x121758C", VA = "0x121758C")]
	public void SetSnapSpeed(float speed)
	{
	}

	[Token(Token = "0x6001703")]
	[Address(RVA = "0x121768C", Offset = "0x121768C", VA = "0x121768C")]
	public XRSnapConfigManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000467")]
public enum SnapMode
{
	[Token(Token = "0x400131A")]
	Default = -1,
	[Token(Token = "0x400131B")]
	Step,
	[Token(Token = "0x400131C")]
	Continuous
}
[Token(Token = "0x2000468")]
public class XRSnapProvider : ActionBasedSnapTurnProvider, IXRSnap
{
	[Token(Token = "0x170002EC")]
	public bool CanRotate
	{
		[Token(Token = "0x6001704")]
		[Address(RVA = "0x1217694", Offset = "0x1217694", VA = "0x1217694", Slot = "11")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001705")]
		[Address(RVA = "0x121769C", Offset = "0x121769C", VA = "0x121769C", Slot = "12")]
		set
		{
		}
	}

	[Token(Token = "0x6001706")]
	[Address(RVA = "0x12176A4", Offset = "0x12176A4", VA = "0x12176A4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001707")]
	[Address(RVA = "0x1217798", Offset = "0x1217798", VA = "0x1217798")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001708")]
	[Address(RVA = "0x1217880", Offset = "0x1217880", VA = "0x1217880", Slot = "7")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001709")]
	[Address(RVA = "0x12178B0", Offset = "0x12178B0", VA = "0x12178B0")]
	public void RotateRig(Quaternion destinationRotation)
	{
	}

	[Token(Token = "0x600170A")]
	[Address(RVA = "0x1217A20", Offset = "0x1217A20", VA = "0x1217A20", Slot = "9")]
	public void OnCameraActivated(ICinemachineCamera cam1, ICinemachineCamera cam2)
	{
	}

	[Token(Token = "0x600170B")]
	[Address(RVA = "0x1217DC4", Offset = "0x1217DC4", VA = "0x1217DC4", Slot = "8")]
	public void Rotate(Quaternion destinationRotation)
	{
	}

	[Token(Token = "0x600170C")]
	[Address(RVA = "0x1217DC8", Offset = "0x1217DC8", VA = "0x1217DC8", Slot = "10")]
	[ContextMenu("ResetRotation")]
	public void ResetRotation()
	{
	}

	[Token(Token = "0x600170D")]
	[Address(RVA = "0x1217F7C", Offset = "0x1217F7C", VA = "0x1217F7C")]
	public XRSnapProvider()
	{
	}
}
[Token(Token = "0x2000469")]
public class XRTeleportationAnchor : XRBaseInteractable
{
	[Token(Token = "0x400131D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private ShotBasicBehaviour shotBehaviour;

	[Token(Token = "0x600170E")]
	[Address(RVA = "0x1217F84", Offset = "0x1217F84", VA = "0x1217F84")]
	public XRTeleportationAnchor()
	{
	}
}
[Token(Token = "0x200046A")]
public class XRTeleportationArea : BaseTeleportationInteractable
{
	[Token(Token = "0x400131E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	[UnityEngine.Tooltip("The Transform that represents the teleportation destination.")]
	private Transform m_TeleportAnchorTransform;

	[Token(Token = "0x400131F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private bool lookAtMoth;

	[Token(Token = "0x4001320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SerializeField]
	private Vector3 positionOffset;

	[Token(Token = "0x4001321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private bool fade;

	[Token(Token = "0x170002ED")]
	public Transform teleportAnchorTransform
	{
		[Token(Token = "0x600170F")]
		[Address(RVA = "0x1217F8C", Offset = "0x1217F8C", VA = "0x1217F8C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001710")]
		[Address(RVA = "0x1217F94", Offset = "0x1217F94", VA = "0x1217F94")]
		set
		{
		}
	}

	[Token(Token = "0x6001711")]
	[Address(RVA = "0x1217FA4", Offset = "0x1217FA4", VA = "0x1217FA4")]
	protected void OnValidate()
	{
	}

	[Token(Token = "0x6001712")]
	[Address(RVA = "0x1218034", Offset = "0x1218034", VA = "0x1218034")]
	protected void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001713")]
	[Address(RVA = "0x12180F0", Offset = "0x12180F0", VA = "0x12180F0", Slot = "39")]
	protected override bool GenerateTeleportRequest(XRBaseInteractor interactor, RaycastHit raycastHit, ref TeleportRequest teleportRequest)
	{
		return default(bool);
	}

	[Token(Token = "0x6001714")]
	[Address(RVA = "0x12182BC", Offset = "0x12182BC", VA = "0x12182BC", Slot = "32")]
	protected override void OnSelectEntered(XRBaseInteractor interactor)
	{
	}

	[Token(Token = "0x6001715")]
	[Address(RVA = "0x1218404", Offset = "0x1218404", VA = "0x1218404")]
	public XRTeleportationArea()
	{
	}
}
[Token(Token = "0x200046C")]
public class CreateProjectile : MonoBehaviour
{
	[Token(Token = "0x4001324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody Fireball;

	[Token(Token = "0x4001325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Time;

	[Token(Token = "0x4001326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool CreateInstances;

	[Token(Token = "0x4001327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody Instance;

	[Token(Token = "0x6001719")]
	[Address(RVA = "0x12184AC", Offset = "0x12184AC", VA = "0x12184AC")]
	private void Start()
	{
	}

	[Token(Token = "0x600171A")]
	[Address(RVA = "0x1218500", Offset = "0x1218500", VA = "0x1218500")]
	private void Update()
	{
	}

	[Token(Token = "0x600171B")]
	[Address(RVA = "0x1218570", Offset = "0x1218570", VA = "0x1218570")]
	private void Create()
	{
	}

	[Token(Token = "0x600171C")]
	[Address(RVA = "0x12186E8", Offset = "0x12186E8", VA = "0x12186E8")]
	public CreateProjectile()
	{
	}
}
[Token(Token = "0x200046D")]
public class Demo : MonoBehaviour
{
	[Token(Token = "0x200046E")]
	public enum T
	{
		[Token(Token = "0x4001345")]
		Spell,
		[Token(Token = "0x4001346")]
		Projectiles,
		[Token(Token = "0x4001347")]
		Aura,
		[Token(Token = "0x4001348")]
		Shield,
		[Token(Token = "0x4001349")]
		Variations,
		[Token(Token = "0x400134A")]
		Buff,
		[Token(Token = "0x400134B")]
		Tome
	}

	[Token(Token = "0x4001328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public T demo;

	[Token(Token = "0x4001329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] SpellList;

	[Token(Token = "0x400132A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] CastingList;

	[Token(Token = "0x400132B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] AuraList;

	[Token(Token = "0x400132C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] ShieldList;

	[Token(Token = "0x400132D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] VariationsList;

	[Token(Token = "0x400132E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] BuffList;

	[Token(Token = "0x400132F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] TomeList;

	[Token(Token = "0x4001330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text Title;

	[Token(Token = "0x4001331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int Selection;

	[Token(Token = "0x4001332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject BackText;

	[Token(Token = "0x4001333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject NextText;

	[Token(Token = "0x4001334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject BackButton;

	[Token(Token = "0x4001335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject NextButton;

	[Token(Token = "0x4001336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject SpellsGroup;

	[Token(Token = "0x4001337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject CastingGroup;

	[Token(Token = "0x4001338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject AuraGroup;

	[Token(Token = "0x4001339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject ShieldGroup;

	[Token(Token = "0x400133A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject VariationsGroup;

	[Token(Token = "0x400133B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject BuffGroup;

	[Token(Token = "0x400133C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject TomeGroup;

	[Token(Token = "0x400133D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject SelectionSpells;

	[Token(Token = "0x400133E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject SelectionProjectiles;

	[Token(Token = "0x400133F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject SelectionAura;

	[Token(Token = "0x4001340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject SelectionShields;

	[Token(Token = "0x4001341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject SelectionVariations;

	[Token(Token = "0x4001342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject SelectionBuff;

	[Token(Token = "0x4001343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject SelectionTome;

	[Token(Token = "0x600171D")]
	[Address(RVA = "0x1218700", Offset = "0x1218700", VA = "0x1218700")]
	private void Start()
	{
	}

	[Token(Token = "0x600171E")]
	[Address(RVA = "0x12187FC", Offset = "0x12187FC", VA = "0x12187FC")]
	private void Update()
	{
	}

	[Token(Token = "0x600171F")]
	[Address(RVA = "0x1218F54", Offset = "0x1218F54", VA = "0x1218F54")]
	public void Back()
	{
	}

	[Token(Token = "0x6001720")]
	[Address(RVA = "0x12196D8", Offset = "0x12196D8", VA = "0x12196D8")]
	public void Next()
	{
	}

	[Token(Token = "0x6001721")]
	[Address(RVA = "0x1219E94", Offset = "0x1219E94", VA = "0x1219E94")]
	public void Spells()
	{
	}

	[Token(Token = "0x6001722")]
	[Address(RVA = "0x121A1AC", Offset = "0x121A1AC", VA = "0x121A1AC")]
	public void Projectiles()
	{
	}

	[Token(Token = "0x6001723")]
	[Address(RVA = "0x121A33C", Offset = "0x121A33C", VA = "0x121A33C")]
	public void Auras()
	{
	}

	[Token(Token = "0x6001724")]
	[Address(RVA = "0x121A4CC", Offset = "0x121A4CC", VA = "0x121A4CC")]
	public void Shields()
	{
	}

	[Token(Token = "0x6001725")]
	[Address(RVA = "0x121A65C", Offset = "0x121A65C", VA = "0x121A65C")]
	public void Variations()
	{
	}

	[Token(Token = "0x6001726")]
	[Address(RVA = "0x121A7EC", Offset = "0x121A7EC", VA = "0x121A7EC")]
	public void Buffs()
	{
	}

	[Token(Token = "0x6001727")]
	[Address(RVA = "0x121A97C", Offset = "0x121A97C", VA = "0x121A97C")]
	public void Tomes()
	{
	}

	[Token(Token = "0x6001728")]
	[Address(RVA = "0x121A020", Offset = "0x121A020", VA = "0x121A020")]
	public void Last()
	{
	}

	[Token(Token = "0x6001729")]
	[Address(RVA = "0x121AB0C", Offset = "0x121AB0C", VA = "0x121AB0C")]
	public Demo()
	{
	}
}
[Token(Token = "0x200046F")]
public class TestScript : MonoBehaviour
{
	[Token(Token = "0x400134C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer renderer;

	[Token(Token = "0x400134D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int materialIndex;

	[Token(Token = "0x600172A")]
	[Address(RVA = "0x121AB14", Offset = "0x121AB14", VA = "0x121AB14")]
	private void Update()
	{
	}

	[Token(Token = "0x600172B")]
	[Address(RVA = "0x121ABB4", Offset = "0x121ABB4", VA = "0x121ABB4")]
	public TestScript()
	{
	}
}
[Token(Token = "0x2000470")]
public class DynamicTextureThrowTarget : ThrowTarget
{
	[Token(Token = "0x600172C")]
	[Address(RVA = "0x121ABBC", Offset = "0x121ABBC", VA = "0x121ABBC", Slot = "4")]
	protected override void LateUpdate()
	{
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0x121ABDC", Offset = "0x121ABDC", VA = "0x121ABDC")]
	public DynamicTextureThrowTarget()
	{
	}
}
[Token(Token = "0x2000471")]
public class ThrowHandle : MonoBehaviour
{
	[Token(Token = "0x2000472")]
	public struct VelocitySample
	{
		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 velocity;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Quaternion rotation;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 angularVelocity;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float time;

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x121B9F8", Offset = "0x121B9F8", VA = "0x121B9F8")]
		public VelocitySample(Vector3 position, Vector3 velocity, Quaternion rotation, Vector3 angular, float time)
		{
		}
	}

	[Token(Token = "0x2000475")]
	[CompilerGenerated]
	private sealed class <IgnoreCollisionWithOtherRoutine>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThrowHandle <>4__this;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject other;

		[Token(Token = "0x170002F3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001762")]
			[Address(RVA = "0x121E250", Offset = "0x121E250", VA = "0x121E250", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001764")]
			[Address(RVA = "0x121E298", Offset = "0x121E298", VA = "0x121E298", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x121D04C", Offset = "0x121D04C", VA = "0x121D04C")]
		[DebuggerHidden]
		public <IgnoreCollisionWithOtherRoutine>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x121E0D0", Offset = "0x121E0D0", VA = "0x121E0D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x121E0D4", Offset = "0x121E0D4", VA = "0x121E0D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x121E258", Offset = "0x121E258", VA = "0x121E258", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action onDetachFromHand;

	[Token(Token = "0x400134F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<GameObject, GameObject> onPickUp;

	[Token(Token = "0x4001350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<Vector3> onFinalTrajectory;

	[Token(Token = "0x4001351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<VelocitySample> OnSampleRecorded;

	[Token(Token = "0x4001352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action<ThrowHandle> OnDestroyHandle;

	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action onFrictionApplied;

	[Token(Token = "0x4001357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[HideInInspector]
	[FormerlySerializedAs("_controllerConfigurations")]
	private ThrowConfiguration[] _deviceConfigurations;

	[Token(Token = "0x4001358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ThrowConfigurationSet _throwConfigurationSet;

	[Token(Token = "0x4001359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Device _attachedDevice;

	[Token(Token = "0x400135A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Transform _velocitySensor;

	[Token(Token = "0x400135B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Rigidbody _rigidbody;

	[Token(Token = "0x400135C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected GameObject _handCollisionRoot;

	[Token(Token = "0x400135D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected ThrowTarget currentTarget;

	[Token(Token = "0x400135E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<VelocitySample> _velocityHistory;

	[Token(Token = "0x400135F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 _sampledPreviousPosition;

	[Token(Token = "0x4001360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Quaternion _sampledPreviousRotation;

	[Token(Token = "0x4001361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform _rootMotionTransform;

	[Token(Token = "0x4001362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 _rootVelocity;

	[Token(Token = "0x4001363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 _previousRootPosition;

	[Token(Token = "0x4001364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private XRControllerVelocity controllerVelocity;

	[Token(Token = "0x170002EE")]
	public bool _attached
	{
		[Token(Token = "0x600172E")]
		[Address(RVA = "0x121ABE4", Offset = "0x121ABE4", VA = "0x121ABE4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600172F")]
		[Address(RVA = "0x121ABEC", Offset = "0x121ABEC", VA = "0x121ABEC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002EF")]
	public float _timeOfRelease
	{
		[Token(Token = "0x6001730")]
		[Address(RVA = "0x121ABF8", Offset = "0x121ABF8", VA = "0x121ABF8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001731")]
		[Address(RVA = "0x121AC00", Offset = "0x121AC00", VA = "0x121AC00")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170002F0")]
	public bool _applyingInfluence
	{
		[Token(Token = "0x6001732")]
		[Address(RVA = "0x121AC08", Offset = "0x121AC08", VA = "0x121AC08")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001733")]
		[Address(RVA = "0x121AC10", Offset = "0x121AC10", VA = "0x121AC10")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x170002F1")]
	public bool _frictionActive
	{
		[Token(Token = "0x6001734")]
		[Address(RVA = "0x121AC1C", Offset = "0x121AC1C", VA = "0x121AC1C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002F2")]
	public ThrowConfiguration Settings
	{
		[Token(Token = "0x6001735")]
		[Address(RVA = "0x121AC80", Offset = "0x121AC80", VA = "0x121AC80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001736")]
	[Address(RVA = "0x121ACA4", Offset = "0x121ACA4", VA = "0x121ACA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001737")]
	[Address(RVA = "0x121AEF0", Offset = "0x121AEF0", VA = "0x121AEF0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6001738")]
	[Address(RVA = "0x121AE40", Offset = "0x121AE40", VA = "0x121AE40")]
	private void MigrateData()
	{
	}

	[Token(Token = "0x6001739")]
	[Address(RVA = "0x121AEF4", Offset = "0x121AEF4", VA = "0x121AEF4", Slot = "4")]
	public virtual void UpdateVelocity()
	{
	}

	[Token(Token = "0x600173A")]
	[Address(RVA = "0x121B51C", Offset = "0x121B51C", VA = "0x121B51C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600173B")]
	[Address(RVA = "0x121B758", Offset = "0x121B758", VA = "0x121B758")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600173C")]
	[Address(RVA = "0x121B824", Offset = "0x121B824", VA = "0x121B824")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600173D")]
	[Address(RVA = "0x121B8E4", Offset = "0x121B8E4", VA = "0x121B8E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600173E")]
	[Address(RVA = "0x121B934", Offset = "0x121B934", VA = "0x121B934")]
	public ThrowConfigurationSet GetConfigSet()
	{
		return null;
	}

	[Token(Token = "0x600173F")]
	[Address(RVA = "0x121B93C", Offset = "0x121B93C", VA = "0x121B93C")]
	public void SetConfigSet(ThrowConfigurationSet set)
	{
	}

	[Token(Token = "0x6001740")]
	[Address(RVA = "0x121B944", Offset = "0x121B944", VA = "0x121B944")]
	public ThrowConfiguration GetConfigForDevice(Device device)
	{
		return null;
	}

	[Token(Token = "0x6001741")]
	[Address(RVA = "0x121B960", Offset = "0x121B960", VA = "0x121B960")]
	public void SetConfigForDevice(Device device, ThrowConfiguration config)
	{
	}

	[Token(Token = "0x6001742")]
	[Address(RVA = "0x121B1A4", Offset = "0x121B1A4", VA = "0x121B1A4")]
	protected void RecordVelocitySample(float deltaTime, float time)
	{
	}

	[Token(Token = "0x6001743")]
	[Address(RVA = "0x121B97C", Offset = "0x121B97C", VA = "0x121B97C")]
	public Transform GetSampleSource()
	{
		return null;
	}

	[Token(Token = "0x6001744")]
	[Address(RVA = "0x121BA24", Offset = "0x121BA24", VA = "0x121BA24")]
	private void ClearOldSamples()
	{
	}

	[Token(Token = "0x6001745")]
	[Address(RVA = "0x121BBD8", Offset = "0x121BBD8", VA = "0x121BBD8")]
	public List<VelocitySample> GetSampleWeights(out float[] weights)
	{
		return null;
	}

	[Token(Token = "0x6001746")]
	[Address(RVA = "0x121BD2C", Offset = "0x121BD2C", VA = "0x121BD2C")]
	public void OnAttach(GameObject hand, GameObject collisionRoot)
	{
	}

	[Token(Token = "0x6001747")]
	[Address(RVA = "0x121C178", Offset = "0x121C178", VA = "0x121C178")]
	public void OnDetach()
	{
	}

	[Token(Token = "0x6001748")]
	[Address(RVA = "0x121CCB0", Offset = "0x121CCB0", VA = "0x121CCB0")]
	public void ForceDetach()
	{
	}

	[Token(Token = "0x6001749")]
	[Address(RVA = "0x121C5D8", Offset = "0x121C5D8", VA = "0x121C5D8")]
	public void SetPhysicsEnabled(bool collision)
	{
	}

	[Token(Token = "0x600174A")]
	[Address(RVA = "0x121CE98", Offset = "0x121CE98", VA = "0x121CE98")]
	public void IgnoreCollisionWithOther(GameObject other, bool ignore)
	{
	}

	[Token(Token = "0x600174B")]
	[Address(RVA = "0x121CC54", Offset = "0x121CC54", VA = "0x121CC54")]
	public void IgnoreCollisionWithOtherForFixedUpdate(GameObject other)
	{
	}

	[Token(Token = "0x600174C")]
	[Address(RVA = "0x121CFBC", Offset = "0x121CFBC", VA = "0x121CFBC")]
	[IteratorStateMachine(typeof(<IgnoreCollisionWithOtherRoutine>d__59))]
	protected IEnumerator IgnoreCollisionWithOtherRoutine(GameObject other)
	{
		return null;
	}

	[Token(Token = "0x600174D")]
	[Address(RVA = "0x121C6B0", Offset = "0x121C6B0", VA = "0x121C6B0")]
	public Vector3 GetVelocityEstimate()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600174E")]
	[Address(RVA = "0x121CAA0", Offset = "0x121CAA0", VA = "0x121CAA0")]
	public Vector3 GetAngularVelocityEstimate()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600174F")]
	[Address(RVA = "0x121D074", Offset = "0x121D074", VA = "0x121D074")]
	private Vector3 GetEstimate(Vector3[] inputs)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001750")]
	[Address(RVA = "0x121DBB8", Offset = "0x121DBB8", VA = "0x121DBB8", Slot = "5")]
	protected virtual ThrowTarget FindBestGazeBasedThrowTarget(List<ThrowTarget> targets)
	{
		return null;
	}

	[Token(Token = "0x6001751")]
	[Address(RVA = "0x121D7B4", Offset = "0x121D7B4", VA = "0x121D7B4")]
	private ThrowTarget FindClosestThrowTarget(Vector3 origin, Vector3 rawVelocity, List<ThrowTarget> targets)
	{
		return null;
	}

	[Token(Token = "0x6001752")]
	[Address(RVA = "0x121D300", Offset = "0x121D300", VA = "0x121D300")]
	private Vector3 ApplyAssist(Vector3 rawVelocity, Vector3 origin, Vector3 targetPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001753")]
	[Address(RVA = "0x121D0AC", Offset = "0x121D0AC", VA = "0x121D0AC")]
	private Vector3 ApplySpeedIncrease(Vector3 rawVelocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001754")]
	[Address(RVA = "0x121DEE0", Offset = "0x121DEE0", VA = "0x121DEE0")]
	public float GetHandFriction()
	{
		return default(float);
	}

	[Token(Token = "0x6001755")]
	[Address(RVA = "0x121B5A0", Offset = "0x121B5A0", VA = "0x121B5A0")]
	private void ApplyFriction()
	{
	}

	[Token(Token = "0x6001756")]
	[Address(RVA = "0x121DF94", Offset = "0x121DF94", VA = "0x121DF94")]
	public ThrowHandle()
	{
	}
}
[Token(Token = "0x2000476")]
public static class BallisticsUtility
{
	[Token(Token = "0x6001765")]
	[Address(RVA = "0x121F2A0", Offset = "0x121F2A0", VA = "0x121F2A0")]
	public static bool IsZero(double d)
	{
		return default(bool);
	}

	[Token(Token = "0x6001766")]
	[Address(RVA = "0x121F2C8", Offset = "0x121F2C8", VA = "0x121F2C8")]
	public static int SolveQuadric(double c0, double c1, double c2, out double s0, out double s1)
	{
		return default(int);
	}

	[Token(Token = "0x6001767")]
	[Address(RVA = "0x121F3B8", Offset = "0x121F3B8", VA = "0x121F3B8")]
	public static int SolveCubic(double c0, double c1, double c2, double c3, out double s0, out double s1, out double s2)
	{
		return default(int);
	}

	[Token(Token = "0x6001768")]
	[Address(RVA = "0x121F604", Offset = "0x121F604", VA = "0x121F604")]
	public static int SolveQuartic(double c0, double c1, double c2, double c3, double c4, out double s0, out double s1, out double s2, out double s3)
	{
		return default(int);
	}

	[Token(Token = "0x6001769")]
	[Address(RVA = "0x121F9BC", Offset = "0x121F9BC", VA = "0x121F9BC")]
	public static float ballistic_range(float speed, float gravity, float initial_height)
	{
		return default(float);
	}

	[Token(Token = "0x600176A")]
	[Address(RVA = "0x121F9F4", Offset = "0x121F9F4", VA = "0x121F9F4")]
	public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target, float gravity, out Vector3 s0, out Vector3 s1)
	{
		return default(int);
	}

	[Token(Token = "0x600176B")]
	[Address(RVA = "0x121FD08", Offset = "0x121FD08", VA = "0x121FD08")]
	public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target_pos, Vector3 target_velocity, float gravity, out Vector3 s0, out Vector3 s1)
	{
		return default(int);
	}

	[Token(Token = "0x600176C")]
	[Address(RVA = "0x122002C", Offset = "0x122002C", VA = "0x122002C")]
	public static bool solve_ballistic_arc_lateral(Vector3 proj_pos, float lateral_speed, Vector3 target_pos, float max_height, out Vector3 fire_velocity, out float gravity)
	{
		return default(bool);
	}

	[Token(Token = "0x600176D")]
	[Address(RVA = "0x1220218", Offset = "0x1220218", VA = "0x1220218")]
	public static bool solve_ballistic_arc_lateral(Vector3 proj_pos, float lateral_speed, Vector3 target, Vector3 target_velocity, float max_height_offset, out Vector3 fire_velocity, out float gravity, out Vector3 impact_point)
	{
		return default(bool);
	}

	[Token(Token = "0x600176E")]
	[Address(RVA = "0x1220510", Offset = "0x1220510", VA = "0x1220510")]
	public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target, Vector3 acceleration, out Vector3 s0, out Vector3 s1)
	{
		return default(int);
	}
}
[Token(Token = "0x2000477")]
public class EffectOnCollision : MonoBehaviour
{
	[Token(Token = "0x2000478")]
	[CompilerGenerated]
	private sealed class <FlashRenderer>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer renderer;

		[Token(Token = "0x170002F5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001777")]
			[Address(RVA = "0x1220B18", Offset = "0x1220B18", VA = "0x1220B18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001779")]
			[Address(RVA = "0x1220B60", Offset = "0x1220B60", VA = "0x1220B60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x1220998", Offset = "0x1220998", VA = "0x1220998")]
		[DebuggerHidden]
		public <FlashRenderer>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x12209C8", Offset = "0x12209C8", VA = "0x12209C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x12209CC", Offset = "0x12209CC", VA = "0x12209CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x1220B20", Offset = "0x1220B20", VA = "0x1220B20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem _particleEffect;

	[Token(Token = "0x4001374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource _audio;

	[Token(Token = "0x4001375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MeshRenderer _flashRenderer;

	[Token(Token = "0x600176F")]
	[Address(RVA = "0x122082C", Offset = "0x122082C", VA = "0x122082C")]
	private void OnCollisionEnter(UnityEngine.Collision collision)
	{
	}

	[Token(Token = "0x6001770")]
	[Address(RVA = "0x1220920", Offset = "0x1220920", VA = "0x1220920")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001771")]
	[Address(RVA = "0x1220830", Offset = "0x1220830", VA = "0x1220830")]
	private void Effect()
	{
	}

	[Token(Token = "0x6001772")]
	[Address(RVA = "0x1220924", Offset = "0x1220924", VA = "0x1220924")]
	[IteratorStateMachine(typeof(<FlashRenderer>d__6))]
	private IEnumerator FlashRenderer(MeshRenderer renderer)
	{
		return null;
	}

	[Token(Token = "0x6001773")]
	[Address(RVA = "0x12209C0", Offset = "0x12209C0", VA = "0x12209C0")]
	public EffectOnCollision()
	{
	}
}
[Token(Token = "0x2000479")]
public static class EstimationUtility
{
	[Token(Token = "0x600177A")]
	[Address(RVA = "0x1220B68", Offset = "0x1220B68", VA = "0x1220B68")]
	public static Vector3 SimpleAverage(Vector3[] inputs, out float[] componentWeights)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600177B")]
	[Address(RVA = "0x1220CA4", Offset = "0x1220CA4", VA = "0x1220CA4")]
	public static Vector3 WeightedMovingAverage(Vector3[] inputs, out float[] componentWeights)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600177C")]
	[Address(RVA = "0x1220DD8", Offset = "0x1220DD8", VA = "0x1220DD8")]
	public static Vector3 ExponentialMovingAverage(Vector3[] inputs, out float[] componentWeights)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600177D")]
	[Address(RVA = "0x1220F64", Offset = "0x1220F64", VA = "0x1220F64")]
	public static Vector3 CustomCurveAverage(Vector3[] inputs, AnimationCurve curve, out float[] componentWeights)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x200047A")]
public class UnityAnalyticsManager : Singleton<UnityAnalyticsManager>
{
	[StructLayout(3)]
	[Token(Token = "0x200047B")]
	[CompilerGenerated]
	private struct <Start>d__0 : IAsyncStateMachine
	{
		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x1221DB0", Offset = "0x1221DB0", VA = "0x1221DB0", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x1222020", Offset = "0x1222020", VA = "0x1222020", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x600177E")]
	[Address(RVA = "0x12210E8", Offset = "0x12210E8", VA = "0x12210E8")]
	[AsyncStateMachine(typeof(<Start>d__0))]
	private void Start()
	{
	}

	[Token(Token = "0x600177F")]
	[Address(RVA = "0x1221180", Offset = "0x1221180", VA = "0x1221180")]
	public void LevelCompletedCustomEvent(string _sceneName)
	{
	}

	[Token(Token = "0x6001780")]
	[Address(RVA = "0x12212D0", Offset = "0x12212D0", VA = "0x12212D0")]
	public void PlayerDiedCustomEvent()
	{
	}

	[Token(Token = "0x6001781")]
	[Address(RVA = "0x1221468", Offset = "0x1221468", VA = "0x1221468")]
	public void SeedCollectedCustomEvent(GameObject _seedID)
	{
	}

	[Token(Token = "0x6001782")]
	[Address(RVA = "0x1221648", Offset = "0x1221648", VA = "0x1221648")]
	public void InscriptionDoneCustomEvent(GameObject _inscriptionID)
	{
	}

	[Token(Token = "0x6001783")]
	[Address(RVA = "0x1221828", Offset = "0x1221828", VA = "0x1221828")]
	public void UpgradeBoughtCustomEvent(GameObject _upgradeID)
	{
	}

	[Token(Token = "0x6001784")]
	[Address(RVA = "0x122198C", Offset = "0x122198C", VA = "0x122198C")]
	public void AttackUsedCustomEvent(string _attackType)
	{
	}

	[Token(Token = "0x6001785")]
	[Address(RVA = "0x1221B58", Offset = "0x1221B58", VA = "0x1221B58")]
	public void AlchemyUsedCustomEvent(AlchemyModificationBase _alchemyType)
	{
	}

	[Token(Token = "0x6001786")]
	[Address(RVA = "0x1221D44", Offset = "0x1221D44", VA = "0x1221D44")]
	public UnityAnalyticsManager()
	{
	}
}
namespace UnityEngine.UI
{
	[Token(Token = "0x200047C")]
	[AddComponentMenu("UI/Raycast Filters/Ignore Raycast Filter")]
	public class UIIgnoreRaycast : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x6001789")]
		[Address(RVA = "0x122202C", Offset = "0x122202C", VA = "0x122202C", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x1222034", Offset = "0x1222034", VA = "0x1222034")]
		public UIIgnoreRaycast()
		{
		}
	}
}
namespace Wacki
{
	[Token(Token = "0x200047D")]
	public abstract class IUILaserPointer : MonoBehaviour
	{
		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float laserThickness;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float laserHitScale;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool laserAlwaysOn;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color color;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject hitPoint;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject pointer;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _distanceLimit;

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x122203C", Offset = "0x122203C", VA = "0x122203C")]
		private void Start()
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x12224A8", Offset = "0x12224A8", VA = "0x12224A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x12225E4", Offset = "0x12225E4", VA = "0x12225E4", Slot = "4")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x12225E8", Offset = "0x12225E8", VA = "0x12225E8", Slot = "5")]
		public virtual void OnEnterControl(GameObject control)
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0x12225EC", Offset = "0x12225EC", VA = "0x12225EC", Slot = "6")]
		public virtual void OnExitControl(GameObject control)
		{
		}

		[Token(Token = "0x6001790")]
		public abstract bool ButtonDown();

		[Token(Token = "0x6001791")]
		public abstract bool ButtonUp();

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x12225F0", Offset = "0x12225F0", VA = "0x12225F0", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x12227CC", Offset = "0x12227CC", VA = "0x12227CC", Slot = "10")]
		public virtual void LimitLaserDistance(float distance)
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x12227F0", Offset = "0x12227F0", VA = "0x12227F0")]
		protected IUILaserPointer()
		{
		}
	}
	[Token(Token = "0x200047E")]
	public class LaserPointerEventData : PointerEventData
	{
		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject current;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public IUILaserPointer controller;

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x1222804", Offset = "0x1222804", VA = "0x1222804")]
		public LaserPointerEventData(EventSystem e)
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x122280C", Offset = "0x122280C", VA = "0x122280C", Slot = "4")]
		public override void Reset()
		{
		}
	}
	[Token(Token = "0x200047F")]
	public class LaserPointerInputModule : BaseInputModule
	{
		[Token(Token = "0x2000480")]
		private class ControllerData
		{
			[Token(Token = "0x400138B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LaserPointerEventData pointerEvent;

			[Token(Token = "0x400138C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject currentPoint;

			[Token(Token = "0x400138D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject currentPressed;

			[Token(Token = "0x400138E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject currentDragging;

			[Token(Token = "0x60017A1")]
			[Address(RVA = "0x1222B60", Offset = "0x1222B60", VA = "0x1222B60")]
			public ControllerData()
			{
			}
		}

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LaserPointerInputModule _instance;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LayerMask layerMask;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Camera UICamera;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PhysicsRaycaster raycaster;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HashSet<IUILaserPointer> _controllers;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<IUILaserPointer, ControllerData> _controllerData;

		[Token(Token = "0x170002F7")]
		public static LaserPointerInputModule instance
		{
			[Token(Token = "0x6001797")]
			[Address(RVA = "0x1222844", Offset = "0x1222844", VA = "0x1222844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x122288C", Offset = "0x122288C", VA = "0x122288C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x12229B0", Offset = "0x12229B0", VA = "0x12229B0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x1222414", Offset = "0x1222414", VA = "0x1222414")]
		public void AddController(IUILaserPointer controller)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x122258C", Offset = "0x122258C", VA = "0x122258C")]
		public void RemoveController(IUILaserPointer controller)
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0x1222B68", Offset = "0x1222B68", VA = "0x1222B68")]
		protected void UpdateCameraPosition(IUILaserPointer controller)
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x1222C00", Offset = "0x1222C00", VA = "0x1222C00")]
		public void ClearSelection()
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x1222C8C", Offset = "0x1222C8C", VA = "0x1222C8C")]
		private void Select(GameObject go)
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x1222D70", Offset = "0x1222D70", VA = "0x1222D70", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x1223F68", Offset = "0x1223F68", VA = "0x1223F68")]
		public LaserPointerInputModule()
		{
		}
	}
}
namespace CloudFine
{
	[Token(Token = "0x2000481")]
	public class Billboard : MonoBehaviour
	{
		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x1223FF0", Offset = "0x1223FF0", VA = "0x1223FF0")]
		private void Update()
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x122418C", Offset = "0x122418C", VA = "0x122418C")]
		public Billboard()
		{
		}
	}
	[Token(Token = "0x2000482")]
	public class CollisionListener : MonoBehaviour
	{
		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action<UnityEngine.Collision> CollisionEnter;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<UnityEngine.Collision> CollisionExit;

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x1224194", Offset = "0x1224194", VA = "0x1224194")]
		private void OnCollisionEnter(UnityEngine.Collision collision)
		{
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0x12241B0", Offset = "0x12241B0", VA = "0x12241B0")]
		private void OnCollisionExit(UnityEngine.Collision collision)
		{
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x12241CC", Offset = "0x12241CC", VA = "0x12241CC")]
		public CollisionListener()
		{
		}
	}
}
namespace CloudFine.ThrowLab
{
	[Token(Token = "0x2000483")]
	public enum Device
	{
		[Token(Token = "0x4001392")]
		UNSPECIFIED,
		[Token(Token = "0x4001393")]
		OCULUS_TOUCH,
		[Token(Token = "0x4001394")]
		VIVE,
		[Token(Token = "0x4001395")]
		KNUCKLES,
		[Token(Token = "0x4001396")]
		WINDOWS_MR
	}
	[Token(Token = "0x2000484")]
	public enum HandSide
	{
		[Token(Token = "0x4001398")]
		RIGHT,
		[Token(Token = "0x4001399")]
		LEFT
	}
	[Token(Token = "0x2000485")]
	public static class DeviceDetectionUtility
	{
		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Device, Vector3> _centerOfMassOfssets;

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x12241D4", Offset = "0x12241D4", VA = "0x12241D4")]
		public static Vector3 GetCenterOfMassOffset(Device controller, HandSide side)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000486")]
	public abstract class DeviceDetector : MonoBehaviour
	{
		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HandSide _side;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Device _detected;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool _drawGizmo;

		[Token(Token = "0x170002F8")]
		public HandSide Side
		{
			[Token(Token = "0x60017A9")]
			[Address(RVA = "0x1224508", Offset = "0x1224508", VA = "0x1224508")]
			get
			{
				return default(HandSide);
			}
			[Token(Token = "0x60017AA")]
			[Address(RVA = "0x1224510", Offset = "0x1224510", VA = "0x1224510")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		public Device DetectedDevice
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x1224518", Offset = "0x1224518", VA = "0x1224518")]
			get
			{
				return default(Device);
			}
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x1224520", Offset = "0x1224520", VA = "0x1224520")]
		protected void OnControllerTypeDetermined(Device device)
		{
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x1224528", Offset = "0x1224528", VA = "0x1224528")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x12245E8", Offset = "0x12245E8", VA = "0x12245E8")]
		protected DeviceDetector()
		{
		}
	}
	[Token(Token = "0x2000487")]
	public abstract class GrabThresholdModifier : MonoBehaviour
	{
		[Token(Token = "0x60017AF")]
		public abstract float GripValue();

		[Token(Token = "0x60017B0")]
		public abstract void SetGrabThreshold(float grip);

		[Token(Token = "0x60017B1")]
		public abstract void SetReleaseThreshold(float grip);

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x12245F8", Offset = "0x12245F8", VA = "0x12245F8")]
		protected GrabThresholdModifier()
		{
		}
	}
	[Token(Token = "0x2000488")]
	public class LabManager : MonoBehaviour
	{
		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Spawn")]
		public List<ThrowHandle> _throwablePrefabs;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform _spawnPoint;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem _spawnEffect;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ThrowHandle _throwablePrefab;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ThrowTracker _trackerPrefab;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("UI")]
		public UIThrowConfiguration _configurationUI;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DeviceDetectorUI _deviceDetector;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RectTransform _trackerUIListRoot;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Text _throwableLabel;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Lines")]
		public Texture2D[] _lineTextures;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color[] _lineColors;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Variants")]
		public GameObject variantPanelRoot;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Image[] tabFills;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Button variantResetButton;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Button variantSaveButton;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject warningNoConfigs;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Toggle variantEnabledToggle;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Toggle variantLineEnabledToggle;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Toggle variantSamplesEnabledToggle;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _throwableIndex;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Device _device;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<ThrowTracker> _trackers;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Dictionary<ThrowConfiguration, ThrowConfiguration[]> _tempConfigVariants;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ThrowHandle _currentSpawn;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int currentConfigIndex;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private ThrowConfiguration[] configSet;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ThrowConfiguration original;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Color[] colorSet;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool[] configEnabled;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool[] showSamples;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool[] showLine;

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x1224600", Offset = "0x1224600", VA = "0x1224600")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x12246E8", Offset = "0x12246E8", VA = "0x12246E8")]
		private void Start()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x1224CC0", Offset = "0x1224CC0", VA = "0x1224CC0")]
		private void Update()
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x1225650", Offset = "0x1225650", VA = "0x1225650")]
		private void SetDevice(Device device)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x1224E0C", Offset = "0x1224E0C", VA = "0x1224E0C")]
		public void SpawnTrackedThrowable()
		{
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x1225FD8", Offset = "0x1225FD8", VA = "0x1225FD8")]
		private void RespawnThrowable()
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x122607C", Offset = "0x122607C", VA = "0x122607C")]
		public void SetCurrentConfigEnabled(bool enabled)
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x1224BE8", Offset = "0x1224BE8", VA = "0x1224BE8")]
		public void SetConfigEnabled(int i, bool enabled)
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x122615C", Offset = "0x122615C", VA = "0x122615C")]
		public void SetCurrentLineEnabled(bool enabled)
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0x122616C", Offset = "0x122616C", VA = "0x122616C")]
		public void SetLineEnabled(int i, bool enabled)
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x12261A0", Offset = "0x12261A0", VA = "0x12261A0")]
		public void SetCurrentSampleVisEnabled(bool enabled)
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x12261B0", Offset = "0x12261B0", VA = "0x12261B0")]
		public void SetSampleVisualizationEnabled(int i, bool enabled)
		{
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0x12261E4", Offset = "0x12261E4", VA = "0x12261E4")]
		public void SaveCurrentConfig()
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x1226458", Offset = "0x1226458", VA = "0x1226458")]
		public void ResetCurrentConfig()
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x12265C8", Offset = "0x12265C8", VA = "0x12265C8")]
		public void ClearAll()
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x1226894", Offset = "0x1226894", VA = "0x1226894")]
		public void Reset()
		{
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x1226898", Offset = "0x1226898", VA = "0x1226898")]
		public void CycleThrowableRight()
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x1226910", Offset = "0x1226910", VA = "0x1226910")]
		public void CycleThrowableLeft()
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x12247F4", Offset = "0x12247F4", VA = "0x12247F4")]
		private void SelectThrowable(int i)
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x12264A4", Offset = "0x12264A4", VA = "0x12264A4")]
		public void LoadConfig(int i)
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x12260E4", Offset = "0x12260E4", VA = "0x12260E4")]
		public void ReloadCurrentConfig()
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x122732C", Offset = "0x122732C", VA = "0x122732C")]
		public LabManager()
		{
		}
	}
	[Token(Token = "0x2000489")]
	[CreateAssetMenu(fileName = "NewThrowConfig", menuName = "ThrowLab/ThrowConfiguration", order = 1)]
	public class ThrowConfiguration : ScriptableObject
	{
		[Token(Token = "0x200048A")]
		public enum EstimationAlgorithm
		{
			[Token(Token = "0x40013DB")]
			SIMPLE_AVERAGE,
			[Token(Token = "0x40013DC")]
			WEIGHTED_AVERAGE,
			[Token(Token = "0x40013DD")]
			EXPONENTIAL_AVERAGE,
			[Token(Token = "0x40013DE")]
			CUSTOM_CURVE
		}

		[Token(Token = "0x200048B")]
		public enum PeriodMeasurement
		{
			[Token(Token = "0x40013E0")]
			FRAMES,
			[Token(Token = "0x40013E1")]
			TIME
		}

		[Token(Token = "0x200048C")]
		public enum SampleTime
		{
			[Token(Token = "0x40013E3")]
			SCALED,
			[Token(Token = "0x40013E4")]
			UNSCALED,
			[Token(Token = "0x40013E5")]
			FIXED
		}

		[Token(Token = "0x200048D")]
		public enum VelocitySource
		{
			[Token(Token = "0x40013E7")]
			DEVICE_CENTER_OF_MASS,
			[Token(Token = "0x40013E8")]
			HAND_TRACKED_POSITION,
			[Token(Token = "0x40013E9")]
			OBJECT_CENTER,
			[Token(Token = "0x40013EA")]
			OBJECT_CUSTOM_OFFSET
		}

		[Token(Token = "0x200048E")]
		public enum AssistTargetMethod
		{
			[Token(Token = "0x40013EC")]
			GAZE,
			[Token(Token = "0x40013ED")]
			NEAREST
		}

		[Token(Token = "0x200048F")]
		public enum FalloffSource
		{
			[Token(Token = "0x40013EF")]
			TIME,
			[Token(Token = "0x40013F0")]
			DISTANCE,
			[Token(Token = "0x40013F1")]
			MIN_TIME_DIST
		}

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Velocity Smoothing")]
		public bool smoothingEnabled;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EstimationAlgorithm estimationFunction;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PeriodMeasurement samplePeriodMeasurement;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public SampleTime sampleTime;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int periodFrames;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float periodSeconds;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VelocitySource sampleSourceType;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve smoothingAverageCustomCurve;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Velocity Scaling")]
		public bool scaleEnabled;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float scaleMultiplier;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float scaleThreshold;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 5f)]
		public float scaleRampExponent;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useScaleRampCustomCurve;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve scaleRampCustomCurve;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Aim Assist")]
		public bool assistEnabled;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 1f)]
		public float assistWeight;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 180f)]
		public float assistRangeDegrees;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 5f)]
		public float assistRampExponent;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool useAssistRampCustomCurve;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve assistRampCustomCurve;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float assistDistance;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float assistCameraAngle;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AssistTargetMethod assistTargetMethod;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Header("Friction")]
		public bool frictionEnabled;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float frictionFalloffSeconds;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Range(0f, 5f)]
		public float frictionFalloffExponent;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool useFrictionFalloffCustomCurve;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AnimationCurve frictionFalloffCustomCurve;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private string uniqueID;

		[Token(Token = "0x170002FA")]
		private string path
		{
			[Token(Token = "0x60017D2")]
			[Address(RVA = "0x122776C", Offset = "0x122776C", VA = "0x122776C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FB")]
		private string saveDirectory
		{
			[Token(Token = "0x60017D3")]
			[Address(RVA = "0x12279AC", Offset = "0x12279AC", VA = "0x12279AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x12275A4", Offset = "0x12275A4", VA = "0x12275A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x12275E8", Offset = "0x12275E8", VA = "0x12275E8")]
		public float SampleAssistCurve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x1227668", Offset = "0x1227668", VA = "0x1227668")]
		public float SampleFrictionCurve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x12276C0", Offset = "0x12276C0", VA = "0x12276C0")]
		public float SampleScalingCurve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x122762C", Offset = "0x122762C", VA = "0x122762C")]
		private static float SampleExponentialCurve(float t, float exp, bool flip = false)
		{
			return default(float);
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x1227704", Offset = "0x1227704", VA = "0x1227704")]
		public Vector3 GetEstimate(Vector3[] inputs, out float[] componentWeights)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x1227750", Offset = "0x1227750", VA = "0x1227750")]
		public float[] GetWeights(Vector3[] inputs)
		{
			return null;
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x1226984", Offset = "0x1226984", VA = "0x1226984")]
		public ThrowConfiguration Clone()
		{
			return null;
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x1226230", Offset = "0x1226230", VA = "0x1226230")]
		public void CopyTo(ThrowConfiguration other)
		{
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x12263CC", Offset = "0x12263CC", VA = "0x12263CC")]
		public void SaveToJSON()
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x12275A8", Offset = "0x12275A8", VA = "0x12275A8")]
		public void LoadFromJSON()
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x12279F8", Offset = "0x12279F8", VA = "0x12279F8")]
		public ThrowConfiguration()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000490")]
	public class ThrowConfigurationSet
	{
		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private ThrowConfiguration[] _deviceConfigurations;

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0x1227CAC", Offset = "0x1227CAC", VA = "0x1227CAC")]
		public ThrowConfiguration GetConfigForDevice(Device device)
		{
			return null;
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x1227E6C", Offset = "0x1227E6C", VA = "0x1227E6C")]
		public void SetConfigForDevice(Device device, ThrowConfiguration config)
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x1227ED4", Offset = "0x1227ED4", VA = "0x1227ED4")]
		public void SetConfigs(ThrowConfiguration[] set)
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x1227EDC", Offset = "0x1227EDC", VA = "0x1227EDC")]
		public ThrowConfigurationSet()
		{
		}
	}
	[Token(Token = "0x2000491")]
	public class ThrowTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000492")]
		public class AlchemyWeightData
		{
			[Token(Token = "0x4001408")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[ReadOnly]
			public string name;

			[Token(Token = "0x4001409")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 100f)]
			public int weight;

			[Token(Token = "0x60017EE")]
			[Address(RVA = "0x1229538", Offset = "0x1229538", VA = "0x1229538")]
			public AlchemyWeightData(string n, int w)
			{
			}
		}

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _showReticle;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 throwOffset;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Weight")]
		public List<AlchemyModificationBase> applyAlchemy;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AlchemyWeightData[] applyAlchemyWeight;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 100f)]
		public int priority;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AlchemyModificationReceiver alchemyModificationReceiver;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		public bool invokeEvents;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onActivate;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent onDeactivate;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject reticle;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture aimingOnTexture;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture aimingOffTexture;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform selfTransform;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Transform reticleTransform;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform cam;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool animate;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Tweener tween;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<ThrowHandle> targettingHandles;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly Vector3 punchScale;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ThrowTarget> _allTargets;

		[Token(Token = "0x170002FC")]
		public static List<ThrowTarget> AllTargets
		{
			[Token(Token = "0x60017DB")]
			[Address(RVA = "0x1227EE4", Offset = "0x1227EE4", VA = "0x1227EE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017DC")]
			[Address(RVA = "0x1227F9C", Offset = "0x1227F9C", VA = "0x1227F9C")]
			protected set
			{
			}
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x1227FF4", Offset = "0x1227FF4", VA = "0x1227FF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x1228750", Offset = "0x1228750", VA = "0x1228750")]
		private void Update()
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x1228890", Offset = "0x1228890", VA = "0x1228890", Slot = "4")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0x1228A7C", Offset = "0x1228A7C", VA = "0x1228A7C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0x1228BA0", Offset = "0x1228BA0", VA = "0x1228BA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0x1228C7C", Offset = "0x1228C7C", VA = "0x1228C7C")]
		public void AddTargettingHandle(ThrowHandle handle)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x1228D64", Offset = "0x1228D64", VA = "0x1228D64")]
		public void RemoveTargettingHandle(ThrowHandle handle)
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0x12283AC", Offset = "0x12283AC", VA = "0x12283AC")]
		private void ShowHideReticle(bool show)
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x1228894", Offset = "0x1228894", VA = "0x1228894")]
		private void MaintainReticleSize()
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x12282B4", Offset = "0x12282B4", VA = "0x12282B4")]
		protected void MaintainReticleTexture()
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x1228DF4", Offset = "0x1228DF4", VA = "0x1228DF4")]
		public Vector3 GetTargetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x1228E2C", Offset = "0x1228E2C", VA = "0x1228E2C")]
		public bool CanThrow(AlchemyModificationBase newAlchemy)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x1228EF0", Offset = "0x1228EF0", VA = "0x1228EF0")]
		public float GetWeight(AlchemyModificationBase alchemy)
		{
			return default(float);
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x1229028", Offset = "0x1229028", VA = "0x1229028")]
		protected void AimingChanged()
		{
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x122902C", Offset = "0x122902C", VA = "0x122902C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x12290F4", Offset = "0x12290F4", VA = "0x12290F4")]
		public ThrowTarget()
		{
		}
	}
	[Token(Token = "0x2000494")]
	public class ThrowTracker : MonoBehaviour
	{
		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LineRenderer _trajectoryLine;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem _sampleParticleSystem;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystemRenderer _particleRenderer;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UIThrowTracker _trackerUIPrefab;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject _collisionMarkerPrefab;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _origin;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _releaseVelocity;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ThrowHandle _handle;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 _groundHitPoint;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool _tracking;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Vector3> _positions;

		[Token(Token = "0x4001418")]
		private const int _positionsCap = 500;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UIThrowTracker _ui;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _show;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool _showLine;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool _showSamples;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Color _color;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 particleMaxSize;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<ThrowHandle.VelocitySample> visSamples;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] visWeights;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ParticleSystem.Particle[] _smoothingSampleSet;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<ParticleSystem.Particle> _postReleaseSampleSet;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GameObject _collisionMarker;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<MeshRenderer> _outlineRenderers;

		[Token(Token = "0x170002FD")]
		public float GroundDistance
		{
			[Token(Token = "0x60017F2")]
			[Address(RVA = "0x1229650", Offset = "0x1229650", VA = "0x1229650")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x1229714", Offset = "0x1229714", VA = "0x1229714")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x1229774", Offset = "0x1229774", VA = "0x1229774")]
		private void Update()
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x12299CC", Offset = "0x12299CC", VA = "0x12299CC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x1225660", Offset = "0x1225660", VA = "0x1225660")]
		public void TrackThrowable(ThrowHandle throwable)
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x1225BD8", Offset = "0x1225BD8", VA = "0x1225BD8")]
		public void SetLineAppearance(Texture lineTex, Color lineColor)
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x1225C74", Offset = "0x1225C74", VA = "0x1225C74")]
		public void ShowHideLine(bool show)
		{
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x1225CAC", Offset = "0x1225CAC", VA = "0x1225CAC")]
		public void ShowHideSamples(bool show)
		{
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x1229DC0", Offset = "0x1229DC0", VA = "0x1229DC0")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x1225D60", Offset = "0x1225D60", VA = "0x1225D60")]
		public void AttachUIToRoot(Transform root)
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x1229DCC", Offset = "0x1229DCC", VA = "0x1229DCC")]
		public void OnDetach()
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x122A8FC", Offset = "0x122A8FC", VA = "0x122A8FC")]
		public void EndTracking()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x122A904", Offset = "0x122A904", VA = "0x122A904")]
		public void OnAttach(GameObject hand, GameObject collisionRoot)
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x122A90C", Offset = "0x122A90C", VA = "0x122A90C")]
		private void RecordFinalTrajectory(Vector3 launch)
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x122AAEC", Offset = "0x122AAEC", VA = "0x122AAEC")]
		private void VisualizeSmoothingSample(ThrowHandle.VelocitySample sample)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x122A278", Offset = "0x122A278", VA = "0x122A278")]
		private void VisualizeEstimatedVelocity()
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x122A668", Offset = "0x122A668", VA = "0x122A668")]
		private void RefreshParticles()
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x122AFE0", Offset = "0x122AFE0", VA = "0x122AFE0")]
		private ParticleSystem.Particle CreateParticleForCurrentEstimatedVelocity()
		{
			return default(ParticleSystem.Particle);
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0x122AB74", Offset = "0x122AB74", VA = "0x122AB74")]
		private void VisualizeVelocitySmoothingData(List<ThrowHandle.VelocitySample> samples, float[] weights)
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x122B430", Offset = "0x122B430", VA = "0x122B430")]
		public void ToggleVisible()
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x122B448", Offset = "0x122B448", VA = "0x122B448")]
		public void ShowHide(bool show)
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x122B5C8", Offset = "0x122B5C8", VA = "0x122B5C8")]
		private void OnHandleDestroyed(ThrowHandle handle)
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x1226748", Offset = "0x1226748", VA = "0x1226748")]
		public void Cleanup()
		{
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x122B5CC", Offset = "0x122B5CC", VA = "0x122B5CC")]
		private void OnCollisionEnter(UnityEngine.Collision collision)
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x122B6D0", Offset = "0x122B6D0", VA = "0x122B6D0")]
		private void PlaceCollisionMarker(Vector3 position, Vector3 normal)
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x12299D0", Offset = "0x12299D0", VA = "0x12299D0")]
		private void CreateOutline(GameObject original)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x122A7A4", Offset = "0x122A7A4", VA = "0x122A7A4")]
		private void ShowHideOutline(bool show)
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x122B930", Offset = "0x122B930", VA = "0x122B930")]
		public ThrowTracker()
		{
		}
	}
	[Token(Token = "0x2000495")]
	public class DeviceDetectorUI : MonoBehaviour
	{
		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text _leftDetected;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text _rightDetected;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text _warning;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DeviceDetector _leftDetector;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DeviceDetector _rightDetector;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Device _detected;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<Device> OnDeviceDetected;

		[Token(Token = "0x170002FE")]
		public Device DetectedDevice
		{
			[Token(Token = "0x600180E")]
			[Address(RVA = "0x122BA94", Offset = "0x122BA94", VA = "0x122BA94")]
			get
			{
				return default(Device);
			}
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0x122BA9C", Offset = "0x122BA9C", VA = "0x122BA9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x122BE18", Offset = "0x122BE18", VA = "0x122BE18")]
		private void Update()
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x122C01C", Offset = "0x122C01C", VA = "0x122C01C")]
		public DeviceDetectorUI()
		{
		}
	}
}
namespace CloudFine.ThrowLab.UnityXR
{
	[Token(Token = "0x2000497")]
	[RequireComponent(typeof(ThrowHandle))]
	public class ThrowLabXRGrabInteractable : XRGrabInteractable
	{
		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public UnityEvent onUpdate;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private ThrowHandle m_handle;

		[Token(Token = "0x170002FF")]
		public ThrowHandle _handle
		{
			[Token(Token = "0x6001816")]
			[Address(RVA = "0x122C0DC", Offset = "0x122C0DC", VA = "0x122C0DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0x122C1EC", Offset = "0x122C1EC", VA = "0x122C1EC", Slot = "22")]
		protected override void OnSelectEntered(SelectEnterEventArgs args)
		{
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0x122C274", Offset = "0x122C274", VA = "0x122C274", Slot = "23")]
		protected override void OnSelectExiting(SelectExitEventArgs args)
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x122C2A0", Offset = "0x122C2A0", VA = "0x122C2A0", Slot = "14")]
		public override void ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase updatePhase)
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x122C300", Offset = "0x122C300", VA = "0x122C300")]
		public ThrowLabXRGrabInteractable()
		{
		}
	}
	[Token(Token = "0x2000498")]
	public class ThrowLab_XRDirectInteractor : XRDirectInteractor
	{
		[Token(Token = "0x600181B")]
		[Address(RVA = "0x122C308", Offset = "0x122C308", VA = "0x122C308", Slot = "10")]
		public override void GetValidTargets(List<XRBaseInteractable> validTargets)
		{
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0x122C448", Offset = "0x122C448", VA = "0x122C448")]
		public ThrowLab_XRDirectInteractor()
		{
		}
	}
	[Token(Token = "0x200049A")]
	public class UnityXR_DeviceDetector : DeviceDetector
	{
		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private XRController _controller;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Device _device;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool _deviceLoaded;

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x122C524", Offset = "0x122C524", VA = "0x122C524")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x122C57C", Offset = "0x122C57C", VA = "0x122C57C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x122C59C", Offset = "0x122C59C", VA = "0x122C59C")]
		public UnityXR_DeviceDetector()
		{
		}
	}
	[Token(Token = "0x200049B")]
	[RequireComponent(typeof(XRBaseController))]
	public class UnityXR_GrabThresholdModifier : GrabThresholdModifier
	{
		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float val;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private XRBaseController _controller;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private XRController _xrController;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ActionBasedController _actionController;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InputBinding myinput;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _grabThreshold;

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x122C5AC", Offset = "0x122C5AC", VA = "0x122C5AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x122C734", Offset = "0x122C734", VA = "0x122C734", Slot = "4")]
		public override float GripValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x122C984", Offset = "0x122C984", VA = "0x122C984", Slot = "5")]
		public override void SetGrabThreshold(float grip)
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0x122CAE8", Offset = "0x122CAE8", VA = "0x122CAE8", Slot = "6")]
		public override void SetReleaseThreshold(float grip)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0x122CBB4", Offset = "0x122CBB4", VA = "0x122CBB4")]
		public UnityXR_GrabThresholdModifier()
		{
		}
	}
}
namespace CloudFine.ThrowLab.UI
{
	[Token(Token = "0x200049C")]
	[RequireComponent(typeof(Image))]
	public class UIAngleValue : MonoBehaviour
	{
		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Image image;

		[Token(Token = "0x6001828")]
		[Address(RVA = "0x122CBBC", Offset = "0x122CBBC", VA = "0x122CBBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x122CC14", Offset = "0x122CC14", VA = "0x122CC14")]
		public void SetRange(float range)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x122CC98", Offset = "0x122CC98", VA = "0x122CC98")]
		public UIAngleValue()
		{
		}
	}
	[Token(Token = "0x200049D")]
	public class UIColorMeTag : MonoBehaviour
	{
		[Token(Token = "0x600182B")]
		[Address(RVA = "0x122CCA0", Offset = "0x122CCA0", VA = "0x122CCA0")]
		public UIColorMeTag()
		{
		}
	}
	[Token(Token = "0x200049E")]
	[RequireComponent(typeof(LineRenderer))]
	public class UICurveLine : MonoBehaviour
	{
		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<float, float> curveFunction;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numPositions;

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x122CCA8", Offset = "0x122CCA8", VA = "0x122CCA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x122CD00", Offset = "0x122CD00", VA = "0x122CD00")]
		public void SetCurveFunc(Func<float, float> curveFunc)
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x122CD1C", Offset = "0x122CD1C", VA = "0x122CD1C")]
		public void RefreshCurve()
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x122CE7C", Offset = "0x122CE7C", VA = "0x122CE7C")]
		public UICurveLine()
		{
		}
	}
	[Token(Token = "0x200049F")]
	public class UISmoothingVisual : MonoBehaviour
	{
		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image[] bars;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ThrowConfiguration.EstimationAlgorithm algorithm;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] dummyData;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] weights;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Func<Vector3[], float[]> _func;

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x122CE8C", Offset = "0x122CE8C", VA = "0x122CE8C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x122CF4C", Offset = "0x122CF4C", VA = "0x122CF4C")]
		public void SetFunc(Func<Vector3[], float[]> func)
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x122CF54", Offset = "0x122CF54", VA = "0x122CF54")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x122D000", Offset = "0x122D000", VA = "0x122D000")]
		public UISmoothingVisual()
		{
		}
	}
	[Token(Token = "0x20004A0")]
	[RequireComponent(typeof(RectTransform))]
	public class UIStepper : UIBehaviour
	{
		[Serializable]
		[Token(Token = "0x20004A1")]
		public class StepperValueChangedEvent : UnityEvent<float>
		{
			[Token(Token = "0x600184B")]
			[Address(RVA = "0x122D39C", Offset = "0x122D39C", VA = "0x122D39C")]
			public StepperValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Button[] _sides;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _value;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float _minimum;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float _maximum;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float _step;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _wrap;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Graphic _separator;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _separatorWidth;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private StepperValueChangedEvent _onValueChanged;

		[Token(Token = "0x17000300")]
		public Button[] sides
		{
			[Token(Token = "0x6001834")]
			[Address(RVA = "0x122D008", Offset = "0x122D008", VA = "0x122D008")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000301")]
		public float value
		{
			[Token(Token = "0x6001835")]
			[Address(RVA = "0x122D118", Offset = "0x122D118", VA = "0x122D118")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001836")]
			[Address(RVA = "0x122D120", Offset = "0x122D120", VA = "0x122D120")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public float minimum
		{
			[Token(Token = "0x6001837")]
			[Address(RVA = "0x122D194", Offset = "0x122D194", VA = "0x122D194")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001838")]
			[Address(RVA = "0x122D19C", Offset = "0x122D19C", VA = "0x122D19C")]
			set
			{
			}
		}

		[Token(Token = "0x17000303")]
		public float maximum
		{
			[Token(Token = "0x6001839")]
			[Address(RVA = "0x122D1A4", Offset = "0x122D1A4", VA = "0x122D1A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600183A")]
			[Address(RVA = "0x122D1AC", Offset = "0x122D1AC", VA = "0x122D1AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public float step
		{
			[Token(Token = "0x600183B")]
			[Address(RVA = "0x122D1B4", Offset = "0x122D1B4", VA = "0x122D1B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600183C")]
			[Address(RVA = "0x122D1BC", Offset = "0x122D1BC", VA = "0x122D1BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000305")]
		public bool wrap
		{
			[Token(Token = "0x600183D")]
			[Address(RVA = "0x122D1C4", Offset = "0x122D1C4", VA = "0x122D1C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600183E")]
			[Address(RVA = "0x122D1CC", Offset = "0x122D1CC", VA = "0x122D1CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000306")]
		public Graphic separator
		{
			[Token(Token = "0x600183F")]
			[Address(RVA = "0x122D1D8", Offset = "0x122D1D8", VA = "0x122D1D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001840")]
			[Address(RVA = "0x122D1E0", Offset = "0x122D1E0", VA = "0x122D1E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000307")]
		private float separatorWidth
		{
			[Token(Token = "0x6001841")]
			[Address(RVA = "0x122D1E8", Offset = "0x122D1E8", VA = "0x122D1E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000308")]
		public StepperValueChangedEvent onValueChanged
		{
			[Token(Token = "0x6001842")]
			[Address(RVA = "0x122D310", Offset = "0x122D310", VA = "0x122D310")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001843")]
			[Address(RVA = "0x122D318", Offset = "0x122D318", VA = "0x122D318")]
			set
			{
			}
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0x122D320", Offset = "0x122D320", VA = "0x122D320")]
		protected UIStepper()
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x122D050", Offset = "0x122D050", VA = "0x122D050")]
		private Button[] GetSides()
		{
			return null;
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x122D47C", Offset = "0x122D47C", VA = "0x122D47C")]
		public void StepUp()
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x122D528", Offset = "0x122D528", VA = "0x122D528")]
		public void StepDown()
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x122D484", Offset = "0x122D484", VA = "0x122D484")]
		private void Step(float amount)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x122D3E4", Offset = "0x122D3E4", VA = "0x122D3E4")]
		private void DisableAtExtremes(Button[] sides)
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x122D534", Offset = "0x122D534", VA = "0x122D534")]
		private void RecreateSprites(Button[] sides)
		{
		}
	}
	[Token(Token = "0x20004A2")]
	[RequireComponent(typeof(Button))]
	public class UIStepperSide : UIBehaviour, IPointerClickHandler, IEventSystemHandler, ISubmitHandler
	{
		[Token(Token = "0x17000309")]
		private Button button
		{
			[Token(Token = "0x600184C")]
			[Address(RVA = "0x122D76C", Offset = "0x122D76C", VA = "0x122D76C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030A")]
		private UIStepper stepper
		{
			[Token(Token = "0x600184D")]
			[Address(RVA = "0x122D7B4", Offset = "0x122D7B4", VA = "0x122D7B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030B")]
		private bool leftmost
		{
			[Token(Token = "0x600184E")]
			[Address(RVA = "0x122D7FC", Offset = "0x122D7FC", VA = "0x122D7FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0x122D890", Offset = "0x122D890", VA = "0x122D890")]
		protected UIStepperSide()
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x122D898", Offset = "0x122D898", VA = "0x122D898", Slot = "19")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x122D940", Offset = "0x122D940", VA = "0x122D940", Slot = "20")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x122D8BC", Offset = "0x122D8BC", VA = "0x122D8BC")]
		private void Press()
		{
		}
	}
	[Token(Token = "0x20004A3")]
	public class UITabBar : MonoBehaviour
	{
		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform _frontTabRoot;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform _backTabRoot;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button[] _tabButtons;

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x122D944", Offset = "0x122D944", VA = "0x122D944")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x122D94C", Offset = "0x122D94C", VA = "0x122D94C")]
		public void SetTab(int tab)
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x122D9E8", Offset = "0x122D9E8", VA = "0x122D9E8")]
		public UITabBar()
		{
		}
	}
	[Token(Token = "0x20004A4")]
	public class UIThrowConfiguration : MonoBehaviour
	{
		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ThrowConfiguration currentConfig;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color currentColor;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text configLabel;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject configOptionsRoot;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject variantPanelRoot;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Smoothing")]
		public Toggle smoothingToggle;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject smoothingOptionsRoot;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Dropdown smoothingAlgorithmDropdown;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dropdown smoothingPeriodDropdown;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Dropdown smoothingTimeDropdown;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UIStepper smoothingFramesStepper;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UIStepper smoothignSecondsStepper;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Dropdown smoothingPointDropdown;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UISmoothingVisual smoothingUI;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Friction")]
		public Toggle frictionToggle;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject frictionOptionsRoot;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Slider frictionFalloffSlider;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Toggle frictionCustomCurveToggle;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UIStepper frictionSecondsStepper;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UICurveLine frictionCurveUI;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Assist")]
		public Toggle assistToggle;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject assistOptionsRoot;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Toggle assistCustomCurveToggle;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Slider assistGravitySlider;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Slider assistWeightSlider;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Slider assistRangeSlider;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public UICurveLine assistCurveUI;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Dropdown targetSelectionDropdown;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Scale")]
		public Toggle scaleToggle;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public GameObject scaleOptionsRoot;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Toggle scaleCustomCurveToggle;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Slider scaleRampSlider;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public UIStepper scaleStepper;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public UIStepper scaleThresholdStepper;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public UICurveLine scaleCurveUI;

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x122D9F0", Offset = "0x122D9F0", VA = "0x122D9F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x12269E0", Offset = "0x12269E0", VA = "0x12269E0")]
		public void LoadConfig(ThrowConfiguration config, Color color, bool enabled)
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x122E090", Offset = "0x122E090", VA = "0x122E090")]
		public void SetAssistEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x122DC48", Offset = "0x122DC48", VA = "0x122DC48")]
		public void SetAssistEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x122E288", Offset = "0x122E288", VA = "0x122E288")]
		public void SetFrictionEnabled(bool enabled)
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x122DD0C", Offset = "0x122DD0C", VA = "0x122DD0C")]
		public void SetFrictionEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x122E390", Offset = "0x122E390", VA = "0x122E390")]
		public void SetSmoothingEnabled(bool enabled)
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x122DDD0", Offset = "0x122DDD0", VA = "0x122DDD0")]
		public void SetSmoothingEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x122E39C", Offset = "0x122E39C", VA = "0x122E39C")]
		public void SetScalingEnabled(bool enabled)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x122DE80", Offset = "0x122DE80", VA = "0x122DE80")]
		public void SetScalingEnabled(bool enabled, bool configEnabled)
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x122E09C", Offset = "0x122E09C", VA = "0x122E09C")]
		private void SetPanelEnabled(GameObject panelRoot, GameObject toggle, bool enabled)
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x122DF44", Offset = "0x122DF44", VA = "0x122DF44")]
		private void SetChildrenColor(GameObject root, Color c)
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x122E4A4", Offset = "0x122E4A4", VA = "0x122E4A4")]
		public void SetEstimationAlgorithm(int value)
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x122E524", Offset = "0x122E524", VA = "0x122E524")]
		public void SetPeriodMeasurement(int value)
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x122E678", Offset = "0x122E678", VA = "0x122E678")]
		public void SetSampleSource(int value)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x122E6F8", Offset = "0x122E6F8", VA = "0x122E6F8")]
		public void SetSmoothingSampleTime(int value)
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x122E778", Offset = "0x122E778", VA = "0x122E778")]
		public void SetSmoothingSeconds(float seconds)
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x122E7F8", Offset = "0x122E7F8", VA = "0x122E7F8")]
		public void SetSmoothingFrames(float frames)
		{
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0x122E890", Offset = "0x122E890", VA = "0x122E890")]
		public void SetAssistRange(float range)
		{
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x122E910", Offset = "0x122E910", VA = "0x122E910")]
		public void SetAssistGravity(float gravity)
		{
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x122E990", Offset = "0x122E990", VA = "0x122E990")]
		public void SetAssistWeight(float weight)
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x122E18C", Offset = "0x122E18C", VA = "0x122E18C")]
		public void SetAssistCustomCurve(bool value)
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x122EA10", Offset = "0x122EA10", VA = "0x122EA10")]
		public void SetTargetSelectionMethod(int value)
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x122EA90", Offset = "0x122EA90", VA = "0x122EA90")]
		public void SetScalingMultiplier(float scale)
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x122EB10", Offset = "0x122EB10", VA = "0x122EB10")]
		public void SetScalingThreshold(float threshold)
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x122EB90", Offset = "0x122EB90", VA = "0x122EB90")]
		public void SetScalingRamp(float value)
		{
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x122E3A8", Offset = "0x122E3A8", VA = "0x122E3A8")]
		public void SetScalingCustomCurve(bool value)
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x122EC10", Offset = "0x122EC10", VA = "0x122EC10")]
		public void SetFrictionDuration(float value)
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0x122EC90", Offset = "0x122EC90", VA = "0x122EC90")]
		public void SetFrictionFalloff(float value)
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0x122E294", Offset = "0x122E294", VA = "0x122E294")]
		public void SetFrictionCustomCurve(bool value)
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0x122ED10", Offset = "0x122ED10", VA = "0x122ED10")]
		public UIThrowConfiguration()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	public class UIThrowGrip : MonoBehaviour
	{
		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image[] gripLevels;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image[] hands;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text noHandsWarning;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool[] gripStates;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sprite openHand;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Sprite closedHand;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GrabThresholdModifier> grips;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Slider grabBeginSlider;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Slider grabEndSlider;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool beginEndEqual;

		[Token(Token = "0x1700030C")]
		private float grabBegin
		{
			[Token(Token = "0x6001875")]
			[Address(RVA = "0x122ED18", Offset = "0x122ED18", VA = "0x122ED18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001876")]
			[Address(RVA = "0x122ED60", Offset = "0x122ED60", VA = "0x122ED60")]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		private float grabEnd
		{
			[Token(Token = "0x6001877")]
			[Address(RVA = "0x122EDB4", Offset = "0x122EDB4", VA = "0x122EDB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001878")]
			[Address(RVA = "0x122EDFC", Offset = "0x122EDFC", VA = "0x122EDFC")]
			set
			{
			}
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0x122EE50", Offset = "0x122EE50", VA = "0x122EE50")]
		private void Start()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x122F0DC", Offset = "0x122F0DC", VA = "0x122F0DC")]
		private void Update()
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0x122F408", Offset = "0x122F408", VA = "0x122F408")]
		public void SetGripBegin(float val)
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x122F49C", Offset = "0x122F49C", VA = "0x122F49C")]
		public void SetGripEnd(float val)
		{
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x122EF54", Offset = "0x122EF54", VA = "0x122EF54")]
		protected void ShowHidePanel(bool show)
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x122F530", Offset = "0x122F530", VA = "0x122F530")]
		public UIThrowGrip()
		{
		}
	}
	[Token(Token = "0x20004A6")]
	public class UIThrowTracker : MonoBehaviour
	{
		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text _distanceText;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text _angleText;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text _speedText;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button showHideButton;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button clearButton;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Image visibility;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Sprite visibleSprite;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sprite invisibleSprite;

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x122F594", Offset = "0x122F594", VA = "0x122F594")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0x122A1D8", Offset = "0x122A1D8", VA = "0x122A1D8")]
		public void SetAngle(float angle)
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0x122A138", Offset = "0x122A138", VA = "0x122A138")]
		public void SetSpeed(float speed)
		{
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x122992C", Offset = "0x122992C", VA = "0x122992C")]
		public void UpdateDistance(float distance)
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x122B594", Offset = "0x122B594", VA = "0x122B594")]
		public void RefreshVisibilityButton(bool showing)
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0x122F5B4", Offset = "0x122F5B4", VA = "0x122F5B4")]
		public UIThrowTracker()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	[RequireComponent(typeof(Text))]
	public class UIValueText : MonoBehaviour
	{
		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string _preDecorator;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string _toStringPattern;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string _postDecorator;

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x122F5BC", Offset = "0x122F5BC", VA = "0x122F5BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x122F614", Offset = "0x122F614", VA = "0x122F614")]
		public void SetValue(float value)
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x122F680", Offset = "0x122F680", VA = "0x122F680")]
		public UIValueText()
		{
		}
	}
}
namespace RGBSchemes
{
	[Token(Token = "0x20004A8")]
	public class XRAbsoluteHaptics : MonoBehaviour
	{
		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DominantHand _currentDominantHand;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<XRNode> XRNodes;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HapticClip Haptic;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool PlayOnAwake;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool Loop;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioSource SyncAudioSource;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int mSampleCopyIndex;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float mStartTime;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected float mLastTime;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected bool mPlaying;

		[Token(Token = "0x1700030E")]
		public bool IsPlaying
		{
			[Token(Token = "0x6001888")]
			[Address(RVA = "0x122F714", Offset = "0x122F714", VA = "0x122F714")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x122F71C", Offset = "0x122F71C", VA = "0x122F71C")]
		public void Play()
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0x122F77C", Offset = "0x122F77C", VA = "0x122F77C")]
		public void Pause()
		{
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x122F784", Offset = "0x122F784", VA = "0x122F784")]
		public void Stop()
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x122F794", Offset = "0x122F794", VA = "0x122F794")]
		private void SendHapticData(HapticSamples samples)
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x122F984", Offset = "0x122F984", VA = "0x122F984")]
		protected void PlayHapticPiece(HapticSamples hapticSamples, int sampleLength)
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0x122FBD0", Offset = "0x122FBD0", VA = "0x122FBD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x122FC08", Offset = "0x122FC08", VA = "0x122FC08")]
		protected void Update()
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x122FEC0", Offset = "0x122FEC0", VA = "0x122FEC0")]
		public XRAbsoluteHaptics()
		{
		}
	}
}
namespace Pixelplacement
{
	[Token(Token = "0x20004A9")]
	[RequireComponent(typeof(Collider))]
	[RequireComponent(typeof(Rigidbody))]
	[ExecuteInEditMode]
	public sealed class ColliderButton : MonoBehaviour
	{
		[Token(Token = "0x20004AA")]
		public enum EaseType
		{
			[Token(Token = "0x40014D6")]
			EaseOut,
			[Token(Token = "0x40014D7")]
			EaseOutBack
		}

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColliderButtonEvent OnSelected;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ColliderButtonEvent OnDeselected;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ColliderButtonEvent OnClick;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ColliderButtonEvent OnPressed;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ColliderButtonEvent OnReleased;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool useKey;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool useTimer;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float timer;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool unscaledTime;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string[] keyInputs;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool _unityEventsFolded;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool _scaleResponseFolded;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool _colorResponseFolded;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public bool applyColor;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool applyScale;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LayerMask collisionLayerMask;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Renderer colorRendererTarget;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Image colorImageTarget;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color selectedColor;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color pressedColor;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color disabledColor;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float colorDuration;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform scaleTarget;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Vector3 normalScale;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector3 selectedScale;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Vector3 pressedScale;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float scaleDuration;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public EaseType scaleEaseType;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public bool resizeGUIBoxCollider;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		public bool centerGUIBoxCollider;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector2 guiBoxColliderPadding;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool interactable;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		public bool applySprite;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Sprite selectedSprite;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Sprite pressedSprite;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Sprite normalSprite;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Sprite disabledSprite;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public bool triggerEvents;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		private bool _clicking;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int _selectedCount;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool _colliderSelected;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		private bool _pressed;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
		private bool _released;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x123")]
		private bool _vrRunning;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float _currentTimer;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private RectTransform _rectTransform;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private EventTrigger _eventTrigger;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private EventTrigger.Entry _pressedEventTrigger;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private EventTrigger.Entry _releasedEventTrigger;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private EventTrigger.Entry _enterEventTrigger;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private EventTrigger.Entry _exitEventTrigger;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private int _colliderCount;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private BoxCollider _boxCollider;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private TweenBase _colorTweenImage;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private TweenBase _colorTweenMaterial;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private TweenBase _scaleTween;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Color _normalColorRenderer;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Color _normalColorImage;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private bool _interactableStatus;

		[Token(Token = "0x1700030F")]
		public bool IsSelected
		{
			[Token(Token = "0x600189B")]
			[Address(RVA = "0x12307A8", Offset = "0x12307A8", VA = "0x12307A8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600189C")]
			[Address(RVA = "0x12307B0", Offset = "0x12307B0", VA = "0x12307B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000310")]
		public float TimerPercentage
		{
			[Token(Token = "0x600189D")]
			[Address(RVA = "0x12307BC", Offset = "0x12307BC", VA = "0x12307BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x14000007")]
		public static event Action<ColliderButton> OnSelectedGlobal
		{
			[Token(Token = "0x6001891")]
			[Address(RVA = "0x122FF90", Offset = "0x122FF90", VA = "0x122FF90")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001892")]
			[Address(RVA = "0x123005C", Offset = "0x123005C", VA = "0x123005C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public static event Action<ColliderButton> OnDeselectedGlobal
		{
			[Token(Token = "0x6001893")]
			[Address(RVA = "0x1230128", Offset = "0x1230128", VA = "0x1230128")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001894")]
			[Address(RVA = "0x12301F8", Offset = "0x12301F8", VA = "0x12301F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public static event Action<ColliderButton> OnClickGlobal
		{
			[Token(Token = "0x6001895")]
			[Address(RVA = "0x12302C8", Offset = "0x12302C8", VA = "0x12302C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001896")]
			[Address(RVA = "0x1230398", Offset = "0x1230398", VA = "0x1230398")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public static event Action<ColliderButton> OnPressedGlobal
		{
			[Token(Token = "0x6001897")]
			[Address(RVA = "0x1230468", Offset = "0x1230468", VA = "0x1230468")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001898")]
			[Address(RVA = "0x1230538", Offset = "0x1230538", VA = "0x1230538")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public static event Action<ColliderButton> OnReleasedGlobal
		{
			[Token(Token = "0x6001899")]
			[Address(RVA = "0x1230608", Offset = "0x1230608", VA = "0x1230608")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600189A")]
			[Address(RVA = "0x12306D8", Offset = "0x12306D8", VA = "0x12306D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x12307CC", Offset = "0x12307CC", VA = "0x12307CC")]
		private void Reset()
		{
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x1230A18", Offset = "0x1230A18", VA = "0x1230A18")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x1231328", Offset = "0x1231328", VA = "0x1231328")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x12314A0", Offset = "0x12314A0", VA = "0x12314A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x12315B0", Offset = "0x12315B0", VA = "0x12315B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x1232154", Offset = "0x1232154", VA = "0x1232154")]
		public void OnEnter()
		{
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x1232164", Offset = "0x1232164", VA = "0x1232164")]
		public void OnExit()
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x1232178", Offset = "0x1232178", VA = "0x1232178")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x1232190", Offset = "0x1232190", VA = "0x1232190")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x12321AC", Offset = "0x12321AC", VA = "0x12321AC")]
		private void OnPointerDownDelegate(PointerEventData data)
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x12321B0", Offset = "0x12321B0", VA = "0x12321B0")]
		private void OnPointerUpDelegate(PointerEventData data)
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x12321B4", Offset = "0x12321B4", VA = "0x12321B4")]
		private void OnPointerEnterDelegate(PointerEventData data)
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x12321B8", Offset = "0x12321B8", VA = "0x12321B8")]
		private void OnPointerExitDelegate(PointerEventData data)
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x12321BC", Offset = "0x12321BC", VA = "0x12321BC")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x12321EC", Offset = "0x12321EC", VA = "0x12321EC")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x1231E88", Offset = "0x1231E88", VA = "0x1231E88")]
		public void Deselected()
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x1231D80", Offset = "0x1231D80", VA = "0x1231D80")]
		public void Selected()
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x1231F88", Offset = "0x1231F88", VA = "0x1231F88")]
		[ContextMenu("Pressed")]
		public void Pressed()
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x1232058", Offset = "0x1232058", VA = "0x1232058")]
		public void Released()
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x12311D8", Offset = "0x12311D8", VA = "0x12311D8")]
		private void ResizeGUIBoxCollider(BoxCollider boxCollider)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x1231350", Offset = "0x1231350", VA = "0x1231350")]
		private void ColorReset()
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x1231948", Offset = "0x1231948", VA = "0x1231948")]
		private void ColorNormal()
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x1232324", Offset = "0x1232324", VA = "0x1232324")]
		private void ColorSelected()
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x1232674", Offset = "0x1232674", VA = "0x1232674")]
		private void ColorPressed()
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x1231B6C", Offset = "0x1231B6C", VA = "0x1231B6C")]
		private void ColorDisabled()
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x1231528", Offset = "0x1231528", VA = "0x1231528")]
		public void SpriteReset()
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x1231B38", Offset = "0x1231B38", VA = "0x1231B38")]
		public void SpriteNormal()
		{
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x1232640", Offset = "0x1232640", VA = "0x1232640")]
		public void SpriteSelected()
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x123298C", Offset = "0x123298C", VA = "0x123298C")]
		public void SpritePressed()
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x1231D4C", Offset = "0x1231D4C", VA = "0x1231D4C")]
		public void SpriteDisabled()
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x12314F0", Offset = "0x12314F0", VA = "0x12314F0")]
		private void ScaleReset()
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x12321FC", Offset = "0x12321FC", VA = "0x12321FC")]
		private void ScaleNormal()
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x1232504", Offset = "0x1232504", VA = "0x1232504")]
		private void ScaleSelected()
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x1232854", Offset = "0x1232854", VA = "0x1232854")]
		private void ScalePressed()
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x12329C0", Offset = "0x12329C0", VA = "0x12329C0")]
		public void SetInteractable(bool state)
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x12329CC", Offset = "0x12329CC", VA = "0x12329CC")]
		public ColliderButton()
		{
		}
	}
}
namespace Lightbug.CharacterControllerPro.Core
{
	[Token(Token = "0x20004AB")]
	[RequireComponent(typeof(Animator))]
	public class PlayerAnimatorLink : AnimatorLink
	{
		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useBuiltinRootMotion;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform builtinRootmotionTarget;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion currentRotation;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 deltaPosition;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion deltaRotation;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 previousPosition;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion previousRotation;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform trans;

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x1232C30", Offset = "0x1232C30", VA = "0x1232C30", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x1232C60", Offset = "0x1232C60", VA = "0x1232C60", Slot = "5")]
		protected override void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x1233138", Offset = "0x1233138", VA = "0x1233138")]
		public PlayerAnimatorLink()
		{
		}
	}
}
namespace DigitalRuby.LightningBolt
{
	[Token(Token = "0x20004AC")]
	public enum LightningBoltAnimationMode
	{
		[Token(Token = "0x40014E2")]
		None,
		[Token(Token = "0x40014E3")]
		Random,
		[Token(Token = "0x40014E4")]
		Loop,
		[Token(Token = "0x40014E5")]
		PingPong
	}
	[Token(Token = "0x20004AD")]
	[RequireComponent(typeof(LineRenderer))]
	public class LightningBoltScript : MonoBehaviour
	{
		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The game object where the lightning will emit from. If null, StartPosition is used.")]
		public GameObject StartObject;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The start position where the lightning will emit from. This is in world space if StartObject is null, otherwise this is offset from StartObject position.")]
		public Vector3 StartPosition;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The game object where the lightning will end at. If null, EndPosition is used.")]
		public GameObject EndObject;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The end position where the lightning will end at. This is in world space if EndObject is null, otherwise this is offset from EndObject position.")]
		public Vector3 EndPosition;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 8f)]
		[UnityEngine.Tooltip("How manu generations? Higher numbers create more line segments.")]
		public int Generations;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("How long each bolt should last before creating a new bolt. In ManualMode, the bolt will simply disappear after this amount of seconds.")]
		[Range(0.01f, 1f)]
		public float Duration;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float timer;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("How chaotic should the lightning be? (0-1)")]
		public float ChaosFactor;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("In manual mode, the trigger method must be called to create a bolt")]
		public bool ManualMode;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(1f, 64f)]
		[UnityEngine.Tooltip("The number of rows in the texture. Used for animation.")]
		public int Rows;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("The number of columns in the texture. Used for animation.")]
		[Range(1f, 64f)]
		public int Columns;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("The animation mode for the lightning")]
		public LightningBoltAnimationMode AnimationMode;

		[NonSerialized]
		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public System.Random RandomGenerator;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<KeyValuePair<Vector3, Vector3>> segments;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int startIndex;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector2 size;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2[] offsets;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int animationOffsetIndex;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int animationPingPongDirection;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool orthographic;

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x1233140", Offset = "0x1233140", VA = "0x1233140")]
		private void GetPerpendicularVector(ref Vector3 directionNormalized, out Vector3 side)
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x123332C", Offset = "0x123332C", VA = "0x123332C")]
		private void GenerateLightningBolt(Vector3 start, Vector3 end, int generation, int totalGenerations, float offsetAmount)
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x1233800", Offset = "0x1233800", VA = "0x1233800")]
		public void RandomVector(ref Vector3 start, ref Vector3 end, float offsetAmount, out Vector3 result)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x12339F8", Offset = "0x12339F8", VA = "0x12339F8")]
		private void SelectOffsetFromAnimationMode()
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x1233BA4", Offset = "0x1233BA4", VA = "0x1233BA4")]
		private void UpdateLineRenderer()
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x1233D10", Offset = "0x1233D10", VA = "0x1233D10")]
		private void Start()
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x1233F34", Offset = "0x1233F34", VA = "0x1233F34")]
		private void Update()
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x1234030", Offset = "0x1234030", VA = "0x1234030")]
		public float Trigger()
		{
			return default(float);
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x1233E00", Offset = "0x1233E00", VA = "0x1233E00")]
		public void UpdateFromMaterialChange()
		{
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x123418C", Offset = "0x123418C", VA = "0x123418C")]
		public LightningBoltScript()
		{
		}
	}
}
namespace Fungus
{
	[Token(Token = "0x20004AE")]
	[ExecuteInEditMode]
	public class Character : MonoBehaviour, ILocalizable, IComparer<Character>
	{
		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Character name as displayed in Say Dialog.")]
		[SerializeField]
		protected string nameText;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Color to display the character name in Say Dialog.")]
		[SerializeField]
		protected Color nameColor;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[EventRef]
		[SerializeField]
		[UnityEngine.Tooltip("Sound effect to play when this character is speaking.")]
		protected string soundEffect;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[UnityEngine.Tooltip("List of portrait images that can be displayed for this character.")]
		protected List<Sprite> portraits;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("Sets the active Say dialog with a reference to a Say Dialog object in the scene. This Say Dialog will be used whenever the character speaks.")]
		protected SayDialog setSayDialog;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected string localizationID;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[TextArea(5, 10)]
		[FormerlySerializedAs("notes")]
		[SerializeField]
		protected string description;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected Animator animator;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected Transform head;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		protected LookAtConstraint lookAt;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		protected UnityEvent onSay;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static List<Character> activeCharacters;

		[Token(Token = "0x17000311")]
		public static List<Character> ActiveCharacters
		{
			[Token(Token = "0x60018D5")]
			[Address(RVA = "0x1234458", Offset = "0x1234458", VA = "0x1234458")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000312")]
		public virtual string NameText
		{
			[Token(Token = "0x60018D6")]
			[Address(RVA = "0x12344B0", Offset = "0x12344B0", VA = "0x12344B0", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000313")]
		public virtual Color NameColor
		{
			[Token(Token = "0x60018D7")]
			[Address(RVA = "0x12344B8", Offset = "0x12344B8", VA = "0x12344B8", Slot = "12")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000314")]
		public virtual string SoundEffect
		{
			[Token(Token = "0x60018D8")]
			[Address(RVA = "0x12344C4", Offset = "0x12344C4", VA = "0x12344C4", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		public virtual List<Sprite> Portraits
		{
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x12344CC", Offset = "0x12344CC", VA = "0x12344CC", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000316")]
		public virtual Sprite ProfileSprite
		{
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x12344D4", Offset = "0x12344D4", VA = "0x12344D4", Slot = "15")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0x12344DC", Offset = "0x12344DC", VA = "0x12344DC", Slot = "16")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000317")]
		public virtual SayDialog SetSayDialog
		{
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0x12344E4", Offset = "0x12344E4", VA = "0x12344E4", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000318")]
		public virtual Animator Animator
		{
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0x12344EC", Offset = "0x12344EC", VA = "0x12344EC", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x1234284", Offset = "0x1234284", VA = "0x1234284", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x12343D8", Offset = "0x12343D8", VA = "0x12343D8", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x12344F4", Offset = "0x12344F4", VA = "0x12344F4")]
		public string GetObjectName()
		{
			return null;
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x1234514", Offset = "0x1234514", VA = "0x1234514", Slot = "19")]
		public virtual bool NameStartsWith(string matchString)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0x12345F8", Offset = "0x12345F8", VA = "0x12345F8", Slot = "20")]
		public virtual bool NameMatch(string matchString)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x12346D0", Offset = "0x12346D0", VA = "0x12346D0", Slot = "8")]
		public int Compare(Character x, Character y)
		{
			return default(int);
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x12347E4", Offset = "0x12347E4", VA = "0x12347E4", Slot = "21")]
		public virtual Sprite GetPortrait(string portraitString)
		{
			return null;
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x1234928", Offset = "0x1234928", VA = "0x1234928")]
		public void Say(string animation)
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x12349D0", Offset = "0x12349D0", VA = "0x12349D0", Slot = "22")]
		public virtual string GetStandardText()
		{
			return null;
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x12349D8", Offset = "0x12349D8", VA = "0x12349D8", Slot = "23")]
		public virtual void SetStandardText(string standardText)
		{
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x12349E0", Offset = "0x12349E0", VA = "0x12349E0", Slot = "24")]
		public virtual string GetDescription()
		{
			return null;
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0x12349E8", Offset = "0x12349E8", VA = "0x12349E8", Slot = "25")]
		public virtual string GetStringId()
		{
			return null;
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x1234A90", Offset = "0x1234A90", VA = "0x1234A90")]
		public void SetFontText(TMP_FontAsset font, Material fontMaterial, Material dissolveMaterial)
		{
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0x1234AF8", Offset = "0x1234AF8", VA = "0x1234AF8")]
		public Character()
		{
		}
	}
	[Token(Token = "0x20004AF")]
	[CommandInfo("Narrative", "Clear Menu", "Clears the options from a menu dialogue", 0)]
	public class ClearMenu : Command
	{
		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Menu Dialog to clear the options on")]
		[SerializeField]
		protected MenuDialog menuDialog;

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0x1234BA0", Offset = "0x1234BA0", VA = "0x1234BA0", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x1234BD8", Offset = "0x1234BD8", VA = "0x1234BD8", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0x1234C74", Offset = "0x1234C74", VA = "0x1234C74", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x1234C94", Offset = "0x1234C94", VA = "0x1234C94")]
		public ClearMenu()
		{
		}
	}
	[Token(Token = "0x20004B0")]
	[CommandInfo("Flow", "Dynamic Call", "Execute another block in the same Flowchart as the command, or in a different Flowchart.", 0)]
	[AddComponentMenu("")]
	public class DynamicCall : Command, IBlockCaller, IStringLocationIdentifier
	{
		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected Flowchart[] targetFlowcharts;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected string targetBlock;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected int startIndex;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		protected CallMode callMode;

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x1234C9C", Offset = "0x1234C9C", VA = "0x1234C9C", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x1234EB8", Offset = "0x1234EB8", VA = "0x1234EB8", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x1234F80", Offset = "0x1234F80", VA = "0x1234F80", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x1234FA0", Offset = "0x1234FA0", VA = "0x1234FA0", Slot = "43")]
		public bool MayCallBlock(Block block)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x1234FD8", Offset = "0x1234FD8", VA = "0x1234FD8")]
		public DynamicCall()
		{
		}
	}
	[Token(Token = "0x20004B1")]
	[AddComponentMenu("")]
	[CommandInfo("Narrative", "Menu", "Displays a button in a multiple choice menu", 0)]
	public class Menu : Command, ILocalizable, IBlockCaller, IStringLocationIdentifier
	{
		[Token(Token = "0x20004B2")]
		public enum MenuDialogType
		{
			[Token(Token = "0x4001517")]
			Default = 0,
			[Token(Token = "0x4001518")]
			Alchemist = 10,
			[Token(Token = "0x4001519")]
			Moth = 11
		}

		[Serializable]
		[Token(Token = "0x20004B3")]
		public struct MenuDialogPair
		{
			[Token(Token = "0x400151A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MenuDialogType type;

			[Token(Token = "0x400151B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MenuDialog menuDialog;
		}

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<MenuDialogPair> MenuDialogs;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[TextArea]
		[UnityEngine.Tooltip("Text to display on the menu button")]
		protected string text;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[UnityEngine.Tooltip("Notes about the option text for other authors, localization, etc.")]
		protected string description;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Block to execute when this option is selected")]
		[SerializeField]
		[FormerlySerializedAs("targetSequence")]
		protected Block targetBlock;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[UnityEngine.Tooltip("Hide this option if the target block has been executed previously")]
		protected bool hideIfVisited;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[UnityEngine.Tooltip("If false, the menu option will be displayed but will not be selectable")]
		protected BooleanData interactable;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("A custom Menu Dialog to use to display this menu. All subsequent Menu commands will use this dialog.")]
		protected MenuDialog setMenuDialog;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		protected MenuDialogType menuDialog;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("If true, this option will be passed to the Menu Dialogue but marked as hidden, this can be used to hide options while maintaining a Menu Shuffle.")]
		[SerializeField]
		protected BooleanData hideThisOption;

		[Token(Token = "0x17000319")]
		public MenuDialog SetMenuDialog
		{
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0x1234FF0", Offset = "0x1234FF0", VA = "0x1234FF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x12352AC", Offset = "0x12352AC", VA = "0x12352AC", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x12358BC", Offset = "0x12358BC", VA = "0x12358BC", Slot = "30")]
		public override void GetConnectedBlocks(ref List<Block> connectedBlocks)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x12359C0", Offset = "0x12359C0", VA = "0x12359C0", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x1235AD0", Offset = "0x1235AD0", VA = "0x1235AD0", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x1235AF0", Offset = "0x1235AF0", VA = "0x1235AF0", Slot = "31")]
		public override bool HasReference(Variable variable)
		{
			return default(bool);
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x1235BAC", Offset = "0x1235BAC", VA = "0x1235BAC", Slot = "47")]
		public bool MayCallBlock(Block block)
		{
			return default(bool);
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x1235C18", Offset = "0x1235C18", VA = "0x1235C18", Slot = "48")]
		public virtual string GetStandardText()
		{
			return null;
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x1235C20", Offset = "0x1235C20", VA = "0x1235C20", Slot = "49")]
		public virtual void SetStandardText(string standardText)
		{
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x1235C28", Offset = "0x1235C28", VA = "0x1235C28", Slot = "50")]
		public virtual string GetDescription()
		{
			return null;
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x1235C30", Offset = "0x1235C30", VA = "0x1235C30", Slot = "51")]
		public virtual string GetStringId()
		{
			return null;
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x1234FF8", Offset = "0x1234FF8", VA = "0x1234FF8")]
		public MenuDialog GetMenuDialog(MenuDialogType dialogType)
		{
			return null;
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x1235CD4", Offset = "0x1235CD4", VA = "0x1235CD4")]
		public Menu()
		{
		}
	}
	[Token(Token = "0x20004B6")]
	[ExecuteInEditMode]
	[AddComponentMenu("")]
	[CommandInfo("Narrative", "Menu Shuffle", "Shuffle the order of the items in a Fungus Menu", 0)]
	public class MenuShuffle : Command
	{
		[Token(Token = "0x20004B7")]
		public enum Mode
		{
			[Token(Token = "0x4001522")]
			Every,
			[Token(Token = "0x4001523")]
			Once
		}

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("Determines if the order is shuffled everytime this command is it (Every) or if it is consistent when returned to but random (Once)")]
		protected Mode shuffleMode;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int seed;

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x1235E58", Offset = "0x1235E58", VA = "0x1235E58", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x1236030", Offset = "0x1236030", VA = "0x1236030", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x1236098", Offset = "0x1236098", VA = "0x1236098", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x12360B8", Offset = "0x12360B8", VA = "0x12360B8")]
		public MenuShuffle()
		{
		}
	}
	[Token(Token = "0x20004B8")]
	[CommandInfo("Narrative", "Menu Timer", "Displays a timer bar and executes a target block if the player fails to select a menu option in time.", 0)]
	[ExecuteInEditMode]
	[AddComponentMenu("")]
	public class MenuTimer : Command, IBlockCaller, IStringLocationIdentifier
	{
		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("Length of time to display the timer for")]
		protected FloatData _duration;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[FormerlySerializedAs("targetSequence")]
		[SerializeField]
		[UnityEngine.Tooltip("Block to execute when the timer expires")]
		protected Block targetBlock;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		[FormerlySerializedAs("duration")]
		public float durationOLD;

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x12360CC", Offset = "0x12360CC", VA = "0x12360CC", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x12361A0", Offset = "0x12361A0", VA = "0x12361A0", Slot = "30")]
		public override void GetConnectedBlocks(ref List<Block> connectedBlocks)
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0x12362A4", Offset = "0x12362A4", VA = "0x12362A4", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0x1236348", Offset = "0x1236348", VA = "0x1236348", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0x1236368", Offset = "0x1236368", VA = "0x1236368", Slot = "31")]
		public override bool HasReference(Variable variable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0x12363FC", Offset = "0x12363FC", VA = "0x12363FC", Slot = "43")]
		public bool MayCallBlock(Block block)
		{
			return default(bool);
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x1236468", Offset = "0x1236468", VA = "0x1236468", Slot = "44")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x1236494", Offset = "0x1236494", VA = "0x1236494")]
		public MenuTimer()
		{
		}
	}
	[Token(Token = "0x20004B9")]
	[CommandInfo("Progress", "Unlock Objective", "", 0)]
	[AddComponentMenu("")]
	public class Unlockobjective : Command
	{
		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ObjectiveScriptableObject scriptableObject;

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x12364E0", Offset = "0x12364E0", VA = "0x12364E0", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x1236574", Offset = "0x1236574", VA = "0x1236574")]
		public Unlockobjective()
		{
		}
	}
	[Token(Token = "0x20004BA")]
	[AddComponentMenu("")]
	[CommandInfo("Variable", "Load JSON Variable", "Loads a saved value and stores it in a Boolean, Integer, Float or String variable. If the key is not found then the variable is not modified.", 0)]
	public class LoadJSONVariableCommand : Command
	{
		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Name of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}\"")]
		[SerializeField]
		protected string key;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[VariableProperty(new Type[]
		{
			typeof(BooleanVariable),
			typeof(IntegerVariable),
			typeof(FloatVariable),
			typeof(StringVariable)
		})]
		[UnityEngine.Tooltip("Variable to store the value in.")]
		[SerializeField]
		protected Variable variable;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[VariableProperty(new Type[]
		{
			typeof(BooleanVariable),
			typeof(IntegerVariable),
			typeof(FloatVariable),
			typeof(StringVariable)
		})]
		[SerializeField]
		protected Variable defaultValue;

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x123657C", Offset = "0x123657C", VA = "0x123657C", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x1236C7C", Offset = "0x1236C7C", VA = "0x1236C7C", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x1236D8C", Offset = "0x1236D8C", VA = "0x1236D8C", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x1236DAC", Offset = "0x1236DAC", VA = "0x1236DAC", Slot = "31")]
		public override bool HasReference(Variable in_variable)
		{
			return default(bool);
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x1236E40", Offset = "0x1236E40", VA = "0x1236E40")]
		public LoadJSONVariableCommand()
		{
		}
	}
	[Token(Token = "0x20004BB")]
	[AddComponentMenu("")]
	[CommandInfo("Variable", "Save JSON Variable", "Save an Boolean, Integer, Float or String variable to persistent storage using a string key. The value can be loaded again later using the Load Variable command. You can also use the Set Save Profile command to manage separate save profiles for multiple players.", 0)]
	public class SaveJSONVariableCommand : Command
	{
		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Name of the saved value. Supports variable substition e.g. \"player_{$PlayerNumber}")]
		[SerializeField]
		protected string key;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Variable to read the value from. Only Boolean, Integer, Float and String are supported.")]
		[VariableProperty(new Type[]
		{
			typeof(BooleanVariable),
			typeof(IntegerVariable),
			typeof(FloatVariable),
			typeof(StringVariable)
		})]
		[SerializeField]
		protected Variable variable;

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x1236E98", Offset = "0x1236E98", VA = "0x1236E98", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x12373B4", Offset = "0x12373B4", VA = "0x12373B4", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x12374B8", Offset = "0x12374B8", VA = "0x12374B8", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x12374D8", Offset = "0x12374D8", VA = "0x12374D8", Slot = "31")]
		public override bool HasReference(Variable in_variable)
		{
			return default(bool);
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x123756C", Offset = "0x123756C", VA = "0x123756C")]
		public SaveJSONVariableCommand()
		{
		}
	}
	[Token(Token = "0x20004BC")]
	[CommandInfo("Narrative", "Say", "Writes text in a dialog box.", 0)]
	[AddComponentMenu("")]
	public class Say : Command, ILocalizable
	{
		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[TextArea(5, 10)]
		protected string storyText;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Notes about this story text for other authors, localization, etc.")]
		[SerializeField]
		protected string description;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Character that is speaking")]
		[SerializeField]
		protected Character character;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Portrait that represents speaking character")]
		[SerializeField]
		protected Sprite portrait;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[EventRef]
		public string voiceOverEvent;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[UnityEngine.Tooltip("Always show this Say text when the command is executed multiple times")]
		protected bool showAlways;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[UnityEngine.Tooltip("Number of times to show this Say text when the command is executed multiple times")]
		protected int showCount;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Type this text in the previous dialog box.")]
		[SerializeField]
		protected bool extendPrevious;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[SerializeField]
		[UnityEngine.Tooltip("Fade out the dialog box when writing has finished and not waiting for input.")]
		protected bool fadeWhenDone;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[SerializeField]
		[UnityEngine.Tooltip("Wait for player to click before continuing.")]
		protected bool waitForClick;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[UnityEngine.Tooltip("Stop playing voiceover when text finishes writing.")]
		[SerializeField]
		protected bool stopVoiceover;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("Wait for the Voice Over to complete before continuing")]
		[SerializeField]
		protected bool waitForVO;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		protected string animation;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		protected SayDialogueHeightTypes height;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("Sets the active Say dialog with a reference to a Say Dialog object in the scene. All story text will now display using this Say Dialog.")]
		[SerializeField]
		protected SayDialog setSayDialog;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected int executionCount;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TMP_FontAsset font;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material fontMaterial;

		[Token(Token = "0x1700031A")]
		public virtual Character _Character
		{
			[Token(Token = "0x6001920")]
			[Address(RVA = "0x12375C4", Offset = "0x12375C4", VA = "0x12375C4", Slot = "47")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		public virtual Sprite Portrait
		{
			[Token(Token = "0x6001921")]
			[Address(RVA = "0x12375CC", Offset = "0x12375CC", VA = "0x12375CC", Slot = "48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001922")]
			[Address(RVA = "0x12375D4", Offset = "0x12375D4", VA = "0x12375D4", Slot = "49")]
			set
			{
			}
		}

		[Token(Token = "0x1700031C")]
		public virtual bool ExtendPrevious
		{
			[Token(Token = "0x6001923")]
			[Address(RVA = "0x12375DC", Offset = "0x12375DC", VA = "0x12375DC", Slot = "50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x12375E4", Offset = "0x12375E4", VA = "0x12375E4", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x1237F94", Offset = "0x1237F94", VA = "0x1237F94", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x12380A0", Offset = "0x12380A0", VA = "0x12380A0", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x12380C0", Offset = "0x12380C0", VA = "0x12380C0", Slot = "29")]
		public override void OnReset()
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x12380C8", Offset = "0x12380C8", VA = "0x12380C8", Slot = "24")]
		public override void OnStopExecuting()
		{
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x123817C", Offset = "0x123817C", VA = "0x123817C", Slot = "51")]
		public virtual string GetStandardText()
		{
			return null;
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x1238184", Offset = "0x1238184", VA = "0x1238184", Slot = "52")]
		public virtual void SetStandardText(string standardText)
		{
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x123818C", Offset = "0x123818C", VA = "0x123818C", Slot = "53")]
		public virtual string GetDescription()
		{
			return null;
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x1238194", Offset = "0x1238194", VA = "0x1238194", Slot = "54")]
		public virtual string GetStringId()
		{
			return null;
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x1238414", Offset = "0x1238414", VA = "0x1238414")]
		public void SetFontText(TMP_FontAsset font, Material fontMaterial, Material dissolveMaterial)
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x1238444", Offset = "0x1238444", VA = "0x1238444")]
		public Say()
		{
		}
	}
	[Token(Token = "0x20004BD")]
	[CommandInfo("Narrative", "Set Menu Dialog", "Sets a custom menu dialog to use when displaying multiple choice menus", 0)]
	[AddComponentMenu("")]
	public class SetMenuDialog : Command
	{
		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The Menu Dialog to use for displaying menu buttons")]
		[SerializeField]
		protected MenuDialog menuDialog;

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x1238500", Offset = "0x1238500", VA = "0x1238500", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x12385C0", Offset = "0x12385C0", VA = "0x12385C0", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x123865C", Offset = "0x123865C", VA = "0x123865C", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x123867C", Offset = "0x123867C", VA = "0x123867C")]
		public SetMenuDialog()
		{
		}
	}
	[Token(Token = "0x20004BE")]
	[CommandInfo("Narrative", "Set Say Dialog", "Sets a custom say dialog to use when displaying story text", 0)]
	[AddComponentMenu("")]
	public class SetSayDialog : Command
	{
		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The Say Dialog to use for displaying Say story text")]
		[SerializeField]
		protected SayDialog sayDialog;

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x1238684", Offset = "0x1238684", VA = "0x1238684", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x1238734", Offset = "0x1238734", VA = "0x1238734", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x12387D0", Offset = "0x12387D0", VA = "0x12387D0", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x12387F0", Offset = "0x12387F0", VA = "0x12387F0")]
		public SetSayDialog()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	[CommandInfo("UI", "Set Text", "Sets the text property on a UI Text object and/or an Input Field object.", 0)]
	[AddComponentMenu("")]
	public class SetText : Command, ILocalizable
	{
		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("Text object to set text on. Can be a UI Text, Text Field or Text Mesh object.")]
		protected GameObject targetTextObject;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FormerlySerializedAs("stringData")]
		[UnityEngine.Tooltip("String value to assign to the text object")]
		[SerializeField]
		protected StringDataMulti text;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Notes about this story text for other authors, localization, etc.")]
		[SerializeField]
		protected string description;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool toUpper;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[SerializeField]
		protected bool useOverlayMaterial;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[FormerlySerializedAs("textObject")]
		public Text _textObjectObsolete;

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x12387F8", Offset = "0x12387F8", VA = "0x12387F8", Slot = "27")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x12389E4", Offset = "0x12389E4", VA = "0x12389E4", Slot = "34")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x1238AB8", Offset = "0x1238AB8", VA = "0x1238AB8", Slot = "39")]
		public override Color GetButtonColor()
		{
			return default(Color);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x1238AD8", Offset = "0x1238AD8", VA = "0x1238AD8", Slot = "31")]
		public override bool HasReference(Variable variable)
		{
			return default(bool);
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x1238B6C", Offset = "0x1238B6C", VA = "0x1238B6C", Slot = "47")]
		public virtual string GetStandardText()
		{
			return null;
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x1238B7C", Offset = "0x1238B7C", VA = "0x1238B7C", Slot = "48")]
		public virtual void SetStandardText(string standardText)
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x1238B88", Offset = "0x1238B88", VA = "0x1238B88", Slot = "49")]
		public virtual string GetDescription()
		{
			return null;
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x1238B90", Offset = "0x1238B90", VA = "0x1238B90", Slot = "50")]
		public virtual string GetStringId()
		{
			return null;
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x1238C2C", Offset = "0x1238C2C", VA = "0x1238C2C", Slot = "51")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x1238CC0", Offset = "0x1238CC0", VA = "0x1238CC0")]
		public SetText()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	[EventHandlerInfo("DamageSystem", "DamageableEvent", "The block will execute when the user clicks or taps on the clickable object.")]
	[AddComponentMenu("")]
	public class DamageableEvent : EventHandler
	{
		[Token(Token = "0x20004C1")]
		public class DamageableChangedEvent
		{
			[Token(Token = "0x400154B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Damageable damageableObject;

			[Token(Token = "0x400154C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MessageType messageType;

			[Token(Token = "0x6001948")]
			[Address(RVA = "0x12390D0", Offset = "0x12390D0", VA = "0x12390D0")]
			public DamageableChangedEvent(Damageable damageableObject, MessageType type)
			{
			}
		}

		[Token(Token = "0x20004C2")]
		[CompilerGenerated]
		private sealed class <DoExecuteBlock>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400154D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400154E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400154F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numFrames;

			[Token(Token = "0x4001550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DamageableEvent <>4__this;

			[Token(Token = "0x4001551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <count>5__2;

			[Token(Token = "0x1700031D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600194C")]
				[Address(RVA = "0x12391F4", Offset = "0x12391F4", VA = "0x12391F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600194E")]
				[Address(RVA = "0x123923C", Offset = "0x123923C", VA = "0x123923C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001949")]
			[Address(RVA = "0x1238FFC", Offset = "0x1238FFC", VA = "0x1238FFC")]
			[DebuggerHidden]
			public <DoExecuteBlock>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600194A")]
			[Address(RVA = "0x123910C", Offset = "0x123910C", VA = "0x123910C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600194B")]
			[Address(RVA = "0x1239110", Offset = "0x1239110", VA = "0x1239110", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600194D")]
			[Address(RVA = "0x12391FC", Offset = "0x12391FC", VA = "0x12391FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("Object that the user can click or tap on")]
		protected Damageable damageableObject;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected MessageType messageType;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[UnityEngine.Tooltip("Wait for a number of frames before executing the block.")]
		protected int waitFrames;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected EventDispatcher eventDispatcher;

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x1238CC8", Offset = "0x1238CC8", VA = "0x1238CC8", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x1238DD4", Offset = "0x1238DD4", VA = "0x1238DD4", Slot = "9")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x1238EB8", Offset = "0x1238EB8", VA = "0x1238EB8")]
		private void OnDamageableEvent(DamageableChangedEvent evt)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x1238F78", Offset = "0x1238F78", VA = "0x1238F78", Slot = "10")]
		[IteratorStateMachine(typeof(<DoExecuteBlock>d__8))]
		protected virtual IEnumerator DoExecuteBlock(int numFrames)
		{
			return null;
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x1239024", Offset = "0x1239024", VA = "0x1239024", Slot = "7")]
		public override string GetSummary()
		{
			return null;
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x12390C0", Offset = "0x12390C0", VA = "0x12390C0")]
		public DamageableEvent()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	public class FMODWriterAudio : WriterAudio
	{
		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[EventRef]
		public string inputEvent;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private EVENT_CALLBACK dialogueCallback;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private EventInstance dialogueInstance;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float duration;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool started;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly float standardVODuration;

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x1239340", Offset = "0x1239340", VA = "0x1239340")]
		private void Start()
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x12393C4", Offset = "0x12393C4", VA = "0x12393C4", Slot = "20")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x1239458", Offset = "0x1239458", VA = "0x1239458")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x1239468", Offset = "0x1239468", VA = "0x1239468", Slot = "12")]
		public override float GetSecondsRemaining()
		{
			return default(float);
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x12394C8", Offset = "0x12394C8", VA = "0x12394C8", Slot = "13")]
		public override bool IsStarted()
		{
			return default(bool);
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0x1239510", Offset = "0x1239510", VA = "0x1239510", Slot = "17")]
		protected override void Pause()
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x1239514", Offset = "0x1239514", VA = "0x1239514", Slot = "19")]
		protected override void Resume()
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x1239518", Offset = "0x1239518", VA = "0x1239518", Slot = "18")]
		protected override void Stop()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x1239578", Offset = "0x1239578", VA = "0x1239578", Slot = "26")]
		public override void OnGlyph()
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x123957C", Offset = "0x123957C", VA = "0x123957C", Slot = "21")]
		public override void OnInput()
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x1239600", Offset = "0x1239600", VA = "0x1239600", Slot = "27")]
		public override void OnVoiceover(string voiceOverEvent, [Optional] GameObject target3D)
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x1239244", Offset = "0x1239244", VA = "0x1239244")]
		[MonoPInvokeCallback(typeof(EVENT_CALLBACK))]
		private static RESULT DialogueEventCallback(EVENT_CALLBACK_TYPE type, IntPtr instancePtr, IntPtr parameterPtr)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x1239774", Offset = "0x1239774", VA = "0x1239774")]
		public FMODWriterAudio()
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public class MenuDialog : MonoBehaviour
	{
		[Token(Token = "0x20004C5")]
		[CompilerGenerated]
		private sealed class <WaitForTimeout>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400155D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400155E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400155F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MenuDialog <>4__this;

			[Token(Token = "0x4001560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float timeoutDuration;

			[Token(Token = "0x4001561")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Block targetBlock;

			[Token(Token = "0x4001562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x4001563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Slider <timeoutSlider>5__3;

			[Token(Token = "0x17000323")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001976")]
				[Address(RVA = "0x123AA28", Offset = "0x123AA28", VA = "0x123AA28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000324")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001978")]
				[Address(RVA = "0x123AA70", Offset = "0x123AA70", VA = "0x123AA70", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001973")]
			[Address(RVA = "0x1239B0C", Offset = "0x1239B0C", VA = "0x1239B0C")]
			[DebuggerHidden]
			public <WaitForTimeout>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001974")]
			[Address(RVA = "0x123A870", Offset = "0x123A870", VA = "0x123A870", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001975")]
			[Address(RVA = "0x123A874", Offset = "0x123A874", VA = "0x123A874", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001977")]
			[Address(RVA = "0x123AA30", Offset = "0x123AA30", VA = "0x123AA30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004C6")]
		[CompilerGenerated]
		private sealed class <CallBlock>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001566")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Block block;

			[Token(Token = "0x17000325")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600197C")]
				[Address(RVA = "0x123AB30", Offset = "0x123AB30", VA = "0x123AB30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000326")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600197E")]
				[Address(RVA = "0x123AB78", Offset = "0x123AB78", VA = "0x123AB78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001979")]
			[Address(RVA = "0x1239BA8", Offset = "0x1239BA8", VA = "0x1239BA8")]
			[DebuggerHidden]
			public <CallBlock>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600197A")]
			[Address(RVA = "0x123AA78", Offset = "0x123AA78", VA = "0x123AA78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600197B")]
			[Address(RVA = "0x123AA7C", Offset = "0x123AA7C", VA = "0x123AA7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600197D")]
			[Address(RVA = "0x123AB38", Offset = "0x123AB38", VA = "0x123AB38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004C7")]
		[CompilerGenerated]
		private sealed class <CallLuaClosure>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Closure callback;

			[Token(Token = "0x400156A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LuaEnvironment luaEnv;

			[Token(Token = "0x17000327")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001982")]
				[Address(RVA = "0x123AC48", Offset = "0x123AC48", VA = "0x123AC48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000328")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001984")]
				[Address(RVA = "0x123AC90", Offset = "0x123AC90", VA = "0x123AC90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600197F")]
			[Address(RVA = "0x1239C60", Offset = "0x1239C60", VA = "0x1239C60")]
			[DebuggerHidden]
			public <CallLuaClosure>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001980")]
			[Address(RVA = "0x123AB80", Offset = "0x123AB80", VA = "0x123AB80", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001981")]
			[Address(RVA = "0x123AB84", Offset = "0x123AB84", VA = "0x123AB84", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001983")]
			[Address(RVA = "0x123AC50", Offset = "0x123AC50", VA = "0x123AC50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004CB")]
		[CompilerGenerated]
		private sealed class <ShowTimer>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MenuDialog <>4__this;

			[Token(Token = "0x4001575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float duration;

			[Token(Token = "0x4001576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Closure callBack;

			[Token(Token = "0x4001577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public LuaEnvironment luaEnv;

			[Token(Token = "0x4001578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x4001579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Slider <timeoutSlider>5__3;

			[Token(Token = "0x17000329")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600198F")]
				[Address(RVA = "0x123B10C", Offset = "0x123B10C", VA = "0x123B10C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001991")]
				[Address(RVA = "0x123B154", Offset = "0x123B154", VA = "0x123B154", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600198C")]
			[Address(RVA = "0x123A7A4", Offset = "0x123A7A4", VA = "0x123A7A4")]
			[DebuggerHidden]
			public <ShowTimer>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x600198D")]
			[Address(RVA = "0x123AEE4", Offset = "0x123AEE4", VA = "0x123AEE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600198E")]
			[Address(RVA = "0x123AEE8", Offset = "0x123AEE8", VA = "0x123AEE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001990")]
			[Address(RVA = "0x123B114", Offset = "0x123B114", VA = "0x123B114", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Automatically select the first interactable button when the menu is shown.")]
		[SerializeField]
		protected bool autoSelectFirstButton;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Button[] cachedButtons;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Slider cachedSlider;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int nextOptionIndex;

		[Token(Token = "0x1700031F")]
		public static MenuDialog ActiveMenuDialog
		{
			[Token(Token = "0x600195C")]
			[Address(RVA = "0x1239784", Offset = "0x1239784", VA = "0x1239784")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600195D")]
			[Address(RVA = "0x12397CC", Offset = "0x12397CC", VA = "0x12397CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000320")]
		public virtual Button[] CachedButtons
		{
			[Token(Token = "0x600195E")]
			[Address(RVA = "0x1239824", Offset = "0x1239824", VA = "0x1239824", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000321")]
		public virtual Slider CachedSlider
		{
			[Token(Token = "0x600195F")]
			[Address(RVA = "0x123982C", Offset = "0x123982C", VA = "0x123982C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000322")]
		public virtual int DisplayedOptionsCount
		{
			[Token(Token = "0x6001970")]
			[Address(RVA = "0x123A7EC", Offset = "0x123A7EC", VA = "0x123A7EC", Slot = "18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x1239834", Offset = "0x1239834", VA = "0x1239834", Slot = "6")]
		public virtual void SetActive(bool state)
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x1235600", Offset = "0x1235600", VA = "0x1235600")]
		public static MenuDialog GetMenuDialog()
		{
			return null;
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x123985C", Offset = "0x123985C", VA = "0x123985C", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x123992C", Offset = "0x123992C", VA = "0x123992C", Slot = "8")]
		protected virtual void CheckEventSystem()
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x1239A64", Offset = "0x1239A64", VA = "0x1239A64", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0x1239A6C", Offset = "0x1239A6C", VA = "0x1239A6C", Slot = "10")]
		[IteratorStateMachine(typeof(<WaitForTimeout>d__17))]
		protected virtual IEnumerator WaitForTimeout(float timeoutDuration, Block targetBlock)
		{
			return null;
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x1239B34", Offset = "0x1239B34", VA = "0x1239B34")]
		[IteratorStateMachine(typeof(<CallBlock>d__18))]
		protected IEnumerator CallBlock(Block block)
		{
			return null;
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x1239BD0", Offset = "0x1239BD0", VA = "0x1239BD0")]
		[IteratorStateMachine(typeof(<CallLuaClosure>d__19))]
		protected IEnumerator CallLuaClosure(LuaEnvironment luaEnv, Closure callback)
		{
			return null;
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x1239C88", Offset = "0x1239C88", VA = "0x1239C88", Slot = "11")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x1239EC4", Offset = "0x1239EC4", VA = "0x1239EC4", Slot = "12")]
		public virtual void HideSayDialog()
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x1239F7C", Offset = "0x1239F7C", VA = "0x1239F7C", Slot = "13")]
		public virtual bool AddOption(string text, bool interactable, bool hideOption, Block targetBlock)
		{
			return default(bool);
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x123A3F8", Offset = "0x123A3F8", VA = "0x123A3F8", Slot = "14")]
		public virtual bool AddOption(string text, bool interactable, LuaEnvironment luaEnv, Closure callBack)
		{
			return default(bool);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x123A07C", Offset = "0x123A07C", VA = "0x123A07C")]
		private bool AddOption(string text, bool interactable, bool hideOption, UnityAction action)
		{
			return default(bool);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x123A5AC", Offset = "0x123A5AC", VA = "0x123A5AC", Slot = "15")]
		public virtual void ShowTimer(float duration, Block targetBlock)
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x123A6F0", Offset = "0x123A6F0", VA = "0x123A6F0", Slot = "16")]
		[IteratorStateMachine(typeof(<ShowTimer>d__26))]
		public virtual IEnumerator ShowTimer(float duration, LuaEnvironment luaEnv, Closure callBack)
		{
			return null;
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x123A7CC", Offset = "0x123A7CC", VA = "0x123A7CC", Slot = "17")]
		public virtual bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x1235F50", Offset = "0x1235F50", VA = "0x1235F50")]
		public void Shuffle(System.Random r)
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x123A868", Offset = "0x123A868", VA = "0x123A868")]
		public MenuDialog()
		{
		}
	}
	[Token(Token = "0x20004CC")]
	public static class MenuSignals
	{
		[Token(Token = "0x20004CD")]
		public delegate void MenuStartHandler(MenuDialog menu);

		[Token(Token = "0x20004CE")]
		public delegate void MenuEndHandler(MenuDialog menu);

		[Token(Token = "0x1400000C")]
		public static event MenuStartHandler OnMenuStart
		{
			[Token(Token = "0x6001992")]
			[Address(RVA = "0x123B15C", Offset = "0x123B15C", VA = "0x123B15C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001993")]
			[Address(RVA = "0x123B214", Offset = "0x123B214", VA = "0x123B214")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public static event MenuEndHandler OnMenuEnd
		{
			[Token(Token = "0x6001995")]
			[Address(RVA = "0x123B2CC", Offset = "0x123B2CC", VA = "0x123B2CC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001996")]
			[Address(RVA = "0x123B388", Offset = "0x123B388", VA = "0x123B388")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0x123A540", Offset = "0x123A540", VA = "0x123A540")]
		public static void DoMenuStart(MenuDialog menu)
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x1239E58", Offset = "0x1239E58", VA = "0x1239E58")]
		public static void DoMenuEnd(MenuDialog menu)
		{
		}
	}
	[Token(Token = "0x20004CF")]
	public class SayDialog : MonoBehaviour
	{
		[Token(Token = "0x20004D0")]
		[CompilerGenerated]
		private sealed class <DoSay>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400159C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400159D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400159E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SayDialog <>4__this;

			[Token(Token = "0x400159F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool fadeWhenDone;

			[Token(Token = "0x40015A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string fmodEvent;

			[Token(Token = "0x40015A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string text;

			[Token(Token = "0x40015A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool clearPrevious;

			[Token(Token = "0x40015A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
			public bool waitForInput;

			[Token(Token = "0x40015A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
			public bool stopVoiceover;

			[Token(Token = "0x40015A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
			public bool waitForVO;

			[Token(Token = "0x40015A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Action onComplete;

			[Token(Token = "0x40015A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Writer <writer>5__2;

			[Token(Token = "0x17000332")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019C6")]
				[Address(RVA = "0x123D454", Offset = "0x123D454", VA = "0x123D454", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000333")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019C8")]
				[Address(RVA = "0x123D49C", Offset = "0x123D49C", VA = "0x123D49C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019C3")]
			[Address(RVA = "0x123CCD8", Offset = "0x123CCD8", VA = "0x123CCD8")]
			[DebuggerHidden]
			public <DoSay>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x60019C4")]
			[Address(RVA = "0x123CF6C", Offset = "0x123CF6C", VA = "0x123CF6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019C5")]
			[Address(RVA = "0x123CF70", Offset = "0x123CF70", VA = "0x123CF70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019C7")]
			[Address(RVA = "0x123D45C", Offset = "0x123D45C", VA = "0x123D45C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[UnityEngine.Tooltip("Duration to fade dialogue in/out")]
		protected float fadeDuration;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("The continue button UI object")]
		protected Button continueButton;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected Button skipButton;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The canvas UI object")]
		[SerializeField]
		protected Canvas dialogCanvas;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected GameObject scythe;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("The name text UI object")]
		protected TextMeshProUGUI nameText;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("TextAdapter will search for appropriate output on this GameObject if nameText is null")]
		[SerializeField]
		protected GameObject nameTextGO;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected TextAdapter nameTextAdapter;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[UnityEngine.Tooltip("The story text UI object")]
		protected TextMeshProUGUI storyText;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("TextAdapter will search for appropriate output on this GameObject if storyText is null")]
		[SerializeField]
		protected GameObject storyTextGO;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextAdapter storyTextAdapter;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("The character UI object")]
		[SerializeField]
		protected Image characterImage;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("Adjust width of story text when Character Image is displayed (to avoid overlapping)")]
		[SerializeField]
		protected bool fitTextWithImage;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[UnityEngine.Tooltip("Close any other open Say Dialogs when this one is active")]
		[SerializeField]
		protected bool closeOtherDialogs;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		protected SayDialogHeightData[] heightDatas;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform customPlacementTransform;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Transform cameraTransform;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform _defaultParentTransform;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private SayDialogueHeightTypes lastHeightType;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float startStoryTextWidth;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float startStoryTextInset;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected WriterAudio writerAudio;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Writer writer;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected CanvasGroup canvasGroup;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected bool fadeWhenDone;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected float targetAlpha;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float fadeCoolDownTimer;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Sprite currentCharacterImage;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Character speakingCharacter;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected StringSubstituter stringSubstituter;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static List<SayDialog> activeSayDialogs;

		[Token(Token = "0x1700032B")]
		public virtual string NameText
		{
			[Token(Token = "0x60019A0")]
			[Address(RVA = "0x123B73C", Offset = "0x123B73C", VA = "0x123B73C", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019A1")]
			[Address(RVA = "0x123B75C", Offset = "0x123B75C", VA = "0x123B75C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700032C")]
		public virtual string StoryText
		{
			[Token(Token = "0x60019A2")]
			[Address(RVA = "0x123B77C", Offset = "0x123B77C", VA = "0x123B77C", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x60019A3")]
			[Address(RVA = "0x123B79C", Offset = "0x123B79C", VA = "0x123B79C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700032D")]
		public virtual RectTransform StoryTextRectTrans
		{
			[Token(Token = "0x60019A4")]
			[Address(RVA = "0x123B7BC", Offset = "0x123B7BC", VA = "0x123B7BC", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032E")]
		public virtual Image CharacterImage
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x123B860", Offset = "0x123B860", VA = "0x123B860", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032F")]
		public Character SpeakingCharacter
		{
			[Token(Token = "0x60019B0")]
			[Address(RVA = "0x123C2B4", Offset = "0x123C2B4", VA = "0x123C2B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000330")]
		public static SayDialog ActiveSayDialog
		{
			[Token(Token = "0x60019B1")]
			[Address(RVA = "0x123C30C", Offset = "0x123C30C", VA = "0x123C30C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60019B2")]
			[Address(RVA = "0x123C364", Offset = "0x123C364", VA = "0x123C364")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000331")]
		public virtual bool FadeWhenDone
		{
			[Token(Token = "0x60019BD")]
			[Address(RVA = "0x123CD70", Offset = "0x123CD70", VA = "0x123CD70", Slot = "25")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019BE")]
			[Address(RVA = "0x123CD78", Offset = "0x123CD78", VA = "0x123CD78", Slot = "26")]
			set
			{
			}
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x123B868", Offset = "0x123B868", VA = "0x123B868", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0x123BA84", Offset = "0x123BA84", VA = "0x123BA84")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0x123BA8C", Offset = "0x123BA8C", VA = "0x123BA8C", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0x123BB0C", Offset = "0x123BB0C", VA = "0x123BB0C", Slot = "12")]
		protected virtual Writer GetWriter()
		{
			return null;
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0x123BC1C", Offset = "0x123BC1C", VA = "0x123BC1C", Slot = "13")]
		protected virtual CanvasGroup GetCanvasGroup()
		{
			return null;
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0x123BD2C", Offset = "0x123BD2C", VA = "0x123BD2C", Slot = "14")]
		protected virtual WriterAudio GetWriterAudio()
		{
			return null;
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x123BE3C", Offset = "0x123BE3C", VA = "0x123BE3C", Slot = "15")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x123BFC0", Offset = "0x123BFC0", VA = "0x123BFC0", Slot = "16")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x123C094", Offset = "0x123C094", VA = "0x123C094", Slot = "17")]
		protected virtual void UpdateAlpha()
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x123C264", Offset = "0x123C264", VA = "0x123C264", Slot = "18")]
		protected virtual void ClearStoryText()
		{
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x1237BC8", Offset = "0x1237BC8", VA = "0x1237BC8")]
		public static SayDialog GetSayDialog()
		{
			return null;
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0x123C3C4", Offset = "0x123C3C4", VA = "0x123C3C4")]
		public static void StopPortraitTweens()
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x123C4A4", Offset = "0x123C4A4", VA = "0x123C4A4", Slot = "19")]
		public virtual void SetActive(bool state)
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x123C4CC", Offset = "0x123C4CC", VA = "0x123C4CC", Slot = "20")]
		public virtual void SetCharacter(Character character)
		{
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x123C714", Offset = "0x123C714", VA = "0x123C714", Slot = "21")]
		public virtual void SetCharacterImage(Sprite image)
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x123CA1C", Offset = "0x123CA1C", VA = "0x123CA1C", Slot = "22")]
		public virtual void SetCharacterName(string name, Color color)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x123CB74", Offset = "0x123CB74", VA = "0x123CB74", Slot = "23")]
		public virtual void Say(string text, bool clearPrevious, bool waitForInput, bool fadeWhenDone, bool stopVoiceover, bool waitForVO, string fmodEvent, SayDialogueHeightTypes heightType, Action onComplete)
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x123CBCC", Offset = "0x123CBCC", VA = "0x123CBCC", Slot = "24")]
		[IteratorStateMachine(typeof(<DoSay>d__64))]
		public virtual IEnumerator DoSay(string text, bool clearPrevious, bool waitForInput, bool fadeWhenDone, bool stopVoiceover, bool waitForVO, string fmodEvent, SayDialogueHeightTypes heightType, Action onComplete)
		{
			return null;
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x123CD00", Offset = "0x123CD00", VA = "0x123CD00")]
		public void SetCustomDialoguePlacement(Transform targetTransform)
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x123CD04", Offset = "0x123CD04", VA = "0x123CD04")]
		private SayDialogHeightData GetHeightData(SayDialogueHeightTypes type)
		{
			return default(SayDialogHeightData);
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x123CD84", Offset = "0x123CD84", VA = "0x123CD84", Slot = "27")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x123CDB8", Offset = "0x123CDB8", VA = "0x123CDB8", Slot = "28")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x123CDE0", Offset = "0x123CDE0", VA = "0x123CDE0")]
		public SayDialog()
		{
		}
	}
	[Token(Token = "0x20004D1")]
	public static class GM
	{
		[Token(Token = "0x17000334")]
		public static GameMaster GameMaster
		{
			[Token(Token = "0x60019C9")]
			[Address(RVA = "0x123D4A4", Offset = "0x123D4A4", VA = "0x123D4A4")]
			get
			{
				return null;
			}
		}
	}
}
namespace Gamekit3D
{
	[Token(Token = "0x20004D2")]
	public class Respawner : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20004D3")]
		public class SaveState
		{
			[Token(Token = "0x40015AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 position;

			[Token(Token = "0x40015AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion rotation;

			[Token(Token = "0x60019D0")]
			[Address(RVA = "0x123D7CC", Offset = "0x123D7CC", VA = "0x123D7CC")]
			public SaveState()
			{
			}
		}

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject player;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float savePeriod;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SaveState> savedStates;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lastCheck;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool paused;

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x123D508", Offset = "0x123D508", VA = "0x123D508")]
		private void Start()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x123D52C", Offset = "0x123D52C", VA = "0x123D52C")]
		public void Pause()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x123D538", Offset = "0x123D538", VA = "0x123D538")]
		public void Resume()
		{
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0x123D540", Offset = "0x123D540", VA = "0x123D540")]
		public void RestoreLast()
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x123D634", Offset = "0x123D634", VA = "0x123D634")]
		private void Update()
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x123D7D4", Offset = "0x123D7D4", VA = "0x123D7D4")]
		public Respawner()
		{
		}
	}
	[Token(Token = "0x20004D4")]
	[DefaultExecutionOrder(-1)]
	public class TargetDistributor : MonoBehaviour
	{
		[Token(Token = "0x20004D5")]
		public class TargetFollower
		{
			[Token(Token = "0x40015B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool requireSlot;

			[Token(Token = "0x40015B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int assignedSlot;

			[Token(Token = "0x40015B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 requiredPoint;

			[Token(Token = "0x40015B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TargetDistributor distributor;

			[Token(Token = "0x60019D9")]
			[Address(RVA = "0x123DB5C", Offset = "0x123DB5C", VA = "0x123DB5C")]
			public TargetFollower(TargetDistributor owner)
			{
			}
		}

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int arcsCount;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Vector3[] m_WorldDirection;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool[] m_FreeArcs;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float arcDegree;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<TargetFollower> m_Followers;

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x123D864", Offset = "0x123D864", VA = "0x123D864")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x123DA80", Offset = "0x123DA80", VA = "0x123DA80")]
		public TargetFollower RegisterNewFollower()
		{
			return null;
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x123DBDC", Offset = "0x123DBDC", VA = "0x123DBDC")]
		public void UnregisterFollower(TargetFollower follower)
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x123DC68", Offset = "0x123DC68", VA = "0x123DC68")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x123E350", Offset = "0x123E350", VA = "0x123E350")]
		public Vector3 GetDirection(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0x123DD40", Offset = "0x123DD40", VA = "0x123DD40")]
		public int GetFreeArcIndex(TargetFollower follower)
		{
			return default(int);
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x123E38C", Offset = "0x123E38C", VA = "0x123E38C")]
		public void FreeIndex(int index)
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x123E3C0", Offset = "0x123E3C0", VA = "0x123E3C0")]
		public TargetDistributor()
		{
		}
	}
	[Token(Token = "0x20004D6")]
	[DefaultExecutionOrder(100)]
	public class ChomperBehavior : MonoBehaviour, IMessageReceiver
	{
		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int hashInPursuit;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int hashAttack;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int hashHit;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int hashVerticalDot;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int hashHorizontalDot;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int hashThrown;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int hashGrounded;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int hashVerticalVelocity;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int hashSpotted;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly int hashNearBase;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int hitType;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly int targetDistance;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly int hashIdleState;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float attackDistance;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeleeWeapon meleeWeapon;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TargetScanner playerScanner;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Time in seconde before the Chomper stop pursuing the player when the player is out of sight")]
		public float timeToStopPursuit;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool hit;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float m_TimerSinceLostTarget;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected XRCharacter m_Target;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected EnemyController m_Controller;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected TargetDistributor.TargetFollower m_FollowerInstance;

		[Token(Token = "0x17000335")]
		public EnemyController controller
		{
			[Token(Token = "0x60019DA")]
			[Address(RVA = "0x123E3C8", Offset = "0x123E3C8", VA = "0x123E3C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000336")]
		public XRCharacter target
		{
			[Token(Token = "0x60019DB")]
			[Address(RVA = "0x123E3D0", Offset = "0x123E3D0", VA = "0x123E3D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000337")]
		public TargetDistributor.TargetFollower followerData
		{
			[Token(Token = "0x60019DC")]
			[Address(RVA = "0x123E3D8", Offset = "0x123E3D8", VA = "0x123E3D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000338")]
		public Vector3 originalPosition
		{
			[Token(Token = "0x60019DD")]
			[Address(RVA = "0x123E3E0", Offset = "0x123E3E0", VA = "0x123E3E0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60019DE")]
			[Address(RVA = "0x123E3EC", Offset = "0x123E3EC", VA = "0x123E3EC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0x123E3F8", Offset = "0x123E3F8", VA = "0x123E3F8")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0x123E52C", Offset = "0x123E52C", VA = "0x123E52C")]
		private void PlayStep(int frontFoot)
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0x123E530", Offset = "0x123E530", VA = "0x123E530")]
		public void Grunt()
		{
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0x123E534", Offset = "0x123E534", VA = "0x123E534")]
		public void Spotted()
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x123E538", Offset = "0x123E538", VA = "0x123E538")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0x123E560", Offset = "0x123E560", VA = "0x123E560")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x123E660", Offset = "0x123E660", VA = "0x123E660")]
		public void FindTarget()
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x123E9B4", Offset = "0x123E9B4", VA = "0x123E9B4")]
		public void StartPursuit()
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x123EBFC", Offset = "0x123EBFC", VA = "0x123EBFC")]
		public void StopPursuit()
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x123EA48", Offset = "0x123EA48", VA = "0x123EA48")]
		public void RequestTargetPosition()
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x123EC84", Offset = "0x123EC84", VA = "0x123EC84")]
		public void WalkBackToBase()
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0x123ECEC", Offset = "0x123ECEC", VA = "0x123ECEC")]
		public void TriggerAttack()
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x123EE48", Offset = "0x123EE48", VA = "0x123EE48")]
		public void AttackBegin()
		{
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x123EE68", Offset = "0x123EE68", VA = "0x123EE68")]
		public void AttackEnd()
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x123EE84", Offset = "0x123EE84", VA = "0x123EE84")]
		public void HitStart()
		{
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0x123EF00", Offset = "0x123EF00", VA = "0x123EF00")]
		public void HitStop()
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x123EF2C", Offset = "0x123EF2C", VA = "0x123EF2C", Slot = "4")]
		public void OnReceiveMessage(MessageType type, object sender, object msg)
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x123F020", Offset = "0x123F020", VA = "0x123F020")]
		public void Death(Damageable.DamageMessage msg)
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x123F2AC", Offset = "0x123F2AC", VA = "0x123F2AC")]
		public void ApplyDamage(Damageable.DamageMessage msg)
		{
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0x123F634", Offset = "0x123F634", VA = "0x123F634")]
		public ChomperBehavior()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	public class ChomperSMBAttack : SceneLinkedSMB<ChomperBehavior>
	{
		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected Vector3 m_AttackPosition;

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0x123F8DC", Offset = "0x123F8DC", VA = "0x123F8DC", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x123FB00", Offset = "0x123FB00", VA = "0x123FB00", Slot = "25")]
		public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x123FBB4", Offset = "0x123FBB4", VA = "0x123FBB4")]
		public ChomperSMBAttack()
		{
		}
	}
	[Token(Token = "0x20004D8")]
	public class ChomperSMBFall : SceneLinkedSMB<ChomperBehavior>
	{
		[Token(Token = "0x60019F7")]
		[Address(RVA = "0x123FBFC", Offset = "0x123FBFC", VA = "0x123FBFC", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x123FCF8", Offset = "0x123FCF8", VA = "0x123FCF8", Slot = "25")]
		public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60019F9")]
		[Address(RVA = "0x123FD1C", Offset = "0x123FD1C", VA = "0x123FD1C")]
		public ChomperSMBFall()
		{
		}
	}
	[Token(Token = "0x20004D9")]
	public class ChomperSMBHit : SceneLinkedSMB<ChomperBehavior>
	{
		[Token(Token = "0x60019FA")]
		[Address(RVA = "0x123FD64", Offset = "0x123FD64", VA = "0x123FD64", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0x123FD7C", Offset = "0x123FD7C", VA = "0x123FD7C", Slot = "25")]
		public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0x123FD94", Offset = "0x123FD94", VA = "0x123FD94")]
		public ChomperSMBHit()
		{
		}
	}
	[Token(Token = "0x20004DA")]
	public class ChomperSMBIdle : SceneLinkedSMB<ChomperBehavior>
	{
		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minimumIdleGruntTime;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maximumIdleGruntTime;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float remainingToNextGrunt;

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0x123FDDC", Offset = "0x123FDDC", VA = "0x123FDDC", Slot = "9")]
		public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
		{
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x123FE0C", Offset = "0x123FE0C", VA = "0x123FE0C", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0x123FF40", Offset = "0x123FF40", VA = "0x123FF40")]
		public ChomperSMBIdle()
		{
		}
	}
	[Token(Token = "0x20004DB")]
	public class ChomperSMBPursuit : SceneLinkedSMB<ChomperBehavior>
	{
		[Token(Token = "0x6001A00")]
		[Address(RVA = "0x123FF94", Offset = "0x123FF94", VA = "0x123FF94", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0x1240244", Offset = "0x1240244", VA = "0x1240244")]
		public ChomperSMBPursuit()
		{
		}
	}
	[Token(Token = "0x20004DC")]
	public class ChomperSMBReturn : SceneLinkedSMB<ChomperBehavior>
	{
		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x124028C", Offset = "0x124028C", VA = "0x124028C", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x12402A4", Offset = "0x12402A4", VA = "0x12402A4", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x12403A8", Offset = "0x12403A8", VA = "0x12403A8")]
		public ChomperSMBReturn()
		{
		}
	}
	[Token(Token = "0x20004DD")]
	public class ChomperSMBSpotted : SceneLinkedSMB<ChomperBehavior>
	{
		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x12403F0", Offset = "0x12403F0", VA = "0x12403F0", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x1240408", Offset = "0x1240408", VA = "0x1240408", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x12406F0", Offset = "0x12406F0", VA = "0x12406F0")]
		public ChomperSMBSpotted()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	public class ContactDamager : MonoBehaviour
	{
		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HelpBox]
		public string helpString;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int amount;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float force;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask damagedLayers;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject owner;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool onlyOne;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool additive;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AttackScriptableObject attackScriptableObject;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<Collider> currentsHits;

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x1240738", Offset = "0x1240738", VA = "0x1240738")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x12407A8", Offset = "0x12407A8", VA = "0x12407A8")]
		protected void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x12407B4", Offset = "0x12407B4", VA = "0x12407B4", Slot = "4")]
		protected virtual void Collide(Collider other)
		{
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x1240C04", Offset = "0x1240C04", VA = "0x1240C04")]
		public ContactDamager()
		{
		}
	}
	[Token(Token = "0x20004DF")]
	public class HelpBoxAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x1240CC8", Offset = "0x1240CC8", VA = "0x1240CC8")]
		public HelpBoxAttribute()
		{
		}
	}
	[Token(Token = "0x20004E0")]
	[DefaultExecutionOrder(100)]
	public class SpitterBehaviour : MonoBehaviour, IMessageReceiver
	{
		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int hashVerticalDot;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int hashHorizontalDot;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int hashThrown;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int hashHit;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int hashAttack;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int hashHaveEnemy;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int hashFleeing;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int hashIdleState;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TargetScanner playerScanner;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fleeingDistance;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RangeWeapon rangeWeapon;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected XRCharacter m_Target;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected EnemyController m_Controller;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected bool m_Fleeing;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 m_RememberedTargetPosition;

		[Token(Token = "0x17000339")]
		public EnemyController controller
		{
			[Token(Token = "0x6001A0D")]
			[Address(RVA = "0x1240CD0", Offset = "0x1240CD0", VA = "0x1240CD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700033A")]
		public XRCharacter target
		{
			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0x1240CD8", Offset = "0x1240CD8", VA = "0x1240CD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x1240CE0", Offset = "0x1240CE0", VA = "0x1240CE0")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x1240DD0", Offset = "0x1240DD0", VA = "0x1240DD0", Slot = "4")]
		public void OnReceiveMessage(MessageType type, object sender, object msg)
		{
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0x1240EC4", Offset = "0x1240EC4", VA = "0x1240EC4")]
		public void Death(Damageable.DamageMessage msg)
		{
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0x1241150", Offset = "0x1241150", VA = "0x1241150")]
		public void ApplyDamage(Damageable.DamageMessage msg)
		{
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0x12414AC", Offset = "0x12414AC", VA = "0x12414AC")]
		public void Shoot()
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0x12414D4", Offset = "0x12414D4", VA = "0x12414D4")]
		public void TriggerAttack()
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0x124154C", Offset = "0x124154C", VA = "0x124154C")]
		public void RememberTargetPosition()
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0x12415DC", Offset = "0x12415DC", VA = "0x12415DC")]
		private void PlayStep(int frontFoot)
		{
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0x12415E0", Offset = "0x12415E0", VA = "0x12415E0")]
		public void Grunt()
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0x12415E4", Offset = "0x12415E4", VA = "0x12415E4")]
		public void Spotted()
		{
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0x12415E8", Offset = "0x12415E8", VA = "0x12415E8")]
		public void CheckNeedFleeing()
		{
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0x12419E0", Offset = "0x12419E0", VA = "0x12419E0")]
		public void FindTarget()
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0x1241AF4", Offset = "0x1241AF4", VA = "0x1241AF4")]
		public SpitterBehaviour()
		{
		}
	}
	[Token(Token = "0x20004E1")]
	public class SpitterSMBCooldown : SceneLinkedSMB<SpitterBehaviour>
	{
		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0x1241CC0", Offset = "0x1241CC0", VA = "0x1241CC0", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x1241CE8", Offset = "0x1241CE8", VA = "0x1241CE8")]
		public SpitterSMBCooldown()
		{
		}
	}
	[Token(Token = "0x20004E2")]
	public class SpitterSMBFleeing : SceneLinkedSMB<SpitterBehaviour>
	{
		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x1241D30", Offset = "0x1241D30", VA = "0x1241D30", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x1241D58", Offset = "0x1241D58", VA = "0x1241D58", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x1241D80", Offset = "0x1241D80", VA = "0x1241D80")]
		public SpitterSMBFleeing()
		{
		}
	}
	[Token(Token = "0x20004E3")]
	public class SpitterSMBHit : SceneLinkedSMB<SpitterBehaviour>
	{
		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x1241DC8", Offset = "0x1241DC8", VA = "0x1241DC8", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x1241E34", Offset = "0x1241E34", VA = "0x1241E34", Slot = "25")]
		public override void OnSLStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x1241EE8", Offset = "0x1241EE8", VA = "0x1241EE8")]
		public SpitterSMBHit()
		{
		}
	}
	[Token(Token = "0x20004E4")]
	public class SpitterSMBIdle : SceneLinkedSMB<SpitterBehaviour>
	{
		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minimumIdleGruntTime;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maximumIdleGruntTime;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float remainingToNextGrunt;

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x1241F30", Offset = "0x1241F30", VA = "0x1241F30", Slot = "9")]
		public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x1241F60", Offset = "0x1241F60", VA = "0x1241F60", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x12420A0", Offset = "0x12420A0", VA = "0x12420A0")]
		public SpitterSMBIdle()
		{
		}
	}
	[Token(Token = "0x20004E5")]
	public class SpitterSMBShoot : SceneLinkedSMB<SpitterBehaviour>
	{
		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_IdleStateHash;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected Vector3 m_AttackPosition;

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x12420F4", Offset = "0x12420F4", VA = "0x12420F4", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0x1242348", Offset = "0x1242348", VA = "0x1242348", Slot = "22")]
		public override void OnSLStateNoTransitionUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x1242360", Offset = "0x1242360", VA = "0x1242360")]
		public SpitterSMBShoot()
		{
		}
	}
	[Token(Token = "0x20004E6")]
	public class SpitterSMBSpotted : SceneLinkedSMB<SpitterBehaviour>
	{
		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x1242410", Offset = "0x1242410", VA = "0x1242410", Slot = "19")]
		public override void OnSLStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x1242428", Offset = "0x1242428", VA = "0x1242428")]
		public SpitterSMBSpotted()
		{
		}
	}
	[Token(Token = "0x20004E7")]
	public class BatchProcessor : MonoBehaviour
	{
		[Token(Token = "0x20004E8")]
		public delegate void BatchProcessing();

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static BatchProcessor s_Instance;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static List<BatchProcessing> s_ProcessList;

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x1242470", Offset = "0x1242470", VA = "0x1242470")]
		static BatchProcessor()
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x1242500", Offset = "0x1242500", VA = "0x1242500")]
		public static void RegisterBatchFunction(BatchProcessing function)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x12425D8", Offset = "0x12425D8", VA = "0x12425D8")]
		public static void UnregisterBatchFunction(BatchProcessing function)
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x1242658", Offset = "0x1242658", VA = "0x1242658")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x1242734", Offset = "0x1242734", VA = "0x1242734")]
		[RuntimeInitializeOnLoadMethod]
		private static void Init()
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0x1242894", Offset = "0x1242894", VA = "0x1242894")]
		public BatchProcessor()
		{
		}
	}
	[Token(Token = "0x20004E9")]
	[DefaultExecutionOrder(9999)]
	public class FixedUpdateFollow : MonoBehaviour
	{
		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform toFollow;

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x12429A8", Offset = "0x12429A8", VA = "0x12429A8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x1242A24", Offset = "0x1242A24", VA = "0x1242A24")]
		public FixedUpdateFollow()
		{
		}
	}
	[Token(Token = "0x20004EA")]
	public class InspectorHelpMessage : MonoBehaviour
	{
		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string message;

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x1242A2C", Offset = "0x1242A2C", VA = "0x1242A2C")]
		public InspectorHelpMessage()
		{
		}
	}
	[Token(Token = "0x20004EB")]
	public class ObjectPooler<T> where T : MonoBehaviour, IPooled<T>
	{
		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> instances;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _extended;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected Stack<int> m_FreeIdx;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected Queue<int> m_TakenIdx;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T prefab;

		[Token(Token = "0x1700033B")]
		public Transform DisposeHolder
		{
			[Token(Token = "0x6001A3B")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001A3D")]
		public void Initialize(int count, T prefab, bool extended = false)
		{
		}

		[Token(Token = "0x6001A3E")]
		public T GetNew()
		{
			return null;
		}

		[Token(Token = "0x6001A3F")]
		public void Free(T obj)
		{
		}

		[Token(Token = "0x6001A40")]
		private void CreateInstance(int index)
		{
		}

		[Token(Token = "0x6001A41")]
		private T InstantiateNewObject()
		{
			return null;
		}

		[Token(Token = "0x6001A42")]
		public ObjectPooler()
		{
		}
	}
	[Token(Token = "0x20004EC")]
	public interface IPooled<T> where T : MonoBehaviour, IPooled<T>
	{
		[Token(Token = "0x1700033C")]
		int poolID
		{
			[Token(Token = "0x6001A43")]
			get;
			[Token(Token = "0x6001A44")]
			set;
		}

		[Token(Token = "0x1700033D")]
		ObjectPooler<T> pool
		{
			[Token(Token = "0x6001A45")]
			get;
			[Token(Token = "0x6001A46")]
			set;
		}
	}
	[Token(Token = "0x20004ED")]
	public class ParticleDeactivator : MonoBehaviour
	{
		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float duration;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected float m_SinceActivation;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ParticleSystem m_ParticleSystem;

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x1242A34", Offset = "0x1242A34", VA = "0x1242A34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x1242A94", Offset = "0x1242A94", VA = "0x1242A94")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x1242B08", Offset = "0x1242B08", VA = "0x1242B08")]
		public ParticleDeactivator()
		{
		}
	}
	[Token(Token = "0x20004EE")]
	public class EnforceTypeAttribute : PropertyAttribute
	{
		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type type;

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x1242B10", Offset = "0x1242B10", VA = "0x1242B10")]
		public EnforceTypeAttribute(Type enforcedType)
		{
		}
	}
	[Token(Token = "0x20004EF")]
	public class Spinner : MonoBehaviour
	{
		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speed;

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x1242B40", Offset = "0x1242B40", VA = "0x1242B40")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x1242B9C", Offset = "0x1242B9C", VA = "0x1242B9C")]
		public Spinner()
		{
		}
	}
	[Token(Token = "0x20004F0")]
	public static class TransformExtensions
	{
		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x1242C00", Offset = "0x1242C00", VA = "0x1242C00")]
		public static void SetRotationWithXY(this Transform transform, Vector3 x, Vector3 y)
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x1242D34", Offset = "0x1242D34", VA = "0x1242D34")]
		public static void SetRotationWithXZ(this Transform transform, Vector3 x, Vector3 z)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x1242E68", Offset = "0x1242E68", VA = "0x1242E68")]
		public static void SetRotationWithYZ(this Transform transform, Vector3 y, Vector3 z)
		{
		}
	}
	[Token(Token = "0x20004F1")]
	public class TransformFollow : MonoBehaviour
	{
		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x1242F9C", Offset = "0x1242F9C", VA = "0x1242F9C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x1243018", Offset = "0x1243018", VA = "0x1243018")]
		public TransformFollow()
		{
		}
	}
	[Token(Token = "0x20004F2")]
	public class GrenadierGrenade : Projectile
	{
		[Token(Token = "0x20004F3")]
		public enum ShotType
		{
			[Token(Token = "0x4001610")]
			HIGHEST_SHOT,
			[Token(Token = "0x4001611")]
			LOWEST_SPEED,
			[Token(Token = "0x4001612")]
			MOST_DIRECT
		}

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShotType shotType;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float projectileSpeed;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int damageAmount;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LayerMask damageMask;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float explosionRadius;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float explosionTimer;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem explosionVFX;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Will the explosion VFX play where the grenade explode or on the closest ground")]
		public bool vfxOnGround;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float m_SinceFired;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected RangeWeapon m_Shooter;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody m_RigidBody;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected ParticleSystem m_VFXInstance;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_EnvironmentLayer;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Collider[] m_ExplosionHitCache;

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x1243020", Offset = "0x1243020", VA = "0x1243020")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x1243140", Offset = "0x1243140", VA = "0x1243140")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x12431DC", Offset = "0x12431DC", VA = "0x12431DC", Slot = "4")]
		public override void Shot(Vector3 target)
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x12435D8", Offset = "0x12435D8", VA = "0x12435D8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x1243654", Offset = "0x1243654", VA = "0x1243654")]
		public void Explosion()
		{
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0x1243AEC", Offset = "0x1243AEC", VA = "0x1243AEC", Slot = "5")]
		protected virtual void OnCollisionEnter(UnityEngine.Collision other)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x1243304", Offset = "0x1243304", VA = "0x1243304")]
		private Vector3 GetVelocity(Vector3 target)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x1243AF0", Offset = "0x1243AF0", VA = "0x1243AF0")]
		public GrenadierGrenade()
		{
		}
	}
	[Token(Token = "0x20004F4")]
	public class Spit : GrenadierGrenade
	{
		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x1243B7C", Offset = "0x1243B7C", VA = "0x1243B7C", Slot = "5")]
		protected override void OnCollisionEnter(UnityEngine.Collision other)
		{
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0x1243B90", Offset = "0x1243B90", VA = "0x1243B90")]
		public Spit()
		{
		}
	}
}
namespace Gamekit3D.GameCommands
{
	[Token(Token = "0x20004F5")]
	public class SimpleRotator : SimpleTransformer
	{
		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector3 axis;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float start;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float end;

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x1243BF8", Offset = "0x1243BF8", VA = "0x1243BF8", Slot = "5")]
		public override void PerformTransform(float position)
		{
		}

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0x1243C94", Offset = "0x1243C94", VA = "0x1243C94")]
		public SimpleRotator()
		{
		}
	}
}
namespace Gamekit3D.Message
{
	[Token(Token = "0x20004F6")]
	public enum MessageType
	{
		[Token(Token = "0x4001617")]
		DAMAGED,
		[Token(Token = "0x4001618")]
		DEAD,
		[Token(Token = "0x4001619")]
		RESPAWN,
		[Token(Token = "0x400161A")]
		HEALTH
	}
	[Token(Token = "0x20004F7")]
	public interface IMessageReceiver
	{
		[Token(Token = "0x6001A5F")]
		void OnReceiveMessage(MessageType type, object sender, object msg);
	}
}
namespace Cinemachine
{
	[Token(Token = "0x20004F8")]
	[SaveDuringPlay]
	[AddComponentMenu("")]
	[DocumentationSorting(DocumentationSortingAttribute.Level.UserRef)]
	public class CinemachineAimMoth : CinemachineComponentBase
	{
		[Token(Token = "0x20004F9")]
		private struct FovCache
		{
			[Token(Token = "0x4001631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Rect mFovSoftGuideRect;

			[Token(Token = "0x4001632")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rect mFovHardGuideRect;

			[Token(Token = "0x4001633")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float mFovH;

			[Token(Token = "0x4001634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float mFov;

			[Token(Token = "0x4001635")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float mOrthoSizeOverDistance;

			[Token(Token = "0x4001636")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float mAspect;

			[Token(Token = "0x4001637")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Rect mSoftGuideRect;

			[Token(Token = "0x4001638")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Rect mHardGuideRect;

			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x12448AC", Offset = "0x12448AC", VA = "0x12448AC")]
			public void UpdateCache(LensSettings lens, Rect softGuide, Rect hardGuide, float targetDistance)
			{
			}

			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x12452D8", Offset = "0x12452D8", VA = "0x12452D8")]
			private Rect ScreenToFOV(Rect rScreen, float fov, float fovH, float aspect)
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Target offset from the target object's center in target-local space. Use this to fine-tune the tracking target position when the desired area is not the tracked object's center.")]
		public Vector3 m_TrackedObjectOffset;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Space]
		[UnityEngine.Tooltip("This setting will instruct the composer to adjust its target offset based on the motion of the target.  The composer will look at a point where it estimates the target will be this many seconds into the future.  Note that this setting is sensitive to noisy animation, and can amplify the noise, resulting in undesirable camera jitter.  If the camera jitters unacceptably when the target is in motion, turn down this setting, or animate the target more smoothly.")]
		[Range(0f, 1f)]
		private float m_LookaheadTime;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 30f)]
		[UnityEngine.Tooltip("Controls the smoothness of the lookahead algorithm.  Larger values smooth out jittery predictions and also increase prediction lag")]
		private float m_LookaheadSmoothing;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("If checked, movement along the Y axis will be ignored for lookahead calculations")]
		private bool m_LookaheadIgnoreY;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("How aggressively the camera tries to follow the target in the screen-horizontal direction. Small numbers are more responsive, rapidly orienting the camera to keep the target in the dead zone. Larger numbers give a more heavy slowly responding camera. Using different vertical and horizontal settings can yield a wide range of camera behaviors.")]
		[Space]
		[Range(0f, 20f)]
		private float m_HorizontalDamping;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 20f)]
		[UnityEngine.Tooltip("How aggressively the camera tries to follow the target in the screen-vertical direction. Small numbers are more responsive, rapidly orienting the camera to keep the target in the dead zone. Larger numbers give a more heavy slowly responding camera. Using different vertical and horizontal settings can yield a wide range of camera behaviors.")]
		private float m_VerticalDamping;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		[UnityEngine.Tooltip("Horizontal screen position for target. The camera will rotate to position the tracked object here.")]
		[Range(-0.5f, 1.5f)]
		private float m_ScreenX;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(-0.5f, 1.5f)]
		[UnityEngine.Tooltip("Vertical screen position for target, The camera will rotate to position the tracked object here.")]
		private float m_ScreenY;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Camera will not rotate horizontally if the target is within this range of the position.")]
		[Range(0f, 2f)]
		private float m_DeadZoneWidth;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 2f)]
		[UnityEngine.Tooltip("Camera will not rotate vertically if the target is within this range of the position.")]
		private float m_DeadZoneHeight;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("When target is within this region, camera will gradually rotate horizontally to re-align towards the desired position, depending on the damping speed.")]
		[Range(0f, 2f)]
		private float m_SoftZoneWidth;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("When target is within this region, camera will gradually rotate vertically to re-align towards the desired position, depending on the damping speed.")]
		[Range(0f, 2f)]
		private float m_SoftZoneHeight;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("A non-zero bias will move the target position horizontally away from the center of the soft zone.")]
		[Range(-0.5f, 0.5f)]
		private float m_BiasX;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("A non-zero bias will move the target position vertically away from the center of the soft zone.")]
		[Range(-0.5f, 0.5f)]
		private float m_BiasY;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Force target to center of screen when this camera activates.  If false, will clamp target to the edges of the dead zone")]
		public bool m_CenterOnActivate;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 m_CameraPosPrevFrame;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 m_LookAtPrevFrame;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2 m_ScreenOffsetPrevFrame;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion m_CameraOrientationPrevFrame;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal PositionPredictor m_Predictor;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private FovCache mCache;

		[Token(Token = "0x1700033E")]
		public override bool IsValid
		{
			[Token(Token = "0x6001A60")]
			[Address(RVA = "0x1243CFC", Offset = "0x1243CFC", VA = "0x1243CFC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700033F")]
		public override CinemachineCore.Stage Stage
		{
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x1243D8C", Offset = "0x1243D8C", VA = "0x1243D8C", Slot = "6")]
			get
			{
				return default(CinemachineCore.Stage);
			}
		}

		[Token(Token = "0x17000340")]
		public Vector3 TrackedPoint
		{
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x1243D94", Offset = "0x1243D94", VA = "0x1243D94")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x1243DA0", Offset = "0x1243DA0", VA = "0x1243DA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000341")]
		internal Rect SoftGuideRect
		{
			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0x12447E4", Offset = "0x12447E4", VA = "0x12447E4")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x1244D6C", Offset = "0x1244D6C", VA = "0x1244D6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000342")]
		internal Rect HardGuideRect
		{
			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x124482C", Offset = "0x124482C", VA = "0x124482C")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0x1244E58", Offset = "0x1244E58", VA = "0x1244E58")]
			set
			{
			}
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0x1243DAC", Offset = "0x1243DAC", VA = "0x1243DAC", Slot = "14")]
		protected virtual Vector3 GetLookAtPointAndSetTrackedPoint(Vector3 lookAt, Vector3 up, float deltaTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0x1243F54", Offset = "0x1243F54", VA = "0x1243F54", Slot = "10")]
		public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta)
		{
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0x1244060", Offset = "0x1244060", VA = "0x1244060", Slot = "11")]
		public override void ForceCameraPosition(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0x12440C4", Offset = "0x12440C4", VA = "0x12440C4", Slot = "12")]
		public override float GetMaxDampTime()
		{
			return default(float);
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0x12440D4", Offset = "0x12440D4", VA = "0x12440D4", Slot = "5")]
		public override void PrePipelineMutateCameraState(ref CameraState curState, float deltaTime)
		{
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0x124414C", Offset = "0x124414C", VA = "0x124414C", Slot = "8")]
		public override void MutateCameraState(ref CameraState curState, float deltaTime)
		{
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0x1244B48", Offset = "0x1244B48", VA = "0x1244B48")]
		private void RotateToScreenBounds(ref CameraState state, Rect screenRect, Vector3 trackedPoint, ref Quaternion rigOrientation, float fov, float fovH, float deltaTime)
		{
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x1244F64", Offset = "0x1244F64", VA = "0x1244F64")]
		private bool ClampVerticalBounds(ref Rect r, Vector3 dir, Vector3 up, float fov)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0x1245080", Offset = "0x1245080", VA = "0x1245080")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0x124517C", Offset = "0x124517C", VA = "0x124517C")]
		public CinemachineAimMoth()
		{
		}
	}
}
namespace Mathos.Parser
{
	[Token(Token = "0x20004FA")]
	public class MathParser
	{
		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<string> roughExpr;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<double> args;

		[Token(Token = "0x17000343")]
		public List<string> OperatorList
		{
			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x124570C", Offset = "0x124570C", VA = "0x124570C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A75")]
			[Address(RVA = "0x1245714", Offset = "0x1245714", VA = "0x1245714")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000344")]
		public Dictionary<string, Func<double, double, double>> OperatorAction
		{
			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x124571C", Offset = "0x124571C", VA = "0x124571C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0x1245724", Offset = "0x1245724", VA = "0x1245724")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000345")]
		public Dictionary<string, Func<double[], double>> LocalFunctions
		{
			[Token(Token = "0x6001A78")]
			[Address(RVA = "0x124572C", Offset = "0x124572C", VA = "0x124572C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0x1245734", Offset = "0x1245734", VA = "0x1245734")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000346")]
		public Dictionary<string, double> LocalVariables
		{
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0x124573C", Offset = "0x124573C", VA = "0x124573C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0x1245744", Offset = "0x1245744", VA = "0x1245744")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000347")]
		public CultureInfo CultureInfo
		{
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0x124574C", Offset = "0x124574C", VA = "0x124574C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0x1245754", Offset = "0x1245754", VA = "0x1245754")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0x124575C", Offset = "0x124575C", VA = "0x124575C")]
		public MathParser(bool loadPreDefinedFunctions = true, bool loadPreDefinedOperators = true, bool loadPreDefinedVariables = true, [Optional] CultureInfo cultureInfo)
		{
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x12479E8", Offset = "0x12479E8", VA = "0x12479E8")]
		public double Parse(string mathExpression)
		{
			return default(double);
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x1248AC8", Offset = "0x1248AC8", VA = "0x1248AC8")]
		public double Parse(ReadOnlyCollection<string> mathExpression)
		{
			return default(double);
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x1248B50", Offset = "0x1248B50", VA = "0x1248B50")]
		public double ProgrammaticallyParse(string mathExpression, bool correctExpression = true, bool identifyComments = true)
		{
			return default(double);
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0x1249014", Offset = "0x1249014", VA = "0x1249014")]
		public ReadOnlyCollection<string> GetTokens(string mathExpression)
		{
			return null;
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x1248F44", Offset = "0x1248F44", VA = "0x1248F44")]
		private string Correction(string input)
		{
			return null;
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x1247A04", Offset = "0x1247A04", VA = "0x1247A04")]
		private List<string> Lexer(string expr)
		{
			return null;
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x12482B0", Offset = "0x12482B0", VA = "0x12482B0")]
		private double MathParserLogic(List<string> tokens)
		{
			return default(double);
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0x1249070", Offset = "0x1249070", VA = "0x1249070")]
		private double BasicArithmeticalExpression(List<string> tokens)
		{
			return default(double);
		}
	}
}
namespace HutongGames
{
	[Token(Token = "0x20004FC")]
	public class EasingFunction
	{
		[Token(Token = "0x20004FD")]
		public enum Ease
		{
			[Token(Token = "0x4001667")]
			EaseInQuad,
			[Token(Token = "0x4001668")]
			EaseOutQuad,
			[Token(Token = "0x4001669")]
			EaseInOutQuad,
			[Token(Token = "0x400166A")]
			EaseInCubic,
			[Token(Token = "0x400166B")]
			EaseOutCubic,
			[Token(Token = "0x400166C")]
			EaseInOutCubic,
			[Token(Token = "0x400166D")]
			EaseInQuart,
			[Token(Token = "0x400166E")]
			EaseOutQuart,
			[Token(Token = "0x400166F")]
			EaseInOutQuart,
			[Token(Token = "0x4001670")]
			EaseInQuint,
			[Token(Token = "0x4001671")]
			EaseOutQuint,
			[Token(Token = "0x4001672")]
			EaseInOutQuint,
			[Token(Token = "0x4001673")]
			EaseInSine,
			[Token(Token = "0x4001674")]
			EaseOutSine,
			[Token(Token = "0x4001675")]
			EaseInOutSine,
			[Token(Token = "0x4001676")]
			EaseInExpo,
			[Token(Token = "0x4001677")]
			EaseOutExpo,
			[Token(Token = "0x4001678")]
			EaseInOutExpo,
			[Token(Token = "0x4001679")]
			EaseInCirc,
			[Token(Token = "0x400167A")]
			EaseOutCirc,
			[Token(Token = "0x400167B")]
			EaseInOutCirc,
			[Token(Token = "0x400167C")]
			Linear,
			[Token(Token = "0x400167D")]
			Spring,
			[Token(Token = "0x400167E")]
			EaseInBounce,
			[Token(Token = "0x400167F")]
			EaseOutBounce,
			[Token(Token = "0x4001680")]
			EaseInOutBounce,
			[Token(Token = "0x4001681")]
			EaseInBack,
			[Token(Token = "0x4001682")]
			EaseOutBack,
			[Token(Token = "0x4001683")]
			EaseInOutBack,
			[Token(Token = "0x4001684")]
			EaseInElastic,
			[Token(Token = "0x4001685")]
			EaseOutElastic,
			[Token(Token = "0x4001686")]
			EaseInOutElastic,
			[Token(Token = "0x4001687")]
			CustomCurve,
			[Token(Token = "0x4001688")]
			Punch
		}

		[Token(Token = "0x20004FE")]
		public delegate float Function(float s, float e, float v);

		[Token(Token = "0x4001664")]
		private const float NATURAL_LOG_OF_2 = 0.6931472f;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AnimationCurve AnimationCurve;

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x124A300", Offset = "0x124A300", VA = "0x124A300")]
		public static float Linear(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x124A324", Offset = "0x124A324", VA = "0x124A324")]
		public static float Spring(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x124A3D4", Offset = "0x124A3D4", VA = "0x124A3D4")]
		public static float EaseInQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x124A3E8", Offset = "0x124A3E8", VA = "0x124A3E8")]
		public static float EaseOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x124A404", Offset = "0x124A404", VA = "0x124A404")]
		public static float EaseInOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x124A458", Offset = "0x124A458", VA = "0x124A458")]
		public static float EaseInCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x124A470", Offset = "0x124A470", VA = "0x124A470")]
		public static float EaseOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x124A498", Offset = "0x124A498", VA = "0x124A498")]
		public static float EaseInOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x124A4F0", Offset = "0x124A4F0", VA = "0x124A4F0")]
		public static float EaseInQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x124A50C", Offset = "0x124A50C", VA = "0x124A50C")]
		public static float EaseOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x124A534", Offset = "0x124A534", VA = "0x124A534")]
		public static float EaseInOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x124A590", Offset = "0x124A590", VA = "0x124A590")]
		public static float EaseInQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x124A5B0", Offset = "0x124A5B0", VA = "0x124A5B0")]
		public static float EaseOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x124A5E0", Offset = "0x124A5E0", VA = "0x124A5E0")]
		public static float EaseInOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x124A648", Offset = "0x124A648", VA = "0x124A648")]
		public static float EaseInSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x124A680", Offset = "0x124A680", VA = "0x124A680")]
		public static float EaseOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x124A6B4", Offset = "0x124A6B4", VA = "0x124A6B4")]
		public static float EaseInOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x124A6F8", Offset = "0x124A6F8", VA = "0x124A6F8")]
		public static float EaseInExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x124A730", Offset = "0x124A730", VA = "0x124A730")]
		public static float EaseOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0x124A768", Offset = "0x124A768", VA = "0x124A768")]
		public static float EaseInOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0x124A7D8", Offset = "0x124A7D8", VA = "0x124A7D8")]
		public static float EaseInCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0x124A800", Offset = "0x124A800", VA = "0x124A800")]
		public static float EaseOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x124A828", Offset = "0x124A828", VA = "0x124A828")]
		public static float EaseInOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x124A87C", Offset = "0x124A87C", VA = "0x124A87C")]
		public static float EaseInBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0x124A8B4", Offset = "0x124A8B4", VA = "0x124A8B4")]
		public static float EaseOutBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0x124A97C", Offset = "0x124A97C", VA = "0x124A97C")]
		public static float EaseInOutBounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0x124A9FC", Offset = "0x124A9FC", VA = "0x124A9FC")]
		public static float EaseInBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0x124AA2C", Offset = "0x124AA2C", VA = "0x124AA2C")]
		public static float EaseOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0x124AA6C", Offset = "0x124AA6C", VA = "0x124AA6C")]
		public static float EaseInOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0x124AAF0", Offset = "0x124AAF0", VA = "0x124AAF0")]
		public static float EaseInElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x124AB80", Offset = "0x124AB80", VA = "0x124AB80")]
		public static float EaseOutElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x124AC10", Offset = "0x124AC10", VA = "0x124AC10")]
		public static float EaseInOutElastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0x124AD0C", Offset = "0x124AD0C", VA = "0x124AD0C")]
		public static float LinearD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0x124AD14", Offset = "0x124AD14", VA = "0x124AD14")]
		public static float EaseInQuadD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0x124AD24", Offset = "0x124AD24", VA = "0x124AD24")]
		public static float EaseOutQuadD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x124AD40", Offset = "0x124AD40", VA = "0x124AD40")]
		public static float EaseInOutQuadD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x124AD68", Offset = "0x124AD68", VA = "0x124AD68")]
		public static float EaseInCubicD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x124AD80", Offset = "0x124AD80", VA = "0x124AD80")]
		public static float EaseOutCubicD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x124ADA0", Offset = "0x124ADA0", VA = "0x124ADA0")]
		public static float EaseInOutCubicD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x124ADD0", Offset = "0x124ADD0", VA = "0x124ADD0")]
		public static float EaseInQuartD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x124ADEC", Offset = "0x124ADEC", VA = "0x124ADEC")]
		public static float EaseOutQuartD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x124AE10", Offset = "0x124AE10", VA = "0x124AE10")]
		public static float EaseInOutQuartD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x124AE48", Offset = "0x124AE48", VA = "0x124AE48")]
		public static float EaseInQuintD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0x124AE68", Offset = "0x124AE68", VA = "0x124AE68")]
		public static float EaseOutQuintD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0x124AE90", Offset = "0x124AE90", VA = "0x124AE90")]
		public static float EaseInOutQuintD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0x124AEC8", Offset = "0x124AEC8", VA = "0x124AEC8")]
		public static float EaseInSineD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0x124AF10", Offset = "0x124AF10", VA = "0x124AF10")]
		public static float EaseOutSineD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0x124AF40", Offset = "0x124AF40", VA = "0x124AF40")]
		public static float EaseInOutSineD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0x124AF78", Offset = "0x124AF78", VA = "0x124AF78")]
		public static float EaseInExpoD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x124AFBC", Offset = "0x124AFBC", VA = "0x124AFBC")]
		public static float EaseOutExpoD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x124AFF8", Offset = "0x124AFF8", VA = "0x124AFF8")]
		public static float EaseInOutExpoD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x124B04C", Offset = "0x124B04C", VA = "0x124B04C")]
		public static float EaseInCircD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x124B06C", Offset = "0x124B06C", VA = "0x124B06C")]
		public static float EaseOutCircD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x124B094", Offset = "0x124B094", VA = "0x124B094")]
		public static float EaseInOutCircD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0x124B0E0", Offset = "0x124B0E0", VA = "0x124B0E0")]
		public static float EaseInBounceD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x124B0F4", Offset = "0x124B0F4", VA = "0x124B0F4")]
		public static float EaseOutBounceD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0x124B17C", Offset = "0x124B17C", VA = "0x124B17C")]
		public static float EaseInOutBounceD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x124B1C4", Offset = "0x124B1C4", VA = "0x124B1C4")]
		public static float EaseInBackD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0x124B1F4", Offset = "0x124B1F4", VA = "0x124B1F4")]
		public static float EaseOutBackD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0x124B230", Offset = "0x124B230", VA = "0x124B230")]
		public static float EaseInOutBackD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x124B2C0", Offset = "0x124B2C0", VA = "0x124B2C0")]
		public static float EaseInElasticD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x124B36C", Offset = "0x124B36C", VA = "0x124B36C")]
		public static float EaseOutElasticD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x124B40C", Offset = "0x124B40C", VA = "0x124B40C")]
		public static float EaseInOutElasticD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x124B538", Offset = "0x124B538", VA = "0x124B538")]
		public static float SpringD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x124B65C", Offset = "0x124B65C", VA = "0x124B65C")]
		public static float CustomCurve(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x124B6F4", Offset = "0x124B6F4", VA = "0x124B6F4")]
		public static float Punch(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x124B750", Offset = "0x124B750", VA = "0x124B750")]
		public static float PunchD(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x124B7C8", Offset = "0x124B7C8", VA = "0x124B7C8")]
		public static Function GetEasingFunction(Ease easingFunction)
		{
			return null;
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x124BD18", Offset = "0x124BD18", VA = "0x124BD18")]
		public static Function GetEasingFunctionDerivative(Ease easingFunction)
		{
			return null;
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x124C240", Offset = "0x124C240", VA = "0x124C240")]
		public EasingFunction()
		{
		}
	}
}
namespace HutongGames.Extensions
{
	[Token(Token = "0x20004FF")]
	public static class TweenExtensions
	{
		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x124D408", Offset = "0x124D408", VA = "0x124D408")]
		public static Rect Lerp(this Rect rect, Rect from, Rect to, float t)
		{
			return default(Rect);
		}
	}
}
namespace HutongGames.PlayMaker
{
	[Token(Token = "0x2000500")]
	public static class ActionHelpers
	{
		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static RaycastHit mousePickInfo;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static float mousePickRaycastTime;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static float mousePickDistanceUsed;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static int mousePickLayerMaskUsed;

		[Token(Token = "0x400168D")]
		public const string colon = ": ";

		[Token(Token = "0x17000348")]
		public static Texture2D WhiteTexture
		{
			[Token(Token = "0x6001AF7")]
			[Address(RVA = "0x124D524", Offset = "0x124D524", VA = "0x124D524")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x124D52C", Offset = "0x124D52C", VA = "0x124D52C")]
		public static Color BlendColor(ColorBlendMode blendMode, Color c1, Color c2)
		{
			return default(Color);
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x124D680", Offset = "0x124D680", VA = "0x124D680")]
		public static bool IsVisible(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x124D754", Offset = "0x124D754", VA = "0x124D754")]
		public static bool IsVisible(GameObject go, Camera camera, bool useBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x124D8F8", Offset = "0x124D8F8", VA = "0x124D8F8")]
		public static GameObject GetOwnerDefault(FsmStateAction action, FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x124D918", Offset = "0x124D918", VA = "0x124D918")]
		public static PlayMakerFSM GetGameObjectFsm(GameObject go, string fsmName)
		{
			return null;
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x124DAA0", Offset = "0x124DAA0", VA = "0x124DAA0")]
		public static int GetRandomWeightedIndex(FsmFloat[] weights)
		{
			return default(int);
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x124DB98", Offset = "0x124DB98", VA = "0x124DB98")]
		public static void AddAnimationClip(GameObject go, AnimationClip animClip)
		{
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x124DC90", Offset = "0x124DC90", VA = "0x124DC90")]
		public static bool HasAnimationFinished(AnimationState anim, float prevTime, float currentTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x124DD64", Offset = "0x124DD64", VA = "0x124DD64")]
		public static Vector3 GetPosition(FsmGameObject fsmGameObject, FsmVector3 fsmVector3)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x124DE60", Offset = "0x124DE60", VA = "0x124DE60")]
		public static Vector3 GetDeviceAcceleration()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0x124DF1C", Offset = "0x124DF1C", VA = "0x124DF1C")]
		public static Vector3 GetMousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0x124DFDC", Offset = "0x124DFDC", VA = "0x124DFDC")]
		public static bool AnyKeyDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x124E114", Offset = "0x124E114", VA = "0x124E114")]
		public static bool IsMouseOver(GameObject gameObject, float distance, int layerMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x124E310", Offset = "0x124E310", VA = "0x124E310")]
		public static RaycastHit MousePick(float distance, int layerMask)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x124E1D8", Offset = "0x124E1D8", VA = "0x124E1D8")]
		public static GameObject MouseOver(float distance, int layerMask)
		{
			return null;
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x124E3D4", Offset = "0x124E3D4", VA = "0x124E3D4")]
		private static void DoMousePick(float distance, int layerMask)
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x124E57C", Offset = "0x124E57C", VA = "0x124E57C")]
		public static int LayerArrayToLayerMask(FsmInt[] layers, bool invert)
		{
			return default(int);
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x124E614", Offset = "0x124E614", VA = "0x124E614")]
		public static bool IsLoopingWrapMode(WrapMode wrapMode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x124E62C", Offset = "0x124E62C", VA = "0x124E62C")]
		public static string CheckRayDistance(float rayDistance)
		{
			return null;
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x124E694", Offset = "0x124E694", VA = "0x124E694")]
		public static string CheckForValidEvent(FsmState state, string eventName)
		{
			return null;
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x124E804", Offset = "0x124E804", VA = "0x124E804")]
		public static string CheckPhysicsSetup(FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x124E9CC", Offset = "0x124E9CC", VA = "0x124E9CC")]
		public static string CheckOwnerPhysicsSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x124E86C", Offset = "0x124E86C", VA = "0x124E86C")]
		public static string CheckPhysicsSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x124E9D0", Offset = "0x124E9D0", VA = "0x124E9D0")]
		public static string CheckPhysics2dSetup(FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x124EB98", Offset = "0x124EB98", VA = "0x124EB98")]
		public static string CheckOwnerPhysics2dSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x124EA38", Offset = "0x124EA38", VA = "0x124EA38")]
		public static string CheckPhysics2dSetup(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x124EB9C", Offset = "0x124EB9C", VA = "0x124EB9C")]
		public static void DebugLog(Fsm fsm, LogLevel logLevel, string text, bool sendToUnityLog = false)
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x124EEF0", Offset = "0x124EEF0", VA = "0x124EEF0")]
		public static void LogError(string text)
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x124EF54", Offset = "0x124EF54", VA = "0x124EF54")]
		public static void LogWarning(string text)
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x124ED74", Offset = "0x124ED74", VA = "0x124ED74")]
		public static string FormatUnityLogString(string text)
		{
			return null;
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x124EFB8", Offset = "0x124EFB8", VA = "0x124EFB8")]
		public static string StripTags(string textWithTags)
		{
			return null;
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x124F09C", Offset = "0x124F09C", VA = "0x124F09C")]
		public static string GetValueLabel(INamedVariable variable)
		{
			return null;
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x124F0DC", Offset = "0x124F0DC", VA = "0x124F0DC")]
		public static string GetValueLabel(Fsm fsm, FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x124F178", Offset = "0x124F178", VA = "0x124F178")]
		public static string AutoName(FsmStateAction action, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x124F2A4", Offset = "0x124F2A4", VA = "0x124F2A4")]
		public static string AutoName(FsmStateAction action, Fsm fsm, FsmOwnerDefault ownerDefault)
		{
			return null;
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x124F448", Offset = "0x124F448", VA = "0x124F448")]
		public static string AutoName(FsmStateAction action, params string[] labels)
		{
			return null;
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x124F484", Offset = "0x124F484", VA = "0x124F484")]
		public static string AutoName(FsmStateAction action, FsmEvent fsmEvent)
		{
			return null;
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x124F1B4", Offset = "0x124F1B4", VA = "0x124F1B4")]
		public static string AutoName(string actionName, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x124F38C", Offset = "0x124F38C", VA = "0x124F38C")]
		public static string AutoName(string actionName, params string[] labels)
		{
			return null;
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x124F590", Offset = "0x124F590", VA = "0x124F590")]
		public static string AutoName(FsmStateAction action, Fsm fsm, FsmOwnerDefault target, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x124F5E0", Offset = "0x124F5E0", VA = "0x124F5E0")]
		public static string AutoName(string actionName, Fsm fsm, FsmOwnerDefault target, params INamedVariable[] exposedFields)
		{
			return null;
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x124F6E4", Offset = "0x124F6E4", VA = "0x124F6E4")]
		public static string AutoNameRange(FsmStateAction action, NamedVariable min, NamedVariable max)
		{
			return null;
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x124F734", Offset = "0x124F734", VA = "0x124F734")]
		public static string AutoNameRange(string actionName, NamedVariable min, NamedVariable max)
		{
			return null;
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x124F948", Offset = "0x124F948", VA = "0x124F948")]
		public static string AutoNameSetVar(FsmStateAction action, NamedVariable var, NamedVariable value)
		{
			return null;
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x124F998", Offset = "0x124F998", VA = "0x124F998")]
		public static string AutoNameSetVar(string actionName, NamedVariable var, NamedVariable value)
		{
			return null;
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x124FBAC", Offset = "0x124FBAC", VA = "0x124FBAC")]
		public static string AutoNameConvert(FsmStateAction action, NamedVariable fromVariable, NamedVariable toVariable)
		{
			return null;
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x124FBFC", Offset = "0x124FBFC", VA = "0x124FBFC")]
		public static string AutoNameConvert(string actionName, NamedVariable fromVariable, NamedVariable toVariable)
		{
			return null;
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x124FE4C", Offset = "0x124FE4C", VA = "0x124FE4C")]
		public static string AutoNameGetProperty(FsmStateAction action, NamedVariable property, NamedVariable store)
		{
			return null;
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x124FE9C", Offset = "0x124FE9C", VA = "0x124FE9C")]
		public static string AutoNameGetProperty(string actionName, NamedVariable property, NamedVariable store)
		{
			return null;
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x12500B0", Offset = "0x12500B0", VA = "0x12500B0")]
		[Obsolete("Use LogError instead.")]
		public static void RuntimeError(FsmStateAction action, string error)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000501")]
	public enum GamepadButton
	{
		[Token(Token = "0x400168F")]
		ButtonNorth,
		[Token(Token = "0x4001690")]
		ButtonEast,
		[Token(Token = "0x4001691")]
		ButtonWest,
		[Token(Token = "0x4001692")]
		ButtonSouth,
		[Token(Token = "0x4001693")]
		LeftTrigger,
		[Token(Token = "0x4001694")]
		RightTrigger,
		[Token(Token = "0x4001695")]
		LeftShoulder,
		[Token(Token = "0x4001696")]
		RightShoulder,
		[Token(Token = "0x4001697")]
		SelectButton,
		[Token(Token = "0x4001698")]
		StartButton
	}
	[Serializable]
	[Token(Token = "0x2000502")]
	public enum GamepadStick
	{
		[Token(Token = "0x400169A")]
		LeftStick,
		[Token(Token = "0x400169B")]
		RightStick,
		[Token(Token = "0x400169C")]
		DPad
	}
	[Token(Token = "0x2000503")]
	public class PlayMakerCanvasRaycastFilterProxy : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool RayCastingEnabled;

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x125013C", Offset = "0x125013C", VA = "0x125013C", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x1250144", Offset = "0x1250144", VA = "0x1250144")]
		public PlayMakerCanvasRaycastFilterProxy()
		{
		}
	}
	[Token(Token = "0x2000504")]
	[AddComponentMenu("PlayMaker/UI/UI Bool Value Changed Event")]
	public class PlayMakerUiBoolValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Toggle toggle;

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x1250154", Offset = "0x1250154", VA = "0x1250154", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x12502BC", Offset = "0x12502BC", VA = "0x12502BC")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x12503B0", Offset = "0x12503B0", VA = "0x12503B0")]
		private void OnValueChanged(bool value)
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x125054C", Offset = "0x125054C", VA = "0x125054C")]
		public PlayMakerUiBoolValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x2000505")]
	[AddComponentMenu("PlayMaker/UI/UI Click Event")]
	public class PlayMakerUiClickEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button button;

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x12505D8", Offset = "0x12505D8", VA = "0x12505D8", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x125072C", Offset = "0x125072C", VA = "0x125072C")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x125080C", Offset = "0x125080C", VA = "0x125080C")]
		private void DoOnClick()
		{
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x125089C", Offset = "0x125089C", VA = "0x125089C")]
		public PlayMakerUiClickEvent()
		{
		}
	}
	[Token(Token = "0x2000506")]
	[AddComponentMenu("PlayMaker/UI/UI Drag Events")]
	public class PlayMakerUiDragEvents : PlayMakerUiEventBase, IDragHandler, IEventSystemHandler, IBeginDragHandler, IEndDragHandler
	{
		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x12508A0", Offset = "0x12508A0", VA = "0x12508A0", Slot = "6")]
		public void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x125096C", Offset = "0x125096C", VA = "0x125096C", Slot = "5")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x1250A38", Offset = "0x1250A38", VA = "0x1250A38", Slot = "7")]
		public void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x1250B04", Offset = "0x1250B04", VA = "0x1250B04")]
		public PlayMakerUiDragEvents()
		{
		}
	}
	[Token(Token = "0x2000507")]
	[AddComponentMenu("PlayMaker/UI/UI Drop Event")]
	public class PlayMakerUiDropEvent : PlayMakerUiEventBase, IDropHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x1250B08", Offset = "0x1250B08", VA = "0x1250B08", Slot = "5")]
		public void OnDrop(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x1250BD4", Offset = "0x1250BD4", VA = "0x1250BD4")]
		public PlayMakerUiDropEvent()
		{
		}
	}
	[Token(Token = "0x2000508")]
	[AddComponentMenu("PlayMaker/UI/UI End Edit Event")]
	public class PlayMakerUiEndEditEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputField inputField;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TMP_InputField tmpInputField;

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x1250BD8", Offset = "0x1250BD8", VA = "0x1250BD8", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x1250E44", Offset = "0x1250E44", VA = "0x1250E44")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x1250FB8", Offset = "0x1250FB8", VA = "0x1250FB8")]
		private void DoOnEndEdit(string value)
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x1251098", Offset = "0x1251098", VA = "0x1251098")]
		public PlayMakerUiEndEditEvent()
		{
		}
	}
	[Token(Token = "0x2000509")]
	public abstract class PlayMakerUiEventBase : MonoBehaviour
	{
		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PlayMakerFSM> targetFsms;

		[NonSerialized]
		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool initialized;

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x125109C", Offset = "0x125109C", VA = "0x125109C")]
		public void AddTargetFsm(PlayMakerFSM fsm)
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x1251168", Offset = "0x1251168", VA = "0x1251168")]
		private bool TargetsFsm(PlayMakerFSM fsm)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x1251248", Offset = "0x1251248", VA = "0x1251248")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x1251254", Offset = "0x1251254", VA = "0x1251254")]
		public void PreProcess()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x1251260", Offset = "0x1251260", VA = "0x1251260", Slot = "4")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x125048C", Offset = "0x125048C", VA = "0x125048C")]
		protected void SendEvent(FsmEvent fsmEvent)
		{
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x1250550", Offset = "0x1250550", VA = "0x1250550")]
		protected PlayMakerUiEventBase()
		{
		}
	}
	[Token(Token = "0x200050A")]
	[AddComponentMenu("PlayMaker/UI/UI Float Value Changed Event")]
	public class PlayMakerUiFloatValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider slider;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Scrollbar scrollbar;

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x125126C", Offset = "0x125126C", VA = "0x125126C", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x12514A4", Offset = "0x12514A4", VA = "0x12514A4")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x1251618", Offset = "0x1251618", VA = "0x1251618")]
		private void OnValueChanged(float value)
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x12516F0", Offset = "0x12516F0", VA = "0x12516F0")]
		public PlayMakerUiFloatValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x200050B")]
	[AddComponentMenu("PlayMaker/UI/UI Int Value Changed Event")]
	public class PlayMakerUiIntValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dropdown dropdown;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TMP_Dropdown tmpDropdown;

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x12516F4", Offset = "0x12516F4", VA = "0x12516F4", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x1251960", Offset = "0x1251960", VA = "0x1251960")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x1251AD4", Offset = "0x1251AD4", VA = "0x1251AD4")]
		private void OnValueChanged(int value)
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x1251BAC", Offset = "0x1251BAC", VA = "0x1251BAC")]
		public PlayMakerUiIntValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x200050C")]
	[AddComponentMenu("PlayMaker/UI/UI Pointer Events")]
	public class PlayMakerUiPointerEvents : PlayMakerUiEventBase, IPointerClickHandler, IEventSystemHandler, IPointerDownHandler, IPointerEnterHandler, IPointerExitHandler, IPointerUpHandler
	{
		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x1251BB0", Offset = "0x1251BB0", VA = "0x1251BB0", Slot = "5")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x1251C7C", Offset = "0x1251C7C", VA = "0x1251C7C", Slot = "6")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x1251D48", Offset = "0x1251D48", VA = "0x1251D48", Slot = "7")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x1251E14", Offset = "0x1251E14", VA = "0x1251E14", Slot = "8")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0x1251EE0", Offset = "0x1251EE0", VA = "0x1251EE0", Slot = "9")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x1251FAC", Offset = "0x1251FAC", VA = "0x1251FAC")]
		public PlayMakerUiPointerEvents()
		{
		}
	}
	[Token(Token = "0x200050D")]
	[AddComponentMenu("PlayMaker/UI/UI Vector2 Value Changed Event")]
	public class PlayMakerUiVector2ValueChangedEvent : PlayMakerUiEventBase
	{
		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScrollRect scrollRect;

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x1251FB0", Offset = "0x1251FB0", VA = "0x1251FB0", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x1252118", Offset = "0x1252118", VA = "0x1252118")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x125220C", Offset = "0x125220C", VA = "0x125220C")]
		private void OnValueChanged(Vector2 value)
		{
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x12522E8", Offset = "0x12522E8", VA = "0x12522E8")]
		public PlayMakerUiVector2ValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x200050E")]
	[Preserve]
	public class FsmProcessor
	{
		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x12522EC", Offset = "0x12522EC", VA = "0x12522EC")]
		public static void OnPreprocess(PlayMakerFSM fsm)
		{
		}

		[Token(Token = "0x6001B58")]
		private static void HandleUiEvent<T>(PlayMakerFSM fsm, UiEvents uiEvent) where T : PlayMakerUiEventBase
		{
		}

		[Token(Token = "0x6001B59")]
		private static void AddUiEventHandler<T>(PlayMakerFSM fsm) where T : PlayMakerUiEventBase
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x1252558", Offset = "0x1252558", VA = "0x1252558")]
		private static bool AddEventHandlerComponent(PlayMakerFSM fsm, Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x1252724", Offset = "0x1252724", VA = "0x1252724")]
		public static PlayMakerProxyBase GetEventHandlerComponent(GameObject go, Type type)
		{
			return null;
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x125288C", Offset = "0x125288C", VA = "0x125288C")]
		public FsmProcessor()
		{
		}
	}
	[Token(Token = "0x200050F")]
	public class UpdateHelper
	{
		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool editorPrefLoaded;

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x1252894", Offset = "0x1252894", VA = "0x1252894")]
		public static void SetDirty(Fsm fsm)
		{
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x1252898", Offset = "0x1252898", VA = "0x1252898")]
		public UpdateHelper()
		{
		}
	}
	[Token(Token = "0x2000510")]
	public class DamageableEventBase : MonoBehaviour, IMessageReceiver
	{
		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PlayMakerFSM> targetFsms;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FsmEvent applyDamageEvent;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FsmEvent dieEvent;

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x12528A0", Offset = "0x12528A0", VA = "0x12528A0", Slot = "4")]
		public void OnReceiveMessage(MessageType type, object sender, object msg)
		{
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x1252990", Offset = "0x1252990", VA = "0x1252990")]
		private void Death(Damageable.DamageMessage msg)
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x1252998", Offset = "0x1252998", VA = "0x1252998")]
		private void ApplyDamage(Damageable.DamageMessage msg)
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x1252A80", Offset = "0x1252A80", VA = "0x1252A80")]
		protected void SendEvent(FsmEvent fsmEvent)
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x1252B40", Offset = "0x1252B40", VA = "0x1252B40")]
		public DamageableEventBase()
		{
		}
	}
}
namespace HutongGames.PlayMaker.TweenEnums
{
	[Token(Token = "0x2000511")]
	public enum TweenDirection
	{
		[Token(Token = "0x40016AE")]
		To,
		[Token(Token = "0x40016AF")]
		From
	}
	[Token(Token = "0x2000512")]
	public enum LoopType
	{
		[Token(Token = "0x40016B1")]
		None,
		[Token(Token = "0x40016B2")]
		Loop,
		[Token(Token = "0x40016B3")]
		PingPong
	}
	[Token(Token = "0x2000513")]
	public enum RotationInterpolation
	{
		[Token(Token = "0x40016B5")]
		Spherical,
		[Token(Token = "0x40016B6")]
		Linear
	}
	[Token(Token = "0x2000514")]
	public enum RotationOptions
	{
		[Token(Token = "0x40016B8")]
		CurrentRotation,
		[Token(Token = "0x40016B9")]
		WorldRotation,
		[Token(Token = "0x40016BA")]
		LocalRotation,
		[Token(Token = "0x40016BB")]
		WorldOffsetRotation,
		[Token(Token = "0x40016BC")]
		LocalOffsetRotation,
		[Token(Token = "0x40016BD")]
		MatchGameObjectRotation
	}
	[Token(Token = "0x2000515")]
	public enum ScaleOptions
	{
		[Token(Token = "0x40016BF")]
		CurrentScale,
		[Token(Token = "0x40016C0")]
		LocalScale,
		[Token(Token = "0x40016C1")]
		MultiplyScale,
		[Token(Token = "0x40016C2")]
		AddToScale,
		[Token(Token = "0x40016C3")]
		MatchGameObject
	}
	[Token(Token = "0x2000516")]
	public enum PositionOptions
	{
		[Token(Token = "0x40016C5")]
		CurrentPosition,
		[Token(Token = "0x40016C6")]
		WorldPosition,
		[Token(Token = "0x40016C7")]
		LocalPosition,
		[Token(Token = "0x40016C8")]
		WorldOffset,
		[Token(Token = "0x40016C9")]
		LocalOffset,
		[Token(Token = "0x40016CA")]
		TargetGameObject
	}
	[Token(Token = "0x2000517")]
	public enum UiPositionOptions
	{
		[Token(Token = "0x40016CC")]
		CurrentPosition,
		[Token(Token = "0x40016CD")]
		Position,
		[Token(Token = "0x40016CE")]
		Offset,
		[Token(Token = "0x40016CF")]
		OffscreenTop,
		[Token(Token = "0x40016D0")]
		OffscreenBottom,
		[Token(Token = "0x40016D1")]
		OffscreenLeft,
		[Token(Token = "0x40016D2")]
		OffscreenRight,
		[Token(Token = "0x40016D3")]
		TargetGameObject
	}
	[Token(Token = "0x2000518")]
	public enum TargetValueOptions
	{
		[Token(Token = "0x40016D5")]
		CurrentValue,
		[Token(Token = "0x40016D6")]
		Offset,
		[Token(Token = "0x40016D7")]
		Value
	}
}
namespace HutongGames.PlayMaker.Ecosystem.Utils
{
	[Token(Token = "0x2000519")]
	public class ButtonAttribute : PropertyAttribute
	{
		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string methodName;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string buttonName;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useValue;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public BindingFlags flags;

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x1252BC8", Offset = "0x1252BC8", VA = "0x1252BC8")]
		public ButtonAttribute(string methodName, string buttonName, bool useValue, BindingFlags flags = BindingFlags.Instance | BindingFlags.Public)
		{
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x1252C28", Offset = "0x1252C28", VA = "0x1252C28")]
		public ButtonAttribute(string methodName, bool useValue, BindingFlags flags)
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x1252C38", Offset = "0x1252C38", VA = "0x1252C38")]
		public ButtonAttribute(string methodName, bool useValue)
		{
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x1252C48", Offset = "0x1252C48", VA = "0x1252C48")]
		public ButtonAttribute(string methodName, string buttonName, BindingFlags flags)
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x1252C54", Offset = "0x1252C54", VA = "0x1252C54")]
		public ButtonAttribute(string methodName, string buttonName)
		{
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x1252C60", Offset = "0x1252C60", VA = "0x1252C60")]
		public ButtonAttribute(string methodName, BindingFlags flags)
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x1252C70", Offset = "0x1252C70", VA = "0x1252C70")]
		public ButtonAttribute(string methodName)
		{
		}
	}
	[Token(Token = "0x200051A")]
	[AttributeUsage(AttributeTargets.All)]
	public class EventTargetVariable : Attribute
	{
		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string variable;

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x1252C80", Offset = "0x1252C80", VA = "0x1252C80")]
		public EventTargetVariable(string variable)
		{
		}
	}
	[Token(Token = "0x200051B")]
	[AttributeUsage(AttributeTargets.All)]
	public class FsmVariableTargetVariable : Attribute
	{
		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string variable;

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x1252CB0", Offset = "0x1252CB0", VA = "0x1252CB0")]
		public FsmVariableTargetVariable(string variable)
		{
		}
	}
	[Token(Token = "0x200051C")]
	[AttributeUsage(AttributeTargets.All)]
	public class FsmVariableType : Attribute
	{
		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VariableType variableType;

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x1252CE0", Offset = "0x1252CE0", VA = "0x1252CE0")]
		public FsmVariableType(VariableType variableType)
		{
		}
	}
	[Token(Token = "0x200051D")]
	[AttributeUsage(AttributeTargets.All)]
	public class ShowOptions : Attribute
	{
		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x1252D08", Offset = "0x1252D08", VA = "0x1252D08")]
		public ShowOptions()
		{
		}
	}
	[Token(Token = "0x200051E")]
	public enum OwnerSelectionOptions
	{
		[Token(Token = "0x40016E0")]
		Owner,
		[Token(Token = "0x40016E1")]
		SpecifyGameObject
	}
	[Serializable]
	[Token(Token = "0x200051F")]
	public class Owner
	{
		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OwnerSelectionOptions selection;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x1252D10", Offset = "0x1252D10", VA = "0x1252D10")]
		public Owner()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000520")]
	public class PlayMakerEvent
	{
		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlayMakerFSM FsmEventSender;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string eventName;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool allowLocalEvents;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string defaultEventName;

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x1252D18", Offset = "0x1252D18", VA = "0x1252D18")]
		public PlayMakerEvent()
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x1252D20", Offset = "0x1252D20", VA = "0x1252D20")]
		public PlayMakerEvent(string defaultEventName)
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x1252D60", Offset = "0x1252D60", VA = "0x1252D60")]
		public bool SendEvent(PlayMakerFSM fromFsm, PlayMakerEventTarget eventTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0x1252F94", Offset = "0x1252F94", VA = "0x1252F94", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000521")]
	public enum ProxyEventTarget
	{
		[Token(Token = "0x40016E9")]
		Owner,
		[Token(Token = "0x40016EA")]
		GameObject,
		[Token(Token = "0x40016EB")]
		BroadCastAll,
		[Token(Token = "0x40016EC")]
		FsmComponent
	}
	[Serializable]
	[Token(Token = "0x2000522")]
	public class PlayMakerEventTarget
	{
		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ProxyEventTarget eventTarget;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool includeChildren;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayMakerFSM fsmComponent;

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x1253060", Offset = "0x1253060", VA = "0x1253060")]
		public PlayMakerEventTarget()
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x1253070", Offset = "0x1253070", VA = "0x1253070")]
		public PlayMakerEventTarget(bool includeChildren = true)
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x12530A0", Offset = "0x12530A0", VA = "0x12530A0")]
		public PlayMakerEventTarget(ProxyEventTarget evenTarget, bool includeChildren = true)
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x12530D8", Offset = "0x12530D8", VA = "0x12530D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000523")]
	public enum ProxyFsmTarget
	{
		[Token(Token = "0x40016F2")]
		Owner,
		[Token(Token = "0x40016F3")]
		GameObject,
		[Token(Token = "0x40016F4")]
		FsmComponent
	}
	[Serializable]
	[Token(Token = "0x2000524")]
	public class PlayMakerFsmTarget
	{
		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ProxyFsmTarget target;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string fsmName;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayMakerFSM _fsmComponent;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _initialized;

		[Token(Token = "0x17000349")]
		public PlayMakerFSM fsmComponent
		{
			[Token(Token = "0x6001B78")]
			[Address(RVA = "0x125320C", Offset = "0x125320C", VA = "0x125320C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B79")]
			[Address(RVA = "0x125334C", Offset = "0x125334C", VA = "0x125334C")]
			set
			{
			}
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x1253354", Offset = "0x1253354", VA = "0x1253354")]
		public PlayMakerFsmTarget()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x125335C", Offset = "0x125335C", VA = "0x125335C")]
		public PlayMakerFsmTarget(ProxyFsmTarget target)
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x1253224", Offset = "0x1253224", VA = "0x1253224")]
		public void Initialize()
		{
		}
	}
	[Token(Token = "0x2000525")]
	public enum VariableSelectionChoice
	{
		[Token(Token = "0x40016FB")]
		Any,
		[Token(Token = "0x40016FC")]
		Float,
		[Token(Token = "0x40016FD")]
		Int,
		[Token(Token = "0x40016FE")]
		Bool,
		[Token(Token = "0x40016FF")]
		GameObject,
		[Token(Token = "0x4001700")]
		String,
		[Token(Token = "0x4001701")]
		Vector2,
		[Token(Token = "0x4001702")]
		Vector3,
		[Token(Token = "0x4001703")]
		Color,
		[Token(Token = "0x4001704")]
		Rect,
		[Token(Token = "0x4001705")]
		Material,
		[Token(Token = "0x4001706")]
		Texture,
		[Token(Token = "0x4001707")]
		Quaternion,
		[Token(Token = "0x4001708")]
		Object
	}
	[Serializable]
	[Token(Token = "0x2000526")]
	public class PlayMakerFsmVariable
	{
		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VariableSelectionChoice variableSelectionChoice;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VariableType selectedType;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string variableName;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string defaultVariableName;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool initialized;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool targetUndefined;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string variableNameToUse;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FsmVariables fsmVariables;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NamedVariable _namedVariable;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FsmFloat _float;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private FsmInt _int;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private FsmBool _bool;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FsmGameObject _gameObject;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private FsmColor _color;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private FsmMaterial _material;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FsmObject _object;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FsmQuaternion _quaternion;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FsmRect _rect;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FsmString _string;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private FsmTexture _texture;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private FsmVector2 _vector2;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private FsmVector3 _vector3;

		[Token(Token = "0x1700034A")]
		public NamedVariable namedVariable
		{
			[Token(Token = "0x6001B7D")]
			[Address(RVA = "0x1253384", Offset = "0x1253384", VA = "0x1253384")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034B")]
		public FsmFloat FsmFloat
		{
			[Token(Token = "0x6001B7E")]
			[Address(RVA = "0x125338C", Offset = "0x125338C", VA = "0x125338C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034C")]
		public FsmInt FsmInt
		{
			[Token(Token = "0x6001B7F")]
			[Address(RVA = "0x125349C", Offset = "0x125349C", VA = "0x125349C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034D")]
		public FsmBool FsmBool
		{
			[Token(Token = "0x6001B80")]
			[Address(RVA = "0x12535BC", Offset = "0x12535BC", VA = "0x12535BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034E")]
		public FsmGameObject FsmGameObject
		{
			[Token(Token = "0x6001B81")]
			[Address(RVA = "0x12536DC", Offset = "0x12536DC", VA = "0x12536DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034F")]
		public FsmColor FsmColor
		{
			[Token(Token = "0x6001B82")]
			[Address(RVA = "0x12537FC", Offset = "0x12537FC", VA = "0x12537FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000350")]
		public FsmMaterial FsmMaterial
		{
			[Token(Token = "0x6001B83")]
			[Address(RVA = "0x125391C", Offset = "0x125391C", VA = "0x125391C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000351")]
		public FsmObject FsmObject
		{
			[Token(Token = "0x6001B84")]
			[Address(RVA = "0x1253A3C", Offset = "0x1253A3C", VA = "0x1253A3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000352")]
		public FsmQuaternion FsmQuaternion
		{
			[Token(Token = "0x6001B85")]
			[Address(RVA = "0x1253B5C", Offset = "0x1253B5C", VA = "0x1253B5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000353")]
		public FsmRect FsmRect
		{
			[Token(Token = "0x6001B86")]
			[Address(RVA = "0x1253C7C", Offset = "0x1253C7C", VA = "0x1253C7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000354")]
		public FsmString FsmString
		{
			[Token(Token = "0x6001B87")]
			[Address(RVA = "0x1253D9C", Offset = "0x1253D9C", VA = "0x1253D9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000355")]
		public FsmTexture FsmTexture
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0x1253EBC", Offset = "0x1253EBC", VA = "0x1253EBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000356")]
		public FsmVector2 FsmVector2
		{
			[Token(Token = "0x6001B89")]
			[Address(RVA = "0x1253FDC", Offset = "0x1253FDC", VA = "0x1253FDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000357")]
		public FsmVector3 FsmVector3
		{
			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0x12540FC", Offset = "0x12540FC", VA = "0x12540FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x125421C", Offset = "0x125421C", VA = "0x125421C")]
		public PlayMakerFsmVariable()
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x1254284", Offset = "0x1254284", VA = "0x1254284")]
		public PlayMakerFsmVariable(VariableSelectionChoice variableSelectionChoice)
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x1254300", Offset = "0x1254300", VA = "0x1254300")]
		public PlayMakerFsmVariable(string defaultVariableName)
		{
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x1254384", Offset = "0x1254384", VA = "0x1254384")]
		public PlayMakerFsmVariable(VariableSelectionChoice variableSelectionChoice, string defaultVariableName)
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x1254410", Offset = "0x1254410", VA = "0x1254410")]
		public bool GetVariable(PlayMakerFsmVariableTarget variableTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x125455C", Offset = "0x125455C", VA = "0x125455C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x1254540", Offset = "0x1254540", VA = "0x1254540")]
		public static VariableType GetTypeFromChoice(VariableSelectionChoice choice)
		{
			return default(VariableType);
		}
	}
	[Token(Token = "0x2000527")]
	public enum ProxyFsmVariableTarget
	{
		[Token(Token = "0x4001720")]
		Owner,
		[Token(Token = "0x4001721")]
		GameObject,
		[Token(Token = "0x4001722")]
		GlobalVariable,
		[Token(Token = "0x4001723")]
		FsmComponent
	}
	[Serializable]
	[Token(Token = "0x2000528")]
	public class PlayMakerFsmVariableTarget
	{
		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ProxyFsmVariableTarget variableTarget;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string fsmName;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayMakerFSM _fsmComponent;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FsmVariables _fsmVariables;

		[NonSerialized]
		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _initialized;

		[Token(Token = "0x17000358")]
		public bool isTargetAvailable
		{
			[Token(Token = "0x6001B92")]
			[Address(RVA = "0x12546A0", Offset = "0x12546A0", VA = "0x12546A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000359")]
		public FsmVariables FsmVariables
		{
			[Token(Token = "0x6001B93")]
			[Address(RVA = "0x1254510", Offset = "0x1254510", VA = "0x1254510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035A")]
		public PlayMakerFSM fsmComponent
		{
			[Token(Token = "0x6001B94")]
			[Address(RVA = "0x1254960", Offset = "0x1254960", VA = "0x1254960")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B95")]
			[Address(RVA = "0x125497C", Offset = "0x125497C", VA = "0x125497C")]
			set
			{
			}
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x1254984", Offset = "0x1254984", VA = "0x1254984")]
		public PlayMakerFsmVariableTarget()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x125498C", Offset = "0x125498C", VA = "0x125498C")]
		public PlayMakerFsmVariableTarget(ProxyFsmVariableTarget target)
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x12546D8", Offset = "0x12546D8", VA = "0x12546D8")]
		public void Initialize(bool forceRefresh = false)
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x12549B4", Offset = "0x12549B4", VA = "0x12549B4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000529")]
	public class LinkerData : ScriptableObject
	{
		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool debug;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LinkContentUpdateDone;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextAsset Asset;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string AssetPath;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LinkerData self;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<string, List<string>> linkerEntries;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LinkerData _instance_;

		[Token(Token = "0x1700035B")]
		public static bool DebugAll
		{
			[Token(Token = "0x6001B9A")]
			[Address(RVA = "0x1254A30", Offset = "0x1254A30", VA = "0x1254A30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700035C")]
		public static LinkerData instance
		{
			[Token(Token = "0x6001B9B")]
			[Address(RVA = "0x1254ABC", Offset = "0x1254ABC", VA = "0x1254ABC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B9C")]
			[Address(RVA = "0x1254B5C", Offset = "0x1254B5C", VA = "0x1254B5C")]
			set
			{
			}
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x1254BB4", Offset = "0x1254BB4", VA = "0x1254BB4")]
		public static void RegisterClassDependancy(string assemblyName, string typeName)
		{
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x1254C94", Offset = "0x1254C94", VA = "0x1254C94")]
		public void RegisterLinkerEntry(string assemblyName, string typeName)
		{
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0x1254F90", Offset = "0x1254F90", VA = "0x1254F90")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x1254FF8", Offset = "0x1254FF8", VA = "0x1254FF8")]
		public LinkerData()
		{
		}
	}
	[Token(Token = "0x200052A")]
	public class PlayMakerEventProxy : MonoBehaviour
	{
		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayMakerEventTarget eventTarget;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[EventTargetVariable("eventTarget")]
		public PlayMakerEvent fsmEvent;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool debug;

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x1255088", Offset = "0x1255088", VA = "0x1255088")]
		protected void SendPlayMakerEvent()
		{
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x12551E0", Offset = "0x12551E0", VA = "0x12551E0")]
		public PlayMakerEventProxy()
		{
		}
	}
}
namespace HutongGames.PlayMaker.Ecosystem.utils
{
	[Token(Token = "0x200052B")]
	public class Comment : MonoBehaviour
	{
		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Text;

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x1255260", Offset = "0x1255260", VA = "0x1255260")]
		public Comment()
		{
		}
	}
}
namespace HutongGames.PlayMaker.Actions
{
	[Token(Token = "0x200052C")]
	[ActionCategory("Animator")]
	[Tooltip("Returns true if a transform is controlled by the Animator. Can also send events")]
	public class GetAnimatorIsControlled : FsmStateAction
	{
		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The GameObject transform to check for control.")]
		public FsmGameObject transform;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if automatic matching is active")]
		public FsmBool isControlled;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event send if the transform is controlled")]
		public FsmEvent isControlledEvent;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event send if the transform is not controlled")]
		public FsmEvent isNotControlledEvent;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform _transform;

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0x1255268", Offset = "0x1255268", VA = "0x1255268", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x12552C0", Offset = "0x12552C0", VA = "0x12552C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x1255410", Offset = "0x1255410", VA = "0x1255410")]
		private void DoCheckIsControlled()
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x12554A4", Offset = "0x12554A4", VA = "0x12554A4")]
		public GetAnimatorIsControlled()
		{
		}
	}
	[Token(Token = "0x200052D")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1033")]
	[ActionCategory("Animator")]
	[Tooltip("Follow a target")]
	public class AnimatorFollow : FsmStateAction
	{
		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The GameObject. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Game Object to target.")]
		[RequiredField]
		public FsmGameObject target;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The minimum distance to follow.")]
		public FsmFloat minimumDistance;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The damping for following up.")]
		public FsmFloat speedDampTime;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The damping for turning.")]
		public FsmFloat directionDampTime;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject _go;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator avatar;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private CharacterController controller;

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x12554AC", Offset = "0x12554AC", VA = "0x12554AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0x1255534", Offset = "0x1255534", VA = "0x1255534", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0x1255744", Offset = "0x1255744", VA = "0x1255744", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0x1255C10", Offset = "0x1255C10", VA = "0x1255C10", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x1255B9C", Offset = "0x1255B9C", VA = "0x1255B9C")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0x1255CE4", Offset = "0x1255CE4", VA = "0x1255CE4")]
		public AnimatorFollow()
		{
		}
	}
	[Token(Token = "0x200052E")]
	[Tooltip("Tests if the value of a Float variable changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	[ActionCategory(ActionCategory.Logic)]
	public class FloatWithinRange : FsmStateAction
	{
		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Float variable to check if is in range.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The minimum range.")]
		[RequiredField]
		public FsmFloat minRange;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The maximum range.")]
		public FsmFloat maxRange;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if the float variable is in range.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x1255CEC", Offset = "0x1255CEC", VA = "0x1255CEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x1255D28", Offset = "0x1255D28", VA = "0x1255D28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0x1255DE8", Offset = "0x1255DE8", VA = "0x1255DE8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x1255D54", Offset = "0x1255D54", VA = "0x1255D54")]
		private void UpdateResult()
		{
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0x1255DEC", Offset = "0x1255DEC", VA = "0x1255DEC")]
		public FloatWithinRange()
		{
		}
	}
	[Token(Token = "0x200052F")]
	[ActionCategory(ActionCategory.Renderer)]
	[Tooltip("Set a particular position of a lineRenderer")]
	public class SetLineRendererPosition : FsmStateAction
	{
		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Setup")]
		[RequiredField]
		[Tooltip("The GameObject with the LineRenderer component.")]
		[CheckForComponent(typeof(LineRenderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index")]
		[RequiredField]
		public FsmInt index;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The Position")]
		public FsmVector3 position;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public PlayMakerActionsUtils.EveryFrameUpdateSelector updateType;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private LineRenderer _lr;

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0x1255DF4", Offset = "0x1255DF4", VA = "0x1255DF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0x1255E28", Offset = "0x1255E28", VA = "0x1255E28", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0x1255E80", Offset = "0x1255E80", VA = "0x1255E80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x1255FE4", Offset = "0x1255FE4", VA = "0x1255FE4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0x1256020", Offset = "0x1256020", VA = "0x1256020", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x1255EB8", Offset = "0x1255EB8", VA = "0x1255EB8")]
		private void Execute()
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x125605C", Offset = "0x125605C", VA = "0x125605C")]
		public SetLineRendererPosition()
		{
		}
	}
	[Token(Token = "0x2000530")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets properties on the last event that caused a state change. Use Set Event Properties to define these values when sending events")]
	public class GetEventProperties : FsmStateAction
	{
		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Event Properties", "Key", "Data")]
		public FsmString[] keys;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		public FsmVar[] datas;

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0x1256064", Offset = "0x1256064", VA = "0x1256064", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0x12560F4", Offset = "0x12560F4", VA = "0x12560F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0x12563F4", Offset = "0x12563F4", VA = "0x12563F4")]
		public GetEventProperties()
		{
		}
	}
	[Token(Token = "0x2000531")]
	[Tooltip("Sets Event Data before sending an event. Get the Event Data, Get Event Properties action.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetEventProperties : FsmStateAction
	{
		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Event Properties", "Key", "Data")]
		public FsmString[] keys;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmVar[] datas;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, object> properties;

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0x12563FC", Offset = "0x12563FC", VA = "0x12563FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0x125648C", Offset = "0x125648C", VA = "0x125648C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0x12565E8", Offset = "0x12565E8", VA = "0x12565E8")]
		public SetEventProperties()
		{
		}
	}
	[Token(Token = "0x2000532")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Animates the value of a Color Variable using an Animation Curve.")]
	public class AnimateColor : AnimateFsmAction
	{
		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The Color Variable to animate.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmColor colorVariable;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("The curve used to animate the red value.")]
		public FsmAnimationCurve curveR;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the red channel.")]
		public Calculation calculationR;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[RequiredField]
		[Tooltip("The curve used to animate the green value.")]
		public FsmAnimationCurve curveG;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the green channel.")]
		public Calculation calculationG;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The curve used to animate the blue value.")]
		[RequiredField]
		public FsmAnimationCurve curveB;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the blue channel.")]
		public Calculation calculationB;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[RequiredField]
		[Tooltip("The curve used to animate the alpha value.")]
		public FsmAnimationCurve curveA;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to the alpha channel.")]
		public Calculation calculationA;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0x12565F0", Offset = "0x12565F0", VA = "0x12565F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0x1256870", Offset = "0x1256870", VA = "0x1256870", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0x12571E8", Offset = "0x12571E8", VA = "0x12571E8")]
		private void UpdateVariableValue()
		{
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0x1257254", Offset = "0x1257254", VA = "0x1257254", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0x1257304", Offset = "0x1257304", VA = "0x1257304")]
		public AnimateColor()
		{
		}
	}
	[Token(Token = "0x2000533")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Animates the value of a Float Variable using an Animation Curve.")]
	public class AnimateFloat : FsmStateAction
	{
		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The animation curve to use.")]
		public FsmAnimationCurve animCurve;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The float variable to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentTime;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float endTime;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool looping;

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x1257314", Offset = "0x1257314", VA = "0x1257314", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x1257354", Offset = "0x1257354", VA = "0x1257354", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0x1257474", Offset = "0x1257474", VA = "0x1257474", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x1257534", Offset = "0x1257534", VA = "0x1257534")]
		public AnimateFloat()
		{
		}
	}
	[Token(Token = "0x2000534")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Animates the value of a Float Variable using an Animation Curve.")]
	public class AnimateFloatV2 : AnimateFsmAction
	{
		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[RequiredField]
		[Tooltip("The float variable to animate.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The animation curve to use.")]
		[RequiredField]
		public FsmAnimationCurve animCurve;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to floatVariable")]
		public Calculation calculation;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x125753C", Offset = "0x125753C", VA = "0x125753C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0x12575B4", Offset = "0x12575B4", VA = "0x12575B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0x1257754", Offset = "0x1257754", VA = "0x1257754", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0x1257758", Offset = "0x1257758", VA = "0x1257758", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0x1257830", Offset = "0x1257830", VA = "0x1257830")]
		public AnimateFloatV2()
		{
		}
	}
	[Token(Token = "0x2000535")]
	public abstract class AnimateFsmAction : FsmStateAction
	{
		[Token(Token = "0x2000536")]
		public enum Calculation
		{
			[Token(Token = "0x4001783")]
			None,
			[Token(Token = "0x4001784")]
			SetValue,
			[Token(Token = "0x4001785")]
			AddToValue,
			[Token(Token = "0x4001786")]
			SubtractFromValue,
			[Token(Token = "0x4001787")]
			SubtractValueFromCurve,
			[Token(Token = "0x4001788")]
			MultiplyValue,
			[Token(Token = "0x4001789")]
			DivideValue,
			[Token(Token = "0x400178A")]
			DivideCurveByValue
		}

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Define animation time,\u00a0scaling the curve to fit.")]
		public FsmFloat time;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If you define speed, your animation will speed up or slow down.")]
		public FsmFloat speed;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Delayed animation start.")]
		public FsmFloat delay;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Animation curve start from any time. If IgnoreCurveOffset is true the animation starts right after the state become entered.")]
		public FsmBool ignoreCurveOffset;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] endTimes;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float lastTime;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float deltaTime;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float delayTime;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float[] keyOffsets;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected AnimationCurve[] curves;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Calculation[] calculations;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float[] resultFloats;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float[] fromFloats;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float[] toFloats;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool finishAction;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool isRunning;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		protected bool looping;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		private bool start;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float largestEndTime;

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0x1256668", Offset = "0x1256668", VA = "0x1256668", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x1256C40", Offset = "0x1256C40", VA = "0x1256C40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x1256CBC", Offset = "0x1256CBC", VA = "0x1256CBC")]
		protected void Init()
		{
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x12572CC", Offset = "0x12572CC", VA = "0x12572CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x1258274", Offset = "0x1258274", VA = "0x1258274")]
		private void CheckStart()
		{
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x1258314", Offset = "0x1258314", VA = "0x1258314")]
		private void UpdateTime()
		{
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x1257838", Offset = "0x1257838", VA = "0x1257838")]
		public void UpdateAnimation()
		{
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x1258404", Offset = "0x1258404", VA = "0x1258404")]
		private void CheckFinished()
		{
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x125730C", Offset = "0x125730C", VA = "0x125730C")]
		protected AnimateFsmAction()
		{
		}
	}
	[Token(Token = "0x2000537")]
	[ActionCategory("AnimateVariables")]
	[Tooltip("Animates the value of a Rect Variable using an Animation Curve.")]
	public class AnimateRect : AnimateFsmAction
	{
		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Rect Variable to animate.")]
		public FsmRect rectVariable;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("Curve to use for the X value.")]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.x.")]
		public Calculation calculationX;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Curve to use for the Y value.")]
		[RequiredField]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.y.")]
		public Calculation calculationY;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[RequiredField]
		[Tooltip("Curve to use for the Width.")]
		public FsmAnimationCurve curveW;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.width.")]
		public Calculation calculationW;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[RequiredField]
		[Tooltip("Curve to use for the Height.")]
		public FsmAnimationCurve curveH;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to rectVariable.height.")]
		public Calculation calculationH;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x1258494", Offset = "0x1258494", VA = "0x1258494", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x125850C", Offset = "0x125850C", VA = "0x125850C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x1258918", Offset = "0x1258918", VA = "0x1258918")]
		private void UpdateVariableValue()
		{
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x125899C", Offset = "0x125899C", VA = "0x125899C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x1258A14", Offset = "0x1258A14", VA = "0x1258A14")]
		public AnimateRect()
		{
		}
	}
	[Token(Token = "0x2000538")]
	[Tooltip("Animates the value of a Vector3 Variable using an Animation Curve.")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class AnimateVector3 : AnimateFsmAction
	{
		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 Variable to animate.")]
		public FsmVector3 vectorVariable;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[Tooltip("Curve to use for the X value.")]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to vectorVariable.x.")]
		public Calculation calculationX;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Curve to use for the Y value.")]
		[RequiredField]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to vectorVariable.y.")]
		public Calculation calculationY;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Curve to use for the Z value.")]
		[RequiredField]
		public FsmAnimationCurve curveZ;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to vectorVariable.z.")]
		public Calculation calculationZ;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x1258A1C", Offset = "0x1258A1C", VA = "0x1258A1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x1258A94", Offset = "0x1258A94", VA = "0x1258A94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x1258DDC", Offset = "0x1258DDC", VA = "0x1258DDC")]
		private void UpdateVariableValue()
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x1258E40", Offset = "0x1258E40", VA = "0x1258E40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x1258EB8", Offset = "0x1258EB8", VA = "0x1258EB8")]
		public AnimateVector3()
		{
		}
	}
	[Token(Token = "0x2000539")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Animates the value of a Color Variable FROM-TO with assistance of Deformation Curves.")]
	public class CurveColor : CurveFsmAction
	{
		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Color variable to animate.")]
		public FsmColor colorVariable;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[RequiredField]
		[Tooltip("Animate from this color.")]
		public FsmColor fromValue;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[RequiredField]
		[Tooltip("Animate to this color.")]
		public FsmColor toValue;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RequiredField]
		[Tooltip("The curve used to animate the red value.")]
		public FsmAnimationCurve curveR;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Red and toValue.Rec.")]
		public Calculation calculationR;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[RequiredField]
		[Tooltip("The curve used to animate the green value.")]
		public FsmAnimationCurve curveG;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Green and toValue.Green.")]
		public Calculation calculationG;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("The curve used to animate the blue value.")]
		[RequiredField]
		public FsmAnimationCurve curveB;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Blue and toValue.Blue.")]
		public Calculation calculationB;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("The curve used to animate the alpha value.")]
		[RequiredField]
		public FsmAnimationCurve curveA;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.Alpha and toValue.Alpha.")]
		public Calculation calculationA;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Color clr;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x1258EC0", Offset = "0x1258EC0", VA = "0x1258EC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x12591C0", Offset = "0x12591C0", VA = "0x12591C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x1259C6C", Offset = "0x1259C6C", VA = "0x1259C6C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x1259C70", Offset = "0x1259C70", VA = "0x1259C70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x125ADD4", Offset = "0x125ADD4", VA = "0x125ADD4")]
		public CurveColor()
		{
		}
	}
	[Token(Token = "0x200053A")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Animates the value of a Float Variable FROM-TO with assistance of Deformation Curve.")]
	public class CurveFloat : CurveFsmAction
	{
		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to animate.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[RequiredField]
		[Tooltip("Animate from this value.")]
		public FsmFloat fromValue;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Animate to this value.")]
		[RequiredField]
		public FsmFloat toValue;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RequiredField]
		[Tooltip("The curve to use when animating.")]
		public FsmAnimationCurve animCurve;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue and toValue.")]
		public Calculation calculation;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x125ADE4", Offset = "0x125ADE4", VA = "0x125ADE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x125AEC0", Offset = "0x125AEC0", VA = "0x125AEC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x125B0BC", Offset = "0x125B0BC", VA = "0x125B0BC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x125B0C0", Offset = "0x125B0C0", VA = "0x125B0C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x125B198", Offset = "0x125B198", VA = "0x125B198")]
		public CurveFloat()
		{
		}
	}
	[Token(Token = "0x200053B")]
	[Tooltip("Animate base action - DON'T USE IT!")]
	public abstract class CurveFsmAction : FsmStateAction
	{
		[Token(Token = "0x200053C")]
		public enum Calculation
		{
			[Token(Token = "0x40017C9")]
			None,
			[Token(Token = "0x40017CA")]
			AddToValue,
			[Token(Token = "0x40017CB")]
			SubtractFromValue,
			[Token(Token = "0x40017CC")]
			SubtractValueFromCurve,
			[Token(Token = "0x40017CD")]
			MultiplyValue,
			[Token(Token = "0x40017CE")]
			DivideValue,
			[Token(Token = "0x40017CF")]
			DivideCurveByValue
		}

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Define animation time, scaling the curve to fit.")]
		public FsmFloat time;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If you define speed, your animation will speed up or slow down.")]
		public FsmFloat speed;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Delayed animation start.")]
		public FsmFloat delay;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Animation curve start from any time. If IgnoreCurveOffset is true the animation starts right after the state become entered.")]
		public FsmBool ignoreCurveOffset;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float[] endTimes;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float lastTime;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float deltaTime;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float delayTime;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float[] keyOffsets;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected AnimationCurve[] curves;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Calculation[] calculations;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float[] resultFloats;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float[] fromFloats;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float[] toFloats;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float[] distances;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected bool finishAction;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool isRunning;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool looping;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		private bool start;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float largestEndTime;

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x1258F9C", Offset = "0x1258F9C", VA = "0x1258F9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x125962C", Offset = "0x125962C", VA = "0x125962C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x12596A8", Offset = "0x12596A8", VA = "0x12596A8")]
		protected void Init()
		{
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x1259DA8", Offset = "0x1259DA8", VA = "0x1259DA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x125ADDC", Offset = "0x125ADDC", VA = "0x125ADDC")]
		protected CurveFsmAction()
		{
		}
	}
	[Token(Token = "0x200053D")]
	[ActionCategory("AnimateVariables")]
	[Tooltip("Animates the value of a Rect Variable FROM-TO with assistance of Deformation Curves.")]
	public class CurveRect : CurveFsmAction
	{
		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Rect Variable to animate.")]
		public FsmRect rectVariable;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[RequiredField]
		[Tooltip("The Rect to animate from.")]
		public FsmRect fromValue;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[RequiredField]
		[Tooltip("The Rect to animate to.")]
		public FsmRect toValue;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Curve that controls the X value.")]
		[RequiredField]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.x and toValue.x.")]
		public Calculation calculationX;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[RequiredField]
		[Tooltip("Curve that controls the Y value.")]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.y and toValue.y.")]
		public Calculation calculationY;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[RequiredField]
		[Tooltip("Curve that controls the Width.")]
		public FsmAnimationCurve curveW;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.width and toValue.width.")]
		public Calculation calculationW;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Curve that controls the Height.")]
		[RequiredField]
		public FsmAnimationCurve curveH;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.height and toValue.height.")]
		public Calculation calculationH;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Rect rct;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x125B1A0", Offset = "0x125B1A0", VA = "0x125B1A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x125B27C", Offset = "0x125B27C", VA = "0x125B27C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x125B770", Offset = "0x125B770", VA = "0x125B770", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0x125B774", Offset = "0x125B774", VA = "0x125B774", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x125B8CC", Offset = "0x125B8CC", VA = "0x125B8CC")]
		public CurveRect()
		{
		}
	}
	[Token(Token = "0x200053E")]
	[Tooltip("Animates the value of a Vector3 Variable FROM-TO with assistance of Deformation Curves.")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class CurveVector3 : CurveFsmAction
	{
		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The Vector3 variable to animate.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 vectorVariable;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Animate from this value.")]
		[RequiredField]
		public FsmVector3 fromValue;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Animate to this value.")]
		[RequiredField]
		public FsmVector3 toValue;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RequiredField]
		[Tooltip("Curve that controls the X value.")]
		public FsmAnimationCurve curveX;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.x and toValue.x.")]
		public Calculation calculationX;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[RequiredField]
		[Tooltip("Curve that controls the Y value.")]
		public FsmAnimationCurve curveY;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.y and toValue.y.")]
		public Calculation calculationY;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[RequiredField]
		[Tooltip("Curve that controls the Z value.")]
		public FsmAnimationCurve curveZ;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Calculation lets you set a type of curve deformation that will be applied to otherwise linear move between fromValue.z and toValue.z.")]
		public Calculation calculationZ;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 vct;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x125B8D4", Offset = "0x125B8D4", VA = "0x125B8D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x125B9B0", Offset = "0x125B9B0", VA = "0x125B9B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x125BD64", Offset = "0x125BD64", VA = "0x125BD64", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x125BD68", Offset = "0x125BD68", VA = "0x125BD68", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x125BE88", Offset = "0x125BE88", VA = "0x125BE88")]
		public CurveVector3()
		{
		}
	}
	[Token(Token = "0x200053F")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Easing Animation - Color")]
	public class EaseColor : EaseFsmAction
	{
		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[RequiredField]
		[Tooltip("The Color value to ease from.")]
		public FsmColor fromValue;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("The Color value to ease to.")]
		public FsmColor toValue;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Store the result in a Color Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmColor colorVariable;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x125BE90", Offset = "0x125BE90", VA = "0x125BE90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x125C090", Offset = "0x125C090", VA = "0x125C090", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x125C2E8", Offset = "0x125C2E8", VA = "0x125C2E8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x125C2F0", Offset = "0x125C2F0", VA = "0x125C2F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x125C734", Offset = "0x125C734", VA = "0x125C734")]
		public EaseColor()
		{
		}
	}
	[Token(Token = "0x2000540")]
	[Tooltip("Easing Animation - Float")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	public class EaseFloat : EaseFsmAction
	{
		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The float value to ease from.")]
		[RequiredField]
		public FsmFloat fromValue;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("The float value to ease to.")]
		public FsmFloat toValue;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Store the result in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x125C7DC", Offset = "0x125C7DC", VA = "0x125C7DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x125C824", Offset = "0x125C824", VA = "0x125C824", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x125C970", Offset = "0x125C970", VA = "0x125C970", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x125C974", Offset = "0x125C974", VA = "0x125C974", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x125CA7C", Offset = "0x125CA7C", VA = "0x125CA7C")]
		public EaseFloat()
		{
		}
	}
	[Token(Token = "0x2000541")]
	[Tooltip("Ease base action - don't use!")]
	public abstract class EaseFsmAction : FsmStateAction
	{
		[Token(Token = "0x2000542")]
		protected delegate float EasingFunction(float start, float end, float value);

		[Token(Token = "0x2000543")]
		public enum EaseType
		{
			[Token(Token = "0x4001806")]
			easeInQuad,
			[Token(Token = "0x4001807")]
			easeOutQuad,
			[Token(Token = "0x4001808")]
			easeInOutQuad,
			[Token(Token = "0x4001809")]
			easeInCubic,
			[Token(Token = "0x400180A")]
			easeOutCubic,
			[Token(Token = "0x400180B")]
			easeInOutCubic,
			[Token(Token = "0x400180C")]
			easeInQuart,
			[Token(Token = "0x400180D")]
			easeOutQuart,
			[Token(Token = "0x400180E")]
			easeInOutQuart,
			[Token(Token = "0x400180F")]
			easeInQuint,
			[Token(Token = "0x4001810")]
			easeOutQuint,
			[Token(Token = "0x4001811")]
			easeInOutQuint,
			[Token(Token = "0x4001812")]
			easeInSine,
			[Token(Token = "0x4001813")]
			easeOutSine,
			[Token(Token = "0x4001814")]
			easeInOutSine,
			[Token(Token = "0x4001815")]
			easeInExpo,
			[Token(Token = "0x4001816")]
			easeOutExpo,
			[Token(Token = "0x4001817")]
			easeInOutExpo,
			[Token(Token = "0x4001818")]
			easeInCirc,
			[Token(Token = "0x4001819")]
			easeOutCirc,
			[Token(Token = "0x400181A")]
			easeInOutCirc,
			[Token(Token = "0x400181B")]
			linear,
			[Token(Token = "0x400181C")]
			spring,
			[Token(Token = "0x400181D")]
			bounce,
			[Token(Token = "0x400181E")]
			easeInBack,
			[Token(Token = "0x400181F")]
			easeOutBack,
			[Token(Token = "0x4001820")]
			easeInOutBack,
			[Token(Token = "0x4001821")]
			elastic,
			[Token(Token = "0x4001822")]
			punch
		}

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("How long the ease should take in seconds")]
		public FsmFloat time;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optionally, use speed instead of time.")]
		public FsmFloat speed;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional delay in seconds before starting to ease.")]
		public FsmFloat delay;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The easing function to use.")]
		public EaseType easeType;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Reverse the ease.")]
		public FsmBool reverse;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optionally send an Event when the animation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected EasingFunction ease;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float runningTime;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float lastTime;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float startTime;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float deltaTime;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float delayTime;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected float percentage;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float[] fromFloats;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected float[] toFloats;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float[] resultFloats;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected bool finishAction;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		protected bool start;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		protected bool finished;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
		protected bool isRunning;

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x125BED8", Offset = "0x125BED8", VA = "0x125BED8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x125C230", Offset = "0x125C230", VA = "0x125C230", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x125C2EC", Offset = "0x125C2EC", VA = "0x125C2EC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x125C4E0", Offset = "0x125C4E0", VA = "0x125C4E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x125CF00", Offset = "0x125CF00", VA = "0x125CF00")]
		protected void UpdatePercentage()
		{
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x125CA80", Offset = "0x125CA80", VA = "0x125CA80")]
		protected void SetEasingFunction()
		{
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x125D114", Offset = "0x125D114", VA = "0x125D114")]
		protected float linear(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x125D138", Offset = "0x125D138", VA = "0x125D138")]
		protected float clerp(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x125D19C", Offset = "0x125D19C", VA = "0x125D19C")]
		protected float spring(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x125D24C", Offset = "0x125D24C", VA = "0x125D24C")]
		protected float easeInQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0x125D260", Offset = "0x125D260", VA = "0x125D260")]
		protected float easeOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x125D27C", Offset = "0x125D27C", VA = "0x125D27C")]
		protected float easeInOutQuad(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x125D2D0", Offset = "0x125D2D0", VA = "0x125D2D0")]
		protected float easeInCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x125D2E8", Offset = "0x125D2E8", VA = "0x125D2E8")]
		protected float easeOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x125D310", Offset = "0x125D310", VA = "0x125D310")]
		protected float easeInOutCubic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x125D368", Offset = "0x125D368", VA = "0x125D368")]
		protected float easeInQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x125D384", Offset = "0x125D384", VA = "0x125D384")]
		protected float easeOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x125D3AC", Offset = "0x125D3AC", VA = "0x125D3AC")]
		protected float easeInOutQuart(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x125D408", Offset = "0x125D408", VA = "0x125D408")]
		protected float easeInQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x125D428", Offset = "0x125D428", VA = "0x125D428")]
		protected float easeOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0x125D458", Offset = "0x125D458", VA = "0x125D458")]
		protected float easeInOutQuint(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x125D4C0", Offset = "0x125D4C0", VA = "0x125D4C0")]
		protected float easeInSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x125D4F8", Offset = "0x125D4F8", VA = "0x125D4F8")]
		protected float easeOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x125D52C", Offset = "0x125D52C", VA = "0x125D52C")]
		protected float easeInOutSine(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x125D570", Offset = "0x125D570", VA = "0x125D570")]
		protected float easeInExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x125D5A8", Offset = "0x125D5A8", VA = "0x125D5A8")]
		protected float easeOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x125D5E0", Offset = "0x125D5E0", VA = "0x125D5E0")]
		protected float easeInOutExpo(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x125D650", Offset = "0x125D650", VA = "0x125D650")]
		protected float easeInCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x125D678", Offset = "0x125D678", VA = "0x125D678")]
		protected float easeOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0x125D6A0", Offset = "0x125D6A0", VA = "0x125D6A0")]
		protected float easeInOutCirc(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0x125D6F4", Offset = "0x125D6F4", VA = "0x125D6F4")]
		protected float bounce(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0x125D7BC", Offset = "0x125D7BC", VA = "0x125D7BC")]
		protected float easeInBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0x125D7EC", Offset = "0x125D7EC", VA = "0x125D7EC")]
		protected float easeOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0x125D82C", Offset = "0x125D82C", VA = "0x125D82C")]
		protected float easeInOutBack(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0x125D8B0", Offset = "0x125D8B0", VA = "0x125D8B0")]
		protected float punch(float amplitude, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x125D920", Offset = "0x125D920", VA = "0x125D920")]
		protected float elastic(float start, float end, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x125C738", Offset = "0x125C738", VA = "0x125C738")]
		protected EaseFsmAction()
		{
		}
	}
	[Token(Token = "0x2000544")]
	[ActionCategory("AnimateVariables")]
	[Tooltip("Easing Animation - Rect.")]
	public class EaseRect : EaseFsmAction
	{
		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[RequiredField]
		[Tooltip("Ease from this Rect value.")]
		public FsmRect fromValue;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("Ease to this Rect value.")]
		public FsmRect toValue;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current value in a Rect Variable.")]
		public FsmRect rectVariable;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0x125DA9C", Offset = "0x125DA9C", VA = "0x125DA9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x125DAE4", Offset = "0x125DAE4", VA = "0x125DAE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x125DD88", Offset = "0x125DD88", VA = "0x125DD88", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x125DD8C", Offset = "0x125DD8C", VA = "0x125DD8C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x125E00C", Offset = "0x125E00C", VA = "0x125E00C")]
		public EaseRect()
		{
		}
	}
	[Token(Token = "0x2000545")]
	[ActionCategory(ActionCategory.AnimateVariables)]
	[Tooltip("Easing Animation - Vector3")]
	public class EaseVector3 : EaseFsmAction
	{
		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The Vector3 value to ease from.")]
		[RequiredField]
		public FsmVector3 fromValue;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("The Vector3 value to ease to.")]
		public FsmVector3 toValue;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Vector3 Variable.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool finishInNextStep;

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x125E010", Offset = "0x125E010", VA = "0x125E010", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x125E05C", Offset = "0x125E05C", VA = "0x125E05C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x125E250", Offset = "0x125E250", VA = "0x125E250", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x125E258", Offset = "0x125E258", VA = "0x125E258", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x125E418", Offset = "0x125E418", VA = "0x125E418")]
		public EaseVector3()
		{
		}
	}
	[Token(Token = "0x2000546")]
	[Tooltip("Adds an Animation Clip to a Game Object. Optionally trim the clip.")]
	[ActionCategory(ActionCategory.Animation)]
	public class AddAnimationClip : FsmStateAction
	{
		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		[Tooltip("The Game Object to add the Animation Clip to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The animation clip to add. NOTE: Make sure the clip is compatible with the object's hierarchy.")]
		[ObjectType(typeof(AnimationClip))]
		[RequiredField]
		public FsmObject animationClip;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optionally give the animation a new name. Can be used by other Animation actions.")]
		[RequiredField]
		public FsmString animationName;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Trimming")]
		[Tooltip("Optionally trim the animation by specifying a first and last frame.")]
		public FsmInt firstFrame;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the last frame of the trimmed animation. 0 means no trimming.")]
		public FsmInt lastFrame;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Add a frame at the end of the trimmed clip that's the same as the first frame so it loops nicely.")]
		public FsmBool addLoopFrame;

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x125E420", Offset = "0x125E420", VA = "0x125E420", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x125E4EC", Offset = "0x125E4EC", VA = "0x125E4EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x125E508", Offset = "0x125E508", VA = "0x125E508")]
		private void DoAddAnimationClip()
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x125E708", Offset = "0x125E708", VA = "0x125E708")]
		public AddAnimationClip()
		{
		}
	}
	[Token(Token = "0x2000547")]
	[Tooltip("Play an animation on a subset of the hierarchy. E.g., A waving animation on the upper body.")]
	[ActionCategory(ActionCategory.Animation)]
	public class AddMixingTransform : BaseAnimationAction
	{
		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The GameObject playing the animation.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The name of the animation to mix. NOTE: The animation should already be added to the Animation Component on the GameObject.")]
		public FsmString animationName;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The mixing transform. E.g., root/upper_body/left_shoulder")]
		public FsmString transform;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If recursive is true all children of the mix transform will also be animated.")]
		public FsmBool recursive;

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x125E710", Offset = "0x125E710", VA = "0x125E710", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x125E7B0", Offset = "0x125E7B0", VA = "0x125E7B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x125E7CC", Offset = "0x125E7CC", VA = "0x125E7CC")]
		private void DoAddMixingTransform()
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x125E910", Offset = "0x125E910", VA = "0x125E910")]
		public AddMixingTransform()
		{
		}
	}
	[Token(Token = "0x2000548")]
	[Tooltip("Applies animation settings to the specified animation. Note: Settings are applied once, on entering the state, not continuously. Use\u00a0{{Set Animation Speed}},\u00a0{{Set Animation Time}}\u00a0etc. if you need to update those animation\u00a0settings every frame.\\nSee\u00a0<a href=\"https://docs.unity3d.com/Manual/AnimationScripting.html\" rel =\"nofollow\" target=\"_blank\">Unity Animation Docs</a>\u00a0for detailed descriptions of Wrap Mode, Blend Mode, Speed and Layer settings.")]
	[ActionCategory(ActionCategory.Animation)]
	public class AnimationSettings : BaseAnimationAction
	{
		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("A GameObject with an Animation Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation. Use the browse button to select from animations on the Game Object (if available).")]
		[UIHint(UIHint.Animation)]
		[RequiredField]
		public FsmString animName;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set how the animation wraps (Loop, PingPong etc.). NOTE: Because of the way WrapMode is defined by Unity you cannot select Once, but Clamp is the same as Once.")]
		public WrapMode wrapMode;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("How the animation is blended with other animations on the Game Object.")]
		public AnimationBlendMode blendMode;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Speed up or slow down the animation. 1 is normal speed, 0.5 is half speed...")]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat speed;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("You can play animations on different layers to combine them into a final animation. See the Unity Animation docs for more details.")]
		public FsmInt layer;

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x125E95C", Offset = "0x125E95C", VA = "0x125E95C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x125E9C8", Offset = "0x125E9C8", VA = "0x125E9C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x125E9E4", Offset = "0x125E9E4", VA = "0x125E9E4")]
		private void DoAnimationSettings()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x125EBAC", Offset = "0x125EBAC", VA = "0x125EBAC")]
		public AnimationSettings()
		{
		}
	}
	[Token(Token = "0x2000549")]
	public abstract class BaseAnimationAction : ComponentAction<Animation>
	{
		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x125EBB0", Offset = "0x125EBB0", VA = "0x125EBB0", Slot = "41")]
		public override void OnActionTargetInvoked(object targetObject)
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x125E914", Offset = "0x125E914", VA = "0x125E914")]
		protected BaseAnimationAction()
		{
		}
	}
	[Token(Token = "0x200054A")]
	[Tooltip("Blends an Animation towards a Target Weight over a specified Time.\nOptionally sends an Event when finished.")]
	[ActionCategory(ActionCategory.Animation)]
	public class BlendAnimation : BaseAnimationAction
	{
		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to animate.")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation to blend.")]
		public FsmString animName;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Target weight to blend to.")]
		public FsmFloat targetWeight;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Time it should take to reach the target weight (seconds).")]
		[RequiredField]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat time;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send when the blend has finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private DelayedEvent delayedFinishEvent;

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0x125ECC4", Offset = "0x125ECC4", VA = "0x125ECC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x125ED38", Offset = "0x125ED38", VA = "0x125ED38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0x125EFA8", Offset = "0x125EFA8", VA = "0x125EFA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x125ED7C", Offset = "0x125ED7C", VA = "0x125ED7C")]
		private void DoBlendAnimation(GameObject go)
		{
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x125EFD8", Offset = "0x125EFD8", VA = "0x125EFD8")]
		public BlendAnimation()
		{
		}
	}
	[Token(Token = "0x200054B")]
	[Tooltip("Captures the current pose of a hierarchy as an animation clip.\n\nUseful to blend from an arbitrary pose (e.g. a rag-doll death) back to a known animation (e.g. idle).")]
	[ActionCategory(ActionCategory.Animation)]
	public class CapturePoseAsAnimationClip : FsmStateAction
	{
		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The GameObject root of the hierarchy to capture.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Capture position keys.")]
		public FsmBool position;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Capture rotation keys.")]
		public FsmBool rotation;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Capture scale keys.")]
		public FsmBool scale;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the result in an Object variable of type AnimationClip.")]
		[ObjectType(typeof(AnimationClip))]
		public FsmObject storeAnimationClip;

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x125EFDC", Offset = "0x125EFDC", VA = "0x125EFDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x125F058", Offset = "0x125F058", VA = "0x125F058", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x125F074", Offset = "0x125F074", VA = "0x125F074")]
		private void DoCaptureAnimationClip()
		{
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x125F42C", Offset = "0x125F42C", VA = "0x125F42C")]
		private void CaptureTransform(Transform transform, string path, AnimationClip clip)
		{
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x125F7E4", Offset = "0x125F7E4", VA = "0x125F7E4")]
		private void CapturePosition(Transform transform, string path, AnimationClip clip)
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x125F8C4", Offset = "0x125F8C4", VA = "0x125F8C4")]
		private void CaptureRotation(Transform transform, string path, AnimationClip clip)
		{
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x125F9D8", Offset = "0x125F9D8", VA = "0x125F9D8")]
		private void CaptureScale(Transform transform, string path, AnimationClip clip)
		{
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x125FAB8", Offset = "0x125FAB8", VA = "0x125FAB8")]
		private void SetConstantCurve(AnimationClip clip, string childPath, string propertyPath, float value)
		{
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x125FBA0", Offset = "0x125FBA0", VA = "0x125FBA0")]
		public CapturePoseAsAnimationClip()
		{
		}
	}
	[Token(Token = "0x200054C")]
	[Tooltip("Enables/Disables an Animation on a GameObject.\nAnimation time is paused while disabled. Animation must also have a non zero weight to play.")]
	[ActionCategory(ActionCategory.Animation)]
	public class EnableAnimation : BaseAnimationAction
	{
		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject playing the animation.")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Animation)]
		[RequiredField]
		[Tooltip("The name of the animation to enable/disable.")]
		public FsmString animName;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enable;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset the initial enabled state when exiting the state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AnimationState anim;

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x125FBA8", Offset = "0x125FBA8", VA = "0x125FBA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x125FC08", Offset = "0x125FC08", VA = "0x125FC08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x125FC44", Offset = "0x125FC44", VA = "0x125FC44")]
		private void DoEnableAnimation(GameObject go)
		{
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x125FD50", Offset = "0x125FD50", VA = "0x125FD50", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x125FDBC", Offset = "0x125FDBC", VA = "0x125FDBC")]
		public EnableAnimation()
		{
		}
	}
	[Token(Token = "0x200054D")]
	[Tooltip("Plays an Animation on a Game Object. You can add named animation clips to the object in the Unity editor, or with the Add Animation Clip action. NOTE: The game object must have an Animation component.")]
	[ActionCategory(ActionCategory.Animation)]
	public class PlayAnimation : BaseAnimationAction
	{
		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The Game Object to play the animation on. NOTE: Must have an Animation Component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation to play. Use the browse button to find animations on the specified Game Object.")]
		public FsmString animName;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Whether to stop all currently playing animations, or just the animations on the same layer as this animation.")]
		public PlayMode playMode;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time to cross-fade between animations (seconds).")]
		public FsmFloat blendTime;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send when the animation is finished playing. NOTE: Not sent with Loop or PingPong wrap modes!")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send when the animation loops. If you want to send this event to another FSM use Set Event Target. NOTE: This event is only sent with Loop and PingPong wrap modes.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Stop playing the animation when this state is exited.")]
		public bool stopOnExit;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AnimationState anim;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float prevAnimtTime;

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x125FDC0", Offset = "0x125FDC0", VA = "0x125FDC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0x125FE38", Offset = "0x125FE38", VA = "0x125FE38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0x125FE3C", Offset = "0x125FE3C", VA = "0x125FE3C")]
		private void DoPlayAnimation()
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0x1260040", Offset = "0x1260040", VA = "0x1260040", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x12601D8", Offset = "0x12601D8", VA = "0x12601D8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x12601E8", Offset = "0x12601E8", VA = "0x12601E8")]
		private void StopAnimation()
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x12602C4", Offset = "0x12602C4", VA = "0x12602C4")]
		public PlayAnimation()
		{
		}
	}
	[Token(Token = "0x200054E")]
	[Tooltip("Plays a Random Animation on a Game Object. You can set the relative weight of each animation to control how often they are selected.")]
	[ActionCategory(ActionCategory.Animation)]
	public class PlayRandomAnimation : BaseAnimationAction
	{
		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Game Object to play the animation on.")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Animation)]
		[CompoundArray("Animations", "Animation", "Weight")]
		[Tooltip("An array of animations to pick randomly from.")]
		public FsmString[] animations;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The relative probability of each animation being picked. E.g. a weight of 2 is twice a likely to be picked as a weight of 1.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat[] weights;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How to treat previously playing animations.")]
		public PlayMode playMode;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time taken to blend to this animation.")]
		public FsmFloat blendTime;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send when the animation is finished playing. NOTE: Not sent with Loop or PingPong wrap modes!")]
		public FsmEvent finishEvent;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send when the animation loops. If you want to send this event to another FSM use Set Event Target. NOTE: This event is only sent with Loop and PingPong wrap modes.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Stop playing the animation when this state is exited.")]
		public bool stopOnExit;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AnimationState anim;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float prevAnimtTime;

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x12602C8", Offset = "0x12602C8", VA = "0x12602C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0x12603B8", Offset = "0x12603B8", VA = "0x12603B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x12603BC", Offset = "0x12603BC", VA = "0x12603BC")]
		private void DoPlayRandomAnimation()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x1260430", Offset = "0x1260430", VA = "0x1260430")]
		private void DoPlayAnimation(string animName)
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0x12605EC", Offset = "0x12605EC", VA = "0x12605EC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0x1260784", Offset = "0x1260784", VA = "0x1260784", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x1260794", Offset = "0x1260794", VA = "0x1260794")]
		private void StopAnimation()
		{
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0x1260870", Offset = "0x1260870", VA = "0x1260870")]
		public PlayRandomAnimation()
		{
		}
	}
	[Token(Token = "0x200054F")]
	[Tooltip("Removes a mixing transform previously added with Add Mixing Transform. If transform has been added as recursive, then it will be removed as recursive. Once you remove all mixing transforms added to animation state all curves become animated again.")]
	[ActionCategory(ActionCategory.Animation)]
	public class RemoveMixingTransform : BaseAnimationAction
	{
		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		[Tooltip("The GameObject playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation.")]
		[RequiredField]
		public FsmString animationName;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The mixing transform to remove. E.g., root/upper_body/left_shoulder")]
		public FsmString transfrom;

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x1260874", Offset = "0x1260874", VA = "0x1260874", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x12608DC", Offset = "0x12608DC", VA = "0x12608DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x12608F8", Offset = "0x12608F8", VA = "0x12608F8")]
		private void DoRemoveMixingTransform()
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x1260A20", Offset = "0x1260A20", VA = "0x1260A20")]
		public RemoveMixingTransform()
		{
		}
	}
	[Token(Token = "0x2000550")]
	[Tooltip("Rewinds the named animation.")]
	[ActionCategory(ActionCategory.Animation)]
	public class RewindAnimation : BaseAnimationAction
	{
		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object playing the animation.")]
		[CheckForComponent(typeof(Animation))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation to rewind.")]
		[UIHint(UIHint.Animation)]
		public FsmString animName;

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x1260A24", Offset = "0x1260A24", VA = "0x1260A24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x1260A4C", Offset = "0x1260A4C", VA = "0x1260A4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x1260A68", Offset = "0x1260A68", VA = "0x1260A68")]
		private void DoRewindAnimation()
		{
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0x1260B44", Offset = "0x1260B44", VA = "0x1260B44")]
		public RewindAnimation()
		{
		}
	}
	[Token(Token = "0x2000551")]
	[Tooltip("Sets the Speed of an Animation. Check Every Frame to update the animation time continuously, e.g., if you're manipulating a variable that controls animation speed.")]
	[ActionCategory(ActionCategory.Animation)]
	public class SetAnimationSpeed : BaseAnimationAction
	{
		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object playing the animation.")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation.")]
		public FsmString animName;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The desired animation speed. 1= normal, 0.5 = half speed, 2 = double speed.")]
		public FsmFloat speed;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Update the speed every frame. Useful if you're using a variable to set Speed.")]
		public bool everyFrame;

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0x1260B48", Offset = "0x1260B48", VA = "0x1260B48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0x1260B94", Offset = "0x1260B94", VA = "0x1260B94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0x1260D38", Offset = "0x1260D38", VA = "0x1260D38", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0x1260BF4", Offset = "0x1260BF4", VA = "0x1260BF4")]
		private void DoSetAnimationSpeed(GameObject go)
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0x1260D7C", Offset = "0x1260D7C", VA = "0x1260D7C")]
		public SetAnimationSpeed()
		{
		}
	}
	[Token(Token = "0x2000552")]
	[ActionCategory(ActionCategory.Animation)]
	[Tooltip("Sets the current Time of an Animation. Useful for manually controlling playback of an animation. Check Every Frame to update the time continuously.")]
	public class SetAnimationTime : BaseAnimationAction
	{
		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object playing the animation.")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the animation.")]
		[UIHint(UIHint.Animation)]
		[RequiredField]
		public FsmString animName;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The time to set the animation to.")]
		public FsmFloat time;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Use normalized time: 0 = start ; 1 = end. Useful if you don't care about the length of the exact length of the animation.")]
		public bool normalized;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Set time every frame. Useful if you're using a variable as Time.")]
		public bool everyFrame;

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x1260DAC", Offset = "0x1260DAC", VA = "0x1260DAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x1260DEC", Offset = "0x1260DEC", VA = "0x1260DEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x1260FF0", Offset = "0x1260FF0", VA = "0x1260FF0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0x1260E4C", Offset = "0x1260E4C", VA = "0x1260E4C")]
		private void DoSetAnimationTime(GameObject go)
		{
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x1261034", Offset = "0x1261034", VA = "0x1261034")]
		public SetAnimationTime()
		{
		}
	}
	[Token(Token = "0x2000553")]
	[Tooltip("Sets the Blend Weight of an Animation. Check Every Frame to update the weight continuously, e.g., if you're manipulating a variable that controls the weight.")]
	[ActionCategory(ActionCategory.Animation)]
	public class SetAnimationWeight : BaseAnimationAction
	{
		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The Game Object playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The name of the animation.")]
		[UIHint(UIHint.Animation)]
		public FsmString animName;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The weight to set the animation to.")]
		public FsmFloat weight;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Perform this action every frame. Useful if Weight is a variable.")]
		public bool everyFrame;

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x1261038", Offset = "0x1261038", VA = "0x1261038", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x1261084", Offset = "0x1261084", VA = "0x1261084", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x1261228", Offset = "0x1261228", VA = "0x1261228", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x12610E4", Offset = "0x12610E4", VA = "0x12610E4")]
		private void DoSetAnimationWeight(GameObject go)
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x126126C", Offset = "0x126126C", VA = "0x126126C")]
		public SetAnimationWeight()
		{
		}
	}
	[Token(Token = "0x2000554")]
	[ActionCategory(ActionCategory.Animation)]
	[Tooltip("Stops all playing Animations on a Game Object. Optionally, specify a single Animation to Stop.")]
	public class StopAnimation : BaseAnimationAction
	{
		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Animation))]
		[Tooltip("The Game Object playing the animation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Animation)]
		[Tooltip("The name of the animation to stop. Leave empty to stop all playing animations.")]
		public FsmString animName;

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x126129C", Offset = "0x126129C", VA = "0x126129C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0x12612C4", Offset = "0x12612C4", VA = "0x12612C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0x12612E0", Offset = "0x12612E0", VA = "0x12612E0")]
		private void DoStopAnimation()
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0x12613C8", Offset = "0x12613C8", VA = "0x12613C8")]
		public StopAnimation()
		{
		}
	}
	[Token(Token = "0x2000555")]
	[Tooltip("Create a dynamic transition between the current state and the destination state.Both state as to be on the same layer. note: You cannot change the current state on a synchronized layer, you need to change it on the referenced layer.")]
	[ActionCategory("Animator")]
	public class AnimatorCrossFade : FsmStateAction
	{
		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the state that will be played.")]
		public FsmString stateName;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The duration of the transition. Value is in source state normalized time.")]
		public FsmFloat transitionDuration;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Layer index containing the destination state. Leave to none to ignore")]
		public FsmInt layer;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Start time of the current destination state. Value is in source state normalized time, should be between 0 and 1.")]
		public FsmFloat normalizedTime;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _paramID;

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x12613CC", Offset = "0x12613CC", VA = "0x12613CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x12614C0", Offset = "0x12614C0", VA = "0x12614C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x1261668", Offset = "0x1261668", VA = "0x1261668")]
		public AnimatorCrossFade()
		{
		}
	}
	[Token(Token = "0x2000556")]
	[Tooltip("Interrupts the automatic target matching. CompleteMatch will make the gameobject match the target completely at the next frame.")]
	[ActionCategory("Animator")]
	public class AnimatorInterruptMatchTarget : FsmStateAction
	{
		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Will make the gameobject match the target completely at the next frame")]
		public FsmBool completeMatch;

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x1261670", Offset = "0x1261670", VA = "0x1261670", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x12616A4", Offset = "0x12616A4", VA = "0x12616A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x12617A4", Offset = "0x12617A4", VA = "0x12617A4")]
		public AnimatorInterruptMatchTarget()
		{
		}
	}
	[Token(Token = "0x2000557")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1034")]
	[Tooltip("Automatically adjust the gameobject position and rotation so that the AvatarTarget reaches the matchPosition when the current state is at the specified progress")]
	public class AnimatorMatchTarget : FsmStateAction
	{
		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The body part that is involved in the match")]
		public AvatarTarget bodyPart;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The gameObject target to match")]
		public FsmGameObject target;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The position of the ik goal. If Goal GameObject set, position is used as an offset from Goal")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The rotation of the ik goal.If Goal GameObject set, rotation is used as an offset from Goal")]
		public FsmQuaternion targetRotation;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The MatchTargetWeightMask Position XYZ weight")]
		public FsmVector3 positionWeight;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The MatchTargetWeightMask Rotation weight")]
		public FsmFloat rotationWeight;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Start time within the animation clip (0 - beginning of clip, 1 - end of clip)")]
		public FsmFloat startNormalizedTime;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("End time within the animation clip (0 - beginning of clip, 1 - end of clip), values greater than 1 can be set to trigger a match after a certain number of loops. Ex: 2.3 means at 30% of 2nd loop")]
		public FsmFloat targetNormalizedTime;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Should always be true")]
		public bool everyFrame;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Animator _animator;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform _transform;

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0x12617AC", Offset = "0x12617AC", VA = "0x12617AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x1261920", Offset = "0x1261920", VA = "0x1261920", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0x1261D78", Offset = "0x1261D78", VA = "0x1261D78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x1261A84", Offset = "0x1261A84", VA = "0x1261A84")]
		private void DoMatchTarget()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x1261D7C", Offset = "0x1261D7C", VA = "0x1261D7C")]
		public AnimatorMatchTarget()
		{
		}
	}
	[Token(Token = "0x2000558")]
	[ActionCategory("Animator")]
	[Tooltip("Plays a state. This could be used to synchronize your animation with audio or synchronize an Animator over the network.")]
	public class AnimatorPlay : FsmStateAction
	{
		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the state that will be played.")]
		public FsmString stateName;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The layer where the state is.")]
		public FsmInt layer;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The normalized time at which the state will play")]
		public FsmFloat normalizedTime;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x1261D84", Offset = "0x1261D84", VA = "0x1261D84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x1261E5C", Offset = "0x1261E5C", VA = "0x1261E5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0x1261FE4", Offset = "0x1261FE4", VA = "0x1261FE4")]
		public AnimatorPlay()
		{
		}
	}
	[Token(Token = "0x2000559")]
	[Tooltip("Sets the animator in playback mode.")]
	[ActionCategory("Animator")]
	public class AnimatorStartPlayback : FsmStateAction
	{
		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x1261FEC", Offset = "0x1261FEC", VA = "0x1261FEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x1261FF8", Offset = "0x1261FF8", VA = "0x1261FF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x12620E4", Offset = "0x12620E4", VA = "0x12620E4")]
		public AnimatorStartPlayback()
		{
		}
	}
	[Token(Token = "0x200055A")]
	[Tooltip("Sets the animator in recording mode, and allocates a circular buffer of size frameCount. After this call, the recorder starts collecting up to frameCount frames in the buffer. Note it is not possible to start playback until a call to StopRecording is made")]
	[ActionCategory("Animator")]
	public class AnimatorStartRecording : FsmStateAction
	{
		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls StopRecording. The maximum value for frameCount is 10000.")]
		[RequiredField]
		public FsmInt frameCount;

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x12620EC", Offset = "0x12620EC", VA = "0x12620EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x1262120", Offset = "0x1262120", VA = "0x1262120", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x1262220", Offset = "0x1262220", VA = "0x1262220")]
		public AnimatorStartRecording()
		{
		}
	}
	[Token(Token = "0x200055B")]
	[ActionCategory("Animator")]
	[Tooltip("Stops the animator playback mode. When playback stops, the avatar resumes getting control from game logic")]
	public class AnimatorStopPlayback : FsmStateAction
	{
		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x1262228", Offset = "0x1262228", VA = "0x1262228", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x1262234", Offset = "0x1262234", VA = "0x1262234", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x1262320", Offset = "0x1262320", VA = "0x1262320")]
		public AnimatorStopPlayback()
		{
		}
	}
	[Token(Token = "0x200055C")]
	[ActionCategory("Animator")]
	[Tooltip("Stops the animator record mode. It will lock the recording buffer's contents in its current state. The data get saved for subsequent playback with StartPlayback.")]
	public class AnimatorStopRecording : FsmStateAction
	{
		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ActionSection("Results")]
		[Tooltip("The recorder StartTime")]
		[UIHint(UIHint.Variable)]
		public FsmFloat recorderStartTime;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The recorder StopTime")]
		public FsmFloat recorderStopTime;

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x1262328", Offset = "0x1262328", VA = "0x1262328", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x1262360", Offset = "0x1262360", VA = "0x1262360", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x126247C", Offset = "0x126247C", VA = "0x126247C")]
		public AnimatorStopRecording()
		{
		}
	}
	[Token(Token = "0x200055D")]
	public abstract class FsmStateActionAnimatorBase : ComponentAction<Animator>
	{
		[Token(Token = "0x200055E")]
		public enum AnimatorFrameUpdateSelector
		{
			[Token(Token = "0x4001897")]
			OnUpdate,
			[Token(Token = "0x4001898")]
			OnAnimatorMove,
			[Token(Token = "0x4001899")]
			OnAnimatorIK
		}

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Select when to perform the action, during OnUpdate, OnAnimatorMove, OnAnimatorIK")]
		public AnimatorFrameUpdateSelector everyFrameOption;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected int IklayerIndex;

		[Token(Token = "0x6001C9C")]
		public abstract void OnActionUpdate();

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x1262484", Offset = "0x1262484", VA = "0x1262484", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x1262490", Offset = "0x1262490", VA = "0x1262490", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x12624E8", Offset = "0x12624E8", VA = "0x12624E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x126252C", Offset = "0x126252C", VA = "0x126252C", Slot = "59")]
		public override void DoAnimatorMove()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x1262574", Offset = "0x1262574", VA = "0x1262574", Slot = "60")]
		public override void DoAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x12625C0", Offset = "0x12625C0", VA = "0x12625C0")]
		protected FsmStateActionAnimatorBase()
		{
		}
	}
	[Token(Token = "0x200055F")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1035")]
	[Tooltip("Gets the value of ApplyRootMotion of an avatar. If true, root is controlled by animations")]
	[ActionCategory("Animator")]
	public class GetAnimatorApplyRootMotion : FsmStateAction
	{
		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Is the rootMotionapplied. If true, root is controlled by animations")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[ActionSection("Results")]
		public FsmBool rootMotionApplied;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event send if the root motion is applied")]
		public FsmEvent rootMotionIsAppliedEvent;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event send if the root motion is not applied")]
		public FsmEvent rootMotionIsNotAppliedEvent;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x1262608", Offset = "0x1262608", VA = "0x1262608", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x1262650", Offset = "0x1262650", VA = "0x1262650", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0x1262744", Offset = "0x1262744", VA = "0x1262744")]
		private void GetApplyMotionRoot()
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x1262804", Offset = "0x1262804", VA = "0x1262804")]
		public GetAnimatorApplyRootMotion()
		{
		}
	}
	[Token(Token = "0x2000560")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1036")]
	[Tooltip("Gets the avatar body mass center position and rotation.Optionally accept a GameObject to get the body transform. \nThe position and rotation are local to the gameobject")]
	[ActionCategory("Animator")]
	public class GetAnimatorBody : FsmStateAction
	{
		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("The avatar body mass center")]
		public FsmVector3 bodyPosition;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The avatar body mass center")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion bodyRotation;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If set, apply the body mass center position and rotation to this gameObject")]
		public FsmGameObject bodyGameObject;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Animator _animator;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform _transform;

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x126280C", Offset = "0x126280C", VA = "0x126280C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x126285C", Offset = "0x126285C", VA = "0x126285C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x1262BAC", Offset = "0x1262BAC", VA = "0x1262BAC")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x1262C24", Offset = "0x1262C24", VA = "0x1262C24", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x1262A88", Offset = "0x1262A88", VA = "0x1262A88")]
		private void DoGetBodyPosition()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x1262C9C", Offset = "0x1262C9C", VA = "0x1262C9C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x1262D70", Offset = "0x1262D70", VA = "0x1262D70")]
		public GetAnimatorBody()
		{
		}
	}
	[Token(Token = "0x2000561")]
	[Tooltip("Gets the GameObject mapped to this human bone id")]
	[ActionCategory("Animator")]
	public class GetAnimatorBoneGameObject : FsmStateAction
	{
		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The bone reference")]
		public HumanBodyBones bone;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The bone reference as a string, case insensitive")]
		public FsmString boneAsString;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Bone's GameObject")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject boneGameObject;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x1262D78", Offset = "0x1262D78", VA = "0x1262D78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x1262E0C", Offset = "0x1262E0C", VA = "0x1262E0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x1262F00", Offset = "0x1262F00", VA = "0x1262F00")]
		private void GetBoneTransform()
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x126305C", Offset = "0x126305C", VA = "0x126305C")]
		public GetAnimatorBoneGameObject()
		{
		}
	}
	[Token(Token = "0x2000562")]
	[Tooltip("Gets the value of a bool parameter")]
	[ActionCategory("Animator")]
	public class GetAnimatorBool : FsmStateAction
	{
		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Results")]
		[Tooltip("The bool value of the animator parameter")]
		[UIHint(UIHint.Variable)]
		public FsmBool result;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _paramID;

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0x1263064", Offset = "0x1263064", VA = "0x1263064", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0x12630A4", Offset = "0x12630A4", VA = "0x12630A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0x1263258", Offset = "0x1263258", VA = "0x1263258", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0x12631C8", Offset = "0x12631C8", VA = "0x12631C8")]
		private void GetParameter()
		{
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0x126325C", Offset = "0x126325C", VA = "0x126325C")]
		public GetAnimatorBool()
		{
		}
	}
	[Token(Token = "0x2000563")]
	[Tooltip("Returns the culling of this Animator component. Optionnaly sends events.\nIf true ('AlwaysAnimate'): always animate the entire character. Object is animated even when offscreen.\nIf False ('BasedOnRenderers') animation is disabled when renderers are not visible.")]
	[ActionCategory("Animator")]
	public class GetAnimatorCullingMode : FsmStateAction
	{
		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ActionSection("Results")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("If true, always animate the entire character, else animation is disabled when renderers are not visible")]
		public FsmBool alwaysAnimate;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event send if culling mode is 'AlwaysAnimate'")]
		public FsmEvent alwaysAnimateEvent;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event send if culling mode is 'BasedOnRenders'")]
		public FsmEvent basedOnRenderersEvent;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x1263264", Offset = "0x1263264", VA = "0x1263264", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x12632AC", Offset = "0x12632AC", VA = "0x12632AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x12633A0", Offset = "0x12633A0", VA = "0x12633A0")]
		private void DoCheckCulling()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x1263464", Offset = "0x1263464", VA = "0x1263464")]
		public GetAnimatorCullingMode()
		{
		}
	}
	[Token(Token = "0x2000564")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the current State information on a specified layer")]
	public class GetAnimatorCurrentStateInfo : FsmStateAction
	{
		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The layer's name.")]
		public FsmString name;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The layer's name Hash. Obsolete in Unity 5, use fullPathHash or shortPathHash instead, nameHash will be the same as shortNameHash for legacy")]
		[UIHint(UIHint.Variable)]
		public FsmInt nameHash;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The layer's tag hash")]
		public FsmInt tagHash;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the state looping. All animations in the state must be looping")]
		public FsmBool isStateLooping;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Current duration of the state. In seconds, can vary when the State contains a Blend Tree ")]
		[UIHint(UIHint.Variable)]
		public FsmFloat length;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The integer part is the number of time a state has been looped. The fractional part is the % (0-1) of progress in the current loop")]
		[UIHint(UIHint.Variable)]
		public FsmFloat normalizedTime;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The integer part is the number of time a state has been looped. This is extracted from the normalizedTime")]
		[UIHint(UIHint.Variable)]
		public FsmInt loopCount;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The progress in the current loop. This is extracted from the normalizedTime")]
		public FsmFloat currentLoopProgress;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Animator _animator;

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x126346C", Offset = "0x126346C", VA = "0x126346C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x126351C", Offset = "0x126351C", VA = "0x126351C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x1263944", Offset = "0x1263944", VA = "0x1263944", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x12639BC", Offset = "0x12639BC", VA = "0x12639BC")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x12636EC", Offset = "0x12636EC", VA = "0x12636EC")]
		private void GetLayerInfo()
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x1263A34", Offset = "0x1263A34", VA = "0x1263A34", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0x1263B08", Offset = "0x1263B08", VA = "0x1263B08")]
		public GetAnimatorCurrentStateInfo()
		{
		}
	}
	[Token(Token = "0x2000565")]
	[Tooltip("Check the current State name on a specified layer, this is more than the layer name, it holds the current state as well.")]
	[ActionCategory("Animator")]
	public class GetAnimatorCurrentStateInfoIsName : FsmStateAction
	{
		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name to check the layer against.")]
		public FsmString name;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool everyFrame;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Results")]
		public FsmEvent nameMatchEvent;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent nameDoNotMatchEvent;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator _animator;

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0x1263B10", Offset = "0x1263B10", VA = "0x1263B10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x1263B70", Offset = "0x1263B70", VA = "0x1263B70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x1263D84", Offset = "0x1263D84", VA = "0x1263D84", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x1263C78", Offset = "0x1263C78", VA = "0x1263C78")]
		private void IsName()
		{
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x1263D88", Offset = "0x1263D88", VA = "0x1263D88")]
		public GetAnimatorCurrentStateInfoIsName()
		{
		}
	}
	[Token(Token = "0x2000566")]
	[ActionCategory("Animator")]
	[Tooltip("Does tag match the tag of the active state in the statemachine")]
	public class GetAnimatorCurrentStateInfoIsTag : FsmStateAction
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The tag to check the layer against.")]
		public FsmString tag;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool everyFrame;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Results")]
		public FsmBool tagMatch;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent tagMatchEvent;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent tagDoNotMatchEvent;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Animator _animator;

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x1263D90", Offset = "0x1263D90", VA = "0x1263D90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x1263E00", Offset = "0x1263E00", VA = "0x1263E00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x1264028", Offset = "0x1264028", VA = "0x1264028", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x1263F08", Offset = "0x1263F08", VA = "0x1263F08")]
		private void IsTag()
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x126402C", Offset = "0x126402C", VA = "0x126402C")]
		public GetAnimatorCurrentStateInfoIsTag()
		{
		}
	}
	[Token(Token = "0x2000567")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the current transition information on a specified layer. Only valid when during a transition.")]
	public class GetAnimatorCurrentTransitionInfo : FsmStateAction
	{
		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The unique name of the Transition")]
		[ActionSection("Results")]
		public FsmString name;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The unique name of the Transition")]
		public FsmInt nameHash;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The user-specidied name of the Transition")]
		[UIHint(UIHint.Variable)]
		public FsmInt userNameHash;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Normalized time of the Transition")]
		[UIHint(UIHint.Variable)]
		public FsmFloat normalizedTime;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Animator _animator;

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x1264034", Offset = "0x1264034", VA = "0x1264034", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x12640A4", Offset = "0x12640A4", VA = "0x12640A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x12643C0", Offset = "0x12643C0", VA = "0x12643C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0x1264438", Offset = "0x1264438", VA = "0x1264438")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0x1264274", Offset = "0x1264274", VA = "0x1264274")]
		private void GetTransitionInfo()
		{
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0x12644B0", Offset = "0x12644B0", VA = "0x12644B0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0x1264584", Offset = "0x1264584", VA = "0x1264584")]
		public GetAnimatorCurrentTransitionInfo()
		{
		}
	}
	[Token(Token = "0x2000568")]
	[Tooltip("Check the active Transition name on a specified layer. Format is 'CURRENT_STATE -> NEXT_STATE'.")]
	[ActionCategory("Animator")]
	public class GetAnimatorCurrentTransitionInfoIsName : FsmStateAction
	{
		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name to check the transition against.")]
		public FsmString name;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool everyFrame;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Results")]
		public FsmBool nameMatch;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent nameMatchEvent;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent nameDoNotMatchEvent;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Animator _animator;

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0x126458C", Offset = "0x126458C", VA = "0x126458C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0x12645FC", Offset = "0x12645FC", VA = "0x12645FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0x1264814", Offset = "0x1264814", VA = "0x1264814", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0x1264704", Offset = "0x1264704", VA = "0x1264704")]
		private void IsName()
		{
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x1264818", Offset = "0x1264818", VA = "0x1264818")]
		public GetAnimatorCurrentTransitionInfoIsName()
		{
		}
	}
	[Token(Token = "0x2000569")]
	[Tooltip("Check the active Transition user-specified name on a specified layer.")]
	[ActionCategory("Animator")]
	public class GetAnimatorCurrentTransitionInfoIsUserName : FsmStateAction
	{
		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The user-specified name to check the transition against.")]
		public FsmString userName;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool everyFrame;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Results")]
		public FsmBool nameMatch;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent nameMatchEvent;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent nameDoNotMatchEvent;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Animator _animator;

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0x1264820", Offset = "0x1264820", VA = "0x1264820", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0x1264890", Offset = "0x1264890", VA = "0x1264890", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0x1264AA8", Offset = "0x1264AA8", VA = "0x1264AA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0x1264998", Offset = "0x1264998", VA = "0x1264998")]
		private void IsName()
		{
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0x1264AAC", Offset = "0x1264AAC", VA = "0x1264AAC")]
		public GetAnimatorCurrentTransitionInfoIsUserName()
		{
		}
	}
	[Token(Token = "0x200056A")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the avatar delta position and rotation for the last evaluated frame.")]
	public class GetAnimatorDelta : FsmStateAction
	{
		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The avatar delta position for the last evaluated frame")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 deltaPosition;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The avatar delta position for the last evaluated frame")]
		public FsmQuaternion deltaRotation;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform _transform;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Animator _animator;

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0x1264AB4", Offset = "0x1264AB4", VA = "0x1264AB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0x1264AF4", Offset = "0x1264AF4", VA = "0x1264AF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0x1264D58", Offset = "0x1264D58", VA = "0x1264D58", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0x1264DD0", Offset = "0x1264DD0", VA = "0x1264DD0")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0x1264CAC", Offset = "0x1264CAC", VA = "0x1264CAC")]
		private void DoGetDeltaPosition()
		{
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0x1264DD4", Offset = "0x1264DD4", VA = "0x1264DD4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x1264EA8", Offset = "0x1264EA8", VA = "0x1264EA8")]
		public GetAnimatorDelta()
		{
		}
	}
	[Token(Token = "0x200056B")]
	[Tooltip("Returns the feet pivot. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
	[ActionCategory("Animator")]
	public class GetAnimatorFeetPivotActive : FsmStateAction
	{
		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The feet pivot Blending. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
		[UIHint(UIHint.Variable)]
		public FsmFloat feetPivotActive;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0x1264EB0", Offset = "0x1264EB0", VA = "0x1264EB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0x1264ED8", Offset = "0x1264ED8", VA = "0x1264ED8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x1264FCC", Offset = "0x1264FCC", VA = "0x1264FCC")]
		private void DoGetFeetPivotActive()
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0x1265054", Offset = "0x1265054", VA = "0x1265054")]
		public GetAnimatorFeetPivotActive()
		{
		}
	}
	[Token(Token = "0x200056C")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the value of a float parameter")]
	public class GetAnimatorFloat : FsmStateAction
	{
		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Results")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float value of the animator parameter")]
		public FsmFloat result;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _paramID;

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0x126505C", Offset = "0x126505C", VA = "0x126505C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0x126509C", Offset = "0x126509C", VA = "0x126509C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x1265314", Offset = "0x1265314", VA = "0x1265314")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x126538C", Offset = "0x126538C", VA = "0x126538C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x1265288", Offset = "0x1265288", VA = "0x1265288")]
		private void GetParameter()
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x1265404", Offset = "0x1265404", VA = "0x1265404", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x12654D8", Offset = "0x12654D8", VA = "0x12654D8")]
		public GetAnimatorFloat()
		{
		}
	}
	[Token(Token = "0x200056D")]
	[Tooltip("Returns The current gravity weight based on current animations that are played")]
	[ActionCategory("Animator")]
	public class GetAnimatorGravityWeight : FsmStateAction
	{
		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The current gravity weight based on current animations that are played")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		public FsmFloat gravityWeight;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x12654E0", Offset = "0x12654E0", VA = "0x12654E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x1265510", Offset = "0x1265510", VA = "0x1265510", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x1265768", Offset = "0x1265768", VA = "0x1265768")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x12657E0", Offset = "0x12657E0", VA = "0x12657E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x12656E0", Offset = "0x12656E0", VA = "0x12656E0")]
		private void DoGetGravityWeight()
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x1265858", Offset = "0x1265858", VA = "0x1265858", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x126592C", Offset = "0x126592C", VA = "0x126592C")]
		public GetAnimatorGravityWeight()
		{
		}
	}
	[Token(Token = "0x200056E")]
	[Tooltip("Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).\n The scale is relative to Unity's Default Avatar")]
	[ActionCategory("Animator")]
	public class GetAnimatorHumanScale : FsmStateAction
	{
		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("the scale of the current Avatar")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		public FsmFloat humanScale;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x1265934", Offset = "0x1265934", VA = "0x1265934", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x126595C", Offset = "0x126595C", VA = "0x126595C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x1265A50", Offset = "0x1265A50", VA = "0x1265A50")]
		private void DoGetHumanScale()
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x1265AD8", Offset = "0x1265AD8", VA = "0x1265AD8")]
		public GetAnimatorHumanScale()
		{
		}
	}
	[Token(Token = "0x200056F")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the position, rotation and weights of an IK goal. A GameObject can be set to use for the position and rotation")]
	public class GetAnimatorIKGoal : FsmStateAction
	{
		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The IK goal")]
		public AvatarIKGoal iKGoal;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Results")]
		[Tooltip("The gameObject to apply ik goal position and rotation to")]
		public FsmGameObject goal;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Gets The position of the ik goal. If Goal GameObject define, position is used as an offset from Goal")]
		public FsmVector3 position;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Gets The rotation of the ik goal.If Goal GameObject define, rotation is used as an offset from Goal")]
		public FsmQuaternion rotation;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Gets The translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal)")]
		public FsmFloat positionWeight;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal)")]
		[UIHint(UIHint.Variable)]
		public FsmFloat rotationWeight;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator _animator;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform _transform;

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0x1265AE0", Offset = "0x1265AE0", VA = "0x1265AE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0x1265B50", Offset = "0x1265B50", VA = "0x1265B50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0x1265E70", Offset = "0x1265E70", VA = "0x1265E70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0x1265CB4", Offset = "0x1265CB4", VA = "0x1265CB4")]
		private void DoGetIKGoal()
		{
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0x1265E74", Offset = "0x1265E74", VA = "0x1265E74")]
		public GetAnimatorIKGoal()
		{
		}
	}
	[Token(Token = "0x2000570")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the value of a int parameter")]
	public class GetAnimatorInt : FsmStateAction
	{
		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The int value of the animator parameter")]
		public FsmInt result;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _paramID;

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0x1265E7C", Offset = "0x1265E7C", VA = "0x1265E7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0x1265EBC", Offset = "0x1265EBC", VA = "0x1265EBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0x1266134", Offset = "0x1266134", VA = "0x1266134")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0x12661AC", Offset = "0x12661AC", VA = "0x12661AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0x12660A8", Offset = "0x12660A8", VA = "0x12660A8")]
		private void GetParameter()
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0x1266224", Offset = "0x1266224", VA = "0x1266224", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0x12662F8", Offset = "0x12662F8", VA = "0x12662F8")]
		public GetAnimatorInt()
		{
		}
	}
	[Token(Token = "0x2000571")]
	[ActionCategory("Animator")]
	[Tooltip("Returns true if the current rig is humanoid, false if it is generic. Can also sends events")]
	public class GetAnimatorIsHuman : FsmStateAction
	{
		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if the current rig is humanoid, False if it is generic")]
		public FsmBool isHuman;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event send if rig is humanoid")]
		public FsmEvent isHumanEvent;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event send if rig is generic")]
		public FsmEvent isGenericEvent;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0x1266300", Offset = "0x1266300", VA = "0x1266300", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0x1266348", Offset = "0x1266348", VA = "0x1266348", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0x126643C", Offset = "0x126643C", VA = "0x126643C")]
		private void DoCheckIsHuman()
		{
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0x12664FC", Offset = "0x12664FC", VA = "0x12664FC")]
		public GetAnimatorIsHuman()
		{
		}
	}
	[Token(Token = "0x2000572")]
	[ActionCategory("Animator")]
	[Tooltip("Returns true if the specified layer is in a transition. Can also send events")]
	public class GetAnimatorIsLayerInTransition : FsmStateAction
	{
		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("True if automatic matching is active")]
		public FsmBool isInTransition;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event send if automatic matching is active")]
		public FsmEvent isInTransitionEvent;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event send if automatic matching is not active")]
		public FsmEvent isNotInTransitionEvent;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator _animator;

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0x1266504", Offset = "0x1266504", VA = "0x1266504", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0x1266554", Offset = "0x1266554", VA = "0x1266554", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0x12667FC", Offset = "0x12667FC", VA = "0x12667FC")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0x1266874", Offset = "0x1266874", VA = "0x1266874", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0x1266724", Offset = "0x1266724", VA = "0x1266724")]
		private void DoCheckIsInTransition()
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0x12668EC", Offset = "0x12668EC", VA = "0x12668EC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0x12669C0", Offset = "0x12669C0", VA = "0x12669C0")]
		public GetAnimatorIsLayerInTransition()
		{
		}
	}
	[Token(Token = "0x2000573")]
	[ActionCategory("Animator")]
	[Tooltip("Returns true if automatic matching is active. Can also send events")]
	public class GetAnimatorIsMatchingTarget : FsmStateAction
	{
		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Warning: do not use the events in this action if you set everyFrame to true")]
		public bool everyFrame;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if automatic matching is active")]
		public FsmBool isMatchingActive;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event send if automatic matching is active")]
		public FsmEvent matchingActivatedEvent;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event send if automatic matching is not active")]
		public FsmEvent matchingDeactivedEvent;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Animator _animator;

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0x12669C8", Offset = "0x12669C8", VA = "0x12669C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0x1266A18", Offset = "0x1266A18", VA = "0x1266A18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0x1266CA8", Offset = "0x1266CA8", VA = "0x1266CA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0x1266D20", Offset = "0x1266D20", VA = "0x1266D20")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0x1266BE8", Offset = "0x1266BE8", VA = "0x1266BE8")]
		private void DoCheckIsMatchingActive()
		{
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0x1266D24", Offset = "0x1266D24", VA = "0x1266D24", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0x1266DF8", Offset = "0x1266DF8", VA = "0x1266DF8")]
		public GetAnimatorIsMatchingTarget()
		{
		}
	}
	[Token(Token = "0x2000574")]
	[ActionCategory("Animator")]
	[Tooltip("Returns true if a parameter is controlled by an additional curve on an animation")]
	public class GetAnimatorIsParameterControlledByCurve : FsmStateAction
	{
		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component is required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmString parameterName;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if controlled by curve")]
		public FsmBool isControlledByCurve;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event send if controlled by curve")]
		public FsmEvent isControlledByCurveEvent;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event send if not controlled by curve")]
		public FsmEvent isNotControlledByCurveEvent;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0x1266E00", Offset = "0x1266E00", VA = "0x1266E00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0x1266E58", Offset = "0x1266E58", VA = "0x1266E58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0x1266F4C", Offset = "0x1266F4C", VA = "0x1266F4C")]
		private void DoCheckIsParameterControlledByCurve()
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0x1267024", Offset = "0x1267024", VA = "0x1267024")]
		public GetAnimatorIsParameterControlledByCurve()
		{
		}
	}
	[Token(Token = "0x2000575")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1051")]
	[ActionCategory("Animator")]
	[Tooltip("Returns the Animator controller layer count")]
	public class GetAnimatorLayerCount : FsmStateAction
	{
		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Animator controller layer count")]
		[ActionSection("Results")]
		public FsmInt layerCount;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0x126702C", Offset = "0x126702C", VA = "0x126702C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0x1267054", Offset = "0x1267054", VA = "0x1267054", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0x1267148", Offset = "0x1267148", VA = "0x1267148")]
		private void DoGetLayerCount()
		{
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0x12671D0", Offset = "0x12671D0", VA = "0x12671D0")]
		public GetAnimatorLayerCount()
		{
		}
	}
	[Token(Token = "0x2000576")]
	[ActionCategory("Animator")]
	[Tooltip("Returns the name of a layer from its index")]
	public class GetAnimatorLayerName : FsmStateAction
	{
		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The layer index")]
		public FsmInt layerIndex;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The layer name")]
		[ActionSection("Results")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString layerName;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0x12671D8", Offset = "0x12671D8", VA = "0x12671D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0x1267210", Offset = "0x1267210", VA = "0x1267210", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0x1267304", Offset = "0x1267304", VA = "0x1267304")]
		private void DoGetLayerName()
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x12673B4", Offset = "0x12673B4", VA = "0x12673B4")]
		public GetAnimatorLayerName()
		{
		}
	}
	[Token(Token = "0x2000577")]
	[ActionCategory("Animator")]
	[Tooltip("Returns if additionnal layers affects the mass center")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1053")]
	public class GetAnimatorLayersAffectMassCenter : FsmStateAction
	{
		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("If true, additionnal layers affects the mass center")]
		public FsmBool affectMassCenter;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event send if additionnal layers affects the mass center")]
		public FsmEvent affectMassCenterEvent;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event send if additionnal layers do no affects the mass center")]
		public FsmEvent doNotAffectMassCenterEvent;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0x12673BC", Offset = "0x12673BC", VA = "0x12673BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x1267404", Offset = "0x1267404", VA = "0x1267404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x12674F8", Offset = "0x12674F8", VA = "0x12674F8")]
		private void CheckAffectMassCenter()
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x12675B8", Offset = "0x12675B8", VA = "0x12675B8")]
		public GetAnimatorLayersAffectMassCenter()
		{
		}
	}
	[Token(Token = "0x2000578")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the layer's current weight")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1052")]
	public class GetAnimatorLayerWeight : FsmStateAction
	{
		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Results")]
		[Tooltip("The layer's current weight")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat layerWeight;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0x12675C0", Offset = "0x12675C0", VA = "0x12675C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0x1267600", Offset = "0x1267600", VA = "0x1267600", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x1267870", Offset = "0x1267870", VA = "0x1267870")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x12678E8", Offset = "0x12678E8", VA = "0x12678E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0x12677D0", Offset = "0x12677D0", VA = "0x12677D0")]
		private void GetLayerWeight()
		{
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x1267960", Offset = "0x1267960", VA = "0x1267960", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x1267A34", Offset = "0x1267A34", VA = "0x1267A34")]
		public GetAnimatorLayerWeight()
		{
		}
	}
	[Token(Token = "0x2000579")]
	[Tooltip("Get the left foot bottom height.")]
	[ActionCategory("Animator")]
	public class GetAnimatorLeftFootBottomHeight : FsmStateAction
	{
		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("the left foot bottom height.")]
		[ActionSection("Result")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat leftFootHeight;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x1267A3C", Offset = "0x1267A3C", VA = "0x1267A3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x1267A6C", Offset = "0x1267A6C", VA = "0x1267A6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x1267BFC", Offset = "0x1267BFC", VA = "0x1267BFC", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x1267B74", Offset = "0x1267B74", VA = "0x1267B74")]
		private void _getLeftFootBottonHeight()
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x1267C00", Offset = "0x1267C00", VA = "0x1267C00")]
		public GetAnimatorLeftFootBottomHeight()
		{
		}
	}
	[Token(Token = "0x200057A")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1054")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the next State information on a specified layer")]
	public class GetAnimatorNextStateInfo : FsmStateAction
	{
		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The layer's index")]
		public FsmInt layerIndex;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Results")]
		[Tooltip("The layer's name.")]
		public FsmString name;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The layer's name Hash. Obsolete in Unity 5, use fullPathHash or shortPathHash instead, nameHash will be the same as shortNameHash for legacy")]
		public FsmInt nameHash;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The layer's tag hash")]
		[UIHint(UIHint.Variable)]
		public FsmInt tagHash;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Is the state looping. All animations in the state must be looping")]
		[UIHint(UIHint.Variable)]
		public FsmBool isStateLooping;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Current duration of the state. In seconds, can vary when the State contains a Blend Tree ")]
		[UIHint(UIHint.Variable)]
		public FsmFloat length;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The integer part is the number of time a state has been looped. The fractional part is the % (0-1) of progress in the current loop")]
		public FsmFloat normalizedTime;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The integer part is the number of time a state has been looped. This is extracted from the normalizedTime")]
		public FsmInt loopCount;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The progress in the current loop. This is extracted from the normalizedTime")]
		public FsmFloat currentLoopProgress;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Animator _animator;

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x1267C08", Offset = "0x1267C08", VA = "0x1267C08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x1267CB8", Offset = "0x1267CB8", VA = "0x1267CB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0x12680E0", Offset = "0x12680E0", VA = "0x12680E0")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0x1268158", Offset = "0x1268158", VA = "0x1268158", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0x1267E88", Offset = "0x1267E88", VA = "0x1267E88")]
		private void GetLayerInfo()
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0x12681D0", Offset = "0x12681D0", VA = "0x12681D0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x12682A4", Offset = "0x12682A4", VA = "0x12682A4")]
		public GetAnimatorNextStateInfo()
		{
		}
	}
	[Token(Token = "0x200057B")]
	[Tooltip("Returns the pivot weight and/or position. The pivot is the most stable point between the avatar's left and right foot.\n For a weight value of 0, the left foot is the most stable point For a value of 1, the right foot is the most stable point")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1055")]
	[ActionCategory("Animator")]
	public class GetAnimatorPivot : FsmStateAction
	{
		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Results")]
		[Tooltip("The pivot is the most stable point between the avatar's left and right foot.\n For a value of 0, the left foot is the most stable point For a value of 1, the right foot is the most stable point")]
		[UIHint(UIHint.Variable)]
		public FsmFloat pivotWeight;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The pivot is the most stable point between the avatar's left and right foot.\n For a value of 0, the left foot is the most stable point For a value of 1, the right foot is the most stable point")]
		public FsmVector3 pivotPosition;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x12682AC", Offset = "0x12682AC", VA = "0x12682AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x12682EC", Offset = "0x12682EC", VA = "0x12682EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0x1268564", Offset = "0x1268564", VA = "0x1268564")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x12685DC", Offset = "0x12685DC", VA = "0x12685DC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x12684BC", Offset = "0x12684BC", VA = "0x12684BC")]
		private void DoCheckPivot()
		{
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0x1268654", Offset = "0x1268654", VA = "0x1268654", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0x1268728", Offset = "0x1268728", VA = "0x1268728")]
		public GetAnimatorPivot()
		{
		}
	}
	[Token(Token = "0x200057C")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the playback speed of the Animator. 1 is normal playback speed")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1056")]
	public class GetAnimatorPlayBackSpeed : FsmStateAction
	{
		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The playBack speed of the animator. 1 is normal playback speed")]
		[RequiredField]
		public FsmFloat playBackSpeed;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x1268730", Offset = "0x1268730", VA = "0x1268730", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x1268760", Offset = "0x1268760", VA = "0x1268760", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x12688F0", Offset = "0x12688F0", VA = "0x12688F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x1268868", Offset = "0x1268868", VA = "0x1268868")]
		private void GetPlayBackSpeed()
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x12688F4", Offset = "0x12688F4", VA = "0x12688F4")]
		public GetAnimatorPlayBackSpeed()
		{
		}
	}
	[Token(Token = "0x200057D")]
	[ActionCategory("Animator")]
	[Tooltip("Gets the playback position in the recording buffer. When in playback mode (use  AnimatorStartPlayback), this value is used for controlling the current playback position in the buffer (in seconds). The value can range between recordingStartTime and recordingStopTime See Also: StartPlayback, StopPlayback.")]
	public class GetAnimatorPlayBackTime : FsmStateAction
	{
		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The playBack time of the animator.")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		public FsmFloat playBackTime;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x12688FC", Offset = "0x12688FC", VA = "0x12688FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0x126892C", Offset = "0x126892C", VA = "0x126892C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0x1268ABC", Offset = "0x1268ABC", VA = "0x1268ABC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0x1268A34", Offset = "0x1268A34", VA = "0x1268A34")]
		private void GetPlayBackTime()
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0x1268AC0", Offset = "0x1268AC0", VA = "0x1268AC0")]
		public GetAnimatorPlayBackTime()
		{
		}
	}
	[Token(Token = "0x200057E")]
	[ActionCategory("Animator")]
	[Tooltip("Get the right foot bottom height.")]
	public class GetAnimatorRightFootBottomHeight : FsmStateAction
	{
		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The right foot bottom height.")]
		[ActionSection("Result")]
		[RequiredField]
		public FsmFloat rightFootHeight;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0x1268AC8", Offset = "0x1268AC8", VA = "0x1268AC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x1268AF8", Offset = "0x1268AF8", VA = "0x1268AF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x1268C88", Offset = "0x1268C88", VA = "0x1268C88", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x1268C00", Offset = "0x1268C00", VA = "0x1268C00")]
		private void _getRightFootBottonHeight()
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x1268C8C", Offset = "0x1268C8C", VA = "0x1268C8C")]
		public GetAnimatorRightFootBottomHeight()
		{
		}
	}
	[Token(Token = "0x200057F")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1036")]
	[Tooltip("Gets the avatar body mass center position and rotation.Optionally accept a GameObject to get the body transform. \nThe position and rotation are local to the gameobject")]
	public class GetAnimatorRoot : FsmStateAction
	{
		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Results")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The avatar body mass center")]
		public FsmVector3 rootPosition;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The avatar body mass center")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion rootRotation;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If set, apply the body mass center position and rotation to this gameObject")]
		public FsmGameObject bodyGameObject;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Animator _animator;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform _transform;

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x1268C94", Offset = "0x1268C94", VA = "0x1268C94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0x1268CE4", Offset = "0x1268CE4", VA = "0x1268CE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0x1269034", Offset = "0x1269034", VA = "0x1269034")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0x12690AC", Offset = "0x12690AC", VA = "0x12690AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0x1268F10", Offset = "0x1268F10", VA = "0x1268F10")]
		private void DoGetBodyPosition()
		{
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0x1269124", Offset = "0x1269124", VA = "0x1269124", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x12691F8", Offset = "0x12691F8", VA = "0x12691F8")]
		public GetAnimatorRoot()
		{
		}
	}
	[Token(Token = "0x2000580")]
	[Tooltip("Gets the playback speed of the Animator. 1 is normal playback speed")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1056")]
	[ActionCategory("Animator")]
	public class GetAnimatorSpeed : FsmStateAction
	{
		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The playBack speed of the animator. 1 is normal playback speed")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat speed;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0x1269200", Offset = "0x1269200", VA = "0x1269200", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x1269230", Offset = "0x1269230", VA = "0x1269230", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0x12693C0", Offset = "0x12693C0", VA = "0x12693C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0x1269338", Offset = "0x1269338", VA = "0x1269338")]
		private void GetPlaybackSpeed()
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x12693C4", Offset = "0x12693C4", VA = "0x12693C4")]
		public GetAnimatorSpeed()
		{
		}
	}
	[Token(Token = "0x2000581")]
	[Tooltip("Gets the position and rotation of the target specified by SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)).\nThe position and rotation are only valid when a frame has being evaluated after the SetTarget call")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1058")]
	public class GetAnimatorTarget : FsmStateAction
	{
		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful when value is subject to change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Results")]
		[Tooltip("The target position")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The target rotation")]
		public FsmQuaternion targetRotation;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If set, apply the position and rotation to this gameObject")]
		public FsmGameObject targetGameObject;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Animator _animator;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform _transform;

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0x12693CC", Offset = "0x12693CC", VA = "0x12693CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0x126941C", Offset = "0x126941C", VA = "0x126941C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0x126976C", Offset = "0x126976C", VA = "0x126976C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x12697E4", Offset = "0x12697E4", VA = "0x12697E4")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x1269648", Offset = "0x1269648", VA = "0x1269648")]
		private void DoGetTarget()
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x12697E8", Offset = "0x12697E8", VA = "0x12697E8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0x12698BC", Offset = "0x12698BC", VA = "0x12698BC")]
		public GetAnimatorTarget()
		{
		}
	}
	[Token(Token = "0x2000582")]
	[ActionCategory("Animator")]
	[Tooltip("Synchronize a NavMesh Agent velocity and rotation with the animator process.")]
	public class NavMeshAgentAnimatorSynchronizer : FsmStateAction
	{
		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Agent target. An Animator component and a PlayMakerAnimatorMoveProxy component are required")]
		[CheckForComponent(typeof(PlayMakerAnimatorMoveProxy))]
		[CheckForComponent(typeof(NavMeshAgent))]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private NavMeshAgent _agent;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _trans;

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x12698C4", Offset = "0x12698C4", VA = "0x12698C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x12698D0", Offset = "0x12698D0", VA = "0x12698D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x1269AE8", Offset = "0x1269AE8", VA = "0x1269AE8")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x1269B7C", Offset = "0x1269B7C", VA = "0x1269B7C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x1269C50", Offset = "0x1269C50", VA = "0x1269C50")]
		public NavMeshAgentAnimatorSynchronizer()
		{
		}
	}
	[Token(Token = "0x2000583")]
	[Tooltip("Set Apply Root Motion: If true, Root is controlled by animations")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1061")]
	public class SetAnimatorApplyRootMotion : FsmStateAction
	{
		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true, Root is controlled by animations")]
		public FsmBool applyRootMotion;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x1269C58", Offset = "0x1269C58", VA = "0x1269C58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x1269C80", Offset = "0x1269C80", VA = "0x1269C80", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x1269D74", Offset = "0x1269D74", VA = "0x1269D74")]
		private void DoApplyRootMotion()
		{
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x1269E10", Offset = "0x1269E10", VA = "0x1269E10")]
		public SetAnimatorApplyRootMotion()
		{
		}
	}
	[Token(Token = "0x2000584")]
	[ActionCategory("Animator")]
	[Tooltip("Sets the position and rotation of the body. A GameObject can be set to control the position and rotation, or it can be manually expressed.")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1062")]
	public class SetAnimatorBody : FsmStateAction
	{
		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The gameObject target of the ik goal")]
		public FsmGameObject target;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The position of the ik goal. If Goal GameObject set, position is used as an offset from Goal")]
		public FsmVector3 position;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The rotation of the ik goal.If Goal GameObject set, rotation is used as an offset from Goal")]
		public FsmQuaternion rotation;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerAnimatorIKProxy _animatorProxy;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Animator _animator;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform _transform;

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x1269E18", Offset = "0x1269E18", VA = "0x1269E18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0x1269EF8", Offset = "0x1269EF8", VA = "0x1269EF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x126A378", Offset = "0x126A378", VA = "0x126A378")]
		public void OnAnimatorIKEvent(int layer)
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x126A3F0", Offset = "0x126A3F0", VA = "0x126A3F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0x126A124", Offset = "0x126A124", VA = "0x126A124")]
		private void DoSetBody()
		{
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0x126A468", Offset = "0x126A468", VA = "0x126A468", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0x126A53C", Offset = "0x126A53C", VA = "0x126A53C")]
		public SetAnimatorBody()
		{
		}
	}
	[Token(Token = "0x2000585")]
	[Tooltip("Sets the value of a bool parameter")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1063")]
	[ActionCategory("Animator")]
	public class SetAnimatorBool : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Bool value to assign to the animator parameter")]
		public FsmBool Value;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful when value is changing over time.")]
		public new bool everyFrame;

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Animator _animator;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _paramID;

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x126A544", Offset = "0x126A544", VA = "0x126A544", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x126A584", Offset = "0x126A584", VA = "0x126A584", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x126A814", Offset = "0x126A814", VA = "0x126A814")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x126A88C", Offset = "0x126A88C", VA = "0x126A88C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x126A770", Offset = "0x126A770", VA = "0x126A770")]
		private void SetParameter()
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x126A904", Offset = "0x126A904", VA = "0x126A904", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x126A9D8", Offset = "0x126A9D8", VA = "0x126A9D8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x126A9DC", Offset = "0x126A9DC", VA = "0x126A9DC")]
		public SetAnimatorBool()
		{
		}
	}
	[Token(Token = "0x2000586")]
	[ActionCategory("Animator")]
	[Tooltip("Controls culling of this Animator component.\nIf true, set to 'AlwaysAnimate': always animate the entire character. Object is animated even when offscreen.\nIf False, set to 'BasedOnRenderes' or CullUpdateTransforms ( On Unity 5) animation is disabled when renderers are not visible.")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1064")]
	public class SetAnimatorCullingMode : FsmStateAction
	{
		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true, always animate the entire character, else animation is disabled when renderers are not visible")]
		public FsmBool alwaysAnimate;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x126A9E0", Offset = "0x126A9E0", VA = "0x126A9E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x126AA08", Offset = "0x126AA08", VA = "0x126AA08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x126AAFC", Offset = "0x126AAFC", VA = "0x126AAFC")]
		private void SetCullingMode()
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x126AB9C", Offset = "0x126AB9C", VA = "0x126AB9C")]
		public SetAnimatorCullingMode()
		{
		}
	}
	[Token(Token = "0x2000587")]
	[Tooltip("Activates feet pivot. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1065")]
	public class SetAnimatorFeetPivotActive : FsmStateAction
	{
		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Activates feet pivot. At 0% blending point is body mass center. At 100% blending point is feet pivot")]
		public FsmFloat feetPivotActive;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x126ABA4", Offset = "0x126ABA4", VA = "0x126ABA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0x126ABCC", Offset = "0x126ABCC", VA = "0x126ABCC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0x126ACC0", Offset = "0x126ACC0", VA = "0x126ACC0")]
		private void DoFeetPivotActive()
		{
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0x126AD58", Offset = "0x126AD58", VA = "0x126AD58")]
		public SetAnimatorFeetPivotActive()
		{
		}
	}
	[Token(Token = "0x2000588")]
	[Tooltip("Sets the value of a float parameter")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1066")]
	[ActionCategory("Animator")]
	public class SetAnimatorFloat : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The float value to assign to the animator parameter")]
		public FsmFloat Value;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Optional: The time allowed to parameter to reach the value. Requires everyFrame Checked on")]
		public FsmFloat dampTime;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public new bool everyFrame;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Animator _animator;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _paramID;

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0x126AD60", Offset = "0x126AD60", VA = "0x126AD60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0x126ADB0", Offset = "0x126ADB0", VA = "0x126ADB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0x126B0B4", Offset = "0x126B0B4", VA = "0x126B0B4")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0x126B12C", Offset = "0x126B12C", VA = "0x126B12C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x126AF9C", Offset = "0x126AF9C", VA = "0x126AF9C")]
		private void SetParameter()
		{
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0x126B1A4", Offset = "0x126B1A4", VA = "0x126B1A4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0x126B278", Offset = "0x126B278", VA = "0x126B278", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0x126B27C", Offset = "0x126B27C", VA = "0x126B27C")]
		public SetAnimatorFloat()
		{
		}
	}
	[Token(Token = "0x2000589")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1067")]
	[Tooltip("Sets the position, rotation and weights of an IK goal. A GameObject can be set to control the position and rotation, or it can be manually expressed.")]
	[ActionCategory("Animator")]
	public class SetAnimatorIKGoal : FsmStateAction
	{
		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[CheckForComponent(typeof(PlayMakerAnimatorIKProxy))]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorIKProxy component are required")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The IK goal")]
		public AvatarIKGoal iKGoal;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The gameObject target of the ik goal")]
		public FsmGameObject goal;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The position of the ik goal. If Goal GameObject set, position is used as an offset from Goal")]
		public FsmVector3 position;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The rotation of the ik goal.If Goal GameObject set, rotation is used as an offset from Goal")]
		public FsmQuaternion rotation;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal)")]
		public FsmFloat positionWeight;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal)")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat rotationWeight;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayMakerAnimatorIKProxy _animatorProxy;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Animator _animator;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform _transform;

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0x126B280", Offset = "0x126B280", VA = "0x126B280", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0x126B3A4", Offset = "0x126B3A4", VA = "0x126B3A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0x126B914", Offset = "0x126B914", VA = "0x126B914")]
		public void OnAnimatorIKEvent(int layer)
		{
		}

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0x126B618", Offset = "0x126B618", VA = "0x126B618")]
		private void DoSetIKGoal()
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0x126B98C", Offset = "0x126B98C", VA = "0x126B98C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0x126BA60", Offset = "0x126BA60", VA = "0x126BA60")]
		public SetAnimatorIKGoal()
		{
		}
	}
	[Token(Token = "0x200058A")]
	[Tooltip("Sets the value of a int parameter")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1068")]
	[ActionCategory("Animator")]
	public class SetAnimatorInt : FsmStateActionAnimatorBase
	{
		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The animator parameter")]
		public FsmString parameter;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Int value to assign to the animator parameter")]
		public FsmInt Value;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public new bool everyFrame;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Animator _animator;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _paramID;

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0x126BA68", Offset = "0x126BA68", VA = "0x126BA68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0x126BAA8", Offset = "0x126BAA8", VA = "0x126BAA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0x126BD38", Offset = "0x126BD38", VA = "0x126BD38")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0x126BDB0", Offset = "0x126BDB0", VA = "0x126BDB0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0x126BC94", Offset = "0x126BC94", VA = "0x126BC94")]
		private void SetParameter()
		{
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0x126BE28", Offset = "0x126BE28", VA = "0x126BE28", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0x126BEFC", Offset = "0x126BEFC", VA = "0x126BEFC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x126BF00", Offset = "0x126BF00", VA = "0x126BF00")]
		public SetAnimatorInt()
		{
		}
	}
	[Token(Token = "0x200058B")]
	[ActionCategory("Animator")]
	[Tooltip("If true, additionnal layers affects the mass center")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1070")]
	public class SetAnimatorLayersAffectMassCenter : FsmStateAction
	{
		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true, additionnal layers affects the mass center")]
		public FsmBool affectMassCenter;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0x126BF04", Offset = "0x126BF04", VA = "0x126BF04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0x126BF2C", Offset = "0x126BF2C", VA = "0x126BF2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x126C020", Offset = "0x126C020", VA = "0x126C020")]
		private void SetAffectMassCenter()
		{
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0x126C0BC", Offset = "0x126C0BC", VA = "0x126C0BC")]
		public SetAnimatorLayersAffectMassCenter()
		{
		}
	}
	[Token(Token = "0x200058C")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1069")]
	[Tooltip("Sets the layer's current weight")]
	public class SetAnimatorLayerWeight : FsmStateAction
	{
		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The layer's index")]
		[RequiredField]
		public FsmInt layerIndex;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Sets the layer's current weight")]
		[RequiredField]
		public FsmFloat layerWeight;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator _animator;

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0x126C0C4", Offset = "0x126C0C4", VA = "0x126C0C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x126C104", Offset = "0x126C104", VA = "0x126C104", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0x126C2C0", Offset = "0x126C2C0", VA = "0x126C2C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0x126C20C", Offset = "0x126C20C", VA = "0x126C20C")]
		private void DoLayerWeight()
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0x126C2C4", Offset = "0x126C2C4", VA = "0x126C2C4")]
		public SetAnimatorLayerWeight()
		{
		}
	}
	[Token(Token = "0x200058D")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1071")]
	[Tooltip("Sets look at position and weights. A GameObject can be set to control the look at position, or it can be manually expressed.")]
	[ActionCategory("Animator")]
	public class SetAnimatorLookAt : FsmStateAction
	{
		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The target. An Animator component is required. Use a PlayMakerAnimatorIKProxy component to update the look at during the OnAnimatorIK() update.")]
		[RequiredField]
		[CheckForComponent(typeof(PlayMakerAnimatorIKProxy))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The gameObject to look at")]
		public FsmGameObject target;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The lookat position. If Target GameObject set, targetPosition is used as an offset from Target")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The global weight of the LookAt, multiplier for other parameters. Range from 0 to 1")]
		public FsmFloat weight;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("determines how much the body is involved in the LookAt. Range from 0 to 1")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat bodyWeight;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("determines how much the head is involved in the LookAt. Range from 0 to 1")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat headWeight;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("determines how much the eyes are involved in the LookAt. Range from 0 to 1")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat eyesWeight;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).")]
		public FsmFloat clampWeight;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlayMakerAnimatorIKProxy _animatorProxy;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Animator _animator;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform _transform;

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0x126C2CC", Offset = "0x126C2CC", VA = "0x126C2CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0x126C404", Offset = "0x126C404", VA = "0x126C404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0x126C9E8", Offset = "0x126C9E8", VA = "0x126C9E8")]
		public void OnAnimatorIKEvent(int layerIndex)
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0x126CA60", Offset = "0x126CA60", VA = "0x126CA60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0x126C630", Offset = "0x126C630", VA = "0x126C630")]
		private void DoSetLookAt()
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0x126CAD8", Offset = "0x126CAD8", VA = "0x126CAD8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0x126CBAC", Offset = "0x126CBAC", VA = "0x126CBAC")]
		public SetAnimatorLookAt()
		{
		}
	}
	[Token(Token = "0x200058E")]
	[Tooltip("Sets the playback speed of the Animator. 1 is normal playback speed")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1072")]
	public class SetAnimatorPlayBackSpeed : FsmStateAction
	{
		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Target. An Animator component is required")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true, automaticly stabilize feet during transition and blending")]
		public FsmFloat playBackSpeed;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0x126CBB4", Offset = "0x126CBB4", VA = "0x126CBB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0x126CBE4", Offset = "0x126CBE4", VA = "0x126CBE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x126CD84", Offset = "0x126CD84", VA = "0x126CD84", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x126CCEC", Offset = "0x126CCEC", VA = "0x126CCEC")]
		private void DoPlayBackSpeed()
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x126CD88", Offset = "0x126CD88", VA = "0x126CD88")]
		public SetAnimatorPlayBackSpeed()
		{
		}
	}
	[Token(Token = "0x200058F")]
	[ActionCategory("Animator")]
	[Tooltip("Sets the playback position in the recording buffer. When in playback mode (use AnimatorStartPlayback), this value is used for controlling the current playback position in the buffer (in seconds). The value can range between recordingStartTime and recordingStopTime ")]
	public class SetAnimatorPlayBackTime : FsmStateAction
	{
		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The playBack time")]
		public FsmFloat playbackTime;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x126CD90", Offset = "0x126CD90", VA = "0x126CD90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0x126CDC0", Offset = "0x126CDC0", VA = "0x126CDC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x126CF60", Offset = "0x126CF60", VA = "0x126CF60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x126CEC8", Offset = "0x126CEC8", VA = "0x126CEC8")]
		private void DoPlaybackTime()
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0x126CF64", Offset = "0x126CF64", VA = "0x126CF64")]
		public SetAnimatorPlayBackTime()
		{
		}
	}
	[Token(Token = "0x2000590")]
	[ActionCategory("Animator")]
	[Tooltip("Sets the playback speed of the Animator. 1 is normal playback speed")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1072")]
	public class SetAnimatorSpeed : FsmStateAction
	{
		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The playBack speed")]
		public FsmFloat speed;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful for changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _animator;

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0x126CF6C", Offset = "0x126CF6C", VA = "0x126CF6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0x126CF9C", Offset = "0x126CF9C", VA = "0x126CF9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0x126D13C", Offset = "0x126D13C", VA = "0x126D13C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0x126D0A4", Offset = "0x126D0A4", VA = "0x126D0A4")]
		private void DoPlaybackSpeed()
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0x126D140", Offset = "0x126D140", VA = "0x126D140")]
		public SetAnimatorSpeed()
		{
		}
	}
	[Token(Token = "0x2000591")]
	[Tooltip("If true, automaticaly stabilize feet during transition and blending")]
	[ActionCategory("Animator")]
	[HelpUrl("https://hutonggames.fogbugz.com/default.asp?W1074")]
	public class SetAnimatorStabilizeFeet : FsmStateAction
	{
		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Animator))]
		[Tooltip("The Target. An Animator component is required")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true, automaticaly stabilize feet during transition and blending")]
		public FsmBool stabilizeFeet;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0x126D148", Offset = "0x126D148", VA = "0x126D148", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0x126D170", Offset = "0x126D170", VA = "0x126D170", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0x126D264", Offset = "0x126D264", VA = "0x126D264")]
		private void DoStabilizeFeet()
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x126D300", Offset = "0x126D300", VA = "0x126D300")]
		public SetAnimatorStabilizeFeet()
		{
		}
	}
	[Token(Token = "0x2000592")]
	[ActionCategory("Animator")]
	[Tooltip("Sets an AvatarTarget and a targetNormalizedTime for the current state")]
	public class SetAnimatorTarget : FsmStateAction
	{
		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The target. An Animator component and a PlayMakerAnimatorProxy component are required")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The avatar target")]
		public AvatarTarget avatarTarget;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The current state Time that is queried")]
		public FsmFloat targetNormalizedTime;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful when changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerAnimatorMoveProxy _animatorProxy;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0x126D308", Offset = "0x126D308", VA = "0x126D308", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0x126D340", Offset = "0x126D340", VA = "0x126D340", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0x126D5B0", Offset = "0x126D5B0", VA = "0x126D5B0")]
		public void OnAnimatorMoveEvent()
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0x126D628", Offset = "0x126D628", VA = "0x126D628", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0x126D510", Offset = "0x126D510", VA = "0x126D510")]
		private void SetTarget()
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0x126D6A0", Offset = "0x126D6A0", VA = "0x126D6A0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x126D774", Offset = "0x126D774", VA = "0x126D774")]
		public SetAnimatorTarget()
		{
		}
	}
	[Token(Token = "0x2000593")]
	[ActionCategory("Animator")]
	[Tooltip("Sets a trigger parameter to active or inactive. Triggers are parameters that act mostly like booleans, but get resets to inactive when they are used in a transition.")]
	public class SetAnimatorTrigger : FsmStateAction
	{
		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The trigger name")]
		public FsmString trigger;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _paramID;

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0x126D77C", Offset = "0x126D77C", VA = "0x126D77C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0x126D7A4", Offset = "0x126D7A4", VA = "0x126D7A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0x126D898", Offset = "0x126D898", VA = "0x126D898")]
		private void SetTrigger()
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x126D934", Offset = "0x126D934", VA = "0x126D934")]
		public SetAnimatorTrigger()
		{
		}
	}
	[Token(Token = "0x2000594")]
	[ActionCategory(ActionCategory.Animator)]
	[Tooltip("Syncs the value of an Animator Bool parameter to the current state. Sets the parameter to true when entering the state and false when exiting. For example, you can setup an animator with one animation per state with transition conditions based on the Bool parameter, then sync animator states with this FSM's states using this action.")]
	public class SyncAnimatorBoolToState : ComponentAction<Animator>
	{
		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the Animator component.")]
		[CheckForComponent(typeof(Animator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The bool parameter to sync. Set to true when the state is entered and false when the state exits.")]
		[RequiredField]
		[UIHint(UIHint.AnimatorBool)]
		public FsmString parameter;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int paramID;

		[Token(Token = "0x1700035D")]
		private Animator animator
		{
			[Token(Token = "0x6001DC8")]
			[Address(RVA = "0x126D93C", Offset = "0x126D93C", VA = "0x126D93C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0x126D944", Offset = "0x126D944", VA = "0x126D944", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0x126D94C", Offset = "0x126D94C", VA = "0x126D94C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x126D980", Offset = "0x126D980", VA = "0x126D980", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x126DA40", Offset = "0x126DA40", VA = "0x126DA40", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0x126DAE0", Offset = "0x126DAE0", VA = "0x126DAE0")]
		public SyncAnimatorBoolToState()
		{
		}
	}
	[Token(Token = "0x2000595")]
	[Tooltip("Quits the player application.")]
	[ActionCategory(ActionCategory.Application)]
	public class ApplicationQuit : FsmStateAction
	{
		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("An optional exit code to return when the player application terminates on Windows, Mac and Linux. Defaults to 0.")]
		public FsmInt exitCode;

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0x126DB28", Offset = "0x126DB28", VA = "0x126DB28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0x126DB50", Offset = "0x126DB50", VA = "0x126DB50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0x126DB84", Offset = "0x126DB84", VA = "0x126DB84")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x2000596")]
	[ActionCategory(ActionCategory.Application)]
	[Tooltip("Sets if the Application should play in the background. Useful for servers or testing network games on one machine.")]
	public class ApplicationRunInBackground : FsmStateAction
	{
		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Should the Application play in the background.")]
		public FsmBool runInBackground;

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0x126DB8C", Offset = "0x126DB8C", VA = "0x126DB8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0x126DBB4", Offset = "0x126DBB4", VA = "0x126DBB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x126DBEC", Offset = "0x126DBEC", VA = "0x126DBEC")]
		public ApplicationRunInBackground()
		{
		}
	}
	[Token(Token = "0x2000597")]
	[Tooltip("Gets the Height of the Screen in pixels.")]
	[ActionCategory(ActionCategory.Application)]
	public class GetScreenHeight : FsmStateAction
	{
		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Store the screen height in a Float Variable")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeScreenHeight;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0x126DBF4", Offset = "0x126DBF4", VA = "0x126DBF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0x126DC18", Offset = "0x126DC18", VA = "0x126DC18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x126DC68", Offset = "0x126DC68", VA = "0x126DC68", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x126DC90", Offset = "0x126DC90", VA = "0x126DC90")]
		public GetScreenHeight()
		{
		}
	}
	[Token(Token = "0x2000598")]
	[Tooltip("Gets the Width of the Screen in pixels.")]
	[ActionCategory(ActionCategory.Application)]
	public class GetScreenWidth : FsmStateAction
	{
		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen width in a Float Variable")]
		[RequiredField]
		public FsmFloat storeScreenWidth;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x126DC98", Offset = "0x126DC98", VA = "0x126DC98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x126DCBC", Offset = "0x126DCBC", VA = "0x126DCBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x126DD0C", Offset = "0x126DD0C", VA = "0x126DD0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0x126DD34", Offset = "0x126DD34", VA = "0x126DD34")]
		public GetScreenWidth()
		{
		}
	}
	[Token(Token = "0x2000599")]
	[ActionCategory(ActionCategory.Application)]
	[Tooltip("Sets the Screen Width and Height.")]
	public class SetScreenResolution : FsmStateAction
	{
		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Screen Width")]
		public FsmInt width;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Screen Height")]
		public FsmInt height;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Show Fullscreen")]
		public FsmBool fullscreen;

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0x126DD3C", Offset = "0x126DD3C", VA = "0x126DD3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0x126DDEC", Offset = "0x126DDEC", VA = "0x126DDEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0x126DE64", Offset = "0x126DE64", VA = "0x126DE64")]
		public SetScreenResolution()
		{
		}
	}
	[Token(Token = "0x200059A")]
	[ActionCategory(ActionCategory.Application)]
	[Tooltip("Saves a Screenshot. NOTE: Does nothing in Web Player. On Android, the resulting screenshot is available some time later.")]
	public class TakeScreenshot : FsmStateAction
	{
		[Token(Token = "0x200059B")]
		public enum Destination
		{
			[Token(Token = "0x40019F5")]
			MyPictures,
			[Token(Token = "0x40019F6")]
			PersistentDataPath,
			[Token(Token = "0x40019F7")]
			CustomPath
		}

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Where to save the screenshot.")]
		public Destination destination;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Path used with Custom Path Destination option.")]
		public FsmString customPath;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The filename for the screenshot.")]
		[RequiredField]
		public FsmString filename;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Add an auto-incremented number to the filename.")]
		public FsmBool autoNumber;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Factor by which to increase resolution.")]
		public FsmInt superSize;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Log saved file info in Unity console.")]
		public FsmBool debugLog;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int screenshotCount;

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x126DE6C", Offset = "0x126DE6C", VA = "0x126DE6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x126DEF8", Offset = "0x126DEF8", VA = "0x126DEF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x126E16C", Offset = "0x126E16C", VA = "0x126E16C")]
		public TakeScreenshot()
		{
		}
	}
	[Token(Token = "0x200059C")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Add an item to the end of an Array.")]
	public class ArrayAdd : FsmStateAction
	{
		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable to use.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[MatchElementType("array")]
		[Tooltip("Item to add.")]
		public FsmVar value;

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0x126E174", Offset = "0x126E174", VA = "0x126E174", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0x126E19C", Offset = "0x126E19C", VA = "0x126E19C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x126E1B8", Offset = "0x126E1B8", VA = "0x126E1B8")]
		private void DoAddValue()
		{
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x126E244", Offset = "0x126E244", VA = "0x126E244")]
		public ArrayAdd()
		{
		}
	}
	[Token(Token = "0x200059D")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Add multiple items to the end of an array.\nNOTE: There is a bug in this action when resizing Variables. It will be fixed in the next update.")]
	public class ArrayAddRange : FsmStateAction
	{
		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The items to add to the array.")]
		[MatchElementType("array")]
		[RequiredField]
		public FsmVar[] variables;

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x126E24C", Offset = "0x126E24C", VA = "0x126E24C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0x126E2B4", Offset = "0x126E2B4", VA = "0x126E2B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0x126E2D0", Offset = "0x126E2D0", VA = "0x126E2D0")]
		private void DoAddRange()
		{
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0x126E3C0", Offset = "0x126E3C0", VA = "0x126E3C0")]
		public ArrayAddRange()
		{
		}
	}
	[Token(Token = "0x200059E")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Sets all items in an Array to their default value: 0, empty string, false, or null depending on their type. Optionally defines a reset value to use.")]
	public class ArrayClear : FsmStateAction
	{
		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable to clear.")]
		[UIHint(UIHint.Variable)]
		public FsmArray array;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional reset value. Leave as None for default value.")]
		[MatchElementType("array")]
		public FsmVar resetValue;

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x126E3C8", Offset = "0x126E3C8", VA = "0x126E3C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0x126E448", Offset = "0x126E448", VA = "0x126E448", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x126E518", Offset = "0x126E518", VA = "0x126E518")]
		public ArrayClear()
		{
		}
	}
	[Token(Token = "0x200059F")]
	[Tooltip("Tests if 2 Array Variables have the same values.")]
	[ActionCategory(ActionCategory.Logic)]
	public class ArrayCompare : FsmStateAction
	{
		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The first Array Variable to test.")]
		public FsmArray array1;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The second Array Variable to test.")]
		public FsmArray array2;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the 2 arrays have the same values.")]
		public FsmEvent SequenceEqual;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the 2 arrays have different values.")]
		public FsmEvent SequenceNotEqual;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0x126E520", Offset = "0x126E520", VA = "0x126E520", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0x126E568", Offset = "0x126E568", VA = "0x126E568", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0x126E594", Offset = "0x126E594", VA = "0x126E594")]
		private void DoSequenceEqual()
		{
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0x126E660", Offset = "0x126E660", VA = "0x126E660")]
		private bool TestSequenceEqual(object[] _array1, object[] _array2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0x126E720", Offset = "0x126E720", VA = "0x126E720")]
		public ArrayCompare()
		{
		}
	}
	[Token(Token = "0x20005A0")]
	[Tooltip("Check if an Array contains a value. Optionally get its index.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayContains : FsmStateAction
	{
		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable to use.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchElementType("array")]
		[Tooltip("The value to check against in the array.")]
		[RequiredField]
		public FsmVar value;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The index of the value in the array.")]
		[ActionSection("Result")]
		public FsmInt index;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store in a bool whether it contains that element or not.")]
		public FsmBool isContained;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if the array contains that element.")]
		public FsmEvent isContainedEvent;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if the array does not contain that element.")]
		public FsmEvent isNotContainedEvent;

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0x126E728", Offset = "0x126E728", VA = "0x126E728", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0x126E790", Offset = "0x126E790", VA = "0x126E790", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0x126E7AC", Offset = "0x126E7AC", VA = "0x126E7AC")]
		private void DoCheckContainsValue()
		{
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0x126E9B4", Offset = "0x126E9B4", VA = "0x126E9B4")]
		public ArrayContains()
		{
		}
	}
	[Token(Token = "0x20005A2")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Delete the item at an index. Index must be between 0 and the number of items -1. First item is index 0.")]
	public class ArrayDeleteAt : FsmStateAction
	{
		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to trigger if the index is out of range.")]
		[ActionSection("Result")]
		public FsmEvent indexOutOfRangeEvent;

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0x126EA54", Offset = "0x126EA54", VA = "0x126EA54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0x126EA8C", Offset = "0x126EA8C", VA = "0x126EA8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0x126EAA8", Offset = "0x126EAA8", VA = "0x126EAA8")]
		private void DoDeleteAt()
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0x126EC08", Offset = "0x126EC08", VA = "0x126EC08")]
		public ArrayDeleteAt()
		{
		}
	}
	[Token(Token = "0x20005A3")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Loop through all items in an {{Array}} and run an FSM Template on each item.\\nNOTE: This is an advanced/experimental action, still in beta. Please report any issues you run into.")]
	public class ArrayForEach : RunFSMAction
	{
		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Array to iterate through.")]
		public FsmArray array;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the item in a variable")]
		[UIHint(UIHint.Variable)]
		[MatchElementType("array")]
		[HideTypeFilter]
		public FsmVar storeItem;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Run FSM")]
		[Tooltip("The Template to run on each item in the array.<ul><li>The Template should expose a variable in the Inspector.</li><li>Use this Input variable to input the stored item.</li><li>The Template should use {{Finish FSM}} when finished.</li></ul>")]
		public FsmTemplateControl fsmTemplateControl;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send after iterating through all items in the Array.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int currentIndex;

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0x126EC10", Offset = "0x126EC10", VA = "0x126EC10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0x126EC9C", Offset = "0x126EC9C", VA = "0x126EC9C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0x126ED5C", Offset = "0x126ED5C", VA = "0x126ED5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0x126EE0C", Offset = "0x126EE0C", VA = "0x126EE0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0x126EE68", Offset = "0x126EE68", VA = "0x126EE68", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0x126EEB4", Offset = "0x126EEB4", VA = "0x126EEB4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0x126EE58", Offset = "0x126EE58", VA = "0x126EE58")]
		private void StartNextFsm()
		{
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0x126ED7C", Offset = "0x126ED7C", VA = "0x126ED7C")]
		private void StartFsm()
		{
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0x126EF00", Offset = "0x126EF00", VA = "0x126EF00")]
		private void DoStartFsm()
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0x126EFB4", Offset = "0x126EFB4", VA = "0x126EFB4", Slot = "62")]
		protected override void CheckIfFinished()
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0x126EFB8", Offset = "0x126EFB8", VA = "0x126EFB8")]
		public ArrayForEach()
		{
		}
	}
	[Token(Token = "0x20005A4")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Get a value at an index. Index must be between 0 and the number of items -1. First item is index 0.")]
	public class ArrayGet : FsmStateAction
	{
		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[MatchElementType("array")]
		[Tooltip("Store the value in a variable. NOTE: must be of the same type as the array.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVar storeValue;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The event to trigger if the index is out of range.")]
		[ActionSection("Events")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0x126F030", Offset = "0x126F030", VA = "0x126F030", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0x126F07C", Offset = "0x126F07C", VA = "0x126F07C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0x126F194", Offset = "0x126F194", VA = "0x126F194", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x126F0A8", Offset = "0x126F0A8", VA = "0x126F0A8")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x126F198", Offset = "0x126F198", VA = "0x126F198")]
		public ArrayGet()
		{
		}
	}
	[Token(Token = "0x20005A5")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Each time this action is called it gets the next item from a Array. This lets you quickly loop through all the items of an array to perform actions on them.")]
	public class ArrayGetNext : FsmStateAction
	{
		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("From where to start iteration, leave as 0 to start from the beginning")]
		public FsmInt startIndex;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("When to end iteration, leave as 0 to iterate until the end")]
		public FsmInt endIndex;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send to get the next item.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		[UIHint(UIHint.Variable)]
		public FsmBool resetFlag;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send when there are no more items.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the current array item in a variable of the same type.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[MatchElementType("array")]
		public FsmVar result;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current array index in an int variable.")]
		public FsmInt currentIndex;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int nextItemIndex;

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0x126F1A0", Offset = "0x126F1A0", VA = "0x126F1A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0x126F228", Offset = "0x126F228", VA = "0x126F228", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0x126F2B4", Offset = "0x126F2B4", VA = "0x126F2B4")]
		private void DoGetNextItem()
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0x126F3F8", Offset = "0x126F3F8", VA = "0x126F3F8")]
		public ArrayGetNext()
		{
		}
	}
	[Token(Token = "0x20005A6")]
	[Tooltip("Get a Random item from an Array.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayGetRandom : FsmStateAction
	{
		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array to use.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the value in a variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[MatchElementType("array")]
		public FsmVar storeValue;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the value in the array.")]
		[UIHint(UIHint.Variable)]
		public FsmInt index;

		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Don't get the same item twice in a row.")]
		public FsmBool noRepeat;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int randomIndex;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int lastIndex;

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0x126F400", Offset = "0x126F400", VA = "0x126F400", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x126F458", Offset = "0x126F458", VA = "0x126F458", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0x126F588", Offset = "0x126F588", VA = "0x126F588", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0x126F484", Offset = "0x126F484", VA = "0x126F484")]
		private void DoGetRandomValue()
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0x126F58C", Offset = "0x126F58C", VA = "0x126F58C")]
		public ArrayGetRandom()
		{
		}
	}
	[Token(Token = "0x20005A7")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Insert an item into an Array at the specified index.")]
	public class ArrayInsert : FsmStateAction
	{
		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Array Variable to use.")]
		[UIHint(UIHint.Variable)]
		public FsmArray array;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[MatchElementType("array")]
		[Tooltip("Item to add.")]
		public FsmVar value;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index to insert at.\n0 = first, 1 = second...")]
		public FsmInt atIndex;

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0x126F59C", Offset = "0x126F59C", VA = "0x126F59C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0x126F5D4", Offset = "0x126F5D4", VA = "0x126F5D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0x126F5F0", Offset = "0x126F5F0", VA = "0x126F5F0")]
		private void DoInsertValue()
		{
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0x126F65C", Offset = "0x126F65C", VA = "0x126F65C")]
		public ArrayInsert()
		{
		}
	}
	[Token(Token = "0x20005A8")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Gets the number of items in an Array.")]
	public class ArrayLength : FsmStateAction
	{
		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmArray array;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the length in an {{Int Variable}}.")]
		[UIHint(UIHint.Variable)]
		public FsmInt length;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the array is changing and you're waiting for a particular length.")]
		public bool everyFrame;

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0x126F664", Offset = "0x126F664", VA = "0x126F664", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x126F694", Offset = "0x126F694", VA = "0x126F694", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x126F6E8", Offset = "0x126F6E8", VA = "0x126F6E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x126F718", Offset = "0x126F718", VA = "0x126F718")]
		public ArrayLength()
		{
		}
	}
	[Token(Token = "0x20005A9")]
	[Tooltip("Remove an item from an array.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayRemove : FsmStateAction
	{
		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Item to remove.")]
		[RequiredField]
		[MatchElementType("array")]
		public FsmVar value;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove all instances of the value. Otherwise removes only the first instance.")]
		public FsmBool allMatches;

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x126F720", Offset = "0x126F720", VA = "0x126F720", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x126F7B0", Offset = "0x126F7B0", VA = "0x126F7B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x126F7CC", Offset = "0x126F7CC", VA = "0x126F7CC")]
		private void DoRemoveValue()
		{
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x126F96C", Offset = "0x126F96C", VA = "0x126F96C")]
		public ArrayRemove()
		{
		}
	}
	[Token(Token = "0x20005AA")]
	[Tooltip("Remove all items from an Array.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayRemoveAll : FsmStateAction
	{
		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to remove all items from.")]
		public FsmArray array;

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0x126F9A0", Offset = "0x126F9A0", VA = "0x126F9A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0x126F9AC", Offset = "0x126F9AC", VA = "0x126F9AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0x126F9D8", Offset = "0x126F9D8", VA = "0x126F9D8")]
		public ArrayRemoveAll()
		{
		}
	}
	[Token(Token = "0x20005AB")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Resize an array.")]
	public class ArrayResize : FsmStateAction
	{
		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Array Variable to resize")]
		[UIHint(UIHint.Variable)]
		public FsmArray array;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new size of the array.")]
		public FsmInt newSize;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to trigger if the new size is out of range")]
		public FsmEvent sizeOutOfRangeEvent;

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0x126F9E0", Offset = "0x126F9E0", VA = "0x126F9E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0x126FACC", Offset = "0x126FACC", VA = "0x126FACC")]
		public ArrayResize()
		{
		}
	}
	[Token(Token = "0x20005AC")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Reverse the order of items in an Array.")]
	public class ArrayReverse : FsmStateAction
	{
		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Array to reverse.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmArray array;

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0x126FAD4", Offset = "0x126FAD4", VA = "0x126FAD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x126FAE0", Offset = "0x126FAE0", VA = "0x126FAE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x126FBD4", Offset = "0x126FBD4", VA = "0x126FBD4")]
		public ArrayReverse()
		{
		}
	}
	[Token(Token = "0x20005AD")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Set the value at an index. Index must be between 0 and the number of items -1. First item is index 0.")]
	public class ArraySet : FsmStateAction
	{
		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set the value of the array at the specified index.")]
		[RequiredField]
		[MatchElementType("array")]
		public FsmVar value;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Events")]
		[Tooltip("The event to trigger if the index is out of range")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x126FBDC", Offset = "0x126FBDC", VA = "0x126FBDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0x126FC28", Offset = "0x126FC28", VA = "0x126FC28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0x126FD40", Offset = "0x126FD40", VA = "0x126FD40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0x126FC54", Offset = "0x126FC54", VA = "0x126FC54")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0x126FD44", Offset = "0x126FD44", VA = "0x126FD44")]
		public ArraySet()
		{
		}
	}
	[Token(Token = "0x20005AE")]
	[Tooltip("Shuffle values in an array. Optionally set a start index and range to shuffle only part of the array.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayShuffle : FsmStateAction
	{
		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array to shuffle.")]
		public FsmArray array;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional start Index for the shuffling. Leave it to none or 0 for no effect")]
		public FsmInt startIndex;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional range for the shuffling, starting at the start index if greater than 0. Leave it to none or 0 for no effect, it will shuffle the whole array")]
		public FsmInt shufflingRange;

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0x126FD4C", Offset = "0x126FD4C", VA = "0x126FD4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x126FE00", Offset = "0x126FE00", VA = "0x126FE00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x1270008", Offset = "0x1270008", VA = "0x1270008")]
		public ArrayShuffle()
		{
		}
	}
	[Token(Token = "0x20005AF")]
	[Tooltip("Sort items in an Array.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArraySort : FsmStateAction
	{
		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array to sort.")]
		public FsmArray array;

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x1270010", Offset = "0x1270010", VA = "0x1270010", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x127001C", Offset = "0x127001C", VA = "0x127001C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x1270110", Offset = "0x1270110", VA = "0x1270110")]
		public ArraySort()
		{
		}
	}
	[Token(Token = "0x20005B0")]
	[ActionCategory(ActionCategory.Array)]
	[Tooltip("Transfer a value from one array to another, basically a copy/cut paste action on steroids.")]
	[NoActionTargets]
	public class ArrayTransferValue : FsmStateAction
	{
		[Token(Token = "0x20005B1")]
		public enum ArrayTransferType
		{
			[Token(Token = "0x4001A47")]
			Copy,
			[Token(Token = "0x4001A48")]
			Cut,
			[Token(Token = "0x4001A49")]
			nullify
		}

		[Token(Token = "0x20005B2")]
		public enum ArrayPasteType
		{
			[Token(Token = "0x4001A4B")]
			AsFirstItem,
			[Token(Token = "0x4001A4C")]
			AsLastItem,
			[Token(Token = "0x4001A4D")]
			InsertAtSameIndex,
			[Token(Token = "0x4001A4E")]
			ReplaceAtSameIndex
		}

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable source.")]
		public FsmArray arraySource;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable target.")]
		public FsmArray arrayTarget;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index to transfer.")]
		[MatchFieldType("array")]
		public FsmInt indexToTransfer;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Transfer Options")]
		[Tooltip("Copy Options.")]
		[ObjectType(typeof(ArrayTransferType))]
		public FsmEnum copyType;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Paste Options")]
		[ObjectType(typeof(ArrayPasteType))]
		public FsmEnum pasteType;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if the array source does not contains that element.")]
		[ActionSection("Result")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0x1270118", Offset = "0x1270118", VA = "0x1270118", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0x12701F8", Offset = "0x12701F8", VA = "0x12701F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0x1270214", Offset = "0x1270214", VA = "0x1270214")]
		private void DoTransferValue()
		{
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0x127071C", Offset = "0x127071C", VA = "0x127071C")]
		public ArrayTransferValue()
		{
		}
	}
	[Token(Token = "0x20005B3")]
	[ActionCategory(ActionCategory.Array)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Obsolete("This action was wip and accidentally released.")]
	[Tooltip("Set an item in an Array Variable in another FSM.")]
	public class FsmArraySet : FsmStateAction
	{
		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object.")]
		public FsmString fsmName;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmString setValue;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x1270724", Offset = "0x1270724", VA = "0x1270724", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0x127079C", Offset = "0x127079C", VA = "0x127079C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0x12707C8", Offset = "0x12707C8", VA = "0x12707C8")]
		private void DoSetFsmString()
		{
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x12709D4", Offset = "0x12709D4", VA = "0x12709D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0x12709D8", Offset = "0x12709D8", VA = "0x12709D8")]
		public FsmArraySet()
		{
		}
	}
	[Token(Token = "0x20005B4")]
	[Tooltip("Copy an Array Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmArray : BaseFsmVariableAction
	{
		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object.")]
		public FsmString fsmName;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[UIHint(UIHint.FsmArray)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[Tooltip("Get the content of the array variable.")]
		[UIHint(UIHint.Variable)]
		public FsmArray storeValue;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("If true, makes copies. if false, values share the same reference and editing one array item value will affect the source and vice versa. Warning, this only affect the current items of the source array. Adding or removing items doesn't affect other FsmArrays.")]
		public bool copyValues;

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x12719E0", Offset = "0x12719E0", VA = "0x12719E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x1271A74", Offset = "0x1271A74", VA = "0x1271A74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x1271A90", Offset = "0x1271A90", VA = "0x1271A90")]
		private void DoSetFsmArrayCopy()
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x1271E60", Offset = "0x1271E60", VA = "0x1271E60")]
		public GetFsmArray()
		{
		}
	}
	[Token(Token = "0x20005B5")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Gets an item in an Array Variable in another FSM.")]
	public class GetFsmArrayItem : BaseFsmVariableIndexAction
	{
		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[UIHint(UIHint.FsmArray)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the value of the array at the specified index.")]
		public FsmVar storeValue;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x1271E68", Offset = "0x1271E68", VA = "0x1271E68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x1271EE0", Offset = "0x1271EE0", VA = "0x1271EE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x1271F0C", Offset = "0x1271F0C", VA = "0x1271F0C")]
		private void DoGetFsmArray()
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x1272110", Offset = "0x1272110", VA = "0x1272110", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x1272114", Offset = "0x1272114", VA = "0x1272114")]
		public GetFsmArrayItem()
		{
		}
	}
	[Token(Token = "0x20005B6")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Copy an Array Variable in another FSM.")]
	public class SetFsmArray : BaseFsmVariableAction
	{
		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object.")]
		public FsmString fsmName;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[UIHint(UIHint.FsmArray)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set the content of the array variable.")]
		[RequiredField]
		public FsmArray setValue;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("If true, makes copies. if false, values share the same reference and editing one array item value will affect the source and vice versa. Warning, this only affect the current items of the source array. Adding or removing items doesn't affect other FsmArrays.")]
		public bool copyValues;

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x127211C", Offset = "0x127211C", VA = "0x127211C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x12721B0", Offset = "0x12721B0", VA = "0x12721B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x12721CC", Offset = "0x12721CC", VA = "0x12721CC")]
		private void DoSetFsmArrayCopy()
		{
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x1272590", Offset = "0x1272590", VA = "0x1272590")]
		public SetFsmArray()
		{
		}
	}
	[Token(Token = "0x20005B7")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set an item in an Array Variable in another FSM.")]
	public class SetFsmArrayItem : BaseFsmVariableIndexAction
	{
		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[UIHint(UIHint.FsmArray)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The index into the array.")]
		public FsmInt index;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[Tooltip("Set the value of the array at the specified index.")]
		public FsmVar value;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x1272598", Offset = "0x1272598", VA = "0x1272598", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x1272610", Offset = "0x1272610", VA = "0x1272610", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x127263C", Offset = "0x127263C", VA = "0x127263C")]
		private void DoSetFsmArray()
		{
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0x1272854", Offset = "0x1272854", VA = "0x1272854", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0x1272858", Offset = "0x1272858", VA = "0x1272858")]
		public SetFsmArrayItem()
		{
		}
	}
	[Token(Token = "0x20005B8")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Mute/un-mute the Audio Clip played by an Audio Source component on a Game Object.")]
	public class AudioMute : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(AudioSource))]
		[RequiredField]
		[Tooltip("The GameObject with an Audio Source component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Check to mute, uncheck to un-mute.")]
		public FsmBool mute;

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0x1272860", Offset = "0x1272860", VA = "0x1272860", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0x1272894", Offset = "0x1272894", VA = "0x1272894", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0x1272954", Offset = "0x1272954", VA = "0x1272954")]
		public AudioMute()
		{
		}
	}
	[Token(Token = "0x20005B9")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Pauses playing the Audio Clip played by an Audio Source component on a Game Object.")]
	public class AudioPause : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("The GameObject with an Audio Source component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x127299C", Offset = "0x127299C", VA = "0x127299C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x12729A8", Offset = "0x12729A8", VA = "0x12729A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x1272A48", Offset = "0x1272A48", VA = "0x1272A48")]
		public AudioPause()
		{
		}
	}
	[Token(Token = "0x20005BA")]
	[Tooltip("Plays the AudioClip defined in an Audio Source component on a GameObject. Set the clip using {{Set Audio Clip}}. Optionally plays a one shot Audio Clip.")]
	[ActionTarget(typeof(AudioClip), "oneShotClip", false)]
	[ActionTarget(typeof(AudioSource), "gameObject", false)]
	[ActionCategory(ActionCategory.Audio)]
	public class AudioPlay : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with an AudioSource component.")]
		[CheckForComponent(typeof(AudioSource))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Volume to play the sound at. Can be modified with {{Set Audio Volume}}.")]
		public FsmFloat volume;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optionally play a 'one shot' AudioClip. NOTE: Volume cannot be adjusted while playing a 'one shot' AudioClip.")]
		[ObjectType(typeof(AudioClip))]
		public FsmObject oneShotClip;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Wait until the end of the clip to send the Finish Event. Set to false to send the finish event immediately.")]
		public FsmBool WaitForEndOfClip;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Send this event when the sound is finished playing. NOTE: currently also sent when the sound is paused...")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x1272A90", Offset = "0x1272A90", VA = "0x1272A90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x1272B00", Offset = "0x1272B00", VA = "0x1272B00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0x1272D40", Offset = "0x1272D40", VA = "0x1272D40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0x1272EB8", Offset = "0x1272EB8", VA = "0x1272EB8")]
		public AudioPlay()
		{
		}
	}
	[Token(Token = "0x20005BB")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Stops playing the Audio Clip played by an Audio Source component on a Game Object.")]
	public class AudioStop : ComponentAction<AudioSource>
	{
		[Token(Token = "0x20005BC")]
		[CompilerGenerated]
		private sealed class <VolumeFade>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float fadeDuration;

			[Token(Token = "0x4001A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioSource audioSource;

			[Token(Token = "0x4001A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioStop <>4__this;

			[Token(Token = "0x4001A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float endVolume;

			[Token(Token = "0x4001A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <startTime>5__2;

			[Token(Token = "0x1700035E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E62")]
				[Address(RVA = "0x12732A8", Offset = "0x12732A8", VA = "0x12732A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E64")]
				[Address(RVA = "0x12732F0", Offset = "0x12732F0", VA = "0x12732F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E5F")]
			[Address(RVA = "0x12730F8", Offset = "0x12730F8", VA = "0x12730F8")]
			[DebuggerHidden]
			public <VolumeFade>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001E60")]
			[Address(RVA = "0x1273168", Offset = "0x1273168", VA = "0x1273168", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E61")]
			[Address(RVA = "0x127316C", Offset = "0x127316C", VA = "0x127316C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E63")]
			[Address(RVA = "0x12732B0", Offset = "0x12732B0", VA = "0x12732B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an AudioSource component.")]
		[CheckForComponent(typeof(AudioSource))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Audio Stop can make a hard pop sound. A short fade out can fix this glitch.")]
		public FsmFloat fadeTime;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float volume;

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x1272F00", Offset = "0x1272F00", VA = "0x1272F00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0x1272F28", Offset = "0x1272F28", VA = "0x1272F28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0x1273050", Offset = "0x1273050", VA = "0x1273050")]
		[IteratorStateMachine(typeof(<VolumeFade>d__5))]
		private IEnumerator VolumeFade(AudioSource audioSource, float endVolume, float fadeDuration)
		{
			return null;
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x1273120", Offset = "0x1273120", VA = "0x1273120")]
		public AudioStop()
		{
		}
	}
	[Token(Token = "0x20005BD")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Plays a Random Audio Clip at a position defined by a Game Object or a Vector3. If a position is defined, it takes priority over the game object. You can set the relative weight of the clips to control how often they are selected.")]
	public class PlayRandomSound : FsmStateAction
	{
		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to play the sound.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Use world position instead of GameObject.")]
		public FsmVector3 position;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[CompoundArray("Audio Clips", "Audio Clip", "Weight")]
		[ObjectType(typeof(AudioClip))]
		[Tooltip("A possible Audio Clip choice.")]
		public FsmObject[] audioClips;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this sound being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Volume to play the sound at.")]
		public FsmFloat volume;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Don't play the same sound twice in a row")]
		public FsmBool noRepeat;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int randomIndex;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int lastIndex;

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0x12732F8", Offset = "0x12732F8", VA = "0x12732F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0x12734F8", Offset = "0x12734F8", VA = "0x12734F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0x1273514", Offset = "0x1273514", VA = "0x1273514")]
		private void DoPlayRandomClip()
		{
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x1273738", Offset = "0x1273738", VA = "0x1273738")]
		public PlayRandomSound()
		{
		}
	}
	[Token(Token = "0x20005BE")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Plays an Audio Clip at a position defined by a Game Object or Vector3. If a position is defined, it takes priority over the game object. This action doesn't require an Audio Source component, but offers less control than Audio actions.")]
	public class PlaySound : FsmStateAction
	{
		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A Game Object that defines a position.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A Vector3 value that defines a world position (overrides Game Object).")]
		public FsmVector3 position;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Title("Audio Clip")]
		[RequiredField]
		[Tooltip("The audio clip to play.")]
		[ObjectType(typeof(AudioClip))]
		public FsmObject clip;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Volume to play sound at.")]
		public FsmFloat volume;

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0x1273774", Offset = "0x1273774", VA = "0x1273774", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0x1273820", Offset = "0x1273820", VA = "0x1273820", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0x127383C", Offset = "0x127383C", VA = "0x127383C")]
		private void DoPlaySound()
		{
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0x12739F4", Offset = "0x12739F4", VA = "0x12739F4")]
		public PlaySound()
		{
		}
	}
	[Token(Token = "0x20005BF")]
	[Tooltip("Sets the Audio Clip played by the AudioSource component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class SetAudioClip : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("A GameObject with an AudioSource component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(AudioClip))]
		[Tooltip("The AudioClip to assign to the AudioSource.")]
		public FsmObject audioClip;

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x1273A28", Offset = "0x1273A28", VA = "0x1273A28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x1273A50", Offset = "0x1273A50", VA = "0x1273A50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x1273B3C", Offset = "0x1273B3C", VA = "0x1273B3C")]
		public SetAudioClip()
		{
		}
	}
	[Token(Token = "0x20005C0")]
	[Tooltip("Sets looping on the AudioSource component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class SetAudioLoop : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(AudioSource))]
		[Tooltip("A GameObject with an AudioSource component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the Audio Source looping.")]
		public FsmBool loop;

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x1273B84", Offset = "0x1273B84", VA = "0x1273B84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x1273BB8", Offset = "0x1273BB8", VA = "0x1273BB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0x1273C78", Offset = "0x1273C78", VA = "0x1273C78")]
		public SetAudioLoop()
		{
		}
	}
	[Token(Token = "0x20005C1")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Sets the Pitch of the Audio Clip played by the AudioSource component on a Game Object.")]
	public class SetAudioPitch : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A GameObject with an AudioSource component.")]
		[CheckForComponent(typeof(AudioSource))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the pitch.")]
		public FsmFloat pitch;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if you're driving pitch with a float variable.")]
		public bool everyFrame;

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x1273CC0", Offset = "0x1273CC0", VA = "0x1273CC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x1273CFC", Offset = "0x1273CFC", VA = "0x1273CFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x1273DF8", Offset = "0x1273DF8", VA = "0x1273DF8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x1273D28", Offset = "0x1273D28", VA = "0x1273D28")]
		private void DoSetAudioPitch()
		{
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0x1273DFC", Offset = "0x1273DFC", VA = "0x1273DFC")]
		public SetAudioPitch()
		{
		}
	}
	[Token(Token = "0x20005C2")]
	[Tooltip("Sets the Volume of the Audio Clip played by the AudioSource component on a Game Object.")]
	[ActionCategory(ActionCategory.Audio)]
	public class SetAudioVolume : ComponentAction<AudioSource>
	{
		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("A GameObject with an AudioSource component.")]
		[CheckForComponent(typeof(AudioSource))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the volume.")]
		public FsmFloat volume;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if you're driving the volume with a float variable.")]
		public bool everyFrame;

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x1273E44", Offset = "0x1273E44", VA = "0x1273E44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0x1273E80", Offset = "0x1273E80", VA = "0x1273E80", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0x1273F7C", Offset = "0x1273F7C", VA = "0x1273F7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0x1273EAC", Offset = "0x1273EAC", VA = "0x1273EAC")]
		private void DoSetAudioVolume()
		{
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0x1273F80", Offset = "0x1273F80", VA = "0x1273F80")]
		public SetAudioVolume()
		{
		}
	}
	[Token(Token = "0x20005C3")]
	[ActionCategory(ActionCategory.Audio)]
	[Tooltip("Sets the global sound volume.")]
	public class SetGameVolume : FsmStateAction
	{
		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Volume level (0-1).")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat volume;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Perform this action every frame. Useful if Volume is changing e.g., to fade up/down.")]
		public bool everyFrame;

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x1273FC8", Offset = "0x1273FC8", VA = "0x1273FC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x1273FF8", Offset = "0x1273FF8", VA = "0x1273FF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x127403C", Offset = "0x127403C", VA = "0x127403C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x1274060", Offset = "0x1274060", VA = "0x1274060")]
		public SetGameVolume()
		{
		}
	}
	[Token(Token = "0x20005C4")]
	public abstract class BaseUpdateAction : FsmStateAction
	{
		[Token(Token = "0x20005C5")]
		public enum UpdateType
		{
			[Token(Token = "0x4001A99")]
			OnUpdate,
			[Token(Token = "0x4001A9A")]
			OnLateUpdate,
			[Token(Token = "0x4001A9B")]
			OnFixedUpdate
		}

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Repeat every frame.")]
		[ActionSection("Update type")]
		public bool everyFrame;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("When to update the action.\nOnUpdate: The most common setting.\nOnLateUpdate: Update after everything else. Useful if dependent on another GameObect, e.g. following.\nOnFixedUpdate: Used to update physics e.g., GameObjects with RigidBody components.")]
		public UpdateType updateType;

		[Token(Token = "0x6001E81")]
		public abstract void OnActionUpdate();

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x1274068", Offset = "0x1274068", VA = "0x1274068", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0x1274074", Offset = "0x1274074", VA = "0x1274074", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0x12740C8", Offset = "0x12740C8", VA = "0x12740C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0x127410C", Offset = "0x127410C", VA = "0x127410C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0x1274154", Offset = "0x1274154", VA = "0x1274154", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0x127419C", Offset = "0x127419C", VA = "0x127419C")]
		protected BaseUpdateAction()
		{
		}
	}
	[Token(Token = "0x20005C6")]
	[Tooltip("Fade from a fullscreen Color. NOTE: Uses OnGUI so requires a PlayMakerGUI component in the scene.")]
	[ActionCategory(ActionCategory.Camera)]
	public class CameraFadeIn : FsmStateAction
	{
		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Color to fade from. E.g., Fade up from black.")]
		public FsmColor color;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Fade in time in seconds.")]
		[RequiredField]
		[HasFloatSlider(0f, 10f)]
		public FsmFloat time;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to send when finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentTime;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Color colorLerp;

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0x12741A4", Offset = "0x12741A4", VA = "0x12741A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0x1274210", Offset = "0x1274210", VA = "0x1274210", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0x1274244", Offset = "0x1274244", VA = "0x1274244", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0x1274334", Offset = "0x1274334", VA = "0x1274334", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0x127442C", Offset = "0x127442C", VA = "0x127442C")]
		public CameraFadeIn()
		{
		}
	}
	[Token(Token = "0x20005C7")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Fade to a fullscreen Color. NOTE: Uses OnGUI so requires a PlayMakerGUI component in the scene.")]
	public class CameraFadeOut : FsmStateAction
	{
		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Color to fade to. E.g., Fade to black.")]
		[RequiredField]
		public FsmColor color;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Fade out time in seconds.")]
		[HasFloatSlider(0f, 10f)]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to send when finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentTime;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Color colorLerp;

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0x1274434", Offset = "0x1274434", VA = "0x1274434", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0x12744A0", Offset = "0x12744A0", VA = "0x12744A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0x12744C4", Offset = "0x12744C4", VA = "0x12744C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0x12745A4", Offset = "0x12745A4", VA = "0x12745A4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0x127469C", Offset = "0x127469C", VA = "0x127469C")]
		public CameraFadeOut()
		{
		}
	}
	[Token(Token = "0x20005C8")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Clamps an orthographic camera's position to keep the view inside min/max ranges. Set any limit to None to leave that axis un-clamped.")]
	public class ClampOrthographicView : ComponentAction<Camera>
	{
		[Token(Token = "0x20005C9")]
		public enum ScreenPlane
		{
			[Token(Token = "0x4001AB3")]
			XY,
			[Token(Token = "0x4001AB4")]
			XZ
		}

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with a Camera component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Orientation of the view.")]
		public ScreenPlane view;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The left edge of the view to stay inside.")]
		public FsmFloat minX;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The right edge of the view to stay inside.")]
		public FsmFloat maxX;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The bottom edge of the view to stay inside.")]
		public FsmFloat minY;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The top edge of the view to stay inside.")]
		public FsmFloat maxY;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to clamp the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0x12746A4", Offset = "0x12746A4", VA = "0x12746A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0x12747BC", Offset = "0x12747BC", VA = "0x12747BC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0x12747EC", Offset = "0x12747EC", VA = "0x12747EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0x1274AA4", Offset = "0x1274AA4", VA = "0x1274AA4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0x1274AB4", Offset = "0x1274AB4", VA = "0x1274AB4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0x1274824", Offset = "0x1274824", VA = "0x1274824")]
		private void DoClampPosition()
		{
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0x1274AF0", Offset = "0x1274AF0", VA = "0x1274AF0")]
		public ClampOrthographicView()
		{
		}
	}
	[Token(Token = "0x20005CA")]
	[Tooltip("Activates a Camera in the scene.")]
	[ActionCategory(ActionCategory.Camera)]
	public class CutToCamera : FsmStateAction
	{
		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Camera to activate.")]
		public Camera camera;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Makes the camera the new MainCamera. The old MainCamera will be untagged.")]
		public bool makeMainCamera;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Cut back to the original MainCamera when exiting this state.")]
		public bool cutBackOnExit;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Camera oldCamera;

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0x1274B38", Offset = "0x1274B38", VA = "0x1274B38", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0x1274B60", Offset = "0x1274B60", VA = "0x1274B60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0x1274D28", Offset = "0x1274D28", VA = "0x1274D28", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0x1274C5C", Offset = "0x1274C5C", VA = "0x1274C5C")]
		private static void SwitchCamera(Camera camera1, Camera camera2)
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0x1274D44", Offset = "0x1274D44", VA = "0x1274D44")]
		public CutToCamera()
		{
		}
	}
	[Token(Token = "0x20005CB")]
	[Tooltip("Gets the GameObject tagged MainCamera from the scene")]
	[ActionTarget(typeof(Camera), "storeGameObject", false)]
	[ActionCategory(ActionCategory.Camera)]
	public class GetMainCamera : FsmStateAction
	{
		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Game Object tagged as MainCamera and in a Game Object Variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0x1274D4C", Offset = "0x1274D4C", VA = "0x1274D4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0x1274D58", Offset = "0x1274D58", VA = "0x1274D58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0x1274E08", Offset = "0x1274E08", VA = "0x1274E08")]
		public GetMainCamera()
		{
		}
	}
	[Token(Token = "0x20005CC")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Transforms position from screen space into world space. NOTE: Uses the MainCamera!")]
	public class ScreenToWorldPoint : FsmStateAction
	{
		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Screen position as a vector.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 screenVector;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Screen X position in pixels or normalized. See Normalized.")]
		public FsmFloat screenX;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Screen X position in pixels or normalized. See Normalized.")]
		public FsmFloat screenY;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Distance into the screen in world units.")]
		public FsmFloat screenZ;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, X/Y coordinates are considered normalized (0-1), otherwise they are expected to be in pixels")]
		public FsmBool normalized;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world position in a vector3 variable.")]
		public FsmVector3 storeWorldVector;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world X position in a float variable.")]
		public FsmFloat storeWorldX;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world Y position in a float variable.")]
		public FsmFloat storeWorldY;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world Z position in a float variable.")]
		public FsmFloat storeWorldZ;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0x1274E10", Offset = "0x1274E10", VA = "0x1274E10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0x1274F44", Offset = "0x1274F44", VA = "0x1274F44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0x12751A0", Offset = "0x12751A0", VA = "0x12751A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0x1274F70", Offset = "0x1274F70", VA = "0x1274F70")]
		private void DoScreenToWorldPoint()
		{
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0x12751A4", Offset = "0x12751A4", VA = "0x12751A4")]
		public ScreenToWorldPoint()
		{
		}
	}
	[Token(Token = "0x20005CD")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets the Background Color used by the Camera.")]
	public class SetBackgroundColor : ComponentAction<Camera>
	{
		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The game object that owns the Camera component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The background color.")]
		public FsmColor backgroundColor;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0x12751AC", Offset = "0x12751AC", VA = "0x12751AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0x12751F4", Offset = "0x12751F4", VA = "0x12751F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0x12752D0", Offset = "0x12752D0", VA = "0x12752D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0x1275220", Offset = "0x1275220", VA = "0x1275220")]
		private void DoSetBackgroundColor()
		{
		}

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0x12752D4", Offset = "0x12752D4", VA = "0x12752D4")]
		public SetBackgroundColor()
		{
		}
	}
	[Token(Token = "0x20005CE")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets the Culling Mask used by the Camera.")]
	public class SetCameraCullingMask : ComponentAction<Camera>
	{
		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The Game Object with the Camera component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Cull these layers.")]
		public FsmInt[] cullingMask;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Invert the mask, so you cull all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0x127531C", Offset = "0x127531C", VA = "0x127531C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0x12753A8", Offset = "0x12753A8", VA = "0x12753A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0x12754A8", Offset = "0x12754A8", VA = "0x12754A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0x12753D4", Offset = "0x12753D4", VA = "0x12753D4")]
		private void DoSetCameraCullingMask()
		{
		}

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0x12754AC", Offset = "0x12754AC", VA = "0x12754AC")]
		public SetCameraCullingMask()
		{
		}
	}
	[Token(Token = "0x20005CF")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets Field of View used by the Camera.")]
	public class SetCameraFOV : ComponentAction<Camera>
	{
		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The Game Object with the Camera component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Field of view in degrees.")]
		public FsmFloat fieldOfView;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the fov is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0x12754F4", Offset = "0x12754F4", VA = "0x12754F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0x1275534", Offset = "0x1275534", VA = "0x1275534", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0x127561C", Offset = "0x127561C", VA = "0x127561C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0x1275560", Offset = "0x1275560", VA = "0x1275560")]
		private void DoSetCameraFOV()
		{
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0x1275620", Offset = "0x1275620", VA = "0x1275620")]
		public SetCameraFOV()
		{
		}
	}
	[Token(Token = "0x20005D0")]
	[ActionCategory(ActionCategory.Camera)]
	[Tooltip("Sets the Main Camera.")]
	public class SetMainCamera : FsmStateAction
	{
		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to set as the main camera (should have a Camera component).")]
		[CheckForComponent(typeof(Camera))]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0x1275668", Offset = "0x1275668", VA = "0x1275668", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0x1275674", Offset = "0x1275674", VA = "0x1275674", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0x127579C", Offset = "0x127579C", VA = "0x127579C")]
		public SetMainCamera()
		{
		}
	}
	[Token(Token = "0x20005D1")]
	[Tooltip("Transforms a position from world space into screen space. \nNote: Uses the Main Camera unless you specify a camera to use.")]
	[ActionCategory(ActionCategory.Camera)]
	public class WorldToScreenPoint : FsmStateAction
	{
		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Camera GameObject to use. Defaults to MainCamera if not defined.")]
		public FsmGameObject camera;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("World position to transform into screen coordinates.")]
		public FsmVector3 worldPosition;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Override X coordinate.")]
		public FsmFloat worldX;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Override Y coordinate.")]
		public FsmFloat worldY;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Override Z coordinate.")]
		public FsmFloat worldZ;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen position in a Vector3 Variable. Z will equal zero.")]
		public FsmVector3 storeScreenPoint;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the screen X position in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeScreenX;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen Y position in a Float Variable.")]
		public FsmFloat storeScreenY;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Normalize screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public FsmBool normalize;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameObject cameraGameObject;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera screenCamera;

		[Token(Token = "0x6001EB8")]
		[Address(RVA = "0x12757A4", Offset = "0x12757A4", VA = "0x12757A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EB9")]
		[Address(RVA = "0x12758C0", Offset = "0x12758C0", VA = "0x12758C0")]
		private void InitCamera()
		{
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0x1275A70", Offset = "0x1275A70", VA = "0x1275A70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0x1275CFC", Offset = "0x1275CFC", VA = "0x1275CFC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0x1275A9C", Offset = "0x1275A9C", VA = "0x1275A9C")]
		private void DoWorldToScreenPoint()
		{
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0x1275D00", Offset = "0x1275D00", VA = "0x1275D00", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0x1275E24", Offset = "0x1275E24", VA = "0x1275E24")]
		public WorldToScreenPoint()
		{
		}
	}
	[Token(Token = "0x20005D2")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Checks the height clearance for a CharacterController, or, in other words, if a CharacterController can be set to a height without collisions. Often used while crouching to check if the controller has room to stand up.")]
	public class ControllerCheckHeight : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Layers to check collisions against.")]
		[UIHint(UIHint.LayerMask)]
		public FsmInt layerMask;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Height to check. The action will use a capsule of this height to check for collisions.")]
		public FsmFloat checkHeight;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set how often to check. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause collision checks can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ActionSection("Output")]
		[Tooltip("Store if any collisions were found.")]
		public FsmBool didPass;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send if no collisions were found.")]
		public FsmEvent clearEvent;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send if collisions were found.")]
		public FsmEvent blockedEvent;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int repeat;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] colliders;

		[Token(Token = "0x17000360")]
		private CharacterController controller
		{
			[Token(Token = "0x6001EBF")]
			[Address(RVA = "0x1275E2C", Offset = "0x1275E2C", VA = "0x1275E2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x1275E34", Offset = "0x1275E34", VA = "0x1275E34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0x1275F04", Offset = "0x1275F04", VA = "0x1275F04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0x127600C", Offset = "0x127600C", VA = "0x127600C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x1275FA0", Offset = "0x1275FA0", VA = "0x1275FA0")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x1276024", Offset = "0x1276024", VA = "0x1276024")]
		private void DoCapsuleOverlap()
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x1276200", Offset = "0x1276200", VA = "0x1276200")]
		public ControllerCheckHeight()
		{
		}
	}
	[Token(Token = "0x20005D3")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Makes a CharacterController Crouch. Handles scaling the collider and transitions between standing and crouching.")]
	public class ControllerCrouch : ComponentAction<CharacterController>
	{
		[Token(Token = "0x20005D4")]
		private enum CrouchState
		{
			[Token(Token = "0x4001AF4")]
			stand,
			[Token(Token = "0x4001AF5")]
			standToCrouch,
			[Token(Token = "0x4001AF6")]
			crouch,
			[Token(Token = "0x4001AF7")]
			crouchToStand
		}

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Crouch while this to true. Normally set by an Input action like Get Key.\n\nNOTE: The controller might not be able to stand up when this is false if there's not enough headroom.")]
		public FsmBool isCrouching;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Height of capsule when crouching.")]
		public FsmFloat crouchHeight;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Move children so their height scales with capsule. This is useful for weapon attach points etc.")]
		public FsmBool adjustChildren;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("How long it takes to crouch/stand in seconds.")]
		public FsmFloat transitionTime;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Always complete the full transition to crouching, even if the input is brief.")]
		public FsmBool completeTransition;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Can the CharacterController stand if isCrouching is false (e.g. if the crouch button is released). Usually set by a some kind of raycast checking the headroom above the controller,but could also be set to false to prevent standing for other reasons, e.g., crouch because the ground is shaking.")]
		public FsmBool canStand;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Try to stand if true. Useful if want to toggle crouch with a button.")]
		[UIHint(UIHint.Variable)]
		public FsmBool standToggle;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send when crouch button is released AND there is enough headroom.")]
		public FsmEvent standEvent;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Reset the controller height if the State exits before crouch has finished. Also restores children to original offsets if Adjust Children was used.\n\nNOTE: You probably want to keep this checked most of the time.")]
		public FsmBool resetHeightOnExit;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float originalHeight;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float startTransitionHeight;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float transitionTimeElapsed;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Dictionary<Transform, float> childOffsets;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private CrouchState crouchState;

		[Token(Token = "0x17000361")]
		private CharacterController controller
		{
			[Token(Token = "0x6001EC6")]
			[Address(RVA = "0x1276280", Offset = "0x1276280", VA = "0x1276280")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0x1276288", Offset = "0x1276288", VA = "0x1276288", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x1276444", Offset = "0x1276444", VA = "0x1276444", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x1276810", Offset = "0x1276810", VA = "0x1276810", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0x1276AD0", Offset = "0x1276AD0", VA = "0x1276AD0")]
		private void SetHeight(float newHeight)
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0x1276CF8", Offset = "0x1276CF8", VA = "0x1276CF8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0x1276EB4", Offset = "0x1276EB4", VA = "0x1276EB4")]
		public ControllerCrouch()
		{
		}
	}
	[Token(Token = "0x20005D5")]
	[Tooltip("Tests if a Character Controller on a Game Object was touching the ground during the last move.")]
	[ActionCategory(ActionCategory.Character)]
	public class ControllerIsGrounded : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject to check.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if touching the ground.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if not touching the ground.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x17000362")]
		private CharacterController controller
		{
			[Token(Token = "0x6001ECD")]
			[Address(RVA = "0x1276F50", Offset = "0x1276F50", VA = "0x1276F50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0x1276F58", Offset = "0x1276F58", VA = "0x1276F58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0x1276FA8", Offset = "0x1276FA8", VA = "0x1276FA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0x1277090", Offset = "0x1277090", VA = "0x1277090", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0x1276FD4", Offset = "0x1276FD4", VA = "0x1276FD4")]
		private void DoControllerIsGrounded()
		{
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0x1277094", Offset = "0x1277094", VA = "0x1277094")]
		public ControllerIsGrounded()
		{
		}
	}
	[Token(Token = "0x20005D6")]
	[Tooltip("Makes a CharacterController Jump.")]
	[ActionCategory(ActionCategory.Character)]
	public class ControllerJump : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("How high to jump.")]
		public FsmFloat jumpHeight;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Jump in local or word space.")]
		public Space space;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Multiplies the speed of the CharacterController at moment of jumping. Higher numbers will jump further. Note: Does not effect the jump height.")]
		public FsmFloat jumpSpeedMultiplier;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Gravity multiplier used in air, to correctly calculate jump height.")]
		public FsmFloat gravityMultiplier;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Extra gravity multiplier when falling. Note: This is on top of the gravity multiplier above. This can be used to make jumps less 'floaty.'")]
		public FsmFloat fallMultiplier;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ActionSection("In Air Controls")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector applied while in the air. Usually from a Get Axis Vector, allowing the player to influence the jump.")]
		public FsmVector3 moveVector;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Multiplies the Move Vector by a Speed factor.")]
		public FsmFloat speed;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Clamp horizontal speed while jumping. Set to None for no clamping.")]
		public FsmFloat maxSpeed;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ActionSection("Landing")]
		[Tooltip("Event to send when landing. Use this to transition back to a grounded State.")]
		public FsmEvent landedEvent;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Store how fast the Character Controlling was moving when it landed.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat landingSpeed;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the last movement before landing.")]
		public FsmVector3 landingMotion;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The total distance fallen, from the start of the jump to landing point. NOTE: This will be negative when jumping to higher ground.")]
		public FsmFloat fallDistance;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 startJumpPosition;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 totalJumpMovement;

		[Token(Token = "0x17000363")]
		private CharacterController controller
		{
			[Token(Token = "0x6001ED3")]
			[Address(RVA = "0x12770DC", Offset = "0x12770DC", VA = "0x12770DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0x12770E4", Offset = "0x12770E4", VA = "0x12770E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0x127726C", Offset = "0x127726C", VA = "0x127726C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0x1277468", Offset = "0x1277468", VA = "0x1277468", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0x1277844", Offset = "0x1277844", VA = "0x1277844")]
		public ControllerJump()
		{
		}
	}
	[Token(Token = "0x20005D7")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Moves a Game Object with a Character Controller. See also {{Controller Simple Move}}. NOTE: It is recommended that you make only one call to Move or SimpleMove per frame.")]
	public class ControllerMove : FsmStateAction
	{
		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The Game Object that owns the Character Controller component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The movement vector.")]
		public FsmVector3 moveVector;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Move in local or word space.")]
		public Space space;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Apply the move over one second. Makes movement frame rate independent.")]
		public FsmBool perSecond;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject previousGo;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CharacterController controller;

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0x127788C", Offset = "0x127788C", VA = "0x127788C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0x127792C", Offset = "0x127792C", VA = "0x127792C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0x1277B30", Offset = "0x1277B30", VA = "0x1277B30")]
		public ControllerMove()
		{
		}
	}
	[Token(Token = "0x20005D8")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Handles CharacterController while in the air, e.g., after jumping.")]
	public class ControllerMoveInAir : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that owns the CharacterController component.")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector applied while in the air. Usually to allow the player to influence the jump.")]
		public FsmVector3 moveVector;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Clamp horizontal speed while jumping. Set to None for no clamping.")]
		public FsmFloat maxMoveSpeed;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Multiply the gravity set in the Physics system.")]
		public FsmFloat gravityMultiplier;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Extra gravity multiplier when falling. Note: This is on top of the gravity multiplier above. This can be used to make jumps less 'floaty.'")]
		public FsmFloat fallMultiplier;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Move in local or word space.")]
		public Space space;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send when landed.")]
		public FsmEvent landedEvent;

		[Token(Token = "0x17000364")]
		private CharacterController controller
		{
			[Token(Token = "0x6001EDB")]
			[Address(RVA = "0x1277B38", Offset = "0x1277B38", VA = "0x1277B38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x1277B40", Offset = "0x1277B40", VA = "0x1277B40", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x1277C1C", Offset = "0x1277C1C", VA = "0x1277C1C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x1277FAC", Offset = "0x1277FAC", VA = "0x1277FAC")]
		public ControllerMoveInAir()
		{
		}
	}
	[Token(Token = "0x20005D9")]
	[Tooltip("Modify various character controller settings.\n'None' leaves the setting unchanged.")]
	[ActionCategory(ActionCategory.Character)]
	public class ControllerSettings : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterController))]
		[RequiredField]
		[Tooltip("The GameObject that owns the CharacterController.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The height of the character's capsule.")]
		public FsmFloat height;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The radius of the character's capsule.")]
		public FsmFloat radius;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The character controllers slope limit in degrees.")]
		public FsmFloat slopeLimit;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The character controllers step offset in meters.")]
		public FsmFloat stepOffset;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The center of the character's capsule relative to the transform's position")]
		public FsmVector3 center;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Should other RigidBodies or CharacterControllers collide with this character controller (By default always enabled).")]
		public FsmBool detectCollisions;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x17000365")]
		private CharacterController controller
		{
			[Token(Token = "0x6001EDF")]
			[Address(RVA = "0x1277FF4", Offset = "0x1277FF4", VA = "0x1277FF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x1277FFC", Offset = "0x1277FFC", VA = "0x1277FFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x1278198", Offset = "0x1278198", VA = "0x1278198", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x127838C", Offset = "0x127838C", VA = "0x127838C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0x12781C4", Offset = "0x12781C4", VA = "0x12781C4")]
		private void DoControllerSettings()
		{
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x1278390", Offset = "0x1278390", VA = "0x1278390")]
		public ControllerSettings()
		{
		}
	}
	[Token(Token = "0x20005DA")]
	[Tooltip("Moves a Game Object with a Character Controller. Velocity along the y-axis is ignored. Speed is in meters/s. Gravity is automatically applied.")]
	[ActionCategory(ActionCategory.Character)]
	public class ControllerSimpleMove : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("A Game Object with a Character Controller.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The movement vector.")]
		[RequiredField]
		public FsmVector3 moveVector;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Multiply the Move Vector by a speed factor.")]
		public FsmFloat speed;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Move in local or world space.")]
		public Space space;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if the Character Controller starts falling.")]
		public FsmEvent fallingEvent;

		[Token(Token = "0x17000366")]
		private CharacterController controller
		{
			[Token(Token = "0x6001EE5")]
			[Address(RVA = "0x12783D8", Offset = "0x12783D8", VA = "0x12783D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x12783E0", Offset = "0x12783E0", VA = "0x12783E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x12784AC", Offset = "0x12784AC", VA = "0x12784AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0x12785EC", Offset = "0x12785EC", VA = "0x12785EC")]
		public ControllerSimpleMove()
		{
		}
	}
	[Token(Token = "0x20005DB")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Gets the Collision Flags from a CharacterController on a GameObject. Collision flags give you a broad overview of where the character collided with another object.")]
	public class GetControllerCollisionFlags : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject with a Character Controller component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if the Character Controller capsule is on the ground")]
		public FsmBool isGrounded;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if no collisions in last move.")]
		public FsmBool none;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("True if the Character Controller capsule was hit on the sides.")]
		[UIHint(UIHint.Variable)]
		public FsmBool sides;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if the Character Controller capsule was hit from above.")]
		public FsmBool above;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if the Character Controller capsule was hit from below.")]
		public FsmBool below;

		[Token(Token = "0x17000367")]
		private CharacterController controller
		{
			[Token(Token = "0x6001EE9")]
			[Address(RVA = "0x1278634", Offset = "0x1278634", VA = "0x1278634")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x127863C", Offset = "0x127863C", VA = "0x127863C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0x12786A4", Offset = "0x12786A4", VA = "0x12786A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0x12787B4", Offset = "0x12787B4", VA = "0x12787B4")]
		public GetControllerCollisionFlags()
		{
		}
	}
	[Token(Token = "0x20005DC")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Gets info on the last Character Controller collision event. The owner of the FSM must have a character controller. Typically this action is used after a CONTROLLER COLLIDER HIT system event.")]
	public class GetControllerHitInfo : FsmStateAction
	{
		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the GameObject hit in the last collision.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the contact point of the last collision in world coordinates.")]
		public FsmVector3 contactPoint;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the normal of the last collision.")]
		public FsmVector3 contactNormal;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the direction of the last move before the collision.")]
		public FsmVector3 moveDirection;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance of the last move before the collision.")]
		public FsmFloat moveLength;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the physics material of the Game Object Hit. Useful for triggering different effects. Audio, particles...")]
		public FsmString physicsMaterialName;

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0x12787FC", Offset = "0x12787FC", VA = "0x12787FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0x1278864", Offset = "0x1278864", VA = "0x1278864", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0x1278884", Offset = "0x1278884", VA = "0x1278884")]
		private void StoreTriggerInfo()
		{
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0x12789BC", Offset = "0x12789BC", VA = "0x12789BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0x12789D8", Offset = "0x12789D8", VA = "0x12789D8", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0x12789E4", Offset = "0x12789E4", VA = "0x12789E4")]
		public GetControllerHitInfo()
		{
		}
	}
	[Token(Token = "0x20005DD")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Gets a CharacterController's velocity.")]
	public class GetControllerVelocity : ComponentAction<CharacterController>
	{
		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject with a CharacterController.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the velocity in Vector3 variable.")]
		public FsmVector3 storeVelocity;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the x component of the velocity in a Float variable.")]
		public FsmFloat storeX;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the y component of the velocity in a Float variable.")]
		public FsmFloat storeY;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the z component of the velocity in a Float variable.")]
		public FsmFloat storeZ;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x17000368")]
		private CharacterController controller
		{
			[Token(Token = "0x6001EF3")]
			[Address(RVA = "0x12789EC", Offset = "0x12789EC", VA = "0x12789EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0x12789F4", Offset = "0x12789F4", VA = "0x12789F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0x1278A4C", Offset = "0x1278A4C", VA = "0x1278A4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0x1278B58", Offset = "0x1278B58", VA = "0x1278B58", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0x1278A78", Offset = "0x1278A78", VA = "0x1278A78")]
		private void DoGetControllerVelocity()
		{
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0x1278B5C", Offset = "0x1278B5C", VA = "0x1278B5C")]
		public GetControllerVelocity()
		{
		}
	}
	[Token(Token = "0x20005DE")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Interpolate through an array of Colors over a specified amount of Time.")]
	public class ColorInterpolate : FsmStateAction
	{
		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("An array of colors. Set the number of colors, then set each color.")]
		public FsmColor[] colors;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("How long it should take to interpolate through all the colors in the array.")]
		public FsmFloat time;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Store the interpolated color in a Color variable.")]
		[UIHint(UIHint.Variable)]
		public FsmColor storeColor;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the interpolation finishes.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Ignore TimeScale. Useful when the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float startTime;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float currentTime;

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x1278BA4", Offset = "0x1278BA4", VA = "0x1278BA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0x1278C40", Offset = "0x1278C40", VA = "0x1278C40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0x1278CBC", Offset = "0x1278CBC", VA = "0x1278CBC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0x1278F74", Offset = "0x1278F74", VA = "0x1278F74", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0x1278FD0", Offset = "0x1278FD0", VA = "0x1278FD0")]
		public ColorInterpolate()
		{
		}
	}
	[Token(Token = "0x20005DF")]
	[Tooltip("Sample a color on a continuous color gradient. Define the gradient with a color array. Use Sample At to get an interpolated color.\n\nFor example:\nIf Element 1 is black and Element 2 is red:\n<ul><li>Sample At 1 = black</li><li>Sample At 2 = red</li><li>Sample At 1.5 = dark red</li></ul>")]
	[ActionCategory(ActionCategory.Color)]
	public class ColorRamp : FsmStateAction
	{
		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Array of colors to defining the gradient.")]
		public FsmColor[] colors;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Point on the gradient to sample. Should be between 0 and the number of colors in the gradient.")]
		public FsmFloat sampleAt;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the sampled color in a Color variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmColor storeColor;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0x1278FD8", Offset = "0x1278FD8", VA = "0x1278FD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0x1279064", Offset = "0x1279064", VA = "0x1279064", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x1279270", Offset = "0x1279270", VA = "0x1279270", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x1279090", Offset = "0x1279090", VA = "0x1279090")]
		private void DoColorRamp()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x1279274", Offset = "0x1279274", VA = "0x1279274", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0x12792D0", Offset = "0x12792D0", VA = "0x12792D0")]
		public ColorRamp()
		{
		}
	}
	[Token(Token = "0x20005E0")]
	[Tooltip("Get the RGBA channels of a Color Variable and store them in Float Variables.")]
	[ActionCategory(ActionCategory.Color)]
	public class GetColorRGBA : FsmStateAction
	{
		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Color variable.")]
		public FsmColor color;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the red channel in a float variable.")]
		public FsmFloat storeRed;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the green channel in a float variable.")]
		public FsmFloat storeGreen;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the blue channel in a float variable.")]
		public FsmFloat storeBlue;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the alpha channel in a float variable.")]
		public FsmFloat storeAlpha;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the color variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0x12792D8", Offset = "0x12792D8", VA = "0x12792D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0x1279338", Offset = "0x1279338", VA = "0x1279338", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0x12793D4", Offset = "0x12793D4", VA = "0x12793D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0x1279364", Offset = "0x1279364", VA = "0x1279364")]
		private void DoGetColorRGBA()
		{
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0x12793D8", Offset = "0x12793D8", VA = "0x12793D8")]
		public GetColorRGBA()
		{
		}
	}
	[Token(Token = "0x20005E1")]
	[Tooltip("Select a random Color from an array of Colors.")]
	[ActionCategory(ActionCategory.Color)]
	public class SelectRandomColor : FsmStateAction
	{
		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Colors", "Color", "Weight")]
		[Tooltip("A possible Color choice.")]
		public FsmColor[] colors;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this color being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the selected Color in a Color Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmColor storeColor;

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0x12793E0", Offset = "0x12793E0", VA = "0x12793E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0x1279564", Offset = "0x1279564", VA = "0x1279564", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0x1279580", Offset = "0x1279580", VA = "0x1279580")]
		private void DoSelectRandomColor()
		{
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x12795F4", Offset = "0x12795F4", VA = "0x12795F4")]
		public SelectRandomColor()
		{
		}
	}
	[Token(Token = "0x20005E2")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Sets the RGBA channels of a Color Variable. To leave any channel unchanged, set variable to 'None'.")]
	public class SetColorRGBA : FsmStateAction
	{
		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Color Variable to set.")]
		public FsmColor colorVariable;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the red channel of the color variable.")]
		public FsmFloat red;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the green channel of the color variable.")]
		public FsmFloat green;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the blue channel of the color variable.")]
		public FsmFloat blue;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the alpha channel of the color variable.")]
		public FsmFloat alpha;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0x12795FC", Offset = "0x12795FC", VA = "0x12795FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0x127968C", Offset = "0x127968C", VA = "0x127968C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0x127979C", Offset = "0x127979C", VA = "0x127979C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0x12796B8", Offset = "0x12796B8", VA = "0x12796B8")]
		private void DoSetColorRGBA()
		{
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0x12797A0", Offset = "0x12797A0", VA = "0x12797A0")]
		public SetColorRGBA()
		{
		}
	}
	[Token(Token = "0x20005E3")]
	[ActionCategory(ActionCategory.Color)]
	[Tooltip("Sets the value of a Color Variable.")]
	public class SetColorValue : FsmStateAction
	{
		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Color Variable to set.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmColor colorVariable;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The color to set the variable to.")]
		public FsmColor color;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0x12797A8", Offset = "0x12797A8", VA = "0x12797A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x12797D8", Offset = "0x12797D8", VA = "0x12797D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0x127982C", Offset = "0x127982C", VA = "0x127982C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0x1279804", Offset = "0x1279804", VA = "0x1279804")]
		private void DoSetColorValue()
		{
		}

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0x1279830", Offset = "0x1279830", VA = "0x1279830")]
		public SetColorValue()
		{
		}
	}
	[Token(Token = "0x20005E4")]
	public abstract class ComponentAction<T> : FsmStateAction where T : Component
	{
		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T cachedComponent;

		[Token(Token = "0x17000369")]
		public Transform cachedTransform
		{
			[Token(Token = "0x6001F17")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700036A")]
		protected Rigidbody rigidbody
		{
			[Token(Token = "0x6001F19")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036B")]
		protected Rigidbody2D rigidbody2d
		{
			[Token(Token = "0x6001F1A")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036C")]
		protected Renderer renderer
		{
			[Token(Token = "0x6001F1B")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036D")]
		protected Animation animation
		{
			[Token(Token = "0x6001F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036E")]
		protected AudioSource audio
		{
			[Token(Token = "0x6001F1D")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036F")]
		protected Camera camera
		{
			[Token(Token = "0x6001F1E")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000370")]
		protected Light light
		{
			[Token(Token = "0x6001F1F")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F20")]
		protected bool UpdateCache(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F21")]
		protected bool UpdateCachedTransform(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F22")]
		protected bool UpdateCacheAndTransform(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F23")]
		protected bool UpdateCacheAddComponent(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F24")]
		protected void SendEvent(FsmEventTarget eventTarget, FsmEvent fsmEvent)
		{
		}

		[Token(Token = "0x6001F25")]
		protected ComponentAction()
		{
		}
	}
	[Token(Token = "0x20005E5")]
	public abstract class ComponentAction<T1, T2> : FsmStateAction where T1 : Component where T2 : Component
	{
		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject1;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject2;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T1 cachedComponent1;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T2 cachedComponent2;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected Transform cachedTransform2;

		[Token(Token = "0x6001F26")]
		protected bool UpdateCache(GameObject go1, GameObject go2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F27")]
		protected ComponentAction()
		{
		}
	}
	[Token(Token = "0x20005E6")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Bool value to a Color.")]
	public class ConvertBoolToColor : FsmStateAction
	{
		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variable to convert.")]
		public FsmBool boolVariable;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Color variable to set based on the bool variable value.")]
		public FsmColor colorVariable;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Color if Bool variable is false.")]
		public FsmColor falseColor;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Color if Bool variable is true.")]
		public FsmColor trueColor;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0x1279838", Offset = "0x1279838", VA = "0x1279838", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0x12798C4", Offset = "0x12798C4", VA = "0x12798C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0x1279944", Offset = "0x1279944", VA = "0x1279944", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0x12798F0", Offset = "0x12798F0", VA = "0x12798F0")]
		private void DoConvertBoolToColor()
		{
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x1279948", Offset = "0x1279948", VA = "0x1279948")]
		public ConvertBoolToColor()
		{
		}
	}
	[Token(Token = "0x20005E7")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Bool value to a Float value.")]
	public class ConvertBoolToFloat : FsmStateAction
	{
		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variable to convert.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmBool boolVariable;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Float variable to set based on the Bool variable value.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Float value if Bool variable is false.")]
		public FsmFloat falseValue;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Float value if Bool variable is true.")]
		public FsmFloat trueValue;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x1279950", Offset = "0x1279950", VA = "0x1279950", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x12799B8", Offset = "0x12799B8", VA = "0x12799B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x1279A3C", Offset = "0x1279A3C", VA = "0x1279A3C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0x12799E4", Offset = "0x12799E4", VA = "0x12799E4")]
		private void DoConvertBoolToFloat()
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0x1279A40", Offset = "0x1279A40", VA = "0x1279A40")]
		public ConvertBoolToFloat()
		{
		}
	}
	[Token(Token = "0x20005E8")]
	[Tooltip("Converts a Bool value to an Integer value.")]
	[ActionCategory(ActionCategory.Convert)]
	public class ConvertBoolToInt : FsmStateAction
	{
		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variable to convert.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmBool boolVariable;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Integer variable to set based on the Bool variable value.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Integer value if Bool variable is false.")]
		public FsmInt falseValue;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Integer value if Bool variable is false.")]
		public FsmInt trueValue;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0x1279A48", Offset = "0x1279A48", VA = "0x1279A48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0x1279AB0", Offset = "0x1279AB0", VA = "0x1279AB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0x1279B34", Offset = "0x1279B34", VA = "0x1279B34", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x1279ADC", Offset = "0x1279ADC", VA = "0x1279ADC")]
		private void DoConvertBoolToInt()
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x1279B38", Offset = "0x1279B38", VA = "0x1279B38")]
		public ConvertBoolToInt()
		{
		}
	}
	[Token(Token = "0x20005E9")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Bool value to a String value.")]
	public class ConvertBoolToString : FsmStateAction
	{
		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variable to convert.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmBool boolVariable;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The String variable to set based on the Bool variable value.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("String value if Bool variable is false.")]
		public FsmString falseString;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("String value if Bool variable is true.")]
		public FsmString trueString;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the Bool variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0x1279B40", Offset = "0x1279B40", VA = "0x1279B40", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0x1279BF8", Offset = "0x1279BF8", VA = "0x1279BF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0x1279C84", Offset = "0x1279C84", VA = "0x1279C84", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x1279C24", Offset = "0x1279C24", VA = "0x1279C24")]
		private void DoConvertBoolToString()
		{
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x1279C88", Offset = "0x1279C88", VA = "0x1279C88")]
		public ConvertBoolToString()
		{
		}
	}
	[Token(Token = "0x20005EA")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts an Enum value to a String value.")]
	public class ConvertEnumToString : FsmStateAction
	{
		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Enum variable to convert.")]
		[RequiredField]
		public FsmEnum enumVariable;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String variable to store the converted value.")]
		public FsmString stringVariable;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the Enum variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x1279C90", Offset = "0x1279C90", VA = "0x1279C90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x1279CC0", Offset = "0x1279CC0", VA = "0x1279CC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0x1279D80", Offset = "0x1279D80", VA = "0x1279D80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0x1279CEC", Offset = "0x1279CEC", VA = "0x1279CEC")]
		private void DoConvertEnumToString()
		{
		}

		[Token(Token = "0x6001F40")]
		[Address(RVA = "0x1279D84", Offset = "0x1279D84", VA = "0x1279D84")]
		public ConvertEnumToString()
		{
		}
	}
	[Token(Token = "0x20005EB")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Float value to an Integer value.")]
	public class ConvertFloatToInt : FsmStateAction
	{
		[Token(Token = "0x20005EC")]
		public enum FloatRounding
		{
			[Token(Token = "0x4001B79")]
			RoundDown,
			[Token(Token = "0x4001B7A")]
			RoundUp,
			[Token(Token = "0x4001B7B")]
			Nearest
		}

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Float variable to convert to an integer.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an Integer variable.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Whether to round up or down.")]
		public FloatRounding rounding;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001F41")]
		[Address(RVA = "0x1279D8C", Offset = "0x1279D8C", VA = "0x1279D8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0x1279DC4", Offset = "0x1279DC4", VA = "0x1279DC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0x1279FDC", Offset = "0x1279FDC", VA = "0x1279FDC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0x1279DF0", Offset = "0x1279DF0", VA = "0x1279DF0")]
		private void DoConvertFloatToInt()
		{
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0x1279FE0", Offset = "0x1279FE0", VA = "0x1279FE0")]
		public ConvertFloatToInt()
		{
		}
	}
	[Token(Token = "0x20005ED")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Float value to a String value with optional format.")]
	public class ConvertFloatToString : FsmStateAction
	{
		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to convert.")]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("A string variable to store the converted value.")]
		public FsmString stringVariable;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Format, allows for leading zeros. E.g., 0000")]
		public FsmString format;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0x1279FE8", Offset = "0x1279FE8", VA = "0x1279FE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0x127A024", Offset = "0x127A024", VA = "0x127A024", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0x127A118", Offset = "0x127A118", VA = "0x127A118", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0x127A050", Offset = "0x127A050", VA = "0x127A050")]
		private void DoConvertFloatToString()
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0x127A11C", Offset = "0x127A11C", VA = "0x127A11C")]
		public ConvertFloatToString()
		{
		}
	}
	[Token(Token = "0x20005EE")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts an Integer value to a Float value.")]
	public class ConvertIntToFloat : FsmStateAction
	{
		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Integer variable to convert to a float.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Float variable.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the Integer variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0x127A124", Offset = "0x127A124", VA = "0x127A124", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0x127A154", Offset = "0x127A154", VA = "0x127A154", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0x127A1B4", Offset = "0x127A1B4", VA = "0x127A1B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0x127A180", Offset = "0x127A180", VA = "0x127A180")]
		private void DoConvertIntToFloat()
		{
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0x127A1B8", Offset = "0x127A1B8", VA = "0x127A1B8")]
		public ConvertIntToFloat()
		{
		}
	}
	[Token(Token = "0x20005EF")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts an Integer value to a String value with an optional format.")]
	public class ConvertIntToString : FsmStateAction
	{
		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Int variable to convert.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("A String variable to store the converted value.")]
		public FsmString stringVariable;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Format, allows for leading zeros. E.g., 0000")]
		public FsmString format;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the Int variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0x127A1C0", Offset = "0x127A1C0", VA = "0x127A1C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0x127A1FC", Offset = "0x127A1FC", VA = "0x127A1FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0x127A2F0", Offset = "0x127A2F0", VA = "0x127A2F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0x127A228", Offset = "0x127A228", VA = "0x127A228")]
		private void DoConvertIntToString()
		{
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0x127A2F4", Offset = "0x127A2F4", VA = "0x127A2F4")]
		public ConvertIntToString()
		{
		}
	}
	[Token(Token = "0x20005F0")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts a Material variable to an Object variable. Useful if you want to use Set Property (which only works on Object variables).")]
	public class ConvertMaterialToObject : FsmStateAction
	{
		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Material variable to convert to an Object.")]
		public FsmMaterial materialVariable;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an Object variable.")]
		public FsmObject objectVariable;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the Material variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0x127A2FC", Offset = "0x127A2FC", VA = "0x127A2FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0x127A32C", Offset = "0x127A32C", VA = "0x127A32C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0x127A390", Offset = "0x127A390", VA = "0x127A390", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0x127A358", Offset = "0x127A358", VA = "0x127A358")]
		private void DoConvertMaterialToObject()
		{
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0x127A394", Offset = "0x127A394", VA = "0x127A394")]
		public ConvertMaterialToObject()
		{
		}
	}
	[Token(Token = "0x20005F1")]
	[Tooltip("Converts Seconds to a String value representing the time.")]
	[ActionCategory(ActionCategory.Convert)]
	[HelpUrl("http://hutonggames.com/playmakerforum/index.php?topic=1711.0")]
	public class ConvertSecondsToString : FsmStateAction
	{
		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The seconds variable to convert.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat secondsVariable;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("A string variable to store the time value.")]
		public FsmString stringVariable;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Format. 0 for days, 1 is for hours, 2 for minutes, 3 for seconds and 4 for milliseconds. 5 for total days, 6 for total hours, 7 for total minutes, 8 for total seconds, 9 for total milliseconds, 10 for two digits milliseconds. so {2:D2} would just show the seconds of the current time, NOT the grand total number of seconds, the grand total of seconds would be {8:F0}")]
		public FsmString format;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the seconds variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0x127A39C", Offset = "0x127A39C", VA = "0x127A39C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0x127A418", Offset = "0x127A418", VA = "0x127A418", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0x127A974", Offset = "0x127A974", VA = "0x127A974", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0x127A444", Offset = "0x127A444", VA = "0x127A444")]
		private void DoConvertSecondsToString()
		{
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0x127A978", Offset = "0x127A978", VA = "0x127A978")]
		public ConvertSecondsToString()
		{
		}
	}
	[Token(Token = "0x20005F2")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Converts an String value to an Int value.")]
	public class ConvertStringToInt : FsmStateAction
	{
		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String variable to convert to an integer.")]
		public FsmString stringVariable;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an Int variable.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the String variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F5F")]
		[Address(RVA = "0x127A980", Offset = "0x127A980", VA = "0x127A980", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F60")]
		[Address(RVA = "0x127A9B0", Offset = "0x127A9B0", VA = "0x127A9B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0x127AA14", Offset = "0x127AA14", VA = "0x127AA14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0x127A9DC", Offset = "0x127A9DC", VA = "0x127A9DC")]
		private void DoConvertStringToInt()
		{
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x127AA18", Offset = "0x127AA18", VA = "0x127AA18")]
		public ConvertStringToInt()
		{
		}
	}
	[Token(Token = "0x20005F3")]
	[ActionCategory(ActionCategory.Convert)]
	[Tooltip("Store a Vector2 XY components into a Vector3 XY component. The Vector3 z component is also accessible for convenience")]
	public class ConvertVector2ToVector3 : FsmStateAction
	{
		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector2")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector3")]
		public FsmVector3 vector3;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The vector3 z value")]
		public FsmFloat zValue;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the Vector2 value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0x127AA20", Offset = "0x127AA20", VA = "0x127AA20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0x127AA50", Offset = "0x127AA50", VA = "0x127AA50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0x127AAB4", Offset = "0x127AAB4", VA = "0x127AAB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0x127AAFC", Offset = "0x127AAFC", VA = "0x127AAFC")]
		public ConvertVector2ToVector3()
		{
		}
	}
	[Token(Token = "0x20005F4")]
	[Tooltip("Checks if the conditional expression Is True or Is False. Stops execution of the game if the assertion fails.\nThis is a useful way to check your assumptions. If you expect a certain value use an Assert to make sure!\nOnly runs in Editor.")]
	[SeeAlso("{{Debugging}}")]
	[ActionCategory(ActionCategory.Debug)]
	public class Assert : FsmStateAction, IEvaluatorContext
	{
		[Token(Token = "0x20005F5")]
		public enum AssertType
		{
			[Token(Token = "0x4001B9C")]
			IsTrue,
			[Token(Token = "0x4001B9D")]
			IsFalse
		}

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.TextArea)]
		[Tooltip("Enter an expression to evaluate.\n\nExamples:\nhealth <= maxHealth\nlives < 100\n\nHint:Use $(for variable names with spaces)")]
		public FsmString expression;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Expected result of the expression.")]
		public AssertType assert;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string cachedExpression;

		[Token(Token = "0x17000371")]
		public CompiledAst Ast
		{
			[Token(Token = "0x6001F68")]
			[Address(RVA = "0x127AB04", Offset = "0x127AB04", VA = "0x127AB04")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F69")]
			[Address(RVA = "0x127AB0C", Offset = "0x127AB0C", VA = "0x127AB0C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000372")]
		public string LastErrorMessage
		{
			[Token(Token = "0x6001F6A")]
			[Address(RVA = "0x127AB14", Offset = "0x127AB14", VA = "0x127AB14")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F6B")]
			[Address(RVA = "0x127AB1C", Offset = "0x127AB1C", VA = "0x127AB1C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0x127AB24", Offset = "0x127AB24", VA = "0x127AB24", Slot = "62")]
		private FsmVar PlayMaker.ConditionalExpression.IEvaluatorContext.GetVariable(string name)
		{
			return null;
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0x127ABF0", Offset = "0x127ABF0", VA = "0x127ABF0")]
		public Assert()
		{
		}
	}
	[Token(Token = "0x20005F6")]
	public abstract class BaseLogAction : FsmStateAction
	{
		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Also send to the Unity Log.")]
		public bool sendToUnityLog;

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x127ABF8", Offset = "0x127ABF8", VA = "0x127ABF8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0x127AC00", Offset = "0x127AC00", VA = "0x127AC00")]
		protected BaseLogAction()
		{
		}
	}
	[Token(Token = "0x20005F7")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Adds a text area to the action list for notes etc. Use this to document your project.")]
	public class Comment : FsmStateAction
	{
		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Comment)]
		[Tooltip("Any comment you care to make...")]
		public string comment;

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x127AC08", Offset = "0x127AC08", VA = "0x127AC08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x127AC54", Offset = "0x127AC54", VA = "0x127AC54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0x127AC5C", Offset = "0x127AC5C", VA = "0x127AC5C")]
		public Comment()
		{
		}
	}
	[Token(Token = "0x20005F8")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Bool Variable in the PlayMaker Log Window.")]
	public class DebugBool : BaseLogAction
	{
		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variable to debug.")]
		public FsmBool boolVariable;

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0x127AC64", Offset = "0x127AC64", VA = "0x127AC64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0x127AC8C", Offset = "0x127AC8C", VA = "0x127AC8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0x127AD6C", Offset = "0x127AD6C", VA = "0x127AD6C")]
		public DebugBool()
		{
		}
	}
	[Token(Token = "0x20005F9")]
	[Tooltip("Draw a debug Gizmo.\nNote: you can enable/disable Gizmos in the Game View toolbar.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DebugDrawShape : ComponentAction<Transform>
	{
		[Token(Token = "0x20005FA")]
		public enum ShapeType
		{
			[Token(Token = "0x4001BA8")]
			Sphere,
			[Token(Token = "0x4001BA9")]
			Cube,
			[Token(Token = "0x4001BAA")]
			WireSphere,
			[Token(Token = "0x4001BAB")]
			WireCube
		}

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Draw the Gizmo at a GameObject's position.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The type of Gizmo to draw:\nSphere, Cube, WireSphere, or WireCube.")]
		public ShapeType shape;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The color to use.")]
		public FsmColor color;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideIf("HideRadius")]
		[Tooltip("Use this for sphere gizmos")]
		public FsmFloat radius;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideIf("HideSize")]
		[Tooltip("Use this for cube gizmos")]
		public FsmVector3 size;

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0x127AD74", Offset = "0x127AD74", VA = "0x127AD74")]
		public bool HideRadius()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0x127AD84", Offset = "0x127AD84", VA = "0x127AD84")]
		public bool HideSize()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0x127AD98", Offset = "0x127AD98", VA = "0x127AD98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0x127AE8C", Offset = "0x127AE8C", VA = "0x127AE8C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0x127AE94", Offset = "0x127AE94", VA = "0x127AE94", Slot = "38")]
		public override void OnDrawActionGizmos()
		{
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0x127B0B8", Offset = "0x127B0B8", VA = "0x127B0B8")]
		public DebugDrawShape()
		{
		}
	}
	[Token(Token = "0x20005FB")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of an Enum Variable in the PlayMaker Log Window.")]
	public class DebugEnum : BaseLogAction
	{
		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Enum Variable to debug.")]
		public FsmEnum enumVariable;

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0x127B100", Offset = "0x127B100", VA = "0x127B100", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0x127B128", Offset = "0x127B128", VA = "0x127B128", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0x127B200", Offset = "0x127B200", VA = "0x127B200")]
		public DebugEnum()
		{
		}
	}
	[Token(Token = "0x20005FC")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Float Variable in the PlayMaker Log Window.")]
	public class DebugFloat : BaseLogAction
	{
		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Float variable to debug.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0x127B208", Offset = "0x127B208", VA = "0x127B208", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0x127B230", Offset = "0x127B230", VA = "0x127B230", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0x127B30C", Offset = "0x127B30C", VA = "0x127B30C")]
		public DebugFloat()
		{
		}
	}
	[Token(Token = "0x20005FD")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Print the value of any FSM Variable in the PlayMaker Log Window.")]
	public class DebugFsmVariable : BaseLogAction
	{
		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The variable to debug.")]
		[UIHint(UIHint.Variable)]
		public FsmVar variable;

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0x127B314", Offset = "0x127B314", VA = "0x127B314", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0x127B33C", Offset = "0x127B33C", VA = "0x127B33C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0x127B390", Offset = "0x127B390", VA = "0x127B390")]
		public DebugFsmVariable()
		{
		}
	}
	[Token(Token = "0x20005FE")]
	[Tooltip("Logs the value of a Game Object Variable in the PlayMaker Log Window.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DebugGameObject : BaseLogAction
	{
		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject variable to debug.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject gameObject;

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0x127B398", Offset = "0x127B398", VA = "0x127B398", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0x127B3C0", Offset = "0x127B3C0", VA = "0x127B3C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0x127B484", Offset = "0x127B484", VA = "0x127B484")]
		public DebugGameObject()
		{
		}
	}
	[Token(Token = "0x20005FF")]
	[Tooltip("Logs the value of an Integer Variable in the PlayMaker Log Window.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DebugInt : BaseLogAction
	{
		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Int variable to debug.")]
		public FsmInt intVariable;

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0x127B48C", Offset = "0x127B48C", VA = "0x127B48C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0x127B49C", Offset = "0x127B49C", VA = "0x127B49C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0x127B578", Offset = "0x127B578", VA = "0x127B578")]
		public DebugInt()
		{
		}
	}
	[Token(Token = "0x2000600")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Sends a log message to the PlayMaker Log Window.")]
	public class DebugLog : BaseLogAction
	{
		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Text to send to the log.")]
		public FsmString text;

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0x127B580", Offset = "0x127B580", VA = "0x127B580", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0x127B5E4", Offset = "0x127B5E4", VA = "0x127B5E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0x127B654", Offset = "0x127B654", VA = "0x127B654")]
		public DebugLog()
		{
		}
	}
	[Token(Token = "0x2000601")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of an Object Variable in the PlayMaker Log Window.")]
	public class DebugObject : BaseLogAction
	{
		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Object variable to debug.")]
		public FsmObject fsmObject;

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0x127B65C", Offset = "0x127B65C", VA = "0x127B65C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0x127B684", Offset = "0x127B684", VA = "0x127B684", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0x127B748", Offset = "0x127B748", VA = "0x127B748")]
		public DebugObject()
		{
		}
	}
	[Token(Token = "0x2000602")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Vector3 Variable in the PlayMaker Log Window.")]
	public class DebugVector3 : BaseLogAction
	{
		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to debug.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0x127B750", Offset = "0x127B750", VA = "0x127B750", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0x127B778", Offset = "0x127B778", VA = "0x127B778", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0x127B85C", Offset = "0x127B85C", VA = "0x127B85C")]
		public DebugVector3()
		{
		}
	}
	[Token(Token = "0x2000603")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Draws a line from a Start point to an End point. Specify the points as Game Objects or Vector3 world positions. If both are specified, position is used as a local offset from the Object's position.\n\nNotes:\n- Enable/disable Gizmos in the Game View toolbar.\n- Set how long debug lines are visible for in Preferences > Debugging.")]
	public class DrawDebugLine : FsmStateAction
	{
		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Draw line from a GameObject.")]
		public FsmGameObject fromObject;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Draw line from a world position, or local offset from GameObject if provided.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Draw line to a GameObject.")]
		public FsmGameObject toObject;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Draw line to a world position, or local offset from GameObject if provided.")]
		public FsmVector3 toPosition;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The color of the line.")]
		public FsmColor color;

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0x127B864", Offset = "0x127B864", VA = "0x127B864", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0x127B86C", Offset = "0x127B86C", VA = "0x127B86C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0x127B9A8", Offset = "0x127B9A8", VA = "0x127B9A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0x127BA84", Offset = "0x127BA84", VA = "0x127BA84", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0x127BB94", Offset = "0x127BB94", VA = "0x127BB94")]
		public DrawDebugLine()
		{
		}
	}
	[Token(Token = "0x2000604")]
	[Tooltip("Draws a line in the Scene View from a Start point in a direction. Specify the start point as Game Objects or Vector3 world positions. If both are specified, position is used as a local offset from the Object's position.\n\nNotes:\n- Enable/disable Gizmos in the Game View toolbar.\n- Set how long debug lines are visible for in Preferences > Debugging.")]
	[ActionCategory(ActionCategory.Debug)]
	public class DrawDebugRay : FsmStateAction
	{
		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Draw ray from a GameObject.")]
		public FsmGameObject fromObject;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Draw ray from a world position, or local offset from GameObject if provided.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Direction vector of ray in world space.")]
		public FsmVector3 direction;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The color of the ray.")]
		public FsmColor color;

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0x127BB9C", Offset = "0x127BB9C", VA = "0x127BB9C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0x127BBA4", Offset = "0x127BBA4", VA = "0x127BBA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0x127BCB4", Offset = "0x127BCB4", VA = "0x127BCB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0x127BD70", Offset = "0x127BD70", VA = "0x127BD70", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0x127BE84", Offset = "0x127BE84", VA = "0x127BE84")]
		public DrawDebugRay()
		{
		}
	}
	[Token(Token = "0x2000605")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Draws a state label for this FSM in the Game View. The label is drawn on the game object that owns the FSM. Use this to override the global setting in the PlayMaker Debug menu.")]
	public class DrawStateLabel : FsmStateAction
	{
		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Set to True to show State labels, or False to hide them.")]
		public FsmBool showLabel;

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0x127BE8C", Offset = "0x127BE8C", VA = "0x127BE8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0x127BEB4", Offset = "0x127BEB4", VA = "0x127BEB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0x127BEF8", Offset = "0x127BEF8", VA = "0x127BEF8")]
		public DrawStateLabel()
		{
		}
	}
	[Token(Token = "0x2000606")]
	[Obsolete("This action has no equivalent in the new Input System.")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Sends an Event based on the Orientation of the mobile device.")]
	public class DeviceOrientationEvent : FsmStateAction
	{
		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Note: If device is physically situated between discrete positions, as when (for example) rotated diagonally, system will report Unknown orientation.")]
		public DeviceOrientation orientation;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send if the device orientation matches Orientation.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if you want to wait for the orientation to be true.")]
		public bool everyFrame;

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0x127BF00", Offset = "0x127BF00", VA = "0x127BF00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0x127BF2C", Offset = "0x127BF2C", VA = "0x127BF2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0x127BF44", Offset = "0x127BF44", VA = "0x127BF44", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0x127BF40", Offset = "0x127BF40", VA = "0x127BF40")]
		private void DoDetectDeviceOrientation()
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0x127BF48", Offset = "0x127BF48", VA = "0x127BF48", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0x127BF88", Offset = "0x127BF88", VA = "0x127BF88")]
		public DeviceOrientationEvent()
		{
		}
	}
	[Token(Token = "0x2000607")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Plays a full-screen movie on a handheld device. Please consult the Unity docs for <a href=\"http://docs.unity3d.com/Documentation/ScriptReference/Handheld.PlayFullScreenMovie.html\">Handheld.PlayFullScreenMovie</a> for proper usage.\nNOTE: The action will warn you about platform requirements.")]
	public class DevicePlayFullScreenMovie : FsmStateAction
	{
		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Note that player will stream movie directly from the iPhone disc, therefore you have to provide movie as a separate files and not as an usual asset.\nYou will have to create a folder named StreamingAssets inside your Unity project (inside your Assets folder). Store your movies inside that folder. Unity will automatically copy contents of that folder into the iPhone application bundle.")]
		public FsmString moviePath;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("This action will initiate a transition that fades the screen from your current content to the designated background color of the player. When playback finishes, the player uses another fade effect to transition back to your content.")]
		public FsmColor fadeColor;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Options for displaying movie playback controls. See Unity docs.")]
		public FullScreenMovieControlMode movieControlMode;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Scaling modes for displaying movies.. See Unity docs.")]
		public FullScreenMovieScalingMode movieScalingMode;

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0x127BF90", Offset = "0x127BF90", VA = "0x127BF90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0x127C020", Offset = "0x127C020", VA = "0x127C020", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0x127C05C", Offset = "0x127C05C", VA = "0x127C05C")]
		public DevicePlayFullScreenMovie()
		{
		}
	}
	[Token(Token = "0x2000608")]
	[Tooltip("Sends an Event when the mobile device is shaken.")]
	[ActionCategory(ActionCategory.Device)]
	public class DeviceShakeEvent : FsmStateAction
	{
		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Amount of acceleration required to trigger the event. Higher numbers require a harder shake.")]
		public FsmFloat shakeThreshold;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Event to send when Shake Threshold is exceeded.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0x127C064", Offset = "0x127C064", VA = "0x127C064", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0x127C09C", Offset = "0x127C09C", VA = "0x127C09C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0x127C138", Offset = "0x127C138", VA = "0x127C138")]
		public DeviceShakeEvent()
		{
		}
	}
	[Token(Token = "0x2000609")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Causes the device to vibrate for half a second.\nNOTE: Unity's built in vibrate function is fairly limited. However there are alternatives available on the Asset Store...")]
	public class DeviceVibrate : FsmStateAction
	{
		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0x127C140", Offset = "0x127C140", VA = "0x127C140", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0x127C144", Offset = "0x127C144", VA = "0x127C144", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0x127C164", Offset = "0x127C164", VA = "0x127C164")]
		public DeviceVibrate()
		{
		}
	}
	[Token(Token = "0x200060A")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Gets the last measured linear acceleration of a device and stores it in a Vector3 Variable.")]
	public class GetDeviceAcceleration : FsmStateAction
	{
		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the acceleration in a Vector3 Variable.")]
		public FsmVector3 storeVector;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the x component of the acceleration in a Float Variable.")]
		public FsmFloat storeX;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the y component of the acceleration in a Float Variable.")]
		public FsmFloat storeY;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the z component of the acceleration in a Float Variable.")]
		public FsmFloat storeZ;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Multiply the acceleration by a float value.")]
		public FsmFloat multiplier;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0x127C16C", Offset = "0x127C16C", VA = "0x127C16C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0x127C1D8", Offset = "0x127C1D8", VA = "0x127C1D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0x127C2A0", Offset = "0x127C2A0", VA = "0x127C2A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FB3")]
		[Address(RVA = "0x127C204", Offset = "0x127C204", VA = "0x127C204")]
		private void DoGetDeviceAcceleration()
		{
		}

		[Token(Token = "0x6001FB4")]
		[Address(RVA = "0x127C2A4", Offset = "0x127C2A4", VA = "0x127C2A4")]
		public GetDeviceAcceleration()
		{
		}
	}
	[Token(Token = "0x200060B")]
	[Tooltip("Gets the rotation of the device around its z axis (into the screen). For example when you steer with the iPhone in a driving game.")]
	[ActionCategory(ActionCategory.Device)]
	public class GetDeviceRoll : FsmStateAction
	{
		[Token(Token = "0x200060C")]
		public enum BaseOrientation
		{
			[Token(Token = "0x4001BDC")]
			Portrait,
			[Token(Token = "0x4001BDD")]
			LandscapeLeft,
			[Token(Token = "0x4001BDE")]
			LandscapeRight
		}

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How the user is expected to hold the device (where angle will be zero).")]
		public BaseOrientation baseOrientation;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the roll angle in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeAngle;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Limit the roll angle.")]
		public FsmFloat limitAngle;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Smooth the roll angle as it changes. You can play with this value to balance responsiveness and lag/smoothness.")]
		public FsmFloat smoothing;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastZAngle;

		[Token(Token = "0x6001FB5")]
		[Address(RVA = "0x127C2AC", Offset = "0x127C2AC", VA = "0x127C2AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0x127C354", Offset = "0x127C354", VA = "0x127C354", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0x127C504", Offset = "0x127C504", VA = "0x127C504", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0x127C380", Offset = "0x127C380", VA = "0x127C380")]
		private void DoGetDeviceRoll()
		{
		}

		[Token(Token = "0x6001FB9")]
		[Address(RVA = "0x127C508", Offset = "0x127C508", VA = "0x127C508")]
		public GetDeviceRoll()
		{
		}
	}
	[Token(Token = "0x200060D")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Get various iPhone settings.")]
	public class GetIPhoneSettings : FsmStateAction
	{
		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Allows device to fall into 'sleep' state with screen being dim if no touches occurred. Default value is true.")]
		[UIHint(UIHint.Variable)]
		public FsmBool getScreenCanDarken;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A unique device identifier string. It is guaranteed to be unique for every device (Read Only).")]
		public FsmString getUniqueIdentifier;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The user defined name of the device (Read Only).")]
		public FsmString getName;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The model of the device (Read Only).")]
		public FsmString getModel;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The name of the operating system running on the device (Read Only).")]
		[UIHint(UIHint.Variable)]
		public FsmString getSystemName;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The generation of the device (Read Only).")]
		[UIHint(UIHint.Variable)]
		public FsmString getGeneration;

		[Token(Token = "0x6001FBA")]
		[Address(RVA = "0x127C510", Offset = "0x127C510", VA = "0x127C510", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FBB")]
		[Address(RVA = "0x127C578", Offset = "0x127C578", VA = "0x127C578", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FBC")]
		[Address(RVA = "0x127C580", Offset = "0x127C580", VA = "0x127C580")]
		public GetIPhoneSettings()
		{
		}
	}
	[Token(Token = "0x200060E")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Gets Location Info from a mobile device. NOTE: Use StartLocationService before trying to get location info.")]
	[Obsolete("This action has no equivalent in the new Input System.")]
	public class GetLocationInfo : FsmStateAction
	{
		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the location in a Vector3 Variable.")]
		public FsmVector3 vectorPosition;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Longitude in a Float Variable.")]
		public FsmFloat longitude;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Latitude in a Float Variable.")]
		public FsmFloat latitude;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Altitude in a Float Variable.")]
		public FsmFloat altitude;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the horizontal accuracy of the location.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat horizontalAccuracy;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the vertical accuracy of the location.")]
		public FsmFloat verticalAccuracy;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the location cannot be queried.")]
		public FsmEvent errorEvent;

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0x127C588", Offset = "0x127C588", VA = "0x127C588", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0x127C5F0", Offset = "0x127C5F0", VA = "0x127C5F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0x127C5F8", Offset = "0x127C5F8", VA = "0x127C5F8")]
		private void DoGetLocationInfo()
		{
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0x127C5FC", Offset = "0x127C5FC", VA = "0x127C5FC", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0x127C63C", Offset = "0x127C63C", VA = "0x127C63C")]
		public GetLocationInfo()
		{
		}
	}
	[Token(Token = "0x200060F")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Gets the number of Touches.")]
	public class GetTouchCount : FsmStateAction
	{
		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current number of touches in an Int Variable.")]
		public FsmInt storeCount;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0x127C644", Offset = "0x127C644", VA = "0x127C644", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0x127C668", Offset = "0x127C668", VA = "0x127C668", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0x127C718", Offset = "0x127C718", VA = "0x127C718", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0x127C694", Offset = "0x127C694", VA = "0x127C694")]
		private void DoGetTouchCount()
		{
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0x127C71C", Offset = "0x127C71C", VA = "0x127C71C")]
		public GetTouchCount()
		{
		}
	}
	[Token(Token = "0x2000610")]
	[Tooltip("Gets info on a touch event.")]
	[ActionCategory(ActionCategory.Device)]
	public class GetTouchInfo : FsmStateAction
	{
		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Filter by a Finger ID. You can store a Finger ID in other Touch actions, e.g., Touch Event.")]
		public FsmInt fingerId;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true, all screen coordinates are returned normalized (0-1), otherwise in pixels.")]
		public FsmBool normalize;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the position of the touch in a Vector3 Variable.")]
		public FsmVector3 storePosition;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the X position \u00a0in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeX;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Y position \u00a0in a Float Variable.")]
		public FsmFloat storeY;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the movement of the touch in a Vector3 Variable.")]
		public FsmVector3 storeDeltaPosition;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X movement in a Float Variable.")]
		public FsmFloat storeDeltaX;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Y movement in a Float Variable.")]
		public FsmFloat storeDeltaY;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the time between touch events in a Float Variable.")]
		public FsmFloat storeDeltaTime;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Store the number of tap count of the touch (e.g. 2 = double tap).")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeTapCount;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float screenWidth;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float screenHeight;

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0x127C724", Offset = "0x127C724", VA = "0x127C724", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0x127C7F8", Offset = "0x127C7F8", VA = "0x127C7F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0x127CCC0", Offset = "0x127CCC0", VA = "0x127CCC0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0x127C848", Offset = "0x127C848", VA = "0x127C848")]
		private void DoGetTouchInfo()
		{
		}

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0x127CCC4", Offset = "0x127CCC4", VA = "0x127CCC4")]
		public GetTouchInfo()
		{
		}
	}
	[Token(Token = "0x2000611")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Projects the location found with Get Location Info to a 2d map using common projections.")]
	public class ProjectLocationToMap : FsmStateAction
	{
		[Token(Token = "0x2000612")]
		public enum MapProjection
		{
			[Token(Token = "0x4001C0C")]
			EquidistantCylindrical,
			[Token(Token = "0x4001C0D")]
			Mercator
		}

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Location vector in degrees longitude and latitude. Typically returned by the {{Get Location Info}} action.")]
		public FsmVector3 GPSLocation;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The projection used by the map.")]
		public MapProjection mapProjection;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Map Region")]
		[HasFloatSlider(-180f, 180f)]
		[Tooltip("The minimum Longitude shown on the map.")]
		public FsmFloat minLongitude;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum Longitude show on the map.")]
		[HasFloatSlider(-180f, 180f)]
		public FsmFloat maxLongitude;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(-90f, 90f)]
		[Tooltip("The minimum Latitude shown on the map.")]
		public FsmFloat minLatitude;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(-90f, 90f)]
		[Tooltip("The maximum Latitude shown on the map.")]
		public FsmFloat maxLatitude;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Screen Region")]
		[Tooltip("The screen coordinate of the left edge of the map image.")]
		public FsmFloat minX;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The screen coordinate of the top edge of the map image.")]
		public FsmFloat minY;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The width of the map image in screen coordinates.")]
		public FsmFloat width;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The height of the map in screen coordinates.")]
		public FsmFloat height;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ActionSection("Projection")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the projected X coordinate in a Float Variable. Use this to display a marker on the map.")]
		public FsmFloat projectedX;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Store the projected Y coordinate in a Float Variable. Use this to display a marker on the map.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat projectedY;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If true all coordinates in this action are normalized (0-1); otherwise coordinates are in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float x;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float y;

		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0x127CCD4", Offset = "0x127CCD4", VA = "0x127CCD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0x127CE88", Offset = "0x127CE88", VA = "0x127CE88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0x127D090", Offset = "0x127D090", VA = "0x127D090", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0x127CED0", Offset = "0x127CED0", VA = "0x127CED0")]
		private void DoProjectGPSLocation()
		{
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0x127D094", Offset = "0x127D094", VA = "0x127D094")]
		private void DoEquidistantCylindrical()
		{
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0x127D150", Offset = "0x127D150", VA = "0x127D150")]
		private void DoMercatorProjection()
		{
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0x127D2C0", Offset = "0x127D2C0", VA = "0x127D2C0")]
		private static float LatitudeToMercator(float latitudeInDegrees)
		{
			return default(float);
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0x127D314", Offset = "0x127D314", VA = "0x127D314")]
		public ProjectLocationToMap()
		{
		}
	}
	[Token(Token = "0x2000613")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Starts location service updates. Last location coordinates can be retrieved with {{GetLocationInfo}}.")]
	public class StartLocationServiceUpdates : FsmStateAction
	{
		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Maximum time to wait in seconds before failing.")]
		public FsmFloat maxWait;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The desired accuracy in meters.")]
		public FsmFloat desiredAccuracy;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Distance between updates in meters.")]
		public FsmFloat updateDistance;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the location services have started.")]
		public FsmEvent successEvent;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the location services fail to start.")]
		public FsmEvent failedEvent;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float startTime;

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0x127D31C", Offset = "0x127D31C", VA = "0x127D31C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0x127D3A8", Offset = "0x127D3A8", VA = "0x127D3A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0x127D420", Offset = "0x127D420", VA = "0x127D420", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0x127D500", Offset = "0x127D500", VA = "0x127D500")]
		public StartLocationServiceUpdates()
		{
		}
	}
	[Token(Token = "0x2000614")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Stops location service updates. This could be useful for saving battery life.")]
	public class StopLocationServiceUpdates : FsmStateAction
	{
		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0x127D508", Offset = "0x127D508", VA = "0x127D508", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0x127D50C", Offset = "0x127D50C", VA = "0x127D50C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0x127D53C", Offset = "0x127D53C", VA = "0x127D53C")]
		public StopLocationServiceUpdates()
		{
		}
	}
	[Token(Token = "0x2000615")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Sends an event when a swipe is detected.")]
	public class SwipeGestureEvent : FsmStateAction
	{
		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How far a touch has to travel to be considered a swipe. Uses normalized distance (e.g. 1 = 1 screen diagonal distance). Should generally be a very small number.")]
		public FsmFloat minSwipeDistance;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send when swipe left detected.")]
		public FsmEvent swipeLeftEvent;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when swipe right detected.")]
		public FsmEvent swipeRightEvent;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when swipe up detected.")]
		public FsmEvent swipeUpEvent;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when swipe down detected.")]
		public FsmEvent swipeDownEvent;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float screenDiagonalSize;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float minSwipeDistancePixels;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool touchStarted;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector2 touchStartPos;

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0x127D544", Offset = "0x127D544", VA = "0x127D544", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0x127D5B0", Offset = "0x127D5B0", VA = "0x127D5B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0x127D634", Offset = "0x127D634", VA = "0x127D634", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0x127D838", Offset = "0x127D838", VA = "0x127D838")]
		private void TestForSwipeGesture(Vector2 touchPosition)
		{
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0x127D9F4", Offset = "0x127D9F4", VA = "0x127D9F4")]
		public SwipeGestureEvent()
		{
		}
	}
	[Token(Token = "0x2000616")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Sends events based on Touch Phases. Optionally filter by a fingerID.")]
	public class TouchEvent : FsmStateAction
	{
		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("An optional Finger Id to filter by. For example, if you detected a Touch Began and stored the FingerId, you could look for the Ended event for that Finger Id.")]
		public FsmInt fingerId;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The phase you're interested in detecting (Began, Moved, Stationary, Ended, Cancelled).")]
		public UnityEngine.TouchPhase touchPhase;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to send when the Touch Phase is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the Finger Id associated with the touch event for later use.")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeFingerId;

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0x127D9FC", Offset = "0x127D9FC", VA = "0x127D9FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0x127DA7C", Offset = "0x127DA7C", VA = "0x127DA7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0x127DDC4", Offset = "0x127DDC4", VA = "0x127DDC4")]
		public TouchEvent()
		{
		}
	}
	[Token(Token = "0x2000617")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Sends events when a GUI Texture or GUI Text is touched. Optionally filter by a fingerID.")]
	[Obsolete("GUIElement is part of the legacy UI system removed in 2019.3")]
	public class TouchGUIEvent : FsmStateAction
	{
		[Token(Token = "0x2000618")]
		public enum OffsetOptions
		{
			[Token(Token = "0x4001C32")]
			TopLeft,
			[Token(Token = "0x4001C33")]
			Center,
			[Token(Token = "0x4001C34")]
			TouchStart
		}

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		[Tooltip("The Game Object that owns the GUI Texture or GUI Text.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Only detect touches that match this fingerID, or set to None.")]
		public FsmInt fingerId;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Events")]
		[Tooltip("Event to send on touch began.")]
		public FsmEvent touchBegan;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send on touch moved.")]
		public FsmEvent touchMoved;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send on stationary touch.")]
		public FsmEvent touchStationary;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send on touch ended.")]
		public FsmEvent touchEnded;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send on touch cancel.")]
		public FsmEvent touchCanceled;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if not touching (finger down but not over the GUI element)")]
		public FsmEvent notTouching;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the fingerId of the touch.")]
		[ActionSection("Store Results")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeFingerId;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen position where the GUI element was touched.")]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Normalize the hit point screen coordinates (0-1).")]
		public FsmBool normalizeHitPoint;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the offset position of the hit.")]
		public FsmVector3 storeOffset;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("How to measure the offset.")]
		public OffsetOptions relativeTo;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Normalize the offset.")]
		public FsmBool normalizeOffset;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[ActionSection("")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 touchStartPos;

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0x127DDCC", Offset = "0x127DDCC", VA = "0x127DDCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0x127DF10", Offset = "0x127DF10", VA = "0x127DF10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0x127DF18", Offset = "0x127DF18", VA = "0x127DF18")]
		public TouchGUIEvent()
		{
		}
	}
	[Token(Token = "0x2000619")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Sends events when an object is touched. Optionally filter by a fingerID. NOTE: Uses the MainCamera!")]
	[ActionTarget(typeof(GameObject), "gameObject", false)]
	public class TouchObjectEvent : FsmStateAction
	{
		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to detect touches on.")]
		[RequiredField]
		[CheckForComponent(typeof(Collider))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("How far from the camera is the Game Object pickable.")]
		public FsmFloat pickDistance;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Only detect touches that match this fingerID, or set to None.")]
		public FsmInt fingerId;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Events")]
		[Tooltip("Event to send on touch began.")]
		public FsmEvent touchBegan;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send on touch moved.")]
		public FsmEvent touchMoved;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send on stationary touch.")]
		public FsmEvent touchStationary;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send on touch ended.")]
		public FsmEvent touchEnded;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send on touch cancel.")]
		public FsmEvent touchCanceled;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Store Results")]
		[Tooltip("Store the fingerId of the touch.")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeFingerId;

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world position where the object was touched.")]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the surface normal vector where the object was touched. \nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeHitNormal;

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0x127DF20", Offset = "0x127DF20", VA = "0x127DF20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0x127E040", Offset = "0x127E040", VA = "0x127E040", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0x127E7C0", Offset = "0x127E7C0", VA = "0x127E7C0")]
		public TouchObjectEvent()
		{
		}
	}
	[Token(Token = "0x200061A")]
	[Tooltip("Turns a Game Object on/off in a regular repeating pattern.")]
	[ActionCategory(ActionCategory.Effects)]
	public class Blink : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The Game Object to blink on/off.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time to stay off in seconds.")]
		public FsmFloat timeOff;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Time to stay on in seconds.")]
		public FsmFloat timeOn;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Start in the on state.")]
		public FsmBool startOn;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Only effect the renderer, keeping other components active.")]
		public bool rendererOnly;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float startTime;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float timer;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool blinkOn;

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0x127E7C8", Offset = "0x127E7C8", VA = "0x127E7C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0x127E850", Offset = "0x127E850", VA = "0x127E850", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0x127E9B4", Offset = "0x127E9B4", VA = "0x127E9B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0x127E88C", Offset = "0x127E88C", VA = "0x127E88C")]
		private void UpdateBlinkState(bool state)
		{
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0x127EA64", Offset = "0x127EA64", VA = "0x127EA64")]
		public Blink()
		{
		}
	}
	[Token(Token = "0x200061B")]
	[ActionCategory(ActionCategory.Effects)]
	[Tooltip("Randomly flickers a Game Object on/off.")]
	public class Flicker : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to flicker.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The frequency of the flicker in seconds.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat frequency;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Amount of time flicker is On (0-1). E.g. Use 0.95 for an occasional flicker.")]
		public FsmFloat amountOn;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Only effect the renderer, leaving other components active.")]
		public bool rendererOnly;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Ignore time scale. Useful if flickering UI when the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float startTime;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float timer;

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0x127EAAC", Offset = "0x127EAAC", VA = "0x127EAAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0x127EB0C", Offset = "0x127EB0C", VA = "0x127EB0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0x127EB2C", Offset = "0x127EB2C", VA = "0x127EB2C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0x127ECB0", Offset = "0x127ECB0", VA = "0x127ECB0")]
		public Flicker()
		{
		}
	}
	[Token(Token = "0x200061C")]
	[Tooltip("Plays a ParticleSystem. Optionally destroy the GameObject when the ParticleSystem is finished.")]
	[ActionCategory(ActionCategory.Effects)]
	public class ParticleSystemPlay : ComponentAction<ParticleSystem>
	{
		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the ParticleSystem.")]
		[CheckForComponent(typeof(ParticleSystem))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Play ParticleSystems on all child GameObjects too.")]
		public FsmBool withChildren;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("''With Children'' can be quite expensive since it has to find Particle Systems in all children. If the hierarchy doesn't change, use Cache Children to speed this up.")]
		public FsmBool cacheChildren;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Stop playing when state exits")]
		public FsmBool stopOnExit;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Destroy the GameObject when the ParticleSystem has finished playing. 'With Children' means all child particle systems also need to finish.")]
		public FsmBool destroyOnFinish;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject go;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ParticleSystem[] childParticleSystems;

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0x127ECF8", Offset = "0x127ECF8", VA = "0x127ECF8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0x127ED40", Offset = "0x127ED40", VA = "0x127ED40", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0x127EE24", Offset = "0x127EE24", VA = "0x127EE24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0x127EFDC", Offset = "0x127EFDC", VA = "0x127EFDC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0x127F11C", Offset = "0x127F11C", VA = "0x127F11C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0x127EE60", Offset = "0x127EE60", VA = "0x127EE60")]
		private void DoParticleSystemPlay()
		{
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0x127F284", Offset = "0x127F284", VA = "0x127F284")]
		public ParticleSystemPlay()
		{
		}
	}
	[Token(Token = "0x200061D")]
	[Tooltip("Sets the value of an Enum Variable.")]
	[ActionCategory(ActionCategory.Enum)]
	public class SetEnumValue : FsmStateAction
	{
		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Enum Variable to set.")]
		public FsmEnum enumVariable;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchFieldType("enumVariable")]
		[Tooltip("The Enum value to set the variable to.")]
		public FsmEnum enumValue;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0x127F2CC", Offset = "0x127F2CC", VA = "0x127F2CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0x127F2FC", Offset = "0x127F2FC", VA = "0x127F2FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0x127F360", Offset = "0x127F360", VA = "0x127F360", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0x127F328", Offset = "0x127F328", VA = "0x127F328")]
		private void DoSetEnumValue()
		{
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0x127F364", Offset = "0x127F364", VA = "0x127F364")]
		public SetEnumValue()
		{
		}
	}
	[Token(Token = "0x200061E")]
	[Tooltip("Activates/deactivates a Game Object. Use this to hide/show areas, or enable/disable many Behaviours at once.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class ActivateGameObject : FsmStateAction
	{
		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to activate/deactivate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check to activate, uncheck to deactivate Game Object.")]
		[RequiredField]
		public FsmBool activate;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Recursively activate/deactivate all children.")]
		public FsmBool recursive;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Reset the Game Object's active state when exiting this state. Useful if you want an object to be active only while this state is active.\nNote: Only applies to the last Game Object activated/deactivated (won't work if Game Object changes).")]
		public bool resetOnExit;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("Repeat this action every frame. Useful if using a variable for Activate that can change over time.")]
		public bool everyFrame;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject activatedGameObject;

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0x127F36C", Offset = "0x127F36C", VA = "0x127F36C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0x127F3C4", Offset = "0x127F3C4", VA = "0x127F3C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0x127F4E0", Offset = "0x127F4E0", VA = "0x127F4E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0x127F4E4", Offset = "0x127F4E4", VA = "0x127F4E4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0x127F3F0", Offset = "0x127F3F0", VA = "0x127F3F0")]
		private void DoActivateGameObject()
		{
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0x127F5C4", Offset = "0x127F5C4", VA = "0x127F5C4")]
		public void SetActiveRecursively(GameObject go, bool state)
		{
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0x127F8D0", Offset = "0x127F8D0", VA = "0x127F8D0")]
		public ActivateGameObject()
		{
		}
	}
	[Token(Token = "0x200061F")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Activates a GameObject and de-activates other GameObjects at the same level of the hierarchy. E.g, a single UI Screen, a single accessory etc. This action is very helpful if you often organize GameObject hierarchies in this way. \nNOTE: The targeted GameObject should have a parent. This action will not work on GameObjects at the scene root.")]
	public class ActivateSolo : FsmStateAction
	{
		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to activate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Re-activate if already active. This means deactivating the target GameObject then activating it again. This will reset FSMs on that GameObject.")]
		public FsmBool allowReactivate;

		[Token(Token = "0x6002005")]
		[Address(RVA = "0x127F8D8", Offset = "0x127F8D8", VA = "0x127F8D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0x127F958", Offset = "0x127F958", VA = "0x127F958", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0x127F974", Offset = "0x127F974", VA = "0x127F974")]
		private void DoActivateSolo()
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0x127FDC8", Offset = "0x127FDC8", VA = "0x127FDC8")]
		public ActivateSolo()
		{
		}
	}
	[Token(Token = "0x2000620")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Adds a Component to a Game Object. Use this to change the behaviour of objects on the fly. Optionally remove the Component on exiting the state.")]
	public class AddComponent : FsmStateAction
	{
		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to add the Component to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.ScriptComponent)]
		[Title("Component Type")]
		[Tooltip("The type of Component to add to the Game Object.")]
		public FsmString component;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the component in an Object variable. E.g., to use with Set Property.")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(Component))]
		public FsmObject storeComponent;

		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Remove the Component when this State is exited.")]
		public FsmBool removeOnExit;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Component addedComponent;

		[Token(Token = "0x6002009")]
		[Address(RVA = "0x127FDD0", Offset = "0x127FDD0", VA = "0x127FDD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0x127FE08", Offset = "0x127FE08", VA = "0x127FE08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0x127FFB0", Offset = "0x127FFB0", VA = "0x127FFB0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0x127FE24", Offset = "0x127FE24", VA = "0x127FE24")]
		private void DoAddComponent()
		{
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0x1280058", Offset = "0x1280058", VA = "0x1280058")]
		public AddComponent()
		{
		}
	}
	[Token(Token = "0x2000621")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Creates a Game Object at a spawn point.\nUse a Game Object and/or Position/Rotation for the Spawn Point. If you specify a Game Object, Position is used as a local offset, and Rotation will override the object's rotation.")]
	public class CreateEmptyObject : FsmStateAction
	{
		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Optional GameObject to create. Usually a Prefab.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional Spawn Point.")]
		public FsmGameObject spawnPoint;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Position. If a Spawn Point is defined, this is used as a local offset from the Spawn Point position.")]
		public FsmVector3 position;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotation. NOTE: Overrides the rotation of the Spawn Point.")]
		public FsmVector3 rotation;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally store the created object.")]
		public FsmGameObject storeObject;

		[Token(Token = "0x600200E")]
		[Address(RVA = "0x1280060", Offset = "0x1280060", VA = "0x1280060", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0x1280134", Offset = "0x1280134", VA = "0x1280134", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0x1280478", Offset = "0x1280478", VA = "0x1280478")]
		public CreateEmptyObject()
		{
		}
	}
	[Token(Token = "0x2000622")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Creates a new GameObject.\nUse a GameObject and/or Position/Rotation for the Spawn Point. If you specify a Game Object, Position is used as a local offset, and Rotation will override the object's rotation.")]
	public class CreateNewGameObject : FsmStateAction
	{
		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the new GameObject")]
		public FsmString name;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional Parent.")]
		public FsmGameObject parent;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Spawn Point.")]
		public FsmGameObject spawnPoint;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Position. If a Spawn Point is defined, this is used as a local offset from the Spawn Point position.")]
		public FsmVector3 position;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Rotation. NOTE: Overrides the rotation of the Spawn Point.")]
		public FsmVector3 rotation;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally store the created object.")]
		public FsmGameObject storeObject;

		[Token(Token = "0x6002011")]
		[Address(RVA = "0x1280480", Offset = "0x1280480", VA = "0x1280480", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002012")]
		[Address(RVA = "0x12805B4", Offset = "0x12805B4", VA = "0x12805B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002013")]
		[Address(RVA = "0x12808C8", Offset = "0x12808C8", VA = "0x12808C8")]
		public CreateNewGameObject()
		{
		}
	}
	[Token(Token = "0x2000623")]
	[ActionCategory(ActionCategory.GameObject)]
	[ActionTarget(typeof(GameObject), "gameObject", true)]
	[Tooltip("Creates a Game Object, usually using a Prefab.")]
	public class CreateObject : FsmStateAction
	{
		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("GameObject to create. Usually a Prefab.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional Parent.")]
		public FsmGameObject parent;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Spawn Point.")]
		public FsmGameObject spawnPoint;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Position. If a Spawn Point is defined, this is used as a local offset from the Spawn Point position.")]
		public FsmVector3 position;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Rotation. NOTE: Overrides the rotation of the Spawn Point.")]
		public FsmVector3 rotation;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally store the created object.")]
		public FsmGameObject storeObject;

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x12808D0", Offset = "0x12808D0", VA = "0x12808D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x12809B4", Offset = "0x12809B4", VA = "0x12809B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0x1280CE8", Offset = "0x1280CE8", VA = "0x1280CE8")]
		public CreateObject()
		{
		}
	}
	[Token(Token = "0x2000624")]
	[Tooltip("Deactivate the GameObject that owns the FSM.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class DeactivateSelf : FsmStateAction
	{
		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Seconds to wait before deactivating. Can be useful to let other actions finish first. E.g. a fade-out effect.\nNOTE: If you use a delay and the FSM switches away from this state before it is finished, the GameObject will not be deactivated.")]
		public FsmFloat delay;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Ignore any time scaling.")]
		public FsmBool realTime;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float elapsedTime;

		[Token(Token = "0x6002017")]
		[Address(RVA = "0x1280CF0", Offset = "0x1280CF0", VA = "0x1280CF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0x1280CFC", Offset = "0x1280CFC", VA = "0x1280CFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0x1280DD0", Offset = "0x1280DD0", VA = "0x1280DD0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0x1280D48", Offset = "0x1280D48", VA = "0x1280D48")]
		private void DoDeactivateSelf()
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0x1280E54", Offset = "0x1280E54", VA = "0x1280E54")]
		public DeactivateSelf()
		{
		}
	}
	[Token(Token = "0x2000625")]
	[Tooltip("Destroys a Component of an Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class DestroyComponent : FsmStateAction
	{
		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.ScriptComponent)]
		[Tooltip("The name of the Component to destroy.")]
		public FsmString component;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Component aComponent;

		[Token(Token = "0x600201C")]
		[Address(RVA = "0x1280E5C", Offset = "0x1280E5C", VA = "0x1280E5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0x1280E94", Offset = "0x1280E94", VA = "0x1280E94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0x1280EE4", Offset = "0x1280EE4", VA = "0x1280EE4")]
		private void DoDestroyComponent(GameObject go)
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0x128103C", Offset = "0x128103C", VA = "0x128103C")]
		public DestroyComponent()
		{
		}
	}
	[Token(Token = "0x2000626")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Destroys a Game Object.")]
	public class DestroyObject : FsmStateAction
	{
		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to destroy.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Optional delay before destroying the Game Object.")]
		public FsmFloat delay;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Detach children before destroying the Game Object.")]
		public FsmBool detachChildren;

		[Token(Token = "0x6002020")]
		[Address(RVA = "0x1281044", Offset = "0x1281044", VA = "0x1281044", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0x1281078", Offset = "0x1281078", VA = "0x1281078", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002022")]
		[Address(RVA = "0x12811A4", Offset = "0x12811A4", VA = "0x12811A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0x12811A8", Offset = "0x12811A8", VA = "0x12811A8")]
		public DestroyObject()
		{
		}
	}
	[Token(Token = "0x2000627")]
	[Tooltip("Destroys GameObjects in an array.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class DestroyObjects : FsmStateAction
	{
		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[Tooltip("The GameObjects to destroy.")]
		public FsmArray gameObjects;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Optional delay before destroying the Game Objects.")]
		public FsmFloat delay;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Detach children before destroying the Game Objects.")]
		public FsmBool detachChildren;

		[Token(Token = "0x6002024")]
		[Address(RVA = "0x12811B0", Offset = "0x12811B0", VA = "0x12811B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0x12811E4", Offset = "0x12811E4", VA = "0x12811E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0x128139C", Offset = "0x128139C", VA = "0x128139C")]
		public DestroyObjects()
		{
		}
	}
	[Token(Token = "0x2000628")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Destroys the Owner of the FSM! Useful for spawned Prefabs that need to kill themselves, e.g., a projectile that explodes on impact.")]
	public class DestroySelf : FsmStateAction
	{
		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Seconds to wait before destroying the owner. Can be useful to let other actions finish first. E.g. a fade-out effect.\nNOTE: If you use a delay and the FSM switches away from this state before it is finished, the owner will not be destroyed!")]
		public FsmFloat delay;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Ignore any time scaling.")]
		public FsmBool realTime;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Detach children before destroying the Owner. This allows children to survive, useful to allow FX to fade out etc.")]
		public FsmBool detachChildren;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float elapsedTime;

		[Token(Token = "0x6002027")]
		[Address(RVA = "0x12813A4", Offset = "0x12813A4", VA = "0x12813A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0x1281430", Offset = "0x1281430", VA = "0x1281430", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0x1281540", Offset = "0x1281540", VA = "0x1281540", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0x128147C", Offset = "0x128147C", VA = "0x128147C")]
		private void DoDestroySelf()
		{
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0x12815C4", Offset = "0x12815C4", VA = "0x12815C4")]
		public DestroySelf()
		{
		}
	}
	[Token(Token = "0x2000629")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Unparents all children from the Game Object.")]
	public class DetachChildren : FsmStateAction
	{
		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("GameObject to unparent children from.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x600202C")]
		[Address(RVA = "0x12815CC", Offset = "0x12815CC", VA = "0x12815CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600202D")]
		[Address(RVA = "0x12815D8", Offset = "0x12815D8", VA = "0x12815D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0x128160C", Offset = "0x128160C", VA = "0x128160C")]
		private static void DoDetachChildren(GameObject go)
		{
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0x1281698", Offset = "0x1281698", VA = "0x1281698")]
		public DetachChildren()
		{
		}
	}
	[Token(Token = "0x200062A")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Finds the Child of a GameObject by Name.\nNote, you can specify a path to the child, e.g., LeftShoulder/Arm/Hand/Finger. If you need to specify a tag, use {{GetChild}}.")]
	public class FindChild : FsmStateAction
	{
		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to search.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The name of the child. Note, you can specify a path to the child, e.g., LeftShoulder/Arm/Hand/Finger")]
		public FsmString childName;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the child in a GameObject variable.")]
		public FsmGameObject storeResult;

		[Token(Token = "0x6002030")]
		[Address(RVA = "0x12816A0", Offset = "0x12816A0", VA = "0x12816A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0x1281718", Offset = "0x1281718", VA = "0x1281718", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0x1281734", Offset = "0x1281734", VA = "0x1281734")]
		private void DoFindChild()
		{
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0x1281854", Offset = "0x1281854", VA = "0x1281854")]
		public FindChild()
		{
		}
	}
	[Token(Token = "0x200062B")]
	[Tooltip("Finds the closest object to the specified Game Object.\nOptionally filter by Tag and Visibility.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class FindClosest : FsmStateAction
	{
		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to measure from.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Only consider objects with this Tag. NOTE: It's generally a lot quicker to find objects with a Tag!")]
		[RequiredField]
		[UIHint(UIHint.Tag)]
		public FsmString withTag;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If checked, ignores the object that owns this FSM.")]
		public FsmBool ignoreOwner;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only consider objects visible to the camera.")]
		public FsmBool mustBeVisible;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the closest object.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeObject;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance to the closest object.")]
		public FsmFloat storeDistance;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002034")]
		[Address(RVA = "0x128185C", Offset = "0x128185C", VA = "0x128185C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0x1281924", Offset = "0x1281924", VA = "0x1281924", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0x1281C74", Offset = "0x1281C74", VA = "0x1281C74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0x1281950", Offset = "0x1281950", VA = "0x1281950")]
		private void DoFindClosest()
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0x1281C78", Offset = "0x1281C78", VA = "0x1281C78")]
		public FindClosest()
		{
		}
	}
	[Token(Token = "0x200062C")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Finds a Game Object by Name and/or Tag.")]
	public class FindGameObject : FsmStateAction
	{
		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the GameObject to find. You can leave this empty if you specify a Tag.")]
		public FsmString objectName;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Tag)]
		[Tooltip("Find a GameObject with this tag. If Object Name is specified then both name and Tag must match.")]
		public FsmString withTag;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a GameObject variable.")]
		public FsmGameObject store;

		[Token(Token = "0x6002039")]
		[Address(RVA = "0x1281C80", Offset = "0x1281C80", VA = "0x1281C80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0x1281D20", Offset = "0x1281D20", VA = "0x1281D20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0x1281D3C", Offset = "0x1281D3C", VA = "0x1281D3C")]
		private void Find()
		{
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0x1281EC4", Offset = "0x1281EC4", VA = "0x1281EC4", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0x1281F50", Offset = "0x1281F50", VA = "0x1281F50")]
		public FindGameObject()
		{
		}
	}
	[Token(Token = "0x200062D")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Finds the Child of a GameObject by Name and/or Tag. Use this to find attach points etc. NOTE: This action will search recursively through all children and return the first match; To find a specific child use Find Child.")]
	public class GetChild : FsmStateAction
	{
		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to search.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the child to search for.")]
		public FsmString childName;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Tag to search for. If Child Name is set, both name and Tag need to match.")]
		[UIHint(UIHint.Tag)]
		public FsmString withTag;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a GameObject variable.")]
		public FsmGameObject storeResult;

		[Token(Token = "0x600203E")]
		[Address(RVA = "0x1281F58", Offset = "0x1281F58", VA = "0x1281F58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0x1282008", Offset = "0x1282008", VA = "0x1282008", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0x12820A0", Offset = "0x12820A0", VA = "0x12820A0")]
		private static GameObject DoGetChildByName(GameObject root, string name, string tag)
		{
			return null;
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0x1282554", Offset = "0x1282554", VA = "0x1282554", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0x12825E0", Offset = "0x12825E0", VA = "0x12825E0")]
		public GetChild()
		{
		}
	}
	[Token(Token = "0x200062E")]
	[Tooltip("Gets the number of children that a GameObject has.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetChildCount : FsmStateAction
	{
		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to test.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number of children in an int variable.")]
		public FsmInt storeResult;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a specific count.")]
		public bool everyFrame;

		[Token(Token = "0x6002043")]
		[Address(RVA = "0x12825E8", Offset = "0x12825E8", VA = "0x12825E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0x1282618", Offset = "0x1282618", VA = "0x1282618", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0x12826F0", Offset = "0x12826F0", VA = "0x12826F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0x1282644", Offset = "0x1282644", VA = "0x1282644")]
		private void DoGetChildCount()
		{
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0x12826F4", Offset = "0x12826F4", VA = "0x12826F4")]
		public GetChildCount()
		{
		}
	}
	[Token(Token = "0x200062F")]
	[Tooltip("Gets the Child of a GameObject by Index.\nE.g., O to get the first child. HINT: Use this with an integer variable to iterate through children.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetChildNum : FsmStateAction
	{
		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to search.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The index of the child to find (0 = first child).")]
		public FsmInt childIndex;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the child in a GameObject variable.")]
		public FsmGameObject store;

		[Token(Token = "0x6002048")]
		[Address(RVA = "0x12826FC", Offset = "0x12826FC", VA = "0x12826FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0x1282740", Offset = "0x1282740", VA = "0x1282740", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0x128279C", Offset = "0x128279C", VA = "0x128279C")]
		private GameObject DoGetChildNum(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0x12828B8", Offset = "0x12828B8", VA = "0x12828B8")]
		public GetChildNum()
		{
		}
	}
	[Token(Token = "0x2000630")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Measures the Distance betweens 2 Game Objects and stores the result in a Float Variable.")]
	public class GetDistance : FsmStateAction
	{
		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Measure distance from this GameObject.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Target GameObject.")]
		public FsmGameObject target;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the distance in a float variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeResult;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600204C")]
		[Address(RVA = "0x12828C0", Offset = "0x12828C0", VA = "0x12828C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0x1282904", Offset = "0x1282904", VA = "0x1282904", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0x1282ACC", Offset = "0x1282ACC", VA = "0x1282ACC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0x1282930", Offset = "0x1282930", VA = "0x1282930")]
		private void DoGetDistance()
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0x1282AD0", Offset = "0x1282AD0", VA = "0x1282AD0")]
		public GetDistance()
		{
		}
	}
	[Token(Token = "0x2000631")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Measures the Distance between a GameObject and a target GameObject/Position. If both GameObject and Position are defined, position is taken a local offset from the GameObject's position.")]
	public class GetDistanceXYZ : ComponentAction<Transform>
	{
		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Measure distance from this GameObject.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Measure distance to this GameObject (or set world position below).")]
		public FsmGameObject target;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("World position or local offset from target GameObject, if defined.")]
		public FsmVector3 position;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance in a float variable.")]
		public FsmFloat storeDistance;

		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Space used to measure the distance in. E.g. along the world X axis or the GameObject's local X axis.")]
		public Space space;

		[Token(Token = "0x4001CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance along the X axis.")]
		public FsmFloat storeXDistance;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance along the Y axis.")]
		public FsmFloat storeYDistance;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance along the Z axis.")]
		public FsmFloat storeZDistance;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject cachedTargetGameObject;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform targetTransform;

		[Token(Token = "0x17000373")]
		private Transform gameObjectTransform
		{
			[Token(Token = "0x6002051")]
			[Address(RVA = "0x1282AD8", Offset = "0x1282AD8", VA = "0x1282AD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0x1282AE0", Offset = "0x1282AE0", VA = "0x1282AE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0x1282B68", Offset = "0x1282B68", VA = "0x1282B68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0x1282F08", Offset = "0x1282F08", VA = "0x1282F08", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0x1282B94", Offset = "0x1282B94", VA = "0x1282B94")]
		private void DoGetDistanceXYZ()
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0x1282F0C", Offset = "0x1282F0C", VA = "0x1282F0C")]
		public GetDistanceXYZ()
		{
		}
	}
	[Token(Token = "0x2000632")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets a Game Object's Layer and stores it in an Int Variable.")]
	public class GetLayer : FsmStateAction
	{
		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to examine.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Layer in an Int Variable.")]
		public FsmInt storeResult;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002057")]
		[Address(RVA = "0x1282F54", Offset = "0x1282F54", VA = "0x1282F54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0x1282F84", Offset = "0x1282F84", VA = "0x1282F84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0x1283058", Offset = "0x1283058", VA = "0x1283058", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0x1282FB0", Offset = "0x1282FB0", VA = "0x1282FB0")]
		private void DoGetLayer()
		{
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0x128305C", Offset = "0x128305C", VA = "0x128305C")]
		public GetLayer()
		{
		}
	}
	[Token(Token = "0x2000633")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets the name of a Game Object and stores it in a String Variable.")]
	public class GetName : FsmStateAction
	{
		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object target.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Game Object name in a String Variable.")]
		public FsmString storeName;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600205C")]
		[Address(RVA = "0x1283064", Offset = "0x1283064", VA = "0x1283064", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0x12830EC", Offset = "0x12830EC", VA = "0x12830EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0x12831DC", Offset = "0x12831DC", VA = "0x12831DC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0x1283118", Offset = "0x1283118", VA = "0x1283118")]
		private void DoGetGameObjectName()
		{
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0x12831E0", Offset = "0x12831E0", VA = "0x12831E0")]
		public GetName()
		{
		}
	}
	[Token(Token = "0x2000634")]
	[Tooltip("Each time this action is called it gets the next child of a GameObject. This lets you quickly loop through all the children of an object to perform actions on them. NOTE: To find a specific child use Find Child.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetNextChild : FsmStateAction
	{
		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The parent GameObject. Note, if GameObject changes, this action will reset and start again at the first child.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the next child in a GameObject variable.")]
		public FsmGameObject storeNextChild;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send to get the next child.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when there are no more children.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nextChildIndex;

		[Token(Token = "0x6002061")]
		[Address(RVA = "0x12831E8", Offset = "0x12831E8", VA = "0x12831E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0x1283240", Offset = "0x1283240", VA = "0x1283240", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0x12832A0", Offset = "0x12832A0", VA = "0x12832A0")]
		private void DoGetNextChild(GameObject parent)
		{
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0x1283434", Offset = "0x1283434", VA = "0x1283434")]
		public GetNextChild()
		{
		}
	}
	[Token(Token = "0x2000635")]
	[Tooltip("Gets the Game Object that owns the FSM and stores it in a Game Object variable.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetOwner : FsmStateAction
	{
		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the Owner in a Game Object variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x6002065")]
		[Address(RVA = "0x128343C", Offset = "0x128343C", VA = "0x128343C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0x1283448", Offset = "0x1283448", VA = "0x1283448", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0x1283478", Offset = "0x1283478", VA = "0x1283478")]
		public GetOwner()
		{
		}
	}
	[Token(Token = "0x2000636")]
	[Tooltip("Gets the Parent of a Game Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetParent : FsmStateAction
	{
		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to find the parent of.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the parent object (or null if no parent) in a variable.")]
		public FsmGameObject storeResult;

		[Token(Token = "0x6002068")]
		[Address(RVA = "0x1283480", Offset = "0x1283480", VA = "0x1283480", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0x12834A8", Offset = "0x12834A8", VA = "0x12834A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0x12835D0", Offset = "0x12835D0", VA = "0x12835D0")]
		public GetParent()
		{
		}
	}
	[Token(Token = "0x2000637")]
	[Tooltip("Gets a Random Child of a Game Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetRandomChild : FsmStateAction
	{
		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The parent Game Object.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the random child in a Game Object Variable.")]
		public FsmGameObject storeResult;

		[Token(Token = "0x600206B")]
		[Address(RVA = "0x12835D8", Offset = "0x12835D8", VA = "0x12835D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0x1283600", Offset = "0x1283600", VA = "0x1283600", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0x128361C", Offset = "0x128361C", VA = "0x128361C")]
		private void DoGetRandomChild()
		{
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0x1283724", Offset = "0x1283724", VA = "0x1283724")]
		public GetRandomChild()
		{
		}
	}
	[Token(Token = "0x2000638")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets a Random Game Object from the scene.\nOptionally filter by Tag.")]
	public class GetRandomObject : FsmStateAction
	{
		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Only select from Game Objects with this Tag.")]
		[UIHint(UIHint.Tag)]
		public FsmString withTag;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in a GameObject Variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeResult;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600206F")]
		[Address(RVA = "0x128372C", Offset = "0x128372C", VA = "0x128372C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0x128379C", Offset = "0x128379C", VA = "0x128379C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0x1283968", Offset = "0x1283968", VA = "0x1283968", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x12837C8", Offset = "0x12837C8", VA = "0x12837C8")]
		private void DoGetRandomObject()
		{
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x128396C", Offset = "0x128396C", VA = "0x128396C")]
		public GetRandomObject()
		{
		}
	}
	[Token(Token = "0x2000639")]
	[Tooltip("Gets the top most parent of the Game Object.\nIf the game object has no parent, returns itself.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetRoot : FsmStateAction
	{
		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the root of the Game Object in a Game Object Variable.")]
		public FsmGameObject storeRoot;

		[Token(Token = "0x6002074")]
		[Address(RVA = "0x1283974", Offset = "0x1283974", VA = "0x1283974", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x128399C", Offset = "0x128399C", VA = "0x128399C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x12839B8", Offset = "0x12839B8", VA = "0x12839B8")]
		private void DoGetRoot()
		{
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x1283A84", Offset = "0x1283A84", VA = "0x1283A84")]
		public GetRoot()
		{
		}
	}
	[Token(Token = "0x200063A")]
	[Tooltip("Gets a Game Object's Tag and stores it in a String Variable.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetTag : FsmStateAction
	{
		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Tag in a String Variable.")]
		public FsmString storeResult;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x1283A8C", Offset = "0x1283A8C", VA = "0x1283A8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x1283ABC", Offset = "0x1283ABC", VA = "0x1283ABC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0x1283BA4", Offset = "0x1283BA4", VA = "0x1283BA4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0x1283AE8", Offset = "0x1283AE8", VA = "0x1283AE8")]
		private void DoGetTag()
		{
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x1283BA8", Offset = "0x1283BA8", VA = "0x1283BA8")]
		public GetTag()
		{
		}
	}
	[Token(Token = "0x200063B")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Gets the number of Game Objects in the scene with the specified Tag.")]
	public class GetTagCount : FsmStateAction
	{
		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Tag to search for.")]
		[UIHint(UIHint.Tag)]
		public FsmString tag;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number found in an int variable.")]
		[RequiredField]
		public FsmInt storeResult;

		[Token(Token = "0x600207D")]
		[Address(RVA = "0x1283BB0", Offset = "0x1283BB0", VA = "0x1283BB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0x1283C18", Offset = "0x1283C18", VA = "0x1283C18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0x1283C68", Offset = "0x1283C68", VA = "0x1283C68")]
		public GetTagCount()
		{
		}
	}
	[Token(Token = "0x200063C")]
	[Tooltip("Gets a Game Object's Transform and stores it in an Object Variable.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class GetTransform : FsmStateAction
	{
		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(Transform))]
		[Tooltip("Store the GameObject's Transform in an Object variable of type UnityEngine.Transform.")]
		public FsmObject storeTransform;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002080")]
		[Address(RVA = "0x1283C70", Offset = "0x1283C70", VA = "0x1283C70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0x1283CF8", Offset = "0x1283CF8", VA = "0x1283CF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0x1283DCC", Offset = "0x1283DCC", VA = "0x1283DCC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0x1283D24", Offset = "0x1283D24", VA = "0x1283D24")]
		private void DoGetGameObjectName()
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0x1283DD0", Offset = "0x1283DD0", VA = "0x1283DD0")]
		public GetTransform()
		{
		}
	}
	[Token(Token = "0x200063D")]
	[Tooltip("Checks if an Object has a Component. Optionally remove the Component on exiting the state.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class HasComponent : FsmStateAction
	{
		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to check.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.ScriptComponent)]
		[Tooltip("The name of the component to check for.")]
		public FsmString component;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove the component on exiting the state.")]
		public FsmBool removeOnExit;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the Game Object has the component.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the Game Object does not have the component.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a bool variable.")]
		public FsmBool store;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Component aComponent;

		[Token(Token = "0x6002085")]
		[Address(RVA = "0x1283DD8", Offset = "0x1283DD8", VA = "0x1283DD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0x1283E48", Offset = "0x1283E48", VA = "0x1283E48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0x128404C", Offset = "0x128404C", VA = "0x128404C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0x1284090", Offset = "0x1284090", VA = "0x1284090", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x1283EA8", Offset = "0x1283EA8", VA = "0x1283EA8")]
		private void DoHasComponent(GameObject go)
		{
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0x1284138", Offset = "0x1284138", VA = "0x1284138")]
		public HasComponent()
		{
		}
	}
	[Token(Token = "0x200063E")]
	[Tooltip("Selects a Random Game Object from an array of Game Objects.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SelectRandomGameObject : FsmStateAction
	{
		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Game Objects", "Game Object", "Weight")]
		[Tooltip("A possible GameObject choice.")]
		public FsmGameObject[] gameObjects;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this GameObject being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the selected GameObject in a GameObject Variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x600208B")]
		[Address(RVA = "0x1284140", Offset = "0x1284140", VA = "0x1284140", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0x12842C4", Offset = "0x12842C4", VA = "0x12842C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0x12842E0", Offset = "0x12842E0", VA = "0x12842E0")]
		private void DoSelectRandomGameObject()
		{
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0x1284368", Offset = "0x1284368", VA = "0x1284368")]
		public SelectRandomGameObject()
		{
		}
	}
	[Token(Token = "0x200063F")]
	[Tooltip("Sets the value of a Game Object Variable.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetGameObject : FsmStateAction
	{
		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject Variable to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmGameObject variable;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set the variable value. NOTE: leave empty to set to null.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600208F")]
		[Address(RVA = "0x1284370", Offset = "0x1284370", VA = "0x1284370", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0x12843A0", Offset = "0x12843A0", VA = "0x12843A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0x1284400", Offset = "0x1284400", VA = "0x1284400", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0x1284438", Offset = "0x1284438", VA = "0x1284438")]
		public SetGameObject()
		{
		}
	}
	[Token(Token = "0x2000640")]
	[ActionCategory(ActionCategory.GameObject)]
	[Tooltip("Sets a Game Object's Layer.")]
	public class SetLayer : FsmStateAction
	{
		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to set.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new layer.")]
		[UIHint(UIHint.Layer)]
		public int layer;

		[Token(Token = "0x6002093")]
		[Address(RVA = "0x1284440", Offset = "0x1284440", VA = "0x1284440", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0x1284464", Offset = "0x1284464", VA = "0x1284464", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0x1284480", Offset = "0x1284480", VA = "0x1284480")]
		private void DoSetLayer()
		{
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0x1284520", Offset = "0x1284520", VA = "0x1284520")]
		public SetLayer()
		{
		}
	}
	[Token(Token = "0x2000641")]
	[Tooltip("Sets a Game Object's Name.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetName : FsmStateAction
	{
		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to name.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new name.")]
		[RequiredField]
		public FsmString name;

		[Token(Token = "0x6002097")]
		[Address(RVA = "0x1284528", Offset = "0x1284528", VA = "0x1284528", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0x1284550", Offset = "0x1284550", VA = "0x1284550", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0x128456C", Offset = "0x128456C", VA = "0x128456C")]
		private void DoSetLayer()
		{
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0x128461C", Offset = "0x128461C", VA = "0x128461C")]
		public SetName()
		{
		}
	}
	[Token(Token = "0x2000642")]
	[Tooltip("Sets the Parent of a Game Object.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetParent : FsmStateAction
	{
		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to parent.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new parent for the Game Object. Leave empty or None to un-parent the Game Object.")]
		public FsmGameObject parent;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before. Hint: Setting to False can fix common UI scaling issues.")]
		public FsmBool worldPositionStays;

		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the local position to 0,0,0 after parenting.")]
		public FsmBool resetLocalPosition;

		[Token(Token = "0x4001CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the local rotation to 0,0,0 after parenting.")]
		public FsmBool resetLocalRotation;

		[Token(Token = "0x600209B")]
		[Address(RVA = "0x1284624", Offset = "0x1284624", VA = "0x1284624", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0x1284688", Offset = "0x1284688", VA = "0x1284688", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0x1284894", Offset = "0x1284894", VA = "0x1284894")]
		public SetParent()
		{
		}
	}
	[Token(Token = "0x2000643")]
	[Tooltip("Sets a Game Object's Tag.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetTag : FsmStateAction
	{
		[Token(Token = "0x4001CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to set.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The tag. Note: Use Unity's <a href=\"http://unity3d.com/support/documentation/Components/class-TagManager.html\">Tag Manager</a> to add/edit tags.")]
		[UIHint(UIHint.Tag)]
		public FsmString tag;

		[Token(Token = "0x600209E")]
		[Address(RVA = "0x128489C", Offset = "0x128489C", VA = "0x128489C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0x1284904", Offset = "0x1284904", VA = "0x1284904", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0x12849B4", Offset = "0x12849B4", VA = "0x12849B4")]
		public SetTag()
		{
		}
	}
	[Token(Token = "0x2000644")]
	[Tooltip("Set the Tag on all children of a GameObject. Optionally filter by component.")]
	[ActionCategory(ActionCategory.GameObject)]
	public class SetTagsOnChildren : FsmStateAction
	{
		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("GameObject Parent")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Tag)]
		[Tooltip("Set Tag To...")]
		public FsmString tag;

		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.ScriptComponent)]
		[Tooltip("Only set the Tag on children with this component.")]
		public FsmString filterByComponent;

		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Type componentFilter;

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0x12849BC", Offset = "0x12849BC", VA = "0x12849BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0x12849F4", Offset = "0x12849F4", VA = "0x12849F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0x1284A30", Offset = "0x1284A30", VA = "0x1284A30")]
		private void SetTag(GameObject parent)
		{
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0x1284E9C", Offset = "0x1284E9C", VA = "0x1284E9C")]
		private void UpdateComponentFilter()
		{
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0x128507C", Offset = "0x128507C", VA = "0x128507C")]
		public SetTagsOnChildren()
		{
		}
	}
	[Token(Token = "0x2000645")]
	[ActionCategory("Gamepad")]
	[NoActionTargets]
	[SeeAlso("New Unity Input Manager")]
	public abstract class GamepadActionBase : FsmStateAction
	{
		[Token(Token = "0x2000646")]
		public enum UpdateMode
		{
			[Token(Token = "0x4001CEF")]
			Once,
			[Token(Token = "0x4001CF0")]
			Update,
			[Token(Token = "0x4001CF1")]
			FixedUpdate
		}

		[Token(Token = "0x4001CEB")]
		public const string XboxGamepad = "Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.";

		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("When to read the Input.")]
		public UpdateMode updateMode;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Gamepad gamepad;

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0x1285084", Offset = "0x1285084", VA = "0x1285084", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0x1285090", Offset = "0x1285090", VA = "0x1285090", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0x12850BC", Offset = "0x12850BC", VA = "0x12850BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0x1285168", Offset = "0x1285168", VA = "0x1285168", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0x128517C", Offset = "0x128517C", VA = "0x128517C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0x12850E8", Offset = "0x12850E8", VA = "0x12850E8")]
		private void DoAction()
		{
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0x1285190", Offset = "0x1285190", VA = "0x1285190", Slot = "62")]
		protected virtual void Execute()
		{
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0x1285194", Offset = "0x1285194", VA = "0x1285194")]
		protected ButtonControl GetButtonControl(GamepadButton button)
		{
			return null;
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0x12852A4", Offset = "0x12852A4", VA = "0x12852A4")]
		protected GamepadActionBase()
		{
		}
	}
	[Token(Token = "0x2000647")]
	[Tooltip("Checks Gamepad buttons for combos. Combos are either buttons pressed at the same time or pressed in a specific sequence. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadButtonComboEvents : GamepadActionBase
	{
		[Token(Token = "0x2000648")]
		public enum Combo
		{
			[Token(Token = "0x4001D01")]
			SameTime,
			[Token(Token = "0x4001D02")]
			Sequence
		}

		[Token(Token = "0x4001CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(Combo))]
		[Tooltip("The type of combo to detect.")]
		public FsmEnum combo;

		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ArrayEditor(typeof(GamepadButton), "Button", 0, 0, 65536)]
		[Tooltip("The Gamepad button to test.")]
		public FsmArray buttons;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Time allowed for the next button press. Generally shorter for Same Time combos and longer for Sequences.")]
		public FsmFloat timeWindow;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmBool realTime;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the combo was detected.")]
		public FsmBool didSucceed;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the combo was successfully executed.")]
		public FsmEvent successEvent;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if the combo failed (started but timed-out).")]
		public FsmEvent failedEvent;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmBool debug;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool comboStarted;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int stepInSequence;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float timer;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly List<ButtonControl> comboButtons;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<ButtonControl> buttonsPressed;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<ButtonControl> validNextButtons;

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0x12852AC", Offset = "0x12852AC", VA = "0x12852AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0x128533C", Offset = "0x128533C", VA = "0x128533C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020B1")]
		[Address(RVA = "0x12854FC", Offset = "0x12854FC", VA = "0x12854FC")]
		private void ResetCombo()
		{
		}

		[Token(Token = "0x60020B2")]
		[Address(RVA = "0x12856EC", Offset = "0x12856EC", VA = "0x12856EC", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0x1285938", Offset = "0x1285938", VA = "0x1285938")]
		private void DoComboStep(ButtonControl lastPressedButton)
		{
		}

		[Token(Token = "0x60020B4")]
		[Address(RVA = "0x1285BC8", Offset = "0x1285BC8", VA = "0x1285BC8")]
		public GamepadButtonComboEvents()
		{
		}
	}
	[Token(Token = "0x2000649")]
	[Tooltip("Checks Gamepad buttons. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadButtonEvents : GamepadActionBase
	{
		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(GamepadButton))]
		[Tooltip("The Gamepad button to test.")]
		public FsmEnum button;

		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the button is pressed.")]
		public FsmBool isPressed;

		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the button is pressed.")]
		public FsmEvent isPressedEvent;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the button was pressed this frame.")]
		public FsmEvent wasPressedThisFrame;

		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the button was released this frame.")]
		public FsmEvent wasReleasedThisFrame;

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0x1285C80", Offset = "0x1285C80", VA = "0x1285C80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0x1285D38", Offset = "0x1285D38", VA = "0x1285D38", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x60020B7")]
		[Address(RVA = "0x1285E68", Offset = "0x1285E68", VA = "0x1285E68")]
		public GamepadButtonEvents()
		{
		}
	}
	[Token(Token = "0x200064A")]
	[Tooltip("Get values from a Gamepad button. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadGetButtonValues : GamepadActionBase
	{
		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(GamepadButton))]
		[Tooltip("The Gamepad button to test.")]
		public FsmEnum button;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store button's current value.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat currentValue;

		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store if the button is pressed. This is true if its current value is greater than a predetermined threshold.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPressed;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Stores how long the button has been pressed. Resets to zero when released.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat heldTime;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Stores how many times the button has been pressed while this State was active. Useful for 'double-click' buttons.")]
		[UIHint(UIHint.Variable)]
		public FsmInt pressedCount;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float pressedStartTime;

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0x1285E70", Offset = "0x1285E70", VA = "0x1285E70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0x1285EA0", Offset = "0x1285EA0", VA = "0x1285EA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0x1285EC8", Offset = "0x1285EC8", VA = "0x1285EC8", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0x1286010", Offset = "0x1286010", VA = "0x1286010")]
		public GamepadGetButtonValues()
		{
		}
	}
	[Token(Token = "0x200064B")]
	[Tooltip("Reads the value of a Gamepad button. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadReadButtonValue : GamepadActionBase
	{
		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Gamepad button to test.")]
		[ObjectType(typeof(GamepadButton))]
		public FsmEnum button;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store button's current value.")]
		public FsmFloat storeFloatValue;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the button is pressed. This is true if its current value is greater than a predetermined threshold.")]
		public FsmBool isPressed;

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0x1286018", Offset = "0x1286018", VA = "0x1286018", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0x1286048", Offset = "0x1286048", VA = "0x1286048", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0x1286118", Offset = "0x1286118", VA = "0x1286118", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0x1286170", Offset = "0x1286170", VA = "0x1286170")]
		public GamepadReadButtonValue()
		{
		}
	}
	[Token(Token = "0x200064C")]
	[Tooltip("Reads the value of a Gamepad button. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadReadStickValue : GamepadActionBase
	{
		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Gamepad stick to test.")]
		[ObjectType(typeof(GamepadStick))]
		public FsmEnum stick;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the stick's current value.")]
		public FsmVector2 storeVector2Value;

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0x1286178", Offset = "0x1286178", VA = "0x1286178", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0x12861A8", Offset = "0x12861A8", VA = "0x12861A8", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0x128628C", Offset = "0x128628C", VA = "0x128628C")]
		private InputControl GetControl()
		{
			return null;
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0x1286384", Offset = "0x1286384", VA = "0x1286384")]
		public GamepadReadStickValue()
		{
		}
	}
	[Token(Token = "0x200064D")]
	[Tooltip("Checks a Gamepad stick and translates its offset into events. Assumes an Xbox-style gamepad with four face buttons, two triggers, two shoulder buttons, and two menu buttons.")]
	public class GamepadStickEvents : GamepadActionBase
	{
		[Token(Token = "0x200064E")]
		public enum Stick
		{
			[Token(Token = "0x4001D1B")]
			LeftStick,
			[Token(Token = "0x4001D1C")]
			RightStick,
			[Token(Token = "0x4001D1D")]
			DPad
		}

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(Stick))]
		[Tooltip("The Gamepad stick to test.")]
		public FsmEnum stick;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if input is to the left.")]
		public FsmEvent leftEvent;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if input is to the right.")]
		public FsmEvent rightEvent;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if input is to the up.")]
		public FsmEvent upEvent;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if input is to the down.")]
		public FsmEvent downEvent;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if input is in any direction.")]
		public FsmEvent anyDirection;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if no axis input (centered).")]
		public FsmEvent noDirection;

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0x128638C", Offset = "0x128638C", VA = "0x128638C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0x128640C", Offset = "0x128640C", VA = "0x128640C", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x1286640", Offset = "0x1286640", VA = "0x1286640")]
		private InputControl GetControl()
		{
			return null;
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x1286738", Offset = "0x1286738", VA = "0x1286738")]
		public GamepadStickEvents()
		{
		}
	}
	[Token(Token = "0x200064F")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Fills the screen with a Color. NOTE: Uses OnGUI so you need a PlayMakerGUI component in the scene.")]
	public class DrawFullscreenColor : FsmStateAction
	{
		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Color. NOTE: Uses OnGUI so you need a PlayMakerGUI component in the scene.")]
		public FsmColor color;

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x1286740", Offset = "0x1286740", VA = "0x1286740", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x1286774", Offset = "0x1286774", VA = "0x1286774", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x1286874", Offset = "0x1286874", VA = "0x1286874")]
		public DrawFullscreenColor()
		{
		}
	}
	[Token(Token = "0x2000650")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Draws a GUI Texture. NOTE: Uses OnGUI so you need a PlayMakerGUI component in the scene. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/GUI.DrawTexture.html\">DrawTexture</a>.")]
	public class DrawTexture : FsmStateAction
	{
		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Texture to draw.")]
		[RequiredField]
		public FsmTexture texture;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Rectangle on the screen to draw the texture within. Alternatively, set or override individual properties below.")]
		[Title("Position")]
		public FsmRect screenRect;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Left screen coordinate.")]
		public FsmFloat left;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Top screen coordinate.")]
		public FsmFloat top;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Width of texture on screen.")]
		public FsmFloat width;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Height of texture on screen.")]
		public FsmFloat height;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.")]
		public ScaleMode scaleMode;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.")]
		public FsmBool alphaBlend;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used. Pass in w/h for the desired aspect ratio. This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.")]
		public FsmFloat imageAspect;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Use normalized screen coordinates (0-1)")]
		public FsmBool normalized;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rect rect;

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x128687C", Offset = "0x128687C", VA = "0x128687C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x1286978", Offset = "0x1286978", VA = "0x1286978", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0x1286C8C", Offset = "0x1286C8C", VA = "0x1286C8C")]
		public DrawTexture()
		{
		}
	}
	[Token(Token = "0x2000651")]
	[Tooltip("Enables/Disables the PlayMakerGUI component in the scene. Note, you need a PlayMakerGUI component in the scene to see OnGUI actions. However, OnGUI can be very expensive on mobile devices. This action lets you turn OnGUI on/off (e.g., turn it on for a menu, and off during gameplay).")]
	[ActionCategory(ActionCategory.GUI)]
	public class EnableGUI : FsmStateAction
	{
		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enableGUI;

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0x1286C94", Offset = "0x1286C94", VA = "0x1286C94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0x1286CBC", Offset = "0x1286CBC", VA = "0x1286CBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0x1286D4C", Offset = "0x1286D4C", VA = "0x1286D4C")]
		public EnableGUI()
		{
		}
	}
	[Token(Token = "0x2000652")]
	[Tooltip("GUI base action - don't use!")]
	public abstract class GUIAction : FsmStateAction
	{
		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Screen rectangle.")]
		[UIHint(UIHint.Variable)]
		public FsmRect screenRect;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Left coordinate of screen rectangle.")]
		public FsmFloat left;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Top coordinate of screen rectangle.")]
		public FsmFloat top;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Width of screen rectangle.")]
		public FsmFloat width;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Height of screen rectangle.")]
		public FsmFloat height;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal Rect rect;

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x1286D54", Offset = "0x1286D54", VA = "0x1286D54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0x1286E04", Offset = "0x1286E04", VA = "0x1286E04", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0x1286FF4", Offset = "0x1286FF4", VA = "0x1286FF4")]
		protected GUIAction()
		{
		}
	}
	[Token(Token = "0x2000653")]
	[Tooltip("GUI Box.")]
	[ActionCategory(ActionCategory.GUI)]
	public class GUIBox : GUIContentAction
	{
		[Token(Token = "0x60020D4")]
		[Address(RVA = "0x1286FFC", Offset = "0x1286FFC", VA = "0x1286FFC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0x1287204", Offset = "0x1287204", VA = "0x1287204")]
		public GUIBox()
		{
		}
	}
	[Token(Token = "0x2000654")]
	[Tooltip("GUI button. Sends an Event when pressed. Optionally store the button state in a Bool Variable.")]
	[ActionCategory(ActionCategory.GUI)]
	public class GUIButton : GUIContentAction
	{
		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The Event to send when the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the button state in a bool variable.")]
		public FsmBool storeButtonState;

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0x1287214", Offset = "0x1287214", VA = "0x1287214", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0x128733C", Offset = "0x128733C", VA = "0x128733C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0x128745C", Offset = "0x128745C", VA = "0x128745C")]
		public GUIButton()
		{
		}
	}
	[Token(Token = "0x2000655")]
	[Tooltip("GUI base action - don't use!")]
	public abstract class GUIContentAction : GUIAction
	{
		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Optional image to display.")]
		public FsmTexture image;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Optional text to display.")]
		public FsmString text;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Optional tooltip. Accessed by {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal GUIContent content;

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0x1287294", Offset = "0x1287294", VA = "0x1287294", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0x1287138", Offset = "0x1287138", VA = "0x1287138", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x128720C", Offset = "0x128720C", VA = "0x128720C")]
		protected GUIContentAction()
		{
		}
	}
	[Token(Token = "0x2000656")]
	[Obsolete("GUIElement is part of the legacy UI system removed in 2019.3")]
	[Tooltip("Performs a Hit Test on a Game Object with a GUITexture or GUIText component.")]
	[ActionCategory(ActionCategory.GUIElement)]
	public class GUIElementHitTest : FsmStateAction
	{
		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		[Tooltip("The GameObject that has a GUITexture or GUIText component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Specify camera or use MainCamera as default.")]
		public Camera camera;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector position on screen. Usually stored by actions like GetTouchInfo, or World To Screen Point.")]
		public FsmVector3 screenPoint;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Specify screen X coordinate.")]
		public FsmFloat screenX;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Specify screen Y coordinate.")]
		public FsmFloat screenY;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Whether the specified screen coordinates are normalized (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the Hit Test is true.")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result of the Hit Test in a bool variable (true/false).")]
		public FsmBool storeResult;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if you want to wait for the hit test to return true.")]
		public FsmBool everyFrame;

		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject gameObjectCached;

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0x1287464", Offset = "0x1287464", VA = "0x1287464", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0x12875B4", Offset = "0x12875B4", VA = "0x12875B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0x12875BC", Offset = "0x12875BC", VA = "0x12875BC")]
		public GUIElementHitTest()
		{
		}
	}
	[Token(Token = "0x2000657")]
	[Tooltip("GUI Horizontal Slider connected to a Float Variable.")]
	[ActionCategory(ActionCategory.GUI)]
	public class GUIHorizontalSlider : GUIAction
	{
		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The float variable to link the slider to. Moving the slider changes the value, and changes in the value move the slider.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[RequiredField]
		[Tooltip("The value of the float variable when slider is all the way to the left.")]
		public FsmFloat leftValue;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[Tooltip("The value of the float variable when slider is all the way to the right.")]
		public FsmFloat rightValue;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Optional GUIStyle for the slider track.")]
		public FsmString sliderStyle;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Optional GUIStyle for the slider thumb.")]
		public FsmString thumbStyle;

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0x12875C4", Offset = "0x12875C4", VA = "0x12875C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0x12876A8", Offset = "0x12876A8", VA = "0x12876A8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020E1")]
		[Address(RVA = "0x12878B4", Offset = "0x12878B4", VA = "0x12878B4")]
		public GUIHorizontalSlider()
		{
		}
	}
	[Token(Token = "0x2000658")]
	[Tooltip("GUI Label.")]
	[ActionCategory(ActionCategory.GUI)]
	public class GUILabel : GUIContentAction
	{
		[Token(Token = "0x60020E2")]
		[Address(RVA = "0x12878BC", Offset = "0x12878BC", VA = "0x12878BC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0x12879F8", Offset = "0x12879F8", VA = "0x12879F8")]
		public GUILabel()
		{
		}
	}
	[Token(Token = "0x2000659")]
	[Tooltip("Gets the Tooltip of the control the mouse is currently over and store it in a String Variable.")]
	[ActionCategory(ActionCategory.GUI)]
	public class GUITooltip : FsmStateAction
	{
		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the tooltip in a string variable.")]
		public FsmString storeTooltip;

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0x1287A00", Offset = "0x1287A00", VA = "0x1287A00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0x1287A0C", Offset = "0x1287A0C", VA = "0x1287A0C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0x1287A7C", Offset = "0x1287A7C", VA = "0x1287A7C")]
		public GUITooltip()
		{
		}
	}
	[Token(Token = "0x200065A")]
	[Tooltip("GUI Vertical Slider connected to a Float Variable.")]
	[ActionCategory(ActionCategory.GUI)]
	public class GUIVerticalSlider : GUIAction
	{
		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Float Variable linked to the slider value.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The value of the variable at the top of the slider.")]
		[RequiredField]
		public FsmFloat topValue;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[Tooltip("The value of the variable at the bottom of the slider.")]
		public FsmFloat bottomValue;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Optional GUIStyle for the slider track.")]
		public FsmString sliderStyle;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Optional GUIStyle for the slider thumb.")]
		public FsmString thumbStyle;

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0x1287A84", Offset = "0x1287A84", VA = "0x1287A84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0x1287B88", Offset = "0x1287B88", VA = "0x1287B88", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0x1287D94", Offset = "0x1287D94", VA = "0x1287D94")]
		public GUIVerticalSlider()
		{
		}
	}
	[Token(Token = "0x200065B")]
	[Tooltip("Resets the GUI matrix. Useful if you've rotated or scaled the GUI and now want to reset it.")]
	[ActionCategory(ActionCategory.GUI)]
	public class ResetGUIMatrix : FsmStateAction
	{
		[Token(Token = "0x60020EA")]
		[Address(RVA = "0x1287D9C", Offset = "0x1287D9C", VA = "0x1287D9C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0x1287EEC", Offset = "0x1287EEC", VA = "0x1287EEC")]
		public ResetGUIMatrix()
		{
		}
	}
	[Token(Token = "0x200065C")]
	[Tooltip("Rotates the GUI around a pivot point. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	[ActionCategory(ActionCategory.GUI)]
	public class RotateGUI : FsmStateAction
	{
		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Angle to rotate in degrees.")]
		public FsmFloat angle;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("X coordinate of pivot.")]
		public FsmFloat pivotX;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Y coordinate of pivot.")]
		public FsmFloat pivotY;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public bool normalized;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("Apply to all GUI actions in all FSMs.")]
		public bool applyGlobally;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool applied;

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0x1287EF4", Offset = "0x1287EF4", VA = "0x1287EF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0x1287F6C", Offset = "0x1287F6C", VA = "0x1287F6C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0x1288114", Offset = "0x1288114", VA = "0x1288114", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0x128811C", Offset = "0x128811C", VA = "0x128811C")]
		public RotateGUI()
		{
		}
	}
	[Token(Token = "0x200065D")]
	[ActionCategory(ActionCategory.GUI)]
	[Tooltip("Scales the GUI around a pivot point. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	public class ScaleGUI : FsmStateAction
	{
		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Scale in x (1 = 100%)")]
		[RequiredField]
		public FsmFloat scaleX;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Scale in y (1 = 100%)")]
		public FsmFloat scaleY;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Scale around this x screen coordinate.")]
		public FsmFloat pivotX;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Scale around this y screen coordinate.")]
		public FsmFloat pivotY;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Pivot point uses normalized coordinates (0-1). E.g. 0.5 is the center of the screen.")]
		public bool normalized;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Apply to all GUI actions in all FSMs.")]
		public bool applyGlobally;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		private bool applied;

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0x1288124", Offset = "0x1288124", VA = "0x1288124", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0x12881BC", Offset = "0x12881BC", VA = "0x12881BC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0x1288440", Offset = "0x1288440", VA = "0x1288440", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0x1288448", Offset = "0x1288448", VA = "0x1288448")]
		public ScaleGUI()
		{
		}
	}
	[Token(Token = "0x200065E")]
	[Tooltip("Sets the global Alpha for the GUI. Useful for fading GUI up/down. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetGUIAlpha : FsmStateAction
	{
		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Set the transparency of the GUI. 1 = opaque, 0 = transparent.")]
		public FsmFloat alpha;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0x1288450", Offset = "0x1288450", VA = "0x1288450", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0x1288478", Offset = "0x1288478", VA = "0x1288478", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0x12885C8", Offset = "0x12885C8", VA = "0x12885C8")]
		public SetGUIAlpha()
		{
		}
	}
	[Token(Token = "0x200065F")]
	[Tooltip("Sets the Tinting Color for all background elements rendered by the GUI. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetGUIBackgroundColor : FsmStateAction
	{
		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The color for all background elements.")]
		[RequiredField]
		public FsmColor backgroundColor;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0x12885D0", Offset = "0x12885D0", VA = "0x12885D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x1288604", Offset = "0x1288604", VA = "0x1288604", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0x1288730", Offset = "0x1288730", VA = "0x1288730")]
		public SetGUIBackgroundColor()
		{
		}
	}
	[Token(Token = "0x2000660")]
	[Tooltip("Sets the Tinting Color for the GUI. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetGUIColor : FsmStateAction
	{
		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Tint Color for the GUI.")]
		public FsmColor color;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0x1288738", Offset = "0x1288738", VA = "0x1288738", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0x128876C", Offset = "0x128876C", VA = "0x128876C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0x1288898", Offset = "0x1288898", VA = "0x1288898")]
		public SetGUIColor()
		{
		}
	}
	[Token(Token = "0x2000661")]
	[Tooltip("Sets the Tinting Color for all text rendered by the GUI. By default only effects GUI rendered by this FSM, check Apply Globally to effect all GUI controls.")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetGUIContentColor : FsmStateAction
	{
		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Tint color for all text rendered by the GUI.")]
		public FsmColor contentColor;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0x12888A0", Offset = "0x12888A0", VA = "0x12888A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0x12888D4", Offset = "0x12888D4", VA = "0x12888D4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0x1288A00", Offset = "0x1288A00", VA = "0x1288A00")]
		public SetGUIContentColor()
		{
		}
	}
	[Token(Token = "0x2000662")]
	[Tooltip("Sets the sorting depth of subsequent GUI elements.")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetGUIDepth : FsmStateAction
	{
		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/GUI-depth.html\">GUI.Depth</a>.")]
		public FsmInt depth;

		[Token(Token = "0x6002100")]
		[Address(RVA = "0x1288A08", Offset = "0x1288A08", VA = "0x1288A08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0x1288A30", Offset = "0x1288A30", VA = "0x1288A30", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002102")]
		[Address(RVA = "0x1288A50", Offset = "0x1288A50", VA = "0x1288A50", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0x1288AC4", Offset = "0x1288AC4", VA = "0x1288AC4")]
		public SetGUIDepth()
		{
		}
	}
	[Token(Token = "0x2000663")]
	[Tooltip("Sets the GUISkin used by GUI elements. Skins can be customized in the Unity editor. See unity docs: <a href=\"http://unity3d.com/support/documentation/Components/class-GUISkin.html\">GUISkin</a>.\n")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetGUISkin : FsmStateAction
	{
		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The skin to use.")]
		public GUISkin skin;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Apply this setting to all GUI calls, even in other scripts.")]
		public FsmBool applyGlobally;

		[Token(Token = "0x6002104")]
		[Address(RVA = "0x1288ACC", Offset = "0x1288ACC", VA = "0x1288ACC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0x1288B00", Offset = "0x1288B00", VA = "0x1288B00", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0x1288C40", Offset = "0x1288C40", VA = "0x1288C40")]
		public SetGUISkin()
		{
		}
	}
	[Token(Token = "0x2000664")]
	[Tooltip("Controls the appearance of Mouse Cursor.")]
	[ActionCategory(ActionCategory.GUI)]
	public class SetMouseCursor : FsmStateAction
	{
		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The texture to use for the cursor.")]
		public FsmTexture cursorTexture;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Hide the cursor.")]
		public FsmBool hideCursor;

		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Lock the cursor to the center of the screen. Useful in first person controllers.")]
		public FsmBool lockCursor;

		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002107")]
		[Address(RVA = "0x1288C48", Offset = "0x1288C48", VA = "0x1288C48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002108")]
		[Address(RVA = "0x1288CA0", Offset = "0x1288CA0", VA = "0x1288CA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0x1288E24", Offset = "0x1288E24", VA = "0x1288E24")]
		private void UpdateCursorState()
		{
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0x1288E70", Offset = "0x1288E70", VA = "0x1288E70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0x1288E74", Offset = "0x1288E74", VA = "0x1288E74", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0x1289024", Offset = "0x1289024", VA = "0x1289024")]
		public SetMouseCursor()
		{
		}
	}
	[Token(Token = "0x2000665")]
	[ActionCategory(ActionCategory.GUIElement)]
	[Tooltip("Sets the Text used by the GUIText Component attached to a Game Object.")]
	[Obsolete("GUIText is part of the legacy UI system removed in 2019.3")]
	public class SetGUIText : FsmStateAction
	{
		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		[UIHint(UIHint.TextArea)]
		public FsmString text;

		[Token(Token = "0x600210D")]
		[Address(RVA = "0x128902C", Offset = "0x128902C", VA = "0x128902C")]
		public SetGUIText()
		{
		}
	}
	[Token(Token = "0x2000666")]
	[Obsolete("GUITexture is part of the legacy UI system removed in 2019.3")]
	[Tooltip("Sets the Texture used by the GUITexture attached to a Game Object.")]
	[ActionCategory(ActionCategory.GUIElement)]
	public class SetGUITexture : FsmStateAction
	{
		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmTexture texture;

		[Token(Token = "0x600210E")]
		[Address(RVA = "0x1289034", Offset = "0x1289034", VA = "0x1289034")]
		public SetGUITexture()
		{
		}
	}
	[Token(Token = "0x2000667")]
	[Obsolete("GUITexture is part of the legacy UI system removed in 2019.3")]
	[Tooltip("Sets the Alpha of the GUITexture attached to a Game Object. Useful for fading GUI elements in/out.")]
	[ActionCategory(ActionCategory.GUIElement)]
	public class SetGUITextureAlpha : FsmStateAction
	{
		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmFloat alpha;

		[Token(Token = "0x600210F")]
		[Address(RVA = "0x128903C", Offset = "0x128903C", VA = "0x128903C")]
		public SetGUITextureAlpha()
		{
		}
	}
	[Token(Token = "0x2000668")]
	[Obsolete("GUITexture is part of the legacy UI system removed in 2019.3")]
	[Tooltip("Sets the Color of the GUITexture attached to a Game Object.")]
	[ActionCategory(ActionCategory.GUIElement)]
	public class SetGUITextureColor : FsmStateAction
	{
		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Obsolete. Use Unity UI instead.")]
		public FsmColor color;

		[Token(Token = "0x6002110")]
		[Address(RVA = "0x1289044", Offset = "0x1289044", VA = "0x1289044")]
		public SetGUITextureColor()
		{
		}
	}
	[Token(Token = "0x2000669")]
	[Tooltip("GUILayout base action - don't use!")]
	public abstract class GUILayoutAction : FsmStateAction
	{
		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("An array of layout options.See <a href=\"http://unity3d.com/support/documentation/ScriptReference/GUILayoutOption.html\" rel=\"nofollow\">GUILayoutOption</a>.")]
		public LayoutOption[] layoutOptions;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GUILayoutOption[] options;

		[Token(Token = "0x17000374")]
		public GUILayoutOption[] LayoutOptions
		{
			[Token(Token = "0x6002111")]
			[Address(RVA = "0x128904C", Offset = "0x128904C", VA = "0x128904C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0x1289164", Offset = "0x1289164", VA = "0x1289164", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0x12891BC", Offset = "0x12891BC", VA = "0x12891BC")]
		protected GUILayoutAction()
		{
		}
	}
	[Token(Token = "0x200066A")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Begin a GUILayout block of GUI controls in a fixed screen area. NOTE: Block must end with a corresponding GUILayoutEndArea.")]
	public class GUILayoutBeginArea : FsmStateAction
	{
		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Screen area.")]
		public FsmRect screenRect;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Left screen coordinate.")]
		public FsmFloat left;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Top screen coordinate.")]
		public FsmFloat top;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Width of area.")]
		public FsmFloat width;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Height of area.")]
		public FsmFloat height;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional GUIStyle name in current GUISkin.")]
		public FsmString style;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rect rect;

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x12891C4", Offset = "0x12891C4", VA = "0x12891C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x12892C4", Offset = "0x12892C4", VA = "0x12892C4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x1289564", Offset = "0x1289564", VA = "0x1289564")]
		public GUILayoutBeginArea()
		{
		}
	}
	[Token(Token = "0x200066B")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Begin a GUILayout area that follows the specified game object. Useful for overlays (e.g., playerName). NOTE: Block must end with a corresponding GUILayoutEndArea.")]
	public class GUILayoutBeginAreaFollowObject : FsmStateAction
	{
		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to follow.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Left screen offset.")]
		public FsmFloat offsetLeft;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Screen offset up.")]
		public FsmFloat offsetTop;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Width of area.")]
		public FsmFloat width;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Height of area.")]
		[RequiredField]
		public FsmFloat height;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Use normalized screen coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x128956C", Offset = "0x128956C", VA = "0x128956C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x128966C", Offset = "0x128966C", VA = "0x128966C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0x1289974", Offset = "0x1289974", VA = "0x1289974")]
		private static void DummyBeginArea()
		{
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0x128998C", Offset = "0x128998C", VA = "0x128998C")]
		public GUILayoutBeginAreaFollowObject()
		{
		}
	}
	[Token(Token = "0x200066C")]
	[Tooltip("Begin a centered GUILayout block. The block is centered inside a parent {{GUILayout Area}}. So to place the block in the center of the screen, first use a {{GULayout Area}} the size of the whole screen (the default setting). NOTE: Block must end with a corresponding {{GUILayoutEndCentered}}.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutBeginCentered : FsmStateAction
	{
		[Token(Token = "0x600211B")]
		[Address(RVA = "0x1289994", Offset = "0x1289994", VA = "0x1289994", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0x1289998", Offset = "0x1289998", VA = "0x1289998", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0x1289AB8", Offset = "0x1289AB8", VA = "0x1289AB8")]
		public GUILayoutBeginCentered()
		{
		}
	}
	[Token(Token = "0x200066D")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout BeginHorizontal.")]
	public class GUILayoutBeginHorizontal : GUILayoutAction
	{
		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x600211E")]
		[Address(RVA = "0x1289AC0", Offset = "0x1289AC0", VA = "0x1289AC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600211F")]
		[Address(RVA = "0x1289B68", Offset = "0x1289B68", VA = "0x1289B68", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002120")]
		[Address(RVA = "0x1289C84", Offset = "0x1289C84", VA = "0x1289C84")]
		public GUILayoutBeginHorizontal()
		{
		}
	}
	[Token(Token = "0x200066E")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Begins a ScrollView. Use GUILayoutEndScrollView at the end of the block.")]
	public class GUILayoutBeginScrollView : GUILayoutAction
	{
		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Assign a Vector2 variable to store the scroll position of this view.")]
		public FsmVector2 scrollPosition;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Always show the horizontal scrollbars.")]
		public FsmBool horizontalScrollbar;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Always show the vertical scrollbars.")]
		public FsmBool verticalScrollbar;

		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Define custom styles below. NOTE: You have to define all the styles if you check this option.")]
		public FsmBool useCustomStyle;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Named style in the active GUISkin for the horizontal scrollbars.")]
		public FsmString horizontalStyle;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Named style in the active GUISkin for the vertical scrollbars.")]
		public FsmString verticalStyle;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Named style in the active GUISkin for the background.")]
		public FsmString backgroundStyle;

		[Token(Token = "0x6002121")]
		[Address(RVA = "0x1289C8C", Offset = "0x1289C8C", VA = "0x1289C8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0x1289D0C", Offset = "0x1289D0C", VA = "0x1289D0C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002123")]
		[Address(RVA = "0x1289E8C", Offset = "0x1289E8C", VA = "0x1289E8C")]
		public GUILayoutBeginScrollView()
		{
		}
	}
	[Token(Token = "0x200066F")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Begins a vertical control group. The group must be closed with GUILayoutEndVertical action.")]
	public class GUILayoutBeginVertical : GUILayoutAction
	{
		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The text to display.")]
		public FsmString text;

		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6002124")]
		[Address(RVA = "0x1289E94", Offset = "0x1289E94", VA = "0x1289E94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0x1289F3C", Offset = "0x1289F3C", VA = "0x1289F3C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0x128A058", Offset = "0x128A058", VA = "0x128A058")]
		public GUILayoutBeginVertical()
		{
		}
	}
	[Token(Token = "0x2000670")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Box.")]
	public class GUILayoutBox : GUILayoutAction
	{
		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Image to display in the Box.")]
		public FsmTexture image;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Text to display in the Box.")]
		public FsmString text;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x128A060", Offset = "0x128A060", VA = "0x128A060", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x128A108", Offset = "0x128A108", VA = "0x128A108", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0x128A278", Offset = "0x128A278", VA = "0x128A278")]
		public GUILayoutBox()
		{
		}
	}
	[Token(Token = "0x2000671")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Button. Sends an Event when pressed. Optionally stores the button state in a Bool Variable.")]
	public class GUILayoutButton : GUILayoutAction
	{
		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Event to send when the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the button state in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeButtonState;

		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Texture to use on the button.")]
		public FsmTexture image;

		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Text to display on the button.")]
		public FsmString text;

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x128A280", Offset = "0x128A280", VA = "0x128A280", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0x128A348", Offset = "0x128A348", VA = "0x128A348", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0x128A4E0", Offset = "0x128A4E0", VA = "0x128A4E0")]
		public GUILayoutButton()
		{
		}
	}
	[Token(Token = "0x2000672")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
	public class GUILayoutConfirmPasswordField : GUILayoutAction
	{
		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The password Text")]
		public FsmString text;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Maximum Length of the field")]
		public FsmInt maxLength;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Style of the Field")]
		public FsmString style;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when field content changed")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Replacement character to hide the password")]
		public FsmString mask;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
		public FsmBool confirm;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Confirmation content")]
		public FsmString password;

		[Token(Token = "0x600212D")]
		[Address(RVA = "0x128A4E8", Offset = "0x128A4E8", VA = "0x128A4E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0x128A5E0", Offset = "0x128A5E0", VA = "0x128A5E0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0x128A76C", Offset = "0x128A76C", VA = "0x128A76C")]
		public GUILayoutConfirmPasswordField()
		{
		}
	}
	[Token(Token = "0x2000673")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
	public class GUILayoutEmailField : GUILayoutAction
	{
		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The email Text")]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Maximum Length of the field")]
		public FsmInt maxLength;

		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Style of the Field")]
		public FsmString style;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when field content changed")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Email valid format flag")]
		public FsmBool valid;

		[Token(Token = "0x6002130")]
		[Address(RVA = "0x128A774", Offset = "0x128A774", VA = "0x128A774", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0x128A824", Offset = "0x128A824", VA = "0x128A824", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0x128A984", Offset = "0x128A984", VA = "0x128A984")]
		public GUILayoutEmailField()
		{
		}
	}
	[Token(Token = "0x2000674")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Close a GUILayout group started with {{GUILayoutBeginArea}}.")]
	public class GUILayoutEndArea : FsmStateAction
	{
		[Token(Token = "0x6002133")]
		[Address(RVA = "0x128A98C", Offset = "0x128A98C", VA = "0x128A98C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0x128A990", Offset = "0x128A990", VA = "0x128A990", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0x128A998", Offset = "0x128A998", VA = "0x128A998")]
		public GUILayoutEndArea()
		{
		}
	}
	[Token(Token = "0x2000675")]
	[Tooltip("End a centered GUILayout block started with {{GUILayoutBeginCentered}}.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutEndCentered : FsmStateAction
	{
		[Token(Token = "0x6002136")]
		[Address(RVA = "0x128A9A0", Offset = "0x128A9A0", VA = "0x128A9A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0x128A9A4", Offset = "0x128A9A4", VA = "0x128A9A4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0x128A9D4", Offset = "0x128A9D4", VA = "0x128A9D4")]
		public GUILayoutEndCentered()
		{
		}
	}
	[Token(Token = "0x2000676")]
	[Tooltip("Close a group started with {{GUILayoutBeginHorizontal}}.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutEndHorizontal : FsmStateAction
	{
		[Token(Token = "0x6002139")]
		[Address(RVA = "0x128A9DC", Offset = "0x128A9DC", VA = "0x128A9DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0x128A9E0", Offset = "0x128A9E0", VA = "0x128A9E0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600213B")]
		[Address(RVA = "0x128A9E8", Offset = "0x128A9E8", VA = "0x128A9E8")]
		public GUILayoutEndHorizontal()
		{
		}
	}
	[Token(Token = "0x2000677")]
	[Tooltip("Close a group started with {{GUILayoutBeginScrollView}}.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutEndScrollView : FsmStateAction
	{
		[Token(Token = "0x600213C")]
		[Address(RVA = "0x128A9F0", Offset = "0x128A9F0", VA = "0x128A9F0", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600213D")]
		[Address(RVA = "0x128A9F8", Offset = "0x128A9F8", VA = "0x128A9F8")]
		public GUILayoutEndScrollView()
		{
		}
	}
	[Token(Token = "0x2000678")]
	[Tooltip("Close a group started with {{GUILayoutBeginVertical}}.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutEndVertical : FsmStateAction
	{
		[Token(Token = "0x600213E")]
		[Address(RVA = "0x128AA00", Offset = "0x128AA00", VA = "0x128AA00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x128AA04", Offset = "0x128AA04", VA = "0x128AA04", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x128AA0C", Offset = "0x128AA0C", VA = "0x128AA0C")]
		public GUILayoutEndVertical()
		{
		}
	}
	[Token(Token = "0x2000679")]
	[Tooltip("Inserts a flexible space element.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutFlexibleSpace : FsmStateAction
	{
		[Token(Token = "0x6002141")]
		[Address(RVA = "0x128AA14", Offset = "0x128AA14", VA = "0x128AA14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x128AA18", Offset = "0x128AA18", VA = "0x128AA18", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0x128AA20", Offset = "0x128AA20", VA = "0x128AA20")]
		public GUILayoutFlexibleSpace()
		{
		}
	}
	[Token(Token = "0x200067A")]
	[Tooltip("GUILayout Text Field to edit a Float Variable. Optionally send an event if the text has been edited.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutFloatField : GUILayoutAction
	{
		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Float Variable to show in the edit field.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional event to send when the value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6002144")]
		[Address(RVA = "0x128AA28", Offset = "0x128AA28", VA = "0x128AA28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002145")]
		[Address(RVA = "0x128AAA8", Offset = "0x128AAA8", VA = "0x128AAA8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002146")]
		[Address(RVA = "0x128AC58", Offset = "0x128AC58", VA = "0x128AC58")]
		public GUILayoutFloatField()
		{
		}
	}
	[Token(Token = "0x200067B")]
	[Tooltip("GUILayout Label for a Float Variable.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutFloatLabel : GUILayoutAction
	{
		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Text to put before the float variable.")]
		public FsmString prefix;

		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Float variable to display.")]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x6002147")]
		[Address(RVA = "0x128AC60", Offset = "0x128AC60", VA = "0x128AC60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002148")]
		[Address(RVA = "0x128ACEC", Offset = "0x128ACEC", VA = "0x128ACEC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002149")]
		[Address(RVA = "0x128AE50", Offset = "0x128AE50", VA = "0x128AE50")]
		public GUILayoutFloatLabel()
		{
		}
	}
	[Token(Token = "0x200067C")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("A Horizontal Slider linked to a Float Variable.")]
	public class GUILayoutHorizontalSlider : GUILayoutAction
	{
		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to link the slider to. Moving the slider changes the value, and changes in the value move the slider.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The value of the float variable when slider is all the way to the left.")]
		public FsmFloat leftValue;

		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The value of the float variable when slider is all the way to the right.")]
		public FsmFloat rightValue;

		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("An optional fsm event to send when the value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x600214A")]
		[Address(RVA = "0x128AE58", Offset = "0x128AE58", VA = "0x128AE58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600214B")]
		[Address(RVA = "0x128AEC4", Offset = "0x128AEC4", VA = "0x128AEC4", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600214C")]
		[Address(RVA = "0x128B00C", Offset = "0x128B00C", VA = "0x128B00C")]
		public GUILayoutHorizontalSlider()
		{
		}
	}
	[Token(Token = "0x200067D")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Text Field to edit an Int Variable. Optionally send an event if the text has been edited.")]
	public class GUILayoutIntField : GUILayoutAction
	{
		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Int Variable to show in the edit field.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional event to send when the value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x600214D")]
		[Address(RVA = "0x128B014", Offset = "0x128B014", VA = "0x128B014", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0x128B094", Offset = "0x128B094", VA = "0x128B094", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0x128B244", Offset = "0x128B244", VA = "0x128B244")]
		public GUILayoutIntField()
		{
		}
	}
	[Token(Token = "0x200067E")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Label for an Int Variable.")]
	public class GUILayoutIntLabel : GUILayoutAction
	{
		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Text to put before the int variable.")]
		public FsmString prefix;

		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Int variable to display.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmInt intVariable;

		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional GUIStyle in the active GUISKin.")]
		public FsmString style;

		[Token(Token = "0x6002150")]
		[Address(RVA = "0x128B24C", Offset = "0x128B24C", VA = "0x128B24C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0x128B2D8", Offset = "0x128B2D8", VA = "0x128B2D8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0x128B43C", Offset = "0x128B43C", VA = "0x128B43C")]
		public GUILayoutIntLabel()
		{
		}
	}
	[Token(Token = "0x200067F")]
	[Tooltip("GUILayout Label.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class GUILayoutLabel : GUILayoutAction
	{
		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The tooltip associated with this control. See {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6002153")]
		[Address(RVA = "0x128B444", Offset = "0x128B444", VA = "0x128B444", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0x128B4EC", Offset = "0x128B4EC", VA = "0x128B4EC", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0x128B65C", Offset = "0x128B65C", VA = "0x128B65C")]
		public GUILayoutLabel()
		{
		}
	}
	[Token(Token = "0x2000680")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Password Field. Optionally send an event if the text has been edited.")]
	public class GUILayoutPasswordField : GUILayoutAction
	{
		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The password Text")]
		public FsmString text;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Maximum Length of the field")]
		public FsmInt maxLength;

		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Style of the Field")]
		public FsmString style;

		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when field content changed")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Replacement character to hide the password")]
		public FsmString mask;

		[Token(Token = "0x6002156")]
		[Address(RVA = "0x128B664", Offset = "0x128B664", VA = "0x128B664", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0x128B730", Offset = "0x128B730", VA = "0x128B730", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0x128B8BC", Offset = "0x128B8BC", VA = "0x128B8BC")]
		public GUILayoutPasswordField()
		{
		}
	}
	[Token(Token = "0x2000681")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Repeat Button. Sends an Event while pressed. Optionally store the button state in a Bool Variable.")]
	public class GUILayoutRepeatButton : GUILayoutAction
	{
		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The fsm event to send while the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the button state in a Bool Variable.")]
		public FsmBool storeButtonState;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The text to display.")]
		public FsmString text;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional tooltip. Accessed by {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x6002159")]
		[Address(RVA = "0x128B8C4", Offset = "0x128B8C4", VA = "0x128B8C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0x128B98C", Offset = "0x128B98C", VA = "0x128B98C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600215B")]
		[Address(RVA = "0x128BB24", Offset = "0x128BB24", VA = "0x128BB24")]
		public GUILayoutRepeatButton()
		{
		}
	}
	[Token(Token = "0x2000682")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Inserts a space in the current layout group.")]
	public class GUILayoutSpace : FsmStateAction
	{
		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Size of space in pixels.")]
		public FsmFloat space;

		[Token(Token = "0x600215C")]
		[Address(RVA = "0x128BB2C", Offset = "0x128BB2C", VA = "0x128BB2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0x128BB54", Offset = "0x128BB54", VA = "0x128BB54", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0x128BB78", Offset = "0x128BB78", VA = "0x128BB78")]
		public GUILayoutSpace()
		{
		}
	}
	[Token(Token = "0x2000683")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Text Field. Optionally send an event if the text has been edited.")]
	public class GUILayoutTextField : GUILayoutAction
	{
		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Link the text field to a String Variable.")]
		public FsmString text;

		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The max number of characters that can be entered.")]
		public FsmInt maxLength;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("An optional Event to send when the text field value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x600215F")]
		[Address(RVA = "0x128BB80", Offset = "0x128BB80", VA = "0x128BB80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002160")]
		[Address(RVA = "0x128BC1C", Offset = "0x128BC1C", VA = "0x128BC1C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x128BD98", Offset = "0x128BD98", VA = "0x128BD98")]
		public GUILayoutTextField()
		{
		}
	}
	[Token(Token = "0x2000684")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Label for simple text.")]
	public class GUILayoutTextLabel : GUILayoutAction
	{
		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional GUIStyle in the active GUISkin.")]
		public FsmString style;

		[Token(Token = "0x6002162")]
		[Address(RVA = "0x128BDA0", Offset = "0x128BDA0", VA = "0x128BDA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x128BE1C", Offset = "0x128BE1C", VA = "0x128BE1C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x128BF48", Offset = "0x128BF48", VA = "0x128BF48")]
		public GUILayoutTextLabel()
		{
		}
	}
	[Token(Token = "0x2000685")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("Makes an on/off Toggle Button and stores the button state in a Bool Variable.")]
	public class GUILayoutToggle : GUILayoutAction
	{
		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Link the button state to this Bool Variable.")]
		public FsmBool storeButtonState;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Texture to display.")]
		public FsmTexture image;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Text to display.")]
		public FsmString text;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional tooltip. Accessed by {{GUI Tooltip}}")]
		public FsmString tooltip;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Optional named style in the current GUISkin")]
		public FsmString style;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional Event to send when the toggle changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x128BF50", Offset = "0x128BF50", VA = "0x128BF50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0x128C034", Offset = "0x128C034", VA = "0x128C034", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x128C21C", Offset = "0x128C21C", VA = "0x128C21C")]
		public GUILayoutToggle()
		{
		}
	}
	[Token(Token = "0x2000686")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("GUILayout Toolbar. NOTE: Arrays must be the same length as NumButtons or empty.")]
	public class GUILayoutToolbar : GUILayoutAction
	{
		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The number of buttons in the toolbar")]
		public FsmInt numButtons;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the index of the selected button in an Integer Variable")]
		public FsmInt selectedButton;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when each button is pressed.")]
		public FsmEvent[] buttonEventsArray;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Image to use on each button.")]
		public FsmTexture[] imagesArray;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Text to use on each button.")]
		public FsmString[] textsArray;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Tooltip to use for each button.")]
		public FsmString[] tooltipsArray;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("A named GUIStyle to use for the toolbar buttons. Default is Button.")]
		public FsmString style;

		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Update the content of the buttons every frame. Useful if the buttons are using variables that change.")]
		public bool everyFrame;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GUIContent[] contents;

		[Token(Token = "0x17000375")]
		public GUIContent[] Contents
		{
			[Token(Token = "0x6002168")]
			[Address(RVA = "0x128C224", Offset = "0x128C224", VA = "0x128C224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x128C248", Offset = "0x128C248", VA = "0x128C248")]
		private void SetButtonsContent()
		{
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0x128C4D0", Offset = "0x128C4D0", VA = "0x128C4D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x128C604", Offset = "0x128C604", VA = "0x128C604", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600216C")]
		[Address(RVA = "0x128C660", Offset = "0x128C660", VA = "0x128C660", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x128C838", Offset = "0x128C838", VA = "0x128C838", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0x128C984", Offset = "0x128C984", VA = "0x128C984")]
		public GUILayoutToolbar()
		{
		}
	}
	[Token(Token = "0x2000687")]
	[ActionCategory(ActionCategory.GUILayout)]
	[Tooltip("A Vertical Slider linked to a Float Variable.")]
	public class GUILayoutVerticalSlider : GUILayoutAction
	{
		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Float Variable linked to the slider value.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The value of the variable at the top of the slider.")]
		public FsmFloat topValue;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The value of the variable at the bottom of the slider.")]
		[RequiredField]
		public FsmFloat bottomValue;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Optional Event to send when the slider value changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x600216F")]
		[Address(RVA = "0x128C98C", Offset = "0x128C98C", VA = "0x128C98C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002170")]
		[Address(RVA = "0x128C9F8", Offset = "0x128C9F8", VA = "0x128C9F8", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002171")]
		[Address(RVA = "0x128CB40", Offset = "0x128CB40", VA = "0x128CB40")]
		public GUILayoutVerticalSlider()
		{
		}
	}
	[Token(Token = "0x2000688")]
	[Tooltip("Turn GUILayout on/off. If you don't use GUILayout actions you can get some performance back by turning GUILayout off. This can make a difference on iOS platforms.")]
	[ActionCategory(ActionCategory.GUILayout)]
	public class UseGUILayout : FsmStateAction
	{
		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Enable/disable GUILayout.")]
		[RequiredField]
		public bool turnOffGUIlayout;

		[Token(Token = "0x6002172")]
		[Address(RVA = "0x128CB48", Offset = "0x128CB48", VA = "0x128CB48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002173")]
		[Address(RVA = "0x128CB54", Offset = "0x128CB54", VA = "0x128CB54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002174")]
		[Address(RVA = "0x128CB94", Offset = "0x128CB94", VA = "0x128CB94")]
		public UseGUILayout()
		{
		}
	}
	[Token(Token = "0x2000689")]
	[Tooltip("Sends an Event when the user hits any Key or Mouse Button.")]
	[ActionCategory(ActionCategory.Input)]
	public class AnyKey : FsmStateAction
	{
		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the event")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Event to send when any Key or Mouse Button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6002175")]
		[Address(RVA = "0x128CB9C", Offset = "0x128CB9C", VA = "0x128CB9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002176")]
		[Address(RVA = "0x128CBC4", Offset = "0x128CBC4", VA = "0x128CBC4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0x128CBFC", Offset = "0x128CBFC", VA = "0x128CBFC")]
		public AnyKey()
		{
		}
	}
	[Token(Token = "0x200068A")]
	[SeeAlso("Unity Input Manager")]
	[Tooltip("Gets the value of the specified Input Axis and stores it in a Float Variable. See {{Unity Input Manager}} docs.")]
	[Obsolete("This action is not supported in the new Input System. Use PlayerInputGetXXX actions or GamepadGetStickValue instead.")]
	[ActionCategory(ActionCategory.Input)]
	public class GetAxis : FsmStateAction
	{
		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the axis. Set in the Unity Input Manager.")]
		public FsmString axisName;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Normally axis values are in the range -1 to 1. Use the multiplier to make this range bigger. E.g., A multiplier of 100 returns values from -100 to 100.")]
		public FsmFloat multiplier;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Invert the value of for the axis. E.g., -1 becomes 1, and 1 becomes -1.")]
		public FsmBool invert;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in a float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat store;

		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get the axis value every frame. This should be true most of the time, but there might be times when you only want to get the value once.")]
		public bool everyFrame;

		[Token(Token = "0x6002178")]
		[Address(RVA = "0x128CC04", Offset = "0x128CC04", VA = "0x128CC04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002179")]
		[Address(RVA = "0x128CCA4", Offset = "0x128CCA4", VA = "0x128CCA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600217A")]
		[Address(RVA = "0x128CCBC", Offset = "0x128CCBC", VA = "0x128CCBC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600217B")]
		[Address(RVA = "0x128CCB8", Offset = "0x128CCB8", VA = "0x128CCB8")]
		private void DoGetAxis()
		{
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x128CCC0", Offset = "0x128CCC0", VA = "0x128CCC0")]
		public GetAxis()
		{
		}
	}
	[Token(Token = "0x200068B")]
	[Tooltip("Gets a world direction Vector from 2 Input Axis. Typically used for a third person controller with Relative To set to the camera.")]
	[NoActionTargets]
	[Obsolete("This action is not supported in the new Input System. Use PlayerInputGetMoveVector or GamepadGetStickValue instead.")]
	[ActionCategory(ActionCategory.Input)]
	[SeeAlso("Unity Input Manager")]
	public class GetAxisVector : FsmStateAction
	{
		[Token(Token = "0x200068C")]
		public enum AxisPlane
		{
			[Token(Token = "0x4001DED")]
			XZ,
			[Token(Token = "0x4001DEE")]
			XY,
			[Token(Token = "0x4001DEF")]
			YZ
		}

		[Token(Token = "0x4001DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the horizontal input axis. See Unity Input Manager.")]
		public FsmString horizontalAxis;

		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the vertical input axis. See Unity Input Manager.")]
		public FsmString verticalAxis;

		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Normally axis values are in the range -1 to 1. Use the multiplier to make this range bigger. \nE.g., A multiplier of 100 returns values from -100 to 100.\nTypically this represents the maximum movement speed.")]
		public FsmFloat multiplier;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Sets the world axis the input maps to. The remaining axis will be set to zero.")]
		public AxisPlane mapToPlane;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Calculate a vector relative to this game object. Typically the camera.")]
		public FsmGameObject relativeTo;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the resulting vector. You can use this in {{Translate}} or other movement actions.")]
		public FsmVector3 storeVector;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the magnitude of the vector. Useful if you want to measure the strength of the input and react accordingly. Hint: Use {{Float Compare}}.")]
		public FsmFloat storeMagnitude;

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x128CCC8", Offset = "0x128CCC8", VA = "0x128CCC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0x128CD98", Offset = "0x128CD98", VA = "0x128CD98", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x128CD9C", Offset = "0x128CD9C", VA = "0x128CD9C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x128CDDC", Offset = "0x128CDDC", VA = "0x128CDDC")]
		public GetAxisVector()
		{
		}
	}
	[Token(Token = "0x200068D")]
	[Tooltip("Gets the pressed state of the specified Button and stores it in a Bool Variable. See Unity Input Manager docs.")]
	[ActionCategory(ActionCategory.Input)]
	[Obsolete("This action is not supported in the new Input System. Use PlayerInputGetButtonValues or GamepadGetButtonValues instead.")]
	public class GetButton : FsmStateAction
	{
		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the button. Set in the Unity Input Manager.")]
		public FsmString buttonName;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the button state in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002181")]
		[Address(RVA = "0x128CDE4", Offset = "0x128CDE4", VA = "0x128CDE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0x128CE58", Offset = "0x128CE58", VA = "0x128CE58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002183")]
		[Address(RVA = "0x128CE70", Offset = "0x128CE70", VA = "0x128CE70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0x128CE6C", Offset = "0x128CE6C", VA = "0x128CE6C")]
		private void DoGetButton()
		{
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0x128CE74", Offset = "0x128CE74", VA = "0x128CE74")]
		public GetButton()
		{
		}
	}
	[Token(Token = "0x200068E")]
	[Tooltip("Sends an Event when a Button is pressed.")]
	[ActionCategory(ActionCategory.Input)]
	[Obsolete("This action is not supported in the new Input System. Use PlayerInputGetButtonValues or GamepadGetButtonValues instead.")]
	public class GetButtonDown : FsmStateAction
	{
		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the button. Defined in the Unity Input Manager.")]
		public FsmString buttonName;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set to True if the button is pressed, otherwise False.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6002186")]
		[Address(RVA = "0x128CE7C", Offset = "0x128CE7C", VA = "0x128CE7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0x128CEF4", Offset = "0x128CEF4", VA = "0x128CEF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x128CEF8", Offset = "0x128CEF8", VA = "0x128CEF8")]
		public GetButtonDown()
		{
		}
	}
	[Token(Token = "0x200068F")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when a Button is released.")]
	[Obsolete("This action is not supported in the new Input System. Use PlayerInputGetButtonValues or GamepadGetButtonValues instead.")]
	public class GetButtonUp : FsmStateAction
	{
		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the button. Defined in the Unity Input Manager.")]
		public FsmString buttonName;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the button is released.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set to True if the button is released, otherwise False.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6002189")]
		[Address(RVA = "0x128CF00", Offset = "0x128CF00", VA = "0x128CF00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600218A")]
		[Address(RVA = "0x128CF78", Offset = "0x128CF78", VA = "0x128CF78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0x128CF7C", Offset = "0x128CF7C", VA = "0x128CF7C")]
		public GetButtonUp()
		{
		}
	}
	[Token(Token = "0x2000690")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the pressed state of a Key.")]
	public class GetKey : FsmStateAction
	{
		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[RequiredField]
		[Tooltip("The key to detect.")]
		public Key key;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if the key is down (True) or up (False).")]
		public FsmBool storeResult;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a key press/release.")]
		public bool everyFrame;

		[Token(Token = "0x600218C")]
		[Address(RVA = "0x128CF84", Offset = "0x128CF84", VA = "0x128CF84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0x128CFAC", Offset = "0x128CFAC", VA = "0x128CFAC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0x128D054", Offset = "0x128D054", VA = "0x128D054", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0x128CFD8", Offset = "0x128CFD8", VA = "0x128CFD8")]
		private void DoGetKey()
		{
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0x128D058", Offset = "0x128D058", VA = "0x128D058")]
		public GetKey()
		{
		}
	}
	[Token(Token = "0x2000691")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when a Key is pressed.")]
	public class GetKeyDown : FsmStateAction
	{
		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[RequiredField]
		[Tooltip("The key to detect.")]
		public Key key;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Event to send when the key is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in a Bool Variable. True if pressed, otherwise False.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6002191")]
		[Address(RVA = "0x128D060", Offset = "0x128D060", VA = "0x128D060", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0x128D08C", Offset = "0x128D08C", VA = "0x128D08C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0x128D128", Offset = "0x128D128", VA = "0x128D128")]
		public GetKeyDown()
		{
		}
	}
	[Token(Token = "0x2000692")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when a Key is released.")]
	public class GetKeyUp : FsmStateAction
	{
		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The key to detect.")]
		[RequiredField]
		public Key key;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Event to send when the key is released.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable. True if released, otherwise False.")]
		public FsmBool storeResult;

		[Token(Token = "0x6002194")]
		[Address(RVA = "0x128D130", Offset = "0x128D130", VA = "0x128D130", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0x128D15C", Offset = "0x128D15C", VA = "0x128D15C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x128D1F8", Offset = "0x128D1F8", VA = "0x128D1F8")]
		public GetKeyUp()
		{
		}
	}
	[Token(Token = "0x2000693")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the pressed state of the specified Mouse Button and stores it in a Bool Variable. See Unity Input Manager doc.")]
	public class GetMouseButton : FsmStateAction
	{
		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[RequiredField]
		[Tooltip("The mouse button to test.")]
		public MouseButton button;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the pressed state in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x128D200", Offset = "0x128D200", VA = "0x128D200", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x128D22C", Offset = "0x128D22C", VA = "0x128D22C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002199")]
		[Address(RVA = "0x128D374", Offset = "0x128D374", VA = "0x128D374", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x128D258", Offset = "0x128D258", VA = "0x128D258")]
		private void DoGetMouseButton()
		{
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x128D378", Offset = "0x128D378", VA = "0x128D378")]
		public GetMouseButton()
		{
		}
	}
	[Token(Token = "0x2000694")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when the specified Mouse Button is pressed. Optionally store the button state in a bool variable.")]
	public class GetMouseButtonDown : FsmStateAction
	{
		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The mouse button to test.")]
		[RequiredField]
		public MouseButton button;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Event to send if the mouse button is down.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the button state in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Uncheck to run when entering the state.")]
		public bool inUpdateOnly;

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x128D380", Offset = "0x128D380", VA = "0x128D380", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600219D")]
		[Address(RVA = "0x128D3B8", Offset = "0x128D3B8", VA = "0x128D3B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0x128D504", Offset = "0x128D504", VA = "0x128D504", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600219F")]
		[Address(RVA = "0x128D3C8", Offset = "0x128D3C8", VA = "0x128D3C8")]
		private void DoGetMouseButtonDown()
		{
		}

		[Token(Token = "0x60021A0")]
		[Address(RVA = "0x128D508", Offset = "0x128D508", VA = "0x128D508")]
		public GetMouseButtonDown()
		{
		}
	}
	[Token(Token = "0x2000695")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Sends an Event when the specified Mouse Button is released. Optionally store the button state in a bool variable.")]
	public class GetMouseButtonUp : FsmStateAction
	{
		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[RequiredField]
		[Tooltip("The mouse button to test.")]
		public MouseButton button;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Event to send if the mouse button is down.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the pressed state in a Bool Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Uncheck to run when entering the state.")]
		public bool inUpdateOnly;

		[Token(Token = "0x60021A1")]
		[Address(RVA = "0x128D510", Offset = "0x128D510", VA = "0x128D510", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021A2")]
		[Address(RVA = "0x128D548", Offset = "0x128D548", VA = "0x128D548", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021A3")]
		[Address(RVA = "0x128D694", Offset = "0x128D694", VA = "0x128D694", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0x128D558", Offset = "0x128D558", VA = "0x128D558")]
		public void DoGetMouseButtonUp()
		{
		}

		[Token(Token = "0x60021A5")]
		[Address(RVA = "0x128D698", Offset = "0x128D698", VA = "0x128D698")]
		public GetMouseButtonUp()
		{
		}
	}
	[Token(Token = "0x2000696")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the X Position of the mouse and stores it in a Float Variable.")]
	public class GetMouseX : FsmStateAction
	{
		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store in a float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Normalized coordinates are in the range 0 to 1 (0 = left, 1 = right). Otherwise the coordinate is in pixels. Normalized coordinates are useful for resolution independent functions.")]
		public bool normalize;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0x128D6A0", Offset = "0x128D6A0", VA = "0x128D6A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0x128D6C8", Offset = "0x128D6C8", VA = "0x128D6C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021A8")]
		[Address(RVA = "0x128D7B8", Offset = "0x128D7B8", VA = "0x128D7B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0x128D6F4", Offset = "0x128D6F4", VA = "0x128D6F4")]
		private void DoGetMouseX()
		{
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0x128D7BC", Offset = "0x128D7BC", VA = "0x128D7BC")]
		public GetMouseX()
		{
		}
	}
	[Token(Token = "0x2000697")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Gets the Y Position of the mouse and stores it in a Float Variable.")]
	public class GetMouseY : FsmStateAction
	{
		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Normalized coordinates are in the range 0 to 1 (0 = left, 1 = right). Otherwise the coordinate is in pixels. Normalized coordinates are useful for resolution independent functions.")]
		public bool normalize;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0x128D7C4", Offset = "0x128D7C4", VA = "0x128D7C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0x128D7EC", Offset = "0x128D7EC", VA = "0x128D7EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0x128D8DC", Offset = "0x128D8DC", VA = "0x128D8DC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0x128D818", Offset = "0x128D818", VA = "0x128D818")]
		private void DoGetMouseY()
		{
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0x128D8E0", Offset = "0x128D8E0", VA = "0x128D8E0")]
		public GetMouseY()
		{
		}
	}
	[Token(Token = "0x2000698")]
	[Tooltip("Rotates a GameObject based on mouse movement. Minimum and Maximum values can be used to constrain the rotation.")]
	[ActionCategory(ActionCategory.Input)]
	public class MouseLook : ComponentAction<Transform>
	{
		[Token(Token = "0x2000699")]
		public enum RotationAxes
		{
			[Token(Token = "0x4001E1F")]
			MouseXAndY,
			[Token(Token = "0x4001E20")]
			MouseX,
			[Token(Token = "0x4001E21")]
			MouseY
		}

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The axes to rotate around.")]
		public RotationAxes axes;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Sensitivity of movement in X direction.")]
		public FsmFloat sensitivityX;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Sensitivity of movement in Y direction.")]
		public FsmFloat sensitivityY;

		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		public FsmFloat minimumX;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		public FsmFloat maximumX;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		[HasFloatSlider(-360f, 360f)]
		public FsmFloat minimumY;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		[HasFloatSlider(-360f, 360f)]
		public FsmFloat maximumY;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float rotationX;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float rotationY;

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0x128D8E8", Offset = "0x128D8E8", VA = "0x128D8E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0x128DA2C", Offset = "0x128DA2C", VA = "0x128DA2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0x128DD00", Offset = "0x128DD00", VA = "0x128DD00", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0x128DBB4", Offset = "0x128DBB4", VA = "0x128DBB4")]
		private void DoMouseLook()
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0x128DDF8", Offset = "0x128DDF8", VA = "0x128DDF8")]
		private float GetXRotation()
		{
			return default(float);
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0x128DD04", Offset = "0x128DD04", VA = "0x128DD04")]
		private float GetYRotation(float invert = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0x128DEDC", Offset = "0x128DEDC", VA = "0x128DEDC")]
		private static float ClampAngle(float angle, FsmFloat min, FsmFloat max)
		{
			return default(float);
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x128DF9C", Offset = "0x128DF9C", VA = "0x128DF9C")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x200069A")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("NOTE: This is a duplicate action and will be removed in a future update. Please use Mouse Look instead.\nRotates a GameObject based on mouse movement. Minimum and Maximum values can be used to constrain the rotation.")]
	public class MouseLook2 : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x200069B")]
		public enum RotationAxes
		{
			[Token(Token = "0x4001E2E")]
			MouseXAndY,
			[Token(Token = "0x4001E2F")]
			MouseX,
			[Token(Token = "0x4001E30")]
			MouseY
		}

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The axes to rotate around.")]
		public RotationAxes axes;

		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("Speed around X axis. Higher = faster.")]
		public FsmFloat sensitivityX;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Speed around Y axis. Higher = faster.")]
		public FsmFloat sensitivityY;

		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Minimum angle around X axis.")]
		public FsmFloat minimumX;

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Maximum angle around X axis.")]
		public FsmFloat maximumX;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Minimum angle around Y axis.")]
		[HasFloatSlider(-360f, 360f)]
		[RequiredField]
		public FsmFloat minimumY;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Maximum angle around X axis.")]
		public FsmFloat maximumY;

		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float rotationX;

		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float rotationY;

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0x128DFE4", Offset = "0x128DFE4", VA = "0x128DFE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0x128E0D0", Offset = "0x128E0D0", VA = "0x128E0D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0x128E358", Offset = "0x128E358", VA = "0x128E358", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021BB")]
		[Address(RVA = "0x128E210", Offset = "0x128E210", VA = "0x128E210")]
		private void DoMouseLook()
		{
		}

		[Token(Token = "0x60021BC")]
		[Address(RVA = "0x128E434", Offset = "0x128E434", VA = "0x128E434")]
		private float GetXRotation()
		{
			return default(float);
		}

		[Token(Token = "0x60021BD")]
		[Address(RVA = "0x128E35C", Offset = "0x128E35C", VA = "0x128E35C")]
		private float GetYRotation()
		{
			return default(float);
		}

		[Token(Token = "0x60021BE")]
		[Address(RVA = "0x128E50C", Offset = "0x128E50C", VA = "0x128E50C")]
		private static float ClampAngle(float angle, FsmFloat min, FsmFloat max)
		{
			return default(float);
		}

		[Token(Token = "0x60021BF")]
		[Address(RVA = "0x128E5B0", Offset = "0x128E5B0", VA = "0x128E5B0")]
		public MouseLook2()
		{
		}
	}
	[Token(Token = "0x200069C")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Perform a Mouse Pick on the scene from the Main Camera and stores the results. Use Ray Distance to set how close the camera must be to pick the object.")]
	public class MousePick : FsmStateAction
	{
		[Token(Token = "0x4001E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Set the length of the ray to cast from the Main Camera.")]
		public FsmFloat rayDistance;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set Bool variable true if an object was picked, false if not.")]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked GameObject.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the point of contact.")]
		public FsmVector3 storePoint;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the normal at the point of contact.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeNormal;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the distance to the point of contact.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeDistance;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0x128E5F8", Offset = "0x128E5F8", VA = "0x128E5F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0x128E6E4", Offset = "0x128E6E4", VA = "0x128E6E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0x128E91C", Offset = "0x128E91C", VA = "0x128E91C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021C3")]
		[Address(RVA = "0x128E710", Offset = "0x128E710", VA = "0x128E710")]
		private void DoMousePick()
		{
		}

		[Token(Token = "0x60021C4")]
		[Address(RVA = "0x128E920", Offset = "0x128E920", VA = "0x128E920")]
		public MousePick()
		{
		}
	}
	[Token(Token = "0x200069D")]
	[ActionCategory(ActionCategory.Input)]
	[ActionTarget(typeof(GameObject), "GameObject", false)]
	[Tooltip("Sends Events based on mouse interactions with a Game Object: MouseOver, MouseDown, MouseUp, MouseOff. Use Ray Distance to set how close the camera must be to pick the object.\nNOTE: Picking uses the Main Camera, so you must have a Camera in the scene tagged as Main Camera.")]
	public class MousePickEvent : FsmStateAction
	{
		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Collider))]
		[Tooltip("The game object to test for mouse picking.")]
		public FsmOwnerDefault GameObject;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Length of the ray to cast from the camera.")]
		public FsmFloat rayDistance;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the mouse is over the GameObject.")]
		public FsmEvent mouseOver;

		[Token(Token = "0x4001E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the mouse is pressed while over the GameObject.")]
		public FsmEvent mouseDown;

		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the mouse is released while over the GameObject.")]
		public FsmEvent mouseUp;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send when the mouse moves off the GameObject.")]
		public FsmEvent mouseOff;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60021C5")]
		[Address(RVA = "0x128E958", Offset = "0x128E958", VA = "0x128E958", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0x128EA48", Offset = "0x128EA48", VA = "0x128EA48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0x128EBFC", Offset = "0x128EBFC", VA = "0x128EBFC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0x128EA74", Offset = "0x128EA74", VA = "0x128EA74")]
		private void DoMousePickEvent()
		{
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0x128EC00", Offset = "0x128EC00", VA = "0x128EC00")]
		private bool DoRaycast()
		{
			return default(bool);
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x128EC98", Offset = "0x128EC98", VA = "0x128EC98", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0x128ED38", Offset = "0x128ED38", VA = "0x128ED38")]
		public MousePickEvent()
		{
		}
	}
	[Token(Token = "0x200069E")]
	[Obsolete("This action has no equivalent in the new Input System.")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Resets all Input. After ResetInputAxes all axes return to 0 and all buttons return to 0 for one frame")]
	public class ResetInputAxes : FsmStateAction
	{
		[Token(Token = "0x60021CC")]
		[Address(RVA = "0x128ED70", Offset = "0x128ED70", VA = "0x128ED70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0x128ED74", Offset = "0x128ED74", VA = "0x128ED74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0x128ED7C", Offset = "0x128ED7C", VA = "0x128ED7C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0x128EDBC", Offset = "0x128EDBC", VA = "0x128EDBC")]
		public ResetInputAxes()
		{
		}
	}
	[Token(Token = "0x200069F")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Perform a raycast into the scene using screen coordinates and stores the results. Use Ray Distance to set how close the camera must be to pick the object. NOTE: Uses the MainCamera!")]
	public class ScreenPick : FsmStateAction
	{
		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A Vector3 screen position. Commonly stored by other actions.")]
		public FsmVector3 screenVector;

		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("X position on screen.")]
		public FsmFloat screenX;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Y position on screen.")]
		public FsmFloat screenY;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Are the supplied screen coordinates normalized (0-1), or in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The length of the ray to use.")]
		public FsmFloat rayDistance;

		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store whether the ray hit an object in a Bool Variable.")]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x4001E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the hit Game Object in a Game Object Variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x4001E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the world position of the hit point in a Vector3 Variable.")]
		public FsmVector3 storePoint;

		[Token(Token = "0x4001E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the normal of the hit point in a Vector3 Variable.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeNormal;

		[Token(Token = "0x4001E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the distance to the hit point.")]
		public FsmFloat storeDistance;

		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Pick only from these layers. Set a number then select layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4001E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0x128EDC4", Offset = "0x128EDC4", VA = "0x128EDC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021D1")]
		[Address(RVA = "0x128EF8C", Offset = "0x128EF8C", VA = "0x128EF8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021D2")]
		[Address(RVA = "0x128F36C", Offset = "0x128F36C", VA = "0x128F36C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021D3")]
		[Address(RVA = "0x128EFB8", Offset = "0x128EFB8", VA = "0x128EFB8")]
		private void DoScreenPick()
		{
		}

		[Token(Token = "0x60021D4")]
		[Address(RVA = "0x128F370", Offset = "0x128F370", VA = "0x128F370")]
		public ScreenPick()
		{
		}
	}
	[Token(Token = "0x20006A0")]
	[Tooltip("Transforms 2d input into a 3d world space vector. E.g., can be used to transform input from a touch joystick to a movement vector.")]
	[NoActionTargets]
	[ActionCategory(ActionCategory.Input)]
	public class TransformInputToWorldSpace : FsmStateAction
	{
		[Token(Token = "0x20006A1")]
		public enum AxisPlane
		{
			[Token(Token = "0x4001E58")]
			XZ,
			[Token(Token = "0x4001E59")]
			XY,
			[Token(Token = "0x4001E5A")]
			YZ
		}

		[Token(Token = "0x4001E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The horizontal input.")]
		public FsmFloat horizontalInput;

		[Token(Token = "0x4001E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vertical input.")]
		public FsmFloat verticalInput;

		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Input axis are reported in the range -1 to 1, this multiplier lets you set a new range.")]
		public FsmFloat multiplier;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The world plane to map the 2d input onto.")]
		public AxisPlane mapToPlane;

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Make the result relative to a GameObject, typically the main camera.")]
		public FsmGameObject relativeTo;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the direction vector.")]
		[RequiredField]
		public FsmVector3 storeVector;

		[Token(Token = "0x4001E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the length of the direction vector.")]
		public FsmFloat storeMagnitude;

		[Token(Token = "0x60021D5")]
		[Address(RVA = "0x128F3A8", Offset = "0x128F3A8", VA = "0x128F3A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021D6")]
		[Address(RVA = "0x128F410", Offset = "0x128F410", VA = "0x128F410", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0x128F960", Offset = "0x128F960", VA = "0x128F960")]
		public TransformInputToWorldSpace()
		{
		}
	}
	[Token(Token = "0x20006A2")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Waits until any key is pressed then action finishes. Similar to AnyKey action but can be used in Action Sequences.")]
	public class WaitAnyKey : FsmStateAction
	{
		[Token(Token = "0x4001E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the optional event")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional event to send when any Key or Mouse Button is pressed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0x128F968", Offset = "0x128F968", VA = "0x128F968", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0x128F990", Offset = "0x128F990", VA = "0x128F990", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x128F9D4", Offset = "0x128F9D4", VA = "0x128F9D4")]
		public WaitAnyKey()
		{
		}
	}
	[Token(Token = "0x20006A3")]
	[ActionCategory(ActionCategory.Level)]
	[Tooltip("Makes the Game Object not be destroyed automatically when loading a new scene.\nSee unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Object.DontDestroyOnLoad.html\">DontDestroyOnLoad</a>.")]
	public class DontDestroyOnLoad : FsmStateAction
	{
		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("GameObject to mark as DontDestroyOnLoad.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x128F9DC", Offset = "0x128F9DC", VA = "0x128F9DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0x128F9E8", Offset = "0x128F9E8", VA = "0x128F9E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0x128FAC0", Offset = "0x128FAC0", VA = "0x128FAC0")]
		public DontDestroyOnLoad()
		{
		}
	}
	[Token(Token = "0x20006A4")]
	[ActionCategory(ActionCategory.Level)]
	[Tooltip("Loads a Level by Name. NOTE: Before you can load a level, you have to add it to the list of levels defined in File->Build Settings...")]
	public class LoadLevel : FsmStateAction
	{
		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the level to load. NOTE: Must be in the list of levels defined in File->Build Settings... ")]
		public FsmString levelName;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Load the level additively, keeping the current scene.")]
		public bool additive;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Tooltip("Load the level asynchronously in the background.")]
		public bool async;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the level has loaded. NOTE: This only makes sense if the FSM is still in the scene!")]
		public FsmEvent loadedEvent;

		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Keep this GameObject in the new level. NOTE: The GameObject and components is disabled then enabled on load; uncheck Reset On Disable to keep the active state.")]
		public FsmBool dontDestroyOnLoad;

		[Token(Token = "0x4001E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the level cannot be loaded.")]
		public FsmEvent failedEvent;

		[Token(Token = "0x4001E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AsyncOperation asyncOperation;

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0x128FAC8", Offset = "0x128FAC8", VA = "0x128FAC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0x128FB50", Offset = "0x128FB50", VA = "0x128FB50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0x128FE18", Offset = "0x128FE18", VA = "0x128FE18", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0x128FE64", Offset = "0x128FE64", VA = "0x128FE64")]
		public LoadLevel()
		{
		}
	}
	[Token(Token = "0x20006A5")]
	[ActionCategory(ActionCategory.Level)]
	[Tooltip("Loads a Level by Index number. Before you can load a level, you have to add it to the list of levels defined in File->Build Settings...")]
	public class LoadLevelNum : FsmStateAction
	{
		[Token(Token = "0x4001E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The level index in File->Build Settings")]
		public FsmInt levelIndex;

		[Token(Token = "0x4001E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Load the level additively, keeping the current scene.")]
		public bool additive;

		[Token(Token = "0x4001E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send after the level is loaded.")]
		public FsmEvent loadedEvent;

		[Token(Token = "0x4001E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Keep this GameObject in the new level. NOTE: The GameObject and components is disabled then enabled on load; uncheck Reset On Disable to keep the active state.")]
		public FsmBool dontDestroyOnLoad;

		[Token(Token = "0x4001E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the level cannot be loaded.")]
		public FsmEvent failedEvent;

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0x128FE6C", Offset = "0x128FE6C", VA = "0x128FE6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0x128FEB4", Offset = "0x128FEB4", VA = "0x128FEB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021E4")]
		[Address(RVA = "0x128FFF4", Offset = "0x128FFF4", VA = "0x128FFF4")]
		public LoadLevelNum()
		{
		}
	}
	[Token(Token = "0x20006A6")]
	[ActionCategory(ActionCategory.Level)]
	[Note("Reloads the current scene.")]
	[Tooltip("Reloads the current scene.")]
	public class RestartLevel : FsmStateAction
	{
		[Token(Token = "0x60021E5")]
		[Address(RVA = "0x128FFFC", Offset = "0x128FFFC", VA = "0x128FFFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0x1290088", Offset = "0x1290088", VA = "0x1290088")]
		public RestartLevel()
		{
		}
	}
	[Token(Token = "0x20006A7")]
	[Tooltip("Sets the Color of a Light.")]
	[ActionCategory(ActionCategory.Lights)]
	public class SetLightColor : ComponentAction<Light>
	{
		[Token(Token = "0x4001E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The color of the light.")]
		public FsmColor lightColor;

		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0x1290090", Offset = "0x1290090", VA = "0x1290090", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0x12900D8", Offset = "0x12900D8", VA = "0x12900D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0x12901B4", Offset = "0x12901B4", VA = "0x12901B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0x1290104", Offset = "0x1290104", VA = "0x1290104")]
		private void DoSetLightColor()
		{
		}

		[Token(Token = "0x60021EB")]
		[Address(RVA = "0x12901B8", Offset = "0x12901B8", VA = "0x12901B8")]
		public SetLightColor()
		{
		}
	}
	[Token(Token = "0x20006A8")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Texture projected by a Light.")]
	public class SetLightCookie : ComponentAction<Light>
	{
		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The texture to project.")]
		public FsmTexture lightCookie;

		[Token(Token = "0x60021EC")]
		[Address(RVA = "0x1290200", Offset = "0x1290200", VA = "0x1290200", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0x1290228", Offset = "0x1290228", VA = "0x1290228", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021EE")]
		[Address(RVA = "0x1290244", Offset = "0x1290244", VA = "0x1290244")]
		private void DoSetLightCookie()
		{
		}

		[Token(Token = "0x60021EF")]
		[Address(RVA = "0x1290304", Offset = "0x1290304", VA = "0x1290304")]
		public SetLightCookie()
		{
		}
	}
	[Token(Token = "0x20006A9")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Flare effect used by a Light.")]
	public class SetLightFlare : ComponentAction<Light>
	{
		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object with the Light Component.")]
		[CheckForComponent(typeof(Light))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The flare to use.")]
		public Flare lightFlare;

		[Token(Token = "0x60021F0")]
		[Address(RVA = "0x129034C", Offset = "0x129034C", VA = "0x129034C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021F1")]
		[Address(RVA = "0x1290374", Offset = "0x1290374", VA = "0x1290374", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021F2")]
		[Address(RVA = "0x1290390", Offset = "0x1290390", VA = "0x1290390")]
		private void DoSetLightRange()
		{
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0x1290434", Offset = "0x1290434", VA = "0x1290434")]
		public SetLightFlare()
		{
		}
	}
	[Token(Token = "0x20006AA")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Intensity of a Light.")]
	public class SetLightIntensity : ComponentAction<Light>
	{
		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Light))]
		[RequiredField]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The intensity of the light.")]
		public FsmFloat lightIntensity;

		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the intensity is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60021F4")]
		[Address(RVA = "0x129047C", Offset = "0x129047C", VA = "0x129047C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021F5")]
		[Address(RVA = "0x12904B8", Offset = "0x12904B8", VA = "0x12904B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0x12905A0", Offset = "0x12905A0", VA = "0x12905A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0x12904E4", Offset = "0x12904E4", VA = "0x12904E4")]
		private void DoSetLightIntensity()
		{
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0x12905A4", Offset = "0x12905A4", VA = "0x12905A4")]
		public SetLightIntensity()
		{
		}
	}
	[Token(Token = "0x20006AB")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Range of a Light.")]
	public class SetLightRange : ComponentAction<Light>
	{
		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		[Tooltip("The Game Object with the Light Component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The range of the light.")]
		public FsmFloat lightRange;

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the range is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0x12905EC", Offset = "0x12905EC", VA = "0x12905EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0x1290628", Offset = "0x1290628", VA = "0x1290628", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60021FB")]
		[Address(RVA = "0x1290710", Offset = "0x1290710", VA = "0x1290710", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0x1290654", Offset = "0x1290654", VA = "0x1290654")]
		private void DoSetLightRange()
		{
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0x1290714", Offset = "0x1290714", VA = "0x1290714")]
		public SetLightRange()
		{
		}
	}
	[Token(Token = "0x20006AC")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Sets the Spot Angle of a Light.")]
	public class SetLightSpotAngle : ComponentAction<Light>
	{
		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object with the Light Component.")]
		[CheckForComponent(typeof(Light))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The angle of the spot light beam.")]
		public FsmFloat lightSpotAngle;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the spot angle is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60021FE")]
		[Address(RVA = "0x129075C", Offset = "0x129075C", VA = "0x129075C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0x1290798", Offset = "0x1290798", VA = "0x1290798", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0x1290880", Offset = "0x1290880", VA = "0x1290880", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0x12907C4", Offset = "0x12907C4", VA = "0x12907C4")]
		private void DoSetLightRange()
		{
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0x1290884", Offset = "0x1290884", VA = "0x1290884")]
		public SetLightSpotAngle()
		{
		}
	}
	[Token(Token = "0x20006AD")]
	[ActionCategory(ActionCategory.Lights)]
	[Tooltip("Set Spot, Directional, or Point Light type.")]
	public class SetLightType : ComponentAction<Light>
	{
		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object with the Light Component.")]
		[CheckForComponent(typeof(Light))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(LightType))]
		[Tooltip("Spot, directional, or point light.")]
		public FsmEnum lightType;

		[Token(Token = "0x6002203")]
		[Address(RVA = "0x12908CC", Offset = "0x12908CC", VA = "0x12908CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0x1290950", Offset = "0x1290950", VA = "0x1290950", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0x129096C", Offset = "0x129096C", VA = "0x129096C")]
		private void DoSetLightType()
		{
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0x1290A64", Offset = "0x1290A64", VA = "0x1290A64")]
		public SetLightType()
		{
		}
	}
	[Token(Token = "0x20006AE")]
	[Tooltip("Sets the strength of the shadows cast by a Light.")]
	[ActionCategory(ActionCategory.Lights)]
	public class SetShadowStrength : ComponentAction<Light>
	{
		[Token(Token = "0x4001E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object with the Light Component.")]
		[RequiredField]
		[CheckForComponent(typeof(Light))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The strength of the shadows. 1 = opaque, 0 = transparent.")]
		public FsmFloat shadowStrength;

		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Update every frame. Useful if the shadow strength is animated.")]
		public bool everyFrame;

		[Token(Token = "0x6002207")]
		[Address(RVA = "0x1290AAC", Offset = "0x1290AAC", VA = "0x1290AAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0x1290AEC", Offset = "0x1290AEC", VA = "0x1290AEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0x1290BD4", Offset = "0x1290BD4", VA = "0x1290BD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0x1290B18", Offset = "0x1290B18", VA = "0x1290B18")]
		private void DoSetShadowStrength()
		{
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0x1290BD8", Offset = "0x1290BD8", VA = "0x1290BD8")]
		public SetShadowStrength()
		{
		}
	}
	[Token(Token = "0x20006AF")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if all the given Bool Variables are True.")]
	public class BoolAllTrue : FsmStateAction
	{
		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[Tooltip("The Bool variables to check.")]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if all the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active. Useful if you're waiting for all to be true.")]
		public bool everyFrame;

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x1290C20", Offset = "0x1290C20", VA = "0x1290C20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0x1290C60", Offset = "0x1290C60", VA = "0x1290C60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0x1290D2C", Offset = "0x1290D2C", VA = "0x1290D2C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600220F")]
		[Address(RVA = "0x1290C8C", Offset = "0x1290C8C", VA = "0x1290C8C")]
		private void DoAllTrue()
		{
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0x1290D30", Offset = "0x1290D30", VA = "0x1290D30")]
		public BoolAllTrue()
		{
		}
	}
	[Token(Token = "0x20006B0")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if any of the given Bool Variables are True.")]
	public class BoolAnyTrue : FsmStateAction
	{
		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Bool variables to check.")]
		[UIHint(UIHint.Variable)]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if any of the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a Bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active. Useful if you're waiting for any to be true.")]
		public bool everyFrame;

		[Token(Token = "0x6002211")]
		[Address(RVA = "0x1290D38", Offset = "0x1290D38", VA = "0x1290D38", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0x1290D78", Offset = "0x1290D78", VA = "0x1290D78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x1290E4C", Offset = "0x1290E4C", VA = "0x1290E4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0x1290DA4", Offset = "0x1290DA4", VA = "0x1290DA4")]
		private void DoAnyTrue()
		{
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x1290E50", Offset = "0x1290E50", VA = "0x1290E50")]
		public BoolAnyTrue()
		{
		}
	}
	[Token(Token = "0x20006B1")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of a Bool Variable has changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class BoolChanged : FsmStateAction
	{
		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variable to watch for changes.")]
		public FsmBool boolVariable;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the variable changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if changed.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool previousValue;

		[Token(Token = "0x6002216")]
		[Address(RVA = "0x1290E58", Offset = "0x1290E58", VA = "0x1290E58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0x1290E90", Offset = "0x1290E90", VA = "0x1290E90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0x1290EE0", Offset = "0x1290EE0", VA = "0x1290EE0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x1290F48", Offset = "0x1290F48", VA = "0x1290F48")]
		public BoolChanged()
		{
		}
	}
	[Token(Token = "0x20006B2")]
	[Tooltip("Tests if all the Bool Variables are False.\nSend an event or store the result.")]
	[ActionCategory(ActionCategory.Logic)]
	public class BoolNoneTrue : FsmStateAction
	{
		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variables to check.")]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if none of the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4001E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x1290F50", Offset = "0x1290F50", VA = "0x1290F50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600221B")]
		[Address(RVA = "0x1290F90", Offset = "0x1290F90", VA = "0x1290F90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600221C")]
		[Address(RVA = "0x129105C", Offset = "0x129105C", VA = "0x129105C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0x1290FBC", Offset = "0x1290FBC", VA = "0x1290FBC")]
		private void DoNoneTrue()
		{
		}

		[Token(Token = "0x600221E")]
		[Address(RVA = "0x1291060", Offset = "0x1291060", VA = "0x1291060")]
		public BoolNoneTrue()
		{
		}
	}
	[Token(Token = "0x20006B3")]
	[Tooltip("Performs boolean operations on 2 Bool Variables.")]
	[ActionCategory(ActionCategory.Math)]
	public class BoolOperator : FsmStateAction
	{
		[Token(Token = "0x20006B4")]
		public enum Operation
		{
			[Token(Token = "0x4001E95")]
			AND,
			[Token(Token = "0x4001E96")]
			NAND,
			[Token(Token = "0x4001E97")]
			OR,
			[Token(Token = "0x4001E98")]
			XOR
		}

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Bool variable.")]
		[RequiredField]
		public FsmBool bool1;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second Bool variable.")]
		public FsmBool bool2;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Boolean Operation.")]
		public Operation operation;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x600221F")]
		[Address(RVA = "0x1291068", Offset = "0x1291068", VA = "0x1291068", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002220")]
		[Address(RVA = "0x12910C8", Offset = "0x12910C8", VA = "0x12910C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002221")]
		[Address(RVA = "0x12911A4", Offset = "0x12911A4", VA = "0x12911A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002222")]
		[Address(RVA = "0x12910F4", Offset = "0x12910F4", VA = "0x12910F4")]
		private void DoBoolOperator()
		{
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0x12911A8", Offset = "0x12911A8", VA = "0x12911A8")]
		public BoolOperator()
		{
		}
	}
	[Token(Token = "0x20006B5")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the value of a Boolean Variable.")]
	public class BoolTest : FsmStateAction
	{
		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[Tooltip("The Bool variable to test.")]
		public FsmBool boolVariable;

		[Token(Token = "0x4001E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the Bool variable is True.")]
		public FsmEvent isTrue;

		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the Bool variable is False.")]
		public FsmEvent isFalse;

		[Token(Token = "0x4001E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x12911B0", Offset = "0x12911B0", VA = "0x12911B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0x12911F0", Offset = "0x12911F0", VA = "0x12911F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002226")]
		[Address(RVA = "0x1291260", Offset = "0x1291260", VA = "0x1291260", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002227")]
		[Address(RVA = "0x12912B0", Offset = "0x12912B0", VA = "0x12912B0")]
		public BoolTest()
		{
		}
	}
	[Token(Token = "0x20006B6")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the comparison of 2 Colors.")]
	public class ColorCompare : FsmStateAction
	{
		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first Color.")]
		[RequiredField]
		public FsmColor color1;

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second Color.")]
		public FsmColor color2;

		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Tolerance of test, to test for 'almost equals' or to ignore small floating point rounding differences.")]
		public FsmFloat tolerance;

		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Color 1 equals Color 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Color 1 does not equal Color 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x6002228")]
		[Address(RVA = "0x12912B8", Offset = "0x12912B8", VA = "0x12912B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002229")]
		[Address(RVA = "0x1291364", Offset = "0x1291364", VA = "0x1291364", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0x12914A0", Offset = "0x12914A0", VA = "0x12914A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0x1291390", Offset = "0x1291390", VA = "0x1291390")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0x12914A4", Offset = "0x12914A4", VA = "0x12914A4", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0x129155C", Offset = "0x129155C", VA = "0x129155C")]
		public ColorCompare()
		{
		}
	}
	[Token(Token = "0x20006B7")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Compares 2 Enum values and sends Events based on the result.")]
	public class EnumCompare : FsmStateAction
	{
		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Enum Variable.")]
		public FsmEnum enumVariable;

		[Token(Token = "0x4001EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchFieldType("enumVariable")]
		[Tooltip("The second Enum Variable.")]
		public FsmEnum compareTo;

		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the values are equal.")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4001EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the values are not equal.")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4001EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the true/false result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the enum is changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x600222E")]
		[Address(RVA = "0x1291564", Offset = "0x1291564", VA = "0x1291564", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0x12915C4", Offset = "0x12915C4", VA = "0x12915C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0x1291688", Offset = "0x1291688", VA = "0x1291688", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002231")]
		[Address(RVA = "0x12915F0", Offset = "0x12915F0", VA = "0x12915F0")]
		private void DoEnumCompare()
		{
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0x129168C", Offset = "0x129168C", VA = "0x129168C")]
		public EnumCompare()
		{
		}
	}
	[Token(Token = "0x20006B8")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends an Event based on the value of an Enum Variable.")]
	public class EnumSwitch : FsmStateAction
	{
		[Token(Token = "0x4001EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Enum Variable to use.")]
		public FsmEnum enumVariable;

		[Token(Token = "0x4001EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[MatchFieldType("enumVariable")]
		[Tooltip("Compare Enum Values")]
		[CompoundArray("Enum Switches", "Compare Enum Value", "Send Event")]
		public FsmEnum[] compareTo;

		[Token(Token = "0x4001EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the Enum Variable value is equal.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4001EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002233")]
		[Address(RVA = "0x1291694", Offset = "0x1291694", VA = "0x1291694", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0x129173C", Offset = "0x129173C", VA = "0x129173C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0x129184C", Offset = "0x129184C", VA = "0x129184C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0x1291768", Offset = "0x1291768", VA = "0x1291768")]
		private void DoEnumSwitch()
		{
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0x1291850", Offset = "0x1291850", VA = "0x1291850")]
		public EnumSwitch()
		{
		}
	}
	[Token(Token = "0x20006B9")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of a Float variable changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class FloatChanged : FsmStateAction
	{
		[Token(Token = "0x4001EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Float variable to watch for a change.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the float variable changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if the float variable changes.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float previousValue;

		[Token(Token = "0x6002238")]
		[Address(RVA = "0x1291858", Offset = "0x1291858", VA = "0x1291858", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002239")]
		[Address(RVA = "0x1291890", Offset = "0x1291890", VA = "0x1291890", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600223A")]
		[Address(RVA = "0x12918DC", Offset = "0x12918DC", VA = "0x12918DC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600223B")]
		[Address(RVA = "0x1291954", Offset = "0x1291954", VA = "0x1291954")]
		public FloatChanged()
		{
		}
	}
	[Token(Token = "0x20006BA")]
	[Tooltip("Sends Events based on the comparison of 2 Floats.")]
	[ActionCategory(ActionCategory.Logic)]
	public class FloatCompare : FsmStateAction
	{
		[Token(Token = "0x4001EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first float variable.")]
		[RequiredField]
		public FsmFloat float1;

		[Token(Token = "0x4001EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second float variable.")]
		public FsmFloat float2;

		[Token(Token = "0x4001EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Tolerance for the Equal test (almost equal).\nNOTE: Floats that look the same are often not exactly the same, so you often need to use a small tolerance.")]
		public FsmFloat tolerance;

		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Float 1 equals Float 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Float 1 is less than Float 2")]
		public FsmEvent lessThan;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if Float 1 is greater than Float 2")]
		public FsmEvent greaterThan;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x600223C")]
		[Address(RVA = "0x129195C", Offset = "0x129195C", VA = "0x129195C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0x12919F4", Offset = "0x12919F4", VA = "0x12919F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0x1291B14", Offset = "0x1291B14", VA = "0x1291B14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0x1291A20", Offset = "0x1291A20", VA = "0x1291A20")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0x1291B18", Offset = "0x1291B18", VA = "0x1291B18", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0x1291BF4", Offset = "0x1291BF4", VA = "0x1291BF4")]
		public FloatCompare()
		{
		}
	}
	[Token(Token = "0x20006BB")]
	[Tooltip("Sends Events based on the sign of a Float (positive or negative).")]
	[ActionCategory(ActionCategory.Logic)]
	public class FloatSignTest : FsmStateAction
	{
		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float variable to test.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatValue;

		[Token(Token = "0x4001EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the float variable is positive.")]
		public FsmEvent isPositive;

		[Token(Token = "0x4001EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the float variable is negative.")]
		public FsmEvent isNegative;

		[Token(Token = "0x4001EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if you want to wait until a float is positive/negative.")]
		public bool everyFrame;

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x1291BFC", Offset = "0x1291BFC", VA = "0x1291BFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0x1291C4C", Offset = "0x1291C4C", VA = "0x1291C4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0x1291CD4", Offset = "0x1291CD4", VA = "0x1291CD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0x1291C78", Offset = "0x1291C78", VA = "0x1291C78")]
		private void DoSignTest()
		{
		}

		[Token(Token = "0x6002246")]
		[Address(RVA = "0x1291CD8", Offset = "0x1291CD8", VA = "0x1291CD8", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002247")]
		[Address(RVA = "0x1291D90", Offset = "0x1291D90", VA = "0x1291D90")]
		public FloatSignTest()
		{
		}
	}
	[Token(Token = "0x20006BC")]
	[Tooltip("Sends an Event based on the value of a Float Variable. The float could represent distance, angle to a target, health left... The array sets up float ranges that correspond to Events.")]
	[ActionCategory(ActionCategory.Logic)]
	public class FloatSwitch : FsmStateAction
	{
		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float variable to test.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Test if the float is less than a value. Each entry in the array defines a range between it and the previous entry.")]
		[CompoundArray("Float Switches", "Less Than", "Send Event")]
		public FsmFloat[] lessThan;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if true.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002248")]
		[Address(RVA = "0x1291D98", Offset = "0x1291D98", VA = "0x1291D98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0x1291E40", Offset = "0x1291E40", VA = "0x1291E40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0x1291F44", Offset = "0x1291F44", VA = "0x1291F44", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0x1291E6C", Offset = "0x1291E6C", VA = "0x1291E6C")]
		private void DoFloatSwitch()
		{
		}

		[Token(Token = "0x600224C")]
		[Address(RVA = "0x1291F48", Offset = "0x1291F48", VA = "0x1291F48")]
		public FloatSwitch()
		{
		}
	}
	[Token(Token = "0x20006BD")]
	[Tooltip("Tests if an FSM has a variable with the given name.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.Logic)]
	public class FsmHasVariable : FsmStateAction
	{
		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of Fsm on Game Object. Useful if there is more than one FSM on the GameObject.")]
		public FsmString fsmName;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Check to see if the FSM has this variable.")]
		public FsmString variableName;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the FSM has the variable.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the FSM does NOT have the variable.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result of this test in a bool variable. Useful if other actions depend on this test.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject previousGo;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600224D")]
		[Address(RVA = "0x1291F50", Offset = "0x1291F50", VA = "0x1291F50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600224E")]
		[Address(RVA = "0x1291FC0", Offset = "0x1291FC0", VA = "0x1291FC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600224F")]
		[Address(RVA = "0x1292188", Offset = "0x1292188", VA = "0x1292188", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002250")]
		[Address(RVA = "0x1291FEC", Offset = "0x1291FEC", VA = "0x1291FEC")]
		private void DoFsmVariableTest()
		{
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0x129218C", Offset = "0x129218C", VA = "0x129218C")]
		public FsmHasVariable()
		{
		}
	}
	[Token(Token = "0x20006BE")]
	[Tooltip("Sends Events based on the current State of an FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.Logic)]
	public class FsmStateSwitch : FsmStateAction
	{
		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of Fsm on GameObject. Useful if there is more than one FSM on the GameObject.")]
		public FsmString fsmName;

		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[CompoundArray("State Switches", "Compare State", "Send Event")]
		[Tooltip("Compare the current State to this State.")]
		public FsmString[] compareTo;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Send this event if the same.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject previousGo;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002252")]
		[Address(RVA = "0x1292194", Offset = "0x1292194", VA = "0x1292194", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002253")]
		[Address(RVA = "0x129224C", Offset = "0x129224C", VA = "0x129224C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0x1292438", Offset = "0x1292438", VA = "0x1292438", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0x1292278", Offset = "0x1292278", VA = "0x1292278")]
		private void DoFsmStateSwitch()
		{
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0x129243C", Offset = "0x129243C", VA = "0x129243C")]
		public FsmStateSwitch()
		{
		}
	}
	[Token(Token = "0x20006BF")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if an FSM is in the specified State.")]
	public class FsmStateTest : FsmStateAction
	{
		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of Fsm on Game Object. Useful if there is more than one FSM on the GameObject.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Check to see if the FSM is in this state.")]
		public FsmString stateName;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the FSM is in the specified state.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the FSM is NOT in the specified state.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result of this test in a bool variable. Useful if other actions depend on this test.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful if you want to wait for an FSM to be in a particular state before sending an event.")]
		public bool everyFrame;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject previousGo;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002257")]
		[Address(RVA = "0x1292444", Offset = "0x1292444", VA = "0x1292444", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002258")]
		[Address(RVA = "0x12924B4", Offset = "0x12924B4", VA = "0x12924B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002259")]
		[Address(RVA = "0x1292678", Offset = "0x1292678", VA = "0x1292678", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600225A")]
		[Address(RVA = "0x12924E0", Offset = "0x12924E0", VA = "0x12924E0")]
		private void DoFsmStateTest()
		{
		}

		[Token(Token = "0x600225B")]
		[Address(RVA = "0x129267C", Offset = "0x129267C", VA = "0x129267C")]
		public FsmStateTest()
		{
		}
	}
	[Token(Token = "0x20006C0")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of a GameObject variable changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class GameObjectChanged : FsmStateAction
	{
		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The GameObject variable to watch for a change.")]
		[RequiredField]
		public FsmGameObject gameObjectVariable;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the variable changes.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set to True if the variable changes.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject previousValue;

		[Token(Token = "0x600225C")]
		[Address(RVA = "0x1292684", Offset = "0x1292684", VA = "0x1292684", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600225D")]
		[Address(RVA = "0x12926BC", Offset = "0x12926BC", VA = "0x12926BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0x1292710", Offset = "0x1292710", VA = "0x1292710", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0x12927CC", Offset = "0x12927CC", VA = "0x12927CC")]
		public GameObjectChanged()
		{
		}
	}
	[Token(Token = "0x20006C1")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Compares 2 Game Objects and sends Events based on the result.")]
	public class GameObjectCompare : FsmStateAction
	{
		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Title("Game Object")]
		[Tooltip("A Game Object variable to compare.")]
		public FsmOwnerDefault gameObjectVariable;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Compare the variable with this Game Object")]
		public FsmGameObject compareTo;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event if Game Objects are equal")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Send this event if Game Objects are not equal")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the result of the check in a Bool Variable. (True if equal, false if not equal).")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if you're waiting for a true or false result.")]
		public bool everyFrame;

		[Token(Token = "0x6002260")]
		[Address(RVA = "0x12927D4", Offset = "0x12927D4", VA = "0x12927D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0x1292834", Offset = "0x1292834", VA = "0x1292834", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0x1292934", Offset = "0x1292934", VA = "0x1292934", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0x1292860", Offset = "0x1292860", VA = "0x1292860")]
		private void DoGameObjectCompare()
		{
		}

		[Token(Token = "0x6002264")]
		[Address(RVA = "0x1292938", Offset = "0x1292938", VA = "0x1292938")]
		public GameObjectCompare()
		{
		}
	}
	[Token(Token = "0x20006C2")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a Game Object has a tag.")]
	public class GameObjectCompareTag : FsmStateAction
	{
		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to test.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Tag to check for.")]
		[UIHint(UIHint.Tag)]
		[RequiredField]
		public FsmString tag;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the GameObject has the Tag.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the GameObject does not have the Tag.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002265")]
		[Address(RVA = "0x1292940", Offset = "0x1292940", VA = "0x1292940", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002266")]
		[Address(RVA = "0x12929E0", Offset = "0x12929E0", VA = "0x12929E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002267")]
		[Address(RVA = "0x1292B04", Offset = "0x1292B04", VA = "0x1292B04", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002268")]
		[Address(RVA = "0x1292A0C", Offset = "0x1292A0C", VA = "0x1292A0C")]
		private void DoCompareTag()
		{
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0x1292B08", Offset = "0x1292B08", VA = "0x1292B08")]
		public GameObjectCompareTag()
		{
		}
	}
	[Token(Token = "0x20006C3")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a GameObject has children.")]
	public class GameObjectHasChildren : FsmStateAction
	{
		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the GameObject has children.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the GameObject does not have children.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600226A")]
		[Address(RVA = "0x1292B10", Offset = "0x1292B10", VA = "0x1292B10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600226B")]
		[Address(RVA = "0x1292B60", Offset = "0x1292B60", VA = "0x1292B60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600226C")]
		[Address(RVA = "0x1292C70", Offset = "0x1292C70", VA = "0x1292C70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600226D")]
		[Address(RVA = "0x1292B8C", Offset = "0x1292B8C", VA = "0x1292B8C")]
		private void DoHasChildren()
		{
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0x1292C74", Offset = "0x1292C74", VA = "0x1292C74")]
		public GameObjectHasChildren()
		{
		}
	}
	[Token(Token = "0x20006C4")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a game object is a child of another game object and stores the result in a bool variable.\nE.g., Uses this to check if a collision object is the child of another object.")]
	public class GameObjectIsChildOf : FsmStateAction
	{
		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("GameObject to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Is it a child of this GameObject?")]
		[RequiredField]
		public FsmGameObject isChildOf;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if GameObject is a child.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if GameObject is NOT a child.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store result in a bool variable")]
		[RequiredField]
		public FsmBool storeResult;

		[Token(Token = "0x600226F")]
		[Address(RVA = "0x1292C7C", Offset = "0x1292C7C", VA = "0x1292C7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002270")]
		[Address(RVA = "0x1292CD4", Offset = "0x1292CD4", VA = "0x1292CD4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002271")]
		[Address(RVA = "0x1292D10", Offset = "0x1292D10", VA = "0x1292D10")]
		private void DoIsChildOf(GameObject go)
		{
		}

		[Token(Token = "0x6002272")]
		[Address(RVA = "0x1292E18", Offset = "0x1292E18", VA = "0x1292E18")]
		public GameObjectIsChildOf()
		{
		}
	}
	[Token(Token = "0x20006C5")]
	[Tooltip("Tests if a GameObject Variable has a null value. E.g., If the FindGameObject action failed to find an object.")]
	[ActionCategory(ActionCategory.Logic)]
	public class GameObjectIsNull : FsmStateAction
	{
		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject variable to test.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the GamObject is null.")]
		public FsmEvent isNull;

		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the GamObject is NOT null.")]
		public FsmEvent isNotNull;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if you want to wait for a GameObject variable to be not null (or null) then send an event.")]
		public bool everyFrame;

		[Token(Token = "0x6002273")]
		[Address(RVA = "0x1292E20", Offset = "0x1292E20", VA = "0x1292E20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002274")]
		[Address(RVA = "0x1292E70", Offset = "0x1292E70", VA = "0x1292E70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002275")]
		[Address(RVA = "0x1292F4C", Offset = "0x1292F4C", VA = "0x1292F4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002276")]
		[Address(RVA = "0x1292E9C", Offset = "0x1292E9C", VA = "0x1292E9C")]
		private void DoIsGameObjectNull()
		{
		}

		[Token(Token = "0x6002277")]
		[Address(RVA = "0x1292F50", Offset = "0x1292F50", VA = "0x1292F50")]
		public GameObjectIsNull()
		{
		}
	}
	[Token(Token = "0x20006C6")]
	[ActionCategory(ActionCategory.Logic)]
	[ActionTarget(typeof(GameObject), "gameObject", false)]
	[Tooltip("Tests if a Game Object is visible to any camera.\nNOTE: In the editor this includes the Scene View camera!")]
	public class GameObjectIsVisible : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to test.")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the GameObject is visible.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the GameObject is NOT visible.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Perform this action every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002278")]
		[Address(RVA = "0x1292F58", Offset = "0x1292F58", VA = "0x1292F58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0x1292FA8", Offset = "0x1292FA8", VA = "0x1292FA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0x12930AC", Offset = "0x12930AC", VA = "0x12930AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600227B")]
		[Address(RVA = "0x1292FD4", Offset = "0x1292FD4", VA = "0x1292FD4")]
		private void DoIsVisible()
		{
		}

		[Token(Token = "0x600227C")]
		[Address(RVA = "0x12930B0", Offset = "0x12930B0", VA = "0x12930B0")]
		public GameObjectIsVisible()
		{
		}
	}
	[Token(Token = "0x20006C7")]
	[Tooltip("Tests if a Game Object is visible to a specific camera. Note, using bounds is a little more expensive than using the center point.")]
	[ActionCategory(ActionCategory.Logic)]
	[ActionTarget(typeof(GameObject), "gameObject", false)]
	public class GameObjectIsVisibleToCamera : ComponentAction<Renderer, Camera>
	{
		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The GameObject to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The GameObject with the Camera component.")]
		public FsmGameObject camera;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Use the bounds of the GameObject. Otherwise uses just the center point.")]
		public FsmBool useBounds;

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send if the GameObject is visible.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send if the GameObject is NOT visible.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Store the result in a bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Perform this action every frame.")]
		public bool everyFrame;

		[Token(Token = "0x17000376")]
		private Camera cameraComponent
		{
			[Token(Token = "0x600227D")]
			[Address(RVA = "0x12930F8", Offset = "0x12930F8", VA = "0x12930F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0x1293100", Offset = "0x1293100", VA = "0x1293100", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600227F")]
		[Address(RVA = "0x1293170", Offset = "0x1293170", VA = "0x1293170", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002280")]
		[Address(RVA = "0x129328C", Offset = "0x129328C", VA = "0x129328C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002281")]
		[Address(RVA = "0x129319C", Offset = "0x129319C", VA = "0x129319C")]
		private void DoIsVisible()
		{
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0x1293290", Offset = "0x1293290", VA = "0x1293290")]
		public GameObjectIsVisibleToCamera()
		{
		}
	}
	[Token(Token = "0x20006C8")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends an Event based on a Game Object's Tag.")]
	public class GameObjectTagSwitch : FsmStateAction
	{
		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The GameObject to test.")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Compare GameObject's Tag.")]
		[UIHint(UIHint.Tag)]
		[CompoundArray("Tag Switches", "Compare Tag", "Send Event")]
		public FsmString[] compareTo;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event if Tag matches.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002283")]
		[Address(RVA = "0x12932D8", Offset = "0x12932D8", VA = "0x12932D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x1293380", Offset = "0x1293380", VA = "0x1293380", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x12934E0", Offset = "0x12934E0", VA = "0x12934E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x12933AC", Offset = "0x12933AC", VA = "0x12933AC")]
		private void DoTagSwitch()
		{
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0x12934E4", Offset = "0x12934E4", VA = "0x12934E4")]
		public GameObjectTagSwitch()
		{
		}
	}
	[Token(Token = "0x20006C9")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of an integer variable changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class IntChanged : FsmStateAction
	{
		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int variable to test.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmInt intVariable;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if changed.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to true if changed, otherwise False.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int previousValue;

		[Token(Token = "0x6002288")]
		[Address(RVA = "0x12934EC", Offset = "0x12934EC", VA = "0x12934EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0x1293524", Offset = "0x1293524", VA = "0x1293524", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x1293570", Offset = "0x1293570", VA = "0x1293570", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0x12935E8", Offset = "0x12935E8", VA = "0x12935E8")]
		public IntChanged()
		{
		}
	}
	[Token(Token = "0x20006CA")]
	[Tooltip("Sends Events based on the comparison of 2 Integers.")]
	[ActionCategory(ActionCategory.Logic)]
	public class IntCompare : FsmStateAction
	{
		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first integer.")]
		[RequiredField]
		public FsmInt integer1;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second integer.")]
		public FsmInt integer2;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if Integer 1 equals Integer 2")]
		public FsmEvent equal;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Integer 1 is less than Integer 2")]
		public FsmEvent lessThan;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Integer 1 is greater than Integer 2")]
		public FsmEvent greaterThan;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Perform this action every frame. Useful if you want to wait for a comparison to be true before sending an event.")]
		public bool everyFrame;

		[Token(Token = "0x600228C")]
		[Address(RVA = "0x12935F0", Offset = "0x12935F0", VA = "0x12935F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0x129366C", Offset = "0x129366C", VA = "0x129366C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600228E")]
		[Address(RVA = "0x1293784", Offset = "0x1293784", VA = "0x1293784", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0x1293698", Offset = "0x1293698", VA = "0x1293698")]
		private void DoIntCompare()
		{
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0x1293788", Offset = "0x1293788", VA = "0x1293788", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x1293864", Offset = "0x1293864", VA = "0x1293864")]
		public IntCompare()
		{
		}
	}
	[Token(Token = "0x20006CB")]
	[Tooltip("Sends an Event based on the value of an Integer Variable.")]
	[ActionCategory(ActionCategory.Logic)]
	public class IntSwitch : FsmStateAction
	{
		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The integer variable to test.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The integer variable to test.")]
		[CompoundArray("Int Switches", "Compare Int", "Send Event")]
		public FsmInt[] compareTo;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if true.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002292")]
		[Address(RVA = "0x129386C", Offset = "0x129386C", VA = "0x129386C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0x1293914", Offset = "0x1293914", VA = "0x1293914", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0x1293A18", Offset = "0x1293A18", VA = "0x1293A18", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002295")]
		[Address(RVA = "0x1293940", Offset = "0x1293940", VA = "0x1293940")]
		private void DoIntSwitch()
		{
		}

		[Token(Token = "0x6002296")]
		[Address(RVA = "0x1293A1C", Offset = "0x1293A1C", VA = "0x1293A1C")]
		public IntSwitch()
		{
		}
	}
	[Token(Token = "0x20006CC")]
	[Tooltip("Compare 2 Object Variables and send events based on the result.")]
	[ActionCategory(ActionCategory.Logic)]
	public class ObjectCompare : FsmStateAction
	{
		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Object Variable to compare.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Readonly]
		public FsmObject objectVariable;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to compare it to.")]
		[RequiredField]
		public FsmObject compareTo;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the 2 object values are equal.")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the 2 object values are not equal.")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002297")]
		[Address(RVA = "0x1293A24", Offset = "0x1293A24", VA = "0x1293A24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0x1293A84", Offset = "0x1293A84", VA = "0x1293A84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0x1293B78", Offset = "0x1293B78", VA = "0x1293B78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0x1293AB0", Offset = "0x1293AB0", VA = "0x1293AB0")]
		private void DoObjectCompare()
		{
		}

		[Token(Token = "0x600229B")]
		[Address(RVA = "0x1293B7C", Offset = "0x1293B7C", VA = "0x1293B7C")]
		public ObjectCompare()
		{
		}
	}
	[Token(Token = "0x20006CD")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the comparison of 2 Rect variables.")]
	public class RectCompare : FsmStateAction
	{
		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Rect variable.")]
		public FsmRect rect1;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Rect variable.")]
		[RequiredField]
		public FsmRect rect2;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Tolerance for the Equal test (almost equal).")]
		public FsmFloat tolerance;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Rect 1 equals Rect 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Rect 1 does not equal Rect 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x600229C")]
		[Address(RVA = "0x1293B84", Offset = "0x1293B84", VA = "0x1293B84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600229D")]
		[Address(RVA = "0x1293BF0", Offset = "0x1293BF0", VA = "0x1293BF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0x1293DCC", Offset = "0x1293DCC", VA = "0x1293DCC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0x1293C1C", Offset = "0x1293C1C", VA = "0x1293C1C")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0x1293DD0", Offset = "0x1293DD0", VA = "0x1293DD0", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60022A1")]
		[Address(RVA = "0x1293E88", Offset = "0x1293E88", VA = "0x1293E88")]
		public RectCompare()
		{
		}
	}
	[Token(Token = "0x20006CE")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if the value of a string variable has changed. Use this to send an event on change, or store a bool that can be used in other operations.")]
	public class StringChanged : FsmStateAction
	{
		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String Variable to test.")]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if changed.")]
		public FsmEvent changedEvent;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set to True if changed, otherwise False.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string previousValue;

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0x1293E90", Offset = "0x1293E90", VA = "0x1293E90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0x1293EC8", Offset = "0x1293EC8", VA = "0x1293EC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0x1293F1C", Offset = "0x1293F1C", VA = "0x1293F1C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022A5")]
		[Address(RVA = "0x1293F78", Offset = "0x1293F78", VA = "0x1293F78")]
		public StringChanged()
		{
		}
	}
	[Token(Token = "0x20006CF")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Compares 2 Strings and sends Events based on the result.")]
	public class StringCompare : FsmStateAction
	{
		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The String Variable to compare.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Compare to this text.")]
		public FsmString compareTo;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if strings are equal.")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if strings are not equal.")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x4001F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the true/false result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if any of the strings are changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x60022A6")]
		[Address(RVA = "0x1293F80", Offset = "0x1293F80", VA = "0x1293F80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022A7")]
		[Address(RVA = "0x1294020", Offset = "0x1294020", VA = "0x1294020", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0x12940E4", Offset = "0x12940E4", VA = "0x12940E4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0x129404C", Offset = "0x129404C", VA = "0x129404C")]
		private void DoStringCompare()
		{
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0x12940E8", Offset = "0x12940E8", VA = "0x12940E8")]
		public StringCompare()
		{
		}
	}
	[Token(Token = "0x20006D0")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if a String contains another String.")]
	public class StringContains : FsmStateAction
	{
		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The String variable to test.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Test if the String variable contains this string.")]
		public FsmString containsString;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if true.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if false.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the true/false result in a bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if any of the strings are changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0x12940F0", Offset = "0x12940F0", VA = "0x12940F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022AC")]
		[Address(RVA = "0x1294190", Offset = "0x1294190", VA = "0x1294190", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022AD")]
		[Address(RVA = "0x129427C", Offset = "0x129427C", VA = "0x129427C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0x12941BC", Offset = "0x12941BC", VA = "0x12941BC")]
		private void DoStringContains()
		{
		}

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0x1294280", Offset = "0x1294280", VA = "0x1294280")]
		public StringContains()
		{
		}
	}
	[Token(Token = "0x20006D1")]
	[Tooltip("Sends an Event based on the value of a String Variable.")]
	[ActionCategory(ActionCategory.Logic)]
	public class StringSwitch : FsmStateAction
	{
		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String Variable to test.")]
		public FsmString stringVariable;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CompoundArray("String Switches", "Compare String", "Send Event")]
		[Tooltip("Compare to a string value.")]
		public FsmString[] compareTo;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event if string matches.")]
		public FsmEvent[] sendEvent;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60022B0")]
		[Address(RVA = "0x1294288", Offset = "0x1294288", VA = "0x1294288", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0x1294330", Offset = "0x1294330", VA = "0x1294330", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022B2")]
		[Address(RVA = "0x1294440", Offset = "0x1294440", VA = "0x1294440", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0x129435C", Offset = "0x129435C", VA = "0x129435C")]
		private void DoStringSwitch()
		{
		}

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0x1294444", Offset = "0x1294444", VA = "0x1294444")]
		public StringSwitch()
		{
		}
	}
	[Token(Token = "0x20006D2")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the comparison of 2 Vector2 variables.")]
	public class Vector2Compare : FsmStateAction
	{
		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Vector2 variable.")]
		public FsmVector2 vector1;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The second Vector2 variable.")]
		public FsmVector2 vector2;

		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Tolerance for the Equal test (almost equal).")]
		[RequiredField]
		public FsmFloat tolerance;

		[Token(Token = "0x4001F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Rect 1 equals Rect 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4001F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Rect 1 does not equal Rect 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0x129444C", Offset = "0x129444C", VA = "0x129444C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0x12944B8", Offset = "0x12944B8", VA = "0x12944B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0x129459C", Offset = "0x129459C", VA = "0x129459C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022B8")]
		[Address(RVA = "0x12944E4", Offset = "0x12944E4", VA = "0x12944E4")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x60022B9")]
		[Address(RVA = "0x12945A0", Offset = "0x12945A0", VA = "0x12945A0", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0x1294658", Offset = "0x1294658", VA = "0x1294658")]
		public Vector2Compare()
		{
		}
	}
	[Token(Token = "0x20006D3")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Sends Events based on the comparison of 2 Vector3 variables.")]
	public class Vector3Compare : FsmStateAction
	{
		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The first Vector3 variable.")]
		public FsmVector3 vector1;

		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second Vector3 variable.")]
		[RequiredField]
		public FsmVector3 vector2;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Tolerance for the Equal test (almost equal).")]
		[RequiredField]
		public FsmFloat tolerance;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Rect 1 equals Rect 2 (within Tolerance)")]
		public FsmEvent equal;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Rect 1 does not equal Rect 2 (within Tolerance)")]
		public FsmEvent notEqual;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the variables are changing and you're waiting for a particular result.")]
		public bool everyFrame;

		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x1294660", Offset = "0x1294660", VA = "0x1294660", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x12946CC", Offset = "0x12946CC", VA = "0x12946CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0x12947F4", Offset = "0x12947F4", VA = "0x12947F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0x12946F8", Offset = "0x12946F8", VA = "0x12946F8")]
		private void DoCompare()
		{
		}

		[Token(Token = "0x60022BF")]
		[Address(RVA = "0x12947F8", Offset = "0x12947F8", VA = "0x12947F8", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60022C0")]
		[Address(RVA = "0x12948B0", Offset = "0x12948B0", VA = "0x12948B0")]
		public Vector3Compare()
		{
		}
	}
	[Token(Token = "0x20006D4")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Get a material at index on a gameObject and store it in a variable")]
	public class GetMaterial : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject the Material is applied to.")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the Material in the Materials array.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the material in a variable.")]
		[RequiredField]
		public FsmMaterial material;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Get the shared material of this object. NOTE: Modifying the shared material will change the appearance of all objects using this material, and change material settings that are stored in the project too.")]
		public bool getSharedMaterial;

		[Token(Token = "0x60022C1")]
		[Address(RVA = "0x12948B8", Offset = "0x12948B8", VA = "0x12948B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0x1294904", Offset = "0x1294904", VA = "0x1294904", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x1294920", Offset = "0x1294920", VA = "0x1294920")]
		private void DoGetMaterial()
		{
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0x1294BD4", Offset = "0x1294BD4", VA = "0x1294BD4")]
		public GetMaterial()
		{
		}
	}
	[Token(Token = "0x20006D5")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Get a texture from a material on a GameObject")]
	public class GetMaterialTexture : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The GameObject the Material is applied to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the Material in the Materials array.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.NamedTexture)]
		[Tooltip("The texture to get. See Unity Shader docs for names.")]
		public FsmString namedTexture;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Title("StoreTexture")]
		[Tooltip("Store the texture in a variable.")]
		public FsmTexture storedTexture;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Get the shared version of the texture.")]
		public bool getFromSharedMaterial;

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0x1294C1C", Offset = "0x1294C1C", VA = "0x1294C1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0x1294CB8", Offset = "0x1294CB8", VA = "0x1294CB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0x1294CD4", Offset = "0x1294CD4", VA = "0x1294CD4")]
		private void DoGetMaterialTexture()
		{
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0x1294FE8", Offset = "0x1294FE8", VA = "0x1294FE8")]
		public GetMaterialTexture()
		{
		}
	}
	[Token(Token = "0x20006D6")]
	[Tooltip("Sets the material on a Game Object.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetMaterial : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A Game Object with a Renderer component.")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("The material to apply.")]
		public FsmMaterial material;

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0x1295030", Offset = "0x1295030", VA = "0x1295030", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0x1295074", Offset = "0x1295074", VA = "0x1295074", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0x1295090", Offset = "0x1295090", VA = "0x1295090")]
		private void DoSetMaterial()
		{
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0x1295260", Offset = "0x1295260", VA = "0x1295260")]
		public SetMaterial()
		{
		}
	}
	[Token(Token = "0x20006D7")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets a named color value in a Game Object's material.\n\nNote: With URP and HDRP set NamedColor to _BaseColor instead of _Color")]
	public class SetMaterialColor : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The named color.\nNote: With URP and HDRP set NamedColor to _BaseColor instead of _Color.\nSee unity docs: <a href=\"https://docs.unity3d.com/ScriptReference/Material.SetColor.html\" rel=\"nofollow\">Material.SetColor</a>")]
		[UIHint(UIHint.NamedColor)]
		public FsmString namedColor;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set the parameter value.")]
		[RequiredField]
		public FsmColor color;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0x12952A8", Offset = "0x12952A8", VA = "0x12952A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0x129536C", Offset = "0x129536C", VA = "0x129536C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0x1295684", Offset = "0x1295684", VA = "0x1295684", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0x1295398", Offset = "0x1295398", VA = "0x1295398")]
		private void DoSetMaterialColor()
		{
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0x1295688", Offset = "0x1295688", VA = "0x1295688")]
		public SetMaterialColor()
		{
		}
	}
	[Token(Token = "0x20006D8")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets a named float in a game object's material.")]
	public class SetMaterialFloat : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4001F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("A named float parameter in the shader.")]
		public FsmString namedFloat;

		[Token(Token = "0x4001F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set the parameter value.")]
		[RequiredField]
		public FsmFloat floatValue;

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0x12956D0", Offset = "0x12956D0", VA = "0x12956D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0x1295788", Offset = "0x1295788", VA = "0x1295788", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0x1295A70", Offset = "0x1295A70", VA = "0x1295A70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0x12957B4", Offset = "0x12957B4", VA = "0x12957B4")]
		private void DoSetMaterialFloat()
		{
		}

		[Token(Token = "0x60022D6")]
		[Address(RVA = "0x1295A74", Offset = "0x1295A74", VA = "0x1295A74")]
		public SetMaterialFloat()
		{
		}
	}
	[Token(Token = "0x20006D9")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets a named texture in a game object's material.")]
	public class SetMaterialTexture : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("A named parameter in the shader. Common names include: _MainTex, _BumpMap, _Cube...")]
		[UIHint(UIHint.NamedTexture)]
		public FsmString namedTexture;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The texture to use.")]
		public FsmTexture texture;

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0x1295ABC", Offset = "0x1295ABC", VA = "0x1295ABC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022D8")]
		[Address(RVA = "0x1295B60", Offset = "0x1295B60", VA = "0x1295B60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022D9")]
		[Address(RVA = "0x1295B7C", Offset = "0x1295B7C", VA = "0x1295B7C")]
		private void DoSetMaterialTexture()
		{
		}

		[Token(Token = "0x60022DA")]
		[Address(RVA = "0x1295E68", Offset = "0x1295E68", VA = "0x1295E68")]
		public SetMaterialTexture()
		{
		}
	}
	[Token(Token = "0x20006DA")]
	[Tooltip("Sets the value of a Material Variable.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetMaterialValue : FsmStateAction
	{
		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Material Variable.")]
		[RequiredField]
		public FsmMaterial materialVariable;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Material Value.")]
		public FsmMaterial materialValue;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0x1295EB0", Offset = "0x1295EB0", VA = "0x1295EB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0x1295EE0", Offset = "0x1295EE0", VA = "0x1295EE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0x1295F40", Offset = "0x1295F40", VA = "0x1295F40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0x1295F78", Offset = "0x1295F78", VA = "0x1295F78")]
		public SetMaterialValue()
		{
		}
	}
	[Token(Token = "0x20006DB")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets a Game Object's material randomly from an array of Materials.")]
	public class SetRandomMaterial : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Array of materials to randomly select from.")]
		public FsmMaterial[] materials;

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0x1295F80", Offset = "0x1295F80", VA = "0x1295F80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022E0")]
		[Address(RVA = "0x1296004", Offset = "0x1296004", VA = "0x1296004", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022E1")]
		[Address(RVA = "0x1296020", Offset = "0x1296020", VA = "0x1296020")]
		private void DoSetRandomMaterial()
		{
		}

		[Token(Token = "0x60022E2")]
		[Address(RVA = "0x12962D4", Offset = "0x12962D4", VA = "0x12962D4")]
		public SetRandomMaterial()
		{
		}
	}
	[Token(Token = "0x20006DC")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets the Offset of a named texture in a Game Object's Material. Useful for scrolling texture effects.")]
	public class SetTextureOffset : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The target Game Object.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.NamedColor)]
		[Tooltip("The named texture. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Material.SetTextureOffset.html\" rel=\"nofollow\">SetTextureOffset</a>")]
		[RequiredField]
		public FsmString namedTexture;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The amount to offset in X axis. 1 = full width of texture.")]
		[RequiredField]
		public FsmFloat offsetX;

		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The amount to offset in Y axis. 1 = full height of texture.")]
		[RequiredField]
		public FsmFloat offsetY;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60022E3")]
		[Address(RVA = "0x129631C", Offset = "0x129631C", VA = "0x129631C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022E4")]
		[Address(RVA = "0x12963E0", Offset = "0x12963E0", VA = "0x12963E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022E5")]
		[Address(RVA = "0x12966C4", Offset = "0x12966C4", VA = "0x12966C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0x129640C", Offset = "0x129640C", VA = "0x129640C")]
		private void DoSetTextureOffset()
		{
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0x12966C8", Offset = "0x12966C8", VA = "0x12966C8")]
		public SetTextureOffset()
		{
		}
	}
	[Token(Token = "0x20006DD")]
	[Tooltip("Sets the Scale of a named texture in a Game Object's Material. Useful for special effects.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetTextureScale : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Renderer))]
		[RequiredField]
		[Tooltip("The target Game Object.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The index of the material on the object.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.NamedColor)]
		[Tooltip("The named texture. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Material.SetTextureScale.html\" rel=\"nofollow\">SetTextureScale</a>")]
		public FsmString namedTexture;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Scale in X axis. 2 = double the texture's width.")]
		[RequiredField]
		public FsmFloat scaleX;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("Scale in Y axis. 2 = double the texture's height.")]
		public FsmFloat scaleY;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60022E8")]
		[Address(RVA = "0x1296710", Offset = "0x1296710", VA = "0x1296710", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022E9")]
		[Address(RVA = "0x12967E0", Offset = "0x12967E0", VA = "0x12967E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022EA")]
		[Address(RVA = "0x1296AC4", Offset = "0x1296AC4", VA = "0x1296AC4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022EB")]
		[Address(RVA = "0x129680C", Offset = "0x129680C", VA = "0x129680C")]
		private void DoSetTextureScale()
		{
		}

		[Token(Token = "0x60022EC")]
		[Address(RVA = "0x1296AC8", Offset = "0x1296AC8", VA = "0x1296AC8")]
		public SetTextureScale()
		{
		}
	}
	[Token(Token = "0x20006DE")]
	[Tooltip("Sets the value of a Texture Variable.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetTextureValue : FsmStateAction
	{
		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Texture Variable.")]
		public FsmTexture textureVariable;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Texture Value.")]
		public FsmTexture textureValue;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60022ED")]
		[Address(RVA = "0x1296B10", Offset = "0x1296B10", VA = "0x1296B10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022EE")]
		[Address(RVA = "0x1296B40", Offset = "0x1296B40", VA = "0x1296B40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022EF")]
		[Address(RVA = "0x1296BA0", Offset = "0x1296BA0", VA = "0x1296BA0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022F0")]
		[Address(RVA = "0x1296BD8", Offset = "0x1296BD8", VA = "0x1296BD8")]
		public SetTextureValue()
		{
		}
	}
	[Token(Token = "0x20006DF")]
	[Tooltip("Sets the visibility of a GameObject. Note: this action sets the GameObject Renderer's enabled state.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetVisibility : ComponentAction<Renderer>
	{
		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The GameObject to effect. Note: Needs a Renderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Should the object visibility be toggled?\nHas priority over the 'visible' setting")]
		public FsmBool toggle;

		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Should the object be set to visible or invisible?")]
		public FsmBool visible;

		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Resets to the initial visibility when it leaves the state")]
		public bool resetOnExit;

		[Token(Token = "0x4001F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool initialVisibility;

		[Token(Token = "0x60022F1")]
		[Address(RVA = "0x1296BE0", Offset = "0x1296BE0", VA = "0x1296BE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022F2")]
		[Address(RVA = "0x1296C3C", Offset = "0x1296C3C", VA = "0x1296C3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022F3")]
		[Address(RVA = "0x1296C78", Offset = "0x1296C78", VA = "0x1296C78")]
		private void DoSetVisibility(GameObject go)
		{
		}

		[Token(Token = "0x60022F4")]
		[Address(RVA = "0x1296D90", Offset = "0x1296D90", VA = "0x1296D90", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0x1296DA0", Offset = "0x1296DA0", VA = "0x1296DA0")]
		private void ResetVisibility()
		{
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0x1296E60", Offset = "0x1296E60", VA = "0x1296E60")]
		public SetVisibility()
		{
		}
	}
	[Token(Token = "0x20006E0")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Flips the value of a Bool Variable. True becomes False, False becomes True.")]
	public class BoolFlip : FsmStateAction
	{
		[Token(Token = "0x4001F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Bool variable to flip. True becomes False, False becomes True.")]
		public FsmBool boolVariable;

		[Token(Token = "0x4001F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool everyFrame;

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0x1296EA8", Offset = "0x1296EA8", VA = "0x1296EA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022F8")]
		[Address(RVA = "0x1296EB4", Offset = "0x1296EB4", VA = "0x1296EB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022F9")]
		[Address(RVA = "0x1296F0C", Offset = "0x1296F0C", VA = "0x1296F0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0x1296F3C", Offset = "0x1296F3C", VA = "0x1296F3C")]
		public BoolFlip()
		{
		}
	}
	[Token(Token = "0x20006E1")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Sets a Float variable to its absolute value.")]
	public class FloatAbs : FsmStateAction
	{
		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the Float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60022FB")]
		[Address(RVA = "0x1296F44", Offset = "0x1296F44", VA = "0x1296F44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60022FC")]
		[Address(RVA = "0x1296F68", Offset = "0x1296F68", VA = "0x1296F68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0x1296FC0", Offset = "0x1296FC0", VA = "0x1296FC0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0x1296F94", Offset = "0x1296F94", VA = "0x1296F94")]
		private void DoFloatAbs()
		{
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0x1296FC4", Offset = "0x1296FC4", VA = "0x1296FC4")]
		public FloatAbs()
		{
		}
	}
	[Token(Token = "0x20006E2")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Adds a value to a Float Variable.")]
	public class FloatAdd : FsmStateAction
	{
		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Float variable to add to.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Amount to add.")]
		[RequiredField]
		public FsmFloat add;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Used with Every Frame. Adds the value over one second to make the operation frame rate independent.")]
		public bool perSecond;

		[Token(Token = "0x6002300")]
		[Address(RVA = "0x1296FCC", Offset = "0x1296FCC", VA = "0x1296FCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002301")]
		[Address(RVA = "0x1296FFC", Offset = "0x1296FFC", VA = "0x1296FFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002302")]
		[Address(RVA = "0x1297094", Offset = "0x1297094", VA = "0x1297094", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002303")]
		[Address(RVA = "0x1297028", Offset = "0x1297028", VA = "0x1297028")]
		private void DoFloatAdd()
		{
		}

		[Token(Token = "0x6002304")]
		[Address(RVA = "0x1297098", Offset = "0x1297098", VA = "0x1297098")]
		public FloatAdd()
		{
		}
	}
	[Token(Token = "0x20006E3")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Adds multiple float variables to float variable.")]
	public class FloatAddMultiple : FsmStateAction
	{
		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variables to add.")]
		public FsmFloat[] floatVariables;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Add to this variable.")]
		[RequiredField]
		public FsmFloat addTo;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6002305")]
		[Address(RVA = "0x12970A0", Offset = "0x12970A0", VA = "0x12970A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002306")]
		[Address(RVA = "0x12970D0", Offset = "0x12970D0", VA = "0x12970D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002307")]
		[Address(RVA = "0x1297190", Offset = "0x1297190", VA = "0x1297190", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002308")]
		[Address(RVA = "0x12970FC", Offset = "0x12970FC", VA = "0x12970FC")]
		private void DoFloatAdd()
		{
		}

		[Token(Token = "0x6002309")]
		[Address(RVA = "0x1297194", Offset = "0x1297194", VA = "0x1297194")]
		public FloatAddMultiple()
		{
		}
	}
	[Token(Token = "0x20006E4")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Clamps the value of Float Variable to a Min/Max range.")]
	public class FloatClamp : FsmStateAction
	{
		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Float variable to clamp.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The minimum value allowed.")]
		public FsmFloat minValue;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum value allowed.")]
		[RequiredField]
		public FsmFloat maxValue;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x600230A")]
		[Address(RVA = "0x129719C", Offset = "0x129719C", VA = "0x129719C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600230B")]
		[Address(RVA = "0x12971DC", Offset = "0x12971DC", VA = "0x12971DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600230C")]
		[Address(RVA = "0x129727C", Offset = "0x129727C", VA = "0x129727C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600230D")]
		[Address(RVA = "0x1297208", Offset = "0x1297208", VA = "0x1297208")]
		private void DoClamp()
		{
		}

		[Token(Token = "0x600230E")]
		[Address(RVA = "0x1297280", Offset = "0x1297280", VA = "0x1297280")]
		public FloatClamp()
		{
		}
	}
	[Token(Token = "0x20006E5")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Gets the shortest angle between two angles.")]
	public class FloatDeltaAngle : FsmStateAction
	{
		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("First angle in degrees.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat fromAngle;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Second Angle in degrees.")]
		[RequiredField]
		public FsmFloat toAngle;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the shortest angle between the two angles. This takes account wrapping around 360.")]
		public FsmFloat deltaAngle;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the angles are changing.")]
		public bool everyFrame;

		[Token(Token = "0x600230F")]
		[Address(RVA = "0x1297288", Offset = "0x1297288", VA = "0x1297288", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002310")]
		[Address(RVA = "0x12972C8", Offset = "0x12972C8", VA = "0x12972C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002311")]
		[Address(RVA = "0x1297390", Offset = "0x1297390", VA = "0x1297390", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002312")]
		[Address(RVA = "0x12972F4", Offset = "0x12972F4", VA = "0x12972F4")]
		private void DoDeltaAngle()
		{
		}

		[Token(Token = "0x6002313")]
		[Address(RVA = "0x1297394", Offset = "0x1297394", VA = "0x1297394")]
		public FloatDeltaAngle()
		{
		}
	}
	[Token(Token = "0x20006E6")]
	[Tooltip("Divides one Float by another.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatDivide : FsmStateAction
	{
		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to divide.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Divide the float variable by this value.")]
		public FsmFloat divideBy;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002314")]
		[Address(RVA = "0x129739C", Offset = "0x129739C", VA = "0x129739C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002315")]
		[Address(RVA = "0x12973CC", Offset = "0x12973CC", VA = "0x12973CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002316")]
		[Address(RVA = "0x1297440", Offset = "0x1297440", VA = "0x1297440", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002317")]
		[Address(RVA = "0x1297494", Offset = "0x1297494", VA = "0x1297494")]
		public FloatDivide()
		{
		}
	}
	[Token(Token = "0x20006E7")]
	[Tooltip("Interpolates between 2 Float values over a specified Time.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatInterpolate : FsmStateAction
	{
		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Interpolation mode: Linear or EaseInOut.")]
		public InterpolationType mode;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Interpolate from this value.")]
		public FsmFloat fromFloat;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Interpolate to this value.")]
		public FsmFloat toFloat;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Interpolate over this amount of time in seconds.")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current value in a float variable.")]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the interpolation is finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale. Useful if the game is paused (Time scaled to 0).")]
		public bool realTime;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x6002318")]
		[Address(RVA = "0x129749C", Offset = "0x129749C", VA = "0x129749C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002319")]
		[Address(RVA = "0x129750C", Offset = "0x129750C", VA = "0x129750C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600231A")]
		[Address(RVA = "0x1297568", Offset = "0x1297568", VA = "0x1297568", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600231B")]
		[Address(RVA = "0x12976E0", Offset = "0x12976E0", VA = "0x12976E0")]
		public FloatInterpolate()
		{
		}
	}
	[Token(Token = "0x20006E8")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Multiplies one Float by another.")]
	public class FloatMultiply : FsmStateAction
	{
		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The float variable to multiply.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Multiply the float variable by this value.")]
		[RequiredField]
		public FsmFloat multiplyBy;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x600231C")]
		[Address(RVA = "0x12976E8", Offset = "0x12976E8", VA = "0x12976E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600231D")]
		[Address(RVA = "0x1297718", Offset = "0x1297718", VA = "0x1297718", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0x129778C", Offset = "0x129778C", VA = "0x129778C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600231F")]
		[Address(RVA = "0x12977E0", Offset = "0x12977E0", VA = "0x12977E0")]
		public FloatMultiply()
		{
		}
	}
	[Token(Token = "0x20006E9")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Performs math operations on 2 Floats: Add, Subtract, Multiply, Divide, Min, Max.")]
	public class FloatOperator : FsmStateAction
	{
		[Token(Token = "0x20006EA")]
		public enum Operation
		{
			[Token(Token = "0x4001FA1")]
			Add,
			[Token(Token = "0x4001FA2")]
			Subtract,
			[Token(Token = "0x4001FA3")]
			Multiply,
			[Token(Token = "0x4001FA4")]
			Divide,
			[Token(Token = "0x4001FA5")]
			Min,
			[Token(Token = "0x4001FA6")]
			Max,
			[Token(Token = "0x4001FA7")]
			Modulus
		}

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first float.")]
		[RequiredField]
		public FsmFloat float1;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second float.")]
		[RequiredField]
		public FsmFloat float2;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The math operation to perform on the floats.")]
		public Operation operation;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Store the result of the operation in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeResult;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002320")]
		[Address(RVA = "0x12977E8", Offset = "0x12977E8", VA = "0x12977E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002321")]
		[Address(RVA = "0x129782C", Offset = "0x129782C", VA = "0x129782C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002322")]
		[Address(RVA = "0x129793C", Offset = "0x129793C", VA = "0x129793C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002323")]
		[Address(RVA = "0x1297858", Offset = "0x1297858", VA = "0x1297858")]
		private void DoFloatOperator()
		{
		}

		[Token(Token = "0x6002324")]
		[Address(RVA = "0x1297940", Offset = "0x1297940", VA = "0x1297940")]
		public FloatOperator()
		{
		}
	}
	[Token(Token = "0x20006EB")]
	[Tooltip("Subtracts a value from a Float Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class FloatSubtract : FsmStateAction
	{
		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The float variable to subtract from.")]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Value to subtract from the float variable.")]
		[RequiredField]
		public FsmFloat subtract;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Used with Every Frame. Adds the value over one second to make the operation frame rate independent.")]
		public bool perSecond;

		[Token(Token = "0x6002325")]
		[Address(RVA = "0x1297948", Offset = "0x1297948", VA = "0x1297948", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002326")]
		[Address(RVA = "0x1297978", Offset = "0x1297978", VA = "0x1297978", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0x1297A10", Offset = "0x1297A10", VA = "0x1297A10", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0x12979A4", Offset = "0x12979A4", VA = "0x12979A4")]
		private void DoFloatSubtract()
		{
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0x1297A14", Offset = "0x1297A14", VA = "0x1297A14")]
		public FloatSubtract()
		{
		}
	}
	[Token(Token = "0x20006EC")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Wraps the value of Float Variable so it stays in a Min/Max range.\n\nExamples:\nWrap 120 between 0 and 100 -> 20\nWrap -10 between 0 and 100 -> 90")]
	public class FloatWrap : FsmStateAction
	{
		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Float variable to wrap.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The minimum value allowed.")]
		[RequiredField]
		public FsmFloat minValue;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum value allowed.")]
		[RequiredField]
		public FsmFloat maxValue;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the float variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x600232A")]
		[Address(RVA = "0x1297A1C", Offset = "0x1297A1C", VA = "0x1297A1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0x1297A5C", Offset = "0x1297A5C", VA = "0x1297A5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0x1297B20", Offset = "0x1297B20", VA = "0x1297B20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600232D")]
		[Address(RVA = "0x1297A88", Offset = "0x1297A88", VA = "0x1297A88")]
		private void DoWrap()
		{
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0x1297B24", Offset = "0x1297B24", VA = "0x1297B24")]
		public FloatWrap()
		{
		}
	}
	[Token(Token = "0x20006ED")]
	[Tooltip("Adds a value to an Integer Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class IntAdd : FsmStateAction
	{
		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to add to.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to add.")]
		[RequiredField]
		public FsmInt add;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. NOTE: This operation will NOT be frame rate independent!")]
		public bool everyFrame;

		[Token(Token = "0x600232F")]
		[Address(RVA = "0x1297B2C", Offset = "0x1297B2C", VA = "0x1297B2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0x1297B5C", Offset = "0x1297B5C", VA = "0x1297B5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0x1297BC8", Offset = "0x1297BC8", VA = "0x1297BC8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0x1297C18", Offset = "0x1297C18", VA = "0x1297C18")]
		public IntAdd()
		{
		}
	}
	[Token(Token = "0x20006EE")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Clamp the value of an Integer Variable to a Min/Max range.")]
	public class IntClamp : FsmStateAction
	{
		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to clamp.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Minimum allowed value.")]
		[RequiredField]
		public FsmInt minValue;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Maximum allowed value.")]
		[RequiredField]
		public FsmInt maxValue;

		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Perform this action every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002333")]
		[Address(RVA = "0x1297C20", Offset = "0x1297C20", VA = "0x1297C20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0x1297C60", Offset = "0x1297C60", VA = "0x1297C60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002335")]
		[Address(RVA = "0x1297D00", Offset = "0x1297D00", VA = "0x1297D00", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002336")]
		[Address(RVA = "0x1297C8C", Offset = "0x1297C8C", VA = "0x1297C8C")]
		private void DoClamp()
		{
		}

		[Token(Token = "0x6002337")]
		[Address(RVA = "0x1297D04", Offset = "0x1297D04", VA = "0x1297D04")]
		public IntClamp()
		{
		}
	}
	[Token(Token = "0x20006EF")]
	[Tooltip("Performs math operation on 2 Integers: Add, Subtract, Multiply, Divide, Min, Max.")]
	[ActionCategory(ActionCategory.Math)]
	public class IntOperator : FsmStateAction
	{
		[Token(Token = "0x20006F0")]
		public enum Operation
		{
			[Token(Token = "0x4001FBD")]
			Add,
			[Token(Token = "0x4001FBE")]
			Subtract,
			[Token(Token = "0x4001FBF")]
			Multiply,
			[Token(Token = "0x4001FC0")]
			Divide,
			[Token(Token = "0x4001FC1")]
			Min,
			[Token(Token = "0x4001FC2")]
			Max
		}

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first integer.")]
		[RequiredField]
		public FsmInt integer1;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second integer.")]
		[RequiredField]
		public FsmInt integer2;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The operation to perform on the 2 integers.")]
		public Operation operation;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an Integer Variable.")]
		public FsmInt storeResult;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Perform this action every frame. Useful if you're using variables that are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002338")]
		[Address(RVA = "0x1297D0C", Offset = "0x1297D0C", VA = "0x1297D0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002339")]
		[Address(RVA = "0x1297D50", Offset = "0x1297D50", VA = "0x1297D50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0x1297E4C", Offset = "0x1297E4C", VA = "0x1297E4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0x1297D7C", Offset = "0x1297D7C", VA = "0x1297D7C")]
		private void DoIntOperator()
		{
		}

		[Token(Token = "0x600233C")]
		[Address(RVA = "0x1297E50", Offset = "0x1297E50", VA = "0x1297E50")]
		public IntOperator()
		{
		}
	}
	[Token(Token = "0x20006F1")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Subtracts a value to an Integer Variable.")]
	public class IntSubtract : FsmStateAction
	{
		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The int variable to subtract from.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Value to subtract from the int variable.")]
		[RequiredField]
		public FsmInt subtract;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Used with Every Frame. Subtracts the value over one second to make the operation frame rate independent.")]
		public bool perSecond;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _acc;

		[Token(Token = "0x600233D")]
		[Address(RVA = "0x1297E58", Offset = "0x1297E58", VA = "0x1297E58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0x1297E88", Offset = "0x1297E88", VA = "0x1297E88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0x1297F9C", Offset = "0x1297F9C", VA = "0x1297F9C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0x1297EB4", Offset = "0x1297EB4", VA = "0x1297EB4")]
		private void doSubtract()
		{
		}

		[Token(Token = "0x6002341")]
		[Address(RVA = "0x1297FA0", Offset = "0x1297FA0", VA = "0x1297FA0")]
		public IntSubtract()
		{
		}
	}
	[Token(Token = "0x20006F2")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Wraps the value of Int Variable so it stays in a Min/Max range.\n\nExamples:\nWrap 120 between 0 and 100 -> 20\nWrap -10 between 0 and 100 -> 90")]
	public class IntWrap : FsmStateAction
	{
		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Int variable to wrap.")]
		public FsmInt intVariable;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The minimum value allowed.")]
		public FsmInt minValue;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum value allowed.")]
		[RequiredField]
		public FsmInt maxValue;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the int variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002342")]
		[Address(RVA = "0x1297FA8", Offset = "0x1297FA8", VA = "0x1297FA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0x1297FE8", Offset = "0x1297FE8", VA = "0x1297FE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0x12980B0", Offset = "0x12980B0", VA = "0x12980B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0x1298014", Offset = "0x1298014", VA = "0x1298014")]
		private void DoWrap()
		{
		}

		[Token(Token = "0x6002346")]
		[Address(RVA = "0x12980B4", Offset = "0x12980B4", VA = "0x12980B4")]
		public IntWrap()
		{
		}
	}
	[Token(Token = "0x20006F3")]
	[Tooltip("Sets a Bool Variable to True or False randomly.")]
	[ActionCategory(ActionCategory.Math)]
	public class RandomBool : FsmStateAction
	{
		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the result in a bool variable. Hint: Use a {{Bool Test}} action to branch based on this \"coin toss\"")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6002347")]
		[Address(RVA = "0x12980BC", Offset = "0x12980BC", VA = "0x12980BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0x12980C8", Offset = "0x12980C8", VA = "0x12980C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002349")]
		[Address(RVA = "0x1298110", Offset = "0x1298110", VA = "0x1298110")]
		public RandomBool()
		{
		}
	}
	[Token(Token = "0x20006F4")]
	[Tooltip("Sets a Float Variable to a random value between Min/Max.")]
	[ActionCategory(ActionCategory.Math)]
	public class RandomFloat : FsmStateAction
	{
		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Minimum value for the random number.")]
		[RequiredField]
		public FsmFloat min;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Maximum value for the random number.")]
		[RequiredField]
		public FsmFloat max;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Float variable.")]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x600234A")]
		[Address(RVA = "0x1298118", Offset = "0x1298118", VA = "0x1298118", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600234B")]
		[Address(RVA = "0x129816C", Offset = "0x129816C", VA = "0x129816C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600234C")]
		[Address(RVA = "0x12981D8", Offset = "0x12981D8", VA = "0x12981D8")]
		public RandomFloat()
		{
		}
	}
	[Token(Token = "0x20006F5")]
	[Tooltip("Sets an Integer Variable to a random value between Min/Max.")]
	[ActionCategory(ActionCategory.Math)]
	public class RandomInt : FsmStateAction
	{
		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Minimum value for the random number.")]
		[RequiredField]
		public FsmInt min;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Maximum value for the random number.")]
		[RequiredField]
		public FsmInt max;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in an Integer variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmInt storeResult;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Should the Max value be included in the possible results?")]
		public bool inclusiveMax;

		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Don't repeat the same value twice.")]
		public FsmBool noRepeat;

		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int randomIndex;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int lastIndex;

		[Token(Token = "0x600234D")]
		[Address(RVA = "0x12981E0", Offset = "0x12981E0", VA = "0x12981E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600234E")]
		[Address(RVA = "0x1298254", Offset = "0x1298254", VA = "0x1298254", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600234F")]
		[Address(RVA = "0x1298270", Offset = "0x1298270", VA = "0x1298270")]
		private void PickRandom()
		{
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0x12983FC", Offset = "0x12983FC", VA = "0x12983FC")]
		public RandomInt()
		{
		}
	}
	[Token(Token = "0x20006F6")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Gets the value of a curve at a given time and stores it in a Float Variable. NOTE: This can be used for more than just animation! It's a general way to transform an input number into an output number using a curve (e.g., linear input -> bell curve).")]
	public class SampleCurve : FsmStateAction
	{
		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Click to edit the curve.")]
		[RequiredField]
		public FsmAnimationCurve curve;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Sample the curve at this point.")]
		public FsmFloat sampleAt;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the sampled value in a float variable.")]
		[RequiredField]
		public FsmFloat storeValue;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Do it every frame. Useful if Sample At is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002351")]
		[Address(RVA = "0x129840C", Offset = "0x129840C", VA = "0x129840C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002352")]
		[Address(RVA = "0x129844C", Offset = "0x129844C", VA = "0x129844C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002353")]
		[Address(RVA = "0x12984C8", Offset = "0x12984C8", VA = "0x12984C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002354")]
		[Address(RVA = "0x1298478", Offset = "0x1298478", VA = "0x1298478")]
		private void DoSampleCurve()
		{
		}

		[Token(Token = "0x6002355")]
		[Address(RVA = "0x12984CC", Offset = "0x12984CC", VA = "0x12984CC")]
		public SampleCurve()
		{
		}
	}
	[Token(Token = "0x20006F7")]
	[Tooltip("Select a random float from an array of floats.")]
	[ActionCategory(ActionCategory.Math)]
	public class SelectRandomFloat : FsmStateAction
	{
		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Floats", "Float", "Weight")]
		[Tooltip("A possible float choice.")]
		public FsmFloat[] floats;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this float being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the selected float in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeFloat;

		[Token(Token = "0x6002356")]
		[Address(RVA = "0x12984D4", Offset = "0x12984D4", VA = "0x12984D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002357")]
		[Address(RVA = "0x129863C", Offset = "0x129863C", VA = "0x129863C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002358")]
		[Address(RVA = "0x1298658", Offset = "0x1298658", VA = "0x1298658")]
		private void DoSelectRandomString()
		{
		}

		[Token(Token = "0x6002359")]
		[Address(RVA = "0x12986D0", Offset = "0x12986D0", VA = "0x12986D0")]
		public SelectRandomFloat()
		{
		}
	}
	[Token(Token = "0x20006F8")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Select a random Int from an array of Ints.")]
	public class SelectRandomInt : FsmStateAction
	{
		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Ints", "Int", "Weight")]
		[Tooltip("A possible int choice.")]
		public FsmInt[] ints;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this int being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the selected int in an Int Variable.")]
		public FsmInt storeInt;

		[Token(Token = "0x600235A")]
		[Address(RVA = "0x12986D8", Offset = "0x12986D8", VA = "0x12986D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600235B")]
		[Address(RVA = "0x129885C", Offset = "0x129885C", VA = "0x129885C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600235C")]
		[Address(RVA = "0x1298878", Offset = "0x1298878", VA = "0x1298878")]
		private void DoSelectRandomString()
		{
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0x12988F0", Offset = "0x12988F0", VA = "0x12988F0")]
		public SelectRandomInt()
		{
		}
	}
	[Token(Token = "0x20006F9")]
	[Tooltip("Sets the value of a Bool Variable.")]
	[ActionCategory(ActionCategory.Math)]
	public class SetBoolValue : FsmStateAction
	{
		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Bool Variable to set.")]
		[UIHint(UIHint.Variable)]
		public FsmBool boolVariable;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Value to set it to: Check to set to True, Uncheck to set to False.")]
		public FsmBool boolValue;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600235E")]
		[Address(RVA = "0x12988F8", Offset = "0x12988F8", VA = "0x12988F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0x1298928", Offset = "0x1298928", VA = "0x1298928", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002360")]
		[Address(RVA = "0x1298980", Offset = "0x1298980", VA = "0x1298980", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002361")]
		[Address(RVA = "0x12989B4", Offset = "0x12989B4", VA = "0x12989B4")]
		public SetBoolValue()
		{
		}
	}
	[Token(Token = "0x20006FA")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Sets the value of a Float Variable.")]
	public class SetFloatValue : FsmStateAction
	{
		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Variable to set.")]
		public FsmFloat floatVariable;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Value to set it to.")]
		public FsmFloat floatValue;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Perform this action every frame. Useful if the Value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002362")]
		[Address(RVA = "0x12989BC", Offset = "0x12989BC", VA = "0x12989BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002363")]
		[Address(RVA = "0x12989EC", Offset = "0x12989EC", VA = "0x12989EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0x1298A40", Offset = "0x1298A40", VA = "0x1298A40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002365")]
		[Address(RVA = "0x1298A70", Offset = "0x1298A70", VA = "0x1298A70")]
		public SetFloatValue()
		{
		}
	}
	[Token(Token = "0x20006FB")]
	[Tooltip("Sets the value of an integer variable using a float value.")]
	[ActionCategory(ActionCategory.Math)]
	public class SetIntFromFloat : FsmStateAction
	{
		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The int variable to set.")]
		[RequiredField]
		public FsmInt intVariable;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The float value.")]
		public FsmFloat floatValue;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Do it every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002366")]
		[Address(RVA = "0x1298A78", Offset = "0x1298A78", VA = "0x1298A78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002367")]
		[Address(RVA = "0x1298AA8", Offset = "0x1298AA8", VA = "0x1298AA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002368")]
		[Address(RVA = "0x1298B14", Offset = "0x1298B14", VA = "0x1298B14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002369")]
		[Address(RVA = "0x1298B5C", Offset = "0x1298B5C", VA = "0x1298B5C")]
		public SetIntFromFloat()
		{
		}
	}
	[Token(Token = "0x20006FC")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Sets the value of an Integer Variable.")]
	public class SetIntValue : FsmStateAction
	{
		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Int Variable to Set")]
		public FsmInt intVariable;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Int Value")]
		public FsmInt intValue;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600236A")]
		[Address(RVA = "0x1298B64", Offset = "0x1298B64", VA = "0x1298B64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600236B")]
		[Address(RVA = "0x1298B94", Offset = "0x1298B94", VA = "0x1298B94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600236C")]
		[Address(RVA = "0x1298BE8", Offset = "0x1298BE8", VA = "0x1298BE8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600236D")]
		[Address(RVA = "0x1298C18", Offset = "0x1298C18", VA = "0x1298C18")]
		public SetIntValue()
		{
		}
	}
	[Token(Token = "0x20006FD")]
	[Tooltip("Sets a Vector2 Variable to a random value.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2RandomValue : FsmStateAction
	{
		[Token(Token = "0x20006FE")]
		public enum Option
		{
			[Token(Token = "0x4001FF7")]
			Circle,
			[Token(Token = "0x4001FF8")]
			Rectangle,
			[Token(Token = "0x4001FF9")]
			InArc,
			[Token(Token = "0x4001FFA")]
			AtAngles
		}

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool showPreview;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[PreviewField("DrawPreview")]
		[Tooltip("Controls the distribution of the random Vector2 values.")]
		public Option shape;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The minimum length for the random Vector2 value.")]
		public FsmFloat minLength;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum length for the random Vector2 value.")]
		public FsmFloat maxLength;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Context sensitive parameter. Depends on the Shape.")]
		public FsmFloat floatParam1;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Context sensitive parameter. Depends on the Shape.")]
		public FsmFloat floatParam2;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Scale the vector in Y (e.g., to squash a circle into an oval)")]
		public FsmFloat yScale;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the result in a Vector2 variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector2 storeResult;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector2 v2;

		[Token(Token = "0x600236E")]
		[Address(RVA = "0x1298C20", Offset = "0x1298C20", VA = "0x1298C20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0x1298CC0", Offset = "0x1298CC0", VA = "0x1298CC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002370")]
		[Address(RVA = "0x1298CF0", Offset = "0x1298CF0", VA = "0x1298CF0")]
		private void DoRandomVector2()
		{
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0x1299078", Offset = "0x1299078", VA = "0x1299078")]
		public Vector2RandomValue()
		{
		}
	}
	[Token(Token = "0x20006FF")]
	[Tooltip("Math expression action. Enter the expression using variable names and common math syntax. Uses Mathos parser.")]
	[ActionCategory(ActionCategory.Math)]
	public class MathExpression : FsmStateAction
	{
		[Token(Token = "0x2000700")]
		public class Property
		{
			[Token(Token = "0x4002003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string path;

			[Token(Token = "0x6002379")]
			[Address(RVA = "0x1299E04", Offset = "0x1299E04", VA = "0x1299E04")]
			public Property()
			{
			}
		}

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Expression to evaluate. Accepts float, int, and bool variable names. Also: Time.deltaTime, ")]
		[UIHint(UIHint.TextArea)]
		public FsmString expression;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a float variable")]
		public FsmFloat storeResultAsFloat;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in an int variable")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeResultAsInt;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MathParser parser;

		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string cachedExpression;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ReadOnlyCollection<string> tokens;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly List<NamedVariable> usedVariables;

		[Token(Token = "0x6002372")]
		[Address(RVA = "0x1299080", Offset = "0x1299080", VA = "0x1299080", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0x1299140", Offset = "0x1299140", VA = "0x1299140", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002374")]
		[Address(RVA = "0x1299230", Offset = "0x1299230", VA = "0x1299230", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0x129916C", Offset = "0x129916C", VA = "0x129916C")]
		private void DoMathExpression()
		{
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0x12992B8", Offset = "0x12992B8", VA = "0x12992B8")]
		public double ParseExpression()
		{
			return default(double);
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0x1299788", Offset = "0x1299788", VA = "0x1299788")]
		private void BuildAndCacheExpression()
		{
		}

		[Token(Token = "0x6002378")]
		[Address(RVA = "0x1299D7C", Offset = "0x1299D7C", VA = "0x1299D7C")]
		public MathExpression()
		{
		}
	}
	[Token(Token = "0x2000701")]
	[Tooltip("Gets the number of vertices in a GameObject's mesh. Useful in conjunction with GetVertexPosition.")]
	[ActionCategory("Mesh")]
	public class GetVertexCount : FsmStateAction
	{
		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(MeshFilter))]
		[Tooltip("The GameObject to check.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the vertex count in a variable.")]
		public FsmInt storeCount;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600237A")]
		[Address(RVA = "0x1299E0C", Offset = "0x1299E0C", VA = "0x1299E0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600237B")]
		[Address(RVA = "0x1299E3C", Offset = "0x1299E3C", VA = "0x1299E3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600237C")]
		[Address(RVA = "0x1299F90", Offset = "0x1299F90", VA = "0x1299F90", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600237D")]
		[Address(RVA = "0x1299E68", Offset = "0x1299E68", VA = "0x1299E68")]
		private void DoGetVertexCount()
		{
		}

		[Token(Token = "0x600237E")]
		[Address(RVA = "0x1299F94", Offset = "0x1299F94", VA = "0x1299F94")]
		public GetVertexCount()
		{
		}
	}
	[Token(Token = "0x2000702")]
	[Tooltip("Gets the position of a vertex in a GameObject's mesh. Hint: Use GetVertexCount to get the number of vertices in a mesh.")]
	[ActionCategory("Mesh")]
	public class GetVertexPosition : FsmStateAction
	{
		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(MeshFilter))]
		[Tooltip("The GameObject to check.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The index of the vertex.")]
		public FsmInt vertexIndex;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Coordinate system to use.")]
		public Space space;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the vertex position in a variable.")]
		public FsmVector3 storePosition;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the mesh is animated.")]
		public bool everyFrame;

		[Token(Token = "0x600237F")]
		[Address(RVA = "0x1299F9C", Offset = "0x1299F9C", VA = "0x1299F9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002380")]
		[Address(RVA = "0x1299FD0", Offset = "0x1299FD0", VA = "0x1299FD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002381")]
		[Address(RVA = "0x129A220", Offset = "0x129A220", VA = "0x129A220", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002382")]
		[Address(RVA = "0x1299FFC", Offset = "0x1299FFC", VA = "0x1299FFC")]
		private void DoGetVertexPosition()
		{
		}

		[Token(Token = "0x6002383")]
		[Address(RVA = "0x129A224", Offset = "0x129A224", VA = "0x129A224")]
		public GetVertexPosition()
		{
		}
	}
	[Token(Token = "0x2000703")]
	[Tooltip("Applies a force to a Game Object that simulates explosion effects. The explosion force will fall off linearly with distance. Hint: Use the Explosion Action instead to apply an explosion force to all objects in a blast radius.")]
	[ActionCategory(ActionCategory.Physics)]
	public class AddExplosionForce : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to add the explosion force to.")]
		[CheckForComponent(typeof(Rigidbody))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The center of the explosion. Hint: this is often the position returned from a GetCollisionInfo action.")]
		[RequiredField]
		public FsmVector3 center;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The strength of the explosion.")]
		[RequiredField]
		public FsmFloat force;

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("The radius of the explosion. Force falls off linearly with distance.")]
		public FsmFloat radius;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Applies the force as if it was applied from beneath the object. This is useful because explosions that throw things up instead of pushing things to the side look cooler. A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position.")]
		public FsmFloat upwardsModifier;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The type of force to apply. See Unity Physics docs.")]
		public ForceMode forceMode;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6002384")]
		[Address(RVA = "0x129A22C", Offset = "0x129A22C", VA = "0x129A22C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002385")]
		[Address(RVA = "0x129A2D4", Offset = "0x129A2D4", VA = "0x129A2D4", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0x129A2F4", Offset = "0x129A2F4", VA = "0x129A2F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002387")]
		[Address(RVA = "0x129A47C", Offset = "0x129A47C", VA = "0x129A47C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002388")]
		[Address(RVA = "0x129A320", Offset = "0x129A320", VA = "0x129A320")]
		private void DoAddExplosionForce()
		{
		}

		[Token(Token = "0x6002389")]
		[Address(RVA = "0x129A480", Offset = "0x129A480", VA = "0x129A480")]
		public AddExplosionForce()
		{
		}
	}
	[Token(Token = "0x2000704")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Adds a force to a Game Object. Use Vector3 variable and/or Float variables for each axis.")]
	public class AddForce : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject to apply the force to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally apply the force at a position on the object. This will also add some torque. The position is often returned from MousePick or GetCollisionInfo actions.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 atPosition;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("A Vector3 force to add. Optionally override any axis with the X, Y, Z parameters.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Force along the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Force along the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Force along the Z axis. To leave unchanged, set to 'None'.")]
		public FsmFloat z;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Apply the force in world or local space.")]
		public Space space;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("The type of force to apply. See Unity Physics docs.")]
		public ForceMode forceMode;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x600238A")]
		[Address(RVA = "0x129A4C8", Offset = "0x129A4C8", VA = "0x129A4C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600238B")]
		[Address(RVA = "0x129A608", Offset = "0x129A608", VA = "0x129A608", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600238C")]
		[Address(RVA = "0x129A628", Offset = "0x129A628", VA = "0x129A628", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600238D")]
		[Address(RVA = "0x129A87C", Offset = "0x129A87C", VA = "0x129A87C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x600238E")]
		[Address(RVA = "0x129A654", Offset = "0x129A654", VA = "0x129A654")]
		private void DoAddForce()
		{
		}

		[Token(Token = "0x600238F")]
		[Address(RVA = "0x129A880", Offset = "0x129A880", VA = "0x129A880")]
		public AddForce()
		{
		}
	}
	[Token(Token = "0x2000705")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Adds torque (rotational force) to a Game Object. NOTE: The game object requires a Rigid Body.")]
	public class AddTorque : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject to add torque (rotational force) to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A Vector3 torque. Optionally override any axis with the X, Y, Z parameters.")]
		public FsmVector3 vector;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Torque around the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Torque around the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Torque around the Z axis. To leave unchanged, set to 'None'.")]
		public FsmFloat z;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Apply the force in world or local space.")]
		public Space space;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("The type of force to apply. See Unity Physics docs.")]
		public ForceMode forceMode;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Apply the force every frame that the State is active.")]
		public bool everyFrame;

		[Token(Token = "0x6002390")]
		[Address(RVA = "0x129A8C8", Offset = "0x129A8C8", VA = "0x129A8C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002391")]
		[Address(RVA = "0x129A9B8", Offset = "0x129A9B8", VA = "0x129A9B8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002392")]
		[Address(RVA = "0x129A9D8", Offset = "0x129A9D8", VA = "0x129A9D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0x129ABD0", Offset = "0x129ABD0", VA = "0x129ABD0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002394")]
		[Address(RVA = "0x129AA04", Offset = "0x129AA04", VA = "0x129AA04")]
		private void DoAddTorque()
		{
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0x129ABD4", Offset = "0x129ABD4", VA = "0x129ABD4")]
		public AddTorque()
		{
		}
	}
	[Token(Token = "0x2000706")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sends the specified event when the owner collides with a tagged object. Optionally store the collider and collision force in variables for later use. NOTE: Collisions are processed after other actions, so this action should be ordered last in the action list.")]
	public class CollisionEvent : FsmStateAction
	{
		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect collisions on. Unlike regular MonoBehaviour scripts, PlayMaker lets you easily detect collisions on other objects. This lets you organize your behaviours the way you want.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of collision to detect.")]
		public CollisionType collision;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.TagMenu)]
		[Tooltip("Tags to collide with.")]
		public FsmString collideTag;

		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if a collision is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Game Object collided with in a {{Game Object Variable}}.")]
		public FsmGameObject storeCollider;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the force of the collision. NOTE: Use Get Collision Info to get more info about the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeForce;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x6002396")]
		[Address(RVA = "0x129AC1C", Offset = "0x129AC1C", VA = "0x129AC1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002397")]
		[Address(RVA = "0x129ACB8", Offset = "0x129ACB8", VA = "0x129ACB8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002398")]
		[Address(RVA = "0x129AFAC", Offset = "0x129AFAC", VA = "0x129AFAC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0x129B2C4", Offset = "0x129B2C4", VA = "0x129B2C4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0x129B598", Offset = "0x129B598", VA = "0x129B598")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0x129AE00", Offset = "0x129AE00", VA = "0x129AE00")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0x129B0A8", Offset = "0x129B0A8", VA = "0x129B0A8")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0x129B37C", Offset = "0x129B37C", VA = "0x129B37C")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0x129B5B8", Offset = "0x129B5B8", VA = "0x129B5B8")]
		private void StoreCollisionInfo(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0x129B684", Offset = "0x129B684", VA = "0x129B684", Slot = "43")]
		public override void DoCollisionEnter(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0x129B70C", Offset = "0x129B70C", VA = "0x129B70C", Slot = "44")]
		public override void DoCollisionStay(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0x129B798", Offset = "0x129B798", VA = "0x129B798", Slot = "45")]
		public override void DoCollisionExit(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0x129B824", Offset = "0x129B824", VA = "0x129B824", Slot = "56")]
		public override void DoControllerColliderHit(ControllerColliderHit collisionInfo)
		{
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0x129B8D8", Offset = "0x129B8D8", VA = "0x129B8D8", Slot = "49")]
		public override void DoParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0x129B6AC", Offset = "0x129B6AC", VA = "0x129B6AC")]
		private void CollisionEnter(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0x129B734", Offset = "0x129B734", VA = "0x129B734")]
		private void CollisionStay(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x60023A6")]
		[Address(RVA = "0x129B7C0", Offset = "0x129B7C0", VA = "0x129B7C0")]
		private void CollisionExit(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x60023A7")]
		[Address(RVA = "0x129B84C", Offset = "0x129B84C", VA = "0x129B84C")]
		private void ControllerColliderHit(ControllerColliderHit collisionInfo)
		{
		}

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0x129B900", Offset = "0x129B900", VA = "0x129B900")]
		private void ParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0x129B978", Offset = "0x129B978", VA = "0x129B978", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0x129B9A4", Offset = "0x129B9A4", VA = "0x129B9A4")]
		public CollisionEvent()
		{
		}
	}
	[Token(Token = "0x2000707")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Applies an explosion Force to all Game Objects with a Rigid Body inside a Radius.")]
	public class Explosion : FsmStateAction
	{
		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The world position of the center of the explosion.")]
		[RequiredField]
		public FsmVector3 center;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The strength of the explosion.")]
		public FsmFloat force;

		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The radius of the explosion. Force falls of linearly with distance.")]
		public FsmFloat radius;

		[Token(Token = "0x400202E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Applies the force as if it was applied from beneath the object. This is useful because explosions that throw things up instead of pushing things to the side look cooler. A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position.")]
		public FsmFloat upwardsModifier;

		[Token(Token = "0x400202F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The type of force to apply.")]
		public ForceMode forceMode;

		[NonSerialized]
		[Token(Token = "0x4002030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Layer)]
		public FsmInt layer;

		[Token(Token = "0x4002031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Layers to effect.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4002032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you effect all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4002033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0x129B9AC", Offset = "0x129B9AC", VA = "0x129B9AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0x129B9EC", Offset = "0x129B9EC", VA = "0x129B9EC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0x129BA0C", Offset = "0x129BA0C", VA = "0x129BA0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023AE")]
		[Address(RVA = "0x129BC1C", Offset = "0x129BC1C", VA = "0x129BC1C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60023AF")]
		[Address(RVA = "0x129BA38", Offset = "0x129BA38", VA = "0x129BA38")]
		private void DoExplosion()
		{
		}

		[Token(Token = "0x60023B0")]
		[Address(RVA = "0x129BC20", Offset = "0x129BC20", VA = "0x129BC20")]
		private bool ShouldApplyForce(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60023B1")]
		[Address(RVA = "0x129BC88", Offset = "0x129BC88", VA = "0x129BC88")]
		public Explosion()
		{
		}
	}
	[Token(Token = "0x2000708")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Find overlaps with GameObject colliders in the scene.")]
	public class FindOverlaps : ComponentAction<Transform>
	{
		[Token(Token = "0x2000709")]
		public enum Shape
		{
			[Token(Token = "0x400204C")]
			Box,
			[Token(Token = "0x400204D")]
			Sphere,
			[Token(Token = "0x400204E")]
			Capsule
		}

		[Token(Token = "0x4002034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject position to use for the test shape. Set to none to use world origin (0,0,0).")]
		public FsmOwnerDefault position;

		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Offset position of the shape.")]
		public FsmVector3 offset;

		[Token(Token = "0x4002036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Shape to find overlaps against.")]
		public Shape shape;

		[Token(Token = "0x4002037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideIf("HideRadius")]
		[Tooltip("Radius of sphere/capsule.")]
		public FsmFloat radius;

		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideIf("HideBox")]
		[Tooltip("Size of box.")]
		public FsmVector3 box;

		[Token(Token = "0x4002039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideIf("HideCapsule")]
		[Tooltip("The height of the capsule.")]
		public FsmFloat height;

		[Token(Token = "0x400203A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Maximum number of overlaps to detect.")]
		public FsmInt maxOverlaps;

		[Token(Token = "0x400203B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ActionSection("Filter")]
		[Tooltip("LayerMask name to filter the overlapping objects")]
		[UIHint(UIHint.LayerMask)]
		public FsmInt layerMask;

		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Include self in the array.")]
		public FsmBool includeSelf;

		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause Overlaps can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store overlapping GameObjects in an array.")]
		[ActionSection("Output")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray storeOverlapping;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Event to send if overlaps were found.")]
		public FsmEvent foundOverlaps;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Event to send if no overlaps were found.")]
		public FsmEvent noOverlaps;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The color to use for the debug line.")]
		[ActionSection("Debug")]
		public FsmColor debugColor;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Draw a gizmo in the scene view to visualize the shape.")]
		public FsmBool debug;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Collider[] colliders;

		[Token(Token = "0x400204A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int repeat;

		[Token(Token = "0x17000377")]
		public Vector3 center
		{
			[Token(Token = "0x60023B2")]
			[Address(RVA = "0x129BC90", Offset = "0x129BC90", VA = "0x129BC90")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60023B3")]
			[Address(RVA = "0x129BC9C", Offset = "0x129BC9C", VA = "0x129BC9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000378")]
		public Quaternion orientation
		{
			[Token(Token = "0x60023B4")]
			[Address(RVA = "0x129BCA8", Offset = "0x129BCA8", VA = "0x129BCA8")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60023B5")]
			[Address(RVA = "0x129BCB4", Offset = "0x129BCB4", VA = "0x129BCB4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000379")]
		public Vector3 capsulePoint1
		{
			[Token(Token = "0x60023B6")]
			[Address(RVA = "0x129BCC0", Offset = "0x129BCC0", VA = "0x129BCC0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60023B7")]
			[Address(RVA = "0x129BCD0", Offset = "0x129BCD0", VA = "0x129BCD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700037A")]
		public Vector3 capsulePoint2
		{
			[Token(Token = "0x60023B8")]
			[Address(RVA = "0x129BCE0", Offset = "0x129BCE0", VA = "0x129BCE0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60023B9")]
			[Address(RVA = "0x129BCF0", Offset = "0x129BCF0", VA = "0x129BCF0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700037B")]
		public int targetMask
		{
			[Token(Token = "0x60023BA")]
			[Address(RVA = "0x129BD00", Offset = "0x129BD00", VA = "0x129BD00")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60023BB")]
			[Address(RVA = "0x129BD08", Offset = "0x129BD08", VA = "0x129BD08")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0x129BD10", Offset = "0x129BD10", VA = "0x129BD10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023BD")]
		[Address(RVA = "0x129BF54", Offset = "0x129BF54", VA = "0x129BF54", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60023BE")]
		[Address(RVA = "0x129BF74", Offset = "0x129BF74", VA = "0x129BF74")]
		public bool HideBox()
		{
			return default(bool);
		}

		[Token(Token = "0x60023BF")]
		[Address(RVA = "0x129BF84", Offset = "0x129BF84", VA = "0x129BF84")]
		public bool HideRadius()
		{
			return default(bool);
		}

		[Token(Token = "0x60023C0")]
		[Address(RVA = "0x129BF98", Offset = "0x129BF98", VA = "0x129BF98")]
		public bool HideCapsule()
		{
			return default(bool);
		}

		[Token(Token = "0x60023C1")]
		[Address(RVA = "0x129BFA8", Offset = "0x129BFA8", VA = "0x129BFA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023C2")]
		[Address(RVA = "0x129C4C8", Offset = "0x129C4C8", VA = "0x129C4C8", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60023C3")]
		[Address(RVA = "0x129C04C", Offset = "0x129C04C", VA = "0x129C04C")]
		private void DoGetOverlap()
		{
		}

		[Token(Token = "0x60023C4")]
		[Address(RVA = "0x129C4E0", Offset = "0x129C4E0", VA = "0x129C4E0")]
		public void InitShapeCenter()
		{
		}

		[Token(Token = "0x60023C5")]
		[Address(RVA = "0x129C680", Offset = "0x129C680", VA = "0x129C680")]
		public FindOverlaps()
		{
		}
	}
	[Token(Token = "0x200070A")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets info on the last collision event. Typically used after a COLLISION ENTER, COLLISION STAY, or COLLISION EXIT system event or Collision Event action to get more info on the collision.")]
	public class GetCollisionInfo : FsmStateAction
	{
		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get the relative velocity of the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 relativeVelocity;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the relative speed of the collision. Useful for controlling reactions. E.g., selecting an appropriate sound fx.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat relativeSpeed;

		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the world position of the collision contact. Useful for spawning effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 contactPoint;

		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the collision normal vector. Useful for aligning spawned effects etc.")]
		public FsmVector3 contactNormal;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Get the name of the physics material on the Game Object Hit. Useful for triggering different effects. Audio, particles...")]
		[UIHint(UIHint.Variable)]
		public FsmString physicsMaterialName;

		[Token(Token = "0x60023C6")]
		[Address(RVA = "0x129C6C8", Offset = "0x129C6C8", VA = "0x129C6C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023C7")]
		[Address(RVA = "0x129C730", Offset = "0x129C730", VA = "0x129C730")]
		private void StoreCollisionInfo()
		{
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0x129C940", Offset = "0x129C940", VA = "0x129C940", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023C9")]
		[Address(RVA = "0x129C95C", Offset = "0x129C95C", VA = "0x129C95C")]
		public GetCollisionInfo()
		{
		}
	}
	[Token(Token = "0x200070B")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets info on the last joint break event.")]
	public class GetJointBreakInfo : FsmStateAction
	{
		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Get the force that broke the joint.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat breakForce;

		[Token(Token = "0x60023CA")]
		[Address(RVA = "0x129C964", Offset = "0x129C964", VA = "0x129C964", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023CB")]
		[Address(RVA = "0x129C970", Offset = "0x129C970", VA = "0x129C970", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0x129C99C", Offset = "0x129C99C", VA = "0x129C99C")]
		public GetJointBreakInfo()
		{
		}
	}
	[Token(Token = "0x200070C")]
	[Tooltip("Gets the Mass of a Game Object's Rigid Body.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetMass : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject that owns the Rigidbody")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the mass in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x60023CD")]
		[Address(RVA = "0x129C9A4", Offset = "0x129C9A4", VA = "0x129C9A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023CE")]
		[Address(RVA = "0x129C9CC", Offset = "0x129C9CC", VA = "0x129C9CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0x129C9E8", Offset = "0x129C9E8", VA = "0x129C9E8")]
		private void DoGetMass()
		{
		}

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0x129CA8C", Offset = "0x129CA8C", VA = "0x129CA8C")]
		public GetMass()
		{
		}
	}
	[Token(Token = "0x200070D")]
	[Tooltip("Gets info on the last particle collision event. See Unity Particle System docs.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetParticleCollisionInfo : FsmStateAction
	{
		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0x129CAD4", Offset = "0x129CAD4", VA = "0x129CAD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0x129CAE0", Offset = "0x129CAE0", VA = "0x129CAE0")]
		private void StoreCollisionInfo()
		{
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0x129CB08", Offset = "0x129CB08", VA = "0x129CB08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0x129CB24", Offset = "0x129CB24", VA = "0x129CB24")]
		public GetParticleCollisionInfo()
		{
		}
	}
	[Token(Token = "0x200070E")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets info on the last RaycastAll and store in array variables.")]
	public class GetRaycastAllInfo : FsmStateAction
	{
		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[Tooltip("Store the GameObjects hit in an array variable.")]
		public FsmArray storeHitObjects;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get the world position of all ray hit point and store them in an array variable.")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.Vector3, "", 0, 0, 65536)]
		public FsmArray points;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the normal at all hit points and store them in an array variable.")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.Vector3, "", 0, 0, 65536)]
		public FsmArray normals;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to all hit points and store them in an array variable.")]
		[ArrayEditor(VariableType.Float, "", 0, 0, 65536)]
		public FsmArray distances;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Warning, this could be affecting performances")]
		public bool everyFrame;

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0x129CB2C", Offset = "0x129CB2C", VA = "0x129CB2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0x129CB7C", Offset = "0x129CB7C", VA = "0x129CB7C")]
		private void StoreRaycastAllInfo()
		{
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0x129CF10", Offset = "0x129CF10", VA = "0x129CF10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0x129CF3C", Offset = "0x129CF3C", VA = "0x129CF3C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0x129CF40", Offset = "0x129CF40", VA = "0x129CF40")]
		public GetRaycastAllInfo()
		{
		}
	}
	[Token(Token = "0x200070F")]
	[Tooltip("Gets info on the last Raycast and store in variables.")]
	[ActionCategory(ActionCategory.Physics)]
	public class GetRaycastHitInfo : FsmStateAction
	{
		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Get the GameObject hit by the last Raycast and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x400205F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Title("Hit Point")]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 point;

		[Token(Token = "0x4002060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the normal at the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 normal;

		[Token(Token = "0x4002061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat distance;

		[Token(Token = "0x4002062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0x129CF48", Offset = "0x129CF48", VA = "0x129CF48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0x129CF98", Offset = "0x129CF98", VA = "0x129CF98")]
		private void StoreRaycastInfo()
		{
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0x129D134", Offset = "0x129D134", VA = "0x129D134", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0x129D160", Offset = "0x129D160", VA = "0x129D160", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0x129D164", Offset = "0x129D164", VA = "0x129D164")]
		public GetRaycastHitInfo()
		{
		}
	}
	[Token(Token = "0x2000710")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets the Speed of a Game Object and stores it in a Float Variable. NOTE: The Game Object must have a RigidBody component.")]
	public class GetSpeed : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4002063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject with a RigidBody component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the speed in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x4002065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0x129D16C", Offset = "0x129D16C", VA = "0x129D16C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0x129D19C", Offset = "0x129D19C", VA = "0x129D19C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0x129D2F4", Offset = "0x129D2F4", VA = "0x129D2F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0x129D1C8", Offset = "0x129D1C8", VA = "0x129D1C8")]
		private void DoGetSpeed()
		{
		}

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0x129D2F8", Offset = "0x129D2F8", VA = "0x129D2F8")]
		public GetSpeed()
		{
		}
	}
	[Token(Token = "0x2000711")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets info on the last trigger event. Typically used after a TRIGGER ENTER, TRIGGER STAY, or TRIGGER EXIT system event or a {{Trigger Event}} action. The owner of the FSM must have a trigger collider.")]
	public class GetTriggerInfo : FsmStateAction
	{
		[Token(Token = "0x4002066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The game object that collided with the owner's trigger.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4002067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Useful for triggering different effects. Audio, particles...")]
		[UIHint(UIHint.Variable)]
		public FsmString physicsMaterialName;

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0x129D340", Offset = "0x129D340", VA = "0x129D340", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0x129D368", Offset = "0x129D368", VA = "0x129D368")]
		private void StoreTriggerInfo()
		{
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0x129D450", Offset = "0x129D450", VA = "0x129D450", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0x129D46C", Offset = "0x129D46C", VA = "0x129D46C")]
		public GetTriggerInfo()
		{
		}
	}
	[Token(Token = "0x2000712")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Gets the Velocity of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable. NOTE: The Game Object must have a Rigid Body.")]
	public class GetVelocity : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object.")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the velocity in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the X component of the velocity in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the Y component of the velocity in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Z component of the velocity in a Float Variable.")]
		public FsmFloat z;

		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The coordinate space to get the velocity in.")]
		public Space space;

		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60023E8")]
		[Address(RVA = "0x129D474", Offset = "0x129D474", VA = "0x129D474", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023E9")]
		[Address(RVA = "0x129D4D8", Offset = "0x129D4D8", VA = "0x129D4D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023EA")]
		[Address(RVA = "0x129D630", Offset = "0x129D630", VA = "0x129D630", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60023EB")]
		[Address(RVA = "0x129D504", Offset = "0x129D504", VA = "0x129D504")]
		private void DoGetVelocity()
		{
		}

		[Token(Token = "0x60023EC")]
		[Address(RVA = "0x129D634", Offset = "0x129D634", VA = "0x129D634")]
		public GetVelocity()
		{
		}
	}
	[Token(Token = "0x2000713")]
	[Tooltip("Tests if a rigid body is controlled by physics. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-isKinematic.html\">IsKinematic</a>.")]
	[ActionCategory(ActionCategory.Physics)]
	public class IsKinematic : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The game object to test.")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if it is kinematic (not controlled by physics).")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if it is not kinematic (controlled by physics).")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4002072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable")]
		public FsmBool store;

		[Token(Token = "0x4002073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0x129D67C", Offset = "0x129D67C", VA = "0x129D67C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023EE")]
		[Address(RVA = "0x129D6CC", Offset = "0x129D6CC", VA = "0x129D6CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0x129D7D0", Offset = "0x129D7D0", VA = "0x129D7D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0x129D6F8", Offset = "0x129D6F8", VA = "0x129D6F8")]
		private void DoIsKinematic()
		{
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0x129D7D4", Offset = "0x129D7D4", VA = "0x129D7D4")]
		public IsKinematic()
		{
		}
	}
	[Token(Token = "0x2000714")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Tests if a rigid body is sleeping. See Unity docs: <a href=\"http://unity3d.com/support/documentation/Components/RigidbodySleeping.html\">Rigidbody Sleeping</a>.")]
	public class IsSleeping : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4002074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The game object to test.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if sleeping.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if not sleeping.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool Variable.")]
		public FsmBool store;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0x129D81C", Offset = "0x129D81C", VA = "0x129D81C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0x129D86C", Offset = "0x129D86C", VA = "0x129D86C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023F4")]
		[Address(RVA = "0x129D970", Offset = "0x129D970", VA = "0x129D970", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60023F5")]
		[Address(RVA = "0x129D898", Offset = "0x129D898", VA = "0x129D898")]
		private void DoIsSleeping()
		{
		}

		[Token(Token = "0x60023F6")]
		[Address(RVA = "0x129D974", Offset = "0x129D974", VA = "0x129D974")]
		public IsSleeping()
		{
		}
	}
	[Token(Token = "0x2000715")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Moves a Game Object's Rigid Body to a new position. Unlike Set Position this will respect physics collisions.")]
	public class MovePosition : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject to move.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400207A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector.")]
		public FsmVector3 vector;

		[Token(Token = "0x400207B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x400207C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x400207D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Movement in z axis.")]
		public FsmFloat z;

		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60023F7")]
		[Address(RVA = "0x129D9BC", Offset = "0x129D9BC", VA = "0x129D9BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023F8")]
		[Address(RVA = "0x129DABC", Offset = "0x129DABC", VA = "0x129DABC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60023F9")]
		[Address(RVA = "0x129DADC", Offset = "0x129DADC", VA = "0x129DADC", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60023FA")]
		[Address(RVA = "0x129DB08", Offset = "0x129DB08", VA = "0x129DB08")]
		private void DoMovePosition()
		{
		}

		[Token(Token = "0x60023FB")]
		[Address(RVA = "0x129DD2C", Offset = "0x129DD2C", VA = "0x129DD2C")]
		public MovePosition()
		{
		}
	}
	[Token(Token = "0x2000716")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Casts a Ray against all Colliders in the scene. Use either a Game Object or Vector3 world position as the origin of the ray. Use {{Get Raycast Info}} to get more detailed info.")]
	public class Raycast : FsmStateAction
	{
		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector3 world position. \nOr use Game Object parameter.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector3 direction vector")]
		public FsmVector3 direction;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ActionSection("Result")]
		[Tooltip("Event to send if the ray hits an object.")]
		[UIHint(UIHint.Variable)]
		public FsmEvent hitEvent;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidHit;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidntHit;

		[Token(Token = "0x4002088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the game object hit in a variable.")]
		public FsmGameObject storeHitObject;

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Get the normal at the hit point and store it in a variable.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeHitNormal;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		[ActionSection("Filter")]
		public FsmInt repeatInterval;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt layerMask;

		[Token(Token = "0x400208E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400208F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The color to use for the debug line.")]
		[ActionSection("Debug")]
		public FsmColor debugColor;

		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int repeat;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform cachedTransform;

		[Token(Token = "0x60023FC")]
		[Address(RVA = "0x129DD74", Offset = "0x129DD74", VA = "0x129DD74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60023FD")]
		[Address(RVA = "0x129DF58", Offset = "0x129DF58", VA = "0x129DF58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0x129E4C8", Offset = "0x129E4C8", VA = "0x129E4C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0x129DF94", Offset = "0x129DF94", VA = "0x129DF94")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0x129E4E0", Offset = "0x129E4E0", VA = "0x129E4E0")]
		public Raycast()
		{
		}
	}
	[Token(Token = "0x2000717")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Casts a Ray against all Colliders in the scene. Use either a GameObject or Vector3 world position as the origin of the ray. Use GetRaycastAllInfo to get more detailed info.")]
	public class RaycastAll : FsmStateAction
	{
		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static RaycastHit[] RaycastAllHitInfo;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector3 world position. \nOr use Game Object parameter.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector3 direction vector")]
		public FsmVector3 direction;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ActionSection("Result")]
		[Tooltip("Event to send if the ray hits an object.")]
		[UIHint(UIHint.Variable)]
		public FsmEvent hitEvent;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidHit;

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the GameObjects hit in an array variable.")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray storeHitObjects;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeHitPoint;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the normal at the hit point and store it in a variable.\nNote, this is a direction vector not a rotation. Use Look At Direction to rotate a GameObject to this direction.")]
		public FsmVector3 storeHitNormal;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		[ActionSection("Filter")]
		public FsmInt repeatInterval;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[ActionSection("Debug")]
		[Tooltip("The color to use for the debug line.")]
		public FsmColor debugColor;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int repeat;

		[Token(Token = "0x6002401")]
		[Address(RVA = "0x129E4E8", Offset = "0x129E4E8", VA = "0x129E4E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002402")]
		[Address(RVA = "0x129E724", Offset = "0x129E724", VA = "0x129E724", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002403")]
		[Address(RVA = "0x129EC74", Offset = "0x129EC74", VA = "0x129EC74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002404")]
		[Address(RVA = "0x129E760", Offset = "0x129E760", VA = "0x129E760")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0x129EC8C", Offset = "0x129EC8C", VA = "0x129EC8C")]
		public RaycastAll()
		{
		}
	}
	[Token(Token = "0x2000718")]
	[ActionCategory(ActionCategory.Character)]
	[Tooltip("Sets the velocity of a CharacterController on a GameObject. To leave any axis unchanged, set variable to 'None'.")]
	public class SetControllerVelocity : ComponentAction<CharacterController>
	{
		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterController))]
		[Tooltip("The GameObject with the Character Controller component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set velocity using Vector3 variable and/or individual channels below.")]
		public FsmVector3 vector;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Velocity in X axis.")]
		public FsmFloat x;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Velocity in Y axis.")]
		public FsmFloat y;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Velocity in Z axis.")]
		public FsmFloat z;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("You can set velocity in world or local space.")]
		public Space space;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Set the velocity every frame.")]
		public bool everyFrame;

		[Token(Token = "0x1700037C")]
		private CharacterController controller
		{
			[Token(Token = "0x6002406")]
			[Address(RVA = "0x129EC94", Offset = "0x129EC94", VA = "0x129EC94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0x129EC9C", Offset = "0x129EC9C", VA = "0x129EC9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0x129ED9C", Offset = "0x129ED9C", VA = "0x129ED9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0x129EDC8", Offset = "0x129EDC8", VA = "0x129EDC8")]
		private void DoSetVelocity()
		{
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0x129EFAC", Offset = "0x129EFAC", VA = "0x129EFAC")]
		public SetControllerVelocity()
		{
		}
	}
	[Token(Token = "0x2000719")]
	[ActionCategory(ActionCategory.Physics)]
	[HelpUrl("http://hutonggames.com/playmakerforum/index.php?topic=4734.0")]
	[Tooltip("Sets the Drag of a Game Object's Rigid Body.")]
	public class SetDrag : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The GameObject that owns the RigidBody.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 10f)]
		[RequiredField]
		[Tooltip("Set the Drag.")]
		public FsmFloat drag;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600240B")]
		[Address(RVA = "0x129EFF4", Offset = "0x129EFF4", VA = "0x129EFF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0x129F028", Offset = "0x129F028", VA = "0x129F028", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0x129F110", Offset = "0x129F110", VA = "0x129F110", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0x129F054", Offset = "0x129F054", VA = "0x129F054")]
		private void DoSetDrag()
		{
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0x129F114", Offset = "0x129F114", VA = "0x129F114")]
		public SetDrag()
		{
		}
	}
	[Token(Token = "0x200071A")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sets the gravity vector, or individual axis.")]
	public class SetGravity : FsmStateAction
	{
		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set Gravity using a Vector3. Or set override individual axis below.")]
		public FsmVector3 vector;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("X amount.")]
		public FsmFloat x;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Y amount. The most common up/down axis for gravity.")]
		public FsmFloat y;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Z amount.")]
		public FsmFloat z;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Update gravity every frame. Useful if you're changing gravity over a period of time.")]
		public bool everyFrame;

		[Token(Token = "0x6002410")]
		[Address(RVA = "0x129F15C", Offset = "0x129F15C", VA = "0x129F15C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0x129F248", Offset = "0x129F248", VA = "0x129F248", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0x129F33C", Offset = "0x129F33C", VA = "0x129F33C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0x129F274", Offset = "0x129F274", VA = "0x129F274")]
		private void DoSetGravity()
		{
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0x129F340", Offset = "0x129F340", VA = "0x129F340")]
		public SetGravity()
		{
		}
	}
	[Token(Token = "0x200071B")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Controls whether physics affects the game object. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-isKinematic.html\">IsKinematic</a>.")]
	public class SetIsKinematic : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The Game Object to set.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Set is kinematic true/false.")]
		public FsmBool isKinematic;

		[Token(Token = "0x6002415")]
		[Address(RVA = "0x129F348", Offset = "0x129F348", VA = "0x129F348", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002416")]
		[Address(RVA = "0x129F37C", Offset = "0x129F37C", VA = "0x129F37C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0x129F398", Offset = "0x129F398", VA = "0x129F398")]
		private void DoSetIsKinematic()
		{
		}

		[Token(Token = "0x6002418")]
		[Address(RVA = "0x129F458", Offset = "0x129F458", VA = "0x129F458")]
		public SetIsKinematic()
		{
		}
	}
	[Token(Token = "0x200071C")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Connect a joint to a game object.")]
	public class SetJointConnectedBody : FsmStateAction
	{
		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Joint))]
		[Tooltip("The joint to connect. Requires a Joint component.")]
		[RequiredField]
		public FsmOwnerDefault joint;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The game object to connect to the Joint. Set to none to connect the Joint to the world.")]
		public FsmGameObject rigidBody;

		[Token(Token = "0x6002419")]
		[Address(RVA = "0x129F4A0", Offset = "0x129F4A0", VA = "0x129F4A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600241A")]
		[Address(RVA = "0x129F4C8", Offset = "0x129F4C8", VA = "0x129F4C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0x129F628", Offset = "0x129F628", VA = "0x129F628")]
		public SetJointConnectedBody()
		{
		}
	}
	[Token(Token = "0x200071D")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sets the mass of a game object's rigid body. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-mass.html\">Rigidbody.Mass</a>")]
	public class SetMass : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("A GameObject with a RigidBody component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[HasFloatSlider(0.1f, 10f)]
		[Tooltip("Set the mass. Unity recommends a mass between 0.1 and 10.")]
		public FsmFloat mass;

		[Token(Token = "0x600241C")]
		[Address(RVA = "0x129F630", Offset = "0x129F630", VA = "0x129F630", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0x129F664", Offset = "0x129F664", VA = "0x129F664", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0x129F680", Offset = "0x129F680", VA = "0x129F680")]
		private void DoSetMass()
		{
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0x129F73C", Offset = "0x129F73C", VA = "0x129F73C")]
		public SetMass()
		{
		}
	}
	[Token(Token = "0x200071E")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sets the velocity of a game object with a rigid body. To leave any axis unchanged, set variable to 'None'.\nIn most cases you should not modify the velocity directly, as this can result in unrealistic behaviour. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody-velocity.html\">Rigidbody.velocity</a>.")]
	public class SetVelocity : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The Game Object with the RigidBody component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set velocity using Vector3 variable and/or individual channels below.")]
		public FsmVector3 vector;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Velocity in X axis.")]
		public FsmFloat x;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Velocity in Y axis.")]
		public FsmFloat y;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Velocity in Z axis.")]
		public FsmFloat z;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("You can set velocity in world or local space.")]
		public Space space;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Set the velocity every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002420")]
		[Address(RVA = "0x129F784", Offset = "0x129F784", VA = "0x129F784", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0x129F884", Offset = "0x129F884", VA = "0x129F884", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002422")]
		[Address(RVA = "0x129F8A4", Offset = "0x129F8A4", VA = "0x129F8A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002423")]
		[Address(RVA = "0x129FAD4", Offset = "0x129FAD4", VA = "0x129FAD4", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002424")]
		[Address(RVA = "0x129F8D0", Offset = "0x129F8D0", VA = "0x129F8D0")]
		private void DoSetVelocity()
		{
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0x129FB00", Offset = "0x129FB00", VA = "0x129FB00")]
		public SetVelocity()
		{
		}
	}
	[Token(Token = "0x200071F")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Forces a rigid body to sleep at least one frame. See unity docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.Sleep.html\">Rigidbody.sleep</a>.")]
	public class Sleep : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A Game Object with a Rigid Body.")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6002426")]
		[Address(RVA = "0x129FB48", Offset = "0x129FB48", VA = "0x129FB48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0x129FB54", Offset = "0x129FB54", VA = "0x129FB54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0x129FB70", Offset = "0x129FB70", VA = "0x129FB70")]
		private void DoSleep()
		{
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0x129FC10", Offset = "0x129FC10", VA = "0x129FC10")]
		public Sleep()
		{
		}
	}
	[Token(Token = "0x2000720")]
	[Tooltip("Translates a Game Object's RigidBody. Unlike Translate this will respect physics collisions.")]
	[ActionCategory(ActionCategory.Physics)]
	public class TranslatePosition : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to move.")]
		[CheckForComponent(typeof(Rigidbody))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Movement vector.")]
		public FsmVector3 vector;

		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Movement in z axis.")]
		public FsmFloat z;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Translate over one second")]
		public bool perSecond;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600242A")]
		[Address(RVA = "0x129FC58", Offset = "0x129FC58", VA = "0x129FC58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600242B")]
		[Address(RVA = "0x129FD5C", Offset = "0x129FD5C", VA = "0x129FD5C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600242C")]
		[Address(RVA = "0x129FD7C", Offset = "0x129FD7C", VA = "0x129FD7C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0x129FDA8", Offset = "0x129FDA8", VA = "0x129FDA8")]
		private void DoMovePosition()
		{
		}

		[Token(Token = "0x600242E")]
		[Address(RVA = "0x129FFF4", Offset = "0x129FFF4", VA = "0x129FFF4")]
		public TranslatePosition()
		{
		}
	}
	[Token(Token = "0x2000721")]
	[Tooltip("Sends an event when the owner collides with a tagged trigger (see Unity Tag and Trigger docs). Optionally send an event and store the collider for later use. NOTE: Collisions are processed after other actions, so this action should be ordered last in the list.")]
	[ActionCategory(ActionCategory.Physics)]
	public class TriggerEvent : FsmStateAction
	{
		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect trigger events on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of trigger event to detect.")]
		public TriggerType trigger;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.TagMenu)]
		[Tooltip("Only collide with triggers that have this tag.")]
		public FsmString collideTag;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the trigger event is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the GameObject that collided with the Owner of this FSM.")]
		public FsmGameObject storeCollider;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x600242F")]
		[Address(RVA = "0x12A003C", Offset = "0x12A003C", VA = "0x12A003C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002430")]
		[Address(RVA = "0x12A00C8", Offset = "0x12A00C8", VA = "0x12A00C8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002431")]
		[Address(RVA = "0x12A0324", Offset = "0x12A0324", VA = "0x12A0324", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002432")]
		[Address(RVA = "0x12A0560", Offset = "0x12A0560", VA = "0x12A0560", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002433")]
		[Address(RVA = "0x12A0758", Offset = "0x12A0758", VA = "0x12A0758")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x6002434")]
		[Address(RVA = "0x12A01CC", Offset = "0x12A01CC", VA = "0x12A01CC")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x6002435")]
		[Address(RVA = "0x12A0420", Offset = "0x12A0420", VA = "0x12A0420")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0x12A0618", Offset = "0x12A0618", VA = "0x12A0618")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x6002437")]
		[Address(RVA = "0x12A0778", Offset = "0x12A0778", VA = "0x12A0778")]
		private void StoreCollisionInfo(Collider collisionInfo)
		{
		}

		[Token(Token = "0x6002438")]
		[Address(RVA = "0x12A07AC", Offset = "0x12A07AC", VA = "0x12A07AC", Slot = "46")]
		public override void DoTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002439")]
		[Address(RVA = "0x12A0834", Offset = "0x12A0834", VA = "0x12A0834", Slot = "47")]
		public override void DoTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x600243A")]
		[Address(RVA = "0x12A08C0", Offset = "0x12A08C0", VA = "0x12A08C0", Slot = "48")]
		public override void DoTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600243B")]
		[Address(RVA = "0x12A07D4", Offset = "0x12A07D4", VA = "0x12A07D4")]
		private void TriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600243C")]
		[Address(RVA = "0x12A085C", Offset = "0x12A085C", VA = "0x12A085C")]
		private void TriggerStay(Collider other)
		{
		}

		[Token(Token = "0x600243D")]
		[Address(RVA = "0x12A08E8", Offset = "0x12A08E8", VA = "0x12A08E8")]
		private void TriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600243E")]
		[Address(RVA = "0x12A094C", Offset = "0x12A094C", VA = "0x12A094C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600243F")]
		[Address(RVA = "0x12A0978", Offset = "0x12A0978", VA = "0x12A0978")]
		public TriggerEvent()
		{
		}
	}
	[Token(Token = "0x2000722")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Sets whether a Game Object's Rigidbody is affected by Gravity.")]
	public class UseGravity : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A Game Object with a RigidBody component.")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Enable/disable gravity for the Game Object.")]
		[RequiredField]
		public FsmBool useGravity;

		[Token(Token = "0x6002440")]
		[Address(RVA = "0x12A0980", Offset = "0x12A0980", VA = "0x12A0980", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002441")]
		[Address(RVA = "0x12A09B4", Offset = "0x12A09B4", VA = "0x12A09B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002442")]
		[Address(RVA = "0x12A09D0", Offset = "0x12A09D0", VA = "0x12A09D0")]
		private void DoUseGravity()
		{
		}

		[Token(Token = "0x6002443")]
		[Address(RVA = "0x12A0A90", Offset = "0x12A0A90", VA = "0x12A0A90")]
		public UseGravity()
		{
		}
	}
	[Token(Token = "0x2000723")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Rigid bodies start sleeping when they come to rest. This action wakes up all rigid bodies in the scene. E.g., if you Set Gravity and want objects at rest to respond.See Unity Docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>.")]
	[SeeAlso("<a href =\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>")]
	public class WakeAllRigidBodies : FsmStateAction
	{
		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Do it every frame - use with caution! Sleeping is an important physics optimization!")]
		public bool everyFrame;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody[] bodies;

		[Token(Token = "0x6002444")]
		[Address(RVA = "0x12A0AD8", Offset = "0x12A0AD8", VA = "0x12A0AD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002445")]
		[Address(RVA = "0x12A0AE0", Offset = "0x12A0AE0", VA = "0x12A0AE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002446")]
		[Address(RVA = "0x12A0D38", Offset = "0x12A0D38", VA = "0x12A0D38", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002447")]
		[Address(RVA = "0x12A0BFC", Offset = "0x12A0BFC", VA = "0x12A0BFC")]
		private void DoWakeAll()
		{
		}

		[Token(Token = "0x6002448")]
		[Address(RVA = "0x12A0D3C", Offset = "0x12A0D3C", VA = "0x12A0D3C")]
		public WakeAllRigidBodies()
		{
		}
	}
	[Token(Token = "0x2000724")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Forces a Game Object's Rigid Body to wake up. See Unity Docs: <a href=\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>.")]
	[SeeAlso("<a href =\"http://unity3d.com/support/documentation/ScriptReference/Rigidbody.WakeUp.html\">Rigidbody.WakeUp</a>")]
	public class WakeUp : ComponentAction<Rigidbody>
	{
		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody))]
		[Tooltip("The Game Object to wake up.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6002449")]
		[Address(RVA = "0x12A0D44", Offset = "0x12A0D44", VA = "0x12A0D44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0x12A0D50", Offset = "0x12A0D50", VA = "0x12A0D50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600244B")]
		[Address(RVA = "0x12A0D6C", Offset = "0x12A0D6C", VA = "0x12A0D6C")]
		private void DoWakeUp()
		{
		}

		[Token(Token = "0x600244C")]
		[Address(RVA = "0x12A0E20", Offset = "0x12A0E20", VA = "0x12A0E20")]
		public WakeUp()
		{
		}
	}
	[Token(Token = "0x2000725")]
	[SeeAlso("To add a force in local space use {{Add Relative Force 2d}}")]
	[Tooltip("Adds a 2d force to a Game Object. Use Vector2 variable and/or Float variables for each axis.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class AddForce2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject to apply the force to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Option for applying the force")]
		public ForceMode2D forceMode;

		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Optionally apply the force at a position on the object. This will also add some torque. The position is often returned from MousePick or GetCollision2dInfo actions.")]
		public FsmVector2 atPosition;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("A Vector2 force to add. Optionally override any axis with the X, Y parameters.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector;

		[Token(Token = "0x40020DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Force along the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Force along the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("A Vector3 force to add. z is ignored")]
		public FsmVector3 vector3;

		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x600244D")]
		[Address(RVA = "0x12A0E68", Offset = "0x12A0E68", VA = "0x12A0E68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600244E")]
		[Address(RVA = "0x12A0FBC", Offset = "0x12A0FBC", VA = "0x12A0FBC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600244F")]
		[Address(RVA = "0x12A0FDC", Offset = "0x12A0FDC", VA = "0x12A0FDC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002450")]
		[Address(RVA = "0x12A11E0", Offset = "0x12A11E0", VA = "0x12A11E0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002451")]
		[Address(RVA = "0x12A1008", Offset = "0x12A1008", VA = "0x12A1008")]
		private void DoAddForce()
		{
		}

		[Token(Token = "0x6002452")]
		[Address(RVA = "0x12A11E4", Offset = "0x12A11E4", VA = "0x12A11E4")]
		public AddForce2d()
		{
		}
	}
	[Token(Token = "0x2000726")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Adds a relative 2d force to a Game Object. Use Vector2 variable and/or Float variables for each axis.")]
	public class AddRelativeForce2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		[Tooltip("The GameObject to apply the force to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Option for applying the force")]
		public ForceMode2D forceMode;

		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("A Vector2 force to add. Optionally override any axis with the X, Y parameters.")]
		public FsmVector2 vector;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Force along the X axis. To leave unchanged, set to 'None'.")]
		public FsmFloat x;

		[Token(Token = "0x40020E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Force along the Y axis. To leave unchanged, set to 'None'.")]
		public FsmFloat y;

		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("A Vector3 force to add. z is ignored")]
		public FsmVector3 vector3;

		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6002453")]
		[Address(RVA = "0x12A122C", Offset = "0x12A122C", VA = "0x12A122C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002454")]
		[Address(RVA = "0x12A1340", Offset = "0x12A1340", VA = "0x12A1340", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002455")]
		[Address(RVA = "0x12A1360", Offset = "0x12A1360", VA = "0x12A1360", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002456")]
		[Address(RVA = "0x12A151C", Offset = "0x12A151C", VA = "0x12A151C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002457")]
		[Address(RVA = "0x12A138C", Offset = "0x12A138C", VA = "0x12A138C")]
		private void DoAddRelativeForce()
		{
		}

		[Token(Token = "0x6002458")]
		[Address(RVA = "0x12A1520", Offset = "0x12A1520", VA = "0x12A1520")]
		public AddRelativeForce2d()
		{
		}
	}
	[Token(Token = "0x2000727")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Adds a 2d torque (rotational force) to a Game Object.")]
	public class AddTorque2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject to add torque to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Option for applying the force")]
		public ForceMode2D forceMode;

		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Torque")]
		public FsmFloat torque;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6002459")]
		[Address(RVA = "0x12A1568", Offset = "0x12A1568", VA = "0x12A1568", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600245A")]
		[Address(RVA = "0x12A1588", Offset = "0x12A1588", VA = "0x12A1588", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600245B")]
		[Address(RVA = "0x12A15B8", Offset = "0x12A15B8", VA = "0x12A15B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600245C")]
		[Address(RVA = "0x12A16A4", Offset = "0x12A16A4", VA = "0x12A16A4", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x600245D")]
		[Address(RVA = "0x12A15E4", Offset = "0x12A15E4", VA = "0x12A15E4")]
		private void DoAddTorque()
		{
		}

		[Token(Token = "0x600245E")]
		[Address(RVA = "0x12A16A8", Offset = "0x12A16A8", VA = "0x12A16A8")]
		public AddTorque2d()
		{
		}
	}
	[Token(Token = "0x2000728")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Detect collisions between the Owner of this FSM and other Game Objects that have RigidBody2D components. NOTE: The system events, COLLISION ENTER 2D, COLLISION STAY 2D, and COLLISION EXIT 2D are sent automatically on collisions with any object. Use this action instead to filter collisions by Tag.")]
	public class Collision2dEvent : FsmStateAction
	{
		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect collisions on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of collision to detect.")]
		public Collision2DType collision;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If true, Collision that are not enabled will be ignored.")]
		public FsmBool ignoreDisabled;

		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.TagMenu)]
		[Tooltip("Filter by Tag.")]
		public FsmString collideTag;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if a collision is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the GameObject that collided with the Owner of this FSM.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeCollider;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the force of the collision. NOTE: Use Get Collision 2D Info to get more info about the collision.")]
		public FsmFloat storeForce;

		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x600245F")]
		[Address(RVA = "0x12A16F0", Offset = "0x12A16F0", VA = "0x12A16F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002460")]
		[Address(RVA = "0x12A1798", Offset = "0x12A1798", VA = "0x12A1798", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002461")]
		[Address(RVA = "0x12A1A4C", Offset = "0x12A1A4C", VA = "0x12A1A4C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002462")]
		[Address(RVA = "0x12A1CFC", Offset = "0x12A1CFC", VA = "0x12A1CFC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002463")]
		[Address(RVA = "0x12A1F68", Offset = "0x12A1F68", VA = "0x12A1F68")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x6002464")]
		[Address(RVA = "0x12A18C4", Offset = "0x12A18C4", VA = "0x12A18C4")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x6002465")]
		[Address(RVA = "0x12A1B48", Offset = "0x12A1B48", VA = "0x12A1B48")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x6002466")]
		[Address(RVA = "0x12A1DB4", Offset = "0x12A1DB4", VA = "0x12A1DB4")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x6002467")]
		[Address(RVA = "0x12A1F88", Offset = "0x12A1F88", VA = "0x12A1F88")]
		private void StoreCollisionInfo(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6002468")]
		[Address(RVA = "0x12A2040", Offset = "0x12A2040", VA = "0x12A2040", Slot = "50")]
		public override void DoCollisionEnter2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x6002469")]
		[Address(RVA = "0x12A20F4", Offset = "0x12A20F4", VA = "0x12A20F4", Slot = "51")]
		public override void DoCollisionStay2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x600246A")]
		[Address(RVA = "0x12A21AC", Offset = "0x12A21AC", VA = "0x12A21AC", Slot = "52")]
		public override void DoCollisionExit2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x600246B")]
		[Address(RVA = "0x12A2264", Offset = "0x12A2264", VA = "0x12A2264", Slot = "49")]
		public override void DoParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x600246C")]
		[Address(RVA = "0x12A2068", Offset = "0x12A2068", VA = "0x12A2068")]
		private void CollisionEnter2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x600246D")]
		[Address(RVA = "0x12A211C", Offset = "0x12A211C", VA = "0x12A211C")]
		private void CollisionStay2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x600246E")]
		[Address(RVA = "0x12A21D4", Offset = "0x12A21D4", VA = "0x12A21D4")]
		private void CollisionExit2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x600246F")]
		[Address(RVA = "0x12A228C", Offset = "0x12A228C", VA = "0x12A228C")]
		private void ParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6002470")]
		[Address(RVA = "0x12A2304", Offset = "0x12A2304", VA = "0x12A2304", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002471")]
		[Address(RVA = "0x12A2330", Offset = "0x12A2330", VA = "0x12A2330")]
		public Collision2dEvent()
		{
		}
	}
	[Token(Token = "0x2000729")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Gets info on the last collision 2D event and store in variables. See Unity and PlayMaker docs on Unity 2D physics.")]
	public class GetCollision2dInfo : FsmStateAction
	{
		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Get the GameObject hit.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get the enabled state collision. if false, collision had no effect, like when using the PlatformEffector2D component set to one way")]
		[UIHint(UIHint.Variable)]
		public FsmBool enabled;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the relative velocity of the collision.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 relativeVelocity;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the relative speed of the collision. Useful for controlling reactions. E.g., selecting an appropriate sound fx.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat relativeSpeed;

		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get the world position of the collision contact. Useful for spawning effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 contactPoint;

		[Token(Token = "0x40020F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Get the 2d world position of the collision contact. Useful for spawning effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 contactPoint2d;

		[Token(Token = "0x40020F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Get the collision normal vector. Useful for aligning spawned effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 contactNormal;

		[Token(Token = "0x40020F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Get the 2d collision normal vector. Useful for aligning spawned effects etc.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 contactNormal2d;

		[Token(Token = "0x40020F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The number of separate shaped regions in the collider.")]
		public FsmInt shapeCount;

		[Token(Token = "0x40020FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Get the name of the physics 2D material of the colliding GameObject. Useful for triggering different effects. Audio, particles...")]
		[UIHint(UIHint.Variable)]
		public FsmString physics2dMaterialName;

		[Token(Token = "0x6002472")]
		[Address(RVA = "0x12A2338", Offset = "0x12A2338", VA = "0x12A2338", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002473")]
		[Address(RVA = "0x12A23E0", Offset = "0x12A23E0", VA = "0x12A23E0")]
		private void StoreCollisionInfo()
		{
		}

		[Token(Token = "0x6002474")]
		[Address(RVA = "0x12A2794", Offset = "0x12A2794", VA = "0x12A2794", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0x12A27B0", Offset = "0x12A27B0", VA = "0x12A27B0")]
		public GetCollision2dInfo()
		{
		}
	}
	[Token(Token = "0x200072A")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Gets info on the last joint break 2D event.")]
	public class GetJointBreak2dInfo : FsmStateAction
	{
		[Token(Token = "0x40020FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the broken joint.")]
		[ObjectType(typeof(Joint2D))]
		public FsmObject brokenJoint;

		[Token(Token = "0x40020FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get the reaction force exerted by the broken joint. Unity 5.3+")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 reactionForce;

		[Token(Token = "0x40020FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the magnitude of the reaction force exerted by the broken joint. Unity 5.3+")]
		[UIHint(UIHint.Variable)]
		public FsmFloat reactionForceMagnitude;

		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the reaction torque exerted by the broken joint. Unity 5.3+")]
		[UIHint(UIHint.Variable)]
		public FsmFloat reactionTorque;

		[Token(Token = "0x6002476")]
		[Address(RVA = "0x12A27B8", Offset = "0x12A27B8", VA = "0x12A27B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002477")]
		[Address(RVA = "0x12A27F0", Offset = "0x12A27F0", VA = "0x12A27F0")]
		private void StoreInfo()
		{
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0x12A2944", Offset = "0x12A2944", VA = "0x12A2944", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0x12A2960", Offset = "0x12A2960", VA = "0x12A2960")]
		public GetJointBreak2dInfo()
		{
		}
	}
	[Token(Token = "0x200072B")]
	[Tooltip("Gets the Mass of a Game Object's Rigid Body 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetMass2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		[Tooltip("The GameObject with a Rigidbody2D attached.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the mass of gameObject.")]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x600247A")]
		[Address(RVA = "0x12A2968", Offset = "0x12A2968", VA = "0x12A2968", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600247B")]
		[Address(RVA = "0x12A2990", Offset = "0x12A2990", VA = "0x12A2990", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600247C")]
		[Address(RVA = "0x12A29AC", Offset = "0x12A29AC", VA = "0x12A29AC")]
		private void DoGetMass()
		{
		}

		[Token(Token = "0x600247D")]
		[Address(RVA = "0x12A2A50", Offset = "0x12A2A50", VA = "0x12A2A50")]
		public GetMass2d()
		{
		}
	}
	[Token(Token = "0x200072C")]
	[Tooltip("Iterate through a list of all colliders detected by a LineCastThe colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetNextLineCast2d : FsmStateAction
	{
		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add fromPosition to the fromGameObject position")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("End ray at game object position. \nOr use From Position parameter.")]
		public FsmGameObject toGameObject;

		[Token(Token = "0x4002104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("End ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add toPosition to the ToGameObject position")]
		public FsmVector2 toPosition;

		[Token(Token = "0x4002105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Layer)]
		[ActionSection("Filter")]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number of colliders found for this overlap.")]
		[ActionSection("Result")]
		public FsmInt collidersCount;

		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the next collider in a GameObject variable.")]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Get the 2d position of the next ray hit point and store it in a variable.")]
		public FsmVector2 storeNextHitPoint;

		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Get the 2d normal at the next hit point and store it in a variable.\nNote, this is a direction vector not a rotation.")]
		public FsmVector2 storeNextHitNormal;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Get the distance along the ray to the next hit point and store it in a variable.")]
		public FsmFloat storeNextHitDistance;

		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RaycastHit2D[] hits;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int colliderCount;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int nextColliderIndex;

		[Token(Token = "0x600247E")]
		[Address(RVA = "0x12A2A98", Offset = "0x12A2A98", VA = "0x12A2A98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600247F")]
		[Address(RVA = "0x12A2C98", Offset = "0x12A2C98", VA = "0x12A2C98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002480")]
		[Address(RVA = "0x12A3004", Offset = "0x12A3004", VA = "0x12A3004")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6002481")]
		[Address(RVA = "0x12A2D28", Offset = "0x12A2D28", VA = "0x12A2D28")]
		private RaycastHit2D[] GetLineCastAll()
		{
			return null;
		}

		[Token(Token = "0x6002482")]
		[Address(RVA = "0x12A3264", Offset = "0x12A3264", VA = "0x12A3264")]
		public GetNextLineCast2d()
		{
		}
	}
	[Token(Token = "0x200072D")]
	[Tooltip("Iterate through a list of all colliders that fall within a rectangular area.The colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetNextOverlapArea2d : FsmStateAction
	{
		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Setup")]
		[Tooltip("First corner of the rectangle area using the game object position. \nOr use firstCornerPosition parameter.")]
		public FsmOwnerDefault firstCornerGameObject;

		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("First Corner of the rectangle area as a world position. \nOr use FirstCornerGameObject parameter. If both define, will add firstCornerPosition to the FirstCornerGameObject position")]
		public FsmVector2 firstCornerPosition;

		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Second corner of the rectangle area using the game object position. \nOr use secondCornerPosition parameter.")]
		public FsmGameObject secondCornerGameObject;

		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Second Corner rectangle area as a world position. \nOr use SecondCornerGameObject parameter. If both define, will add secondCornerPosition to the SecondCornerGameObject position")]
		public FsmVector2 secondCornerPosition;

		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		[UIHint(UIHint.Variable)]
		public FsmBool resetFlag;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Pick only from these layers.")]
		[ActionSection("Filter")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("Store the number of colliders found for this overlap.")]
		public FsmInt collidersCount;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the next collider in a GameObject variable.")]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Collider2D[] colliders;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int colliderCount;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int nextColliderIndex;

		[Token(Token = "0x6002483")]
		[Address(RVA = "0x12A326C", Offset = "0x12A326C", VA = "0x12A326C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0x12A343C", Offset = "0x12A343C", VA = "0x12A343C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002485")]
		[Address(RVA = "0x12A37A0", Offset = "0x12A37A0", VA = "0x12A37A0")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6002486")]
		[Address(RVA = "0x12A34CC", Offset = "0x12A34CC", VA = "0x12A34CC")]
		private Collider2D[] GetOverlapAreaAll()
		{
			return null;
		}

		[Token(Token = "0x6002487")]
		[Address(RVA = "0x12A386C", Offset = "0x12A386C", VA = "0x12A386C")]
		public GetNextOverlapArea2d()
		{
		}
	}
	[Token(Token = "0x200072E")]
	[Tooltip("Iterate through a list of all colliders that fall within a circular area.The colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetNextOverlapCircle2d : FsmStateAction
	{
		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Setup")]
		[Tooltip("Center of the circle area. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("CEnter of the circle area as a world position. \nOr use fromGameObject parameter. If both define, will add fromPosition to the fromGameObject position")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The circle radius")]
		public FsmFloat radius;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		[UIHint(UIHint.Variable)]
		public FsmBool resetFlag;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Filter")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number of colliders found for this overlap.")]
		public FsmInt collidersCount;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[RequiredField]
		[Tooltip("Store the next collider in a GameObject variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Collider2D[] colliders;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int colliderCount;

		[Token(Token = "0x4002132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int nextColliderIndex;

		[Token(Token = "0x6002488")]
		[Address(RVA = "0x12A3874", Offset = "0x12A3874", VA = "0x12A3874", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002489")]
		[Address(RVA = "0x12A3A24", Offset = "0x12A3A24", VA = "0x12A3A24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0x12A3D24", Offset = "0x12A3D24", VA = "0x12A3D24")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0x12A3AB4", Offset = "0x12A3AB4", VA = "0x12A3AB4")]
		private Collider2D[] GetOverlapCircleAll()
		{
			return null;
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0x12A3E0C", Offset = "0x12A3E0C", VA = "0x12A3E0C")]
		public GetNextOverlapCircle2d()
		{
		}
	}
	[Token(Token = "0x200072F")]
	[Tooltip("Iterate through a list of all colliders that overlap a point in space.The colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders overlap this point.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetNextOverlapPoint2d : FsmStateAction
	{
		[Token(Token = "0x4002133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Point using the gameObject position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Point as a world position. \nOr use gameObject parameter. If both define, will add position to the gameObject position")]
		public FsmVector2 position;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		public FsmBool resetFlag;

		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Layer)]
		[ActionSection("Filter")]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("Store the number of colliders found for this overlap.")]
		public FsmInt collidersCount;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the next collider in a GameObject variable.")]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider2D[] colliders;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int colliderCount;

		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int nextColliderIndex;

		[Token(Token = "0x600248D")]
		[Address(RVA = "0x12A3E14", Offset = "0x12A3E14", VA = "0x12A3E14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600248E")]
		[Address(RVA = "0x12A3FA8", Offset = "0x12A3FA8", VA = "0x12A3FA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600248F")]
		[Address(RVA = "0x12A426C", Offset = "0x12A426C", VA = "0x12A426C")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0x12A4038", Offset = "0x12A4038", VA = "0x12A4038")]
		private Collider2D[] GetOverlapPointAll()
		{
			return null;
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0x12A4338", Offset = "0x12A4338", VA = "0x12A4338")]
		public GetNextOverlapPoint2d()
		{
		}
	}
	[Token(Token = "0x2000730")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Iterate through a list of all colliders detected by a RayCastThe colliders iterated are sorted in order of increasing Z coordinate. No iteration will take place if there are no colliders within the area.")]
	public class GetNextRayCast2d : FsmStateAction
	{
		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position. \nOr use Game Object parameter.")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4002143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector2 direction vector")]
		public FsmVector2 direction;

		[Token(Token = "0x4002144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("If you want to reset the iteration, raise this flag to true when you enter the state, it will indicate you want to start from the beginning again")]
		[UIHint(UIHint.Variable)]
		public FsmBool resetFlag;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Layer)]
		[ActionSection("Filter")]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the number of colliders found for this overlap.")]
		[ActionSection("Result")]
		public FsmInt collidersCount;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Store the next collider in a GameObject variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeNextCollider;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d position of the next ray hit point and store it in a variable.")]
		public FsmVector2 storeNextHitPoint;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d normal at the next hit point and store it in a variable.\nNote, this is a direction vector not a rotation.")]
		public FsmVector2 storeNextHitNormal;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to the next hit point and store it in a variable.")]
		public FsmFloat storeNextHitDistance;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Get the fraction along the ray to the hit point and store it in a variable. If the ray's direction vector is normalized then this value is simply the distance between the origin and the hit point. If the direction is not normalized then this distance is expressed as a 'fraction' (which could be greater than 1) of the vector's magnitude.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeNextHitFraction;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Event to send to get the next collider.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Event to send when there are no more colliders to iterate.")]
		public FsmEvent finishedEvent;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RaycastHit2D[] hits;

		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int colliderCount;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private int nextColliderIndex;

		[Token(Token = "0x6002492")]
		[Address(RVA = "0x12A4340", Offset = "0x12A4340", VA = "0x12A4340", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0x12A4548", Offset = "0x12A4548", VA = "0x12A4548", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002494")]
		[Address(RVA = "0x12A4A20", Offset = "0x12A4A20", VA = "0x12A4A20")]
		private void DoGetNextCollider()
		{
		}

		[Token(Token = "0x6002495")]
		[Address(RVA = "0x12A45D8", Offset = "0x12A45D8", VA = "0x12A45D8")]
		private RaycastHit2D[] GetRayCastAll()
		{
			return null;
		}

		[Token(Token = "0x6002496")]
		[Address(RVA = "0x12A4CB8", Offset = "0x12A4CB8", VA = "0x12A4CB8")]
		public GetNextRayCast2d()
		{
		}
	}
	[Token(Token = "0x2000731")]
	[Tooltip("Gets info on the last 2d Raycast or LineCast and store in variables.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetRayCastHit2dInfo : FsmStateAction
	{
		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit by the last Raycast and store it in a variable.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the world position of the ray hit point and store it in a variable.")]
		[Title("Hit Point")]
		public FsmVector2 point;

		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Get the normal at the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 normal;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat distance;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002497")]
		[Address(RVA = "0x12A5CC0", Offset = "0x12A5CC0", VA = "0x12A5CC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002498")]
		[Address(RVA = "0x12A5D10", Offset = "0x12A5D10", VA = "0x12A5D10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002499")]
		[Address(RVA = "0x12A5E94", Offset = "0x12A5E94", VA = "0x12A5E94", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600249A")]
		[Address(RVA = "0x12A5D3C", Offset = "0x12A5D3C", VA = "0x12A5D3C")]
		private void StoreRaycastInfo()
		{
		}

		[Token(Token = "0x600249B")]
		[Address(RVA = "0x12A5E98", Offset = "0x12A5E98", VA = "0x12A5E98")]
		public GetRayCastHit2dInfo()
		{
		}
	}
	[Token(Token = "0x2000732")]
	[Tooltip("Gets the 2d Speed of a Game Object and stores it in a Float Variable. NOTE: The Game Object must have a rigid body 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetSpeed2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The speed, or in technical terms: velocity magnitude")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeResult;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600249C")]
		[Address(RVA = "0x12A5EA0", Offset = "0x12A5EA0", VA = "0x12A5EA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0x12A5ED0", Offset = "0x12A5ED0", VA = "0x12A5ED0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600249E")]
		[Address(RVA = "0x12A600C", Offset = "0x12A600C", VA = "0x12A600C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600249F")]
		[Address(RVA = "0x12A5EFC", Offset = "0x12A5EFC", VA = "0x12A5EFC")]
		private void DoGetSpeed()
		{
		}

		[Token(Token = "0x60024A0")]
		[Address(RVA = "0x12A6010", Offset = "0x12A6010", VA = "0x12A6010")]
		public GetSpeed2d()
		{
		}
	}
	[Token(Token = "0x2000733")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Gets info on the last Trigger 2d event and store in variables.  See Unity and PlayMaker docs on Unity 2D physics.")]
	public class GetTrigger2dInfo : FsmStateAction
	{
		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the GameObject hit.")]
		public FsmGameObject gameObjectHit;

		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The number of separate shaped regions in the collider.")]
		[UIHint(UIHint.Variable)]
		public FsmInt shapeCount;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Useful for triggering different effects. Audio, particles...")]
		[UIHint(UIHint.Variable)]
		public FsmString physics2dMaterialName;

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0x12A6058", Offset = "0x12A6058", VA = "0x12A6058", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0x12A6090", Offset = "0x12A6090", VA = "0x12A6090")]
		private void StoreTriggerInfo()
		{
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0x12A6200", Offset = "0x12A6200", VA = "0x12A6200", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024A4")]
		[Address(RVA = "0x12A621C", Offset = "0x12A621C", VA = "0x12A621C")]
		public GetTrigger2dInfo()
		{
		}
	}
	[Token(Token = "0x2000734")]
	[Tooltip("Gets the 2d Velocity of a Game Object and stores it in a Vector2 Variable or each Axis in a Float Variable. NOTE: The Game Object must have a Rigid Body 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class GetVelocity2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The velocity")]
		public FsmVector2 vector;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The x value of the velocity")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The y value of the velocity")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The space reference to express the velocity")]
		public Space space;

		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024A5")]
		[Address(RVA = "0x12A6224", Offset = "0x12A6224", VA = "0x12A6224", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024A6")]
		[Address(RVA = "0x12A6278", Offset = "0x12A6278", VA = "0x12A6278", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0x12A63B4", Offset = "0x12A63B4", VA = "0x12A63B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0x12A62A4", Offset = "0x12A62A4", VA = "0x12A62A4")]
		private void DoGetVelocity()
		{
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0x12A63B8", Offset = "0x12A63B8", VA = "0x12A63B8")]
		public GetVelocity2d()
		{
		}
	}
	[Token(Token = "0x2000735")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Is the rigidbody2D constrained from rotating? Note: Prefer SetRigidBody2dConstraints when working in Unity 5 or higher.")]
	public class IsFixedAngle2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if the Rigidbody2D does have fixed angle")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if the Rigidbody2D doesn't have fixed angle")]
		public FsmEvent falseEvent;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the fixedAngle flag")]
		[UIHint(UIHint.Variable)]
		public FsmBool store;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0x12A6400", Offset = "0x12A6400", VA = "0x12A6400", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0x12A6450", Offset = "0x12A6450", VA = "0x12A6450", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024AC")]
		[Address(RVA = "0x12A6554", Offset = "0x12A6554", VA = "0x12A6554", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024AD")]
		[Address(RVA = "0x12A647C", Offset = "0x12A647C", VA = "0x12A647C")]
		private void DoIsFixedAngle()
		{
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0x12A6558", Offset = "0x12A6558", VA = "0x12A6558")]
		public IsFixedAngle2d()
		{
		}
	}
	[Token(Token = "0x2000736")]
	[Tooltip("Tests if a Game Object's Rigid Body 2D is Kinematic.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class IsKinematic2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("the GameObject with a Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event Sent if Kinematic")]
		public FsmEvent trueEvent;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if not Kinematic")]
		public FsmEvent falseEvent;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Kinematic state")]
		public FsmBool store;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0x12A65A0", Offset = "0x12A65A0", VA = "0x12A65A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0x12A65F0", Offset = "0x12A65F0", VA = "0x12A65F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0x12A66F4", Offset = "0x12A66F4", VA = "0x12A66F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0x12A661C", Offset = "0x12A661C", VA = "0x12A661C")]
		private void DoIsKinematic()
		{
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0x12A66F8", Offset = "0x12A66F8", VA = "0x12A66F8")]
		public IsKinematic2d()
		{
		}
	}
	[Token(Token = "0x2000737")]
	[Tooltip("Tests if a Game Object's Rigidbody 2D is sleeping.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class IsSleeping2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if sleeping")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if not sleeping")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Boolean variable")]
		public FsmBool store;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0x12A6740", Offset = "0x12A6740", VA = "0x12A6740", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0x12A6790", Offset = "0x12A6790", VA = "0x12A6790", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0x12A6894", Offset = "0x12A6894", VA = "0x12A6894", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0x12A67BC", Offset = "0x12A67BC", VA = "0x12A67BC")]
		private void DoIsSleeping()
		{
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0x12A6898", Offset = "0x12A6898", VA = "0x12A6898")]
		public IsSleeping2d()
		{
		}
	}
	[Token(Token = "0x2000738")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Casts a Ray against all Colliders in the scene.A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and direction.Use GetRaycastHit2dInfo to get more detailed info.")]
	public class LineCast2d : FsmStateAction
	{
		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add fromPosition to the fromGameObject position")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("End ray at game object position. \nOr use From Position parameter.")]
		public FsmGameObject toGameObject;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("End ray at a vector2 world position. \nOr use fromGameObject parameter. If both define, will add toPosition to the ToGameObject position")]
		public FsmVector2 toPosition;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. leave to none for no effect")]
		public FsmInt minDepth;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. leave to none")]
		public FsmInt maxDepth;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event to send if the ray hits an object.")]
		[ActionSection("Result")]
		public FsmEvent hitEvent;

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidHit;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the game object hit in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeHitObject;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d position of the ray hit point and store it in a variable.")]
		public FsmVector2 storeHitPoint;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d normal at the hit point and store it in a variable.\nNote, this is a direction vector not a rotation.")]
		public FsmVector2 storeHitNormal;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ActionSection("Filter")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ActionSection("Debug")]
		[Tooltip("The color to use for the debug line.")]
		public FsmColor debugColor;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform _fromTrans;

		[Token(Token = "0x4002188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform _toTrans;

		[Token(Token = "0x4002189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int repeat;

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0x12A68E0", Offset = "0x12A68E0", VA = "0x12A68E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0x12A6AB8", Offset = "0x12A6AB8", VA = "0x12A6AB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0x12A7048", Offset = "0x12A7048", VA = "0x12A7048", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0x12A6BE8", Offset = "0x12A6BE8", VA = "0x12A6BE8")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0x12A7060", Offset = "0x12A7060", VA = "0x12A7060")]
		public LineCast2d()
		{
		}
	}
	[Token(Token = "0x2000739")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a 2d Game Object on it's z axis so its forward vector points at a 2d or 3d position.")]
	public class LookAt2d : FsmStateAction
	{
		[Token(Token = "0x400218A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The 2d position to Look At.")]
		public FsmVector2 vector2Target;

		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The 3d position to Look At. If not set to none, will be added to the 2d target")]
		public FsmVector3 vector3Target;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the GameObject starting offset. In degrees. 0 if your object is facing right, 180 if facing left etc...")]
		public FsmFloat rotationOffset;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Draw a debug line from the GameObject to the Target.")]
		[Title("Draw Debug Line")]
		public FsmBool debug;

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Color to use for the debug line.")]
		public FsmColor debugLineColor;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024BE")]
		[Address(RVA = "0x12A7068", Offset = "0x12A7068", VA = "0x12A7068", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024BF")]
		[Address(RVA = "0x12A7144", Offset = "0x12A7144", VA = "0x12A7144", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0x12A743C", Offset = "0x12A743C", VA = "0x12A743C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024C1")]
		[Address(RVA = "0x12A7170", Offset = "0x12A7170", VA = "0x12A7170")]
		private void DoLookAt()
		{
		}

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0x12A7440", Offset = "0x12A7440", VA = "0x12A7440")]
		public LookAt2d()
		{
		}
	}
	[Token(Token = "0x200073A")]
	[Tooltip("Rotates a 2d Game Object on it's z axis so its forward vector points at a Target.")]
	[ActionCategory(ActionCategory.Transform)]
	public class LookAt2dGameObject : FsmStateAction
	{
		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject to Look At.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set the GameObject starting offset. In degrees. 0 if your object is facing right, 180 if facing left etc...")]
		public FsmFloat rotationOffset;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Title("Draw Debug Line")]
		[Tooltip("Draw a debug line from the GameObject to the Target.")]
		public FsmBool debug;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Color to use for the debug line.")]
		public FsmColor debugLineColor;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject go;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject goTarget;

		[Token(Token = "0x60024C3")]
		[Address(RVA = "0x12A7450", Offset = "0x12A7450", VA = "0x12A7450", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024C4")]
		[Address(RVA = "0x12A74C8", Offset = "0x12A74C8", VA = "0x12A74C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024C5")]
		[Address(RVA = "0x12A782C", Offset = "0x12A782C", VA = "0x12A782C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024C6")]
		[Address(RVA = "0x12A74F4", Offset = "0x12A74F4", VA = "0x12A74F4")]
		private void DoLookAt()
		{
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0x12A7830", Offset = "0x12A7830", VA = "0x12A7830")]
		public LookAt2dGameObject()
		{
		}
	}
	[Token(Token = "0x200073B")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Perform a Mouse Pick on a 2d scene and stores the results. Use Ray Distance to set how close the camera must be to pick the 2d object.")]
	public class MousePick2d : FsmStateAction
	{
		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store if a GameObject was picked in a Bool variable. True if a GameObject was picked, otherwise false.")]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked GameObject in a variable.")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x400219B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked point in a variable.")]
		public FsmVector2 storePoint;

		[Token(Token = "0x400219C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x400219D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x400219E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0x12A7840", Offset = "0x12A7840", VA = "0x12A7840", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0x12A78EC", Offset = "0x12A78EC", VA = "0x12A78EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024CA")]
		[Address(RVA = "0x12A7B90", Offset = "0x12A7B90", VA = "0x12A7B90", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024CB")]
		[Address(RVA = "0x12A7918", Offset = "0x12A7918", VA = "0x12A7918")]
		private void DoMousePick2d()
		{
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0x12A7B94", Offset = "0x12A7B94", VA = "0x12A7B94")]
		public MousePick2d()
		{
		}
	}
	[Token(Token = "0x200073C")]
	[Tooltip("Sends Events based on mouse interactions with a 2d Game Object: MouseOver, MouseDown, MouseUp, MouseOff.")]
	[ActionCategory(ActionCategory.Input)]
	public class MousePick2dEvent : FsmStateAction
	{
		[Token(Token = "0x400219F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a Collider2D attached.")]
		[CheckForComponent(typeof(Collider2D))]
		public FsmOwnerDefault GameObject;

		[Token(Token = "0x40021A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send when the mouse is over the GameObject.")]
		public FsmEvent mouseOver;

		[Token(Token = "0x40021A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the mouse is pressed while over the GameObject.")]
		public FsmEvent mouseDown;

		[Token(Token = "0x40021A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the mouse is released while over the GameObject.")]
		public FsmEvent mouseUp;

		[Token(Token = "0x40021A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the mouse moves off the GameObject.")]
		public FsmEvent mouseOff;

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x40021A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0x12A7B9C", Offset = "0x12A7B9C", VA = "0x12A7B9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0x12A7C6C", Offset = "0x12A7C6C", VA = "0x12A7C6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0x12A7DB4", Offset = "0x12A7DB4", VA = "0x12A7DB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024D0")]
		[Address(RVA = "0x12A7C98", Offset = "0x12A7C98", VA = "0x12A7C98")]
		private void DoMousePickEvent()
		{
		}

		[Token(Token = "0x60024D1")]
		[Address(RVA = "0x12A7DB8", Offset = "0x12A7DB8", VA = "0x12A7DB8")]
		private bool DoRaycast()
		{
			return default(bool);
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0x12A7FE8", Offset = "0x12A7FE8", VA = "0x12A7FE8")]
		public MousePick2dEvent()
		{
		}
	}
	[Token(Token = "0x200073D")]
	[Tooltip("Moves a Game Object's RigidBody2D to a new position. Unlike SetPosition this will respect physics collisions.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class MovePosition2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40021A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to move.")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Movement vector.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector;

		[Token(Token = "0x40021A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x40021AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x40021AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x40021AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0x12A7FF0", Offset = "0x12A7FF0", VA = "0x12A7FF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0x12A80C0", Offset = "0x12A80C0", VA = "0x12A80C0", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60024D5")]
		[Address(RVA = "0x12A80E0", Offset = "0x12A80E0", VA = "0x12A80E0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0x12A810C", Offset = "0x12A810C", VA = "0x12A810C")]
		private void DoMovePosition()
		{
		}

		[Token(Token = "0x60024D7")]
		[Address(RVA = "0x12A8330", Offset = "0x12A8330", VA = "0x12A8330")]
		public MovePosition2d()
		{
		}
	}
	[Token(Token = "0x200073E")]
	[Tooltip("Casts a Ray against all Colliders in the scene. A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported. Use GetRaycastHit2dInfo to get more detailed info.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class RayCast2d : FsmStateAction
	{
		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		[ActionSection("Setup")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector2 world position, or offset from the GameObject's position.")]
		public FsmVector2 fromPosition;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A vector2 direction vector")]
		public FsmVector2 direction;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Cast the ray in world or local space. Note if no Game Object is specified, the direction is in world space.")]
		public Space space;

		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The length of the ray. Set to -1 for infinity.")]
		public FsmFloat distance;

		[Token(Token = "0x40021B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Only include objects with a Z coordinate (depth) greater than this value. Leave as None for no filtering.")]
		public FsmInt minDepth;

		[Token(Token = "0x40021B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Only include objects with a Z coordinate (depth) less than this value. Leave as none for no filtering.")]
		public FsmInt maxDepth;

		[Token(Token = "0x40021B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ActionSection("Result")]
		[Tooltip("Event to send if the ray hits an object.")]
		[UIHint(UIHint.Variable)]
		public FsmEvent hitEvent;

		[Token(Token = "0x40021B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		public FsmBool storeDidHit;

		[Token(Token = "0x40021B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the game object hit in a variable.")]
		public FsmGameObject storeHitObject;

		[Token(Token = "0x40021B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d position of the ray hit point and store it in a variable.")]
		public FsmVector2 storeHitPoint;

		[Token(Token = "0x40021B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the 2d normal at the hit point and store it in a variable. \nNote, this is a direction vector not a rotation.")]
		public FsmVector2 storeHitNormal;

		[Token(Token = "0x40021B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the distance along the ray to the hit point and store it in a variable.")]
		public FsmFloat storeHitDistance;

		[Token(Token = "0x40021BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Get the fraction along the ray to the hit point and store it in a variable. If the ray's direction vector is normalized then this value is simply the distance between the origin and the hit point. If the direction is not normalized then this distance is expressed as a 'fraction' (which could be greater than 1) of the vector's magnitude.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeHitFraction;

		[Token(Token = "0x40021BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Set how often to cast a ray. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nBecause raycasts can get expensive use the highest repeat interval you can get away with.")]
		[ActionSection("Filter")]
		public FsmInt repeatInterval;

		[Token(Token = "0x40021BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x40021BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x40021BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The color to use for the debug line.")]
		[ActionSection("Debug")]
		public FsmColor debugColor;

		[Token(Token = "0x40021BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Draw a debug line. Note: Check Gizmos in the Game View to see it in game.")]
		public FsmBool debug;

		[Token(Token = "0x40021C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform _transform;

		[Token(Token = "0x40021C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int repeat;

		[Token(Token = "0x60024D8")]
		[Address(RVA = "0x12A8378", Offset = "0x12A8378", VA = "0x12A8378", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0x12A85CC", Offset = "0x12A85CC", VA = "0x12A85CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024DA")]
		[Address(RVA = "0x12A8CEC", Offset = "0x12A8CEC", VA = "0x12A8CEC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024DB")]
		[Address(RVA = "0x12A86A0", Offset = "0x12A86A0", VA = "0x12A86A0")]
		private void DoRaycast()
		{
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0x12A8D04", Offset = "0x12A8D04", VA = "0x12A8D04")]
		public RayCast2d()
		{
		}
	}
	[Token(Token = "0x200073F")]
	[ActionCategory(ActionCategory.Input)]
	[Tooltip("Perform a raycast into the 2d scene using screen coordinates and stores the results. Use Ray Distance to set how close the camera must be to pick the 2d object. NOTE: Uses the MainCamera!")]
	public class ScreenPick2d : FsmStateAction
	{
		[Token(Token = "0x40021C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A Vector3 screen position. Commonly stored by other actions.")]
		public FsmVector3 screenVector;

		[Token(Token = "0x40021C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("X position on screen.")]
		public FsmFloat screenX;

		[Token(Token = "0x40021C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Y position on screen.")]
		public FsmFloat screenY;

		[Token(Token = "0x40021C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Are the supplied screen coordinates normalized (0-1), or in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x40021C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store whether the Screen pick did pick a GameObject")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidPickObject;

		[Token(Token = "0x40021C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked GameObject")]
		public FsmGameObject storeGameObject;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the picked position in world Space")]
		public FsmVector3 storePoint;

		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x40021CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Invert the mask, so you pick from all layers except those defined above.")]
		public FsmBool invertMask;

		[Token(Token = "0x40021CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024DD")]
		[Address(RVA = "0x12A8D0C", Offset = "0x12A8D0C", VA = "0x12A8D0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0x12A8E94", Offset = "0x12A8E94", VA = "0x12A8E94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0x12A9238", Offset = "0x12A9238", VA = "0x12A9238", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0x12A8EC0", Offset = "0x12A8EC0", VA = "0x12A8EC0")]
		private void DoScreenPick()
		{
		}

		[Token(Token = "0x60024E1")]
		[Address(RVA = "0x12A923C", Offset = "0x12A923C", VA = "0x12A923C")]
		public ScreenPick2d()
		{
		}
	}
	[Token(Token = "0x2000740")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Set the isTrigger option of a Collider2D. Optionally set all collider2D found on the gameobject Target.")]
	public class SetCollider2dIsTrigger : FsmStateAction
	{
		[Token(Token = "0x40021CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with the Collider2D attached")]
		[CheckForComponent(typeof(Collider2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The flag value")]
		[RequiredField]
		public FsmBool isTrigger;

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set all Colliders on the GameObject target")]
		public bool setAllColliders;

		[Token(Token = "0x60024E2")]
		[Address(RVA = "0x12A9244", Offset = "0x12A9244", VA = "0x12A9244", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024E3")]
		[Address(RVA = "0x12A9280", Offset = "0x12A9280", VA = "0x12A9280", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0x12A929C", Offset = "0x12A929C", VA = "0x12A929C")]
		private void DoSetIsTrigger()
		{
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0x12A9448", Offset = "0x12A9448", VA = "0x12A9448")]
		public SetCollider2dIsTrigger()
		{
		}
	}
	[Token(Token = "0x2000741")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Sets the gravity vector, or individual axis.")]
	public class SetGravity2d : FsmStateAction
	{
		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Gravity as Vector2.")]
		public FsmVector2 vector;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Override the x value of the gravity")]
		public FsmFloat x;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Override the y value of the gravity")]
		public FsmFloat y;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0x12A9450", Offset = "0x12A9450", VA = "0x12A9450", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024E7")]
		[Address(RVA = "0x12A950C", Offset = "0x12A950C", VA = "0x12A950C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0x12A95FC", Offset = "0x12A95FC", VA = "0x12A95FC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0x12A9538", Offset = "0x12A9538", VA = "0x12A9538")]
		private void DoSetGravity()
		{
		}

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0x12A9600", Offset = "0x12A9600", VA = "0x12A9600")]
		public SetGravity2d()
		{
		}
	}
	[Token(Token = "0x2000742")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Sets The degree to which this object is affected by gravity.  NOTE: Game object must have a rigidbody 2D.")]
	public class SetGravity2dScale : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with a Rigidbody 2d attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The gravity scale effect")]
		[RequiredField]
		public FsmFloat gravityScale;

		[Token(Token = "0x60024EB")]
		[Address(RVA = "0x12A9608", Offset = "0x12A9608", VA = "0x12A9608", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024EC")]
		[Address(RVA = "0x12A963C", Offset = "0x12A963C", VA = "0x12A963C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0x12A9658", Offset = "0x12A9658", VA = "0x12A9658")]
		private void DoSetGravityScale()
		{
		}

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0x12A9714", Offset = "0x12A9714", VA = "0x12A9714")]
		public SetGravity2dScale()
		{
		}
	}
	[Token(Token = "0x2000743")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Sets the various properties of a HingeJoint2d component")]
	public class SetHingeJoint2dProperties : FsmStateAction
	{
		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(HingeJoint2D))]
		[Tooltip("The HingeJoint2d target")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should limits be placed on the range of rotation?")]
		[ActionSection("Limits")]
		public FsmBool useLimits;

		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Lower angular limit of rotation.")]
		public FsmFloat min;

		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Upper angular limit of rotation")]
		public FsmFloat max;

		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Motor")]
		[Tooltip("Should a motor force be applied automatically to the Rigidbody2D?")]
		public FsmBool useMotor;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The desired speed for the Rigidbody2D to reach as it moves with the joint.")]
		public FsmFloat motorSpeed;

		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.")]
		public FsmFloat maxMotorTorque;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HingeJoint2D _joint;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private JointMotor2D _motor;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private JointAngleLimits2D _limits;

		[Token(Token = "0x60024EF")]
		[Address(RVA = "0x12A975C", Offset = "0x12A975C", VA = "0x12A975C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0x12A98D4", Offset = "0x12A98D4", VA = "0x12A98D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0x12A9C10", Offset = "0x12A9C10", VA = "0x12A9C10", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0x12A9A04", Offset = "0x12A9A04", VA = "0x12A9A04")]
		private void SetProperties()
		{
		}

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0x12A9C14", Offset = "0x12A9C14", VA = "0x12A9C14")]
		public SetHingeJoint2dProperties()
		{
		}
	}
	[Token(Token = "0x2000744")]
	[Obsolete("This action is obsolete; use Constraints instead.")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Controls whether the rigidbody 2D should be prevented from rotating")]
	public class SetIsFixedAngle2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The flag value")]
		[RequiredField]
		public FsmBool isFixedAngle;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0x12A9C1C", Offset = "0x12A9C1C", VA = "0x12A9C1C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0x12A9C58", Offset = "0x12A9C58", VA = "0x12A9C58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0x12A9D68", Offset = "0x12A9D68", VA = "0x12A9D68", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0x12A9C84", Offset = "0x12A9C84", VA = "0x12A9C84")]
		private void DoSetIsFixedAngle()
		{
		}

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0x12A9D6C", Offset = "0x12A9D6C", VA = "0x12A9D6C")]
		public SetIsFixedAngle2d()
		{
		}
	}
	[Token(Token = "0x2000745")]
	[ActionCategory(ActionCategory.Physics2D)]
	[Tooltip("Controls whether 2D physics affects the Game Object.")]
	public class SetIsKinematic2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The isKinematic value")]
		public FsmBool isKinematic;

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0x12A9DB4", Offset = "0x12A9DB4", VA = "0x12A9DB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0x12A9DE8", Offset = "0x12A9DE8", VA = "0x12A9DE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0x12A9E04", Offset = "0x12A9E04", VA = "0x12A9E04")]
		private void DoSetIsKinematic()
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0x12A9EC4", Offset = "0x12A9EC4", VA = "0x12A9EC4")]
		public SetIsKinematic2d()
		{
		}
	}
	[Token(Token = "0x2000746")]
	[Tooltip("Sets the Mass of a Game Object's Rigid Body 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class SetMass2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40021E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Mass")]
		[RequiredField]
		[HasFloatSlider(0.1f, 10f)]
		public FsmFloat mass;

		[Token(Token = "0x60024FD")]
		[Address(RVA = "0x12A9F0C", Offset = "0x12A9F0C", VA = "0x12A9F0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0x12A9F40", Offset = "0x12A9F40", VA = "0x12A9F40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60024FF")]
		[Address(RVA = "0x12A9F5C", Offset = "0x12A9F5C", VA = "0x12A9F5C")]
		private void DoSetMass()
		{
		}

		[Token(Token = "0x6002500")]
		[Address(RVA = "0x12AA018", Offset = "0x12AA018", VA = "0x12AA018")]
		public SetMass2d()
		{
		}
	}
	[Token(Token = "0x2000747")]
	[Tooltip("Sets the 2d Velocity of a Game Object. To leave any axis unchanged, set variable to 'None'. NOTE: Game object must have a rigidbody 2D.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class SetVelocity2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40021E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		[Tooltip("The GameObject with the Rigidbody2D attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Use a Vector2 value for the velocity and/or set individual axis below. If set to None, keeps current velocity.")]
		public FsmVector2 vector;

		[Token(Token = "0x40021E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set the x value of the velocity. If None keep current x velocity.")]
		public FsmFloat x;

		[Token(Token = "0x40021EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set the y value of the velocity. If None keep current y velocity.")]
		public FsmFloat y;

		[Token(Token = "0x40021EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set velocity in local or word space.")]
		public Space space;

		[Token(Token = "0x40021EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002501")]
		[Address(RVA = "0x12AA060", Offset = "0x12AA060", VA = "0x12AA060", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002502")]
		[Address(RVA = "0x12AA130", Offset = "0x12AA130", VA = "0x12AA130", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6002503")]
		[Address(RVA = "0x12AA150", Offset = "0x12AA150", VA = "0x12AA150", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0x12AA33C", Offset = "0x12AA33C", VA = "0x12AA33C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0x12AA17C", Offset = "0x12AA17C", VA = "0x12AA17C")]
		private void DoSetVelocity()
		{
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0x12AA368", Offset = "0x12AA368", VA = "0x12AA368")]
		public SetVelocity2d()
		{
		}
	}
	[Token(Token = "0x2000748")]
	[Tooltip("Sets the various properties of a WheelJoint2d component")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class SetWheelJoint2dProperties : FsmStateAction
	{
		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(WheelJoint2D))]
		[Tooltip("The WheelJoint2d target")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Should a motor force be applied automatically to the Rigidbody2D?")]
		[ActionSection("Motor")]
		public FsmBool useMotor;

		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The desired speed for the Rigidbody2D to reach as it moves with the joint.")]
		public FsmFloat motorSpeed;

		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.")]
		public FsmFloat maxMotorTorque;

		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Suspension")]
		[Tooltip("The world angle along which the suspension will move. This provides 2D constrained motion similar to a SliderJoint2D. This is typically how suspension works in the real world.")]
		public FsmFloat angle;

		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The amount by which the suspension spring force is reduced in proportion to the movement speed.")]
		public FsmFloat dampingRatio;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The frequency at which the suspension spring oscillates.")]
		public FsmFloat frequency;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private WheelJoint2D _wj2d;

		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private JointMotor2D _motor;

		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private JointSuspension2D _suspension;

		[Token(Token = "0x6002507")]
		[Address(RVA = "0x12AA3B0", Offset = "0x12AA3B0", VA = "0x12AA3B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0x12AA528", Offset = "0x12AA528", VA = "0x12AA528", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002509")]
		[Address(RVA = "0x12AA880", Offset = "0x12AA880", VA = "0x12AA880", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0x12AA65C", Offset = "0x12AA65C", VA = "0x12AA65C")]
		private void SetProperties()
		{
		}

		[Token(Token = "0x600250B")]
		[Address(RVA = "0x12AA884", Offset = "0x12AA884", VA = "0x12AA884")]
		public SetWheelJoint2dProperties()
		{
		}
	}
	[Token(Token = "0x2000749")]
	[Tooltip("Forces a Game Object's Rigid Body 2D to Sleep at least one frame.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class Sleep2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Rigidbody2D))]
		[Tooltip("The GameObject with a Rigidbody2d attached")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x600250C")]
		[Address(RVA = "0x12AA88C", Offset = "0x12AA88C", VA = "0x12AA88C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600250D")]
		[Address(RVA = "0x12AA898", Offset = "0x12AA898", VA = "0x12AA898", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600250E")]
		[Address(RVA = "0x12AA8B4", Offset = "0x12AA8B4", VA = "0x12AA8B4")]
		private void DoSleep()
		{
		}

		[Token(Token = "0x600250F")]
		[Address(RVA = "0x12AA954", Offset = "0x12AA954", VA = "0x12AA954")]
		public Sleep2d()
		{
		}
	}
	[Token(Token = "0x200074A")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Smoothly Rotates a 2d Game Object so its right vector points at a Target. The target can be defined as a 2d Game Object or a 2d/3d world Position. If you specify both, then the position will be used as a local offset from the object's position.")]
	public class SmoothLookAt2d : FsmStateAction
	{
		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to rotate to face a target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A target GameObject.")]
		[ActionSection("Target")]
		public FsmGameObject targetObject;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A target position. If a Target Object is defined, this is used as a local offset.")]
		public FsmVector2 targetPosition2d;

		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A target position. If a Target Object is defined, this is used as a local offset.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x40021FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the GameObject starting offset. In degrees. 0 if your object is facing right, 180 if facing left etc...")]
		[ActionSection("Rotation")]
		public FsmFloat rotationOffset;

		[Token(Token = "0x40021FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0.5f, 15f)]
		[Tooltip("How fast to rotate to look at the target. Higher numbers are faster. Note, you can enter numbers outside the slider range.")]
		public FsmFloat speed;

		[Token(Token = "0x40021FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set min/max angle limits for the look at rotation. Note, you can use a scene gizmo to set the angles.")]
		public FsmBool useLimits;

		[Token(Token = "0x4002200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideIf("HideLimits")]
		[Tooltip("Min angle limit.")]
		public FsmFloat minAngle;

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Max angle limit.")]
		[HideIf("HideLimits")]
		public FsmFloat maxAngle;

		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Draw a line in the Scene View to the look at position.")]
		public FsmBool debug;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ActionSection("Finished")]
		[Tooltip("If the angle to the target is less than this, send the Finish Event below. Measured in degrees.")]
		public FsmFloat finishTolerance;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send if the angle to target is less than the Finish Tolerance.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Should the event stop running when it succeeds.")]
		public FsmBool finish;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject previousGo;

		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastRotation;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion desiredRotation;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 lookAtPos;

		[Token(Token = "0x6002510")]
		[Address(RVA = "0x12AA99C", Offset = "0x12AA99C", VA = "0x12AA99C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002511")]
		[Address(RVA = "0x12AAB28", Offset = "0x12AAB28", VA = "0x12AAB28")]
		public bool HideLimits()
		{
			return default(bool);
		}

		[Token(Token = "0x6002512")]
		[Address(RVA = "0x12AAB50", Offset = "0x12AAB50", VA = "0x12AAB50", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002513")]
		[Address(RVA = "0x12AAB70", Offset = "0x12AAB70", VA = "0x12AAB70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002514")]
		[Address(RVA = "0x12AAB7C", Offset = "0x12AAB7C", VA = "0x12AAB7C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002515")]
		[Address(RVA = "0x12AAB80", Offset = "0x12AAB80", VA = "0x12AAB80")]
		private void DoSmoothLookAt()
		{
		}

		[Token(Token = "0x6002516")]
		[Address(RVA = "0x12AB334", Offset = "0x12AB334", VA = "0x12AB334")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6002517")]
		[Address(RVA = "0x12AB3B0", Offset = "0x12AB3B0", VA = "0x12AB3B0")]
		public SmoothLookAt2d()
		{
		}
	}
	[Token(Token = "0x200074B")]
	[ActionCategory(ActionCategory.Device)]
	[Tooltip("Sends events when a 2d object is touched. Optionally filter by a fingerID. NOTE: Uses the MainCamera!")]
	public class TouchObject2dEvent : FsmStateAction
	{
		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(Collider2D))]
		[RequiredField]
		[Tooltip("The Game Object to detect touches on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Only detect touches that match this fingerID, or set to None.")]
		public FsmInt fingerId;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Events")]
		[Tooltip("Event to send on touch began.")]
		public FsmEvent touchBegan;

		[Token(Token = "0x400220D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send on touch moved.")]
		public FsmEvent touchMoved;

		[Token(Token = "0x400220E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send on stationary touch.")]
		public FsmEvent touchStationary;

		[Token(Token = "0x400220F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send on touch ended.")]
		public FsmEvent touchEnded;

		[Token(Token = "0x4002210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send on touch cancel.")]
		public FsmEvent touchCanceled;

		[Token(Token = "0x4002211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the fingerId of the touch.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Store Results")]
		public FsmInt storeFingerId;

		[Token(Token = "0x4002212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the 2d position where the object was touched.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeHitPoint;

		[Token(Token = "0x6002518")]
		[Address(RVA = "0x12AB3B8", Offset = "0x12AB3B8", VA = "0x12AB3B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002519")]
		[Address(RVA = "0x12AB4A8", Offset = "0x12AB4A8", VA = "0x12AB4A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600251A")]
		[Address(RVA = "0x12ABBFC", Offset = "0x12ABBFC", VA = "0x12ABBFC")]
		public TouchObject2dEvent()
		{
		}
	}
	[Token(Token = "0x200074C")]
	[Tooltip("Translates a Game Object's RigidBody2d. Unlike Translate2d this will respect physics collisions.")]
	[ActionCategory(ActionCategory.Physics)]
	public class TranslatePosition2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4002213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to move.")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Movement vector.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector;

		[Token(Token = "0x4002215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Movement in x axis.")]
		public FsmFloat x;

		[Token(Token = "0x4002216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Movement in y axis.")]
		public FsmFloat y;

		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Coordinate space to move in.")]
		public Space space;

		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Translate over one second")]
		public bool perSecond;

		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[Tooltip("Keep running every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600251B")]
		[Address(RVA = "0x12ABC04", Offset = "0x12ABC04", VA = "0x12ABC04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600251C")]
		[Address(RVA = "0x12ABCD8", Offset = "0x12ABCD8", VA = "0x12ABCD8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x600251D")]
		[Address(RVA = "0x12ABCF8", Offset = "0x12ABCF8", VA = "0x12ABCF8", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x600251E")]
		[Address(RVA = "0x12ABD24", Offset = "0x12ABD24", VA = "0x12ABD24")]
		private void DoTranslatePosition2d()
		{
		}

		[Token(Token = "0x600251F")]
		[Address(RVA = "0x12ABEE8", Offset = "0x12ABEE8", VA = "0x12ABEE8")]
		public TranslatePosition2d()
		{
		}
	}
	[Token(Token = "0x200074D")]
	[Tooltip("Detect 2D trigger collisions between the Owner of this FSM and other Game Objects that have RigidBody2D components. NOTE: The system events, TRIGGER ENTER 2D, TRIGGER STAY 2D, and TRIGGER EXIT 2D are sent automatically on collisions triggers with any object. Use this action to filter collision triggers by Tag.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class Trigger2dEvent : FsmStateAction
	{
		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to detect collisions on.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of trigger event to detect.")]
		public Trigger2DType trigger;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Filter by Tag.")]
		[UIHint(UIHint.TagMenu)]
		public FsmString collideTag;

		[Token(Token = "0x400221D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the trigger event is detected.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400221E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the GameObject that collided with the Owner of this FSM.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeCollider;

		[Token(Token = "0x400221F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerProxyBase cachedProxy;

		[Token(Token = "0x6002520")]
		[Address(RVA = "0x12ABF30", Offset = "0x12ABF30", VA = "0x12ABF30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002521")]
		[Address(RVA = "0x12ABFBC", Offset = "0x12ABFBC", VA = "0x12ABFBC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002522")]
		[Address(RVA = "0x12AC218", Offset = "0x12AC218", VA = "0x12AC218", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002523")]
		[Address(RVA = "0x12AC454", Offset = "0x12AC454", VA = "0x12AC454", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002524")]
		[Address(RVA = "0x12AC64C", Offset = "0x12AC64C", VA = "0x12AC64C")]
		private void UpdateCallback()
		{
		}

		[Token(Token = "0x6002525")]
		[Address(RVA = "0x12AC0C0", Offset = "0x12AC0C0", VA = "0x12AC0C0")]
		private void GetProxyComponent()
		{
		}

		[Token(Token = "0x6002526")]
		[Address(RVA = "0x12AC314", Offset = "0x12AC314", VA = "0x12AC314")]
		private void AddCallback()
		{
		}

		[Token(Token = "0x6002527")]
		[Address(RVA = "0x12AC50C", Offset = "0x12AC50C", VA = "0x12AC50C")]
		private void RemoveCallback()
		{
		}

		[Token(Token = "0x6002528")]
		[Address(RVA = "0x12AC66C", Offset = "0x12AC66C", VA = "0x12AC66C")]
		private void StoreCollisionInfo(Collider2D collisionInfo)
		{
		}

		[Token(Token = "0x6002529")]
		[Address(RVA = "0x12AC6A0", Offset = "0x12AC6A0", VA = "0x12AC6A0", Slot = "53")]
		public override void DoTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x600252A")]
		[Address(RVA = "0x12AC728", Offset = "0x12AC728", VA = "0x12AC728", Slot = "54")]
		public override void DoTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x600252B")]
		[Address(RVA = "0x12AC7B4", Offset = "0x12AC7B4", VA = "0x12AC7B4", Slot = "55")]
		public override void DoTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x600252C")]
		[Address(RVA = "0x12AC6C8", Offset = "0x12AC6C8", VA = "0x12AC6C8")]
		private void TriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x600252D")]
		[Address(RVA = "0x12AC750", Offset = "0x12AC750", VA = "0x12AC750")]
		private void TriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x600252E")]
		[Address(RVA = "0x12AC7DC", Offset = "0x12AC7DC", VA = "0x12AC7DC")]
		private void TriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x600252F")]
		[Address(RVA = "0x12AC840", Offset = "0x12AC840", VA = "0x12AC840", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002530")]
		[Address(RVA = "0x12AC86C", Offset = "0x12AC86C", VA = "0x12AC86C")]
		public Trigger2dEvent()
		{
		}
	}
	[Token(Token = "0x200074E")]
	[Tooltip("Rigid bodies 2D start sleeping when they come to rest. This action wakes up all rigid bodies 2D in the scene. E.g., if you Set Gravity 2D and want objects at rest to respond.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class WakeAllRigidBodies2d : FsmStateAction
	{
		[Token(Token = "0x4002220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Repeat every frame. Note: This would be very expensive!")]
		public bool everyFrame;

		[Token(Token = "0x6002531")]
		[Address(RVA = "0x12AC874", Offset = "0x12AC874", VA = "0x12AC874", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002532")]
		[Address(RVA = "0x12AC87C", Offset = "0x12AC87C", VA = "0x12AC87C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002533")]
		[Address(RVA = "0x12AC9B8", Offset = "0x12AC9B8", VA = "0x12AC9B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002534")]
		[Address(RVA = "0x12AC8A8", Offset = "0x12AC8A8", VA = "0x12AC8A8")]
		private void DoWakeAll()
		{
		}

		[Token(Token = "0x6002535")]
		[Address(RVA = "0x12AC9BC", Offset = "0x12AC9BC", VA = "0x12AC9BC")]
		public WakeAllRigidBodies2d()
		{
		}
	}
	[Token(Token = "0x200074F")]
	[Tooltip("Forces a Game Object's Rigid Body 2D to wake up.")]
	[ActionCategory(ActionCategory.Physics2D)]
	public class WakeUp2d : ComponentAction<Rigidbody2D>
	{
		[Token(Token = "0x4002221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with a Rigidbody2d attached")]
		[CheckForComponent(typeof(Rigidbody2D))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x6002536")]
		[Address(RVA = "0x12AC9C4", Offset = "0x12AC9C4", VA = "0x12AC9C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002537")]
		[Address(RVA = "0x12AC9D0", Offset = "0x12AC9D0", VA = "0x12AC9D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002538")]
		[Address(RVA = "0x12AC9EC", Offset = "0x12AC9EC", VA = "0x12AC9EC")]
		private void DoWakeUp()
		{
		}

		[Token(Token = "0x6002539")]
		[Address(RVA = "0x12ACA8C", Offset = "0x12ACA8C", VA = "0x12ACA8C")]
		public WakeUp2d()
		{
		}
	}
	[Token(Token = "0x2000750")]
	[ActionCategory("PlayerInput")]
	public abstract class PlayerInputActionBase : ComponentAction<PlayerInput>
	{
		[Token(Token = "0x4002222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[DisplayOrder(0)]
		[RequiredField]
		[CheckForComponent(typeof(PlayerInput))]
		[Tooltip("The GameObject with the PlayerInput component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[DisplayOrder(1)]
		[RequiredField]
		[Tooltip("An InputAction used by the PlayerInput component.")]
		[ObjectType(typeof(InputActionReference))]
		public FsmObject inputAction;

		[Token(Token = "0x4002224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected PlayerInput m_playerInput;

		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected InputAction m_inputAction;

		[Token(Token = "0x600253A")]
		[Address(RVA = "0x12ACAD4", Offset = "0x12ACAD4", VA = "0x12ACAD4", Slot = "62")]
		protected virtual void OnPerformed(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x600253B")]
		[Address(RVA = "0x12ACAD8", Offset = "0x12ACAD8", VA = "0x12ACAD8", Slot = "63")]
		protected virtual void OnCanceled(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x600253C")]
		[Address(RVA = "0x12ACADC", Offset = "0x12ACADC", VA = "0x12ACADC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600253D")]
		[Address(RVA = "0x12ACB14", Offset = "0x12ACB14", VA = "0x12ACB14")]
		protected bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x600253E")]
		[Address(RVA = "0x12ACDFC", Offset = "0x12ACDFC", VA = "0x12ACDFC")]
		private void AddDelegates()
		{
		}

		[Token(Token = "0x600253F")]
		[Address(RVA = "0x12ACD2C", Offset = "0x12ACD2C", VA = "0x12ACD2C")]
		private void RemoveDelegates()
		{
		}

		[Token(Token = "0x6002540")]
		[Address(RVA = "0x12ACECC", Offset = "0x12ACECC", VA = "0x12ACECC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002541")]
		[Address(RVA = "0x12ACEF4", Offset = "0x12ACEF4", VA = "0x12ACEF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002542")]
		[Address(RVA = "0x12ACF1C", Offset = "0x12ACF1C", VA = "0x12ACF1C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002543")]
		[Address(RVA = "0x12ACF3C", Offset = "0x12ACF3C", VA = "0x12ACF3C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002544")]
		[Address(RVA = "0x12ACF7C", Offset = "0x12ACF7C", VA = "0x12ACF7C")]
		protected PlayerInputActionBase()
		{
		}
	}
	[Token(Token = "0x2000751")]
	[Note("Make sure the Button is setup with the Press and Release Interaction to trigger Pressed and Released events.")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Sends Events based InputAction buttons in a PlayerInput component.")]
	public class PlayerInputButtonEvents : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store if the button is pressed.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPressed;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event to send if the button is pressed.")]
		public FsmEvent isPressedEvent;

		[Token(Token = "0x4002228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event to send if the button was pressed this frame.")]
		public FsmEvent wasPressedThisFrame;

		[Token(Token = "0x4002229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send if the button was released this frame.")]
		public FsmEvent wasReleasedThisFrame;

		[Token(Token = "0x6002545")]
		[Address(RVA = "0x12ACFC4", Offset = "0x12ACFC4", VA = "0x12ACFC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002546")]
		[Address(RVA = "0x12AD054", Offset = "0x12AD054", VA = "0x12AD054", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6002547")]
		[Address(RVA = "0x12AD160", Offset = "0x12AD160", VA = "0x12AD160")]
		public PlayerInputButtonEvents()
		{
		}
	}
	[Token(Token = "0x2000752")]
	[Tooltip("Sends an Event when an InputAction in a PlayerInput component is Canceled.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputCanceledEvent : PlayerInputActionBase
	{
		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The event to send on Input Canceled")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6002548")]
		[Address(RVA = "0x12AD1AC", Offset = "0x12AD1AC", VA = "0x12AD1AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002549")]
		[Address(RVA = "0x12AD1CC", Offset = "0x12AD1CC", VA = "0x12AD1CC", Slot = "63")]
		protected override void OnCanceled(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x600254A")]
		[Address(RVA = "0x12AD1F0", Offset = "0x12AD1F0", VA = "0x12AD1F0")]
		public PlayerInputCanceledEvent()
		{
		}
	}
	[Token(Token = "0x2000753")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Enable/Disable an InputAction in a PlayerInput component.")]
	public class PlayerInputEnableAction : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Enable/Disable the Input Action.")]
		[RequiredField]
		public FsmBool enable;

		[Token(Token = "0x600254B")]
		[Address(RVA = "0x12AD1F4", Offset = "0x12AD1F4", VA = "0x12AD1F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600254C")]
		[Address(RVA = "0x12AD228", Offset = "0x12AD228", VA = "0x12AD228", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x600254D")]
		[Address(RVA = "0x12AD280", Offset = "0x12AD280", VA = "0x12AD280")]
		public PlayerInputEnableAction()
		{
		}
	}
	[Token(Token = "0x2000754")]
	[Tooltip("Enable/Disable an InputActionMap in a PlayerInput component.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputEnableActionMap : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Enable/Disable the Input Action.")]
		[RequiredField]
		public FsmBool enable;

		[Token(Token = "0x600254E")]
		[Address(RVA = "0x12AD284", Offset = "0x12AD284", VA = "0x12AD284", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600254F")]
		[Address(RVA = "0x12AD2B8", Offset = "0x12AD2B8", VA = "0x12AD2B8", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6002550")]
		[Address(RVA = "0x12AD318", Offset = "0x12AD318", VA = "0x12AD318")]
		public PlayerInputEnableActionMap()
		{
		}
	}
	[Token(Token = "0x2000755")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Get the Bool value from an InputAction in a PlayerInput component.")]
	public class PlayerInputGetBool : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the Input Bool value.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeBool;

		[Token(Token = "0x6002551")]
		[Address(RVA = "0x12AD31C", Offset = "0x12AD31C", VA = "0x12AD31C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002552")]
		[Address(RVA = "0x12AD33C", Offset = "0x12AD33C", VA = "0x12AD33C", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6002553")]
		[Address(RVA = "0x12AD3A0", Offset = "0x12AD3A0", VA = "0x12AD3A0")]
		public PlayerInputGetBool()
		{
		}
	}
	[Token(Token = "0x2000756")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Get the float value from an InputAction in a PlayerInput component.")]
	public class PlayerInputGetFloat : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x400222E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Store the Input Float value.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeFloat;

		[Token(Token = "0x6002554")]
		[Address(RVA = "0x12AD3A4", Offset = "0x12AD3A4", VA = "0x12AD3A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002555")]
		[Address(RVA = "0x12AD3C4", Offset = "0x12AD3C4", VA = "0x12AD3C4", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6002556")]
		[Address(RVA = "0x12AD424", Offset = "0x12AD424", VA = "0x12AD424")]
		public PlayerInputGetFloat()
		{
		}
	}
	[Token(Token = "0x2000757")]
	[Tooltip("Gets a world direction Vector from an InputAction in a PlayerInput component. Typically used for a third person controller with Relative To set to the camera. This works like the Get Axis Vector action for the old Input System.")]
	[ActionCategory("PlayerInput")]
	public class PlayerInputGetMoveVector : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x2000758")]
		public enum AxisPlane
		{
			[Token(Token = "0x4002235")]
			XZ,
			[Token(Token = "0x4002236")]
			XY,
			[Token(Token = "0x4002237")]
			YZ
		}

		[Token(Token = "0x400222F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Sets the world axis the input maps to. The remaining axis will be set to zero.")]
		[RequiredField]
		public AxisPlane mapToPlane;

		[Token(Token = "0x4002230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Calculate a vector relative to this game object. Typically the camera.")]
		public FsmGameObject relativeTo;

		[Token(Token = "0x4002231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Normally axis values are in the range -1 to 1. Use the multiplier to make this range bigger. \nE.g., A multiplier of 100 returns values from -100 to 100.\nTypically this represents the maximum movement speed.")]
		public FsmFloat multiplier;

		[Token(Token = "0x4002232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the magnitude of the vector. Useful if you want to measure the strength of the input and react accordingly. Hint: Use {{Float Compare}}.")]
		public FsmFloat storeMagnitude;

		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeMoveVector;

		[Token(Token = "0x6002557")]
		[Address(RVA = "0x12AD428", Offset = "0x12AD428", VA = "0x12AD428", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002558")]
		[Address(RVA = "0x12AD488", Offset = "0x12AD488", VA = "0x12AD488", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x6002559")]
		[Address(RVA = "0x12AD9D4", Offset = "0x12AD9D4", VA = "0x12AD9D4")]
		public PlayerInputGetMoveVector()
		{
		}
	}
	[Token(Token = "0x2000759")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Get the Vector2 value from an InputAction in a PlayerInput component.")]
	public class PlayerInputGetVector2 : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x4002238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeVector2;

		[Token(Token = "0x4002239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeX;

		[Token(Token = "0x400223A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeY;

		[Token(Token = "0x600255A")]
		[Address(RVA = "0x12AD9D8", Offset = "0x12AD9D8", VA = "0x12AD9D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600255B")]
		[Address(RVA = "0x12ADA18", Offset = "0x12ADA18", VA = "0x12ADA18", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x600255C")]
		[Address(RVA = "0x12ADAA0", Offset = "0x12ADAA0", VA = "0x12ADAA0")]
		public PlayerInputGetVector2()
		{
		}
	}
	[Token(Token = "0x200075A")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Get the Vector2 value from a named InputAction in a PlayerInput component and store it in a Vector3 variable.")]
	public class PlayerInputGetVector2AsVector3 : PlayerInputUpdateActionBase
	{
		[Token(Token = "0x200075B")]
		public enum Mapping
		{
			[Token(Token = "0x400223E")]
			XZ,
			[Token(Token = "0x400223F")]
			XY,
			[Token(Token = "0x4002240")]
			YZ
		}

		[Token(Token = "0x400223B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Mapping mapping;

		[Token(Token = "0x400223C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeVector3;

		[Token(Token = "0x600255D")]
		[Address(RVA = "0x12ADAA4", Offset = "0x12ADAA4", VA = "0x12ADAA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600255E")]
		[Address(RVA = "0x12ADAC8", Offset = "0x12ADAC8", VA = "0x12ADAC8", Slot = "62")]
		protected override void Execute()
		{
		}

		[Token(Token = "0x600255F")]
		[Address(RVA = "0x12ADBB8", Offset = "0x12ADBB8", VA = "0x12ADBB8")]
		public PlayerInputGetVector2AsVector3()
		{
		}
	}
	[Token(Token = "0x200075C")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Sends an Event when an InputAction in a PlayerInput component is Performed.")]
	public class PlayerInputPerformedEvent : PlayerInputActionBase
	{
		[Token(Token = "0x4002241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The event to send on Input Performed")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6002560")]
		[Address(RVA = "0x12ADBBC", Offset = "0x12ADBBC", VA = "0x12ADBBC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002561")]
		[Address(RVA = "0x12ADBDC", Offset = "0x12ADBDC", VA = "0x12ADBDC", Slot = "62")]
		protected override void OnPerformed(InputAction.CallbackContext ctx)
		{
		}

		[Token(Token = "0x6002562")]
		[Address(RVA = "0x12ADC00", Offset = "0x12ADC00", VA = "0x12ADC00")]
		public PlayerInputPerformedEvent()
		{
		}
	}
	[Token(Token = "0x200075D")]
	[ActionCategory("PlayerInput")]
	[Tooltip("Sends an Event when an InputAction in a PlayerInput component is Triggered.")]
	public class PlayerInputTriggeredEvent : PlayerInputActionBase
	{
		[Token(Token = "0x4002242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The event to send on Input Triggered")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("store the input value")]
		public FsmBool storeValue;

		[Token(Token = "0x6002563")]
		[Address(RVA = "0x12ADC04", Offset = "0x12ADC04", VA = "0x12ADC04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002564")]
		[Address(RVA = "0x12ADC34", Offset = "0x12ADC34", VA = "0x12ADC34", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002565")]
		[Address(RVA = "0x12ADCB4", Offset = "0x12ADCB4", VA = "0x12ADCB4")]
		public PlayerInputTriggeredEvent()
		{
		}
	}
	[Token(Token = "0x200075E")]
	[ActionCategory("PlayerInput")]
	public abstract class PlayerInputUpdateActionBase : ComponentAction<PlayerInput>
	{
		[Token(Token = "0x200075F")]
		public enum UpdateMode
		{
			[Token(Token = "0x400224A")]
			Once,
			[Token(Token = "0x400224B")]
			Update,
			[Token(Token = "0x400224C")]
			FixedUpdate
		}

		[Token(Token = "0x4002244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[DisplayOrder(0)]
		[RequiredField]
		[CheckForComponent(typeof(PlayerInput))]
		[Tooltip("The GameObject with the PlayerInput component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("An InputAction used by the PlayerInput component.")]
		[ObjectType(typeof(InputActionReference))]
		[DisplayOrder(1)]
		[RequiredField]
		public FsmObject inputAction;

		[Token(Token = "0x4002246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("When to read the Input.")]
		public UpdateMode updateMode;

		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected PlayerInput playerInput;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected InputAction action;

		[Token(Token = "0x6002566")]
		[Address(RVA = "0x12AD014", Offset = "0x12AD014", VA = "0x12AD014", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002567")]
		[Address(RVA = "0x12ADCB8", Offset = "0x12ADCB8", VA = "0x12ADCB8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002568")]
		[Address(RVA = "0x12ADCE4", Offset = "0x12ADCE4", VA = "0x12ADCE4")]
		protected bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6002569")]
		[Address(RVA = "0x12ADEEC", Offset = "0x12ADEEC", VA = "0x12ADEEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600256A")]
		[Address(RVA = "0x12ADF3C", Offset = "0x12ADF3C", VA = "0x12ADF3C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600256B")]
		[Address(RVA = "0x12ADF84", Offset = "0x12ADF84", VA = "0x12ADF84", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x600256C")]
		[Address(RVA = "0x12ADFCC", Offset = "0x12ADFCC", VA = "0x12ADFCC", Slot = "62")]
		protected virtual void Execute()
		{
		}

		[Token(Token = "0x600256D")]
		[Address(RVA = "0x12ADFD0", Offset = "0x12ADFD0", VA = "0x12ADFD0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600256E")]
		[Address(RVA = "0x12AD164", Offset = "0x12AD164", VA = "0x12AD164")]
		protected PlayerInputUpdateActionBase()
		{
		}
	}
	[Token(Token = "0x2000760")]
	[Tooltip("Removes all keys and values from the preferences. Use with caution.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsDeleteAll : FsmStateAction
	{
		[Token(Token = "0x600256F")]
		[Address(RVA = "0x12ADFDC", Offset = "0x12ADFDC", VA = "0x12ADFDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002570")]
		[Address(RVA = "0x12ADFE0", Offset = "0x12ADFE0", VA = "0x12ADFE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002571")]
		[Address(RVA = "0x12AE000", Offset = "0x12AE000", VA = "0x12AE000")]
		public PlayerPrefsDeleteAll()
		{
		}
	}
	[Token(Token = "0x2000761")]
	[Tooltip("Removes key and its corresponding value from the preferences.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsDeleteKey : FsmStateAction
	{
		[Token(Token = "0x400224D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the PlayerPref.")]
		public FsmString key;

		[Token(Token = "0x6002572")]
		[Address(RVA = "0x12AE008", Offset = "0x12AE008", VA = "0x12AE008", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002573")]
		[Address(RVA = "0x12AE060", Offset = "0x12AE060", VA = "0x12AE060", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002574")]
		[Address(RVA = "0x12AE0FC", Offset = "0x12AE0FC", VA = "0x12AE0FC")]
		public PlayerPrefsDeleteKey()
		{
		}
	}
	[Token(Token = "0x2000762")]
	[Tooltip("Returns the value corresponding to key in the preference file if it exists.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsGetFloat : FsmStateAction
	{
		[Token(Token = "0x400224E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Count", "Key", "Variable")]
		[Tooltip("Case sensitive key.")]
		public FsmString[] keys;

		[Token(Token = "0x400224F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the float in a Float Variable.")]
		public FsmFloat[] variables;

		[Token(Token = "0x6002575")]
		[Address(RVA = "0x12AE104", Offset = "0x12AE104", VA = "0x12AE104", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002576")]
		[Address(RVA = "0x12AE194", Offset = "0x12AE194", VA = "0x12AE194", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002577")]
		[Address(RVA = "0x12AE314", Offset = "0x12AE314", VA = "0x12AE314")]
		public PlayerPrefsGetFloat()
		{
		}
	}
	[Token(Token = "0x2000763")]
	[Tooltip("Returns the value corresponding to key in the preference file if it exists.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsGetInt : FsmStateAction
	{
		[Token(Token = "0x4002250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		[CompoundArray("Count", "Key", "Variable")]
		public FsmString[] keys;

		[Token(Token = "0x4002251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the integer in an Int Variable.")]
		public FsmInt[] variables;

		[Token(Token = "0x6002578")]
		[Address(RVA = "0x12AE31C", Offset = "0x12AE31C", VA = "0x12AE31C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002579")]
		[Address(RVA = "0x12AE3AC", Offset = "0x12AE3AC", VA = "0x12AE3AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600257A")]
		[Address(RVA = "0x12AE534", Offset = "0x12AE534", VA = "0x12AE534")]
		public PlayerPrefsGetInt()
		{
		}
	}
	[Token(Token = "0x2000764")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Returns the value corresponding to key in the preference file if it exists.")]
	public class PlayerPrefsGetString : FsmStateAction
	{
		[Token(Token = "0x4002252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Count", "Key", "Variable")]
		[Tooltip("Case sensitive key.")]
		public FsmString[] keys;

		[Token(Token = "0x4002253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the string in a String Variable.")]
		public FsmString[] variables;

		[Token(Token = "0x600257B")]
		[Address(RVA = "0x12AE53C", Offset = "0x12AE53C", VA = "0x12AE53C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600257C")]
		[Address(RVA = "0x12AE5B0", Offset = "0x12AE5B0", VA = "0x12AE5B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600257D")]
		[Address(RVA = "0x12AE744", Offset = "0x12AE744", VA = "0x12AE744")]
		public PlayerPrefsGetString()
		{
		}
	}
	[Token(Token = "0x2000765")]
	[Tooltip("Returns true if PlayerPref key exists in the preferences.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsHasKey : FsmStateAction
	{
		[Token(Token = "0x4002254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the PlayerPref to test for.")]
		[RequiredField]
		public FsmString key;

		[Token(Token = "0x4002255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Title("Store Result")]
		[Tooltip("Store the result in a bool variable.")]
		public FsmBool variable;

		[Token(Token = "0x4002256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the key exists.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the key does not exist.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x600257E")]
		[Address(RVA = "0x12AE74C", Offset = "0x12AE74C", VA = "0x12AE74C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600257F")]
		[Address(RVA = "0x12AE7A4", Offset = "0x12AE7A4", VA = "0x12AE7A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002580")]
		[Address(RVA = "0x12AE888", Offset = "0x12AE888", VA = "0x12AE888")]
		public PlayerPrefsHasKey()
		{
		}
	}
	[Token(Token = "0x2000766")]
	[Tooltip("Load variable value saved with {{PlayerPrefs Save Variable}}. The Key should be a unique identifier for the variable.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsLoadVariable : FsmStateAction
	{
		[Token(Token = "0x4002258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		public FsmString key;

		[Token(Token = "0x4002259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to load.")]
		public FsmVar variable;

		[Token(Token = "0x6002581")]
		[Address(RVA = "0x12AE890", Offset = "0x12AE890", VA = "0x12AE890", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002582")]
		[Address(RVA = "0x12AE8B8", Offset = "0x12AE8B8", VA = "0x12AE8B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002583")]
		[Address(RVA = "0x12AEA48", Offset = "0x12AEA48", VA = "0x12AEA48")]
		public PlayerPrefsLoadVariable()
		{
		}
	}
	[Token(Token = "0x2000767")]
	[Tooltip("Save a variable value in PlayerPrefs. You can load the value later with {{PlayerPrefs Load Variable}}.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsSaveVariable : FsmStateAction
	{
		[Token(Token = "0x400225A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		public FsmString key;

		[Token(Token = "0x400225B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to save.")]
		public FsmVar variable;

		[Token(Token = "0x6002584")]
		[Address(RVA = "0x12AEA50", Offset = "0x12AEA50", VA = "0x12AEA50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002585")]
		[Address(RVA = "0x12AEA78", Offset = "0x12AEA78", VA = "0x12AEA78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002586")]
		[Address(RVA = "0x12AEAF4", Offset = "0x12AEAF4", VA = "0x12AEAF4")]
		public PlayerPrefsSaveVariable()
		{
		}
	}
	[Token(Token = "0x2000768")]
	[ActionCategory("PlayerPrefs")]
	[Tooltip("Sets the value of the preference identified by key. Lets you save a float value that you can load later with {{PlayerPrefs Get Float}}.")]
	public class PlayerPrefsSetFloat : FsmStateAction
	{
		[Token(Token = "0x400225C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Count", "Key", "Value")]
		[Tooltip("Case sensitive key.")]
		public FsmString[] keys;

		[Token(Token = "0x400225D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to save.")]
		public FsmFloat[] values;

		[Token(Token = "0x6002587")]
		[Address(RVA = "0x12AEAFC", Offset = "0x12AEAFC", VA = "0x12AEAFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002588")]
		[Address(RVA = "0x12AEB8C", Offset = "0x12AEB8C", VA = "0x12AEB8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002589")]
		[Address(RVA = "0x12AECE4", Offset = "0x12AECE4", VA = "0x12AECE4")]
		public PlayerPrefsSetFloat()
		{
		}
	}
	[Token(Token = "0x2000769")]
	[Tooltip("Sets the value of the preference identified by key. Lets you save an int value that you can load later with {{PlayerPrefs Get Int}}.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsSetInt : FsmStateAction
	{
		[Token(Token = "0x400225E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Case sensitive key.")]
		[CompoundArray("Count", "Key", "Value")]
		public FsmString[] keys;

		[Token(Token = "0x400225F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to save.")]
		public FsmInt[] values;

		[Token(Token = "0x600258A")]
		[Address(RVA = "0x12AECEC", Offset = "0x12AECEC", VA = "0x12AECEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600258B")]
		[Address(RVA = "0x12AED7C", Offset = "0x12AED7C", VA = "0x12AED7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600258C")]
		[Address(RVA = "0x12AEEDC", Offset = "0x12AEEDC", VA = "0x12AEEDC")]
		public PlayerPrefsSetInt()
		{
		}
	}
	[Token(Token = "0x200076A")]
	[Tooltip("Sets the value of the preference identified by key. Lets you save a string that you can load later with {{PlayerPrefs Get String}}.")]
	[ActionCategory("PlayerPrefs")]
	public class PlayerPrefsSetString : FsmStateAction
	{
		[Token(Token = "0x4002260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Count", "Key", "Value")]
		[Tooltip("Case sensitive key.")]
		public FsmString[] keys;

		[Token(Token = "0x4002261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to save.")]
		public FsmString[] values;

		[Token(Token = "0x600258D")]
		[Address(RVA = "0x12AEEE4", Offset = "0x12AEEE4", VA = "0x12AEEE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600258E")]
		[Address(RVA = "0x12AEF58", Offset = "0x12AEF58", VA = "0x12AEF58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600258F")]
		[Address(RVA = "0x12AF0B8", Offset = "0x12AF0B8", VA = "0x12AF0B8")]
		public PlayerPrefsSetString()
		{
		}
	}
	[Token(Token = "0x200076B")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	[ActionCategory("Substance")]
	[Tooltip("Rebuilds all dirty textures. By default the rebuild is spread over multiple frames so it won't halt the game. Check Immediately to rebuild all textures in a single frame.")]
	public class RebuildTextures : FsmStateAction
	{
		[Token(Token = "0x4002262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Substance material.")]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4002263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Rebuild now!")]
		[RequiredField]
		public FsmBool immediately;

		[Token(Token = "0x4002264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful if you're animating Substance parameters.")]
		public bool everyFrame;

		[Token(Token = "0x6002590")]
		[Address(RVA = "0x12AF0C0", Offset = "0x12AF0C0", VA = "0x12AF0C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002591")]
		[Address(RVA = "0x12AF0FC", Offset = "0x12AF0FC", VA = "0x12AF0FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002592")]
		[Address(RVA = "0x12AF114", Offset = "0x12AF114", VA = "0x12AF114", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002593")]
		[Address(RVA = "0x12AF110", Offset = "0x12AF110", VA = "0x12AF110")]
		private void DoRebuildTextures()
		{
		}

		[Token(Token = "0x6002594")]
		[Address(RVA = "0x12AF118", Offset = "0x12AF118", VA = "0x12AF118")]
		public RebuildTextures()
		{
		}
	}
	[Token(Token = "0x200076C")]
	[Tooltip("Set a named bool property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	[ActionCategory("Substance")]
	public class SetProceduralBoolean : FsmStateAction
	{
		[Token(Token = "0x4002265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Substance Material.")]
		[RequiredField]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4002266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The named bool property in the material.")]
		public FsmString boolProperty;

		[Token(Token = "0x4002267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value to set the property to.")]
		public FsmBool boolValue;

		[Token(Token = "0x4002268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x6002595")]
		[Address(RVA = "0x12AF120", Offset = "0x12AF120", VA = "0x12AF120", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002596")]
		[Address(RVA = "0x12AF1AC", Offset = "0x12AF1AC", VA = "0x12AF1AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002597")]
		[Address(RVA = "0x12AF1C4", Offset = "0x12AF1C4", VA = "0x12AF1C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002598")]
		[Address(RVA = "0x12AF1C0", Offset = "0x12AF1C0", VA = "0x12AF1C0")]
		private void DoSetProceduralFloat()
		{
		}

		[Token(Token = "0x6002599")]
		[Address(RVA = "0x12AF1C8", Offset = "0x12AF1C8", VA = "0x12AF1C8")]
		public SetProceduralBoolean()
		{
		}
	}
	[Token(Token = "0x200076D")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	[Tooltip("Set a named color property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[ActionCategory("Substance")]
	public class SetProceduralColor : FsmStateAction
	{
		[Token(Token = "0x4002269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Substance Material.")]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x400226A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The named color property in the material.")]
		public FsmString colorProperty;

		[Token(Token = "0x400226B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value to set the property to.")]
		public FsmColor colorValue;

		[Token(Token = "0x400226C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x600259A")]
		[Address(RVA = "0x12AF1D0", Offset = "0x12AF1D0", VA = "0x12AF1D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600259B")]
		[Address(RVA = "0x12AF268", Offset = "0x12AF268", VA = "0x12AF268", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600259C")]
		[Address(RVA = "0x12AF280", Offset = "0x12AF280", VA = "0x12AF280", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600259D")]
		[Address(RVA = "0x12AF27C", Offset = "0x12AF27C", VA = "0x12AF27C")]
		private void DoSetProceduralFloat()
		{
		}

		[Token(Token = "0x600259E")]
		[Address(RVA = "0x12AF284", Offset = "0x12AF284", VA = "0x12AF284")]
		public SetProceduralColor()
		{
		}
	}
	[Token(Token = "0x200076E")]
	[Tooltip("Set a named float property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[ActionCategory("Substance")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	public class SetProceduralFloat : FsmStateAction
	{
		[Token(Token = "0x400226D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Substance Material.")]
		[RequiredField]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x400226E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The named float property in the material.")]
		[RequiredField]
		public FsmString floatProperty;

		[Token(Token = "0x400226F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The value to set the property to.")]
		[RequiredField]
		public FsmFloat floatValue;

		[Token(Token = "0x4002270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x600259F")]
		[Address(RVA = "0x12AF28C", Offset = "0x12AF28C", VA = "0x12AF28C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025A0")]
		[Address(RVA = "0x12AF318", Offset = "0x12AF318", VA = "0x12AF318", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025A1")]
		[Address(RVA = "0x12AF330", Offset = "0x12AF330", VA = "0x12AF330", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025A2")]
		[Address(RVA = "0x12AF32C", Offset = "0x12AF32C", VA = "0x12AF32C")]
		private void DoSetProceduralFloat()
		{
		}

		[Token(Token = "0x60025A3")]
		[Address(RVA = "0x12AF334", Offset = "0x12AF334", VA = "0x12AF334")]
		public SetProceduralFloat()
		{
		}
	}
	[Token(Token = "0x200076F")]
	[ActionCategory("Substance")]
	[Tooltip("Set a named Vector2 property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	public class SetProceduralVector2 : FsmStateAction
	{
		[Token(Token = "0x4002271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Substance Material.")]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4002272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The named vector property in the material.")]
		public FsmString vector2Property;

		[Token(Token = "0x4002273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The Vector3 value to set the property to.\nNOTE: Use Set Procedural Vector2 for Vector3 values.")]
		public FsmVector2 vector2Value;

		[Token(Token = "0x4002274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x60025A4")]
		[Address(RVA = "0x12AF33C", Offset = "0x12AF33C", VA = "0x12AF33C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025A5")]
		[Address(RVA = "0x12AF37C", Offset = "0x12AF37C", VA = "0x12AF37C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025A6")]
		[Address(RVA = "0x12AF394", Offset = "0x12AF394", VA = "0x12AF394", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025A7")]
		[Address(RVA = "0x12AF390", Offset = "0x12AF390", VA = "0x12AF390")]
		private void DoSetProceduralVector()
		{
		}

		[Token(Token = "0x60025A8")]
		[Address(RVA = "0x12AF398", Offset = "0x12AF398", VA = "0x12AF398")]
		public SetProceduralVector2()
		{
		}
	}
	[Token(Token = "0x2000770")]
	[ActionCategory("Substance")]
	[Tooltip("Set a named Vector3 property in a Substance material. NOTE: Use Rebuild Textures after setting Substance properties.")]
	[Obsolete("Built-in support for Substance Designer materials has been deprecated and will be removed in Unity 2018.1. To continue using Substance Designer materials in Unity 2018.1, you will need to install a suitable third-party external importer from the Asset Store.")]
	public class SetProceduralVector3 : FsmStateAction
	{
		[Token(Token = "0x4002275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Substance Material.")]
		[RequiredField]
		public FsmMaterial substanceMaterial;

		[Token(Token = "0x4002276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The named vector property in the material.")]
		[RequiredField]
		public FsmString vector3Property;

		[Token(Token = "0x4002277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The value to set the property to.\nNOTE: Use Set Procedural Vector3 for Vector3 values.")]
		public FsmVector3 vector3Value;

		[Token(Token = "0x4002278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("NOTE: Updating procedural materials every frame can be very slow!")]
		public bool everyFrame;

		[Token(Token = "0x60025A9")]
		[Address(RVA = "0x12AF3A0", Offset = "0x12AF3A0", VA = "0x12AF3A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025AA")]
		[Address(RVA = "0x12AF3E0", Offset = "0x12AF3E0", VA = "0x12AF3E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025AB")]
		[Address(RVA = "0x12AF3F8", Offset = "0x12AF3F8", VA = "0x12AF3F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025AC")]
		[Address(RVA = "0x12AF3F4", Offset = "0x12AF3F4", VA = "0x12AF3F4")]
		private void DoSetProceduralVector()
		{
		}

		[Token(Token = "0x60025AD")]
		[Address(RVA = "0x12AF3FC", Offset = "0x12AF3FC", VA = "0x12AF3FC")]
		public SetProceduralVector3()
		{
		}
	}
	[Token(Token = "0x2000771")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Gets a quaternion as euler angles.")]
	public class GetQuaternionEulerAngles : QuaternionBaseAction
	{
		[Token(Token = "0x4002279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The rotation")]
		[RequiredField]
		public FsmQuaternion quaternion;

		[Token(Token = "0x400227A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The euler angles of the quaternion.")]
		[RequiredField]
		public FsmVector3 eulerAngles;

		[Token(Token = "0x60025AE")]
		[Address(RVA = "0x12AF404", Offset = "0x12AF404", VA = "0x12AF404", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025AF")]
		[Address(RVA = "0x12AF43C", Offset = "0x12AF43C", VA = "0x12AF43C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025B0")]
		[Address(RVA = "0x12AF4BC", Offset = "0x12AF4BC", VA = "0x12AF4BC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025B1")]
		[Address(RVA = "0x12AF4CC", Offset = "0x12AF4CC", VA = "0x12AF4CC", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025B2")]
		[Address(RVA = "0x12AF4E0", Offset = "0x12AF4E0", VA = "0x12AF4E0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025B3")]
		[Address(RVA = "0x12AF468", Offset = "0x12AF468", VA = "0x12AF468")]
		private void GetQuatEuler()
		{
		}

		[Token(Token = "0x60025B4")]
		[Address(RVA = "0x12AF4F4", Offset = "0x12AF4F4", VA = "0x12AF4F4")]
		public GetQuaternionEulerAngles()
		{
		}
	}
	[Token(Token = "0x2000772")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Creates a rotation which rotates from fromDirection to toDirection. Usually you use this to rotate a transform so that one of its axes, e.g., the y-axis - follows a target direction toDirection in world space.")]
	public class GetQuaternionFromRotation : QuaternionBaseAction
	{
		[Token(Token = "0x400227B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("the 'from' direction")]
		[RequiredField]
		public FsmVector3 fromDirection;

		[Token(Token = "0x400227C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("the 'to' direction")]
		[RequiredField]
		public FsmVector3 toDirection;

		[Token(Token = "0x400227D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("the resulting quaternion")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmQuaternion result;

		[Token(Token = "0x60025B5")]
		[Address(RVA = "0x12AF504", Offset = "0x12AF504", VA = "0x12AF504", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025B6")]
		[Address(RVA = "0x12AF548", Offset = "0x12AF548", VA = "0x12AF548", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025B7")]
		[Address(RVA = "0x12AF5FC", Offset = "0x12AF5FC", VA = "0x12AF5FC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025B8")]
		[Address(RVA = "0x12AF60C", Offset = "0x12AF60C", VA = "0x12AF60C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025B9")]
		[Address(RVA = "0x12AF620", Offset = "0x12AF620", VA = "0x12AF620", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025BA")]
		[Address(RVA = "0x12AF574", Offset = "0x12AF574", VA = "0x12AF574")]
		private void DoQuatFromRotation()
		{
		}

		[Token(Token = "0x60025BB")]
		[Address(RVA = "0x12AF634", Offset = "0x12AF634", VA = "0x12AF634")]
		public GetQuaternionFromRotation()
		{
		}
	}
	[Token(Token = "0x2000773")]
	[Tooltip("Get the quaternion from a quaternion multiplied by a quaternion.")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class GetQuaternionMultipliedByQuaternion : QuaternionBaseAction
	{
		[Token(Token = "0x400227E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first quaternion to multiply")]
		[RequiredField]
		public FsmQuaternion quaternionA;

		[Token(Token = "0x400227F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second quaternion to multiply")]
		[RequiredField]
		public FsmQuaternion quaternionB;

		[Token(Token = "0x4002280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting quaternion")]
		public FsmQuaternion result;

		[Token(Token = "0x60025BC")]
		[Address(RVA = "0x12AF63C", Offset = "0x12AF63C", VA = "0x12AF63C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025BD")]
		[Address(RVA = "0x12AF680", Offset = "0x12AF680", VA = "0x12AF680", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025BE")]
		[Address(RVA = "0x12AF75C", Offset = "0x12AF75C", VA = "0x12AF75C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025BF")]
		[Address(RVA = "0x12AF76C", Offset = "0x12AF76C", VA = "0x12AF76C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025C0")]
		[Address(RVA = "0x12AF780", Offset = "0x12AF780", VA = "0x12AF780", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025C1")]
		[Address(RVA = "0x12AF6AC", Offset = "0x12AF6AC", VA = "0x12AF6AC")]
		private void DoQuatMult()
		{
		}

		[Token(Token = "0x60025C2")]
		[Address(RVA = "0x12AF794", Offset = "0x12AF794", VA = "0x12AF794")]
		public GetQuaternionMultipliedByQuaternion()
		{
		}
	}
	[Token(Token = "0x2000774")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Get the vector3 from a quaternion multiplied by a vector.")]
	public class GetQuaternionMultipliedByVector : QuaternionBaseAction
	{
		[Token(Token = "0x4002281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The quaternion to multiply")]
		public FsmQuaternion quaternion;

		[Token(Token = "0x4002282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector3 to multiply")]
		public FsmVector3 vector3;

		[Token(Token = "0x4002283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The resulting vector3")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 result;

		[Token(Token = "0x60025C3")]
		[Address(RVA = "0x12AF79C", Offset = "0x12AF79C", VA = "0x12AF79C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025C4")]
		[Address(RVA = "0x12AF7E0", Offset = "0x12AF7E0", VA = "0x12AF7E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025C5")]
		[Address(RVA = "0x12AF884", Offset = "0x12AF884", VA = "0x12AF884", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025C6")]
		[Address(RVA = "0x12AF894", Offset = "0x12AF894", VA = "0x12AF894", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025C7")]
		[Address(RVA = "0x12AF8A8", Offset = "0x12AF8A8", VA = "0x12AF8A8", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025C8")]
		[Address(RVA = "0x12AF80C", Offset = "0x12AF80C", VA = "0x12AF80C")]
		private void DoQuatMult()
		{
		}

		[Token(Token = "0x60025C9")]
		[Address(RVA = "0x12AF8BC", Offset = "0x12AF8BC", VA = "0x12AF8BC")]
		public GetQuaternionMultipliedByVector()
		{
		}
	}
	[Token(Token = "0x2000775")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Creates a rotation which rotates angle degrees around axis.")]
	public class QuaternionAngleAxis : QuaternionBaseAction
	{
		[Token(Token = "0x4002284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The angle.")]
		[RequiredField]
		public FsmFloat angle;

		[Token(Token = "0x4002285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation axis.")]
		[RequiredField]
		public FsmVector3 axis;

		[Token(Token = "0x4002286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the rotation of this quaternion variable.")]
		[RequiredField]
		public FsmQuaternion result;

		[Token(Token = "0x60025CA")]
		[Address(RVA = "0x12AF8C4", Offset = "0x12AF8C4", VA = "0x12AF8C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025CB")]
		[Address(RVA = "0x12AF90C", Offset = "0x12AF90C", VA = "0x12AF90C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025CC")]
		[Address(RVA = "0x12AF9B4", Offset = "0x12AF9B4", VA = "0x12AF9B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025CD")]
		[Address(RVA = "0x12AF9C4", Offset = "0x12AF9C4", VA = "0x12AF9C4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025CE")]
		[Address(RVA = "0x12AF9D8", Offset = "0x12AF9D8", VA = "0x12AF9D8", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025CF")]
		[Address(RVA = "0x12AF938", Offset = "0x12AF938", VA = "0x12AF938")]
		private void DoQuatAngleAxis()
		{
		}

		[Token(Token = "0x60025D0")]
		[Address(RVA = "0x12AF9EC", Offset = "0x12AF9EC", VA = "0x12AF9EC")]
		public QuaternionAngleAxis()
		{
		}
	}
	[Token(Token = "0x2000776")]
	public abstract class QuaternionBaseAction : FsmStateAction
	{
		[Token(Token = "0x2000777")]
		public enum everyFrameOptions
		{
			[Token(Token = "0x400228A")]
			Update,
			[Token(Token = "0x400228B")]
			FixedUpdate,
			[Token(Token = "0x400228C")]
			LateUpdate
		}

		[Token(Token = "0x4002287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Repeat every frame. Useful if any of the values are changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Defines how to perform the action when 'every Frame' is enabled.")]
		public everyFrameOptions everyFrameOption;

		[Token(Token = "0x60025D1")]
		[Address(RVA = "0x12AF9F4", Offset = "0x12AF9F4", VA = "0x12AF9F4", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60025D2")]
		[Address(RVA = "0x12AF4FC", Offset = "0x12AF4FC", VA = "0x12AF4FC")]
		protected QuaternionBaseAction()
		{
		}
	}
	[Token(Token = "0x2000778")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Check if two quaternions are equals or not. Takes in account inversed representations of quaternions")]
	public class QuaternionCompare : QuaternionBaseAction
	{
		[Token(Token = "0x400228D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("First Quaternion")]
		[RequiredField]
		public FsmQuaternion Quaternion1;

		[Token(Token = "0x400228E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Second Quaternion")]
		public FsmQuaternion Quaternion2;

		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("true if Quaternions are equal")]
		public FsmBool equal;

		[Token(Token = "0x4002290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if Quaternions are equal")]
		public FsmEvent equalEvent;

		[Token(Token = "0x4002291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if Quaternions are not equal")]
		public FsmEvent notEqualEvent;

		[Token(Token = "0x60025D3")]
		[Address(RVA = "0x12AFA50", Offset = "0x12AFA50", VA = "0x12AFA50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025D4")]
		[Address(RVA = "0x12AFB2C", Offset = "0x12AFB2C", VA = "0x12AFB2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025D5")]
		[Address(RVA = "0x12AFBEC", Offset = "0x12AFBEC", VA = "0x12AFBEC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025D6")]
		[Address(RVA = "0x12AFBFC", Offset = "0x12AFBFC", VA = "0x12AFBFC", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025D7")]
		[Address(RVA = "0x12AFC10", Offset = "0x12AFC10", VA = "0x12AFC10", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025D8")]
		[Address(RVA = "0x12AFB58", Offset = "0x12AFB58", VA = "0x12AFB58")]
		private void DoQuatCompare()
		{
		}

		[Token(Token = "0x60025D9")]
		[Address(RVA = "0x12AFC24", Offset = "0x12AFC24", VA = "0x12AFC24")]
		public QuaternionCompare()
		{
		}
	}
	[Token(Token = "0x2000779")]
	[Tooltip("Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class QuaternionEuler : QuaternionBaseAction
	{
		[Token(Token = "0x4002292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Euler angles.")]
		public FsmVector3 eulerAngles;

		[Token(Token = "0x4002293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Store the euler angles of this quaternion variable.")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion result;

		[Token(Token = "0x60025DA")]
		[Address(RVA = "0x12AFC2C", Offset = "0x12AFC2C", VA = "0x12AFC2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025DB")]
		[Address(RVA = "0x12AFC64", Offset = "0x12AFC64", VA = "0x12AFC64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025DC")]
		[Address(RVA = "0x12AFCE0", Offset = "0x12AFCE0", VA = "0x12AFCE0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025DD")]
		[Address(RVA = "0x12AFCF0", Offset = "0x12AFCF0", VA = "0x12AFCF0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025DE")]
		[Address(RVA = "0x12AFD04", Offset = "0x12AFD04", VA = "0x12AFD04", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025DF")]
		[Address(RVA = "0x12AFC90", Offset = "0x12AFC90", VA = "0x12AFC90")]
		private void DoQuatEuler()
		{
		}

		[Token(Token = "0x60025E0")]
		[Address(RVA = "0x12AFD18", Offset = "0x12AFD18", VA = "0x12AFD18")]
		public QuaternionEuler()
		{
		}
	}
	[Token(Token = "0x200077A")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Inverse a quaternion")]
	public class QuaternionInverse : QuaternionBaseAction
	{
		[Token(Token = "0x4002294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("the rotation")]
		public FsmQuaternion rotation;

		[Token(Token = "0x4002295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the inverse of the rotation variable.")]
		public FsmQuaternion result;

		[Token(Token = "0x60025E1")]
		[Address(RVA = "0x12AFD20", Offset = "0x12AFD20", VA = "0x12AFD20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025E2")]
		[Address(RVA = "0x12AFD58", Offset = "0x12AFD58", VA = "0x12AFD58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025E3")]
		[Address(RVA = "0x12AFDBC", Offset = "0x12AFDBC", VA = "0x12AFDBC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025E4")]
		[Address(RVA = "0x12AFDCC", Offset = "0x12AFDCC", VA = "0x12AFDCC", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025E5")]
		[Address(RVA = "0x12AFDE0", Offset = "0x12AFDE0", VA = "0x12AFDE0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025E6")]
		[Address(RVA = "0x12AFD84", Offset = "0x12AFD84", VA = "0x12AFD84")]
		private void DoQuatInverse()
		{
		}

		[Token(Token = "0x60025E7")]
		[Address(RVA = "0x12AFDF4", Offset = "0x12AFDF4", VA = "0x12AFDF4")]
		public QuaternionInverse()
		{
		}
	}
	[Token(Token = "0x200077B")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Interpolates between from and to by t and normalizes the result afterwards.")]
	public class QuaternionLerp : QuaternionBaseAction
	{
		[Token(Token = "0x4002296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("From Quaternion.")]
		public FsmQuaternion fromQuaternion;

		[Token(Token = "0x4002297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("To Quaternion.")]
		public FsmQuaternion toQuaternion;

		[Token(Token = "0x4002298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Interpolate between fromQuaternion and toQuaternion by this amount. Value is clamped to 0-1 range. 0 = fromQuaternion; 1 = toQuaternion; 0.5 = half way between.")]
		[HasFloatSlider(0f, 1f)]
		[RequiredField]
		public FsmFloat amount;

		[Token(Token = "0x4002299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in this quaternion variable.")]
		public FsmQuaternion storeResult;

		[Token(Token = "0x60025E8")]
		[Address(RVA = "0x12AFDFC", Offset = "0x12AFDFC", VA = "0x12AFDFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025E9")]
		[Address(RVA = "0x12AFED8", Offset = "0x12AFED8", VA = "0x12AFED8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025EA")]
		[Address(RVA = "0x12AFFAC", Offset = "0x12AFFAC", VA = "0x12AFFAC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025EB")]
		[Address(RVA = "0x12AFFBC", Offset = "0x12AFFBC", VA = "0x12AFFBC", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025EC")]
		[Address(RVA = "0x12AFFD0", Offset = "0x12AFFD0", VA = "0x12AFFD0", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025ED")]
		[Address(RVA = "0x12AFF04", Offset = "0x12AFF04", VA = "0x12AFF04")]
		private void DoQuatLerp()
		{
		}

		[Token(Token = "0x60025EE")]
		[Address(RVA = "0x12AFFE4", Offset = "0x12AFFE4", VA = "0x12AFFE4")]
		public QuaternionLerp()
		{
		}
	}
	[Token(Token = "0x200077C")]
	[Tooltip("Creates a rotation that looks along forward with the head upwards along upwards.")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class QuaternionLookRotation : QuaternionBaseAction
	{
		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("the rotation direction")]
		public FsmVector3 direction;

		[Token(Token = "0x400229B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The up direction")]
		public FsmVector3 upVector;

		[Token(Token = "0x400229C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the inverse of the rotation variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion result;

		[Token(Token = "0x60025EF")]
		[Address(RVA = "0x12AFFEC", Offset = "0x12AFFEC", VA = "0x12AFFEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025F0")]
		[Address(RVA = "0x12B0088", Offset = "0x12B0088", VA = "0x12B0088", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025F1")]
		[Address(RVA = "0x12B0174", Offset = "0x12B0174", VA = "0x12B0174", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025F2")]
		[Address(RVA = "0x12B0184", Offset = "0x12B0184", VA = "0x12B0184", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025F3")]
		[Address(RVA = "0x12B0198", Offset = "0x12B0198", VA = "0x12B0198", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025F4")]
		[Address(RVA = "0x12B00B4", Offset = "0x12B00B4", VA = "0x12B00B4")]
		private void DoQuatLookRotation()
		{
		}

		[Token(Token = "0x60025F5")]
		[Address(RVA = "0x12B01AC", Offset = "0x12B01AC", VA = "0x12B01AC")]
		public QuaternionLookRotation()
		{
		}
	}
	[Token(Token = "0x200077D")]
	[ActionCategory(ActionCategory.Quaternion)]
	[Tooltip("Use a low pass filter to reduce the influence of sudden changes in a quaternion Variable.")]
	public class QuaternionLowPassFilter : QuaternionBaseAction
	{
		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("quaternion Variable to filter. Should generally come from some constantly updated input")]
		public FsmQuaternion quaternionVariable;

		[Token(Token = "0x400229E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have. E.g., 0.1 keeps 10 percent of the unfiltered quaternion and 90 percent of the previously filtered value.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x400229F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion filteredQuaternion;

		[Token(Token = "0x60025F6")]
		[Address(RVA = "0x12B01B4", Offset = "0x12B01B4", VA = "0x12B01B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025F7")]
		[Address(RVA = "0x12B01FC", Offset = "0x12B01FC", VA = "0x12B01FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025F8")]
		[Address(RVA = "0x12B0230", Offset = "0x12B0230", VA = "0x12B0230", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60025F9")]
		[Address(RVA = "0x12B03A4", Offset = "0x12B03A4", VA = "0x12B03A4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60025FA")]
		[Address(RVA = "0x12B03B8", Offset = "0x12B03B8", VA = "0x12B03B8", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60025FB")]
		[Address(RVA = "0x12B0240", Offset = "0x12B0240", VA = "0x12B0240")]
		private void DoQuatLowPassFilter()
		{
		}

		[Token(Token = "0x60025FC")]
		[Address(RVA = "0x12B03CC", Offset = "0x12B03CC", VA = "0x12B03CC")]
		public QuaternionLowPassFilter()
		{
		}
	}
	[Token(Token = "0x200077E")]
	[Tooltip("Rotates a rotation from towards to. This is essentially the same as Quaternion.Slerp but instead the function will ensure that the angular speed never exceeds maxDegreesDelta. Negative values of maxDegreesDelta pushes the rotation away from to.")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class QuaternionRotateTowards : QuaternionBaseAction
	{
		[Token(Token = "0x40022A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("From Quaternion.")]
		public FsmQuaternion fromQuaternion;

		[Token(Token = "0x40022A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("To Quaternion.")]
		public FsmQuaternion toQuaternion;

		[Token(Token = "0x40022A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The angular speed never exceeds maxDegreesDelta. Negative values of maxDegreesDelta pushes the rotation away from to.")]
		public FsmFloat maxDegreesDelta;

		[Token(Token = "0x40022A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in this quaternion variable.")]
		[RequiredField]
		public FsmQuaternion storeResult;

		[Token(Token = "0x60025FD")]
		[Address(RVA = "0x12B03D4", Offset = "0x12B03D4", VA = "0x12B03D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60025FE")]
		[Address(RVA = "0x12B04B0", Offset = "0x12B04B0", VA = "0x12B04B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60025FF")]
		[Address(RVA = "0x12B0600", Offset = "0x12B0600", VA = "0x12B0600", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002600")]
		[Address(RVA = "0x12B0610", Offset = "0x12B0610", VA = "0x12B0610", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002601")]
		[Address(RVA = "0x12B0624", Offset = "0x12B0624", VA = "0x12B0624", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002602")]
		[Address(RVA = "0x12B04DC", Offset = "0x12B04DC", VA = "0x12B04DC")]
		private void DoQuatRotateTowards()
		{
		}

		[Token(Token = "0x6002603")]
		[Address(RVA = "0x12B0638", Offset = "0x12B0638", VA = "0x12B0638")]
		public QuaternionRotateTowards()
		{
		}
	}
	[Token(Token = "0x200077F")]
	[Tooltip("Spherically interpolates between from and to by t.")]
	[ActionCategory(ActionCategory.Quaternion)]
	public class QuaternionSlerp : QuaternionBaseAction
	{
		[Token(Token = "0x40022A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("From Quaternion.")]
		public FsmQuaternion fromQuaternion;

		[Token(Token = "0x40022A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("To Quaternion.")]
		public FsmQuaternion toQuaternion;

		[Token(Token = "0x40022A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Interpolate between fromQuaternion and toQuaternion by this amount. Value is clamped to 0-1 range. 0 = fromQuaternion; 1 = toQuaternion; 0.5 = half way between.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat amount;

		[Token(Token = "0x40022A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in this quaternion variable.")]
		public FsmQuaternion storeResult;

		[Token(Token = "0x6002604")]
		[Address(RVA = "0x12B0640", Offset = "0x12B0640", VA = "0x12B0640", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002605")]
		[Address(RVA = "0x12B0720", Offset = "0x12B0720", VA = "0x12B0720", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002606")]
		[Address(RVA = "0x12B07F4", Offset = "0x12B07F4", VA = "0x12B07F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002607")]
		[Address(RVA = "0x12B0804", Offset = "0x12B0804", VA = "0x12B0804", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002608")]
		[Address(RVA = "0x12B0818", Offset = "0x12B0818", VA = "0x12B0818", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002609")]
		[Address(RVA = "0x12B074C", Offset = "0x12B074C", VA = "0x12B074C")]
		private void DoQuatSlerp()
		{
		}

		[Token(Token = "0x600260A")]
		[Address(RVA = "0x12B082C", Offset = "0x12B082C", VA = "0x12B082C")]
		public QuaternionSlerp()
		{
		}
	}
	[Token(Token = "0x2000780")]
	[Tooltip("Get the individual fields of a Rect Variable and store them in Float Variables.")]
	[ActionCategory(ActionCategory.Rect)]
	public class GetRectFields : FsmStateAction
	{
		[Token(Token = "0x40022A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Rect Variable.")]
		public FsmRect rectVariable;

		[Token(Token = "0x40022A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the X value in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeX;

		[Token(Token = "0x40022AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the X value in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeY;

		[Token(Token = "0x40022AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Width in a Float Variable.")]
		public FsmFloat storeWidth;

		[Token(Token = "0x40022AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the Height in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeHeight;

		[Token(Token = "0x40022AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Min position in a Vector2 Variable.")]
		public FsmVector2 storeMin;

		[Token(Token = "0x40022AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Max position in a Vector2 Variable.")]
		public FsmVector2 storeMax;

		[Token(Token = "0x40022AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the Size in a Vector2 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeSize;

		[Token(Token = "0x40022B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Center in a Vector2 Variable.")]
		public FsmVector2 storeCenter;

		[Token(Token = "0x40022B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600260B")]
		[Address(RVA = "0x12B0834", Offset = "0x12B0834", VA = "0x12B0834", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600260C")]
		[Address(RVA = "0x12B08D4", Offset = "0x12B08D4", VA = "0x12B08D4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600260D")]
		[Address(RVA = "0x12B0A7C", Offset = "0x12B0A7C", VA = "0x12B0A7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600260E")]
		[Address(RVA = "0x12B0900", Offset = "0x12B0900", VA = "0x12B0900")]
		private void DoGetRectFields()
		{
		}

		[Token(Token = "0x600260F")]
		[Address(RVA = "0x12B0A80", Offset = "0x12B0A80", VA = "0x12B0A80")]
		public GetRectFields()
		{
		}
	}
	[Token(Token = "0x2000781")]
	[ActionCategory(ActionCategory.Rect)]
	[Tooltip("Tests if a point is inside a rectangle.")]
	public class RectContains : FsmStateAction
	{
		[Token(Token = "0x40022B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Rectangle to test.")]
		public FsmRect rectangle;

		[Token(Token = "0x40022B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Point to test.")]
		public FsmVector3 point;

		[Token(Token = "0x40022B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Specify/override X value.")]
		public FsmFloat x;

		[Token(Token = "0x40022B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Specify/override Y value.")]
		public FsmFloat y;

		[Token(Token = "0x40022B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if the Point is inside the Rectangle.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x40022B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the Point is outside the Rectangle.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x40022B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the result in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x40022B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002610")]
		[Address(RVA = "0x12B0A88", Offset = "0x12B0A88", VA = "0x12B0A88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002611")]
		[Address(RVA = "0x12B0BE8", Offset = "0x12B0BE8", VA = "0x12B0BE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002612")]
		[Address(RVA = "0x12B0D24", Offset = "0x12B0D24", VA = "0x12B0D24", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002613")]
		[Address(RVA = "0x12B0C14", Offset = "0x12B0C14", VA = "0x12B0C14")]
		private void DoRectContains()
		{
		}

		[Token(Token = "0x6002614")]
		[Address(RVA = "0x12B0D28", Offset = "0x12B0D28", VA = "0x12B0D28")]
		public RectContains()
		{
		}
	}
	[Token(Token = "0x2000782")]
	[Tooltip("Tests if 2 Rects overlap.")]
	[ActionCategory(ActionCategory.Rect)]
	public class RectOverlaps : FsmStateAction
	{
		[Token(Token = "0x40022BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("First Rectangle.")]
		public FsmRect rect1;

		[Token(Token = "0x40022BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Second Rectangle.")]
		[RequiredField]
		public FsmRect rect2;

		[Token(Token = "0x40022BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the Rects overlap.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x40022BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the Rects do not overlap.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x40022BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the result in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x40022BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002615")]
		[Address(RVA = "0x12B0D30", Offset = "0x12B0D30", VA = "0x12B0D30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002616")]
		[Address(RVA = "0x12B0E0C", Offset = "0x12B0E0C", VA = "0x12B0E0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002617")]
		[Address(RVA = "0x12B0ED4", Offset = "0x12B0ED4", VA = "0x12B0ED4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002618")]
		[Address(RVA = "0x12B0E38", Offset = "0x12B0E38", VA = "0x12B0E38")]
		private void DoRectOverlap()
		{
		}

		[Token(Token = "0x6002619")]
		[Address(RVA = "0x12B0ED8", Offset = "0x12B0ED8", VA = "0x12B0ED8")]
		public static bool Intersect(Rect a, Rect b)
		{
			return default(bool);
		}

		[Token(Token = "0x600261A")]
		[Address(RVA = "0x12B0FC4", Offset = "0x12B0FC4", VA = "0x12B0FC4")]
		public static void FlipNegative(ref Rect r)
		{
		}

		[Token(Token = "0x600261B")]
		[Address(RVA = "0x12B1088", Offset = "0x12B1088", VA = "0x12B1088")]
		public RectOverlaps()
		{
		}
	}
	[Token(Token = "0x2000783")]
	[Tooltip("Sets the individual fields of a Rect Variable. To leave any field unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Rect)]
	public class SetRectFields : FsmStateAction
	{
		[Token(Token = "0x40022C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Rect Variable to set.")]
		[RequiredField]
		public FsmRect rectVariable;

		[Token(Token = "0x40022C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set X value.")]
		public FsmFloat x;

		[Token(Token = "0x40022C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set Y value.")]
		public FsmFloat y;

		[Token(Token = "0x40022C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set Width.")]
		public FsmFloat width;

		[Token(Token = "0x40022C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set Height.")]
		public FsmFloat height;

		[Token(Token = "0x40022C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if the fields are animated.")]
		public bool everyFrame;

		[Token(Token = "0x600261C")]
		[Address(RVA = "0x12B1090", Offset = "0x12B1090", VA = "0x12B1090", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600261D")]
		[Address(RVA = "0x12B11A8", Offset = "0x12B11A8", VA = "0x12B11A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600261E")]
		[Address(RVA = "0x12B12E8", Offset = "0x12B12E8", VA = "0x12B12E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600261F")]
		[Address(RVA = "0x12B11D4", Offset = "0x12B11D4", VA = "0x12B11D4")]
		private void DoSetRectFields()
		{
		}

		[Token(Token = "0x6002620")]
		[Address(RVA = "0x12B12EC", Offset = "0x12B12EC", VA = "0x12B12EC")]
		public SetRectFields()
		{
		}
	}
	[Token(Token = "0x2000784")]
	[Tooltip("Sets a Rect's value using Vector2 points.")]
	[ActionCategory(ActionCategory.Rect)]
	public class SetRectFromPoints : FsmStateAction
	{
		[Token(Token = "0x40022C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Rectangle to set.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmRect rectangle;

		[Token(Token = "0x40022C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("First point.")]
		public FsmVector2 point1;

		[Token(Token = "0x40022C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Second point.")]
		public FsmVector2 point2;

		[Token(Token = "0x40022C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Avoid negative width and height values. This is useful for UI rects that don't draw if they have negative dimensions.")]
		public FsmBool positiveDimensions;

		[Token(Token = "0x40022CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002621")]
		[Address(RVA = "0x12B12F4", Offset = "0x12B12F4", VA = "0x12B12F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002622")]
		[Address(RVA = "0x12B13F4", Offset = "0x12B13F4", VA = "0x12B13F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002623")]
		[Address(RVA = "0x12B1568", Offset = "0x12B1568", VA = "0x12B1568", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002624")]
		[Address(RVA = "0x12B1420", Offset = "0x12B1420", VA = "0x12B1420")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002625")]
		[Address(RVA = "0x12B156C", Offset = "0x12B156C", VA = "0x12B156C")]
		public SetRectFromPoints()
		{
		}
	}
	[Token(Token = "0x2000785")]
	[Tooltip("Sets the value of a Rect Variable.")]
	[ActionCategory(ActionCategory.Rect)]
	public class SetRectValue : FsmStateAction
	{
		[Token(Token = "0x40022CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Rect Variable to set.")]
		[UIHint(UIHint.Variable)]
		public FsmRect rectVariable;

		[Token(Token = "0x40022CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to set it to.")]
		[RequiredField]
		public FsmRect rectValue;

		[Token(Token = "0x40022CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002626")]
		[Address(RVA = "0x12B1574", Offset = "0x12B1574", VA = "0x12B1574", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002627")]
		[Address(RVA = "0x12B15A4", Offset = "0x12B15A4", VA = "0x12B15A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002628")]
		[Address(RVA = "0x12B15E0", Offset = "0x12B15E0", VA = "0x12B15E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002629")]
		[Address(RVA = "0x12B1608", Offset = "0x12B1608", VA = "0x12B1608")]
		public SetRectValue()
		{
		}
	}
	[Token(Token = "0x2000786")]
	[Tooltip("Check if a RectTransform contains the screen point as seen from the given camera.")]
	[ActionCategory("RectTransform")]
	public class RectTransformContainsScreenPoint : FsmStateAction
	{
		[Token(Token = "0x40022CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40022CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The screenPoint as a Vector2. Leave to none if you want to use the Vector3 alternative")]
		public FsmVector2 screenPointVector2;

		[Token(Token = "0x40022D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screenPoint as a Vector3. Leave to none if you want to use the Vector2 alternative")]
		public FsmVector3 orScreenPointVector3;

		[Token(Token = "0x40022D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Define if screenPoint are expressed as normalized screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public bool normalizedScreenPoint;

		[Token(Token = "0x40022D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The Camera. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be set to null explicitly (default).\nLeave to none and the camera will be the one from EventSystem.current.camera")]
		public FsmGameObject camera;

		[Token(Token = "0x40022D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x40022D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Result")]
		[Tooltip("Store the result.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isContained;

		[Token(Token = "0x40022D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if screenPoint is contained in RectTransform.")]
		public FsmEvent isContainedEvent;

		[Token(Token = "0x40022D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if screenPoint is NOT contained in RectTransform.")]
		public FsmEvent isNotContainedEvent;

		[Token(Token = "0x40022D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private RectTransform _rt;

		[Token(Token = "0x40022D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Camera _camera;

		[Token(Token = "0x600262A")]
		[Address(RVA = "0x12B1610", Offset = "0x12B1610", VA = "0x12B1610", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600262B")]
		[Address(RVA = "0x12B16E8", Offset = "0x12B16E8", VA = "0x12B16E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600262C")]
		[Address(RVA = "0x12B19EC", Offset = "0x12B19EC", VA = "0x12B19EC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600262D")]
		[Address(RVA = "0x12B1868", Offset = "0x12B1868", VA = "0x12B1868")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x600262E")]
		[Address(RVA = "0x12B19F0", Offset = "0x12B19F0", VA = "0x12B19F0")]
		public RectTransformContainsScreenPoint()
		{
		}
	}
	[Token(Token = "0x2000787")]
	[Tooltip("Flips the horizontal and vertical axes of the RectTransform size and alignment, and optionally its children as well.")]
	[ActionCategory("RectTransform")]
	public class RectTransformFlipLayoutAxis : FsmStateAction
	{
		[Token(Token = "0x2000788")]
		public enum RectTransformFlipOptions
		{
			[Token(Token = "0x40022DE")]
			Horizontal,
			[Token(Token = "0x40022DF")]
			Vertical,
			[Token(Token = "0x40022E0")]
			Both
		}

		[Token(Token = "0x40022D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40022DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The axis to flip")]
		public RectTransformFlipOptions axis;

		[Token(Token = "0x40022DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Flips around the pivot if true. Flips within the parent rect if false.")]
		public FsmBool keepPositioning;

		[Token(Token = "0x40022DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Flip the children as well?")]
		public FsmBool recursive;

		[Token(Token = "0x600262F")]
		[Address(RVA = "0x12B19F8", Offset = "0x12B19F8", VA = "0x12B19F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002630")]
		[Address(RVA = "0x12B1A38", Offset = "0x12B1A38", VA = "0x12B1A38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002631")]
		[Address(RVA = "0x12B1A54", Offset = "0x12B1A54", VA = "0x12B1A54")]
		private void DoFlip()
		{
		}

		[Token(Token = "0x6002632")]
		[Address(RVA = "0x12B1C64", Offset = "0x12B1C64", VA = "0x12B1C64")]
		public RectTransformFlipLayoutAxis()
		{
		}
	}
	[Token(Token = "0x2000789")]
	[Tooltip("Get the position of the pivot of this RectTransform relative to the anchor reference point.")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetAnchoredPosition : BaseUpdateAction
	{
		[Token(Token = "0x40022E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40022E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The anchored Position")]
		public FsmVector2 position;

		[Token(Token = "0x40022E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the anchored Position")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x40022E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component of the anchored Position")]
		public FsmFloat y;

		[Token(Token = "0x40022E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6002633")]
		[Address(RVA = "0x12B1C6C", Offset = "0x12B1C6C", VA = "0x12B1C6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002634")]
		[Address(RVA = "0x12B1CC0", Offset = "0x12B1CC0", VA = "0x12B1CC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002635")]
		[Address(RVA = "0x12B1E48", Offset = "0x12B1E48", VA = "0x12B1E48", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002636")]
		[Address(RVA = "0x12B1D9C", Offset = "0x12B1D9C", VA = "0x12B1D9C")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002637")]
		[Address(RVA = "0x12B1E4C", Offset = "0x12B1E4C", VA = "0x12B1E4C")]
		public RectTransformGetAnchoredPosition()
		{
		}
	}
	[Token(Token = "0x200078A")]
	[Tooltip("Get the normalized position in the parent RectTransform that the upper right corner is anchored to.")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetAnchorMax : BaseUpdateAction
	{
		[Token(Token = "0x40022E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40022E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The anchorMax")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x40022E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The x component of the anchorMax")]
		public FsmFloat x;

		[Token(Token = "0x40022E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the anchorMax")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x40022EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6002638")]
		[Address(RVA = "0x12B1E54", Offset = "0x12B1E54", VA = "0x12B1E54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002639")]
		[Address(RVA = "0x12B1EA8", Offset = "0x12B1EA8", VA = "0x12B1EA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600263A")]
		[Address(RVA = "0x12B2030", Offset = "0x12B2030", VA = "0x12B2030", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600263B")]
		[Address(RVA = "0x12B1F84", Offset = "0x12B1F84", VA = "0x12B1F84")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x600263C")]
		[Address(RVA = "0x12B2034", Offset = "0x12B2034", VA = "0x12B2034")]
		public RectTransformGetAnchorMax()
		{
		}
	}
	[Token(Token = "0x200078B")]
	[Tooltip("Get the normalized position in the parent RectTransform that the lower left corner is anchored to.")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetAnchorMin : BaseUpdateAction
	{
		[Token(Token = "0x40022EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40022EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The anchorMin")]
		public FsmVector2 anchorMin;

		[Token(Token = "0x40022ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the anchorMin")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x40022EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the anchorMin")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x40022EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x600263D")]
		[Address(RVA = "0x12B203C", Offset = "0x12B203C", VA = "0x12B203C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600263E")]
		[Address(RVA = "0x12B2090", Offset = "0x12B2090", VA = "0x12B2090", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600263F")]
		[Address(RVA = "0x12B2218", Offset = "0x12B2218", VA = "0x12B2218", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002640")]
		[Address(RVA = "0x12B216C", Offset = "0x12B216C", VA = "0x12B216C")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002641")]
		[Address(RVA = "0x12B221C", Offset = "0x12B221C", VA = "0x12B221C")]
		public RectTransformGetAnchorMin()
		{
		}
	}
	[Token(Token = "0x200078C")]
	[Tooltip("The normalized position in the parent RectTransform that the upper right corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetAnchorMinAndMax : BaseUpdateAction
	{
		[Token(Token = "0x40022F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40022F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor max. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x40022F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Vector2 anchor min. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMin;

		[Token(Token = "0x40022F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat xMax;

		[Token(Token = "0x40022F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat yMax;

		[Token(Token = "0x40022F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat xMin;

		[Token(Token = "0x40022F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		public FsmFloat yMin;

		[Token(Token = "0x40022F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x6002642")]
		[Address(RVA = "0x12B2224", Offset = "0x12B2224", VA = "0x12B2224", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002643")]
		[Address(RVA = "0x12B22A8", Offset = "0x12B22A8", VA = "0x12B22A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002644")]
		[Address(RVA = "0x12B24C0", Offset = "0x12B24C0", VA = "0x12B24C0", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002645")]
		[Address(RVA = "0x12B2384", Offset = "0x12B2384", VA = "0x12B2384")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002646")]
		[Address(RVA = "0x12B24C4", Offset = "0x12B24C4", VA = "0x12B24C4")]
		public RectTransformGetAnchorMinAndMax()
		{
		}
	}
	[Token(Token = "0x200078D")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the Local position of this RectTransform. This is Screen Space values using the anchoring as reference, so 0,0 is the center of the screen if the anchor is te center of the screen.")]
	public class RectTransformGetLocalPosition : BaseUpdateAction
	{
		[Token(Token = "0x200078E")]
		public enum LocalPositionReference
		{
			[Token(Token = "0x4002301")]
			Anchor,
			[Token(Token = "0x4002302")]
			CenterPosition
		}

		[Token(Token = "0x40022F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40022F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Get local position relative to Anchor or Center.")]
		public LocalPositionReference reference;

		[Token(Token = "0x40022FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The position")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 position;

		[Token(Token = "0x40022FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The position in a Vector 2d ")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 position2d;

		[Token(Token = "0x40022FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The x component of the Position")]
		public FsmFloat x;

		[Token(Token = "0x40022FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The y component of the Position")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x40022FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The z component of the Position")]
		[UIHint(UIHint.Variable)]
		public FsmFloat z;

		[Token(Token = "0x40022FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x6002647")]
		[Address(RVA = "0x12B24CC", Offset = "0x12B24CC", VA = "0x12B24CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002648")]
		[Address(RVA = "0x12B2544", Offset = "0x12B2544", VA = "0x12B2544", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002649")]
		[Address(RVA = "0x12B27C4", Offset = "0x12B27C4", VA = "0x12B27C4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600264A")]
		[Address(RVA = "0x12B2620", Offset = "0x12B2620", VA = "0x12B2620")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x600264B")]
		[Address(RVA = "0x12B27C8", Offset = "0x12B27C8", VA = "0x12B27C8")]
		public RectTransformGetLocalPosition()
		{
		}
	}
	[Token(Token = "0x200078F")]
	[ActionCategory("RectTransform")]
	[Tooltip("Gets the local rotation of this RectTransform.")]
	public class RectTransformGetLocalRotation : BaseUpdateAction
	{
		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation")]
		public FsmVector3 rotation;

		[Token(Token = "0x4002305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the rotation")]
		public FsmFloat x;

		[Token(Token = "0x4002306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the rotation")]
		public FsmFloat y;

		[Token(Token = "0x4002307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The z component of the rotation")]
		public FsmFloat z;

		[Token(Token = "0x4002308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _rt;

		[Token(Token = "0x600264C")]
		[Address(RVA = "0x12B27D0", Offset = "0x12B27D0", VA = "0x12B27D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600264D")]
		[Address(RVA = "0x12B2900", Offset = "0x12B2900", VA = "0x12B2900", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600264E")]
		[Address(RVA = "0x12B2B0C", Offset = "0x12B2B0C", VA = "0x12B2B0C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600264F")]
		[Address(RVA = "0x12B29DC", Offset = "0x12B29DC", VA = "0x12B29DC")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002650")]
		[Address(RVA = "0x12B2B10", Offset = "0x12B2B10", VA = "0x12B2B10")]
		public RectTransformGetLocalRotation()
		{
		}
	}
	[Token(Token = "0x2000790")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the offset of the upper right corner of the rectangle relative to the upper right anchor")]
	public class RectTransformGetOffsetMax : BaseUpdateAction
	{
		[Token(Token = "0x4002309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400230A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The offsetMax")]
		public FsmVector2 offsetMax;

		[Token(Token = "0x400230B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the offsetMax")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x400230C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component of the offsetMax")]
		public FsmFloat y;

		[Token(Token = "0x400230D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6002651")]
		[Address(RVA = "0x12B2B18", Offset = "0x12B2B18", VA = "0x12B2B18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002652")]
		[Address(RVA = "0x12B2B6C", Offset = "0x12B2B6C", VA = "0x12B2B6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002653")]
		[Address(RVA = "0x12B2CF4", Offset = "0x12B2CF4", VA = "0x12B2CF4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002654")]
		[Address(RVA = "0x12B2C48", Offset = "0x12B2C48", VA = "0x12B2C48")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002655")]
		[Address(RVA = "0x12B2CF8", Offset = "0x12B2CF8", VA = "0x12B2CF8")]
		public RectTransformGetOffsetMax()
		{
		}
	}
	[Token(Token = "0x2000791")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the offset of the lower left corner of the rectangle relative to the lower left anchor")]
	public class RectTransformGetOffsetMin : BaseUpdateAction
	{
		[Token(Token = "0x400230E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400230F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The offsetMin")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 offsetMin;

		[Token(Token = "0x4002310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the offsetMin")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x4002311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component of the offsetMin")]
		public FsmFloat y;

		[Token(Token = "0x4002312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6002656")]
		[Address(RVA = "0x12B2D00", Offset = "0x12B2D00", VA = "0x12B2D00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002657")]
		[Address(RVA = "0x12B2D54", Offset = "0x12B2D54", VA = "0x12B2D54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002658")]
		[Address(RVA = "0x12B2EDC", Offset = "0x12B2EDC", VA = "0x12B2EDC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002659")]
		[Address(RVA = "0x12B2E30", Offset = "0x12B2E30", VA = "0x12B2E30")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x600265A")]
		[Address(RVA = "0x12B2EE0", Offset = "0x12B2EE0", VA = "0x12B2EE0")]
		public RectTransformGetOffsetMin()
		{
		}
	}
	[Token(Token = "0x2000792")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the normalized position in this RectTransform that it rotates around.")]
	public class RectTransformGetPivot : BaseUpdateAction
	{
		[Token(Token = "0x4002313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The pivot")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 pivot;

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The x component of the pivot")]
		public FsmFloat x;

		[Token(Token = "0x4002316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the pivot")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4002317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x600265B")]
		[Address(RVA = "0x12B2EE8", Offset = "0x12B2EE8", VA = "0x12B2EE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600265C")]
		[Address(RVA = "0x12B2F3C", Offset = "0x12B2F3C", VA = "0x12B2F3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600265D")]
		[Address(RVA = "0x12B30C4", Offset = "0x12B30C4", VA = "0x12B30C4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600265E")]
		[Address(RVA = "0x12B3018", Offset = "0x12B3018", VA = "0x12B3018")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x600265F")]
		[Address(RVA = "0x12B30C8", Offset = "0x12B30C8", VA = "0x12B30C8")]
		public RectTransformGetPivot()
		{
		}
	}
	[Token(Token = "0x2000793")]
	[Tooltip("The calculated rectangle in the local space of the Transform.")]
	[ActionCategory("RectTransform")]
	public class RectTransformGetRect : BaseUpdateAction
	{
		[Token(Token = "0x4002318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Rect in a Rect variable.")]
		public FsmRect rect;

		[Token(Token = "0x400231A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the x coordinate in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat x;

		[Token(Token = "0x400231B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the y\u00a0coordinate in a float variable.")]
		public FsmFloat y;

		[Token(Token = "0x400231C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the width in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat width;

		[Token(Token = "0x400231D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the height in a float variable.")]
		public FsmFloat height;

		[Token(Token = "0x400231E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x6002660")]
		[Address(RVA = "0x12B30D0", Offset = "0x12B30D0", VA = "0x12B30D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002661")]
		[Address(RVA = "0x12B31FC", Offset = "0x12B31FC", VA = "0x12B31FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002662")]
		[Address(RVA = "0x12B3444", Offset = "0x12B3444", VA = "0x12B3444", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002663")]
		[Address(RVA = "0x12B32D8", Offset = "0x12B32D8", VA = "0x12B32D8")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002664")]
		[Address(RVA = "0x12B3448", Offset = "0x12B3448", VA = "0x12B3448")]
		public RectTransformGetRect()
		{
		}
	}
	[Token(Token = "0x2000794")]
	[ActionCategory("RectTransform")]
	[Tooltip("Get the size of this RectTransform relative to the distances between the anchors. this is the 'Width' and 'Height' values in the RectTransform inspector.")]
	public class RectTransformGetSizeDelta : BaseUpdateAction
	{
		[Token(Token = "0x400231F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The sizeDelta")]
		public FsmVector2 sizeDelta;

		[Token(Token = "0x4002321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the sizeDelta, the width.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat width;

		[Token(Token = "0x4002322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the sizeDelta, the height")]
		[UIHint(UIHint.Variable)]
		public FsmFloat height;

		[Token(Token = "0x4002323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6002665")]
		[Address(RVA = "0x12B3450", Offset = "0x12B3450", VA = "0x12B3450", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002666")]
		[Address(RVA = "0x12B34A4", Offset = "0x12B34A4", VA = "0x12B34A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002667")]
		[Address(RVA = "0x12B362C", Offset = "0x12B362C", VA = "0x12B362C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002668")]
		[Address(RVA = "0x12B3580", Offset = "0x12B3580", VA = "0x12B3580")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002669")]
		[Address(RVA = "0x12B3630", Offset = "0x12B3630", VA = "0x12B3630")]
		public RectTransformGetSizeDelta()
		{
		}
	}
	[Token(Token = "0x2000795")]
	[ActionCategory("RectTransform")]
	[Tooltip("Convert a given point in screen space into a pixel correct point.")]
	public class RectTransformPixelAdjustPoint : BaseUpdateAction
	{
		[Token(Token = "0x4002324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The canvas. Leave to none to use the canvas of the gameObject")]
		[CheckForComponent(typeof(Canvas))]
		public FsmGameObject canvas;

		[Token(Token = "0x4002326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screen position.")]
		public FsmVector2 screenPoint;

		[Token(Token = "0x4002327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Result")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Pixel adjusted point from the screen position.")]
		public FsmVector2 pixelPoint;

		[Token(Token = "0x4002328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x4002329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Canvas _canvas;

		[Token(Token = "0x600266A")]
		[Address(RVA = "0x12B3638", Offset = "0x12B3638", VA = "0x12B3638", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600266B")]
		[Address(RVA = "0x12B36E4", Offset = "0x12B36E4", VA = "0x12B36E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600266C")]
		[Address(RVA = "0x12B398C", Offset = "0x12B398C", VA = "0x12B398C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600266D")]
		[Address(RVA = "0x12B38FC", Offset = "0x12B38FC", VA = "0x12B38FC")]
		private void DoAction()
		{
		}

		[Token(Token = "0x600266E")]
		[Address(RVA = "0x12B3990", Offset = "0x12B3990", VA = "0x12B3990")]
		public RectTransformPixelAdjustPoint()
		{
		}
	}
	[Token(Token = "0x2000796")]
	[ActionCategory("RectTransform")]
	[Tooltip("Given a rect transform, return the corner points in pixel accurate coordinates.")]
	public class RectTransformPixelAdjustRect : BaseUpdateAction
	{
		[Token(Token = "0x400232A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400232B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The canvas. Leave to none to use the canvas of the gameObject")]
		[CheckForComponent(typeof(Canvas))]
		public FsmGameObject canvas;

		[Token(Token = "0x400232C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Pixel adjusted rect.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[RequiredField]
		public FsmRect pixelRect;

		[Token(Token = "0x400232D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RectTransform _rt;

		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Canvas _canvas;

		[Token(Token = "0x600266F")]
		[Address(RVA = "0x12B3998", Offset = "0x12B3998", VA = "0x12B3998", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002670")]
		[Address(RVA = "0x12B3A34", Offset = "0x12B3A34", VA = "0x12B3A34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002671")]
		[Address(RVA = "0x12B3CC4", Offset = "0x12B3CC4", VA = "0x12B3CC4", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002672")]
		[Address(RVA = "0x12B3C4C", Offset = "0x12B3C4C", VA = "0x12B3C4C")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002673")]
		[Address(RVA = "0x12B3CC8", Offset = "0x12B3CC8", VA = "0x12B3CC8")]
		public RectTransformPixelAdjustRect()
		{
		}
	}
	[Token(Token = "0x2000797")]
	[ActionCategory("RectTransform")]
	[Tooltip("Transform a screen space point to a local position that is on the plane of the given RectTransform. Also check if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
	public class RectTransformScreenPointToLocalPointInRectangle : FsmStateAction
	{
		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The screenPoint as a Vector2. Leave as none if you want to use the Vector3 alternative")]
		public FsmVector2 screenPointVector2;

		[Token(Token = "0x4002331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screenPoint as a Vector3. Leave as none if you want to use the Vector2 alternative")]
		public FsmVector3 orScreenPointVector3;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Define if screenPoint are normalized screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public bool normalizedScreenPoint;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Camera. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be set to null explicitly (default).\nLeave to none and the camera will be the one from EventSystem.current.camera")]
		[CheckForComponent(typeof(Camera))]
		public FsmGameObject camera;

		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the local Position as a vector3 of the screenPoint on the RectTransform Plane.")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmVector3 localPosition;

		[Token(Token = "0x4002336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the local Position as a vector2 of the screenPoint on the RectTransform Plane.")]
		public FsmVector2 localPosition2d;

		[Token(Token = "0x4002337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		public FsmBool isHit;

		[Token(Token = "0x4002338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4002339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the plane of the RectTransform is NOT hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent noHitEvent;

		[Token(Token = "0x400233A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject cachedGameObject;

		[Token(Token = "0x400233B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RectTransform _rt;

		[Token(Token = "0x400233C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera _camera;

		[Token(Token = "0x6002674")]
		[Address(RVA = "0x12B3CD0", Offset = "0x12B3CD0", VA = "0x12B3CD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002675")]
		[Address(RVA = "0x12B3E04", Offset = "0x12B3E04", VA = "0x12B3E04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002676")]
		[Address(RVA = "0x12B417C", Offset = "0x12B417C", VA = "0x12B417C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002677")]
		[Address(RVA = "0x12B3FA8", Offset = "0x12B3FA8", VA = "0x12B3FA8")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x6002678")]
		[Address(RVA = "0x12B4180", Offset = "0x12B4180", VA = "0x12B4180")]
		public RectTransformScreenPointToLocalPointInRectangle()
		{
		}
	}
	[Token(Token = "0x2000798")]
	[ActionCategory("RectTransform")]
	[Tooltip("Transform a screen space point to a world position that is on the plane of the given RectTransform. Also check if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
	public class RectTransformScreenPointToWorldPointInRectangle : FsmStateAction
	{
		[Token(Token = "0x400233D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400233E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The screenPoint as a Vector2. Leave to none if you want to use the Vector3 alternative")]
		public FsmVector2 screenPointVector2;

		[Token(Token = "0x400233F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The screenPoint as a Vector3. Leave to none if you want to use the Vector2 alternative")]
		public FsmVector3 orScreenPointVector3;

		[Token(Token = "0x4002340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Define if screenPoint are expressed as normalized screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public bool normalizedScreenPoint;

		[Token(Token = "0x4002341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[CheckForComponent(typeof(Camera))]
		[Tooltip("The Camera. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be set to null explicitly (default).\nLeave to none and the camera will be the one from EventSystem.current.camera")]
		public FsmGameObject camera;

		[Token(Token = "0x4002342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Result")]
		[Tooltip("Store the world Position of the screenPoint on the RectTransform Plane.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 worldPosition;

		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("True if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isHit;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent hitEvent;

		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the plane of the RectTransform is NOT hit, regardless of whether the point is inside the rectangle.")]
		public FsmEvent noHitEvent;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RectTransform _rt;

		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera _camera;

		[Token(Token = "0x6002679")]
		[Address(RVA = "0x12B4188", Offset = "0x12B4188", VA = "0x12B4188", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600267A")]
		[Address(RVA = "0x12B42AC", Offset = "0x12B42AC", VA = "0x12B42AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600267B")]
		[Address(RVA = "0x12B45CC", Offset = "0x12B45CC", VA = "0x12B45CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600267C")]
		[Address(RVA = "0x12B442C", Offset = "0x12B442C", VA = "0x12B442C")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x600267D")]
		[Address(RVA = "0x12B45D0", Offset = "0x12B45D0", VA = "0x12B45D0")]
		public RectTransformScreenPointToWorldPointInRectangle()
		{
		}
	}
	[Token(Token = "0x2000799")]
	[Tooltip("The position of the pivot of this RectTransform relative to the anchor reference point.The anchor reference point is where the anchors are. If the anchor are not together, the four anchor positions are interpolated according to the pivot normalized values.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetAnchoredPosition : BaseUpdateAction
	{
		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 position. Set to none for no effect, and/or set individual axis below. ")]
		public FsmVector2 position;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides position x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x400234C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the y value. Overrides position x value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x600267E")]
		[Address(RVA = "0x12B45D8", Offset = "0x12B45D8", VA = "0x12B45D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600267F")]
		[Address(RVA = "0x12B46A8", Offset = "0x12B46A8", VA = "0x12B46A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002680")]
		[Address(RVA = "0x12B483C", Offset = "0x12B483C", VA = "0x12B483C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002681")]
		[Address(RVA = "0x12B4784", Offset = "0x12B4784", VA = "0x12B4784")]
		private void DoSetAnchoredPosition()
		{
		}

		[Token(Token = "0x6002682")]
		[Address(RVA = "0x12B4840", Offset = "0x12B4840", VA = "0x12B4840")]
		public RectTransformSetAnchoredPosition()
		{
		}
	}
	[Token(Token = "0x200079A")]
	[Tooltip("The normalized position in the parent RectTransform that the upper right corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetAnchorMax : BaseUpdateAction
	{
		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6002683")]
		[Address(RVA = "0x12B4848", Offset = "0x12B4848", VA = "0x12B4848", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002684")]
		[Address(RVA = "0x12B4918", Offset = "0x12B4918", VA = "0x12B4918", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002685")]
		[Address(RVA = "0x12B4AAC", Offset = "0x12B4AAC", VA = "0x12B4AAC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002686")]
		[Address(RVA = "0x12B49F4", Offset = "0x12B49F4", VA = "0x12B49F4")]
		private void DoSetAnchorMax()
		{
		}

		[Token(Token = "0x6002687")]
		[Address(RVA = "0x12B4AB0", Offset = "0x12B4AB0", VA = "0x12B4AB0")]
		public RectTransformSetAnchorMax()
		{
		}
	}
	[Token(Token = "0x200079B")]
	[ActionCategory("RectTransform")]
	[Tooltip("The normalized position in the parent RectTransform that the lower left corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	public class RectTransformSetAnchorMin : BaseUpdateAction
	{
		[Token(Token = "0x4002353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMin;

		[Token(Token = "0x4002355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat x;

		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat y;

		[Token(Token = "0x4002357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x6002688")]
		[Address(RVA = "0x12B4AB8", Offset = "0x12B4AB8", VA = "0x12B4AB8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002689")]
		[Address(RVA = "0x12B4B88", Offset = "0x12B4B88", VA = "0x12B4B88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600268A")]
		[Address(RVA = "0x12B4D1C", Offset = "0x12B4D1C", VA = "0x12B4D1C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600268B")]
		[Address(RVA = "0x12B4C64", Offset = "0x12B4C64", VA = "0x12B4C64")]
		private void DoSetAnchorMin()
		{
		}

		[Token(Token = "0x600268C")]
		[Address(RVA = "0x12B4D20", Offset = "0x12B4D20", VA = "0x12B4D20")]
		public RectTransformSetAnchorMin()
		{
		}
	}
	[Token(Token = "0x200079C")]
	[ActionCategory("RectTransform")]
	[Tooltip("The normalized position in the parent RectTransform that the upper right corner is anchored to. This is relative screen space, values ranges from 0 to 1")]
	public class RectTransformSetAnchorMinAndMax : BaseUpdateAction
	{
		[Token(Token = "0x4002358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 anchor max. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMax;

		[Token(Token = "0x400235A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Vector2 anchor min. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 anchorMin;

		[Token(Token = "0x400235B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat xMax;

		[Token(Token = "0x400235C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Setting only the x value. Overrides anchorMax x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat yMax;

		[Token(Token = "0x400235D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat xMin;

		[Token(Token = "0x400235E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides anchorMin x value if set. Set to none for no effect")]
		public FsmFloat yMin;

		[Token(Token = "0x400235F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x600268D")]
		[Address(RVA = "0x12B4D28", Offset = "0x12B4D28", VA = "0x12B4D28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600268E")]
		[Address(RVA = "0x12B4E64", Offset = "0x12B4E64", VA = "0x12B4E64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600268F")]
		[Address(RVA = "0x12B508C", Offset = "0x12B508C", VA = "0x12B508C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002690")]
		[Address(RVA = "0x12B4F40", Offset = "0x12B4F40", VA = "0x12B4F40")]
		private void DoSetAnchorMax()
		{
		}

		[Token(Token = "0x6002691")]
		[Address(RVA = "0x12B5090", Offset = "0x12B5090", VA = "0x12B5090")]
		public RectTransformSetAnchorMinAndMax()
		{
		}
	}
	[Token(Token = "0x200079D")]
	[ActionCategory("RectTransform")]
	[Tooltip("The position ( normalized or not) in the parent RectTransform keeping the anchor rect size intact. This lets you position the whole Rect in one go. Use this to easily animate movement (like IOS sliding UIView)")]
	public class RectTransformSetAnchorRectPosition : BaseUpdateAction
	{
		[Token(Token = "0x200079E")]
		public enum AnchorReference
		{
			[Token(Token = "0x4002369")]
			TopLeft,
			[Token(Token = "0x400236A")]
			Top,
			[Token(Token = "0x400236B")]
			TopRight,
			[Token(Token = "0x400236C")]
			Right,
			[Token(Token = "0x400236D")]
			BottomRight,
			[Token(Token = "0x400236E")]
			Bottom,
			[Token(Token = "0x400236F")]
			BottomLeft,
			[Token(Token = "0x4002370")]
			Left,
			[Token(Token = "0x4002371")]
			Center
		}

		[Token(Token = "0x4002360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The reference for the given position")]
		public AnchorReference anchorReference;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Are the supplied screen coordinates normalized (0-1), or in pixels.")]
		public FsmBool normalized;

		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Vector2 position, and/or set individual axis below.")]
		public FsmVector2 anchor;

		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Anchor X position.")]
		public FsmFloat x;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Anchor Y position.")]
		public FsmFloat y;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rect _anchorRect;

		[Token(Token = "0x6002692")]
		[Address(RVA = "0x12B5098", Offset = "0x12B5098", VA = "0x12B5098", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002693")]
		[Address(RVA = "0x12B5190", Offset = "0x12B5190", VA = "0x12B5190", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002694")]
		[Address(RVA = "0x12B5530", Offset = "0x12B5530", VA = "0x12B5530", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002695")]
		[Address(RVA = "0x12B526C", Offset = "0x12B526C", VA = "0x12B526C")]
		private void DoSetAnchor()
		{
		}

		[Token(Token = "0x6002696")]
		[Address(RVA = "0x12B5534", Offset = "0x12B5534", VA = "0x12B5534")]
		public RectTransformSetAnchorRectPosition()
		{
		}
	}
	[Token(Token = "0x200079F")]
	[ActionCategory("RectTransform")]
	[Tooltip("Set the local position of this RectTransform.")]
	public class RectTransformSetLocalPosition : BaseUpdateAction
	{
		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position. Set to none for no effect")]
		public FsmVector2 position2d;

		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Or the 3d position. Set to none for no effect")]
		public FsmVector3 position;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The x component of the position. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The y component of the position. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The z component of the position. Set to none for no effect")]
		public FsmFloat z;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4002379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform _rt;

		[Token(Token = "0x6002697")]
		[Address(RVA = "0x12C9914", Offset = "0x12C9914", VA = "0x12C9914", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002698")]
		[Address(RVA = "0x12C9A88", Offset = "0x12C9A88", VA = "0x12C9A88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002699")]
		[Address(RVA = "0x12C9D14", Offset = "0x12C9D14", VA = "0x12C9D14", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600269A")]
		[Address(RVA = "0x12C9B88", Offset = "0x12C9B88", VA = "0x12C9B88")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x600269B")]
		[Address(RVA = "0x12C9D18", Offset = "0x12C9D18", VA = "0x12C9D18")]
		public RectTransformSetLocalPosition()
		{
		}
	}
	[Token(Token = "0x20007A0")]
	[Tooltip("Set the local rotation of this RectTransform.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetLocalRotation : BaseUpdateAction
	{
		[Token(Token = "0x400237A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400237B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rotation. Set to none for no effect")]
		public FsmVector3 rotation;

		[Token(Token = "0x400237C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component of the rotation. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x400237D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component of the rotation. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x400237E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The z component of the rotation. Set to none for no effect")]
		public FsmFloat z;

		[Token(Token = "0x400237F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RectTransform _rt;

		[Token(Token = "0x600269C")]
		[Address(RVA = "0x12C9D20", Offset = "0x12C9D20", VA = "0x12C9D20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600269D")]
		[Address(RVA = "0x12C9E50", Offset = "0x12C9E50", VA = "0x12C9E50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600269E")]
		[Address(RVA = "0x12CA098", Offset = "0x12CA098", VA = "0x12CA098", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x600269F")]
		[Address(RVA = "0x12C9F2C", Offset = "0x12C9F2C", VA = "0x12C9F2C")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x60026A0")]
		[Address(RVA = "0x12CA09C", Offset = "0x12CA09C", VA = "0x12CA09C")]
		public RectTransformSetLocalRotation()
		{
		}
	}
	[Token(Token = "0x20007A1")]
	[Tooltip("\tThe offset of the upper right corner of the rectangle relative to the upper right anchor.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetOffsetMax : BaseUpdateAction
	{
		[Token(Token = "0x4002380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 offsetMax. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 offsetMax;

		[Token(Token = "0x4002382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides offsetMax x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4002383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the y value. Overrides offsetMax y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4002384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x60026A1")]
		[Address(RVA = "0x12CA0A4", Offset = "0x12CA0A4", VA = "0x12CA0A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026A2")]
		[Address(RVA = "0x12CA174", Offset = "0x12CA174", VA = "0x12CA174", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026A3")]
		[Address(RVA = "0x12CA308", Offset = "0x12CA308", VA = "0x12CA308", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60026A4")]
		[Address(RVA = "0x12CA250", Offset = "0x12CA250", VA = "0x12CA250")]
		private void DoSetOffsetMax()
		{
		}

		[Token(Token = "0x60026A5")]
		[Address(RVA = "0x12CA30C", Offset = "0x12CA30C", VA = "0x12CA30C")]
		public RectTransformSetOffsetMax()
		{
		}
	}
	[Token(Token = "0x20007A2")]
	[Tooltip("The offset of the lower left corner of the rectangle relative to the lower left anchor.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetOffsetMin : BaseUpdateAction
	{
		[Token(Token = "0x4002385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 offsetMin. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 offsetMin;

		[Token(Token = "0x4002387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides offsetMin x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x4002388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the x value. Overrides offsetMin y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x4002389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x60026A6")]
		[Address(RVA = "0x12CA314", Offset = "0x12CA314", VA = "0x12CA314", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026A7")]
		[Address(RVA = "0x12CA3E4", Offset = "0x12CA3E4", VA = "0x12CA3E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026A8")]
		[Address(RVA = "0x12CA578", Offset = "0x12CA578", VA = "0x12CA578", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60026A9")]
		[Address(RVA = "0x12CA4C0", Offset = "0x12CA4C0", VA = "0x12CA4C0")]
		private void DoSetOffsetMin()
		{
		}

		[Token(Token = "0x60026AA")]
		[Address(RVA = "0x12CA57C", Offset = "0x12CA57C", VA = "0x12CA57C")]
		public RectTransformSetOffsetMin()
		{
		}
	}
	[Token(Token = "0x20007A3")]
	[Tooltip("The normalized position in this RectTransform that it rotates around.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetPivot : BaseUpdateAction
	{
		[Token(Token = "0x400238A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject target.")]
		[CheckForComponent(typeof(RectTransform))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400238B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 pivot. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 pivot;

		[Token(Token = "0x400238C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides pivot x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x400238D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Setting only the x value. Overrides pivot y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x400238E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x60026AB")]
		[Address(RVA = "0x12CA584", Offset = "0x12CA584", VA = "0x12CA584", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026AC")]
		[Address(RVA = "0x12CA654", Offset = "0x12CA654", VA = "0x12CA654", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026AD")]
		[Address(RVA = "0x12CA7E8", Offset = "0x12CA7E8", VA = "0x12CA7E8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60026AE")]
		[Address(RVA = "0x12CA730", Offset = "0x12CA730", VA = "0x12CA730")]
		private void DoSetPivotPosition()
		{
		}

		[Token(Token = "0x60026AF")]
		[Address(RVA = "0x12CA7EC", Offset = "0x12CA7EC", VA = "0x12CA7EC")]
		public RectTransformSetPivot()
		{
		}
	}
	[Token(Token = "0x20007A4")]
	[Tooltip("Set the screen position of this RectTransform.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetScreenPosition : BaseUpdateAction
	{
		[Token(Token = "0x400238F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The position in screen coordinates.")]
		public FsmVector2 screenPosition;

		[Token(Token = "0x4002391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set the x component of the position. Set to None for no effect.")]
		public FsmFloat x;

		[Token(Token = "0x4002392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the y component of the position. Set to None for no effect.")]
		public FsmFloat y;

		[Token(Token = "0x4002393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Screen coordinates are normalized (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x4002394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4002395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x4002396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Canvas rootCanvas;

		[Token(Token = "0x4002397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RectTransform rootRectTransform;

		[Token(Token = "0x4002398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera canvasCamera;

		[Token(Token = "0x60026B0")]
		[Address(RVA = "0x12CA7F4", Offset = "0x12CA7F4", VA = "0x12CA7F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026B1")]
		[Address(RVA = "0x12CA908", Offset = "0x12CA908", VA = "0x12CA908")]
		private bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x60026B2")]
		[Address(RVA = "0x12CAAC0", Offset = "0x12CAAC0", VA = "0x12CAAC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026B3")]
		[Address(RVA = "0x12CACC8", Offset = "0x12CACC8", VA = "0x12CACC8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60026B4")]
		[Address(RVA = "0x12CAAF8", Offset = "0x12CAAF8", VA = "0x12CAAF8")]
		private void DoSetScreenPosition()
		{
		}

		[Token(Token = "0x60026B5")]
		[Address(RVA = "0x12CACCC", Offset = "0x12CACCC", VA = "0x12CACCC")]
		public RectTransformSetScreenPosition()
		{
		}
	}
	[Token(Token = "0x20007A5")]
	[ActionCategory("RectTransform")]
	[Tooltip("Set the screen rect of a RectTransform using 2 Vector2 points.")]
	public class RectTransformSetScreenRectFromPoints : BaseUpdateAction
	{
		[Token(Token = "0x4002399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400239A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The screen position of the first point to define the rect.")]
		public FsmVector2 point1;

		[Token(Token = "0x400239B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The screen position of the second point to define the rect.")]
		public FsmVector2 point2;

		[Token(Token = "0x400239C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Screen points use normalized coordinates (0-1).")]
		public FsmBool normalized;

		[Token(Token = "0x400239D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the resulting screen rect.")]
		public FsmRect storeScreenRect;

		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject cachedGameObject;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Canvas rootCanvas;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RectTransform rootRectTransform;

		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera canvasCamera;

		[Token(Token = "0x60026B6")]
		[Address(RVA = "0x12CACD4", Offset = "0x12CACD4", VA = "0x12CACD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026B7")]
		[Address(RVA = "0x12CADB4", Offset = "0x12CADB4", VA = "0x12CADB4")]
		private bool UpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x60026B8")]
		[Address(RVA = "0x12CAF6C", Offset = "0x12CAF6C", VA = "0x12CAF6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026B9")]
		[Address(RVA = "0x12CB1C8", Offset = "0x12CB1C8", VA = "0x12CB1C8", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60026BA")]
		[Address(RVA = "0x12CAFA4", Offset = "0x12CAFA4", VA = "0x12CAFA4")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x60026BB")]
		[Address(RVA = "0x12CB1CC", Offset = "0x12CB1CC", VA = "0x12CB1CC")]
		public RectTransformSetScreenRectFromPoints()
		{
		}
	}
	[Token(Token = "0x20007A6")]
	[Tooltip("Set the size of this RectTransform relative to the distances between the anchors. this is the 'Width' and 'Height' values in the RectTransform inspector.")]
	[ActionCategory("RectTransform")]
	public class RectTransformSetSizeDelta : BaseUpdateAction
	{
		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("TheVector2 sizeDelta. Set to none for no effect, and/or set individual axis below.")]
		public FsmVector2 sizeDelta;

		[Token(Token = "0x40023A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Setting only the x value. Overrides sizeDelta x value if set. Set to none for no effect")]
		public FsmFloat x;

		[Token(Token = "0x40023A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Setting only the x value. Overrides sizeDelta y value if set. Set to none for no effect")]
		public FsmFloat y;

		[Token(Token = "0x40023A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RectTransform _rt;

		[Token(Token = "0x60026BC")]
		[Address(RVA = "0x12CB1D4", Offset = "0x12CB1D4", VA = "0x12CB1D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026BD")]
		[Address(RVA = "0x12CB2A4", Offset = "0x12CB2A4", VA = "0x12CB2A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026BE")]
		[Address(RVA = "0x12CB438", Offset = "0x12CB438", VA = "0x12CB438", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60026BF")]
		[Address(RVA = "0x12CB380", Offset = "0x12CB380", VA = "0x12CB380")]
		private void DoSetSizeDelta()
		{
		}

		[Token(Token = "0x60026C0")]
		[Address(RVA = "0x12CB43C", Offset = "0x12CB43C", VA = "0x12CB43C")]
		public RectTransformSetSizeDelta()
		{
		}
	}
	[Token(Token = "0x20007A7")]
	[Tooltip("RectTransforms position from world space into screen space. Leave the camera to none for default behavior.")]
	[ActionCategory("RectTransform")]
	public class RectTransformWorldToScreenPoint : BaseUpdateAction
	{
		[Token(Token = "0x40023A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(RectTransform))]
		[Tooltip("The GameObject target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40023A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The camera to perform the calculation. Leave as None for default behavior.")]
		[CheckForComponent(typeof(Camera))]
		public FsmOwnerDefault camera;

		[Token(Token = "0x40023AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen position in a Vector3 Variable. Z will equal zero.")]
		public FsmVector3 screenPoint;

		[Token(Token = "0x40023AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen X position in a Float Variable.")]
		public FsmFloat screenX;

		[Token(Token = "0x40023AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the screen Y position in a Float Variable.")]
		public FsmFloat screenY;

		[Token(Token = "0x40023AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Normalize screen coordinates (0-1). Otherwise coordinates are in pixels.")]
		public FsmBool normalize;

		[Token(Token = "0x40023AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RectTransform _rt;

		[Token(Token = "0x40023AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Camera _cam;

		[Token(Token = "0x60026C1")]
		[Address(RVA = "0x12CB444", Offset = "0x12CB444", VA = "0x12CB444", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026C2")]
		[Address(RVA = "0x12CB55C", Offset = "0x12CB55C", VA = "0x12CB55C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026C3")]
		[Address(RVA = "0x12CB7AC", Offset = "0x12CB7AC", VA = "0x12CB7AC", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x60026C4")]
		[Address(RVA = "0x12CB6AC", Offset = "0x12CB6AC", VA = "0x12CB6AC")]
		private void DoWorldToScreenPoint()
		{
		}

		[Token(Token = "0x60026C5")]
		[Address(RVA = "0x12CB7B0", Offset = "0x12CB7B0", VA = "0x12CB7B0")]
		public RectTransformWorldToScreenPoint()
		{
		}
	}
	[Token(Token = "0x20007A8")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Enables/Disables Fog in the scene.")]
	public class EnableFog : FsmStateAction
	{
		[Token(Token = "0x40023B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enableFog;

		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the Enable Fog setting is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60026C6")]
		[Address(RVA = "0x12CB7B8", Offset = "0x12CB7B8", VA = "0x12CB7B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026C7")]
		[Address(RVA = "0x12CB7E8", Offset = "0x12CB7E8", VA = "0x12CB7E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026C8")]
		[Address(RVA = "0x12CB830", Offset = "0x12CB830", VA = "0x12CB830", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026C9")]
		[Address(RVA = "0x12CB858", Offset = "0x12CB858", VA = "0x12CB858")]
		public EnableFog()
		{
		}
	}
	[Token(Token = "0x20007A9")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the Ambient Light Color for the scene.")]
	public class SetAmbientLight : FsmStateAction
	{
		[Token(Token = "0x40023B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Color of the ambient light.")]
		public FsmColor ambientColor;

		[Token(Token = "0x40023B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60026CA")]
		[Address(RVA = "0x12CB860", Offset = "0x12CB860", VA = "0x12CB860", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026CB")]
		[Address(RVA = "0x12CB89C", Offset = "0x12CB89C", VA = "0x12CB89C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026CC")]
		[Address(RVA = "0x12CB8EC", Offset = "0x12CB8EC", VA = "0x12CB8EC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026CD")]
		[Address(RVA = "0x12CB8C8", Offset = "0x12CB8C8", VA = "0x12CB8C8")]
		private void DoSetAmbientColor()
		{
		}

		[Token(Token = "0x60026CE")]
		[Address(RVA = "0x12CB8F0", Offset = "0x12CB8F0", VA = "0x12CB8F0")]
		public SetAmbientLight()
		{
		}
	}
	[Token(Token = "0x20007AA")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the intensity of all Flares in the scene.")]
	public class SetFlareStrength : FsmStateAction
	{
		[Token(Token = "0x40023B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The intensity of flares in the scene.")]
		public FsmFloat flareStrength;

		[Token(Token = "0x40023B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the intensity is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60026CF")]
		[Address(RVA = "0x12CB8F8", Offset = "0x12CB8F8", VA = "0x12CB8F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026D0")]
		[Address(RVA = "0x12CB92C", Offset = "0x12CB92C", VA = "0x12CB92C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026D1")]
		[Address(RVA = "0x12CB97C", Offset = "0x12CB97C", VA = "0x12CB97C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026D2")]
		[Address(RVA = "0x12CB958", Offset = "0x12CB958", VA = "0x12CB958")]
		private void DoSetFlareStrength()
		{
		}

		[Token(Token = "0x60026D3")]
		[Address(RVA = "0x12CB980", Offset = "0x12CB980", VA = "0x12CB980")]
		public SetFlareStrength()
		{
		}
	}
	[Token(Token = "0x20007AB")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the color of the Fog in the scene.")]
	public class SetFogColor : FsmStateAction
	{
		[Token(Token = "0x40023B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The color of the fog.")]
		[RequiredField]
		public FsmColor fogColor;

		[Token(Token = "0x40023B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the color is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60026D4")]
		[Address(RVA = "0x12CB988", Offset = "0x12CB988", VA = "0x12CB988", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026D5")]
		[Address(RVA = "0x12CB9C4", Offset = "0x12CB9C4", VA = "0x12CB9C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026D6")]
		[Address(RVA = "0x12CBA14", Offset = "0x12CBA14", VA = "0x12CBA14", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026D7")]
		[Address(RVA = "0x12CB9F0", Offset = "0x12CB9F0", VA = "0x12CB9F0")]
		private void DoSetFogColor()
		{
		}

		[Token(Token = "0x60026D8")]
		[Address(RVA = "0x12CBA18", Offset = "0x12CBA18", VA = "0x12CBA18")]
		public SetFogColor()
		{
		}
	}
	[Token(Token = "0x20007AC")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the density of the Fog in the scene.")]
	public class SetFogDensity : FsmStateAction
	{
		[Token(Token = "0x40023B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The density of the fog.")]
		public FsmFloat fogDensity;

		[Token(Token = "0x40023B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the fog density is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60026D9")]
		[Address(RVA = "0x12CBA20", Offset = "0x12CBA20", VA = "0x12CBA20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026DA")]
		[Address(RVA = "0x12CBA50", Offset = "0x12CBA50", VA = "0x12CBA50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026DB")]
		[Address(RVA = "0x12CBAA0", Offset = "0x12CBAA0", VA = "0x12CBAA0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026DC")]
		[Address(RVA = "0x12CBA7C", Offset = "0x12CBA7C", VA = "0x12CBA7C")]
		private void DoSetFogDensity()
		{
		}

		[Token(Token = "0x60026DD")]
		[Address(RVA = "0x12CBAA4", Offset = "0x12CBAA4", VA = "0x12CBAA4")]
		public SetFogDensity()
		{
		}
	}
	[Token(Token = "0x20007AD")]
	[ActionCategory(ActionCategory.RenderSettings)]
	[Tooltip("Sets the size of light halos.")]
	public class SetHaloStrength : FsmStateAction
	{
		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The size of light halos.")]
		[RequiredField]
		public FsmFloat haloStrength;

		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Update every frame. Useful if the size is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60026DE")]
		[Address(RVA = "0x12CBAAC", Offset = "0x12CBAAC", VA = "0x12CBAAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026DF")]
		[Address(RVA = "0x12CBADC", Offset = "0x12CBADC", VA = "0x12CBADC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026E0")]
		[Address(RVA = "0x12CBB2C", Offset = "0x12CBB2C", VA = "0x12CBB2C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026E1")]
		[Address(RVA = "0x12CBB08", Offset = "0x12CBB08", VA = "0x12CBB08")]
		private void DoSetHaloStrength()
		{
		}

		[Token(Token = "0x60026E2")]
		[Address(RVA = "0x12CBB30", Offset = "0x12CBB30", VA = "0x12CBB30")]
		public SetHaloStrength()
		{
		}
	}
	[Token(Token = "0x20007AE")]
	[Tooltip("Sets the global Skybox.")]
	[ActionCategory(ActionCategory.RenderSettings)]
	public class SetSkybox : FsmStateAction
	{
		[Token(Token = "0x40023BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The skybox material.")]
		public FsmMaterial skybox;

		[Token(Token = "0x40023BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the Skybox is changing.")]
		public bool everyFrame;

		[Token(Token = "0x60026E3")]
		[Address(RVA = "0x12CBB38", Offset = "0x12CBB38", VA = "0x12CBB38", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026E4")]
		[Address(RVA = "0x12CBB44", Offset = "0x12CBB44", VA = "0x12CBB44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026E5")]
		[Address(RVA = "0x12CBB88", Offset = "0x12CBB88", VA = "0x12CBB88", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026E6")]
		[Address(RVA = "0x12CBBAC", Offset = "0x12CBBAC", VA = "0x12CBBAC")]
		public SetSkybox()
		{
		}
	}
	[Token(Token = "0x20007AF")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Allow scenes to be activated. Use this after {{LoadSceneAsynch}} if you did not set the scene to activate after loading")]
	public class AllowSceneActivation : FsmStateAction
	{
		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The name of the new scene. It cannot be empty, null, or same as existing scenes.")]
		[UIHint(UIHint.Variable)]
		public FsmInt aSynchOperationHashCode;

		[Token(Token = "0x40023BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Allow the scene to be activated")]
		public FsmBool allowSceneActivation;

		[Token(Token = "0x40023C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The loading's progress.")]
		[ActionSection("Result")]
		public FsmFloat progress;

		[Token(Token = "0x40023C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True when loading is done")]
		public FsmBool isDone;

		[Token(Token = "0x40023C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent when scene loading is done")]
		public FsmEvent doneEvent;

		[Token(Token = "0x40023C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when action could not be performed. Check Log for more information")]
		public FsmEvent failureEvent;

		[Token(Token = "0x60026E7")]
		[Address(RVA = "0x12CBBB4", Offset = "0x12CBBB4", VA = "0x12CBBB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026E8")]
		[Address(RVA = "0x12CBC28", Offset = "0x12CBC28", VA = "0x12CBC28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026E9")]
		[Address(RVA = "0x12CBD80", Offset = "0x12CBD80", VA = "0x12CBD80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026EA")]
		[Address(RVA = "0x12CBC2C", Offset = "0x12CBC2C", VA = "0x12CBC2C")]
		private void DoAllowSceneActivation()
		{
		}

		[Token(Token = "0x60026EB")]
		[Address(RVA = "0x12CBF4C", Offset = "0x12CBF4C", VA = "0x12CBF4C")]
		public AllowSceneActivation()
		{
		}
	}
	[Token(Token = "0x20007B0")]
	[Tooltip("Create an empty new scene with the given name additively. The path of the new scene will be empty")]
	[ActionCategory(ActionCategory.Scene)]
	public class CreateScene : FsmStateAction
	{
		[Token(Token = "0x40023C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the new scene. It cannot be empty or null, or same as the name of the existing scenes.")]
		[RequiredField]
		public FsmString sceneName;

		[Token(Token = "0x60026EC")]
		[Address(RVA = "0x12CBF54", Offset = "0x12CBF54", VA = "0x12CBF54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026ED")]
		[Address(RVA = "0x12CBF60", Offset = "0x12CBF60", VA = "0x12CBF60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026EE")]
		[Address(RVA = "0x12CBFE0", Offset = "0x12CBFE0", VA = "0x12CBFE0")]
		public CreateScene()
		{
		}
	}
	[Token(Token = "0x20007B1")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get the last activateChanged Scene Event data when event was sent from the action 'SendSceneActiveChangedEvent")]
	public class GetSceneActivateChangedEventData : FsmStateAction
	{
		[Token(Token = "0x40023C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The new active scene name")]
		[ActionSection("New Active Scene")]
		[UIHint(UIHint.Variable)]
		public FsmString newName;

		[Token(Token = "0x40023C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The new active scene path")]
		public FsmString newPath;

		[Token(Token = "0x40023C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the new active scene is valid.")]
		public FsmBool newIsValid;

		[Token(Token = "0x40023C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The new active scene Build Index")]
		[UIHint(UIHint.Variable)]
		public FsmInt newBuildIndex;

		[Token(Token = "0x40023C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("true if the new active scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool newIsLoaded;

		[Token(Token = "0x40023CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the new active scene is modified.")]
		public FsmBool newIsDirty;

		[Token(Token = "0x40023CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The new active scene RootCount")]
		[UIHint(UIHint.Variable)]
		public FsmInt newRootCount;

		[Token(Token = "0x40023CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The new active scene Root GameObjects")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray newRootGameObjects;

		[Token(Token = "0x40023CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The previous active scene name")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Previous Active Scene")]
		public FsmString previousName;

		[Token(Token = "0x40023CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The previous active scene path")]
		[UIHint(UIHint.Variable)]
		public FsmString previousPath;

		[Token(Token = "0x40023CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("true if the previous active scene is valid.")]
		[UIHint(UIHint.Variable)]
		public FsmBool previousIsValid;

		[Token(Token = "0x40023D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The previous active scene Build Index")]
		public FsmInt previousBuildIndex;

		[Token(Token = "0x40023D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the previous active scene is loaded.")]
		public FsmBool previousIsLoaded;

		[Token(Token = "0x40023D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the previous active scene is modified.")]
		public FsmBool previousIsDirty;

		[Token(Token = "0x40023D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The previous active scene RootCount")]
		[UIHint(UIHint.Variable)]
		public FsmInt previousRootCount;

		[Token(Token = "0x40023D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[Tooltip("The previous active scene Root GameObjects")]
		[UIHint(UIHint.Variable)]
		public FsmArray previousRootGameObjects;

		[Token(Token = "0x40023D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Scene _scene;

		[Token(Token = "0x60026EF")]
		[Address(RVA = "0x12CBFE8", Offset = "0x12CBFE8", VA = "0x12CBFE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026F0")]
		[Address(RVA = "0x12CC0F0", Offset = "0x12CC0F0", VA = "0x12CC0F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026F1")]
		[Address(RVA = "0x12CC504", Offset = "0x12CC504", VA = "0x12CC504", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026F2")]
		[Address(RVA = "0x12CC10C", Offset = "0x12CC10C", VA = "0x12CC10C")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x60026F3")]
		[Address(RVA = "0x12CC508", Offset = "0x12CC508", VA = "0x12CC508")]
		public GetSceneActivateChangedEventData()
		{
		}
	}
	[Token(Token = "0x20007B2")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Returns the index of a scene in the Build Settings. Always returns -1 if the scene was loaded through an AssetBundle.")]
	public class GetSceneBuildIndex : GetSceneActionBase
	{
		[Token(Token = "0x40023D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The scene Build Index")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmInt buildIndex;

		[Token(Token = "0x60026F4")]
		[Address(RVA = "0x12CC510", Offset = "0x12CC510", VA = "0x12CC510", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026F5")]
		[Address(RVA = "0x12CC5B8", Offset = "0x12CC5B8", VA = "0x12CC5B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026F6")]
		[Address(RVA = "0x12CC920", Offset = "0x12CC920", VA = "0x12CC920")]
		private void DoGetSceneBuildIndex()
		{
		}

		[Token(Token = "0x60026F7")]
		[Address(RVA = "0x12CC98C", Offset = "0x12CC98C", VA = "0x12CC98C")]
		public GetSceneBuildIndex()
		{
		}
	}
	[Token(Token = "0x20007B3")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get the total number of currently loaded scenes.")]
	public class GetSceneCount : FsmStateAction
	{
		[Token(Token = "0x40023D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The number of currently loaded scenes.")]
		[RequiredField]
		public FsmInt sceneCount;

		[Token(Token = "0x40023D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every Frame")]
		public bool everyFrame;

		[Token(Token = "0x60026F8")]
		[Address(RVA = "0x12CC99C", Offset = "0x12CC99C", VA = "0x12CC99C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026F9")]
		[Address(RVA = "0x12CC9C0", Offset = "0x12CC9C0", VA = "0x12CC9C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026FA")]
		[Address(RVA = "0x12CCA54", Offset = "0x12CCA54", VA = "0x12CCA54", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60026FB")]
		[Address(RVA = "0x12CC9EC", Offset = "0x12CC9EC", VA = "0x12CC9EC")]
		private void DoGetSceneCount()
		{
		}

		[Token(Token = "0x60026FC")]
		[Address(RVA = "0x12CCA58", Offset = "0x12CCA58", VA = "0x12CCA58")]
		public GetSceneCount()
		{
		}
	}
	[Token(Token = "0x20007B4")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get the number of scenes in Build Settings.")]
	public class GetSceneCountInBuildSettings : FsmStateAction
	{
		[Token(Token = "0x40023D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The number of scenes in Build Settings.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmInt sceneCountInBuildSettings;

		[Token(Token = "0x60026FD")]
		[Address(RVA = "0x12CCA60", Offset = "0x12CCA60", VA = "0x12CCA60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60026FE")]
		[Address(RVA = "0x12CCA6C", Offset = "0x12CCA6C", VA = "0x12CCA6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60026FF")]
		[Address(RVA = "0x12CCA88", Offset = "0x12CCA88", VA = "0x12CCA88")]
		private void DoGetSceneCountInBuildSettings()
		{
		}

		[Token(Token = "0x6002700")]
		[Address(RVA = "0x12CCAF0", Offset = "0x12CCAF0", VA = "0x12CCAF0")]
		public GetSceneCountInBuildSettings()
		{
		}
	}
	[Token(Token = "0x20007B5")]
	[Tooltip("Get a scene isDirty flag. True if the scene is modified.")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneIsDirty : GetSceneActionBase
	{
		[Token(Token = "0x40023DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("true if the scene is modified.")]
		public FsmBool isDirty;

		[Token(Token = "0x40023DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene is modified.")]
		public FsmEvent isDirtyEvent;

		[Token(Token = "0x40023DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the scene is unmodified.")]
		public FsmEvent isNotDirtyEvent;

		[Token(Token = "0x40023DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002701")]
		[Address(RVA = "0x12CCAF8", Offset = "0x12CCAF8", VA = "0x12CCAF8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002702")]
		[Address(RVA = "0x12CCB20", Offset = "0x12CCB20", VA = "0x12CCB20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002703")]
		[Address(RVA = "0x12CCBC4", Offset = "0x12CCBC4", VA = "0x12CCBC4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002704")]
		[Address(RVA = "0x12CCB54", Offset = "0x12CCB54", VA = "0x12CCB54")]
		private void DoGetSceneIsDirty()
		{
		}

		[Token(Token = "0x6002705")]
		[Address(RVA = "0x12CCBC8", Offset = "0x12CCBC8", VA = "0x12CCBC8")]
		public GetSceneIsDirty()
		{
		}
	}
	[Token(Token = "0x20007B6")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene isLoaded flag.")]
	public class GetSceneIsLoaded : GetSceneActionBase
	{
		[Token(Token = "0x40023DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is loaded.")]
		[ActionSection("Result")]
		public FsmBool isLoaded;

		[Token(Token = "0x40023DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene is loaded.")]
		public FsmEvent isLoadedEvent;

		[Token(Token = "0x40023E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the scene is not loaded.")]
		public FsmEvent isNotLoadedEvent;

		[Token(Token = "0x40023E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every Frame")]
		public bool everyFrame;

		[Token(Token = "0x6002706")]
		[Address(RVA = "0x12CCBD0", Offset = "0x12CCBD0", VA = "0x12CCBD0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002707")]
		[Address(RVA = "0x12CCBF8", Offset = "0x12CCBF8", VA = "0x12CCBF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002708")]
		[Address(RVA = "0x12CCC9C", Offset = "0x12CCC9C", VA = "0x12CCC9C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002709")]
		[Address(RVA = "0x12CCC2C", Offset = "0x12CCC2C", VA = "0x12CCC2C")]
		private void DoGetSceneIsLoaded()
		{
		}

		[Token(Token = "0x600270A")]
		[Address(RVA = "0x12CCCA0", Offset = "0x12CCCA0", VA = "0x12CCCA0")]
		public GetSceneIsLoaded()
		{
		}
	}
	[Token(Token = "0x20007B7")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene isValid flag. A scene may be invalid if, for example, you tried to open a scene that does not exist. In this case, the scene returned from EditorSceneManager.OpenScene would return False for IsValid. ")]
	public class GetSceneIsValid : GetSceneActionBase
	{
		[Token(Token = "0x40023E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Result")]
		[Tooltip("true if the scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isValid;

		[Token(Token = "0x40023E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene is valid.")]
		public FsmEvent isValidEvent;

		[Token(Token = "0x40023E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if the scene is not valid.")]
		public FsmEvent isNotValidEvent;

		[Token(Token = "0x600270B")]
		[Address(RVA = "0x12CCCA8", Offset = "0x12CCCA8", VA = "0x12CCCA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600270C")]
		[Address(RVA = "0x12CCCC8", Offset = "0x12CCCC8", VA = "0x12CCCC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600270D")]
		[Address(RVA = "0x12CCCEC", Offset = "0x12CCCEC", VA = "0x12CCCEC")]
		private void DoGetSceneIsValid()
		{
		}

		[Token(Token = "0x600270E")]
		[Address(RVA = "0x12CCD94", Offset = "0x12CCD94", VA = "0x12CCD94")]
		public GetSceneIsValid()
		{
		}
	}
	[Token(Token = "0x20007B8")]
	[Tooltip("Get the last Loaded Scene Event data when event was sent from the action 'SendSceneLoadedEvent")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneLoadedEventData : FsmStateAction
	{
		[Token(Token = "0x40023E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The scene loaded mode")]
		[ObjectType(typeof(LoadSceneMode))]
		[UIHint(UIHint.Variable)]
		public FsmEnum loadedMode;

		[Token(Token = "0x40023E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene name")]
		public FsmString name;

		[Token(Token = "0x40023E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The scene path")]
		[UIHint(UIHint.Variable)]
		public FsmString path;

		[Token(Token = "0x40023E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is valid.")]
		public FsmBool isValid;

		[Token(Token = "0x40023E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene Build Index")]
		public FsmInt buildIndex;

		[Token(Token = "0x40023EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("true if the scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isLoaded;

		[Token(Token = "0x40023EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("true if the scene is modified.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isDirty;

		[Token(Token = "0x40023EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene RootCount")]
		public FsmInt rootCount;

		[Token(Token = "0x40023ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The scene Root GameObjects")]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray rootGameObjects;

		[Token(Token = "0x40023EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Scene _scene;

		[Token(Token = "0x600270F")]
		[Address(RVA = "0x12CCD9C", Offset = "0x12CCD9C", VA = "0x12CCD9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002710")]
		[Address(RVA = "0x12CCE34", Offset = "0x12CCE34", VA = "0x12CCE34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002711")]
		[Address(RVA = "0x12CCE50", Offset = "0x12CCE50", VA = "0x12CCE50")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x6002712")]
		[Address(RVA = "0x12CD0C4", Offset = "0x12CD0C4", VA = "0x12CD0C4")]
		public GetSceneLoadedEventData()
		{
		}
	}
	[Token(Token = "0x20007B9")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene name.")]
	public class GetSceneName : GetSceneActionBase
	{
		[Token(Token = "0x40023EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Result")]
		[RequiredField]
		[Tooltip("The scene name")]
		[UIHint(UIHint.Variable)]
		public FsmString name;

		[Token(Token = "0x6002713")]
		[Address(RVA = "0x12CD0CC", Offset = "0x12CD0CC", VA = "0x12CD0CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002714")]
		[Address(RVA = "0x12CD0EC", Offset = "0x12CD0EC", VA = "0x12CD0EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002715")]
		[Address(RVA = "0x12CD110", Offset = "0x12CD110", VA = "0x12CD110")]
		private void DoGetSceneName()
		{
		}

		[Token(Token = "0x6002716")]
		[Address(RVA = "0x12CD188", Offset = "0x12CD188", VA = "0x12CD188")]
		public GetSceneName()
		{
		}
	}
	[Token(Token = "0x20007BA")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene path.")]
	public class GetScenePath : GetSceneActionBase
	{
		[Token(Token = "0x40023F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The scene path")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmString path;

		[Token(Token = "0x6002717")]
		[Address(RVA = "0x12CD190", Offset = "0x12CD190", VA = "0x12CD190", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002718")]
		[Address(RVA = "0x12CD1B0", Offset = "0x12CD1B0", VA = "0x12CD1B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002719")]
		[Address(RVA = "0x12CD1D4", Offset = "0x12CD1D4", VA = "0x12CD1D4")]
		private void DoGetScenePath()
		{
		}

		[Token(Token = "0x600271A")]
		[Address(RVA = "0x12CD24C", Offset = "0x12CD24C", VA = "0x12CD24C")]
		public GetScenePath()
		{
		}
	}
	[Token(Token = "0x20007BB")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene isDirty flag. true if the scene is modified. ")]
	public class GetSceneProperties : GetSceneActionBase
	{
		[Token(Token = "0x40023F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene name")]
		[ActionSection("Result")]
		public FsmString name;

		[Token(Token = "0x40023F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The scene path")]
		[UIHint(UIHint.Variable)]
		public FsmString path;

		[Token(Token = "0x40023F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene Build Index")]
		public FsmInt buildIndex;

		[Token(Token = "0x40023F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is valid.")]
		public FsmBool isValid;

		[Token(Token = "0x40023F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is loaded.")]
		public FsmBool isLoaded;

		[Token(Token = "0x40023F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("true if the scene is modified.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isDirty;

		[Token(Token = "0x40023F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene RootCount")]
		public FsmInt rootCount;

		[Token(Token = "0x40023F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene Root GameObjects")]
		public FsmArray rootGameObjects;

		[Token(Token = "0x40023F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600271B")]
		[Address(RVA = "0x12CD254", Offset = "0x12CD254", VA = "0x12CD254", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600271C")]
		[Address(RVA = "0x12CD2EC", Offset = "0x12CD2EC", VA = "0x12CD2EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600271D")]
		[Address(RVA = "0x12CD320", Offset = "0x12CD320", VA = "0x12CD320")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x600271E")]
		[Address(RVA = "0x12CD51C", Offset = "0x12CD51C", VA = "0x12CD51C")]
		public GetSceneProperties()
		{
		}
	}
	[Token(Token = "0x20007BC")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Get a scene RootCount, the number of root transforms of this scene.")]
	public class GetSceneRootCount : GetSceneActionBase
	{
		[Token(Token = "0x40023FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("The scene RootCount")]
		[RequiredField]
		public FsmInt rootCount;

		[Token(Token = "0x40023FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600271F")]
		[Address(RVA = "0x12CD524", Offset = "0x12CD524", VA = "0x12CD524", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002720")]
		[Address(RVA = "0x12CD54C", Offset = "0x12CD54C", VA = "0x12CD54C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002721")]
		[Address(RVA = "0x12CD5EC", Offset = "0x12CD5EC", VA = "0x12CD5EC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002722")]
		[Address(RVA = "0x12CD580", Offset = "0x12CD580", VA = "0x12CD580")]
		private void DoGetSceneRootCount()
		{
		}

		[Token(Token = "0x6002723")]
		[Address(RVA = "0x12CD5F0", Offset = "0x12CD5F0", VA = "0x12CD5F0")]
		public GetSceneRootCount()
		{
		}
	}
	[Token(Token = "0x20007BD")]
	[Tooltip("Get a scene Root GameObjects.")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneRootGameObjects : GetSceneActionBase
	{
		[Token(Token = "0x40023FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[ActionSection("Result")]
		[Tooltip("The scene Root GameObjects")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray rootGameObjects;

		[Token(Token = "0x40023FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every Frame")]
		public bool everyFrame;

		[Token(Token = "0x6002724")]
		[Address(RVA = "0x12CD5F8", Offset = "0x12CD5F8", VA = "0x12CD5F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002725")]
		[Address(RVA = "0x12CD620", Offset = "0x12CD620", VA = "0x12CD620", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002726")]
		[Address(RVA = "0x12CD6CC", Offset = "0x12CD6CC", VA = "0x12CD6CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002727")]
		[Address(RVA = "0x12CD654", Offset = "0x12CD654", VA = "0x12CD654")]
		private void DoGetSceneRootGameObjects()
		{
		}

		[Token(Token = "0x6002728")]
		[Address(RVA = "0x12CD6D0", Offset = "0x12CD6D0", VA = "0x12CD6D0")]
		public GetSceneRootGameObjects()
		{
		}
	}
	[Token(Token = "0x20007BE")]
	[Tooltip("Get the last Unloaded Scene Event data when event was sent from the action 'SendSceneUnloadedEvent")]
	[ActionCategory(ActionCategory.Scene)]
	public class GetSceneUnloadedEventData : FsmStateAction
	{
		[Token(Token = "0x40023FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The scene name")]
		[UIHint(UIHint.Variable)]
		public FsmString name;

		[Token(Token = "0x40023FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene path")]
		public FsmString path;

		[Token(Token = "0x4002400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene Build Index")]
		public FsmInt buildIndex;

		[Token(Token = "0x4002401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is valid.")]
		public FsmBool isValid;

		[Token(Token = "0x4002402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("true if the scene is loaded.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isLoaded;

		[Token(Token = "0x4002403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if the scene is modified.")]
		public FsmBool isDirty;

		[Token(Token = "0x4002404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scene RootCount")]
		public FsmInt rootCount;

		[Token(Token = "0x4002405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The scene Root GameObjects")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		public FsmArray rootGameObjects;

		[Token(Token = "0x4002406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Scene _scene;

		[Token(Token = "0x6002729")]
		[Address(RVA = "0x12CD6D8", Offset = "0x12CD6D8", VA = "0x12CD6D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600272A")]
		[Address(RVA = "0x12CD758", Offset = "0x12CD758", VA = "0x12CD758", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600272B")]
		[Address(RVA = "0x12CD9A0", Offset = "0x12CD9A0", VA = "0x12CD9A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600272C")]
		[Address(RVA = "0x12CD784", Offset = "0x12CD784", VA = "0x12CD784")]
		private void DoGetSceneProperties()
		{
		}

		[Token(Token = "0x600272D")]
		[Address(RVA = "0x12CD9A4", Offset = "0x12CD9A4", VA = "0x12CD9A4")]
		public GetSceneUnloadedEventData()
		{
		}
	}
	[Token(Token = "0x20007BF")]
	public abstract class GetSceneActionBase : FsmStateAction
	{
		[Token(Token = "0x20007C0")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x4002413")]
			SceneAtIndex,
			[Token(Token = "0x4002414")]
			SceneByName,
			[Token(Token = "0x4002415")]
			SceneByPath
		}

		[Token(Token = "0x20007C1")]
		public enum SceneSimpleReferenceOptions
		{
			[Token(Token = "0x4002417")]
			SceneAtIndex,
			[Token(Token = "0x4002418")]
			SceneByName
		}

		[Token(Token = "0x20007C2")]
		public enum SceneBuildReferenceOptions
		{
			[Token(Token = "0x400241A")]
			SceneAtBuildIndex,
			[Token(Token = "0x400241B")]
			SceneByName
		}

		[Token(Token = "0x20007C3")]
		public enum SceneAllReferenceOptions
		{
			[Token(Token = "0x400241D")]
			ActiveScene,
			[Token(Token = "0x400241E")]
			SceneAtIndex,
			[Token(Token = "0x400241F")]
			SceneByName,
			[Token(Token = "0x4002420")]
			SceneByPath,
			[Token(Token = "0x4002421")]
			SceneByGameObject
		}

		[Token(Token = "0x4002408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference option of the Scene")]
		public SceneAllReferenceOptions sceneReference;

		[Token(Token = "0x4002409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The scene Index.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x400240A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The scene Name.")]
		public FsmString sceneByName;

		[Token(Token = "0x400240B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x400240C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Scene of GameObject")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x400240D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("True if SceneReference resolves to a scene")]
		[UIHint(UIHint.Variable)]
		public FsmBool sceneFound;

		[Token(Token = "0x400240E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if SceneReference resolves to a scene")]
		public FsmEvent sceneFoundEvent;

		[Token(Token = "0x400240F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if SceneReference do not resolve to a scene")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x4002410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The Scene Cache")]
		protected Scene _scene;

		[Token(Token = "0x4002411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("True if a scene was found, use _scene to access it")]
		protected bool _sceneFound;

		[Token(Token = "0x600272E")]
		[Address(RVA = "0x12CC530", Offset = "0x12CC530", VA = "0x12CC530", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600272F")]
		[Address(RVA = "0x12CC5DC", Offset = "0x12CC5DC", VA = "0x12CC5DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002730")]
		[Address(RVA = "0x12CC994", Offset = "0x12CC994", VA = "0x12CC994")]
		protected GetSceneActionBase()
		{
		}
	}
	[Token(Token = "0x20007C4")]
	[Tooltip("Loads the scene by its name or index in Build Settings. ")]
	[ActionCategory(ActionCategory.Scene)]
	public class LoadScene : FsmStateAction
	{
		[Token(Token = "0x4002422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public GetSceneActionBase.SceneSimpleReferenceOptions sceneReference;

		[Token(Token = "0x4002423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x4002424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index of the scene to load.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4002425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Allows you to specify whether or not to load the scene additively. See LoadSceneMode Unity doc for more information about the options.")]
		[ObjectType(typeof(LoadSceneMode))]
		public FsmEnum loadSceneMode;

		[Token(Token = "0x4002426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("Result")]
		[Tooltip("True if the scene was loaded")]
		public FsmBool success;

		[Token(Token = "0x4002427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event sent if the scene was loaded")]
		public FsmEvent successEvent;

		[Token(Token = "0x4002428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if a problem occurred, check log for information")]
		public FsmEvent failureEvent;

		[Token(Token = "0x6002731")]
		[Address(RVA = "0x12CD9AC", Offset = "0x12CD9AC", VA = "0x12CD9AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002732")]
		[Address(RVA = "0x12CDA18", Offset = "0x12CDA18", VA = "0x12CDA18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002733")]
		[Address(RVA = "0x12CDA94", Offset = "0x12CDA94", VA = "0x12CDA94")]
		private bool DoLoadScene()
		{
			return default(bool);
		}

		[Token(Token = "0x6002734")]
		[Address(RVA = "0x12CDC78", Offset = "0x12CDC78", VA = "0x12CDC78")]
		public LoadScene()
		{
		}
	}
	[Token(Token = "0x20007C5")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Loads the scene by its name or index in Build Settings.")]
	public class LoadSceneAsynch : FsmStateAction
	{
		[Token(Token = "0x4002429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public GetSceneActionBase.SceneSimpleReferenceOptions sceneReference;

		[Token(Token = "0x400242A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The index of the scene to load.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Allows you to specify whether or not to load the scene additively. See LoadSceneMode Unity doc for more information about the options.")]
		[ObjectType(typeof(LoadSceneMode))]
		public FsmEnum loadSceneMode;

		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Allow the scene to be activated as soon as it's ready")]
		public FsmBool allowSceneActivation;

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("lets you tweak in which order async operation calls will be performed. Leave to none for default")]
		public FsmInt operationPriority;

		[Token(Token = "0x400242F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Use this hash to activate the Scene if you have set 'AllowSceneActivation' to false, you'll need to use it in the action 'AllowSceneActivation' to effectively load the scene.")]
		[ActionSection("Result")]
		public FsmInt aSyncOperationHashCode;

		[Token(Token = "0x4002430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The loading's progress.")]
		public FsmFloat progress;

		[Token(Token = "0x4002431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("True when loading is done")]
		[UIHint(UIHint.Variable)]
		public FsmBool isDone;

		[Token(Token = "0x4002432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("True when loading is done but still waiting for scene activation")]
		[UIHint(UIHint.Variable)]
		public FsmBool pendingActivation;

		[Token(Token = "0x4002433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent when scene loading is done")]
		public FsmEvent doneEvent;

		[Token(Token = "0x4002434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent when scene loading is done but scene not yet activated. Use aSyncOperationHashCode value in 'AllowSceneActivation' to proceed")]
		public FsmEvent pendingActivationEvent;

		[Token(Token = "0x4002435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event sent if the scene to load was not found")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x4002436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AsyncOperation _asyncOperation;

		[Token(Token = "0x4002437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int _asynchOperationUid;

		[Token(Token = "0x4002438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool pendingActivationCallBackDone;

		[Token(Token = "0x4002439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<int, AsyncOperation> aSyncOperationLUT;

		[Token(Token = "0x400243A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int aSynchUidCounter;

		[Token(Token = "0x6002735")]
		[Address(RVA = "0x12CDC80", Offset = "0x12CDC80", VA = "0x12CDC80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002736")]
		[Address(RVA = "0x12CDDA4", Offset = "0x12CDDA4", VA = "0x12CDDA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002737")]
		[Address(RVA = "0x12CDE10", Offset = "0x12CDE10", VA = "0x12CDE10")]
		private bool DoLoadAsynch()
		{
			return default(bool);
		}

		[Token(Token = "0x6002738")]
		[Address(RVA = "0x12CE150", Offset = "0x12CE150", VA = "0x12CE150", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002739")]
		[Address(RVA = "0x12CE324", Offset = "0x12CE324", VA = "0x12CE324", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600273A")]
		[Address(RVA = "0x12CE330", Offset = "0x12CE330", VA = "0x12CE330")]
		public LoadSceneAsynch()
		{
		}
	}
	[Token(Token = "0x20007C6")]
	[Tooltip("This will merge the source scene into the destinationScene. This function merges the contents of the source scene into the destination scene, and deletes the source scene. All GameObjects at the root of the source scene are moved to the root of the destination scene. NOTE: This function is destructive: The source scene will be destroyed once the merge has been completed.")]
	[ActionCategory(ActionCategory.Scene)]
	public class MergeScenes : FsmStateAction
	{
		[Token(Token = "0x400243B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[ActionSection("Source")]
		[Tooltip("The reference options of the source Scene")]
		public GetSceneActionBase.SceneAllReferenceOptions sourceReference;

		[Token(Token = "0x400243C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The source scene Index.")]
		public FsmInt sourceAtIndex;

		[Token(Token = "0x400243D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The source scene Name.")]
		public FsmString sourceByName;

		[Token(Token = "0x400243E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The source scene Path.")]
		public FsmString sourceByPath;

		[Token(Token = "0x400243F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The source scene from GameObject")]
		public FsmOwnerDefault sourceByGameObject;

		[Token(Token = "0x4002440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The reference options of the destination Scene")]
		[ActionSection("Destination")]
		public GetSceneActionBase.SceneAllReferenceOptions destinationReference;

		[Token(Token = "0x4002441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The destination scene Index.")]
		public FsmInt destinationAtIndex;

		[Token(Token = "0x4002442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The destination scene Name.")]
		public FsmString destinationByName;

		[Token(Token = "0x4002443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The destination scene Path.")]
		public FsmString destinationByPath;

		[Token(Token = "0x4002444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The destination scene from GameObject")]
		public FsmOwnerDefault destinationByGameObject;

		[Token(Token = "0x4002445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ActionSection("Result")]
		[Tooltip("True if the merge succeeded")]
		[UIHint(UIHint.Variable)]
		public FsmBool success;

		[Token(Token = "0x4002446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Event sent if merge succeeded")]
		public FsmEvent successEvent;

		[Token(Token = "0x4002447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event sent if merge failed")]
		public FsmEvent failureEvent;

		[Token(Token = "0x4002448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Scene _sourceScene;

		[Token(Token = "0x4002449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool _sourceFound;

		[Token(Token = "0x400244A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Scene _destinationScene;

		[Token(Token = "0x400244B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool _destinationFound;

		[Token(Token = "0x600273B")]
		[Address(RVA = "0x12CE340", Offset = "0x12CE340", VA = "0x12CE340", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600273C")]
		[Address(RVA = "0x12CE404", Offset = "0x12CE404", VA = "0x12CE404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600273D")]
		[Address(RVA = "0x12CE54C", Offset = "0x12CE54C", VA = "0x12CE54C")]
		private void GetSourceScene()
		{
		}

		[Token(Token = "0x600273E")]
		[Address(RVA = "0x12CE754", Offset = "0x12CE754", VA = "0x12CE754")]
		private void GetDestinationScene()
		{
		}

		[Token(Token = "0x600273F")]
		[Address(RVA = "0x12CE95C", Offset = "0x12CE95C", VA = "0x12CE95C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002740")]
		[Address(RVA = "0x12CE9D0", Offset = "0x12CE9D0", VA = "0x12CE9D0")]
		public MergeScenes()
		{
		}
	}
	[Token(Token = "0x20007C7")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Move a GameObject from its current scene to a new scene. It is required that the GameObject is at the root of its current scene.")]
	public class MoveGameObjectToScene : GetSceneActionBase
	{
		[Token(Token = "0x400244C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The Root GameObject to move to the referenced scene")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400244D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[RequiredField]
		[Tooltip("Only root GameObject can be moved, set to true to get the root of the gameobject if necessary, else watch for failure events.")]
		public FsmBool findRootIfNecessary;

		[Token(Token = "0x400244E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("True if the merge succeeded")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		public FsmBool success;

		[Token(Token = "0x400244F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event sent if merge succeeded")]
		public FsmEvent successEvent;

		[Token(Token = "0x4002450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Event sent if merge failed. Check log for information")]
		public FsmEvent failureEvent;

		[Token(Token = "0x4002451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject _go;

		[Token(Token = "0x6002741")]
		[Address(RVA = "0x12CE9D8", Offset = "0x12CE9D8", VA = "0x12CE9D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002742")]
		[Address(RVA = "0x12CEA38", Offset = "0x12CEA38", VA = "0x12CEA38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002743")]
		[Address(RVA = "0x12CEC20", Offset = "0x12CEC20", VA = "0x12CEC20")]
		public MoveGameObjectToScene()
		{
		}
	}
	[Token(Token = "0x20007C8")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Send an event when the active scene has changed.")]
	public class SendActiveSceneChangedEvent : FsmStateAction
	{
		[Token(Token = "0x4002452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The event to send when an active scene changed")]
		public FsmEvent activeSceneChanged;

		[Token(Token = "0x4002453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Scene lastPreviousActiveScene;

		[Token(Token = "0x4002454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Scene lastNewActiveScene;

		[Token(Token = "0x6002744")]
		[Address(RVA = "0x12CEC28", Offset = "0x12CEC28", VA = "0x12CEC28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002745")]
		[Address(RVA = "0x12CEC34", Offset = "0x12CEC34", VA = "0x12CEC34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002746")]
		[Address(RVA = "0x12CECE4", Offset = "0x12CECE4", VA = "0x12CECE4")]
		private void SceneManager_activeSceneChanged(Scene previousActiveScene, Scene activeScene)
		{
		}

		[Token(Token = "0x6002747")]
		[Address(RVA = "0x12CED6C", Offset = "0x12CED6C", VA = "0x12CED6C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002748")]
		[Address(RVA = "0x12CEE10", Offset = "0x12CEE10", VA = "0x12CEE10")]
		public SendActiveSceneChangedEvent()
		{
		}
	}
	[Token(Token = "0x20007C9")]
	[Tooltip("Send an event when a scene was loaded. Use the Safe version when you want to access content of the loaded scene. Use GetSceneloadedEventData to find out about the loaded Scene and load mode")]
	[ActionCategory(ActionCategory.Scene)]
	public class SendSceneLoadedEvent : FsmStateAction
	{
		[Token(Token = "0x4002455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send when a scene was loaded")]
		public FsmEvent sceneLoaded;

		[Token(Token = "0x4002456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send when a scene was loaded, with a one frame delay to make sure the scene content was indeed initialized fully")]
		public FsmEvent sceneLoadedSafe;

		[Token(Token = "0x4002457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Scene lastLoadedScene;

		[Token(Token = "0x4002458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static LoadSceneMode lastLoadedMode;

		[Token(Token = "0x4002459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _loaded;

		[Token(Token = "0x6002749")]
		[Address(RVA = "0x12CEE18", Offset = "0x12CEE18", VA = "0x12CEE18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600274A")]
		[Address(RVA = "0x12CEE24", Offset = "0x12CEE24", VA = "0x12CEE24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600274B")]
		[Address(RVA = "0x12CEED0", Offset = "0x12CEED0", VA = "0x12CEED0")]
		private void SceneManager_sceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x600274C")]
		[Address(RVA = "0x12CEF7C", Offset = "0x12CEF7C", VA = "0x12CEF7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600274D")]
		[Address(RVA = "0x12CEFD8", Offset = "0x12CEFD8", VA = "0x12CEFD8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600274E")]
		[Address(RVA = "0x12CF07C", Offset = "0x12CF07C", VA = "0x12CF07C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600274F")]
		[Address(RVA = "0x12CF0F0", Offset = "0x12CF0F0", VA = "0x12CF0F0")]
		public SendSceneLoadedEvent()
		{
		}
	}
	[Token(Token = "0x20007CA")]
	[Tooltip("Send an event when a scene was unloaded.")]
	[ActionCategory(ActionCategory.Scene)]
	public class SendSceneUnloadedEvent : FsmStateAction
	{
		[Token(Token = "0x400245A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send when scene was unloaded")]
		[RequiredField]
		public FsmEvent sceneUnloaded;

		[Token(Token = "0x400245B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Scene lastUnLoadedScene;

		[Token(Token = "0x6002750")]
		[Address(RVA = "0x12CF100", Offset = "0x12CF100", VA = "0x12CF100", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002751")]
		[Address(RVA = "0x12CF10C", Offset = "0x12CF10C", VA = "0x12CF10C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002752")]
		[Address(RVA = "0x12CF1BC", Offset = "0x12CF1BC", VA = "0x12CF1BC")]
		private void SceneManager_sceneUnloaded(Scene scene)
		{
		}

		[Token(Token = "0x6002753")]
		[Address(RVA = "0x12CF280", Offset = "0x12CF280", VA = "0x12CF280", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002754")]
		[Address(RVA = "0x12CF324", Offset = "0x12CF324", VA = "0x12CF324")]
		public SendSceneUnloadedEvent()
		{
		}
	}
	[Token(Token = "0x20007CB")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Set the scene to be active.")]
	public class SetActiveScene : FsmStateAction
	{
		[Token(Token = "0x20007CC")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x400246B")]
			SceneAtBuildIndex,
			[Token(Token = "0x400246C")]
			SceneAtIndex,
			[Token(Token = "0x400246D")]
			SceneByName,
			[Token(Token = "0x400246E")]
			SceneByPath,
			[Token(Token = "0x400246F")]
			SceneByGameObject
		}

		[Token(Token = "0x400245C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene.")]
		public SceneReferenceOptions sceneReference;

		[Token(Token = "0x400245D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to activate. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x400245E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The build index of the scene to activate.")]
		public FsmInt sceneAtBuildIndex;

		[Token(Token = "0x400245F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the scene to activate.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4002460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x4002461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject scene to activate.")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x4002462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("True if set active succeeded.")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		public FsmBool success;

		[Token(Token = "0x4002463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if setActive succeeded.")]
		public FsmEvent successEvent;

		[Token(Token = "0x4002464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True if SceneReference resolves to a scene.")]
		public FsmBool sceneFound;

		[Token(Token = "0x4002465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent if scene not activated yet.")]
		public FsmEvent sceneNotActivatedEvent;

		[Token(Token = "0x4002466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if SceneReference do not resolve to a scene.")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x4002467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Scene _scene;

		[Token(Token = "0x4002468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _sceneFound;

		[Token(Token = "0x4002469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		private bool _success;

		[Token(Token = "0x6002755")]
		[Address(RVA = "0x12CF32C", Offset = "0x12CF32C", VA = "0x12CF32C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002756")]
		[Address(RVA = "0x12CF3DC", Offset = "0x12CF3DC", VA = "0x12CF3DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002757")]
		[Address(RVA = "0x12CF45C", Offset = "0x12CF45C", VA = "0x12CF45C")]
		private void DoSetActivate()
		{
		}

		[Token(Token = "0x6002758")]
		[Address(RVA = "0x12CF76C", Offset = "0x12CF76C", VA = "0x12CF76C")]
		public SetActiveScene()
		{
		}
	}
	[Token(Token = "0x20007CD")]
	[Obsolete("Use UnloadSceneAsynch Instead.")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Unload Scene. Note that assets are currently not unloaded, in order to free up asset memory call Resources.UnloadUnusedAssets.")]
	public class UnloadScene : FsmStateAction
	{
		[Token(Token = "0x20007CE")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x400247A")]
			ActiveScene,
			[Token(Token = "0x400247B")]
			SceneAtBuildIndex,
			[Token(Token = "0x400247C")]
			SceneAtIndex,
			[Token(Token = "0x400247D")]
			SceneByName,
			[Token(Token = "0x400247E")]
			SceneByPath,
			[Token(Token = "0x400247F")]
			SceneByGameObject
		}

		[Token(Token = "0x4002470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public SceneReferenceOptions sceneReference;

		[Token(Token = "0x4002471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x4002472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The build index of the scene to unload.")]
		public FsmInt sceneAtBuildIndex;

		[Token(Token = "0x4002473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the scene to unload.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4002474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x4002475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject unload scene of")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x4002476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Result")]
		[Tooltip("True if scene was unloaded")]
		public FsmBool unloaded;

		[Token(Token = "0x4002477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if scene was unloaded ")]
		public FsmEvent unloadedEvent;

		[Token(Token = "0x4002478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent scene was not unloaded")]
		public FsmEvent failureEvent;

		[Token(Token = "0x6002759")]
		[Address(RVA = "0x12CF774", Offset = "0x12CF774", VA = "0x12CF774", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600275A")]
		[Address(RVA = "0x12CF804", Offset = "0x12CF804", VA = "0x12CF804", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600275B")]
		[Address(RVA = "0x12CFBBC", Offset = "0x12CFBBC", VA = "0x12CFBBC", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600275C")]
		[Address(RVA = "0x12CFC04", Offset = "0x12CFC04", VA = "0x12CFC04")]
		public UnloadScene()
		{
		}
	}
	[Token(Token = "0x20007CF")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Unload a scene asynchronously by its name or index in Build Settings. Destroys all GameObjects associated with the given scene and removes the scene from the SceneManager.")]
	public class UnloadSceneAsynch : FsmStateAction
	{
		[Token(Token = "0x20007D0")]
		public enum SceneReferenceOptions
		{
			[Token(Token = "0x400248D")]
			ActiveScene,
			[Token(Token = "0x400248E")]
			SceneAtBuildIndex,
			[Token(Token = "0x400248F")]
			SceneAtIndex,
			[Token(Token = "0x4002490")]
			SceneByName,
			[Token(Token = "0x4002491")]
			SceneByPath,
			[Token(Token = "0x4002492")]
			SceneByGameObject
		}

		[Token(Token = "0x4002480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The reference options of the Scene")]
		public SceneReferenceOptions sceneReference;

		[Token(Token = "0x4002481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The name of the scene to load. The given sceneName can either be the last part of the path, without .unity extension or the full path still without the .unity extension")]
		public FsmString sceneByName;

		[Token(Token = "0x4002482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The build index of the scene to unload.")]
		public FsmInt sceneAtBuildIndex;

		[Token(Token = "0x4002483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index of the scene to unload.")]
		public FsmInt sceneAtIndex;

		[Token(Token = "0x4002484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The scene Path.")]
		public FsmString sceneByPath;

		[Token(Token = "0x4002485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The GameObject unload scene of")]
		public FsmOwnerDefault sceneByGameObject;

		[Token(Token = "0x4002486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("lets you tweak in which order async operation calls will be performed. Leave to none for default")]
		public FsmInt operationPriority;

		[Token(Token = "0x4002487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The loading's progress.")]
		[ActionSection("Result")]
		[UIHint(UIHint.Variable)]
		public FsmFloat progress;

		[Token(Token = "0x4002488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("True when loading is done")]
		public FsmBool isDone;

		[Token(Token = "0x4002489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent when scene loading is done")]
		public FsmEvent doneEvent;

		[Token(Token = "0x400248A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if the scene to load was not found")]
		public FsmEvent sceneNotFoundEvent;

		[Token(Token = "0x400248B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AsyncOperation _asyncOperation;

		[Token(Token = "0x600275D")]
		[Address(RVA = "0x12CFC0C", Offset = "0x12CFC0C", VA = "0x12CFC0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600275E")]
		[Address(RVA = "0x12CFD10", Offset = "0x12CFD10", VA = "0x12CFD10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600275F")]
		[Address(RVA = "0x12CFD6C", Offset = "0x12CFD6C", VA = "0x12CFD6C")]
		private bool DoUnLoadAsynch()
		{
			return default(bool);
		}

		[Token(Token = "0x6002760")]
		[Address(RVA = "0x12D016C", Offset = "0x12D016C", VA = "0x12D016C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002761")]
		[Address(RVA = "0x12D0220", Offset = "0x12D0220", VA = "0x12D0220", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002762")]
		[Address(RVA = "0x12D022C", Offset = "0x12D022C", VA = "0x12D022C")]
		public UnloadSceneAsynch()
		{
		}
	}
	[Token(Token = "0x20007D1")]
	[Tooltip("Wraps a GameObject's position across screen edges. For example, a GameObject that moves off the left side of the screen wraps to the right side. This is often used in 2d arcade style games like Asteroids.")]
	[ActionCategory(ActionCategory.Transform)]
	public class ScreenWrap : ComponentAction<Transform, Camera>
	{
		[Token(Token = "0x4002493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject to wrap.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("GameObject with a Camera component used to render the view (or MainCamera if not set). The Viewport Rect is used for wrapping.")]
		[CheckForComponent(typeof(Camera))]
		public FsmGameObject camera;

		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Wrap the position of the GameObject if it moves off the left side of the screen.")]
		public FsmBool wrapLeft;

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Wrap the position of the GameObject if it moves off the right side of the screen.")]
		public FsmBool wrapRight;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Wrap the position of the GameObject if it moves off the top of the screen.")]
		public FsmBool wrapTop;

		[Token(Token = "0x4002498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Wrap the position of the GameObject if it moves off the top of the screen.")]
		public FsmBool wrapBottom;

		[Token(Token = "0x4002499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400249A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		[Tooltip("Use LateUpdate. Useful if you want to wrap after any other operations in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x1700037D")]
		private Camera cameraComponent
		{
			[Token(Token = "0x6002763")]
			[Address(RVA = "0x12D0234", Offset = "0x12D0234", VA = "0x12D0234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037E")]
		private Transform cameraTransform
		{
			[Token(Token = "0x6002764")]
			[Address(RVA = "0x12D023C", Offset = "0x12D023C", VA = "0x12D023C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037F")]
		private Transform gameObjectTransform
		{
			[Token(Token = "0x6002765")]
			[Address(RVA = "0x12D0244", Offset = "0x12D0244", VA = "0x12D0244")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002766")]
		[Address(RVA = "0x12D024C", Offset = "0x12D024C", VA = "0x12D024C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002767")]
		[Address(RVA = "0x12D0368", Offset = "0x12D0368", VA = "0x12D0368", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002768")]
		[Address(RVA = "0x12D0398", Offset = "0x12D0398", VA = "0x12D0398", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002769")]
		[Address(RVA = "0x12D0694", Offset = "0x12D0694", VA = "0x12D0694", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600276A")]
		[Address(RVA = "0x12D06A4", Offset = "0x12D06A4", VA = "0x12D06A4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600276B")]
		[Address(RVA = "0x12D03D0", Offset = "0x12D03D0", VA = "0x12D03D0")]
		private void DoScreenWrap()
		{
		}

		[Token(Token = "0x600276C")]
		[Address(RVA = "0x12D06DC", Offset = "0x12D06DC", VA = "0x12D06DC")]
		private static float Wrap01(float x)
		{
			return default(float);
		}

		[Token(Token = "0x600276D")]
		[Address(RVA = "0x12D0724", Offset = "0x12D0724", VA = "0x12D0724")]
		private static float Wrap(float x, float xMin, float xMax)
		{
			return default(float);
		}

		[Token(Token = "0x600276E")]
		[Address(RVA = "0x12D076C", Offset = "0x12D076C", VA = "0x12D076C")]
		public ScreenWrap()
		{
		}
	}
	[Token(Token = "0x20007D2")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Adds a Script to a Game Object. Use this to change the behaviour of objects on the fly. Optionally remove the Script on exiting the state.")]
	public class AddScript : FsmStateAction
	{
		[Token(Token = "0x400249B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to add the script to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400249C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Select any script in your project. The script will be added to the Game Object when the state is entered.")]
		[UIHint(UIHint.ScriptComponent)]
		public FsmString script;

		[Token(Token = "0x400249D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove the script from the GameObject when this State is exited.")]
		public FsmBool removeOnExit;

		[Token(Token = "0x400249E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Component addedComponent;

		[Token(Token = "0x600276F")]
		[Address(RVA = "0x12D07B4", Offset = "0x12D07B4", VA = "0x12D07B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002770")]
		[Address(RVA = "0x12D07DC", Offset = "0x12D07DC", VA = "0x12D07DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002771")]
		[Address(RVA = "0x12D095C", Offset = "0x12D095C", VA = "0x12D095C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002772")]
		[Address(RVA = "0x12D082C", Offset = "0x12D082C", VA = "0x12D082C")]
		private void DoAddComponent(GameObject go)
		{
		}

		[Token(Token = "0x6002773")]
		[Address(RVA = "0x12D0A04", Offset = "0x12D0A04", VA = "0x12D0A04")]
		public AddScript()
		{
		}
	}
	[Token(Token = "0x20007D3")]
	[Tooltip("Sends events based on the direction of Input Axis (Left/Right/Up/Down...).")]
	[ActionCategory(ActionCategory.Input)]
	[Obsolete("This action is not supported in the new Input System. Use PlayerInputGetVector2 or GamepadStickEvents instead.")]
	public class AxisEvent : FsmStateAction
	{
		[Token(Token = "0x400249F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Horizontal axis as defined in the Input Manager")]
		public FsmString horizontalAxis;

		[Token(Token = "0x40024A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Vertical axis as defined in the Input Manager")]
		public FsmString verticalAxis;

		[Token(Token = "0x40024A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if input is to the left.")]
		public FsmEvent leftEvent;

		[Token(Token = "0x40024A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if input is to the right.")]
		public FsmEvent rightEvent;

		[Token(Token = "0x40024A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send if input is to the up.")]
		public FsmEvent upEvent;

		[Token(Token = "0x40024A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if input is to the down.")]
		public FsmEvent downEvent;

		[Token(Token = "0x40024A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if input is in any direction.")]
		public FsmEvent anyDirection;

		[Token(Token = "0x40024A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if no axis input (centered).")]
		public FsmEvent noDirection;

		[Token(Token = "0x6002774")]
		[Address(RVA = "0x12D0A0C", Offset = "0x12D0A0C", VA = "0x12D0A0C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002775")]
		[Address(RVA = "0x12D0AFC", Offset = "0x12D0AFC", VA = "0x12D0AFC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002776")]
		[Address(RVA = "0x12D0B5C", Offset = "0x12D0B5C", VA = "0x12D0B5C", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002777")]
		[Address(RVA = "0x12D0B9C", Offset = "0x12D0B9C", VA = "0x12D0B9C")]
		public AxisEvent()
		{
		}
	}
	[Token(Token = "0x20007D4")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Lets you call a method in a script on a Game Object.\nUnlike {{Invoke Method}}, or {{Send Message}}, you can use multiple parameters and get a return value.")]
	public class CallMethod : FsmStateAction
	{
		[Token(Token = "0x40024A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(Component))]
		[Tooltip("The behaviour on a Game Object that has the method you want to call. Drag the script component from the Unity inspector into this slot. HINT: Use Lock if the script is on another GameObject.\n\nNOTE: Unity Object fields show the GameObject name, so for clarity we show the Behaviour name as well below.")]
		public FsmObject behaviour;

		[Token(Token = "0x40024A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Select from a list of available methods.\n\nNOTE: The full method signature is visible below.")]
		public FsmString methodName;

		[Token(Token = "0x40024A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Method parameters.\n\nNOTE: This UI is built automatically when you select the method.")]
		public FsmVar[] parameters;

		[Token(Token = "0x40024AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If the Method has a return, use this to store it in a variable.")]
		[ActionSection("Store Result")]
		public FsmVar storeResult;

		[Token(Token = "0x40024AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40024AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Revert to the old Manual UI where all parameters had to be configured manually.")]
		public bool manualUI;

		[Token(Token = "0x40024AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FsmObject cachedBehaviour;

		[Token(Token = "0x40024AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FsmString cachedMethodName;

		[Token(Token = "0x40024AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Type cachedType;

		[Token(Token = "0x40024B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MethodInfo cachedMethodInfo;

		[Token(Token = "0x40024B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ParameterInfo[] cachedParameterInfo;

		[Token(Token = "0x40024B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private object[] parametersArray;

		[Token(Token = "0x40024B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private string errorString;

		[Token(Token = "0x6002778")]
		[Address(RVA = "0x12D0BA4", Offset = "0x12D0BA4", VA = "0x12D0BA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002779")]
		[Address(RVA = "0x12D0BF4", Offset = "0x12D0BF4", VA = "0x12D0BF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600277A")]
		[Address(RVA = "0x12D0FF8", Offset = "0x12D0FF8", VA = "0x12D0FF8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600277B")]
		[Address(RVA = "0x12D0C80", Offset = "0x12D0C80", VA = "0x12D0C80")]
		private void DoMethodCall()
		{
		}

		[Token(Token = "0x600277C")]
		[Address(RVA = "0x12D0FFC", Offset = "0x12D0FFC", VA = "0x12D0FFC")]
		private bool NeedToUpdateCache()
		{
			return default(bool);
		}

		[Token(Token = "0x600277D")]
		[Address(RVA = "0x12D1520", Offset = "0x12D1520", VA = "0x12D1520")]
		private void ClearCache()
		{
		}

		[Token(Token = "0x600277E")]
		[Address(RVA = "0x12D1128", Offset = "0x12D1128", VA = "0x12D1128")]
		private bool DoCache()
		{
			return default(bool);
		}

		[Token(Token = "0x600277F")]
		[Address(RVA = "0x12D1578", Offset = "0x12D1578", VA = "0x12D1578", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002780")]
		[Address(RVA = "0x12D1BFC", Offset = "0x12D1BFC", VA = "0x12D1BFC")]
		public CallMethod()
		{
		}
	}
	[Token(Token = "0x20007D5")]
	[Tooltip("Call a static method in a class.\nNOTE: This is an advanced action - you need to know the full method signature to use this action.")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class CallStaticMethod : FsmStateAction
	{
		[Token(Token = "0x40024B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Full path to the class that contains the static method.")]
		public FsmString className;

		[Token(Token = "0x40024B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The static method to call.")]
		public FsmString methodName;

		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Method parameters. NOTE: these must match the method's signature!")]
		public FsmVar[] parameters;

		[Token(Token = "0x40024B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[ActionSection("Store Result")]
		[Tooltip("Store the result of the method call.")]
		public FsmVar storeResult;

		[Token(Token = "0x40024B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40024B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Type cachedType;

		[Token(Token = "0x40024BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string cachedClassName;

		[Token(Token = "0x40024BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string cachedMethodName;

		[Token(Token = "0x40024BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MethodInfo cachedMethodInfo;

		[Token(Token = "0x40024BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ParameterInfo[] cachedParameterInfo;

		[Token(Token = "0x40024BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private object[] parametersArray;

		[Token(Token = "0x40024BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private string errorString;

		[Token(Token = "0x6002781")]
		[Address(RVA = "0x12D1C04", Offset = "0x12D1C04", VA = "0x12D1C04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002782")]
		[Address(RVA = "0x12D1EA8", Offset = "0x12D1EA8", VA = "0x12D1EA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002783")]
		[Address(RVA = "0x12D1C90", Offset = "0x12D1C90", VA = "0x12D1C90")]
		private void DoMethodCall()
		{
		}

		[Token(Token = "0x6002784")]
		[Address(RVA = "0x12D1EAC", Offset = "0x12D1EAC", VA = "0x12D1EAC")]
		private bool DoCache()
		{
			return default(bool);
		}

		[Token(Token = "0x6002785")]
		[Address(RVA = "0x12D2338", Offset = "0x12D2338", VA = "0x12D2338", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002786")]
		[Address(RVA = "0x12D29E0", Offset = "0x12D29E0", VA = "0x12D29E0")]
		public CallStaticMethod()
		{
		}
	}
	[Token(Token = "0x20007D6")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Enables/Disables a Behaviour on a GameObject. Optionally reset the Behaviour on exiting the state. E.g., if you want the Behaviour to be active only while this state is active.")]
	public class EnableBehaviour : FsmStateAction
	{
		[Token(Token = "0x40024C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the Behaviour.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Behaviour)]
		[Tooltip("The name of the Behaviour to enable/disable.")]
		public FsmString behaviour;

		[Token(Token = "0x40024C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optionally drag a component directly into this field (behavior name will be ignored).")]
		public Component component;

		[Token(Token = "0x40024C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enable;

		[Token(Token = "0x40024C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Reset the enabled state of the Behaviour when leaving this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40024C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Behaviour componentTarget;

		[Token(Token = "0x6002787")]
		[Address(RVA = "0x12D29E8", Offset = "0x12D29E8", VA = "0x12D29E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002788")]
		[Address(RVA = "0x12D2A58", Offset = "0x12D2A58", VA = "0x12D2A58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002789")]
		[Address(RVA = "0x12D2A94", Offset = "0x12D2A94", VA = "0x12D2A94")]
		private void DoEnableBehaviour(GameObject go)
		{
		}

		[Token(Token = "0x600278A")]
		[Address(RVA = "0x12D2D8C", Offset = "0x12D2D8C", VA = "0x12D2D8C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600278B")]
		[Address(RVA = "0x12D2E40", Offset = "0x12D2E40", VA = "0x12D2E40", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x600278C")]
		[Address(RVA = "0x12D3018", Offset = "0x12D3018", VA = "0x12D3018")]
		public EnableBehaviour()
		{
		}
	}
	[Token(Token = "0x20007D7")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Invokes a Method in a Behaviour attached to a Game Object. See Unity InvokeMethod docs.")]
	public class InvokeMethod : FsmStateAction
	{
		[Token(Token = "0x40024C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object that owns the behaviour.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The behaviour that contains the method.")]
		[UIHint(UIHint.Script)]
		public FsmString behaviour;

		[Token(Token = "0x40024C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The name of the method to invoke.")]
		[UIHint(UIHint.Method)]
		public FsmString methodName;

		[Token(Token = "0x40024C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Optional time delay in seconds.")]
		public FsmFloat delay;

		[Token(Token = "0x40024CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Call the method repeatedly.")]
		public FsmBool repeating;

		[Token(Token = "0x40024CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Delay between repeated calls in seconds.")]
		public FsmFloat repeatDelay;

		[Token(Token = "0x40024CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Stop calling the method when the state is exited.")]
		public FsmBool cancelOnExit;

		[Token(Token = "0x40024CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MonoBehaviour component;

		[Token(Token = "0x600278D")]
		[Address(RVA = "0x12D3020", Offset = "0x12D3020", VA = "0x12D3020", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600278E")]
		[Address(RVA = "0x12D30FC", Offset = "0x12D30FC", VA = "0x12D30FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600278F")]
		[Address(RVA = "0x12D3138", Offset = "0x12D3138", VA = "0x12D3138")]
		private void DoInvokeMethod(GameObject go)
		{
		}

		[Token(Token = "0x6002790")]
		[Address(RVA = "0x12D3408", Offset = "0x12D3408", VA = "0x12D3408", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002791")]
		[Address(RVA = "0x12D34B8", Offset = "0x12D34B8", VA = "0x12D34B8")]
		public InvokeMethod()
		{
		}
	}
	[Token(Token = "0x20007D8")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Sends a Message to a Game Object. See Unity docs for SendMessage.")]
	public class SendMessage : FsmStateAction
	{
		[Token(Token = "0x20007D9")]
		public enum MessageType
		{
			[Token(Token = "0x40024D3")]
			SendMessage,
			[Token(Token = "0x40024D4")]
			SendMessageUpwards,
			[Token(Token = "0x40024D5")]
			BroadcastMessage
		}

		[Token(Token = "0x40024CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object to send a message to.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Pick between <a href=\"http://unity3d.com/support/documentation/ScriptReference/GameObject.SendMessage.html\" rel=\"nofollow\">SendMessage</a>, <a href=\"http://unity3d.com/support/documentation/ScriptReference/GameObject.SendMessageUpwards.html\" rel=\"nofollow\">SendMessageUpwards</a>, or <a href=\"http://unity3d.com/support/documentation/ScriptReference/GameObject.BroadcastMessage.html\" rel=\"nofollow\">BroadcastMessage</a>.")]
		public MessageType delivery;

		[Token(Token = "0x40024D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Message delivery options. See <a href=\"http://unity3d.com/support/documentation/ScriptReference/SendMessageOptions.html\" rel=\"nofollow\">SendMessageOptions</a> in Unity Docs.")]
		public SendMessageOptions options;

		[Token(Token = "0x40024D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Select a Method Name first then Parameters.")]
		public FunctionCall functionCall;

		[Token(Token = "0x6002792")]
		[Address(RVA = "0x12D34C0", Offset = "0x12D34C0", VA = "0x12D34C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002793")]
		[Address(RVA = "0x12D34F4", Offset = "0x12D34F4", VA = "0x12D34F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002794")]
		[Address(RVA = "0x12D3510", Offset = "0x12D3510", VA = "0x12D3510")]
		private void DoSendMessage()
		{
		}

		[Token(Token = "0x6002795")]
		[Address(RVA = "0x12D3CDC", Offset = "0x12D3CDC", VA = "0x12D3CDC")]
		public SendMessage()
		{
		}
	}
	[Token(Token = "0x20007DA")]
	[ActionCategory(ActionCategory.ScriptControl)]
	[Tooltip("Starts a Coroutine in a Behaviour on a Game Object.\nSee Unity <a href=\"http://unity3d.com/support/documentation/ScriptReference/MonoBehaviour.StartCoroutine.html\">StartCoroutine</a> docs for more details.")]
	public class StartCoroutine : FsmStateAction
	{
		[Token(Token = "0x40024D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object that owns the Behaviour.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Behaviour)]
		[RequiredField]
		[Tooltip("The Behaviour that contains the method to start as a coroutine.")]
		public FsmString behaviour;

		[Token(Token = "0x40024D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Coroutine)]
		[RequiredField]
		[Tooltip("The name of the coroutine method.")]
		public FunctionCall functionCall;

		[Token(Token = "0x40024D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Stop the coroutine when the state is exited.")]
		public bool stopOnExit;

		[Token(Token = "0x40024DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MonoBehaviour component;

		[Token(Token = "0x6002796")]
		[Address(RVA = "0x12D3CE4", Offset = "0x12D3CE4", VA = "0x12D3CE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002797")]
		[Address(RVA = "0x12D3D24", Offset = "0x12D3D24", VA = "0x12D3D24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002798")]
		[Address(RVA = "0x12D3D40", Offset = "0x12D3D40", VA = "0x12D3D40")]
		private void DoStartCoroutine()
		{
		}

		[Token(Token = "0x6002799")]
		[Address(RVA = "0x12D45FC", Offset = "0x12D45FC", VA = "0x12D45FC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600279A")]
		[Address(RVA = "0x12D4694", Offset = "0x12D4694", VA = "0x12D4694")]
		public StartCoroutine()
		{
		}
	}
	[Token(Token = "0x20007DB")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Gets the source image sprite of a SpriteRenderer component.")]
	public class GetSprite : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(Sprite))]
		[UIHint(UIHint.Variable)]
		[Tooltip("The source sprite of the SpriteRenderer component.")]
		[RequiredField]
		public FsmObject sprite;

		[Token(Token = "0x600279B")]
		[Address(RVA = "0x12D469C", Offset = "0x12D469C", VA = "0x12D469C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600279C")]
		[Address(RVA = "0x12D46C4", Offset = "0x12D46C4", VA = "0x12D46C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600279D")]
		[Address(RVA = "0x12D46E0", Offset = "0x12D46E0", VA = "0x12D46E0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x600279E")]
		[Address(RVA = "0x12D477C", Offset = "0x12D477C", VA = "0x12D477C")]
		public GetSprite()
		{
		}
	}
	[Token(Token = "0x20007DC")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Gets the color of a sprite renderer")]
	public class GetSpriteColor : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get The Color of the SpriteRenderer component")]
		[UIHint(UIHint.Variable)]
		public FsmColor color;

		[Token(Token = "0x40024DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the red channel in a float variable.")]
		public FsmFloat red;

		[Token(Token = "0x40024E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the green channel in a float variable.")]
		public FsmFloat green;

		[Token(Token = "0x40024E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the blue channel in a float variable.")]
		public FsmFloat blue;

		[Token(Token = "0x40024E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the alpha channel in a float variable.")]
		public FsmFloat alpha;

		[Token(Token = "0x40024E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame. Useful if the color variable is changing.")]
		public bool everyFrame;

		[Token(Token = "0x600279F")]
		[Address(RVA = "0x12D47C4", Offset = "0x12D47C4", VA = "0x12D47C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027A0")]
		[Address(RVA = "0x12D48EC", Offset = "0x12D48EC", VA = "0x12D48EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027A1")]
		[Address(RVA = "0x12D4A78", Offset = "0x12D4A78", VA = "0x12D4A78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60027A2")]
		[Address(RVA = "0x12D4918", Offset = "0x12D4918", VA = "0x12D4918")]
		private void GetColor()
		{
		}

		[Token(Token = "0x60027A3")]
		[Address(RVA = "0x12D4A7C", Offset = "0x12D4A7C", VA = "0x12D4A7C")]
		public GetSpriteColor()
		{
		}
	}
	[Token(Token = "0x20007DD")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Gets the Flips values of a of a SpriteRenderer component.")]
	public class GetSpriteFlip : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The X flip value")]
		public FsmBool x;

		[Token(Token = "0x40024E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The Y flip value")]
		[UIHint(UIHint.Variable)]
		public FsmBool y;

		[Token(Token = "0x40024E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60027A4")]
		[Address(RVA = "0x12D4AC4", Offset = "0x12D4AC4", VA = "0x12D4AC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027A5")]
		[Address(RVA = "0x12D4AFC", Offset = "0x12D4AFC", VA = "0x12D4AFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027A6")]
		[Address(RVA = "0x12D4BFC", Offset = "0x12D4BFC", VA = "0x12D4BFC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60027A7")]
		[Address(RVA = "0x12D4B28", Offset = "0x12D4B28", VA = "0x12D4B28")]
		private void GetFlip()
		{
		}

		[Token(Token = "0x60027A8")]
		[Address(RVA = "0x12D4C00", Offset = "0x12D4C00", VA = "0x12D4C00")]
		public GetSpriteFlip()
		{
		}
	}
	[Token(Token = "0x20007DE")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Get the mode under which the sprite will interact with the masking system.")]
	public class GetSpriteMaskInteraction : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(SpriteMaskInteraction))]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the Mask Interactions of the SpriteRenderer component.")]
		public FsmEnum spriteMaskInteraction;

		[Token(Token = "0x60027A9")]
		[Address(RVA = "0x12D4C48", Offset = "0x12D4C48", VA = "0x12D4C48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027AA")]
		[Address(RVA = "0x12D4C70", Offset = "0x12D4C70", VA = "0x12D4C70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027AB")]
		[Address(RVA = "0x12D4D40", Offset = "0x12D4D40", VA = "0x12D4D40")]
		public GetSpriteMaskInteraction()
		{
		}
	}
	[Token(Token = "0x20007DF")]
	[Tooltip("Get the Order in Layer of a SpriteRenderer component.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class GetSpriteOrderInLayer : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Order In Layer Value")]
		public FsmInt orderInLayer;

		[Token(Token = "0x60027AC")]
		[Address(RVA = "0x12D4D88", Offset = "0x12D4D88", VA = "0x12D4D88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027AD")]
		[Address(RVA = "0x12D4DB0", Offset = "0x12D4DB0", VA = "0x12D4DB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027AE")]
		[Address(RVA = "0x12D4E4C", Offset = "0x12D4E4C", VA = "0x12D4E4C")]
		public GetSpriteOrderInLayer()
		{
		}
	}
	[Token(Token = "0x20007E0")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Get the Sorting Layer name and/or Id of a of a SpriteRenderer component.")]
	public class GetSpriteSortingLayer : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The sorting layer name")]
		public FsmString sortingLayerName;

		[Token(Token = "0x40024EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The sorting layer id")]
		[UIHint(UIHint.Variable)]
		public FsmInt sortingLayerId;

		[Token(Token = "0x60027AF")]
		[Address(RVA = "0x12D4E94", Offset = "0x12D4E94", VA = "0x12D4E94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027B0")]
		[Address(RVA = "0x12D4ECC", Offset = "0x12D4ECC", VA = "0x12D4ECC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027B1")]
		[Address(RVA = "0x12D4FB8", Offset = "0x12D4FB8", VA = "0x12D4FB8")]
		public GetSpriteSortingLayer()
		{
		}
	}
	[Token(Token = "0x20007E1")]
	[Tooltip("Get the position of the Sprite used for sorting the Renderer.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class GetspriteSortPoint : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Get the Sprite Sorting Point value")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(SpriteSortPoint))]
		public FsmEnum spriteSortPoint;

		[Token(Token = "0x60027B2")]
		[Address(RVA = "0x12D5000", Offset = "0x12D5000", VA = "0x12D5000", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027B3")]
		[Address(RVA = "0x12D5028", Offset = "0x12D5028", VA = "0x12D5028", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027B4")]
		[Address(RVA = "0x12D50F8", Offset = "0x12D50F8", VA = "0x12D50F8")]
		public GetspriteSortPoint()
		{
		}
	}
	[Token(Token = "0x20007E2")]
	[Tooltip("Sets a Sprite on a GameObject. Object must have a Sprite Renderer.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSprite : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(Sprite))]
		[Tooltip("The source sprite of the UI Image component.")]
		public FsmObject sprite;

		[Token(Token = "0x60027B5")]
		[Address(RVA = "0x12D5140", Offset = "0x12D5140", VA = "0x12D5140", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027B6")]
		[Address(RVA = "0x12D5168", Offset = "0x12D5168", VA = "0x12D5168", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027B7")]
		[Address(RVA = "0x12D523C", Offset = "0x12D523C", VA = "0x12D523C")]
		public SetSprite()
		{
		}
	}
	[Token(Token = "0x20007E3")]
	[Tooltip("Sets the color of a sprite renderer")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteColor : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set the Color of the SpriteRenderer component")]
		public FsmColor color;

		[Token(Token = "0x40024F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the red channel")]
		public FsmFloat red;

		[Token(Token = "0x40024F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the green channel")]
		public FsmFloat green;

		[Token(Token = "0x40024F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Set the blue channel")]
		public FsmFloat blue;

		[Token(Token = "0x40024F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Set the alpha channel")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat alpha;

		[Token(Token = "0x40024F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40024FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Color originalColor;

		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Color newColor;

		[Token(Token = "0x60027B8")]
		[Address(RVA = "0x12D5284", Offset = "0x12D5284", VA = "0x12D5284", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027B9")]
		[Address(RVA = "0x12D53BC", Offset = "0x12D53BC", VA = "0x12D53BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027BA")]
		[Address(RVA = "0x12D55CC", Offset = "0x12D55CC", VA = "0x12D55CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60027BB")]
		[Address(RVA = "0x12D5464", Offset = "0x12D5464", VA = "0x12D5464")]
		private void SetColor()
		{
		}

		[Token(Token = "0x60027BC")]
		[Address(RVA = "0x12D55D0", Offset = "0x12D55D0", VA = "0x12D55D0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60027BD")]
		[Address(RVA = "0x12D5670", Offset = "0x12D5670", VA = "0x12D5670")]
		public SetSpriteColor()
		{
		}
	}
	[Token(Token = "0x20007E4")]
	[Tooltip("Sets the Flips values of a of a SpriteRenderer component.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteFlip : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The X Flip value")]
		public FsmBool x;

		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The Y Flip value")]
		public FsmBool y;

		[Token(Token = "0x4002500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset flip values when state exits")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool x_orig;

		[Token(Token = "0x4002503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool y_orig;

		[Token(Token = "0x60027BE")]
		[Address(RVA = "0x12D56B8", Offset = "0x12D56B8", VA = "0x12D56B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027BF")]
		[Address(RVA = "0x12D570C", Offset = "0x12D570C", VA = "0x12D570C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027C0")]
		[Address(RVA = "0x12D5880", Offset = "0x12D5880", VA = "0x12D5880", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60027C1")]
		[Address(RVA = "0x12D5884", Offset = "0x12D5884", VA = "0x12D5884", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60027C2")]
		[Address(RVA = "0x12D57E4", Offset = "0x12D57E4", VA = "0x12D57E4")]
		private void FlipSprites()
		{
		}

		[Token(Token = "0x60027C3")]
		[Address(RVA = "0x12D58D8", Offset = "0x12D58D8", VA = "0x12D58D8")]
		public SetSpriteFlip()
		{
		}
	}
	[Token(Token = "0x20007E5")]
	[Tooltip("Set the mode under which the sprite will interact with the masking system.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteMaskInteraction : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x4002504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(SpriteMaskInteraction))]
		[Tooltip("Set the Mask Interactions of the SpriteRenderer component.")]
		public FsmEnum spriteMaskInteraction;

		[Token(Token = "0x60027C4")]
		[Address(RVA = "0x12D5920", Offset = "0x12D5920", VA = "0x12D5920", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027C5")]
		[Address(RVA = "0x12D59A0", Offset = "0x12D59A0", VA = "0x12D59A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027C6")]
		[Address(RVA = "0x12D5A80", Offset = "0x12D5A80", VA = "0x12D5A80")]
		public SetSpriteMaskInteraction()
		{
		}
	}
	[Token(Token = "0x20007E6")]
	[Tooltip("Set the Order in Layer of a SpriteRenderer component.")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteOrderInLayer : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The Order In Layer Value")]
		public FsmInt orderInLayer;

		[Token(Token = "0x60027C7")]
		[Address(RVA = "0x12D5AC8", Offset = "0x12D5AC8", VA = "0x12D5AC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027C8")]
		[Address(RVA = "0x12D5AF0", Offset = "0x12D5AF0", VA = "0x12D5AF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027C9")]
		[Address(RVA = "0x12D5B98", Offset = "0x12D5B98", VA = "0x12D5B98")]
		public SetSpriteOrderInLayer()
		{
		}
	}
	[Token(Token = "0x20007E7")]
	[Tooltip("Set the Sorting Layer of a SpriteRenderer component by Id (by id is faster than by name)")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	public class SetSpriteSortingLayerById : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x4002508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The sorting Layer Name")]
		public FsmInt sortingLayerId;

		[Token(Token = "0x400250A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, set the sorting layer to all children")]
		public FsmBool setAllSpritesInChildren;

		[Token(Token = "0x60027CA")]
		[Address(RVA = "0x12D5BE0", Offset = "0x12D5BE0", VA = "0x12D5BE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027CB")]
		[Address(RVA = "0x12D5C24", Offset = "0x12D5C24", VA = "0x12D5C24", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027CC")]
		[Address(RVA = "0x12D5D74", Offset = "0x12D5D74", VA = "0x12D5D74")]
		public SetSpriteSortingLayerById()
		{
		}
	}
	[Token(Token = "0x20007E8")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Set the Sorting Layer of a SpriteRenderer component. by name")]
	public class SetSpriteSortingLayerByName : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x400250B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpriteRenderer))]
		[RequiredField]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400250C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The sorting Layer Name")]
		[RequiredField]
		public FsmString sortingLayerName;

		[Token(Token = "0x400250D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, set the sorting layer to all children")]
		public FsmBool setAllSpritesInChildren;

		[Token(Token = "0x60027CD")]
		[Address(RVA = "0x12D5DBC", Offset = "0x12D5DBC", VA = "0x12D5DBC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027CE")]
		[Address(RVA = "0x12D5E00", Offset = "0x12D5E00", VA = "0x12D5E00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027CF")]
		[Address(RVA = "0x12D5F50", Offset = "0x12D5F50", VA = "0x12D5F50")]
		public SetSpriteSortingLayerByName()
		{
		}
	}
	[Token(Token = "0x20007E9")]
	[ActionCategory(ActionCategory.SpriteRenderer)]
	[Tooltip("Determines the position of the Sprite used for sorting the Renderer. Unity 2018.2 or higher.")]
	public class SetSpriteSortPoint : ComponentAction<SpriteRenderer>
	{
		[Token(Token = "0x400250E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(SpriteRenderer))]
		[Tooltip("The GameObject with the SpriteRenderer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400250F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(SpriteSortPoint))]
		[Tooltip("Set the Sprite Sorting Point value")]
		public FsmEnum spriteSortPoint;

		[Token(Token = "0x60027D0")]
		[Address(RVA = "0x12D5F98", Offset = "0x12D5F98", VA = "0x12D5F98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027D1")]
		[Address(RVA = "0x12D6018", Offset = "0x12D6018", VA = "0x12D6018", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027D2")]
		[Address(RVA = "0x12D60F8", Offset = "0x12D60F8", VA = "0x12D60F8")]
		public SetSpriteSortPoint()
		{
		}
	}
	[Token(Token = "0x20007EA")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public abstract class BaseFsmVariableAction : FsmStateAction
	{
		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to send if the FSM is not found.")]
		[ActionSection("Events")]
		public FsmEvent fsmNotFound;

		[Token(Token = "0x4002511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send if the Variable is not found.")]
		public FsmEvent variableNotFound;

		[Token(Token = "0x4002512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4002513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string cachedFsmName;

		[Token(Token = "0x4002514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x60027D3")]
		[Address(RVA = "0x12D6140", Offset = "0x12D6140", VA = "0x12D6140", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027D4")]
		[Address(RVA = "0x12D6168", Offset = "0x12D6168", VA = "0x12D6168")]
		protected bool UpdateCache(GameObject go, string fsmName)
		{
			return default(bool);
		}

		[Token(Token = "0x60027D5")]
		[Address(RVA = "0x12D630C", Offset = "0x12D630C", VA = "0x12D630C")]
		protected void DoVariableNotFound(string variableName)
		{
		}

		[Token(Token = "0x60027D6")]
		[Address(RVA = "0x12D638C", Offset = "0x12D638C", VA = "0x12D638C")]
		protected BaseFsmVariableAction()
		{
		}
	}
	[Token(Token = "0x20007EB")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public abstract class BaseFsmVariableIndexAction : FsmStateAction
	{
		[Token(Token = "0x4002515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Events")]
		[Tooltip("The event to trigger if the index is out of range")]
		public FsmEvent indexOutOfRange;

		[Token(Token = "0x4002516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send if the FSM is not found.")]
		public FsmEvent fsmNotFound;

		[Token(Token = "0x4002517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The event to send if the Variable is not found.")]
		public FsmEvent variableNotFound;

		[Token(Token = "0x4002518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4002519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string cachedFsmName;

		[Token(Token = "0x400251A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x60027D7")]
		[Address(RVA = "0x12D6394", Offset = "0x12D6394", VA = "0x12D6394", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027D8")]
		[Address(RVA = "0x12D63BC", Offset = "0x12D63BC", VA = "0x12D63BC")]
		protected bool UpdateCache(GameObject go, string fsmName)
		{
			return default(bool);
		}

		[Token(Token = "0x60027D9")]
		[Address(RVA = "0x12D6560", Offset = "0x12D6560", VA = "0x12D6560")]
		protected void DoVariableNotFound(string variableName)
		{
		}

		[Token(Token = "0x60027DA")]
		[Address(RVA = "0x12D65E0", Offset = "0x12D65E0", VA = "0x12D65E0")]
		protected BaseFsmVariableIndexAction()
		{
		}
	}
	[Token(Token = "0x20007EC")]
	[Tooltip("Block events while this action is active.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class BlockEvents : FsmStateAction
	{
		[Token(Token = "0x20007ED")]
		public enum Options
		{
			[Token(Token = "0x4002522")]
			Timeout,
			[Token(Token = "0x4002523")]
			WhileTrue,
			[Token(Token = "0x4002524")]
			WhileFalse,
			[Token(Token = "0x4002525")]
			UntilTrue,
			[Token(Token = "0x4002526")]
			UntilFalse,
			[Token(Token = "0x4002527")]
			UntilEvent
		}

		[Token(Token = "0x400251B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("When to block events.")]
		public Options condition;

		[Token(Token = "0x400251C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Context sensitive parameter. Depends on Condition.")]
		public FsmFloat floatParam;

		[Token(Token = "0x400251D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Context sensitive parameter. Depends on Condition.")]
		public FsmBool boolParam;

		[Token(Token = "0x400251E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[EventNotSent]
		[Tooltip("Context sensitive parameter. Depends on Condition.")]
		public FsmEvent eventParam;

		[Token(Token = "0x400251F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Log any events blocked by this action. Helpful for debugging.")]
		[ActionSection("Debug")]
		public FsmBool logBlockedEvents;

		[Token(Token = "0x4002520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool firstTime;

		[Token(Token = "0x60027DB")]
		[Address(RVA = "0x12D65E8", Offset = "0x12D65E8", VA = "0x12D65E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027DC")]
		[Address(RVA = "0x12D6640", Offset = "0x12D6640", VA = "0x12D6640", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60027DD")]
		[Address(RVA = "0x12D664C", Offset = "0x12D664C", VA = "0x12D664C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60027DE")]
		[Address(RVA = "0x12D677C", Offset = "0x12D677C", VA = "0x12D677C", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60027DF")]
		[Address(RVA = "0x12D6910", Offset = "0x12D6910", VA = "0x12D6910")]
		private bool Validate()
		{
			return default(bool);
		}

		[Token(Token = "0x60027E0")]
		[Address(RVA = "0x12D69B0", Offset = "0x12D69B0", VA = "0x12D69B0")]
		private bool DoBlockEvent(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60027E1")]
		[Address(RVA = "0x12D6B1C", Offset = "0x12D6B1C", VA = "0x12D6B1C")]
		public BlockEvents()
		{
		}
	}
	[Token(Token = "0x20007EE")]
	[Obsolete("This action is obsolete; use Send Event with Event Target instead.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends an Event to all FSMs in the scene or to all FSMs on a Game Object. NOTE: This action won't work on the very first frame of the game...")]
	public class BroadcastEvent : FsmStateAction
	{
		[Token(Token = "0x4002528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The event to broadcast.")]
		[RequiredField]
		public FsmString broadcastEvent;

		[Token(Token = "0x4002529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("By default, the event is broadcast to all FSMs in the scene. Optionally you can specify a game object to target. The event will then be broadcast to all FSMs on that game object.")]
		public FsmGameObject gameObject;

		[Token(Token = "0x400252A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Broadcast the event to all the Game Object's children too.")]
		public FsmBool sendToChildren;

		[Token(Token = "0x400252B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Don't send the event to self.")]
		public FsmBool excludeSelf;

		[Token(Token = "0x60027E2")]
		[Address(RVA = "0x12D6B2C", Offset = "0x12D6B2C", VA = "0x12D6B2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027E3")]
		[Address(RVA = "0x12D6B8C", Offset = "0x12D6B8C", VA = "0x12D6B8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027E4")]
		[Address(RVA = "0x12D6CF8", Offset = "0x12D6CF8", VA = "0x12D6CF8")]
		public BroadcastEvent()
		{
		}
	}
	[Token(Token = "0x20007EF")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Enables/Disables an FSM component on a GameObject.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class EnableFSM : FsmStateAction
	{
		[Token(Token = "0x400252C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400252D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on GameObject. Useful if you have more than one FSM on a GameObject. Leave blank to use the first FSM on the game object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x400252E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set to True to enable, False to disable.")]
		public FsmBool enable;

		[Token(Token = "0x400252F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Reset the initial enabled state when exiting the state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayMakerFSM fsmComponent;

		[Token(Token = "0x60027E5")]
		[Address(RVA = "0x12D6D00", Offset = "0x12D6D00", VA = "0x12D6D00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027E6")]
		[Address(RVA = "0x12D6DA0", Offset = "0x12D6DA0", VA = "0x12D6DA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027E7")]
		[Address(RVA = "0x12D6DBC", Offset = "0x12D6DBC", VA = "0x12D6DBC")]
		private void DoEnableFSM()
		{
		}

		[Token(Token = "0x60027E8")]
		[Address(RVA = "0x12D6FF0", Offset = "0x12D6FF0", VA = "0x12D6FF0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60027E9")]
		[Address(RVA = "0x12D70A4", Offset = "0x12D70A4", VA = "0x12D70A4")]
		public EnableFSM()
		{
		}
	}
	[Token(Token = "0x20007F0")]
	[Tooltip("Stop this FSM. If this FSM was launched by a {{Run FSM}} action, it will trigger a Finish event in that state.")]
	[Note("Stop this FSM. If this FSM was launched by a Run FSM action, it will trigger a Finish event in that state.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class FinishFSM : FsmStateAction
	{
		[Token(Token = "0x60027EA")]
		[Address(RVA = "0x12D70AC", Offset = "0x12D70AC", VA = "0x12D70AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027EB")]
		[Address(RVA = "0x12D70C8", Offset = "0x12D70C8", VA = "0x12D70C8")]
		public FinishFSM()
		{
		}
	}
	[Token(Token = "0x20007F1")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Forwards all event received by this FSM to another target. Optionally specify a list of events to ignore.")]
	public class ForwardAllEvents : FsmStateAction
	{
		[Token(Token = "0x4002531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Forward to this target.")]
		public FsmEventTarget forwardTo;

		[Token(Token = "0x4002532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Don't forward these events.")]
		public FsmEvent[] exceptThese;

		[Token(Token = "0x4002533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should this action eat the events or pass them on.")]
		public bool eatEvents;

		[Token(Token = "0x60027EC")]
		[Address(RVA = "0x12D70D0", Offset = "0x12D70D0", VA = "0x12D70D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027ED")]
		[Address(RVA = "0x12D7230", Offset = "0x12D7230", VA = "0x12D7230", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60027EE")]
		[Address(RVA = "0x12D723C", Offset = "0x12D723C", VA = "0x12D723C", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60027EF")]
		[Address(RVA = "0x12D72BC", Offset = "0x12D72BC", VA = "0x12D72BC")]
		public ForwardAllEvents()
		{
		}
	}
	[Token(Token = "0x20007F2")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Forward an event received by this FSM to another target.")]
	public class ForwardEvent : FsmStateAction
	{
		[Token(Token = "0x4002534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Forward to this target.")]
		public FsmEventTarget forwardTo;

		[Token(Token = "0x4002535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The events to forward.")]
		public FsmEvent[] eventsToForward;

		[Token(Token = "0x4002536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should this action eat the events or pass them on.")]
		public bool eatEvents;

		[Token(Token = "0x60027F0")]
		[Address(RVA = "0x12D72C4", Offset = "0x12D72C4", VA = "0x12D72C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027F1")]
		[Address(RVA = "0x12D7350", Offset = "0x12D7350", VA = "0x12D7350", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60027F2")]
		[Address(RVA = "0x12D735C", Offset = "0x12D735C", VA = "0x12D735C", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60027F3")]
		[Address(RVA = "0x12D73DC", Offset = "0x12D73DC", VA = "0x12D73DC")]
		public ForwardEvent()
		{
		}
	}
	[Token(Token = "0x20007F3")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the Bool data from the last Event.")]
	public class GetEventBoolData : FsmStateAction
	{
		[Token(Token = "0x4002537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the bool data in a variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool getBoolData;

		[Token(Token = "0x60027F4")]
		[Address(RVA = "0x12D73E4", Offset = "0x12D73E4", VA = "0x12D73E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027F5")]
		[Address(RVA = "0x12D73F0", Offset = "0x12D73F0", VA = "0x12D73F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027F6")]
		[Address(RVA = "0x12D746C", Offset = "0x12D746C", VA = "0x12D746C")]
		public GetEventBoolData()
		{
		}
	}
	[Token(Token = "0x20007F4")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the Float data from the last Event.")]
	public class GetEventFloatData : FsmStateAction
	{
		[Token(Token = "0x4002538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the float data in a variable.")]
		public FsmFloat getFloatData;

		[Token(Token = "0x60027F7")]
		[Address(RVA = "0x12D7474", Offset = "0x12D7474", VA = "0x12D7474", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027F8")]
		[Address(RVA = "0x12D7480", Offset = "0x12D7480", VA = "0x12D7480", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027F9")]
		[Address(RVA = "0x12D74FC", Offset = "0x12D74FC", VA = "0x12D74FC")]
		public GetEventFloatData()
		{
		}
	}
	[Token(Token = "0x20007F5")]
	[ActionCategory(ActionCategory.StateMachine)]
	[SeeAlso("{{SetEventData}}")]
	[Tooltip("Gets info on the last event that caused a state change. See also: {{Set Event Data}} action.")]
	public class GetEventInfo : FsmStateAction
	{
		[Token(Token = "0x4002539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Game Object that sent the Event.")]
		public FsmGameObject sentByGameObject;

		[Token(Token = "0x400253A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The name of the FSM that sent the Event.")]
		[UIHint(UIHint.Variable)]
		public FsmString fsmName;

		[Token(Token = "0x400253B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Bool data.")]
		public FsmBool getBoolData;

		[Token(Token = "0x400253C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Custom Int data.")]
		[UIHint(UIHint.Variable)]
		public FsmInt getIntData;

		[Token(Token = "0x400253D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Float data.")]
		public FsmFloat getFloatData;

		[Token(Token = "0x400253E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Vector2 data.")]
		public FsmVector2 getVector2Data;

		[Token(Token = "0x400253F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Vector3 data.")]
		public FsmVector3 getVector3Data;

		[Token(Token = "0x4002540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom String data.")]
		public FsmString getStringData;

		[Token(Token = "0x4002541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom GameObject data.")]
		public FsmGameObject getGameObjectData;

		[Token(Token = "0x4002542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Custom Rect data.")]
		[UIHint(UIHint.Variable)]
		public FsmRect getRectData;

		[Token(Token = "0x4002543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Quaternion data.")]
		public FsmQuaternion getQuaternionData;

		[Token(Token = "0x4002544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Material data.")]
		public FsmMaterial getMaterialData;

		[Token(Token = "0x4002545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Texture data.")]
		public FsmTexture getTextureData;

		[Token(Token = "0x4002546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Custom Color data.")]
		public FsmColor getColorData;

		[Token(Token = "0x4002547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Custom Object data.")]
		[UIHint(UIHint.Variable)]
		public FsmObject getObjectData;

		[Token(Token = "0x60027FA")]
		[Address(RVA = "0x12D7504", Offset = "0x12D7504", VA = "0x12D7504", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027FB")]
		[Address(RVA = "0x12D75FC", Offset = "0x12D75FC", VA = "0x12D75FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027FC")]
		[Address(RVA = "0x12D7938", Offset = "0x12D7938", VA = "0x12D7938")]
		public GetEventInfo()
		{
		}
	}
	[Token(Token = "0x20007F6")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the Int data from the last Event.")]
	public class GetEventIntData : FsmStateAction
	{
		[Token(Token = "0x4002548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the int data in a variable.")]
		public FsmInt getIntData;

		[Token(Token = "0x60027FD")]
		[Address(RVA = "0x12D7940", Offset = "0x12D7940", VA = "0x12D7940", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60027FE")]
		[Address(RVA = "0x12D794C", Offset = "0x12D794C", VA = "0x12D794C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60027FF")]
		[Address(RVA = "0x12D79C8", Offset = "0x12D79C8", VA = "0x12D79C8")]
		public GetEventIntData()
		{
		}
	}
	[Token(Token = "0x20007F7")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the sender of the last event.")]
	public class GetEventSentBy : FsmStateAction
	{
		[Token(Token = "0x4002549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the GameObject that sent the event.")]
		public FsmGameObject sentByGameObject;

		[Token(Token = "0x400254A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name of the GameObject that sent the event.")]
		public FsmString gameObjectName;

		[Token(Token = "0x400254B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name of the FSM that sent the event.")]
		public FsmString fsmName;

		[Token(Token = "0x6002800")]
		[Address(RVA = "0x12D79D0", Offset = "0x12D79D0", VA = "0x12D79D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002801")]
		[Address(RVA = "0x12D7A08", Offset = "0x12D7A08", VA = "0x12D7A08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002802")]
		[Address(RVA = "0x12D7C34", Offset = "0x12D7C34", VA = "0x12D7C34")]
		public GetEventSentBy()
		{
		}
	}
	[Token(Token = "0x20007F8")]
	[Tooltip("Gets the String data from the last Event.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetEventStringData : FsmStateAction
	{
		[Token(Token = "0x400254C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the string data in a variable.")]
		public FsmString getStringData;

		[Token(Token = "0x6002803")]
		[Address(RVA = "0x12D7C3C", Offset = "0x12D7C3C", VA = "0x12D7C3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002804")]
		[Address(RVA = "0x12D7C48", Offset = "0x12D7C48", VA = "0x12D7C48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002805")]
		[Address(RVA = "0x12D7CCC", Offset = "0x12D7CCC", VA = "0x12D7CCC")]
		public GetEventStringData()
		{
		}
	}
	[Token(Token = "0x20007F9")]
	[Tooltip("Gets the Vector2 data from the last Event.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetEventVector2Data : FsmStateAction
	{
		[Token(Token = "0x400254D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the vector2 data in a variable.")]
		public FsmVector2 getVector2Data;

		[Token(Token = "0x6002806")]
		[Address(RVA = "0x12D7CD4", Offset = "0x12D7CD4", VA = "0x12D7CD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002807")]
		[Address(RVA = "0x12D7CE0", Offset = "0x12D7CE0", VA = "0x12D7CE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002808")]
		[Address(RVA = "0x12D7D5C", Offset = "0x12D7D5C", VA = "0x12D7D5C")]
		public GetEventVector2Data()
		{
		}
	}
	[Token(Token = "0x20007FA")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the Vector3 data from the last Event.")]
	public class GetEventVector3Data : FsmStateAction
	{
		[Token(Token = "0x400254E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the vector3 data in a variable.")]
		public FsmVector3 getVector3Data;

		[Token(Token = "0x6002809")]
		[Address(RVA = "0x12D7D64", Offset = "0x12D7D64", VA = "0x12D7D64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600280A")]
		[Address(RVA = "0x12D7D70", Offset = "0x12D7D70", VA = "0x12D7D70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600280B")]
		[Address(RVA = "0x12D7DF4", Offset = "0x12D7DF4", VA = "0x12D7DF4")]
		public GetEventVector3Data()
		{
		}
	}
	[Token(Token = "0x20007FB")]
	[Tooltip("Get the value of a Bool Variable from another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmBool : FsmStateAction
	{
		[Token(Token = "0x400254F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[RequiredField]
		[UIHint(UIHint.FsmBool)]
		public FsmString variableName;

		[Token(Token = "0x4002552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Bool variable in this FSM.")]
		[RequiredField]
		public FsmBool storeValue;

		[Token(Token = "0x4002553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600280C")]
		[Address(RVA = "0x12D7DFC", Offset = "0x12D7DFC", VA = "0x12D7DFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600280D")]
		[Address(RVA = "0x12D7E74", Offset = "0x12D7E74", VA = "0x12D7E74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600280E")]
		[Address(RVA = "0x12D8064", Offset = "0x12D8064", VA = "0x12D8064", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600280F")]
		[Address(RVA = "0x12D7EA0", Offset = "0x12D7EA0", VA = "0x12D7EA0")]
		private void DoGetFsmBool()
		{
		}

		[Token(Token = "0x6002810")]
		[Address(RVA = "0x12D8068", Offset = "0x12D8068", VA = "0x12D8068")]
		public GetFsmBool()
		{
		}
	}
	[Token(Token = "0x20007FC")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Color Variable from another FSM.")]
	public class GetFsmColor : FsmStateAction
	{
		[Token(Token = "0x4002557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.FsmColor)]
		[Tooltip("The name of the FSM variable to get.")]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x400255A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Color variable in this FSM.")]
		public FsmColor storeValue;

		[Token(Token = "0x400255B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400255C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400255D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400255E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002811")]
		[Address(RVA = "0x12D8070", Offset = "0x12D8070", VA = "0x12D8070", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002812")]
		[Address(RVA = "0x12D80E8", Offset = "0x12D80E8", VA = "0x12D80E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002813")]
		[Address(RVA = "0x12D82D0", Offset = "0x12D82D0", VA = "0x12D82D0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002814")]
		[Address(RVA = "0x12D8114", Offset = "0x12D8114", VA = "0x12D8114")]
		private void DoGetFsmColor()
		{
		}

		[Token(Token = "0x6002815")]
		[Address(RVA = "0x12D82D4", Offset = "0x12D82D4", VA = "0x12D82D4")]
		public GetFsmColor()
		{
		}
	}
	[Token(Token = "0x20007FD")]
	[Tooltip("Get the value of an Enum Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmEnum : FsmStateAction
	{
		[Token(Token = "0x400255F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmEnum)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x4002562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the value in an Enum variable in this FSM.")]
		public FsmEnum storeValue;

		[Token(Token = "0x4002563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002816")]
		[Address(RVA = "0x12D82DC", Offset = "0x12D82DC", VA = "0x12D82DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002817")]
		[Address(RVA = "0x12D8354", Offset = "0x12D8354", VA = "0x12D8354", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002818")]
		[Address(RVA = "0x12D8558", Offset = "0x12D8558", VA = "0x12D8558", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002819")]
		[Address(RVA = "0x12D8380", Offset = "0x12D8380", VA = "0x12D8380")]
		private void DoGetFsmEnum()
		{
		}

		[Token(Token = "0x600281A")]
		[Address(RVA = "0x12D855C", Offset = "0x12D855C", VA = "0x12D855C")]
		public GetFsmEnum()
		{
		}
	}
	[Token(Token = "0x20007FE")]
	[Tooltip("Get the value of a Float Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmFloat : FsmStateAction
	{
		[Token(Token = "0x4002567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmFloat)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x400256A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Float variable in this FSM.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeValue;

		[Token(Token = "0x400256B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400256C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400256D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400256E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600281B")]
		[Address(RVA = "0x12D8564", Offset = "0x12D8564", VA = "0x12D8564", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600281C")]
		[Address(RVA = "0x12D85DC", Offset = "0x12D85DC", VA = "0x12D85DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600281D")]
		[Address(RVA = "0x12D87D4", Offset = "0x12D87D4", VA = "0x12D87D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600281E")]
		[Address(RVA = "0x12D8608", Offset = "0x12D8608", VA = "0x12D8608")]
		private void DoGetFsmFloat()
		{
		}

		[Token(Token = "0x600281F")]
		[Address(RVA = "0x12D87D8", Offset = "0x12D87D8", VA = "0x12D87D8")]
		public GetFsmFloat()
		{
		}
	}
	[Token(Token = "0x20007FF")]
	[Tooltip("Get the value of a Game Object Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmGameObject : FsmStateAction
	{
		[Token(Token = "0x400256F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmGameObject)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4002572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a GameObject variable in this FSM.")]
		public FsmGameObject storeValue;

		[Token(Token = "0x4002573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002820")]
		[Address(RVA = "0x12D87E0", Offset = "0x12D87E0", VA = "0x12D87E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002821")]
		[Address(RVA = "0x12D8858", Offset = "0x12D8858", VA = "0x12D8858", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002822")]
		[Address(RVA = "0x12D8A5C", Offset = "0x12D8A5C", VA = "0x12D8A5C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002823")]
		[Address(RVA = "0x12D8884", Offset = "0x12D8884", VA = "0x12D8884")]
		private void DoGetFsmGameObject()
		{
		}

		[Token(Token = "0x6002824")]
		[Address(RVA = "0x12D8A60", Offset = "0x12D8A60", VA = "0x12D8A60")]
		public GetFsmGameObject()
		{
		}
	}
	[Token(Token = "0x2000800")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of an Integer Variable from another FSM.")]
	public class GetFsmInt : FsmStateAction
	{
		[Token(Token = "0x4002577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable to get.")]
		[UIHint(UIHint.FsmInt)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x400257A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in an Int variable in this FSM.")]
		public FsmInt storeValue;

		[Token(Token = "0x400257B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400257C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400257D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400257E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002825")]
		[Address(RVA = "0x12D8A68", Offset = "0x12D8A68", VA = "0x12D8A68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002826")]
		[Address(RVA = "0x12D8AE0", Offset = "0x12D8AE0", VA = "0x12D8AE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002827")]
		[Address(RVA = "0x12D8CCC", Offset = "0x12D8CCC", VA = "0x12D8CCC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002828")]
		[Address(RVA = "0x12D8B0C", Offset = "0x12D8B0C", VA = "0x12D8B0C")]
		private void DoGetFsmInt()
		{
		}

		[Token(Token = "0x6002829")]
		[Address(RVA = "0x12D8CD0", Offset = "0x12D8CD0", VA = "0x12D8CD0")]
		public GetFsmInt()
		{
		}
	}
	[Token(Token = "0x2000801")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Material Variable from another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmMaterial : FsmStateAction
	{
		[Token(Token = "0x400257F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmMaterial)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x4002582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Material variable in this FSM.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmMaterial storeValue;

		[Token(Token = "0x4002583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x600282A")]
		[Address(RVA = "0x12D8CD8", Offset = "0x12D8CD8", VA = "0x12D8CD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600282B")]
		[Address(RVA = "0x12D8D74", Offset = "0x12D8D74", VA = "0x12D8D74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600282C")]
		[Address(RVA = "0x12D8F78", Offset = "0x12D8F78", VA = "0x12D8F78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600282D")]
		[Address(RVA = "0x12D8DA0", Offset = "0x12D8DA0", VA = "0x12D8DA0")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x600282E")]
		[Address(RVA = "0x12D8F7C", Offset = "0x12D8F7C", VA = "0x12D8F7C")]
		public GetFsmMaterial()
		{
		}
	}
	[Token(Token = "0x2000802")]
	[Tooltip("Get the value of an Object Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmObject : FsmStateAction
	{
		[Token(Token = "0x4002587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmObject)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x400258A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in an Object variable in this FSM.")]
		public FsmObject storeValue;

		[Token(Token = "0x400258B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400258C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400258D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400258E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x600282F")]
		[Address(RVA = "0x12D8F84", Offset = "0x12D8F84", VA = "0x12D8F84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002830")]
		[Address(RVA = "0x12D9020", Offset = "0x12D9020", VA = "0x12D9020", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002831")]
		[Address(RVA = "0x12D9224", Offset = "0x12D9224", VA = "0x12D9224", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002832")]
		[Address(RVA = "0x12D904C", Offset = "0x12D904C", VA = "0x12D904C")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x6002833")]
		[Address(RVA = "0x12D9228", Offset = "0x12D9228", VA = "0x12D9228")]
		public GetFsmObject()
		{
		}
	}
	[Token(Token = "0x2000803")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the value of a Quaternion Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class GetFsmQuaternion : FsmStateAction
	{
		[Token(Token = "0x400258F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmQuaternion)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x4002592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Store the value in a Quaternion variable in this FSM.")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion storeValue;

		[Token(Token = "0x4002593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x6002834")]
		[Address(RVA = "0x12D9230", Offset = "0x12D9230", VA = "0x12D9230", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002835")]
		[Address(RVA = "0x12D92CC", Offset = "0x12D92CC", VA = "0x12D92CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002836")]
		[Address(RVA = "0x12D94B4", Offset = "0x12D94B4", VA = "0x12D94B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002837")]
		[Address(RVA = "0x12D92F8", Offset = "0x12D92F8", VA = "0x12D92F8")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x6002838")]
		[Address(RVA = "0x12D94B8", Offset = "0x12D94B8", VA = "0x12D94B8")]
		public GetFsmQuaternion()
		{
		}
	}
	[Token(Token = "0x2000804")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Rect Variable from another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmRect : FsmStateAction
	{
		[Token(Token = "0x4002597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmRect)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x400259A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Rect variable in this FSM.")]
		public FsmRect storeValue;

		[Token(Token = "0x400259B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400259C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400259D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400259E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x6002839")]
		[Address(RVA = "0x12D94C0", Offset = "0x12D94C0", VA = "0x12D94C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600283A")]
		[Address(RVA = "0x12D955C", Offset = "0x12D955C", VA = "0x12D955C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600283B")]
		[Address(RVA = "0x12D9744", Offset = "0x12D9744", VA = "0x12D9744", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600283C")]
		[Address(RVA = "0x12D9588", Offset = "0x12D9588", VA = "0x12D9588")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x600283D")]
		[Address(RVA = "0x12D9748", Offset = "0x12D9748", VA = "0x12D9748")]
		public GetFsmRect()
		{
		}
	}
	[Token(Token = "0x2000805")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "fsmComponent", false)]
	[Tooltip("Gets the name of the specified FSMs current state. Either reference the fsm component directly, or find it on a game object.")]
	public class GetFsmState : FsmStateAction
	{
		[Token(Token = "0x400259F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Choose a PlayMakerFSM component. If you set a component here it overrides the Game Object and Fsm Name settings.")]
		public PlayMakerFSM fsmComponent;

		[Token(Token = "0x40025A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If not specifying the component above, specify the GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40025A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object. If left blank it will find the first PlayMakerFSM on the GameObject.")]
		public FsmString fsmName;

		[Token(Token = "0x40025A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the FSM's current State in a string variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x40025A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. E.g.,  useful if you're waiting for the State to change.")]
		public bool everyFrame;

		[Token(Token = "0x40025A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600283E")]
		[Address(RVA = "0x12D9750", Offset = "0x12D9750", VA = "0x12D9750", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600283F")]
		[Address(RVA = "0x12D97E0", Offset = "0x12D97E0", VA = "0x12D97E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002840")]
		[Address(RVA = "0x12D9994", Offset = "0x12D9994", VA = "0x12D9994", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002841")]
		[Address(RVA = "0x12D980C", Offset = "0x12D980C", VA = "0x12D980C")]
		private void DoGetFsmState()
		{
		}

		[Token(Token = "0x6002842")]
		[Address(RVA = "0x12D9998", Offset = "0x12D9998", VA = "0x12D9998")]
		public GetFsmState()
		{
		}
	}
	[Token(Token = "0x2000806")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a String Variable from another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmString : FsmStateAction
	{
		[Token(Token = "0x40025A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40025A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x40025A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmString)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x40025A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a String variable in this FSM.")]
		public FsmString storeValue;

		[Token(Token = "0x40025A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40025AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40025AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40025AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002843")]
		[Address(RVA = "0x12D99A0", Offset = "0x12D99A0", VA = "0x12D99A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002844")]
		[Address(RVA = "0x12D9A18", Offset = "0x12D9A18", VA = "0x12D9A18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002845")]
		[Address(RVA = "0x12D9C1C", Offset = "0x12D9C1C", VA = "0x12D9C1C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002846")]
		[Address(RVA = "0x12D9A44", Offset = "0x12D9A44", VA = "0x12D9A44")]
		private void DoGetFsmString()
		{
		}

		[Token(Token = "0x6002847")]
		[Address(RVA = "0x12D9C20", Offset = "0x12D9C20", VA = "0x12D9C20")]
		public GetFsmString()
		{
		}
	}
	[Token(Token = "0x2000807")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a Texture Variable from another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmTexture : FsmStateAction
	{
		[Token(Token = "0x40025AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40025AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x40025AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmTexture)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x40025B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the value in a Texture variable in this FSM.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmTexture storeValue;

		[Token(Token = "0x40025B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40025B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40025B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40025B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected PlayMakerFSM fsm;

		[Token(Token = "0x6002848")]
		[Address(RVA = "0x12DAC28", Offset = "0x12DAC28", VA = "0x12DAC28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002849")]
		[Address(RVA = "0x12DACC4", Offset = "0x12DACC4", VA = "0x12DACC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600284A")]
		[Address(RVA = "0x12DAEC8", Offset = "0x12DAEC8", VA = "0x12DAEC8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600284B")]
		[Address(RVA = "0x12DACF0", Offset = "0x12DACF0", VA = "0x12DACF0")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x600284C")]
		[Address(RVA = "0x12DAECC", Offset = "0x12DAECC", VA = "0x12DAECC")]
		public GetFsmTexture()
		{
		}
	}
	[Token(Token = "0x2000808")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Get the value of a variable in another FSM and store it in a variable of the same name in this FSM.")]
	public class GetFsmVariable : FsmStateAction
	{
		[Token(Token = "0x40025B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40025B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x40025B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[HideTypeFilter]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value of the FsmVariable")]
		public FsmVar storeValue;

		[Token(Token = "0x40025B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40025B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject cachedGO;

		[Token(Token = "0x40025BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string cachedFsmName;

		[Token(Token = "0x40025BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM sourceFsm;

		[Token(Token = "0x40025BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private INamedVariable sourceVariable;

		[Token(Token = "0x40025BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NamedVariable targetVariable;

		[Token(Token = "0x600284D")]
		[Address(RVA = "0x12DAED4", Offset = "0x12DAED4", VA = "0x12DAED4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600284E")]
		[Address(RVA = "0x12DAF84", Offset = "0x12DAF84", VA = "0x12DAF84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600284F")]
		[Address(RVA = "0x12DB264", Offset = "0x12DB264", VA = "0x12DB264", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002850")]
		[Address(RVA = "0x12DAFB8", Offset = "0x12DAFB8", VA = "0x12DAFB8")]
		private void InitFsmVar()
		{
		}

		[Token(Token = "0x6002851")]
		[Address(RVA = "0x12DB208", Offset = "0x12DB208", VA = "0x12DB208")]
		private void DoGetFsmVariable()
		{
		}

		[Token(Token = "0x6002852")]
		[Address(RVA = "0x12DB268", Offset = "0x12DB268", VA = "0x12DB268")]
		public GetFsmVariable()
		{
		}
	}
	[Token(Token = "0x2000809")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the values of multiple variables in another FSM and store in variables of the same name in this FSM.")]
	public class GetFsmVariables : FsmStateAction
	{
		[Token(Token = "0x40025BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40025BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x40025C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[HideTypeFilter]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the values of the FsmVariables")]
		public FsmVar[] getVariables;

		[Token(Token = "0x40025C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40025C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject cachedGO;

		[Token(Token = "0x40025C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string cachedFsmName;

		[Token(Token = "0x40025C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayMakerFSM sourceFsm;

		[Token(Token = "0x40025C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private INamedVariable[] sourceVariables;

		[Token(Token = "0x40025C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NamedVariable[] targetVariables;

		[Token(Token = "0x6002853")]
		[Address(RVA = "0x12DB270", Offset = "0x12DB270", VA = "0x12DB270", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002854")]
		[Address(RVA = "0x12DB2E8", Offset = "0x12DB2E8", VA = "0x12DB2E8")]
		private void InitFsmVars()
		{
		}

		[Token(Token = "0x6002855")]
		[Address(RVA = "0x12DB68C", Offset = "0x12DB68C", VA = "0x12DB68C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002856")]
		[Address(RVA = "0x12DB778", Offset = "0x12DB778", VA = "0x12DB778", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002857")]
		[Address(RVA = "0x12DB6C0", Offset = "0x12DB6C0", VA = "0x12DB6C0")]
		private void DoGetFsmVariables()
		{
		}

		[Token(Token = "0x6002858")]
		[Address(RVA = "0x12DB77C", Offset = "0x12DB77C", VA = "0x12DB77C")]
		public GetFsmVariables()
		{
		}
	}
	[Token(Token = "0x200080A")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Get the value of a Vector2 Variable from another FSM.")]
	public class GetFsmVector2 : FsmStateAction
	{
		[Token(Token = "0x40025C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40025C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x40025C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmVector2)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x40025CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Vector2 variable in this FSM.")]
		public FsmVector2 storeValue;

		[Token(Token = "0x40025CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40025CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40025CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40025CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002859")]
		[Address(RVA = "0x12DB784", Offset = "0x12DB784", VA = "0x12DB784", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600285A")]
		[Address(RVA = "0x12DB7FC", Offset = "0x12DB7FC", VA = "0x12DB7FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600285B")]
		[Address(RVA = "0x12DB9E4", Offset = "0x12DB9E4", VA = "0x12DB9E4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600285C")]
		[Address(RVA = "0x12DB828", Offset = "0x12DB828", VA = "0x12DB828")]
		private void DoGetFsmVector2()
		{
		}

		[Token(Token = "0x600285D")]
		[Address(RVA = "0x12DB9E8", Offset = "0x12DB9E8", VA = "0x12DB9E8")]
		public GetFsmVector2()
		{
		}
	}
	[Token(Token = "0x200080B")]
	[Tooltip("Get the value of a Vector3 Variable from another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetFsmVector3 : FsmStateAction
	{
		[Token(Token = "0x40025CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40025D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x40025D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmVector3)]
		[Tooltip("The name of the FSM variable to get.")]
		public FsmString variableName;

		[Token(Token = "0x40025D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the value in a Vector3 variable in this FSM.")]
		[RequiredField]
		public FsmVector3 storeValue;

		[Token(Token = "0x40025D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x40025D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x40025D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x40025D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600285E")]
		[Address(RVA = "0x12DB9F0", Offset = "0x12DB9F0", VA = "0x12DB9F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600285F")]
		[Address(RVA = "0x12DBA68", Offset = "0x12DBA68", VA = "0x12DBA68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002860")]
		[Address(RVA = "0x12DBC58", Offset = "0x12DBC58", VA = "0x12DBC58", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002861")]
		[Address(RVA = "0x12DBA94", Offset = "0x12DBA94", VA = "0x12DBA94")]
		private void DoGetFsmVector3()
		{
		}

		[Token(Token = "0x6002862")]
		[Address(RVA = "0x12DBC5C", Offset = "0x12DBC5C", VA = "0x12DBC5C")]
		public GetFsmVector3()
		{
		}
	}
	[Token(Token = "0x200080C")]
	[Tooltip("Gets the event that caused the transition to the current state, and stores it in a String Variable.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class GetLastEvent : FsmStateAction
	{
		[Token(Token = "0x40025D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name of the last event in a String Variable.")]
		public FsmString storeEvent;

		[Token(Token = "0x6002863")]
		[Address(RVA = "0x12DBC64", Offset = "0x12DBC64", VA = "0x12DBC64", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002864")]
		[Address(RVA = "0x12DBC70", Offset = "0x12DBC70", VA = "0x12DBC70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002865")]
		[Address(RVA = "0x12DBCF4", Offset = "0x12DBCF4", VA = "0x12DBCF4")]
		public GetLastEvent()
		{
		}
	}
	[Token(Token = "0x200080D")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Gets the name of the previously active state and stores it in a String Variable.")]
	public class GetPreviousStateName : FsmStateAction
	{
		[Token(Token = "0x40025D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the name in a String Variable.")]
		public FsmString storeName;

		[Token(Token = "0x6002866")]
		[Address(RVA = "0x12DBCFC", Offset = "0x12DBCFC", VA = "0x12DBCFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002867")]
		[Address(RVA = "0x12DBD08", Offset = "0x12DBD08", VA = "0x12DBD08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002868")]
		[Address(RVA = "0x12DBD50", Offset = "0x12DBD50", VA = "0x12DBD50")]
		public GetPreviousStateName()
		{
		}
	}
	[Token(Token = "0x200080E")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Immediately return to the previously active state.")]
	public class GotoPreviousState : FsmStateAction
	{
		[Token(Token = "0x6002869")]
		[Address(RVA = "0x12DBD58", Offset = "0x12DBD58", VA = "0x12DBD58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600286A")]
		[Address(RVA = "0x12DBD5C", Offset = "0x12DBD5C", VA = "0x12DBD5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600286B")]
		[Address(RVA = "0x12DBDE8", Offset = "0x12DBDE8", VA = "0x12DBDE8")]
		public GotoPreviousState()
		{
		}
	}
	[Token(Token = "0x200080F")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Ignore specified events while this action is active.")]
	public class IgnoreEvents : FsmStateAction
	{
		[Serializable]
		[Token(Token = "0x2000810")]
		public enum EventType
		{
			[Token(Token = "0x40025DD")]
			mouse,
			[Token(Token = "0x40025DE")]
			application,
			[Token(Token = "0x40025DF")]
			collision,
			[Token(Token = "0x40025E0")]
			collision2d,
			[Token(Token = "0x40025E1")]
			trigger,
			[Token(Token = "0x40025E2")]
			trigger2d,
			[Token(Token = "0x40025E3")]
			UI,
			[Token(Token = "0x40025E4")]
			anyUnityEvent
		}

		[Token(Token = "0x40025D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Type of events to ignore.")]
		public EventType[] eventTypes;

		[Token(Token = "0x40025DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event names to ignore.")]
		[UIHint(UIHint.FsmEvent)]
		public FsmString[] events;

		[Token(Token = "0x40025DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ActionSection("Debug")]
		[Tooltip("Log any events blocked by this action. Helpful for debugging.")]
		public FsmBool logIgnoredEvents;

		[Token(Token = "0x600286C")]
		[Address(RVA = "0x12DBDF0", Offset = "0x12DBDF0", VA = "0x12DBDF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600286D")]
		[Address(RVA = "0x12DBE9C", Offset = "0x12DBE9C", VA = "0x12DBE9C", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x600286E")]
		[Address(RVA = "0x12DBEBC", Offset = "0x12DBEBC", VA = "0x12DBEBC", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600286F")]
		[Address(RVA = "0x12DBF70", Offset = "0x12DBF70", VA = "0x12DBF70")]
		private bool DoIgnoreEvent(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6002870")]
		[Address(RVA = "0x12DC13C", Offset = "0x12DC13C", VA = "0x12DC13C")]
		public IgnoreEvents()
		{
		}
	}
	[Token(Token = "0x2000811")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Note("Kill all queued delayed events.")]
	[Tooltip("Kill all queued delayed events. Normally delayed events are automatically killed when the active state is exited, but you can override this behaviour in FSM settings. If you choose to keep delayed events you can use this action to kill them when needed.")]
	public class KillDelayedEvents : FsmStateAction
	{
		[Token(Token = "0x6002871")]
		[Address(RVA = "0x12DC144", Offset = "0x12DC144", VA = "0x12DC144", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002872")]
		[Address(RVA = "0x12DC170", Offset = "0x12DC170", VA = "0x12DC170")]
		public KillDelayedEvents()
		{
		}
	}
	[Token(Token = "0x2000812")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends an Event in LateUpdate, after the Update loop.")]
	public class LateUpdateEvent : FsmStateAction
	{
		[Token(Token = "0x40025E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Event to send in LateUpdate.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6002873")]
		[Address(RVA = "0x12DC178", Offset = "0x12DC178", VA = "0x12DC178", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002874")]
		[Address(RVA = "0x12DC184", Offset = "0x12DC184", VA = "0x12DC184", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002875")]
		[Address(RVA = "0x12DC1A4", Offset = "0x12DC1A4", VA = "0x12DC1A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002876")]
		[Address(RVA = "0x12DC1A8", Offset = "0x12DC1A8", VA = "0x12DC1A8", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002877")]
		[Address(RVA = "0x12DC1D4", Offset = "0x12DC1D4", VA = "0x12DC1D4")]
		public LateUpdateEvent()
		{
		}
	}
	[Token(Token = "0x2000813")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends the Loop Event when the action runs. It loops the specified number of times then sends the Finish Event. ")]
	public class Loop : FsmStateAction
	{
		[Token(Token = "0x40025E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("How many times to loop.")]
		public FsmInt loops;

		[Token(Token = "0x40025E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the current loop count. Starts at 0. Useful for iterating through arrays.")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeCurrentLoop;

		[Token(Token = "0x40025E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event that starts a loop.")]
		public FsmEvent loopEvent;

		[Token(Token = "0x40025E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send when the loops have finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40025EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int loopedCount;

		[Token(Token = "0x6002878")]
		[Address(RVA = "0x12DC1DC", Offset = "0x12DC1DC", VA = "0x12DC1DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002879")]
		[Address(RVA = "0x12DC264", Offset = "0x12DC264", VA = "0x12DC264")]
		public Loop()
		{
		}
	}
	[Token(Token = "0x2000814")]
	[Note("Put this action at the end of a State to loop through all actions in a state the specified number of times.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Loops through the state the specified number of times then sends the Finish Event.")]
	public class LoopState : FsmStateAction
	{
		[Token(Token = "0x40025EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("How many times to loop through the state.")]
		public FsmInt loops;

		[Token(Token = "0x40025EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the current loop count. Starts at 0. Useful for iterating through arrays.")]
		public FsmInt storeCurrentLoop;

		[Token(Token = "0x40025ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the loops have finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40025EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int loopedCount;

		[Token(Token = "0x600287A")]
		[Address(RVA = "0x12DC26C", Offset = "0x12DC26C", VA = "0x12DC26C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600287B")]
		[Address(RVA = "0x12DC304", Offset = "0x12DC304", VA = "0x12DC304")]
		public LoopState()
		{
		}
	}
	[Token(Token = "0x2000815")]
	[Tooltip("Sends an Event in the next frame. Useful if you want to loop states every frame.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class NextFrameEvent : FsmStateAction
	{
		[Token(Token = "0x40025EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Event to send.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x600287C")]
		[Address(RVA = "0x12DC30C", Offset = "0x12DC30C", VA = "0x12DC30C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600287D")]
		[Address(RVA = "0x12DC318", Offset = "0x12DC318", VA = "0x12DC318", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600287E")]
		[Address(RVA = "0x12DC31C", Offset = "0x12DC31C", VA = "0x12DC31C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600287F")]
		[Address(RVA = "0x12DC348", Offset = "0x12DC348", VA = "0x12DC348")]
		public NextFrameEvent()
		{
		}
	}
	[Token(Token = "0x2000816")]
	[Tooltip("Sends a Random State Event after an optional delay. Use this to transition to a random state connected to the current state.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class RandomEvent : FsmStateAction
	{
		[Token(Token = "0x40025F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Delay before sending the event (seconds).")]
		public FsmFloat delay;

		[Token(Token = "0x40025F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Don't repeat the same event twice in a row.")]
		public FsmBool noRepeat;

		[Token(Token = "0x40025F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x40025F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int randomEventIndex;

		[Token(Token = "0x40025F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int lastEventIndex;

		[Token(Token = "0x6002880")]
		[Address(RVA = "0x12DC350", Offset = "0x12DC350", VA = "0x12DC350", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002881")]
		[Address(RVA = "0x12DC384", Offset = "0x12DC384", VA = "0x12DC384", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002882")]
		[Address(RVA = "0x12DC534", Offset = "0x12DC534", VA = "0x12DC534", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002883")]
		[Address(RVA = "0x12DC47C", Offset = "0x12DC47C", VA = "0x12DC47C")]
		private FsmEvent GetRandomEvent()
		{
			return null;
		}

		[Token(Token = "0x6002884")]
		[Address(RVA = "0x12DC564", Offset = "0x12DC564", VA = "0x12DC564")]
		public RandomEvent()
		{
		}
	}
	[Token(Token = "0x2000817")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Creates an FSM at runtime from a saved {{Template}}. The FSM is only active while the state is active. This lets you nest FSMs inside states.\nThis is a very powerful action! It allows you to create a library of FSM Templates that can be re-used in your project. You can edit the template in one place and the changes are reflected everywhere.\nNOTE: You can also specify a template in the {{FSM Inspector}}.")]
	public class RunFSM : RunFSMAction
	{
		[Token(Token = "0x40025F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Template to use. You can drag and drop, use the Unity object browser, or the categorized popup browser to select a template.")]
		public FsmTemplateControl fsmTemplateControl;

		[Token(Token = "0x40025F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the FSM has finished (usually because it ran a {{Finish FSM}} action).")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40025F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ActionSection("")]
		[Tooltip("Repeat every frame. Waits for the sub Fsm to finish before calling it again.")]
		public bool everyFrame;

		[Token(Token = "0x40025F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool restart;

		[Token(Token = "0x6002885")]
		[Address(RVA = "0x12DC574", Offset = "0x12DC574", VA = "0x12DC574", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002886")]
		[Address(RVA = "0x12DC5F8", Offset = "0x12DC5F8", VA = "0x12DC5F8", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6002887")]
		[Address(RVA = "0x12DC6D0", Offset = "0x12DC6D0", VA = "0x12DC6D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002888")]
		[Address(RVA = "0x12DC84C", Offset = "0x12DC84C", VA = "0x12DC84C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002889")]
		[Address(RVA = "0x12DC944", Offset = "0x12DC944", VA = "0x12DC944")]
		private void OnOutputEvent(FsmEvent fsmEvent)
		{
		}

		[Token(Token = "0x600288A")]
		[Address(RVA = "0x12DC9AC", Offset = "0x12DC9AC", VA = "0x12DC9AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600288B")]
		[Address(RVA = "0x12DCA2C", Offset = "0x12DCA2C", VA = "0x12DCA2C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600288C")]
		[Address(RVA = "0x12DCA84", Offset = "0x12DCA84", VA = "0x12DCA84", Slot = "62")]
		protected override void CheckIfFinished()
		{
		}

		[Token(Token = "0x600288D")]
		[Address(RVA = "0x12DCAEC", Offset = "0x12DCAEC", VA = "0x12DCAEC")]
		public RunFSM()
		{
		}
	}
	[Token(Token = "0x2000818")]
	[Tooltip("Base class for actions that want to run a sub FSM.")]
	public abstract class RunFSMAction : FsmStateAction
	{
		[Token(Token = "0x40025F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Fsm runFsm;

		[Token(Token = "0x600288E")]
		[Address(RVA = "0x12DCB6C", Offset = "0x12DCB6C", VA = "0x12DCB6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600288F")]
		[Address(RVA = "0x12DCB78", Offset = "0x12DCB78", VA = "0x12DCB78", Slot = "31")]
		public override bool Event(FsmEvent fsmEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6002890")]
		[Address(RVA = "0x12DCBB0", Offset = "0x12DCBB0", VA = "0x12DCBB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002891")]
		[Address(RVA = "0x12DCC0C", Offset = "0x12DCC0C", VA = "0x12DCC0C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002892")]
		[Address(RVA = "0x12DCC4C", Offset = "0x12DCC4C", VA = "0x12DCC4C", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002893")]
		[Address(RVA = "0x12DCC8C", Offset = "0x12DCC8C", VA = "0x12DCC8C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002894")]
		[Address(RVA = "0x12DCCCC", Offset = "0x12DCCCC", VA = "0x12DCCCC", Slot = "46")]
		public override void DoTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002895")]
		[Address(RVA = "0x12DCCF8", Offset = "0x12DCCF8", VA = "0x12DCCF8", Slot = "47")]
		public override void DoTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6002896")]
		[Address(RVA = "0x12DCD24", Offset = "0x12DCD24", VA = "0x12DCD24", Slot = "48")]
		public override void DoTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002897")]
		[Address(RVA = "0x12DCD50", Offset = "0x12DCD50", VA = "0x12DCD50", Slot = "43")]
		public override void DoCollisionEnter(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6002898")]
		[Address(RVA = "0x12DCD7C", Offset = "0x12DCD7C", VA = "0x12DCD7C", Slot = "44")]
		public override void DoCollisionStay(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x6002899")]
		[Address(RVA = "0x12DCDA8", Offset = "0x12DCDA8", VA = "0x12DCDA8", Slot = "45")]
		public override void DoCollisionExit(UnityEngine.Collision collisionInfo)
		{
		}

		[Token(Token = "0x600289A")]
		[Address(RVA = "0x12DCDD4", Offset = "0x12DCDD4", VA = "0x12DCDD4", Slot = "49")]
		public override void DoParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x600289B")]
		[Address(RVA = "0x12DCE00", Offset = "0x12DCE00", VA = "0x12DCE00", Slot = "56")]
		public override void DoControllerColliderHit(ControllerColliderHit collisionInfo)
		{
		}

		[Token(Token = "0x600289C")]
		[Address(RVA = "0x12DCE2C", Offset = "0x12DCE2C", VA = "0x12DCE2C", Slot = "53")]
		public override void DoTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x600289D")]
		[Address(RVA = "0x12DCE58", Offset = "0x12DCE58", VA = "0x12DCE58", Slot = "54")]
		public override void DoTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x600289E")]
		[Address(RVA = "0x12DCE84", Offset = "0x12DCE84", VA = "0x12DCE84", Slot = "55")]
		public override void DoTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x600289F")]
		[Address(RVA = "0x12DCEB0", Offset = "0x12DCEB0", VA = "0x12DCEB0", Slot = "50")]
		public override void DoCollisionEnter2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x60028A0")]
		[Address(RVA = "0x12DCEDC", Offset = "0x12DCEDC", VA = "0x12DCEDC", Slot = "51")]
		public override void DoCollisionStay2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x60028A1")]
		[Address(RVA = "0x12DCF08", Offset = "0x12DCF08", VA = "0x12DCF08", Slot = "52")]
		public override void DoCollisionExit2D(UnityEngine.Collision2D collisionInfo)
		{
		}

		[Token(Token = "0x60028A2")]
		[Address(RVA = "0x12DCF34", Offset = "0x12DCF34", VA = "0x12DCF34", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x60028A3")]
		[Address(RVA = "0x12DCF50", Offset = "0x12DCF50", VA = "0x12DCF50", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60028A4")]
		[Address(RVA = "0x12DCF64", Offset = "0x12DCF64", VA = "0x12DCF64", Slot = "62")]
		protected virtual void CheckIfFinished()
		{
		}

		[Token(Token = "0x60028A5")]
		[Address(RVA = "0x12DCB64", Offset = "0x12DCB64", VA = "0x12DCB64")]
		protected RunFSMAction()
		{
		}
	}
	[Token(Token = "0x2000819")]
	[ActionTarget(typeof(PlayMakerFSM), "eventTarget", false)]
	[ActionTarget(typeof(GameObject), "eventTarget", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends an Event after an optional delay. NOTE: To send events between FSMs they must be marked as Global in the {{Event Browser}}.")]
	public class SendEvent : FsmStateAction
	{
		[Token(Token = "0x40025FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40025FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The event to send. NOTE: Events must be marked Global to send between FSMs.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40025FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Optional delay in seconds.")]
		public FsmFloat delay;

		[Token(Token = "0x40025FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Rarely needed, but can be useful when sending events to other FSMs.")]
		public bool everyFrame;

		[Token(Token = "0x40025FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x60028A6")]
		[Address(RVA = "0x12DCF80", Offset = "0x12DCF80", VA = "0x12DCF80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028A7")]
		[Address(RVA = "0x12DCFC0", Offset = "0x12DCFC0", VA = "0x12DCFC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028A8")]
		[Address(RVA = "0x12DD088", Offset = "0x12DD088", VA = "0x12DD088", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028A9")]
		[Address(RVA = "0x12DD0DC", Offset = "0x12DD0DC", VA = "0x12DD0DC")]
		public SendEvent()
		{
		}
	}
	[Token(Token = "0x200081A")]
	[Tooltip("Sends an Event by name after an optional delay. NOTE: Use this over Send Event if you store events as string variables.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SendEventByName : FsmStateAction
	{
		[Token(Token = "0x40025FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The event to send. NOTE: Events must be marked Global to send between FSMs.")]
		[RequiredField]
		public FsmString sendEvent;

		[Token(Token = "0x4002601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HasFloatSlider(0f, 10f)]
		[Tooltip("Optional delay in seconds.")]
		public FsmFloat delay;

		[Token(Token = "0x4002602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Rarely needed, but can be useful when sending events to other FSMs.")]
		public bool everyFrame;

		[Token(Token = "0x4002603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x60028AA")]
		[Address(RVA = "0x12DD0E4", Offset = "0x12DD0E4", VA = "0x12DD0E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028AB")]
		[Address(RVA = "0x12DD124", Offset = "0x12DD124", VA = "0x12DD124", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028AC")]
		[Address(RVA = "0x12DD260", Offset = "0x12DD260", VA = "0x12DD260", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028AD")]
		[Address(RVA = "0x12DD2E0", Offset = "0x12DD2E0", VA = "0x12DD2E0")]
		public SendEventByName()
		{
		}
	}
	[Token(Token = "0x200081B")]
	[Tooltip("Sends an Event to another Fsm after an optional delay. Specify an Fsm Name or use the first Fsm on the object.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Obsolete("This action is obsolete; use Send Event with Event Target instead.")]
	public class SendEventToFsm : FsmStateAction
	{
		[Token(Token = "0x4002604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object that owns the other FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The Event to send.")]
		[UIHint(UIHint.FsmEvent)]
		[RequiredField]
		public FsmString sendEvent;

		[Token(Token = "0x4002607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional delay in seconds.")]
		[HasFloatSlider(0f, 10f)]
		public FsmFloat delay;

		[Token(Token = "0x4002608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool requireReceiver;

		[Token(Token = "0x4002609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x400260A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x60028AE")]
		[Address(RVA = "0x12DD2E8", Offset = "0x12DD2E8", VA = "0x12DD2E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028AF")]
		[Address(RVA = "0x12DD338", Offset = "0x12DD338", VA = "0x12DD338", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028B0")]
		[Address(RVA = "0x12DD5C4", Offset = "0x12DD5C4", VA = "0x12DD5C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028B1")]
		[Address(RVA = "0x12DD5F4", Offset = "0x12DD5F4", VA = "0x12DD5F4")]
		public SendEventToFsm()
		{
		}
	}
	[Token(Token = "0x200081C")]
	[Tooltip("Sends a Random Event picked from an array of Events. Optionally set the relative weight of each event.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SendRandomEvent : FsmStateAction
	{
		[Token(Token = "0x400260B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A possible Event choice.")]
		[CompoundArray("Events", "Event", "Weight")]
		public FsmEvent[] events;

		[Token(Token = "0x400260C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this Event being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x400260D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional delay in seconds before sending the event.")]
		public FsmFloat delay;

		[Token(Token = "0x400260E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x60028B2")]
		[Address(RVA = "0x12DD5FC", Offset = "0x12DD5FC", VA = "0x12DD5FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028B3")]
		[Address(RVA = "0x12DD780", Offset = "0x12DD780", VA = "0x12DD780", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028B4")]
		[Address(RVA = "0x12DD860", Offset = "0x12DD860", VA = "0x12DD860", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028B5")]
		[Address(RVA = "0x12DD890", Offset = "0x12DD890", VA = "0x12DD890")]
		public SendRandomEvent()
		{
		}
	}
	[Token(Token = "0x200081D")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sends the next event on the state each time the state is entered.")]
	public class SequenceEvent : FsmStateAction
	{
		[Token(Token = "0x400260F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Delay before sending the event in seconds.")]
		[HasFloatSlider(0f, 10f)]
		public FsmFloat delay;

		[Token(Token = "0x4002610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Assign a variable to control reset. Set it to True to reset the sequence. Value is set to False after resetting.")]
		[UIHint(UIHint.Variable)]
		public FsmBool reset;

		[Token(Token = "0x4002611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private DelayedEvent delayedEvent;

		[Token(Token = "0x4002612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int eventIndex;

		[Token(Token = "0x60028B6")]
		[Address(RVA = "0x12DD898", Offset = "0x12DD898", VA = "0x12DD898", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028B7")]
		[Address(RVA = "0x12DD8A4", Offset = "0x12DD8A4", VA = "0x12DD8A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028B8")]
		[Address(RVA = "0x12DD9B8", Offset = "0x12DD9B8", VA = "0x12DD9B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028B9")]
		[Address(RVA = "0x12DD9E8", Offset = "0x12DD9E8", VA = "0x12DD9E8")]
		public SequenceEvent()
		{
		}
	}
	[Token(Token = "0x200081E")]
	[Tooltip("Sets Event Data before sending an event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetEventData : FsmStateAction
	{
		[Token(Token = "0x4002613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Custom Game Object data.")]
		public FsmGameObject setGameObjectData;

		[Token(Token = "0x4002614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Custom Int data.")]
		public FsmInt setIntData;

		[Token(Token = "0x4002615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Custom Float data.")]
		public FsmFloat setFloatData;

		[Token(Token = "0x4002616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Custom String data.")]
		public FsmString setStringData;

		[Token(Token = "0x4002617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Custom Bool data.")]
		public FsmBool setBoolData;

		[Token(Token = "0x4002618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Custom Vector2 data.")]
		public FsmVector2 setVector2Data;

		[Token(Token = "0x4002619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Custom Vector3 data.")]
		public FsmVector3 setVector3Data;

		[Token(Token = "0x400261A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Custom Rect data.")]
		public FsmRect setRectData;

		[Token(Token = "0x400261B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Custom Quaternion data.")]
		public FsmQuaternion setQuaternionData;

		[Token(Token = "0x400261C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Custom Color data.")]
		public FsmColor setColorData;

		[Token(Token = "0x400261D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Custom Material data.")]
		public FsmMaterial setMaterialData;

		[Token(Token = "0x400261E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Custom Texture data.")]
		public FsmTexture setTextureData;

		[Token(Token = "0x400261F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Custom Object data.")]
		public FsmObject setObjectData;

		[Token(Token = "0x4002620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool everyFrame;

		[Token(Token = "0x60028BA")]
		[Address(RVA = "0x12DD9F0", Offset = "0x12DD9F0", VA = "0x12DD9F0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028BB")]
		[Address(RVA = "0x12DDD88", Offset = "0x12DDD88", VA = "0x12DDD88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028BC")]
		[Address(RVA = "0x12DE000", Offset = "0x12DE000", VA = "0x12DE000", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028BD")]
		[Address(RVA = "0x12DDDB4", Offset = "0x12DDDB4", VA = "0x12DDDB4")]
		private void DoSetData()
		{
		}

		[Token(Token = "0x60028BE")]
		[Address(RVA = "0x12DE004", Offset = "0x12DE004", VA = "0x12DE004")]
		public SetEventData()
		{
		}
	}
	[Token(Token = "0x200081F")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sets the Float data to send with the next event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	public class SetEventFloatData : FsmStateAction
	{
		[Token(Token = "0x4002621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float value to send.")]
		public FsmFloat floatData;

		[Token(Token = "0x60028BF")]
		[Address(RVA = "0x12DE00C", Offset = "0x12DE00C", VA = "0x12DE00C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028C0")]
		[Address(RVA = "0x12DE018", Offset = "0x12DE018", VA = "0x12DE018", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028C1")]
		[Address(RVA = "0x12DE09C", Offset = "0x12DE09C", VA = "0x12DE09C")]
		public SetEventFloatData()
		{
		}
	}
	[Token(Token = "0x2000820")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sets the Int data to send with the next event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	public class SetEventIntData : FsmStateAction
	{
		[Token(Token = "0x4002622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The int value to send.")]
		public FsmInt intData;

		[Token(Token = "0x60028C2")]
		[Address(RVA = "0x12DE0A4", Offset = "0x12DE0A4", VA = "0x12DE0A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028C3")]
		[Address(RVA = "0x12DE0B0", Offset = "0x12DE0B0", VA = "0x12DE0B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028C4")]
		[Address(RVA = "0x12DE134", Offset = "0x12DE134", VA = "0x12DE134")]
		public SetEventIntData()
		{
		}
	}
	[Token(Token = "0x2000821")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sets the String data to send with the next event. Get the Event Data, along with sender information, using the {{Get Event Info}} action.")]
	public class SetEventStringData : FsmStateAction
	{
		[Token(Token = "0x4002623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The string value to send.")]
		public FsmString stringData;

		[Token(Token = "0x60028C5")]
		[Address(RVA = "0x12DE13C", Offset = "0x12DE13C", VA = "0x12DE13C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028C6")]
		[Address(RVA = "0x12DE148", Offset = "0x12DE148", VA = "0x12DE148", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028C7")]
		[Address(RVA = "0x12DE1D8", Offset = "0x12DE1D8", VA = "0x12DE1D8")]
		public SetEventStringData()
		{
		}
	}
	[Token(Token = "0x2000822")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Sets the target FSM for all subsequent events sent by this state. The default 'Self' sends events to this FSM.")]
	public class SetEventTarget : FsmStateAction
	{
		[Token(Token = "0x4002624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set the target.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60028C8")]
		[Address(RVA = "0x12DE1E0", Offset = "0x12DE1E0", VA = "0x12DE1E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028C9")]
		[Address(RVA = "0x12DE208", Offset = "0x12DE208", VA = "0x12DE208", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60028CA")]
		[Address(RVA = "0x12DE210", Offset = "0x12DE210", VA = "0x12DE210", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028CB")]
		[Address(RVA = "0x12DE254", Offset = "0x12DE254", VA = "0x12DE254", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028CC")]
		[Address(RVA = "0x12DE278", Offset = "0x12DE278", VA = "0x12DE278")]
		public SetEventTarget()
		{
		}
	}
	[Token(Token = "0x2000823")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a Bool Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class SetFsmBool : FsmStateAction
	{
		[Token(Token = "0x4002626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmBool)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4002629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		[RequiredField]
		public FsmBool setValue;

		[Token(Token = "0x400262A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400262B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400262C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400262D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028CD")]
		[Address(RVA = "0x12DE280", Offset = "0x12DE280", VA = "0x12DE280", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028CE")]
		[Address(RVA = "0x12DE2F8", Offset = "0x12DE2F8", VA = "0x12DE2F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028CF")]
		[Address(RVA = "0x12DE324", Offset = "0x12DE324", VA = "0x12DE324")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x60028D0")]
		[Address(RVA = "0x12DE560", Offset = "0x12DE560", VA = "0x12DE560", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028D1")]
		[Address(RVA = "0x12DE564", Offset = "0x12DE564", VA = "0x12DE564")]
		public SetFsmBool()
		{
		}
	}
	[Token(Token = "0x2000824")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a Color Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class SetFsmColor : FsmStateAction
	{
		[Token(Token = "0x400262E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400262F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmColor)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4002631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		[RequiredField]
		public FsmColor setValue;

		[Token(Token = "0x4002632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028D2")]
		[Address(RVA = "0x12DE56C", Offset = "0x12DE56C", VA = "0x12DE56C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028D3")]
		[Address(RVA = "0x12DE5E4", Offset = "0x12DE5E4", VA = "0x12DE5E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028D4")]
		[Address(RVA = "0x12DE610", Offset = "0x12DE610", VA = "0x12DE610")]
		private void DoSetFsmColor()
		{
		}

		[Token(Token = "0x60028D5")]
		[Address(RVA = "0x12DE840", Offset = "0x12DE840", VA = "0x12DE840", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028D6")]
		[Address(RVA = "0x12DE844", Offset = "0x12DE844", VA = "0x12DE844")]
		public SetFsmColor()
		{
		}
	}
	[Token(Token = "0x2000825")]
	[Tooltip("Set the value of an Enum Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmEnum : FsmStateAction
	{
		[Token(Token = "0x4002636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object.")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Enum variable name needs to match the FSM variable name on Game Object.")]
		[UIHint(UIHint.FsmEnum)]
		public FsmString variableName;

		[Token(Token = "0x4002639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the Enum Variable.")]
		[RequiredField]
		public FsmEnum setValue;

		[Token(Token = "0x400263A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400263B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400263C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400263D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028D7")]
		[Address(RVA = "0x12DE84C", Offset = "0x12DE84C", VA = "0x12DE84C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028D8")]
		[Address(RVA = "0x12DE8C4", Offset = "0x12DE8C4", VA = "0x12DE8C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028D9")]
		[Address(RVA = "0x12DE8F0", Offset = "0x12DE8F0", VA = "0x12DE8F0")]
		private void DoSetFsmEnum()
		{
		}

		[Token(Token = "0x60028DA")]
		[Address(RVA = "0x12DEB40", Offset = "0x12DEB40", VA = "0x12DEB40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028DB")]
		[Address(RVA = "0x12DEB44", Offset = "0x12DEB44", VA = "0x12DEB44")]
		public SetFsmEnum()
		{
		}
	}
	[Token(Token = "0x2000826")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a Float Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class SetFsmFloat : FsmStateAction
	{
		[Token(Token = "0x400263E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400263F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmFloat)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4002641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmFloat setValue;

		[Token(Token = "0x4002642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028DC")]
		[Address(RVA = "0x12DEB4C", Offset = "0x12DEB4C", VA = "0x12DEB4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028DD")]
		[Address(RVA = "0x12DEBC4", Offset = "0x12DEBC4", VA = "0x12DEBC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028DE")]
		[Address(RVA = "0x12DEBF0", Offset = "0x12DEBF0", VA = "0x12DEBF0")]
		private void DoSetFsmFloat()
		{
		}

		[Token(Token = "0x60028DF")]
		[Address(RVA = "0x12DEE28", Offset = "0x12DEE28", VA = "0x12DEE28", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028E0")]
		[Address(RVA = "0x12DEE2C", Offset = "0x12DEE2C", VA = "0x12DEE2C")]
		public SetFsmFloat()
		{
		}
	}
	[Token(Token = "0x2000827")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a Game Object Variable in another FSM. Accept null reference")]
	public class SetFsmGameObject : FsmStateAction
	{
		[Token(Token = "0x4002646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmGameObject)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4002649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmGameObject setValue;

		[Token(Token = "0x400264A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400264B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400264C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400264D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028E1")]
		[Address(RVA = "0x12DEE34", Offset = "0x12DEE34", VA = "0x12DEE34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028E2")]
		[Address(RVA = "0x12DEEB4", Offset = "0x12DEEB4", VA = "0x12DEEB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028E3")]
		[Address(RVA = "0x12DEEE0", Offset = "0x12DEEE0", VA = "0x12DEEE0")]
		private void DoSetFsmGameObject()
		{
		}

		[Token(Token = "0x60028E4")]
		[Address(RVA = "0x12DF110", Offset = "0x12DF110", VA = "0x12DF110", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028E5")]
		[Address(RVA = "0x12DF114", Offset = "0x12DF114", VA = "0x12DF114")]
		public SetFsmGameObject()
		{
		}
	}
	[Token(Token = "0x2000828")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of an Integer Variable in another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmInt : FsmStateAction
	{
		[Token(Token = "0x400264E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400264F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmInt)]
		public FsmString variableName;

		[Token(Token = "0x4002651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmInt setValue;

		[Token(Token = "0x4002652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028E6")]
		[Address(RVA = "0x12DF11C", Offset = "0x12DF11C", VA = "0x12DF11C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028E7")]
		[Address(RVA = "0x12DF194", Offset = "0x12DF194", VA = "0x12DF194", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028E8")]
		[Address(RVA = "0x12DF1C0", Offset = "0x12DF1C0", VA = "0x12DF1C0")]
		private void DoSetFsmInt()
		{
		}

		[Token(Token = "0x60028E9")]
		[Address(RVA = "0x12DF3F8", Offset = "0x12DF3F8", VA = "0x12DF3F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028EA")]
		[Address(RVA = "0x12DF3FC", Offset = "0x12DF3FC", VA = "0x12DF3FC")]
		public SetFsmInt()
		{
		}
	}
	[Token(Token = "0x2000829")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Material Variable in another FSM.")]
	public class SetFsmMaterial : FsmStateAction
	{
		[Token(Token = "0x4002656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmMaterial)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4002659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmMaterial setValue;

		[Token(Token = "0x400265A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400265B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400265C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400265D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028EB")]
		[Address(RVA = "0x12DF404", Offset = "0x12DF404", VA = "0x12DF404", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028EC")]
		[Address(RVA = "0x12DF4A0", Offset = "0x12DF4A0", VA = "0x12DF4A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028ED")]
		[Address(RVA = "0x12DF4CC", Offset = "0x12DF4CC", VA = "0x12DF4CC")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x60028EE")]
		[Address(RVA = "0x12DF71C", Offset = "0x12DF71C", VA = "0x12DF71C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028EF")]
		[Address(RVA = "0x12DF720", Offset = "0x12DF720", VA = "0x12DF720")]
		public SetFsmMaterial()
		{
		}
	}
	[Token(Token = "0x200082A")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of an Object Variable in another FSM.")]
	public class SetFsmObject : FsmStateAction
	{
		[Token(Token = "0x400265E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400265F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmObject)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4002661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmObject setValue;

		[Token(Token = "0x4002662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028F0")]
		[Address(RVA = "0x12DF728", Offset = "0x12DF728", VA = "0x12DF728", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028F1")]
		[Address(RVA = "0x12DF7C4", Offset = "0x12DF7C4", VA = "0x12DF7C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028F2")]
		[Address(RVA = "0x12DF7F0", Offset = "0x12DF7F0", VA = "0x12DF7F0")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x60028F3")]
		[Address(RVA = "0x12DFA40", Offset = "0x12DFA40", VA = "0x12DFA40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028F4")]
		[Address(RVA = "0x12DFA44", Offset = "0x12DFA44", VA = "0x12DFA44")]
		public SetFsmObject()
		{
		}
	}
	[Token(Token = "0x200082B")]
	[Tooltip("Set the value of a Quaternion Variable in another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class SetFsmQuaternion : FsmStateAction
	{
		[Token(Token = "0x4002666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[RequiredField]
		[UIHint(UIHint.FsmQuaternion)]
		public FsmString variableName;

		[Token(Token = "0x4002669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmQuaternion setValue;

		[Token(Token = "0x400266A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400266B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400266C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400266D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028F5")]
		[Address(RVA = "0x12DFA4C", Offset = "0x12DFA4C", VA = "0x12DFA4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028F6")]
		[Address(RVA = "0x12DFAE8", Offset = "0x12DFAE8", VA = "0x12DFAE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028F7")]
		[Address(RVA = "0x12DFB14", Offset = "0x12DFB14", VA = "0x12DFB14")]
		private void DoSetFsmQuaternion()
		{
		}

		[Token(Token = "0x60028F8")]
		[Address(RVA = "0x12DFD44", Offset = "0x12DFD44", VA = "0x12DFD44", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028F9")]
		[Address(RVA = "0x12DFD48", Offset = "0x12DFD48", VA = "0x12DFD48")]
		public SetFsmQuaternion()
		{
		}
	}
	[Token(Token = "0x200082C")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Rect Variable in another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmRect : FsmStateAction
	{
		[Token(Token = "0x400266E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400266F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmRect)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4002671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		[RequiredField]
		public FsmRect setValue;

		[Token(Token = "0x4002672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028FA")]
		[Address(RVA = "0x12DFD50", Offset = "0x12DFD50", VA = "0x12DFD50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60028FB")]
		[Address(RVA = "0x12DFDEC", Offset = "0x12DFDEC", VA = "0x12DFDEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60028FC")]
		[Address(RVA = "0x12DFE18", Offset = "0x12DFE18", VA = "0x12DFE18")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x60028FD")]
		[Address(RVA = "0x12E0048", Offset = "0x12E0048", VA = "0x12E0048", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60028FE")]
		[Address(RVA = "0x12E004C", Offset = "0x12E004C", VA = "0x12E004C")]
		public SetFsmRect()
		{
		}
	}
	[Token(Token = "0x200082D")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a String Variable in another FSM.")]
	public class SetFsmString : FsmStateAction
	{
		[Token(Token = "0x4002676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object.")]
		public FsmString fsmName;

		[Token(Token = "0x4002678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[RequiredField]
		[UIHint(UIHint.FsmString)]
		public FsmString variableName;

		[Token(Token = "0x4002679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmString setValue;

		[Token(Token = "0x400267A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400267B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400267C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400267D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x60028FF")]
		[Address(RVA = "0x12E0054", Offset = "0x12E0054", VA = "0x12E0054", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002900")]
		[Address(RVA = "0x12E00CC", Offset = "0x12E00CC", VA = "0x12E00CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002901")]
		[Address(RVA = "0x12E00F8", Offset = "0x12E00F8", VA = "0x12E00F8")]
		private void DoSetFsmString()
		{
		}

		[Token(Token = "0x6002902")]
		[Address(RVA = "0x12E0348", Offset = "0x12E0348", VA = "0x12E0348", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002903")]
		[Address(RVA = "0x12E034C", Offset = "0x12E034C", VA = "0x12E034C")]
		public SetFsmString()
		{
		}
	}
	[Token(Token = "0x200082E")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Texture Variable in another FSM.")]
	public class SetFsmTexture : FsmStateAction
	{
		[Token(Token = "0x400267E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400267F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmTexture)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4002681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public FsmTexture setValue;

		[Token(Token = "0x4002682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002904")]
		[Address(RVA = "0x12E0354", Offset = "0x12E0354", VA = "0x12E0354", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002905")]
		[Address(RVA = "0x12E03F0", Offset = "0x12E03F0", VA = "0x12E03F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002906")]
		[Address(RVA = "0x12E041C", Offset = "0x12E041C", VA = "0x12E041C")]
		private void DoSetFsmTexture()
		{
		}

		[Token(Token = "0x6002907")]
		[Address(RVA = "0x12E066C", Offset = "0x12E066C", VA = "0x12E066C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002908")]
		[Address(RVA = "0x12E0670", Offset = "0x12E0670", VA = "0x12E0670")]
		public SetFsmTexture()
		{
		}
	}
	[Token(Token = "0x200082F")]
	[ActionCategory(ActionCategory.StateMachine)]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a variable in another FSM.")]
	public class SetFsmVariable : FsmStateAction
	{
		[Token(Token = "0x4002686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the variable in the target FSM.")]
		public FsmString variableName;

		[Token(Token = "0x4002689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value.")]
		public FsmVar setValue;

		[Token(Token = "0x400268A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400268B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayMakerFSM targetFsm;

		[Token(Token = "0x400268C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private NamedVariable targetVariable;

		[Token(Token = "0x400268D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject cachedGameObject;

		[Token(Token = "0x400268E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string cachedFsmName;

		[Token(Token = "0x400268F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string cachedVariableName;

		[Token(Token = "0x6002909")]
		[Address(RVA = "0x12E0678", Offset = "0x12E0678", VA = "0x12E0678", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600290A")]
		[Address(RVA = "0x12E0728", Offset = "0x12E0728", VA = "0x12E0728", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600290B")]
		[Address(RVA = "0x12E0A40", Offset = "0x12E0A40", VA = "0x12E0A40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600290C")]
		[Address(RVA = "0x12E0754", Offset = "0x12E0754", VA = "0x12E0754")]
		private void DoSetFsmVariable()
		{
		}

		[Token(Token = "0x600290D")]
		[Address(RVA = "0x12E0A44", Offset = "0x12E0A44", VA = "0x12E0A44")]
		public SetFsmVariable()
		{
		}
	}
	[Token(Token = "0x2000830")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of a Vector2 Variable in another FSM.")]
	public class SetFsmVector2 : FsmStateAction
	{
		[Token(Token = "0x4002690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional name of FSM on Game Object")]
		[UIHint(UIHint.FsmName)]
		public FsmString fsmName;

		[Token(Token = "0x4002692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmVector2)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x4002693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmVector2 setValue;

		[Token(Token = "0x4002694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600290E")]
		[Address(RVA = "0x12E0A4C", Offset = "0x12E0A4C", VA = "0x12E0A4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600290F")]
		[Address(RVA = "0x12E0AC4", Offset = "0x12E0AC4", VA = "0x12E0AC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002910")]
		[Address(RVA = "0x12E0AF0", Offset = "0x12E0AF0", VA = "0x12E0AF0")]
		private void DoSetFsmVector2()
		{
		}

		[Token(Token = "0x6002911")]
		[Address(RVA = "0x12E0D20", Offset = "0x12E0D20", VA = "0x12E0D20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002912")]
		[Address(RVA = "0x12E0D24", Offset = "0x12E0D24", VA = "0x12E0D24")]
		public SetFsmVector2()
		{
		}
	}
	[Token(Token = "0x2000831")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	[Tooltip("Set the value of a Vector3 Variable in another FSM.")]
	[ActionCategory(ActionCategory.StateMachine)]
	public class SetFsmVector3 : FsmStateAction
	{
		[Token(Token = "0x4002698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the FSM.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x400269A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.FsmVector3)]
		[Tooltip("The name of the FSM variable.")]
		public FsmString variableName;

		[Token(Token = "0x400269B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Set the value of the variable.")]
		public FsmVector3 setValue;

		[Token(Token = "0x400269C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x400269D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x400269E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x400269F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x6002913")]
		[Address(RVA = "0x12E0D2C", Offset = "0x12E0D2C", VA = "0x12E0D2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002914")]
		[Address(RVA = "0x12E0DA4", Offset = "0x12E0DA4", VA = "0x12E0DA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002915")]
		[Address(RVA = "0x12E0DD0", Offset = "0x12E0DD0", VA = "0x12E0DD0")]
		private void DoSetFsmVector3()
		{
		}

		[Token(Token = "0x6002916")]
		[Address(RVA = "0x12E100C", Offset = "0x12E100C", VA = "0x12E100C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002917")]
		[Address(RVA = "0x12E1010", Offset = "0x12E1010", VA = "0x12E1010")]
		public SetFsmVector3()
		{
		}
	}
	[Token(Token = "0x2000832")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Builds a String from other Strings.")]
	public class BuildString : FsmStateAction
	{
		[Token(Token = "0x40026A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Array of Strings to combine.")]
		public FsmString[] stringParts;

		[Token(Token = "0x40026A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Separator to insert between each String. E.g. space character.")]
		public FsmString separator;

		[Token(Token = "0x40026A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Add Separator to end of built string.")]
		public FsmBool addToEnd;

		[Token(Token = "0x40026A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the final String in a variable.")]
		[RequiredField]
		public FsmString storeResult;

		[Token(Token = "0x40026A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x40026A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string result;

		[Token(Token = "0x6002918")]
		[Address(RVA = "0x12E1018", Offset = "0x12E1018", VA = "0x12E1018", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002919")]
		[Address(RVA = "0x12E10B4", Offset = "0x12E10B4", VA = "0x12E10B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600291A")]
		[Address(RVA = "0x12E12C8", Offset = "0x12E12C8", VA = "0x12E12C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600291B")]
		[Address(RVA = "0x12E10E0", Offset = "0x12E10E0", VA = "0x12E10E0")]
		private void DoBuildString()
		{
		}

		[Token(Token = "0x600291C")]
		[Address(RVA = "0x12E12CC", Offset = "0x12E12CC", VA = "0x12E12CC")]
		public BuildString()
		{
		}
	}
	[Token(Token = "0x2000833")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Replaces each format item in a specified string with the text equivalent of variable's value. Stores the result in a string variable.\nSee C# <a href=\"http://msdn.microsoft.com/en-us/library/system.string.format(v=vs.90).aspx\" rel=\"nofollow\">string.Format documentation</a> for usage.")]
	public class FormatString : FsmStateAction
	{
		[Token(Token = "0x40026A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("E.g. Hello {0} and {1}\nWith 2 variables that replace {0} and {1}\nSee C# string.Format docs.")]
		[RequiredField]
		public FsmString format;

		[Token(Token = "0x40026A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Variables to use for each formatting item.")]
		public FsmVar[] variables;

		[Token(Token = "0x40026A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the formatted result in a string variable.")]
		public FsmString storeResult;

		[Token(Token = "0x40026A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame. Useful if the variables are changing.")]
		public bool everyFrame;

		[Token(Token = "0x40026AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private object[] objectArray;

		[Token(Token = "0x600291D")]
		[Address(RVA = "0x12E12D4", Offset = "0x12E12D4", VA = "0x12E12D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600291E")]
		[Address(RVA = "0x12E1314", Offset = "0x12E1314", VA = "0x12E1314", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600291F")]
		[Address(RVA = "0x12E1568", Offset = "0x12E1568", VA = "0x12E1568", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002920")]
		[Address(RVA = "0x12E13A0", Offset = "0x12E13A0", VA = "0x12E13A0")]
		private void DoFormatString()
		{
		}

		[Token(Token = "0x6002921")]
		[Address(RVA = "0x12E156C", Offset = "0x12E156C", VA = "0x12E156C")]
		public FormatString()
		{
		}
	}
	[Token(Token = "0x2000834")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Gets the Left n characters from a String Variable.")]
	public class GetStringLeft : FsmStateAction
	{
		[Token(Token = "0x40026AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The string to get characters from.")]
		public FsmString stringVariable;

		[Token(Token = "0x40026AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Number of characters to get.")]
		public FsmInt charCount;

		[Token(Token = "0x40026AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a string variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x40026AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002922")]
		[Address(RVA = "0x12E1574", Offset = "0x12E1574", VA = "0x12E1574", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002923")]
		[Address(RVA = "0x12E15C0", Offset = "0x12E15C0", VA = "0x12E15C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002924")]
		[Address(RVA = "0x12E16BC", Offset = "0x12E16BC", VA = "0x12E16BC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002925")]
		[Address(RVA = "0x12E15EC", Offset = "0x12E15EC", VA = "0x12E15EC")]
		private void DoGetStringLeft()
		{
		}

		[Token(Token = "0x6002926")]
		[Address(RVA = "0x12E16C0", Offset = "0x12E16C0", VA = "0x12E16C0")]
		public GetStringLeft()
		{
		}
	}
	[Token(Token = "0x2000835")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Gets the Length of a String.")]
	public class GetStringLength : FsmStateAction
	{
		[Token(Token = "0x40026AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The string to measure.")]
		public FsmString stringVariable;

		[Token(Token = "0x40026B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in an Int Variable.")]
		[RequiredField]
		public FsmInt storeResult;

		[Token(Token = "0x40026B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002927")]
		[Address(RVA = "0x12E16C8", Offset = "0x12E16C8", VA = "0x12E16C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002928")]
		[Address(RVA = "0x12E16F8", Offset = "0x12E16F8", VA = "0x12E16F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002929")]
		[Address(RVA = "0x12E175C", Offset = "0x12E175C", VA = "0x12E175C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600292A")]
		[Address(RVA = "0x12E1724", Offset = "0x12E1724", VA = "0x12E1724")]
		private void DoGetStringLength()
		{
		}

		[Token(Token = "0x600292B")]
		[Address(RVA = "0x12E1760", Offset = "0x12E1760", VA = "0x12E1760")]
		public GetStringLength()
		{
		}
	}
	[Token(Token = "0x2000836")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Gets the Right n characters from a String.")]
	public class GetStringRight : FsmStateAction
	{
		[Token(Token = "0x40026B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The string to get characters from.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x40026B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Number of characters to get.")]
		public FsmInt charCount;

		[Token(Token = "0x40026B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the result in a string variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x40026B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600292C")]
		[Address(RVA = "0x12E1768", Offset = "0x12E1768", VA = "0x12E1768", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600292D")]
		[Address(RVA = "0x12E17B4", Offset = "0x12E17B4", VA = "0x12E17B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600292E")]
		[Address(RVA = "0x12E1894", Offset = "0x12E1894", VA = "0x12E1894", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600292F")]
		[Address(RVA = "0x12E17E0", Offset = "0x12E17E0", VA = "0x12E17E0")]
		private void DoGetStringRight()
		{
		}

		[Token(Token = "0x6002930")]
		[Address(RVA = "0x12E1898", Offset = "0x12E1898", VA = "0x12E1898")]
		public GetStringRight()
		{
		}
	}
	[Token(Token = "0x2000837")]
	[Tooltip("Gets a sub-string from a String Variable.")]
	[ActionCategory(ActionCategory.String)]
	public class GetSubstring : FsmStateAction
	{
		[Token(Token = "0x40026B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The string to get characters from.")]
		public FsmString stringVariable;

		[Token(Token = "0x40026B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The start of the substring (0 = first character).")]
		[RequiredField]
		public FsmInt startIndex;

		[Token(Token = "0x40026B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The number of characters to get.")]
		[RequiredField]
		public FsmInt length;

		[Token(Token = "0x40026B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the result in a string variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString storeResult;

		[Token(Token = "0x40026BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002931")]
		[Address(RVA = "0x12E18A0", Offset = "0x12E18A0", VA = "0x12E18A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002932")]
		[Address(RVA = "0x12E1908", Offset = "0x12E1908", VA = "0x12E1908", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002933")]
		[Address(RVA = "0x12E19C8", Offset = "0x12E19C8", VA = "0x12E19C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002934")]
		[Address(RVA = "0x12E1934", Offset = "0x12E1934", VA = "0x12E1934")]
		private void DoGetSubstring()
		{
		}

		[Token(Token = "0x6002935")]
		[Address(RVA = "0x12E19CC", Offset = "0x12E19CC", VA = "0x12E19CC")]
		public GetSubstring()
		{
		}
	}
	[Token(Token = "0x2000838")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Select a Random String from an array of Strings.")]
	public class SelectRandomString : FsmStateAction
	{
		[Token(Token = "0x40026BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("A possible String choice.")]
		[CompoundArray("Strings", "String", "Weight")]
		public FsmString[] strings;

		[Token(Token = "0x40026BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The relative probability of this string being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat[] weights;

		[Token(Token = "0x40026BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the chosen String in a String Variable.")]
		public FsmString storeString;

		[Token(Token = "0x6002936")]
		[Address(RVA = "0x12E19D4", Offset = "0x12E19D4", VA = "0x12E19D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002937")]
		[Address(RVA = "0x12E1B58", Offset = "0x12E1B58", VA = "0x12E1B58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002938")]
		[Address(RVA = "0x12E1B74", Offset = "0x12E1B74", VA = "0x12E1B74")]
		private void DoSelectRandomString()
		{
		}

		[Token(Token = "0x6002939")]
		[Address(RVA = "0x12E1BFC", Offset = "0x12E1BFC", VA = "0x12E1BFC")]
		public SelectRandomString()
		{
		}
	}
	[Token(Token = "0x2000839")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Sets the value of a String Variable.")]
	public class SetStringValue : FsmStateAction
	{
		[Token(Token = "0x40026BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The String Variable to set.")]
		[RequiredField]
		public FsmString stringVariable;

		[Token(Token = "0x40026BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The value to set the variable to.")]
		[UIHint(UIHint.TextArea)]
		public FsmString stringValue;

		[Token(Token = "0x40026C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600293A")]
		[Address(RVA = "0x12E1C04", Offset = "0x12E1C04", VA = "0x12E1C04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600293B")]
		[Address(RVA = "0x12E1C34", Offset = "0x12E1C34", VA = "0x12E1C34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600293C")]
		[Address(RVA = "0x12E1C98", Offset = "0x12E1C98", VA = "0x12E1C98", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600293D")]
		[Address(RVA = "0x12E1C60", Offset = "0x12E1C60", VA = "0x12E1C60")]
		private void DoSetStringValue()
		{
		}

		[Token(Token = "0x600293E")]
		[Address(RVA = "0x12E1C9C", Offset = "0x12E1C9C", VA = "0x12E1C9C")]
		public SetStringValue()
		{
		}
	}
	[Token(Token = "0x200083A")]
	[Tooltip("Adds a String to the end of a String.")]
	[ActionCategory(ActionCategory.String)]
	public class StringAppend : FsmStateAction
	{
		[Token(Token = "0x40026C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Strings to add to.")]
		public FsmString stringVariable;

		[Token(Token = "0x40026C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("String to append")]
		public FsmString appendString;

		[Token(Token = "0x600293F")]
		[Address(RVA = "0x12E1CA4", Offset = "0x12E1CA4", VA = "0x12E1CA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002940")]
		[Address(RVA = "0x12E1CCC", Offset = "0x12E1CCC", VA = "0x12E1CCC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002941")]
		[Address(RVA = "0x12E1D3C", Offset = "0x12E1D3C", VA = "0x12E1D3C")]
		public StringAppend()
		{
		}
	}
	[Token(Token = "0x200083B")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Join an array of strings into a single string.")]
	public class StringJoin : FsmStateAction
	{
		[Token(Token = "0x40026C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ArrayEditor(VariableType.String, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		[Tooltip("Array of string to join into a single string.")]
		public FsmArray stringArray;

		[Token(Token = "0x40026C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Separator to add between each string.")]
		public FsmString separator;

		[Token(Token = "0x40026C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the joined string in string variable.")]
		[UIHint(UIHint.Variable)]
		public FsmString storeResult;

		[Token(Token = "0x6002942")]
		[Address(RVA = "0x12E1D44", Offset = "0x12E1D44", VA = "0x12E1D44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002943")]
		[Address(RVA = "0x12E1DCC", Offset = "0x12E1DCC", VA = "0x12E1DCC")]
		public StringJoin()
		{
		}
	}
	[Token(Token = "0x200083C")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Replace a substring with a new String.")]
	public class StringReplace : FsmStateAction
	{
		[Token(Token = "0x40026C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The String Variable to examine.")]
		[UIHint(UIHint.Variable)]
		public FsmString stringVariable;

		[Token(Token = "0x40026C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Replace this string...")]
		public FsmString replace;

		[Token(Token = "0x40026C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("... with this string.")]
		public FsmString with;

		[Token(Token = "0x40026C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a string variable.")]
		public FsmString storeResult;

		[Token(Token = "0x40026CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002944")]
		[Address(RVA = "0x12E1DD4", Offset = "0x12E1DD4", VA = "0x12E1DD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002945")]
		[Address(RVA = "0x12E1E70", Offset = "0x12E1E70", VA = "0x12E1E70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002946")]
		[Address(RVA = "0x12E1F30", Offset = "0x12E1F30", VA = "0x12E1F30", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002947")]
		[Address(RVA = "0x12E1E9C", Offset = "0x12E1E9C", VA = "0x12E1E9C")]
		private void DoReplace()
		{
		}

		[Token(Token = "0x6002948")]
		[Address(RVA = "0x12E1F34", Offset = "0x12E1F34", VA = "0x12E1F34")]
		public StringReplace()
		{
		}
	}
	[Token(Token = "0x200083D")]
	[ActionCategory(ActionCategory.String)]
	[Tooltip("Splits a string into substrings using separator characters.")]
	public class StringSplit : FsmStateAction
	{
		[Token(Token = "0x40026CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("String to split.")]
		public FsmString stringToSplit;

		[Token(Token = "0x40026CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Characters used to split the string.\nUse '\\n' for newline\nUse '\\t' for tab")]
		public FsmString separators;

		[Token(Token = "0x40026CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Remove all leading and trailing white-space characters from each separated string.")]
		public FsmBool trimStrings;

		[Token(Token = "0x40026CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional characters used to trim each separated string.")]
		public FsmString trimChars;

		[Token(Token = "0x40026CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ArrayEditor(VariableType.String, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the split strings in a String Array.")]
		public FsmArray stringArray;

		[Token(Token = "0x6002949")]
		[Address(RVA = "0x12E1F3C", Offset = "0x12E1F3C", VA = "0x12E1F3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600294A")]
		[Address(RVA = "0x12E1FA0", Offset = "0x12E1FA0", VA = "0x12E1FA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600294B")]
		[Address(RVA = "0x12E21A0", Offset = "0x12E21A0", VA = "0x12E21A0")]
		public StringSplit()
		{
		}
	}
	[Token(Token = "0x200083E")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Gets system date and time info and stores it in a string variable. An optional format string gives you a lot of control over the formatting (see online docs for format syntax).")]
	public class GetSystemDateTime : FsmStateAction
	{
		[Token(Token = "0x40026D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store System DateTime as a string.")]
		[UIHint(UIHint.Variable)]
		public FsmString storeString;

		[Token(Token = "0x40026D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional format string. E.g., MM/dd/yyyy HH:mm")]
		public FsmString format;

		[Token(Token = "0x40026D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600294C")]
		[Address(RVA = "0x12E21A8", Offset = "0x12E21A8", VA = "0x12E21A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600294D")]
		[Address(RVA = "0x12E2210", Offset = "0x12E2210", VA = "0x12E2210", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600294E")]
		[Address(RVA = "0x12E22C8", Offset = "0x12E22C8", VA = "0x12E22C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600294F")]
		[Address(RVA = "0x12E236C", Offset = "0x12E236C", VA = "0x12E236C")]
		public GetSystemDateTime()
		{
		}
	}
	[Token(Token = "0x200083F")]
	[Tooltip("Gets various useful Time measurements.")]
	[ActionCategory(ActionCategory.Time)]
	public class GetTimeInfo : FsmStateAction
	{
		[Token(Token = "0x2000840")]
		public enum TimeInfo
		{
			[Token(Token = "0x40026D7")]
			DeltaTime,
			[Token(Token = "0x40026D8")]
			TimeScale,
			[Token(Token = "0x40026D9")]
			SmoothDeltaTime,
			[Token(Token = "0x40026DA")]
			TimeInCurrentState,
			[Token(Token = "0x40026DB")]
			TimeSinceStartup,
			[Token(Token = "0x40026DC")]
			TimeSinceLevelLoad,
			[Token(Token = "0x40026DD")]
			RealTimeSinceStartup,
			[Token(Token = "0x40026DE")]
			RealTimeInCurrentState
		}

		[Token(Token = "0x40026D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info to get.")]
		public TimeInfo getInfo;

		[Token(Token = "0x40026D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Store the time info in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeValue;

		[Token(Token = "0x40026D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002950")]
		[Address(RVA = "0x12E2374", Offset = "0x12E2374", VA = "0x12E2374", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002951")]
		[Address(RVA = "0x12E23A0", Offset = "0x12E23A0", VA = "0x12E23A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002952")]
		[Address(RVA = "0x12E24D4", Offset = "0x12E24D4", VA = "0x12E24D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002953")]
		[Address(RVA = "0x12E23CC", Offset = "0x12E23CC", VA = "0x12E23CC")]
		private void DoGetTimeInfo()
		{
		}

		[Token(Token = "0x6002954")]
		[Address(RVA = "0x12E24D8", Offset = "0x12E24D8", VA = "0x12E24D8")]
		public GetTimeInfo()
		{
		}
	}
	[Token(Token = "0x2000841")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Multiplies a Float by Time.deltaTime to use in frame-rate independent operations. E.g., 10 becomes 10 units per second.")]
	public class PerSecond : FsmStateAction
	{
		[Token(Token = "0x40026DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The float value to multiply be Time.deltaTime.")]
		[RequiredField]
		public FsmFloat floatValue;

		[Token(Token = "0x40026E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the result in a float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeResult;

		[Token(Token = "0x40026E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Do it every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002955")]
		[Address(RVA = "0x12E24E0", Offset = "0x12E24E0", VA = "0x12E24E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002956")]
		[Address(RVA = "0x12E2510", Offset = "0x12E2510", VA = "0x12E2510", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002957")]
		[Address(RVA = "0x12E2580", Offset = "0x12E2580", VA = "0x12E2580", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002958")]
		[Address(RVA = "0x12E253C", Offset = "0x12E253C", VA = "0x12E253C")]
		private void DoPerSecond()
		{
		}

		[Token(Token = "0x6002959")]
		[Address(RVA = "0x12E2584", Offset = "0x12E2584", VA = "0x12E2584")]
		public PerSecond()
		{
		}
	}
	[Token(Token = "0x2000842")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Delays a State from finishing by a random time. NOTE: Other actions continue running during this time.\nAfter the random time the specified Finish Event or FINISHED is sent.")]
	public class RandomWait : FsmStateAction
	{
		[Token(Token = "0x40026E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Minimum amount of time to wait.")]
		public FsmFloat min;

		[Token(Token = "0x40026E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Maximum amount of time to wait.")]
		[RequiredField]
		public FsmFloat max;

		[Token(Token = "0x40026E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when timer is finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40026E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore time scale.")]
		public bool realTime;

		[Token(Token = "0x40026E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float startTime;

		[Token(Token = "0x40026E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float timer;

		[Token(Token = "0x40026E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float time;

		[Token(Token = "0x600295A")]
		[Address(RVA = "0x12E258C", Offset = "0x12E258C", VA = "0x12E258C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600295B")]
		[Address(RVA = "0x12E25E8", Offset = "0x12E25E8", VA = "0x12E25E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600295C")]
		[Address(RVA = "0x12E267C", Offset = "0x12E267C", VA = "0x12E267C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600295D")]
		[Address(RVA = "0x12E2700", Offset = "0x12E2700", VA = "0x12E2700")]
		public RandomWait()
		{
		}
	}
	[Token(Token = "0x2000843")]
	[Tooltip("Scales time: 1 = normal, 0.5 = half speed, 2 = double speed.")]
	[ActionCategory(ActionCategory.Time)]
	public class ScaleTime : FsmStateAction
	{
		[Token(Token = "0x40026E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Scales time: 1 = normal, 0.5 = half speed, 2 = double speed.")]
		[HasFloatSlider(0f, 4f)]
		[RequiredField]
		public FsmFloat timeScale;

		[Token(Token = "0x40026EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Adjust the fixed physics time step to match the time scale.")]
		public FsmBool adjustFixedDeltaTime;

		[Token(Token = "0x40026EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame. Useful when animating the value.")]
		public bool everyFrame;

		[Token(Token = "0x600295E")]
		[Address(RVA = "0x12E2708", Offset = "0x12E2708", VA = "0x12E2708", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600295F")]
		[Address(RVA = "0x12E2754", Offset = "0x12E2754", VA = "0x12E2754", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002960")]
		[Address(RVA = "0x12E27E0", Offset = "0x12E27E0", VA = "0x12E27E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002961")]
		[Address(RVA = "0x12E2780", Offset = "0x12E2780", VA = "0x12E2780")]
		private void DoTimeScale()
		{
		}

		[Token(Token = "0x6002962")]
		[Address(RVA = "0x12E27E4", Offset = "0x12E27E4", VA = "0x12E27E4")]
		public ScaleTime()
		{
		}
	}
	[Token(Token = "0x2000844")]
	[ActionCategory(ActionCategory.Time)]
	[Tooltip("Delays a State from finishing. Optionally send an event after the specified time. NOTE: Other actions continue running and can send events before this action finishes.")]
	public class Wait : FsmStateAction
	{
		[Token(Token = "0x40026EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Time to wait in seconds.")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x40026ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send after the specified time.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40026EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Ignore TimeScale. E.g., if the game is paused using Scale Time.")]
		public bool realTime;

		[Token(Token = "0x40026EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float startTime;

		[Token(Token = "0x40026F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float timer;

		[Token(Token = "0x6002963")]
		[Address(RVA = "0x12E27EC", Offset = "0x12E27EC", VA = "0x12E27EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002964")]
		[Address(RVA = "0x12E282C", Offset = "0x12E282C", VA = "0x12E282C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002965")]
		[Address(RVA = "0x12E288C", Offset = "0x12E288C", VA = "0x12E288C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002966")]
		[Address(RVA = "0x12E291C", Offset = "0x12E291C", VA = "0x12E291C")]
		public Wait()
		{
		}
	}
	[Token(Token = "0x2000845")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Align a GameObject to the specified Direction.")]
	public class AlignToDirection : ComponentAction<Transform>
	{
		[Token(Token = "0x2000846")]
		public enum AlignAxis
		{
			[Token(Token = "0x40026F8")]
			x,
			[Token(Token = "0x40026F9")]
			y,
			[Token(Token = "0x40026FA")]
			z
		}

		[Token(Token = "0x40026F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40026F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The direction to look at. E.g. the Hit Normal from a Raycast.")]
		public FsmVector3 targetDirection;

		[Token(Token = "0x40026F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The GameObject axis to align to the direction.")]
		[RequiredField]
		[ObjectType(typeof(AlignAxis))]
		public FsmEnum alignAxis;

		[Token(Token = "0x40026F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Flip the alignment axis. So x becomes -x.")]
		public FsmBool flipAxis;

		[Token(Token = "0x40026F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every update.")]
		public bool everyFrame;

		[Token(Token = "0x40026F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[Tooltip("Perform in LateUpdate. This can help eliminate jitters in some situations.")]
		public bool lateUpdate;

		[Token(Token = "0x6002967")]
		[Address(RVA = "0x12E2924", Offset = "0x12E2924", VA = "0x12E2924", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002968")]
		[Address(RVA = "0x12E29CC", Offset = "0x12E29CC", VA = "0x12E29CC", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002969")]
		[Address(RVA = "0x12E29F0", Offset = "0x12E29F0", VA = "0x12E29F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600296A")]
		[Address(RVA = "0x12E2C6C", Offset = "0x12E2C6C", VA = "0x12E2C6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600296B")]
		[Address(RVA = "0x12E2C7C", Offset = "0x12E2C7C", VA = "0x12E2C7C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x600296C")]
		[Address(RVA = "0x12E2A1C", Offset = "0x12E2A1C", VA = "0x12E2A1C")]
		private void DoAlignToDirection()
		{
		}

		[Token(Token = "0x600296D")]
		[Address(RVA = "0x12E2C8C", Offset = "0x12E2C8C", VA = "0x12E2C8C")]
		public AlignToDirection()
		{
		}
	}
	[Token(Token = "0x2000847")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Clamps a position to min/max ranges. Set any limit to None to leave un-clamped.")]
	public class ClampPosition : ComponentAction<Transform>
	{
		[Token(Token = "0x40026FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to clamp position.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40026FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Clamp the minimum value of x.")]
		public FsmFloat minX;

		[Token(Token = "0x40026FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Clamp the maximum value of x.")]
		public FsmFloat maxX;

		[Token(Token = "0x40026FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Clamp the minimum value of y.")]
		public FsmFloat minY;

		[Token(Token = "0x40026FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Clamp the maximum value of y.")]
		public FsmFloat maxY;

		[Token(Token = "0x4002700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Clamp the minimum value of z.")]
		public FsmFloat minZ;

		[Token(Token = "0x4002701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Clamp the maximum value of z.")]
		public FsmFloat maxZ;

		[Token(Token = "0x4002702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Clamp position in local (relative to parent) or world space.")]
		public Space space;

		[Token(Token = "0x4002703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to clamp the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x600296E")]
		[Address(RVA = "0x12E2CD4", Offset = "0x12E2CD4", VA = "0x12E2CD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600296F")]
		[Address(RVA = "0x12E2E4C", Offset = "0x12E2E4C", VA = "0x12E2E4C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002970")]
		[Address(RVA = "0x12E2E7C", Offset = "0x12E2E7C", VA = "0x12E2E7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002971")]
		[Address(RVA = "0x12E30CC", Offset = "0x12E30CC", VA = "0x12E30CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002972")]
		[Address(RVA = "0x12E30DC", Offset = "0x12E30DC", VA = "0x12E30DC", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002973")]
		[Address(RVA = "0x12E2EB4", Offset = "0x12E2EB4", VA = "0x12E2EB4")]
		private void DoClampPosition()
		{
		}

		[Token(Token = "0x6002974")]
		[Address(RVA = "0x12E3118", Offset = "0x12E3118", VA = "0x12E3118")]
		public ClampPosition()
		{
		}
	}
	[Token(Token = "0x2000848")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Clamps a rotation around a local axis. Optionally define the default rotation. Clamp is done on LateUpdate")]
	public class ClampRotation : FsmStateAction
	{
		[Token(Token = "0x2000849")]
		public enum ConstraintAxis
		{
			[Token(Token = "0x4002717")]
			x,
			[Token(Token = "0x4002718")]
			y,
			[Token(Token = "0x4002719")]
			z
		}

		[Token(Token = "0x4002705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to clamp rotation.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The default rotation. If none, will use the GameObject target.")]
		public FsmVector3 defaultRotation;

		[Token(Token = "0x4002707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ObjectType(typeof(ConstraintAxis))]
		[Tooltip("The axis to constraint the rotation")]
		public FsmEnum constraintAxis;

		[Token(Token = "0x4002708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The minimum angle allowed")]
		public FsmFloat minAngle;

		[Token(Token = "0x4002709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The maximum angle allowed")]
		public FsmFloat maxAngle;

		[Token(Token = "0x400270A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x400270B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float angleFromMin;

		[Token(Token = "0x400270C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float angleFromMax;

		[Token(Token = "0x400270D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform thisTransform;

		[Token(Token = "0x400270E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 rotateAround;

		[Token(Token = "0x400270F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion minQuaternion;

		[Token(Token = "0x4002710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion maxQuaternion;

		[Token(Token = "0x4002711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float range;

		[Token(Token = "0x4002712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ConstraintAxis axis;

		[Token(Token = "0x4002713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int axisIndex;

		[Token(Token = "0x4002714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion axisRotation;

		[Token(Token = "0x4002715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 _defaultRotation;

		[Token(Token = "0x6002975")]
		[Address(RVA = "0x12E3160", Offset = "0x12E3160", VA = "0x12E3160", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002976")]
		[Address(RVA = "0x12E3238", Offset = "0x12E3238", VA = "0x12E3238", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002977")]
		[Address(RVA = "0x12E3258", Offset = "0x12E3258", VA = "0x12E3258", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002978")]
		[Address(RVA = "0x12E36C8", Offset = "0x12E36C8", VA = "0x12E36C8", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002979")]
		[Address(RVA = "0x12E36F4", Offset = "0x12E36F4", VA = "0x12E36F4")]
		private void DoClampRotation()
		{
		}

		[Token(Token = "0x600297A")]
		[Address(RVA = "0x12E3498", Offset = "0x12E3498", VA = "0x12E3498")]
		private void ComputeRange()
		{
		}

		[Token(Token = "0x600297B")]
		[Address(RVA = "0x12E3B2C", Offset = "0x12E3B2C", VA = "0x12E3B2C")]
		public ClampRotation()
		{
		}
	}
	[Token(Token = "0x200084A")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Angle between a GameObject's forward axis and a Target. The Target can be defined as a GameObject or a world Position. If you specify both, then the Position will be used as a local offset from the Target Object's position.")]
	public class GetAngleToTarget : FsmStateAction
	{
		[Token(Token = "0x400271A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object whose forward axis we measure from. If the target is dead ahead the angle will be 0.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400271B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The target object to measure the angle to. Or use target position.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x400271C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The world position to measure an angle to. If Target Object is also specified, this vector is used as an offset from that object's position.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x400271D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore height differences when calculating the angle.")]
		public FsmBool ignoreHeight;

		[Token(Token = "0x400271E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool signed;

		[Token(Token = "0x400271F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the angle in a float variable.")]
		public FsmFloat storeAngle;

		[Token(Token = "0x4002720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600297C")]
		[Address(RVA = "0x12E3B34", Offset = "0x12E3B34", VA = "0x12E3B34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600297D")]
		[Address(RVA = "0x12E3BF8", Offset = "0x12E3BF8", VA = "0x12E3BF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600297E")]
		[Address(RVA = "0x12E40B4", Offset = "0x12E40B4", VA = "0x12E40B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600297F")]
		[Address(RVA = "0x12E3C24", Offset = "0x12E3C24", VA = "0x12E3C24")]
		private void DoGetAngleToTarget()
		{
		}

		[Token(Token = "0x6002980")]
		[Address(RVA = "0x12E40B8", Offset = "0x12E40B8", VA = "0x12E40B8")]
		public GetAngleToTarget()
		{
		}
	}
	[Token(Token = "0x200084B")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Position of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable")]
	public class GetPosition : ComponentAction<Transform>
	{
		[Token(Token = "0x4002721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The game object to examine.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the position in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4002723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X coordinate in a Float Variable.")]
		public FsmFloat x;

		[Token(Token = "0x4002724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the Y coordinate in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x4002725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Store the Z coordinate in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat z;

		[Token(Token = "0x4002726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Use world or local coordinates.")]
		public Space space;

		[Token(Token = "0x4002727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002981")]
		[Address(RVA = "0x12E40C0", Offset = "0x12E40C0", VA = "0x12E40C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002982")]
		[Address(RVA = "0x12E4124", Offset = "0x12E4124", VA = "0x12E4124", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002983")]
		[Address(RVA = "0x12E4220", Offset = "0x12E4220", VA = "0x12E4220", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002984")]
		[Address(RVA = "0x12E4150", Offset = "0x12E4150", VA = "0x12E4150")]
		private void DoGetPosition()
		{
		}

		[Token(Token = "0x6002985")]
		[Address(RVA = "0x12E4224", Offset = "0x12E4224", VA = "0x12E4224")]
		public GetPosition()
		{
		}
	}
	[Token(Token = "0x200084C")]
	[Tooltip("Gets the 2D Position of a GameObject and stores it in a Vector2 Variable or each Axis in a Float Variable")]
	[ActionCategory(ActionCategory.Transform)]
	public class GetPosition2d : ComponentAction<Transform>
	{
		[Token(Token = "0x4002728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The game object to examine.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the position in a Vector2 Variable.")]
		[UIHint(UIHint.Variable)]
		[Title("Vector2")]
		public FsmVector2 vector_2d;

		[Token(Token = "0x400272A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the X coordinate in a Float Variable.")]
		public FsmFloat x;

		[Token(Token = "0x400272B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the Y coordinate in a Float Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat y;

		[Token(Token = "0x400272C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Use world or local coordinates.")]
		public Space space;

		[Token(Token = "0x400272D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002986")]
		[Address(RVA = "0x12E426C", Offset = "0x12E426C", VA = "0x12E426C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002987")]
		[Address(RVA = "0x12E42C0", Offset = "0x12E42C0", VA = "0x12E42C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002988")]
		[Address(RVA = "0x12E43AC", Offset = "0x12E43AC", VA = "0x12E43AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002989")]
		[Address(RVA = "0x12E42EC", Offset = "0x12E42EC", VA = "0x12E42EC")]
		private void DoGetPosition()
		{
		}

		[Token(Token = "0x600298A")]
		[Address(RVA = "0x12E43B0", Offset = "0x12E43B0", VA = "0x12E43B0")]
		public GetPosition2d()
		{
		}
	}
	[Token(Token = "0x200084D")]
	[Tooltip("Gets the Rotation of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable")]
	[ActionCategory(ActionCategory.Transform)]
	public class GetRotation : FsmStateAction
	{
		[Token(Token = "0x400272E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400272F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the rotation as a Quaternion.")]
		public FsmQuaternion quaternion;

		[Token(Token = "0x4002730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Title("Euler Angles")]
		[Tooltip("Get the rotation as Euler angles (rotation around each axis) and store in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4002731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the angle around the X axis.")]
		public FsmFloat xAngle;

		[Token(Token = "0x4002732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the angle around the Y axis.")]
		public FsmFloat yAngle;

		[Token(Token = "0x4002733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Get the angle around the Z axis.")]
		public FsmFloat zAngle;

		[Token(Token = "0x4002734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The coordinate space to get the rotation in.")]
		public Space space;

		[Token(Token = "0x4002735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600298B")]
		[Address(RVA = "0x12E43F8", Offset = "0x12E43F8", VA = "0x12E43F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600298C")]
		[Address(RVA = "0x12E446C", Offset = "0x12E446C", VA = "0x12E446C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600298D")]
		[Address(RVA = "0x12E4630", Offset = "0x12E4630", VA = "0x12E4630", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600298E")]
		[Address(RVA = "0x12E4498", Offset = "0x12E4498", VA = "0x12E4498")]
		private void DoGetRotation()
		{
		}

		[Token(Token = "0x600298F")]
		[Address(RVA = "0x12E4634", Offset = "0x12E4634", VA = "0x12E4634")]
		public GetRotation()
		{
		}
	}
	[Token(Token = "0x200084E")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Scale of a Game Object and stores it in a Vector3 Variable or each Axis in a Float Variable")]
	public class GetScale : FsmStateAction
	{
		[Token(Token = "0x4002736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the scale in a Vector3 variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4002738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the X scale in a Float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat xScale;

		[Token(Token = "0x4002739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Y scale in a Float variable.")]
		public FsmFloat yScale;

		[Token(Token = "0x400273A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Z scale in a Float variable.")]
		public FsmFloat zScale;

		[Token(Token = "0x400273B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The coordinate space to get the rotation in.")]
		public Space space;

		[Token(Token = "0x400273C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002990")]
		[Address(RVA = "0x12E463C", Offset = "0x12E463C", VA = "0x12E463C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002991")]
		[Address(RVA = "0x12E46A0", Offset = "0x12E46A0", VA = "0x12E46A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002992")]
		[Address(RVA = "0x12E47B0", Offset = "0x12E47B0", VA = "0x12E47B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002993")]
		[Address(RVA = "0x12E46CC", Offset = "0x12E46CC", VA = "0x12E46CC")]
		private void DoGetScale()
		{
		}

		[Token(Token = "0x6002994")]
		[Address(RVA = "0x12E47B4", Offset = "0x12E47B4", VA = "0x12E47B4")]
		public GetScale()
		{
		}
	}
	[Token(Token = "0x200084F")]
	[Tooltip("Transforms a Direction from world space to a Game Object's local space. The opposite of TransformDirection.")]
	[ActionCategory(ActionCategory.Transform)]
	public class InverseTransformDirection : FsmStateAction
	{
		[Token(Token = "0x400273D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object that defines local space.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400273E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The direction in world space.")]
		[RequiredField]
		public FsmVector3 worldDirection;

		[Token(Token = "0x400273F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Vector3 Variable.")]
		public FsmVector3 storeResult;

		[Token(Token = "0x4002740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002995")]
		[Address(RVA = "0x12E47BC", Offset = "0x12E47BC", VA = "0x12E47BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002996")]
		[Address(RVA = "0x12E47FC", Offset = "0x12E47FC", VA = "0x12E47FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002997")]
		[Address(RVA = "0x12E48F4", Offset = "0x12E48F4", VA = "0x12E48F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002998")]
		[Address(RVA = "0x12E4828", Offset = "0x12E4828", VA = "0x12E4828")]
		private void DoInverseTransformDirection()
		{
		}

		[Token(Token = "0x6002999")]
		[Address(RVA = "0x12E48F8", Offset = "0x12E48F8", VA = "0x12E48F8")]
		public InverseTransformDirection()
		{
		}
	}
	[Token(Token = "0x2000850")]
	[Tooltip("Transforms position from world space to a Game Object's local space. The opposite of TransformPoint.")]
	[ActionCategory(ActionCategory.Transform)]
	public class InverseTransformPoint : FsmStateAction
	{
		[Token(Token = "0x4002741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object that defines local space.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The world position vector.")]
		[RequiredField]
		public FsmVector3 worldPosition;

		[Token(Token = "0x4002743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the transformed vector in a Vector3 Variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeResult;

		[Token(Token = "0x4002744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600299A")]
		[Address(RVA = "0x12E4900", Offset = "0x12E4900", VA = "0x12E4900", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600299B")]
		[Address(RVA = "0x12E4940", Offset = "0x12E4940", VA = "0x12E4940", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600299C")]
		[Address(RVA = "0x12E4A38", Offset = "0x12E4A38", VA = "0x12E4A38", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600299D")]
		[Address(RVA = "0x12E496C", Offset = "0x12E496C", VA = "0x12E496C")]
		private void DoInverseTransformPoint()
		{
		}

		[Token(Token = "0x600299E")]
		[Address(RVA = "0x12E4A3C", Offset = "0x12E4A3C", VA = "0x12E4A3C")]
		public InverseTransformPoint()
		{
		}
	}
	[Token(Token = "0x2000851")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a Game Object so its forward vector points at a Target. The Target can be specified as a GameObject or a world Position. If you specify both, then Position specifies a local offset from the target object's Position.")]
	public class LookAt : FsmStateAction
	{
		[Token(Token = "0x4002745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject to Look At.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x4002747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("World position to look at, or local offset from Target Object if specified.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4002748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotate the GameObject to point its up direction vector in the direction hinted at by the Up Vector. See Unity Look At docs for more details.")]
		public FsmVector3 upVector;

		[Token(Token = "0x4002749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Don't rotate vertically.")]
		public FsmBool keepVertical;

		[Token(Token = "0x400274A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Title("Draw Debug Line")]
		[Tooltip("Draw a debug line from the GameObject to the Target.")]
		public FsmBool debug;

		[Token(Token = "0x400274B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Color to use for the debug line.")]
		public FsmColor debugLineColor;

		[Token(Token = "0x400274C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400274D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject go;

		[Token(Token = "0x400274E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject goTarget;

		[Token(Token = "0x400274F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 lookAtPos;

		[Token(Token = "0x4002750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lookAtPosWithVertical;

		[Token(Token = "0x600299F")]
		[Address(RVA = "0x12E4A44", Offset = "0x12E4A44", VA = "0x12E4A44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029A0")]
		[Address(RVA = "0x12E4B78", Offset = "0x12E4B78", VA = "0x12E4B78", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029A1")]
		[Address(RVA = "0x12E4B98", Offset = "0x12E4B98", VA = "0x12E4B98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029A2")]
		[Address(RVA = "0x12E4D6C", Offset = "0x12E4D6C", VA = "0x12E4D6C", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029A3")]
		[Address(RVA = "0x12E4BC4", Offset = "0x12E4BC4", VA = "0x12E4BC4")]
		private void DoLookAt()
		{
		}

		[Token(Token = "0x60029A4")]
		[Address(RVA = "0x12E4D70", Offset = "0x12E4D70", VA = "0x12E4D70")]
		public bool UpdateLookAtPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x60029A5")]
		[Address(RVA = "0x12E4F64", Offset = "0x12E4F64", VA = "0x12E4F64")]
		public Vector3 GetLookAtPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60029A6")]
		[Address(RVA = "0x12E4F70", Offset = "0x12E4F70", VA = "0x12E4F70")]
		public Vector3 GetLookAtPositionWithVertical()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60029A7")]
		[Address(RVA = "0x12E4F7C", Offset = "0x12E4F7C", VA = "0x12E4F7C")]
		public LookAt()
		{
		}
	}
	[Token(Token = "0x2000852")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a Game Object so its forward vector points in the specified Direction.")]
	public class LookAtDirection : ComponentAction<Transform>
	{
		[Token(Token = "0x4002751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The direction to look at.")]
		public FsmVector3 targetDirection;

		[Token(Token = "0x4002753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Keep this vector pointing up as the GameObject rotates.")]
		public FsmVector3 upVector;

		[Token(Token = "0x4002754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every update.")]
		public bool everyFrame;

		[Token(Token = "0x4002755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Perform in LateUpdate. This can help eliminate jitters in some situations.")]
		public bool lateUpdate;

		[Token(Token = "0x60029A8")]
		[Address(RVA = "0x12E4F8C", Offset = "0x12E4F8C", VA = "0x12E4F8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029A9")]
		[Address(RVA = "0x12E504C", Offset = "0x12E504C", VA = "0x12E504C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029AA")]
		[Address(RVA = "0x12E5070", Offset = "0x12E5070", VA = "0x12E5070", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029AB")]
		[Address(RVA = "0x12E51F8", Offset = "0x12E51F8", VA = "0x12E51F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0x12E5208", Offset = "0x12E5208", VA = "0x12E5208", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029AD")]
		[Address(RVA = "0x12E509C", Offset = "0x12E509C", VA = "0x12E509C")]
		private void DoLookAtDirection()
		{
		}

		[Token(Token = "0x60029AE")]
		[Address(RVA = "0x12E5218", Offset = "0x12E5218", VA = "0x12E5218")]
		public LookAtDirection()
		{
		}
	}
	[Token(Token = "0x2000853")]
	[Tooltip("Move a GameObject to another GameObject using easing functions. Works like iTween Move To, but with better performance.")]
	[HelpUrl("http://hutonggames.com/playmakerforum/index.php?topic=4758.0")]
	[ActionCategory(ActionCategory.Transform)]
	public class MoveObject : EaseFsmAction
	{
		[Token(Token = "0x4002756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[RequiredField]
		[Tooltip("The GameObject to move.")]
		public FsmOwnerDefault objectToMove;

		[Token(Token = "0x4002757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[RequiredField]
		[Tooltip("The target GamObject.")]
		public FsmGameObject destination;

		[Token(Token = "0x4002758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private FsmVector3 fromValue;

		[Token(Token = "0x4002759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private FsmVector3 toVector;

		[Token(Token = "0x400275A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private FsmVector3 fromVector;

		[Token(Token = "0x400275B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool finishInNextStep;

		[Token(Token = "0x60029AF")]
		[Address(RVA = "0x12E5260", Offset = "0x12E5260", VA = "0x12E5260", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029B0")]
		[Address(RVA = "0x12E52A8", Offset = "0x12E52A8", VA = "0x12E52A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029B1")]
		[Address(RVA = "0x12E5558", Offset = "0x12E5558", VA = "0x12E5558", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029B2")]
		[Address(RVA = "0x12E5724", Offset = "0x12E5724", VA = "0x12E5724")]
		public MoveObject()
		{
		}
	}
	[Token(Token = "0x2000854")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Moves a Game Object towards a Target. Optionally sends an event when successful. The Target can be specified as a Game Object or a world Position. If you specify both, then the Position is used as a local offset from the Object's Position.")]
	public class MoveTowards : FsmStateAction
	{
		[Token(Token = "0x400275C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to Move")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400275D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A target GameObject to move towards. Or use a world Target Position below.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x400275E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A world position to move towards, if no Target Object is set. Otherwise used as a local offset from the Target Object.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x400275F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore any height difference in the target.")]
		public FsmBool ignoreVertical;

		[Token(Token = "0x4002760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 20f)]
		[Tooltip("The maximum movement speed (Unity units per second). HINT: You can make this a variable to change it over time.")]
		public FsmFloat maxSpeed;

		[Token(Token = "0x4002761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0f, 5f)]
		[Tooltip("Distance at which the move is considered finished, and the Finish Event is sent.")]
		public FsmFloat finishDistance;

		[Token(Token = "0x4002762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send when the Finish Distance is reached. Use this to transition to the next state.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4002763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject go;

		[Token(Token = "0x4002764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject goTarget;

		[Token(Token = "0x4002765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 targetPos;

		[Token(Token = "0x4002766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 targetPosWithVertical;

		[Token(Token = "0x60029B3")]
		[Address(RVA = "0x12E572C", Offset = "0x12E572C", VA = "0x12E572C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029B4")]
		[Address(RVA = "0x12E579C", Offset = "0x12E579C", VA = "0x12E579C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029B5")]
		[Address(RVA = "0x12E57A0", Offset = "0x12E57A0", VA = "0x12E57A0")]
		private void DoMoveTowards()
		{
		}

		[Token(Token = "0x60029B6")]
		[Address(RVA = "0x12E5A0C", Offset = "0x12E5A0C", VA = "0x12E5A0C")]
		public bool UpdateTargetPos()
		{
			return default(bool);
		}

		[Token(Token = "0x60029B7")]
		[Address(RVA = "0x12E5C00", Offset = "0x12E5C00", VA = "0x12E5C00")]
		public Vector3 GetTargetPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60029B8")]
		[Address(RVA = "0x12E5C0C", Offset = "0x12E5C0C", VA = "0x12E5C0C")]
		public Vector3 GetTargetPosWithVertical()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60029B9")]
		[Address(RVA = "0x12E5C18", Offset = "0x12E5C18", VA = "0x12E5C18")]
		public MoveTowards()
		{
		}
	}
	[Token(Token = "0x2000855")]
	[Tooltip("Rotates a Game Object around each Axis. Use a Vector3 Variable and/or XYZ components. To leave any axis unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Transform)]
	public class Rotate : FsmStateAction
	{
		[Token(Token = "0x4002767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A rotation vector specifying rotation around x, y, and z axis. NOTE: You can override individual axis below.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4002769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotation around x axis.")]
		public FsmFloat xAngle;

		[Token(Token = "0x400276A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Rotation around y axis.")]
		public FsmFloat yAngle;

		[Token(Token = "0x400276B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Rotation around z axis.")]
		public FsmFloat zAngle;

		[Token(Token = "0x400276C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Rotate in local or world space.")]
		public Space space;

		[Token(Token = "0x400276D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Rotation is specified in degrees per second. In other words, the amount to rotate in over one second. This allows rotations to be frame rate independent. It is the same as multiplying the rotation by Time.deltaTime.")]
		public bool perSecond;

		[Token(Token = "0x400276E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400276F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		[Tooltip("Perform the rotation in LateUpdate. This is useful if you want to override the rotation of objects that are animated or otherwise rotated in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x4002770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		[Tooltip("Perform the rotation in FixedUpdate. This is useful when working with rigid bodies and physics.")]
		public bool fixedUpdate;

		[Token(Token = "0x60029BA")]
		[Address(RVA = "0x12E5C20", Offset = "0x12E5C20", VA = "0x12E5C20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029BB")]
		[Address(RVA = "0x12E5D24", Offset = "0x12E5D24", VA = "0x12E5D24", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029BC")]
		[Address(RVA = "0x12E5D74", Offset = "0x12E5D74", VA = "0x12E5D74", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029BD")]
		[Address(RVA = "0x12E5F98", Offset = "0x12E5F98", VA = "0x12E5F98", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029BE")]
		[Address(RVA = "0x12E5FB0", Offset = "0x12E5FB0", VA = "0x12E5FB0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029BF")]
		[Address(RVA = "0x12E5FE8", Offset = "0x12E5FE8", VA = "0x12E5FE8", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x60029C0")]
		[Address(RVA = "0x12E5DB4", Offset = "0x12E5DB4", VA = "0x12E5DB4")]
		private void DoRotate()
		{
		}

		[Token(Token = "0x60029C1")]
		[Address(RVA = "0x12E6020", Offset = "0x12E6020", VA = "0x12E6020")]
		public Rotate()
		{
		}
	}
	[Token(Token = "0x2000856")]
	[Tooltip("Sets the Position of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SetPosition : ComponentAction<Transform>
	{
		[Token(Token = "0x4002771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The Game Object to position.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Use a stored Vector3 position, and/or set individual axis below.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x4002773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set the X position.")]
		public FsmFloat x;

		[Token(Token = "0x4002774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Set the Y position.")]
		public FsmFloat y;

		[Token(Token = "0x4002775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set the Z position.")]
		public FsmFloat z;

		[Token(Token = "0x4002776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Set position in local (relative to parent) or world space.")]
		public Space space;

		[Token(Token = "0x4002777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Perform this action every frame. Useful if position is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x60029C2")]
		[Address(RVA = "0x12E6028", Offset = "0x12E6028", VA = "0x12E6028", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029C3")]
		[Address(RVA = "0x12E6128", Offset = "0x12E6128", VA = "0x12E6128", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029C4")]
		[Address(RVA = "0x12E6158", Offset = "0x12E6158", VA = "0x12E6158", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029C5")]
		[Address(RVA = "0x12E6340", Offset = "0x12E6340", VA = "0x12E6340", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029C6")]
		[Address(RVA = "0x12E6350", Offset = "0x12E6350", VA = "0x12E6350", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029C7")]
		[Address(RVA = "0x12E6190", Offset = "0x12E6190", VA = "0x12E6190")]
		private void DoSetPosition()
		{
		}

		[Token(Token = "0x60029C8")]
		[Address(RVA = "0x12E6388", Offset = "0x12E6388", VA = "0x12E6388")]
		public SetPosition()
		{
		}
	}
	[Token(Token = "0x2000857")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Sets the 2d Position of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	public class SetPosition2d : FsmStateAction
	{
		[Token(Token = "0x4002779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to position.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400277A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Use a stored Vector2 position, and/or set individual axis below.")]
		public FsmVector2 vector;

		[Token(Token = "0x400277B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set the X position.")]
		public FsmFloat x;

		[Token(Token = "0x400277C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the Y position.")]
		public FsmFloat y;

		[Token(Token = "0x400277D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Use local or world space.")]
		public Space space;

		[Token(Token = "0x400277E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400277F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x60029C9")]
		[Address(RVA = "0x12E63D0", Offset = "0x12E63D0", VA = "0x12E63D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029CA")]
		[Address(RVA = "0x12E64A0", Offset = "0x12E64A0", VA = "0x12E64A0", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029CB")]
		[Address(RVA = "0x12E64D0", Offset = "0x12E64D0", VA = "0x12E64D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029CC")]
		[Address(RVA = "0x12E6688", Offset = "0x12E6688", VA = "0x12E6688", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029CD")]
		[Address(RVA = "0x12E6698", Offset = "0x12E6698", VA = "0x12E6698", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029CE")]
		[Address(RVA = "0x12E6508", Offset = "0x12E6508", VA = "0x12E6508")]
		private void DoSetPosition()
		{
		}

		[Token(Token = "0x60029CF")]
		[Address(RVA = "0x12E66D0", Offset = "0x12E66D0", VA = "0x12E66D0")]
		public SetPosition2d()
		{
		}
	}
	[Token(Token = "0x2000858")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Sets Random Rotation for a Game Object. Uncheck an axis to keep the current rotation around that axis.")]
	public class SetRandomRotation : FsmStateAction
	{
		[Token(Token = "0x4002780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object to randomly rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Use X axis.")]
		[RequiredField]
		public FsmBool x;

		[Token(Token = "0x4002782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Use Y axis.")]
		public FsmBool y;

		[Token(Token = "0x4002783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Use Z axis.")]
		public FsmBool z;

		[Token(Token = "0x60029D0")]
		[Address(RVA = "0x12E66D8", Offset = "0x12E66D8", VA = "0x12E66D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029D1")]
		[Address(RVA = "0x12E6744", Offset = "0x12E6744", VA = "0x12E6744", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029D2")]
		[Address(RVA = "0x12E6760", Offset = "0x12E6760", VA = "0x12E6760")]
		private void DoRandomRotation()
		{
		}

		[Token(Token = "0x60029D3")]
		[Address(RVA = "0x12E68C8", Offset = "0x12E68C8", VA = "0x12E68C8")]
		public SetRandomRotation()
		{
		}
	}
	[Token(Token = "0x2000859")]
	[Tooltip("Sets the Rotation of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SetRotation : FsmStateAction
	{
		[Token(Token = "0x4002784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Use a stored quaternion, or vector angles below.")]
		public FsmQuaternion quaternion;

		[Token(Token = "0x4002786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Title("Euler Angles")]
		[Tooltip("Use euler angles stored in a Vector3 variable, and/or set each axis below.")]
		public FsmVector3 vector;

		[Token(Token = "0x4002787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Angle around the X axis in degrees.")]
		public FsmFloat xAngle;

		[Token(Token = "0x4002788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Angle around the Y axis in degrees.")]
		public FsmFloat yAngle;

		[Token(Token = "0x4002789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Angle around the Z axis in degrees.")]
		public FsmFloat zAngle;

		[Token(Token = "0x400278A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Use local or world space.")]
		public Space space;

		[Token(Token = "0x400278B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400278C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x60029D4")]
		[Address(RVA = "0x12E68D0", Offset = "0x12E68D0", VA = "0x12E68D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029D5")]
		[Address(RVA = "0x12E69E0", Offset = "0x12E69E0", VA = "0x12E69E0", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029D6")]
		[Address(RVA = "0x12E6A10", Offset = "0x12E6A10", VA = "0x12E6A10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029D7")]
		[Address(RVA = "0x12E6C64", Offset = "0x12E6C64", VA = "0x12E6C64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029D8")]
		[Address(RVA = "0x12E6C74", Offset = "0x12E6C74", VA = "0x12E6C74", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029D9")]
		[Address(RVA = "0x12E6A48", Offset = "0x12E6A48", VA = "0x12E6A48")]
		private void DoSetRotation()
		{
		}

		[Token(Token = "0x60029DA")]
		[Address(RVA = "0x12E6CAC", Offset = "0x12E6CAC", VA = "0x12E6CAC")]
		public SetRotation()
		{
		}
	}
	[Token(Token = "0x200085A")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Sets the Scale of a Game Object. To leave any axis unchanged, set variable to 'None'.")]
	public class SetScale : FsmStateAction
	{
		[Token(Token = "0x400278D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to scale.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400278E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Use stored Vector3 value, and/or set each axis below.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector;

		[Token(Token = "0x400278F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Scale along the X axis (1 = normal).")]
		public FsmFloat x;

		[Token(Token = "0x4002790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Scale along the Y axis (1 = normal).")]
		public FsmFloat y;

		[Token(Token = "0x4002791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Scale along the Z axis (1 = normal).")]
		public FsmFloat z;

		[Token(Token = "0x4002792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[Tooltip("Perform in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x60029DB")]
		[Address(RVA = "0x12E6CB4", Offset = "0x12E6CB4", VA = "0x12E6CB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029DC")]
		[Address(RVA = "0x12E6DB0", Offset = "0x12E6DB0", VA = "0x12E6DB0", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029DD")]
		[Address(RVA = "0x12E6DE0", Offset = "0x12E6DE0", VA = "0x12E6DE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029DE")]
		[Address(RVA = "0x12E6FA0", Offset = "0x12E6FA0", VA = "0x12E6FA0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029DF")]
		[Address(RVA = "0x12E6FB0", Offset = "0x12E6FB0", VA = "0x12E6FB0", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029E0")]
		[Address(RVA = "0x12E6E0C", Offset = "0x12E6E0C", VA = "0x12E6E0C")]
		private void DoSetScale()
		{
		}

		[Token(Token = "0x60029E1")]
		[Address(RVA = "0x12E6FE8", Offset = "0x12E6FE8", VA = "0x12E6FE8")]
		public SetScale()
		{
		}
	}
	[Token(Token = "0x200085B")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Rotates a GameObject based on a Vector2 input, typically from a PlayerInput action. Use it on a player GameObject for MouseLook type behaviour. It is common to setup the camera as a child of the 'body', so the body rotates left/right while the camera tilts up/down.Minimum and Maximum values can be used to constrain the rotation.")]
	public class SimpleLook : ComponentAction<Transform>
	{
		[Token(Token = "0x4002794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject to rotate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Camera is often the child of the GameObject 'body'. If you specify a Camera, it will tilt up down, while the body rotates left/right. If you leave this empty, all rotations will be applied to the main GameObject.")]
		public new FsmGameObject camera;

		[Token(Token = "0x4002796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Vector2 input, typically from a PlayerInput action.")]
		[RequiredField]
		public FsmVector2 vector2Input;

		[Token(Token = "0x4002797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("Sensitivity of movement in X direction (rotate left/right).")]
		public FsmFloat sensitivityX;

		[Token(Token = "0x4002798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("Sensitivity of movement in Y direction (tilt up/down).")]
		public FsmFloat sensitivityY;

		[Token(Token = "0x4002799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		public FsmFloat minimumX;

		[Token(Token = "0x400279A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around X axis. Set to None for no clamping.")]
		public FsmFloat maximumX;

		[Token(Token = "0x400279B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HasFloatSlider(-360f, 360f)]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		public FsmFloat minimumY;

		[Token(Token = "0x400279C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Clamp rotation around Y axis. Set to None for no clamping.")]
		[HasFloatSlider(-360f, 360f)]
		public FsmFloat maximumY;

		[Token(Token = "0x400279D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x400279E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float rotationX;

		[Token(Token = "0x400279F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float rotationY;

		[Token(Token = "0x40027A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform cachedCameraTransform;

		[Token(Token = "0x60029E2")]
		[Address(RVA = "0x12E6FF0", Offset = "0x12E6FF0", VA = "0x12E6FF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029E3")]
		[Address(RVA = "0x12E7174", Offset = "0x12E7174", VA = "0x12E7174", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029E4")]
		[Address(RVA = "0x12E7550", Offset = "0x12E7550", VA = "0x12E7550", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029E5")]
		[Address(RVA = "0x12E73E8", Offset = "0x12E73E8", VA = "0x12E73E8")]
		private void DoLookRotate()
		{
		}

		[Token(Token = "0x60029E6")]
		[Address(RVA = "0x12E75C4", Offset = "0x12E75C4", VA = "0x12E75C4")]
		private float GetXRotation()
		{
			return default(float);
		}

		[Token(Token = "0x60029E7")]
		[Address(RVA = "0x12E7554", Offset = "0x12E7554", VA = "0x12E7554")]
		private float GetYRotation(float invert = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x60029E8")]
		[Address(RVA = "0x12E7624", Offset = "0x12E7624", VA = "0x12E7624")]
		private static float ClampAngle(float angle, FsmFloat min, FsmFloat max)
		{
			return default(float);
		}

		[Token(Token = "0x60029E9")]
		[Address(RVA = "0x12E76E4", Offset = "0x12E76E4", VA = "0x12E76E4")]
		public SimpleLook()
		{
		}
	}
	[Token(Token = "0x200085C")]
	[Tooltip("Action version of Unity's Smooth Follow script.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SmoothFollowAction : FsmStateAction
	{
		[Token(Token = "0x40027A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object to control. E.g. The camera.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40027A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The GameObject to follow.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x40027A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The distance in the x-z plane to the target.")]
		[RequiredField]
		public FsmFloat distance;

		[Token(Token = "0x40027A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The height we want the camera to be above the target")]
		[RequiredField]
		public FsmFloat height;

		[Token(Token = "0x40027A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("How much to dampen height movement.")]
		public FsmFloat heightDamping;

		[Token(Token = "0x40027A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[Tooltip("How much to dampen rotation changes.")]
		public FsmFloat rotationDamping;

		[Token(Token = "0x40027A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject cachedObject;

		[Token(Token = "0x40027A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform myTransform;

		[Token(Token = "0x40027A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject cachedTarget;

		[Token(Token = "0x40027AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform targetTransform;

		[Token(Token = "0x60029EA")]
		[Address(RVA = "0x12E772C", Offset = "0x12E772C", VA = "0x12E772C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029EB")]
		[Address(RVA = "0x12E77C4", Offset = "0x12E77C4", VA = "0x12E77C4", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029EC")]
		[Address(RVA = "0x12E77E4", Offset = "0x12E77E4", VA = "0x12E77E4", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029ED")]
		[Address(RVA = "0x12E7C58", Offset = "0x12E7C58", VA = "0x12E7C58")]
		public SmoothFollowAction()
		{
		}
	}
	[Token(Token = "0x200085D")]
	[Tooltip("Smoothly Rotates a Game Object so its forward vector points at a Target. The target can be defined as a Game Object or a world Position. If you specify both, then the position will be used as a local offset from the object's position.")]
	[ActionCategory(ActionCategory.Transform)]
	public class SmoothLookAt : FsmStateAction
	{
		[Token(Token = "0x40027AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to rotate to face a target.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40027AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A target GameObject.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x40027AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A world position, or local offset if a Target Object is defined.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x40027AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Used to keep the game object generally upright. If left undefined the world y axis is used.")]
		public FsmVector3 upVector;

		[Token(Token = "0x40027AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Force the game object to remain vertical. Useful for characters.")]
		public FsmBool keepVertical;

		[Token(Token = "0x40027B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HasFloatSlider(0.5f, 35f)]
		[Tooltip("How fast the look at moves.")]
		public FsmFloat speed;

		[Token(Token = "0x40027B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Draw a line in the Scene View to the look at position.")]
		public FsmBool debug;

		[Token(Token = "0x40027B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("If the angle to the target is less than this, send the Finish Event below. Measured in degrees.")]
		public FsmFloat finishTolerance;

		[Token(Token = "0x40027B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event to send if the angle to target is less than the Finish Tolerance.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40027B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject previousGo;

		[Token(Token = "0x40027B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion lastRotation;

		[Token(Token = "0x40027B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion desiredRotation;

		[Token(Token = "0x40027B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 lookAtPos;

		[Token(Token = "0x60029EE")]
		[Address(RVA = "0x12E7C60", Offset = "0x12E7C60", VA = "0x12E7C60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029EF")]
		[Address(RVA = "0x12E7DA4", Offset = "0x12E7DA4", VA = "0x12E7DA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029F0")]
		[Address(RVA = "0x12E7DB0", Offset = "0x12E7DB0", VA = "0x12E7DB0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029F1")]
		[Address(RVA = "0x12E7DB4", Offset = "0x12E7DB4", VA = "0x12E7DB4")]
		private void DoSmoothLookAt()
		{
		}

		[Token(Token = "0x60029F2")]
		[Address(RVA = "0x12E83E0", Offset = "0x12E83E0", VA = "0x12E83E0")]
		public SmoothLookAt()
		{
		}
	}
	[Token(Token = "0x200085E")]
	[Tooltip("Smoothly Rotates a Game Object so its forward vector points in the specified Direction. Lets you fire an event when minmagnitude is reached")]
	[ActionCategory(ActionCategory.Transform)]
	public class SmoothLookAtDirection : FsmStateAction
	{
		[Token(Token = "0x40027B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to rotate.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40027B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The direction to smoothly rotate towards.")]
		public FsmVector3 targetDirection;

		[Token(Token = "0x40027BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Only rotate if Target Direction Vector length is greater than this threshold.")]
		public FsmFloat minMagnitude;

		[Token(Token = "0x40027BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Keep this vector pointing up as the GameObject rotates.")]
		public FsmVector3 upVector;

		[Token(Token = "0x40027BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Eliminate any tilt up/down as the GameObject rotates.")]
		public FsmBool keepVertical;

		[Token(Token = "0x40027BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("How quickly to rotate.")]
		[RequiredField]
		[HasFloatSlider(0.5f, 15f)]
		public FsmFloat speed;

		[Token(Token = "0x40027BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Perform in LateUpdate. This can help eliminate jitters in some situations.")]
		public bool lateUpdate;

		[Token(Token = "0x40027BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if the direction difference is less than Min Magnitude.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x40027C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Stop running the action if the direction difference is less than Min Magnitude.")]
		public FsmBool finish;

		[Token(Token = "0x40027C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject previousGo;

		[Token(Token = "0x40027C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion lastRotation;

		[Token(Token = "0x40027C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion desiredRotation;

		[Token(Token = "0x60029F3")]
		[Address(RVA = "0x12E83E8", Offset = "0x12E83E8", VA = "0x12E83E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029F4")]
		[Address(RVA = "0x12E8508", Offset = "0x12E8508", VA = "0x12E8508", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60029F5")]
		[Address(RVA = "0x12E8528", Offset = "0x12E8528", VA = "0x12E8528", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029F6")]
		[Address(RVA = "0x12E8534", Offset = "0x12E8534", VA = "0x12E8534", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029F7")]
		[Address(RVA = "0x12E8854", Offset = "0x12E8854", VA = "0x12E8854", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60029F8")]
		[Address(RVA = "0x12E8544", Offset = "0x12E8544", VA = "0x12E8544")]
		private void DoSmoothLookAtDirection()
		{
		}

		[Token(Token = "0x60029F9")]
		[Address(RVA = "0x12E8864", Offset = "0x12E8864", VA = "0x12E8864")]
		public SmoothLookAtDirection()
		{
		}
	}
	[Token(Token = "0x200085F")]
	[Tooltip("Transforms a Direction from a Game Object's local space to world space.")]
	[ActionCategory(ActionCategory.Transform)]
	public class TransformDirection : FsmStateAction
	{
		[Token(Token = "0x40027C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Game Object that defines local space.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40027C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A direction vector in the object's local space.")]
		[RequiredField]
		public FsmVector3 localDirection;

		[Token(Token = "0x40027C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the transformed direction vector, now in world space, in a Vector3 Variable.")]
		public FsmVector3 storeResult;

		[Token(Token = "0x40027C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60029FA")]
		[Address(RVA = "0x12E886C", Offset = "0x12E886C", VA = "0x12E886C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60029FB")]
		[Address(RVA = "0x12E88AC", Offset = "0x12E88AC", VA = "0x12E88AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60029FC")]
		[Address(RVA = "0x12E89A4", Offset = "0x12E89A4", VA = "0x12E89A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60029FD")]
		[Address(RVA = "0x12E88D8", Offset = "0x12E88D8", VA = "0x12E88D8")]
		private void DoTransformDirection()
		{
		}

		[Token(Token = "0x60029FE")]
		[Address(RVA = "0x12E89A8", Offset = "0x12E89A8", VA = "0x12E89A8")]
		public TransformDirection()
		{
		}
	}
	[Token(Token = "0x2000860")]
	[Tooltip("Transforms a Position from a Game Object's local space to world space.")]
	[ActionCategory(ActionCategory.Transform)]
	public class TransformPoint : FsmStateAction
	{
		[Token(Token = "0x40027C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Game Object that defines local space.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40027C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("A local position vector.")]
		public FsmVector3 localPosition;

		[Token(Token = "0x40027CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the transformed position, now in world space, in a Vector3 Variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeResult;

		[Token(Token = "0x40027CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60029FF")]
		[Address(RVA = "0x12E89B0", Offset = "0x12E89B0", VA = "0x12E89B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A00")]
		[Address(RVA = "0x12E89F0", Offset = "0x12E89F0", VA = "0x12E89F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A01")]
		[Address(RVA = "0x12E8AE8", Offset = "0x12E8AE8", VA = "0x12E8AE8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A02")]
		[Address(RVA = "0x12E8A1C", Offset = "0x12E8A1C", VA = "0x12E8A1C")]
		private void DoTransformPoint()
		{
		}

		[Token(Token = "0x6002A03")]
		[Address(RVA = "0x12E8AEC", Offset = "0x12E8AEC", VA = "0x12E8AEC")]
		public TransformPoint()
		{
		}
	}
	[Token(Token = "0x2000861")]
	[Tooltip("Translates a Game Object. Use a Vector3 variable and/or XYZ components. To leave any axis unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Transform)]
	public class Translate : FsmStateAction
	{
		[Token(Token = "0x40027CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The game object to translate.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40027CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[Tooltip("A translation vector. NOTE: You can override individual axis below.")]
		public FsmVector3 vector;

		[Token(Token = "0x40027CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Translation along x axis.")]
		public FsmFloat x;

		[Token(Token = "0x40027CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Translation along y axis.")]
		public FsmFloat y;

		[Token(Token = "0x40027D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Translation along z axis.")]
		public FsmFloat z;

		[Token(Token = "0x40027D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Translate in local or world space.")]
		public Space space;

		[Token(Token = "0x40027D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Translate over one second")]
		public bool perSecond;

		[Token(Token = "0x40027D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40027D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		[Tooltip("Perform the translate in LateUpdate. This is useful if you want to override the position of objects that are animated or otherwise positioned in Update.")]
		public bool lateUpdate;

		[Token(Token = "0x40027D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		[Tooltip("Perform the translate in FixedUpdate. This is useful when working with rigid bodies and physics.")]
		public bool fixedUpdate;

		[Token(Token = "0x6002A04")]
		[Address(RVA = "0x12E8AF4", Offset = "0x12E8AF4", VA = "0x12E8AF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A05")]
		[Address(RVA = "0x12E8BF8", Offset = "0x12E8BF8", VA = "0x12E8BF8", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002A06")]
		[Address(RVA = "0x12E8C48", Offset = "0x12E8C48", VA = "0x12E8C48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A07")]
		[Address(RVA = "0x12E8E6C", Offset = "0x12E8E6C", VA = "0x12E8E6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A08")]
		[Address(RVA = "0x12E8E84", Offset = "0x12E8E84", VA = "0x12E8E84", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6002A09")]
		[Address(RVA = "0x12E8EBC", Offset = "0x12E8EBC", VA = "0x12E8EBC", Slot = "33")]
		public override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6002A0A")]
		[Address(RVA = "0x12E8C88", Offset = "0x12E8C88", VA = "0x12E8C88")]
		private void DoTranslate()
		{
		}

		[Token(Token = "0x6002A0B")]
		[Address(RVA = "0x12E8EF4", Offset = "0x12E8EF4", VA = "0x12E8EF4")]
		public Translate()
		{
		}
	}
	[Token(Token = "0x2000862")]
	[Tooltip("Get the Arc Cosine. You can get the result in degrees, simply check on the RadToDeg conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetACosine : FsmStateAction
	{
		[Token(Token = "0x40027D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The value of the cosine")]
		public FsmFloat Value;

		[Token(Token = "0x40027D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat angle;

		[Token(Token = "0x40027D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40027D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A0C")]
		[Address(RVA = "0x12E8EFC", Offset = "0x12E8EFC", VA = "0x12E8EFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A0D")]
		[Address(RVA = "0x12E8F44", Offset = "0x12E8F44", VA = "0x12E8F44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A0E")]
		[Address(RVA = "0x12E8FD4", Offset = "0x12E8FD4", VA = "0x12E8FD4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A0F")]
		[Address(RVA = "0x12E8F70", Offset = "0x12E8F70", VA = "0x12E8F70")]
		private void DoACosine()
		{
		}

		[Token(Token = "0x6002A10")]
		[Address(RVA = "0x12E8FD8", Offset = "0x12E8FD8", VA = "0x12E8FD8")]
		public GetACosine()
		{
		}
	}
	[Token(Token = "0x2000863")]
	[Tooltip("Get the Arc sine. You can get the result in degrees, simply check on the RadToDeg conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetASine : FsmStateAction
	{
		[Token(Token = "0x40027DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The value of the sine")]
		public FsmFloat Value;

		[Token(Token = "0x40027DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		[UIHint(UIHint.Variable)]
		public FsmFloat angle;

		[Token(Token = "0x40027DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40027DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A11")]
		[Address(RVA = "0x12E8FE0", Offset = "0x12E8FE0", VA = "0x12E8FE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A12")]
		[Address(RVA = "0x12E9028", Offset = "0x12E9028", VA = "0x12E9028", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A13")]
		[Address(RVA = "0x12E90B8", Offset = "0x12E90B8", VA = "0x12E90B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A14")]
		[Address(RVA = "0x12E9054", Offset = "0x12E9054", VA = "0x12E9054")]
		private void DoASine()
		{
		}

		[Token(Token = "0x6002A15")]
		[Address(RVA = "0x12E90BC", Offset = "0x12E90BC", VA = "0x12E90BC")]
		public GetASine()
		{
		}
	}
	[Token(Token = "0x2000864")]
	[ActionCategory(ActionCategory.Trigonometry)]
	[Tooltip("Get the Arc Tangent. You can get the result in degrees, simply check on the RadToDeg conversion")]
	public class GetAtan : FsmStateAction
	{
		[Token(Token = "0x40027DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The value of the tan")]
		[RequiredField]
		public FsmFloat Value;

		[Token(Token = "0x40027DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		[UIHint(UIHint.Variable)]
		public FsmFloat angle;

		[Token(Token = "0x40027E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40027E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat Every Frame")]
		public bool everyFrame;

		[Token(Token = "0x6002A16")]
		[Address(RVA = "0x12E90C4", Offset = "0x12E90C4", VA = "0x12E90C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A17")]
		[Address(RVA = "0x12E910C", Offset = "0x12E910C", VA = "0x12E910C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A18")]
		[Address(RVA = "0x12E919C", Offset = "0x12E919C", VA = "0x12E919C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A19")]
		[Address(RVA = "0x12E9138", Offset = "0x12E9138", VA = "0x12E9138")]
		private void DoATan()
		{
		}

		[Token(Token = "0x6002A1A")]
		[Address(RVA = "0x12E91A0", Offset = "0x12E91A0", VA = "0x12E91A0")]
		public GetAtan()
		{
		}
	}
	[Token(Token = "0x2000865")]
	[ActionCategory(ActionCategory.Trigonometry)]
	[Tooltip("Get the Arc Tangent 2 as in atan2(y,x). You can get the result in degrees, simply check on the RadToDeg conversion")]
	public class GetAtan2 : FsmStateAction
	{
		[Token(Token = "0x40027E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The x value of the tan")]
		public FsmFloat xValue;

		[Token(Token = "0x40027E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The y value of the tan")]
		[RequiredField]
		public FsmFloat yValue;

		[Token(Token = "0x40027E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		[UIHint(UIHint.Variable)]
		public FsmFloat angle;

		[Token(Token = "0x40027E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40027E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A1B")]
		[Address(RVA = "0x12E91A8", Offset = "0x12E91A8", VA = "0x12E91A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A1C")]
		[Address(RVA = "0x12E9200", Offset = "0x12E9200", VA = "0x12E9200", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A1D")]
		[Address(RVA = "0x12E92AC", Offset = "0x12E92AC", VA = "0x12E92AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A1E")]
		[Address(RVA = "0x12E922C", Offset = "0x12E922C", VA = "0x12E922C")]
		private void DoATan()
		{
		}

		[Token(Token = "0x6002A1F")]
		[Address(RVA = "0x12E92B0", Offset = "0x12E92B0", VA = "0x12E92B0")]
		public GetAtan2()
		{
		}
	}
	[Token(Token = "0x2000866")]
	[ActionCategory(ActionCategory.Trigonometry)]
	[Tooltip("Get the Arc Tangent 2 as in atan2(y,x) from a vector 2. You can get the result in degrees, simply check on the RadToDeg conversion")]
	public class GetAtan2FromVector2 : FsmStateAction
	{
		[Token(Token = "0x40027E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The vector2 of the tan")]
		public FsmVector2 vector2;

		[Token(Token = "0x40027E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		public FsmFloat angle;

		[Token(Token = "0x40027E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40027EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A20")]
		[Address(RVA = "0x12E92B8", Offset = "0x12E92B8", VA = "0x12E92B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A21")]
		[Address(RVA = "0x12E9300", Offset = "0x12E9300", VA = "0x12E9300", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A22")]
		[Address(RVA = "0x12E938C", Offset = "0x12E938C", VA = "0x12E938C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A23")]
		[Address(RVA = "0x12E932C", Offset = "0x12E932C", VA = "0x12E932C")]
		private void DoATan()
		{
		}

		[Token(Token = "0x6002A24")]
		[Address(RVA = "0x12E9390", Offset = "0x12E9390", VA = "0x12E9390")]
		public GetAtan2FromVector2()
		{
		}
	}
	[Token(Token = "0x2000867")]
	[Tooltip("Get the Arc Tangent 2 as in atan2(y,x) from a vector 3, where you pick which is x and y from the vector 3. You can get the result in degrees, simply check on the RadToDeg conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetAtan2FromVector3 : FsmStateAction
	{
		[Token(Token = "0x2000868")]
		public enum aTan2EnumAxis
		{
			[Token(Token = "0x40027F2")]
			x,
			[Token(Token = "0x40027F3")]
			y,
			[Token(Token = "0x40027F4")]
			z
		}

		[Token(Token = "0x40027EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector3 definition of the tan")]
		[RequiredField]
		public FsmVector3 vector3;

		[Token(Token = "0x40027EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("which axis in the vector3 to use as the x value of the tan")]
		[RequiredField]
		public aTan2EnumAxis xAxis;

		[Token(Token = "0x40027ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("which axis in the vector3 to use as the y value of the tan")]
		[RequiredField]
		public aTan2EnumAxis yAxis;

		[Token(Token = "0x40027EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The resulting angle. Note:If you want degrees, simply check RadToDeg")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat angle;

		[Token(Token = "0x40027EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Check on if you want the angle expressed in degrees.")]
		public FsmBool RadToDeg;

		[Token(Token = "0x40027F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A25")]
		[Address(RVA = "0x12E9398", Offset = "0x12E9398", VA = "0x12E9398", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A26")]
		[Address(RVA = "0x12E93EC", Offset = "0x12E93EC", VA = "0x12E93EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A27")]
		[Address(RVA = "0x12E9510", Offset = "0x12E9510", VA = "0x12E9510", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A28")]
		[Address(RVA = "0x12E9418", Offset = "0x12E9418", VA = "0x12E9418")]
		private void DoATan()
		{
		}

		[Token(Token = "0x6002A29")]
		[Address(RVA = "0x12E9514", Offset = "0x12E9514", VA = "0x12E9514")]
		public GetAtan2FromVector3()
		{
		}
	}
	[Token(Token = "0x2000869")]
	[Tooltip("Get the Cosine.")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetCosine : FsmStateAction
	{
		[Token(Token = "0x40027F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The angle. Note: Check Deg To Rad if the angle is expressed in degrees.")]
		public FsmFloat angle;

		[Token(Token = "0x40027F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check if the angle is expressed in degrees.")]
		public FsmBool DegToRad;

		[Token(Token = "0x40027F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The angle cosine.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat result;

		[Token(Token = "0x40027F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A2A")]
		[Address(RVA = "0x12E951C", Offset = "0x12E951C", VA = "0x12E951C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A2B")]
		[Address(RVA = "0x12E9564", Offset = "0x12E9564", VA = "0x12E9564", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A2C")]
		[Address(RVA = "0x12E95F4", Offset = "0x12E95F4", VA = "0x12E95F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A2D")]
		[Address(RVA = "0x12E9590", Offset = "0x12E9590", VA = "0x12E9590")]
		private void DoCosine()
		{
		}

		[Token(Token = "0x6002A2E")]
		[Address(RVA = "0x12E95F8", Offset = "0x12E95F8", VA = "0x12E95F8")]
		public GetCosine()
		{
		}
	}
	[Token(Token = "0x200086A")]
	[Tooltip("Get the sine. You can use degrees, simply check on the DegToRad conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetSine : FsmStateAction
	{
		[Token(Token = "0x40027F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The angle. Note: You can use degrees, simply check DegtoRad if the angle is expressed in degrees.")]
		public FsmFloat angle;

		[Token(Token = "0x40027FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check on if the angle is expressed in degrees.")]
		public FsmBool DegToRad;

		[Token(Token = "0x40027FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The angle tan")]
		public FsmFloat result;

		[Token(Token = "0x40027FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A2F")]
		[Address(RVA = "0x12E9600", Offset = "0x12E9600", VA = "0x12E9600", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A30")]
		[Address(RVA = "0x12E9648", Offset = "0x12E9648", VA = "0x12E9648", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A31")]
		[Address(RVA = "0x12E96D8", Offset = "0x12E96D8", VA = "0x12E96D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A32")]
		[Address(RVA = "0x12E9674", Offset = "0x12E9674", VA = "0x12E9674")]
		private void DoSine()
		{
		}

		[Token(Token = "0x6002A33")]
		[Address(RVA = "0x12E96DC", Offset = "0x12E96DC", VA = "0x12E96DC")]
		public GetSine()
		{
		}
	}
	[Token(Token = "0x200086B")]
	[Tooltip("Get the Tangent. You can use degrees, simply check on the DegToRad conversion")]
	[ActionCategory(ActionCategory.Trigonometry)]
	public class GetTan : FsmStateAction
	{
		[Token(Token = "0x40027FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The angle. Note: You can use degrees, simply check DegtoRad if the angle is expressed in degrees.")]
		[RequiredField]
		public FsmFloat angle;

		[Token(Token = "0x40027FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check on if the angle is expressed in degrees.")]
		public FsmBool DegToRad;

		[Token(Token = "0x40027FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The angle tan")]
		public FsmFloat result;

		[Token(Token = "0x4002800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002A34")]
		[Address(RVA = "0x12E96E4", Offset = "0x12E96E4", VA = "0x12E96E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A35")]
		[Address(RVA = "0x12E972C", Offset = "0x12E972C", VA = "0x12E972C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A36")]
		[Address(RVA = "0x12E97BC", Offset = "0x12E97BC", VA = "0x12E97BC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002A37")]
		[Address(RVA = "0x12E9758", Offset = "0x12E9758", VA = "0x12E9758")]
		private void DoTan()
		{
		}

		[Token(Token = "0x6002A38")]
		[Address(RVA = "0x12E97C0", Offset = "0x12E97C0", VA = "0x12E97C0")]
		public GetTan()
		{
		}
	}
	[Token(Token = "0x200086C")]
	[ActionCategory(ActionCategory.Tween)]
	public abstract class TweenActionBase : BaseUpdateAction
	{
		[Token(Token = "0x4002801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ActionSection("Easing")]
		[Tooltip("Delay before starting the tween.")]
		public FsmFloat startDelay;

		[Token(Token = "0x4002802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The type of easing to apply.")]
		[ObjectType(typeof(EasingFunction.Ease))]
		[PreviewField("DrawPreview")]
		public FsmEnum easeType;

		[Token(Token = "0x4002803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideIf("HideCustomCurve")]
		[Tooltip("Custom tween curve. Note: Typically you would use the 0-1 range.")]
		public FsmAnimationCurve customCurve;

		[Token(Token = "0x4002804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Length of tween in seconds.")]
		public FsmFloat time;

		[Token(Token = "0x4002805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Ignore any time scaling.")]
		public FsmBool realTime;

		[Token(Token = "0x4002806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Looping options.")]
		public HutongGames.PlayMaker.TweenEnums.LoopType loopType;

		[Token(Token = "0x4002807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send when tween is finished.")]
		public FsmEvent finishEvent;

		[NonSerialized]
		[Token(Token = "0x4002808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float normalizedTime;

		[Token(Token = "0x4002809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool tweenStarted;

		[Token(Token = "0x400280A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		protected bool tweenFinished;

		[Token(Token = "0x400280B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float currentTime;

		[Token(Token = "0x400280C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected bool playPreview;

		[Token(Token = "0x400280D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private EasingFunction.Ease cachedEase;

		[Token(Token = "0x400280E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private EasingFunction.Function func;

		[Token(Token = "0x400280F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool showPreviewCurve;

		[Token(Token = "0x4002810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool reverse;

		[Token(Token = "0x17000380")]
		public EasingFunction.Function easingFunction
		{
			[Token(Token = "0x6002A39")]
			[Address(RVA = "0x12E97C8", Offset = "0x12E97C8", VA = "0x12E97C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A3A")]
		[Address(RVA = "0x12E987C", Offset = "0x12E987C", VA = "0x12E987C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A3B")]
		[Address(RVA = "0x12E9900", Offset = "0x12E9900", VA = "0x12E9900", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A3C")]
		[Address(RVA = "0x12E991C", Offset = "0x12E991C", VA = "0x12E991C", Slot = "62")]
		public override void OnActionUpdate()
		{
		}

		[Token(Token = "0x6002A3D")]
		protected abstract void DoTween();

		[Token(Token = "0x6002A3E")]
		[Address(RVA = "0x12E9B4C", Offset = "0x12E9B4C", VA = "0x12E9B4C")]
		protected TweenActionBase()
		{
		}
	}
	[Token(Token = "0x200086D")]
	public abstract class TweenComponentBase<T> : TweenActionBase where T : Component
	{
		[Token(Token = "0x4002811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[RequiredField]
		[DisplayOrder(0)]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Game Object to tween.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected GameObject cachedGameObject;

		[Token(Token = "0x4002813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T cachedComponent;

		[Token(Token = "0x6002A3F")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A40")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A41")]
		protected bool UpdateCache(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A42")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A43")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6002A44")]
		protected TweenComponentBase()
		{
		}
	}
	[Token(Token = "0x200086E")]
	public static class TweenHelpers
	{
		[Token(Token = "0x6002A45")]
		[Address(RVA = "0x12E9B54", Offset = "0x12E9B54", VA = "0x12E9B54")]
		public static Quaternion GetTargetRotation(RotationOptions option, Transform owner, Transform target, Vector3 rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002A46")]
		[Address(RVA = "0x12E9E74", Offset = "0x12E9E74", VA = "0x12E9E74")]
		public static bool GetTargetRotation(RotationOptions option, Transform owner, FsmVector3 rotation, FsmGameObject target, out Quaternion targetRotation)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A47")]
		[Address(RVA = "0x12E9FD8", Offset = "0x12E9FD8", VA = "0x12E9FD8")]
		private static bool CanEditTargetRotation(RotationOptions option, NamedVariable rotation, FsmGameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A48")]
		[Address(RVA = "0x12EA0E4", Offset = "0x12EA0E4", VA = "0x12EA0E4")]
		public static Vector3 GetTargetScale(ScaleOptions option, Transform owner, Transform target, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002A49")]
		[Address(RVA = "0x12EA270", Offset = "0x12EA270", VA = "0x12EA270")]
		public static bool GetTargetPosition(PositionOptions option, Transform owner, FsmVector3 position, FsmGameObject target, out Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A4A")]
		[Address(RVA = "0x12EA41C", Offset = "0x12EA41C", VA = "0x12EA41C")]
		private static bool IsValidTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A4B")]
		[Address(RVA = "0x12EA7A8", Offset = "0x12EA7A8", VA = "0x12EA7A8")]
		public static bool CanEditTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x6002A4C")]
		[Address(RVA = "0x12EA528", Offset = "0x12EA528", VA = "0x12EA528")]
		public static Vector3 GetTargetPosition(PositionOptions option, Transform owner, Transform target, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002A4D")]
		[Address(RVA = "0x12EA8B4", Offset = "0x12EA8B4", VA = "0x12EA8B4")]
		public static Vector3 GetUiTargetPosition(UiPositionOptions option, RectTransform owner, Transform target, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002A4E")]
		[Address(RVA = "0x12EAC4C", Offset = "0x12EAC4C", VA = "0x12EAC4C")]
		public static Rect GetWorldRect(RectTransform rectTransform)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x200086F")]
	[ActionCategory(ActionCategory.Tween)]
	public abstract class TweenPropertyBase<T> : TweenActionBase where T : NamedVariable
	{
		[Token(Token = "0x4002814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Title("From")]
		[Tooltip("Setup where to tween from.")]
		public TargetValueOptions fromOption;

		[Token(Token = "0x4002815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Tween from this value.")]
		[HideIf("HideFromValue")]
		public T fromValue;

		[Token(Token = "0x4002816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Title("To")]
		[Tooltip("Setup where to tween to.")]
		public TargetValueOptions toOption;

		[Token(Token = "0x4002817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("Tween to this value.")]
		[HideIf("HideToValue")]
		public T toValue;

		[Token(Token = "0x17000381")]
		public object StartValue
		{
			[Token(Token = "0x6002A50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A51")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000382")]
		public object EndValue
		{
			[Token(Token = "0x6002A52")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A53")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6002A4F")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A54")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A55")]
		protected virtual void InitTargets()
		{
		}

		[Token(Token = "0x6002A56")]
		protected virtual object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002A57")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A58")]
		protected TweenPropertyBase()
		{
		}
	}
	[Token(Token = "0x2000870")]
	[ActionCategory(ActionCategory.Tween)]
	public abstract class TweenVariableBase<T> : TweenPropertyBase<T> where T : NamedVariable
	{
		[Token(Token = "0x400281A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("The variable to tween.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public T variable;

		[Token(Token = "0x6002A59")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A5A")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A5B")]
		protected override void InitTargets()
		{
		}

		[Token(Token = "0x6002A5C")]
		protected TweenVariableBase()
		{
		}
	}
	[Token(Token = "0x2000871")]
	[Tooltip("Tween common AudioSource properties.")]
	[ActionTarget(typeof(AudioSource), "", false)]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenAudio : TweenComponentBase<AudioSource>
	{
		[Token(Token = "0x2000872")]
		public enum AudioProperty
		{
			[Token(Token = "0x4002822")]
			Volume,
			[Token(Token = "0x4002823")]
			Pitch
		}

		[Token(Token = "0x400281B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Audio property to tween.")]
		public AudioProperty property;

		[Token(Token = "0x400281C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Tween To/From values set below.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x400281D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Value for the selected property.")]
		public FsmFloat value;

		[Token(Token = "0x400281E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioSource audio;

		[Token(Token = "0x400281F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float fromFloat;

		[Token(Token = "0x4002820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float toFloat;

		[Token(Token = "0x6002A5D")]
		[Address(RVA = "0x12EAFAC", Offset = "0x12EAFAC", VA = "0x12EAFAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A5E")]
		[Address(RVA = "0x12EB008", Offset = "0x12EB008", VA = "0x12EB008", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A5F")]
		[Address(RVA = "0x12EB160", Offset = "0x12EB160", VA = "0x12EB160", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A60")]
		[Address(RVA = "0x12EB25C", Offset = "0x12EB25C", VA = "0x12EB25C")]
		public TweenAudio()
		{
		}
	}
	[Token(Token = "0x2000873")]
	[Tooltip("Tween common Camera properties.")]
	[ActionTarget(typeof(Camera), "", false)]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenCamera : TweenComponentBase<Camera>
	{
		[Token(Token = "0x2000874")]
		public enum CameraProperty
		{
			[Token(Token = "0x4002831")]
			Aspect,
			[Token(Token = "0x4002832")]
			BackgroundColor,
			[Token(Token = "0x4002833")]
			FieldOfView,
			[Token(Token = "0x4002834")]
			OrthoSize,
			[Token(Token = "0x4002835")]
			PixelRect,
			[Token(Token = "0x4002836")]
			ViewportRect
		}

		[Token(Token = "0x4002824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Camera property to tween.")]
		public CameraProperty property;

		[Token(Token = "0x4002825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Tween To/From values set below.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x4002826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Context sensitive parameter. Depends on Property.")]
		public FsmColor targetColor;

		[Token(Token = "0x4002827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Context sensitive parameter. Depends on Property.")]
		public FsmFloat targetFloat;

		[Token(Token = "0x4002828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Context sensitive parameter. Depends on Property.")]
		public FsmRect targetRect;

		[Token(Token = "0x4002829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Camera camera;

		[Token(Token = "0x400282A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Color fromColor;

		[Token(Token = "0x400282B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Color toColor;

		[Token(Token = "0x400282C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float fromFloat;

		[Token(Token = "0x400282D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float toFloat;

		[Token(Token = "0x400282E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Rect fromRect;

		[Token(Token = "0x400282F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Rect toRect;

		[Token(Token = "0x6002A61")]
		[Address(RVA = "0x12EB2A4", Offset = "0x12EB2A4", VA = "0x12EB2A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A62")]
		[Address(RVA = "0x12EB318", Offset = "0x12EB318", VA = "0x12EB318", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A63")]
		[Address(RVA = "0x12EB5E0", Offset = "0x12EB5E0", VA = "0x12EB5E0", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A64")]
		[Address(RVA = "0x12EB86C", Offset = "0x12EB86C", VA = "0x12EB86C")]
		public TweenCamera()
		{
		}
	}
	[Token(Token = "0x2000875")]
	[Tooltip("Tween the color of a GameObject or a Color variable. The GameObject needs a Material, Sprite, Image, Text, or Light component.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenColor : TweenPropertyBase<FsmColor>
	{
		[Token(Token = "0x2000876")]
		public enum Target
		{
			[Token(Token = "0x4002847")]
			GameObject,
			[Token(Token = "0x4002848")]
			Variable
		}

		[Token(Token = "0x2000877")]
		public enum TargetType
		{
			[Token(Token = "0x400284A")]
			None,
			[Token(Token = "0x400284B")]
			Material,
			[Token(Token = "0x400284C")]
			Sprite,
			[Token(Token = "0x400284D")]
			Image,
			[Token(Token = "0x400284E")]
			Text,
			[Token(Token = "0x400284F")]
			Light
		}

		[Token(Token = "0x4002837")]
		private const string SupportedComponents = "MeshRenderer, Sprite, Image, Text, Light.";

		[Token(Token = "0x4002838")]
		private const string OffsetTooltip = "How to apply the Offset Color. Similar to Photoshop Blend modes. \nNote: use the color alpha to fade the blend.";

		[Token(Token = "0x4002839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("What to tween.")]
		public Target target;

		[Token(Token = "0x400283A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("A GameObject with a Material, Sprite, Image, Text, or Light component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400283B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The variable to tween.")]
		[UIHint(UIHint.Variable)]
		public FsmColor variable;

		[Token(Token = "0x400283C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("How to apply the Offset Color. Similar to Photoshop Blend modes. \nNote: use the color alpha to fade the blend.")]
		public ColorBlendMode fromOffsetBlendMode;

		[Token(Token = "0x400283D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("How to apply the Offset Color. Similar to Photoshop Blend modes. \nNote: use the color alpha to fade the blend.")]
		public ColorBlendMode toOffsetBlendMode;

		[Token(Token = "0x400283E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private GameObject cachedGameObject;

		[Token(Token = "0x400283F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Component cachedComponent;

		[Token(Token = "0x4002840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private TargetType targetType;

		[Token(Token = "0x4002841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Material material;

		[Token(Token = "0x4002842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x4002843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Text text;

		[Token(Token = "0x4002844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Image image;

		[Token(Token = "0x4002845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Light light;

		[Token(Token = "0x17000383")]
		public TargetType type
		{
			[Token(Token = "0x6002A65")]
			[Address(RVA = "0x12EB8B4", Offset = "0x12EB8B4", VA = "0x12EB8B4")]
			get
			{
				return default(TargetType);
			}
		}

		[Token(Token = "0x6002A66")]
		[Address(RVA = "0x12EB8BC", Offset = "0x12EB8BC", VA = "0x12EB8BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A67")]
		[Address(RVA = "0x12EB938", Offset = "0x12EB938", VA = "0x12EB938")]
		private void UpdateCache(GameObject go)
		{
		}

		[Token(Token = "0x6002A68")]
		[Address(RVA = "0x12EBB70", Offset = "0x12EBB70", VA = "0x12EBB70")]
		private void CheckCache()
		{
		}

		[Token(Token = "0x6002A69")]
		[Address(RVA = "0x12EBC08", Offset = "0x12EBC08", VA = "0x12EBC08")]
		private void Init()
		{
		}

		[Token(Token = "0x6002A6A")]
		[Address(RVA = "0x12EBF9C", Offset = "0x12EBF9C", VA = "0x12EBF9C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A6B")]
		[Address(RVA = "0x12EC124", Offset = "0x12EC124", VA = "0x12EC124", Slot = "64")]
		protected override void InitTargets()
		{
		}

		[Token(Token = "0x6002A6C")]
		[Address(RVA = "0x12EC32C", Offset = "0x12EC32C", VA = "0x12EC32C")]
		private Color GetTargetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002A6D")]
		[Address(RVA = "0x12EC42C", Offset = "0x12EC42C", VA = "0x12EC42C")]
		private void SetTargetColor(Color color)
		{
		}

		[Token(Token = "0x6002A6E")]
		[Address(RVA = "0x12EC010", Offset = "0x12EC010", VA = "0x12EC010")]
		private void InitOffsets()
		{
		}

		[Token(Token = "0x6002A6F")]
		[Address(RVA = "0x12EC51C", Offset = "0x12EC51C", VA = "0x12EC51C", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002A70")]
		[Address(RVA = "0x12EC524", Offset = "0x12EC524", VA = "0x12EC524", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A71")]
		[Address(RVA = "0x12EC65C", Offset = "0x12EC65C", VA = "0x12EC65C")]
		public TweenColor()
		{
		}
	}
	[Token(Token = "0x2000878")]
	[Tooltip("Fades a GameObject with a Material, Sprite, Image, Text, Light, AudioSource, or CanvasGroup component.\n\nNote: The Material Shader must support transparency. For example, in URP set the Surface Type to Transparent.\n\nTip: When using the Standard shader, set Rendering Mode to Fade for best fading effect.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenFade : TweenActionBase
	{
		[Token(Token = "0x2000879")]
		public enum TargetType
		{
			[Token(Token = "0x4002861")]
			None,
			[Token(Token = "0x4002862")]
			Material,
			[Token(Token = "0x4002863")]
			Sprite,
			[Token(Token = "0x4002864")]
			Image,
			[Token(Token = "0x4002865")]
			Text,
			[Token(Token = "0x4002866")]
			Light,
			[Token(Token = "0x4002867")]
			AudioSource,
			[Token(Token = "0x4002868")]
			CanvasGroup
		}

		[Token(Token = "0x4002850")]
		private const string SupportedComponents = "MeshRenderer, Sprite, Image, Text, Light, AudioSource, or CanvasGroup component.";

		[Token(Token = "0x4002851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("A GameObject with a MeshRenderer, Sprite, Image, Text, Light, AudioSource, or CanvasGroup component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Fade To or From value.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x4002853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Value to fade to. E.g., alpha if fading an image, volume if fading audio...")]
		public FsmFloat value;

		[Token(Token = "0x4002854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GameObject cachedGameObject;

		[Token(Token = "0x4002855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Component cachedComponent;

		[Token(Token = "0x4002856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private TargetType targetType;

		[Token(Token = "0x4002857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Renderer renderer;

		[Token(Token = "0x4002858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x4002859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Text text;

		[Token(Token = "0x400285A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Image image;

		[Token(Token = "0x400285B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Light light;

		[Token(Token = "0x400285C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x400285D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private AudioSource audioSource;

		[Token(Token = "0x400285E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float startValue;

		[Token(Token = "0x400285F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float endValue;

		[Token(Token = "0x17000384")]
		public TargetType type
		{
			[Token(Token = "0x6002A72")]
			[Address(RVA = "0x12EC6AC", Offset = "0x12EC6AC", VA = "0x12EC6AC")]
			get
			{
				return default(TargetType);
			}
		}

		[Token(Token = "0x6002A73")]
		[Address(RVA = "0x12EC6B4", Offset = "0x12EC6B4", VA = "0x12EC6B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A74")]
		[Address(RVA = "0x12EC70C", Offset = "0x12EC70C", VA = "0x12EC70C")]
		private void UpdateCache(GameObject go)
		{
		}

		[Token(Token = "0x6002A75")]
		[Address(RVA = "0x12ECA7C", Offset = "0x12ECA7C", VA = "0x12ECA7C")]
		private void FindComponent(params Type[] components)
		{
		}

		[Token(Token = "0x6002A76")]
		[Address(RVA = "0x12ECB5C", Offset = "0x12ECB5C", VA = "0x12ECB5C")]
		private void CheckCache()
		{
		}

		[Token(Token = "0x6002A77")]
		[Address(RVA = "0x12ECBF4", Offset = "0x12ECBF4", VA = "0x12ECBF4")]
		private void InitTarget()
		{
		}

		[Token(Token = "0x6002A78")]
		[Address(RVA = "0x12ED0BC", Offset = "0x12ED0BC", VA = "0x12ED0BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A79")]
		[Address(RVA = "0x12ED198", Offset = "0x12ED198", VA = "0x12ED198")]
		private float GetTargetFade()
		{
			return default(float);
		}

		[Token(Token = "0x6002A7A")]
		[Address(RVA = "0x12ED2A4", Offset = "0x12ED2A4", VA = "0x12ED2A4")]
		private void SetTargetFade(float fade)
		{
		}

		[Token(Token = "0x6002A7B")]
		[Address(RVA = "0x12ED480", Offset = "0x12ED480", VA = "0x12ED480", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A7C")]
		[Address(RVA = "0x12ED4F4", Offset = "0x12ED4F4", VA = "0x12ED4F4")]
		public TweenFade()
		{
		}
	}
	[Token(Token = "0x200087A")]
	[Tooltip("Tween a float variable using a custom easing function.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenFloat : TweenVariableBase<FsmFloat>
	{
		[Token(Token = "0x6002A7D")]
		[Address(RVA = "0x12ED4FC", Offset = "0x12ED4FC", VA = "0x12ED4FC", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002A7E")]
		[Address(RVA = "0x12ED5BC", Offset = "0x12ED5BC", VA = "0x12ED5BC", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A7F")]
		[Address(RVA = "0x12ED6C4", Offset = "0x12ED6C4", VA = "0x12ED6C4")]
		public TweenFloat()
		{
		}
	}
	[Token(Token = "0x200087B")]
	[Tooltip("Tween an integer variable using a custom easing function. NOTE: Tweening is performed on float values and then rounded to the integer value.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenInt : TweenVariableBase<FsmInt>
	{
		[Token(Token = "0x6002A80")]
		[Address(RVA = "0x12ED70C", Offset = "0x12ED70C", VA = "0x12ED70C", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002A81")]
		[Address(RVA = "0x12ED7CC", Offset = "0x12ED7CC", VA = "0x12ED7CC", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A82")]
		[Address(RVA = "0x12ED8F4", Offset = "0x12ED8F4", VA = "0x12ED8F4")]
		public TweenInt()
		{
		}
	}
	[Token(Token = "0x200087C")]
	[Tooltip("Tween a GameObject's position. Note: This action assumes that GameObject targets do not change during the tween.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenPosition : TweenComponentBase<Transform>
	{
		[Token(Token = "0x4002869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ActionSection("From")]
		[Title("Options")]
		[Tooltip("Setup where to tween from.")]
		public PositionOptions fromOption;

		[Token(Token = "0x400286A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Optionally use a GameObject as the from position.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x400286B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Position to tween from.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x400286C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[ActionSection("To")]
		[Title("Options")]
		[Tooltip("Setup where to tween from.")]
		public PositionOptions toOption;

		[Token(Token = "0x400286D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Optionally use a GameObject as the to position.")]
		public FsmGameObject toTarget;

		[Token(Token = "0x400286E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Position to tween to.")]
		public FsmVector3 toPosition;

		[NonSerialized]
		[Token(Token = "0x400286F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform transform;

		[NonSerialized]
		[Token(Token = "0x4002870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[NonSerialized]
		[Token(Token = "0x4002871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x17000385")]
		public Vector3 StartPosition
		{
			[Token(Token = "0x6002A83")]
			[Address(RVA = "0x12ED93C", Offset = "0x12ED93C", VA = "0x12ED93C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002A84")]
			[Address(RVA = "0x12ED94C", Offset = "0x12ED94C", VA = "0x12ED94C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public Vector3 EndPosition
		{
			[Token(Token = "0x6002A85")]
			[Address(RVA = "0x12ED95C", Offset = "0x12ED95C", VA = "0x12ED95C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002A86")]
			[Address(RVA = "0x12ED96C", Offset = "0x12ED96C", VA = "0x12ED96C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002A87")]
		[Address(RVA = "0x12ED97C", Offset = "0x12ED97C", VA = "0x12ED97C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A88")]
		[Address(RVA = "0x12EDA10", Offset = "0x12EDA10", VA = "0x12EDA10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A89")]
		[Address(RVA = "0x12EDB9C", Offset = "0x12EDB9C", VA = "0x12EDB9C")]
		private void InitStartPosition()
		{
		}

		[Token(Token = "0x6002A8A")]
		[Address(RVA = "0x12EDBF4", Offset = "0x12EDBF4", VA = "0x12EDBF4")]
		private void InitEndPosition()
		{
		}

		[Token(Token = "0x6002A8B")]
		[Address(RVA = "0x12EDC50", Offset = "0x12EDC50", VA = "0x12EDC50", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0x12EDD04", Offset = "0x12EDD04", VA = "0x12EDD04")]
		public TweenPosition()
		{
		}
	}
	[Token(Token = "0x200087D")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Punches a GameObject's position, rotation, or scale\u00a0and springs back to starting state")]
	public class TweenPunch : TweenComponentBase<Transform>
	{
		[Token(Token = "0x200087E")]
		public enum PunchType
		{
			[Token(Token = "0x400287E")]
			Position,
			[Token(Token = "0x400287F")]
			Rotation,
			[Token(Token = "0x4002880")]
			Scale
		}

		[Token(Token = "0x4002874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Punch position, rotation, or scale.")]
		public PunchType punchType;

		[Token(Token = "0x4002875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Punch magnitude.")]
		public FsmVector3 value;

		[Token(Token = "0x4002876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform transform;

		[Token(Token = "0x4002877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RectTransform rectTransform;

		[Token(Token = "0x4002878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 startVector3;

		[Token(Token = "0x4002879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector3 endVector3;

		[Token(Token = "0x400287A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Quaternion startRotation;

		[Token(Token = "0x400287B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Quaternion midRotation;

		[Token(Token = "0x400287C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion endRotation;

		[Token(Token = "0x6002A8D")]
		[Address(RVA = "0x12EDD4C", Offset = "0x12EDD4C", VA = "0x12EDD4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A8E")]
		[Address(RVA = "0x12EDDA8", Offset = "0x12EDDA8", VA = "0x12EDDA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A8F")]
		[Address(RVA = "0x12EE194", Offset = "0x12EE194", VA = "0x12EE194", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A90")]
		[Address(RVA = "0x12EE4C8", Offset = "0x12EE4C8", VA = "0x12EE4C8")]
		public TweenPunch()
		{
		}
	}
	[Token(Token = "0x200087F")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a Quaternion variable using a custom easing function.")]
	public class TweenQuaternion : TweenVariableBase<FsmQuaternion>
	{
		[Token(Token = "0x4002881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Type of interpolation. Linear is faster but looks worse if the rotations are far apart.")]
		[DisplayOrder(1)]
		public RotationInterpolation interpolation;

		[Token(Token = "0x6002A91")]
		[Address(RVA = "0x12EE510", Offset = "0x12EE510", VA = "0x12EE510", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002A92")]
		[Address(RVA = "0x12EE658", Offset = "0x12EE658", VA = "0x12EE658", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A93")]
		[Address(RVA = "0x12EE70C", Offset = "0x12EE70C", VA = "0x12EE70C")]
		public TweenQuaternion()
		{
		}
	}
	[Token(Token = "0x2000880")]
	[Tooltip("Tween a Rect variable using a custom easing function.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenRect : TweenVariableBase<FsmRect>
	{
		[Token(Token = "0x6002A94")]
		[Address(RVA = "0x12EE754", Offset = "0x12EE754", VA = "0x12EE754", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002A95")]
		[Address(RVA = "0x12EE8DC", Offset = "0x12EE8DC", VA = "0x12EE8DC", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002A96")]
		[Address(RVA = "0x12EEA54", Offset = "0x12EEA54", VA = "0x12EEA54")]
		public TweenRect()
		{
		}
	}
	[Token(Token = "0x2000881")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a GameObject's rotation.")]
	public class TweenRotation : TweenComponentBase<Transform>
	{
		[Token(Token = "0x4002882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Setup where to tween from.")]
		[ActionSection("From")]
		[Title("Options")]
		public RotationOptions fromOptions;

		[Token(Token = "0x4002883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Use this GameObject's rotation.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x4002884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Tween from this rotation")]
		public FsmVector3 fromRotation;

		[Token(Token = "0x4002885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[ActionSection("To")]
		[Title("Options")]
		[Tooltip("Setup where to tween to.")]
		public RotationOptions toOptions;

		[Token(Token = "0x4002886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Use this GameObject's rotation")]
		public FsmGameObject toTarget;

		[Token(Token = "0x4002887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Tween to this rotation.")]
		public FsmVector3 toRotation;

		[Token(Token = "0x4002888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform transform;

		[Token(Token = "0x4002889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[Token(Token = "0x400288A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x400288D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Quaternion midRotation;

		[Token(Token = "0x17000387")]
		public Quaternion StartRotation
		{
			[Token(Token = "0x6002A97")]
			[Address(RVA = "0x12EEA9C", Offset = "0x12EEA9C", VA = "0x12EEA9C")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6002A98")]
			[Address(RVA = "0x12EEAB0", Offset = "0x12EEAB0", VA = "0x12EEAB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000388")]
		public Quaternion EndRotation
		{
			[Token(Token = "0x6002A99")]
			[Address(RVA = "0x12EEAC4", Offset = "0x12EEAC4", VA = "0x12EEAC4")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6002A9A")]
			[Address(RVA = "0x12EEAD8", Offset = "0x12EEAD8", VA = "0x12EEAD8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002A9B")]
		[Address(RVA = "0x12EEAEC", Offset = "0x12EEAEC", VA = "0x12EEAEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002A9C")]
		[Address(RVA = "0x12EEB80", Offset = "0x12EEB80", VA = "0x12EEB80", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002A9D")]
		[Address(RVA = "0x12EED04", Offset = "0x12EED04", VA = "0x12EED04")]
		private void InitStartRotation()
		{
		}

		[Token(Token = "0x6002A9E")]
		[Address(RVA = "0x12EED60", Offset = "0x12EED60", VA = "0x12EED60")]
		private void InitEndRotation()
		{
		}

		[Token(Token = "0x6002A9F")]
		[Address(RVA = "0x12EEE0C", Offset = "0x12EEE0C", VA = "0x12EEE0C")]
		private void UpdateStartRotation()
		{
		}

		[Token(Token = "0x6002AA0")]
		[Address(RVA = "0x12EEE20", Offset = "0x12EEE20", VA = "0x12EEE20")]
		private void UpdateEndRotation()
		{
		}

		[Token(Token = "0x6002AA1")]
		[Address(RVA = "0x12EEE34", Offset = "0x12EEE34", VA = "0x12EEE34", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AA2")]
		[Address(RVA = "0x12EEE78", Offset = "0x12EEE78", VA = "0x12EEE78", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002AA3")]
		[Address(RVA = "0x12EEF44", Offset = "0x12EEF44", VA = "0x12EEF44")]
		public TweenRotation()
		{
		}
	}
	[Token(Token = "0x2000882")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a GameObject's scale.")]
	public class TweenScale : TweenComponentBase<Transform>
	{
		[Token(Token = "0x400288E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[ActionSection("From")]
		[Title("Options")]
		[Tooltip("Setup where to tween from.")]
		public ScaleOptions fromOptions;

		[Token(Token = "0x400288F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Tween from this Target GameObject.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x4002890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Tween from this Scale.")]
		public FsmVector3 fromScale;

		[Token(Token = "0x4002891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Setup where to tween to.")]
		[ActionSection("To")]
		[Title("Options")]
		public ScaleOptions toOptions;

		[Token(Token = "0x4002892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Tween to this Target GameObject.")]
		public FsmGameObject toTarget;

		[Token(Token = "0x4002893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Tween to this Scale.")]
		public FsmVector3 toScale;

		[Token(Token = "0x4002894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform transform;

		[Token(Token = "0x4002895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[Token(Token = "0x4002896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x17000389")]
		public Vector3 StartScale
		{
			[Token(Token = "0x6002AA4")]
			[Address(RVA = "0x12EEF8C", Offset = "0x12EEF8C", VA = "0x12EEF8C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002AA5")]
			[Address(RVA = "0x12EEF9C", Offset = "0x12EEF9C", VA = "0x12EEF9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700038A")]
		public Vector3 EndScale
		{
			[Token(Token = "0x6002AA6")]
			[Address(RVA = "0x12EEFAC", Offset = "0x12EEFAC", VA = "0x12EEFAC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002AA7")]
			[Address(RVA = "0x12EEFBC", Offset = "0x12EEFBC", VA = "0x12EEFBC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002AA8")]
		[Address(RVA = "0x12EEFCC", Offset = "0x12EEFCC", VA = "0x12EEFCC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AA9")]
		[Address(RVA = "0x12EF124", Offset = "0x12EF124", VA = "0x12EF124", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AAA")]
		[Address(RVA = "0x12EF2A8", Offset = "0x12EF2A8", VA = "0x12EF2A8")]
		private void InitStartScale()
		{
		}

		[Token(Token = "0x6002AAB")]
		[Address(RVA = "0x12EF350", Offset = "0x12EF350", VA = "0x12EF350")]
		private void InitEndScale()
		{
		}

		[Token(Token = "0x6002AAC")]
		[Address(RVA = "0x12EF3FC", Offset = "0x12EF3FC", VA = "0x12EF3FC")]
		private void UpdateStartScale()
		{
		}

		[Token(Token = "0x6002AAD")]
		[Address(RVA = "0x12EF418", Offset = "0x12EF418", VA = "0x12EF418")]
		private void UpdateEndScale()
		{
		}

		[Token(Token = "0x6002AAE")]
		[Address(RVA = "0x12EF434", Offset = "0x12EF434", VA = "0x12EF434", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AAF")]
		[Address(RVA = "0x12EF478", Offset = "0x12EF478", VA = "0x12EF478", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002AB0")]
		[Address(RVA = "0x12EF510", Offset = "0x12EF510", VA = "0x12EF510")]
		public TweenScale()
		{
		}
	}
	[Token(Token = "0x2000883")]
	[Tooltip("Tween position of UI GameObjects.")]
	[ActionTarget(typeof(Camera), "", false)]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenUiPosition : TweenComponentBase<RectTransform>
	{
		[Token(Token = "0x4002899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Title("Options")]
		[Tooltip("Setup where to tween from.")]
		[ActionSection("From")]
		public UiPositionOptions fromOption;

		[Token(Token = "0x400289A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Optionally use a GameObject as the from position.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x400289B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("If a GameObject is specified, use this as an offset. Otherwise this is a world position.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x400289C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Setup where to tween from.")]
		[Title("Options")]
		[ActionSection("To")]
		public UiPositionOptions toOption;

		[Token(Token = "0x400289D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Optionally use a GameObject as the to position.")]
		public FsmGameObject toTarget;

		[Token(Token = "0x400289E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("If a GameObject is specified, use this as an offset. Otherwise this is a world position.")]
		public FsmVector3 toPosition;

		[NonSerialized]
		[Token(Token = "0x400289F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RectTransform transform;

		[NonSerialized]
		[Token(Token = "0x40028A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform fromTransform;

		[NonSerialized]
		[Token(Token = "0x40028A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform toTransform;

		[Token(Token = "0x1700038B")]
		public Vector3 StartPosition
		{
			[Token(Token = "0x6002AB1")]
			[Address(RVA = "0x12EF558", Offset = "0x12EF558", VA = "0x12EF558")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002AB2")]
			[Address(RVA = "0x12EF568", Offset = "0x12EF568", VA = "0x12EF568")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700038C")]
		public Vector3 EndPosition
		{
			[Token(Token = "0x6002AB3")]
			[Address(RVA = "0x12EF578", Offset = "0x12EF578", VA = "0x12EF578")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002AB4")]
			[Address(RVA = "0x12EF588", Offset = "0x12EF588", VA = "0x12EF588")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002AB5")]
		[Address(RVA = "0x12EF598", Offset = "0x12EF598", VA = "0x12EF598", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AB6")]
		[Address(RVA = "0x12EF62C", Offset = "0x12EF62C", VA = "0x12EF62C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AB7")]
		[Address(RVA = "0x12EF7B8", Offset = "0x12EF7B8", VA = "0x12EF7B8")]
		private void InitStartPosition()
		{
		}

		[Token(Token = "0x6002AB8")]
		[Address(RVA = "0x12EF810", Offset = "0x12EF810", VA = "0x12EF810")]
		private void InitEndPosition()
		{
		}

		[Token(Token = "0x6002AB9")]
		[Address(RVA = "0x12EF86C", Offset = "0x12EF86C", VA = "0x12EF86C", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002ABA")]
		[Address(RVA = "0x12EF920", Offset = "0x12EF920", VA = "0x12EF920")]
		public TweenUiPosition()
		{
		}
	}
	[Token(Token = "0x2000884")]
	[Tooltip("Tween the Width and Height of a UI object. NOTE: The size is also influenced by anchors!")]
	[ActionTarget(typeof(RectTransform), "", false)]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenUiSize : TweenComponentBase<RectTransform>
	{
		[Token(Token = "0x40028A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Tween To/From Target Size.")]
		public TweenDirection tweenDirection;

		[Token(Token = "0x40028A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Target Size. NOTE: The size is also influenced by anchors!")]
		public FsmVector2 targetSize;

		[Token(Token = "0x40028A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RectTransform rectTransform;

		[Token(Token = "0x40028A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector2 fromSize;

		[Token(Token = "0x40028A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector2 toSize;

		[Token(Token = "0x6002ABB")]
		[Address(RVA = "0x12EF968", Offset = "0x12EF968", VA = "0x12EF968", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002ABC")]
		[Address(RVA = "0x12EF9C4", Offset = "0x12EF9C4", VA = "0x12EF9C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002ABD")]
		[Address(RVA = "0x12EFA88", Offset = "0x12EFA88", VA = "0x12EFA88", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002ABE")]
		[Address(RVA = "0x12EFB04", Offset = "0x12EFB04", VA = "0x12EFB04")]
		public TweenUiSize()
		{
		}
	}
	[Token(Token = "0x2000885")]
	[Tooltip("Tween a Vector2 variable using a custom easing function.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenVector2 : TweenVariableBase<FsmVector2>
	{
		[Token(Token = "0x6002ABF")]
		[Address(RVA = "0x12EFB4C", Offset = "0x12EFB4C", VA = "0x12EFB4C", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002AC0")]
		[Address(RVA = "0x12EFC0C", Offset = "0x12EFC0C", VA = "0x12EFC0C", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002AC1")]
		[Address(RVA = "0x12EFD34", Offset = "0x12EFD34", VA = "0x12EFD34")]
		public TweenVector2()
		{
		}
	}
	[Token(Token = "0x2000886")]
	[Tooltip("Tween a Vector3 variable using a custom easing function.")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenVector3 : TweenVariableBase<FsmVector3>
	{
		[Token(Token = "0x6002AC2")]
		[Address(RVA = "0x12EFD7C", Offset = "0x12EFD7C", VA = "0x12EFD7C", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6002AC3")]
		[Address(RVA = "0x12EFE54", Offset = "0x12EFE54", VA = "0x12EFE54", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6002AC4")]
		[Address(RVA = "0x12EFF94", Offset = "0x12EFF94", VA = "0x12EFF94")]
		public TweenVector3()
		{
		}
	}
	[Token(Token = "0x2000887")]
	[Tooltip("Enable or disable Canvas Raycasting. Optionally reset on state exit")]
	[ActionCategory(ActionCategory.UI)]
	public class UiCanvasEnableRaycast : ComponentAction<PlayMakerCanvasRaycastFilterProxy>
	{
		[Token(Token = "0x40028A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject to enable or disable Canvas Raycasting on.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40028AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Enable/disable raycasting. Uncheck to disable.")]
		public FsmBool enableRaycasting;

		[Token(Token = "0x40028AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40028AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40028AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private PlayMakerCanvasRaycastFilterProxy raycastFilterProxy;

		[Token(Token = "0x40028AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool originalValue;

		[Token(Token = "0x6002AC5")]
		[Address(RVA = "0x12EFFDC", Offset = "0x12EFFDC", VA = "0x12EFFDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AC6")]
		[Address(RVA = "0x12F0028", Offset = "0x12F0028", VA = "0x12F0028", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002AC7")]
		[Address(RVA = "0x12F00F4", Offset = "0x12F00F4", VA = "0x12F00F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AC8")]
		[Address(RVA = "0x12F0234", Offset = "0x12F0234", VA = "0x12F0234", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AC9")]
		[Address(RVA = "0x12F01A8", Offset = "0x12F01A8", VA = "0x12F01A8")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002ACA")]
		[Address(RVA = "0x12F0238", Offset = "0x12F0238", VA = "0x12F0238", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002ACB")]
		[Address(RVA = "0x12F02C8", Offset = "0x12F02C8", VA = "0x12F02C8")]
		public UiCanvasEnableRaycast()
		{
		}
	}
	[Token(Token = "0x2000888")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Force all canvases to update their content.\nCode that relies on up-to-date layout or content can call this method to ensure it before executing code that relies on it.")]
	public class UiCanvasForceUpdateCanvases : FsmStateAction
	{
		[Token(Token = "0x6002ACC")]
		[Address(RVA = "0x12F0310", Offset = "0x12F0310", VA = "0x12F0310", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002ACD")]
		[Address(RVA = "0x12F0330", Offset = "0x12F0330", VA = "0x12F0330")]
		public UiCanvasForceUpdateCanvases()
		{
		}
	}
	[Token(Token = "0x2000889")]
	[Tooltip("Set Group Alpha.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiCanvasGroupSetAlpha : ComponentAction<CanvasGroup>
	{
		[Token(Token = "0x40028AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CanvasGroup))]
		[RequiredField]
		[Tooltip("The GameObject with a UI CanvasGroup component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40028B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The alpha of the UI component.")]
		public FsmFloat alpha;

		[Token(Token = "0x40028B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40028B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40028B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CanvasGroup component;

		[Token(Token = "0x40028B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6002ACE")]
		[Address(RVA = "0x12F0338", Offset = "0x12F0338", VA = "0x12F0338", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002ACF")]
		[Address(RVA = "0x12F0378", Offset = "0x12F0378", VA = "0x12F0378", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AD0")]
		[Address(RVA = "0x12F04C4", Offset = "0x12F04C4", VA = "0x12F04C4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AD1")]
		[Address(RVA = "0x12F042C", Offset = "0x12F042C", VA = "0x12F042C")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002AD2")]
		[Address(RVA = "0x12F04C8", Offset = "0x12F04C8", VA = "0x12F04C8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002AD3")]
		[Address(RVA = "0x12F0564", Offset = "0x12F0564", VA = "0x12F0564")]
		public UiCanvasGroupSetAlpha()
		{
		}
	}
	[Token(Token = "0x200088A")]
	[Tooltip("Sets properties of a UI CanvasGroup component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiCanvasGroupSetProperties : ComponentAction<CanvasGroup>
	{
		[Token(Token = "0x40028B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CanvasGroup))]
		[RequiredField]
		[Tooltip("The GameObject with the UI CanvasGroup component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40028B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("Canvas group alpha. Ranges from 0.0 to 1.0.")]
		public FsmFloat alpha;

		[Token(Token = "0x40028B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Is the group interactable (are the elements beneath the group enabled). Leave as None for no effect")]
		public FsmBool interactable;

		[Token(Token = "0x40028B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Does this group block raycasting (allow collision). Leave as None for no effect")]
		public FsmBool blocksRaycasts;

		[Token(Token = "0x40028B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Should the group ignore parent groups? Leave as None for no effect")]
		public FsmBool ignoreParentGroup;

		[Token(Token = "0x40028BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Reset when exiting this state. Leave as None for no effect")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40028BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40028BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CanvasGroup component;

		[Token(Token = "0x40028BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float originalAlpha;

		[Token(Token = "0x40028BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool originalInteractable;

		[Token(Token = "0x40028BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool originalBlocksRaycasts;

		[Token(Token = "0x40028C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool originalIgnoreParentGroup;

		[Token(Token = "0x6002AD4")]
		[Address(RVA = "0x12F05AC", Offset = "0x12F05AC", VA = "0x12F05AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AD5")]
		[Address(RVA = "0x12F06E8", Offset = "0x12F06E8", VA = "0x12F06E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AD6")]
		[Address(RVA = "0x12F098C", Offset = "0x12F098C", VA = "0x12F098C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AD7")]
		[Address(RVA = "0x12F082C", Offset = "0x12F082C", VA = "0x12F082C")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002AD8")]
		[Address(RVA = "0x12F0990", Offset = "0x12F0990", VA = "0x12F0990", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002AD9")]
		[Address(RVA = "0x12F0AB8", Offset = "0x12F0AB8", VA = "0x12F0AB8")]
		public UiCanvasGroupSetProperties()
		{
		}
	}
	[Token(Token = "0x200088B")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Get the ScaleFactor of a CanvasScaler.")]
	public class UiCanvasScalerGetScaleFactor : ComponentAction<CanvasScaler>
	{
		[Token(Token = "0x40028C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CanvasScaler))]
		[Tooltip("The GameObject with a UI CanvasScaler component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40028C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The scaleFactor of the CanvasScaler component.")]
		[RequiredField]
		public FsmFloat scaleFactor;

		[Token(Token = "0x40028C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40028C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CanvasScaler component;

		[Token(Token = "0x6002ADA")]
		[Address(RVA = "0x12F0B00", Offset = "0x12F0B00", VA = "0x12F0B00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002ADB")]
		[Address(RVA = "0x12F0B30", Offset = "0x12F0B30", VA = "0x12F0B30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002ADC")]
		[Address(RVA = "0x12F0C54", Offset = "0x12F0C54", VA = "0x12F0C54", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002ADD")]
		[Address(RVA = "0x12F0BD0", Offset = "0x12F0BD0", VA = "0x12F0BD0")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002ADE")]
		[Address(RVA = "0x12F0C58", Offset = "0x12F0C58", VA = "0x12F0C58")]
		public UiCanvasScalerGetScaleFactor()
		{
		}
	}
	[Token(Token = "0x200088C")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the ScaleFactor of a CanvasScaler.")]
	public class UiCanvasScalerSetScaleFactor : ComponentAction<CanvasScaler>
	{
		[Token(Token = "0x40028C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CanvasScaler))]
		[RequiredField]
		[Tooltip("The GameObject with a UI CanvasScaler component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40028C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The scaleFactor of the UI CanvasScaler.")]
		[RequiredField]
		public FsmFloat scaleFactor;

		[Token(Token = "0x40028C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40028C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CanvasScaler component;

		[Token(Token = "0x6002ADF")]
		[Address(RVA = "0x12F0CA0", Offset = "0x12F0CA0", VA = "0x12F0CA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AE0")]
		[Address(RVA = "0x12F0CD0", Offset = "0x12F0CD0", VA = "0x12F0CD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AE1")]
		[Address(RVA = "0x12F0E08", Offset = "0x12F0E08", VA = "0x12F0E08", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AE2")]
		[Address(RVA = "0x12F0D70", Offset = "0x12F0D70", VA = "0x12F0D70")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002AE3")]
		[Address(RVA = "0x12F0E0C", Offset = "0x12F0E0C", VA = "0x12F0E0C")]
		public UiCanvasScalerSetScaleFactor()
		{
		}
	}
	[Token(Token = "0x200088D")]
	public abstract class EventTriggerActionBase : ComponentAction<EventTrigger>
	{
		[Token(Token = "0x40028C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[DisplayOrder(0)]
		[RequiredField]
		[Tooltip("The GameObject with the UI component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40028CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[DisplayOrder(1)]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x40028CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected EventTrigger trigger;

		[Token(Token = "0x40028CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected EventTrigger.Entry entry;

		[Token(Token = "0x6002AE4")]
		[Address(RVA = "0x12F0E54", Offset = "0x12F0E54", VA = "0x12F0E54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AE5")]
		[Address(RVA = "0x12F0E7C", Offset = "0x12F0E7C", VA = "0x12F0E7C")]
		protected void Init(EventTriggerType eventTriggerType, UnityAction<BaseEventData> call)
		{
		}

		[Token(Token = "0x6002AE6")]
		[Address(RVA = "0x12F101C", Offset = "0x12F101C", VA = "0x12F101C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002AE7")]
		[Address(RVA = "0x12F10F0", Offset = "0x12F10F0", VA = "0x12F10F0")]
		protected EventTriggerActionBase()
		{
		}
	}
	[Token(Token = "0x200088E")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("The eventType will be executed on all components on the GameObject that can handle it.")]
	public class UiEventSystemCurrentRayCastAll : FsmStateAction
	{
		[Token(Token = "0x40028CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The ScreenPosition in pixels")]
		public FsmVector3 screenPosition;

		[Token(Token = "0x40028CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The ScreenPosition in a Vector2")]
		public FsmVector2 orScreenPosition2d;

		[Token(Token = "0x40028CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		[UIHint(UIHint.Variable)]
		[Tooltip("GameObjects hit by the raycast")]
		public FsmArray gameObjectList;

		[Token(Token = "0x40028D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Number of hits")]
		[UIHint(UIHint.Variable)]
		public FsmInt hitCount;

		[Token(Token = "0x40028D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x40028D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PointerEventData pointer;

		[Token(Token = "0x40028D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<RaycastResult> raycastResults;

		[Token(Token = "0x6002AE8")]
		[Address(RVA = "0x12F1138", Offset = "0x12F1138", VA = "0x12F1138", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AE9")]
		[Address(RVA = "0x12F11E0", Offset = "0x12F11E0", VA = "0x12F11E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AEA")]
		[Address(RVA = "0x12F14F8", Offset = "0x12F14F8", VA = "0x12F14F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AEB")]
		[Address(RVA = "0x12F120C", Offset = "0x12F120C", VA = "0x12F120C")]
		private void ExecuteRayCastAll()
		{
		}

		[Token(Token = "0x6002AEC")]
		[Address(RVA = "0x12F14FC", Offset = "0x12F14FC", VA = "0x12F14FC")]
		public UiEventSystemCurrentRayCastAll()
		{
		}
	}
	[Token(Token = "0x200088F")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("The eventType will be executed on all components on the GameObject that can handle it.")]
	public class UiEventSystemExecuteEvent : FsmStateAction
	{
		[Token(Token = "0x2000890")]
		public enum EventHandlers
		{
			[Token(Token = "0x40028DA")]
			Submit,
			[Token(Token = "0x40028DB")]
			beginDrag,
			[Token(Token = "0x40028DC")]
			cancel,
			[Token(Token = "0x40028DD")]
			deselectHandler,
			[Token(Token = "0x40028DE")]
			dragHandler,
			[Token(Token = "0x40028DF")]
			dropHandler,
			[Token(Token = "0x40028E0")]
			endDragHandler,
			[Token(Token = "0x40028E1")]
			initializePotentialDrag,
			[Token(Token = "0x40028E2")]
			pointerClickHandler,
			[Token(Token = "0x40028E3")]
			pointerDownHandler,
			[Token(Token = "0x40028E4")]
			pointerEnterHandler,
			[Token(Token = "0x40028E5")]
			pointerExitHandler,
			[Token(Token = "0x40028E6")]
			pointerUpHandler,
			[Token(Token = "0x40028E7")]
			scrollHandler,
			[Token(Token = "0x40028E8")]
			submitHandler,
			[Token(Token = "0x40028E9")]
			updateSelectedHandler
		}

		[Token(Token = "0x40028D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with  an IEventSystemHandler component (a UI button for example).")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40028D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(EventHandlers))]
		[Tooltip("The Type of handler to execute")]
		public FsmEnum eventHandler;

		[Token(Token = "0x40028D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event Sent if execution was possible on GameObject")]
		public FsmEvent success;

		[Token(Token = "0x40028D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event Sent if execution was NOT possible on GameObject because it can not handle the eventHandler selected")]
		public FsmEvent canNotHandleEvent;

		[Token(Token = "0x40028D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x6002AED")]
		[Address(RVA = "0x12F1584", Offset = "0x12F1584", VA = "0x12F1584", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AEE")]
		[Address(RVA = "0x12F1624", Offset = "0x12F1624", VA = "0x12F1624", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AEF")]
		[Address(RVA = "0x12F1674", Offset = "0x12F1674", VA = "0x12F1674")]
		private bool ExecuteEvent()
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF0")]
		[Address(RVA = "0x12F24E4", Offset = "0x12F24E4", VA = "0x12F24E4")]
		public UiEventSystemExecuteEvent()
		{
		}
	}
	[Token(Token = "0x2000891")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets pointer data on the last System Event.\nHINT: Use {{Hide Unused}} in the {{State Inspector}} to hide the unused parameters after selecting the ones you need.")]
	public class UiGetLastPointerDataInfo : FsmStateAction
	{
		[Token(Token = "0x40028EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PointerEventData lastPointerEventData;

		[Token(Token = "0x40028EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Number of clicks in a row.")]
		[UIHint(UIHint.Variable)]
		public FsmInt clickCount;

		[Token(Token = "0x40028EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The last time a click event was sent.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat clickTime;

		[Token(Token = "0x40028ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Pointer delta since last update.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 delta;

		[Token(Token = "0x40028EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Is a drag operation currently occuring.")]
		[UIHint(UIHint.Variable)]
		public FsmBool dragging;

		[Token(Token = "0x40028EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The InputButton for this event.")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(PointerEventData.InputButton))]
		public FsmEnum inputButton;

		[Token(Token = "0x40028F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the pointer being pressed? (Not documented by Unity)")]
		public FsmBool eligibleForClick;

		[Token(Token = "0x40028F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The camera associated with the last OnPointerEnter event.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject enterEventCamera;

		[Token(Token = "0x40028F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The camera associated with the last OnPointerPress event.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject pressEventCamera;

		[Token(Token = "0x40028F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the pointer moving.")]
		public FsmBool isPointerMoving;

		[Token(Token = "0x40028F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is scroll being used on the input device.")]
		public FsmBool isScrolling;

		[Token(Token = "0x40028F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The GameObject for the last press event.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject lastPress;

		[Token(Token = "0x40028F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The object that is receiving OnDrag.")]
		public FsmGameObject pointerDrag;

		[Token(Token = "0x40028F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The object that received 'OnPointerEnter'.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject pointerEnter;

		[Token(Token = "0x40028F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Id of the pointer (touch id).")]
		public FsmInt pointerId;

		[Token(Token = "0x40028F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The GameObject that received the OnPointerDown.")]
		public FsmGameObject pointerPress;

		[Token(Token = "0x40028FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Current pointer position.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 position;

		[Token(Token = "0x40028FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Position of the press.")]
		public FsmVector2 pressPosition;

		[Token(Token = "0x40028FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The object that the press happened on even if it can not handle the press event.")]
		public FsmGameObject rawPointerPress;

		[Token(Token = "0x40028FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The amount of scroll since the last update.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 scrollDelta;

		[Token(Token = "0x40028FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the event used?")]
		public FsmBool used;

		[Token(Token = "0x40028FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Should a drag threshold be used?")]
		public FsmBool useDragThreshold;

		[Token(Token = "0x4002900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The normal of the last raycast in world coordinates.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 worldNormal;

		[Token(Token = "0x4002901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("The world position of the last raycast.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 worldPosition;

		[Token(Token = "0x6002AF1")]
		[Address(RVA = "0x12F24EC", Offset = "0x12F24EC", VA = "0x12F24EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AF2")]
		[Address(RVA = "0x12F26BC", Offset = "0x12F26BC", VA = "0x12F26BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AF3")]
		[Address(RVA = "0x12F2C90", Offset = "0x12F2C90", VA = "0x12F2C90")]
		public UiGetLastPointerDataInfo()
		{
		}
	}
	[Token(Token = "0x2000892")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets pointer data Input Button on the last System event.")]
	public class UiGetLastPointerEventDataInputButton : FsmStateAction
	{
		[Token(Token = "0x4002902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the Input Button pressed (Left, Right, Middle)")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(PointerEventData.InputButton))]
		public FsmEnum inputButton;

		[Token(Token = "0x4002903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if Left Button clicked.")]
		public FsmEvent leftClick;

		[Token(Token = "0x4002904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if Middle Button clicked.")]
		public FsmEvent middleClick;

		[Token(Token = "0x4002905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if Right Button clicked.")]
		public FsmEvent rightClick;

		[Token(Token = "0x6002AF4")]
		[Address(RVA = "0x12F2C98", Offset = "0x12F2C98", VA = "0x12F2C98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AF5")]
		[Address(RVA = "0x12F2D38", Offset = "0x12F2D38", VA = "0x12F2D38", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AF6")]
		[Address(RVA = "0x12F2D54", Offset = "0x12F2D54", VA = "0x12F2D54")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002AF7")]
		[Address(RVA = "0x12F2EA0", Offset = "0x12F2EA0", VA = "0x12F2EA0")]
		public UiGetLastPointerEventDataInputButton()
		{
		}
	}
	[Token(Token = "0x2000893")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Returns the EventSystem's currently select GameObject.")]
	public class UiGetSelectedGameObject : FsmStateAction
	{
		[Token(Token = "0x4002906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The currently selected GameObject")]
		public FsmGameObject StoreGameObject;

		[Token(Token = "0x4002907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when the selected GameObject changes")]
		public FsmEvent ObjectChangedEvent;

		[Token(Token = "0x4002908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If true, each frame will check the currently selected GameObject")]
		public bool everyFrame;

		[Token(Token = "0x4002909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject lastGameObject;

		[Token(Token = "0x6002AF8")]
		[Address(RVA = "0x12F2EA8", Offset = "0x12F2EA8", VA = "0x12F2EA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AF9")]
		[Address(RVA = "0x12F2ECC", Offset = "0x12F2ECC", VA = "0x12F2ECC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AFA")]
		[Address(RVA = "0x12F2F74", Offset = "0x12F2F74", VA = "0x12F2F74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002AFB")]
		[Address(RVA = "0x12F2F00", Offset = "0x12F2F00", VA = "0x12F2F00")]
		private void GetCurrentSelectedGameObject()
		{
		}

		[Token(Token = "0x6002AFC")]
		[Address(RVA = "0x12F3034", Offset = "0x12F3034", VA = "0x12F3034")]
		public UiGetSelectedGameObject()
		{
		}
	}
	[Token(Token = "0x2000894")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Checks if Pointer is over a UI object, optionally takes a pointer ID, otherwise uses the current event.")]
	public class UiIsPointerOverUiObject : FsmStateAction
	{
		[Token(Token = "0x400290A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Optional PointerId. Leave as None to use the current event")]
		public FsmInt pointerId;

		[Token(Token = "0x400290B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send when the Pointer is over an UI object.")]
		public FsmEvent pointerOverUI;

		[Token(Token = "0x400290C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send when the Pointer is NOT over an UI object.")]
		public FsmEvent pointerNotOverUI;

		[Token(Token = "0x400290D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store if the pointer is over a UI object in a Bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPointerOverUI;

		[Token(Token = "0x400290E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002AFD")]
		[Address(RVA = "0x12F303C", Offset = "0x12F303C", VA = "0x12F303C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002AFE")]
		[Address(RVA = "0x12F30E4", Offset = "0x12F30E4", VA = "0x12F30E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002AFF")]
		[Address(RVA = "0x12F329C", Offset = "0x12F329C", VA = "0x12F329C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002B00")]
		[Address(RVA = "0x12F3110", Offset = "0x12F3110", VA = "0x12F3110")]
		private void DoCheckPointer()
		{
		}

		[Token(Token = "0x6002B01")]
		[Address(RVA = "0x12F32A0", Offset = "0x12F32A0", VA = "0x12F32A0")]
		public UiIsPointerOverUiObject()
		{
		}
	}
	[Token(Token = "0x2000895")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when user starts to drag a GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnBeginDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400290F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnBeginDrag is called")]
		public FsmEvent onBeginDragEvent;

		[Token(Token = "0x6002B02")]
		[Address(RVA = "0x12F32A8", Offset = "0x12F32A8", VA = "0x12F32A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B03")]
		[Address(RVA = "0x12F32E0", Offset = "0x12F32E0", VA = "0x12F32E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B04")]
		[Address(RVA = "0x12F3364", Offset = "0x12F3364", VA = "0x12F3364")]
		private void OnBeginDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B05")]
		[Address(RVA = "0x12F3464", Offset = "0x12F3464", VA = "0x12F3464")]
		public UiOnBeginDragEvent()
		{
		}
	}
	[Token(Token = "0x2000896")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnCancel is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnCancelEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnCancelEvent is called")]
		public FsmEvent onCancelEvent;

		[Token(Token = "0x6002B06")]
		[Address(RVA = "0x12F3468", Offset = "0x12F3468", VA = "0x12F3468", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B07")]
		[Address(RVA = "0x12F3490", Offset = "0x12F3490", VA = "0x12F3490", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B08")]
		[Address(RVA = "0x12F3514", Offset = "0x12F3514", VA = "0x12F3514")]
		private void OnCancelDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B09")]
		[Address(RVA = "0x12F3614", Offset = "0x12F3614", VA = "0x12F3614")]
		public UiOnCancelEvent()
		{
		}
	}
	[Token(Token = "0x2000897")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnDeselect is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnDeselectEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnDeselectEvent is called")]
		public FsmEvent onDeselectEvent;

		[Token(Token = "0x6002B0A")]
		[Address(RVA = "0x12F3618", Offset = "0x12F3618", VA = "0x12F3618", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B0B")]
		[Address(RVA = "0x12F3650", Offset = "0x12F3650", VA = "0x12F3650", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B0C")]
		[Address(RVA = "0x12F36D4", Offset = "0x12F36D4", VA = "0x12F36D4")]
		private void OnDeselectDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B0D")]
		[Address(RVA = "0x12F37D4", Offset = "0x12F37D4", VA = "0x12F37D4")]
		public UiOnDeselectEvent()
		{
		}
	}
	[Token(Token = "0x2000898")]
	[Tooltip("Sends event when OnDrag is called on the GameObject. Warning this event is sent every frame while dragging.\n Use GetLastPointerDataInfo action to get info from the event.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnDrag is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onDragEvent;

		[Token(Token = "0x6002B0E")]
		[Address(RVA = "0x12F37D8", Offset = "0x12F37D8", VA = "0x12F37D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B0F")]
		[Address(RVA = "0x12F3810", Offset = "0x12F3810", VA = "0x12F3810", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B10")]
		[Address(RVA = "0x12F3894", Offset = "0x12F3894", VA = "0x12F3894")]
		private void OnDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B11")]
		[Address(RVA = "0x12F3994", Offset = "0x12F3994", VA = "0x12F3994")]
		public UiOnDragEvent()
		{
		}
	}
	[Token(Token = "0x2000899")]
	[Tooltip("Sends event when OnDrop is called on the GameObject. Warning this event is sent everyframe while dragging.\n Use GetLastPointerDataInfo action to get info from the event.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnDropEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnDrop is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onDropEvent;

		[Token(Token = "0x6002B12")]
		[Address(RVA = "0x12F3998", Offset = "0x12F3998", VA = "0x12F3998", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B13")]
		[Address(RVA = "0x12F39D0", Offset = "0x12F39D0", VA = "0x12F39D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B14")]
		[Address(RVA = "0x12F3A54", Offset = "0x12F3A54", VA = "0x12F3A54")]
		private void OnDropDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B15")]
		[Address(RVA = "0x12F3B54", Offset = "0x12F3B54", VA = "0x12F3B54")]
		public UiOnDropEvent()
		{
		}
	}
	[Token(Token = "0x200089A")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event Called by the EventSystem once dragging ends.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnEndDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnEndDrag is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onEndDragEvent;

		[Token(Token = "0x6002B16")]
		[Address(RVA = "0x12F3B58", Offset = "0x12F3B58", VA = "0x12F3B58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B17")]
		[Address(RVA = "0x12F3B90", Offset = "0x12F3B90", VA = "0x12F3B90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B18")]
		[Address(RVA = "0x12F3C14", Offset = "0x12F3C14", VA = "0x12F3C14")]
		private void OnEndDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B19")]
		[Address(RVA = "0x12F3D14", Offset = "0x12F3D14", VA = "0x12F3D14")]
		public UiOnEndDragEvent()
		{
		}
	}
	[Token(Token = "0x200089B")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when Called by the EventSystem when a drag has been found, but before it is valid to begin the drag.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnInitializePotentialDragEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when OnInitializePotentialDrag is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onInitializePotentialDragEvent;

		[Token(Token = "0x6002B1A")]
		[Address(RVA = "0x12F3D18", Offset = "0x12F3D18", VA = "0x12F3D18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B1B")]
		[Address(RVA = "0x12F3D50", Offset = "0x12F3D50", VA = "0x12F3D50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B1C")]
		[Address(RVA = "0x12F3DD4", Offset = "0x12F3DD4", VA = "0x12F3DD4")]
		private void OnInitializePotentialDragDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B1D")]
		[Address(RVA = "0x12F3ED4", Offset = "0x12F3ED4", VA = "0x12F3ED4")]
		public UiOnInitializePotentialDragEvent()
		{
		}
	}
	[Token(Token = "0x200089C")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnMoveEvent is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnMoveEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnMoveEvent is called")]
		public FsmEvent onMoveEvent;

		[Token(Token = "0x6002B1E")]
		[Address(RVA = "0x12F3ED8", Offset = "0x12F3ED8", VA = "0x12F3ED8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B1F")]
		[Address(RVA = "0x12F3F10", Offset = "0x12F3F10", VA = "0x12F3F10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B20")]
		[Address(RVA = "0x12F3F94", Offset = "0x12F3F94", VA = "0x12F3F94")]
		private void OnMoveDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B21")]
		[Address(RVA = "0x12F4094", Offset = "0x12F4094", VA = "0x12F4094")]
		public UiOnMoveEvent()
		{
		}
	}
	[Token(Token = "0x200089D")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnPointerClick is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnPointerClickEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerClick is called")]
		public FsmEvent onPointerClickEvent;

		[Token(Token = "0x6002B22")]
		[Address(RVA = "0x12F4098", Offset = "0x12F4098", VA = "0x12F4098", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B23")]
		[Address(RVA = "0x12F40D0", Offset = "0x12F40D0", VA = "0x12F40D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B24")]
		[Address(RVA = "0x12F4154", Offset = "0x12F4154", VA = "0x12F4154")]
		private void OnPointerClickDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B25")]
		[Address(RVA = "0x12F4254", Offset = "0x12F4254", VA = "0x12F4254")]
		public UiOnPointerClickEvent()
		{
		}
	}
	[Token(Token = "0x200089E")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnPointerDown is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnPointerDownEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerDown is called")]
		public FsmEvent onPointerDownEvent;

		[Token(Token = "0x6002B26")]
		[Address(RVA = "0x12F4258", Offset = "0x12F4258", VA = "0x12F4258", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B27")]
		[Address(RVA = "0x12F4290", Offset = "0x12F4290", VA = "0x12F4290", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B28")]
		[Address(RVA = "0x12F4314", Offset = "0x12F4314", VA = "0x12F4314")]
		private void OnPointerDownDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B29")]
		[Address(RVA = "0x12F4414", Offset = "0x12F4414", VA = "0x12F4414")]
		public UiOnPointerDownEvent()
		{
		}
	}
	[Token(Token = "0x200089F")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnPointerEnter is called on the GameObject.\n Use GetLastPointerDataInfo action to get info from the event")]
	public class UiOnPointerEnterEvent : EventTriggerActionBase
	{
		[Token(Token = "0x4002919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerEnter is called")]
		public FsmEvent onPointerEnterEvent;

		[Token(Token = "0x6002B2A")]
		[Address(RVA = "0x12F4418", Offset = "0x12F4418", VA = "0x12F4418", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B2B")]
		[Address(RVA = "0x12F4450", Offset = "0x12F4450", VA = "0x12F4450", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B2C")]
		[Address(RVA = "0x12F44D4", Offset = "0x12F44D4", VA = "0x12F44D4")]
		private void OnPointerEnterDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B2D")]
		[Address(RVA = "0x12F45D4", Offset = "0x12F45D4", VA = "0x12F45D4")]
		public UiOnPointerEnterEvent()
		{
		}
	}
	[Token(Token = "0x20008A0")]
	[Tooltip("Sends event when OnPointerExit is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnPointerExitEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400291A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when PointerExit is called")]
		public FsmEvent onPointerExitEvent;

		[Token(Token = "0x6002B2E")]
		[Address(RVA = "0x12F45D8", Offset = "0x12F45D8", VA = "0x12F45D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B2F")]
		[Address(RVA = "0x12F4610", Offset = "0x12F4610", VA = "0x12F4610", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B30")]
		[Address(RVA = "0x12F4694", Offset = "0x12F4694", VA = "0x12F4694")]
		private void OnPointerExitDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B31")]
		[Address(RVA = "0x12F4794", Offset = "0x12F4794", VA = "0x12F4794")]
		public UiOnPointerExitEvent()
		{
		}
	}
	[Token(Token = "0x20008A1")]
	[Tooltip("Sends event when OnPointerUp is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnPointerUpEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400291B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent when PointerUp is called")]
		[UIHint(UIHint.Variable)]
		public FsmEvent onPointerUpEvent;

		[Token(Token = "0x6002B32")]
		[Address(RVA = "0x12F4798", Offset = "0x12F4798", VA = "0x12F4798", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B33")]
		[Address(RVA = "0x12F47D0", Offset = "0x12F47D0", VA = "0x12F47D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B34")]
		[Address(RVA = "0x12F4854", Offset = "0x12F4854", VA = "0x12F4854")]
		private void OnPointerUpDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B35")]
		[Address(RVA = "0x12F4954", Offset = "0x12F4954", VA = "0x12F4954")]
		public UiOnPointerUpEvent()
		{
		}
	}
	[Token(Token = "0x20008A2")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnScroll is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	public class UiOnScrollEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400291C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnScroll is called")]
		public FsmEvent onScrollEvent;

		[Token(Token = "0x6002B36")]
		[Address(RVA = "0x12F4958", Offset = "0x12F4958", VA = "0x12F4958", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B37")]
		[Address(RVA = "0x12F4990", Offset = "0x12F4990", VA = "0x12F4990", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B38")]
		[Address(RVA = "0x12F4A14", Offset = "0x12F4A14", VA = "0x12F4A14")]
		private void OnScrollDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B39")]
		[Address(RVA = "0x12F4B14", Offset = "0x12F4B14", VA = "0x12F4B14")]
		public UiOnScrollEvent()
		{
		}
	}
	[Token(Token = "0x20008A3")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when Called by the EventSystem when a Select event occurs. \nUse GetLastPointerDataInfo action to get info from the event")]
	public class UiOnSelectEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400291D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnSelect is called")]
		public FsmEvent onSelectEvent;

		[Token(Token = "0x6002B3A")]
		[Address(RVA = "0x12F4B18", Offset = "0x12F4B18", VA = "0x12F4B18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B3B")]
		[Address(RVA = "0x12F4B50", Offset = "0x12F4B50", VA = "0x12F4B50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B3C")]
		[Address(RVA = "0x12F4BD4", Offset = "0x12F4BD4", VA = "0x12F4BD4")]
		private void OnSelectDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B3D")]
		[Address(RVA = "0x12F4CD4", Offset = "0x12F4CD4", VA = "0x12F4CD4")]
		public UiOnSelectEvent()
		{
		}
	}
	[Token(Token = "0x20008A4")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends event when OnSubmit is called on the GameObject. \nUse GetLastPointerDataInfo action to get info from the event")]
	public class UiOnSubmitEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400291E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnSubmitEvent is called")]
		public FsmEvent onSubmitEvent;

		[Token(Token = "0x6002B3E")]
		[Address(RVA = "0x12F4CD8", Offset = "0x12F4CD8", VA = "0x12F4CD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B3F")]
		[Address(RVA = "0x12F4D10", Offset = "0x12F4D10", VA = "0x12F4D10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B40")]
		[Address(RVA = "0x12F4D94", Offset = "0x12F4D94", VA = "0x12F4D94")]
		private void OnSubmitDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B41")]
		[Address(RVA = "0x12F4E94", Offset = "0x12F4E94", VA = "0x12F4E94")]
		public UiOnSubmitEvent()
		{
		}
	}
	[Token(Token = "0x20008A5")]
	[Tooltip("Sends event when Called by the EventSystem when the object associated with this EventTrigger is updated.\nUse GetLastPointerDataInfo action to get info from the event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiOnUpdateSelectedEvent : EventTriggerActionBase
	{
		[Token(Token = "0x400291F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Event sent when OnUpdateSelected is called")]
		public FsmEvent onUpdateSelectedEvent;

		[Token(Token = "0x6002B42")]
		[Address(RVA = "0x12F4E98", Offset = "0x12F4E98", VA = "0x12F4E98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B43")]
		[Address(RVA = "0x12F4ED0", Offset = "0x12F4ED0", VA = "0x12F4ED0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B44")]
		[Address(RVA = "0x12F4F54", Offset = "0x12F4F54", VA = "0x12F4F54")]
		private void OnUpdateSelectedDelegate(BaseEventData data)
		{
		}

		[Token(Token = "0x6002B45")]
		[Address(RVA = "0x12F5054", Offset = "0x12F5054", VA = "0x12F5054")]
		public UiOnUpdateSelectedEvent()
		{
		}
	}
	[Token(Token = "0x20008A6")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the EventSystem's currently select GameObject.")]
	public class UiSetSelectedGameObject : FsmStateAction
	{
		[Token(Token = "0x4002920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject to select.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x6002B46")]
		[Address(RVA = "0x12F5058", Offset = "0x12F5058", VA = "0x12F5058", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B47")]
		[Address(RVA = "0x12F5064", Offset = "0x12F5064", VA = "0x12F5064", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B48")]
		[Address(RVA = "0x12F5080", Offset = "0x12F5080", VA = "0x12F5080")]
		private void DoSetSelectedGameObject()
		{
		}

		[Token(Token = "0x6002B49")]
		[Address(RVA = "0x12F5104", Offset = "0x12F5104", VA = "0x12F5104")]
		public UiSetSelectedGameObject()
		{
		}
	}
	[Token(Token = "0x20008A7")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets various properties of a UI Layout Element component.")]
	public class UiLayoutElementGetValues : ComponentAction<LayoutElement>
	{
		[Token(Token = "0x4002921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(LayoutElement))]
		[Tooltip("The GameObject with the UI LayoutElement component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Values")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is this element use Layout constraints")]
		public FsmBool ignoreLayout;

		[Token(Token = "0x4002923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The minimum width enabled state")]
		public FsmBool minWidthEnabled;

		[Token(Token = "0x4002924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The minimum width this layout element should have.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat minWidth;

		[Token(Token = "0x4002925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The minimum height enabled state")]
		public FsmBool minHeightEnabled;

		[Token(Token = "0x4002926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The minimum height this layout element should have.")]
		public FsmFloat minHeight;

		[Token(Token = "0x4002927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The preferred width enabled state")]
		[UIHint(UIHint.Variable)]
		public FsmBool preferredWidthEnabled;

		[Token(Token = "0x4002928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The preferred width this layout element should have before additional available width is allocated.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat preferredWidth;

		[Token(Token = "0x4002929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("The preferred height enabled state")]
		[UIHint(UIHint.Variable)]
		public FsmBool preferredHeightEnabled;

		[Token(Token = "0x400292A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The preferred height this layout element should have before additional available height is allocated.")]
		public FsmFloat preferredHeight;

		[Token(Token = "0x400292B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The flexible width enabled state")]
		public FsmBool flexibleWidthEnabled;

		[Token(Token = "0x400292C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The relative amount of additional available width this layout element should fill out relative to its siblings.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat flexibleWidth;

		[Token(Token = "0x400292D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("The flexible height enabled state")]
		[UIHint(UIHint.Variable)]
		public FsmBool flexibleHeightEnabled;

		[Token(Token = "0x400292E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The relative amount of additional available height this layout element should fill out relative to its siblings.")]
		public FsmFloat flexibleHeight;

		[Token(Token = "0x400292F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Repeats every frame")]
		[ActionSection("Options")]
		public bool everyFrame;

		[Token(Token = "0x4002930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private LayoutElement layoutElement;

		[Token(Token = "0x6002B4A")]
		[Address(RVA = "0x12F510C", Offset = "0x12F510C", VA = "0x12F510C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B4B")]
		[Address(RVA = "0x12F51F4", Offset = "0x12F51F4", VA = "0x12F51F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B4C")]
		[Address(RVA = "0x12F560C", Offset = "0x12F560C", VA = "0x12F560C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002B4D")]
		[Address(RVA = "0x12F5294", Offset = "0x12F5294", VA = "0x12F5294")]
		private void DoGetValues()
		{
		}

		[Token(Token = "0x6002B4E")]
		[Address(RVA = "0x12F5610", Offset = "0x12F5610", VA = "0x12F5610")]
		public UiLayoutElementGetValues()
		{
		}
	}
	[Token(Token = "0x20008A8")]
	[Tooltip("Sets various properties of a UI Layout Element component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiLayoutElementSetValues : ComponentAction<LayoutElement>
	{
		[Token(Token = "0x4002931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(LayoutElement))]
		[RequiredField]
		[Tooltip("The GameObject with the UI LayoutElement component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The minimum width this layout element should have.")]
		[ActionSection("Values")]
		public FsmFloat minWidth;

		[Token(Token = "0x4002933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The minimum height this layout element should have.")]
		public FsmFloat minHeight;

		[Token(Token = "0x4002934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The preferred width this layout element should have before additional available width is allocated.")]
		public FsmFloat preferredWidth;

		[Token(Token = "0x4002935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The preferred height this layout element should have before additional available height is allocated.")]
		public FsmFloat preferredHeight;

		[Token(Token = "0x4002936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The relative amount of additional available width this layout element should fill out relative to its siblings.")]
		public FsmFloat flexibleWidth;

		[Token(Token = "0x4002937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The relative amount of additional available height this layout element should fill out relative to its siblings.")]
		public FsmFloat flexibleHeight;

		[Token(Token = "0x4002938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ActionSection("Options")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private LayoutElement layoutElement;

		[Token(Token = "0x6002B4F")]
		[Address(RVA = "0x12F5658", Offset = "0x12F5658", VA = "0x12F5658", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B50")]
		[Address(RVA = "0x12F57C4", Offset = "0x12F57C4", VA = "0x12F57C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B51")]
		[Address(RVA = "0x12F5A58", Offset = "0x12F5A58", VA = "0x12F5A58", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002B52")]
		[Address(RVA = "0x12F5864", Offset = "0x12F5864", VA = "0x12F5864")]
		private void DoSetValues()
		{
		}

		[Token(Token = "0x6002B53")]
		[Address(RVA = "0x12F5A5C", Offset = "0x12F5A5C", VA = "0x12F5A5C")]
		public UiLayoutElementSetValues()
		{
		}
	}
	[Token(Token = "0x20008A9")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the explicit navigation properties of a UI Selectable component. ")]
	public class UiNavigationExplicitGetProperties : ComponentAction<Selectable>
	{
		[Token(Token = "0x400293A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400293B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The down Selectable.")]
		public FsmGameObject selectOnDown;

		[Token(Token = "0x400293C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The up Selectable.")]
		public FsmGameObject selectOnUp;

		[Token(Token = "0x400293D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The left Selectable.")]
		public FsmGameObject selectOnLeft;

		[Token(Token = "0x400293E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The right Selectable.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject selectOnRight;

		[Token(Token = "0x400293F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Selectable _selectable;

		[Token(Token = "0x6002B54")]
		[Address(RVA = "0x12F5AA4", Offset = "0x12F5AA4", VA = "0x12F5AA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B55")]
		[Address(RVA = "0x12F5AFC", Offset = "0x12F5AFC", VA = "0x12F5AFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B56")]
		[Address(RVA = "0x12F5BC4", Offset = "0x12F5BC4", VA = "0x12F5BC4")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002B57")]
		[Address(RVA = "0x12F5E24", Offset = "0x12F5E24", VA = "0x12F5E24")]
		public UiNavigationExplicitGetProperties()
		{
		}
	}
	[Token(Token = "0x20008AA")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the explicit navigation properties of a UI Selectable component. Note that it will have no effect until Navigation mode is set to 'Explicit'.")]
	public class UiNavigationExplicitSetProperties : ComponentAction<Selectable>
	{
		[Token(Token = "0x4002940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The GameObject with the UI Selectable component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The down Selectable. Leave as None for no effect")]
		public FsmGameObject selectOnDown;

		[Token(Token = "0x4002942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The up Selectable.  Leave as None for no effect")]
		[CheckForComponent(typeof(Selectable))]
		public FsmGameObject selectOnUp;

		[Token(Token = "0x4002943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The left Selectable.  Leave as None for no effect")]
		public FsmGameObject selectOnLeft;

		[Token(Token = "0x4002944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The right Selectable.  Leave as None for no effect")]
		public FsmGameObject selectOnRight;

		[Token(Token = "0x4002945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Selectable selectable;

		[Token(Token = "0x4002947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Navigation navigation;

		[Token(Token = "0x4002948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Navigation originalState;

		[Token(Token = "0x6002B58")]
		[Address(RVA = "0x12F5E6C", Offset = "0x12F5E6C", VA = "0x12F5E6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B59")]
		[Address(RVA = "0x12F5F98", Offset = "0x12F5F98", VA = "0x12F5F98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B5A")]
		[Address(RVA = "0x12F609C", Offset = "0x12F609C", VA = "0x12F609C")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0x12F6244", Offset = "0x12F6244", VA = "0x12F6244", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B5C")]
		private static T GetComponentFromFsmGameObject<T>(FsmGameObject variable) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0x12F637C", Offset = "0x12F637C", VA = "0x12F637C")]
		public UiNavigationExplicitSetProperties()
		{
		}
	}
	[Token(Token = "0x20008AB")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the Color Block of a UI Selectable component.")]
	public class UiGetColorBlock : ComponentAction<Selectable>
	{
		[Token(Token = "0x4002949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400294A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The fade duration value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmFloat fadeDuration;

		[Token(Token = "0x400294B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The color multiplier value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmFloat colorMultiplier;

		[Token(Token = "0x400294C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The normal color value. Leave as None for no effect")]
		public FsmColor normalColor;

		[Token(Token = "0x400294D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The pressed color value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmColor pressedColor;

		[Token(Token = "0x400294E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The highlighted color value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmColor highlightedColor;

		[Token(Token = "0x400294F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The disabled color value. Leave as None for no effect")]
		[UIHint(UIHint.Variable)]
		public FsmColor disabledColor;

		[Token(Token = "0x4002950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x4002951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Selectable selectable;

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0x12F63C4", Offset = "0x12F63C4", VA = "0x12F63C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0x12F6444", Offset = "0x12F6444", VA = "0x12F6444", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B60")]
		[Address(RVA = "0x12F6658", Offset = "0x12F6658", VA = "0x12F6658", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002B61")]
		[Address(RVA = "0x12F64E4", Offset = "0x12F64E4", VA = "0x12F64E4")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002B62")]
		[Address(RVA = "0x12F665C", Offset = "0x12F665C", VA = "0x12F665C")]
		public UiGetColorBlock()
		{
		}
	}
	[Token(Token = "0x20008AC")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the interactable flag of a UI Selectable component.")]
	public class UiGetIsInteractable : ComponentAction<Selectable>
	{
		[Token(Token = "0x4002952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Interactable value")]
		public FsmBool isInteractable;

		[Token(Token = "0x4002954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if Component is Interactable")]
		public FsmEvent isInteractableEvent;

		[Token(Token = "0x4002955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if Component is not Interactable")]
		public FsmEvent isNotInteractableEvent;

		[Token(Token = "0x4002956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Selectable selectable;

		[Token(Token = "0x6002B63")]
		[Address(RVA = "0x12F66A4", Offset = "0x12F66A4", VA = "0x12F66A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B64")]
		[Address(RVA = "0x12F66EC", Offset = "0x12F66EC", VA = "0x12F66EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B65")]
		[Address(RVA = "0x12F6778", Offset = "0x12F6778", VA = "0x12F6778")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002B66")]
		[Address(RVA = "0x12F683C", Offset = "0x12F683C", VA = "0x12F683C")]
		public UiGetIsInteractable()
		{
		}
	}
	[Token(Token = "0x20008AD")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the navigation mode of a UI Selectable component.")]
	public class UiNavigationGetMode : ComponentAction<Selectable>
	{
		[Token(Token = "0x4002957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The navigation mode value")]
		public FsmString navigationMode;

		[Token(Token = "0x4002959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if transition is ColorTint")]
		public FsmEvent automaticEvent;

		[Token(Token = "0x400295A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if transition is ColorTint")]
		public FsmEvent horizontalEvent;

		[Token(Token = "0x400295B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if transition is SpriteSwap")]
		public FsmEvent verticalEvent;

		[Token(Token = "0x400295C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if transition is Animation")]
		public FsmEvent explicitEvent;

		[Token(Token = "0x400295D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Event sent if transition is none")]
		public FsmEvent noNavigationEvent;

		[Token(Token = "0x400295E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Selectable selectable;

		[Token(Token = "0x6002B67")]
		[Address(RVA = "0x12F6884", Offset = "0x12F6884", VA = "0x12F6884", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B68")]
		[Address(RVA = "0x12F6890", Offset = "0x12F6890", VA = "0x12F6890", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B69")]
		[Address(RVA = "0x12F691C", Offset = "0x12F691C", VA = "0x12F691C")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002B6A")]
		[Address(RVA = "0x12F6A64", Offset = "0x12F6A64", VA = "0x12F6A64")]
		public UiNavigationGetMode()
		{
		}
	}
	[Token(Token = "0x20008AE")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the navigation mode of a UI Selectable component.")]
	public class UiNavigationSetMode : ComponentAction<Selectable>
	{
		[Token(Token = "0x400295F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The navigation mode value")]
		public Navigation.Mode navigationMode;

		[Token(Token = "0x4002961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Selectable selectable;

		[Token(Token = "0x4002963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Navigation _navigation;

		[Token(Token = "0x4002964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Navigation.Mode originalValue;

		[Token(Token = "0x6002B6B")]
		[Address(RVA = "0x12F6AAC", Offset = "0x12F6AAC", VA = "0x12F6AAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B6C")]
		[Address(RVA = "0x12F6AE8", Offset = "0x12F6AE8", VA = "0x12F6AE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B6D")]
		[Address(RVA = "0x12F6BD4", Offset = "0x12F6BD4", VA = "0x12F6BD4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002B6E")]
		[Address(RVA = "0x12F6CB0", Offset = "0x12F6CB0", VA = "0x12F6CB0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B6F")]
		[Address(RVA = "0x12F6DA0", Offset = "0x12F6DA0", VA = "0x12F6DA0")]
		public UiNavigationSetMode()
		{
		}
	}
	[Token(Token = "0x20008AF")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the Animation Triggers of a UI Selectable component. Modifications will not be visible if transition is not Animation")]
	public class UiSetAnimationTriggers : ComponentAction<Selectable>
	{
		[Token(Token = "0x4002965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The GameObject with the UI Selectable component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The normal trigger value. Leave as None for no effect")]
		public FsmString normalTrigger;

		[Token(Token = "0x4002967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The highlighted trigger value. Leave as None for no effect")]
		public FsmString highlightedTrigger;

		[Token(Token = "0x4002968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The pressed trigger value. Leave as None for no effect")]
		public FsmString pressedTrigger;

		[Token(Token = "0x4002969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The disabled trigger value. Leave as None for no effect")]
		public FsmString disabledTrigger;

		[Token(Token = "0x400296A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400296B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Selectable selectable;

		[Token(Token = "0x400296C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AnimationTriggers _animationTriggers;

		[Token(Token = "0x400296D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AnimationTriggers originalAnimationTriggers;

		[Token(Token = "0x6002B70")]
		[Address(RVA = "0x12F6DE8", Offset = "0x12F6DE8", VA = "0x12F6DE8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B71")]
		[Address(RVA = "0x12F6F08", Offset = "0x12F6F08", VA = "0x12F6F08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B72")]
		[Address(RVA = "0x12F6FFC", Offset = "0x12F6FFC", VA = "0x12F6FFC")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002B73")]
		[Address(RVA = "0x12F7190", Offset = "0x12F7190", VA = "0x12F7190", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B74")]
		[Address(RVA = "0x12F722C", Offset = "0x12F722C", VA = "0x12F722C")]
		public UiSetAnimationTriggers()
		{
		}
	}
	[Token(Token = "0x20008B0")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the Color Block of a UI Selectable component. Modifications will not be visible if transition is not ColorTint")]
	public class UiSetColorBlock : ComponentAction<Selectable>
	{
		[Token(Token = "0x400296E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400296F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The fade duration value. Leave as None for no effect")]
		public FsmFloat fadeDuration;

		[Token(Token = "0x4002970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The color multiplier value. Leave as None for no effect")]
		public FsmFloat colorMultiplier;

		[Token(Token = "0x4002971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The normal color value. Leave as None for no effect")]
		public FsmColor normalColor;

		[Token(Token = "0x4002972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The pressed color value. Leave as None for no effect")]
		public FsmColor pressedColor;

		[Token(Token = "0x4002973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The highlighted color value. Leave as None for no effect")]
		public FsmColor highlightedColor;

		[Token(Token = "0x4002974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The disabled color value. Leave as None for no effect")]
		public FsmColor disabledColor;

		[Token(Token = "0x4002975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x4002977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Selectable selectable;

		[Token(Token = "0x4002978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ColorBlock _colorBlock;

		[Token(Token = "0x4002979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private ColorBlock originalColorBlock;

		[Token(Token = "0x6002B75")]
		[Address(RVA = "0x12F7274", Offset = "0x12F7274", VA = "0x12F7274", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B76")]
		[Address(RVA = "0x12F740C", Offset = "0x12F740C", VA = "0x12F740C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B77")]
		[Address(RVA = "0x12F76BC", Offset = "0x12F76BC", VA = "0x12F76BC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002B78")]
		[Address(RVA = "0x12F7514", Offset = "0x12F7514", VA = "0x12F7514")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002B79")]
		[Address(RVA = "0x12F76C0", Offset = "0x12F76C0", VA = "0x12F76C0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B7A")]
		[Address(RVA = "0x12F7780", Offset = "0x12F7780", VA = "0x12F7780")]
		public UiSetColorBlock()
		{
		}
	}
	[Token(Token = "0x20008B1")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the interactable flag of a UI Selectable component.")]
	public class UiSetIsInteractable : FsmStateAction
	{
		[Token(Token = "0x400297A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The GameObject with the UI Selectable component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400297B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Interactable value")]
		public FsmBool isInteractable;

		[Token(Token = "0x400297C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x400297D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Selectable _selectable;

		[Token(Token = "0x400297E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _originalState;

		[Token(Token = "0x6002B7B")]
		[Address(RVA = "0x12F77C8", Offset = "0x12F77C8", VA = "0x12F77C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B7C")]
		[Address(RVA = "0x12F780C", Offset = "0x12F780C", VA = "0x12F780C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B7D")]
		[Address(RVA = "0x12F7930", Offset = "0x12F7930", VA = "0x12F7930")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002B7E")]
		[Address(RVA = "0x12F79CC", Offset = "0x12F79CC", VA = "0x12F79CC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B7F")]
		[Address(RVA = "0x12F7A68", Offset = "0x12F7A68", VA = "0x12F7A68")]
		public UiSetIsInteractable()
		{
		}
	}
	[Token(Token = "0x20008B2")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the transition type of a UI Selectable component.")]
	public class UiTransitionGetType : ComponentAction<Selectable>
	{
		[Token(Token = "0x400297F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Selectable component.")]
		[CheckForComponent(typeof(Selectable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The transition value")]
		public FsmString transition;

		[Token(Token = "0x4002981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if transition is ColorTint")]
		public FsmEvent colorTintEvent;

		[Token(Token = "0x4002982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if transition is SpriteSwap")]
		public FsmEvent spriteSwapEvent;

		[Token(Token = "0x4002983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if transition is Animation")]
		public FsmEvent animationEvent;

		[Token(Token = "0x4002984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Event sent if transition is none")]
		public FsmEvent noTransitionEvent;

		[Token(Token = "0x4002985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Selectable selectable;

		[Token(Token = "0x6002B80")]
		[Address(RVA = "0x12F7A70", Offset = "0x12F7A70", VA = "0x12F7A70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B81")]
		[Address(RVA = "0x12F7AD8", Offset = "0x12F7AD8", VA = "0x12F7AD8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B82")]
		[Address(RVA = "0x12F7B64", Offset = "0x12F7B64", VA = "0x12F7B64")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002B83")]
		[Address(RVA = "0x12F7C9C", Offset = "0x12F7C9C", VA = "0x12F7C9C")]
		public UiTransitionGetType()
		{
		}
	}
	[Token(Token = "0x20008B3")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the transition type of a UI Selectable component.")]
	public class UiTransitionSetType : ComponentAction<Selectable>
	{
		[Token(Token = "0x4002986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Selectable))]
		[Tooltip("The GameObject with the UI Selectable component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The transition value")]
		public Selectable.Transition transition;

		[Token(Token = "0x4002988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Selectable selectable;

		[Token(Token = "0x400298A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Selectable.Transition originalTransition;

		[Token(Token = "0x6002B84")]
		[Address(RVA = "0x12F7CE4", Offset = "0x12F7CE4", VA = "0x12F7CE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B85")]
		[Address(RVA = "0x12F7D20", Offset = "0x12F7D20", VA = "0x12F7D20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0x12F7E0C", Offset = "0x12F7E0C", VA = "0x12F7E0C")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002B87")]
		[Address(RVA = "0x12F7E94", Offset = "0x12F7E94", VA = "0x12F7E94", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B88")]
		[Address(RVA = "0x12F7F30", Offset = "0x12F7F30", VA = "0x12F7F30")]
		public UiTransitionSetType()
		{
		}
	}
	[Token(Token = "0x20008B4")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Set up multiple button events in a single action.")]
	public class UiButtonArray : FsmStateAction
	{
		[Token(Token = "0x400298B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where to send the events.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x400298C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[CheckForComponent(typeof(Button))]
		[CompoundArray("Buttons", "Button", "Click Event")]
		[Tooltip("The GameObject with the UI Button component.")]
		public FsmGameObject[] gameObjects;

		[Token(Token = "0x400298D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Send this event when the button is Clicked.")]
		public FsmEvent[] clickEvents;

		[Token(Token = "0x400298E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The index of the last button clicked. (0 = first button, 1 = second, etc.)")]
		[UIHint(UIHint.Variable)]
		public FsmInt clickIndex;

		[Token(Token = "0x400298F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Button[] buttons;

		[Token(Token = "0x4002990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject[] cachedGameObjects;

		[Token(Token = "0x4002991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityAction[] actions;

		[Token(Token = "0x6002B89")]
		[Address(RVA = "0x12F7F78", Offset = "0x12F7F78", VA = "0x12F7F78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B8A")]
		[Address(RVA = "0x12F8018", Offset = "0x12F8018", VA = "0x12F8018", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x6002B8B")]
		[Address(RVA = "0x12F80FC", Offset = "0x12F80FC", VA = "0x12F80FC")]
		private void InitButtons()
		{
		}

		[Token(Token = "0x6002B8C")]
		[Address(RVA = "0x12F82E0", Offset = "0x12F82E0", VA = "0x12F82E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B8D")]
		[Address(RVA = "0x12F84B8", Offset = "0x12F84B8", VA = "0x12F84B8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B8E")]
		[Address(RVA = "0x12F85D8", Offset = "0x12F85D8", VA = "0x12F85D8")]
		public void OnClick(int index)
		{
		}

		[Token(Token = "0x6002B8F")]
		[Address(RVA = "0x12F8670", Offset = "0x12F8670", VA = "0x12F8670")]
		public UiButtonArray()
		{
		}
	}
	[Token(Token = "0x20008B6")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sends an event when a UI Button is clicked.")]
	public class UiButtonOnClickEvent : ComponentAction<Button>
	{
		[Token(Token = "0x4002994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Button component.")]
		[CheckForComponent(typeof(Button))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when Clicked.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Button button;

		[Token(Token = "0x6002B92")]
		[Address(RVA = "0x12F8698", Offset = "0x12F8698", VA = "0x12F8698", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B93")]
		[Address(RVA = "0x12F86C0", Offset = "0x12F86C0", VA = "0x12F86C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B94")]
		[Address(RVA = "0x12F88DC", Offset = "0x12F88DC", VA = "0x12F88DC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002B95")]
		[Address(RVA = "0x12F89B8", Offset = "0x12F89B8", VA = "0x12F89B8")]
		public void DoOnClick()
		{
		}

		[Token(Token = "0x6002B96")]
		[Address(RVA = "0x12F8A04", Offset = "0x12F8A04", VA = "0x12F8A04")]
		public UiButtonOnClickEvent()
		{
		}
	}
	[Token(Token = "0x20008B7")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Add multiple options to the options of the Dropdown UI Component")]
	public class UiDropDownAddOptions : ComponentAction<Dropdown>
	{
		[Token(Token = "0x4002998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Dropdown))]
		[Tooltip("The GameObject with the UI DropDown component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[CompoundArray("Options", "Text", "Image")]
		[Tooltip("The text to use for this option.")]
		public FsmString[] optionText;

		[Token(Token = "0x400299A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The image to use for this option.")]
		[ObjectType(typeof(Sprite))]
		public FsmObject[] optionImage;

		[Token(Token = "0x400299B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dropdown dropDown;

		[Token(Token = "0x400299C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Dropdown.OptionData> options;

		[Token(Token = "0x6002B97")]
		[Address(RVA = "0x12F8A4C", Offset = "0x12F8A4C", VA = "0x12F8A4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B98")]
		[Address(RVA = "0x12F8AEC", Offset = "0x12F8AEC", VA = "0x12F8AEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B99")]
		[Address(RVA = "0x12F8B78", Offset = "0x12F8B78", VA = "0x12F8B78")]
		private void DoAddOptions()
		{
		}

		[Token(Token = "0x6002B9A")]
		[Address(RVA = "0x12F8DF0", Offset = "0x12F8DF0", VA = "0x12F8DF0")]
		public UiDropDownAddOptions()
		{
		}
	}
	[Token(Token = "0x20008B8")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Clear the list of options in a UI Dropdown Component")]
	public class UiDropDownClearOptions : ComponentAction<Dropdown>
	{
		[Token(Token = "0x400299D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI DropDown component.")]
		[CheckForComponent(typeof(Dropdown))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x400299E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dropdown dropDown;

		[Token(Token = "0x6002B9B")]
		[Address(RVA = "0x12F8E38", Offset = "0x12F8E38", VA = "0x12F8E38", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B9C")]
		[Address(RVA = "0x12F8E44", Offset = "0x12F8E44", VA = "0x12F8E44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002B9D")]
		[Address(RVA = "0x12F8F14", Offset = "0x12F8F14", VA = "0x12F8F14")]
		public UiDropDownClearOptions()
		{
		}
	}
	[Token(Token = "0x20008B9")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Get the selected value (zero based index), sprite and text from a UI Dropdown Component")]
	public class UiDropDownGetSelectedData : ComponentAction<Dropdown>
	{
		[Token(Token = "0x400299F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI DropDown component.")]
		[RequiredField]
		[CheckForComponent(typeof(Dropdown))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The selected index of the dropdown (zero based index).")]
		public FsmInt index;

		[Token(Token = "0x40029A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The selected text.")]
		[UIHint(UIHint.Variable)]
		public FsmString getText;

		[Token(Token = "0x40029A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The selected text.")]
		[ObjectType(typeof(Sprite))]
		[UIHint(UIHint.Variable)]
		public FsmObject getImage;

		[Token(Token = "0x40029A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40029A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dropdown dropDown;

		[Token(Token = "0x6002B9E")]
		[Address(RVA = "0x12F8F5C", Offset = "0x12F8F5C", VA = "0x12F8F5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002B9F")]
		[Address(RVA = "0x12F8FAC", Offset = "0x12F8FAC", VA = "0x12F8FAC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BA0")]
		[Address(RVA = "0x12F91B0", Offset = "0x12F91B0", VA = "0x12F91B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BA1")]
		[Address(RVA = "0x12F904C", Offset = "0x12F904C", VA = "0x12F904C")]
		private void GetValue()
		{
		}

		[Token(Token = "0x6002BA2")]
		[Address(RVA = "0x12F91B4", Offset = "0x12F91B4", VA = "0x12F91B4")]
		public UiDropDownGetSelectedData()
		{
		}
	}
	[Token(Token = "0x20008BA")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Set the selected value (zero based index) of the UI Dropdown Component")]
	public class UiDropDownSetValue : ComponentAction<Dropdown>
	{
		[Token(Token = "0x40029A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Dropdown))]
		[Tooltip("The GameObject with the UI DropDown component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The selected index of the dropdown (zero based index).")]
		public FsmInt value;

		[Token(Token = "0x40029A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40029A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dropdown dropDown;

		[Token(Token = "0x6002BA3")]
		[Address(RVA = "0x12F91FC", Offset = "0x12F91FC", VA = "0x12F91FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BA4")]
		[Address(RVA = "0x12F922C", Offset = "0x12F922C", VA = "0x12F922C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BA5")]
		[Address(RVA = "0x12F938C", Offset = "0x12F938C", VA = "0x12F938C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BA6")]
		[Address(RVA = "0x12F92CC", Offset = "0x12F92CC", VA = "0x12F92CC")]
		private void SetValue()
		{
		}

		[Token(Token = "0x6002BA7")]
		[Address(RVA = "0x12F9390", Offset = "0x12F9390", VA = "0x12F9390")]
		public UiDropDownSetValue()
		{
		}
	}
	[Token(Token = "0x20008BB")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Tweens the alpha of the CanvasRenderer color associated with this Graphic.")]
	public class UiGraphicCrossFadeAlpha : ComponentAction<Graphic>
	{
		[Token(Token = "0x40029A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with an Unity UI component.")]
		[CheckForComponent(typeof(Graphic))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The alpha target")]
		public FsmFloat alpha;

		[Token(Token = "0x40029AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The duration of the tween")]
		public FsmFloat duration;

		[Token(Token = "0x40029AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Should ignore Time.scale?")]
		public FsmBool ignoreTimeScale;

		[Token(Token = "0x40029AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Graphic uiComponent;

		[Token(Token = "0x6002BA8")]
		[Address(RVA = "0x12F93D8", Offset = "0x12F93D8", VA = "0x12F93D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BA9")]
		[Address(RVA = "0x12F942C", Offset = "0x12F942C", VA = "0x12F942C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BAA")]
		[Address(RVA = "0x12F9518", Offset = "0x12F9518", VA = "0x12F9518")]
		public UiGraphicCrossFadeAlpha()
		{
		}
	}
	[Token(Token = "0x20008BC")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Tweens the color of the CanvasRenderer color associated with this Graphic.")]
	public class UiGraphicCrossFadeColor : ComponentAction<Graphic>
	{
		[Token(Token = "0x40029AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Graphic))]
		[Tooltip("The GameObject with a UI component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Color target of the UI component. Leave to none and set the individual color values, for example to affect just the alpha channel")]
		public FsmColor color;

		[Token(Token = "0x40029B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The red channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat red;

		[Token(Token = "0x40029B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The green channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat green;

		[Token(Token = "0x40029B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The blue channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat blue;

		[Token(Token = "0x40029B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The alpha channel Color target of the UI component. Leave as None for no effect, else it overrides the color property")]
		public FsmFloat alpha;

		[Token(Token = "0x40029B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("The duration of the tween")]
		public FsmFloat duration;

		[Token(Token = "0x40029B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Should ignore Time.scale?")]
		public FsmBool ignoreTimeScale;

		[Token(Token = "0x40029B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Should also Tween the alpha channel?")]
		public FsmBool useAlpha;

		[Token(Token = "0x40029B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Graphic uiComponent;

		[Token(Token = "0x6002BAB")]
		[Address(RVA = "0x12F9560", Offset = "0x12F9560", VA = "0x12F9560", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BAC")]
		[Address(RVA = "0x12F96BC", Offset = "0x12F96BC", VA = "0x12F96BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BAD")]
		[Address(RVA = "0x12F98B8", Offset = "0x12F98B8", VA = "0x12F98B8")]
		public UiGraphicCrossFadeColor()
		{
		}
	}
	[Token(Token = "0x20008BD")]
	[Tooltip("Gets the color of a UI Graphic component. (E.g. UI Sprite)")]
	[ActionCategory(ActionCategory.UI)]
	public class UiGraphicGetColor : ComponentAction<Graphic>
	{
		[Token(Token = "0x40029B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI component.")]
		[CheckForComponent(typeof(Graphic))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Color of the UI component")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmColor color;

		[Token(Token = "0x40029BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40029BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Graphic uiComponent;

		[Token(Token = "0x6002BAE")]
		[Address(RVA = "0x12F9900", Offset = "0x12F9900", VA = "0x12F9900", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BAF")]
		[Address(RVA = "0x12F9928", Offset = "0x12F9928", VA = "0x12F9928", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BB0")]
		[Address(RVA = "0x12F9A5C", Offset = "0x12F9A5C", VA = "0x12F9A5C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BB1")]
		[Address(RVA = "0x12F99C8", Offset = "0x12F99C8", VA = "0x12F99C8")]
		private void DoGetColorValue()
		{
		}

		[Token(Token = "0x6002BB2")]
		[Address(RVA = "0x12F9A60", Offset = "0x12F9A60", VA = "0x12F9A60")]
		public UiGraphicGetColor()
		{
		}
	}
	[Token(Token = "0x20008BE")]
	[Tooltip("Set Graphic Color. E.g. to set Sprite Color.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiGraphicSetColor : ComponentAction<Graphic>
	{
		[Token(Token = "0x40029BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Graphic))]
		[Tooltip("The GameObject with a UI component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Color of the UI component. Leave to none and set the individual color values, for example to affect just the alpha channel")]
		public FsmColor color;

		[Token(Token = "0x40029BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The red channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat red;

		[Token(Token = "0x40029BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The green channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat green;

		[Token(Token = "0x40029C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("The blue channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat blue;

		[Token(Token = "0x40029C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("The alpha channel Color of the UI component. Leave to none for no effect, else it overrides the color property")]
		public FsmFloat alpha;

		[Token(Token = "0x40029C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40029C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40029C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Graphic uiComponent;

		[Token(Token = "0x40029C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Color originalColor;

		[Token(Token = "0x6002BB3")]
		[Address(RVA = "0x12F9AA8", Offset = "0x12F9AA8", VA = "0x12F9AA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BB4")]
		[Address(RVA = "0x12F9BE0", Offset = "0x12F9BE0", VA = "0x12F9BE0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BB5")]
		[Address(RVA = "0x12F9E40", Offset = "0x12F9E40", VA = "0x12F9E40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BB6")]
		[Address(RVA = "0x12F9CA0", Offset = "0x12F9CA0", VA = "0x12F9CA0")]
		private void DoSetColorValue()
		{
		}

		[Token(Token = "0x6002BB7")]
		[Address(RVA = "0x12F9E44", Offset = "0x12F9E44", VA = "0x12F9E44", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002BB8")]
		[Address(RVA = "0x12F9EEC", Offset = "0x12F9EEC", VA = "0x12F9EEC")]
		public UiGraphicSetColor()
		{
		}
	}
	[Token(Token = "0x20008BF")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Set The Fill Amount on a UI Image")]
	public class UiImageGetFillAmount : ComponentAction<Image>
	{
		[Token(Token = "0x40029C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the UI Image component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The fill amount.")]
		public FsmFloat ImageFillAmount;

		[Token(Token = "0x40029C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40029C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Image image;

		[Token(Token = "0x6002BB9")]
		[Address(RVA = "0x12F9F34", Offset = "0x12F9F34", VA = "0x12F9F34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BBA")]
		[Address(RVA = "0x12F9F64", Offset = "0x12F9F64", VA = "0x12F9F64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BBB")]
		[Address(RVA = "0x12FA088", Offset = "0x12FA088", VA = "0x12FA088", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BBC")]
		[Address(RVA = "0x12FA004", Offset = "0x12FA004", VA = "0x12FA004")]
		private void DoGetFillAmount()
		{
		}

		[Token(Token = "0x6002BBD")]
		[Address(RVA = "0x12FA08C", Offset = "0x12FA08C", VA = "0x12FA08C")]
		public UiImageGetFillAmount()
		{
		}
	}
	[Token(Token = "0x20008C0")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the source image sprite of a UI Image component.")]
	public class UiImageGetSprite : ComponentAction<Image>
	{
		[Token(Token = "0x40029CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Image component.")]
		[CheckForComponent(typeof(Image))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The source sprite of the UI Image component.")]
		[RequiredField]
		[ObjectType(typeof(Sprite))]
		public FsmObject sprite;

		[Token(Token = "0x40029CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Image image;

		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0x12FA0D4", Offset = "0x12FA0D4", VA = "0x12FA0D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0x12FA0FC", Offset = "0x12FA0FC", VA = "0x12FA0FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0x12FA188", Offset = "0x12FA188", VA = "0x12FA188")]
		private void DoSetImageSourceValue()
		{
		}

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0x12FA218", Offset = "0x12FA218", VA = "0x12FA218")]
		public UiImageGetSprite()
		{
		}
	}
	[Token(Token = "0x20008C1")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Set The Fill Amount on a UI Image")]
	public class UiImageSetFillAmount : ComponentAction<Image>
	{
		[Token(Token = "0x40029CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Image component.")]
		[CheckForComponent(typeof(Image))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The fill amount.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat ImageFillAmount;

		[Token(Token = "0x40029CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40029D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Image image;

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0x12FA260", Offset = "0x12FA260", VA = "0x12FA260", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BC3")]
		[Address(RVA = "0x12FA29C", Offset = "0x12FA29C", VA = "0x12FA29C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BC4")]
		[Address(RVA = "0x12FA3D4", Offset = "0x12FA3D4", VA = "0x12FA3D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BC5")]
		[Address(RVA = "0x12FA33C", Offset = "0x12FA33C", VA = "0x12FA33C")]
		private void DoSetFillAmount()
		{
		}

		[Token(Token = "0x6002BC6")]
		[Address(RVA = "0x12FA3D8", Offset = "0x12FA3D8", VA = "0x12FA3D8")]
		public UiImageSetFillAmount()
		{
		}
	}
	[Token(Token = "0x20008C2")]
	[Tooltip("Sets the raycast target of a UI Image component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiImageSetRaycastTarget : ComponentAction<Image>
	{
		[Token(Token = "0x40029D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the Image UI component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The raycast target value to be set")]
		[RequiredField]
		public FsmBool raycastTarget;

		[Token(Token = "0x40029D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40029D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool originalBool;

		[Token(Token = "0x6002BC7")]
		[Address(RVA = "0x12FA420", Offset = "0x12FA420", VA = "0x12FA420", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BC8")]
		[Address(RVA = "0x12FA464", Offset = "0x12FA464", VA = "0x12FA464", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BC9")]
		[Address(RVA = "0x12FA500", Offset = "0x12FA500", VA = "0x12FA500")]
		private void DoSetRaycastTarget()
		{
		}

		[Token(Token = "0x6002BCA")]
		[Address(RVA = "0x12FA540", Offset = "0x12FA540", VA = "0x12FA540", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002BCB")]
		[Address(RVA = "0x12FA588", Offset = "0x12FA588", VA = "0x12FA588")]
		public UiImageSetRaycastTarget()
		{
		}
	}
	[Token(Token = "0x20008C3")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the source image sprite of a UI Image component.")]
	public class UiImageSetSprite : ComponentAction<Image>
	{
		[Token(Token = "0x40029D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Image))]
		[RequiredField]
		[Tooltip("The GameObject with the Image UI component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The source sprite of the UI Image component.")]
		[ObjectType(typeof(Sprite))]
		public FsmObject sprite;

		[Token(Token = "0x40029D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x40029D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Image image;

		[Token(Token = "0x40029D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Sprite originalSprite;

		[Token(Token = "0x6002BCC")]
		[Address(RVA = "0x12FA5D0", Offset = "0x12FA5D0", VA = "0x12FA5D0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BCD")]
		[Address(RVA = "0x12FA604", Offset = "0x12FA604", VA = "0x12FA604", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BCE")]
		[Address(RVA = "0x12FA6A8", Offset = "0x12FA6A8", VA = "0x12FA6A8")]
		private void DoSetImageSourceValue()
		{
		}

		[Token(Token = "0x6002BCF")]
		[Address(RVA = "0x12FA770", Offset = "0x12FA770", VA = "0x12FA770", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002BD0")]
		[Address(RVA = "0x12FA80C", Offset = "0x12FA80C", VA = "0x12FA80C")]
		public UiImageSetSprite()
		{
		}
	}
	[Token(Token = "0x20008C4")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Activate a UI InputField component to begin processing Events. Optionally Deactivate on state exit")]
	public class UiInputFieldActivate : ComponentAction<InputField>
	{
		[Token(Token = "0x40029DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool deactivateOnExit;

		[Token(Token = "0x40029DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x6002BD1")]
		[Address(RVA = "0x12FA854", Offset = "0x12FA854", VA = "0x12FA854", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BD2")]
		[Address(RVA = "0x12FA87C", Offset = "0x12FA87C", VA = "0x12FA87C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BD3")]
		[Address(RVA = "0x12FA908", Offset = "0x12FA908", VA = "0x12FA908")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002BD4")]
		[Address(RVA = "0x12FA98C", Offset = "0x12FA98C", VA = "0x12FA98C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002BD5")]
		[Address(RVA = "0x12FAA24", Offset = "0x12FAA24", VA = "0x12FAA24")]
		public UiInputFieldActivate()
		{
		}
	}
	[Token(Token = "0x20008C5")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Deactivate a UI InputField to stop the processing of Events and send OnSubmit if not canceled. Optionally Activate on state exit")]
	public class UiInputFieldDeactivate : ComponentAction<InputField>
	{
		[Token(Token = "0x40029DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Activate when exiting this state.")]
		public FsmBool activateOnExit;

		[Token(Token = "0x40029DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x6002BD6")]
		[Address(RVA = "0x12FAA6C", Offset = "0x12FAA6C", VA = "0x12FAA6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BD7")]
		[Address(RVA = "0x12FAA94", Offset = "0x12FAA94", VA = "0x12FAA94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BD8")]
		[Address(RVA = "0x12FAB20", Offset = "0x12FAB20", VA = "0x12FAB20")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002BD9")]
		[Address(RVA = "0x12FABA4", Offset = "0x12FABA4", VA = "0x12FABA4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002BDA")]
		[Address(RVA = "0x12FAC3C", Offset = "0x12FAC3C", VA = "0x12FAC3C")]
		public UiInputFieldDeactivate()
		{
		}
	}
	[Token(Token = "0x20008C6")]
	[Tooltip("Gets the caret's blink rate of a UI InputField component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetCaretBlinkRate : ComponentAction<InputField>
	{
		[Token(Token = "0x40029E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The caret's blink rate for the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat caretBlinkRate;

		[Token(Token = "0x40029E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40029E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x6002BDB")]
		[Address(RVA = "0x12FAC84", Offset = "0x12FAC84", VA = "0x12FAC84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BDC")]
		[Address(RVA = "0x12FACA8", Offset = "0x12FACA8", VA = "0x12FACA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BDD")]
		[Address(RVA = "0x12FADCC", Offset = "0x12FADCC", VA = "0x12FADCC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BDE")]
		[Address(RVA = "0x12FAD48", Offset = "0x12FAD48", VA = "0x12FAD48")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002BDF")]
		[Address(RVA = "0x12FADD0", Offset = "0x12FADD0", VA = "0x12FADD0")]
		public UiInputFieldGetCaretBlinkRate()
		{
		}
	}
	[Token(Token = "0x20008C7")]
	[Tooltip("Gets the Character Limit value of a UI InputField component. This is the maximum number of characters that the user can type into the field.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetCharacterLimit : ComponentAction<InputField>
	{
		[Token(Token = "0x40029E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The maximum number of characters that the user can type into the UI InputField component.")]
		[RequiredField]
		public FsmInt characterLimit;

		[Token(Token = "0x40029E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if limit is infinite (equal to 0)")]
		public FsmEvent hasNoLimitEvent;

		[Token(Token = "0x40029E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if limit is more than 0")]
		public FsmEvent isLimitedEvent;

		[Token(Token = "0x40029E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame, useful for animation")]
		public bool everyFrame;

		[Token(Token = "0x40029E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputField inputField;

		[Token(Token = "0x6002BE0")]
		[Address(RVA = "0x12FAE18", Offset = "0x12FAE18", VA = "0x12FAE18", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BE1")]
		[Address(RVA = "0x12FAE3C", Offset = "0x12FAE3C", VA = "0x12FAE3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BE2")]
		[Address(RVA = "0x12FAF8C", Offset = "0x12FAF8C", VA = "0x12FAF8C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BE3")]
		[Address(RVA = "0x12FAEDC", Offset = "0x12FAEDC", VA = "0x12FAEDC")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002BE4")]
		[Address(RVA = "0x12FAF90", Offset = "0x12FAF90", VA = "0x12FAF90")]
		public UiInputFieldGetCharacterLimit()
		{
		}
	}
	[Token(Token = "0x20008C8")]
	[Tooltip("Gets the Hide Mobile Input value of a UI InputField component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetHideMobileInput : ComponentAction<InputField>
	{
		[Token(Token = "0x40029EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the Hide Mobile flag value of the UI InputField component.")]
		public FsmBool hideMobileInput;

		[Token(Token = "0x40029EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if hide mobile input property is true")]
		public FsmEvent mobileInputHiddenEvent;

		[Token(Token = "0x40029ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if hide mobile input property is false")]
		public FsmEvent mobileInputShownEvent;

		[Token(Token = "0x40029EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x6002BE5")]
		[Address(RVA = "0x12FAFD8", Offset = "0x12FAFD8", VA = "0x12FAFD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BE6")]
		[Address(RVA = "0x12FB010", Offset = "0x12FB010", VA = "0x12FB010", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BE7")]
		[Address(RVA = "0x12FB09C", Offset = "0x12FB09C", VA = "0x12FB09C")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002BE8")]
		[Address(RVA = "0x12FB168", Offset = "0x12FB168", VA = "0x12FB168")]
		public UiInputFieldGetHideMobileInput()
		{
		}
	}
	[Token(Token = "0x20008C9")]
	[Tooltip("Gets the focused state of a UI InputField component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetIsFocused : ComponentAction<InputField>
	{
		[Token(Token = "0x40029EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the is focused flag value of the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		public FsmBool isFocused;

		[Token(Token = "0x40029F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if inputField is focused")]
		public FsmEvent isfocusedEvent;

		[Token(Token = "0x40029F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if nputField is not focused")]
		public FsmEvent isNotFocusedEvent;

		[Token(Token = "0x40029F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x6002BE9")]
		[Address(RVA = "0x12FB1B0", Offset = "0x12FB1B0", VA = "0x12FB1B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BEA")]
		[Address(RVA = "0x12FB1E8", Offset = "0x12FB1E8", VA = "0x12FB1E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BEB")]
		[Address(RVA = "0x12FB274", Offset = "0x12FB274", VA = "0x12FB274")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002BEC")]
		[Address(RVA = "0x12FB324", Offset = "0x12FB324", VA = "0x12FB324")]
		public UiInputFieldGetIsFocused()
		{
		}
	}
	[Token(Token = "0x20008CA")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the placeHolder GameObject of a UI InputField component.")]
	public class UiInputFieldGetPlaceHolder : ComponentAction<InputField>
	{
		[Token(Token = "0x40029F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the placeholder for the UI InputField component.")]
		public FsmGameObject placeHolder;

		[Token(Token = "0x40029F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("true if placeholder is found")]
		public FsmBool placeHolderDefined;

		[Token(Token = "0x40029F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if no placeholder is defined")]
		public FsmEvent foundEvent;

		[Token(Token = "0x40029F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if a placeholder is defined")]
		public FsmEvent notFoundEvent;

		[Token(Token = "0x40029F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputField inputField;

		[Token(Token = "0x6002BED")]
		[Address(RVA = "0x12FB36C", Offset = "0x12FB36C", VA = "0x12FB36C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BEE")]
		[Address(RVA = "0x12FB3B4", Offset = "0x12FB3B4", VA = "0x12FB3B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BEF")]
		[Address(RVA = "0x12FB440", Offset = "0x12FB440", VA = "0x12FB440")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002BF0")]
		[Address(RVA = "0x12FB554", Offset = "0x12FB554", VA = "0x12FB554")]
		public UiInputFieldGetPlaceHolder()
		{
		}
	}
	[Token(Token = "0x20008CB")]
	[Tooltip("Gets the selection color of a UI InputField component. This is the color of the highlighter to show what characters are selected")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetSelectionColor : ComponentAction<InputField>
	{
		[Token(Token = "0x40029FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("This is the color of the highlighter to show what characters are selected of the UI InputField component.")]
		public FsmColor selectionColor;

		[Token(Token = "0x40029FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x40029FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x6002BF1")]
		[Address(RVA = "0x12FB59C", Offset = "0x12FB59C", VA = "0x12FB59C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BF2")]
		[Address(RVA = "0x12FB5C0", Offset = "0x12FB5C0", VA = "0x12FB5C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BF3")]
		[Address(RVA = "0x12FB6E8", Offset = "0x12FB6E8", VA = "0x12FB6E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BF4")]
		[Address(RVA = "0x12FB660", Offset = "0x12FB660", VA = "0x12FB660")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002BF5")]
		[Address(RVA = "0x12FB6EC", Offset = "0x12FB6EC", VA = "0x12FB6EC")]
		public UiInputFieldGetSelectionColor()
		{
		}
	}
	[Token(Token = "0x20008CC")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the text value of a UI InputField component.")]
	public class UiInputFieldGetText : ComponentAction<InputField>
	{
		[Token(Token = "0x40029FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x40029FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The text value of the UI InputField component.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmString text;

		[Token(Token = "0x4002A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x6002BF6")]
		[Address(RVA = "0x12FB734", Offset = "0x12FB734", VA = "0x12FB734", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BF7")]
		[Address(RVA = "0x12FB758", Offset = "0x12FB758", VA = "0x12FB758", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BF8")]
		[Address(RVA = "0x12FB888", Offset = "0x12FB888", VA = "0x12FB888", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BF9")]
		[Address(RVA = "0x12FB7F8", Offset = "0x12FB7F8", VA = "0x12FB7F8")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x6002BFA")]
		[Address(RVA = "0x12FB88C", Offset = "0x12FB88C", VA = "0x12FB88C")]
		public UiInputFieldGetText()
		{
		}
	}
	[Token(Token = "0x20008CD")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the text value of a UI InputField component as a float.")]
	public class UiInputFieldGetTextAsFloat : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The text value as a float of the UI InputField component.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat value;

		[Token(Token = "0x4002A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("true if text resolves to a float")]
		public FsmBool isFloat;

		[Token(Token = "0x4002A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("true if text resolves to a float")]
		public FsmEvent isFloatEvent;

		[Token(Token = "0x4002A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event sent if text does not resolves to a float")]
		public FsmEvent isNotFloatEvent;

		[Token(Token = "0x4002A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private InputField inputField;

		[Token(Token = "0x4002A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _value;

		[Token(Token = "0x4002A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _success;

		[Token(Token = "0x6002BFB")]
		[Address(RVA = "0x12FB8D4", Offset = "0x12FB8D4", VA = "0x12FB8D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002BFC")]
		[Address(RVA = "0x12FB924", Offset = "0x12FB924", VA = "0x12FB924", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002BFD")]
		[Address(RVA = "0x12FBA98", Offset = "0x12FBA98", VA = "0x12FBA98", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002BFE")]
		[Address(RVA = "0x12FB9C4", Offset = "0x12FB9C4", VA = "0x12FB9C4")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x6002BFF")]
		[Address(RVA = "0x12FBA9C", Offset = "0x12FBA9C", VA = "0x12FBA9C")]
		public UiInputFieldGetTextAsFloat()
		{
		}
	}
	[Token(Token = "0x20008CE")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the text value of a UI InputField component as an Int.")]
	public class UiInputFieldGetTextAsInt : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the text value as an int.")]
		public FsmInt value;

		[Token(Token = "0x4002A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("True if text resolves to an int")]
		[UIHint(UIHint.Variable)]
		public FsmBool isInt;

		[Token(Token = "0x4002A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if text resolves to an int")]
		public FsmEvent isIntEvent;

		[Token(Token = "0x4002A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send if text does NOT resolve to an int")]
		public FsmEvent isNotIntEvent;

		[Token(Token = "0x4002A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private InputField inputField;

		[Token(Token = "0x4002A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _value;

		[Token(Token = "0x4002A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _success;

		[Token(Token = "0x6002C00")]
		[Address(RVA = "0x12FBAE4", Offset = "0x12FBAE4", VA = "0x12FBAE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C01")]
		[Address(RVA = "0x12FBB34", Offset = "0x12FBB34", VA = "0x12FBB34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C02")]
		[Address(RVA = "0x12FBCA8", Offset = "0x12FBCA8", VA = "0x12FBCA8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C03")]
		[Address(RVA = "0x12FBBD4", Offset = "0x12FBBD4", VA = "0x12FBBD4")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x6002C04")]
		[Address(RVA = "0x12FBCAC", Offset = "0x12FBCAC", VA = "0x12FBCAC")]
		public UiInputFieldGetTextAsInt()
		{
		}
	}
	[Token(Token = "0x20008CF")]
	[Tooltip("Gets the cancel state of a UI InputField component. This relates to the last onEndEdit Event")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldGetWasCanceled : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The was canceled flag value of the UI InputField component.")]
		public FsmBool wasCanceled;

		[Token(Token = "0x4002A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if inputField was canceled")]
		public FsmEvent wasCanceledEvent;

		[Token(Token = "0x4002A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if inputField was not canceled")]
		public FsmEvent wasNotCanceledEvent;

		[Token(Token = "0x4002A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x6002C05")]
		[Address(RVA = "0x12FBCF4", Offset = "0x12FBCF4", VA = "0x12FBCF4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C06")]
		[Address(RVA = "0x12FBD2C", Offset = "0x12FBD2C", VA = "0x12FBD2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C07")]
		[Address(RVA = "0x12FBDB8", Offset = "0x12FBDB8", VA = "0x12FBDB8")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002C08")]
		[Address(RVA = "0x12FBE68", Offset = "0x12FBE68", VA = "0x12FBE68")]
		public UiInputFieldGetWasCanceled()
		{
		}
	}
	[Token(Token = "0x20008D0")]
	[Tooltip("Move Caret to text end in a UI InputField component. Optionally select from the current caret position")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldMoveCaretToTextEnd : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Define if we select or not from the current caret position. Default is true = no selection")]
		public FsmBool shift;

		[Token(Token = "0x4002A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x6002C09")]
		[Address(RVA = "0x12FBEB0", Offset = "0x12FBEB0", VA = "0x12FBEB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C0A")]
		[Address(RVA = "0x12FBEE4", Offset = "0x12FBEE4", VA = "0x12FBEE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C0B")]
		[Address(RVA = "0x12FBF70", Offset = "0x12FBF70", VA = "0x12FBF70")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002C0C")]
		[Address(RVA = "0x12FC00C", Offset = "0x12FC00C", VA = "0x12FC00C")]
		public UiInputFieldMoveCaretToTextEnd()
		{
		}
	}
	[Token(Token = "0x20008D1")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Move Caret to text start in a UI InputField component. Optionally select from the current caret position")]
	public class UiInputFieldMoveCaretToTextStart : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Define if we select or not from the current caret position. Default is true = no selection")]
		public FsmBool shift;

		[Token(Token = "0x4002A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private InputField inputField;

		[Token(Token = "0x6002C0D")]
		[Address(RVA = "0x12FC054", Offset = "0x12FC054", VA = "0x12FC054", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C0E")]
		[Address(RVA = "0x12FC088", Offset = "0x12FC088", VA = "0x12FC088", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C0F")]
		[Address(RVA = "0x12FC114", Offset = "0x12FC114", VA = "0x12FC114")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002C10")]
		[Address(RVA = "0x12FC1B0", Offset = "0x12FC1B0", VA = "0x12FC1B0")]
		public UiInputFieldMoveCaretToTextStart()
		{
		}
	}
	[Token(Token = "0x20008D2")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Fires an event when editing ended in a UI InputField component. Event string data will contain the text value, and the boolean will be true is it was a cancel action")]
	public class UiInputFieldOnEndEditEvent : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when editing ended.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The content of the InputField when edited ended")]
		public FsmString text;

		[Token(Token = "0x4002A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The canceled state of the InputField when edited ended")]
		public FsmBool wasCanceled;

		[Token(Token = "0x4002A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputField inputField;

		[Token(Token = "0x6002C11")]
		[Address(RVA = "0x12FC1F8", Offset = "0x12FC1F8", VA = "0x12FC1F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C12")]
		[Address(RVA = "0x12FC240", Offset = "0x12FC240", VA = "0x12FC240", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C13")]
		[Address(RVA = "0x12FC380", Offset = "0x12FC380", VA = "0x12FC380", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C14")]
		[Address(RVA = "0x12FC470", Offset = "0x12FC470", VA = "0x12FC470")]
		public void DoOnEndEdit(string value)
		{
		}

		[Token(Token = "0x6002C15")]
		[Address(RVA = "0x12FC55C", Offset = "0x12FC55C", VA = "0x12FC55C")]
		public UiInputFieldOnEndEditEvent()
		{
		}
	}
	[Token(Token = "0x20008D3")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Fires an event when user submits from a UI InputField component. \nThis only fires if the user press Enter, not when field looses focus or user escaped the field.\nEvent string data will contain the text value.")]
	public class UiInputFieldOnSubmitEvent : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when editing ended.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The content of the InputField when submitting")]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x4002A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x6002C16")]
		[Address(RVA = "0x12FC5A4", Offset = "0x12FC5A4", VA = "0x12FC5A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C17")]
		[Address(RVA = "0x12FC5EC", Offset = "0x12FC5EC", VA = "0x12FC5EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C18")]
		[Address(RVA = "0x12FC72C", Offset = "0x12FC72C", VA = "0x12FC72C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C19")]
		[Address(RVA = "0x12FC81C", Offset = "0x12FC81C", VA = "0x12FC81C")]
		public void DoOnEndEdit(string value)
		{
		}

		[Token(Token = "0x6002C1A")]
		[Address(RVA = "0x12FC8EC", Offset = "0x12FC8EC", VA = "0x12FC8EC")]
		public UiInputFieldOnSubmitEvent()
		{
		}
	}
	[Token(Token = "0x20008D4")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Catches UI InputField onValueChanged event. Store the new value and/or send events. Event string data also contains the new value.")]
	public class UiInputFieldOnValueChangeEvent : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when value changed.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store new value in string variable.")]
		[UIHint(UIHint.Variable)]
		public FsmString text;

		[Token(Token = "0x4002A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x6002C1B")]
		[Address(RVA = "0x12FC934", Offset = "0x12FC934", VA = "0x12FC934", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C1C")]
		[Address(RVA = "0x12FC97C", Offset = "0x12FC97C", VA = "0x12FC97C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C1D")]
		[Address(RVA = "0x12FCABC", Offset = "0x12FCABC", VA = "0x12FCABC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C1E")]
		[Address(RVA = "0x12FCBAC", Offset = "0x12FCBAC", VA = "0x12FCBAC")]
		public void DoOnValueChange(string value)
		{
		}

		[Token(Token = "0x6002C1F")]
		[Address(RVA = "0x12FCC54", Offset = "0x12FCC54", VA = "0x12FCC54")]
		public UiInputFieldOnValueChangeEvent()
		{
		}
	}
	[Token(Token = "0x20008D5")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the Asterix Character of a UI InputField component.")]
	public class UiInputFieldSetAsterixChar : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The asterix Character used for password field type of the UI InputField component. Only the first character will be used, the rest of the string will be ignored")]
		[RequiredField]
		public FsmString asterixChar;

		[Token(Token = "0x4002A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x4002A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private char originalValue;

		[Token(Token = "0x4002A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static char __char__;

		[Token(Token = "0x6002C20")]
		[Address(RVA = "0x12FCC9C", Offset = "0x12FCC9C", VA = "0x12FCC9C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C21")]
		[Address(RVA = "0x12FCD14", Offset = "0x12FCD14", VA = "0x12FCD14", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C22")]
		[Address(RVA = "0x12FCDB0", Offset = "0x12FCDB0", VA = "0x12FCDB0")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C23")]
		[Address(RVA = "0x12FCEB0", Offset = "0x12FCEB0", VA = "0x12FCEB0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C24")]
		[Address(RVA = "0x12FCF4C", Offset = "0x12FCF4C", VA = "0x12FCF4C")]
		public UiInputFieldSetAsterixChar()
		{
		}
	}
	[Token(Token = "0x20008D6")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the caret's blink rate of a UI InputField component.")]
	public class UiInputFieldSetCaretBlinkRate : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The caret's blink rate for the UI InputField component.")]
		[RequiredField]
		public FsmInt caretBlinkRate;

		[Token(Token = "0x4002A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Deactivate when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x4002A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6002C26")]
		[Address(RVA = "0x12FCFE0", Offset = "0x12FCFE0", VA = "0x12FCFE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C27")]
		[Address(RVA = "0x12FD020", Offset = "0x12FD020", VA = "0x12FD020", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C28")]
		[Address(RVA = "0x12FD16C", Offset = "0x12FD16C", VA = "0x12FD16C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C29")]
		[Address(RVA = "0x12FD0D0", Offset = "0x12FD0D0", VA = "0x12FD0D0")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C2A")]
		[Address(RVA = "0x12FD170", Offset = "0x12FD170", VA = "0x12FD170", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C2B")]
		[Address(RVA = "0x12FD20C", Offset = "0x12FD20C", VA = "0x12FD20C")]
		public UiInputFieldSetCaretBlinkRate()
		{
		}
	}
	[Token(Token = "0x20008D7")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the maximum number of characters that the user can type into a UI InputField component. Optionally reset on exit")]
	public class UiInputFieldSetCharacterLimit : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The maximum number of characters that the user can type into the UI InputField component. 0 = infinite")]
		[RequiredField]
		public FsmInt characterLimit;

		[Token(Token = "0x4002A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x4002A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int originalValue;

		[Token(Token = "0x6002C2C")]
		[Address(RVA = "0x12FD254", Offset = "0x12FD254", VA = "0x12FD254", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C2D")]
		[Address(RVA = "0x12FD294", Offset = "0x12FD294", VA = "0x12FD294", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C2E")]
		[Address(RVA = "0x12FD3E0", Offset = "0x12FD3E0", VA = "0x12FD3E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C2F")]
		[Address(RVA = "0x12FD344", Offset = "0x12FD344", VA = "0x12FD344")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C30")]
		[Address(RVA = "0x12FD3E4", Offset = "0x12FD3E4", VA = "0x12FD3E4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C31")]
		[Address(RVA = "0x12FD480", Offset = "0x12FD480", VA = "0x12FD480")]
		public UiInputFieldSetCharacterLimit()
		{
		}
	}
	[Token(Token = "0x20008D8")]
	[Tooltip("Sets the Hide Mobile Input property of a UI InputField component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiInputFieldSetHideMobileInput : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		[CheckForComponent(typeof(InputField))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.TextArea)]
		[RequiredField]
		[Tooltip("The Hide Mobile Input flag value of the UI InputField component.")]
		public FsmBool hideMobileInput;

		[Token(Token = "0x4002A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x4002A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool originalValue;

		[Token(Token = "0x6002C32")]
		[Address(RVA = "0x12FD4C8", Offset = "0x12FD4C8", VA = "0x12FD4C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C33")]
		[Address(RVA = "0x12FD500", Offset = "0x12FD500", VA = "0x12FD500", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C34")]
		[Address(RVA = "0x12FD5A4", Offset = "0x12FD5A4", VA = "0x12FD5A4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C35")]
		[Address(RVA = "0x12FD640", Offset = "0x12FD640", VA = "0x12FD640", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C36")]
		[Address(RVA = "0x12FD6DC", Offset = "0x12FD6DC", VA = "0x12FD6DC")]
		public UiInputFieldSetHideMobileInput()
		{
		}
	}
	[Token(Token = "0x20008D9")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the placeholder of a UI InputField component. Optionally reset on exit")]
	public class UiInputFieldSetPlaceHolder : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The placeholder (any graphic UI Component) for the UI InputField component.")]
		[RequiredField]
		[CheckForComponent(typeof(Graphic))]
		public FsmGameObject placeholder;

		[Token(Token = "0x4002A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private InputField inputField;

		[Token(Token = "0x4002A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Graphic originalValue;

		[Token(Token = "0x6002C37")]
		[Address(RVA = "0x12FD724", Offset = "0x12FD724", VA = "0x12FD724", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C38")]
		[Address(RVA = "0x12FD75C", Offset = "0x12FD75C", VA = "0x12FD75C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C39")]
		[Address(RVA = "0x12FD800", Offset = "0x12FD800", VA = "0x12FD800")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C3A")]
		[Address(RVA = "0x12FD8F8", Offset = "0x12FD8F8", VA = "0x12FD8F8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C3B")]
		[Address(RVA = "0x12FD994", Offset = "0x12FD994", VA = "0x12FD994")]
		public UiInputFieldSetPlaceHolder()
		{
		}
	}
	[Token(Token = "0x20008DA")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the selection color of a UI InputField component. This is the color of the highlighter to show what characters are selected.")]
	public class UiInputFieldSetSelectionColor : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(InputField))]
		[Tooltip("The GameObject with the UI InputField component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The color of the highlighter to show what characters are selected for the UI InputField component.")]
		[RequiredField]
		public FsmColor selectionColor;

		[Token(Token = "0x4002A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x4002A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Color originalValue;

		[Token(Token = "0x6002C3C")]
		[Address(RVA = "0x12FD9DC", Offset = "0x12FD9DC", VA = "0x12FD9DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C3D")]
		[Address(RVA = "0x12FDA1C", Offset = "0x12FDA1C", VA = "0x12FDA1C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C3E")]
		[Address(RVA = "0x12FDB64", Offset = "0x12FDB64", VA = "0x12FDB64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C3F")]
		[Address(RVA = "0x12FDAD0", Offset = "0x12FDAD0", VA = "0x12FDAD0")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C40")]
		[Address(RVA = "0x12FDB68", Offset = "0x12FDB68", VA = "0x12FDB68", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C41")]
		[Address(RVA = "0x12FDC08", Offset = "0x12FDC08", VA = "0x12FDC08")]
		public UiInputFieldSetSelectionColor()
		{
		}
	}
	[Token(Token = "0x20008DB")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the text value of a UI InputField component.")]
	public class UiInputFieldSetText : ComponentAction<InputField>
	{
		[Token(Token = "0x4002A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI InputField component.")]
		[CheckForComponent(typeof(InputField))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The text of the UI InputField component.")]
		[UIHint(UIHint.TextArea)]
		public FsmString text;

		[Token(Token = "0x4002A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private InputField inputField;

		[Token(Token = "0x4002A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string originalString;

		[Token(Token = "0x6002C42")]
		[Address(RVA = "0x12FEC50", Offset = "0x12FEC50", VA = "0x12FEC50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C43")]
		[Address(RVA = "0x12FEC90", Offset = "0x12FEC90", VA = "0x12FEC90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C44")]
		[Address(RVA = "0x12FEDE4", Offset = "0x12FEDE4", VA = "0x12FEDE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C45")]
		[Address(RVA = "0x12FED48", Offset = "0x12FED48", VA = "0x12FED48")]
		private void DoSetTextValue()
		{
		}

		[Token(Token = "0x6002C46")]
		[Address(RVA = "0x12FEDE8", Offset = "0x12FEDE8", VA = "0x12FEDE8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C47")]
		[Address(RVA = "0x12FEE84", Offset = "0x12FEE84", VA = "0x12FEE84")]
		public UiInputFieldSetText()
		{
		}
	}
	[Token(Token = "0x20008DC")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the raycast target of a UI Raw Image component.")]
	public class UiRawImageSetRaycastTarget : ComponentAction<RawImage>
	{
		[Token(Token = "0x4002A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Image))]
		[Tooltip("The GameObject with the Raw Image UI component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The raycast target value to be set")]
		public FsmBool raycastTarget;

		[Token(Token = "0x4002A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool originalBool;

		[Token(Token = "0x6002C48")]
		[Address(RVA = "0x12FEECC", Offset = "0x12FEECC", VA = "0x12FEECC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C49")]
		[Address(RVA = "0x12FEF10", Offset = "0x12FEF10", VA = "0x12FEF10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C4A")]
		[Address(RVA = "0x12FEFAC", Offset = "0x12FEFAC", VA = "0x12FEFAC")]
		private void DoSetRaycastTarget()
		{
		}

		[Token(Token = "0x6002C4B")]
		[Address(RVA = "0x12FEFEC", Offset = "0x12FEFEC", VA = "0x12FEFEC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C4C")]
		[Address(RVA = "0x12FF034", Offset = "0x12FF034", VA = "0x12FF034")]
		public UiRawImageSetRaycastTarget()
		{
		}
	}
	[Token(Token = "0x20008DD")]
	[Tooltip("Sets the texture of a UI RawImage component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiRawImageSetTexture : ComponentAction<RawImage>
	{
		[Token(Token = "0x4002A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(RawImage))]
		[Tooltip("The GameObject with the UI RawImage component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The texture of the UI RawImage component.")]
		[RequiredField]
		public FsmTexture texture;

		[Token(Token = "0x4002A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private RawImage _texture;

		[Token(Token = "0x4002A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture _originalTexture;

		[Token(Token = "0x6002C4D")]
		[Address(RVA = "0x12FF07C", Offset = "0x12FF07C", VA = "0x12FF07C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C4E")]
		[Address(RVA = "0x12FF0B4", Offset = "0x12FF0B4", VA = "0x12FF0B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C4F")]
		[Address(RVA = "0x12FF158", Offset = "0x12FF158", VA = "0x12FF158")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C50")]
		[Address(RVA = "0x12FF1F4", Offset = "0x12FF1F4", VA = "0x12FF1F4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C51")]
		[Address(RVA = "0x12FF290", Offset = "0x12FF290", VA = "0x12FF290")]
		public UiRawImageSetTexture()
		{
		}
	}
	[Token(Token = "0x20008DE")]
	[Tooltip("Rebuild a UI Graphic component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiRebuild : ComponentAction<Graphic>
	{
		[Token(Token = "0x4002A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Graphic component.")]
		[CheckForComponent(typeof(Graphic))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("When to Update.")]
		public CanvasUpdate canvasUpdate;

		[Token(Token = "0x4002A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Only Rebuild when state exits.")]
		public bool rebuildOnExit;

		[Token(Token = "0x4002A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Graphic graphic;

		[Token(Token = "0x6002C52")]
		[Address(RVA = "0x12FF2D8", Offset = "0x12FF2D8", VA = "0x12FF2D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C53")]
		[Address(RVA = "0x12FF304", Offset = "0x12FF304", VA = "0x12FF304", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C54")]
		[Address(RVA = "0x12FF398", Offset = "0x12FF398", VA = "0x12FF398")]
		private void DoAction()
		{
		}

		[Token(Token = "0x6002C55")]
		[Address(RVA = "0x12FF428", Offset = "0x12FF428", VA = "0x12FF428", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C56")]
		[Address(RVA = "0x12FF438", Offset = "0x12FF438", VA = "0x12FF438")]
		public UiRebuild()
		{
		}
	}
	[Token(Token = "0x20008DF")]
	[Tooltip("Gets the direction of a UI Scrollbar component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollbarGetDirection : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4002A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		[CheckForComponent(typeof(Scrollbar))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(Scrollbar.Direction))]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the direction of the UI Scrollbar.")]
		public FsmEnum direction;

		[Token(Token = "0x4002A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Scrollbar scrollbar;

		[Token(Token = "0x6002C57")]
		[Address(RVA = "0x12FF480", Offset = "0x12FF480", VA = "0x12FF480", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C58")]
		[Address(RVA = "0x12FF4B0", Offset = "0x12FF4B0", VA = "0x12FF4B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C59")]
		[Address(RVA = "0x12FF60C", Offset = "0x12FF60C", VA = "0x12FF60C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C5A")]
		[Address(RVA = "0x12FF550", Offset = "0x12FF550", VA = "0x12FF550")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002C5B")]
		[Address(RVA = "0x12FF610", Offset = "0x12FF610", VA = "0x12FF610")]
		public UiScrollbarGetDirection()
		{
		}
	}
	[Token(Token = "0x20008E0")]
	[Tooltip("Gets the value of a UI Scrollbar component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollbarGetValue : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4002A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The position value of the UI Scrollbar.")]
		[RequiredField]
		public FsmFloat value;

		[Token(Token = "0x4002A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Scrollbar scrollbar;

		[Token(Token = "0x6002C5C")]
		[Address(RVA = "0x12FF658", Offset = "0x12FF658", VA = "0x12FF658", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C5D")]
		[Address(RVA = "0x12FF688", Offset = "0x12FF688", VA = "0x12FF688", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C5E")]
		[Address(RVA = "0x12FF7B0", Offset = "0x12FF7B0", VA = "0x12FF7B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C5F")]
		[Address(RVA = "0x12FF728", Offset = "0x12FF728", VA = "0x12FF728")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002C60")]
		[Address(RVA = "0x12FF7B4", Offset = "0x12FF7B4", VA = "0x12FF7B4")]
		public UiScrollbarGetValue()
		{
		}
	}
	[Token(Token = "0x20008E1")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Catches UI Scrollbar onValueChanged event. Store the new value and/or send events. Event float data will contain the new Scrollbar value")]
	public class UiScrollbarOnValueChanged : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4002A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when the UI Scrollbar value changes.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store new value in float variable.")]
		public FsmFloat value;

		[Token(Token = "0x4002A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x6002C61")]
		[Address(RVA = "0x12FF7FC", Offset = "0x12FF7FC", VA = "0x12FF7FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C62")]
		[Address(RVA = "0x12FF844", Offset = "0x12FF844", VA = "0x12FF844", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C63")]
		[Address(RVA = "0x12FF984", Offset = "0x12FF984", VA = "0x12FF984", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C64")]
		[Address(RVA = "0x12FFA74", Offset = "0x12FFA74", VA = "0x12FFA74")]
		public void DoOnValueChanged(float _value)
		{
		}

		[Token(Token = "0x6002C65")]
		[Address(RVA = "0x12FFB14", Offset = "0x12FFB14", VA = "0x12FFB14")]
		public UiScrollbarOnValueChanged()
		{
		}
	}
	[Token(Token = "0x20008E2")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the direction of a UI Scrollbar component.")]
	public class UiScrollbarSetDirection : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4002A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Scrollbar))]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The direction of the UI Scrollbar.")]
		[ObjectType(typeof(Scrollbar.Direction))]
		public FsmEnum direction;

		[Token(Token = "0x4002A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Include the  RectLayouts. Leave to none for no effect")]
		public FsmBool includeRectLayouts;

		[Token(Token = "0x4002A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x4002A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Scrollbar.Direction originalValue;

		[Token(Token = "0x6002C66")]
		[Address(RVA = "0x12FFB5C", Offset = "0x12FFB5C", VA = "0x12FFB5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C67")]
		[Address(RVA = "0x12FFC34", Offset = "0x12FFC34", VA = "0x12FFC34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C68")]
		[Address(RVA = "0x12FFCE4", Offset = "0x12FFCE4", VA = "0x12FFCE4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C69")]
		[Address(RVA = "0x12FFE48", Offset = "0x12FFE48", VA = "0x12FFE48", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C6A")]
		[Address(RVA = "0x12FFF30", Offset = "0x12FFF30", VA = "0x12FFF30")]
		public UiScrollbarSetDirection()
		{
		}
	}
	[Token(Token = "0x20008E3")]
	[Tooltip("Sets the number of distinct scroll positions allowed for a UI Scrollbar component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollbarSetNumberOfSteps : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4002A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Scrollbar))]
		[RequiredField]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The number of distinct scroll positions allowed for the UI Scrollbar.")]
		[RequiredField]
		public FsmInt value;

		[Token(Token = "0x4002A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x4002A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int originalValue;

		[Token(Token = "0x6002C6B")]
		[Address(RVA = "0x12FFF78", Offset = "0x12FFF78", VA = "0x12FFF78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0x12FFFB8", Offset = "0x12FFFB8", VA = "0x12FFFB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C6D")]
		[Address(RVA = "0x1300104", Offset = "0x1300104", VA = "0x1300104", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C6E")]
		[Address(RVA = "0x1300068", Offset = "0x1300068", VA = "0x1300068")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C6F")]
		[Address(RVA = "0x1300108", Offset = "0x1300108", VA = "0x1300108", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C70")]
		[Address(RVA = "0x13001A4", Offset = "0x13001A4", VA = "0x13001A4")]
		public UiScrollbarSetNumberOfSteps()
		{
		}
	}
	[Token(Token = "0x20008E4")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the fractional size of the handle of a UI Scrollbar component. Ranges from 0.0 to 1.0.")]
	public class UiScrollbarSetSize : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4002A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		[CheckForComponent(typeof(Scrollbar))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HasFloatSlider(0f, 1f)]
		[RequiredField]
		[Tooltip("The fractional size of the handle for the UI Scrollbar. Ranges from 0.0 to 1.0.")]
		public FsmFloat value;

		[Token(Token = "0x4002A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x4002A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6002C71")]
		[Address(RVA = "0x13001EC", Offset = "0x13001EC", VA = "0x13001EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C72")]
		[Address(RVA = "0x130022C", Offset = "0x130022C", VA = "0x130022C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C73")]
		[Address(RVA = "0x1300388", Offset = "0x1300388", VA = "0x1300388", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C74")]
		[Address(RVA = "0x13002F0", Offset = "0x13002F0", VA = "0x13002F0")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C75")]
		[Address(RVA = "0x130038C", Offset = "0x130038C", VA = "0x130038C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C76")]
		[Address(RVA = "0x1300428", Offset = "0x1300428", VA = "0x1300428")]
		public UiScrollbarSetSize()
		{
		}
	}
	[Token(Token = "0x20008E5")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the position value of a UI Scrollbar component. Ranges from 0.0 to 1.0.")]
	public class UiScrollbarSetValue : ComponentAction<Scrollbar>
	{
		[Token(Token = "0x4002A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Scrollbar component.")]
		[CheckForComponent(typeof(Scrollbar))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("The position's value of the UI Scrollbar component. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat value;

		[Token(Token = "0x4002A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Scrollbar scrollbar;

		[Token(Token = "0x4002A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6002C77")]
		[Address(RVA = "0x1300470", Offset = "0x1300470", VA = "0x1300470", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C78")]
		[Address(RVA = "0x13004B0", Offset = "0x13004B0", VA = "0x13004B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C79")]
		[Address(RVA = "0x13005FC", Offset = "0x13005FC", VA = "0x13005FC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C7A")]
		[Address(RVA = "0x1300564", Offset = "0x1300564", VA = "0x1300564")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C7B")]
		[Address(RVA = "0x1300600", Offset = "0x1300600", VA = "0x1300600", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C7C")]
		[Address(RVA = "0x130069C", Offset = "0x130069C", VA = "0x130069C")]
		public UiScrollbarSetValue()
		{
		}
	}
	[Token(Token = "0x20008E6")]
	[Tooltip("Sets the UI ScrollRect horizontal flag")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollRectSetHorizontal : ComponentAction<ScrollRect>
	{
		[Token(Token = "0x4002A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI ScrollRect component.")]
		[RequiredField]
		[CheckForComponent(typeof(ScrollRect))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The horizontal flag")]
		public FsmBool horizontal;

		[Token(Token = "0x4002A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ScrollRect scrollRect;

		[Token(Token = "0x4002A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool originalValue;

		[Token(Token = "0x6002C7D")]
		[Address(RVA = "0x13006E4", Offset = "0x13006E4", VA = "0x13006E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C7E")]
		[Address(RVA = "0x1300724", Offset = "0x1300724", VA = "0x1300724", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C7F")]
		[Address(RVA = "0x1300860", Offset = "0x1300860", VA = "0x1300860", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C80")]
		[Address(RVA = "0x13007D4", Offset = "0x13007D4", VA = "0x13007D4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C81")]
		[Address(RVA = "0x1300864", Offset = "0x1300864", VA = "0x1300864", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C82")]
		[Address(RVA = "0x13008F4", Offset = "0x13008F4", VA = "0x13008F4")]
		public UiScrollRectSetHorizontal()
		{
		}
	}
	[Token(Token = "0x20008E7")]
	[Tooltip("The normalized scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollRectSetNormalizedPosition : ComponentAction<ScrollRect>
	{
		[Token(Token = "0x4002A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(ScrollRect))]
		[Tooltip("The GameObject with the UI ScrollRect component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The position's value of the UI ScrollRect component. Ranges from 0.0 to 1.0.")]
		public FsmVector2 normalizedPosition;

		[Token(Token = "0x4002A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The horizontal position's value of the UI ScrollRect component. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat horizontalPosition;

		[Token(Token = "0x4002A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The vertical position's value of the UI ScrollRect component. Ranges from 0.0 to 1.0.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat verticalPosition;

		[Token(Token = "0x4002A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ScrollRect scrollRect;

		[Token(Token = "0x4002A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector2 originalValue;

		[Token(Token = "0x6002C83")]
		[Address(RVA = "0x130093C", Offset = "0x130093C", VA = "0x130093C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C84")]
		[Address(RVA = "0x1300A18", Offset = "0x1300A18", VA = "0x1300A18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C85")]
		[Address(RVA = "0x1300BEC", Offset = "0x1300BEC", VA = "0x1300BEC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C86")]
		[Address(RVA = "0x1300ACC", Offset = "0x1300ACC", VA = "0x1300ACC")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C87")]
		[Address(RVA = "0x1300BF0", Offset = "0x1300BF0", VA = "0x1300BF0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C88")]
		[Address(RVA = "0x1300C8C", Offset = "0x1300C8C", VA = "0x1300C8C")]
		public UiScrollRectSetNormalizedPosition()
		{
		}
	}
	[Token(Token = "0x20008E8")]
	[Tooltip("Sets the UI ScrollRect vertical flag")]
	[ActionCategory(ActionCategory.UI)]
	public class UiScrollRectSetVertical : ComponentAction<ScrollRect>
	{
		[Token(Token = "0x4002A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(ScrollRect))]
		[Tooltip("The GameObject with the UI ScrollRect component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The vertical flag")]
		public FsmBool vertical;

		[Token(Token = "0x4002A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ScrollRect scrollRect;

		[Token(Token = "0x4002A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool originalValue;

		[Token(Token = "0x6002C89")]
		[Address(RVA = "0x1300CD4", Offset = "0x1300CD4", VA = "0x1300CD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C8A")]
		[Address(RVA = "0x1300D14", Offset = "0x1300D14", VA = "0x1300D14", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C8B")]
		[Address(RVA = "0x1300E50", Offset = "0x1300E50", VA = "0x1300E50", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C8C")]
		[Address(RVA = "0x1300DC4", Offset = "0x1300DC4", VA = "0x1300DC4")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002C8D")]
		[Address(RVA = "0x1300E54", Offset = "0x1300E54", VA = "0x1300E54", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002C8E")]
		[Address(RVA = "0x1300EE4", Offset = "0x1300EE4", VA = "0x1300EE4")]
		public UiScrollRectSetVertical()
		{
		}
	}
	[Token(Token = "0x20008E9")]
	[Tooltip("Gets the direction of a UI Slider component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderGetDirection : ComponentAction<Slider>
	{
		[Token(Token = "0x4002A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(Slider.Direction))]
		[Tooltip("The direction of the UI Slider.")]
		[RequiredField]
		public FsmEnum direction;

		[Token(Token = "0x4002A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x6002C8F")]
		[Address(RVA = "0x1300F2C", Offset = "0x1300F2C", VA = "0x1300F2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C90")]
		[Address(RVA = "0x1300F5C", Offset = "0x1300F5C", VA = "0x1300F5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C91")]
		[Address(RVA = "0x13010B8", Offset = "0x13010B8", VA = "0x13010B8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C92")]
		[Address(RVA = "0x1300FFC", Offset = "0x1300FFC", VA = "0x1300FFC")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002C93")]
		[Address(RVA = "0x13010BC", Offset = "0x13010BC", VA = "0x13010BC")]
		public UiSliderGetDirection()
		{
		}
	}
	[Token(Token = "0x20008EA")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the minimum and maximum limits for the value of a UI Slider component.")]
	public class UiSliderGetMinMax : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the minimum value of the UI Slider.")]
		public FsmFloat minValue;

		[Token(Token = "0x4002AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the maximum value of the UI Slider.")]
		public FsmFloat maxValue;

		[Token(Token = "0x4002AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x6002C94")]
		[Address(RVA = "0x1301104", Offset = "0x1301104", VA = "0x1301104", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C95")]
		[Address(RVA = "0x130113C", Offset = "0x130113C", VA = "0x130113C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C96")]
		[Address(RVA = "0x13011BC", Offset = "0x13011BC", VA = "0x13011BC")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002C97")]
		[Address(RVA = "0x1301280", Offset = "0x1301280", VA = "0x1301280")]
		public UiSliderGetMinMax()
		{
		}
	}
	[Token(Token = "0x20008EB")]
	[Tooltip("Gets the normalized value (between 0 and 1) of a UI Slider component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderGetNormalizedValue : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The normalized value (between 0 and 1) of the UI Slider.")]
		public FsmFloat value;

		[Token(Token = "0x4002AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x6002C98")]
		[Address(RVA = "0x13012C8", Offset = "0x13012C8", VA = "0x13012C8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C99")]
		[Address(RVA = "0x13012F8", Offset = "0x13012F8", VA = "0x13012F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C9A")]
		[Address(RVA = "0x1301420", Offset = "0x1301420", VA = "0x1301420", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002C9B")]
		[Address(RVA = "0x1301398", Offset = "0x1301398", VA = "0x1301398")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002C9C")]
		[Address(RVA = "0x1301424", Offset = "0x1301424", VA = "0x1301424")]
		public UiSliderGetNormalizedValue()
		{
		}
	}
	[Token(Token = "0x20008EC")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the value of a UI Slider component.")]
	public class UiSliderGetValue : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The value of the UI Slider component.")]
		[RequiredField]
		public FsmFloat value;

		[Token(Token = "0x4002AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x6002C9D")]
		[Address(RVA = "0x130146C", Offset = "0x130146C", VA = "0x130146C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002C9E")]
		[Address(RVA = "0x130149C", Offset = "0x130149C", VA = "0x130149C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002C9F")]
		[Address(RVA = "0x13015CC", Offset = "0x13015CC", VA = "0x13015CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CA0")]
		[Address(RVA = "0x130153C", Offset = "0x130153C", VA = "0x130153C")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002CA1")]
		[Address(RVA = "0x13015D0", Offset = "0x13015D0", VA = "0x13015D0")]
		public UiSliderGetValue()
		{
		}
	}
	[Token(Token = "0x20008ED")]
	[Tooltip("Gets the wholeNumbers property of a UI Slider component. If true, the Slider is constrained to integer values")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderGetWholeNumbers : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Is the Slider constrained to integer values?")]
		public FsmBool wholeNumbers;

		[Token(Token = "0x4002AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent if slider is showing integers")]
		public FsmEvent isShowingWholeNumbersEvent;

		[Token(Token = "0x4002AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent if slider is showing floats")]
		public FsmEvent isNotShowingWholeNumbersEvent;

		[Token(Token = "0x4002AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x6002CA2")]
		[Address(RVA = "0x1301618", Offset = "0x1301618", VA = "0x1301618", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CA3")]
		[Address(RVA = "0x1301660", Offset = "0x1301660", VA = "0x1301660", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CA4")]
		[Address(RVA = "0x13016EC", Offset = "0x13016EC", VA = "0x13016EC")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002CA5")]
		[Address(RVA = "0x13017A0", Offset = "0x13017A0", VA = "0x13017A0")]
		public UiSliderGetWholeNumbers()
		{
		}
	}
	[Token(Token = "0x20008EE")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Catches onValueChanged event for a UI Slider component. Store the new value and/or send events. Event float data will contain the new slider value")]
	public class UiSliderOnValueChangedEvent : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when Clicked.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the new value in float variable.")]
		public FsmFloat value;

		[Token(Token = "0x4002AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x6002CA6")]
		[Address(RVA = "0x13017E8", Offset = "0x13017E8", VA = "0x13017E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CA7")]
		[Address(RVA = "0x1301830", Offset = "0x1301830", VA = "0x1301830", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CA8")]
		[Address(RVA = "0x1301970", Offset = "0x1301970", VA = "0x1301970", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CA9")]
		[Address(RVA = "0x1301A60", Offset = "0x1301A60", VA = "0x1301A60")]
		public void DoOnValueChanged(float _value)
		{
		}

		[Token(Token = "0x6002CAA")]
		[Address(RVA = "0x1301B00", Offset = "0x1301B00", VA = "0x1301B00")]
		public UiSliderOnValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20008EF")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the direction of a UI Slider component.")]
	public class UiSliderSetDirection : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The direction of the UI Slider component.")]
		[RequiredField]
		[ObjectType(typeof(Slider.Direction))]
		public FsmEnum direction;

		[Token(Token = "0x4002AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Include the  RectLayouts. Leave to none for no effect")]
		public FsmBool includeRectLayouts;

		[Token(Token = "0x4002ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x4002ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Slider.Direction originalValue;

		[Token(Token = "0x6002CAB")]
		[Address(RVA = "0x1301B48", Offset = "0x1301B48", VA = "0x1301B48", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CAC")]
		[Address(RVA = "0x1301C20", Offset = "0x1301C20", VA = "0x1301C20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CAD")]
		[Address(RVA = "0x1301CB0", Offset = "0x1301CB0", VA = "0x1301CB0")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002CAE")]
		[Address(RVA = "0x1301E14", Offset = "0x1301E14", VA = "0x1301E14", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CAF")]
		[Address(RVA = "0x1301EFC", Offset = "0x1301EFC", VA = "0x1301EFC")]
		public UiSliderSetDirection()
		{
		}
	}
	[Token(Token = "0x20008F0")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the minimum and maximum limits for the value of a UI Slider component. Optionally resets on exit")]
	public class UiSliderSetMinMax : ComponentAction<Slider>
	{
		[Token(Token = "0x4002ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The minimum value of the UI Slider component. Leave as None for no effect")]
		public FsmFloat minValue;

		[Token(Token = "0x4002ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The maximum value of the UI Slider component. Leave as None for no effect")]
		public FsmFloat maxValue;

		[Token(Token = "0x4002AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Slider slider;

		[Token(Token = "0x4002AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float originalMinValue;

		[Token(Token = "0x4002AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float originalMaxValue;

		[Token(Token = "0x6002CB0")]
		[Address(RVA = "0x1301F44", Offset = "0x1301F44", VA = "0x1301F44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CB1")]
		[Address(RVA = "0x1302010", Offset = "0x1302010", VA = "0x1302010", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CB2")]
		[Address(RVA = "0x13021BC", Offset = "0x13021BC", VA = "0x13021BC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0x13020D8", Offset = "0x13020D8", VA = "0x13020D8")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002CB4")]
		[Address(RVA = "0x13021C0", Offset = "0x13021C0", VA = "0x13021C0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CB5")]
		[Address(RVA = "0x1302270", Offset = "0x1302270", VA = "0x1302270")]
		public UiSliderSetMinMax()
		{
		}
	}
	[Token(Token = "0x20008F1")]
	[Tooltip("Sets the normalized value ( between 0 and 1) of a UI Slider component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderSetNormalizedValue : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Slider component.")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The normalized value ( between 0 and 1) of the UI Slider component.")]
		[HasFloatSlider(0f, 1f)]
		[RequiredField]
		public FsmFloat value;

		[Token(Token = "0x4002AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x4002ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6002CB6")]
		[Address(RVA = "0x13022B8", Offset = "0x13022B8", VA = "0x13022B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CB7")]
		[Address(RVA = "0x13022F8", Offset = "0x13022F8", VA = "0x13022F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CB8")]
		[Address(RVA = "0x1302444", Offset = "0x1302444", VA = "0x1302444", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CB9")]
		[Address(RVA = "0x13023AC", Offset = "0x13023AC", VA = "0x13023AC")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002CBA")]
		[Address(RVA = "0x1302448", Offset = "0x1302448", VA = "0x1302448", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CBB")]
		[Address(RVA = "0x13024E4", Offset = "0x13024E4", VA = "0x13024E4")]
		public UiSliderSetNormalizedValue()
		{
		}
	}
	[Token(Token = "0x20008F2")]
	[Tooltip("Sets the value of a UI Slider component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiSliderSetValue : ComponentAction<Slider>
	{
		[Token(Token = "0x4002ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Slider))]
		[RequiredField]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The value of the UI Slider component.")]
		[RequiredField]
		public FsmFloat value;

		[Token(Token = "0x4002ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Slider slider;

		[Token(Token = "0x4002AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float originalValue;

		[Token(Token = "0x6002CBC")]
		[Address(RVA = "0x130252C", Offset = "0x130252C", VA = "0x130252C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CBD")]
		[Address(RVA = "0x130256C", Offset = "0x130256C", VA = "0x130256C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CBE")]
		[Address(RVA = "0x13026CC", Offset = "0x13026CC", VA = "0x13026CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CBF")]
		[Address(RVA = "0x130262C", Offset = "0x130262C", VA = "0x130262C")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002CC0")]
		[Address(RVA = "0x13026D0", Offset = "0x13026D0", VA = "0x13026D0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CC1")]
		[Address(RVA = "0x1302774", Offset = "0x1302774", VA = "0x1302774")]
		public UiSliderSetValue()
		{
		}
	}
	[Token(Token = "0x20008F3")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the wholeNumbers property of a UI Slider component. This defines if the slider will be constrained to integer values.")]
	public class UiSliderSetWholeNumbers : ComponentAction<Slider>
	{
		[Token(Token = "0x4002AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Slider))]
		[Tooltip("The GameObject with the UI Slider component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Should the slider be constrained to integer values?")]
		public FsmBool wholeNumbers;

		[Token(Token = "0x4002AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Slider slider;

		[Token(Token = "0x4002AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool originalValue;

		[Token(Token = "0x6002CC2")]
		[Address(RVA = "0x13027BC", Offset = "0x13027BC", VA = "0x13027BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CC3")]
		[Address(RVA = "0x13027F4", Offset = "0x13027F4", VA = "0x13027F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CC4")]
		[Address(RVA = "0x1302890", Offset = "0x1302890", VA = "0x1302890")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002CC5")]
		[Address(RVA = "0x130292C", Offset = "0x130292C", VA = "0x130292C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CC6")]
		[Address(RVA = "0x13029C8", Offset = "0x13029C8", VA = "0x13029C8")]
		public UiSliderSetWholeNumbers()
		{
		}
	}
	[Token(Token = "0x20008F4")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the text value of a UI Text component.")]
	public class UiTextGetText : ComponentAction<Text>
	{
		[Token(Token = "0x4002AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Text))]
		[Tooltip("The GameObject with the UI Text component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The text value of the UI Text component.")]
		public FsmString text;

		[Token(Token = "0x4002AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Runs every frame. Useful to animate values over time.")]
		public bool everyFrame;

		[Token(Token = "0x4002AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Text uiText;

		[Token(Token = "0x6002CC7")]
		[Address(RVA = "0x1302A10", Offset = "0x1302A10", VA = "0x1302A10", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0x1302A34", Offset = "0x1302A34", VA = "0x1302A34", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0x1302B78", Offset = "0x1302B78", VA = "0x1302B78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CCA")]
		[Address(RVA = "0x1302AD4", Offset = "0x1302AD4", VA = "0x1302AD4")]
		private void DoGetTextValue()
		{
		}

		[Token(Token = "0x6002CCB")]
		[Address(RVA = "0x1302B7C", Offset = "0x1302B7C", VA = "0x1302B7C")]
		public UiTextGetText()
		{
		}
	}
	[Token(Token = "0x20008F5")]
	[Tooltip("Sets the text value of a UI Text component.")]
	[ActionCategory(ActionCategory.UI)]
	public class UiTextSetText : ComponentAction<Text>
	{
		[Token(Token = "0x4002ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject with the UI Text component.")]
		[CheckForComponent(typeof(Text))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The text of the UI Text component.")]
		[UIHint(UIHint.TextArea)]
		public FsmString text;

		[Token(Token = "0x4002ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Text uiText;

		[Token(Token = "0x4002ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string originalString;

		[Token(Token = "0x6002CCC")]
		[Address(RVA = "0x1302BC4", Offset = "0x1302BC4", VA = "0x1302BC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CCD")]
		[Address(RVA = "0x1302C04", Offset = "0x1302C04", VA = "0x1302C04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CCE")]
		[Address(RVA = "0x1302D70", Offset = "0x1302D70", VA = "0x1302D70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CCF")]
		[Address(RVA = "0x1302CCC", Offset = "0x1302CCC", VA = "0x1302CCC")]
		private void DoSetTextValue()
		{
		}

		[Token(Token = "0x6002CD0")]
		[Address(RVA = "0x1302D74", Offset = "0x1302D74", VA = "0x1302D74", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CD1")]
		[Address(RVA = "0x1302E18", Offset = "0x1302E18", VA = "0x1302E18")]
		public UiTextSetText()
		{
		}
	}
	[Token(Token = "0x20008F6")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Gets the isOn value of a UI Toggle component. Optionally send events")]
	public class UiToggleGetIsOn : ComponentAction<Toggle>
	{
		[Token(Token = "0x4002AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Toggle))]
		[Tooltip("The GameObject with the UI Toggle component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The isOn Value of the UI Toggle component.")]
		[UIHint(UIHint.Variable)]
		public FsmBool value;

		[Token(Token = "0x4002AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event sent when isOn Value is true.")]
		public FsmEvent isOnEvent;

		[Token(Token = "0x4002AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event sent when isOn Value is false.")]
		public FsmEvent isOffEvent;

		[Token(Token = "0x4002AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeats every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Toggle _toggle;

		[Token(Token = "0x6002CD2")]
		[Address(RVA = "0x1302E60", Offset = "0x1302E60", VA = "0x1302E60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CD3")]
		[Address(RVA = "0x1302E90", Offset = "0x1302E90", VA = "0x1302E90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CD4")]
		[Address(RVA = "0x1302FE0", Offset = "0x1302FE0", VA = "0x1302FE0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CD5")]
		[Address(RVA = "0x1302F30", Offset = "0x1302F30", VA = "0x1302F30")]
		private void DoGetValue()
		{
		}

		[Token(Token = "0x6002CD6")]
		[Address(RVA = "0x1302FE4", Offset = "0x1302FE4", VA = "0x1302FE4")]
		public UiToggleGetIsOn()
		{
		}
	}
	[Token(Token = "0x20008F7")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Catches onValueChanged event in a UI Toggle component. Store the new value and/or send events. Event bool data will contain the new Toggle value")]
	public class UiToggleOnValueChangedEvent : ComponentAction<Toggle>
	{
		[Token(Token = "0x4002AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Toggle))]
		[RequiredField]
		[Tooltip("The GameObject with the UI Toggle component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Where to send the event.")]
		public FsmEventTarget eventTarget;

		[Token(Token = "0x4002AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Send this event when the value changes.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Store the new value in bool variable.")]
		[UIHint(UIHint.Variable)]
		public FsmBool value;

		[Token(Token = "0x4002AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Toggle toggle;

		[Token(Token = "0x6002CD7")]
		[Address(RVA = "0x130302C", Offset = "0x130302C", VA = "0x130302C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CD8")]
		[Address(RVA = "0x1303074", Offset = "0x1303074", VA = "0x1303074", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CD9")]
		[Address(RVA = "0x13032B8", Offset = "0x13032B8", VA = "0x13032B8", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CDA")]
		[Address(RVA = "0x13033A8", Offset = "0x13033A8", VA = "0x13033A8")]
		public void DoOnValueChanged(bool _value)
		{
		}

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0x1303444", Offset = "0x1303444", VA = "0x1303444")]
		public UiToggleOnValueChangedEvent()
		{
		}
	}
	[Token(Token = "0x20008F8")]
	[ActionCategory(ActionCategory.UI)]
	[Tooltip("Sets the isOn property of a UI Toggle component.")]
	public class UiToggleSetIsOn : ComponentAction<Toggle>
	{
		[Token(Token = "0x4002AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The GameObject with the UI Toggle component.")]
		[CheckForComponent(typeof(Toggle))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Should the toggle be on?")]
		public FsmBool isOn;

		[Token(Token = "0x4002AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Reset when exiting this state.")]
		public FsmBool resetOnExit;

		[Token(Token = "0x4002AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Toggle _toggle;

		[Token(Token = "0x4002AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _originalValue;

		[Token(Token = "0x6002CDC")]
		[Address(RVA = "0x130348C", Offset = "0x130348C", VA = "0x130348C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CDD")]
		[Address(RVA = "0x13034C4", Offset = "0x13034C4", VA = "0x13034C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CDE")]
		[Address(RVA = "0x1303550", Offset = "0x1303550", VA = "0x1303550")]
		private void DoSetValue()
		{
		}

		[Token(Token = "0x6002CDF")]
		[Address(RVA = "0x13035F4", Offset = "0x13035F4", VA = "0x13035F4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002CE0")]
		[Address(RVA = "0x1303690", Offset = "0x1303690", VA = "0x1303690")]
		public UiToggleSetIsOn()
		{
		}
	}
	[Token(Token = "0x20008F9")]
	[ActionCategory(ActionCategory.UnityObject)]
	[Tooltip("Gets a Component attached to a GameObject and stores it in an Object variable. NOTE: Set the Object variable's Object Type to get a component of that type. E.g., set Object Type to UnityEngine.AudioListener to get the AudioListener component on the camera.")]
	public class GetComponent : FsmStateAction
	{
		[Token(Token = "0x4002AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject that owns the component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Store the component in an Object variable.\nNOTE: Set theObject variable's Object Type to get a component of that type. E.g., set Object Type to UnityEngine.AudioListener to get the AudioListener component on the camera.")]
		public FsmObject storeComponent;

		[Token(Token = "0x4002AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002CE1")]
		[Address(RVA = "0x13036D8", Offset = "0x13036D8", VA = "0x13036D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CE2")]
		[Address(RVA = "0x1303708", Offset = "0x1303708", VA = "0x1303708", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CE3")]
		[Address(RVA = "0x130381C", Offset = "0x130381C", VA = "0x130381C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CE4")]
		[Address(RVA = "0x1303734", Offset = "0x1303734", VA = "0x1303734")]
		private void DoGetComponent()
		{
		}

		[Token(Token = "0x6002CE5")]
		[Address(RVA = "0x1303820", Offset = "0x1303820", VA = "0x1303820")]
		public GetComponent()
		{
		}
	}
	[Token(Token = "0x20008FA")]
	[ActionCategory(ActionCategory.UnityObject)]
	[ActionTarget(typeof(Component), "targetProperty", false)]
	[Tooltip("Gets the value of any public property or field on the targeted Unity Object and stores it in a variable. E.g., Drag and drop any component attached to a Game Object to access its properties.")]
	[ActionTarget(typeof(GameObject), "targetProperty", false)]
	public class GetProperty : FsmStateAction
	{
		[Token(Token = "0x4002AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("TargetObject:\nAny object derived from UnityEngine.Object. For example, you can drag a Component from the Unity Inspector into this field. HINT: Use\u00a0{{Lock}}\u00a0to lock the current\u00a0FSM selection if you need to drag a component from another GameObject.\nProperty:\nUse the property selection menu to select the property to get. Note: You can drill into the property, e.g., transform.localPosition.x.\nStore Result:\nStore the result in a variable.")]
		public FsmProperty targetProperty;

		[Token(Token = "0x4002AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame. Useful if the property is changing over time.")]
		public bool everyFrame;

		[Token(Token = "0x6002CE6")]
		[Address(RVA = "0x1303828", Offset = "0x1303828", VA = "0x1303828", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CE7")]
		[Address(RVA = "0x130389C", Offset = "0x130389C", VA = "0x130389C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CE8")]
		[Address(RVA = "0x13038D8", Offset = "0x13038D8", VA = "0x13038D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CE9")]
		[Address(RVA = "0x13038F4", Offset = "0x13038F4", VA = "0x13038F4")]
		public GetProperty()
		{
		}
	}
	[Token(Token = "0x20008FB")]
	[ActionCategory(ActionCategory.UnityObject)]
	[Tooltip("Sets the value of an Object Variable.")]
	public class SetObjectValue : FsmStateAction
	{
		[Token(Token = "0x4002AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Object Variable to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmObject objectVariable;

		[Token(Token = "0x4002AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The value.")]
		public FsmObject objectValue;

		[Token(Token = "0x4002AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0x13038FC", Offset = "0x13038FC", VA = "0x13038FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CEB")]
		[Address(RVA = "0x130392C", Offset = "0x130392C", VA = "0x130392C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CEC")]
		[Address(RVA = "0x130398C", Offset = "0x130398C", VA = "0x130398C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CED")]
		[Address(RVA = "0x13039C4", Offset = "0x13039C4", VA = "0x13039C4")]
		public SetObjectValue()
		{
		}
	}
	[Token(Token = "0x20008FC")]
	[ActionCategory(ActionCategory.UnityObject)]
	[ActionTarget(typeof(Component), "targetProperty", false)]
	[ActionTarget(typeof(GameObject), "targetProperty", false)]
	[Tooltip("Sets the value of any public property or field on the targeted Unity Object. E.g., Drag and drop any component attached to a Game Object to access its properties.")]
	public class SetProperty : FsmStateAction
	{
		[Token(Token = "0x4002AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Target Property. See below for more details.")]
		public FsmProperty targetProperty;

		[Token(Token = "0x4002AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002CEE")]
		[Address(RVA = "0x13039CC", Offset = "0x13039CC", VA = "0x13039CC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CEF")]
		[Address(RVA = "0x1303A44", Offset = "0x1303A44", VA = "0x1303A44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CF0")]
		[Address(RVA = "0x1303A80", Offset = "0x1303A80", VA = "0x1303A80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CF1")]
		[Address(RVA = "0x1303A9C", Offset = "0x1303A9C", VA = "0x1303A9C")]
		public SetProperty()
		{
		}
	}
	[Token(Token = "0x20008FD")]
	[ActionCategory(ActionCategory.Debug)]
	[Tooltip("Logs the value of a Vector2 Variable in the PlayMaker Log Window.")]
	public class DebugVector2 : FsmStateAction
	{
		[Token(Token = "0x4002AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Info, Warning, or Error.")]
		public LogLevel logLevel;

		[Token(Token = "0x4002AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Prints the value of a Vector2 variable in the PlayMaker log window.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x6002CF2")]
		[Address(RVA = "0x1303AA4", Offset = "0x1303AA4", VA = "0x1303AA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CF3")]
		[Address(RVA = "0x1303AB4", Offset = "0x1303AB4", VA = "0x1303AB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CF4")]
		[Address(RVA = "0x1303B8C", Offset = "0x1303B8C", VA = "0x1303B8C")]
		public DebugVector2()
		{
		}
	}
	[Token(Token = "0x20008FE")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Get Vector2 Length.")]
	public class GetVector2Length : FsmStateAction
	{
		[Token(Token = "0x4002AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector2 to get the length from")]
		public FsmVector2 vector2;

		[Token(Token = "0x4002AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Vector2 the length")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeLength;

		[Token(Token = "0x4002AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002CF5")]
		[Address(RVA = "0x1303B94", Offset = "0x1303B94", VA = "0x1303B94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CF6")]
		[Address(RVA = "0x1303BC4", Offset = "0x1303BC4", VA = "0x1303BC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CF7")]
		[Address(RVA = "0x1303C6C", Offset = "0x1303C6C", VA = "0x1303C6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CF8")]
		[Address(RVA = "0x1303BF0", Offset = "0x1303BF0", VA = "0x1303BF0")]
		private void DoVectorLength()
		{
		}

		[Token(Token = "0x6002CF9")]
		[Address(RVA = "0x1303C70", Offset = "0x1303C70", VA = "0x1303C70")]
		public GetVector2Length()
		{
		}
	}
	[Token(Token = "0x20008FF")]
	[Tooltip("Get the XY channels of a Vector2 Variable and store them in Float Variables.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class GetVector2XY : FsmStateAction
	{
		[Token(Token = "0x4002AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector2 source")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The x component")]
		public FsmFloat storeX;

		[Token(Token = "0x4002B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The y component")]
		public FsmFloat storeY;

		[Token(Token = "0x4002B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002CFA")]
		[Address(RVA = "0x1303C78", Offset = "0x1303C78", VA = "0x1303C78", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002CFB")]
		[Address(RVA = "0x1303CB8", Offset = "0x1303CB8", VA = "0x1303CB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0x1303D20", Offset = "0x1303D20", VA = "0x1303D20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0x1303CF4", Offset = "0x1303CF4", VA = "0x1303CF4")]
		private void DoGetVector2XYZ()
		{
		}

		[Token(Token = "0x6002CFE")]
		[Address(RVA = "0x1303D4C", Offset = "0x1303D4C", VA = "0x1303D4C")]
		public GetVector2XY()
		{
		}
	}
	[Token(Token = "0x2000900")]
	[Tooltip("Select a Random Vector2 from a Vector2 array.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class SelectRandomVector2 : FsmStateAction
	{
		[Token(Token = "0x4002B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Vectors", "Vector", "Weight")]
		[Tooltip("A possible Vector2 choice.")]
		public FsmVector2[] vector2Array;

		[Token(Token = "0x4002B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HasFloatSlider(0f, 1f)]
		[Tooltip("The relative probability of this Vector2 being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		public FsmFloat[] weights;

		[Token(Token = "0x4002B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the selected Vector2 in a Vector2 Variable.")]
		public FsmVector2 storeVector2;

		[Token(Token = "0x6002CFF")]
		[Address(RVA = "0x1303D54", Offset = "0x1303D54", VA = "0x1303D54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D00")]
		[Address(RVA = "0x1303ED8", Offset = "0x1303ED8", VA = "0x1303ED8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D01")]
		[Address(RVA = "0x1303EF4", Offset = "0x1303EF4", VA = "0x1303EF4")]
		private void DoSelectRandom()
		{
		}

		[Token(Token = "0x6002D02")]
		[Address(RVA = "0x1303F68", Offset = "0x1303F68", VA = "0x1303F68")]
		public SelectRandomVector2()
		{
		}
	}
	[Token(Token = "0x2000901")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Sets the value of a Vector2 Variable.")]
	public class SetVector2Value : FsmStateAction
	{
		[Token(Token = "0x4002B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 target")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector2 source")]
		public FsmVector2 vector2Value;

		[Token(Token = "0x4002B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D03")]
		[Address(RVA = "0x1303F70", Offset = "0x1303F70", VA = "0x1303F70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D04")]
		[Address(RVA = "0x1303FA0", Offset = "0x1303FA0", VA = "0x1303FA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D05")]
		[Address(RVA = "0x1303FDC", Offset = "0x1303FDC", VA = "0x1303FDC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D06")]
		[Address(RVA = "0x1304004", Offset = "0x1304004", VA = "0x1304004")]
		public SetVector2Value()
		{
		}
	}
	[Token(Token = "0x2000902")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Sets the XY channels of a Vector2 Variable. To leave any channel unchanged, set variable to 'None'.")]
	public class SetVector2XY : FsmStateAction
	{
		[Token(Token = "0x4002B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 target")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 source")]
		public FsmVector2 vector2Value;

		[Token(Token = "0x4002B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The x component. Override vector2Value if set")]
		public FsmFloat x;

		[Token(Token = "0x4002B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The y component.Override vector2Value if set")]
		public FsmFloat y;

		[Token(Token = "0x4002B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D07")]
		[Address(RVA = "0x130400C", Offset = "0x130400C", VA = "0x130400C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D08")]
		[Address(RVA = "0x13040D8", Offset = "0x13040D8", VA = "0x13040D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D09")]
		[Address(RVA = "0x13041A8", Offset = "0x13041A8", VA = "0x13041A8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D0A")]
		[Address(RVA = "0x1304104", Offset = "0x1304104", VA = "0x1304104")]
		private void DoSetVector2XYZ()
		{
		}

		[Token(Token = "0x6002D0B")]
		[Address(RVA = "0x13041AC", Offset = "0x13041AC", VA = "0x13041AC")]
		public SetVector2XY()
		{
		}
	}
	[Token(Token = "0x2000903")]
	[Tooltip("Adds a value to Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Add : FsmStateAction
	{
		[Token(Token = "0x4002B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector2 target")]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector2 to add")]
		public FsmVector2 addVector;

		[Token(Token = "0x4002B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Add the value on a per second bases.")]
		public bool perSecond;

		[Token(Token = "0x6002D0C")]
		[Address(RVA = "0x13041B4", Offset = "0x13041B4", VA = "0x13041B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D0D")]
		[Address(RVA = "0x130423C", Offset = "0x130423C", VA = "0x130423C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D0E")]
		[Address(RVA = "0x13042B4", Offset = "0x13042B4", VA = "0x13042B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D0F")]
		[Address(RVA = "0x1304268", Offset = "0x1304268", VA = "0x1304268")]
		private void DoVector2Add()
		{
		}

		[Token(Token = "0x6002D10")]
		[Address(RVA = "0x13042B8", Offset = "0x13042B8", VA = "0x13042B8")]
		public Vector2Add()
		{
		}
	}
	[Token(Token = "0x2000904")]
	[Tooltip("Adds a XY values to Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2AddXY : FsmStateAction
	{
		[Token(Token = "0x4002B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector2 target")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The x component to add")]
		public FsmFloat addX;

		[Token(Token = "0x4002B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The y component to add")]
		public FsmFloat addY;

		[Token(Token = "0x4002B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x4002B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("Add the value on a per second bases.")]
		public bool perSecond;

		[Token(Token = "0x6002D11")]
		[Address(RVA = "0x13042C0", Offset = "0x13042C0", VA = "0x13042C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D12")]
		[Address(RVA = "0x1304318", Offset = "0x1304318", VA = "0x1304318", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D13")]
		[Address(RVA = "0x13043D8", Offset = "0x13043D8", VA = "0x13043D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D14")]
		[Address(RVA = "0x1304344", Offset = "0x1304344", VA = "0x1304344")]
		private void DoVector2AddXYZ()
		{
		}

		[Token(Token = "0x6002D15")]
		[Address(RVA = "0x13043DC", Offset = "0x13043DC", VA = "0x13043DC")]
		public Vector2AddXY()
		{
		}
	}
	[Token(Token = "0x2000905")]
	[Tooltip("Clamps the Magnitude of Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2ClampMagnitude : FsmStateAction
	{
		[Token(Token = "0x4002B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector2")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum Magnitude")]
		[RequiredField]
		public FsmFloat maxLength;

		[Token(Token = "0x4002B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D16")]
		[Address(RVA = "0x13043E4", Offset = "0x13043E4", VA = "0x13043E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D17")]
		[Address(RVA = "0x1304414", Offset = "0x1304414", VA = "0x1304414", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D18")]
		[Address(RVA = "0x13044F4", Offset = "0x13044F4", VA = "0x13044F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D19")]
		[Address(RVA = "0x1304440", Offset = "0x1304440", VA = "0x1304440")]
		private void DoVector2ClampMagnitude()
		{
		}

		[Token(Token = "0x6002D1A")]
		[Address(RVA = "0x13044F8", Offset = "0x13044F8", VA = "0x13044F8")]
		public Vector2ClampMagnitude()
		{
		}
	}
	[Token(Token = "0x2000906")]
	[Tooltip("Use a high pass filter to isolate sudden changes in a Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2HighPassFilter : FsmStateAction
	{
		[Token(Token = "0x4002B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector2 Variable to filter. Should generally come from some constantly updated input.")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x4002B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 filteredVector;

		[Token(Token = "0x6002D1B")]
		[Address(RVA = "0x1304500", Offset = "0x1304500", VA = "0x1304500", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D1C")]
		[Address(RVA = "0x1304538", Offset = "0x1304538", VA = "0x1304538", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D1D")]
		[Address(RVA = "0x1304558", Offset = "0x1304558", VA = "0x1304558", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D1E")]
		[Address(RVA = "0x130462C", Offset = "0x130462C", VA = "0x130462C")]
		public Vector2HighPassFilter()
		{
		}
	}
	[Token(Token = "0x2000907")]
	[Tooltip("Interpolates between 2 Vector2 values over a specified Time.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Interpolate : FsmStateAction
	{
		[Token(Token = "0x4002B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation type")]
		public InterpolationType mode;

		[Token(Token = "0x4002B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The vector to interpolate from")]
		public FsmVector2 fromVector;

		[Token(Token = "0x4002B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector to interpolate to")]
		public FsmVector2 toVector;

		[Token(Token = "0x4002B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("the interpolate time")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x4002B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("the interpolated result")]
		public FsmVector2 storeResult;

		[Token(Token = "0x4002B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("This event is fired when the interpolation is done.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4002B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale")]
		public bool realTime;

		[Token(Token = "0x4002B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4002B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x6002D1F")]
		[Address(RVA = "0x1304634", Offset = "0x1304634", VA = "0x1304634", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D20")]
		[Address(RVA = "0x1304720", Offset = "0x1304720", VA = "0x1304720", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D21")]
		[Address(RVA = "0x130476C", Offset = "0x130476C", VA = "0x130476C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D22")]
		[Address(RVA = "0x130488C", Offset = "0x130488C", VA = "0x130488C")]
		public Vector2Interpolate()
		{
		}
	}
	[Token(Token = "0x2000908")]
	[Tooltip("Reverses the direction of a Vector2 Variable. Same as multiplying by -1.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Invert : FsmStateAction
	{
		[Token(Token = "0x4002B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The vector to invert")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D23")]
		[Address(RVA = "0x1304894", Offset = "0x1304894", VA = "0x1304894", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D24")]
		[Address(RVA = "0x13048B8", Offset = "0x13048B8", VA = "0x13048B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D25")]
		[Address(RVA = "0x13048F0", Offset = "0x13048F0", VA = "0x13048F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D26")]
		[Address(RVA = "0x1304914", Offset = "0x1304914", VA = "0x1304914")]
		public Vector2Invert()
		{
		}
	}
	[Token(Token = "0x2000909")]
	[Tooltip("Linearly interpolates between 2 vectors.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2Lerp : FsmStateAction
	{
		[Token(Token = "0x4002B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("First Vector.")]
		[RequiredField]
		public FsmVector2 fromVector;

		[Token(Token = "0x4002B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Second Vector.")]
		public FsmVector2 toVector;

		[Token(Token = "0x4002B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Interpolate between From Vector and ToVector by this amount. Value is clamped to 0-1 range. 0 = From Vector; 1 = To Vector; 0.5 = half way between.")]
		[RequiredField]
		public FsmFloat amount;

		[Token(Token = "0x4002B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in this vector variable.")]
		[RequiredField]
		public FsmVector2 storeResult;

		[Token(Token = "0x4002B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if any of the values are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002D27")]
		[Address(RVA = "0x130491C", Offset = "0x130491C", VA = "0x130491C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D28")]
		[Address(RVA = "0x13049D8", Offset = "0x13049D8", VA = "0x13049D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D29")]
		[Address(RVA = "0x1304A74", Offset = "0x1304A74", VA = "0x1304A74", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D2A")]
		[Address(RVA = "0x1304A04", Offset = "0x1304A04", VA = "0x1304A04")]
		private void DoVector2Lerp()
		{
		}

		[Token(Token = "0x6002D2B")]
		[Address(RVA = "0x1304A78", Offset = "0x1304A78", VA = "0x1304A78")]
		public Vector2Lerp()
		{
		}
	}
	[Token(Token = "0x200090A")]
	[Tooltip("Use a low pass filter to reduce the influence of sudden changes in a Vector2 Variable.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2LowPassFilter : FsmStateAction
	{
		[Token(Token = "0x4002B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Vector2 Variable to filter. Should generally come from some constantly updated input")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have. E.g., 0.1 keeps 10 percent of the unfiltered vector and 90 percent of the previously filtered value")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x4002B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 filteredVector;

		[Token(Token = "0x6002D2C")]
		[Address(RVA = "0x1304A80", Offset = "0x1304A80", VA = "0x1304A80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D2D")]
		[Address(RVA = "0x1304AB8", Offset = "0x1304AB8", VA = "0x1304AB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D2E")]
		[Address(RVA = "0x1304AD8", Offset = "0x1304AD8", VA = "0x1304AD8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D2F")]
		[Address(RVA = "0x1304BA4", Offset = "0x1304BA4", VA = "0x1304BA4")]
		public Vector2LowPassFilter()
		{
		}
	}
	[Token(Token = "0x200090B")]
	[Tooltip("Moves a Vector2 towards a Target. Optionally sends an event when successful.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2MoveTowards : FsmStateAction
	{
		[Token(Token = "0x4002B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Vector2 to Move")]
		public FsmVector2 source;

		[Token(Token = "0x4002B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A target Vector2 to move towards.")]
		public FsmVector2 target;

		[Token(Token = "0x4002B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum movement speed. HINT: You can make this a variable to change it over time.")]
		[HasFloatSlider(0f, 20f)]
		public FsmFloat maxSpeed;

		[Token(Token = "0x4002B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Distance at which the move is considered finished, and the Finish Event is sent.")]
		[HasFloatSlider(0f, 5f)]
		public FsmFloat finishDistance;

		[Token(Token = "0x4002B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send when the Finish Distance is reached.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x6002D30")]
		[Address(RVA = "0x1304BAC", Offset = "0x1304BAC", VA = "0x1304BAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D31")]
		[Address(RVA = "0x1304C1C", Offset = "0x1304C1C", VA = "0x1304C1C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D32")]
		[Address(RVA = "0x1304C20", Offset = "0x1304C20", VA = "0x1304C20")]
		private void DoMoveTowards()
		{
		}

		[Token(Token = "0x6002D33")]
		[Address(RVA = "0x1304DC0", Offset = "0x1304DC0", VA = "0x1304DC0")]
		public Vector2MoveTowards()
		{
		}
	}
	[Token(Token = "0x200090C")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Multiplies a Vector2 variable by a Float.")]
	public class Vector2Multiply : FsmStateAction
	{
		[Token(Token = "0x4002B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector to Multiply")]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The multiplication factor")]
		public FsmFloat multiplyBy;

		[Token(Token = "0x4002B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D34")]
		[Address(RVA = "0x1304DC8", Offset = "0x1304DC8", VA = "0x1304DC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D35")]
		[Address(RVA = "0x1304E04", Offset = "0x1304E04", VA = "0x1304E04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D36")]
		[Address(RVA = "0x1304E6C", Offset = "0x1304E6C", VA = "0x1304E6C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D37")]
		[Address(RVA = "0x1304EA8", Offset = "0x1304EA8", VA = "0x1304EA8")]
		public Vector2Multiply()
		{
		}
	}
	[Token(Token = "0x200090D")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Normalizes a Vector2 Variable.")]
	public class Vector2Normalize : FsmStateAction
	{
		[Token(Token = "0x4002B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector to normalize")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D38")]
		[Address(RVA = "0x1304EB0", Offset = "0x1304EB0", VA = "0x1304EB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0x1304ED4", Offset = "0x1304ED4", VA = "0x1304ED4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0x1304FBC", Offset = "0x1304FBC", VA = "0x1304FBC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0x1305080", Offset = "0x1305080", VA = "0x1305080")]
		public Vector2Normalize()
		{
		}
	}
	[Token(Token = "0x200090E")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Performs most possible operations on 2 Vector2: Dot product, Distance, Angle, Add, Subtract, Multiply, Divide, Min, Max")]
	public class Vector2Operator : FsmStateAction
	{
		[Token(Token = "0x200090F")]
		public enum Vector2Operation
		{
			[Token(Token = "0x4002B41")]
			DotProduct,
			[Token(Token = "0x4002B42")]
			Distance,
			[Token(Token = "0x4002B43")]
			Angle,
			[Token(Token = "0x4002B44")]
			Add,
			[Token(Token = "0x4002B45")]
			Subtract,
			[Token(Token = "0x4002B46")]
			Multiply,
			[Token(Token = "0x4002B47")]
			Divide,
			[Token(Token = "0x4002B48")]
			Min,
			[Token(Token = "0x4002B49")]
			Max
		}

		[Token(Token = "0x4002B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first vector")]
		[RequiredField]
		public FsmVector2 vector1;

		[Token(Token = "0x4002B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second vector")]
		[RequiredField]
		public FsmVector2 vector2;

		[Token(Token = "0x4002B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The operation")]
		public Vector2Operation operation;

		[Token(Token = "0x4002B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Vector2 result when it applies.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 storeVector2Result;

		[Token(Token = "0x4002B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The float result when it applies")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeFloatResult;

		[Token(Token = "0x4002B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D3C")]
		[Address(RVA = "0x1305088", Offset = "0x1305088", VA = "0x1305088", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D3D")]
		[Address(RVA = "0x13050E0", Offset = "0x13050E0", VA = "0x13050E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D3E")]
		[Address(RVA = "0x130538C", Offset = "0x130538C", VA = "0x130538C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D3F")]
		[Address(RVA = "0x130510C", Offset = "0x130510C", VA = "0x130510C")]
		private void DoVector2Operator()
		{
		}

		[Token(Token = "0x6002D40")]
		[Address(RVA = "0x1305390", Offset = "0x1305390", VA = "0x1305390")]
		public Vector2Operator()
		{
		}
	}
	[Token(Token = "0x2000910")]
	[Tooltip("Multiplies a Vector2 variable by Time.deltaTime. Useful for frame rate independent motion.")]
	[ActionCategory(ActionCategory.Vector2)]
	public class Vector2PerSecond : FsmStateAction
	{
		[Token(Token = "0x4002B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Vector2")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D41")]
		[Address(RVA = "0x13053A0", Offset = "0x13053A0", VA = "0x13053A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D42")]
		[Address(RVA = "0x13053C8", Offset = "0x13053C8", VA = "0x13053C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D43")]
		[Address(RVA = "0x1305428", Offset = "0x1305428", VA = "0x1305428", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D44")]
		[Address(RVA = "0x130545C", Offset = "0x130545C", VA = "0x130545C")]
		public Vector2PerSecond()
		{
		}
	}
	[Token(Token = "0x2000911")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Rotates a Vector2 direction from Current towards Target.")]
	public class Vector2RotateTowards : FsmStateAction
	{
		[Token(Token = "0x4002B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The current direction. This will be the result of the rotation as well.")]
		public FsmVector2 currentDirection;

		[Token(Token = "0x4002B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The direction to reach")]
		[RequiredField]
		public FsmVector2 targetDirection;

		[Token(Token = "0x4002B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Rotation speed in degrees per second")]
		public FsmFloat rotateSpeed;

		[Token(Token = "0x4002B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 current;

		[Token(Token = "0x4002B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 target;

		[Token(Token = "0x6002D45")]
		[Address(RVA = "0x1305464", Offset = "0x1305464", VA = "0x1305464", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D46")]
		[Address(RVA = "0x1305528", Offset = "0x1305528", VA = "0x1305528", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D47")]
		[Address(RVA = "0x1305560", Offset = "0x1305560", VA = "0x1305560", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D48")]
		[Address(RVA = "0x130561C", Offset = "0x130561C", VA = "0x130561C")]
		public Vector2RotateTowards()
		{
		}
	}
	[Token(Token = "0x2000912")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Snap a Vector2 to an angle increment while maintaining length.")]
	public class Vector2SnapToAngle : FsmStateAction
	{
		[Token(Token = "0x4002B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool showPreview;

		[Token(Token = "0x4002B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector to snap to an angle.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[PreviewField("DrawPreview")]
		[Tooltip("Angle increment to snap to.")]
		public FsmFloat snapAngle;

		[Token(Token = "0x4002B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D49")]
		[Address(RVA = "0x1305624", Offset = "0x1305624", VA = "0x1305624", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D4A")]
		[Address(RVA = "0x1305660", Offset = "0x1305660", VA = "0x1305660", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D4B")]
		[Address(RVA = "0x13057E8", Offset = "0x13057E8", VA = "0x13057E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D4C")]
		[Address(RVA = "0x130568C", Offset = "0x130568C", VA = "0x130568C")]
		private void DoSnapToAngle()
		{
		}

		[Token(Token = "0x6002D4D")]
		[Address(RVA = "0x13057EC", Offset = "0x13057EC", VA = "0x13057EC")]
		public Vector2SnapToAngle()
		{
		}
	}
	[Token(Token = "0x2000913")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Snap Vector2 coordinates to grid points.")]
	public class Vector2SnapToGrid : FsmStateAction
	{
		[Token(Token = "0x4002B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Vector2 Variable to snap.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Grid Size.")]
		public FsmFloat gridSize;

		[Token(Token = "0x4002B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D4E")]
		[Address(RVA = "0x13057F4", Offset = "0x13057F4", VA = "0x13057F4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D4F")]
		[Address(RVA = "0x1305874", Offset = "0x1305874", VA = "0x1305874", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D50")]
		[Address(RVA = "0x1305A60", Offset = "0x1305A60", VA = "0x1305A60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D51")]
		[Address(RVA = "0x13058A0", Offset = "0x13058A0", VA = "0x13058A0")]
		private void DoSnapToGrid()
		{
		}

		[Token(Token = "0x6002D52")]
		[Address(RVA = "0x1305A64", Offset = "0x1305A64", VA = "0x1305A64")]
		public Vector2SnapToGrid()
		{
		}
	}
	[Token(Token = "0x2000914")]
	[ActionCategory(ActionCategory.Vector2)]
	[Tooltip("Subtracts a Vector2 value from a Vector2 variable.")]
	public class Vector2Subtract : FsmStateAction
	{
		[Token(Token = "0x4002B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector2 operand")]
		public FsmVector2 vector2Variable;

		[Token(Token = "0x4002B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The vector2 to subtract with")]
		public FsmVector2 subtractVector;

		[Token(Token = "0x4002B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D53")]
		[Address(RVA = "0x1305A6C", Offset = "0x1305A6C", VA = "0x1305A6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D54")]
		[Address(RVA = "0x1305AF4", Offset = "0x1305AF4", VA = "0x1305AF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D55")]
		[Address(RVA = "0x1305B38", Offset = "0x1305B38", VA = "0x1305B38", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D56")]
		[Address(RVA = "0x1305B68", Offset = "0x1305B68", VA = "0x1305B68")]
		public Vector2Subtract()
		{
		}
	}
	[Token(Token = "0x2000915")]
	[Tooltip("Get the XYZ channels of a Vector3 Variable and store them in Float Variables.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class GetVector3XYZ : FsmStateAction
	{
		[Token(Token = "0x4002B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to examine.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store X value in a float variable.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeX;

		[Token(Token = "0x4002B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store Y value in a float variable.")]
		public FsmFloat storeY;

		[Token(Token = "0x4002B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store Z value in a float variable.")]
		public FsmFloat storeZ;

		[Token(Token = "0x4002B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D57")]
		[Address(RVA = "0x1305B70", Offset = "0x1305B70", VA = "0x1305B70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D58")]
		[Address(RVA = "0x1305BC0", Offset = "0x1305BC0", VA = "0x1305BC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D59")]
		[Address(RVA = "0x1305C5C", Offset = "0x1305C5C", VA = "0x1305C5C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D5A")]
		[Address(RVA = "0x1305BEC", Offset = "0x1305BEC", VA = "0x1305BEC")]
		private void DoGetVector3XYZ()
		{
		}

		[Token(Token = "0x6002D5B")]
		[Address(RVA = "0x1305C60", Offset = "0x1305C60", VA = "0x1305C60")]
		public GetVector3XYZ()
		{
		}
	}
	[Token(Token = "0x2000916")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Get Vector3 Length.")]
	public class GetVectorLength : FsmStateAction
	{
		[Token(Token = "0x4002B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3")]
		public FsmVector3 vector3;

		[Token(Token = "0x4002B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the length (magnitude) of the Vector3 value in a float variable.")]
		public FsmFloat storeLength;

		[Token(Token = "0x4002B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D5C")]
		[Address(RVA = "0x1305C68", Offset = "0x1305C68", VA = "0x1305C68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D5D")]
		[Address(RVA = "0x1305C98", Offset = "0x1305C98", VA = "0x1305C98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D5E")]
		[Address(RVA = "0x1305D64", Offset = "0x1305D64", VA = "0x1305D64", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D5F")]
		[Address(RVA = "0x1305CC4", Offset = "0x1305CC4", VA = "0x1305CC4")]
		private void DoVectorLength()
		{
		}

		[Token(Token = "0x6002D60")]
		[Address(RVA = "0x1305D68", Offset = "0x1305D68", VA = "0x1305D68")]
		public GetVectorLength()
		{
		}
	}
	[Token(Token = "0x2000917")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Select a Random Vector3 from a Vector3 array.")]
	public class SelectRandomVector3 : FsmStateAction
	{
		[Token(Token = "0x4002B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CompoundArray("Vectors", "Vector", "Weight")]
		[Tooltip("A possible Vector3 choice.")]
		public FsmVector3[] vector3Array;

		[Token(Token = "0x4002B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The relative probability of this Vector3 being picked. E.g. a weight of 0.5 is half as likely to be picked as a weight of 1.")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat[] weights;

		[Token(Token = "0x4002B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Store the selected Vector3 in a Vector3 Variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeVector3;

		[Token(Token = "0x6002D61")]
		[Address(RVA = "0x1305D70", Offset = "0x1305D70", VA = "0x1305D70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D62")]
		[Address(RVA = "0x1305EF4", Offset = "0x1305EF4", VA = "0x1305EF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D63")]
		[Address(RVA = "0x1305F10", Offset = "0x1305F10", VA = "0x1305F10")]
		private void DoSelectRandomColor()
		{
		}

		[Token(Token = "0x6002D64")]
		[Address(RVA = "0x1305F8C", Offset = "0x1305F8C", VA = "0x1305F8C")]
		public SelectRandomVector3()
		{
		}
	}
	[Token(Token = "0x2000918")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Sets the value of a Vector3 Variable.")]
	public class SetVector3Value : FsmStateAction
	{
		[Token(Token = "0x4002B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 variable to set.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Value to set variable to.")]
		public FsmVector3 vector3Value;

		[Token(Token = "0x4002B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D65")]
		[Address(RVA = "0x1305F94", Offset = "0x1305F94", VA = "0x1305F94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D66")]
		[Address(RVA = "0x1305FC4", Offset = "0x1305FC4", VA = "0x1305FC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D67")]
		[Address(RVA = "0x130601C", Offset = "0x130601C", VA = "0x130601C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D68")]
		[Address(RVA = "0x1306050", Offset = "0x1306050", VA = "0x1306050")]
		public SetVector3Value()
		{
		}
	}
	[Token(Token = "0x2000919")]
	[Tooltip("Sets the XYZ channels of a Vector3 Variable. To leave any channel unchanged, set variable to 'None'.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class SetVector3XYZ : FsmStateAction
	{
		[Token(Token = "0x4002B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Vector3 variable to set.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set using another Vector3 variable and/or individual channels below.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector3Value;

		[Token(Token = "0x4002B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Set X channel.")]
		public FsmFloat x;

		[Token(Token = "0x4002B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set Y channel.")]
		public FsmFloat y;

		[Token(Token = "0x4002B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set Z channel.")]
		public FsmFloat z;

		[Token(Token = "0x4002B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D69")]
		[Address(RVA = "0x1306058", Offset = "0x1306058", VA = "0x1306058", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D6A")]
		[Address(RVA = "0x1306154", Offset = "0x1306154", VA = "0x1306154", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D6B")]
		[Address(RVA = "0x1306278", Offset = "0x1306278", VA = "0x1306278", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D6C")]
		[Address(RVA = "0x1306180", Offset = "0x1306180", VA = "0x1306180")]
		private void DoSetVector3XYZ()
		{
		}

		[Token(Token = "0x6002D6D")]
		[Address(RVA = "0x130627C", Offset = "0x130627C", VA = "0x130627C")]
		public SetVector3XYZ()
		{
		}
	}
	[Token(Token = "0x200091A")]
	[Tooltip("Adds a value to Vector3 Variable.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3Add : FsmStateAction
	{
		[Token(Token = "0x4002B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 variable to add to.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Vector3 to add.")]
		[RequiredField]
		public FsmVector3 addVector;

		[Token(Token = "0x4002B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Add over one second (multiplies values by Time.deltaTime). Note: Needs Every Frame checked.")]
		public bool perSecond;

		[Token(Token = "0x6002D6E")]
		[Address(RVA = "0x1306284", Offset = "0x1306284", VA = "0x1306284", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D6F")]
		[Address(RVA = "0x130630C", Offset = "0x130630C", VA = "0x130630C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D70")]
		[Address(RVA = "0x13063D8", Offset = "0x13063D8", VA = "0x13063D8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D71")]
		[Address(RVA = "0x1306338", Offset = "0x1306338", VA = "0x1306338")]
		private void DoVector3Add()
		{
		}

		[Token(Token = "0x6002D72")]
		[Address(RVA = "0x13063DC", Offset = "0x13063DC", VA = "0x13063DC")]
		public Vector3Add()
		{
		}
	}
	[Token(Token = "0x200091B")]
	[Tooltip("Adds a XYZ values to Vector3 Variable.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3AddXYZ : FsmStateAction
	{
		[Token(Token = "0x4002B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 Variable to add to.")]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Add to the X axis.")]
		public FsmFloat addX;

		[Token(Token = "0x4002B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Add to the Y axis.")]
		public FsmFloat addY;

		[Token(Token = "0x4002B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Add to the Z axis.")]
		public FsmFloat addZ;

		[Token(Token = "0x4002B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Add over one second (multiplies values by Time.deltaTime). Note: Needs Every Frame checked.")]
		public bool perSecond;

		[Token(Token = "0x6002D73")]
		[Address(RVA = "0x13063E4", Offset = "0x13063E4", VA = "0x13063E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D74")]
		[Address(RVA = "0x1306458", Offset = "0x1306458", VA = "0x1306458", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D75")]
		[Address(RVA = "0x1306554", Offset = "0x1306554", VA = "0x1306554", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D76")]
		[Address(RVA = "0x1306484", Offset = "0x1306484", VA = "0x1306484")]
		private void DoVector3AddXYZ()
		{
		}

		[Token(Token = "0x6002D77")]
		[Address(RVA = "0x1306558", Offset = "0x1306558", VA = "0x1306558")]
		public Vector3AddXYZ()
		{
		}
	}
	[Token(Token = "0x200091C")]
	[Tooltip("Clamps the Magnitude of Vector3 Variable.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3ClampMagnitude : FsmStateAction
	{
		[Token(Token = "0x4002B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 variable to clamp.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Clamp to this max length.")]
		public FsmFloat maxLength;

		[Token(Token = "0x4002B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D78")]
		[Address(RVA = "0x1306560", Offset = "0x1306560", VA = "0x1306560", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D79")]
		[Address(RVA = "0x1306590", Offset = "0x1306590", VA = "0x1306590", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D7A")]
		[Address(RVA = "0x13066A0", Offset = "0x13066A0", VA = "0x13066A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D7B")]
		[Address(RVA = "0x13065BC", Offset = "0x13065BC", VA = "0x13065BC")]
		private void DoVector3ClampMagnitude()
		{
		}

		[Token(Token = "0x6002D7C")]
		[Address(RVA = "0x13066A4", Offset = "0x13066A4", VA = "0x13066A4")]
		public Vector3ClampMagnitude()
		{
		}
	}
	[Token(Token = "0x200091D")]
	[Tooltip("Clamps the magnitude of Vector3 variable on the XZ Plane.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3ClampMagnitudeXZ : FsmStateAction
	{
		[Token(Token = "0x4002B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to clamp.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Clamp to this max length.")]
		public FsmFloat maxLength;

		[Token(Token = "0x4002B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D7D")]
		[Address(RVA = "0x13066AC", Offset = "0x13066AC", VA = "0x13066AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D7E")]
		[Address(RVA = "0x13066DC", Offset = "0x13066DC", VA = "0x13066DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D7F")]
		[Address(RVA = "0x13067F0", Offset = "0x13067F0", VA = "0x13067F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D80")]
		[Address(RVA = "0x1306708", Offset = "0x1306708", VA = "0x1306708")]
		private void DoVector3ClampMagnitudeXZ()
		{
		}

		[Token(Token = "0x6002D81")]
		[Address(RVA = "0x13067F4", Offset = "0x13067F4", VA = "0x13067F4")]
		public Vector3ClampMagnitudeXZ()
		{
		}
	}
	[Token(Token = "0x200091E")]
	[Tooltip("Use a high pass filter to isolate sudden changes in a Vector3 Variable. Useful when working with Get Device Acceleration to remove the constant effect of gravity.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3HighPassFilter : FsmStateAction
	{
		[Token(Token = "0x4002B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Vector3 Variable to filter. Should generally come from some constantly updated input, e.g., acceleration.")]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x4002B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 filteredVector;

		[Token(Token = "0x6002D82")]
		[Address(RVA = "0x13067FC", Offset = "0x13067FC", VA = "0x13067FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D83")]
		[Address(RVA = "0x1306834", Offset = "0x1306834", VA = "0x1306834", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D84")]
		[Address(RVA = "0x1306890", Offset = "0x1306890", VA = "0x1306890", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D85")]
		[Address(RVA = "0x1306A0C", Offset = "0x1306A0C", VA = "0x1306A0C")]
		public Vector3HighPassFilter()
		{
		}
	}
	[Token(Token = "0x200091F")]
	[Tooltip("Interpolates between 2 Vector3 values over a specified Time.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3Interpolate : FsmStateAction
	{
		[Token(Token = "0x4002B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The type of interpolation to use.")]
		public InterpolationType mode;

		[Token(Token = "0x4002B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The start vector.")]
		[RequiredField]
		public FsmVector3 fromVector;

		[Token(Token = "0x4002B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The end vector.")]
		public FsmVector3 toVector;

		[Token(Token = "0x4002B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("How long it should take to interpolate from start to end.")]
		public FsmFloat time;

		[Token(Token = "0x4002B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Store the interpolated vector in a Vector3 Variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 storeResult;

		[Token(Token = "0x4002B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optionally send this event when finished.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4002B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Ignore TimeScale e.g., if the game is paused.")]
		public bool realTime;

		[Token(Token = "0x4002B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float startTime;

		[Token(Token = "0x4002B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float currentTime;

		[Token(Token = "0x6002D86")]
		[Address(RVA = "0x1306A14", Offset = "0x1306A14", VA = "0x1306A14", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D87")]
		[Address(RVA = "0x1306B00", Offset = "0x1306B00", VA = "0x1306B00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D88")]
		[Address(RVA = "0x1306B60", Offset = "0x1306B60", VA = "0x1306B60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D89")]
		[Address(RVA = "0x1306CD4", Offset = "0x1306CD4", VA = "0x1306CD4")]
		public Vector3Interpolate()
		{
		}
	}
	[Token(Token = "0x2000920")]
	[Tooltip("Reverses the direction of a Vector3 Variable. Same as multiplying by -1.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3Invert : FsmStateAction
	{
		[Token(Token = "0x4002B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The vector3 variable to invert.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D8A")]
		[Address(RVA = "0x1306CDC", Offset = "0x1306CDC", VA = "0x1306CDC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D8B")]
		[Address(RVA = "0x1306D00", Offset = "0x1306D00", VA = "0x1306D00", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D8C")]
		[Address(RVA = "0x1306D60", Offset = "0x1306D60", VA = "0x1306D60", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D8D")]
		[Address(RVA = "0x1306D98", Offset = "0x1306D98", VA = "0x1306D98")]
		public Vector3Invert()
		{
		}
	}
	[Token(Token = "0x2000921")]
	[Tooltip("Linearly interpolates between 2 vectors.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3Lerp : FsmStateAction
	{
		[Token(Token = "0x4002B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("First Vector.")]
		public FsmVector3 fromVector;

		[Token(Token = "0x4002B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Second Vector.")]
		public FsmVector3 toVector;

		[Token(Token = "0x4002B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Interpolate between From Vector and ToVector by this amount. Value is clamped to 0-1 range. 0 = From Vector; 1 = To Vector; 0.5 = half way between.")]
		public FsmFloat amount;

		[Token(Token = "0x4002B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in this vector variable.")]
		public FsmVector3 storeResult;

		[Token(Token = "0x4002B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if any of the values are changing.")]
		public bool everyFrame;

		[Token(Token = "0x6002D8E")]
		[Address(RVA = "0x1306DA0", Offset = "0x1306DA0", VA = "0x1306DA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D8F")]
		[Address(RVA = "0x1306E5C", Offset = "0x1306E5C", VA = "0x1306E5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D90")]
		[Address(RVA = "0x1306F4C", Offset = "0x1306F4C", VA = "0x1306F4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D91")]
		[Address(RVA = "0x1306E88", Offset = "0x1306E88", VA = "0x1306E88")]
		private void DoVector3Lerp()
		{
		}

		[Token(Token = "0x6002D92")]
		[Address(RVA = "0x1306F50", Offset = "0x1306F50", VA = "0x1306F50")]
		public Vector3Lerp()
		{
		}
	}
	[Token(Token = "0x2000922")]
	[Tooltip("Use a low pass filter to reduce the influence of sudden changes in a Vector3 Variable. Useful when working with Get Device Acceleration to isolate gravity.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3LowPassFilter : FsmStateAction
	{
		[Token(Token = "0x4002B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("Vector3 Variable to filter. Should generally come from some constantly updated input, e.g., acceleration.")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Determines how much influence new changes have. E.g., 0.1 keeps 10 percent of the unfiltered vector and 90 percent of the previously filtered value.")]
		public FsmFloat filteringFactor;

		[Token(Token = "0x4002B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 filteredVector;

		[Token(Token = "0x6002D93")]
		[Address(RVA = "0x1306F58", Offset = "0x1306F58", VA = "0x1306F58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D94")]
		[Address(RVA = "0x1306F90", Offset = "0x1306F90", VA = "0x1306F90", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D95")]
		[Address(RVA = "0x1306FEC", Offset = "0x1306FEC", VA = "0x1306FEC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D96")]
		[Address(RVA = "0x1307118", Offset = "0x1307118", VA = "0x1307118")]
		public Vector3LowPassFilter()
		{
		}
	}
	[Token(Token = "0x2000923")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Multiplies a Vector3 variable by a Float.")]
	public class Vector3Multiply : FsmStateAction
	{
		[Token(Token = "0x4002B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The vector3 variable to multiply.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The float to multiply each axis of the Vector3 variable by.")]
		public FsmFloat multiplyBy;

		[Token(Token = "0x4002B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x6002D97")]
		[Address(RVA = "0x1307120", Offset = "0x1307120", VA = "0x1307120", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D98")]
		[Address(RVA = "0x130715C", Offset = "0x130715C", VA = "0x130715C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D99")]
		[Address(RVA = "0x13071F0", Offset = "0x13071F0", VA = "0x13071F0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D9A")]
		[Address(RVA = "0x1307260", Offset = "0x1307260", VA = "0x1307260")]
		public Vector3Multiply()
		{
		}
	}
	[Token(Token = "0x2000924")]
	[Tooltip("Normalizes a Vector3 Variable. A normalized vector has a length of 1.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3Normalize : FsmStateAction
	{
		[Token(Token = "0x4002B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Vector3 Variable to normalize.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D9B")]
		[Address(RVA = "0x1307268", Offset = "0x1307268", VA = "0x1307268", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002D9C")]
		[Address(RVA = "0x130728C", Offset = "0x130728C", VA = "0x130728C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002D9D")]
		[Address(RVA = "0x13073AC", Offset = "0x13073AC", VA = "0x13073AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002D9E")]
		[Address(RVA = "0x13074A4", Offset = "0x13074A4", VA = "0x13074A4")]
		public Vector3Normalize()
		{
		}
	}
	[Token(Token = "0x2000925")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Performs most possible operations on 2 Vector3: Dot product, Cross product, Distance, Angle, Project, Reflect, Add, Subtract, Multiply, Divide, Min, Max")]
	public class Vector3Operator : FsmStateAction
	{
		[Token(Token = "0x2000926")]
		public enum Vector3Operation
		{
			[Token(Token = "0x4002BA1")]
			DotProduct,
			[Token(Token = "0x4002BA2")]
			CrossProduct,
			[Token(Token = "0x4002BA3")]
			Distance,
			[Token(Token = "0x4002BA4")]
			Angle,
			[Token(Token = "0x4002BA5")]
			Project,
			[Token(Token = "0x4002BA6")]
			Reflect,
			[Token(Token = "0x4002BA7")]
			Add,
			[Token(Token = "0x4002BA8")]
			Subtract,
			[Token(Token = "0x4002BA9")]
			Multiply,
			[Token(Token = "0x4002BAA")]
			Divide,
			[Token(Token = "0x4002BAB")]
			Min,
			[Token(Token = "0x4002BAC")]
			Max
		}

		[Token(Token = "0x4002B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The first vector in the operation.")]
		[RequiredField]
		public FsmVector3 vector1;

		[Token(Token = "0x4002B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The second vector in the operation.")]
		[RequiredField]
		public FsmVector3 vector2;

		[Token(Token = "0x4002B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The operation to perform.")]
		public Vector3Operation operation;

		[Token(Token = "0x4002B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Vector3 Variable.")]
		public FsmVector3 storeVector3Result;

		[Token(Token = "0x4002B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store a float result in a Float Variable (E.g., Dot, Distance, Angle)")]
		public FsmFloat storeFloatResult;

		[Token(Token = "0x4002B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002D9F")]
		[Address(RVA = "0x13074AC", Offset = "0x13074AC", VA = "0x13074AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DA0")]
		[Address(RVA = "0x1307504", Offset = "0x1307504", VA = "0x1307504", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DA1")]
		[Address(RVA = "0x13079AC", Offset = "0x13079AC", VA = "0x13079AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DA2")]
		[Address(RVA = "0x1307530", Offset = "0x1307530", VA = "0x1307530")]
		private void DoVector3Operator()
		{
		}

		[Token(Token = "0x6002DA3")]
		[Address(RVA = "0x13079B0", Offset = "0x13079B0", VA = "0x13079B0")]
		public Vector3Operator()
		{
		}
	}
	[Token(Token = "0x2000927")]
	[Tooltip("Multiplies a Vector3 variable by Time.deltaTime. Useful for frame rate independent motion.")]
	[ActionCategory(ActionCategory.Vector3)]
	public class Vector3PerSecond : FsmStateAction
	{
		[Token(Token = "0x4002BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to multiply by Time.deltaTime.")]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002DA4")]
		[Address(RVA = "0x13079C0", Offset = "0x13079C0", VA = "0x13079C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DA5")]
		[Address(RVA = "0x13079E4", Offset = "0x13079E4", VA = "0x13079E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DA6")]
		[Address(RVA = "0x1307A70", Offset = "0x1307A70", VA = "0x1307A70", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DA7")]
		[Address(RVA = "0x1307ACC", Offset = "0x1307ACC", VA = "0x1307ACC")]
		public Vector3PerSecond()
		{
		}
	}
	[Token(Token = "0x2000928")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Rotates a Vector3 direction from Current towards Target.")]
	public class Vector3RotateTowards : FsmStateAction
	{
		[Token(Token = "0x4002BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The current direction vector.")]
		[RequiredField]
		public FsmVector3 currentDirection;

		[Token(Token = "0x4002BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The target direction vector.")]
		public FsmVector3 targetDirection;

		[Token(Token = "0x4002BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotation speed in degrees per second.")]
		[RequiredField]
		public FsmFloat rotateSpeed;

		[Token(Token = "0x4002BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("Max Magnitude per second")]
		public FsmFloat maxMagnitude;

		[Token(Token = "0x6002DA8")]
		[Address(RVA = "0x1307AD4", Offset = "0x1307AD4", VA = "0x1307AD4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DA9")]
		[Address(RVA = "0x1307BB4", Offset = "0x1307BB4", VA = "0x1307BB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DAA")]
		[Address(RVA = "0x1307C98", Offset = "0x1307C98", VA = "0x1307C98")]
		public Vector3RotateTowards()
		{
		}
	}
	[Token(Token = "0x2000929")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Snap Vector3 coordinates to grid points.")]
	public class Vector3SnapToGrid : FsmStateAction
	{
		[Token(Token = "0x4002BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Vector3 Variable to snap.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Grid Size.")]
		public FsmFloat gridSize;

		[Token(Token = "0x4002BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002DAB")]
		[Address(RVA = "0x1307CA0", Offset = "0x1307CA0", VA = "0x1307CA0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DAC")]
		[Address(RVA = "0x1307D20", Offset = "0x1307D20", VA = "0x1307D20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DAD")]
		[Address(RVA = "0x1307F8C", Offset = "0x1307F8C", VA = "0x1307F8C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DAE")]
		[Address(RVA = "0x1307D4C", Offset = "0x1307D4C", VA = "0x1307D4C")]
		private void DoSnapToGrid()
		{
		}

		[Token(Token = "0x6002DAF")]
		[Address(RVA = "0x1307F90", Offset = "0x1307F90", VA = "0x1307F90")]
		public Vector3SnapToGrid()
		{
		}
	}
	[Token(Token = "0x200092A")]
	[ActionCategory(ActionCategory.Vector3)]
	[Tooltip("Subtracts a Vector3 value from a Vector3 variable.")]
	public class Vector3Subtract : FsmStateAction
	{
		[Token(Token = "0x4002BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Vector3 variable to subtract from.")]
		public FsmVector3 vector3Variable;

		[Token(Token = "0x4002BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Vector3 to subtract.")]
		public FsmVector3 subtractVector;

		[Token(Token = "0x4002BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002DB0")]
		[Address(RVA = "0x1307F98", Offset = "0x1307F98", VA = "0x1307F98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DB1")]
		[Address(RVA = "0x1308020", Offset = "0x1308020", VA = "0x1308020", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DB2")]
		[Address(RVA = "0x13080B4", Offset = "0x13080B4", VA = "0x13080B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DB3")]
		[Address(RVA = "0x1308124", Offset = "0x1308124", VA = "0x1308124")]
		public Vector3Subtract()
		{
		}
	}
	[Token(Token = "0x200092B")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the number of audio tracks in a videoClip. (ReadOnly)")]
	public class VideoClipGetAudioTrackCount : FsmStateAction
	{
		[Token(Token = "0x4002BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		[UIHint(UIHint.Variable)]
		public FsmObject orVideoClip;

		[Token(Token = "0x4002BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("the number of audio tracks")]
		public FsmInt audioTrackCount;

		[Token(Token = "0x4002BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4002BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6002DB4")]
		[Address(RVA = "0x130812C", Offset = "0x130812C", VA = "0x130812C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DB5")]
		[Address(RVA = "0x13081C4", Offset = "0x13081C4", VA = "0x13081C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DB6")]
		[Address(RVA = "0x1308418", Offset = "0x1308418", VA = "0x1308418", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DB7")]
		[Address(RVA = "0x130838C", Offset = "0x130838C", VA = "0x130838C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DB8")]
		[Address(RVA = "0x13081F8", Offset = "0x13081F8", VA = "0x13081F8")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6002DB9")]
		[Address(RVA = "0x1308430", Offset = "0x1308430", VA = "0x1308430")]
		public VideoClipGetAudioTrackCount()
		{
		}
	}
	[Token(Token = "0x200092C")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the length of the VideoClip in frames. (readonly)")]
	public class VideoClipGetFrameCount : FsmStateAction
	{
		[Token(Token = "0x4002BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		[UIHint(UIHint.Variable)]
		public FsmObject orVideoClip;

		[Token(Token = "0x4002BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The length of the VideoClip in frames")]
		public FsmInt frameCount;

		[Token(Token = "0x4002BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4002BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6002DBA")]
		[Address(RVA = "0x1308438", Offset = "0x1308438", VA = "0x1308438", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DBB")]
		[Address(RVA = "0x13084D0", Offset = "0x13084D0", VA = "0x13084D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DBC")]
		[Address(RVA = "0x1308720", Offset = "0x1308720", VA = "0x1308720", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DBD")]
		[Address(RVA = "0x1308698", Offset = "0x1308698", VA = "0x1308698")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DBE")]
		[Address(RVA = "0x1308504", Offset = "0x1308504", VA = "0x1308504")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6002DBF")]
		[Address(RVA = "0x1308738", Offset = "0x1308738", VA = "0x1308738")]
		public VideoClipGetFrameCount()
		{
		}
	}
	[Token(Token = "0x200092D")]
	[Tooltip("Get the frame rate of the clip in frames/second. (readonly)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoClipGetFrameRate : FsmStateAction
	{
		[Token(Token = "0x4002BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		public FsmObject orVideoClip;

		[Token(Token = "0x4002BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The frame rate of the clip in frames/second")]
		[UIHint(UIHint.Variable)]
		public FsmFloat frameRate;

		[Token(Token = "0x4002BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4002BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6002DC0")]
		[Address(RVA = "0x1308740", Offset = "0x1308740", VA = "0x1308740", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DC1")]
		[Address(RVA = "0x13087D8", Offset = "0x13087D8", VA = "0x13087D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DC2")]
		[Address(RVA = "0x1308A2C", Offset = "0x1308A2C", VA = "0x1308A2C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DC3")]
		[Address(RVA = "0x13089A0", Offset = "0x13089A0", VA = "0x13089A0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DC4")]
		[Address(RVA = "0x130880C", Offset = "0x130880C", VA = "0x130880C")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6002DC5")]
		[Address(RVA = "0x1308A44", Offset = "0x1308A44", VA = "0x1308A44")]
		public VideoClipGetFrameRate()
		{
		}
	}
	[Token(Token = "0x200092E")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the length of the video clip in seconds. (readonly)")]
	public class VideoClipGetLength : FsmStateAction
	{
		[Token(Token = "0x4002BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Or the video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		[UIHint(UIHint.Variable)]
		public FsmObject orVideoClip;

		[Token(Token = "0x4002BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The length of the video clip in seconds")]
		[UIHint(UIHint.Variable)]
		public FsmFloat length;

		[Token(Token = "0x4002BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4002BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6002DC6")]
		[Address(RVA = "0x1308A4C", Offset = "0x1308A4C", VA = "0x1308A4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DC7")]
		[Address(RVA = "0x1308AE4", Offset = "0x1308AE4", VA = "0x1308AE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DC8")]
		[Address(RVA = "0x1308D38", Offset = "0x1308D38", VA = "0x1308D38", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DC9")]
		[Address(RVA = "0x1308CAC", Offset = "0x1308CAC", VA = "0x1308CAC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DCA")]
		[Address(RVA = "0x1308B18", Offset = "0x1308B18", VA = "0x1308B18")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6002DCB")]
		[Address(RVA = "0x1308D50", Offset = "0x1308D50", VA = "0x1308D50")]
		public VideoClipGetLength()
		{
		}
	}
	[Token(Token = "0x200092F")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the video clip path in the project's assets. (readonly)")]
	public class VideoClipGetOriginalPath : FsmStateAction
	{
		[Token(Token = "0x4002BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		public FsmObject orVideoClip;

		[Token(Token = "0x4002BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The video clip path in the project's assets")]
		public FsmString originalPath;

		[Token(Token = "0x4002BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4002BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoClip _vc;

		[Token(Token = "0x6002DCC")]
		[Address(RVA = "0x1308D58", Offset = "0x1308D58", VA = "0x1308D58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DCD")]
		[Address(RVA = "0x1308DF0", Offset = "0x1308DF0", VA = "0x1308DF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DCE")]
		[Address(RVA = "0x1309054", Offset = "0x1309054", VA = "0x1309054", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DCF")]
		[Address(RVA = "0x1308FB8", Offset = "0x1308FB8", VA = "0x1308FB8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DD0")]
		[Address(RVA = "0x1308E24", Offset = "0x1308E24", VA = "0x1308E24")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6002DD1")]
		[Address(RVA = "0x130906C", Offset = "0x130906C", VA = "0x130906C")]
		public VideoClipGetOriginalPath()
		{
		}
	}
	[Token(Token = "0x2000930")]
	[Tooltip("Get the size in pixels of a videoClip")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoClipGetSize : FsmStateAction
	{
		[Token(Token = "0x4002BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Or The video clip of the VideoPlayer. Leave to none, else gameObject is ignored")]
		public FsmObject orVideoClip;

		[Token(Token = "0x4002BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The width of the VideoClip")]
		public FsmInt width;

		[Token(Token = "0x4002BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The height of the VideoClip")]
		public FsmInt height;

		[Token(Token = "0x4002BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The width and height of the VideoClip")]
		public FsmVector2 size;

		[Token(Token = "0x4002BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject go;

		[Token(Token = "0x4002BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private VideoClip _vc;

		[Token(Token = "0x6002DD2")]
		[Address(RVA = "0x1309074", Offset = "0x1309074", VA = "0x1309074", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DD3")]
		[Address(RVA = "0x130912C", Offset = "0x130912C", VA = "0x130912C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DD4")]
		[Address(RVA = "0x1309410", Offset = "0x1309410", VA = "0x1309410", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DD5")]
		[Address(RVA = "0x13092F4", Offset = "0x13092F4", VA = "0x13092F4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DD6")]
		[Address(RVA = "0x1309160", Offset = "0x1309160", VA = "0x1309160")]
		private void GetVideoClip()
		{
		}

		[Token(Token = "0x6002DD7")]
		[Address(RVA = "0x1309428", Offset = "0x1309428", VA = "0x1309428")]
		public VideoClipGetSize()
		{
		}
	}
	[Token(Token = "0x2000931")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send error event from a VideoPlayer.")]
	public class VideoPlayerErrorEvent : FsmStateAction
	{
		[Token(Token = "0x4002BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when VideoPlayer throws an error")]
		public FsmEvent onErrorEvent;

		[Token(Token = "0x4002BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002DD8")]
		[Address(RVA = "0x1309430", Offset = "0x1309430", VA = "0x1309430", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DD9")]
		[Address(RVA = "0x1309458", Offset = "0x1309458", VA = "0x1309458", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DDA")]
		[Address(RVA = "0x1309604", Offset = "0x1309604", VA = "0x1309604", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002DDB")]
		[Address(RVA = "0x13096D8", Offset = "0x13096D8", VA = "0x13096D8")]
		private void OnErrorReceived(VideoPlayer source, string errorMessage)
		{
		}

		[Token(Token = "0x6002DDC")]
		[Address(RVA = "0x1309534", Offset = "0x1309534", VA = "0x1309534")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002DDD")]
		[Address(RVA = "0x1309798", Offset = "0x1309798", VA = "0x1309798")]
		public VideoPlayerErrorEvent()
		{
		}
	}
	[Token(Token = "0x2000932")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send the framedropped event from a VideoPlayer when playback detects it does not keep up with the time source..")]
	public class VideoPlayerFrameDroppedEvent : FsmStateAction
	{
		[Token(Token = "0x4002BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when playback detects it does not keep up with the time source.")]
		public FsmEvent onFrameDroppedEvent;

		[Token(Token = "0x4002BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002DDE")]
		[Address(RVA = "0x13097A0", Offset = "0x13097A0", VA = "0x13097A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DDF")]
		[Address(RVA = "0x13097C8", Offset = "0x13097C8", VA = "0x13097C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DE0")]
		[Address(RVA = "0x1309974", Offset = "0x1309974", VA = "0x1309974", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002DE1")]
		[Address(RVA = "0x1309A48", Offset = "0x1309A48", VA = "0x1309A48")]
		private void OnFrameDropped(VideoPlayer source)
		{
		}

		[Token(Token = "0x6002DE2")]
		[Address(RVA = "0x13098A4", Offset = "0x13098A4", VA = "0x13098A4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002DE3")]
		[Address(RVA = "0x1309AE8", Offset = "0x1309AE8", VA = "0x1309AE8")]
		public VideoPlayerFrameDroppedEvent()
		{
		}
	}
	[Token(Token = "0x2000933")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send the frameReady event from a VideoPlayer when a new frame is ready.")]
	public class VideoPlayerFrameReadyEvent : FsmStateAction
	{
		[Token(Token = "0x4002BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when a new frame is ready.")]
		public FsmEvent onFrameReadyEvent;

		[Token(Token = "0x4002BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002DE4")]
		[Address(RVA = "0x1309AF0", Offset = "0x1309AF0", VA = "0x1309AF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DE5")]
		[Address(RVA = "0x1309B18", Offset = "0x1309B18", VA = "0x1309B18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DE6")]
		[Address(RVA = "0x1309CC4", Offset = "0x1309CC4", VA = "0x1309CC4", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002DE7")]
		[Address(RVA = "0x1309D98", Offset = "0x1309D98", VA = "0x1309D98")]
		private void OnFrameReady(VideoPlayer source, long frameIndex)
		{
		}

		[Token(Token = "0x6002DE8")]
		[Address(RVA = "0x1309BF4", Offset = "0x1309BF4", VA = "0x1309BF4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002DE9")]
		[Address(RVA = "0x1309E50", Offset = "0x1309E50", VA = "0x1309E50")]
		public VideoPlayerFrameReadyEvent()
		{
		}
	}
	[Token(Token = "0x2000934")]
	[Tooltip("Get how the video content will be stretched to fill the target area.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetAspectRatio : FsmStateAction
	{
		[Token(Token = "0x4002BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(VideoAspectRatio))]
		[Tooltip("The AspectRatio type")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmEnum aspectRatio;

		[Token(Token = "0x4002BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002DEA")]
		[Address(RVA = "0x1309E58", Offset = "0x1309E58", VA = "0x1309E58", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DEB")]
		[Address(RVA = "0x1309E88", Offset = "0x1309E88", VA = "0x1309E88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DEC")]
		[Address(RVA = "0x130A050", Offset = "0x130A050", VA = "0x130A050", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DED")]
		[Address(RVA = "0x1309F8C", Offset = "0x1309F8C", VA = "0x1309F8C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DEE")]
		[Address(RVA = "0x1309EBC", Offset = "0x1309EBC", VA = "0x1309EBC")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002DEF")]
		[Address(RVA = "0x130A054", Offset = "0x130A054", VA = "0x130A054")]
		public VideoPlayerGetAspectRatio()
		{
		}
	}
	[Token(Token = "0x2000935")]
	[Tooltip("Get the Destination for the audio embedded in the video.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetAudioOutputMode : FsmStateAction
	{
		[Token(Token = "0x4002BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The AudioOutputMode type")]
		[ObjectType(typeof(VideoAudioOutputMode))]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmEnum audioOutputMode;

		[Token(Token = "0x4002BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002DF0")]
		[Address(RVA = "0x130A05C", Offset = "0x130A05C", VA = "0x130A05C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DF1")]
		[Address(RVA = "0x130A0E4", Offset = "0x130A0E4", VA = "0x130A0E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DF2")]
		[Address(RVA = "0x130A2AC", Offset = "0x130A2AC", VA = "0x130A2AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DF3")]
		[Address(RVA = "0x130A1E8", Offset = "0x130A1E8", VA = "0x130A1E8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DF4")]
		[Address(RVA = "0x130A118", Offset = "0x130A118", VA = "0x130A118")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002DF5")]
		[Address(RVA = "0x130A2B0", Offset = "0x130A2B0", VA = "0x130A2B0")]
		public VideoPlayerGetAudioOutputMode()
		{
		}
	}
	[Token(Token = "0x2000936")]
	[Tooltip("Number of audio tracks found in the data source currently configured on a videoPlayer. For URL sources, this will only be set once the source preparation is completed. See VideoPlayer.Prepare.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetAudioTrackCount : FsmStateAction
	{
		[Token(Token = "0x4002BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Number of audio tracks found in the data source currently configured")]
		[RequiredField]
		public FsmInt audioTrackCount;

		[Token(Token = "0x4002BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if source is not prepared")]
		public FsmEvent isNotPrepared;

		[Token(Token = "0x4002BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4002C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002DF6")]
		[Address(RVA = "0x130A2B8", Offset = "0x130A2B8", VA = "0x130A2B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DF7")]
		[Address(RVA = "0x130A2E8", Offset = "0x130A2E8", VA = "0x130A2E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DF8")]
		[Address(RVA = "0x130A4B0", Offset = "0x130A4B0", VA = "0x130A4B0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DF9")]
		[Address(RVA = "0x130A3EC", Offset = "0x130A3EC", VA = "0x130A3EC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002DFA")]
		[Address(RVA = "0x130A31C", Offset = "0x130A31C", VA = "0x130A31C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002DFB")]
		[Address(RVA = "0x130A4B4", Offset = "0x130A4B4", VA = "0x130A4B4")]
		public VideoPlayerGetAudioTrackCount()
		{
		}
	}
	[Token(Token = "0x2000937")]
	[Tooltip("Check whether direct-output volume controls are supported for the current platform and video format on a VideoPlayer. (Read Only)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetCanSetDirectAudioVolume : FsmStateAction
	{
		[Token(Token = "0x4002C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool canSetDirectAudioVolume;

		[Token(Token = "0x4002C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if DirectAudioVolume can be set")]
		public FsmEvent canSetDirectAudioVolumeEvent;

		[Token(Token = "0x4002C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if DirectAudioVolume can not be set")]
		public FsmEvent canNotSetDirectAudioVolumeEvent;

		[Token(Token = "0x4002C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002DFC")]
		[Address(RVA = "0x130A4BC", Offset = "0x130A4BC", VA = "0x130A4BC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002DFD")]
		[Address(RVA = "0x130A50C", Offset = "0x130A50C", VA = "0x130A50C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002DFE")]
		[Address(RVA = "0x130A6DC", Offset = "0x130A6DC", VA = "0x130A6DC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002DFF")]
		[Address(RVA = "0x130A610", Offset = "0x130A610", VA = "0x130A610")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E00")]
		[Address(RVA = "0x130A540", Offset = "0x130A540", VA = "0x130A540")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E01")]
		[Address(RVA = "0x130A6E0", Offset = "0x130A6E0", VA = "0x130A6E0")]
		public VideoPlayerGetCanSetDirectAudioVolume()
		{
		}
	}
	[Token(Token = "0x2000938")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check Whether the playback speed can be changed on a VideoPlayer. (Read Only)")]
	public class VideoPlayerGetCanSetPlaybackSpeed : FsmStateAction
	{
		[Token(Token = "0x4002C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool canSetPlaybackSpeed;

		[Token(Token = "0x4002C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if PlaybackSpeed can be set")]
		public FsmEvent canSetTimePlaybackSpeed;

		[Token(Token = "0x4002C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if PlaybackSpeed can not be set")]
		public FsmEvent canNotSetTimePlaybackSpeed;

		[Token(Token = "0x4002C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E02")]
		[Address(RVA = "0x130A6E8", Offset = "0x130A6E8", VA = "0x130A6E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E03")]
		[Address(RVA = "0x130A738", Offset = "0x130A738", VA = "0x130A738", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E04")]
		[Address(RVA = "0x130A908", Offset = "0x130A908", VA = "0x130A908", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E05")]
		[Address(RVA = "0x130A83C", Offset = "0x130A83C", VA = "0x130A83C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E06")]
		[Address(RVA = "0x130A76C", Offset = "0x130A76C", VA = "0x130A76C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E07")]
		[Address(RVA = "0x130A90C", Offset = "0x130A90C", VA = "0x130A90C")]
		public VideoPlayerGetCanSetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x2000939")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether it's possible to set if the player can skips frames to catch up with current time. (Read Only)")]
	public class VideoPlayerGetCanSkipOnDrop : FsmStateAction
	{
		[Token(Token = "0x4002C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool canSetSkipOnDrop;

		[Token(Token = "0x4002C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if SkipOnDrop can be set")]
		public FsmEvent canSetSkipOnDropEvent;

		[Token(Token = "0x4002C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if SkipOnDrop can not be set")]
		public FsmEvent canNotSetSkipOnDropEvent;

		[Token(Token = "0x4002C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _canSetSkipOnDrop;

		[Token(Token = "0x4002C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E08")]
		[Address(RVA = "0x130A914", Offset = "0x130A914", VA = "0x130A914", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E09")]
		[Address(RVA = "0x130A964", Offset = "0x130A964", VA = "0x130A964", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E0A")]
		[Address(RVA = "0x130AAF4", Offset = "0x130AAF4", VA = "0x130AAF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E0B")]
		[Address(RVA = "0x130AA68", Offset = "0x130AA68", VA = "0x130AA68")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E0C")]
		[Address(RVA = "0x130A998", Offset = "0x130A998", VA = "0x130A998")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E0D")]
		[Address(RVA = "0x130AAF8", Offset = "0x130AAF8", VA = "0x130AAF8")]
		public VideoPlayerGetCanSkipOnDrop()
		{
		}
	}
	[Token(Token = "0x200093A")]
	[Tooltip("Check whether current time can be changed using the time or timeFrames property on a VideoPlayer. (Read Only)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetCanSetTime : FsmStateAction
	{
		[Token(Token = "0x4002C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool canSetTime;

		[Token(Token = "0x4002C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can be set")]
		public FsmEvent canSetTimeEvent;

		[Token(Token = "0x4002C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotSetTimeEvent;

		[Token(Token = "0x4002C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E0E")]
		[Address(RVA = "0x130AB08", Offset = "0x130AB08", VA = "0x130AB08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E0F")]
		[Address(RVA = "0x130AB58", Offset = "0x130AB58", VA = "0x130AB58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E10")]
		[Address(RVA = "0x130AD28", Offset = "0x130AD28", VA = "0x130AD28", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E11")]
		[Address(RVA = "0x130AC5C", Offset = "0x130AC5C", VA = "0x130AC5C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E12")]
		[Address(RVA = "0x130AB8C", Offset = "0x130AB8C", VA = "0x130AB8C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E13")]
		[Address(RVA = "0x130AD2C", Offset = "0x130AD2C", VA = "0x130AD2C")]
		public VideoPlayerGetCanSetTime()
		{
		}
	}
	[Token(Token = "0x200093B")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether the time source followed by the video player can be changed. (Read Only)")]
	public class VideoPlayerGetCanSetTimeSource : FsmStateAction
	{
		[Token(Token = "0x4002C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool canSetTimeSource;

		[Token(Token = "0x4002C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if timeSource can be set")]
		public FsmEvent canSetTimeSourceEvent;

		[Token(Token = "0x4002C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if timeSource can not be set")]
		public FsmEvent canNotSetTimeSourceEvent;

		[Token(Token = "0x4002C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E14")]
		[Address(RVA = "0x130AD34", Offset = "0x130AD34", VA = "0x130AD34", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E15")]
		[Address(RVA = "0x130AD84", Offset = "0x130AD84", VA = "0x130AD84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E16")]
		[Address(RVA = "0x130AF54", Offset = "0x130AF54", VA = "0x130AF54", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E17")]
		[Address(RVA = "0x130AE88", Offset = "0x130AE88", VA = "0x130AE88")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E18")]
		[Address(RVA = "0x130ADB8", Offset = "0x130ADB8", VA = "0x130ADB8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E19")]
		[Address(RVA = "0x130AF58", Offset = "0x130AF58", VA = "0x130AF58")]
		public VideoPlayerGetCanSetTimeSource()
		{
		}
	}
	[Token(Token = "0x200093C")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check if the VideoPlayer can step forwards into the video content. (Read Only)")]
	public class VideoPlayerGetCanStep : FsmStateAction
	{
		[Token(Token = "0x4002C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool canStep;

		[Token(Token = "0x4002C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can be set")]
		public FsmEvent canStepEvent;

		[Token(Token = "0x4002C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotStepEvent;

		[Token(Token = "0x4002C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E1A")]
		[Address(RVA = "0x130AF60", Offset = "0x130AF60", VA = "0x130AF60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E1B")]
		[Address(RVA = "0x130AFB0", Offset = "0x130AFB0", VA = "0x130AFB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E1C")]
		[Address(RVA = "0x130B180", Offset = "0x130B180", VA = "0x130B180", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E1D")]
		[Address(RVA = "0x130B0B4", Offset = "0x130B0B4", VA = "0x130B0B4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E1E")]
		[Address(RVA = "0x130AFE4", Offset = "0x130AFE4", VA = "0x130AFE4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E1F")]
		[Address(RVA = "0x130B184", Offset = "0x130B184", VA = "0x130B184")]
		public VideoPlayerGetCanStep()
		{
		}
	}
	[Token(Token = "0x200093D")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Static property. Maximum number of audio tracks that can be controlled. When playing audio from a URL, the number of audio tracks is not known in advance. It is up to the user to specify the number of controlled audio tracks through VideoPlayer.controlledAudioTrackCount. Other tracks will be ignored and silenced. In this scenario, VideoPlayer.audioTrackCount will be set to the actual number of tracks during playback, after prepration is complete. See VideoPlayer.Prepare.")]
	public class VideoPlayerGetControlledAudioTrackMaxCount : FsmStateAction
	{
		[Token(Token = "0x4002C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The maximum number of audio tracks that can be controlled")]
		public FsmInt controlledAudioTrackMaxCount;

		[Token(Token = "0x4002C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002E20")]
		[Address(RVA = "0x130B18C", Offset = "0x130B18C", VA = "0x130B18C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E21")]
		[Address(RVA = "0x130B1B0", Offset = "0x130B1B0", VA = "0x130B1B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E22")]
		[Address(RVA = "0x130B204", Offset = "0x130B204", VA = "0x130B204", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E23")]
		[Address(RVA = "0x130B1DC", Offset = "0x130B1DC", VA = "0x130B1DC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E24")]
		[Address(RVA = "0x130B208", Offset = "0x130B208", VA = "0x130B208")]
		public VideoPlayerGetControlledAudioTrackMaxCount()
		{
		}
	}
	[Token(Token = "0x200093E")]
	[Tooltip("Get the frame index currently being displayed by the player.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetCurrentFrameIndex : FsmStateAction
	{
		[Token(Token = "0x4002C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("the frame index currently being displayed by the player.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmInt frameIndex;

		[Token(Token = "0x4002C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E25")]
		[Address(RVA = "0x130B210", Offset = "0x130B210", VA = "0x130B210", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E26")]
		[Address(RVA = "0x130B240", Offset = "0x130B240", VA = "0x130B240", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E27")]
		[Address(RVA = "0x130B3CC", Offset = "0x130B3CC", VA = "0x130B3CC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E28")]
		[Address(RVA = "0x130B344", Offset = "0x130B344", VA = "0x130B344")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E29")]
		[Address(RVA = "0x130B274", Offset = "0x130B274", VA = "0x130B274")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E2A")]
		[Address(RVA = "0x130B3D0", Offset = "0x130B3D0", VA = "0x130B3D0")]
		public VideoPlayerGetCurrentFrameIndex()
		{
		}
	}
	[Token(Token = "0x200093F")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Number of frames in the current video content of a VideoPlayer. Note that this value may be adjusted as the frameCount changes during playback.")]
	public class VideoPlayerGetFrameCount : FsmStateAction
	{
		[Token(Token = "0x4002C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Number of frames in the current video content of a VideoPlayer. Note that this value may be adjusted as the frameCount changes during playback.")]
		[RequiredField]
		public FsmInt frameCount;

		[Token(Token = "0x4002C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E2B")]
		[Address(RVA = "0x130B3D8", Offset = "0x130B3D8", VA = "0x130B3D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E2C")]
		[Address(RVA = "0x130B408", Offset = "0x130B408", VA = "0x130B408", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E2D")]
		[Address(RVA = "0x130B594", Offset = "0x130B594", VA = "0x130B594", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E2E")]
		[Address(RVA = "0x130B50C", Offset = "0x130B50C", VA = "0x130B50C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E2F")]
		[Address(RVA = "0x130B43C", Offset = "0x130B43C", VA = "0x130B43C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E30")]
		[Address(RVA = "0x130B598", Offset = "0x130B598", VA = "0x130B598")]
		public VideoPlayerGetFrameCount()
		{
		}
	}
	[Token(Token = "0x2000940")]
	[Tooltip("Get the frame rate of the clip or URL in frames/second.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetFrameRate : FsmStateAction
	{
		[Token(Token = "0x4002C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The frame rate of the clip or URL in frames/second.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat frameRate;

		[Token(Token = "0x4002C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E31")]
		[Address(RVA = "0x130B5A0", Offset = "0x130B5A0", VA = "0x130B5A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E32")]
		[Address(RVA = "0x130B5D0", Offset = "0x130B5D0", VA = "0x130B5D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E33")]
		[Address(RVA = "0x130B75C", Offset = "0x130B75C", VA = "0x130B75C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E34")]
		[Address(RVA = "0x130B6D4", Offset = "0x130B6D4", VA = "0x130B6D4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E35")]
		[Address(RVA = "0x130B604", Offset = "0x130B604", VA = "0x130B604")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E36")]
		[Address(RVA = "0x130B760", Offset = "0x130B760", VA = "0x130B760")]
		public VideoPlayerGetFrameRate()
		{
		}
	}
	[Token(Token = "0x2000941")]
	[Tooltip("Check Whether the player restarts from the beginning without when it reaches the end of the clip.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetIsLooping : FsmStateAction
	{
		[Token(Token = "0x4002C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isLooping;

		[Token(Token = "0x4002C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content is looping")]
		public FsmEvent isLoopingEvent;

		[Token(Token = "0x4002C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content is not looping")]
		public FsmEvent isNotLoopingEvent;

		[Token(Token = "0x4002C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isLooping;

		[Token(Token = "0x6002E37")]
		[Address(RVA = "0x130B768", Offset = "0x130B768", VA = "0x130B768", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E38")]
		[Address(RVA = "0x130B7B0", Offset = "0x130B7B0", VA = "0x130B7B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E39")]
		[Address(RVA = "0x130B974", Offset = "0x130B974", VA = "0x130B974", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E3A")]
		[Address(RVA = "0x130B898", Offset = "0x130B898", VA = "0x130B898")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E3B")]
		[Address(RVA = "0x130B7C8", Offset = "0x130B7C8", VA = "0x130B7C8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E3C")]
		[Address(RVA = "0x130B978", Offset = "0x130B978", VA = "0x130B978")]
		public VideoPlayerGetIsLooping()
		{
		}
	}
	[Token(Token = "0x2000942")]
	[Tooltip("Check Whether content is being played. (Read Only)")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetIsPlaying : FsmStateAction
	{
		[Token(Token = "0x4002C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPlaying;

		[Token(Token = "0x4002C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content is playing")]
		public FsmEvent isPlayingEvent;

		[Token(Token = "0x4002C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content is not playing")]
		public FsmEvent isNotPlayingEvent;

		[Token(Token = "0x4002C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isPlaying;

		[Token(Token = "0x6002E3D")]
		[Address(RVA = "0x130B988", Offset = "0x130B988", VA = "0x130B988", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E3E")]
		[Address(RVA = "0x130B9D0", Offset = "0x130B9D0", VA = "0x130B9D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E3F")]
		[Address(RVA = "0x130BB94", Offset = "0x130BB94", VA = "0x130BB94", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E40")]
		[Address(RVA = "0x130BAB8", Offset = "0x130BAB8", VA = "0x130BAB8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E41")]
		[Address(RVA = "0x130B9E8", Offset = "0x130B9E8", VA = "0x130B9E8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E42")]
		[Address(RVA = "0x130BB98", Offset = "0x130BB98", VA = "0x130BB98")]
		public VideoPlayerGetIsPlaying()
		{
		}
	}
	[Token(Token = "0x2000943")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check Whether the player has successfully prepared the content to be played. (Read Only)")]
	public class VideoPlayerGetIsPrepared : FsmStateAction
	{
		[Token(Token = "0x4002C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool isPrepared;

		[Token(Token = "0x4002C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content is prepared")]
		public FsmEvent isPreparedEvent;

		[Token(Token = "0x4002C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content is not yet prepared")]
		public FsmEvent isNotPreparedEvent;

		[Token(Token = "0x4002C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isPrepared;

		[Token(Token = "0x6002E43")]
		[Address(RVA = "0x130BBA8", Offset = "0x130BBA8", VA = "0x130BBA8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E44")]
		[Address(RVA = "0x130BBF0", Offset = "0x130BBF0", VA = "0x130BBF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E45")]
		[Address(RVA = "0x130BDB4", Offset = "0x130BDB4", VA = "0x130BDB4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E46")]
		[Address(RVA = "0x130BCD8", Offset = "0x130BCD8", VA = "0x130BCD8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E47")]
		[Address(RVA = "0x130BC08", Offset = "0x130BC08", VA = "0x130BC08")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E48")]
		[Address(RVA = "0x130BDB8", Offset = "0x130BDB8", VA = "0x130BDB8")]
		public VideoPlayerGetIsPrepared()
		{
		}
	}
	[Token(Token = "0x2000944")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the factor by which the basic playback rate will be multiplied.")]
	public class VideoPlayerGetPlaybackSpeed : FsmStateAction
	{
		[Token(Token = "0x4002C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The factor by which the basic playback rate will be multiplied.")]
		public FsmFloat playbackSpeed;

		[Token(Token = "0x4002C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E49")]
		[Address(RVA = "0x130BDC8", Offset = "0x130BDC8", VA = "0x130BDC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E4A")]
		[Address(RVA = "0x130BDF8", Offset = "0x130BDF8", VA = "0x130BDF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E4B")]
		[Address(RVA = "0x130BF98", Offset = "0x130BF98", VA = "0x130BF98", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E4C")]
		[Address(RVA = "0x130BEFC", Offset = "0x130BEFC", VA = "0x130BEFC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E4D")]
		[Address(RVA = "0x130BE2C", Offset = "0x130BE2C", VA = "0x130BE2C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E4E")]
		[Address(RVA = "0x130BF9C", Offset = "0x130BF9C", VA = "0x130BF9C")]
		public VideoPlayerGetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x2000945")]
	[Tooltip("Check Whether the content will start playing back as soon as the component awakes.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetPlayOnAwake : FsmStateAction
	{
		[Token(Token = "0x4002C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isPlayingOnAwake;

		[Token(Token = "0x4002C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content content will start playing back as soon as the component awakes")]
		public FsmEvent isPlayingOnAwakeEvent;

		[Token(Token = "0x4002C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content will not start playing back as soon as the component awakes")]
		public FsmEvent isNotPlayingOnAwakeEvent;

		[Token(Token = "0x4002C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isPlayingOnAwake;

		[Token(Token = "0x6002E4F")]
		[Address(RVA = "0x130BFA4", Offset = "0x130BFA4", VA = "0x130BFA4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E50")]
		[Address(RVA = "0x130BFF4", Offset = "0x130BFF4", VA = "0x130BFF4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E51")]
		[Address(RVA = "0x130C1D4", Offset = "0x130C1D4", VA = "0x130C1D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E52")]
		[Address(RVA = "0x130C0F8", Offset = "0x130C0F8", VA = "0x130C0F8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E53")]
		[Address(RVA = "0x130C028", Offset = "0x130C028", VA = "0x130C028")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E54")]
		[Address(RVA = "0x130C1D8", Offset = "0x130C1D8", VA = "0x130C1D8")]
		public VideoPlayerGetPlayOnAwake()
		{
		}
	}
	[Token(Token = "0x2000946")]
	[Tooltip("Get where the video content will be drawn")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetRenderMode : FsmStateAction
	{
		[Token(Token = "0x4002C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("where the video content will be drawn")]
		[ObjectType(typeof(VideoRenderMode))]
		public FsmEnum renderMode;

		[Token(Token = "0x4002C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E55")]
		[Address(RVA = "0x130C1E8", Offset = "0x130C1E8", VA = "0x130C1E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E56")]
		[Address(RVA = "0x130C218", Offset = "0x130C218", VA = "0x130C218", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E57")]
		[Address(RVA = "0x130C3E0", Offset = "0x130C3E0", VA = "0x130C3E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E58")]
		[Address(RVA = "0x130C31C", Offset = "0x130C31C", VA = "0x130C31C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E59")]
		[Address(RVA = "0x130C24C", Offset = "0x130C24C", VA = "0x130C24C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E5A")]
		[Address(RVA = "0x130C3E4", Offset = "0x130C3E4", VA = "0x130C3E4")]
		public VideoPlayerGetRenderMode()
		{
		}
	}
	[Token(Token = "0x2000947")]
	[Tooltip("Check Whether frameReady events are enabled")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetSendFrameReadyEvents : FsmStateAction
	{
		[Token(Token = "0x4002C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool isSendingFrameReadyEvents;

		[Token(Token = "0x4002C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if frameReady events are sent")]
		public FsmEvent isSendingFrameReadyEventsEvent;

		[Token(Token = "0x4002C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if frameReady events are not sent")]
		public FsmEvent isNotSendingFrameReadyEventsEvent;

		[Token(Token = "0x4002C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isSendingFrameReadyEvents;

		[Token(Token = "0x6002E5B")]
		[Address(RVA = "0x130C3EC", Offset = "0x130C3EC", VA = "0x130C3EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E5C")]
		[Address(RVA = "0x130C434", Offset = "0x130C434", VA = "0x130C434", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E5D")]
		[Address(RVA = "0x130C5F8", Offset = "0x130C5F8", VA = "0x130C5F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E5E")]
		[Address(RVA = "0x130C51C", Offset = "0x130C51C", VA = "0x130C51C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E5F")]
		[Address(RVA = "0x130C44C", Offset = "0x130C44C", VA = "0x130C44C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E60")]
		[Address(RVA = "0x130C5FC", Offset = "0x130C5FC", VA = "0x130C5FC")]
		public VideoPlayerGetSendFrameReadyEvents()
		{
		}
	}
	[Token(Token = "0x2000948")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether the player is allowed to skips frames to catch up with current time.")]
	public class VideoPlayerGetSkipOnDrop : FsmStateAction
	{
		[Token(Token = "0x4002C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[UIHint(UIHint.Variable)]
		public FsmBool skipOnDrop;

		[Token(Token = "0x4002C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if SkipOnDrop is true")]
		public FsmEvent doesSkipOnDropEvent;

		[Token(Token = "0x4002C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if SkipOnDrop is false")]
		public FsmEvent DoNotSkipOnDropEvent;

		[Token(Token = "0x4002C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _canSetSkipOnDrop;

		[Token(Token = "0x4002C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E61")]
		[Address(RVA = "0x130C60C", Offset = "0x130C60C", VA = "0x130C60C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E62")]
		[Address(RVA = "0x130C65C", Offset = "0x130C65C", VA = "0x130C65C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E63")]
		[Address(RVA = "0x130C83C", Offset = "0x130C83C", VA = "0x130C83C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E64")]
		[Address(RVA = "0x130C760", Offset = "0x130C760", VA = "0x130C760")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E65")]
		[Address(RVA = "0x130C690", Offset = "0x130C690", VA = "0x130C690")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E66")]
		[Address(RVA = "0x130C840", Offset = "0x130C840", VA = "0x130C840")]
		public VideoPlayerGetSkipOnDrop()
		{
		}
	}
	[Token(Token = "0x2000949")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the video source type. It is valid to set both a VideoClip and a URL in the player. This property controls which one will get used for playback. When setting a new clip or URL, the source will automatically change to make the associated type current.")]
	public class VideoPlayerGetSource : FsmStateAction
	{
		[Token(Token = "0x4002C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The source type")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(VideoSource))]
		[RequiredField]
		public FsmEnum source;

		[Token(Token = "0x4002C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E67")]
		[Address(RVA = "0x130C850", Offset = "0x130C850", VA = "0x130C850", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E68")]
		[Address(RVA = "0x130C880", Offset = "0x130C880", VA = "0x130C880", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E69")]
		[Address(RVA = "0x130CA48", Offset = "0x130CA48", VA = "0x130CA48", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E6A")]
		[Address(RVA = "0x130C984", Offset = "0x130C984", VA = "0x130C984")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E6B")]
		[Address(RVA = "0x130C8B4", Offset = "0x130C8B4", VA = "0x130C8B4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E6C")]
		[Address(RVA = "0x130CA4C", Offset = "0x130CA4C", VA = "0x130CA4C")]
		public VideoPlayerGetSource()
		{
		}
	}
	[Token(Token = "0x200094A")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the Camera GameObject to draw to when VideoPlayer.renderMode is set to either Video.VideoTarget.CameraBackPlane or Video.VideoTarget.CameraFrontPlane.")]
	public class VideoPlayerGetTargetCamera : FsmStateAction
	{
		[Token(Token = "0x4002C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Camera GameObject")]
		public FsmGameObject targetCamera;

		[Token(Token = "0x4002C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E6D")]
		[Address(RVA = "0x130CA54", Offset = "0x130CA54", VA = "0x130CA54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E6E")]
		[Address(RVA = "0x130CA84", Offset = "0x130CA84", VA = "0x130CA84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E6F")]
		[Address(RVA = "0x130CC78", Offset = "0x130CC78", VA = "0x130CC78", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E70")]
		[Address(RVA = "0x130CB88", Offset = "0x130CB88", VA = "0x130CB88")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E71")]
		[Address(RVA = "0x130CAB8", Offset = "0x130CAB8", VA = "0x130CAB8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E72")]
		[Address(RVA = "0x130CC7C", Offset = "0x130CC7C", VA = "0x130CC7C")]
		public VideoPlayerGetTargetCamera()
		{
		}
	}
	[Token(Token = "0x200094B")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the Overall transparency level of the target camera plane video.")]
	public class VideoPlayerGetTargetCameraAlpha : FsmStateAction
	{
		[Token(Token = "0x4002C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Overall transparency level")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat alpha;

		[Token(Token = "0x4002C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E73")]
		[Address(RVA = "0x130CC84", Offset = "0x130CC84", VA = "0x130CC84", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E74")]
		[Address(RVA = "0x130CCB4", Offset = "0x130CCB4", VA = "0x130CCB4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E75")]
		[Address(RVA = "0x130CE40", Offset = "0x130CE40", VA = "0x130CE40", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E76")]
		[Address(RVA = "0x130CDB8", Offset = "0x130CDB8", VA = "0x130CDB8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E77")]
		[Address(RVA = "0x130CCE8", Offset = "0x130CCE8", VA = "0x130CCE8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E78")]
		[Address(RVA = "0x130CE44", Offset = "0x130CE44", VA = "0x130CE44")]
		public VideoPlayerGetTargetCameraAlpha()
		{
		}
	}
	[Token(Token = "0x200094C")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the Material texture property which is targeted when VideoPlayer.renderMode is set to Video.VideoTarget.MaterialOverride.")]
	public class VideoPlayerGetTargetMaterialProperty : FsmStateAction
	{
		[Token(Token = "0x4002C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Material texture property")]
		[RequiredField]
		public FsmString property;

		[Token(Token = "0x4002C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E79")]
		[Address(RVA = "0x130CE4C", Offset = "0x130CE4C", VA = "0x130CE4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E7A")]
		[Address(RVA = "0x130CE7C", Offset = "0x130CE7C", VA = "0x130CE7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E7B")]
		[Address(RVA = "0x130D01C", Offset = "0x130D01C", VA = "0x130D01C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E7C")]
		[Address(RVA = "0x130CF80", Offset = "0x130CF80", VA = "0x130CF80")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E7D")]
		[Address(RVA = "0x130CEB0", Offset = "0x130CEB0", VA = "0x130CEB0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E7E")]
		[Address(RVA = "0x130D020", Offset = "0x130D020", VA = "0x130D020")]
		public VideoPlayerGetTargetMaterialProperty()
		{
		}
	}
	[Token(Token = "0x200094D")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the RenderTexture to draw to when VideoPlayer.renderMode is set to Video.VideoTarget.RenderTexture.")]
	public class VideoPlayerGetTargetTexture : FsmStateAction
	{
		[Token(Token = "0x4002C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The RenderTexture")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmTexture targetTexture;

		[Token(Token = "0x4002C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E7F")]
		[Address(RVA = "0x130D028", Offset = "0x130D028", VA = "0x130D028", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E80")]
		[Address(RVA = "0x130D058", Offset = "0x130D058", VA = "0x130D058", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E81")]
		[Address(RVA = "0x130D1F8", Offset = "0x130D1F8", VA = "0x130D1F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E82")]
		[Address(RVA = "0x130D15C", Offset = "0x130D15C", VA = "0x130D15C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E83")]
		[Address(RVA = "0x130D08C", Offset = "0x130D08C", VA = "0x130D08C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E84")]
		[Address(RVA = "0x130D1FC", Offset = "0x130D1FC", VA = "0x130D1FC")]
		public VideoPlayerGetTargetTexture()
		{
		}
	}
	[Token(Token = "0x200094E")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get Internal texture in which video content is placed. (ReadOnly)")]
	public class VideoPlayerGetTexture : FsmStateAction
	{
		[Token(Token = "0x4002C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("The Internal texture in which video content is placed")]
		public FsmTexture texture;

		[Token(Token = "0x4002C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E85")]
		[Address(RVA = "0x130D204", Offset = "0x130D204", VA = "0x130D204", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E86")]
		[Address(RVA = "0x130D234", Offset = "0x130D234", VA = "0x130D234", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E87")]
		[Address(RVA = "0x130D3D4", Offset = "0x130D3D4", VA = "0x130D3D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E88")]
		[Address(RVA = "0x130D338", Offset = "0x130D338", VA = "0x130D338")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E89")]
		[Address(RVA = "0x130D268", Offset = "0x130D268", VA = "0x130D268")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E8A")]
		[Address(RVA = "0x130D3D8", Offset = "0x130D3D8", VA = "0x130D3D8")]
		public VideoPlayerGetTexture()
		{
		}
	}
	[Token(Token = "0x200094F")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get The player current time in seconds.")]
	public class VideoPlayerGetTime : FsmStateAction
	{
		[Token(Token = "0x4002C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The player current time in seconds")]
		[UIHint(UIHint.Variable)]
		public FsmFloat time;

		[Token(Token = "0x4002C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E8B")]
		[Address(RVA = "0x130D3E0", Offset = "0x130D3E0", VA = "0x130D3E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E8C")]
		[Address(RVA = "0x130D410", Offset = "0x130D410", VA = "0x130D410", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E8D")]
		[Address(RVA = "0x130D5A0", Offset = "0x130D5A0", VA = "0x130D5A0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E8E")]
		[Address(RVA = "0x130D514", Offset = "0x130D514", VA = "0x130D514")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E8F")]
		[Address(RVA = "0x130D444", Offset = "0x130D444", VA = "0x130D444")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E90")]
		[Address(RVA = "0x130D5A4", Offset = "0x130D5A4", VA = "0x130D5A4")]
		public VideoPlayerGetTime()
		{
		}
	}
	[Token(Token = "0x2000950")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get The clock that the player follows to derive its current time")]
	public class VideoPlayerGetTimeSource : FsmStateAction
	{
		[Token(Token = "0x4002C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[ObjectType(typeof(VideoTimeSource))]
		[UIHint(UIHint.Variable)]
		[Tooltip("The time source type")]
		public FsmEnum timeSource;

		[Token(Token = "0x4002C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E91")]
		[Address(RVA = "0x130D5AC", Offset = "0x130D5AC", VA = "0x130D5AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E92")]
		[Address(RVA = "0x130D5DC", Offset = "0x130D5DC", VA = "0x130D5DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E93")]
		[Address(RVA = "0x130D7A4", Offset = "0x130D7A4", VA = "0x130D7A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E94")]
		[Address(RVA = "0x130D6E0", Offset = "0x130D6E0", VA = "0x130D6E0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E95")]
		[Address(RVA = "0x130D610", Offset = "0x130D610", VA = "0x130D610")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E96")]
		[Address(RVA = "0x130D7A8", Offset = "0x130D7A8", VA = "0x130D7A8")]
		public VideoPlayerGetTimeSource()
		{
		}
	}
	[Token(Token = "0x2000951")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Get the file or HTTP URL that the player will read content from.")]
	public class VideoPlayerGetUrl : FsmStateAction
	{
		[Token(Token = "0x4002C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The file or HTTP URL that the player will read content from.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmString url;

		[Token(Token = "0x4002CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E97")]
		[Address(RVA = "0x130D7B0", Offset = "0x130D7B0", VA = "0x130D7B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E98")]
		[Address(RVA = "0x130D7E0", Offset = "0x130D7E0", VA = "0x130D7E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E99")]
		[Address(RVA = "0x130D980", Offset = "0x130D980", VA = "0x130D980", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002E9A")]
		[Address(RVA = "0x130D8E4", Offset = "0x130D8E4", VA = "0x130D8E4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002E9B")]
		[Address(RVA = "0x130D814", Offset = "0x130D814", VA = "0x130D814")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002E9C")]
		[Address(RVA = "0x130D984", Offset = "0x130D984", VA = "0x130D984")]
		public VideoPlayerGetUrl()
		{
		}
	}
	[Token(Token = "0x2000952")]
	[Tooltip("the videoClip of a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerGetVideoClip : FsmStateAction
	{
		[Token(Token = "0x4002CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The video clip of the VideoPlayer")]
		public FsmObject videoClip;

		[Token(Token = "0x4002CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002E9D")]
		[Address(RVA = "0x130D98C", Offset = "0x130D98C", VA = "0x130D98C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002E9E")]
		[Address(RVA = "0x130D9BC", Offset = "0x130D9BC", VA = "0x130D9BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002E9F")]
		[Address(RVA = "0x130DB5C", Offset = "0x130DB5C", VA = "0x130DB5C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EA0")]
		[Address(RVA = "0x130DAC0", Offset = "0x130DAC0", VA = "0x130DAC0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EA1")]
		[Address(RVA = "0x130D9F0", Offset = "0x130D9F0", VA = "0x130D9F0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EA2")]
		[Address(RVA = "0x130DB60", Offset = "0x130DB60", VA = "0x130DB60")]
		public VideoPlayerGetVideoClip()
		{
		}
	}
	[Token(Token = "0x2000953")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Check whether the player will wait for the first frame to be loaded into the texture before starting playback when VideoPlayer.playOnAwake is on")]
	public class VideoPlayerGetWaitForFirstFrame : FsmStateAction
	{
		[Token(Token = "0x4002CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool isWaitingForFirstFrame;

		[Token(Token = "0x4002CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if content will wait for first frame")]
		public FsmEvent isWaitingForFirstFrameEvent;

		[Token(Token = "0x4002CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event sent if content will not wait for first frame")]
		public FsmEvent isNotWaitingForFirstFrameEvent;

		[Token(Token = "0x4002CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject go;

		[Token(Token = "0x4002CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VideoPlayer _vp;

		[Token(Token = "0x4002CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _isWaitingForFirstFrame;

		[Token(Token = "0x6002EA3")]
		[Address(RVA = "0x130DB68", Offset = "0x130DB68", VA = "0x130DB68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EA4")]
		[Address(RVA = "0x130DBB8", Offset = "0x130DBB8", VA = "0x130DBB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EA5")]
		[Address(RVA = "0x130DD98", Offset = "0x130DD98", VA = "0x130DD98", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EA6")]
		[Address(RVA = "0x130DCBC", Offset = "0x130DCBC", VA = "0x130DCBC")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EA7")]
		[Address(RVA = "0x130DBEC", Offset = "0x130DBEC", VA = "0x130DBEC")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EA8")]
		[Address(RVA = "0x130DD9C", Offset = "0x130DD9C", VA = "0x130DD9C")]
		public VideoPlayerGetWaitForFirstFrame()
		{
		}
	}
	[Token(Token = "0x2000954")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send the loopPointReached event from a VideoPlayer.")]
	public class VideoPlayerLoopPointReachedEvent : FsmStateAction
	{
		[Token(Token = "0x4002CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event invoked when the player reaches the end of the content to play.")]
		public FsmEvent OnLoopPointReachedEvent;

		[Token(Token = "0x4002CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EA9")]
		[Address(RVA = "0x130DDAC", Offset = "0x130DDAC", VA = "0x130DDAC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EAA")]
		[Address(RVA = "0x130DDD4", Offset = "0x130DDD4", VA = "0x130DDD4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EAB")]
		[Address(RVA = "0x130DF80", Offset = "0x130DF80", VA = "0x130DF80", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002EAC")]
		[Address(RVA = "0x130E054", Offset = "0x130E054", VA = "0x130E054")]
		private void OnLoopPointReached(VideoPlayer source)
		{
		}

		[Token(Token = "0x6002EAD")]
		[Address(RVA = "0x130DEB0", Offset = "0x130DEB0", VA = "0x130DEB0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EAE")]
		[Address(RVA = "0x130E0F4", Offset = "0x130E0F4", VA = "0x130E0F4")]
		public VideoPlayerLoopPointReachedEvent()
		{
		}
	}
	[Token(Token = "0x2000955")]
	[Tooltip("Pauses the playback of a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerPause : FsmStateAction
	{
		[Token(Token = "0x4002CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x4002CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EAF")]
		[Address(RVA = "0x130E0FC", Offset = "0x130E0FC", VA = "0x130E0FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EB0")]
		[Address(RVA = "0x130E108", Offset = "0x130E108", VA = "0x130E108", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EB1")]
		[Address(RVA = "0x130E194", Offset = "0x130E194", VA = "0x130E194")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EB2")]
		[Address(RVA = "0x130E264", Offset = "0x130E264", VA = "0x130E264")]
		public VideoPlayerPause()
		{
		}
	}
	[Token(Token = "0x2000956")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Starts playback of a VideoPlayer. Initiates the preparation if not already done, in which case the playback will not start instantly.")]
	public class VideoPlayerPlay : FsmStateAction
	{
		[Token(Token = "0x4002CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x4002CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EB3")]
		[Address(RVA = "0x130E26C", Offset = "0x130E26C", VA = "0x130E26C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EB4")]
		[Address(RVA = "0x130E278", Offset = "0x130E278", VA = "0x130E278", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EB5")]
		[Address(RVA = "0x130E304", Offset = "0x130E304", VA = "0x130E304")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EB6")]
		[Address(RVA = "0x130E3D4", Offset = "0x130E3D4", VA = "0x130E3D4")]
		public VideoPlayerPlay()
		{
		}
	}
	[Token(Token = "0x2000957")]
	[Tooltip("Initiates playback engine preparation of a VideoPlayer. The preparation consists of reserving the resources needed for playback, and preloading some or all of the content to be played. After this is done, frames can be received immediately.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerPrepare : FsmStateAction
	{
		[Token(Token = "0x4002CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x4002CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EB7")]
		[Address(RVA = "0x130E3DC", Offset = "0x130E3DC", VA = "0x130E3DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EB8")]
		[Address(RVA = "0x130E3E8", Offset = "0x130E3E8", VA = "0x130E3E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EB9")]
		[Address(RVA = "0x130E474", Offset = "0x130E474", VA = "0x130E474")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EBA")]
		[Address(RVA = "0x130E544", Offset = "0x130E544", VA = "0x130E544")]
		public VideoPlayerPrepare()
		{
		}
	}
	[Token(Token = "0x2000958")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send event from a VideoPlayer when the player preparation is complete.")]
	public class VideoPlayerPreparedCompletedEvent : FsmStateAction
	{
		[Token(Token = "0x4002CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event invoked when the player preparation is complete.")]
		public FsmEvent OnPreparedCompletedEvent;

		[Token(Token = "0x4002CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EBB")]
		[Address(RVA = "0x130E54C", Offset = "0x130E54C", VA = "0x130E54C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EBC")]
		[Address(RVA = "0x130E574", Offset = "0x130E574", VA = "0x130E574", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EBD")]
		[Address(RVA = "0x130E720", Offset = "0x130E720", VA = "0x130E720", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002EBE")]
		[Address(RVA = "0x130E7F4", Offset = "0x130E7F4", VA = "0x130E7F4")]
		private void OnPreparedCompleted(VideoPlayer source)
		{
		}

		[Token(Token = "0x6002EBF")]
		[Address(RVA = "0x130E650", Offset = "0x130E650", VA = "0x130E650")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EC0")]
		[Address(RVA = "0x130E894", Offset = "0x130E894", VA = "0x130E894")]
		public VideoPlayerPreparedCompletedEvent()
		{
		}
	}
	[Token(Token = "0x2000959")]
	[Tooltip("Send event from a VideoPlayer after a seek operation completes..")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSeekCompletedEvent : FsmStateAction
	{
		[Token(Token = "0x4002CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event invoked when the player preparation is complete.")]
		public FsmEvent OnSeekCompletedEvent;

		[Token(Token = "0x4002CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EC1")]
		[Address(RVA = "0x130E89C", Offset = "0x130E89C", VA = "0x130E89C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EC2")]
		[Address(RVA = "0x130E8C4", Offset = "0x130E8C4", VA = "0x130E8C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EC3")]
		[Address(RVA = "0x130EA70", Offset = "0x130EA70", VA = "0x130EA70", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002EC4")]
		[Address(RVA = "0x130EB44", Offset = "0x130EB44", VA = "0x130EB44")]
		private void OnSeekCompleted(VideoPlayer source)
		{
		}

		[Token(Token = "0x6002EC5")]
		[Address(RVA = "0x130E9A0", Offset = "0x130E9A0", VA = "0x130E9A0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EC6")]
		[Address(RVA = "0x130EBE4", Offset = "0x130EBE4", VA = "0x130EBE4")]
		public VideoPlayerSeekCompletedEvent()
		{
		}
	}
	[Token(Token = "0x200095A")]
	[Tooltip("Defines how the video content will be stretched to fill the target area.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetAspectRatio : FsmStateAction
	{
		[Token(Token = "0x4002CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The AspectRatio type")]
		[ObjectType(typeof(VideoAspectRatio))]
		[RequiredField]
		public FsmEnum aspectRatio;

		[Token(Token = "0x4002CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EC7")]
		[Address(RVA = "0x130EBEC", Offset = "0x130EBEC", VA = "0x130EBEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EC8")]
		[Address(RVA = "0x130EC6C", Offset = "0x130EC6C", VA = "0x130EC6C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EC9")]
		[Address(RVA = "0x130ED60", Offset = "0x130ED60", VA = "0x130ED60")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002ECA")]
		[Address(RVA = "0x130EC90", Offset = "0x130EC90", VA = "0x130EC90")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002ECB")]
		[Address(RVA = "0x130EE34", Offset = "0x130EE34", VA = "0x130EE34")]
		public VideoPlayerSetAspectRatio()
		{
		}
	}
	[Token(Token = "0x200095B")]
	[Tooltip("Defines Destination for the audio embedded in the video.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetAudioOutputMode : FsmStateAction
	{
		[Token(Token = "0x4002CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(VideoAudioOutputMode))]
		[Tooltip("The AudioOutputMode type")]
		[RequiredField]
		public FsmEnum audioOutputMode;

		[Token(Token = "0x4002CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002ECC")]
		[Address(RVA = "0x130EE3C", Offset = "0x130EE3C", VA = "0x130EE3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002ECD")]
		[Address(RVA = "0x130EEC0", Offset = "0x130EEC0", VA = "0x130EEC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002ECE")]
		[Address(RVA = "0x130EFB4", Offset = "0x130EFB4", VA = "0x130EFB4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002ECF")]
		[Address(RVA = "0x130EEE4", Offset = "0x130EEE4", VA = "0x130EEE4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002ED0")]
		[Address(RVA = "0x130F088", Offset = "0x130F088", VA = "0x130F088")]
		public VideoPlayerSetAudioOutputMode()
		{
		}
	}
	[Token(Token = "0x200095C")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set the factor by which the basic playback rate will be multiplied.")]
	public class VideoPlayerSetPlaybackSpeed : FsmStateAction
	{
		[Token(Token = "0x4002CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The factor by which the basic playback rate will be multiplied.")]
		public FsmFloat playbackSpeed;

		[Token(Token = "0x4002CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002ED1")]
		[Address(RVA = "0x130F090", Offset = "0x130F090", VA = "0x130F090", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002ED2")]
		[Address(RVA = "0x130F0C0", Offset = "0x130F0C0", VA = "0x130F0C0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002ED3")]
		[Address(RVA = "0x130F25C", Offset = "0x130F25C", VA = "0x130F25C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002ED4")]
		[Address(RVA = "0x130F1C4", Offset = "0x130F1C4", VA = "0x130F1C4")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002ED5")]
		[Address(RVA = "0x130F0F4", Offset = "0x130F0F4", VA = "0x130F0F4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002ED6")]
		[Address(RVA = "0x130F260", Offset = "0x130F260", VA = "0x130F260")]
		public VideoPlayerSetPlaybackSpeed()
		{
		}
	}
	[Token(Token = "0x200095D")]
	[Tooltip("Set Whether the content will start playing back as soon as the component awakes.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetPlayOnAwake : FsmStateAction
	{
		[Token(Token = "0x4002CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		public FsmBool playOnAwake;

		[Token(Token = "0x4002CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002ED7")]
		[Address(RVA = "0x130F268", Offset = "0x130F268", VA = "0x130F268", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002ED8")]
		[Address(RVA = "0x130F298", Offset = "0x130F298", VA = "0x130F298", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002ED9")]
		[Address(RVA = "0x130F438", Offset = "0x130F438", VA = "0x130F438", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EDA")]
		[Address(RVA = "0x130F39C", Offset = "0x130F39C", VA = "0x130F39C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EDB")]
		[Address(RVA = "0x130F2CC", Offset = "0x130F2CC", VA = "0x130F2CC")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EDC")]
		[Address(RVA = "0x130F43C", Offset = "0x130F43C", VA = "0x130F43C")]
		public VideoPlayerSetPlayOnAwake()
		{
		}
	}
	[Token(Token = "0x200095E")]
	[Tooltip("Set where the video content will be drawn")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetRenderMode : FsmStateAction
	{
		[Token(Token = "0x4002CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("where the video content will be drawn")]
		[ObjectType(typeof(VideoRenderMode))]
		public FsmEnum renderMode;

		[Token(Token = "0x4002CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EDD")]
		[Address(RVA = "0x130F444", Offset = "0x130F444", VA = "0x130F444", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EDE")]
		[Address(RVA = "0x130F474", Offset = "0x130F474", VA = "0x130F474", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EDF")]
		[Address(RVA = "0x130F64C", Offset = "0x130F64C", VA = "0x130F64C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EE0")]
		[Address(RVA = "0x130F578", Offset = "0x130F578", VA = "0x130F578")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EE1")]
		[Address(RVA = "0x130F4A8", Offset = "0x130F4A8", VA = "0x130F4A8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EE2")]
		[Address(RVA = "0x130F650", Offset = "0x130F650", VA = "0x130F650")]
		public VideoPlayerSetRenderMode()
		{
		}
	}
	[Token(Token = "0x200095F")]
	[Tooltip("Set Whether frameReady events are enabled")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetSendFrameReadyEvents : FsmStateAction
	{
		[Token(Token = "0x4002CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[RequiredField]
		public FsmBool sendFrameReadyEvents;

		[Token(Token = "0x4002CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Execute action everyframe. Events are however sent discretly, only when changes occurs")]
		public bool everyframe;

		[Token(Token = "0x4002CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EE3")]
		[Address(RVA = "0x130F658", Offset = "0x130F658", VA = "0x130F658", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EE4")]
		[Address(RVA = "0x130F680", Offset = "0x130F680", VA = "0x130F680", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EE5")]
		[Address(RVA = "0x130F804", Offset = "0x130F804", VA = "0x130F804", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EE6")]
		[Address(RVA = "0x130F768", Offset = "0x130F768", VA = "0x130F768")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EE7")]
		[Address(RVA = "0x130F698", Offset = "0x130F698", VA = "0x130F698")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EE8")]
		[Address(RVA = "0x130F808", Offset = "0x130F808", VA = "0x130F808")]
		public VideoPlayerSetSendFrameReadyEvents()
		{
		}
	}
	[Token(Token = "0x2000960")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set whether the player is allowed to skips frames to catch up with current time.")]
	public class VideoPlayerSetSkipOnDrop : FsmStateAction
	{
		[Token(Token = "0x4002CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Value")]
		[RequiredField]
		public FsmBool skipOnDrop;

		[Token(Token = "0x4002CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EE9")]
		[Address(RVA = "0x130F810", Offset = "0x130F810", VA = "0x130F810", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EEA")]
		[Address(RVA = "0x130F840", Offset = "0x130F840", VA = "0x130F840", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EEB")]
		[Address(RVA = "0x130F9E0", Offset = "0x130F9E0", VA = "0x130F9E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EEC")]
		[Address(RVA = "0x130F944", Offset = "0x130F944", VA = "0x130F944")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EED")]
		[Address(RVA = "0x130F874", Offset = "0x130F874", VA = "0x130F874")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EEE")]
		[Address(RVA = "0x130F9E4", Offset = "0x130F9E4", VA = "0x130F9E4")]
		public VideoPlayerSetSkipOnDrop()
		{
		}
	}
	[Token(Token = "0x2000961")]
	[Tooltip("Set the video source type. It is valid to set both a VideoClip and a URL in the player. This property controls which one will get used for playback. When setting a new clip or URL, the source will automatically change to make the associated type current.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetSource : FsmStateAction
	{
		[Token(Token = "0x4002CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[ObjectType(typeof(VideoSource))]
		[Tooltip("The source type")]
		public FsmEnum source;

		[Token(Token = "0x4002CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EEF")]
		[Address(RVA = "0x130F9EC", Offset = "0x130F9EC", VA = "0x130F9EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EF0")]
		[Address(RVA = "0x130FA1C", Offset = "0x130FA1C", VA = "0x130FA1C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EF1")]
		[Address(RVA = "0x130FBF4", Offset = "0x130FBF4", VA = "0x130FBF4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EF2")]
		[Address(RVA = "0x130FB20", Offset = "0x130FB20", VA = "0x130FB20")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EF3")]
		[Address(RVA = "0x130FA50", Offset = "0x130FA50", VA = "0x130FA50")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EF4")]
		[Address(RVA = "0x130FBF8", Offset = "0x130FBF8", VA = "0x130FBF8")]
		public VideoPlayerSetSource()
		{
		}
	}
	[Token(Token = "0x2000962")]
	[Tooltip("Set The Camera GameObject to draw to when VideoPlayer.renderMode is set to either Video.VideoTarget.CameraBackPlane or Video.VideoTarget.CameraFrontPlane.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetTargetCamera : FsmStateAction
	{
		[Token(Token = "0x4002CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Camera GameObject")]
		[CheckForComponent(typeof(Camera))]
		public FsmGameObject targetCamera;

		[Token(Token = "0x4002CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EF5")]
		[Address(RVA = "0x130FC00", Offset = "0x130FC00", VA = "0x130FC00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EF6")]
		[Address(RVA = "0x130FC30", Offset = "0x130FC30", VA = "0x130FC30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EF7")]
		[Address(RVA = "0x130FE2C", Offset = "0x130FE2C", VA = "0x130FE2C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EF8")]
		[Address(RVA = "0x130FD34", Offset = "0x130FD34", VA = "0x130FD34")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EF9")]
		[Address(RVA = "0x130FC64", Offset = "0x130FC64", VA = "0x130FC64")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002EFA")]
		[Address(RVA = "0x130FE30", Offset = "0x130FE30", VA = "0x130FE30")]
		public VideoPlayerSetTargetCamera()
		{
		}
	}
	[Token(Token = "0x2000963")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set the Overall transparency level of the target camera plane video.")]
	public class VideoPlayerSetTargetCameraAlpha : FsmStateAction
	{
		[Token(Token = "0x4002CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Overall transparency level")]
		public FsmFloat alpha;

		[Token(Token = "0x4002CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002EFB")]
		[Address(RVA = "0x130FE38", Offset = "0x130FE38", VA = "0x130FE38", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002EFC")]
		[Address(RVA = "0x130FE68", Offset = "0x130FE68", VA = "0x130FE68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002EFD")]
		[Address(RVA = "0x1310004", Offset = "0x1310004", VA = "0x1310004", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002EFE")]
		[Address(RVA = "0x130FF6C", Offset = "0x130FF6C", VA = "0x130FF6C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002EFF")]
		[Address(RVA = "0x130FE9C", Offset = "0x130FE9C", VA = "0x130FE9C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F00")]
		[Address(RVA = "0x1310008", Offset = "0x1310008", VA = "0x1310008")]
		public VideoPlayerSetTargetCameraAlpha()
		{
		}
	}
	[Token(Token = "0x2000964")]
	[Tooltip("Set the Material texture property which is targeted when VideoPlayer.renderMode is set to Video.VideoTarget.MaterialOverride.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetTargetMaterialProperty : FsmStateAction
	{
		[Token(Token = "0x4002CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The Material texture property")]
		public FsmString property;

		[Token(Token = "0x4002CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F01")]
		[Address(RVA = "0x1310010", Offset = "0x1310010", VA = "0x1310010", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F02")]
		[Address(RVA = "0x1310040", Offset = "0x1310040", VA = "0x1310040", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F03")]
		[Address(RVA = "0x13101E0", Offset = "0x13101E0", VA = "0x13101E0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F04")]
		[Address(RVA = "0x1310144", Offset = "0x1310144", VA = "0x1310144")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002F05")]
		[Address(RVA = "0x1310074", Offset = "0x1310074", VA = "0x1310074")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F06")]
		[Address(RVA = "0x13101E4", Offset = "0x13101E4", VA = "0x13101E4")]
		public VideoPlayerSetTargetMaterialProperty()
		{
		}
	}
	[Token(Token = "0x2000965")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set the RenderTexture to draw to when VideoPlayer.renderMode is set to Video.VideoTarget.RenderTexture.")]
	public class VideoPlayerSetTargetTexture : FsmStateAction
	{
		[Token(Token = "0x4002CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The RenderTexture")]
		public FsmTexture targetTexture;

		[Token(Token = "0x4002CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F07")]
		[Address(RVA = "0x13101EC", Offset = "0x13101EC", VA = "0x13101EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F08")]
		[Address(RVA = "0x1310214", Offset = "0x1310214", VA = "0x1310214", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F09")]
		[Address(RVA = "0x1310308", Offset = "0x1310308", VA = "0x1310308")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002F0A")]
		[Address(RVA = "0x1310238", Offset = "0x1310238", VA = "0x1310238")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F0B")]
		[Address(RVA = "0x13103F4", Offset = "0x13103F4", VA = "0x13103F4")]
		public VideoPlayerSetTargetTexture()
		{
		}
	}
	[Token(Token = "0x2000966")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Sets the time value of a VideoPlayer.")]
	public class VideoPlayerSetTime : FsmStateAction
	{
		[Token(Token = "0x4002CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The time Value")]
		[RequiredField]
		public FsmFloat time;

		[Token(Token = "0x4002D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotSetTime;

		[Token(Token = "0x4002D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject go;

		[Token(Token = "0x4002D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F0C")]
		[Address(RVA = "0x13103FC", Offset = "0x13103FC", VA = "0x13103FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F0D")]
		[Address(RVA = "0x131043C", Offset = "0x131043C", VA = "0x131043C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F0E")]
		[Address(RVA = "0x1310680", Offset = "0x1310680", VA = "0x1310680", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F0F")]
		[Address(RVA = "0x13105D0", Offset = "0x13105D0", VA = "0x13105D0")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002F10")]
		[Address(RVA = "0x1310500", Offset = "0x1310500", VA = "0x1310500")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F11")]
		[Address(RVA = "0x1310684", Offset = "0x1310684", VA = "0x1310684")]
		public VideoPlayerSetTime()
		{
		}
	}
	[Token(Token = "0x2000967")]
	[Tooltip("Sets Time source followed by the VideoPlayer when reading content.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetTimeSource : FsmStateAction
	{
		[Token(Token = "0x4002D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("The timeSource Value")]
		[ObjectType(typeof(VideoTimeSource))]
		public FsmEnum timeSource;

		[Token(Token = "0x4002D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event sent if time can not be set")]
		public FsmEvent canNotSetTime;

		[Token(Token = "0x4002D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject go;

		[Token(Token = "0x4002D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F12")]
		[Address(RVA = "0x131068C", Offset = "0x131068C", VA = "0x131068C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F13")]
		[Address(RVA = "0x131071C", Offset = "0x131071C", VA = "0x131071C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F14")]
		[Address(RVA = "0x131089C", Offset = "0x131089C", VA = "0x131089C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002F15")]
		[Address(RVA = "0x13107CC", Offset = "0x13107CC", VA = "0x13107CC")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F16")]
		[Address(RVA = "0x1310984", Offset = "0x1310984", VA = "0x1310984")]
		public VideoPlayerSetTimeSource()
		{
		}
	}
	[Token(Token = "0x2000968")]
	[Tooltip("Sets the url value of a VideoPlayer.")]
	[ActionCategory(ActionCategory.Video)]
	public class VideoPlayerSetUrl : FsmStateAction
	{
		[Token(Token = "0x4002D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The url Value")]
		[RequiredField]
		public FsmString url;

		[Token(Token = "0x4002D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F17")]
		[Address(RVA = "0x131098C", Offset = "0x131098C", VA = "0x131098C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F18")]
		[Address(RVA = "0x13109B4", Offset = "0x13109B4", VA = "0x13109B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F19")]
		[Address(RVA = "0x1310AA8", Offset = "0x1310AA8", VA = "0x1310AA8")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002F1A")]
		[Address(RVA = "0x13109D8", Offset = "0x13109D8", VA = "0x13109D8")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F1B")]
		[Address(RVA = "0x1310B44", Offset = "0x1310B44", VA = "0x1310B44")]
		public VideoPlayerSetUrl()
		{
		}
	}
	[Token(Token = "0x2000969")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Sets the VideoClip of a VideoPlayer.")]
	public class VideoPlayerSetVideoClip : FsmStateAction
	{
		[Token(Token = "0x4002D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with a VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(VideoClip))]
		[Tooltip("The VideoClip.")]
		public FsmObject videoClip;

		[Token(Token = "0x4002D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F1C")]
		[Address(RVA = "0x1310B4C", Offset = "0x1310B4C", VA = "0x1310B4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F1D")]
		[Address(RVA = "0x1310B58", Offset = "0x1310B58", VA = "0x1310B58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F1E")]
		[Address(RVA = "0x1310C28", Offset = "0x1310C28", VA = "0x1310C28")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F1F")]
		[Address(RVA = "0x1310CF8", Offset = "0x1310CF8", VA = "0x1310CF8")]
		public VideoPlayerSetVideoClip()
		{
		}
	}
	[Token(Token = "0x200096A")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Set whether the player will wait for the first frame to be loaded into the texture before starting playback when VideoPlayer.playOnAwake is on")]
	public class VideoPlayerSetWaitForFirstFrame : FsmStateAction
	{
		[Token(Token = "0x4002D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Value")]
		public FsmBool waitForFirstFrame;

		[Token(Token = "0x4002D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F20")]
		[Address(RVA = "0x1310D00", Offset = "0x1310D00", VA = "0x1310D00", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F21")]
		[Address(RVA = "0x1310D28", Offset = "0x1310D28", VA = "0x1310D28", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F22")]
		[Address(RVA = "0x1310E1C", Offset = "0x1310E1C", VA = "0x1310E1C")]
		private void ExecuteAction()
		{
		}

		[Token(Token = "0x6002F23")]
		[Address(RVA = "0x1310D4C", Offset = "0x1310D4C", VA = "0x1310D4C")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F24")]
		[Address(RVA = "0x1310EB8", Offset = "0x1310EB8", VA = "0x1310EB8")]
		public VideoPlayerSetWaitForFirstFrame()
		{
		}
	}
	[Token(Token = "0x200096B")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Send the started event from a VideoPlayer.")]
	public class VideoPlayerStartedEvent : FsmStateAction
	{
		[Token(Token = "0x4002D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("event sent when VideoPlayer started")]
		public FsmEvent onStartedEvent;

		[Token(Token = "0x4002D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject go;

		[Token(Token = "0x4002D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F25")]
		[Address(RVA = "0x1310EC0", Offset = "0x1310EC0", VA = "0x1310EC0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F26")]
		[Address(RVA = "0x1310EE8", Offset = "0x1310EE8", VA = "0x1310EE8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F27")]
		[Address(RVA = "0x1311094", Offset = "0x1311094", VA = "0x1311094", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002F28")]
		[Address(RVA = "0x1311168", Offset = "0x1311168", VA = "0x1311168")]
		private void OnStarted(VideoPlayer source)
		{
		}

		[Token(Token = "0x6002F29")]
		[Address(RVA = "0x1310FC4", Offset = "0x1310FC4", VA = "0x1310FC4")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F2A")]
		[Address(RVA = "0x1311208", Offset = "0x1311208", VA = "0x1311208")]
		public VideoPlayerStartedEvent()
		{
		}
	}
	[Token(Token = "0x200096C")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Advances the current time by one frame immediately of a VideoPlayer.")]
	public class VideoPlayerStepForward : FsmStateAction
	{
		[Token(Token = "0x4002D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(VideoPlayer))]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x4002D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F2B")]
		[Address(RVA = "0x1311210", Offset = "0x1311210", VA = "0x1311210", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F2C")]
		[Address(RVA = "0x131121C", Offset = "0x131121C", VA = "0x131121C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F2D")]
		[Address(RVA = "0x13112B0", Offset = "0x13112B0", VA = "0x13112B0")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F2E")]
		[Address(RVA = "0x1311380", Offset = "0x1311380", VA = "0x1311380")]
		public VideoPlayerStepForward()
		{
		}
	}
	[Token(Token = "0x200096D")]
	[ActionCategory(ActionCategory.Video)]
	[Tooltip("Stops playback of a VideoPlayer. Pauses the playback and sets the current time to 0.")]
	public class VideoPlayerStop : FsmStateAction
	{
		[Token(Token = "0x4002D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The GameObject with as VideoPlayer component.")]
		[CheckForComponent(typeof(VideoPlayer))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject go;

		[Token(Token = "0x4002D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VideoPlayer _vp;

		[Token(Token = "0x6002F2F")]
		[Address(RVA = "0x1311388", Offset = "0x1311388", VA = "0x1311388", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F30")]
		[Address(RVA = "0x1311394", Offset = "0x1311394", VA = "0x1311394", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F31")]
		[Address(RVA = "0x1311420", Offset = "0x1311420", VA = "0x1311420")]
		private void GetVideoPlayer()
		{
		}

		[Token(Token = "0x6002F32")]
		[Address(RVA = "0x13114F0", Offset = "0x13114F0", VA = "0x13114F0")]
		public VideoPlayerStop()
		{
		}
	}
	[Token(Token = "0x200096E")]
	[ActionCategory("Abilities")]
	public class AbilityBuyTest : FsmStateAction
	{
		[Token(Token = "0x4002D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Ability Data.")]
		[ObjectType(typeof(UnlockableAbilityScriptableObject))]
		public FsmObject scriptableObject;

		[Token(Token = "0x4002D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent canEvent;

		[Token(Token = "0x4002D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent cantEvent;

		[Token(Token = "0x4002D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmEvent purchasedEvent;

		[Token(Token = "0x6002F33")]
		[Address(RVA = "0x13114F8", Offset = "0x13114F8", VA = "0x13114F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F34")]
		[Address(RVA = "0x13116BC", Offset = "0x13116BC", VA = "0x13116BC")]
		public AbilityBuyTest()
		{
		}
	}
	[Token(Token = "0x200096F")]
	[ActionCategory("Abilities")]
	public class BuyAbility : UnlockUpgrade
	{
		[Token(Token = "0x6002F35")]
		[Address(RVA = "0x13116C4", Offset = "0x13116C4", VA = "0x13116C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F36")]
		[Address(RVA = "0x13118F0", Offset = "0x13118F0", VA = "0x13118F0")]
		public BuyAbility()
		{
		}
	}
	[Token(Token = "0x2000970")]
	[ActionCategory("Abilities")]
	public class CapeTest : FsmStateAction
	{
		[Token(Token = "0x4002D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Cape Data.")]
		[ObjectType(typeof(UnlockableAbilityScriptableObject))]
		public FsmObject scriptableObject;

		[Token(Token = "0x4002D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool isEquipedStore;

		[Token(Token = "0x4002D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent equipedEvent;

		[Token(Token = "0x6002F37")]
		[Address(RVA = "0x1311900", Offset = "0x1311900", VA = "0x1311900", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F38")]
		[Address(RVA = "0x1311A24", Offset = "0x1311A24", VA = "0x1311A24")]
		public CapeTest()
		{
		}
	}
	[Token(Token = "0x2000971")]
	[ActionCategory("Abilities")]
	public class GetCoins : FsmStateAction
	{
		[Token(Token = "0x4002D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI coinsTXT;

		[Token(Token = "0x4002D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmInt storeValue;

		[Token(Token = "0x6002F39")]
		[Address(RVA = "0x1311A2C", Offset = "0x1311A2C", VA = "0x1311A2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F3A")]
		[Address(RVA = "0x1311B70", Offset = "0x1311B70", VA = "0x1311B70")]
		public GetCoins()
		{
		}
	}
	[Token(Token = "0x2000972")]
	[ActionCategory("Abilities")]
	public class GetTeleportData : FsmStateAction
	{
		[Token(Token = "0x4002D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Ability Data.")]
		[ObjectType(typeof(UnlockableAbilityScriptableObject))]
		public FsmObject scriptableObject;

		[Token(Token = "0x4002D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The Ability Data.")]
		[ObjectType(typeof(SceneData))]
		[RequiredField]
		public FsmObject storeSceneData;

		[Token(Token = "0x4002D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmInt storeChekpoint;

		[Token(Token = "0x6002F3B")]
		[Address(RVA = "0x1311B78", Offset = "0x1311B78", VA = "0x1311B78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F3C")]
		[Address(RVA = "0x1311C70", Offset = "0x1311C70", VA = "0x1311C70")]
		public GetTeleportData()
		{
		}
	}
	[Token(Token = "0x2000973")]
	[ActionCategory("Scenes")]
	public class SceneTest : FsmStateAction
	{
		[Token(Token = "0x4002D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(SceneData))]
		[Tooltip("The Scene Data.")]
		[RequiredField]
		public FsmObject scriptableObject;

		[Token(Token = "0x4002D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool isSceneStore;

		[Token(Token = "0x4002D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent isCurentEvent;

		[Token(Token = "0x6002F3D")]
		[Address(RVA = "0x1311C78", Offset = "0x1311C78", VA = "0x1311C78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F3E")]
		[Address(RVA = "0x1311DC8", Offset = "0x1311DC8", VA = "0x1311DC8")]
		public SceneTest()
		{
		}
	}
	[Token(Token = "0x2000974")]
	[ActionCategory("Abilities")]
	public class SelectCape : FsmStateAction
	{
		[Token(Token = "0x4002D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(UnlockableAbilityScriptableObject))]
		[Tooltip("The Ability Data.")]
		[RequiredField]
		public FsmObject scriptableObject;

		[Token(Token = "0x6002F3F")]
		[Address(RVA = "0x1311DD0", Offset = "0x1311DD0", VA = "0x1311DD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F40")]
		[Address(RVA = "0x1311ECC", Offset = "0x1311ECC", VA = "0x1311ECC")]
		public SelectCape()
		{
		}
	}
	[Token(Token = "0x2000975")]
	[ActionCategory("Abilities")]
	public class SetAbilityData : FsmStateAction
	{
		[Token(Token = "0x4002D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(UnlockableAbilityScriptableObject))]
		[Tooltip("The Ability Data.")]
		public FsmObject scriptableObject;

		[Token(Token = "0x4002D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image image;

		[Token(Token = "0x4002D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI nameTXT;

		[Token(Token = "0x4002D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI descriptionTXT;

		[Token(Token = "0x4002D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI priceCanTXT;

		[Token(Token = "0x4002D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI priceCantTXT;

		[Token(Token = "0x4002D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ObjectType(typeof(VideoClip))]
		[Tooltip("The VideoClip.")]
		public FsmObject videoClip;

		[Token(Token = "0x6002F41")]
		[Address(RVA = "0x1311ED4", Offset = "0x1311ED4", VA = "0x1311ED4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F42")]
		[Address(RVA = "0x13121A0", Offset = "0x13121A0", VA = "0x13121A0")]
		public SetAbilityData()
		{
		}
	}
	[Token(Token = "0x2000976")]
	[ActionCategory("Abilities")]
	public class TeleportTest : FsmStateAction
	{
		[Token(Token = "0x4002D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(UnlockableAbilityScriptableObject))]
		[RequiredField]
		public FsmObject scriptableObject;

		[Token(Token = "0x4002D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent canEvent;

		[Token(Token = "0x4002D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent cantEvent;

		[Token(Token = "0x6002F43")]
		[Address(RVA = "0x13121A8", Offset = "0x13121A8", VA = "0x13121A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F44")]
		[Address(RVA = "0x13122D0", Offset = "0x13122D0", VA = "0x13122D0")]
		public TeleportTest()
		{
		}
	}
	[Token(Token = "0x2000977")]
	[ActionCategory("Abilities")]
	public class UnlockTeleport : UnlockUpgrade
	{
		[Token(Token = "0x6002F45")]
		[Address(RVA = "0x13122D8", Offset = "0x13122D8", VA = "0x13122D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F46")]
		[Address(RVA = "0x13123D4", Offset = "0x13123D4", VA = "0x13123D4")]
		public UnlockTeleport()
		{
		}
	}
	[Token(Token = "0x2000978")]
	[ActionCategory("Abilities")]
	public class UnlockUpgrade : FsmStateAction
	{
		[Token(Token = "0x4002D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Ability Data.")]
		[ObjectType(typeof(UnlockableAbilityScriptableObject))]
		public FsmObject scriptableObject;

		[Token(Token = "0x4002D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool snapshot;

		[Token(Token = "0x6002F47")]
		[Address(RVA = "0x13117B4", Offset = "0x13117B4", VA = "0x13117B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F48")]
		[Address(RVA = "0x13118F8", Offset = "0x13118F8", VA = "0x13118F8")]
		public UnlockUpgrade()
		{
		}
	}
	[Token(Token = "0x2000979")]
	[ActionCategory("AI")]
	public class IsOnNavmesh : FsmStateAction
	{
		[Token(Token = "0x4002D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmFloat radius;

		[Token(Token = "0x4002D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ObjectType(typeof(AIBehaviourType))]
		public FsmObject agentType;

		[Token(Token = "0x4002D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmEvent yes;

		[Token(Token = "0x4002D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmEvent no;

		[Token(Token = "0x4002D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool storeResult;

		[Token(Token = "0x4002D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool everyFrame;

		[Token(Token = "0x4002D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int agent;

		[Token(Token = "0x6002F49")]
		[Address(RVA = "0x13123DC", Offset = "0x13123DC", VA = "0x13123DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F4A")]
		[Address(RVA = "0x1312404", Offset = "0x1312404", VA = "0x1312404", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F4B")]
		[Address(RVA = "0x1312504", Offset = "0x1312504", VA = "0x1312504", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F4C")]
		[Address(RVA = "0x13124AC", Offset = "0x13124AC", VA = "0x13124AC")]
		public void IsTargetOnNavmesh(Vector3 position, float radius = 0.2f)
		{
		}

		[Token(Token = "0x6002F4D")]
		[Address(RVA = "0x1312588", Offset = "0x1312588", VA = "0x1312588")]
		public IsOnNavmesh()
		{
		}
	}
	[Token(Token = "0x200097A")]
	[ActionCategory("AI")]
	public class IsPositionReachable : FsmStateAction
	{
		[Token(Token = "0x4002D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmGameObject gameObject;

		[Token(Token = "0x4002D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmGameObject target;

		[Token(Token = "0x4002D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmVector3 position;

		[Token(Token = "0x4002D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmInt agentType;

		[Token(Token = "0x4002D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmEvent yes;

		[Token(Token = "0x4002D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent no;

		[Token(Token = "0x4002D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmBool storeResult;

		[Token(Token = "0x4002D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool everyFrame;

		[Token(Token = "0x6002F4E")]
		[Address(RVA = "0x13125C0", Offset = "0x13125C0", VA = "0x13125C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F4F")]
		[Address(RVA = "0x1312604", Offset = "0x1312604", VA = "0x1312604", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F50")]
		[Address(RVA = "0x13127B4", Offset = "0x13127B4", VA = "0x13127B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F51")]
		[Address(RVA = "0x1312630", Offset = "0x1312630", VA = "0x1312630")]
		public void IsReachable()
		{
		}

		[Token(Token = "0x6002F52")]
		[Address(RVA = "0x13127D0", Offset = "0x13127D0", VA = "0x13127D0")]
		public IsPositionReachable()
		{
		}
	}
	[Token(Token = "0x200097B")]
	[ActionCategory("AI")]
	public class SetDestination : ComponentAction<AIBehaviour>
	{
		[Token(Token = "0x4002D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("AI Behaviour")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4002D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmGameObject target;

		[Token(Token = "0x4002D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat reachDistance;

		[Token(Token = "0x4002D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent reachEvent;

		[Token(Token = "0x4002D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmEvent cantReachEvent;

		[Token(Token = "0x4002D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Min(0f)]
		public float refreshTime;

		[Token(Token = "0x4002D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool everyFrame;

		[Token(Token = "0x4002D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmBool finishOnDestinationReached;

		[Token(Token = "0x4002D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool disableAIOnExit;

		[Token(Token = "0x4002D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public MovementReferenceParameters.MovementReferenceMode defaultMovementReference;

		[Token(Token = "0x4002D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected float timer;

		[Token(Token = "0x4002D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected NavMeshPath navMeshPath;

		[Token(Token = "0x1700038D")]
		protected virtual AIBehaviour aiBehaviour
		{
			[Token(Token = "0x6002F53")]
			[Address(RVA = "0x13127D8", Offset = "0x13127D8", VA = "0x13127D8", Slot = "62")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F54")]
		[Address(RVA = "0x13127E0", Offset = "0x13127E0", VA = "0x13127E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F55")]
		[Address(RVA = "0x1312810", Offset = "0x1312810", VA = "0x1312810", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F56")]
		[Address(RVA = "0x1312978", Offset = "0x1312978", VA = "0x1312978", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F57")]
		[Address(RVA = "0x13129D0", Offset = "0x13129D0", VA = "0x13129D0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002F58")]
		[Address(RVA = "0x1312B28", Offset = "0x1312B28", VA = "0x1312B28", Slot = "63")]
		protected virtual void UpdateFollowTargetBehaviour()
		{
		}

		[Token(Token = "0x6002F59")]
		[Address(RVA = "0x1312ECC", Offset = "0x1312ECC", VA = "0x1312ECC")]
		public SetDestination()
		{
		}
	}
	[Token(Token = "0x200097C")]
	[ActionCategory("AI")]
	public class SetPhysicsDestination : ComponentAction<AIBehaviour>
	{
		[Token(Token = "0x4002D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("AI Behaviour")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat reachDistance;

		[Token(Token = "0x4002D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent reachEvent;

		[Token(Token = "0x4002D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent cantReachEvent;

		[Token(Token = "0x4002D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Min(0f)]
		public float refreshTime;

		[Token(Token = "0x4002D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float searchRadius;

		[Token(Token = "0x4002D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool everyFrame;

		[Token(Token = "0x4002D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmBool finishOnDestinationReached;

		[Token(Token = "0x4002D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool disableAIOnExit;

		[Token(Token = "0x4002D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public MovementReferenceParameters.MovementReferenceMode defaultMovementReference;

		[Token(Token = "0x4002D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected float timer;

		[Token(Token = "0x1700038E")]
		protected virtual AIBehaviour aiBehaviour
		{
			[Token(Token = "0x6002F5A")]
			[Address(RVA = "0x1312F64", Offset = "0x1312F64", VA = "0x1312F64", Slot = "62")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F5B")]
		[Address(RVA = "0x1312F6C", Offset = "0x1312F6C", VA = "0x1312F6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F5C")]
		[Address(RVA = "0x1312F94", Offset = "0x1312F94", VA = "0x1312F94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F5D")]
		[Address(RVA = "0x13130C0", Offset = "0x13130C0", VA = "0x13130C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F5E")]
		[Address(RVA = "0x1313118", Offset = "0x1313118", VA = "0x1313118", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002F5F")]
		[Address(RVA = "0x1313270", Offset = "0x1313270", VA = "0x1313270", Slot = "63")]
		protected virtual void UpdateFollowTargetBehaviour()
		{
		}

		[Token(Token = "0x6002F60")]
		[Address(RVA = "0x1313538", Offset = "0x1313538", VA = "0x1313538")]
		public SetPhysicsDestination()
		{
		}
	}
	[Token(Token = "0x200097D")]
	[ActionCategory("Alchemy")]
	public class AddAlchemyModification : ComponentAction<AlchemyModificationReceiver>
	{
		[Token(Token = "0x4002D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(AlchemyModificationReceiver))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(ModificationScriptableObject))]
		public FsmObject modification;

		[Token(Token = "0x1700038F")]
		private AlchemyModificationReceiver receiver
		{
			[Token(Token = "0x6002F61")]
			[Address(RVA = "0x13135D0", Offset = "0x13135D0", VA = "0x13135D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F62")]
		[Address(RVA = "0x13135D8", Offset = "0x13135D8", VA = "0x13135D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F63")]
		[Address(RVA = "0x13135E4", Offset = "0x13135E4", VA = "0x13135E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F64")]
		[Address(RVA = "0x1313760", Offset = "0x1313760", VA = "0x1313760")]
		public AddAlchemyModification()
		{
		}
	}
	[Token(Token = "0x200097E")]
	[ActionCategory("Alchemy")]
	public class RemoveAlchemyModification : ComponentAction<AlchemyModificationReceiver>
	{
		[Token(Token = "0x4002D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(AlchemyModificationReceiver))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(ModificationScriptableObject))]
		public FsmObject modification;

		[Token(Token = "0x17000390")]
		private AlchemyModificationReceiver receiver
		{
			[Token(Token = "0x6002F65")]
			[Address(RVA = "0x13137A8", Offset = "0x13137A8", VA = "0x13137A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F66")]
		[Address(RVA = "0x13137B0", Offset = "0x13137B0", VA = "0x13137B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F67")]
		[Address(RVA = "0x13137BC", Offset = "0x13137BC", VA = "0x13137BC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F68")]
		[Address(RVA = "0x13138B8", Offset = "0x13138B8", VA = "0x13138B8")]
		public RemoveAlchemyModification()
		{
		}
	}
	[Token(Token = "0x200097F")]
	[ActionCategory("Alchemy")]
	public class UnlockMixture : FsmStateAction
	{
		[Token(Token = "0x4002D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Ability Data.")]
		[ObjectType(typeof(AlchemyModificationBase))]
		public FsmObject mixture;

		[Token(Token = "0x4002D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool full;

		[Token(Token = "0x6002F69")]
		[Address(RVA = "0x1313900", Offset = "0x1313900", VA = "0x1313900", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F6A")]
		[Address(RVA = "0x1313B20", Offset = "0x1313B20", VA = "0x1313B20")]
		public UnlockMixture()
		{
		}
	}
	[Token(Token = "0x2000980")]
	[ActionCategory(ActionCategory.Animation)]
	public class AnimationStateTest : ComponentAction<Animator>
	{
		[Token(Token = "0x4002D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[Tooltip("Check to see if the FSM is in this state.")]
		public FsmString stateName;

		[Token(Token = "0x4002D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Event to send if the FSM is in the specified state.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Event to send if the FSM is NOT in the specified state.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4002D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result of this test in a bool variable. Useful if other actions depend on this test.")]
		public FsmBool storeResult;

		[Token(Token = "0x4002D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if you want to wait for an FSM to be in a particular state before sending an event.")]
		public bool everyFrame;

		[Token(Token = "0x4002D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int stateHash;

		[Token(Token = "0x17000391")]
		private Animator Animator
		{
			[Token(Token = "0x6002F6B")]
			[Address(RVA = "0x1313B30", Offset = "0x1313B30", VA = "0x1313B30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F6C")]
		[Address(RVA = "0x1313B38", Offset = "0x1313B38", VA = "0x1313B38", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F6D")]
		[Address(RVA = "0x1313B98", Offset = "0x1313B98", VA = "0x1313B98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F6E")]
		[Address(RVA = "0x1313D20", Offset = "0x1313D20", VA = "0x1313D20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F6F")]
		[Address(RVA = "0x1313C44", Offset = "0x1313C44", VA = "0x1313C44")]
		private void DoFsmStateTest()
		{
		}

		[Token(Token = "0x6002F70")]
		[Address(RVA = "0x1313D24", Offset = "0x1313D24", VA = "0x1313D24")]
		public AnimationStateTest()
		{
		}
	}
	[Token(Token = "0x2000981")]
	[Tooltip("Sets a trigger parameter to active or inactive. Triggers are parameters that act mostly like booleans, but get resets to inactive when they are used in a transition.")]
	[ActionCategory("Animator")]
	public class ResetAnimatorTrigger : FsmStateAction
	{
		[Token(Token = "0x4002D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The target. An Animator component is required")]
		[CheckForComponent(typeof(Animator))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The trigger name")]
		public FsmString trigger;

		[Token(Token = "0x4002D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _animator;

		[Token(Token = "0x4002D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _paramID;

		[Token(Token = "0x6002F71")]
		[Address(RVA = "0x1313D6C", Offset = "0x1313D6C", VA = "0x1313D6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F72")]
		[Address(RVA = "0x1313D94", Offset = "0x1313D94", VA = "0x1313D94", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F73")]
		[Address(RVA = "0x1313E88", Offset = "0x1313E88", VA = "0x1313E88")]
		private void ResetTrigger()
		{
		}

		[Token(Token = "0x6002F74")]
		[Address(RVA = "0x1313F24", Offset = "0x1313F24", VA = "0x1313F24")]
		public ResetAnimatorTrigger()
		{
		}
	}
	[Token(Token = "0x2000982")]
	[Tooltip("Insert an item into an Array at the specified index.")]
	[ActionCategory(ActionCategory.Array)]
	public class ArrayInsertChildren : FsmStateAction
	{
		[Token(Token = "0x4002D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Parent of target Game Objects that will be inserted.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The Array Variable to use.")]
		public FsmArray array;

		[Token(Token = "0x4002D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The index to insert at.\n0 = first, 1 = second...")]
		public FsmInt atIndex;

		[Token(Token = "0x6002F75")]
		[Address(RVA = "0x1313F2C", Offset = "0x1313F2C", VA = "0x1313F2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F76")]
		[Address(RVA = "0x1313F54", Offset = "0x1313F54", VA = "0x1313F54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F77")]
		[Address(RVA = "0x1313F70", Offset = "0x1313F70", VA = "0x1313F70")]
		private void DoInsertChildren()
		{
		}

		[Token(Token = "0x6002F78")]
		[Address(RVA = "0x1314088", Offset = "0x1314088", VA = "0x1314088")]
		public ArrayInsertChildren()
		{
		}
	}
	[Token(Token = "0x2000983")]
	[ActionCategory("Attacks")]
	public class BlockAttack : ComponentAction<Attack>
	{
		[Token(Token = "0x4002D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Attack))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x17000392")]
		private Attack attack
		{
			[Token(Token = "0x6002F79")]
			[Address(RVA = "0x1314090", Offset = "0x1314090", VA = "0x1314090")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F7A")]
		[Address(RVA = "0x1314098", Offset = "0x1314098", VA = "0x1314098", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F7B")]
		[Address(RVA = "0x13140A4", Offset = "0x13140A4", VA = "0x13140A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F7C")]
		[Address(RVA = "0x1314128", Offset = "0x1314128", VA = "0x1314128")]
		public BlockAttack()
		{
		}
	}
	[Token(Token = "0x2000984")]
	[ActionCategory("Attacks")]
	public class CanAttack : ComponentAction<Attack>
	{
		[Token(Token = "0x4002D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Attack))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool storeResult;

		[Token(Token = "0x4002D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent canEvent;

		[Token(Token = "0x4002D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent cantEvent;

		[Token(Token = "0x4002D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool everyFrame;

		[Token(Token = "0x17000393")]
		private Attack attack
		{
			[Token(Token = "0x6002F7D")]
			[Address(RVA = "0x1314170", Offset = "0x1314170", VA = "0x1314170")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F7E")]
		[Address(RVA = "0x1314178", Offset = "0x1314178", VA = "0x1314178", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F7F")]
		[Address(RVA = "0x1314184", Offset = "0x1314184", VA = "0x1314184", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F80")]
		[Address(RVA = "0x13142A4", Offset = "0x13142A4", VA = "0x13142A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F81")]
		[Address(RVA = "0x1314214", Offset = "0x1314214", VA = "0x1314214")]
		private void CheckAttack()
		{
		}

		[Token(Token = "0x6002F82")]
		[Address(RVA = "0x13142A8", Offset = "0x13142A8", VA = "0x13142A8")]
		public CanAttack()
		{
		}
	}
	[Token(Token = "0x2000985")]
	[ActionCategory("Attacks")]
	public class GetAttack : ComponentAction<AttacksController>
	{
		[Token(Token = "0x4002D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(AttacksController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmInt storeResult;

		[Token(Token = "0x4002D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent canEvent;

		[Token(Token = "0x4002D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent cantEvent;

		[Token(Token = "0x4002D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool everyFrame;

		[Token(Token = "0x17000394")]
		private AttacksController controller
		{
			[Token(Token = "0x6002F83")]
			[Address(RVA = "0x13142F0", Offset = "0x13142F0", VA = "0x13142F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F84")]
		[Address(RVA = "0x13142F8", Offset = "0x13142F8", VA = "0x13142F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F85")]
		[Address(RVA = "0x1314304", Offset = "0x1314304", VA = "0x1314304", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F86")]
		[Address(RVA = "0x131441C", Offset = "0x131441C", VA = "0x131441C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002F87")]
		[Address(RVA = "0x1314394", Offset = "0x1314394", VA = "0x1314394")]
		private void CheckAttack()
		{
		}

		[Token(Token = "0x6002F88")]
		[Address(RVA = "0x1314420", Offset = "0x1314420", VA = "0x1314420")]
		public GetAttack()
		{
		}
	}
	[Token(Token = "0x2000986")]
	[ActionCategory("Attacks")]
	public class RegisterAttackTime : ComponentAction<AttacksController>
	{
		[Token(Token = "0x4002D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(AttacksController))]
		[RequiredField]
		public FsmOwnerDefault attackController;

		[Token(Token = "0x4002D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject attack;

		[Token(Token = "0x17000395")]
		private AttacksController controller
		{
			[Token(Token = "0x6002F89")]
			[Address(RVA = "0x1314468", Offset = "0x1314468", VA = "0x1314468")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F8A")]
		[Address(RVA = "0x1314470", Offset = "0x1314470", VA = "0x1314470", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F8B")]
		[Address(RVA = "0x131447C", Offset = "0x131447C", VA = "0x131447C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F8C")]
		[Address(RVA = "0x131459C", Offset = "0x131459C", VA = "0x131459C")]
		public RegisterAttackTime()
		{
		}
	}
	[Token(Token = "0x2000987")]
	[ActionCategory("Attacks")]
	public class UnlockAttack : ComponentAction<Attack>
	{
		[Token(Token = "0x4002D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Attack))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x17000396")]
		private Attack attack
		{
			[Token(Token = "0x6002F8D")]
			[Address(RVA = "0x13145E4", Offset = "0x13145E4", VA = "0x13145E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F8E")]
		[Address(RVA = "0x13145EC", Offset = "0x13145EC", VA = "0x13145EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F8F")]
		[Address(RVA = "0x13145F8", Offset = "0x13145F8", VA = "0x13145F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F90")]
		[Address(RVA = "0x131467C", Offset = "0x131467C", VA = "0x131467C")]
		public UnlockAttack()
		{
		}
	}
	[Token(Token = "0x2000988")]
	[ActionCategory("Audio FMOD")]
	public class SetGameAudioState : FsmStateAction
	{
		[Token(Token = "0x4002D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public GameAudioState state;

		[Token(Token = "0x6002F91")]
		[Address(RVA = "0x13146C4", Offset = "0x13146C4", VA = "0x13146C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F92")]
		[Address(RVA = "0x1314754", Offset = "0x1314754", VA = "0x1314754")]
		public SetGameAudioState()
		{
		}
	}
	[Token(Token = "0x2000989")]
	[ActionCategory("Audio FMOD")]
	public class SetMusicState : FsmStateAction
	{
		[Token(Token = "0x4002D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public MusicState state;

		[Token(Token = "0x6002F93")]
		[Address(RVA = "0x131475C", Offset = "0x131475C", VA = "0x131475C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F94")]
		[Address(RVA = "0x13147EC", Offset = "0x13147EC", VA = "0x13147EC")]
		public SetMusicState()
		{
		}
	}
	[Token(Token = "0x200098A")]
	[ActionCategory("CharacterControllerPRO")]
	public class AddActorForce : ComponentAction<CharacterActorBase>
	{
		[Token(Token = "0x4002D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterActorBase))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 force;

		[Token(Token = "0x4002D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool add;

		[Token(Token = "0x4002D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmBool forceNotGrounded;

		[Token(Token = "0x17000397")]
		private CharacterActorBase characterActor
		{
			[Token(Token = "0x6002F95")]
			[Address(RVA = "0x13147F4", Offset = "0x13147F4", VA = "0x13147F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F96")]
		[Address(RVA = "0x13147FC", Offset = "0x13147FC", VA = "0x13147FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F97")]
		[Address(RVA = "0x1314808", Offset = "0x1314808", VA = "0x1314808", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F98")]
		[Address(RVA = "0x131490C", Offset = "0x131490C", VA = "0x131490C")]
		public AddActorForce()
		{
		}
	}
	[Token(Token = "0x200098B")]
	[ActionCategory("CharacterControllerPRO")]
	public class AddActorRigidbodyForce : ComponentAction<CharacterActorBase>
	{
		[Token(Token = "0x4002D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterActorBase))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 force;

		[Token(Token = "0x4002D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool ignoreMass;

		[Token(Token = "0x4002D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmBool impulse;

		[Token(Token = "0x17000398")]
		private CharacterActorBase characterActor
		{
			[Token(Token = "0x6002F99")]
			[Address(RVA = "0x1314954", Offset = "0x1314954", VA = "0x1314954")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F9A")]
		[Address(RVA = "0x131495C", Offset = "0x131495C", VA = "0x131495C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F9B")]
		[Address(RVA = "0x1314968", Offset = "0x1314968", VA = "0x1314968", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F9C")]
		[Address(RVA = "0x1314A6C", Offset = "0x1314A6C", VA = "0x1314A6C")]
		public AddActorRigidbodyForce()
		{
		}
	}
	[Token(Token = "0x200098C")]
	[ActionCategory("Player")]
	public class ChangeToTouchWaitState : ComponentAction<CharacterStateController>
	{
		[Token(Token = "0x4002D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterStateController))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x17000399")]
		private CharacterStateController stateController
		{
			[Token(Token = "0x6002F9D")]
			[Address(RVA = "0x1314AB4", Offset = "0x1314AB4", VA = "0x1314AB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F9E")]
		[Address(RVA = "0x1314ABC", Offset = "0x1314ABC", VA = "0x1314ABC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002F9F")]
		[Address(RVA = "0x1314AC8", Offset = "0x1314AC8", VA = "0x1314AC8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FA0")]
		[Address(RVA = "0x1314B60", Offset = "0x1314B60", VA = "0x1314B60")]
		public ChangeToTouchWaitState()
		{
		}
	}
	[Token(Token = "0x200098D")]
	[ActionCategory("CharacterControllerPRO")]
	public class CheckActorGrounded : ComponentAction<CharacterActor>
	{
		[Token(Token = "0x4002D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterActor))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmBool onlyfalling;

		[Token(Token = "0x4002D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool ignoreRigidbody;

		[Token(Token = "0x4002D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmBool storeResult;

		[Token(Token = "0x4002D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent yes;

		[Token(Token = "0x4002D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmEvent no;

		[Token(Token = "0x4002D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool everyFrame;

		[Token(Token = "0x1700039A")]
		private CharacterActor characterActor
		{
			[Token(Token = "0x6002FA1")]
			[Address(RVA = "0x1314BA8", Offset = "0x1314BA8", VA = "0x1314BA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FA2")]
		[Address(RVA = "0x1314BB0", Offset = "0x1314BB0", VA = "0x1314BB0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FA3")]
		[Address(RVA = "0x1314BBC", Offset = "0x1314BBC", VA = "0x1314BBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FA4")]
		[Address(RVA = "0x1314D8C", Offset = "0x1314D8C", VA = "0x1314D8C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FA5")]
		[Address(RVA = "0x1314C4C", Offset = "0x1314C4C", VA = "0x1314C4C")]
		private void Check()
		{
		}

		[Token(Token = "0x6002FA6")]
		[Address(RVA = "0x1314D90", Offset = "0x1314D90", VA = "0x1314D90")]
		public CheckActorGrounded()
		{
		}
	}
	[Token(Token = "0x200098E")]
	[ActionCategory("CharacterControllerPRO")]
	public class DebugCharacterControllerState : ComponentAction<CharacterStateController>
	{
		[Token(Token = "0x4002D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterStateController))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool everyFrame;

		[Token(Token = "0x1700039B")]
		private CharacterStateController stateController
		{
			[Token(Token = "0x6002FA7")]
			[Address(RVA = "0x1314DFC", Offset = "0x1314DFC", VA = "0x1314DFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FA8")]
		[Address(RVA = "0x1314E04", Offset = "0x1314E04", VA = "0x1314E04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FA9")]
		[Address(RVA = "0x1314E2C", Offset = "0x1314E2C", VA = "0x1314E2C", Slot = "35")]
		public override void OnGUI()
		{
		}

		[Token(Token = "0x6002FAA")]
		[Address(RVA = "0x1314F70", Offset = "0x1314F70", VA = "0x1314F70")]
		public DebugCharacterControllerState()
		{
		}
	}
	[Token(Token = "0x200098F")]
	[ActionCategory("Player")]
	public class EnableTouchWhenMove : FsmStateAction
	{
		[Token(Token = "0x4002D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool value;

		[Token(Token = "0x6002FAB")]
		[Address(RVA = "0x1314FB8", Offset = "0x1314FB8", VA = "0x1314FB8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FAC")]
		[Address(RVA = "0x1314FC4", Offset = "0x1314FC4", VA = "0x1314FC4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FAD")]
		[Address(RVA = "0x13150C4", Offset = "0x13150C4", VA = "0x13150C4")]
		public EnableTouchWhenMove()
		{
		}
	}
	[Token(Token = "0x2000990")]
	[ActionCategory("CharacterControllerPRO")]
	public class RotateActor : ComponentAction<CharacterActorBase>
	{
		[Token(Token = "0x4002D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Character Actor Base")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 direction;

		[Token(Token = "0x4002DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmGameObject target;

		[Token(Token = "0x4002DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat duration;

		[Token(Token = "0x4002DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmBool inverse;

		[Token(Token = "0x4002DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmBool updateTarget;

		[Token(Token = "0x4002DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool finishOnReach;

		[Token(Token = "0x4002DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float currentRotationTime;

		[Token(Token = "0x4002DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Quaternion startRotation;

		[Token(Token = "0x4002DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Quaternion targetRotation;

		[Token(Token = "0x4002DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float percentageTime;

		[Token(Token = "0x4002DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		protected Vector3 currentDirection;

		[Token(Token = "0x1700039C")]
		protected virtual CharacterActorBase characterActor
		{
			[Token(Token = "0x6002FAE")]
			[Address(RVA = "0x13150CC", Offset = "0x13150CC", VA = "0x13150CC", Slot = "62")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FAF")]
		[Address(RVA = "0x13150D4", Offset = "0x13150D4", VA = "0x13150D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FB0")]
		[Address(RVA = "0x1315160", Offset = "0x1315160", VA = "0x1315160", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FB1")]
		[Address(RVA = "0x13156F4", Offset = "0x13156F4", VA = "0x13156F4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FB2")]
		[Address(RVA = "0x1315634", Offset = "0x1315634", VA = "0x1315634")]
		protected void HandleRotation()
		{
		}

		[Token(Token = "0x6002FB3")]
		[Address(RVA = "0x1315244", Offset = "0x1315244", VA = "0x1315244")]
		protected void SetTarget()
		{
		}

		[Token(Token = "0x6002FB4")]
		[Address(RVA = "0x1315770", Offset = "0x1315770", VA = "0x1315770")]
		public RotateActor()
		{
		}
	}
	[Token(Token = "0x2000991")]
	[ActionCategory("CharacterControllerPRO")]
	public class SetActorRootMotionMultiplier : ComponentAction<CharacterActorBase>
	{
		[Token(Token = "0x4002DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterActorBase))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat multiplier;

		[Token(Token = "0x1700039D")]
		private CharacterActorBase characterActor
		{
			[Token(Token = "0x6002FB5")]
			[Address(RVA = "0x13157B8", Offset = "0x13157B8", VA = "0x13157B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FB6")]
		[Address(RVA = "0x13157C0", Offset = "0x13157C0", VA = "0x13157C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FB7")]
		[Address(RVA = "0x13157F4", Offset = "0x13157F4", VA = "0x13157F4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FB8")]
		[Address(RVA = "0x131588C", Offset = "0x131588C", VA = "0x131588C")]
		public SetActorRootMotionMultiplier()
		{
		}
	}
	[Token(Token = "0x2000992")]
	[ActionCategory("CharacterControllerPRO")]
	public class SetActorVelocity : ComponentAction<CharacterActor>
	{
		[Token(Token = "0x4002DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterActor))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 velocity;

		[Token(Token = "0x4002DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool planar;

		[Token(Token = "0x1700039E")]
		private CharacterActor characterActor
		{
			[Token(Token = "0x6002FB9")]
			[Address(RVA = "0x13158D4", Offset = "0x13158D4", VA = "0x13158D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FBA")]
		[Address(RVA = "0x13158DC", Offset = "0x13158DC", VA = "0x13158DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FBB")]
		[Address(RVA = "0x1315910", Offset = "0x1315910", VA = "0x1315910", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FBC")]
		[Address(RVA = "0x13159CC", Offset = "0x13159CC", VA = "0x13159CC")]
		public SetActorVelocity()
		{
		}
	}
	[Token(Token = "0x2000993")]
	[ActionCategory("CharacterControllerPRO")]
	public class SmoothActorLookAt : ComponentAction<CharacterActorBase>
	{
		[Token(Token = "0x4002DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Character Actor Base")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("A target GameObject.")]
		public FsmGameObject targetObject;

		[Token(Token = "0x4002DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("A world position, or local offset if a Target Object is defined.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4002DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Used to keep the game object generally upright. If left undefined the world y axis is used.")]
		public FsmVector3 upVector;

		[Token(Token = "0x4002DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Force the game object to remain vertical. Useful for characters.")]
		public FsmBool keepVertical;

		[Token(Token = "0x4002DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("How fast the look at moves.")]
		[HasFloatSlider(0.5f, 360f)]
		public FsmFloat speed;

		[Token(Token = "0x4002DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Draw a line in the Scene View to the look at position.")]
		public FsmBool debug;

		[Token(Token = "0x4002DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If the angle to the target is less than this, send the Finish Event below. Measured in degrees.")]
		public FsmFloat finishTolerance;

		[Token(Token = "0x4002DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Event to send if the angle to target is less than the Finish Tolerance.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4002DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject previousGo;

		[Token(Token = "0x4002DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion lastRotation;

		[Token(Token = "0x4002DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion desiredRotation;

		[Token(Token = "0x4002DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lookAtPos;

		[Token(Token = "0x1700039F")]
		protected virtual CharacterActorBase characterActor
		{
			[Token(Token = "0x6002FBE")]
			[Address(RVA = "0x1315B74", Offset = "0x1315B74", VA = "0x1315B74", Slot = "62")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FBD")]
		[Address(RVA = "0x1315A30", Offset = "0x1315A30", VA = "0x1315A30", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FBF")]
		[Address(RVA = "0x1315B7C", Offset = "0x1315B7C", VA = "0x1315B7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FC0")]
		[Address(RVA = "0x1315C08", Offset = "0x1315C08", VA = "0x1315C08", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FC1")]
		[Address(RVA = "0x1315C0C", Offset = "0x1315C0C", VA = "0x1315C0C")]
		private void DoSmoothLookAt()
		{
		}

		[Token(Token = "0x6002FC2")]
		[Address(RVA = "0x1316324", Offset = "0x1316324", VA = "0x1316324")]
		public SmoothActorLookAt()
		{
		}
	}
	[Token(Token = "0x2000994")]
	[ActionCategory("CharacterControllerPRO")]
	public class SnapActorToGround : ComponentAction<CharacterActorBase>
	{
		[Token(Token = "0x4002DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(CharacterActorBase))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x170003A0")]
		private CharacterActorBase characterActor
		{
			[Token(Token = "0x6002FC3")]
			[Address(RVA = "0x131636C", Offset = "0x131636C", VA = "0x131636C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FC4")]
		[Address(RVA = "0x1316374", Offset = "0x1316374", VA = "0x1316374", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FC5")]
		[Address(RVA = "0x1316380", Offset = "0x1316380", VA = "0x1316380", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FC6")]
		[Address(RVA = "0x131640C", Offset = "0x131640C", VA = "0x131640C")]
		public SnapActorToGround()
		{
		}
	}
	[Token(Token = "0x2000995")]
	[ActionCategory("CharacterControllerPRO")]
	public class ToggleActorGravity : ComponentAction<NormalMovement>
	{
		[Token(Token = "0x4002DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(NormalMovement))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmBool gravity;

		[Token(Token = "0x170003A1")]
		private NormalMovement normalMovement
		{
			[Token(Token = "0x6002FC7")]
			[Address(RVA = "0x1316454", Offset = "0x1316454", VA = "0x1316454")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FC8")]
		[Address(RVA = "0x131645C", Offset = "0x131645C", VA = "0x131645C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FC9")]
		[Address(RVA = "0x1316468", Offset = "0x1316468", VA = "0x1316468", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FCA")]
		[Address(RVA = "0x1316504", Offset = "0x1316504", VA = "0x1316504")]
		public ToggleActorGravity()
		{
		}
	}
	[Token(Token = "0x2000996")]
	[ActionCategory("Player")]
	public class UpdateMothTouchState : FsmStateAction
	{
		[Token(Token = "0x4002DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public int state;

		[Token(Token = "0x6002FCB")]
		[Address(RVA = "0x131654C", Offset = "0x131654C", VA = "0x131654C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FCC")]
		[Address(RVA = "0x1316554", Offset = "0x1316554", VA = "0x1316554", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FCD")]
		[Address(RVA = "0x13165EC", Offset = "0x13165EC", VA = "0x13165EC")]
		public UpdateMothTouchState()
		{
		}
	}
	[Token(Token = "0x2000997")]
	[ActionCategory("Combat")]
	public class AddEnemyDuringWave : ComponentAction<EnemyBehaviour>
	{
		[Token(Token = "0x4002DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		public FsmGameObject cloneEnemy;

		[Token(Token = "0x170003A2")]
		protected virtual EnemyBehaviour aiBehaviour
		{
			[Token(Token = "0x6002FCE")]
			[Address(RVA = "0x13165F4", Offset = "0x13165F4", VA = "0x13165F4", Slot = "62")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FCF")]
		[Address(RVA = "0x13165FC", Offset = "0x13165FC", VA = "0x13165FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FD0")]
		[Address(RVA = "0x1316794", Offset = "0x1316794", VA = "0x1316794")]
		public AddEnemyDuringWave()
		{
		}
	}
	[Token(Token = "0x2000998")]
	[ActionCategory("Combat")]
	public class ArenaWave : ComponentAction<ArenaController>, IArenaWave
	{
		[Token(Token = "0x2000999")]
		[CompilerGenerated]
		private sealed class <InitializeEnemyRoutine>d__42 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EnemyPoolSpawnHandler enemyHandler;

			[Token(Token = "0x4002DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ArenaWave <>4__this;

			[Token(Token = "0x170003AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002FED")]
				[Address(RVA = "0x1317D28", Offset = "0x1317D28", VA = "0x1317D28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002FEF")]
				[Address(RVA = "0x1317D70", Offset = "0x1317D70", VA = "0x1317D70", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002FEA")]
			[Address(RVA = "0x131778C", Offset = "0x131778C", VA = "0x131778C")]
			[DebuggerHidden]
			public <InitializeEnemyRoutine>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x6002FEB")]
			[Address(RVA = "0x1317888", Offset = "0x1317888", VA = "0x1317888", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002FEC")]
			[Address(RVA = "0x131788C", Offset = "0x131788C", VA = "0x131788C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002FEE")]
			[Address(RVA = "0x1317D30", Offset = "0x1317D30", VA = "0x1317D30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _resettingWave;

		[Token(Token = "0x4002DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int _enemyCounter;

		[Token(Token = "0x4002DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _listeningToEvents;

		[Token(Token = "0x4002DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[CheckForComponent(typeof(ArenaController))]
		public FsmOwnerDefault ArenaController;

		[Token(Token = "0x4002DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmBool requiredToCompleteArena;

		[Token(Token = "0x4002DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmBool requiredIfWaveStarted;

		[Token(Token = "0x4002DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmEvent onReset;

		[Token(Token = "0x4002DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmEvent onComplete;

		[Token(Token = "0x4002DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public EnemyPoolSpawnHandler[] enemies;

		[Token(Token = "0x170003A3")]
		public ArenaController Arena
		{
			[Token(Token = "0x6002FD1")]
			[Address(RVA = "0x13167DC", Offset = "0x13167DC", VA = "0x13167DC", Slot = "62")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FD2")]
			[Address(RVA = "0x13167E4", Offset = "0x13167E4", VA = "0x13167E4", Slot = "63")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003A4")]
		public List<EnemyBehaviourBase> Enemies_Deprecated
		{
			[Token(Token = "0x6002FD3")]
			[Address(RVA = "0x13167EC", Offset = "0x13167EC", VA = "0x13167EC", Slot = "65")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A5")]
		public bool StartingWave
		{
			[Token(Token = "0x6002FD4")]
			[Address(RVA = "0x131683C", Offset = "0x131683C", VA = "0x131683C", Slot = "66")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A6")]
		public bool Required
		{
			[Token(Token = "0x6002FD5")]
			[Address(RVA = "0x1316844", Offset = "0x1316844", VA = "0x1316844", Slot = "67")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A7")]
		public bool InProgress
		{
			[Token(Token = "0x6002FD6")]
			[Address(RVA = "0x131689C", Offset = "0x131689C", VA = "0x131689C", Slot = "68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002FD7")]
			[Address(RVA = "0x13168A4", Offset = "0x13168A4", VA = "0x13168A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003A8")]
		public bool Completed
		{
			[Token(Token = "0x6002FD8")]
			[Address(RVA = "0x13168B0", Offset = "0x13168B0", VA = "0x13168B0", Slot = "69")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002FD9")]
			[Address(RVA = "0x13168B8", Offset = "0x13168B8", VA = "0x13168B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003A9")]
		public List<EnemyBehaviour> EnemiesEngaged
		{
			[Token(Token = "0x6002FDA")]
			[Address(RVA = "0x13168C4", Offset = "0x13168C4", VA = "0x13168C4", Slot = "64")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FDB")]
			[Address(RVA = "0x13168CC", Offset = "0x13168CC", VA = "0x13168CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002FDC")]
		[Address(RVA = "0x13168D4", Offset = "0x13168D4", VA = "0x13168D4", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6002FDD")]
		[Address(RVA = "0x13169FC", Offset = "0x13169FC", VA = "0x13169FC")]
		private bool AreAllEnemiesDefeated()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FDE")]
		[Address(RVA = "0x1316A28", Offset = "0x1316A28", VA = "0x1316A28")]
		private void OnEnemyDefeated(EnemyBehaviour enemy)
		{
		}

		[Token(Token = "0x6002FDF")]
		[Address(RVA = "0x1316D0C", Offset = "0x1316D0C", VA = "0x1316D0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FE0")]
		[Address(RVA = "0x1317108", Offset = "0x1317108", VA = "0x1317108", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FE1")]
		[Address(RVA = "0x1316D3C", Offset = "0x1316D3C", VA = "0x1316D3C")]
		private void ListenToEvents(bool listen)
		{
		}

		[Token(Token = "0x6002FE2")]
		[Address(RVA = "0x1316AD4", Offset = "0x1316AD4", VA = "0x1316AD4", Slot = "72")]
		public void CompleteWave()
		{
		}

		[Token(Token = "0x6002FE3")]
		[Address(RVA = "0x1317148", Offset = "0x1317148", VA = "0x1317148", Slot = "71")]
		public void ResetWave()
		{
		}

		[Token(Token = "0x6002FE4")]
		[Address(RVA = "0x1316E94", Offset = "0x1316E94", VA = "0x1316E94", Slot = "70")]
		public void StartWave()
		{
		}

		[Token(Token = "0x6002FE5")]
		[Address(RVA = "0x13175D8", Offset = "0x13175D8", VA = "0x13175D8", Slot = "73")]
		public void AddEnemyWhileInProgress(EnemyBehaviour enemy)
		{
		}

		[Token(Token = "0x6002FE6")]
		[Address(RVA = "0x13174D0", Offset = "0x13174D0", VA = "0x13174D0")]
		private void InitializeEnemies()
		{
		}

		[Token(Token = "0x6002FE7")]
		[Address(RVA = "0x13176FC", Offset = "0x13176FC", VA = "0x13176FC")]
		[IteratorStateMachine(typeof(<InitializeEnemyRoutine>d__42))]
		private IEnumerator InitializeEnemyRoutine(EnemyPoolSpawnHandler enemyHandler)
		{
			return null;
		}

		[Token(Token = "0x6002FE8")]
		[Address(RVA = "0x131737C", Offset = "0x131737C", VA = "0x131737C")]
		private void ClearEnemies()
		{
		}

		[Token(Token = "0x6002FE9")]
		[Address(RVA = "0x13177B4", Offset = "0x13177B4", VA = "0x13177B4")]
		public ArenaWave()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200099A")]
	public class EnemyPoolSpawnHandler
	{
		[Token(Token = "0x4002DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EnemyConfig Enemy;

		[Token(Token = "0x4002DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ArenaEnemyPoolSpawner ArenaSpawner;

		[Token(Token = "0x4002DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Delay;

		[Token(Token = "0x6002FF0")]
		[Address(RVA = "0x1317C48", Offset = "0x1317C48", VA = "0x1317C48")]
		public EnemyBehaviour SpawnEnemy()
		{
			return null;
		}

		[Token(Token = "0x6002FF1")]
		[Address(RVA = "0x1317B7C", Offset = "0x1317B7C", VA = "0x1317B7C")]
		public void PrepareSpawn()
		{
		}

		[Token(Token = "0x6002FF2")]
		[Address(RVA = "0x1317D78", Offset = "0x1317D78", VA = "0x1317D78")]
		public EnemyPoolSpawnHandler()
		{
		}
	}
	[Token(Token = "0x200099B")]
	[Tooltip("Gets a Moth's Transform and stores it in an Object Variable.")]
	public class BossStageCompletedActionEvent : FsmStateAction
	{
		[Token(Token = "0x6002FF3")]
		[Address(RVA = "0x1317D80", Offset = "0x1317D80", VA = "0x1317D80", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FF4")]
		[Address(RVA = "0x1317DE4", Offset = "0x1317DE4", VA = "0x1317DE4")]
		public BossStageCompletedActionEvent()
		{
		}
	}
	[Token(Token = "0x200099C")]
	[ActionCategory("Combat")]
	[Tooltip("Saves List of Enemies engaged in combat with player.")]
	public class FindClosestEnemyWithDirection : FindClosestTargetWithDirection
	{
		[Token(Token = "0x4002DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmBool onlyEngagedEnemies;

		[Token(Token = "0x4002DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmGameObject owner;

		[Token(Token = "0x6002FF5")]
		[Address(RVA = "0x1317DEC", Offset = "0x1317DEC", VA = "0x1317DEC", Slot = "62")]
		protected override bool TryFindTarget(out GameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x6002FF6")]
		[Address(RVA = "0x13184F8", Offset = "0x13184F8", VA = "0x13184F8")]
		public FindClosestEnemyWithDirection()
		{
		}
	}
	[Token(Token = "0x200099D")]
	[ActionCategory("Combat")]
	[Tooltip("Saves List of Enemies engaged in combat with player.")]
	public class FindClosestTargetWithDirection : FsmStateAction
	{
		[Token(Token = "0x4002DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Direction from which we search from (Forward Vector from GO Transform)")]
		[RequiredField]
		public FsmGameObject targetDirection;

		[Token(Token = "0x4002DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Custom targets to search through")]
		[ArrayEditor(VariableType.GameObject, "", 0, 0, 65536)]
		public FsmArray targets;

		[Token(Token = "0x4002DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmGameObject storeValue;

		[Token(Token = "0x4002DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x4002DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ActionSection("Conditions")]
		public FsmFloat maxDetectionAngle;

		[Token(Token = "0x4002DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat maxDetectionDistance;

		[Token(Token = "0x4002DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ActionSection("Events")]
		public FsmEvent targetFound;

		[Token(Token = "0x4002DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent noTargetFound;

		[Token(Token = "0x6002FF7")]
		[Address(RVA = "0x131857C", Offset = "0x131857C", VA = "0x131857C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FF8")]
		[Address(RVA = "0x13185CC", Offset = "0x13185CC", VA = "0x13185CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FF9")]
		[Address(RVA = "0x1318654", Offset = "0x1318654", VA = "0x1318654", Slot = "62")]
		protected virtual bool TryFindTarget(out GameObject target)
		{
			return default(bool);
		}

		[Token(Token = "0x6002FFA")]
		[Address(RVA = "0x1318A54", Offset = "0x1318A54", VA = "0x1318A54", Slot = "63")]
		protected virtual bool IsTransfromDetectable(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6002FFB")]
		[Address(RVA = "0x1318D7C", Offset = "0x1318D7C", VA = "0x1318D7C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FFC")]
		[Address(RVA = "0x1318528", Offset = "0x1318528", VA = "0x1318528")]
		public FindClosestTargetWithDirection()
		{
		}
	}
	[Token(Token = "0x200099E")]
	[Tooltip("Gets a Moth's Transform and stores it in an Object Variable.")]
	public class GoatBossGetChargeHelper : FsmStateAction
	{
		[Token(Token = "0x4002DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(GoatBossChargeHelper))]
		[Tooltip("Store the GameObject's Transform in an Object variable of type UnityEngine.Transform.")]
		public FsmObject storeValue;

		[Token(Token = "0x4002DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ActionSection("Events")]
		public FsmEvent componentFound;

		[Token(Token = "0x4002DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent noComponentFound;

		[Token(Token = "0x6002FFD")]
		[Address(RVA = "0x1318DFC", Offset = "0x1318DFC", VA = "0x1318DFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FFE")]
		[Address(RVA = "0x1318E08", Offset = "0x1318E08", VA = "0x1318E08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FFF")]
		[Address(RVA = "0x1318ED0", Offset = "0x1318ED0", VA = "0x1318ED0")]
		public GoatBossGetChargeHelper()
		{
		}
	}
	[Token(Token = "0x200099F")]
	[ActionCategory("Damageable")]
	public class AddHealth : ComponentAction<Damageable>
	{
		[Token(Token = "0x4002DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Damageable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmInt value;

		[Token(Token = "0x170003AC")]
		private Damageable damageable
		{
			[Token(Token = "0x6003000")]
			[Address(RVA = "0x1318ED8", Offset = "0x1318ED8", VA = "0x1318ED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003001")]
		[Address(RVA = "0x1318EE0", Offset = "0x1318EE0", VA = "0x1318EE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003002")]
		[Address(RVA = "0x1318EEC", Offset = "0x1318EEC", VA = "0x1318EEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003003")]
		[Address(RVA = "0x1318F88", Offset = "0x1318F88", VA = "0x1318F88")]
		public AddHealth()
		{
		}
	}
	[Token(Token = "0x20009A0")]
	[ActionCategory("Damageable")]
	public class GetDamageableInfo : ComponentAction<EnemyBehaviour>
	{
		[Token(Token = "0x4002DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(EnemyBehaviour))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject damager;

		[Token(Token = "0x4002DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		public FsmInt amount;

		[Token(Token = "0x4002DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 direction;

		[Token(Token = "0x4002DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 damageSource;

		[Token(Token = "0x4002DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UIHint(UIHint.Variable)]
		public FsmVector3 damagePoint;

		[Token(Token = "0x4002DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UIHint(UIHint.Variable)]
		public FsmBool throwing;

		[Token(Token = "0x4002DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Variable)]
		public FsmFloat pushForce;

		[Token(Token = "0x4002DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UIHint(UIHint.Variable)]
		public FsmInt attackType;

		[Token(Token = "0x4002DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UIHint(UIHint.Variable)]
		public FsmBool additiveAnimation;

		[Token(Token = "0x4002DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UIHint(UIHint.Variable)]
		public FsmBool stopCamera;

		[Token(Token = "0x4002DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UIHint(UIHint.Variable)]
		public FsmString attackName;

		[Token(Token = "0x4002DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UIHint(UIHint.Variable)]
		public FsmString attackParameterName;

		[Token(Token = "0x4002DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[UIHint(UIHint.Variable)]
		public FsmInt attackParameterIndex;

		[Token(Token = "0x170003AD")]
		private EnemyBehaviour enemyBehaviour
		{
			[Token(Token = "0x6003004")]
			[Address(RVA = "0x1318FD0", Offset = "0x1318FD0", VA = "0x1318FD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003005")]
		[Address(RVA = "0x1318FD8", Offset = "0x1318FD8", VA = "0x1318FD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003006")]
		[Address(RVA = "0x13190C0", Offset = "0x13190C0", VA = "0x13190C0")]
		private void StoreHitInfo()
		{
		}

		[Token(Token = "0x6003007")]
		[Address(RVA = "0x13192F8", Offset = "0x13192F8", VA = "0x13192F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003008")]
		[Address(RVA = "0x1319374", Offset = "0x1319374", VA = "0x1319374")]
		public GetDamageableInfo()
		{
		}
	}
	[Token(Token = "0x20009A1")]
	[ActionCategory("Damageable")]
	public class Kill : ComponentAction<Damageable>
	{
		[Token(Token = "0x4002DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Damageable))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool checkAlive;

		[Token(Token = "0x170003AE")]
		private Damageable damageable
		{
			[Token(Token = "0x6003009")]
			[Address(RVA = "0x13193BC", Offset = "0x13193BC", VA = "0x13193BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600300A")]
		[Address(RVA = "0x13193C4", Offset = "0x13193C4", VA = "0x13193C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600300B")]
		[Address(RVA = "0x13193D0", Offset = "0x13193D0", VA = "0x13193D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600300C")]
		[Address(RVA = "0x1319474", Offset = "0x1319474", VA = "0x1319474")]
		public Kill()
		{
		}
	}
	[Token(Token = "0x20009A2")]
	[ActionCategory("Damageable")]
	public class SetArmor : ComponentAction<Damageable>
	{
		[Token(Token = "0x4002DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Damageable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool add;

		[Token(Token = "0x4002DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat value;

		[Token(Token = "0x170003AF")]
		private Damageable damageable
		{
			[Token(Token = "0x600300D")]
			[Address(RVA = "0x13194BC", Offset = "0x13194BC", VA = "0x13194BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600300E")]
		[Address(RVA = "0x13194C4", Offset = "0x13194C4", VA = "0x13194C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600300F")]
		[Address(RVA = "0x13194D0", Offset = "0x13194D0", VA = "0x13194D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003010")]
		[Address(RVA = "0x1319580", Offset = "0x1319580", VA = "0x1319580")]
		public SetArmor()
		{
		}
	}
	[Token(Token = "0x20009A3")]
	[ActionCategory("Damageable")]
	public class SetInvulnerable : ComponentAction<Damageable>
	{
		[Token(Token = "0x4002DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Damageable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmBool value;

		[Token(Token = "0x4002DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat duration;

		[Token(Token = "0x170003B0")]
		private Damageable damageable
		{
			[Token(Token = "0x6003011")]
			[Address(RVA = "0x13195D0", Offset = "0x13195D0", VA = "0x13195D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003012")]
		[Address(RVA = "0x13195D8", Offset = "0x13195D8", VA = "0x13195D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003013")]
		[Address(RVA = "0x13195E4", Offset = "0x13195E4", VA = "0x13195E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003014")]
		[Address(RVA = "0x1319694", Offset = "0x1319694", VA = "0x1319694")]
		public SetInvulnerable()
		{
		}
	}
	[Token(Token = "0x20009A4")]
	[ActionCategory("Damageable")]
	public class TakeDamage : ComponentAction<Damageable>
	{
		[Token(Token = "0x4002DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(Damageable))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmInt amount;

		[Token(Token = "0x4002DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat force;

		[Token(Token = "0x4002DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmGameObject damageSource;

		[Token(Token = "0x4002DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmInt attackType;

		[Token(Token = "0x170003B1")]
		private Damageable damageable
		{
			[Token(Token = "0x6003015")]
			[Address(RVA = "0x13196DC", Offset = "0x13196DC", VA = "0x13196DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003016")]
		[Address(RVA = "0x13196E4", Offset = "0x13196E4", VA = "0x13196E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003017")]
		[Address(RVA = "0x13196F0", Offset = "0x13196F0", VA = "0x13196F0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003018")]
		[Address(RVA = "0x131997C", Offset = "0x131997C", VA = "0x131997C")]
		public TakeDamage()
		{
		}
	}
	[Token(Token = "0x20009A5")]
	[Tooltip("Casts a Sphere into the worldspace and returns an array of the hit colliders")]
	[ActionCategory(ActionCategory.Physics)]
	public class TakeDamageInRadius : FsmStateAction
	{
		[Token(Token = "0x4002E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector3 world position. \nOr use Game Object parameter.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4002E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius of the sphere")]
		public FsmFloat radius;

		[Token(Token = "0x4002E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.LayerMask)]
		public FsmInt layerMask;

		[Token(Token = "0x4002E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool everyFrame;

		[Token(Token = "0x4002E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Damage")]
		public FsmInt amount;

		[Token(Token = "0x4002E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat force;

		[Token(Token = "0x4002E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmGameObject damageSource;

		[Token(Token = "0x6003019")]
		[Address(RVA = "0x13199E0", Offset = "0x13199E0", VA = "0x13199E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600301A")]
		[Address(RVA = "0x1319A98", Offset = "0x1319A98", VA = "0x1319A98", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600301B")]
		[Address(RVA = "0x1319E2C", Offset = "0x1319E2C", VA = "0x1319E2C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600301C")]
		[Address(RVA = "0x1319AC4", Offset = "0x1319AC4", VA = "0x1319AC4")]
		private void DoOverlapSphere()
		{
		}

		[Token(Token = "0x600301D")]
		[Address(RVA = "0x1319E30", Offset = "0x1319E30", VA = "0x1319E30", Slot = "39")]
		public override void OnDrawActionGizmosSelected()
		{
		}

		[Token(Token = "0x600301E")]
		[Address(RVA = "0x1319EB8", Offset = "0x1319EB8", VA = "0x1319EB8")]
		public TakeDamageInRadius()
		{
		}
	}
	[Token(Token = "0x20009A6")]
	[ActionCategory("Damageable")]
	public class TestHitPoints : ComponentAction<Damageable>
	{
		[Token(Token = "0x4002E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Damageable))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmInt hitPoints;

		[Token(Token = "0x4002E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent equal;

		[Token(Token = "0x4002E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent notEqual;

		[Token(Token = "0x4002E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent greater;

		[Token(Token = "0x4002E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmEvent less;

		[Token(Token = "0x4002E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmEvent equalOrGreater;

		[Token(Token = "0x4002E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmEvent equalOrLess;

		[Token(Token = "0x4002E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public FsmBool storeEqual;

		[Token(Token = "0x4002E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public FsmBool storeNotEqual;

		[Token(Token = "0x4002E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FsmBool storeGreater;

		[Token(Token = "0x4002E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public FsmBool storeLess;

		[Token(Token = "0x4002E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public FsmBool storeEqualOrGreater;

		[Token(Token = "0x4002E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public FsmBool storeEqualOrLess;

		[Token(Token = "0x4002E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool everyFrame;

		[Token(Token = "0x170003B2")]
		private Damageable damageable
		{
			[Token(Token = "0x600301F")]
			[Address(RVA = "0x1319EC0", Offset = "0x1319EC0", VA = "0x1319EC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003020")]
		[Address(RVA = "0x1319EC8", Offset = "0x1319EC8", VA = "0x1319EC8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003021")]
		[Address(RVA = "0x1319ED4", Offset = "0x1319ED4", VA = "0x1319ED4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003022")]
		[Address(RVA = "0x131A138", Offset = "0x131A138", VA = "0x131A138", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003023")]
		[Address(RVA = "0x1319F64", Offset = "0x1319F64", VA = "0x1319F64")]
		private void Test()
		{
		}

		[Token(Token = "0x6003024")]
		[Address(RVA = "0x131A154", Offset = "0x131A154", VA = "0x131A154")]
		public TestHitPoints()
		{
		}
	}
	[Token(Token = "0x20009A7")]
	[ActionCategory(ActionCategory.Effects)]
	public class Dissolve : ComponentAction<DissolveEffect>
	{
		[Token(Token = "0x4002E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat startValue;

		[Token(Token = "0x4002E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat endValue;

		[Token(Token = "0x4002E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat duration;

		[Token(Token = "0x4002E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool waitForEnd;

		[Token(Token = "0x4002E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float currentTime;

		[Token(Token = "0x170003B3")]
		private DissolveEffect dissolveEffect
		{
			[Token(Token = "0x6003025")]
			[Address(RVA = "0x131A19C", Offset = "0x131A19C", VA = "0x131A19C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003026")]
		[Address(RVA = "0x131A1A4", Offset = "0x131A1A4", VA = "0x131A1A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003027")]
		[Address(RVA = "0x131A1C8", Offset = "0x131A1C8", VA = "0x131A1C8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003028")]
		[Address(RVA = "0x131A2C0", Offset = "0x131A2C0", VA = "0x131A2C0", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003029")]
		[Address(RVA = "0x131A2B8", Offset = "0x131A2B8", VA = "0x131A2B8")]
		private void OnDissolveCompleted()
		{
		}

		[Token(Token = "0x600302A")]
		[Address(RVA = "0x131A324", Offset = "0x131A324", VA = "0x131A324")]
		public Dissolve()
		{
		}
	}
	[Token(Token = "0x20009A8")]
	[ActionCategory("Effects")]
	public class ProjectAnticipationIndicator : FsmStateAction
	{
		[Token(Token = "0x4002E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmGameObject prefab;

		[Token(Token = "0x4002E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmGameObject target;

		[Token(Token = "0x4002E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Layer)]
		public FsmInt[] layerMask;

		[Token(Token = "0x4002E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmFloat duration;

		[Token(Token = "0x4002E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat scale;

		[Token(Token = "0x4002E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmVector3 position;

		[Token(Token = "0x4002E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmQuaternion rotation;

		[Token(Token = "0x600302B")]
		[Address(RVA = "0x131A36C", Offset = "0x131A36C", VA = "0x131A36C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600302C")]
		[Address(RVA = "0x131A480", Offset = "0x131A480", VA = "0x131A480", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600302D")]
		[Address(RVA = "0x131A848", Offset = "0x131A848", VA = "0x131A848")]
		public ProjectAnticipationIndicator()
		{
		}
	}
	[Token(Token = "0x20009A9")]
	[ActionCategory("Enemy")]
	public class AddAlchemyDamageModification : ComponentAction<DamageModificationReceiver>
	{
		[Token(Token = "0x4002E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(DamageModificationReceiver))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ObjectType(typeof(ModificationScriptableObject))]
		public FsmObject modification;

		[Token(Token = "0x170003B4")]
		private DamageModificationReceiver receiver
		{
			[Token(Token = "0x600302E")]
			[Address(RVA = "0x131A87C", Offset = "0x131A87C", VA = "0x131A87C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600302F")]
		[Address(RVA = "0x131A884", Offset = "0x131A884", VA = "0x131A884", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003030")]
		[Address(RVA = "0x131A890", Offset = "0x131A890", VA = "0x131A890", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003031")]
		[Address(RVA = "0x131AA0C", Offset = "0x131AA0C", VA = "0x131AA0C")]
		public AddAlchemyDamageModification()
		{
		}
	}
	[Token(Token = "0x20009AA")]
	[ActionCategory("Enemies")]
	public class ChangeToFlyingMovement : ComponentAction<CharacterStateController>
	{
		[Token(Token = "0x4002E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterStateController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x170003B5")]
		private CharacterStateController stateController
		{
			[Token(Token = "0x6003032")]
			[Address(RVA = "0x131AA54", Offset = "0x131AA54", VA = "0x131AA54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003033")]
		[Address(RVA = "0x131AA5C", Offset = "0x131AA5C", VA = "0x131AA5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003034")]
		[Address(RVA = "0x131AA68", Offset = "0x131AA68", VA = "0x131AA68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003035")]
		[Address(RVA = "0x131AB00", Offset = "0x131AB00", VA = "0x131AB00")]
		public ChangeToFlyingMovement()
		{
		}
	}
	[Token(Token = "0x20009AB")]
	[ActionCategory("Enemies")]
	public class ChangeToNormalMovement : ComponentAction<CharacterStateController>
	{
		[Token(Token = "0x4002E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterStateController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x170003B6")]
		private CharacterStateController stateController
		{
			[Token(Token = "0x6003036")]
			[Address(RVA = "0x131AB48", Offset = "0x131AB48", VA = "0x131AB48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003037")]
		[Address(RVA = "0x131AB50", Offset = "0x131AB50", VA = "0x131AB50", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003038")]
		[Address(RVA = "0x131AB5C", Offset = "0x131AB5C", VA = "0x131AB5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003039")]
		[Address(RVA = "0x131ABF4", Offset = "0x131ABF4", VA = "0x131ABF4")]
		public ChangeToNormalMovement()
		{
		}
	}
	[Token(Token = "0x20009AC")]
	[ActionCategory("Enemies")]
	public class ChangeToRootMotionMovement : ComponentAction<CharacterStateController>
	{
		[Token(Token = "0x4002E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterStateController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool updatePosition;

		[Token(Token = "0x4002E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool updateRotation;

		[Token(Token = "0x4002E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public PhysicsActor.RootMotionVelocityType velocityType;

		[Token(Token = "0x4002E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public PhysicsActor.RootMotionRotationType rotationType;

		[Token(Token = "0x170003B7")]
		private CharacterStateController stateController
		{
			[Token(Token = "0x600303A")]
			[Address(RVA = "0x131AC3C", Offset = "0x131AC3C", VA = "0x131AC3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600303B")]
		[Address(RVA = "0x131AC44", Offset = "0x131AC44", VA = "0x131AC44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600303C")]
		[Address(RVA = "0x131AC50", Offset = "0x131AC50", VA = "0x131AC50", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600303D")]
		[Address(RVA = "0x131AD3C", Offset = "0x131AD3C", VA = "0x131AD3C")]
		public ChangeToRootMotionMovement()
		{
		}
	}
	[Token(Token = "0x20009AD")]
	[ActionCategory("Enemies")]
	public class ChangeToStationaryMovement : ComponentAction<CharacterStateController>
	{
		[Token(Token = "0x4002E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(CharacterStateController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x170003B8")]
		private CharacterStateController stateController
		{
			[Token(Token = "0x600303E")]
			[Address(RVA = "0x131AD90", Offset = "0x131AD90", VA = "0x131AD90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600303F")]
		[Address(RVA = "0x131AD98", Offset = "0x131AD98", VA = "0x131AD98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003040")]
		[Address(RVA = "0x131ADA4", Offset = "0x131ADA4", VA = "0x131ADA4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003041")]
		[Address(RVA = "0x131AE3C", Offset = "0x131AE3C", VA = "0x131AE3C")]
		public ChangeToStationaryMovement()
		{
		}
	}
	[Token(Token = "0x20009AE")]
	[ActionCategory("Enemies")]
	public class CheckTargetDistance : ComponentAction<Transform>
	{
		[Token(Token = "0x4002E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat detectionRadius;

		[Token(Token = "0x4002E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool flat;

		[Token(Token = "0x4002E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmEvent inDistanceEvent;

		[Token(Token = "0x4002E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmEvent outDistanceEvent;

		[Token(Token = "0x4002E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmFloat storeDistance;

		[Token(Token = "0x4002E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmBool storeResult;

		[Token(Token = "0x4002E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool everyFrame;

		[Token(Token = "0x4002E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform targetTransform;

		[Token(Token = "0x170003B9")]
		private Transform trans
		{
			[Token(Token = "0x6003042")]
			[Address(RVA = "0x131AE84", Offset = "0x131AE84", VA = "0x131AE84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003043")]
		[Address(RVA = "0x131AE8C", Offset = "0x131AE8C", VA = "0x131AE8C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003044")]
		[Address(RVA = "0x131AEB8", Offset = "0x131AEB8", VA = "0x131AEB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003045")]
		[Address(RVA = "0x131B17C", Offset = "0x131B17C", VA = "0x131B17C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003046")]
		[Address(RVA = "0x131AF48", Offset = "0x131AF48", VA = "0x131AF48")]
		private void CheckDistance()
		{
		}

		[Token(Token = "0x6003047")]
		[Address(RVA = "0x131B180", Offset = "0x131B180", VA = "0x131B180")]
		public CheckTargetDistance()
		{
		}
	}
	[Token(Token = "0x20009AF")]
	[ActionCategory("Enemies")]
	public class DetectTarget : ComponentAction<EnemyBehaviour>
	{
		[Token(Token = "0x4002E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(EnemyBehaviour))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool useHeightDifference;

		[Token(Token = "0x4002E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmBool checkNavmesh;

		[Token(Token = "0x4002E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat radius;

		[Token(Token = "0x4002E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmBool projectToNavmesh;

		[Token(Token = "0x4002E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmEvent yes;

		[Token(Token = "0x4002E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmEvent no;

		[Token(Token = "0x4002E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool everyFrame;

		[Token(Token = "0x170003BA")]
		private EnemyBehaviour enemyBehaviour
		{
			[Token(Token = "0x6003048")]
			[Address(RVA = "0x131B1F0", Offset = "0x131B1F0", VA = "0x131B1F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003049")]
		[Address(RVA = "0x131B1F8", Offset = "0x131B1F8", VA = "0x131B1F8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600304A")]
		[Address(RVA = "0x131B284", Offset = "0x131B284", VA = "0x131B284", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600304B")]
		[Address(RVA = "0x131B4B4", Offset = "0x131B4B4", VA = "0x131B4B4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600304C")]
		[Address(RVA = "0x131B314", Offset = "0x131B314", VA = "0x131B314")]
		private void Detect()
		{
		}

		[Token(Token = "0x600304D")]
		[Address(RVA = "0x131B4B8", Offset = "0x131B4B8", VA = "0x131B4B8")]
		public DetectTarget()
		{
		}
	}
	[Token(Token = "0x20009B0")]
	[ActionCategory(ActionCategory.GameObject)]
	public abstract class FindClosestBase : FsmStateAction
	{
		[Token(Token = "0x4002E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject to measure from.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmGameObject origin;

		[Token(Token = "0x4002E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If checked, ignores the object that owns this FSM.")]
		public FsmBool ignoreOwner;

		[Token(Token = "0x4002E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Only consider objects visible to the camera.")]
		public FsmBool mustBeVisible;

		[Token(Token = "0x4002E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the closest object.")]
		[UIHint(UIHint.Variable)]
		public FsmGameObject storeObject;

		[Token(Token = "0x4002E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Store the distance to the closest object.")]
		[UIHint(UIHint.Variable)]
		public FsmFloat storeDistance;

		[Token(Token = "0x4002E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame")]
		public bool everyFrame;

		[Token(Token = "0x600304E")]
		[Address(RVA = "0x131B57C", Offset = "0x131B57C", VA = "0x131B57C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600304F")]
		[Address(RVA = "0x131B600", Offset = "0x131B600", VA = "0x131B600", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003050")]
		[Address(RVA = "0x131B638", Offset = "0x131B638", VA = "0x131B638", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003051")]
		protected abstract void DoFindClosest();

		[Token(Token = "0x6003052")]
		[Address(RVA = "0x131B648", Offset = "0x131B648", VA = "0x131B648")]
		protected FindClosestBase()
		{
		}
	}
	[Token(Token = "0x20009B1")]
	[ActionCategory(ActionCategory.GameObject)]
	public class FindClosestBouncerTarger : FindClosestBase
	{
		[Token(Token = "0x4002E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat radius;

		[Token(Token = "0x4002E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string tag;

		[Token(Token = "0x4002E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public QueryTriggerInteraction triggerInteraction;

		[Token(Token = "0x4002E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UIHint(UIHint.Layer)]
		[Tooltip("Pick only from these layers.")]
		public FsmInt[] layerMask;

		[Token(Token = "0x4002E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public FsmEvent yes;

		[Token(Token = "0x4002E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public FsmEvent no;

		[Token(Token = "0x4002E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FsmFloat leashDistance;

		[Token(Token = "0x4002E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool checkNavmesh;

		[Token(Token = "0x4002E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected NavMeshPath navMeshPath;

		[Token(Token = "0x6003053")]
		[Address(RVA = "0x131B650", Offset = "0x131B650", VA = "0x131B650", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003054")]
		[Address(RVA = "0x131B6C0", Offset = "0x131B6C0", VA = "0x131B6C0", Slot = "62")]
		protected override void DoFindClosest()
		{
		}

		[Token(Token = "0x6003055")]
		[Address(RVA = "0x131BBEC", Offset = "0x131BBEC", VA = "0x131BBEC")]
		public FindClosestBouncerTarger()
		{
		}
	}
	[Token(Token = "0x20009B2")]
	[ActionCategory(ActionCategory.GameObject)]
	public class FindClosestEnemy : FindClosestBase
	{
		[Token(Token = "0x4002E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool onlyInCombat;

		[Token(Token = "0x6003056")]
		[Address(RVA = "0x131BBFC", Offset = "0x131BBFC", VA = "0x131BBFC", Slot = "62")]
		protected override void DoFindClosest()
		{
		}

		[Token(Token = "0x6003057")]
		[Address(RVA = "0x131BE80", Offset = "0x131BE80", VA = "0x131BE80")]
		public FindClosestEnemy()
		{
		}
	}
	[Token(Token = "0x20009B3")]
	[ActionCategory(ActionCategory.GameObject)]
	public class FindClosestEnemyWithRadius : FindClosestEnemy
	{
		[Token(Token = "0x4002E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat radius;

		[Token(Token = "0x4002E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool checkNavmesh;

		[Token(Token = "0x4002E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FsmInt agentType;

		[Token(Token = "0x4002E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected NavMeshPath navMeshPath;

		[Token(Token = "0x6003058")]
		[Address(RVA = "0x131BE90", Offset = "0x131BE90", VA = "0x131BE90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003059")]
		[Address(RVA = "0x131BED8", Offset = "0x131BED8", VA = "0x131BED8", Slot = "62")]
		protected override void DoFindClosest()
		{
		}

		[Token(Token = "0x600305A")]
		[Address(RVA = "0x131C2F4", Offset = "0x131C2F4", VA = "0x131C2F4")]
		public FindClosestEnemyWithRadius()
		{
		}
	}
	[Token(Token = "0x20009B4")]
	[ActionCategory(ActionCategory.GameObject)]
	public class FindClosestResource : FindClosestBase
	{
		[Token(Token = "0x4002E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat leashDistance;

		[Token(Token = "0x4002E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool checkNavmesh;

		[Token(Token = "0x4002E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected NavMeshPath navMeshPath;

		[Token(Token = "0x600305B")]
		[Address(RVA = "0x131C308", Offset = "0x131C308", VA = "0x131C308", Slot = "62")]
		protected override void DoFindClosest()
		{
		}

		[Token(Token = "0x600305C")]
		[Address(RVA = "0x131C984", Offset = "0x131C984", VA = "0x131C984")]
		public FindClosestResource()
		{
		}
	}
	[Token(Token = "0x20009B5")]
	[ActionCategory(ActionCategory.GameObject)]
	public class FindClosestZombieController : FindClosestBase
	{
		[Token(Token = "0x600305D")]
		[Address(RVA = "0x131C994", Offset = "0x131C994", VA = "0x131C994", Slot = "62")]
		protected override void DoFindClosest()
		{
		}

		[Token(Token = "0x600305E")]
		[Address(RVA = "0x131CD24", Offset = "0x131CD24", VA = "0x131CD24")]
		public FindClosestZombieController()
		{
		}
	}
	[Token(Token = "0x20009B6")]
	[ActionCategory("Enemies")]
	public class FindNearestResource : FsmStateAction
	{
		[Token(Token = "0x4002E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmGameObject storeObject;

		[Token(Token = "0x4002E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(Transform))]
		public FsmObject referenceBehaviour;

		[Token(Token = "0x4002E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool everyFrame;

		[Token(Token = "0x4002E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private XRCollectableResourceGroup[] resources;

		[Token(Token = "0x4002E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private XRCharacter player;

		[Token(Token = "0x600305F")]
		[Address(RVA = "0x131CD2C", Offset = "0x131CD2C", VA = "0x131CD2C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003060")]
		[Address(RVA = "0x131D020", Offset = "0x131D020", VA = "0x131D020", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003061")]
		[Address(RVA = "0x131CE28", Offset = "0x131CE28", VA = "0x131CE28")]
		private void Find()
		{
		}

		[Token(Token = "0x6003062")]
		[Address(RVA = "0x131D024", Offset = "0x131D024", VA = "0x131D024")]
		public FindNearestResource()
		{
		}
	}
	[Token(Token = "0x20009B7")]
	[ActionCategory("Enemies")]
	public class OctopusBossAction : ComponentAction<OctopusBossController>
	{
		[Token(Token = "0x4002E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(OctopusBossController))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Event to send after completed attack.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4002E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Attack Actions")]
		public FsmFloat initialDelay;

		[Token(Token = "0x4002E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OctopusBossActionData[] actions;

		[Token(Token = "0x4002E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float actionTime;

		[Token(Token = "0x4002E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float timer;

		[Token(Token = "0x170003BB")]
		private OctopusBossController OctopusBoss
		{
			[Token(Token = "0x6003063")]
			[Address(RVA = "0x131D02C", Offset = "0x131D02C", VA = "0x131D02C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003064")]
		[Address(RVA = "0x131D034", Offset = "0x131D034", VA = "0x131D034", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003065")]
		[Address(RVA = "0x131D040", Offset = "0x131D040", VA = "0x131D040", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003066")]
		[Address(RVA = "0x131D144", Offset = "0x131D144", VA = "0x131D144", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003067")]
		[Address(RVA = "0x131D1AC", Offset = "0x131D1AC", VA = "0x131D1AC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003068")]
		[Address(RVA = "0x131D1D8", Offset = "0x131D1D8", VA = "0x131D1D8")]
		public OctopusBossAction()
		{
		}
	}
	[Token(Token = "0x20009B8")]
	[ActionCategory("Enemies")]
	public class RegisterFollower : ComponentAction<EnemyBehaviour>
	{
		[Token(Token = "0x4002E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(EnemyBehaviour))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool resetOnExit;

		[Token(Token = "0x170003BC")]
		private EnemyBehaviour enemyBehaviour
		{
			[Token(Token = "0x6003069")]
			[Address(RVA = "0x131D23C", Offset = "0x131D23C", VA = "0x131D23C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600306A")]
		[Address(RVA = "0x131D244", Offset = "0x131D244", VA = "0x131D244", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600306B")]
		[Address(RVA = "0x131D278", Offset = "0x131D278", VA = "0x131D278", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600306C")]
		[Address(RVA = "0x131D430", Offset = "0x131D430", VA = "0x131D430", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600306D")]
		[Address(RVA = "0x131D344", Offset = "0x131D344", VA = "0x131D344")]
		private void Register()
		{
		}

		[Token(Token = "0x600306E")]
		[Address(RVA = "0x131D464", Offset = "0x131D464", VA = "0x131D464")]
		private void Unregister()
		{
		}

		[Token(Token = "0x600306F")]
		[Address(RVA = "0x131D4B8", Offset = "0x131D4B8", VA = "0x131D4B8")]
		public RegisterFollower()
		{
		}
	}
	[Token(Token = "0x20009B9")]
	[ActionCategory("Enemies")]
	public class ReplaceWithRagdoll : FsmStateAction
	{
		[Token(Token = "0x4002E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmGameObject ragdollBehaviour;

		[Token(Token = "0x4002E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmGameObject enemyBehaviour;

		[Token(Token = "0x4002E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ObjectType(typeof(Transform))]
		public FsmObject referenceBehaviour;

		[Token(Token = "0x4002E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmFloat forceMultipier;

		[Token(Token = "0x6003070")]
		[Address(RVA = "0x131D500", Offset = "0x131D500", VA = "0x131D500", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003071")]
		[Address(RVA = "0x131DC00", Offset = "0x131DC00", VA = "0x131DC00")]
		public ReplaceWithRagdoll()
		{
		}
	}
	[Token(Token = "0x20009BA")]
	[ActionCategory("Enemies")]
	public class RequestTargetPosition : ComponentAction<EnemyBehaviour>
	{
		[Token(Token = "0x4002E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(EnemyBehaviour))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmFloat distance;

		[Token(Token = "0x4002E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool everyFrame;

		[Token(Token = "0x4002E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform enemyTransform;

		[Token(Token = "0x4002E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform targetTransform;

		[Token(Token = "0x170003BD")]
		private EnemyBehaviour enemyBehaviour
		{
			[Token(Token = "0x6003072")]
			[Address(RVA = "0x131DC34", Offset = "0x131DC34", VA = "0x131DC34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003073")]
		[Address(RVA = "0x131DC3C", Offset = "0x131DC3C", VA = "0x131DC3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003074")]
		[Address(RVA = "0x131DC48", Offset = "0x131DC48", VA = "0x131DC48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003075")]
		[Address(RVA = "0x131E008", Offset = "0x131E008", VA = "0x131E008", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003076")]
		[Address(RVA = "0x131E024", Offset = "0x131E024", VA = "0x131E024", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003077")]
		[Address(RVA = "0x131DF84", Offset = "0x131DF84", VA = "0x131DF84")]
		private void AssignSlot()
		{
		}

		[Token(Token = "0x6003078")]
		[Address(RVA = "0x131DDD0", Offset = "0x131DDD0", VA = "0x131DDD0")]
		public void GetTargetPosition()
		{
		}

		[Token(Token = "0x6003079")]
		[Address(RVA = "0x131E048", Offset = "0x131E048", VA = "0x131E048")]
		public RequestTargetPosition()
		{
		}
	}
	[Token(Token = "0x20009BB")]
	[ActionCategory("Enemies")]
	public class RunAway : ComponentAction<AIBehaviour>
	{
		[Token(Token = "0x4002E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(AIBehaviour))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject target;

		[Token(Token = "0x4002E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject debug;

		[Token(Token = "0x4002E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat speed;

		[Token(Token = "0x4002E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FsmFloat rotationAngle;

		[Token(Token = "0x4002E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float maxLoopAngle;

		[Token(Token = "0x4002E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Min(0f)]
		public float refreshTime;

		[Token(Token = "0x4002E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool checkNavmesh;

		[Token(Token = "0x4002E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FsmVector3 storeValue;

		[Token(Token = "0x4002E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool everyFrame;

		[Token(Token = "0x4002E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected NavMeshPath navMeshPath;

		[Token(Token = "0x4002E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected float timer;

		[Token(Token = "0x170003BE")]
		protected AIBehaviour aiBehaviour
		{
			[Token(Token = "0x600307A")]
			[Address(RVA = "0x131E098", Offset = "0x131E098", VA = "0x131E098")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600307B")]
		[Address(RVA = "0x131E0A0", Offset = "0x131E0A0", VA = "0x131E0A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600307C")]
		[Address(RVA = "0x131E128", Offset = "0x131E128", VA = "0x131E128", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600307D")]
		[Address(RVA = "0x131E544", Offset = "0x131E544", VA = "0x131E544", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600307E")]
		[Address(RVA = "0x131E1E4", Offset = "0x131E1E4", VA = "0x131E1E4")]
		private void DoRun()
		{
		}

		[Token(Token = "0x600307F")]
		[Address(RVA = "0x131E590", Offset = "0x131E590", VA = "0x131E590")]
		public RunAway()
		{
		}
	}
	[Token(Token = "0x20009BC")]
	[ActionCategory("AI")]
	public class SetEnemyDestination : SetDestination
	{
		[Token(Token = "0x4002E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public FsmFloat distance;

		[Token(Token = "0x4002E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public FsmGameObject enemyBehaviourGO;

		[Token(Token = "0x4002E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public FsmEvent noSlotEvent;

		[Token(Token = "0x4002E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private EnemyBehaviour enemyBehaviour;

		[Token(Token = "0x4002E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform targetTransform;

		[Token(Token = "0x6003080")]
		[Address(RVA = "0x131E628", Offset = "0x131E628", VA = "0x131E628", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003081")]
		[Address(RVA = "0x131E8A8", Offset = "0x131E8A8", VA = "0x131E8A8", Slot = "63")]
		protected override void UpdateFollowTargetBehaviour()
		{
		}

		[Token(Token = "0x6003082")]
		[Address(RVA = "0x131ECD8", Offset = "0x131ECD8", VA = "0x131ECD8")]
		public SetEnemyDestination()
		{
		}
	}
	[Token(Token = "0x20009BD")]
	[ActionCategory("Enemies")]
	public class SetEnemySpeed : ComponentAction<NormalMovement>
	{
		[Token(Token = "0x4002E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(NormalMovement))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat speed;

		[Token(Token = "0x170003BF")]
		private NormalMovement normalMovement
		{
			[Token(Token = "0x6003083")]
			[Address(RVA = "0x131ECDC", Offset = "0x131ECDC", VA = "0x131ECDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003084")]
		[Address(RVA = "0x131ECE4", Offset = "0x131ECE4", VA = "0x131ECE4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003085")]
		[Address(RVA = "0x131ECF0", Offset = "0x131ECF0", VA = "0x131ECF0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003086")]
		[Address(RVA = "0x131ED88", Offset = "0x131ED88", VA = "0x131ED88")]
		public SetEnemySpeed()
		{
		}
	}
	[Token(Token = "0x20009BE")]
	[ActionCategory("Enemies")]
	public class SetEnemyWeight : ComponentAction<EnemyBehaviour>
	{
		[Token(Token = "0x4002E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(EnemyBehaviour))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmFloat weight;

		[Token(Token = "0x4002E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool add;

		[Token(Token = "0x170003C0")]
		private EnemyBehaviour enemyBehaviour
		{
			[Token(Token = "0x6003087")]
			[Address(RVA = "0x131EDD0", Offset = "0x131EDD0", VA = "0x131EDD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003088")]
		[Address(RVA = "0x131EDD8", Offset = "0x131EDD8", VA = "0x131EDD8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003089")]
		[Address(RVA = "0x131EDE4", Offset = "0x131EDE4", VA = "0x131EDE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600308A")]
		[Address(RVA = "0x131EE94", Offset = "0x131EE94", VA = "0x131EE94")]
		public SetEnemyWeight()
		{
		}
	}
	[Token(Token = "0x20009BF")]
	[ActionCategory("Enemies")]
	public class SpiderBossAction : ComponentAction<SpiderBossController>
	{
		[Token(Token = "0x4002E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SpiderBossController))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SpiderBossActionType actionType;

		[Token(Token = "0x4002E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool followMoth;

		[Token(Token = "0x4002E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmVector2 attackPosition;

		[Token(Token = "0x4002E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Event to send after completed attack.")]
		public FsmEvent finishEvent;

		[Token(Token = "0x4002E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float actionTime;

		[Token(Token = "0x4002E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float timer;

		[Token(Token = "0x4002E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool executeAction;

		[Token(Token = "0x4002E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool anticipationPlayed;

		[Token(Token = "0x4002E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool anticipationStopped;

		[Token(Token = "0x4002E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private SpiderBossActionConfig currentConfig;

		[Token(Token = "0x4002E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 attackPositionVector;

		[Token(Token = "0x170003C1")]
		private SpiderBossController spiderBoss
		{
			[Token(Token = "0x600308B")]
			[Address(RVA = "0x131EEE4", Offset = "0x131EEE4", VA = "0x131EEE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600308C")]
		[Address(RVA = "0x131EEEC", Offset = "0x131EEEC", VA = "0x131EEEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600308D")]
		[Address(RVA = "0x131EEF8", Offset = "0x131EEF8", VA = "0x131EEF8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600308E")]
		[Address(RVA = "0x131F1C8", Offset = "0x131F1C8", VA = "0x131F1C8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600308F")]
		[Address(RVA = "0x131F38C", Offset = "0x131F38C", VA = "0x131F38C")]
		private void ExecuteSpiderAction()
		{
		}

		[Token(Token = "0x6003090")]
		[Address(RVA = "0x131F078", Offset = "0x131F078", VA = "0x131F078")]
		private void SetupAttackPositionVector()
		{
		}

		[Token(Token = "0x6003091")]
		[Address(RVA = "0x131F3B0", Offset = "0x131F3B0", VA = "0x131F3B0")]
		public SpiderBossAction()
		{
		}
	}
	[Token(Token = "0x20009C0")]
	[ActionCategory("Enemies")]
	public class SynchronizeRagdollMeshVisibility : FsmStateAction
	{
		[Token(Token = "0x4002E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmGameObject ragdollBehaviour;

		[Token(Token = "0x4002E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmGameObject enemyBehaviour;

		[Token(Token = "0x4002E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ObjectType(typeof(Transform))]
		public FsmObject referenceBehaviour;

		[Token(Token = "0x6003092")]
		[Address(RVA = "0x131F3F8", Offset = "0x131F3F8", VA = "0x131F3F8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003093")]
		[Address(RVA = "0x131F950", Offset = "0x131F950", VA = "0x131F950")]
		public SynchronizeRagdollMeshVisibility()
		{
		}
	}
	[Token(Token = "0x20009C1")]
	[ActionCategory("Enemies")]
	public class UnregisterFollower : ComponentAction<EnemyBehaviour>
	{
		[Token(Token = "0x4002E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(EnemyBehaviour))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x170003C2")]
		private EnemyBehaviour enemyBehaviour
		{
			[Token(Token = "0x6003094")]
			[Address(RVA = "0x131F958", Offset = "0x131F958", VA = "0x131F958")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003095")]
		[Address(RVA = "0x131F960", Offset = "0x131F960", VA = "0x131F960", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003096")]
		[Address(RVA = "0x131F96C", Offset = "0x131F96C", VA = "0x131F96C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003097")]
		[Address(RVA = "0x131F9E8", Offset = "0x131F9E8", VA = "0x131F9E8")]
		private void Unregister()
		{
		}

		[Token(Token = "0x6003098")]
		[Address(RVA = "0x131FA9C", Offset = "0x131FA9C", VA = "0x131FA9C")]
		public UnregisterFollower()
		{
		}
	}
	[Token(Token = "0x20009C2")]
	[ActionCategory("Fungus")]
	public class ExecuteBlock : FsmStateAction
	{
		[Token(Token = "0x4002E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(Flowchart))]
		public FsmGameObject flowchart;

		[Token(Token = "0x4002E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		public FsmString blockName;

		[Token(Token = "0x4002E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmBool waitUntilFinished;

		[Token(Token = "0x4002E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmBool ignoreDisabled;

		[Token(Token = "0x170003C3")]
		public Flowchart Flowchart
		{
			[Token(Token = "0x6003099")]
			[Address(RVA = "0x131FAE4", Offset = "0x131FAE4", VA = "0x131FAE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600309A")]
		[Address(RVA = "0x131FB40", Offset = "0x131FB40", VA = "0x131FB40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600309B")]
		[Address(RVA = "0x131FE80", Offset = "0x131FE80", VA = "0x131FE80", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600309C")]
		[Address(RVA = "0x131FE88", Offset = "0x131FE88", VA = "0x131FE88")]
		public ExecuteBlock()
		{
		}
	}
	[Token(Token = "0x20009C3")]
	[Tooltip("Tests if an FSM is in the specified State.")]
	[ActionCategory(ActionCategory.Logic)]
	public class FungusStateTest : FsmStateAction
	{
		[Token(Token = "0x4002E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The Ability Data.")]
		[ObjectType(typeof(Flowchart))]
		public FsmObject flowchart;

		[Token(Token = "0x4002E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Check to see if the FSM is in this state.")]
		public FsmString stateName;

		[Token(Token = "0x4002E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if the FSM is in the specified state.")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the FSM is NOT in the specified state.")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4002E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the result of this test in a bool variable. Useful if other actions depend on this test.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4002EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Repeat every frame. Useful if you want to wait for an FSM to be in a particular state before sending an event.")]
		public bool everyFrame;

		[Token(Token = "0x600309E")]
		[Address(RVA = "0x131FEE0", Offset = "0x131FEE0", VA = "0x131FEE0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600309F")]
		[Address(RVA = "0x131FF40", Offset = "0x131FF40", VA = "0x131FF40", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030A0")]
		[Address(RVA = "0x13201F8", Offset = "0x13201F8", VA = "0x13201F8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030A1")]
		[Address(RVA = "0x131FF6C", Offset = "0x131FF6C", VA = "0x131FF6C")]
		private void DoFsmStateTest()
		{
		}

		[Token(Token = "0x60030A2")]
		[Address(RVA = "0x13201FC", Offset = "0x13201FC", VA = "0x13201FC")]
		public FungusStateTest()
		{
		}
	}
	[Token(Token = "0x20009C4")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class WaitForFlowchartFinish : FsmStateAction
	{
		[Token(Token = "0x4002EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Ability Data.")]
		[RequiredField]
		[ObjectType(typeof(Flowchart))]
		public FsmObject flowchart;

		[Token(Token = "0x4002EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent finishEvent;

		[Token(Token = "0x60030A3")]
		[Address(RVA = "0x1320204", Offset = "0x1320204", VA = "0x1320204", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030A4")]
		[Address(RVA = "0x132022C", Offset = "0x132022C", VA = "0x132022C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030A5")]
		[Address(RVA = "0x1320318", Offset = "0x1320318", VA = "0x1320318", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x60030A6")]
		[Address(RVA = "0x1320254", Offset = "0x1320254", VA = "0x1320254")]
		private void RegisterListener()
		{
		}

		[Token(Token = "0x60030A7")]
		[Address(RVA = "0x1320334", Offset = "0x1320334", VA = "0x1320334")]
		private void RemoveListener()
		{
		}

		[Token(Token = "0x60030A8")]
		[Address(RVA = "0x13203F8", Offset = "0x13203F8", VA = "0x13203F8")]
		private void OnFlowchartFinished(Flowchart flow)
		{
		}

		[Token(Token = "0x60030A9")]
		[Address(RVA = "0x13204F8", Offset = "0x13204F8", VA = "0x13204F8")]
		public WaitForFlowchartFinish()
		{
		}
	}
	[Token(Token = "0x20009C5")]
	[ActionCategory(ActionCategory.GameLogic)]
	public class GetCheckpointIndex : FsmStateAction
	{
		[Token(Token = "0x4002EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmInt storeIndex;

		[Token(Token = "0x60030AA")]
		[Address(RVA = "0x1320500", Offset = "0x1320500", VA = "0x1320500", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030AB")]
		[Address(RVA = "0x132050C", Offset = "0x132050C", VA = "0x132050C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030AC")]
		[Address(RVA = "0x13205AC", Offset = "0x13205AC", VA = "0x13205AC")]
		public GetCheckpointIndex()
		{
		}
	}
	[Token(Token = "0x20009C6")]
	[ActionCategory(ActionCategory.GameLogic)]
	public class LevelCompleted : FsmStateAction
	{
		[Token(Token = "0x4002EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool markSceneAsCompleted;

		[Token(Token = "0x60030AD")]
		[Address(RVA = "0x13205B4", Offset = "0x13205B4", VA = "0x13205B4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030AE")]
		[Address(RVA = "0x1320644", Offset = "0x1320644", VA = "0x1320644")]
		public LevelCompleted()
		{
		}
	}
	[Token(Token = "0x20009C7")]
	[ActionCategory(ActionCategory.Scene)]
	[Tooltip("Load's scene by it's scene Data")]
	public class LoadGameScene : FsmStateAction
	{
		[Token(Token = "0x4002EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(SceneData))]
		[RequiredField]
		[Tooltip("TargetScene")]
		public FsmObject sceneData;

		[Token(Token = "0x4002EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool loadingScene;

		[Token(Token = "0x4002EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmInt checkpointIndex;

		[Token(Token = "0x60030AF")]
		[Address(RVA = "0x1320654", Offset = "0x1320654", VA = "0x1320654", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030B0")]
		[Address(RVA = "0x13206A4", Offset = "0x13206A4", VA = "0x13206A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030B1")]
		[Address(RVA = "0x13207CC", Offset = "0x13207CC", VA = "0x13207CC")]
		public LoadGameScene()
		{
		}
	}
	[Token(Token = "0x20009C8")]
	[ActionCategory(ActionCategory.Transform)]
	public class ReversePlatform : ComponentAction<SimpleTranslator>
	{
		[Token(Token = "0x4002EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(SimpleTranslator))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x170003C4")]
		private SimpleTranslator simpleTranslator
		{
			[Token(Token = "0x60030B2")]
			[Address(RVA = "0x13207D4", Offset = "0x13207D4", VA = "0x13207D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60030B3")]
		[Address(RVA = "0x13207DC", Offset = "0x13207DC", VA = "0x13207DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030B4")]
		[Address(RVA = "0x13207E8", Offset = "0x13207E8", VA = "0x13207E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030B5")]
		[Address(RVA = "0x1320890", Offset = "0x1320890", VA = "0x1320890")]
		public ReversePlatform()
		{
		}
	}
	[Token(Token = "0x20009C9")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Angle between a GameObject's forward axis and a Target. The Target can be defined as a GameObject or a world Position. If you specify both, then the Position will be used as a local offset from the Target Object's position.")]
	public class DetectTargetSide : FsmStateAction
	{
		[Token(Token = "0x4002EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmGameObject target;

		[Token(Token = "0x4002EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmBool storeLeftSide;

		[Token(Token = "0x4002EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmBool storeRightSide;

		[Token(Token = "0x4002EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmBool storeFrontSide;

		[Token(Token = "0x4002EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmBool storeBehindSide;

		[Token(Token = "0x4002EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60030B6")]
		[Address(RVA = "0x13208D8", Offset = "0x13208D8", VA = "0x13208D8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030B7")]
		[Address(RVA = "0x1320954", Offset = "0x1320954", VA = "0x1320954", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60030B8")]
		[Address(RVA = "0x1320974", Offset = "0x1320974", VA = "0x1320974", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60030B9")]
		[Address(RVA = "0x13209A0", Offset = "0x13209A0", VA = "0x13209A0")]
		private void DoGetSideToTarget()
		{
		}

		[Token(Token = "0x60030BA")]
		[Address(RVA = "0x1320B90", Offset = "0x1320B90", VA = "0x1320B90")]
		public DetectTargetSide()
		{
		}
	}
	[Token(Token = "0x20009CA")]
	[ActionCategory(ActionCategory.Transform)]
	[Tooltip("Gets the Angle between a GameObject's forward axis and a Target. The Target can be defined as a GameObject or a world Position. If you specify both, then the Position will be used as a local offset from the Target Object's position.")]
	public class GetAngleToPlayer : FsmStateAction
	{
		[Token(Token = "0x20009CB")]
		public enum PlayerType
		{
			[Token(Token = "0x4002EBA")]
			Moth,
			[Token(Token = "0x4002EBB")]
			Alchemist
		}

		[Token(Token = "0x4002EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The game object whose forward axis we measure from. If the target is dead ahead the angle will be 0.")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlayerType player;

		[Token(Token = "0x4002EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The world position to measure an angle to. If Target Object is also specified, this vector is used as an offset from that object's position.")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4002EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Ignore height differences when calculating the angle.")]
		public FsmBool ignoreHeight;

		[Token(Token = "0x4002EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Store the angle in a float variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmFloat storeAngle;

		[Token(Token = "0x4002EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 up;

		[Token(Token = "0x4002EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool signed;

		[Token(Token = "0x4002EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x4002EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject targetObject;

		[Token(Token = "0x60030BB")]
		[Address(RVA = "0x1320B98", Offset = "0x1320B98", VA = "0x1320B98", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030BC")]
		[Address(RVA = "0x1320C5C", Offset = "0x1320C5C", VA = "0x1320C5C", Slot = "29")]
		public override void OnPreprocess()
		{
		}

		[Token(Token = "0x60030BD")]
		[Address(RVA = "0x1320C7C", Offset = "0x1320C7C", VA = "0x1320C7C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030BE")]
		[Address(RVA = "0x1320D28", Offset = "0x1320D28", VA = "0x1320D28", Slot = "36")]
		public override void OnLateUpdate()
		{
		}

		[Token(Token = "0x60030BF")]
		[Address(RVA = "0x1320D54", Offset = "0x1320D54", VA = "0x1320D54")]
		private void DoGetAngleToTarget()
		{
		}

		[Token(Token = "0x60030C0")]
		[Address(RVA = "0x13211A0", Offset = "0x13211A0", VA = "0x13211A0")]
		public GetAngleToPlayer()
		{
		}
	}
	[Token(Token = "0x20009CC")]
	[Tooltip("Gets a Moth's Transform and stores it in an Object Variable.")]
	public class GetMothCharacterTransform : FsmStateAction
	{
		[Token(Token = "0x4002EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Store the GameObject's Transform in an Object variable of type UnityEngine.Transform.")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(Transform))]
		public FsmObject storeTransform;

		[Token(Token = "0x4002EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60030C1")]
		[Address(RVA = "0x1321200", Offset = "0x1321200", VA = "0x1321200", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030C2")]
		[Address(RVA = "0x1321224", Offset = "0x1321224", VA = "0x1321224", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030C3")]
		[Address(RVA = "0x1321344", Offset = "0x1321344", VA = "0x1321344", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030C4")]
		[Address(RVA = "0x1321250", Offset = "0x1321250", VA = "0x1321250")]
		private void DoGetGameObject()
		{
		}

		[Token(Token = "0x60030C5")]
		[Address(RVA = "0x1321348", Offset = "0x1321348", VA = "0x1321348")]
		public GetMothCharacterTransform()
		{
		}
	}
	[Token(Token = "0x20009CD")]
	[Tooltip("Gets a VRCharacter's Transform and stores it in an Object Variable.")]
	public class GetVRCharacterTransform : FsmStateAction
	{
		[Token(Token = "0x4002EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmEnum VRTransform;

		[Token(Token = "0x4002EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Store the GameObject's Transform in an Object variable of type UnityEngine.Transform.")]
		[RequiredField]
		[ObjectType(typeof(Transform))]
		[UIHint(UIHint.Variable)]
		public FsmObject storeTransform;

		[Token(Token = "0x4002EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmGameObject storeGO;

		[Token(Token = "0x4002EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x60030C6")]
		[Address(RVA = "0x1321350", Offset = "0x1321350", VA = "0x1321350", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030C7")]
		[Address(RVA = "0x1321374", Offset = "0x1321374", VA = "0x1321374", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030C8")]
		[Address(RVA = "0x132164C", Offset = "0x132164C", VA = "0x132164C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030C9")]
		[Address(RVA = "0x13213A0", Offset = "0x13213A0", VA = "0x13213A0")]
		private void DoGetGameObjectName()
		{
		}

		[Token(Token = "0x60030CA")]
		[Address(RVA = "0x1321650", Offset = "0x1321650", VA = "0x1321650")]
		public GetVRCharacterTransform()
		{
		}
	}
	[Token(Token = "0x20009CE")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class LoadJSONVariable : FsmStateAction
	{
		[Token(Token = "0x4002EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmString key;

		[Token(Token = "0x4002EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool defaultBoolValue;

		[Token(Token = "0x4002EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmBool storeBool;

		[Token(Token = "0x4002EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int defaultIntValue;

		[Token(Token = "0x4002EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmInt storeInt;

		[Token(Token = "0x4002EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float defaultFloatValue;

		[Token(Token = "0x4002EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat storeFloat;

		[Token(Token = "0x4002EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string defaultStringValue;

		[Token(Token = "0x4002ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FsmString storeString;

		[Token(Token = "0x60030CB")]
		[Address(RVA = "0x1321658", Offset = "0x1321658", VA = "0x1321658", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030CC")]
		[Address(RVA = "0x13216B0", Offset = "0x13216B0", VA = "0x13216B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030CD")]
		[Address(RVA = "0x132184C", Offset = "0x132184C", VA = "0x132184C")]
		public LoadJSONVariable()
		{
		}
	}
	[Token(Token = "0x20009CF")]
	[ActionCategory(ActionCategory.ScriptControl)]
	public class SaveJSONVariable : FsmStateAction
	{
		[Token(Token = "0x4002ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmString key;

		[Token(Token = "0x4002ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool valueBool;

		[Token(Token = "0x4002ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmInt valueInt;

		[Token(Token = "0x4002ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmFloat valueFloat;

		[Token(Token = "0x4002ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmString valueString;

		[Token(Token = "0x60030CE")]
		[Address(RVA = "0x1321854", Offset = "0x1321854", VA = "0x1321854", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030CF")]
		[Address(RVA = "0x13218AC", Offset = "0x13218AC", VA = "0x13218AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030D0")]
		[Address(RVA = "0x1321A68", Offset = "0x1321A68", VA = "0x1321A68")]
		public SaveJSONVariable()
		{
		}
	}
	[Token(Token = "0x20009D0")]
	[ActionCategory(ActionCategory.Input)]
	public class SetExternalInput : FsmStateAction
	{
		[Token(Token = "0x4002ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmBool enable;

		[Token(Token = "0x60030D1")]
		[Address(RVA = "0x1321A70", Offset = "0x1321A70", VA = "0x1321A70", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030D2")]
		[Address(RVA = "0x1321B20", Offset = "0x1321B20", VA = "0x1321B20")]
		public SetExternalInput()
		{
		}
	}
	[Token(Token = "0x20009D1")]
	[ActionCategory(ActionCategory.Input)]
	public class SetInput : FsmStateAction
	{
		[Token(Token = "0x4002ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmBool pause;

		[Token(Token = "0x4002ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool full;

		[Token(Token = "0x60030D3")]
		[Address(RVA = "0x1321B54", Offset = "0x1321B54", VA = "0x1321B54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030D4")]
		[Address(RVA = "0x1321C2C", Offset = "0x1321C2C", VA = "0x1321C2C")]
		public SetInput()
		{
		}
	}
	[Token(Token = "0x20009D2")]
	[ActionCategory(ActionCategory.Logic)]
	[Tooltip("Tests if all the given Bool Variables are True.")]
	public class BoolAllFalse : FsmStateAction
	{
		[Token(Token = "0x4002ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The Bool variables to check.")]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[RequiredField]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4002ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if all the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4002ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Repeat every frame while the state is active. Useful if you're waiting for all to be true.")]
		public bool everyFrame;

		[Token(Token = "0x60030D5")]
		[Address(RVA = "0x1321C7C", Offset = "0x1321C7C", VA = "0x1321C7C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030D6")]
		[Address(RVA = "0x1321CBC", Offset = "0x1321CBC", VA = "0x1321CBC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030D7")]
		[Address(RVA = "0x1321D88", Offset = "0x1321D88", VA = "0x1321D88", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030D8")]
		[Address(RVA = "0x1321CE8", Offset = "0x1321CE8", VA = "0x1321CE8")]
		private void DoAllTrue()
		{
		}

		[Token(Token = "0x60030D9")]
		[Address(RVA = "0x1321D8C", Offset = "0x1321D8C", VA = "0x1321D8C")]
		public BoolAllFalse()
		{
		}
	}
	[Token(Token = "0x20009D3")]
	[Tooltip("Tests if all the given Bool Variables are True.")]
	[ActionCategory(ActionCategory.Logic)]
	public class BoolAllTest : FsmStateAction
	{
		[Token(Token = "0x4002ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Readonly]
		[Tooltip("The Bool variables to check.")]
		[RequiredField]
		public FsmBool[] boolVariables;

		[Token(Token = "0x4002ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool[] boolValues;

		[Token(Token = "0x4002ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Event to send if all the Bool variables are True.")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Bool variable.")]
		public FsmBool storeResult;

		[Token(Token = "0x4002EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame while the state is active. Useful if you're waiting for all to be true.")]
		public bool everyFrame;

		[Token(Token = "0x60030DA")]
		[Address(RVA = "0x1321D94", Offset = "0x1321D94", VA = "0x1321D94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030DB")]
		[Address(RVA = "0x1321DE4", Offset = "0x1321DE4", VA = "0x1321DE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030DC")]
		[Address(RVA = "0x1321EFC", Offset = "0x1321EFC", VA = "0x1321EFC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030DD")]
		[Address(RVA = "0x1321E10", Offset = "0x1321E10", VA = "0x1321E10")]
		private void DoAllTrue()
		{
		}

		[Token(Token = "0x60030DE")]
		[Address(RVA = "0x1321F00", Offset = "0x1321F00", VA = "0x1321F00")]
		public BoolAllTest()
		{
		}
	}
	[Token(Token = "0x20009D4")]
	[ActionCategory(ActionCategory.Logic)]
	public class LanguageTest : FsmStateAction
	{
		[Token(Token = "0x4002EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		public FsmInt storeResult;

		[Token(Token = "0x60030DF")]
		[Address(RVA = "0x1321F08", Offset = "0x1321F08", VA = "0x1321F08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030E0")]
		[Address(RVA = "0x1321F14", Offset = "0x1321F14", VA = "0x1321F14", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030E1")]
		[Address(RVA = "0x1321F30", Offset = "0x1321F30", VA = "0x1321F30")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x60030E2")]
		[Address(RVA = "0x1321FBC", Offset = "0x1321FBC", VA = "0x1321FBC")]
		public LanguageTest()
		{
		}
	}
	[Token(Token = "0x20009D5")]
	[ActionCategory(ActionCategory.Logic)]
	public class LevelStateTest : FsmStateAction
	{
		[Token(Token = "0x4002EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmEvent completeEvent;

		[Token(Token = "0x4002EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent incompleteEvent;

		[Token(Token = "0x4002EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x60030E3")]
		[Address(RVA = "0x1321FC4", Offset = "0x1321FC4", VA = "0x1321FC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030E4")]
		[Address(RVA = "0x1321FFC", Offset = "0x1321FFC", VA = "0x1321FFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030E5")]
		[Address(RVA = "0x1322018", Offset = "0x1322018", VA = "0x1322018")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x60030E6")]
		[Address(RVA = "0x13220DC", Offset = "0x13220DC", VA = "0x13220DC")]
		public LevelStateTest()
		{
		}
	}
	[Token(Token = "0x20009D6")]
	[ActionCategory(ActionCategory.Logic)]
	public class SayDialogTest : FsmStateAction
	{
		[Token(Token = "0x4002EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmEvent enableEvent;

		[Token(Token = "0x4002EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent disableEvent;

		[Token(Token = "0x4002EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x60030E7")]
		[Address(RVA = "0x13220E4", Offset = "0x13220E4", VA = "0x13220E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030E8")]
		[Address(RVA = "0x132211C", Offset = "0x132211C", VA = "0x132211C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030E9")]
		[Address(RVA = "0x1322138", Offset = "0x1322138", VA = "0x1322138")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x60030EA")]
		[Address(RVA = "0x1322264", Offset = "0x1322264", VA = "0x1322264")]
		public SayDialogTest()
		{
		}
	}
	[Token(Token = "0x20009D7")]
	[Tooltip("Sets a named float in a game object's material.")]
	[ActionCategory(ActionCategory.Material)]
	public class GetMaterialFloat : ComponentAction<Renderer>
	{
		[Token(Token = "0x4002EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4002EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4002EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[RequiredField]
		[Tooltip("A named float parameter in the shader.")]
		public FsmString namedFloat;

		[Token(Token = "0x4002EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[Tooltip("Store the parameter value.")]
		public FsmFloat storeValue;

		[Token(Token = "0x4002EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60030EB")]
		[Address(RVA = "0x132226C", Offset = "0x132226C", VA = "0x132226C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030EC")]
		[Address(RVA = "0x1322318", Offset = "0x1322318", VA = "0x1322318", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030ED")]
		[Address(RVA = "0x13225A4", Offset = "0x13225A4", VA = "0x13225A4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030EE")]
		[Address(RVA = "0x1322344", Offset = "0x1322344", VA = "0x1322344")]
		private void DoGetMaterialFloat()
		{
		}

		[Token(Token = "0x60030EF")]
		[Address(RVA = "0x13225A8", Offset = "0x13225A8", VA = "0x13225A8")]
		public GetMaterialFloat()
		{
		}
	}
	[Token(Token = "0x20009D8")]
	[Tooltip("Sets a named float in a game object's material.")]
	[ActionCategory(ActionCategory.Material)]
	public class SetMaterialBlockColor : ComponentAction<Renderer>
	{
		[Token(Token = "0x4002EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The Game Object that the material is applied to.")]
		[CheckForComponent(typeof(Renderer))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.NamedColor)]
		[Tooltip("The named color.\nNote: With URP and HDRP set NamedColor to _BaseColor instead of _Color.\nSee unity docs: <a href=\"https://docs.unity3d.com/ScriptReference/Material.SetColor.html\" rel=\"nofollow\">Material.SetColor</a>")]
		public FsmString namedColor;

		[Token(Token = "0x4002EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set the parameter value.")]
		[RequiredField]
		public FsmColor color;

		[Token(Token = "0x4002EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmBool deactivateRendererIfFullyTransparent;

		[Token(Token = "0x4002EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x4002EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected MaterialPropertyBlock materalBlock;

		[Token(Token = "0x60030F0")]
		[Address(RVA = "0x13225F0", Offset = "0x13225F0", VA = "0x13225F0", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60030F1")]
		[Address(RVA = "0x1322664", Offset = "0x1322664", VA = "0x1322664", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030F2")]
		[Address(RVA = "0x13226FC", Offset = "0x13226FC", VA = "0x13226FC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030F3")]
		[Address(RVA = "0x1322734", Offset = "0x1322734", VA = "0x1322734", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030F4")]
		[Address(RVA = "0x1322744", Offset = "0x1322744", VA = "0x1322744", Slot = "62")]
		protected virtual void DoSetMaterialColor()
		{
		}

		[Token(Token = "0x60030F5")]
		[Address(RVA = "0x1322988", Offset = "0x1322988", VA = "0x1322988")]
		public SetMaterialBlockColor()
		{
		}
	}
	[Token(Token = "0x20009D9")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets a named float in a game object's material.")]
	public class SetMaterialBlockFloat : ComponentAction<Renderer>
	{
		[Token(Token = "0x4002EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The Game Object that the material is applied to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("A named float parameter in the shader.")]
		[RequiredField]
		public FsmString namedFloat;

		[Token(Token = "0x4002EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Set the parameter value.")]
		[RequiredField]
		public FsmFloat floatValue;

		[Token(Token = "0x4002EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x4002EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected MaterialPropertyBlock materalBlock;

		[Token(Token = "0x60030F6")]
		[Address(RVA = "0x13229EC", Offset = "0x13229EC", VA = "0x13229EC", Slot = "30")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60030F7")]
		[Address(RVA = "0x1322A60", Offset = "0x1322A60", VA = "0x1322A60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030F8")]
		[Address(RVA = "0x1322AEC", Offset = "0x1322AEC", VA = "0x1322AEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030F9")]
		[Address(RVA = "0x1322B24", Offset = "0x1322B24", VA = "0x1322B24", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030FA")]
		[Address(RVA = "0x1322B34", Offset = "0x1322B34", VA = "0x1322B34", Slot = "62")]
		protected virtual void DoSetMaterialFloat()
		{
		}

		[Token(Token = "0x60030FB")]
		[Address(RVA = "0x1322D2C", Offset = "0x1322D2C", VA = "0x1322D2C")]
		public SetMaterialBlockFloat()
		{
		}
	}
	[Token(Token = "0x20009DA")]
	[Tooltip("Sets a named color's alpha value in a Game Object's material.\n\nNote: With URP and HDRP set NamedColor to _BaseColor instead of _Color")]
	[ActionCategory(ActionCategory.Material)]
	public class SetMaterialColorAlpha : ComponentAction<Renderer>
	{
		[Token(Token = "0x4002EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(Renderer))]
		[Tooltip("The GameObject that the material is applied to.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("GameObjects can have multiple materials. Specify an index to target a specific material.")]
		public FsmInt materialIndex;

		[Token(Token = "0x4002EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Alternatively specify a Material instead of a GameObject and Index.")]
		public FsmMaterial material;

		[Token(Token = "0x4002EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The named color.\nNote: With URP and HDRP set NamedColor to _BaseColor instead of _Color.\nSee unity docs: <a href=\"https://docs.unity3d.com/ScriptReference/Material.SetColor.html\" rel=\"nofollow\">Material.SetColor</a>")]
		[UIHint(UIHint.NamedColor)]
		public FsmString namedColor;

		[Token(Token = "0x4002EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set the parameter value.")]
		[Range(0f, 1f)]
		[RequiredField]
		public FsmFloat colorAlpha;

		[Token(Token = "0x4002EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Repeat every frame. Useful if the value is animated.")]
		public bool everyFrame;

		[Token(Token = "0x60030FC")]
		[Address(RVA = "0x1322D74", Offset = "0x1322D74", VA = "0x1322D74", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60030FD")]
		[Address(RVA = "0x1322E10", Offset = "0x1322E10", VA = "0x1322E10", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60030FE")]
		[Address(RVA = "0x1323224", Offset = "0x1323224", VA = "0x1323224", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60030FF")]
		[Address(RVA = "0x1322E3C", Offset = "0x1322E3C", VA = "0x1322E3C")]
		private void DoSetMaterialColor()
		{
		}

		[Token(Token = "0x6003100")]
		[Address(RVA = "0x1323228", Offset = "0x1323228", VA = "0x1323228")]
		public SetMaterialColorAlpha()
		{
		}
	}
	[Token(Token = "0x20009DB")]
	[ActionCategory(ActionCategory.Material)]
	[Tooltip("Sets a named float in a game object's material.")]
	public class SetMaterialNamedBlockFloat : SetMaterialBlockFloat
	{
		[Token(Token = "0x4002EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Material name")]
		public FsmString materialName;

		[Token(Token = "0x6003101")]
		[Address(RVA = "0x1323270", Offset = "0x1323270", VA = "0x1323270", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003102")]
		[Address(RVA = "0x1323290", Offset = "0x1323290", VA = "0x1323290", Slot = "62")]
		protected override void DoSetMaterialFloat()
		{
		}

		[Token(Token = "0x6003103")]
		[Address(RVA = "0x13235BC", Offset = "0x13235BC", VA = "0x13235BC")]
		public SetMaterialNamedBlockFloat()
		{
		}
	}
	[Token(Token = "0x20009DC")]
	[ActionCategory(ActionCategory.Transform)]
	public class GetSpreadPosition : FsmStateAction
	{
		[Token(Token = "0x4002EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmGameObject owner;

		[Token(Token = "0x4002EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4002EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmFloat distance;

		[Token(Token = "0x4002EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmFloat angle;

		[Token(Token = "0x4002EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 axis;

		[Token(Token = "0x4002F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool resetY;

		[Token(Token = "0x4002F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector3 storeResult;

		[Token(Token = "0x4002F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool everyFrame;

		[Token(Token = "0x6003104")]
		[Address(RVA = "0x13235C0", Offset = "0x13235C0", VA = "0x13235C0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003105")]
		[Address(RVA = "0x1323614", Offset = "0x1323614", VA = "0x1323614", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003106")]
		[Address(RVA = "0x132386C", Offset = "0x132386C", VA = "0x132386C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003107")]
		[Address(RVA = "0x1323640", Offset = "0x1323640", VA = "0x1323640")]
		private void DoSpread()
		{
		}

		[Token(Token = "0x6003108")]
		[Address(RVA = "0x1323888", Offset = "0x1323888", VA = "0x1323888")]
		public GetSpreadPosition()
		{
		}
	}
	[Token(Token = "0x20009DD")]
	[ActionCategory(ActionCategory.Math)]
	public class GetStrafePosition : FsmStateAction
	{
		[Token(Token = "0x4002F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(EnemyBehaviour))]
		public FsmObject owner;

		[Token(Token = "0x4002F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmVector3 targetPosition;

		[Token(Token = "0x4002F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmGameObject targetObject;

		[Token(Token = "0x4002F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmGameObject debug;

		[Token(Token = "0x4002F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmBool right;

		[Token(Token = "0x4002F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool autoSide;

		[Token(Token = "0x4002F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool opposite;

		[Token(Token = "0x4002F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmFloat radius;

		[Token(Token = "0x4002F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeResult;

		[Token(Token = "0x4002F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool everyFrame;

		[Token(Token = "0x6003109")]
		[Address(RVA = "0x1323904", Offset = "0x1323904", VA = "0x1323904", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600310A")]
		[Address(RVA = "0x132396C", Offset = "0x132396C", VA = "0x132396C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600310B")]
		[Address(RVA = "0x1324050", Offset = "0x1324050", VA = "0x1324050", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600310C")]
		[Address(RVA = "0x1323998", Offset = "0x1323998", VA = "0x1323998")]
		private void DoStrafe()
		{
		}

		[Token(Token = "0x600310D")]
		[Address(RVA = "0x132406C", Offset = "0x132406C", VA = "0x132406C")]
		public GetStrafePosition()
		{
		}
	}
	[Token(Token = "0x20009DE")]
	[ActionCategory(ActionCategory.Math)]
	public class IntRepeat : FsmStateAction
	{
		[Token(Token = "0x4002F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("The variable to clamp.")]
		public FsmInt intVariable;

		[Token(Token = "0x4002F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Maximum allowed value.")]
		public FsmInt maxValue;

		[Token(Token = "0x4002F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Perform this action every frame.")]
		public bool everyFrame;

		[Token(Token = "0x600310E")]
		[Address(RVA = "0x13240A8", Offset = "0x13240A8", VA = "0x13240A8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600310F")]
		[Address(RVA = "0x13240D8", Offset = "0x13240D8", VA = "0x13240D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003110")]
		[Address(RVA = "0x1324194", Offset = "0x1324194", VA = "0x1324194", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003111")]
		[Address(RVA = "0x1324104", Offset = "0x1324104", VA = "0x1324104")]
		private void DoRepeat()
		{
		}

		[Token(Token = "0x6003112")]
		[Address(RVA = "0x1324198", Offset = "0x1324198", VA = "0x1324198")]
		public IntRepeat()
		{
		}
	}
	[Token(Token = "0x20009DF")]
	[ActionCategory(ActionCategory.Math)]
	[Tooltip("Sets a Float Variable to a random value between Min/Max.")]
	public class RandomFloatOffset : FsmStateAction
	{
		[Token(Token = "0x4002F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Minimum value for the random number.")]
		[RequiredField]
		public FsmFloat min;

		[Token(Token = "0x4002F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmFloat minOffset;

		[Token(Token = "0x4002F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Maximum value for the random number.")]
		[RequiredField]
		public FsmFloat max;

		[Token(Token = "0x4002F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmFloat maxOffset;

		[Token(Token = "0x4002F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the result in a Float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x6003113")]
		[Address(RVA = "0x13241A0", Offset = "0x13241A0", VA = "0x13241A0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003114")]
		[Address(RVA = "0x132422C", Offset = "0x132422C", VA = "0x132422C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003115")]
		[Address(RVA = "0x13242CC", Offset = "0x13242CC", VA = "0x13242CC")]
		public RandomFloatOffset()
		{
		}
	}
	[Token(Token = "0x20009E0")]
	[ActionCategory("Modification")]
	public class ModifierTest : ComponentAction<ModifierBase>
	{
		[Token(Token = "0x4002F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(ModifierBase))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmEvent trueEvent;

		[Token(Token = "0x4002F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent falseEvent;

		[Token(Token = "0x4002F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x4002F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool everyFrame;

		[Token(Token = "0x170003C5")]
		private ModifierBase modifier
		{
			[Token(Token = "0x6003116")]
			[Address(RVA = "0x13242D4", Offset = "0x13242D4", VA = "0x13242D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003117")]
		[Address(RVA = "0x13242DC", Offset = "0x13242DC", VA = "0x13242DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003118")]
		[Address(RVA = "0x13242E8", Offset = "0x13242E8", VA = "0x13242E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003119")]
		[Address(RVA = "0x13243D4", Offset = "0x13243D4", VA = "0x13243D4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600311A")]
		[Address(RVA = "0x1324378", Offset = "0x1324378", VA = "0x1324378")]
		private void DoActiveTest()
		{
		}

		[Token(Token = "0x600311B")]
		[Address(RVA = "0x13243D8", Offset = "0x13243D8", VA = "0x13243D8")]
		public ModifierTest()
		{
		}
	}
	[Token(Token = "0x20009E1")]
	[Tooltip("Casts a Sphere into the worldspace and returns an array of the hit colliders")]
	[ActionCategory(ActionCategory.Physics)]
	public class ActivateColliders : FsmStateAction
	{
		[Token(Token = "0x4002F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault targetGameObject;

		[Token(Token = "0x4002F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool activate;

		[Token(Token = "0x4002F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmBool includeChildren;

		[Token(Token = "0x4002F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmBool includeInactiveGameObjects;

		[Token(Token = "0x600311C")]
		[Address(RVA = "0x1324420", Offset = "0x1324420", VA = "0x1324420", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600311D")]
		[Address(RVA = "0x132448C", Offset = "0x132448C", VA = "0x132448C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600311E")]
		[Address(RVA = "0x13245BC", Offset = "0x13245BC", VA = "0x13245BC")]
		public ActivateColliders()
		{
		}
	}
	[Token(Token = "0x20009E2")]
	[ActionCategory(ActionCategory.Physics)]
	[Tooltip("Casts a Sphere into the worldspace and returns an array of the hit colliders")]
	public class OverlapSphere : FsmStateAction
	{
		[Token(Token = "0x4002F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Start ray at game object position. \nOr use From Position parameter.")]
		public FsmOwnerDefault fromGameObject;

		[Token(Token = "0x4002F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Start ray at a vector3 world position. \nOr use Game Object parameter.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4002F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius of the sphere")]
		public FsmFloat radius;

		[Token(Token = "0x4002F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Event to send if the sphere hits an object.")]
		[UIHint(UIHint.Variable)]
		public FsmEvent hitEvent;

		[Token(Token = "0x4002F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Set a bool variable to true if hit something, otherwise false.")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidHit;

		[Token(Token = "0x4002F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeDidntHit;

		[Token(Token = "0x4002F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Store the game object hit in a variable.")]
		public FsmVector3 storeHitObject;

		[Token(Token = "0x4002F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Set how often to cast the sphere. 0 = once, don't repeat; 1 = everyFrame; 2 = every other frame... \nSince raycasts can get expensive use the highest repeat interval you can get away with.")]
		public FsmInt repeatInterval;

		[Token(Token = "0x4002F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Pick only from these layers.")]
		[UIHint(UIHint.Layer)]
		public FsmInt layerMask;

		[Token(Token = "0x4002F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int repeat;

		[Token(Token = "0x600311F")]
		[Address(RVA = "0x1324628", Offset = "0x1324628", VA = "0x1324628", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003120")]
		[Address(RVA = "0x1324734", Offset = "0x1324734", VA = "0x1324734", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003121")]
		[Address(RVA = "0x1324A1C", Offset = "0x1324A1C", VA = "0x1324A1C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003122")]
		[Address(RVA = "0x1324770", Offset = "0x1324770", VA = "0x1324770")]
		private void DoOverlapSphere()
		{
		}

		[Token(Token = "0x6003123")]
		[Address(RVA = "0x1324A34", Offset = "0x1324A34", VA = "0x1324A34")]
		public OverlapSphere()
		{
		}
	}
	[Token(Token = "0x20009E3")]
	[ActionCategory(ActionCategory.Logic)]
	public class MothStateTest : FsmStateAction
	{
		[Token(Token = "0x20009E4")]
		public enum MothStates
		{
			[Token(Token = "0x4002F2D")]
			STANDARD,
			[Token(Token = "0x4002F2E")]
			COMBAT,
			[Token(Token = "0x4002F2F")]
			DIALOGUE,
			[Token(Token = "0x4002F30")]
			CUTSCENE
		}

		[Token(Token = "0x4002F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public MothStates state;

		[Token(Token = "0x4002F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmEvent inStateEvent;

		[Token(Token = "0x4002F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent notinStateEvent;

		[Token(Token = "0x4002F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		public FsmBool storeResult;

		[Token(Token = "0x6003124")]
		[Address(RVA = "0x1324A3C", Offset = "0x1324A3C", VA = "0x1324A3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003125")]
		[Address(RVA = "0x1324A48", Offset = "0x1324A48", VA = "0x1324A48", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003126")]
		[Address(RVA = "0x1324A64", Offset = "0x1324A64", VA = "0x1324A64")]
		private void DoCheck()
		{
		}

		[Token(Token = "0x6003127")]
		[Address(RVA = "0x1324CD0", Offset = "0x1324CD0", VA = "0x1324CD0")]
		public MothStateTest()
		{
		}
	}
	[Token(Token = "0x20009E5")]
	[ActionCategory("Player")]
	public class SetCutsceneState : FsmStateAction
	{
		[Token(Token = "0x4002F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool useBuiltinRootMotion;

		[Token(Token = "0x4002F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool enableState;

		[Token(Token = "0x170003C6")]
		private XRCharacter xrCharacter
		{
			[Token(Token = "0x6003128")]
			[Address(RVA = "0x1324CD8", Offset = "0x1324CD8", VA = "0x1324CD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003129")]
		[Address(RVA = "0x1324D54", Offset = "0x1324D54", VA = "0x1324D54", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600312A")]
		[Address(RVA = "0x1324D60", Offset = "0x1324D60", VA = "0x1324D60", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600312B")]
		[Address(RVA = "0x1324DB0", Offset = "0x1324DB0", VA = "0x1324DB0")]
		public SetCutsceneState()
		{
		}
	}
	[Token(Token = "0x20009E6")]
	[ActionCategory("Pooling")]
	[Tooltip("Dispose object using custom PoolingSystem")]
	public class Dispose : FsmStateAction
	{
		[Token(Token = "0x4002F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x600312C")]
		[Address(RVA = "0x1324DC0", Offset = "0x1324DC0", VA = "0x1324DC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600312D")]
		[Address(RVA = "0x1324F58", Offset = "0x1324F58", VA = "0x1324F58")]
		public Dispose()
		{
		}
	}
	[Token(Token = "0x20009E7")]
	[ActionCategory("Pooling")]
	[Tooltip("Initiate prefab using custom PoolingSystem")]
	public class Initiate : FsmStateAction
	{
		[Token(Token = "0x4002F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmGameObject prefab;

		[Token(Token = "0x4002F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(Transform))]
		public FsmObject target;

		[Token(Token = "0x4002F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmBool isTargetParent;

		[Token(Token = "0x4002F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmVector3 position;

		[Token(Token = "0x4002F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmQuaternion rotation;

		[Token(Token = "0x4002F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmGameObject storeValue;

		[Token(Token = "0x600312E")]
		[Address(RVA = "0x1324F60", Offset = "0x1324F60", VA = "0x1324F60", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600312F")]
		[Address(RVA = "0x1325040", Offset = "0x1325040", VA = "0x1325040", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003130")]
		[Address(RVA = "0x132533C", Offset = "0x132533C", VA = "0x132533C")]
		public Initiate()
		{
		}
	}
	[Token(Token = "0x20009E8")]
	[ActionCategory("Save")]
	public class AimSettings : FsmStateAction
	{
		[Token(Token = "0x4002F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt aim;

		[Token(Token = "0x4002F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x6003131")]
		[Address(RVA = "0x1325344", Offset = "0x1325344", VA = "0x1325344", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003132")]
		[Address(RVA = "0x132536C", Offset = "0x132536C", VA = "0x132536C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003133")]
		[Address(RVA = "0x132549C", Offset = "0x132549C", VA = "0x132549C")]
		public AimSettings()
		{
		}
	}
	[Token(Token = "0x20009E9")]
	[ActionCategory("Fungus")]
	public class ContinueGameAction : FsmStateAction
	{
		[Token(Token = "0x4002F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmString scene;

		[Token(Token = "0x4002F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmInt checkpoint;

		[Token(Token = "0x6003134")]
		[Address(RVA = "0x13254A4", Offset = "0x13254A4", VA = "0x13254A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003135")]
		[Address(RVA = "0x13254CC", Offset = "0x13254CC", VA = "0x13254CC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003136")]
		[Address(RVA = "0x13255F4", Offset = "0x13255F4", VA = "0x13255F4")]
		public ContinueGameAction()
		{
		}
	}
	[Token(Token = "0x20009EA")]
	[ActionCategory("Save")]
	public class DifficultySettings : FsmStateAction
	{
		[Token(Token = "0x4002F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt difficultyLevel;

		[Token(Token = "0x4002F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x6003137")]
		[Address(RVA = "0x13255FC", Offset = "0x13255FC", VA = "0x13255FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003138")]
		[Address(RVA = "0x1325624", Offset = "0x1325624", VA = "0x1325624", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003139")]
		[Address(RVA = "0x1325748", Offset = "0x1325748", VA = "0x1325748")]
		public DifficultySettings()
		{
		}
	}
	[Token(Token = "0x20009EB")]
	[ActionCategory("Save")]
	public class DominantHandSettings : FsmStateAction
	{
		[Token(Token = "0x4002F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt dominantHand;

		[Token(Token = "0x4002F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x600313A")]
		[Address(RVA = "0x1325750", Offset = "0x1325750", VA = "0x1325750", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600313B")]
		[Address(RVA = "0x1325778", Offset = "0x1325778", VA = "0x1325778", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600313C")]
		[Address(RVA = "0x13258DC", Offset = "0x13258DC", VA = "0x13258DC")]
		public DominantHandSettings()
		{
		}
	}
	[Token(Token = "0x20009EC")]
	[ActionCategory("Fungus")]
	public class HandSettings : FsmStateAction
	{
		[Token(Token = "0x4002F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt hand;

		[Token(Token = "0x4002F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x600313D")]
		[Address(RVA = "0x13258E4", Offset = "0x13258E4", VA = "0x13258E4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600313E")]
		[Address(RVA = "0x132590C", Offset = "0x132590C", VA = "0x132590C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600313F")]
		[Address(RVA = "0x1325A00", Offset = "0x1325A00", VA = "0x1325A00")]
		public HandSettings()
		{
		}
	}
	[Token(Token = "0x20009ED")]
	[ActionCategory("Save")]
	public class LanguageSettings : FsmStateAction
	{
		[Token(Token = "0x4002F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt index;

		[Token(Token = "0x4002F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x6003140")]
		[Address(RVA = "0x1325A08", Offset = "0x1325A08", VA = "0x1325A08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003141")]
		[Address(RVA = "0x1325A30", Offset = "0x1325A30", VA = "0x1325A30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003142")]
		[Address(RVA = "0x1325B24", Offset = "0x1325B24", VA = "0x1325B24")]
		public LanguageSettings()
		{
		}
	}
	[Token(Token = "0x20009EE")]
	[ActionCategory("Save")]
	public class MusicSettings : FsmStateAction
	{
		[Token(Token = "0x4002F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt volume;

		[Token(Token = "0x4002F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x6003143")]
		[Address(RVA = "0x1325B2C", Offset = "0x1325B2C", VA = "0x1325B2C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003144")]
		[Address(RVA = "0x1325B54", Offset = "0x1325B54", VA = "0x1325B54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003145")]
		[Address(RVA = "0x1325C80", Offset = "0x1325C80", VA = "0x1325C80")]
		public MusicSettings()
		{
		}
	}
	[Token(Token = "0x20009EF")]
	[ActionCategory("Fungus")]
	public class NewGameAction : FsmStateAction
	{
		[Token(Token = "0x6003146")]
		[Address(RVA = "0x1325C88", Offset = "0x1325C88", VA = "0x1325C88", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003147")]
		[Address(RVA = "0x1325D20", Offset = "0x1325D20", VA = "0x1325D20")]
		public NewGameAction()
		{
		}
	}
	[Token(Token = "0x20009F0")]
	[Tooltip("Sends Events based on the value of a Boolean Variable.")]
	[ActionCategory(ActionCategory.Logic)]
	public class NewGameTest : FsmStateAction
	{
		[Token(Token = "0x4002F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Event to send if the Bool variable is True.")]
		public FsmEvent isTrue;

		[Token(Token = "0x4002F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Event to send if the Bool variable is False.")]
		public FsmEvent isFalse;

		[Token(Token = "0x4002F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Repeat every frame while the state is active.")]
		public bool everyFrame;

		[Token(Token = "0x6003148")]
		[Address(RVA = "0x1325D28", Offset = "0x1325D28", VA = "0x1325D28", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003149")]
		[Address(RVA = "0x1325D58", Offset = "0x1325D58", VA = "0x1325D58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600314A")]
		[Address(RVA = "0x1325E20", Offset = "0x1325E20", VA = "0x1325E20", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600314B")]
		[Address(RVA = "0x1325EC8", Offset = "0x1325EC8", VA = "0x1325EC8")]
		public NewGameTest()
		{
		}
	}
	[Token(Token = "0x20009F1")]
	[ActionCategory("Save")]
	public class SaveSettingsAction : FsmStateAction
	{
		[Token(Token = "0x600314C")]
		[Address(RVA = "0x1325ED0", Offset = "0x1325ED0", VA = "0x1325ED0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600314D")]
		[Address(RVA = "0x1325F78", Offset = "0x1325F78", VA = "0x1325F78")]
		public SaveSettingsAction()
		{
		}
	}
	[Token(Token = "0x20009F2")]
	[ActionCategory("Fungus")]
	public class SFXSettings : FsmStateAction
	{
		[Token(Token = "0x4002F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt volume;

		[Token(Token = "0x4002F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x600314E")]
		[Address(RVA = "0x1325F80", Offset = "0x1325F80", VA = "0x1325F80", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600314F")]
		[Address(RVA = "0x1325FA8", Offset = "0x1325FA8", VA = "0x1325FA8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003150")]
		[Address(RVA = "0x13260D4", Offset = "0x13260D4", VA = "0x13260D4")]
		public SFXSettings()
		{
		}
	}
	[Token(Token = "0x20009F3")]
	[ActionCategory("Save")]
	public class SnapModeSettings : FsmStateAction
	{
		[Token(Token = "0x4002F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt snapMode;

		[Token(Token = "0x4002F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x6003151")]
		[Address(RVA = "0x13260DC", Offset = "0x13260DC", VA = "0x13260DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003152")]
		[Address(RVA = "0x1326104", Offset = "0x1326104", VA = "0x1326104", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003153")]
		[Address(RVA = "0x1326220", Offset = "0x1326220", VA = "0x1326220")]
		public SnapModeSettings()
		{
		}
	}
	[Token(Token = "0x20009F4")]
	[ActionCategory("Save")]
	public class SnapModeSpeedSettings : FsmStateAction
	{
		[Token(Token = "0x4002F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt speed;

		[Token(Token = "0x4002F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x6003154")]
		[Address(RVA = "0x1326228", Offset = "0x1326228", VA = "0x1326228", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003155")]
		[Address(RVA = "0x1326250", Offset = "0x1326250", VA = "0x1326250", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003156")]
		[Address(RVA = "0x13263E4", Offset = "0x13263E4", VA = "0x13263E4")]
		public SnapModeSpeedSettings()
		{
		}
	}
	[Token(Token = "0x20009F5")]
	[ActionCategory("Save")]
	public class SnapModeVignetteSettings : FsmStateAction
	{
		[Token(Token = "0x4002F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmInt vignetteStrength;

		[Token(Token = "0x4002F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmBool load;

		[Token(Token = "0x6003157")]
		[Address(RVA = "0x13263EC", Offset = "0x13263EC", VA = "0x13263EC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003158")]
		[Address(RVA = "0x1326414", Offset = "0x1326414", VA = "0x1326414", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003159")]
		[Address(RVA = "0x13265A8", Offset = "0x13265A8", VA = "0x13265A8")]
		public SnapModeVignetteSettings()
		{
		}
	}
	[Token(Token = "0x20009F6")]
	[ActionCategory("Save")]
	public class SnapshotCollectibles : FsmStateAction
	{
		[Token(Token = "0x600315A")]
		[Address(RVA = "0x13265B0", Offset = "0x13265B0", VA = "0x13265B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600315B")]
		[Address(RVA = "0x132663C", Offset = "0x132663C", VA = "0x132663C")]
		public SnapshotCollectibles()
		{
		}
	}
	[Token(Token = "0x20009F7")]
	[ActionCategory(ActionCategory.StateMachine)]
	[Tooltip("Set the value of an Object Variable in another FSM.")]
	[ActionTarget(typeof(PlayMakerFSM), "gameObject,fsmName", false)]
	public class SetFsmFlowchart : FsmStateAction
	{
		[Token(Token = "0x4002F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[Tooltip("The GameObject that owns the FSM.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.FsmName)]
		[Tooltip("Optional name of FSM on Game Object")]
		public FsmString fsmName;

		[Token(Token = "0x4002F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The name of the FSM variable.")]
		[UIHint(UIHint.FsmObject)]
		[RequiredField]
		public FsmString variableName;

		[Token(Token = "0x4002F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Set the value of the variable.")]
		public Flowchart setValue;

		[Token(Token = "0x4002F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Repeat every frame. Useful if the value is changing.")]
		public bool everyFrame;

		[Token(Token = "0x4002F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject goLastFrame;

		[Token(Token = "0x4002F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string fsmNameLastFrame;

		[Token(Token = "0x4002F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayMakerFSM fsm;

		[Token(Token = "0x600315C")]
		[Address(RVA = "0x1326644", Offset = "0x1326644", VA = "0x1326644", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600315D")]
		[Address(RVA = "0x13266E0", Offset = "0x13266E0", VA = "0x13266E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600315E")]
		[Address(RVA = "0x132670C", Offset = "0x132670C", VA = "0x132670C")]
		private void DoSetFsmBool()
		{
		}

		[Token(Token = "0x600315F")]
		[Address(RVA = "0x1326964", Offset = "0x1326964", VA = "0x1326964", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003160")]
		[Address(RVA = "0x1326968", Offset = "0x1326968", VA = "0x1326968")]
		public SetFsmFlowchart()
		{
		}
	}
	[Token(Token = "0x20009F8")]
	[ActionCategory(ActionCategory.Transform)]
	public class GetTeleportPosition : FsmStateAction
	{
		[Token(Token = "0x4002F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmGameObject owner;

		[Token(Token = "0x4002F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmVector3 direction;

		[Token(Token = "0x4002F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmFloat distance;

		[Token(Token = "0x4002F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 storeResult;

		[Token(Token = "0x4002F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool checkNavmesh;

		[Token(Token = "0x4002F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool everyFrame;

		[Token(Token = "0x6003161")]
		[Address(RVA = "0x1326970", Offset = "0x1326970", VA = "0x1326970", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003162")]
		[Address(RVA = "0x13269B8", Offset = "0x13269B8", VA = "0x13269B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003163")]
		[Address(RVA = "0x1326B44", Offset = "0x1326B44", VA = "0x1326B44", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003164")]
		[Address(RVA = "0x13269E4", Offset = "0x13269E4", VA = "0x13269E4")]
		private void DoTeleport()
		{
		}

		[Token(Token = "0x6003165")]
		[Address(RVA = "0x1326B60", Offset = "0x1326B60", VA = "0x1326B60")]
		public GetTeleportPosition()
		{
		}
	}
	[Token(Token = "0x20009F9")]
	[ActionCategory(ActionCategory.Tween)]
	public class DOTweenPoke : FsmStateAction
	{
		[Token(Token = "0x4002F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		public FsmOwnerDefault target;

		[Token(Token = "0x4002F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmFloat duration;

		[Token(Token = "0x4002F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmVector3 strength;

		[Token(Token = "0x4002F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmVector3 rotationStrength;

		[Token(Token = "0x6003166")]
		[Address(RVA = "0x1326B70", Offset = "0x1326B70", VA = "0x1326B70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003167")]
		[Address(RVA = "0x1326B78", Offset = "0x1326B78", VA = "0x1326B78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003168")]
		[Address(RVA = "0x1326D14", Offset = "0x1326D14", VA = "0x1326D14")]
		protected void DoTween()
		{
		}

		[Token(Token = "0x6003169")]
		[Address(RVA = "0x1326D18", Offset = "0x1326D18", VA = "0x1326D18")]
		public DOTweenPoke()
		{
		}
	}
	[Token(Token = "0x20009FA")]
	[ActionCategory(ActionCategory.Tween)]
	[Tooltip("Tween a GameObject's position along parabola. Note: This action assumes that GameObject targets do not change during the tween.")]
	public class TweenParabola : TweenComponentBase<Transform>
	{
		[Token(Token = "0x4002F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Setup where to tween from.")]
		[ActionSection("From")]
		[Title("Options")]
		public PositionOptions fromOption;

		[Token(Token = "0x4002F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Optionally use a GameObject as the from position.")]
		public FsmGameObject fromTarget;

		[Token(Token = "0x4002F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Position to tween from.")]
		public FsmVector3 fromPosition;

		[Token(Token = "0x4002F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[ActionSection("To")]
		[Title("Options")]
		[Tooltip("Setup where to tween from.")]
		public PositionOptions toOption;

		[Token(Token = "0x4002F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Optionally use a GameObject as the to position.")]
		public FsmGameObject toTarget;

		[Token(Token = "0x4002F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Position to tween to.")]
		public FsmVector3 toPosition;

		[Token(Token = "0x4002F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Updates target position while tweening")]
		public FsmBool updateTarget;

		[Token(Token = "0x4002F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[ActionSection("Parabola")]
		public FsmFloat parabolaHeight;

		[NonSerialized]
		[Token(Token = "0x4002F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform transform;

		[NonSerialized]
		[Token(Token = "0x4002F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Transform fromTransform;

		[NonSerialized]
		[Token(Token = "0x4002F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform toTransform;

		[Token(Token = "0x170003C7")]
		public Vector3 StartPosition
		{
			[Token(Token = "0x600316B")]
			[Address(RVA = "0x1326D28", Offset = "0x1326D28", VA = "0x1326D28")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600316C")]
			[Address(RVA = "0x1326D38", Offset = "0x1326D38", VA = "0x1326D38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003C8")]
		public Vector3 EndPosition
		{
			[Token(Token = "0x600316D")]
			[Address(RVA = "0x1326D48", Offset = "0x1326D48", VA = "0x1326D48")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600316E")]
			[Address(RVA = "0x1326D58", Offset = "0x1326D58", VA = "0x1326D58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600316F")]
		[Address(RVA = "0x1326D68", Offset = "0x1326D68", VA = "0x1326D68", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003170")]
		[Address(RVA = "0x1326DFC", Offset = "0x1326DFC", VA = "0x1326DFC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003171")]
		[Address(RVA = "0x1326F88", Offset = "0x1326F88", VA = "0x1326F88")]
		private void InitStartPosition()
		{
		}

		[Token(Token = "0x6003172")]
		[Address(RVA = "0x1326FE4", Offset = "0x1326FE4", VA = "0x1326FE4")]
		private void InitEndPosition()
		{
		}

		[Token(Token = "0x6003173")]
		[Address(RVA = "0x1327044", Offset = "0x1327044", VA = "0x1327044", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6003174")]
		[Address(RVA = "0x1327184", Offset = "0x1327184", VA = "0x1327184")]
		public TweenParabola()
		{
		}
	}
	[Token(Token = "0x20009FB")]
	[ActionCategory(ActionCategory.Tween)]
	public class TweenRigWeight : TweenVariableBase<FsmFloat>
	{
		[Token(Token = "0x4002F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Rig rig;

		[Token(Token = "0x6003175")]
		[Address(RVA = "0x13271E8", Offset = "0x13271E8", VA = "0x13271E8", Slot = "65")]
		protected override object GetOffsetValue(object value, object offset)
		{
			return null;
		}

		[Token(Token = "0x6003176")]
		[Address(RVA = "0x13272A8", Offset = "0x13272A8", VA = "0x13272A8", Slot = "63")]
		protected override void DoTween()
		{
		}

		[Token(Token = "0x6003177")]
		[Address(RVA = "0x13273D0", Offset = "0x13273D0", VA = "0x13273D0")]
		public TweenRigWeight()
		{
		}
	}
	[Token(Token = "0x20009FC")]
	[ActionCategory("XR")]
	public class SetFoveationLevel : FsmStateAction
	{
		[Token(Token = "0x4002F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public OVRManager.FixedFoveatedRenderingLevel level;

		[Token(Token = "0x4002F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool dynamicFRR;

		[Token(Token = "0x6003178")]
		[Address(RVA = "0x1327418", Offset = "0x1327418", VA = "0x1327418", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003179")]
		[Address(RVA = "0x132748C", Offset = "0x132748C", VA = "0x132748C")]
		public SetFoveationLevel()
		{
		}
	}
	[Token(Token = "0x20009FD")]
	[ActionCategory("Weapon")]
	public class RangeWeaponBeginAttack : ComponentAction<RangeWeapon>
	{
		[Token(Token = "0x4002F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(RangeWeapon))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmVector3 target;

		[Token(Token = "0x170003C9")]
		private RangeWeapon rangeWeapon
		{
			[Token(Token = "0x600317A")]
			[Address(RVA = "0x132749C", Offset = "0x132749C", VA = "0x132749C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600317B")]
		[Address(RVA = "0x13274A4", Offset = "0x13274A4", VA = "0x13274A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600317C")]
		[Address(RVA = "0x132753C", Offset = "0x132753C", VA = "0x132753C")]
		public RangeWeaponBeginAttack()
		{
		}
	}
	[Token(Token = "0x20009FE")]
	[ActionCategory("Weapon")]
	public class SetWeaponOwner : ComponentAction<MeleeWeapon>
	{
		[Token(Token = "0x4002F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[CheckForComponent(typeof(MeleeWeapon))]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmGameObject owner;

		[Token(Token = "0x170003CA")]
		private MeleeWeapon meleeWeapon
		{
			[Token(Token = "0x600317D")]
			[Address(RVA = "0x1327584", Offset = "0x1327584", VA = "0x1327584")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600317E")]
		[Address(RVA = "0x132758C", Offset = "0x132758C", VA = "0x132758C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600317F")]
		[Address(RVA = "0x1327628", Offset = "0x1327628", VA = "0x1327628")]
		public SetWeaponOwner()
		{
		}
	}
	[Token(Token = "0x20009FF")]
	[ActionCategory("Weapon")]
	public class WeaponBeginAttack : ComponentAction<MeleeWeapon>
	{
		[Token(Token = "0x4002F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(MeleeWeapon))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmBool throwing;

		[Token(Token = "0x170003CB")]
		private MeleeWeapon meleeWeapon
		{
			[Token(Token = "0x6003180")]
			[Address(RVA = "0x1327670", Offset = "0x1327670", VA = "0x1327670")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003181")]
		[Address(RVA = "0x1327678", Offset = "0x1327678", VA = "0x1327678", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003182")]
		[Address(RVA = "0x1327714", Offset = "0x1327714", VA = "0x1327714")]
		public WeaponBeginAttack()
		{
		}
	}
	[Token(Token = "0x2000A00")]
	[ActionCategory("Weapon")]
	public class WeaponEndAttack : ComponentAction<MeleeWeapon>
	{
		[Token(Token = "0x4002F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[CheckForComponent(typeof(MeleeWeapon))]
		[RequiredField]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x170003CC")]
		private MeleeWeapon meleeWeapon
		{
			[Token(Token = "0x6003183")]
			[Address(RVA = "0x132775C", Offset = "0x132775C", VA = "0x132775C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003184")]
		[Address(RVA = "0x1327764", Offset = "0x1327764", VA = "0x1327764", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003185")]
		[Address(RVA = "0x13277E8", Offset = "0x13277E8", VA = "0x13277E8")]
		public WeaponEndAttack()
		{
		}
	}
}
namespace MA_Toolbox.Utils
{
	[Token(Token = "0x2000A01")]
	public static class MA_StringUtils
	{
		[Token(Token = "0x4002F7C")]
		private const string ALPHABET = "aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ";

		[Token(Token = "0x6003186")]
		[Address(RVA = "0x1327830", Offset = "0x1327830", VA = "0x1327830")]
		public static string RandomAlphabetString(int length)
		{
			return null;
		}

		[Token(Token = "0x6003187")]
		[Address(RVA = "0x13278BC", Offset = "0x13278BC", VA = "0x13278BC")]
		public static char RandomAlphabetChar()
		{
			return default(char);
		}
	}
}
namespace Bhaptics.SDK2
{
	[Token(Token = "0x2000A02")]
	public class PlayParamSample : MonoBehaviour
	{
		[Token(Token = "0x2000A03")]
		[CompilerGenerated]
		private sealed class <OnClickPlayCor>d__54 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayParamSample <>4__this;

			[Token(Token = "0x170003D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60031A3")]
				[Address(RVA = "0x1329184", Offset = "0x1329184", VA = "0x1329184", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60031A5")]
				[Address(RVA = "0x13291CC", Offset = "0x13291CC", VA = "0x13291CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60031A0")]
			[Address(RVA = "0x1328B64", Offset = "0x1328B64", VA = "0x1328B64")]
			[DebuggerHidden]
			public <OnClickPlayCor>d__54(int <>1__state)
			{
			}

			[Token(Token = "0x60031A1")]
			[Address(RVA = "0x1328F18", Offset = "0x1328F18", VA = "0x1328F18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60031A2")]
			[Address(RVA = "0x1328F1C", Offset = "0x1328F1C", VA = "0x1328F1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60031A4")]
			[Address(RVA = "0x132918C", Offset = "0x132918C", VA = "0x132918C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string SampleAppID;

		[Token(Token = "0x4002F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string SampleApiKey;

		[Token(Token = "0x4002F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Canvas")]
		[SerializeField]
		private Canvas initCanvas;

		[Token(Token = "0x4002F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Canvas mainCanvas;

		[Token(Token = "0x4002F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("Dropdown")]
		private Dropdown eventsDropdown;

		[Token(Token = "0x4002F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Slider")]
		[SerializeField]
		private Slider sliderIntensity;

		[Token(Token = "0x4002F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Slider sliderDuration;

		[Token(Token = "0x4002F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Slider sliderAngleX;

		[Token(Token = "0x4002F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Slider sliderOffsetY;

		[Token(Token = "0x4002F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("Text")]
		private Text intensityValueText;

		[Token(Token = "0x4002F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text durationValueText;

		[Token(Token = "0x4002F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Text angleXValueText;

		[Token(Token = "0x4002F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Text offsetYValueText;

		[Token(Token = "0x4002F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Text playButtonText;

		[Token(Token = "0x4002F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Button")]
		[SerializeField]
		private Button intensityResetButton;

		[Token(Token = "0x4002F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Button durationResetButton;

		[Token(Token = "0x4002F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Button angleXResetButton;

		[Token(Token = "0x4002F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Button offsetYResetButton;

		[Token(Token = "0x4002F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Sample")]
		[SerializeField]
		private BhapticsSettings sampleSettings;

		[Token(Token = "0x4002F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int requestId;

		[Token(Token = "0x4002F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private string eventName;

		[Token(Token = "0x4002F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private MappingMetaData[] events;

		[Token(Token = "0x4002F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UnityEngine.Coroutine onClickPlayCoroutine;

		[Token(Token = "0x4002F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private BhapticsSettings currentSettings;

		[Token(Token = "0x4002F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float intensity;

		[Token(Token = "0x4002F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float duration;

		[Token(Token = "0x4002F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float angleX;

		[Token(Token = "0x4002F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float offsetY;

		[Token(Token = "0x4002F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int selectedIndex;

		[Token(Token = "0x170003CD")]
		public float Intensity
		{
			[Token(Token = "0x6003188")]
			[Address(RVA = "0x1327928", Offset = "0x1327928", VA = "0x1327928")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003189")]
			[Address(RVA = "0x1327930", Offset = "0x1327930", VA = "0x1327930")]
			set
			{
			}
		}

		[Token(Token = "0x170003CE")]
		public float Duration
		{
			[Token(Token = "0x600318A")]
			[Address(RVA = "0x1327A70", Offset = "0x1327A70", VA = "0x1327A70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600318B")]
			[Address(RVA = "0x1327A78", Offset = "0x1327A78", VA = "0x1327A78")]
			set
			{
			}
		}

		[Token(Token = "0x170003CF")]
		public float AngleX
		{
			[Token(Token = "0x600318C")]
			[Address(RVA = "0x1327BB8", Offset = "0x1327BB8", VA = "0x1327BB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600318D")]
			[Address(RVA = "0x1327BC0", Offset = "0x1327BC0", VA = "0x1327BC0")]
			set
			{
			}
		}

		[Token(Token = "0x170003D0")]
		public float OffsetY
		{
			[Token(Token = "0x600318E")]
			[Address(RVA = "0x1327D00", Offset = "0x1327D00", VA = "0x1327D00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600318F")]
			[Address(RVA = "0x1327D08", Offset = "0x1327D08", VA = "0x1327D08")]
			set
			{
			}
		}

		[Token(Token = "0x170003D1")]
		public int SelectedIndex
		{
			[Token(Token = "0x6003190")]
			[Address(RVA = "0x1327E48", Offset = "0x1327E48", VA = "0x1327E48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6003191")]
			[Address(RVA = "0x1327E50", Offset = "0x1327E50", VA = "0x1327E50")]
			set
			{
			}
		}

		[Token(Token = "0x6003192")]
		[Address(RVA = "0x1327E58", Offset = "0x1327E58", VA = "0x1327E58")]
		private void Start()
		{
		}

		[Token(Token = "0x6003193")]
		[Address(RVA = "0x1327F74", Offset = "0x1327F74", VA = "0x1327F74")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003194")]
		[Address(RVA = "0x1327F98", Offset = "0x1327F98", VA = "0x1327F98")]
		public void OnClickPlay()
		{
		}

		[Token(Token = "0x6003195")]
		[Address(RVA = "0x1328220", Offset = "0x1328220", VA = "0x1328220")]
		public void SetOffsetY(string offsetYStr)
		{
		}

		[Token(Token = "0x6003196")]
		[Address(RVA = "0x1328260", Offset = "0x1328260", VA = "0x1328260")]
		public void OpenDeveloperPortal()
		{
		}

		[Token(Token = "0x6003197")]
		[Address(RVA = "0x13282A4", Offset = "0x13282A4", VA = "0x13282A4")]
		public void OpenGuideLink()
		{
		}

		[Token(Token = "0x6003198")]
		[Address(RVA = "0x13282E8", Offset = "0x13282E8", VA = "0x13282E8")]
		public void UseSampleSettings()
		{
		}

		[Token(Token = "0x6003199")]
		[Address(RVA = "0x1328708", Offset = "0x1328708", VA = "0x1328708")]
		private void PlayHaptic(string eventName, float intensity, float duration, float angleX, float offsetY)
		{
		}

		[Token(Token = "0x600319A")]
		[Address(RVA = "0x13280AC", Offset = "0x13280AC", VA = "0x13280AC")]
		private void StopHaptic()
		{
		}

		[Token(Token = "0x600319B")]
		[Address(RVA = "0x1328AAC", Offset = "0x1328AAC", VA = "0x1328AAC")]
		private void ResetValues()
		{
		}

		[Token(Token = "0x600319C")]
		[Address(RVA = "0x1328038", Offset = "0x1328038", VA = "0x1328038")]
		[IteratorStateMachine(typeof(<OnClickPlayCor>d__54))]
		private IEnumerator OnClickPlayCor()
		{
			return null;
		}

		[Token(Token = "0x600319D")]
		[Address(RVA = "0x1328B8C", Offset = "0x1328B8C", VA = "0x1328B8C")]
		private void SetupApplicationData()
		{
		}

		[Token(Token = "0x600319E")]
		[Address(RVA = "0x1327ECC", Offset = "0x1327ECC", VA = "0x1327ECC")]
		private void CheckApplicationSetting()
		{
		}

		[Token(Token = "0x600319F")]
		[Address(RVA = "0x1328E54", Offset = "0x1328E54", VA = "0x1328E54")]
		public PlayParamSample()
		{
		}
	}
	[Token(Token = "0x2000A04")]
	public class AndroidHaptic
	{
		[Token(Token = "0x4002F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static AndroidJavaObject androidJavaObject;

		[Token(Token = "0x4002F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly object[] PlayParams;

		[Token(Token = "0x4002F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly object[] EmptyParams;

		[Token(Token = "0x4002FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly object[] IsPlayingParams;

		[Token(Token = "0x4002FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<HapticDevice> deviceList;

		[Token(Token = "0x4002FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected IntPtr AndroidJavaObjectPtr;

		[Token(Token = "0x4002FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected IntPtr InitializePtr;

		[Token(Token = "0x4002FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected IntPtr PlayPtr;

		[Token(Token = "0x4002FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IntPtr PlayPosPtr;

		[Token(Token = "0x4002FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IntPtr PlayParamPtr;

		[Token(Token = "0x4002FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected IntPtr PlayPosParamPtr;

		[Token(Token = "0x4002FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IntPtr StopIntPtr;

		[Token(Token = "0x4002FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected IntPtr StopByEventIdPtr;

		[Token(Token = "0x4002FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected IntPtr StopAllPtr;

		[Token(Token = "0x4002FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected IntPtr SubmitRegisteredPtr;

		[Token(Token = "0x4002FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected IntPtr SubmitRegisteredWithTimePtr;

		[Token(Token = "0x4002FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected IntPtr RegisterPtr;

		[Token(Token = "0x4002FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected IntPtr RegisterReflectedPtr;

		[Token(Token = "0x4002FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected IntPtr PingPtr;

		[Token(Token = "0x4002FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected IntPtr PingAllPtr;

		[Token(Token = "0x4002FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected IntPtr IsRegisteredPtr;

		[Token(Token = "0x4002FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected IntPtr IsPlayingPtr;

		[Token(Token = "0x4002FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected IntPtr IsPlayingAnythingPtr;

		[Token(Token = "0x4002FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected IntPtr IsPlayingByEventIdPtr;

		[Token(Token = "0x4002FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected IntPtr IsPlayingByRequestIdPtr;

		[Token(Token = "0x4002FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected IntPtr ToggleStreamPtr;

		[Token(Token = "0x4002FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected IntPtr IsStreamingEnablePtr;

		[Token(Token = "0x4002FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected IntPtr GetStreamingHostsPtr;

		[Token(Token = "0x4002FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected IntPtr ShowBluetoothPtr;

		[Token(Token = "0x4002FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected IntPtr RefreshPairingInfoPtr;

		[Token(Token = "0x60031A6")]
		[Address(RVA = "0x13291D4", Offset = "0x13291D4", VA = "0x13291D4")]
		public AndroidHaptic()
		{
		}

		[Token(Token = "0x60031A7")]
		[Address(RVA = "0x1329EC8", Offset = "0x1329EC8", VA = "0x1329EC8")]
		public bool CheckBhapticsAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x60031A8")]
		[Address(RVA = "0x1329C50", Offset = "0x1329C50", VA = "0x1329C50")]
		public List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x60031A9")]
		[Address(RVA = "0x132A12C", Offset = "0x132A12C", VA = "0x132A12C")]
		public void Initialize(string workspaceId, string sdkKey, string json)
		{
		}

		[Token(Token = "0x60031AA")]
		[Address(RVA = "0x132A3AC", Offset = "0x132A3AC", VA = "0x132A3AC")]
		public bool IsConnect()
		{
			return default(bool);
		}

		[Token(Token = "0x60031AB")]
		[Address(RVA = "0x132A3B4", Offset = "0x132A3B4", VA = "0x132A3B4")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60031AC")]
		[Address(RVA = "0x132A4D8", Offset = "0x132A4D8", VA = "0x132A4D8")]
		public bool IsPlayingByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60031AD")]
		[Address(RVA = "0x132A5CC", Offset = "0x132A5CC", VA = "0x132A5CC")]
		public bool IsPlayingByRequestId(int requestId)
		{
			return default(bool);
		}

		[Token(Token = "0x60031AE")]
		[Address(RVA = "0x132A6EC", Offset = "0x132A6EC", VA = "0x132A6EC")]
		public int Play(string eventId)
		{
			return default(int);
		}

		[Token(Token = "0x60031AF")]
		[Address(RVA = "0x132A878", Offset = "0x132A878", VA = "0x132A878")]
		public int PlayParam(string eventId, float intensity, float duration, float angleX, float offsetY)
		{
			return default(int);
		}

		[Token(Token = "0x60031B0")]
		[Address(RVA = "0x132AB6C", Offset = "0x132AB6C", VA = "0x132AB6C")]
		public int PlayMotors(int position, int[] motors, int durationMillis)
		{
			return default(int);
		}

		[Token(Token = "0x60031B1")]
		[Address(RVA = "0x132AD5C", Offset = "0x132AD5C", VA = "0x132AD5C")]
		public bool StopByRequestId(int key)
		{
			return default(bool);
		}

		[Token(Token = "0x60031B2")]
		[Address(RVA = "0x132AE84", Offset = "0x132AE84", VA = "0x132AE84")]
		public bool StopByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60031B3")]
		[Address(RVA = "0x132B09C", Offset = "0x132B09C", VA = "0x132B09C")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x60031B4")]
		[Address(RVA = "0x132B24C", Offset = "0x132B24C", VA = "0x132B24C")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60031B5")]
		[Address(RVA = "0x132B364", Offset = "0x132B364", VA = "0x132B364")]
		public void TogglePosition(string address)
		{
		}

		[Token(Token = "0x60031B6")]
		[Address(RVA = "0x132B4A4", Offset = "0x132B4A4", VA = "0x132B4A4")]
		public void PingAll()
		{
		}

		[Token(Token = "0x60031B7")]
		[Address(RVA = "0x132B534", Offset = "0x132B534", VA = "0x132B534")]
		public void Ping(string address)
		{
		}

		[Token(Token = "0x60031B8")]
		[Address(RVA = "0x132A320", Offset = "0x132A320", VA = "0x132A320")]
		private void CallNativeVoidMethod(IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x60031B9")]
		[Address(RVA = "0x132A448", Offset = "0x132A448", VA = "0x132A448")]
		private bool CallNativeBoolMethod(IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}

		[Token(Token = "0x60031BA")]
		[Address(RVA = "0x132A7E8", Offset = "0x132A7E8", VA = "0x132A7E8")]
		private int CallNativeIntMethod(IntPtr methodPtr, object[] param)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000A05")]
	internal class AndroidUtils
	{
		[Token(Token = "0x60031BC")]
		[Address(RVA = "0x132B62C", Offset = "0x132B62C", VA = "0x132B62C")]
		public static void CallNativeVoidMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x60031BD")]
		[Address(RVA = "0x132B834", Offset = "0x132B834", VA = "0x132B834")]
		public static bool CallNativeBoolMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}

		[Token(Token = "0x60031BE")]
		[Address(RVA = "0x132BA44", Offset = "0x132BA44", VA = "0x132BA44")]
		public static int CallNativeIntMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
			return default(int);
		}

		[Token(Token = "0x60031BF")]
		[Address(RVA = "0x132BD0C", Offset = "0x132BD0C", VA = "0x132BD0C")]
		public AndroidUtils()
		{
		}
	}
	[Token(Token = "0x2000A06")]
	public class BhapticsLibrary
	{
		[Token(Token = "0x4002FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object Lock;

		[Token(Token = "0x4002FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<HapticDevice> EmptyDevices;

		[Token(Token = "0x4002FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidHaptic android;

		[Token(Token = "0x4002FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool _initialized;

		[Token(Token = "0x4002FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private static bool isAvailable;

		[Token(Token = "0x4002FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private static bool isAvailableChecked;

		[Token(Token = "0x60031C0")]
		[Address(RVA = "0x132BD14", Offset = "0x132BD14", VA = "0x132BD14")]
		public static bool IsBhapticsAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x60031C1")]
		[Address(RVA = "0x132BDA8", Offset = "0x132BDA8", VA = "0x132BDA8")]
		public static bool IsBhapticsAvailableForce()
		{
			return default(bool);
		}

		[Token(Token = "0x60031C2")]
		[Address(RVA = "0x132837C", Offset = "0x132837C", VA = "0x132837C")]
		public static bool Initialize(string appId, string apiKey, string json)
		{
			return default(bool);
		}

		[Token(Token = "0x60031C3")]
		[Address(RVA = "0x132C2AC", Offset = "0x132C2AC", VA = "0x132C2AC")]
		public static void Destroy()
		{
		}

		[Token(Token = "0x60031C4")]
		[Address(RVA = "0x132C47C", Offset = "0x132C47C", VA = "0x132C47C")]
		public static bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60031C5")]
		[Address(RVA = "0x132C7AC", Offset = "0x132C7AC", VA = "0x132C7AC")]
		public static int Play(string eventId)
		{
			return default(int);
		}

		[Token(Token = "0x60031C6")]
		[Address(RVA = "0x132886C", Offset = "0x132886C", VA = "0x132886C")]
		public static int PlayParam(string eventId, float intensity, float duration, float angleX, float offsetY)
		{
			return default(int);
		}

		[Token(Token = "0x60031C7")]
		[Address(RVA = "0x132CA20", Offset = "0x132CA20", VA = "0x132CA20")]
		public static int PlayMotors(int position, int[] motors, int durationMillis)
		{
			return default(int);
		}

		[Token(Token = "0x60031C8")]
		[Address(RVA = "0x132CBC8", Offset = "0x132CBC8", VA = "0x132CBC8")]
		public static bool StopByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60031C9")]
		[Address(RVA = "0x13289D4", Offset = "0x13289D4", VA = "0x13289D4")]
		public static bool StopInt(int requestId)
		{
			return default(bool);
		}

		[Token(Token = "0x60031CA")]
		[Address(RVA = "0x132CDB8", Offset = "0x132CDB8", VA = "0x132CDB8")]
		public static bool StopAll()
		{
			return default(bool);
		}

		[Token(Token = "0x60031CB")]
		[Address(RVA = "0x132CEF4", Offset = "0x132CEF4", VA = "0x132CEF4")]
		public static bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60031CC")]
		[Address(RVA = "0x132D030", Offset = "0x132D030", VA = "0x132D030")]
		public static bool IsPlayingByEventId(string eventId)
		{
			return default(bool);
		}

		[Token(Token = "0x60031CD")]
		[Address(RVA = "0x13290AC", Offset = "0x13290AC", VA = "0x13290AC")]
		public static bool IsPlayingByRequestId(int requestId)
		{
			return default(bool);
		}

		[Token(Token = "0x60031CE")]
		[Address(RVA = "0x132D224", Offset = "0x132D224", VA = "0x132D224")]
		public static List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x60031CF")]
		[Address(RVA = "0x132C518", Offset = "0x132C518", VA = "0x132C518")]
		public static List<HapticDevice> GetConnectedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x60031D0")]
		[Address(RVA = "0x132D4C0", Offset = "0x132D4C0", VA = "0x132D4C0")]
		public static List<HapticDevice> GetPairedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x60031D1")]
		[Address(RVA = "0x132D74C", Offset = "0x132D74C", VA = "0x132D74C")]
		public static void Ping(PositionType pos)
		{
		}

		[Token(Token = "0x60031D2")]
		[Address(RVA = "0x132D8D8", Offset = "0x132D8D8", VA = "0x132D8D8")]
		public static void Ping(HapticDevice targetDevice)
		{
		}

		[Token(Token = "0x60031D3")]
		[Address(RVA = "0x132DA4C", Offset = "0x132DA4C", VA = "0x132DA4C")]
		public static void PingAll()
		{
		}

		[Token(Token = "0x60031D4")]
		[Address(RVA = "0x132DB84", Offset = "0x132DB84", VA = "0x132DB84")]
		public static void TogglePosition(HapticDevice targetDevice)
		{
		}

		[Token(Token = "0x60031D5")]
		[Address(RVA = "0x132DCF4", Offset = "0x132DCF4", VA = "0x132DCF4")]
		public static void OnApplicationFocus()
		{
		}

		[Token(Token = "0x60031D6")]
		[Address(RVA = "0x132DD40", Offset = "0x132DD40", VA = "0x132DD40")]
		public static void OnApplicationPause()
		{
		}

		[Token(Token = "0x60031D7")]
		[Address(RVA = "0x132DD8C", Offset = "0x132DD8C", VA = "0x132DD8C")]
		public BhapticsLibrary()
		{
		}
	}
	[Token(Token = "0x2000A07")]
	public class bhaptics_library
	{
		[Token(Token = "0x4002FC1")]
		private const string ModuleName = "bhaptics_library";

		[PreserveSig]
		[Token(Token = "0x60031D9")]
		[Address(RVA = "0x132C1D0", Offset = "0x132C1D0", VA = "0x132C1D0")]
		public static extern bool registryAndInit(string sdkAPIKey, string workspaceId, string initData);

		[PreserveSig]
		[Token(Token = "0x60031DA")]
		[Address(RVA = "0x132DE94", Offset = "0x132DE94", VA = "0x132DE94")]
		public static extern bool registryAndInitHost(string sdkAPIKey, string workspaceId, string initData, string url);

		[PreserveSig]
		[Token(Token = "0x60031DB")]
		[Address(RVA = "0x132C160", Offset = "0x132C160", VA = "0x132C160")]
		public static extern bool wsIsConnected();

		[PreserveSig]
		[Token(Token = "0x60031DC")]
		[Address(RVA = "0x132C418", Offset = "0x132C418", VA = "0x132C418")]
		public static extern void wsClose();

		[PreserveSig]
		[Token(Token = "0x60031DD")]
		[Address(RVA = "0x132C8C0", Offset = "0x132C8C0", VA = "0x132C8C0")]
		public static extern int play(string key);

		[PreserveSig]
		[Token(Token = "0x60031DE")]
		[Address(RVA = "0x132C954", Offset = "0x132C954", VA = "0x132C954")]
		public static extern int playPosParam(string key, int position, float intensity, float duration, float angleX, float offsetY);

		[PreserveSig]
		[Token(Token = "0x60031DF")]
		[Address(RVA = "0x132CD38", Offset = "0x132CD38", VA = "0x132CD38")]
		public static extern bool stop(int key);

		[PreserveSig]
		[Token(Token = "0x60031E0")]
		[Address(RVA = "0x132CCA0", Offset = "0x132CCA0", VA = "0x132CCA0")]
		public static extern bool stopByEventId(string eventId);

		[PreserveSig]
		[Token(Token = "0x60031E1")]
		[Address(RVA = "0x132CE84", Offset = "0x132CE84", VA = "0x132CE84")]
		public static extern bool stopAll();

		[PreserveSig]
		[Token(Token = "0x60031E2")]
		[Address(RVA = "0x132CFC0", Offset = "0x132CFC0", VA = "0x132CFC0")]
		public static extern bool isPlaying();

		[PreserveSig]
		[Token(Token = "0x60031E3")]
		[Address(RVA = "0x132D1A0", Offset = "0x132D1A0", VA = "0x132D1A0")]
		public static extern bool isPlayingByRequestId(int key);

		[PreserveSig]
		[Token(Token = "0x60031E4")]
		[Address(RVA = "0x132D108", Offset = "0x132D108", VA = "0x132D108")]
		public static extern bool isPlayingByEventId(string eventId);

		[PreserveSig]
		[Token(Token = "0x60031E5")]
		[Address(RVA = "0x132DF8C", Offset = "0x132DF8C", VA = "0x132DF8C")]
		public static extern bool isbHapticsConnected(int position);

		[PreserveSig]
		[Token(Token = "0x60031E6")]
		[Address(RVA = "0x132D9B4", Offset = "0x132D9B4", VA = "0x132D9B4")]
		public static extern bool ping(string address);

		[PreserveSig]
		[Token(Token = "0x60031E7")]
		[Address(RVA = "0x132DB14", Offset = "0x132DB14", VA = "0x132DB14")]
		public static extern bool pingAll();

		[PreserveSig]
		[Token(Token = "0x60031E8")]
		[Address(RVA = "0x132DC5C", Offset = "0x132DC5C", VA = "0x132DC5C")]
		public static extern bool swapPosition(string address);

		[PreserveSig]
		[Token(Token = "0x60031E9")]
		[Address(RVA = "0x132E010", Offset = "0x132E010", VA = "0x132E010")]
		public static extern IntPtr getDeviceInfoJson();

		[PreserveSig]
		[Token(Token = "0x60031EA")]
		[Address(RVA = "0x132BFFC", Offset = "0x132BFFC", VA = "0x132BFFC")]
		public static extern bool isPlayerInstalled();

		[PreserveSig]
		[Token(Token = "0x60031EB")]
		[Address(RVA = "0x132C06C", Offset = "0x132C06C", VA = "0x132C06C")]
		public static extern bool isPlayerRunning();

		[PreserveSig]
		[Token(Token = "0x60031EC")]
		[Address(RVA = "0x132C0DC", Offset = "0x132C0DC", VA = "0x132C0DC")]
		public static extern bool launchPlayer(bool b);

		[PreserveSig]
		[Token(Token = "0x60031ED")]
		[Address(RVA = "0x132E078", Offset = "0x132E078", VA = "0x132E078")]
		public static extern IntPtr bHapticsGetHapticMessage(string apiKey, string appId, int lastVersion, out int status);

		[PreserveSig]
		[Token(Token = "0x60031EE")]
		[Address(RVA = "0x132E144", Offset = "0x132E144", VA = "0x132E144")]
		public static extern IntPtr bHapticsGetHapticMappings(string apiKey, string appId, int lastVersion, out int status);

		[PreserveSig]
		[Token(Token = "0x60031EF")]
		[Address(RVA = "0x132CB24", Offset = "0x132CB24", VA = "0x132CB24")]
		public static extern int playDot(int position, int durationMillis, int[] motors, int size);

		[Token(Token = "0x60031F0")]
		[Address(RVA = "0x132D314", Offset = "0x132D314", VA = "0x132D314")]
		public static List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x60031F1")]
		[Address(RVA = "0x132E480", Offset = "0x132E480", VA = "0x132E480")]
		public static List<MappingMetaData> EditorGetEventList(string appId, string apiKey, int lastVersion, out int status)
		{
			return null;
		}

		[Token(Token = "0x60031F2")]
		[Address(RVA = "0x132E66C", Offset = "0x132E66C", VA = "0x132E66C")]
		public static string EditorGetSettings(string appId, string apiKey, int lastVersion, out int status2)
		{
			return null;
		}

		[Token(Token = "0x60031F3")]
		[Address(RVA = "0x132E210", Offset = "0x132E210", VA = "0x132E210")]
		private static string PtrToStringUtf8(IntPtr ptr)
		{
			return null;
		}

		[Token(Token = "0x60031F4")]
		[Address(RVA = "0x132E6F8", Offset = "0x132E6F8", VA = "0x132E6F8")]
		public bhaptics_library()
		{
		}
	}
	[Token(Token = "0x2000A08")]
	public class BhapticsEvent
	{
		[Token(Token = "0x4002FC2")]
		public const string CREATEREPEL671 = "createrepel671";

		[Token(Token = "0x4002FC3")]
		public const string UIRIGHTTOUCH739 = "uirighttouch739";

		[Token(Token = "0x4002FC4")]
		public const string CREATECRACK795 = "createcrack795";

		[Token(Token = "0x4002FC5")]
		public const string MAGNETHOVER144 = "magnethover144";

		[Token(Token = "0x4002FC6")]
		public const string STABMOTH3 = "stabmoth3";

		[Token(Token = "0x4002FC7")]
		public const string STABFINISHER = "stabfinisher";

		[Token(Token = "0x4002FC8")]
		public const string UILEFTTOUCH190 = "uilefttouch190";

		[Token(Token = "0x4002FC9")]
		public const string MOTHTAKEDAMAGE628 = "mothtakedamage628";

		[Token(Token = "0x4002FCA")]
		public const string INSCRIPTIONCOMPLETED479 = "inscriptioncompleted479";

		[Token(Token = "0x4002FCB")]
		public const string CREATEGLUE926 = "createglue926";

		[Token(Token = "0x4002FCC")]
		public const string MOTHTOUCH860 = "mothtouch860";

		[Token(Token = "0x4002FCD")]
		public const string MOTHDIE360 = "mothdie360";

		[Token(Token = "0x4002FCE")]
		public const string MERCURYCOLLECT261 = "mercurycollect261";

		[Token(Token = "0x4002FCF")]
		public const string SENDRESOURCES653 = "sendresources653";

		[Token(Token = "0x4002FD0")]
		public const string MOTHRESPAWN133 = "mothrespawn133";

		[Token(Token = "0x4002FD1")]
		public const string MOTHHEAL152 = "mothheal152";

		[Token(Token = "0x4002FD2")]
		public const string SULFURCOLLECT972 = "sulfurcollect972";

		[Token(Token = "0x4002FD3")]
		public const string MAGNETHOVER904 = "magnethover904";

		[Token(Token = "0x4002FD4")]
		public const string STABMOTH2 = "stabmoth2";

		[Token(Token = "0x4002FD5")]
		public const string SLASHMOTH4 = "slashmoth4";

		[Token(Token = "0x4002FD6")]
		public const string SLASHMOTH5 = "slashmoth5";

		[Token(Token = "0x4002FD7")]
		public const string SLASHMOTH6 = "slashmoth6";

		[Token(Token = "0x4002FD8")]
		public const string DASHMOTH = "dashmoth";

		[Token(Token = "0x4002FD9")]
		public const string SLASHMOTH3 = "slashmoth3";

		[Token(Token = "0x4002FDA")]
		public const string ALCHEMISTVO543 = "alchemistvo543";

		[Token(Token = "0x4002FDB")]
		public const string SALTCOLLECT203 = "saltcollect203";

		[Token(Token = "0x4002FDC")]
		public const string INSCRIPTIONLOOP183 = "inscriptionloop183";

		[Token(Token = "0x4002FDD")]
		public const string CHEKPOINTREACHED30 = "chekpointreached30";

		[Token(Token = "0x4002FDE")]
		public const string SHAKEMIXTURE372 = "shakemixture372";

		[Token(Token = "0x4002FDF")]
		public const string MIXTUREWOBBLE19 = "mixturewobble19";

		[Token(Token = "0x4002FE0")]
		public const string SLASHMOTH1 = "slashmoth1";

		[Token(Token = "0x4002FE1")]
		public const string STABMOTH1 = "stabmoth1";

		[Token(Token = "0x4002FE2")]
		public const string SLASHMOTH2 = "slashmoth2";

		[Token(Token = "0x4002FE3")]
		public const string MAGNETPRESS819 = "magnetpress819";

		[Token(Token = "0x60031F5")]
		[Address(RVA = "0x132E700", Offset = "0x132E700", VA = "0x132E700")]
		public BhapticsEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A09")]
	internal class Device
	{
		[Token(Token = "0x4002FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool paired;

		[Token(Token = "0x4002FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string deviceName;

		[Token(Token = "0x4002FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int position;

		[Token(Token = "0x4002FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool connected;

		[Token(Token = "0x4002FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string address;

		[Token(Token = "0x4002FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int battery;

		[Token(Token = "0x4002FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool audioJackIn;

		[Token(Token = "0x60031F6")]
		[Address(RVA = "0x132E708", Offset = "0x132E708", VA = "0x132E708")]
		public Device()
		{
		}
	}
	[Token(Token = "0x2000A0A")]
	public enum PositionType
	{
		[Token(Token = "0x4002FEC")]
		Vest,
		[Token(Token = "0x4002FED")]
		ForearmL,
		[Token(Token = "0x4002FEE")]
		ForearmR,
		[Token(Token = "0x4002FEF")]
		Head,
		[Token(Token = "0x4002FF0")]
		HandL,
		[Token(Token = "0x4002FF1")]
		HandR,
		[Token(Token = "0x4002FF2")]
		FootL,
		[Token(Token = "0x4002FF3")]
		FootR,
		[Token(Token = "0x4002FF4")]
		GloveL,
		[Token(Token = "0x4002FF5")]
		GloveR
	}
	[Serializable]
	[Token(Token = "0x2000A0B")]
	public class MappingMetaData
	{
		[Token(Token = "0x4002FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int durationMillis;

		[Token(Token = "0x4002FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string key;

		[Token(Token = "0x4002FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string description;

		[Token(Token = "0x4002FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isAudio;

		[Token(Token = "0x4002FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public long updateTime;

		[Token(Token = "0x4002FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string[] positions;

		[Token(Token = "0x60031F7")]
		[Address(RVA = "0x132E710", Offset = "0x132E710", VA = "0x132E710")]
		public MappingMetaData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A0C")]
	internal class MappingMessage
	{
		[Token(Token = "0x4002FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool status;

		[Token(Token = "0x4002FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MappingMetaData> message;

		[Token(Token = "0x60031F8")]
		[Address(RVA = "0x132E624", Offset = "0x132E624", VA = "0x132E624")]
		public static MappingMessage CreateFromJSON(string jsonString)
		{
			return null;
		}

		[Token(Token = "0x60031F9")]
		[Address(RVA = "0x132E718", Offset = "0x132E718", VA = "0x132E718")]
		public MappingMessage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A0D")]
	public class DeployMessage
	{
		[Token(Token = "0x4002FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4002FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int version;

		[Token(Token = "0x60031FA")]
		[Address(RVA = "0x132E720", Offset = "0x132E720", VA = "0x132E720")]
		public DeployMessage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A0E")]
	public class DeployHttpMessage
	{
		[Token(Token = "0x4003000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool status;

		[Token(Token = "0x4003001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DeployMessage message;

		[Token(Token = "0x60031FB")]
		[Address(RVA = "0x132E728", Offset = "0x132E728", VA = "0x132E728")]
		public static DeployHttpMessage CreateFromJSON(string jsonString)
		{
			return null;
		}

		[Token(Token = "0x60031FC")]
		[Address(RVA = "0x132E770", Offset = "0x132E770", VA = "0x132E770")]
		public DeployHttpMessage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A0F")]
	public class HapticDevice
	{
		[Token(Token = "0x4003002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsPaired;

		[Token(Token = "0x4003003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool IsConnected;

		[Token(Token = "0x4003004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string DeviceName;

		[Token(Token = "0x4003005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionType Position;

		[Token(Token = "0x4003006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Address;

		[Token(Token = "0x4003007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositionType[] Candidates;

		[Token(Token = "0x4003008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsAudioJack;

		[Token(Token = "0x4003009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int Battery;

		[Token(Token = "0x60031FD")]
		[Address(RVA = "0x132E778", Offset = "0x132E778", VA = "0x132E778")]
		public HapticDevice()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A10")]
	internal class DeviceListMessage
	{
		[Token(Token = "0x400300A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Device[] devices;

		[Token(Token = "0x60031FE")]
		[Address(RVA = "0x132E780", Offset = "0x132E780", VA = "0x132E780")]
		public DeviceListMessage()
		{
		}
	}
	[Token(Token = "0x2000A11")]
	public class BhapticsHelpers
	{
		[Token(Token = "0x60031FF")]
		[Address(RVA = "0x132E788", Offset = "0x132E788", VA = "0x132E788")]
		public static float Angle(Vector3 fwd, Vector3 targetDir)
		{
			return default(float);
		}

		[Token(Token = "0x6003200")]
		[Address(RVA = "0x132E92C", Offset = "0x132E92C", VA = "0x132E92C")]
		private static int AngleDir(Vector3 fwd, Vector3 targetDir, Vector3 up)
		{
			return default(int);
		}

		[Token(Token = "0x6003201")]
		[Address(RVA = "0x132E984", Offset = "0x132E984", VA = "0x132E984")]
		public static string ErrorCodeToMessage(int code)
		{
			return null;
		}

		[Token(Token = "0x6003202")]
		[Address(RVA = "0x1329FDC", Offset = "0x1329FDC", VA = "0x1329FDC")]
		public static List<HapticDevice> ConvertToBhapticsDevices(string[] deviceJson)
		{
			return null;
		}

		[Token(Token = "0x6003203")]
		[Address(RVA = "0x132E354", Offset = "0x132E354", VA = "0x132E354")]
		internal static List<HapticDevice> Convert(Device[] deviceJson)
		{
			return null;
		}

		[Token(Token = "0x6003204")]
		[Address(RVA = "0x132EA9C", Offset = "0x132EA9C", VA = "0x132EA9C")]
		private static HapticDevice Convert(Device d)
		{
			return null;
		}

		[Token(Token = "0x6003205")]
		[Address(RVA = "0x132EB7C", Offset = "0x132EB7C", VA = "0x132EB7C")]
		private static PositionType[] ToCandidates(int type)
		{
			return null;
		}

		[Token(Token = "0x6003206")]
		[Address(RVA = "0x132EB6C", Offset = "0x132EB6C", VA = "0x132EB6C")]
		private static PositionType ToDeviceType(int type)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6003207")]
		[Address(RVA = "0x132ECDC", Offset = "0x132ECDC", VA = "0x132ECDC")]
		public BhapticsHelpers()
		{
		}
	}
	[Token(Token = "0x2000A12")]
	public class BhapticsSDK2 : MonoBehaviour
	{
		[Token(Token = "0x400300B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BhapticsSDK2 instance;

		[Token(Token = "0x400300C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BhapticsSettings bhapticsSettings;

		[Token(Token = "0x6003208")]
		[Address(RVA = "0x132ECE4", Offset = "0x132ECE4", VA = "0x132ECE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003209")]
		[Address(RVA = "0x132F198", Offset = "0x132F198", VA = "0x132F198")]
		private void OnApplicationFocus(bool pauseStatus)
		{
		}

		[Token(Token = "0x600320A")]
		[Address(RVA = "0x132F1FC", Offset = "0x132F1FC", VA = "0x132F1FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600320B")]
		[Address(RVA = "0x132F2A0", Offset = "0x132F2A0", VA = "0x132F2A0")]
		public BhapticsSDK2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A13")]
	public class BhapticsConfig
	{
		[Token(Token = "0x400300D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string appId;

		[Token(Token = "0x400300E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string apiKey;

		[Token(Token = "0x600320C")]
		[Address(RVA = "0x132F2A8", Offset = "0x132F2A8", VA = "0x132F2A8")]
		public BhapticsConfig()
		{
		}
	}
	[Token(Token = "0x2000A14")]
	public class BhapticsSettings : ScriptableObject
	{
		[Token(Token = "0x400300F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BhapticsSettings instance;

		[Token(Token = "0x4003010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string appName;

		[Token(Token = "0x4003011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string appId;

		[Token(Token = "0x4003012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string apiKey;

		[Token(Token = "0x4003013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int lastDeployVersion;

		[Token(Token = "0x4003014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MappingMetaData[] eventData;

		[Token(Token = "0x4003015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		private string defaultDeploy;

		[Token(Token = "0x170003D4")]
		public static BhapticsSettings Instance
		{
			[Token(Token = "0x600320D")]
			[Address(RVA = "0x1327E80", Offset = "0x1327E80", VA = "0x1327E80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D5")]
		public string AppName
		{
			[Token(Token = "0x600320E")]
			[Address(RVA = "0x132F508", Offset = "0x132F508", VA = "0x132F508")]
			get
			{
				return null;
			}
			[Token(Token = "0x600320F")]
			[Address(RVA = "0x132F510", Offset = "0x132F510", VA = "0x132F510")]
			set
			{
			}
		}

		[Token(Token = "0x170003D6")]
		public string AppId
		{
			[Token(Token = "0x6003210")]
			[Address(RVA = "0x132F518", Offset = "0x132F518", VA = "0x132F518")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003211")]
			[Address(RVA = "0x132F520", Offset = "0x132F520", VA = "0x132F520")]
			set
			{
			}
		}

		[Token(Token = "0x170003D7")]
		public string ApiKey
		{
			[Token(Token = "0x6003212")]
			[Address(RVA = "0x132F528", Offset = "0x132F528", VA = "0x132F528")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003213")]
			[Address(RVA = "0x132F530", Offset = "0x132F530", VA = "0x132F530")]
			set
			{
			}
		}

		[Token(Token = "0x170003D8")]
		public MappingMetaData[] EventData
		{
			[Token(Token = "0x6003214")]
			[Address(RVA = "0x132F538", Offset = "0x132F538", VA = "0x132F538")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003215")]
			[Address(RVA = "0x132F540", Offset = "0x132F540", VA = "0x132F540")]
			set
			{
			}
		}

		[Token(Token = "0x170003D9")]
		public int LastDeployVersion
		{
			[Token(Token = "0x6003216")]
			[Address(RVA = "0x132F548", Offset = "0x132F548", VA = "0x132F548")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6003217")]
			[Address(RVA = "0x132F550", Offset = "0x132F550", VA = "0x132F550")]
			set
			{
			}
		}

		[Token(Token = "0x170003DA")]
		public string DefaultDeploy
		{
			[Token(Token = "0x6003218")]
			[Address(RVA = "0x132F558", Offset = "0x132F558", VA = "0x132F558")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003219")]
			[Address(RVA = "0x132F560", Offset = "0x132F560", VA = "0x132F560")]
			set
			{
			}
		}

		[Token(Token = "0x600321A")]
		[Address(RVA = "0x132F568", Offset = "0x132F568", VA = "0x132F568")]
		public static void VerifyScriptableObject()
		{
		}

		[Token(Token = "0x600321B")]
		[Address(RVA = "0x132F56C", Offset = "0x132F56C", VA = "0x132F56C")]
		public static void ResetInstance()
		{
		}

		[Token(Token = "0x600321C")]
		[Address(RVA = "0x132F310", Offset = "0x132F310", VA = "0x132F310")]
		private static void LoadInstance()
		{
		}

		[Token(Token = "0x600321D")]
		[Address(RVA = "0x132F770", Offset = "0x132F770", VA = "0x132F770")]
		public BhapticsSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A15")]
	public class PositonIconSetting
	{
		[Token(Token = "0x4003016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite connect;

		[Token(Token = "0x4003017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite disconnect;

		[Token(Token = "0x600321E")]
		[Address(RVA = "0x132F800", Offset = "0x132F800", VA = "0x132F800")]
		public PositonIconSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A16")]
	public class IconSetting
	{
		[Token(Token = "0x4003018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("Setting Icons")]
		public PositonIconSetting Vest;

		[Token(Token = "0x4003019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PositonIconSetting Head;

		[Token(Token = "0x400301A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositonIconSetting Arm;

		[Token(Token = "0x400301B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PositonIconSetting Foot;

		[Token(Token = "0x400301C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositonIconSetting Hand;

		[Token(Token = "0x400301D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PositonIconSetting GloveL;

		[Token(Token = "0x400301E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PositonIconSetting GloveR;

		[Token(Token = "0x600321F")]
		[Address(RVA = "0x132F808", Offset = "0x132F808", VA = "0x132F808")]
		public IconSetting()
		{
		}
	}
	[Token(Token = "0x2000A17")]
	public class BhapticsDeviceUI : MonoBehaviour
	{
		[Token(Token = "0x400301F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string SelectHexColor;

		[Token(Token = "0x4003020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string SelectHoverHexColor;

		[Token(Token = "0x4003021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string DisableHexColor;

		[Token(Token = "0x4003022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string DisableHoverHexColor;

		[Token(Token = "0x4003023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("UI")]
		[SerializeField]
		private Image icon;

		[Token(Token = "0x4003024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IconSetting widgetSetting;

		[Token(Token = "0x4003025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite TactsuitWiredIcon;

		[Token(Token = "0x4003026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image batteryLowImage;

		[Token(Token = "0x4003027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("Connect Menu")]
		private GameObject ConnectMenu;

		[Token(Token = "0x4003028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button pingButton;

		[Token(Token = "0x4003029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button lButton;

		[Token(Token = "0x400302A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button rButton;

		[Token(Token = "0x400302B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject wiredNotification;

		[Token(Token = "0x400302C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("Disconnect Menu")]
		private GameObject DisconnectMenu;

		[Token(Token = "0x400302D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HapticDevice device;

		[Token(Token = "0x6003220")]
		[Address(RVA = "0x132F810", Offset = "0x132F810", VA = "0x132F810")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003221")]
		[Address(RVA = "0x132F9F0", Offset = "0x132F9F0", VA = "0x132F9F0")]
		public void RefreshDevice(HapticDevice d)
		{
		}

		[Token(Token = "0x6003222")]
		[Address(RVA = "0x132FBCC", Offset = "0x132FBCC", VA = "0x132FBCC")]
		private void RenderConnectMenu()
		{
		}

		[Token(Token = "0x6003223")]
		[Address(RVA = "0x132FC54", Offset = "0x132FC54", VA = "0x132FC54")]
		private void RenderDisconnectMenu()
		{
		}

		[Token(Token = "0x6003224")]
		[Address(RVA = "0x132FCC4", Offset = "0x132FCC4", VA = "0x132FCC4")]
		private void UpdateButtons()
		{
		}

		[Token(Token = "0x6003225")]
		[Address(RVA = "0x132FAA0", Offset = "0x132FAA0", VA = "0x132FAA0")]
		private void UpdateIcon(HapticDevice d)
		{
		}

		[Token(Token = "0x6003226")]
		[Address(RVA = "0x13300A8", Offset = "0x13300A8", VA = "0x13300A8")]
		private Sprite GetSprite(PositonIconSetting icon, bool connected)
		{
			return null;
		}

		[Token(Token = "0x6003227")]
		[Address(RVA = "0x13300CC", Offset = "0x13300CC", VA = "0x13300CC")]
		private void Ping()
		{
		}

		[Token(Token = "0x6003228")]
		[Address(RVA = "0x1330134", Offset = "0x1330134", VA = "0x1330134")]
		private void ToLeft()
		{
		}

		[Token(Token = "0x6003229")]
		[Address(RVA = "0x13301F4", Offset = "0x13301F4", VA = "0x13301F4")]
		private void ToRight()
		{
		}

		[Token(Token = "0x600322A")]
		[Address(RVA = "0x13302B4", Offset = "0x13302B4", VA = "0x13302B4")]
		private Color ToColor(string hex)
		{
			return default(Color);
		}

		[Token(Token = "0x600322B")]
		[Address(RVA = "0x132FF74", Offset = "0x132FF74", VA = "0x132FF74")]
		private void ChangeButtonColor(Button targetButton, bool isSelect)
		{
		}

		[Token(Token = "0x600322C")]
		[Address(RVA = "0x132FF2C", Offset = "0x132FF2C", VA = "0x132FF2C")]
		private static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x600322D")]
		[Address(RVA = "0x132FF50", Offset = "0x132FF50", VA = "0x132FF50")]
		private static bool IsRight(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x600322E")]
		[Address(RVA = "0x13302E8", Offset = "0x13302E8", VA = "0x13302E8")]
		public BhapticsDeviceUI()
		{
		}
	}
	[Token(Token = "0x2000A18")]
	public class BhapticsUI : MonoBehaviour
	{
		[Token(Token = "0x400302E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float intervalRefreshTime;

		[Token(Token = "0x400302F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform mainPanel;

		[Token(Token = "0x4003030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("Devices UI")]
		private Transform devicesContainer;

		[Token(Token = "0x4003031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform deviceListPageUi;

		[Token(Token = "0x4003032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button deviceListNextPageButton;

		[Token(Token = "0x4003033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button deviceListBackPageButton;

		[Token(Token = "0x4003034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Text deviceListPageText;

		[Token(Token = "0x4003035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private BhapticsDeviceUI devicePrefab;

		[Token(Token = "0x4003036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Header("No Paired Device UI")]
		private GameObject noPairedDeviceUi;

		[Token(Token = "0x4003037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button helpButton;

		[Token(Token = "0x4003038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Button bHapticsLinkButton;

		[Token(Token = "0x4003039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject helpUi;

		[Token(Token = "0x400303A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject helpDescriptionPC;

		[Token(Token = "0x400303B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject helpDescriptionQuest;

		[Token(Token = "0x400303C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Button helpCloseButton;

		[Token(Token = "0x400303D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<BhapticsDeviceUI> controllers;

		[Token(Token = "0x400303E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoxCollider mainPanelCollider;

		[Token(Token = "0x400303F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector2 defaultMainPanelSize;

		[Token(Token = "0x4003040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector2 defaultDeviceContainerSize;

		[Token(Token = "0x4003041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int deviceListSize;

		[Token(Token = "0x4003042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int deviceListPageIndex;

		[Token(Token = "0x4003043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int expandHeight;

		[Token(Token = "0x4003044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int expandDeviceCount;

		[Token(Token = "0x4003045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int pageActivateDeviceCount;

		[Token(Token = "0x4003046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int pageExpandHeight;

		[Token(Token = "0x4003047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int maxPageIndex;

		[Token(Token = "0x6003230")]
		[Address(RVA = "0x13303E4", Offset = "0x13303E4", VA = "0x13303E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6003231")]
		[Address(RVA = "0x1330890", Offset = "0x1330890", VA = "0x1330890")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6003232")]
		[Address(RVA = "0x13308DC", Offset = "0x13308DC", VA = "0x13308DC")]
		private void Refresh()
		{
		}

		[Token(Token = "0x6003233")]
		[Address(RVA = "0x1330FBC", Offset = "0x1330FBC", VA = "0x1330FBC")]
		private void OnHelp()
		{
		}

		[Token(Token = "0x6003234")]
		[Address(RVA = "0x1330FC4", Offset = "0x1330FC4", VA = "0x1330FC4")]
		private void CloseHelpNotification()
		{
		}

		[Token(Token = "0x6003235")]
		[Address(RVA = "0x1330FCC", Offset = "0x1330FCC", VA = "0x1330FCC")]
		private void OpenLink()
		{
		}

		[Token(Token = "0x6003236")]
		[Address(RVA = "0x1331010", Offset = "0x1331010", VA = "0x1331010")]
		private void NextPage()
		{
		}

		[Token(Token = "0x6003237")]
		[Address(RVA = "0x1331034", Offset = "0x1331034", VA = "0x1331034")]
		private void BackPage()
		{
		}

		[Token(Token = "0x6003238")]
		[Address(RVA = "0x1330F30", Offset = "0x1330F30", VA = "0x1330F30")]
		private void SetActiveHelpGameObject(bool value)
		{
		}

		[Token(Token = "0x6003239")]
		[Address(RVA = "0x1331058", Offset = "0x1331058", VA = "0x1331058")]
		public BhapticsUI()
		{
		}
	}
}
