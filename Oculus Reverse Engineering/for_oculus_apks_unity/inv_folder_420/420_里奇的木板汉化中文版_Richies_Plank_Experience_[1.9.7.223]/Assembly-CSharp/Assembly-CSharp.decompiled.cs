using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Xml;
using DarkTonic.MasterAudio;
using DigitalOpus.MB.Core;
using Dreamteck.Splines;
using Il2CppDummyDll;
using Interaction.VR;
using Oculus.Platform;
using Oculus.Platform.Models;
using Oculus.Spatializer.Propagation;
using QUESTRPE;
using RootMotion.FinalIK;
using Splines;
using TMPro;
using Unity.XR.PXR;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;
using Virtence.VText;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class XmasJetplane : MonoBehaviour
{
	[Token(Token = "0x20002EF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE0B4", Offset = "0x7EE0B4")]
	private sealed class <LifeCycle>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XmasJetplane <>4__this;

		[Token(Token = "0x1700022D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600169D")]
			[Address(RVA = "0x14651CC", Offset = "0x14651CC", VA = "0x14651CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600169F")]
			[Address(RVA = "0x1465234", Offset = "0x1465234", VA = "0x1465234", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x1464F28", Offset = "0x1464F28", VA = "0x1464F28")]
		[DebuggerHidden]
		public <LifeCycle>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x1464F5C", Offset = "0x1464F5C", VA = "0x1464F5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x1464F60", Offset = "0x1464F60", VA = "0x1464F60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x14651D4", Offset = "0x14651D4", VA = "0x14651D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SplineFollower splineFollower;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private XmasSound engineSound;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float disableAfterDuration;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine lifeCoroutineHandle;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 originalPosition;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion originalRotation;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x1464C44", Offset = "0x1464C44", VA = "0x1464C44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x1464CAC", Offset = "0x1464CAC", VA = "0x1464CAC")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7F835C", Offset = "0x7F835C")]
	public void Show()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x1464D00", Offset = "0x1464D00", VA = "0x1464D00")]
	public void Setup()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x1464CB0", Offset = "0x1464CB0", VA = "0x1464CB0")]
	private void StartLifeCoroutine()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x1464DD0", Offset = "0x1464DD0", VA = "0x1464DD0")]
	private void StopHideCoroutine()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x1464EB8", Offset = "0x1464EB8", VA = "0x1464EB8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8394", Offset = "0x7F8394")]
	private IEnumerator LifeCycle()
	{
		return null;
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x1464F54", Offset = "0x1464F54", VA = "0x1464F54")]
	public XmasJetplane()
	{
	}
}
[Serializable]
[Token(Token = "0x2000003")]
public class XmasSound
{
	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private string id;

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x1465098", Offset = "0x1465098", VA = "0x1465098")]
	public void PlaySound3DAtTransform(Transform atTransform, bool follow = false, bool stopCurrent = false)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x146523C", Offset = "0x146523C", VA = "0x146523C")]
	public void PlaySound()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x1464E00", Offset = "0x1464E00", VA = "0x1464E00")]
	public void StopSound(bool fade = false, float fadeDuration = 1f)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x14652C8", Offset = "0x14652C8", VA = "0x14652C8")]
	public void PlayPlaylist()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x1465334", Offset = "0x1465334", VA = "0x1465334")]
	public void StopPlaylist()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x1465394", Offset = "0x1465394", VA = "0x1465394")]
	public void SetPitch(float pitch)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x1465420", Offset = "0x1465420", VA = "0x1465420")]
	public XmasSound()
	{
	}
}
[Token(Token = "0x2000004")]
public class XmasSplineSignal : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float duration;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AnimationCurve curve;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color gizmoColor;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private BoxCollider coll;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UnityEvent completeEvent;

	[Token(Token = "0x17000001")]
	public float Duration
	{
		[Token(Token = "0x600000F")]
		[Address(RVA = "0x1465428", Offset = "0x1465428", VA = "0x1465428")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000002")]
	public AnimationCurve Curve
	{
		[Token(Token = "0x6000010")]
		[Address(RVA = "0x1465430", Offset = "0x1465430", VA = "0x1465430")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x1465438", Offset = "0x1465438", VA = "0x1465438")]
	public void OnComplete()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x146544C", Offset = "0x146544C", VA = "0x146544C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x146558C", Offset = "0x146558C", VA = "0x146558C")]
	public XmasSplineSignal()
	{
	}
}
[Token(Token = "0x2000005")]
public class Loom : MonoBehaviour
{
	[Token(Token = "0x20002F0")]
	public struct DelayedQueueItem
	{
		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float time;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Action action;
	}

	[Serializable]
	[Token(Token = "0x20002F1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE0C4", Offset = "0x7EE0C4")]
	private sealed class <>c
	{
		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<DelayedQueueItem, bool> <>9__21_0;

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xBEADA0", Offset = "0xBEADA0", VA = "0xBEADA0")]
		public <>c()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xBEADA8", Offset = "0xBEADA8", VA = "0xBEADA8")]
		internal bool <Update>b__21_0(DelayedQueueItem d)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int maxThreads;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int numThreads;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Loom _current;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int _count;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool initialized;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly List<Action> _actions;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly List<DelayedQueueItem> _delayed;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly List<DelayedQueueItem> _currentDelayed;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Action> _currentActions;

	[Token(Token = "0x17000003")]
	public static Loom Current
	{
		[Token(Token = "0x6000015")]
		[Address(RVA = "0xBE9E98", Offset = "0xBE9E98", VA = "0xBE9E98")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000014")]
		[Address(RVA = "0xBE9DD4", Offset = "0xBE9DD4", VA = "0xBE9DD4")]
		set
		{
		}
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xBE9FF4", Offset = "0xBE9FF4", VA = "0xBE9FF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xBE9F04", Offset = "0xBE9F04", VA = "0xBE9F04")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xBEA06C", Offset = "0xBEA06C", VA = "0xBEA06C")]
	public static void QueueOnMainThread(Action action)
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xBEA0D4", Offset = "0xBEA0D4", VA = "0xBEA0D4")]
	public static void QueueOnMainThread(Action action, float time)
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xBEA358", Offset = "0xBEA358", VA = "0xBEA358")]
	public static Thread RunAsync(Action a)
	{
		return null;
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xBEA468", Offset = "0xBEA468", VA = "0xBEA468")]
	private static void RunAction(object action)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xBEA610", Offset = "0xBEA610", VA = "0xBEA610")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xBEA6E0", Offset = "0xBEA6E0", VA = "0xBEA6E0")]
	private void Start()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xBEA6E4", Offset = "0xBEA6E4", VA = "0xBEA6E4")]
	private void Update()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xBEAC10", Offset = "0xBEAC10", VA = "0xBEAC10")]
	public Loom()
	{
	}
}
[Token(Token = "0x2000006")]
public class GenericEventArgs<T> : EventArgs, IGenericEventArgs<T>
{
	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T _value;

	[Token(Token = "0x17000004")]
	public T Value
	{
		[Token(Token = "0x6000021")]
		get
		{
			return (T)null;
		}
	}

	[Token(Token = "0x6000022")]
	public GenericEventArgs(T value)
	{
	}
}
[Token(Token = "0x2000007")]
public interface IGenericEventArgs<T>
{
	[Token(Token = "0x17000005")]
	T Value
	{
		[Token(Token = "0x6000023")]
		get;
	}
}
[Serializable]
[Token(Token = "0x2000008")]
public class VTextParameter
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float m_depth;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float m_bevel;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool m_needTangents;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	private bool m_backface;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float m_crease;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private int m_quality;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private string m_fontname;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private ShadowCastingMode m_shadowCastMode;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private bool m_receiveShadows;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	[SerializeField]
	private bool m_useLightProbes;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
	[HideInInspector]
	private bool m_modified;

	[Token(Token = "0x17000006")]
	public float Depth
	{
		[Token(Token = "0x6000038")]
		[Address(RVA = "0xC3DCF4", Offset = "0xC3DCF4", VA = "0xC3DCF4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000039")]
		[Address(RVA = "0xC3DCFC", Offset = "0xC3DCFC", VA = "0xC3DCFC")]
		set
		{
		}
	}

	[Token(Token = "0x17000007")]
	public float Crease
	{
		[Token(Token = "0x600003A")]
		[Address(RVA = "0xC3DF14", Offset = "0xC3DF14", VA = "0xC3DF14")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600003B")]
		[Address(RVA = "0xC3DF1C", Offset = "0xC3DF1C", VA = "0xC3DF1C")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public float Bevel
	{
		[Token(Token = "0x600003C")]
		[Address(RVA = "0xC3E010", Offset = "0xC3E010", VA = "0xC3E010")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600003D")]
		[Address(RVA = "0xC3DE04", Offset = "0xC3DE04", VA = "0xC3DE04")]
		set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public int Quality
	{
		[Token(Token = "0x600003E")]
		[Address(RVA = "0xC3E018", Offset = "0xC3E018", VA = "0xC3E018")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600003F")]
		[Address(RVA = "0xC3E020", Offset = "0xC3E020", VA = "0xC3E020")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public bool Backface
	{
		[Token(Token = "0x6000040")]
		[Address(RVA = "0xC3E0D0", Offset = "0xC3E0D0", VA = "0xC3E0D0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000041")]
		[Address(RVA = "0xC3E0D8", Offset = "0xC3E0D8", VA = "0xC3E0D8")]
		set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public bool GenerateTangents
	{
		[Token(Token = "0x6000042")]
		[Address(RVA = "0xC3E194", Offset = "0xC3E194", VA = "0xC3E194")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000043")]
		[Address(RVA = "0xC3E19C", Offset = "0xC3E19C", VA = "0xC3E19C")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public string Fontname
	{
		[Token(Token = "0x6000044")]
		[Address(RVA = "0xC3E258", Offset = "0xC3E258", VA = "0xC3E258")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000045")]
		[Address(RVA = "0xC3E260", Offset = "0xC3E260", VA = "0xC3E260")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public ShadowCastingMode ShadowCastMode
	{
		[Token(Token = "0x6000046")]
		[Address(RVA = "0xC3E318", Offset = "0xC3E318", VA = "0xC3E318")]
		get
		{
			return default(ShadowCastingMode);
		}
		[Token(Token = "0x6000047")]
		[Address(RVA = "0xC3E320", Offset = "0xC3E320", VA = "0xC3E320")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public bool ReceiveShadows
	{
		[Token(Token = "0x6000048")]
		[Address(RVA = "0xC3E3C4", Offset = "0xC3E3C4", VA = "0xC3E3C4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000049")]
		[Address(RVA = "0xC3E3CC", Offset = "0xC3E3CC", VA = "0xC3E3CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public bool UseLightProbes
	{
		[Token(Token = "0x600004A")]
		[Address(RVA = "0xC3E474", Offset = "0xC3E474", VA = "0xC3E474")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600004B")]
		[Address(RVA = "0xC3E47C", Offset = "0xC3E47C", VA = "0xC3E47C")]
		set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event EventHandler<GenericEventArgs<float>> DepthChanged
	{
		[Token(Token = "0x6000024")]
		[Address(RVA = "0xC3D024", Offset = "0xC3D024", VA = "0xC3D024")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F83F8", Offset = "0x7F83F8")]
		add
		{
		}
		[Token(Token = "0x6000025")]
		[Address(RVA = "0xC3D0C8", Offset = "0xC3D0C8", VA = "0xC3D0C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8408", Offset = "0x7F8408")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event EventHandler<GenericEventArgs<float>> BevelChanged
	{
		[Token(Token = "0x6000026")]
		[Address(RVA = "0xC3D16C", Offset = "0xC3D16C", VA = "0xC3D16C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8418", Offset = "0x7F8418")]
		add
		{
		}
		[Token(Token = "0x6000027")]
		[Address(RVA = "0xC3D210", Offset = "0xC3D210", VA = "0xC3D210")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8428", Offset = "0x7F8428")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event EventHandler<GenericEventArgs<bool>> NeedTangentsChanged
	{
		[Token(Token = "0x6000028")]
		[Address(RVA = "0xC3D2B4", Offset = "0xC3D2B4", VA = "0xC3D2B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8438", Offset = "0x7F8438")]
		add
		{
		}
		[Token(Token = "0x6000029")]
		[Address(RVA = "0xC3D358", Offset = "0xC3D358", VA = "0xC3D358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8448", Offset = "0x7F8448")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event EventHandler<GenericEventArgs<bool>> BackfaceChanged
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0xC3D3FC", Offset = "0xC3D3FC", VA = "0xC3D3FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8458", Offset = "0x7F8458")]
		add
		{
		}
		[Token(Token = "0x600002B")]
		[Address(RVA = "0xC3D4A0", Offset = "0xC3D4A0", VA = "0xC3D4A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8468", Offset = "0x7F8468")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event EventHandler<GenericEventArgs<float>> CreaseChanged
	{
		[Token(Token = "0x600002C")]
		[Address(RVA = "0xC3D544", Offset = "0xC3D544", VA = "0xC3D544")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8478", Offset = "0x7F8478")]
		add
		{
		}
		[Token(Token = "0x600002D")]
		[Address(RVA = "0xC3D5E8", Offset = "0xC3D5E8", VA = "0xC3D5E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8488", Offset = "0x7F8488")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event EventHandler<GenericEventArgs<int>> QualityChanged
	{
		[Token(Token = "0x600002E")]
		[Address(RVA = "0xC3D68C", Offset = "0xC3D68C", VA = "0xC3D68C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8498", Offset = "0x7F8498")]
		add
		{
		}
		[Token(Token = "0x600002F")]
		[Address(RVA = "0xC3D730", Offset = "0xC3D730", VA = "0xC3D730")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F84A8", Offset = "0x7F84A8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event EventHandler<GenericEventArgs<string>> FontNameChanged
	{
		[Token(Token = "0x6000030")]
		[Address(RVA = "0xC3D7D4", Offset = "0xC3D7D4", VA = "0xC3D7D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F84B8", Offset = "0x7F84B8")]
		add
		{
		}
		[Token(Token = "0x6000031")]
		[Address(RVA = "0xC3D878", Offset = "0xC3D878", VA = "0xC3D878")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F84C8", Offset = "0x7F84C8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event EventHandler<GenericEventArgs<ShadowCastingMode>> ShadowCastingModeChanged
	{
		[Token(Token = "0x6000032")]
		[Address(RVA = "0xC3D91C", Offset = "0xC3D91C", VA = "0xC3D91C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F84D8", Offset = "0x7F84D8")]
		add
		{
		}
		[Token(Token = "0x6000033")]
		[Address(RVA = "0xC3D9C0", Offset = "0xC3D9C0", VA = "0xC3D9C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F84E8", Offset = "0x7F84E8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event EventHandler<GenericEventArgs<bool>> ReceiveShadowsChanged
	{
		[Token(Token = "0x6000034")]
		[Address(RVA = "0xC3DA64", Offset = "0xC3DA64", VA = "0xC3DA64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F84F8", Offset = "0x7F84F8")]
		add
		{
		}
		[Token(Token = "0x6000035")]
		[Address(RVA = "0xC3DB08", Offset = "0xC3DB08", VA = "0xC3DB08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8508", Offset = "0x7F8508")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event EventHandler<GenericEventArgs<bool>> UseLightProbesChanged
	{
		[Token(Token = "0x6000036")]
		[Address(RVA = "0xC3DBAC", Offset = "0xC3DBAC", VA = "0xC3DBAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8518", Offset = "0x7F8518")]
		add
		{
		}
		[Token(Token = "0x6000037")]
		[Address(RVA = "0xC3DC50", Offset = "0xC3DC50", VA = "0xC3DC50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8528", Offset = "0x7F8528")]
		remove
		{
		}
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xC3C020", Offset = "0xC3C020", VA = "0xC3C020")]
	public bool CheckClearModified()
	{
		return default(bool);
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xC3A624", Offset = "0xC3A624", VA = "0xC3A624")]
	public VTextParameter()
	{
	}
}
[Serializable]
[Token(Token = "0x2000009")]
public class VTextLayout
{
	[Token(Token = "0x20002F2")]
	public enum align
	{
		[Token(Token = "0x40012B5")]
		Base,
		[Token(Token = "0x40012B6")]
		Start,
		[Token(Token = "0x40012B7")]
		Center,
		[Token(Token = "0x40012B8")]
		End,
		[Token(Token = "0x40012B9")]
		Block
	}

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_horizontal;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private align m_major;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private align m_minor;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float m_size;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float m_spacing;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float m_glyphSpacing;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AnimationCurve m_curveXZ;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AnimationCurve m_curveXY;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool m_orientXZ;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	private bool m_orientXY;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	[SerializeField]
	private bool m_isCircular;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float m_startRadius;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float m_endRadius;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float m_circleRadius;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private bool m_animateRadius;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AnimationCurve m_curveRadius;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	private bool m_modified;

	[Token(Token = "0x17000010")]
	public bool Horizontal
	{
		[Token(Token = "0x600005A")]
		[Address(RVA = "0xC3CA24", Offset = "0xC3CA24", VA = "0xC3CA24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600005B")]
		[Address(RVA = "0xC3CA2C", Offset = "0xC3CA2C", VA = "0xC3CA2C")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public align Major
	{
		[Token(Token = "0x600005C")]
		[Address(RVA = "0xC3CAE8", Offset = "0xC3CAE8", VA = "0xC3CAE8")]
		get
		{
			return default(align);
		}
		[Token(Token = "0x600005D")]
		[Address(RVA = "0xC3CAF0", Offset = "0xC3CAF0", VA = "0xC3CAF0")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public align Minor
	{
		[Token(Token = "0x600005E")]
		[Address(RVA = "0xC3CBAC", Offset = "0xC3CBAC", VA = "0xC3CBAC")]
		get
		{
			return default(align);
		}
		[Token(Token = "0x600005F")]
		[Address(RVA = "0xC3CBB4", Offset = "0xC3CBB4", VA = "0xC3CBB4")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public float Size
	{
		[Token(Token = "0x6000060")]
		[Address(RVA = "0xC3CC64", Offset = "0xC3CC64", VA = "0xC3CC64")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000061")]
		[Address(RVA = "0xC3CC6C", Offset = "0xC3CC6C", VA = "0xC3CC6C")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public float Spacing
	{
		[Token(Token = "0x6000062")]
		[Address(RVA = "0xC3CD24", Offset = "0xC3CD24", VA = "0xC3CD24")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000063")]
		[Address(RVA = "0xC3CD2C", Offset = "0xC3CD2C", VA = "0xC3CD2C")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public float GlyphSpacing
	{
		[Token(Token = "0x6000064")]
		[Address(RVA = "0xC3CDE4", Offset = "0xC3CDE4", VA = "0xC3CDE4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000065")]
		[Address(RVA = "0xC3CDEC", Offset = "0xC3CDEC", VA = "0xC3CDEC")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public AnimationCurve CurveXZ
	{
		[Token(Token = "0x6000066")]
		[Address(RVA = "0xC3CEA4", Offset = "0xC3CEA4", VA = "0xC3CEA4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000067")]
		[Address(RVA = "0xC3CEAC", Offset = "0xC3CEAC", VA = "0xC3CEAC")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public AnimationCurve CurveXY
	{
		[Token(Token = "0x6000068")]
		[Address(RVA = "0xC3CEBC", Offset = "0xC3CEBC", VA = "0xC3CEBC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000069")]
		[Address(RVA = "0xC3CEC4", Offset = "0xC3CEC4", VA = "0xC3CEC4")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public bool OrientationXZ
	{
		[Token(Token = "0x600006A")]
		[Address(RVA = "0xC3CED4", Offset = "0xC3CED4", VA = "0xC3CED4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600006B")]
		[Address(RVA = "0xC3CEDC", Offset = "0xC3CEDC", VA = "0xC3CEDC")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public bool OrientationXY
	{
		[Token(Token = "0x600006C")]
		[Address(RVA = "0xC3CF04", Offset = "0xC3CF04", VA = "0xC3CF04")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600006D")]
		[Address(RVA = "0xC3CF0C", Offset = "0xC3CF0C", VA = "0xC3CF0C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public bool OrientationCircular
	{
		[Token(Token = "0x600006E")]
		[Address(RVA = "0xC3CF34", Offset = "0xC3CF34", VA = "0xC3CF34")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600006F")]
		[Address(RVA = "0xC3CF3C", Offset = "0xC3CF3C", VA = "0xC3CF3C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public float StartRadius
	{
		[Token(Token = "0x6000070")]
		[Address(RVA = "0xC3CF64", Offset = "0xC3CF64", VA = "0xC3CF64")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000071")]
		[Address(RVA = "0xC3CF6C", Offset = "0xC3CF6C", VA = "0xC3CF6C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public float EndRadius
	{
		[Token(Token = "0x6000072")]
		[Address(RVA = "0xC3CF88", Offset = "0xC3CF88", VA = "0xC3CF88")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000073")]
		[Address(RVA = "0xC3CF90", Offset = "0xC3CF90", VA = "0xC3CF90")]
		set
		{
		}
	}

	[Token(Token = "0x1700001D")]
	public float CircleRadius
	{
		[Token(Token = "0x6000074")]
		[Address(RVA = "0xC3CFAC", Offset = "0xC3CFAC", VA = "0xC3CFAC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000075")]
		[Address(RVA = "0xC3CFB4", Offset = "0xC3CFB4", VA = "0xC3CFB4")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public bool AnimateRadius
	{
		[Token(Token = "0x6000076")]
		[Address(RVA = "0xC3CFD0", Offset = "0xC3CFD0", VA = "0xC3CFD0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000077")]
		[Address(RVA = "0xC3CFD8", Offset = "0xC3CFD8", VA = "0xC3CFD8")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public AnimationCurve CurveRadius
	{
		[Token(Token = "0x6000078")]
		[Address(RVA = "0xC3D000", Offset = "0xC3D000", VA = "0xC3D000")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000079")]
		[Address(RVA = "0xC3D008", Offset = "0xC3D008", VA = "0xC3D008")]
		set
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event EventHandler<GenericEventArgs<bool>> IsHorizontalLayoutChanged
	{
		[Token(Token = "0x600004E")]
		[Address(RVA = "0xC3C274", Offset = "0xC3C274", VA = "0xC3C274")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8538", Offset = "0x7F8538")]
		add
		{
		}
		[Token(Token = "0x600004F")]
		[Address(RVA = "0xC3C318", Offset = "0xC3C318", VA = "0xC3C318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8548", Offset = "0x7F8548")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event EventHandler<GenericEventArgs<float>> SizeChanged
	{
		[Token(Token = "0x6000050")]
		[Address(RVA = "0xC3C3BC", Offset = "0xC3C3BC", VA = "0xC3C3BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8558", Offset = "0x7F8558")]
		add
		{
		}
		[Token(Token = "0x6000051")]
		[Address(RVA = "0xC3C460", Offset = "0xC3C460", VA = "0xC3C460")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8568", Offset = "0x7F8568")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event EventHandler<GenericEventArgs<align>> MajorChanged
	{
		[Token(Token = "0x6000052")]
		[Address(RVA = "0xC3C504", Offset = "0xC3C504", VA = "0xC3C504")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8578", Offset = "0x7F8578")]
		add
		{
		}
		[Token(Token = "0x6000053")]
		[Address(RVA = "0xC3C5A8", Offset = "0xC3C5A8", VA = "0xC3C5A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8588", Offset = "0x7F8588")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event EventHandler<GenericEventArgs<align>> MinorChanged
	{
		[Token(Token = "0x6000054")]
		[Address(RVA = "0xC3C64C", Offset = "0xC3C64C", VA = "0xC3C64C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8598", Offset = "0x7F8598")]
		add
		{
		}
		[Token(Token = "0x6000055")]
		[Address(RVA = "0xC3C6F0", Offset = "0xC3C6F0", VA = "0xC3C6F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F85A8", Offset = "0x7F85A8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event EventHandler<GenericEventArgs<float>> LineSpacingChanged
	{
		[Token(Token = "0x6000056")]
		[Address(RVA = "0xC3C794", Offset = "0xC3C794", VA = "0xC3C794")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F85B8", Offset = "0x7F85B8")]
		add
		{
		}
		[Token(Token = "0x6000057")]
		[Address(RVA = "0xC3C838", Offset = "0xC3C838", VA = "0xC3C838")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F85C8", Offset = "0x7F85C8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event EventHandler<GenericEventArgs<float>> GlyphSpacingChanged
	{
		[Token(Token = "0x6000058")]
		[Address(RVA = "0xC3C8DC", Offset = "0xC3C8DC", VA = "0xC3C8DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F85D8", Offset = "0x7F85D8")]
		add
		{
		}
		[Token(Token = "0x6000059")]
		[Address(RVA = "0xC3C980", Offset = "0xC3C980", VA = "0xC3C980")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F85E8", Offset = "0x7F85E8")]
		remove
		{
		}
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xC3A69C", Offset = "0xC3A69C", VA = "0xC3A69C")]
	public VTextLayout()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xC3AC70", Offset = "0xC3AC70", VA = "0xC3AC70")]
	public bool CheckClearModified()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x200000A")]
public class VTextPhysics
{
	[Token(Token = "0x20002F3")]
	public enum ColliderType
	{
		[Token(Token = "0x40012BB")]
		None,
		[Token(Token = "0x40012BC")]
		Box,
		[Token(Token = "0x40012BD")]
		Mesh
	}

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	private bool _modified;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private ColliderType _colliderType;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PhysicMaterial _colliderMaterial;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool _colliderIsTrigger;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool _colliderIsConvex;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[SerializeField]
	private bool _createRigidBody;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float _rigidbodyMass;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float _rigidbodyDrag;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float _rigidbodyAngularDrag;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool _rigidbodyUseGravity;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	private bool _rigidbodyIsKinematic;

	[Token(Token = "0x17000020")]
	public ColliderType Collider
	{
		[Token(Token = "0x600007C")]
		[Address(RVA = "0x145A3F8", Offset = "0x145A3F8", VA = "0x145A3F8")]
		get
		{
			return default(ColliderType);
		}
		[Token(Token = "0x600007D")]
		[Address(RVA = "0x145A400", Offset = "0x145A400", VA = "0x145A400")]
		set
		{
		}
	}

	[Token(Token = "0x17000021")]
	public bool ColliderIsTrigger
	{
		[Token(Token = "0x600007E")]
		[Address(RVA = "0x145A41C", Offset = "0x145A41C", VA = "0x145A41C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600007F")]
		[Address(RVA = "0x145A424", Offset = "0x145A424", VA = "0x145A424")]
		set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public bool ColliderIsConvex
	{
		[Token(Token = "0x6000080")]
		[Address(RVA = "0x145A44C", Offset = "0x145A44C", VA = "0x145A44C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000081")]
		[Address(RVA = "0x145A454", Offset = "0x145A454", VA = "0x145A454")]
		set
		{
		}
	}

	[Token(Token = "0x17000023")]
	public PhysicMaterial ColliderMaterial
	{
		[Token(Token = "0x6000082")]
		[Address(RVA = "0x145A47C", Offset = "0x145A47C", VA = "0x145A47C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000083")]
		[Address(RVA = "0x145A484", Offset = "0x145A484", VA = "0x145A484")]
		set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public bool CreateRigidBody
	{
		[Token(Token = "0x6000084")]
		[Address(RVA = "0x145A514", Offset = "0x145A514", VA = "0x145A514")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000085")]
		[Address(RVA = "0x145A51C", Offset = "0x145A51C", VA = "0x145A51C")]
		set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public float RigidbodyMass
	{
		[Token(Token = "0x6000086")]
		[Address(RVA = "0x145A544", Offset = "0x145A544", VA = "0x145A544")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000087")]
		[Address(RVA = "0x145A54C", Offset = "0x145A54C", VA = "0x145A54C")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public float RigidbodyDrag
	{
		[Token(Token = "0x6000088")]
		[Address(RVA = "0x145A568", Offset = "0x145A568", VA = "0x145A568")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000089")]
		[Address(RVA = "0x145A570", Offset = "0x145A570", VA = "0x145A570")]
		set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public float RigidbodyAngularDrag
	{
		[Token(Token = "0x600008A")]
		[Address(RVA = "0x145A58C", Offset = "0x145A58C", VA = "0x145A58C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600008B")]
		[Address(RVA = "0x145A594", Offset = "0x145A594", VA = "0x145A594")]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public bool RigidbodyUseGravity
	{
		[Token(Token = "0x600008C")]
		[Address(RVA = "0x145A5B0", Offset = "0x145A5B0", VA = "0x145A5B0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600008D")]
		[Address(RVA = "0x145A5B8", Offset = "0x145A5B8", VA = "0x145A5B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000029")]
	public bool RigidbodyIsKinematic
	{
		[Token(Token = "0x600008E")]
		[Address(RVA = "0x145A5E0", Offset = "0x145A5E0", VA = "0x145A5E0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600008F")]
		[Address(RVA = "0x145A5E8", Offset = "0x145A5E8", VA = "0x145A5E8")]
		set
		{
		}
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x145A610", Offset = "0x145A610", VA = "0x145A610")]
	public bool CheckClearModified()
	{
		return default(bool);
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x145A62C", Offset = "0x145A62C", VA = "0x145A62C")]
	public VTextPhysics()
	{
	}
}
[Serializable]
[Token(Token = "0x200000B")]
public class VTextAdditionalComponents
{
	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	private bool _modified;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _additionalComponentsObject;

	[Token(Token = "0x1700002A")]
	public GameObject AdditionalComponentsObject
	{
		[Token(Token = "0x6000092")]
		[Address(RVA = "0xC3A354", Offset = "0xC3A354", VA = "0xC3A354")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000093")]
		[Address(RVA = "0xC3A35C", Offset = "0xC3A35C", VA = "0xC3A35C")]
		set
		{
		}
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xC3A3EC", Offset = "0xC3A3EC", VA = "0xC3A3EC")]
	public bool CheckClearModified()
	{
		return default(bool);
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xC3A408", Offset = "0xC3A408", VA = "0xC3A408")]
	public VTextAdditionalComponents()
	{
	}
}
[Token(Token = "0x200000C")]
[ExecuteInEditMode]
public class VTextInterface : MonoBehaviour
{
	[Token(Token = "0x20002F4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE0D4", Offset = "0x7EE0D4")]
	private sealed class <>c__DisplayClass22_0
	{
		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Component c;

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xC3BBA8", Offset = "0xC3BBA8", VA = "0xC3BBA8")]
		public <>c__DisplayClass22_0()
		{
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xC3C1E4", Offset = "0xC3C1E4", VA = "0xC3C1E4")]
		internal bool <UpdateAdditionalComponents>b__0(Type type)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20002F5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE0E4", Offset = "0x7EE0E4")]
	private sealed class <>c__DisplayClass22_1
	{
		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Component c;

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xC3BBB0", Offset = "0xC3BBB0", VA = "0xC3BBB0")]
		public <>c__DisplayClass22_1()
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xC3C22C", Offset = "0xC3C22C", VA = "0xC3C22C")]
		internal bool <UpdateAdditionalComponents>b__1(Type type)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public VTextParameter parameter;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public VTextLayout layout;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public VTextPhysics Physics;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public VTextAdditionalComponents AdditionalComponents;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public string RenderText;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string m_oldText;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material[] materials;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material[] usedMaterials;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private VFontInfo m_fontInfo;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<MonoBehaviour> m_changeListener;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Type> _componentsToKeep;

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xC3A410", Offset = "0xC3A410", VA = "0xC3A410")]
	public VTextInterface()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xC3A994", Offset = "0xC3A994", VA = "0xC3A994", Slot = "1")]
	~VTextInterface()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xC3AA0C", Offset = "0xC3AA0C", VA = "0xC3AA0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xC3AC8C", Offset = "0xC3AC8C", VA = "0xC3AC8C")]
	public static List<string> GetAvailableFonts()
	{
		return null;
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xC3AE9C", Offset = "0xC3AE9C", VA = "0xC3AE9C")]
	public bool Is3D()
	{
		return default(bool);
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xC3AED4", Offset = "0xC3AED4", VA = "0xC3AED4")]
	public void RegisterListener(MonoBehaviour go)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xC3AF6C", Offset = "0xC3AF6C", VA = "0xC3AF6C")]
	public void UnRegisterListener(MonoBehaviour go)
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xC3B004", Offset = "0xC3B004", VA = "0xC3B004")]
	private void clearChildren()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xC3B198", Offset = "0xC3B198", VA = "0xC3B198")]
	private void UpdateGlyphs(bool updateGeometry = false)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xC3B40C", Offset = "0xC3B40C", VA = "0xC3B40C")]
	private void UpdateLayout()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xC3B508", Offset = "0xC3B508", VA = "0xC3B508")]
	private void UpdatePhysics()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xC3B890", Offset = "0xC3B890", VA = "0xC3B890")]
	private void UpdateAdditionalComponents()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xC3B59C", Offset = "0xC3B59C", VA = "0xC3B59C")]
	private void CreateRigidbody(Transform t)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xC3B718", Offset = "0xC3B718", VA = "0xC3B718")]
	private void CreateCollider(Transform t)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xC3BBB8", Offset = "0xC3BBB8", VA = "0xC3BBB8")]
	private void RemoveCollider(Transform t)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xC3BCA8", Offset = "0xC3BCA8", VA = "0xC3BCA8")]
	public void Rebuild(bool rebuildMesh = false)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xC3BE00", Offset = "0xC3BE00", VA = "0xC3BE00")]
	public Bounds GetBounds()
	{
		return default(Bounds);
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xC3BED4", Offset = "0xC3BED4", VA = "0xC3BED4")]
	public void CheckRebuild(bool updateMesh, bool updateLayout, bool updatePhysics, bool updateAdditionalComponents)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xC3C03C", Offset = "0xC3C03C", VA = "0xC3C03C")]
	private void Update()
	{
	}
}
[Token(Token = "0x200000D")]
public class ButtonTest : MonoBehaviour
{
	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Image myImage;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xDDC930", Offset = "0xDDC930", VA = "0xDDC930")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xDDC988", Offset = "0xDDC988", VA = "0xDDC988")]
	public void OnButtonDown()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xDDCA64", Offset = "0xDDCA64", VA = "0xDDCA64")]
	public void OnButtonUp()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xDDCB40", Offset = "0xDDCB40", VA = "0xDDCB40")]
	public void OnButtonStay()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xDDCC1C", Offset = "0xDDCC1C", VA = "0xDDCC1C")]
	public ButtonTest()
	{
	}
}
[Token(Token = "0x200000E")]
public class ButtonUnloadState : MonoBehaviour
{
	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public State stateToUnload;

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xDDCC24", Offset = "0xDDCC24", VA = "0xDDCC24")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xDDCC28", Offset = "0xDDCC28", VA = "0xDDCC28")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xDDCC2C", Offset = "0xDDCC2C", VA = "0xDDCC2C")]
	public ButtonUnloadState()
	{
	}
}
[Token(Token = "0x200000F")]
public class Plank : MonoBehaviour
{
	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlankScale plankScale;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform level;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xB7E030", Offset = "0xB7E030", VA = "0xB7E030")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xB7E088", Offset = "0xB7E088", VA = "0xB7E088")]
	public Plank()
	{
	}
}
[Token(Token = "0x2000010")]
public class ControllerBody : MonoBehaviour
{
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 velocity;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 lastPos;

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xDDDD14", Offset = "0xDDDD14", VA = "0xDDDD14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xDDDD50", Offset = "0xDDDD50", VA = "0xDDDD50")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xDDDE24", Offset = "0xDDDE24", VA = "0xDDDE24")]
	public ControllerBody()
	{
	}
}
[Token(Token = "0x2000011")]
public class DebugBuild : MonoBehaviour
{
	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool active;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static DebugBuild instance;

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xDDE1F0", Offset = "0xDDE1F0", VA = "0xDDE1F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xDDE308", Offset = "0xDDE308", VA = "0xDDE308")]
	public static void Log(string text)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xDDE4BC", Offset = "0xDDE4BC", VA = "0xDDE4BC")]
	public DebugBuild()
	{
	}
}
[Token(Token = "0x2000012")]
public class AnimalSplineController : MonoBehaviour
{
	[Token(Token = "0x20002F6")]
	private enum EnumAnimal
	{
		[Token(Token = "0x40012C1")]
		Rest,
		[Token(Token = "0x40012C2")]
		Normal,
		[Token(Token = "0x40012C3")]
		Run,
		[Token(Token = "0x40012C4")]
		Slow,
		[Token(Token = "0x40012C5")]
		Stop
	}

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SplineFollower spline;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float modifierSplineControllerSpeed;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float adjustAnimatorSpeed;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeToAccelerate;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private EnumAnimal stateAnimal;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF03C", Offset = "0x7EF03C")]
	public float normalSpeed;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF054", Offset = "0x7EF054")]
	public float restSpeed;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF06C", Offset = "0x7EF06C")]
	public float slowSpeed;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float startDelay;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float speed;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF084", Offset = "0x7EF084")]
	public float chanceToRest;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF09C", Offset = "0x7EF09C")]
	public float chanceToSlow;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float timeRest;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float timeSlow;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF0B4", Offset = "0x7EF0B4")]
	public float decisionsPerSecond;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Animator animalAnimator;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float newspeed;

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xDDADA4", Offset = "0xDDADA4", VA = "0xDDADA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xDDAEA0", Offset = "0xDDAEA0", VA = "0xDDAEA0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xDDAF14", Offset = "0xDDAF14", VA = "0xDDAF14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xDDAF80", Offset = "0xDDAF80", VA = "0xDDAF80")]
	public void Think()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xDDB0C4", Offset = "0xDDB0C4", VA = "0xDDB0C4")]
	public void Stop()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xDDB380", Offset = "0xDDB380", VA = "0xDDB380")]
	public void Reset()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xDDAFE8", Offset = "0xDDAFE8", VA = "0xDDAFE8")]
	private void BrainUpdate()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xDDB3C4", Offset = "0xDDB3C4", VA = "0xDDB3C4")]
	public void SlowDown()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xDDB3FC", Offset = "0xDDB3FC", VA = "0xDDB3FC")]
	public void ResetToNormal()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xDDB440", Offset = "0xDDB440", VA = "0xDDB440")]
	public void SetSpeed(float newSpeed)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xDDB470", Offset = "0xDDB470", VA = "0xDDB470")]
	public void Reverse(bool bReverse)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xDDB16C", Offset = "0xDDB16C", VA = "0xDDB16C")]
	private void UpdateAnimator()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xDDB26C", Offset = "0xDDB26C", VA = "0xDDB26C")]
	private void UpdateSplineController()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xDDB4A0", Offset = "0xDDB4A0", VA = "0xDDB4A0")]
	public AnimalSplineController()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xDDB4E4", Offset = "0xDDB4E4", VA = "0xDDB4E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F85F8", Offset = "0x7F85F8")]
	private void <UpdateAnimator>b__29_0(float value)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xDDB554", Offset = "0xDDB554", VA = "0xDDB554")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8608", Offset = "0x7F8608")]
	private void <UpdateSplineController>b__31_0(float value)
	{
	}
}
[Token(Token = "0x2000013")]
public class Crane : MonoBehaviour
{
	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject gameObjectCraneSounds;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string soundGroup;

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xDDDF54", Offset = "0xDDDF54", VA = "0xDDDF54")]
	public void StopCraneSounds()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xDDDFE4", Offset = "0xDDDFE4", VA = "0xDDDFE4")]
	public Crane()
	{
	}
}
[Token(Token = "0x2000014")]
public class EnableObject : MonoBehaviour
{
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] enableTheObjects;

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xA9A5E4", Offset = "0xA9A5E4", VA = "0xA9A5E4")]
	public void EnableTheObject()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xA9A654", Offset = "0xA9A654", VA = "0xA9A654")]
	public void DisableTheObject()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xA9A6C4", Offset = "0xA9A6C4", VA = "0xA9A6C4")]
	public EnableObject()
	{
	}
}
[Token(Token = "0x2000015")]
public class FollowOnEnable : MonoBehaviour
{
	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject followThis;

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xAA1DE0", Offset = "0xAA1DE0", VA = "0xAA1DE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xAA1E38", Offset = "0xAA1E38", VA = "0xAA1E38")]
	public FollowOnEnable()
	{
	}
}
[Token(Token = "0x2000016")]
public class ForceBack : MonoBehaviour
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rb;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float fCurrentDistance;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fPreviousDistance;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fForcePower;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 vZero;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float fMaxFlyingDistance;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float fFlyingForceBackMultiplierMeters;

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xAA1E40", Offset = "0xAA1E40", VA = "0xAA1E40")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xAA1EB4", Offset = "0xAA1EB4", VA = "0xAA1EB4")]
	private void UpdateSlow()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xAA2090", Offset = "0xAA2090", VA = "0xAA2090")]
	public ForceBack()
	{
	}
}
[Token(Token = "0x2000017")]
public class GiantSpider : MonoBehaviour
{
	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimalSplineController sc;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator animator;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fTimeAttackDuration;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fSpeedReverse;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Rigidbody rb;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int state;

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xAA3224", Offset = "0xAA3224", VA = "0xAA3224")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xAA327C", Offset = "0xAA327C", VA = "0xAA327C")]
	public void AttackThenBack()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xAA3324", Offset = "0xAA3324", VA = "0xAA3324")]
	public void AttackThenDrop()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xAA33B0", Offset = "0xAA33B0", VA = "0xAA33B0")]
	public void DropSpider()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xAA34E8", Offset = "0xAA34E8", VA = "0xAA34E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xAA34EC", Offset = "0xAA34EC", VA = "0xAA34EC")]
	public void ResetSpider()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xAA3544", Offset = "0xAA3544", VA = "0xAA3544")]
	private void ReverseSoon()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xAA3590", Offset = "0xAA3590", VA = "0xAA3590")]
	public GiantSpider()
	{
	}
}
[Token(Token = "0x2000018")]
public class GoForARide : MonoBehaviour
{
	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform originalParent;

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xAA35A4", Offset = "0xAA35A4", VA = "0xAA35A4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xAA367C", Offset = "0xAA367C", VA = "0xAA367C")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xAA3740", Offset = "0xAA3740", VA = "0xAA3740")]
	public GoForARide()
	{
	}
}
[Token(Token = "0x2000019")]
public class MissileSplineFollowerHelper : MonoBehaviour
{
	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fStartPosition;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SplineFollower splineFollowerMissiles;

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xBFC2A0", Offset = "0xBFC2A0", VA = "0xBFC2A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xBFC2A4", Offset = "0xBFC2A4", VA = "0xBFC2A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xBFC2D8", Offset = "0xBFC2D8", VA = "0xBFC2D8")]
	public MissileSplineFollowerHelper()
	{
	}
}
[Token(Token = "0x200001A")]
public class OnBecameVisibleTrigger : MonoBehaviour
{
	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onBecameVisible;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onBecameInvisible;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fStartDelay;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool bReady;

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xB94BB4", Offset = "0xB94BB4", VA = "0xB94BB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xB94C0C", Offset = "0xB94C0C", VA = "0xB94C0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xB94C14", Offset = "0xB94C14", VA = "0xB94C14")]
	private void GetReady()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xB94C20", Offset = "0xB94C20", VA = "0xB94C20")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xB94C48", Offset = "0xB94C48", VA = "0xB94C48")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xB94C70", Offset = "0xB94C70", VA = "0xB94C70")]
	public OnBecameVisibleTrigger()
	{
	}
}
[Token(Token = "0x200001B")]
public class RichiesTrigger : MonoBehaviour
{
	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnTrigger;

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xD549FC", Offset = "0xD549FC", VA = "0xD549FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xD54A00", Offset = "0xD54A00", VA = "0xD54A00")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xD54ACC", Offset = "0xD54ACC", VA = "0xD54ACC")]
	public RichiesTrigger()
	{
	}
}
[Token(Token = "0x200001C")]
public class SoundManager : MonoBehaviour
{
	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SoundGroup]
	public string soundStreetTraffic;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SoundGroup]
	public string soundTrafficFromAbove;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SoundGroup]
	public string soundTension;

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xC285F0", Offset = "0xC285F0", VA = "0xC285F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xC286E0", Offset = "0xC286E0", VA = "0xC286E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xC287A0", Offset = "0xC287A0", VA = "0xC287A0")]
	public SoundManager()
	{
	}
}
[Token(Token = "0x200001D")]
public class SpiderSlice : MonoBehaviour
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform spawnPoint;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpiderForTheSlice spiderForTheSlice;

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xC28C08", Offset = "0xC28C08", VA = "0xC28C08")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xC28C0C", Offset = "0xC28C0C", VA = "0xC28C0C")]
	public void SpawnSpider()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xC28C7C", Offset = "0xC28C7C", VA = "0xC28C7C")]
	public SpiderSlice()
	{
	}
}
[Token(Token = "0x200001E")]
public class SpiderSurprise : MonoBehaviour
{
	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefabSpiders;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject spiders;

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xC28C84", Offset = "0xC28C84", VA = "0xC28C84")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xC28C88", Offset = "0xC28C88", VA = "0xC28C88")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xC28C8C", Offset = "0xC28C8C", VA = "0xC28C8C")]
	public void EnableSpiders()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xC28D3C", Offset = "0xC28D3C", VA = "0xC28D3C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xC28D40", Offset = "0xC28D40", VA = "0xC28D40")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xC28DAC", Offset = "0xC28DAC", VA = "0xC28DAC")]
	public void DisableSpiders()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xC28DB0", Offset = "0xC28DB0", VA = "0xC28DB0")]
	public void DeactivateObject()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xC28DB4", Offset = "0xC28DB4", VA = "0xC28DB4")]
	public SpiderSurprise()
	{
	}
}
[Token(Token = "0x200001F")]
public class StarReward : MonoBehaviour
{
	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject off;

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xC29F74", Offset = "0xC29F74", VA = "0xC29F74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xC29F94", Offset = "0xC29F94", VA = "0xC29F94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xC29FB4", Offset = "0xC29FB4", VA = "0xC29FB4")]
	public StarReward()
	{
	}
}
[Token(Token = "0x2000020")]
public class THALogo : MonoBehaviour
{
	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 localmoveto;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 localmovefrom;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xC2E0C8", Offset = "0xC2E0C8", VA = "0xC2E0C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xC2E1AC", Offset = "0xC2E1AC", VA = "0xC2E1AC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xC2E1F0", Offset = "0xC2E1F0", VA = "0xC2E1F0")]
	public THALogo()
	{
	}
}
[Token(Token = "0x2000021")]
public class TOASTTesterToggle : MonoBehaviour
{
	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool bOn;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeToggle;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xC2E1F8", Offset = "0xC2E1F8", VA = "0xC2E1F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xC2E250", Offset = "0xC2E250", VA = "0xC2E250")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xC2E2D4", Offset = "0xC2E2D4", VA = "0xC2E2D4")]
	public TOASTTesterToggle()
	{
	}
}
[Token(Token = "0x2000022")]
public class ToastSmoothFollow : MonoBehaviour
{
	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform followThis;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float smoothTime;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 velocity;

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xC32590", Offset = "0xC32590", VA = "0xC32590")]
	private void Update()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xC326F4", Offset = "0xC326F4", VA = "0xC326F4")]
	public ToastSmoothFollow()
	{
	}
}
[Token(Token = "0x2000023")]
public class TreeAnimation : MonoBehaviour
{
	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 vectorTo;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LeanTweenType tweenType;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Quaternion initialRotation;

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xC33F48", Offset = "0xC33F48", VA = "0xC33F48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xC33F84", Offset = "0xC33F84", VA = "0xC33F84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xC34068", Offset = "0xC34068", VA = "0xC34068")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xC340E4", Offset = "0xC340E4", VA = "0xC340E4")]
	public TreeAnimation()
	{
	}
}
[Token(Token = "0x2000024")]
public class VRButton : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20002F7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE0F4", Offset = "0x7EE0F4")]
	private sealed class <>c
	{
		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action <>9__12_1;

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xC3A348", Offset = "0xC3A348", VA = "0xC3A348")]
		public <>c()
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xC3A350", Offset = "0xC3A350", VA = "0xC3A350")]
		internal void <OnTriggerEnter>b__12_1()
		{
		}
	}

	[Token(Token = "0x40000A1")]
	private const int HAPTIC_DURATION = 100;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnPush;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SoundGroup]
	public string soundPressed;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SoundGroup]
	public string soundUnPressed;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool bActive;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float fPressDuration;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject model;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float timeDelayBeforeActive;

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xC39E04", Offset = "0xC39E04", VA = "0xC39E04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xC39EA8", Offset = "0xC39EA8", VA = "0xC39EA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xC39EAC", Offset = "0xC39EAC", VA = "0xC39EAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xC39F04", Offset = "0xC39F04", VA = "0xC39F04")]
	private void ActivateSoon()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xC39F10", Offset = "0xC39F10", VA = "0xC39F10")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xC3A168", Offset = "0xC3A168", VA = "0xC3A168")]
	private void Activate()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xC3A174", Offset = "0xC3A174", VA = "0xC3A174")]
	public VRButton()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xC3A18C", Offset = "0xC3A18C", VA = "0xC3A18C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8618", Offset = "0x7F8618")]
	private void <OnTriggerEnter>b__12_0()
	{
	}
}
[Token(Token = "0x2000025")]
public class cameraanimator : MonoBehaviour
{
	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 start;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 end;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float time;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public LeanTweenType tweenType;

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x146598C", Offset = "0x146598C", VA = "0x146598C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x1465990", Offset = "0x1465990", VA = "0x1465990")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x1465A68", Offset = "0x1465A68", VA = "0x1465A68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x1465A6C", Offset = "0x1465A6C", VA = "0x1465A6C")]
	public cameraanimator()
	{
	}
}
[Token(Token = "0x2000026")]
public class AppDebugText : MonoBehaviour
{
	[Token(Token = "0x6000113")]
	[Address(RVA = "0xDDB57C", Offset = "0xDDB57C", VA = "0xDDB57C")]
	public AppDebugText()
	{
	}
}
[Token(Token = "0x2000027")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ECEAC", Offset = "0x7ECEAC")]
public class BGM : MonoBehaviour
{
	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] bgms;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource audioSource;

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xDDB58C", Offset = "0xDDB58C", VA = "0xDDB58C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xDDB5E4", Offset = "0xDDB5E4", VA = "0xDDB5E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xDDB628", Offset = "0xDDB628", VA = "0xDDB628")]
	private void PlayNext()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xDDB6A8", Offset = "0xDDB6A8", VA = "0xDDB6A8")]
	public BGM()
	{
	}
}
[Token(Token = "0x2000028")]
public class BillBoard : MonoBehaviour
{
	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform head;

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xDDBE44", Offset = "0xDDBE44", VA = "0xDDBE44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xDDBED8", Offset = "0xDDBED8", VA = "0xDDBED8")]
	public BillBoard()
	{
	}
}
[Token(Token = "0x2000029")]
public class CollisionDebugger : MonoBehaviour
{
	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool debugging;

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xDDDAE4", Offset = "0xDDDAE4", VA = "0xDDDAE4")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xDDDD0C", Offset = "0xDDDD0C", VA = "0xDDDD0C")]
	public CollisionDebugger()
	{
	}
}
[Token(Token = "0x200002A")]
public class PerlinMovement : MonoBehaviour
{
	[Token(Token = "0x20002F8")]
	public enum ControlAxis
	{
		[Token(Token = "0x40012C9")]
		PosX,
		[Token(Token = "0x40012CA")]
		PosY,
		[Token(Token = "0x40012CB")]
		PosZ,
		[Token(Token = "0x40012CC")]
		RotX,
		[Token(Token = "0x40012CD")]
		RotY,
		[Token(Token = "0x40012CE")]
		RotZ
	}

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float constraintMin;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float constraintMax;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float deltaMin;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float deltaMax;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ControlAxis controlAxis;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isOn;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float seedValue;

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xB7D800", Offset = "0xB7D800", VA = "0xB7D800")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xB7E014", Offset = "0xB7E014", VA = "0xB7E014")]
	public PerlinMovement()
	{
	}
}
[Token(Token = "0x200002B")]
public class SimpleDebugLog : MonoBehaviour
{
	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool onAwake;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string what;

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xD5A16C", Offset = "0xD5A16C", VA = "0xD5A16C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xD5A170", Offset = "0xD5A170", VA = "0xD5A170")]
	public void DoDebug(string text)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xD5A174", Offset = "0xD5A174", VA = "0xD5A174")]
	public SimpleDebugLog()
	{
	}
}
[Token(Token = "0x200002C")]
public class ScreenRenderer : MonoBehaviour
{
	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string targetPath;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int wResolution;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int hResolution;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Camera cam;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool takeHiResShot;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int index;

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xD59130", Offset = "0xD59130", VA = "0xD59130")]
	public string ScreenShotName(int width, int height)
	{
		return null;
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xD591B8", Offset = "0xD591B8", VA = "0xD591B8")]
	public void TakeHiResShot()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xD591C4", Offset = "0xD591C4", VA = "0xD591C4")]
	public void StopHiResShot()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xD591D0", Offset = "0xD591D0", VA = "0xD591D0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xD5920C", Offset = "0xD5920C", VA = "0xD5920C")]
	public ScreenRenderer()
	{
	}
}
[Token(Token = "0x200002D")]
public static class Serializer
{
	[Token(Token = "0x6000126")]
	[Address(RVA = "0xD59598", Offset = "0xD59598", VA = "0xD59598")]
	public static void Save(string filePath, object toSerialize)
	{
	}

	[Token(Token = "0x6000127")]
	public static T Load<T>(string filePath) where T : new()
	{
		return (T)null;
	}
}
[Serializable]
[Token(Token = "0x200002E")]
public class SerializableVector3
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float x;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float y;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float z;

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xD59418", Offset = "0xD59418", VA = "0xD59418")]
	public SerializableVector3()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xD59444", Offset = "0xD59444", VA = "0xD59444")]
	public SerializableVector3(Vector3 inputVector)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xD5948C", Offset = "0xD5948C", VA = "0xD5948C")]
	public SerializableVector3(float xin, float yin, float zin)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xD594D4", Offset = "0xD594D4", VA = "0xD594D4")]
	public static implicit operator Vector3(SerializableVector3 value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xD59518", Offset = "0xD59518", VA = "0xD59518")]
	public static implicit operator SerializableVector3(Vector3 value)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x200002F")]
public class SerializableQuaternion
{
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float x;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float y;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float z;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float w;

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xD59220", Offset = "0xD59220", VA = "0xD59220")]
	public SerializableQuaternion()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xD592BC", Offset = "0xD592BC", VA = "0xD592BC")]
	public SerializableQuaternion(Quaternion inputQuaternion)
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xD59308", Offset = "0xD59308", VA = "0xD59308")]
	public SerializableQuaternion(float xin, float yin, float zin, float win)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xD59354", Offset = "0xD59354", VA = "0xD59354")]
	public static implicit operator Quaternion(SerializableQuaternion value)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xD59394", Offset = "0xD59394", VA = "0xD59394")]
	public static implicit operator SerializableQuaternion(Quaternion value)
	{
		return null;
	}
}
[Token(Token = "0x2000030")]
public class TrajectoryReader : MonoBehaviour
{
	[Token(Token = "0x20002F9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE104", Offset = "0x7EE104")]
	private sealed class <WarmUpAndReplay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TrajectoryReader <>4__this;

		[Token(Token = "0x1700022F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0xC331C4", Offset = "0xC331C4", VA = "0xC331C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000230")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0xC3322C", Offset = "0xC3322C", VA = "0xC3322C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xC32B30", Offset = "0xC32B30", VA = "0xC32B30")]
		[DebuggerHidden]
		public <WarmUpAndReplay>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xC3311C", Offset = "0xC3311C", VA = "0xC3311C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xC33120", Offset = "0xC33120", VA = "0xC33120", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xC331CC", Offset = "0xC331CC", VA = "0xC331CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string folderPath;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string fileName;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ToastTrajectory toastTraj;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isReplaying;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int currIndex;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ScreenRenderer screenRenderer;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int fpsRatio;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ControllerInputHandler inputHandler;

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xC32A18", Offset = "0xC32A18", VA = "0xC32A18")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xC32AC0", Offset = "0xC32AC0", VA = "0xC32AC0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8628", Offset = "0x7F8628")]
	private IEnumerator WarmUpAndReplay()
	{
		return null;
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xC32B5C", Offset = "0xC32B5C", VA = "0xC32B5C")]
	public void Replay()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xC32DA8", Offset = "0xC32DA8", VA = "0xC32DA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xC32FB8", Offset = "0xC32FB8", VA = "0xC32FB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xC3304C", Offset = "0xC3304C", VA = "0xC3304C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xC330E0", Offset = "0xC330E0", VA = "0xC330E0")]
	public void OnControllerButtonUp(object sender, ControllerEventArgs e)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xC3310C", Offset = "0xC3310C", VA = "0xC3310C")]
	public TrajectoryReader()
	{
	}
}
[Token(Token = "0x2000031")]
public class TrajectoryRecorder : MonoBehaviour
{
	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Vector3> positions;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Quaternion> rotations;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isRecording;

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xC33234", Offset = "0xC33234", VA = "0xC33234")]
	private void Awake()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xC332C4", Offset = "0xC332C4", VA = "0xC332C4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xC33380", Offset = "0xC33380", VA = "0xC33380")]
	public void Save()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xC334FC", Offset = "0xC334FC", VA = "0xC334FC")]
	public void StartRecording()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xC335AC", Offset = "0xC335AC", VA = "0xC335AC")]
	public void StopRecordingAndSave()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xC335C0", Offset = "0xC335C0", VA = "0xC335C0")]
	public TrajectoryRecorder()
	{
	}
}
[Serializable]
[Token(Token = "0x2000032")]
public class ToastTrajectory
{
	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SerializableVector3> positions;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SerializableQuaternion> rotations;

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xC32778", Offset = "0xC32778", VA = "0xC32778")]
	public ToastTrajectory()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xC32814", Offset = "0xC32814", VA = "0xC32814")]
	public ToastTrajectory(List<Vector3> inputPosList, List<Quaternion> inputRotList)
	{
	}
}
[Token(Token = "0x2000033")]
public class TrajectoryRecordingManager : MonoBehaviour
{
	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrajectoryRecorder[] trajRecorders;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ControllerInputHandler inputHandler;

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xC335C8", Offset = "0xC335C8", VA = "0xC335C8")]
	public void StartRecording()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xC33640", Offset = "0xC33640", VA = "0xC33640")]
	public void StopRecordingAndSave()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xC336C4", Offset = "0xC336C4", VA = "0xC336C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xC33738", Offset = "0xC33738", VA = "0xC33738")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xC337CC", Offset = "0xC337CC", VA = "0xC337CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xC33860", Offset = "0xC33860", VA = "0xC33860")]
	public void OnControllerButtonUp(object sender, ControllerEventArgs e)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xC3389C", Offset = "0xC3389C", VA = "0xC3389C")]
	public TrajectoryRecordingManager()
	{
	}
}
[Token(Token = "0x2000034")]
public class TrajectorySplitter : MonoBehaviour
{
	[Token(Token = "0x20002FA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE114", Offset = "0x7EE114")]
	private sealed class <WarmUpAndReplay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TrajectorySplitter <>4__this;

		[Token(Token = "0x17000231")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016B3")]
			[Address(RVA = "0xC33ED8", Offset = "0xC33ED8", VA = "0xC33ED8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000232")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016B5")]
			[Address(RVA = "0xC33F40", Offset = "0xC33F40", VA = "0xC33F40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xC33940", Offset = "0xC33940", VA = "0xC33940")]
		[DebuggerHidden]
		public <WarmUpAndReplay>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xC33E30", Offset = "0xC33E30", VA = "0xC33E30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xC33E34", Offset = "0xC33E34", VA = "0xC33E34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xC33EE0", Offset = "0xC33EE0", VA = "0xC33EE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string saveFolderPath;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string loadFolderPath;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string compositeFile;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string childFile;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ToastTrajectory toastTrajComposite;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ToastTrajectory toastTrajChild;

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xC338A4", Offset = "0xC338A4", VA = "0xC338A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xC338D0", Offset = "0xC338D0", VA = "0xC338D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F868C", Offset = "0x7F868C")]
	private IEnumerator WarmUpAndReplay()
	{
		return null;
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xC3396C", Offset = "0xC3396C", VA = "0xC3396C")]
	public void Split()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xC33E28", Offset = "0xC33E28", VA = "0xC33E28")]
	public TrajectorySplitter()
	{
	}
}
[Token(Token = "0x2000035")]
public class GameplayTips : MonoBehaviour
{
	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] tips;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int tipNr;

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xAA2A40", Offset = "0xAA2A40", VA = "0xAA2A40")]
	private void Start()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xAA2AE8", Offset = "0xAA2AE8", VA = "0xAA2AE8")]
	public GameplayTips()
	{
	}
}
[Token(Token = "0x2000036")]
public class InfoToReflMaterial : MonoBehaviour
{
	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject boundingBox;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject BoxMinGo;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject BoxMaxGo;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject BoxCenterGo;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 BoxMin;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 BoxMax;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 BoxCenter;

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xAA5BDC", Offset = "0xAA5BDC", VA = "0xAA5BDC")]
	public void RecalculateBounds()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xAA60B0", Offset = "0xAA60B0", VA = "0xAA60B0")]
	public InfoToReflMaterial()
	{
	}
}
[Token(Token = "0x2000037")]
public class InitFade : MonoBehaviour
{
	[Token(Token = "0x20002FB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE124", Offset = "0x7EE124")]
	private sealed class <Fade>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InitFade <>4__this;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool toBlack;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <direction>5__2;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <fadeValue>5__3;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <speed>5__4;

		[Token(Token = "0x17000233")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016B9")]
			[Address(RVA = "0xAA6628", Offset = "0xAA6628", VA = "0xAA6628", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000234")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016BB")]
			[Address(RVA = "0xAA6690", Offset = "0xAA6690", VA = "0xAA6690", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xAA6424", Offset = "0xAA6424", VA = "0xAA6424")]
		[DebuggerHidden]
		public <Fade>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xAA6458", Offset = "0xAA6458", VA = "0xAA6458", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xAA645C", Offset = "0xAA645C", VA = "0xAA645C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xAA6630", Offset = "0xAA6630", VA = "0xAA6630", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool fading;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool fadeDone;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float delay;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static InitFade instance;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine fadeCoroutine;

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xAA6148", Offset = "0xAA6148", VA = "0xAA6148")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xAA62F4", Offset = "0xAA62F4", VA = "0xAA62F4")]
	public void SetToBlack()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xAA6368", Offset = "0xAA6368", VA = "0xAA6368")]
	public void StartFade()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xAA63A0", Offset = "0xAA63A0", VA = "0xAA63A0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F86F0", Offset = "0x7F86F0")]
	private IEnumerator Fade(bool toBlack)
	{
		return null;
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xAA6450", Offset = "0xAA6450", VA = "0xAA6450")]
	public InitFade()
	{
	}
}
[Token(Token = "0x2000038")]
public class LoadScenesAdditively : MonoBehaviour
{
	[Token(Token = "0x20002FC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE134", Offset = "0x7EE134")]
	private sealed class <WaitForSceneToLoad>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AsyncOperation asyncOperation;

		[Token(Token = "0x17000235")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016BF")]
			[Address(RVA = "0xAAD6D8", Offset = "0xAAD6D8", VA = "0xAAD6D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000236")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016C1")]
			[Address(RVA = "0xAAD740", Offset = "0xAAD740", VA = "0xAAD740", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xAAD4C4", Offset = "0xAAD4C4", VA = "0xAAD4C4")]
		[DebuggerHidden]
		public <WaitForSceneToLoad>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xAAD678", Offset = "0xAAD678", VA = "0xAAD678", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xAAD67C", Offset = "0xAAD67C", VA = "0xAAD67C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xAAD6E0", Offset = "0xAAD6E0", VA = "0xAAD6E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002FD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE144", Offset = "0x7EE144")]
	private sealed class <UnloadSceneNowOrOnceInFuture>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <unloading>5__2;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncOperation <op>5__3;

		[Token(Token = "0x17000237")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016C5")]
			[Address(RVA = "0xAAD608", Offset = "0xAAD608", VA = "0xAAD608", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000238")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016C7")]
			[Address(RVA = "0xAAD670", Offset = "0xAAD670", VA = "0xAAD670", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xAAD4F0", Offset = "0xAAD4F0", VA = "0xAAD4F0")]
		[DebuggerHidden]
		public <UnloadSceneNowOrOnceInFuture>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xAAD524", Offset = "0xAAD524", VA = "0xAAD524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xAAD528", Offset = "0xAAD528", VA = "0xAAD528", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xAAD610", Offset = "0xAAD610", VA = "0xAAD610", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sceneName1;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool loaded;

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xAAD254", Offset = "0xAAD254", VA = "0xAAD254")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xAAD264", Offset = "0xAAD264", VA = "0xAAD264")]
	public void SetState(bool state)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xAAD288", Offset = "0xAAD288", VA = "0xAAD288")]
	private void LoadScene()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xAAD350", Offset = "0xAAD350", VA = "0xAAD350")]
	private void UnloadScene()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xAAD3E4", Offset = "0xAAD3E4", VA = "0xAAD3E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8754", Offset = "0x7F8754")]
	private IEnumerator WaitForSceneToLoad(AsyncOperation asyncOperation)
	{
		return null;
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xAAD454", Offset = "0xAAD454", VA = "0xAAD454")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F87B8", Offset = "0x7F87B8")]
	private IEnumerator UnloadSceneNowOrOnceInFuture(string scene)
	{
		return null;
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xAAD51C", Offset = "0xAAD51C", VA = "0xAAD51C")]
	public LoadScenesAdditively()
	{
	}
}
[Token(Token = "0x2000039")]
public class BirdTrigger : MonoBehaviour
{
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject nightmareBirdHandle;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject nightmareBird;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject nightmareBirdHandle2;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject nightmareBird2;

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xDDC5F4", Offset = "0xDDC5F4", VA = "0xDDC5F4")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xDDC6FC", Offset = "0xDDC6FC", VA = "0xDDC6FC")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xDDC7C4", Offset = "0xDDC7C4", VA = "0xDDC7C4")]
	public BirdTrigger()
	{
	}
}
[Token(Token = "0x200003A")]
public class NightmarePanelController : MonoBehaviour
{
	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Animator anim;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int NightmareCover_Close;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int NightmareCover_Open;

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x141C634", Offset = "0x141C634", VA = "0x141C634")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x141C68C", Offset = "0x141C68C", VA = "0x141C68C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x141C788", Offset = "0x141C788", VA = "0x141C788")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x141C884", Offset = "0x141C884", VA = "0x141C884")]
	public NightmarePanelController()
	{
	}
}
[Token(Token = "0x200003B")]
public class SmoothFollowTransform : MonoBehaviour
{
	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float smoothTime;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float smoothTimeRotate;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool bFixedUpdate;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 velocity;

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xD666FC", Offset = "0xD666FC", VA = "0xD666FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xD6670C", Offset = "0xD6670C", VA = "0xD6670C")]
	private void DoUpdate()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xD66920", Offset = "0xD66920", VA = "0xD66920")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xD66930", Offset = "0xD66930", VA = "0xD66930")]
	public SmoothFollowTransform()
	{
	}
}
[Serializable]
[Token(Token = "0x200003C")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7ECF10", Offset = "0x7ECF10")]
public class PlankProfile : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20002FE")]
	public abstract class PlankProperty<T>
	{
		[Token(Token = "0x2000471")]
		public delegate void OnValueChangedDelegate(T value);

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _min;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _max;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _value;

		[Token(Token = "0x17000239")]
		[SerializeField]
		public T Value
		{
			[Token(Token = "0x60016CA")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60016CB")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		[SerializeField]
		public T NormalizedValue
		{
			[Token(Token = "0x60016CD")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60016CE")]
			set
			{
			}
		}

		[Token(Token = "0x1400004C")]
		public event OnValueChangedDelegate OnValueChange
		{
			[Token(Token = "0x60016C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDECC", Offset = "0x7FDECC")]
			add
			{
			}
			[Token(Token = "0x60016C9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDEDC", Offset = "0x7FDEDC")]
			remove
			{
			}
		}

		[Token(Token = "0x60016CC")]
		public abstract bool Compare(T x, T y);

		[Token(Token = "0x60016CF")]
		public PlankProperty(T min, T max, T value)
		{
		}

		[Token(Token = "0x60016D0")]
		protected abstract T ClampValueWithinLimits(T value, T min, T max);

		[Token(Token = "0x60016D1")]
		protected abstract T GetValueWithinLimits(T normalizedValue, T min, T max);

		[Token(Token = "0x60016D2")]
		protected abstract T GetNormalizedValueWithinLimits(T value, T min, T max);
	}

	[Serializable]
	[Token(Token = "0x20002FF")]
	public class PlankPropertyFloat : PlankProperty<float>
	{
		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xB7E240", Offset = "0xB7E240", VA = "0xB7E240")]
		public PlankPropertyFloat(float min, float max, float value)
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xB7E378", Offset = "0xB7E378", VA = "0xB7E378", Slot = "5")]
		protected override float ClampValueWithinLimits(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xB7E430", Offset = "0xB7E430", VA = "0xB7E430", Slot = "6")]
		protected override float GetValueWithinLimits(float normalizedValue, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xB7E4B8", Offset = "0xB7E4B8", VA = "0xB7E4B8", Slot = "7")]
		protected override float GetNormalizedValueWithinLimits(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xB7E540", Offset = "0xB7E540", VA = "0xB7E540", Slot = "4")]
		public override bool Compare(float x, float y)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x2000300")]
	public class PlankPropertyVector : PlankProperty<Vector3>
	{
		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xB7E2B8", Offset = "0xB7E2B8", VA = "0xB7E2B8")]
		public PlankPropertyVector(Vector3 min, Vector3 max, Vector3 value)
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xB7E54C", Offset = "0xB7E54C", VA = "0xB7E54C", Slot = "5")]
		protected override Vector3 ClampValueWithinLimits(Vector3 value, Vector3 min, Vector3 max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0xB7E5F4", Offset = "0xB7E5F4", VA = "0xB7E5F4")]
		private float ClampValueWithinLimits(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xB7E6AC", Offset = "0xB7E6AC", VA = "0xB7E6AC", Slot = "6")]
		protected override Vector3 GetValueWithinLimits(Vector3 normalizedValue, Vector3 min, Vector3 max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0xB7E7DC", Offset = "0xB7E7DC", VA = "0xB7E7DC", Slot = "7")]
		protected override Vector3 GetNormalizedValueWithinLimits(Vector3 value, Vector3 min, Vector3 max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xB7E754", Offset = "0xB7E754", VA = "0xB7E754")]
		protected float GetValueWithinLimits(float normalizedValue, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xB7E884", Offset = "0xB7E884", VA = "0xB7E884")]
		protected float GetNormalizedValueWithinLimits(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xB7E90C", Offset = "0xB7E90C", VA = "0xB7E90C", Slot = "4")]
		public override bool Compare(Vector3 x, Vector3 y)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string PlankName;

	[Token(Token = "0x40000FB")]
	public const float noChange = float.PositiveInfinity;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlankPropertyFloat Length;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlankPropertyFloat Width;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PlankPropertyFloat Rotation;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PlankPropertyFloat PlayerHeight;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlankPropertyVector Offset;

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xB7E090", Offset = "0xB7E090", VA = "0xB7E090")]
	public void OnValidate()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xB7E094", Offset = "0xB7E094", VA = "0xB7E094")]
	public PlankProfile()
	{
	}
}
[Token(Token = "0x200003D")]
public class PlankProfileManager : MonoBehaviour
{
	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PlankProfileManager _instance;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlankProfile profile;

	[Token(Token = "0x1700002B")]
	public static PlankProfileManager instance
	{
		[Token(Token = "0x600016B")]
		[Address(RVA = "0xB7E9B4", Offset = "0xB7E9B4", VA = "0xB7E9B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xB7EA80", Offset = "0xB7EA80", VA = "0xB7EA80")]
	public PlankProfileManager()
	{
	}
}
[Token(Token = "0x200003E")]
[ExecuteInEditMode]
public class PlankScale : MonoBehaviour
{
	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject endofplank;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject midPlank;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PlankScale _instance;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer _renderer;

	[Token(Token = "0x4000107")]
	private const float widthScaleFactor = 3.6917f;

	[Token(Token = "0x4000108")]
	private const float widthTextureOffset = 0.33f;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rotationAngleLimitSymmetric;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float lengthLimitMin;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float lengthLimitMax;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float widthLimitMinSymmetric;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float widthLimitMaxSymmetric;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 distanceLimitMax;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 distanceLimitMin;

	[Token(Token = "0x4000110")]
	private const float noChange = float.PositiveInfinity;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float endofplankdistance;

	[Token(Token = "0x1700002C")]
	public static PlankScale instance
	{
		[Token(Token = "0x600016D")]
		[Address(RVA = "0xB7EA88", Offset = "0xB7EA88", VA = "0xB7EA88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002D")]
	private Renderer myRenderer
	{
		[Token(Token = "0x600016E")]
		[Address(RVA = "0xB7EBA4", Offset = "0xB7EBA4", VA = "0xB7EBA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xB7EC3C", Offset = "0xB7EC3C", VA = "0xB7EC3C")]
	public void SetDistanceLimitMax(float xValue = float.PositiveInfinity, float yValue = float.PositiveInfinity, float zValue = float.PositiveInfinity)
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xB7ECB8", Offset = "0xB7ECB8", VA = "0xB7ECB8")]
	public void SetDistanceLimitMax(Vector3 value)
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xB7ECBC", Offset = "0xB7ECBC", VA = "0xB7ECBC")]
	public void SetDistanceLimitMin(float xValue = float.PositiveInfinity, float yValue = float.PositiveInfinity, float zValue = float.PositiveInfinity)
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xB7ED38", Offset = "0xB7ED38", VA = "0xB7ED38")]
	public void SetDistanceLimitMin(Vector3 value)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xB7ED3C", Offset = "0xB7ED3C", VA = "0xB7ED3C")]
	public Vector3 GetDistance()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xB7ED60", Offset = "0xB7ED60", VA = "0xB7ED60")]
	public void SetDistanceFromOrigin(float xValue = float.PositiveInfinity, float yValue = float.PositiveInfinity, float zValue = float.PositiveInfinity)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xB7EEAC", Offset = "0xB7EEAC", VA = "0xB7EEAC")]
	public void SetDistanceFromOrigin(Vector3 value)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xB7EEB0", Offset = "0xB7EEB0", VA = "0xB7EEB0")]
	public void AddDistanceFromOrigin(Vector3 delta)
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xB7EF6C", Offset = "0xB7EF6C", VA = "0xB7EF6C")]
	public void SetMaxRotationAngle(float value)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xB7F078", Offset = "0xB7F078", VA = "0xB7F078")]
	public void SetRotation(float value)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xB7F04C", Offset = "0xB7F04C", VA = "0xB7F04C")]
	public float GetRotation()
	{
		return default(float);
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xB7F1A4", Offset = "0xB7F1A4", VA = "0xB7F1A4")]
	public void AddRotation(float delta)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xB7F1D8", Offset = "0xB7F1D8", VA = "0xB7F1D8")]
	public void SetWidthLimit(float minValue, float maxValue)
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xB7F55C", Offset = "0xB7F55C", VA = "0xB7F55C")]
	public void SetLengthLimit(float minValue, float maxValue)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xB7F344", Offset = "0xB7F344", VA = "0xB7F344")]
	public void SetWidth(float value)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xB7F668", Offset = "0xB7F668", VA = "0xB7F668")]
	public void SetLength(float value)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xB7F2B8", Offset = "0xB7F2B8", VA = "0xB7F2B8")]
	public float GetWidth()
	{
		return default(float);
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xB7F63C", Offset = "0xB7F63C", VA = "0xB7F63C")]
	public float GetLength()
	{
		return default(float);
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xB7F798", Offset = "0xB7F798", VA = "0xB7F798")]
	public void AddWidth(float delta)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xB7F7CC", Offset = "0xB7F7CC", VA = "0xB7F7CC")]
	public void AddLength(float delta)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xB7EE90", Offset = "0xB7EE90", VA = "0xB7EE90")]
	private float ValueWithinLimits(float value, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xB7F800", Offset = "0xB7F800", VA = "0xB7F800")]
	public PlankScale()
	{
	}
}
[Token(Token = "0x200003F")]
public class PlayerHeightSetup : MonoBehaviour
{
	[Token(Token = "0x6000185")]
	[Address(RVA = "0xB7FC2C", Offset = "0xB7FC2C", VA = "0xB7FC2C")]
	public void SetPlayerHeight(float height)
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xB7FCAC", Offset = "0xB7FCAC", VA = "0xB7FCAC")]
	public void Confirm()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xB7FD44", Offset = "0xB7FD44", VA = "0xB7FD44")]
	public PlayerHeightSetup()
	{
	}
}
[Token(Token = "0x2000040")]
public class ProjectorMove : MonoBehaviour
{
	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objToFollow;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 newPosition;

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xB8008C", Offset = "0xB8008C", VA = "0xB8008C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xB80090", Offset = "0xB80090", VA = "0xB80090")]
	private void Update()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xB80128", Offset = "0xB80128", VA = "0xB80128")]
	public ProjectorMove()
	{
	}
}
[Token(Token = "0x2000041")]
public class InitBlack : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator anim;

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xAA60B8", Offset = "0xAA60B8", VA = "0xAA60B8")]
	private void SetBlack()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xAA6118", Offset = "0xAA6118", VA = "0xAA6118")]
	private void HideThis()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xAA6140", Offset = "0xAA6140", VA = "0xAA6140")]
	public InitBlack()
	{
	}
}
[Token(Token = "0x2000042")]
public abstract class GOEventHandler : MonoBehaviour, IPointerUpHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler
{
	[Token(Token = "0x600018E")]
	[Address(RVA = "0xAA24A8", Offset = "0xAA24A8", VA = "0xAA24A8", Slot = "12")]
	public virtual void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xAA24AC", Offset = "0xAA24AC", VA = "0xAA24AC", Slot = "13")]
	public virtual void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xAA24B0", Offset = "0xAA24B0", VA = "0xAA24B0", Slot = "14")]
	public virtual void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xAA24B4", Offset = "0xAA24B4", VA = "0xAA24B4", Slot = "15")]
	public virtual void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xAA24B8", Offset = "0xAA24B8", VA = "0xAA24B8", Slot = "16")]
	public virtual void OnBeginDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xAA24BC", Offset = "0xAA24BC", VA = "0xAA24BC", Slot = "17")]
	public virtual void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xAA24C0", Offset = "0xAA24C0", VA = "0xAA24C0", Slot = "18")]
	public virtual void OnEndDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xAA24C4", Offset = "0xAA24C4", VA = "0xAA24C4", Slot = "19")]
	public virtual void OnDrop(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xAA24C8", Offset = "0xAA24C8", VA = "0xAA24C8", Slot = "20")]
	public virtual void OnPointerHover(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xAA24CC", Offset = "0xAA24CC", VA = "0xAA24CC")]
	protected GOEventHandler()
	{
	}
}
[Token(Token = "0x2000043")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ECF74", Offset = "0x7ECF74")]
public class PXR_SingletonScreenFade : MonoBehaviour
{
	[Token(Token = "0x2000301")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE154", Offset = "0x7EE154")]
	private sealed class <ScreenFade>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PXR_SingletonScreenFade <>4__this;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startAlpha;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float endAlpha;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x1700023B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016E3")]
			[Address(RVA = "0xB7D4DC", Offset = "0xB7D4DC", VA = "0xB7D4DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016E5")]
			[Address(RVA = "0xB7D544", Offset = "0xB7D544", VA = "0xB7D544", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xB7D2C0", Offset = "0xB7D2C0", VA = "0xB7D2C0")]
		[DebuggerHidden]
		public <ScreenFade>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xB7D3A8", Offset = "0xB7D3A8", VA = "0xB7D3A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xB7D3AC", Offset = "0xB7D3AC", VA = "0xB7D3AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0xB7D4E4", Offset = "0xB7D4E4", VA = "0xB7D4E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PXR_SingletonScreenFade instance;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float currentAlpha;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EF12C", Offset = "0x7EF12C")]
	public float fadeTime;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EF164", Offset = "0x7EF164")]
	public Color fadeColor;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int renderQueue;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Follower cameraFollower;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshRenderer fadeMeshRenderer;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshFilter fadeMeshFilter;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material fadeMaterial;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isFading;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float nowFadeAlpha;

	[Token(Token = "0x1700002E")]
	public static PXR_SingletonScreenFade Instance
	{
		[Token(Token = "0x6000198")]
		[Address(RVA = "0xB7C648", Offset = "0xB7C648", VA = "0xB7C648")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xB7C7B8", Offset = "0xB7C7B8", VA = "0xB7C7B8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xB7C818", Offset = "0xB7C818", VA = "0xB7C818")]
	private void Awake()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xB7CEB4", Offset = "0xB7CEB4", VA = "0xB7CEB4")]
	private void ChangeCameraTransform(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xB7CF58", Offset = "0xB7CF58", VA = "0xB7CF58")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xB7CE30", Offset = "0xB7CE30", VA = "0xB7CE30")]
	public void SetCurrentAlpha(float alpha)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xB7C9CC", Offset = "0xB7C9CC", VA = "0xB7C9CC")]
	private void CreateFadeMesh()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xB7CF5C", Offset = "0xB7CF5C", VA = "0xB7CF5C")]
	private void DestroyFadeMesh()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xB7D0C0", Offset = "0xB7D0C0", VA = "0xB7D0C0")]
	private void SetMaterialAlpha()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xB7D23C", Offset = "0xB7D23C", VA = "0xB7D23C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F881C", Offset = "0x7F881C")]
	private IEnumerator ScreenFade(float startAlpha, float endAlpha)
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xB7D2EC", Offset = "0xB7D2EC", VA = "0xB7D2EC")]
	public PXR_SingletonScreenFade()
	{
	}
}
[Token(Token = "0x2000044")]
public class PauseChecker : MonoBehaviour
{
	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Thread _BackgroundThread;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _Paused;

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xB7D560", Offset = "0xB7D560", VA = "0xB7D560")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xB7D680", Offset = "0xB7D680", VA = "0xB7D680")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xB7D720", Offset = "0xB7D720", VA = "0xB7D720")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xB7D5D8", Offset = "0xB7D5D8", VA = "0xB7D5D8")]
	private void StartService()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xB7D704", Offset = "0xB7D704", VA = "0xB7D704")]
	private void StopService()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xB7D74C", Offset = "0xB7D74C", VA = "0xB7D74C")]
	private void Run()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xB7D7F8", Offset = "0xB7D7F8", VA = "0xB7D7F8")]
	public PauseChecker()
	{
	}
}
[Token(Token = "0x2000045")]
public class SpeedEffects : MonoBehaviour
{
	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rb;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SoundGroup]
	public string soundFlap;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PlaySoundResult srFlap;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float previousMagnitude;

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xC287D0", Offset = "0xC287D0", VA = "0xC287D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xC288A4", Offset = "0xC288A4", VA = "0xC288A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xC288FC", Offset = "0xC288FC", VA = "0xC288FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xC28950", Offset = "0xC28950", VA = "0xC28950")]
	private void UpdateSlow()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xC28AD8", Offset = "0xC28AD8", VA = "0xC28AD8")]
	public SpeedEffects()
	{
	}
}
[Token(Token = "0x2000046")]
public class FanRotateTesting : MonoBehaviour
{
	[Token(Token = "0x2000302")]
	public enum FanType
	{
		[Token(Token = "0x40012EF")]
		Script,
		[Token(Token = "0x40012F0")]
		Animation
	}

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject fanScriptPrefab;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject fanAnimationPrefab;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF1BC", Offset = "0x7EF1BC")]
	public int amount;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public FanType fanType;

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xA9B830", Offset = "0xA9B830", VA = "0xA9B830")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xA9B85C", Offset = "0xA9B85C", VA = "0xA9B85C")]
	public void SpawnFans(int fanAmount, GameObject fanPrefab)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xA9B9E4", Offset = "0xA9B9E4", VA = "0xA9B9E4")]
	public FanRotateTesting()
	{
	}
}
[Token(Token = "0x2000047")]
public class Rotate : MonoBehaviour
{
	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF1D8", Offset = "0x7EF1D8")]
	public float speed;

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xD57438", Offset = "0xD57438", VA = "0xD57438")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xD57490", Offset = "0xD57490", VA = "0xD57490")]
	public Rotate()
	{
	}
}
[Token(Token = "0x2000048")]
public class RotateArray : MonoBehaviour
{
	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF1F4", Offset = "0x7EF1F4")]
	public float speed1;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF210", Offset = "0x7EF210")]
	public float speed2;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF22C", Offset = "0x7EF22C")]
	public float speed3;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 currentRotation1;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 currentRotation2;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 currentRotation3;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] go1;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] go2;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject[] go3;

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xD57498", Offset = "0xD57498", VA = "0xD57498")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xD574F8", Offset = "0xD574F8", VA = "0xD574F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xD5766C", Offset = "0xD5766C", VA = "0xD5766C")]
	public RotateArray()
	{
	}
}
[Token(Token = "0x2000049")]
public class SpawnFeather : MonoBehaviour
{
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem particle;

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xC287A8", Offset = "0xC287A8", VA = "0xC287A8")]
	public void Spawn()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xC287C8", Offset = "0xC287C8", VA = "0xC287C8")]
	public SpawnFeather()
	{
	}
}
[Token(Token = "0x200004A")]
public class VertexColorAssigner : MonoBehaviour
{
	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color32 color;

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x145A6DC", Offset = "0x145A6DC", VA = "0x145A6DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x145A7C0", Offset = "0x145A7C0", VA = "0x145A7C0")]
	public VertexColorAssigner()
	{
	}
}
[Token(Token = "0x200004B")]
public class VertexColorRandomizer : MonoBehaviour
{
	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color[] colors;

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x145A7F8", Offset = "0x145A7F8", VA = "0x145A7F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x145A940", Offset = "0x145A940", VA = "0x145A940")]
	public VertexColorRandomizer()
	{
	}
}
[Token(Token = "0x200004C")]
public class ExtendedFlycam : MonoBehaviour
{
	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cameraSensitivity;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float climbSpeed;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float normalMoveSpeed;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float slowMoveFactor;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fastMoveFactor;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rotationX;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rotationY;

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xA9AAE0", Offset = "0xA9AAE0", VA = "0xA9AAE0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xA9AB04", Offset = "0xA9AB04", VA = "0xA9AB04")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xA9B814", Offset = "0xA9B814", VA = "0xA9B814")]
	public ExtendedFlycam()
	{
	}
}
[Token(Token = "0x200004D")]
public class ForestMaker : MonoBehaviour
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_treePrefab;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_amount;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_ground;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_radiusDistance;

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xAA211C", Offset = "0xAA211C", VA = "0xAA211C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xAA24A0", Offset = "0xAA24A0", VA = "0xAA24A0")]
	public ForestMaker()
	{
	}
}
[Token(Token = "0x200004E")]
public enum ImpostorType
{
	[Token(Token = "0x4000143")]
	Spherical,
	[Token(Token = "0x4000144")]
	Octahedron,
	[Token(Token = "0x4000145")]
	HemiOctahedron
}
[Token(Token = "0x200004F")]
[Flags]
public enum DeferredBuffers
{
	[Token(Token = "0x4000147")]
	AlbedoAlpha = 1,
	[Token(Token = "0x4000148")]
	SpecularSmoothness = 2,
	[Token(Token = "0x4000149")]
	NormalDepth = 4,
	[Token(Token = "0x400014A")]
	EmissionOcclusion = 8
}
[Token(Token = "0x2000050")]
public enum RenderingMaps
{
	[Token(Token = "0x400014C")]
	Standard,
	[Token(Token = "0x400014D")]
	Custom
}
[Token(Token = "0x2000051")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7ECFE8", Offset = "0x7ECFE8")]
public class AmplifyImpostorAsset : ScriptableObject
{
	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Material Material;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Mesh Mesh;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	[SerializeField]
	public int Version;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	public ImpostorType ImpostorType;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	[SerializeField]
	public bool LockedSizes;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	[SerializeField]
	public int SelectedSize;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public Vector2 TexSize;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	public bool DecoupleAxisFrames;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF368", Offset = "0x7EF368")]
	public int HorizontalFrames;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF3AC", Offset = "0x7EF3AC")]
	public int VerticalFrames;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF3F0", Offset = "0x7EF3F0")]
	public int PixelPadding;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF434", Offset = "0x7EF434")]
	public int MaxVertices;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF474", Offset = "0x7EF474")]
	public float Tolerance;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF4B8", Offset = "0x7EF4B8")]
	public float NormalScale;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public Vector2[] ShapePoints;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	public AmplifyImpostorBakePreset Preset;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public List<TextureOutput> OverrideOutput;

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xDD567C", Offset = "0xDD567C", VA = "0xDD567C")]
	public AmplifyImpostorAsset()
	{
	}
}
[Token(Token = "0x2000052")]
public enum ImageFormat
{
	[Token(Token = "0x4000160")]
	PNG,
	[Token(Token = "0x4000161")]
	TGA
}
[Token(Token = "0x2000053")]
public enum TextureChannels
{
	[Token(Token = "0x4000163")]
	RGBA,
	[Token(Token = "0x4000164")]
	RGB
}
[Token(Token = "0x2000054")]
public enum TextureCompression
{
	[Token(Token = "0x4000166")]
	None,
	[Token(Token = "0x4000167")]
	Normal,
	[Token(Token = "0x4000168")]
	High,
	[Token(Token = "0x4000169")]
	Low
}
[Token(Token = "0x2000055")]
public enum TextureScale
{
	[Token(Token = "0x400016B")]
	Full = 1,
	[Token(Token = "0x400016C")]
	Half = 2,
	[Token(Token = "0x400016D")]
	Quarter = 4,
	[Token(Token = "0x400016E")]
	Eighth = 8
}
[Token(Token = "0x2000056")]
[Flags]
public enum OverrideMask
{
	[Token(Token = "0x4000170")]
	OutputToggle = 1,
	[Token(Token = "0x4000171")]
	NameSuffix = 2,
	[Token(Token = "0x4000172")]
	RelativeScale = 4,
	[Token(Token = "0x4000173")]
	ColorSpace = 8,
	[Token(Token = "0x4000174")]
	QualityCompression = 0x10,
	[Token(Token = "0x4000175")]
	FileFormat = 0x20
}
[Serializable]
[Token(Token = "0x2000057")]
public class TextureOutput
{
	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public int Index;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	public OverrideMask OverrideMask;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Active;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Name;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextureScale Scale;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool SRGB;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextureChannels Channels;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public TextureCompression Compression;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ImageFormat ImageFormat;

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xC323B0", Offset = "0xC323B0", VA = "0xC323B0")]
	public TextureOutput()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xC3242C", Offset = "0xC3242C", VA = "0xC3242C")]
	public TextureOutput(bool a, string n, TextureScale s, bool sr, TextureChannels c, TextureCompression nc, ImageFormat i)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xC32508", Offset = "0xC32508", VA = "0xC32508")]
	public TextureOutput Clone()
	{
		return null;
	}
}
[Token(Token = "0x2000058")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7ED03C", Offset = "0x7ED03C")]
public class AmplifyImpostorBakePreset : ScriptableObject
{
	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Shader BakeShader;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Shader RuntimeShader;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public int AlphaIndex;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public List<TextureOutput> Output;

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xDD58EC", Offset = "0xDD58EC", VA = "0xDD58EC")]
	public AmplifyImpostorBakePreset()
	{
	}
}
[Token(Token = "0x2000059")]
public class SimpleGPUInstancingExample : MonoBehaviour
{
	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Prefab;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material InstancedMaterial;

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xD5A17C", Offset = "0xD5A17C", VA = "0xD5A17C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xD5A3D0", Offset = "0xD5A3D0", VA = "0xD5A3D0")]
	public SimpleGPUInstancingExample()
	{
	}
}
[Token(Token = "0x200005A")]
public class SimpleMoveExample : MonoBehaviour
{
	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_previous;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_target;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 m_originalPosition;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 BoundingVolume;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float Speed;

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xD5A3D8", Offset = "0xD5A3D8", VA = "0xD5A3D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xD5A454", Offset = "0xD5A454", VA = "0xD5A454")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xD5A710", Offset = "0xD5A710", VA = "0xD5A710")]
	public SimpleMoveExample()
	{
	}
}
[Token(Token = "0x200005B")]
public class Smear : MonoBehaviour
{
	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<Vector3> m_recentPositions;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int FramesBufferSize;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer Renderer;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_instancedMaterial;

	[Token(Token = "0x1700002F")]
	private Material InstancedMaterial
	{
		[Token(Token = "0x60001CD")]
		[Address(RVA = "0xD65AE4", Offset = "0xD65AE4", VA = "0xD65AE4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001CE")]
		[Address(RVA = "0xD65AEC", Offset = "0xD65AEC", VA = "0xD65AEC")]
		set
		{
		}
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xD65AF4", Offset = "0xD65AF4", VA = "0xD65AF4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xD65B28", Offset = "0xD65B28", VA = "0xD65B28")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xD65CAC", Offset = "0xD65CAC", VA = "0xD65CAC")]
	public Smear()
	{
	}
}
[Token(Token = "0x200005C")]
[ExecuteInEditMode]
public class PostProcessExample : MonoBehaviour
{
	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material PostProcessMat;

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xB7FF4C", Offset = "0xB7FF4C", VA = "0xB7FF4C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xB80000", Offset = "0xB80000", VA = "0xB80000")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xB80084", Offset = "0xB80084", VA = "0xB80084")]
	public PostProcessExample()
	{
	}
}
[Token(Token = "0x200005D")]
[ExecuteInEditMode]
public class SpriteMaskController : MonoBehaviour
{
	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SpriteRenderer m_spriteRenderer;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4 m_uvs;

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xC29EC8", Offset = "0xC29EC8", VA = "0xC29EC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xC29F6C", Offset = "0xC29F6C", VA = "0xC29F6C")]
	public SpriteMaskController()
	{
	}
}
[Token(Token = "0x200005E")]
public class RandomMaterial : MonoBehaviour
{
	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer targetRenderer;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xA984F4", Offset = "0xA984F4", VA = "0xA984F4")]
	public void Start()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xA984F8", Offset = "0xA984F8", VA = "0xA984F8")]
	public void ChangeMaterial()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xA9855C", Offset = "0xA9855C", VA = "0xA9855C")]
	public RandomMaterial()
	{
	}
}
[Token(Token = "0x200005F")]
public class UnluckDistanceDisabler : MonoBehaviour
{
	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int _distanceDisable;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform _distanceFrom;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool _distanceFromMainCam;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _disableCheckInterval;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _enableCheckInterval;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _disableOnStart;

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xC39A30", Offset = "0xC39A30", VA = "0xC39A30")]
	public void Start()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xC39B18", Offset = "0xC39B18", VA = "0xC39B18")]
	public void DisableOnStart()
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xC39B50", Offset = "0xC39B50", VA = "0xC39B50")]
	public void CheckDisable()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xC39C9C", Offset = "0xC39C9C", VA = "0xC39C9C")]
	public void CheckEnable()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xC39DE8", Offset = "0xC39DE8", VA = "0xC39DE8")]
	public UnluckDistanceDisabler()
	{
	}
}
[Token(Token = "0x2000060")]
public class LookAtCamera : MonoBehaviour
{
	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera lookAtCamera;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool lookOnlyOnAwake;

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xBE9CD0", Offset = "0xBE9CD0", VA = "0xBE9CD0")]
	public void Start()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xBE9DBC", Offset = "0xBE9DBC", VA = "0xBE9DBC")]
	public void Update()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xBE9D6C", Offset = "0xBE9D6C", VA = "0xBE9D6C")]
	public void LookCam()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xBE9DCC", Offset = "0xBE9DCC", VA = "0xBE9DCC")]
	public LookAtCamera()
	{
	}
}
[Token(Token = "0x2000061")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED0A0", Offset = "0x7ED0A0")]
public class SmoothCameraOrbit : MonoBehaviour
{
	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 targetOffset;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxDistance;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minDistance;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float xSpeed;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ySpeed;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int yMinLimit;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int yMaxLimit;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int zoomRate;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float panSpeed;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zoomDampening;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float autoRotate;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float autoRotateSpeed;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float xDeg;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float yDeg;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float currentDistance;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float desiredDistance;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion currentRotation;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Quaternion desiredRotation;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Quaternion rotation;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 position;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float idleTimer;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float idleSmooth;

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xD65D1C", Offset = "0xD65D1C", VA = "0xD65D1C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xD660D4", Offset = "0xD660D4", VA = "0xD660D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xD65D20", Offset = "0xD65D20", VA = "0xD65D20")]
	public void Init()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xD660D8", Offset = "0xD660D8", VA = "0xD660D8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xD66610", Offset = "0xD66610", VA = "0xD66610")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xD666C0", Offset = "0xD666C0", VA = "0xD666C0")]
	public SmoothCameraOrbit()
	{
	}
}
[Token(Token = "0x2000062")]
public class FlockChild : MonoBehaviour
{
	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public FlockController _spawner;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Vector3 _wayPoint;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _speed;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public bool _dived;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public float _stuckCounter;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public float _damping;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public bool _soar;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[HideInInspector]
	public bool _landing;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public float _targetSpeed;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public bool _move;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject _model;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform _modelT;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public float _avoidValue;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	public float _avoidDistance;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _soarTimer;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool _instantiated;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int _updateNextSeed;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _updateSeed;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	public bool _avoid;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform _thisT;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 _landingPosOffset;

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xA9D9B8", Offset = "0xA9D9B8", VA = "0xA9D9B8")]
	public void Start()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xA9E110", Offset = "0xA9E110", VA = "0xA9E110")]
	public void Update()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xA9E8E4", Offset = "0xA9E8E4", VA = "0xA9E8E4")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xA9E924", Offset = "0xA9E924", VA = "0xA9E924")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xA9DAE4", Offset = "0xA9DAE4", VA = "0xA9DAE4")]
	public void FindRequiredComponents()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xA9DE2C", Offset = "0xA9DE2C", VA = "0xA9DE2C")]
	public void RandomizeStartAnimationFrame()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xA9E0B0", Offset = "0xA9E0B0", VA = "0xA9E0B0")]
	public void InitAvoidanceValues()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xA9DCC8", Offset = "0xA9DCC8", VA = "0xA9DCC8")]
	public void SetRandomScale()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xA9E17C", Offset = "0xA9E17C", VA = "0xA9E17C")]
	public void SoarTimeLimit()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xA9E1E0", Offset = "0xA9E1E0", VA = "0xA9E1E0")]
	public void CheckForDistanceToWaypoint()
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xA9E320", Offset = "0xA9E320", VA = "0xA9E320")]
	public void RotationBasedOnWaypointOrAvoidance()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xA9EC24", Offset = "0xA9EC24", VA = "0xA9EC24")]
	public bool Avoidance()
	{
		return default(bool);
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xA9E6BC", Offset = "0xA9E6BC", VA = "0xA9E6BC")]
	public void LimitRotationOfModel()
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xA9DC18", Offset = "0xA9DC18", VA = "0xA9DC18")]
	public void Wander(float delay)
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xA9F22C", Offset = "0xA9F22C", VA = "0xA9F22C")]
	public void SetRandomMode()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xA9E9D4", Offset = "0xA9E9D4", VA = "0xA9E9D4")]
	public void Flap()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xA9DD3C", Offset = "0xA9DD3C", VA = "0xA9DD3C")]
	public Vector3 findWaypoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xA9F2F4", Offset = "0xA9F2F4", VA = "0xA9F2F4")]
	public void Soar()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xA9F38C", Offset = "0xA9F38C", VA = "0xA9F38C")]
	public void Dive()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xA9F690", Offset = "0xA9F690", VA = "0xA9F690")]
	public void animationSpeed()
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xA9F954", Offset = "0xA9F954", VA = "0xA9F954")]
	public FlockChild()
	{
	}
}
[Token(Token = "0x2000063")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED0D8", Offset = "0x7ED0D8")]
public class FlockChildSound : MonoBehaviour
{
	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] _idleSounds;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float _idleSoundRandomChance;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] _flightSounds;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _flightSoundRandomChance;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] _scareSounds;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _pitchMin;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _pitchMax;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float _volumeMin;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float _volumeMax;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private FlockChild _flockChild;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource _audio;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool _hasLanded;

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xA9F97C", Offset = "0xA9F97C", VA = "0xA9F97C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xA9FA54", Offset = "0xA9FA54", VA = "0xA9FA54")]
	public void PlayRandomSound()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xA9FC70", Offset = "0xA9FC70", VA = "0xA9FC70")]
	public void ScareSound()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xA9FD80", Offset = "0xA9FD80", VA = "0xA9FD80")]
	public FlockChildSound()
	{
	}
}
[Token(Token = "0x2000064")]
public class FlockController : MonoBehaviour
{
	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FlockChild _childPrefab;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int _childAmount;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool _slowSpawn;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float _spawnSphere;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _spawnSphereHeight;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _spawnSphereDepth;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float _minSpeed;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float _maxSpeed;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float _minScale;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _maxScale;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _soarFrequency;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _soarAnimation;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string _flapAnimation;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string _idleAnimation;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float _diveValue;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float _diveFrequency;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _minDamping;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _maxDamping;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float _waypointDistance;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float _minAnimationSpeed;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float _maxAnimationSpeed;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float _randomPositionTimer;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float _positionSphere;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float _positionSphereHeight;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float _positionSphereDepth;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool _childTriggerPos;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	public bool _forceChildWaypoints;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float _forcedRandomDelay;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool _flatFly;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool _flatSoar;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	public bool _birdAvoid;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int _birdAvoidHorizontalForce;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool _birdAvoidDown;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool _birdAvoidUp;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int _birdAvoidVerticalForce;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float _birdAvoidDistanceMax;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float _birdAvoidDistanceMin;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float _soarMaxTime;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LayerMask _avoidanceMask;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<FlockChild> _roamers;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 _posBuffer;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public int _updateDivisor;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float _newDelta;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public int _updateCounter;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float _activeChildren;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public bool _groupChildToNewTransform;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform _groupTransform;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string _groupName;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool _groupChildToFlock;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public Vector3 _startPosOffset;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Transform _thisT;

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xA9FDA4", Offset = "0xA9FDA4", VA = "0xA9FDA4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xA9FEF4", Offset = "0xA9FEF4", VA = "0xA9FEF4")]
	public void AddChild(int amount)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xAA0134", Offset = "0xAA0134", VA = "0xAA0134")]
	public void AddChildToParent(Transform obj)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xAA0194", Offset = "0xAA0194", VA = "0xAA0194")]
	public void RemoveChild(int amount)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xAA02B0", Offset = "0xAA02B0", VA = "0xAA02B0")]
	public void Update()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xA9FFF4", Offset = "0xA9FFF4", VA = "0xA9FFF4")]
	public void InstantiateGroup()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xAA0320", Offset = "0xAA0320", VA = "0xAA0320")]
	public void UpdateChildAmount()
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xAA03B8", Offset = "0xAA03B8", VA = "0xAA03B8")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xA9EAAC", Offset = "0xA9EAAC", VA = "0xA9EAAC")]
	public void SetFlockRandomPosition()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xAA0688", Offset = "0xAA0688", VA = "0xAA0688")]
	public void destroyBirds()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xAA0768", Offset = "0xAA0768", VA = "0xAA0768")]
	public FlockController()
	{
	}
}
[Token(Token = "0x2000065")]
public class FlockScare : MonoBehaviour
{
	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LandingSpotController[] landingSpotControllers;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float scareInterval;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float distanceToScare;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int checkEveryNthLandingSpot;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int InvokeAmounts;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int lsc;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int ls;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LandingSpotController currentController;

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xAA0880", Offset = "0xAA0880", VA = "0xAA0880")]
	private void CheckProximityToLandingSpots()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xAA0960", Offset = "0xAA0960", VA = "0xAA0960")]
	private void IterateLandingSpots()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xAA0A10", Offset = "0xAA0A10", VA = "0xAA0A10")]
	private bool CheckDistanceToLandingSpot(LandingSpotController lc)
	{
		return default(bool);
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xAA0BB8", Offset = "0xAA0BB8", VA = "0xAA0BB8")]
	private void Invoker()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xAA0C50", Offset = "0xAA0C50", VA = "0xAA0C50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xAA0CCC", Offset = "0xAA0CCC", VA = "0xAA0CCC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xAA0D20", Offset = "0xAA0D20", VA = "0xAA0D20")]
	public FlockScare()
	{
	}
}
[Token(Token = "0x2000066")]
public class FlockWaypointTrigger : MonoBehaviour
{
	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _timer;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FlockChild _flockChild;

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xAA0D38", Offset = "0xAA0D38", VA = "0xAA0D38")]
	public void Start()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xAA0E10", Offset = "0xAA0E10", VA = "0xAA0E10")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xAA0E2C", Offset = "0xAA0E2C", VA = "0xAA0E2C")]
	public FlockWaypointTrigger()
	{
	}
}
[Token(Token = "0x2000067")]
public class LandingButtons : MonoBehaviour
{
	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LandingSpotController _landingSpotController;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FlockController _flockController;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float hSliderValue;

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xAA9580", Offset = "0xAA9580", VA = "0xAA9580")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xAA9AD8", Offset = "0xAA9AD8", VA = "0xAA9AD8")]
	public LandingButtons()
	{
	}
}
[Token(Token = "0x2000068")]
public class LandingSpot : MonoBehaviour
{
	[Token(Token = "0x2000303")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE164", Offset = "0x7EE164")]
	private sealed class <GetFlockChild>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minDelay;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxDelay;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpot <>4__this;

		[Token(Token = "0x1700023D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016E9")]
			[Address(RVA = "0xAAB72C", Offset = "0xAAB72C", VA = "0xAAB72C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016EB")]
			[Address(RVA = "0xAAB794", Offset = "0xAAB794", VA = "0xAAB794", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xAAAA2C", Offset = "0xAAAA2C", VA = "0xAAAA2C")]
		[DebuggerHidden]
		public <GetFlockChild>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xAAB09C", Offset = "0xAAB09C", VA = "0xAAB09C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xAAB0A0", Offset = "0xAAB0A0", VA = "0xAAB0A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0xAAB734", Offset = "0xAAB734", VA = "0xAAB734", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public FlockChild landingChild;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public bool landing;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int lerpCounter;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public LandingSpotController _controller;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _idle;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform _thisT;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _gotcha;

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xAA9AE8", Offset = "0xAA9AE8", VA = "0xAA9AE8")]
	public void Start()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xAA9C9C", Offset = "0xAA9C9C", VA = "0xAA9C9C")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xAAA09C", Offset = "0xAAA09C", VA = "0xAAA09C")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xAAA9B0", Offset = "0xAAA9B0", VA = "0xAAA9B0")]
	public void StraightenBird()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xAAA804", Offset = "0xAAA804", VA = "0xAAA804")]
	public void RotateBird()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xAA9C18", Offset = "0xAA9C18", VA = "0xAA9C18")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8880", Offset = "0x7F8880")]
	public IEnumerator GetFlockChild(float minDelay, float maxDelay)
	{
		return null;
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xAAAA58", Offset = "0xAAAA58", VA = "0xAAAA58")]
	public void InstantLand()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xAAADAC", Offset = "0xAAADAC", VA = "0xAAADAC")]
	public void ReleaseFlockChild()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xAAB094", Offset = "0xAAB094", VA = "0xAAB094")]
	public LandingSpot()
	{
	}
}
[Token(Token = "0x2000069")]
public class LandingSpotController : MonoBehaviour
{
	[Token(Token = "0x2000304")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE174", Offset = "0x7EE174")]
	private sealed class <InstantLandOnStart>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpotController <>4__this;

		[Token(Token = "0x1700023F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016EF")]
			[Address(RVA = "0xAABFAC", Offset = "0xAABFAC", VA = "0xAABFAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000240")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016F1")]
			[Address(RVA = "0xAAC014", Offset = "0xAAC014", VA = "0xAAC014", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xAABB40", Offset = "0xAABB40", VA = "0xAABB40")]
		[DebuggerHidden]
		public <InstantLandOnStart>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xAABE38", Offset = "0xAABE38", VA = "0xAABE38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xAABE3C", Offset = "0xAABE3C", VA = "0xAABE3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0xAABFB4", Offset = "0xAABFB4", VA = "0xAABFB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000305")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE184", Offset = "0x7EE184")]
	private sealed class <InstantLand>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpotController <>4__this;

		[Token(Token = "0x17000241")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016F5")]
			[Address(RVA = "0xAABDC8", Offset = "0xAABDC8", VA = "0xAABDC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000242")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016F7")]
			[Address(RVA = "0xAABE30", Offset = "0xAABE30", VA = "0xAABE30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xAABB6C", Offset = "0xAABB6C", VA = "0xAABB6C")]
		[DebuggerHidden]
		public <InstantLand>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xAABC54", Offset = "0xAABC54", VA = "0xAABC54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xAABC58", Offset = "0xAABC58", VA = "0xAABC58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0xAABDD0", Offset = "0xAABDD0", VA = "0xAABDD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool _randomRotate;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 _autoCatchDelay;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 _autoDismountDelay;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _maxBirdDistance;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _minBirdDistance;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _takeClosest;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FlockController _flock;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _landOnStart;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool _soarLand;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool _onlyBirdsAbove;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _landingSpeedModifier;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float _landingTurnSpeedModifier;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform _featherPS;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform _thisT;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int _activeLandingSpots;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float _snapLandDistance;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _landedRotateSpeed;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _gizmoSize;

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xAAB79C", Offset = "0xAAB79C", VA = "0xAAB79C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xAA0BAC", Offset = "0xAA0BAC", VA = "0xAA0BAC")]
	public void ScareAll()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xAABA00", Offset = "0xAABA00", VA = "0xAABA00")]
	public void ScareAll(float minDelay, float maxDelay)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xAA992C", Offset = "0xAA992C", VA = "0xAA992C")]
	public void LandAll()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xAAB980", Offset = "0xAAB980", VA = "0xAAB980")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F88E4", Offset = "0x7F88E4")]
	public IEnumerator InstantLandOnStart(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xAA9A58", Offset = "0xAA9A58", VA = "0xAA9A58")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8948", Offset = "0x7F8948")]
	public IEnumerator InstantLand(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xAABB98", Offset = "0xAABB98", VA = "0xAABB98")]
	public LandingSpotController()
	{
	}
}
[Token(Token = "0x200006A")]
public class EnableOnEnable : MonoBehaviour
{
	[Token(Token = "0x2000306")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE194", Offset = "0x7EE194")]
	private sealed class <HandleEnable>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnableOnEnable <>4__this;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject[] <>7__wrap1;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <>7__wrap2;

		[Token(Token = "0x17000243")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016FB")]
			[Address(RVA = "0xA9AA68", Offset = "0xA9AA68", VA = "0xA9AA68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000244")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016FD")]
			[Address(RVA = "0xA9AAD0", Offset = "0xA9AAD0", VA = "0xA9AAD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xA9A85C", Offset = "0xA9A85C", VA = "0xA9A85C")]
		[DebuggerHidden]
		public <HandleEnable>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xA9A890", Offset = "0xA9A890", VA = "0xA9A890", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xA9A894", Offset = "0xA9A894", VA = "0xA9A894", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xA9AA70", Offset = "0xA9AA70", VA = "0xA9AA70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] enableOnEnable;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] disableOnEnable;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] enableOnDisable;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] disableOnDisable;

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xA9A6CC", Offset = "0xA9A6CC", VA = "0xA9A6CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xA9A768", Offset = "0xA9A768", VA = "0xA9A768")]
	public void ManualEnable()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xA9A794", Offset = "0xA9A794", VA = "0xA9A794")]
	public void ManualDisable()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xA9A6F8", Offset = "0xA9A6F8", VA = "0xA9A6F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F89AC", Offset = "0x7F89AC")]
	private IEnumerator HandleEnable()
	{
		return null;
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xA9A798", Offset = "0xA9A798", VA = "0xA9A798")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xA9A888", Offset = "0xA9A888", VA = "0xA9A888")]
	public EnableOnEnable()
	{
	}
}
[Token(Token = "0x200006B")]
public class Fire : MonoBehaviour
{
	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float energy;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float startenergy;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem flames;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem smokeStart;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem steam;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool bSteamOn;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float lightintensity;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float innerflamestart;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onIgnition;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onExtinction;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool bBurning;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SoundGroup]
	public string soundFire;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SoundGroup]
	public string soundSteam;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SoundGroup]
	public string soundFireBell;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SoundGroup]
	public string soundExtinguished;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float particlestartsize;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool bHold;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ParticleSystem.EmissionModule em;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ParticleSystem.MinMaxCurve rate;

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xA9B9EC", Offset = "0xA9B9EC", VA = "0xA9B9EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xA9B9F4", Offset = "0xA9B9F4", VA = "0xA9B9F4")]
	private void UnHold()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xA9BA68", Offset = "0xA9BA68", VA = "0xA9BA68")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xA9BC20", Offset = "0xA9BC20", VA = "0xA9BC20")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xA9BCA0", Offset = "0xA9BCA0", VA = "0xA9BCA0")]
	private void TurnOffBell()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xA9BD0C", Offset = "0xA9BD0C", VA = "0xA9BD0C")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xA9BED0", Offset = "0xA9BED0", VA = "0xA9BED0")]
	private void StopSteam()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xA9B9F0", Offset = "0xA9B9F0", VA = "0xA9B9F0")]
	private void SlowUpdate()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xA9BF98", Offset = "0xA9BF98", VA = "0xA9BF98")]
	private void SetEmission(ParticleSystem ps, float newrate)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xA9C00C", Offset = "0xA9C00C", VA = "0xA9C00C")]
	private void RemoveSoon()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xA9C034", Offset = "0xA9C034", VA = "0xA9C034")]
	private void Hooray()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xA9C128", Offset = "0xA9C128", VA = "0xA9C128")]
	private void StopAllAounds()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xA9C1A4", Offset = "0xA9C1A4", VA = "0xA9C1A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xA9C260", Offset = "0xA9C260", VA = "0xA9C260")]
	public void RegisterTipTarget()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xA9C370", Offset = "0xA9C370", VA = "0xA9C370")]
	public Fire()
	{
	}
}
[Token(Token = "0x200006C")]
public class FireDeck : MonoBehaviour
{
	[Token(Token = "0x2000307")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE1A4", Offset = "0x7EE1A4")]
	private sealed class <StopFlyingDelayed>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FireDeck <>4__this;

		[Token(Token = "0x17000245")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001701")]
			[Address(RVA = "0xA9D948", Offset = "0xA9D948", VA = "0xA9D948", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000246")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001703")]
			[Address(RVA = "0xA9D9B0", Offset = "0xA9D9B0", VA = "0xA9D9B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xA9CDA0", Offset = "0xA9CDA0", VA = "0xA9CDA0")]
		[DebuggerHidden]
		public <StopFlyingDelayed>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xA9D78C", Offset = "0xA9D78C", VA = "0xA9D78C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xA9D790", Offset = "0xA9D790", VA = "0xA9D790", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xA9D950", Offset = "0xA9D950", VA = "0xA9D950", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string strCongratulations;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject flyingPhysicsCollider;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody rb;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HeroAcademy heroAcademy;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FlyingManager flyingManager;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject star1;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject star2;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject star3;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public HeroTimer timer;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject ready;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject set;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject go;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SoundGroup]
	public string soundReady;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SoundGroup]
	public string soundGo;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SoundGroup]
	public string soundFinish;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject step1;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject step2;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject step3;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject deckFire;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject bench;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private string txtMsg;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float fMaxDrag;

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xA9C38C", Offset = "0xA9C38C", VA = "0xA9C38C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xA9C390", Offset = "0xA9C390", VA = "0xA9C390")]
	public void StartTheDeck()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xA9C568", Offset = "0xA9C568", VA = "0xA9C568")]
	public void InitiateRaceLightSequence()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xA9C56C", Offset = "0xA9C56C", VA = "0xA9C56C")]
	public void Swap()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xA9C710", Offset = "0xA9C710", VA = "0xA9C710")]
	public void Finish()
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xA9CB8C", Offset = "0xA9CB8C", VA = "0xA9CB8C")]
	private void SetRewardText()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xA9CD2C", Offset = "0xA9CD2C", VA = "0xA9CD2C")]
	public void OnLanguageChange(int inputLanguage)
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xA9CB38", Offset = "0xA9CB38", VA = "0xA9CB38")]
	public void StopFireDeck()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xA9CD30", Offset = "0xA9CD30", VA = "0xA9CD30")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8A10", Offset = "0x7F8A10")]
	private IEnumerator StopFlyingDelayed()
	{
		return null;
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xA9CDCC", Offset = "0xA9CDCC", VA = "0xA9CDCC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xA9CEA4", Offset = "0xA9CEA4", VA = "0xA9CEA4")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xA9CEA8", Offset = "0xA9CEA8", VA = "0xA9CEA8")]
	public void SpecialDebug()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xA9C5D8", Offset = "0xA9C5D8", VA = "0xA9C5D8")]
	public void Ready()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xA9D090", Offset = "0xA9D090", VA = "0xA9D090")]
	public void Ready2()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xA9D1AC", Offset = "0xA9D1AC", VA = "0xA9D1AC")]
	public void Set()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xA9D2C8", Offset = "0xA9D2C8", VA = "0xA9D2C8")]
	public void Go()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xA9D40C", Offset = "0xA9D40C", VA = "0xA9D40C")]
	public void CheckForGoneLoop()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xA9D4C0", Offset = "0xA9D4C0", VA = "0xA9D4C0")]
	public void Gone()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xA9D584", Offset = "0xA9D584", VA = "0xA9D584")]
	public void SetPodiumStars()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xA9D734", Offset = "0xA9D734", VA = "0xA9D734")]
	public FireDeck()
	{
	}
}
[Token(Token = "0x200006D")]
public class FlyingManager : MonoBehaviour
{
	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string LOG_TAG;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EF6E8", Offset = "0x7EF6E8")]
	public Rigidbody rb;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject flyingPhysicsCollider;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fSlowUpdateFrequency;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fPower;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fLastPower;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float dragMax;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float dragMin;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float dragLock;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool flyingLocked;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float fBrakeMultiplier;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float fSmoothDragReduction;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool bFullThrottle;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 previousPosition;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string musicFlying;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool musicPlaying;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FlyingRocketController move1;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public FlyingRocketController move2;

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xAA0E3C", Offset = "0xAA0E3C", VA = "0xAA0E3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xAA0E74", Offset = "0xAA0E74", VA = "0xAA0E74")]
	private void UpdateSlow()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xA9C454", Offset = "0xA9C454", VA = "0xA9C454")]
	public void StartFlying()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xAA11B0", Offset = "0xAA11B0", VA = "0xAA11B0")]
	public void StopFlying()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xAA13E8", Offset = "0xAA13E8", VA = "0xAA13E8")]
	private void StartMusic()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xAA145C", Offset = "0xAA145C", VA = "0xAA145C")]
	public FlyingManager()
	{
	}
}
[Token(Token = "0x200006E")]
public class FlyingRocketController : MonoBehaviour
{
	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EF720", Offset = "0x7EF720")]
	public float fPower;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem psThrust;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody rb;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 ThrustDirection;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float fSlowUpdateFrequency;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float fHapticUpdateFrequency;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 tempVector;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float fMaxThrustForce;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private PXR_Input.Controller controllerEnum;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EF768", Offset = "0x7EF768")]
	[SoundGroup]
	public string soundRocket;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PlaySoundResult srRocket;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public FlyingManager flyingManager;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool bOn;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Pico_ControllerType controllertype;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem.EmissionModule em;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystem.MainModule main;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ParticleSystem.MinMaxCurve rate;

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xAA14F4", Offset = "0xAA14F4", VA = "0xAA14F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xAA1648", Offset = "0xAA1648", VA = "0xAA1648")]
	private void UpdateSlow()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xAA17AC", Offset = "0xAA17AC", VA = "0xAA17AC")]
	private void UpdateSounds()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xAA1880", Offset = "0xAA1880", VA = "0xAA1880")]
	private void UpdateHaptics()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xAA1914", Offset = "0xAA1914", VA = "0xAA1914")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xAA19D4", Offset = "0xAA19D4", VA = "0xAA19D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xAA19D8", Offset = "0xAA19D8", VA = "0xAA19D8")]
	public void On()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xAA1918", Offset = "0xAA1918", VA = "0xAA1918")]
	public void Off()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xAA1B00", Offset = "0xAA1B00", VA = "0xAA1B00")]
	public void SetThrust(float thrust)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xAA17DC", Offset = "0xAA17DC", VA = "0xAA17DC")]
	private void UpdateParticles()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xAA1C9C", Offset = "0xAA1C9C", VA = "0xAA1C9C")]
	private void SetEmission(ParticleSystem ps, float newrate, float newsize = 1f)
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xAA1D0C", Offset = "0xAA1D0C", VA = "0xAA1D0C")]
	public void DoHapticsTime(float strength, float duration)
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xAA18E4", Offset = "0xAA18E4", VA = "0xAA18E4")]
	private void DoHaptics(float thrust)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xAA1DC4", Offset = "0xAA1DC4", VA = "0xAA1DC4")]
	public FlyingRocketController()
	{
	}
}
[Token(Token = "0x200006F")]
public class HoseController : MonoBehaviour
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EF7B4", Offset = "0x7EF7B4")]
	public float fSlowUpdateFrequency;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fPressure;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem psWater;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem psInvisibleWater;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem psNearWater;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float psPressureMultiplier;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EF7EC", Offset = "0x7EF7EC")]
	[SoundGroup]
	public string soundHose;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PlaySoundResult srHose;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool bOn;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Pico_ControllerType controllertype;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PXR_Input.Controller controllerEnum;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private byte[] clipData;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private OVRHapticsClip hapticsClip;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public OculusHaptics oculusHaptics;

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xAA56A8", Offset = "0xAA56A8", VA = "0xAA56A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xAA574C", Offset = "0xAA574C", VA = "0xAA574C")]
	private void UpdateSlow()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xAA57A4", Offset = "0xAA57A4", VA = "0xAA57A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xAA58A8", Offset = "0xAA58A8", VA = "0xAA58A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xAA57A8", Offset = "0xAA57A8", VA = "0xAA57A8")]
	public void On()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xAA58AC", Offset = "0xAA58AC", VA = "0xAA58AC")]
	public void Off()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xAA5934", Offset = "0xAA5934", VA = "0xAA5934")]
	public void SetHose(float value)
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xAA5B90", Offset = "0xAA5B90", VA = "0xAA5B90")]
	private void DoHaptics(float thrust)
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xAA5BC0", Offset = "0xAA5BC0", VA = "0xAA5BC0")]
	public HoseController()
	{
	}
}
[Token(Token = "0x2000070")]
public class RocketInputManager : MonoBehaviour
{
	[Token(Token = "0x2000308")]
	public enum WeaponMode
	{
		[Token(Token = "0x4001307")]
		None,
		[Token(Token = "0x4001308")]
		Hose,
		[Token(Token = "0x4001309")]
		Flight
	}

	[Token(Token = "0x2000309")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE1B4", Offset = "0x7EE1B4")]
	private sealed class <>c__DisplayClass27_0
	{
		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObjectModel;

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xD553EC", Offset = "0xD553EC", VA = "0xD553EC")]
		public <>c__DisplayClass27_0()
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0xD5568C", Offset = "0xD5568C", VA = "0xD5568C")]
		internal void <EaseOn>b__0()
		{
		}
	}

	[Token(Token = "0x200030A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE1C4", Offset = "0x7EE1C4")]
	private sealed class <>c__DisplayClass28_0
	{
		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObjectModel;

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xD553F4", Offset = "0xD553F4", VA = "0xD553F4")]
		public <>c__DisplayClass28_0()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xD556AC", Offset = "0xD556AC", VA = "0xD556AC")]
		internal void <EaseOff>b__0()
		{
		}
	}

	[Token(Token = "0x200030B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE1D4", Offset = "0x7EE1D4")]
	private sealed class <CoolDown>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RocketInputManager <>4__this;

		[Token(Token = "0x17000247")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600170B")]
			[Address(RVA = "0xD5577C", Offset = "0xD5577C", VA = "0xD5577C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000248")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600170D")]
			[Address(RVA = "0xD557E4", Offset = "0xD557E4", VA = "0xD557E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xD55650", Offset = "0xD55650", VA = "0xD55650")]
		[DebuggerHidden]
		public <CoolDown>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xD556CC", Offset = "0xD556CC", VA = "0xD556CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xD556D0", Offset = "0xD556D0", VA = "0xD556D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xD55784", Offset = "0xD55784", VA = "0xD55784", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ControllerInputHandler inputHandler;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private FlyingRocketController flyingRocketController;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HoseController hoseController;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool bFlyingMode;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject hose;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject rocket;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject controller;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Grabber grabber;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public WeaponMode weaponMode;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public WeaponMode saveWeaponMode;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject step1;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public SwapZone swapZone;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Pico_ControllerType m_controller;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SoundGroup]
	public string swapSound;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool coolingDown;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public FireDeck fireDeck;

	[Token(Token = "0x17000030")]
	public FlyingRocketController FlyingRocketController
	{
		[Token(Token = "0x6000271")]
		[Address(RVA = "0xD54AD4", Offset = "0xD54AD4", VA = "0xD54AD4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xD54ADC", Offset = "0xD54ADC", VA = "0xD54ADC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xD54B9C", Offset = "0xD54B9C", VA = "0xD54B9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xD54E18", Offset = "0xD54E18", VA = "0xD54E18")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xD54F50", Offset = "0xD54F50", VA = "0xD54F50")]
	public void TurnOffWeapons()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xD54FE4", Offset = "0xD54FE4", VA = "0xD54FE4")]
	public void TurnOnWeapons()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xD55054", Offset = "0xD55054", VA = "0xD55054")]
	public void OnControllerButtonUp(object sender, ControllerEventArgs e)
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xD55058", Offset = "0xD55058", VA = "0xD55058")]
	public void OnControllerAxis(object sender, ControllerEventArgs e)
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xD54CE4", Offset = "0xD54CE4", VA = "0xD54CE4")]
	public void SetMode()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xD55090", Offset = "0xD55090", VA = "0xD55090")]
	private void SetTriggerAction(float value)
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xD5526C", Offset = "0xD5526C", VA = "0xD5526C")]
	public void EaseOn(GameObject gameObjectModel)
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xD5511C", Offset = "0xD5511C", VA = "0xD5511C")]
	public void EaseOff(GameObject gameObjectModel)
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xD553FC", Offset = "0xD553FC", VA = "0xD553FC")]
	public void OnSwap(object sender, SwapEventArgs e)
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xD555E0", Offset = "0xD555E0", VA = "0xD555E0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8A74", Offset = "0x7F8A74")]
	private IEnumerator CoolDown()
	{
		return null;
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xD5567C", Offset = "0xD5567C", VA = "0xD5567C")]
	public RocketInputManager()
	{
	}
}
[Token(Token = "0x2000071")]
public class SnapRotation : MonoBehaviour
{
	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool bReady;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float fTotalAmount;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fRotateTarget;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float fIncrement;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject headset;

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xD669B8", Offset = "0xD669B8", VA = "0xD669B8")]
	public void SnapLeft()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xD66AB8", Offset = "0xD66AB8", VA = "0xD66AB8")]
	public void SnapRight()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xD66BB8", Offset = "0xD66BB8", VA = "0xD66BB8")]
	public SnapRotation()
	{
	}
}
[Token(Token = "0x2000072")]
public class HBT : MonoBehaviour
{
	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator anim;

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xAA3748", Offset = "0xAA3748", VA = "0xAA3748")]
	private void Start()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xAA37A0", Offset = "0xAA37A0", VA = "0xAA37A0")]
	private void StartTrigger()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xAA37FC", Offset = "0xAA37FC", VA = "0xAA37FC")]
	public HBT()
	{
	}
}
[Token(Token = "0x2000073")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED13C", Offset = "0x7ED13C")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED13C", Offset = "0x7ED13C")]
public class HolographicButton : HolographicInteractableElement
{
	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HolographicButtonEvent _buttonEvent;

	[Token(Token = "0x17000031")]
	private HolographicButtonEvent ButtonEvent
	{
		[Token(Token = "0x6000286")]
		[Address(RVA = "0xAA3E54", Offset = "0xAA3E54", VA = "0xAA3E54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xAA3EEC", Offset = "0xAA3EEC", VA = "0xAA3EEC")]
	public void OnButtonGrabbed()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xAA4054", Offset = "0xAA4054", VA = "0xAA4054")]
	public void OnButtonHeld()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xAA4058", Offset = "0xAA4058", VA = "0xAA4058")]
	public void OnButtonReleased()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xAA40E0", Offset = "0xAA40E0", VA = "0xAA40E0")]
	public HolographicButton()
	{
	}
}
[Token(Token = "0x2000074")]
public class HolographicButtonEvent : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200030C")]
	public class CustomUnityEvent : UnityEvent
	{
		[Token(Token = "0x600170E")]
		[Address(RVA = "0xAA4128", Offset = "0xAA4128", VA = "0xAA4128")]
		public CustomUnityEvent()
		{
		}
	}

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _value;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CustomUnityEvent OnButtonDown;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CustomUnityEvent OnButtonUp;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CustomUnityEvent OnButtonStay;

	[Token(Token = "0x17000032")]
	public bool Value
	{
		[Token(Token = "0x600028B")]
		[Address(RVA = "0xAA40F0", Offset = "0xAA40F0", VA = "0xAA40F0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600028C")]
		[Address(RVA = "0xAA3F74", Offset = "0xAA3F74", VA = "0xAA3F74")]
		set
		{
		}
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xAA40F8", Offset = "0xAA40F8", VA = "0xAA40F8")]
	private void Update()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xAA4120", Offset = "0xAA4120", VA = "0xAA4120")]
	public HolographicButtonEvent()
	{
	}
}
[Token(Token = "0x2000075")]
public class HolographicButtonRaycast : MonoBehaviour
{
	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HolographicSlider currentButton;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _grabthing;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask layerMask;

	[Token(Token = "0x17000033")]
	public bool IsGrabbing
	{
		[Token(Token = "0x600028F")]
		[Address(RVA = "0xAA4130", Offset = "0xAA4130", VA = "0xAA4130")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000034")]
	public bool GrabThing
	{
		[Token(Token = "0x6000290")]
		[Address(RVA = "0xAA41A0", Offset = "0xAA41A0", VA = "0xAA41A0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000291")]
		[Address(RVA = "0xAA41A8", Offset = "0xAA41A8", VA = "0xAA41A8")]
		set
		{
		}
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xAA41E4", Offset = "0xAA41E4", VA = "0xAA41E4")]
	private void SetUpNewGrab()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xAA4714", Offset = "0xAA4714", VA = "0xAA4714")]
	private void EndCurrentGrab()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xAA4A44", Offset = "0xAA4A44", VA = "0xAA4A44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xAA4A48", Offset = "0xAA4A48", VA = "0xAA4A48")]
	private void UpdateGrab()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xAA4C30", Offset = "0xAA4C30", VA = "0xAA4C30")]
	public HolographicButtonRaycast()
	{
	}
}
[Token(Token = "0x2000076")]
public class HolographicInteractableElement : MonoBehaviour
{
	[Token(Token = "0x6000297")]
	[Address(RVA = "0xAA40E8", Offset = "0xAA40E8", VA = "0xAA40E8")]
	public HolographicInteractableElement()
	{
	}
}
[Token(Token = "0x2000077")]
public class HolographicInteractableElementEvent : MonoBehaviour
{
	[Token(Token = "0x6000298")]
	[Address(RVA = "0xAA4C38", Offset = "0xAA4C38", VA = "0xAA4C38")]
	public HolographicInteractableElementEvent()
	{
	}
}
[Token(Token = "0x2000078")]
public class AngleAtPoint
{
	[Token(Token = "0x6000299")]
	[Address(RVA = "0xDD995C", Offset = "0xDD995C", VA = "0xDD995C")]
	public static bool CalculatePostion(Vector3 startPosition, Vector3 fowardDirection, Vector3 PlaneOffset, Axis axis, out Vector3 endPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xDD9A04", Offset = "0xDD9A04", VA = "0xDD9A04")]
	public static bool CalculatePostion(Vector3 startPosition, Vector3 fowardDirection, Vector3 PlaneOffset, Axis axis, out Vector3 endPosition, out Trig trig)
	{
		return default(bool);
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xDD9FC0", Offset = "0xDD9FC0", VA = "0xDD9FC0")]
	public static bool FindPointOnPlane(Vector3 startPosition, Vector3 fowardDirection, Vector3 planePivot, Vector3 planeNormal, out Vector3 endPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xDDA07C", Offset = "0xDDA07C", VA = "0xDDA07C")]
	public static bool FindPointOnPlane(Vector3 startPosition, Vector3 fowardDirection, Vector3 planePivot, Vector3 planeNormal, out Vector3 endPosition, out Trig trig)
	{
		return default(bool);
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xDD9E48", Offset = "0xDD9E48", VA = "0xDD9E48")]
	private static Vector3 FindPointAtEndOfHypotenuse(Vector3 A, Vector3 B, Vector3 DirFromAtoC)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xDD9DF8", Offset = "0xDD9DF8", VA = "0xDD9DF8")]
	private static Vector3 OneAxisVector(Vector3 input, Axis axis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xDDA2E8", Offset = "0xDDA2E8", VA = "0xDDA2E8")]
	public AngleAtPoint()
	{
	}
}
[Serializable]
[Token(Token = "0x2000079")]
public struct Trig
{
	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 A;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 B;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 D;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 E;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 C;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ABAC;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float AB;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 AC_Dir_XY;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 AC_Dir_XZ;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Vector3 AC_Dir_YZ;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector3 P;
}
[Serializable]
[Token(Token = "0x200007A")]
public enum Axis
{
	[Token(Token = "0x40002B5")]
	x = 2,
	[Token(Token = "0x40002B6")]
	y = 4,
	[Token(Token = "0x40002B7")]
	xy = 6,
	[Token(Token = "0x40002B8")]
	z = 8,
	[Token(Token = "0x40002B9")]
	xz = 10,
	[Token(Token = "0x40002BA")]
	yz = 12,
	[Token(Token = "0x40002BB")]
	xyz = 14
}
[Token(Token = "0x200007B")]
[ExecuteInEditMode]
public class AngleAtPointDebug : MonoBehaviour
{
	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject planeCentre;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 planeNormal;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 planePivot;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceToPlane;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Axis axis;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 endPosition;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Trig trig;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject linerendererPrefab;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LineRenderer[] lineRenderers;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private LineRenderer LR_AB;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private LineRenderer LR_AC;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private LineRenderer LR_AD;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private LineRenderer LR_AE;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private LineRenderer LR_BC;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private LineRenderer LR_BD;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private LineRenderer LR_BE;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private LineRenderer LR_CD;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private LineRenderer LR_CE;

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xDDA2F0", Offset = "0xDDA2F0", VA = "0xDDA2F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xDDAA68", Offset = "0xDDAA68", VA = "0xDDAA68")]
	private void ResetAllLineRenderers()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xDDAB84", Offset = "0xDDAB84", VA = "0xDDAB84")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xDDAC80", Offset = "0xDDAC80", VA = "0xDDAC80")]
	private void SetLineRenderer(Vector3 start, Vector3 end, Color color, LineRenderer renderer)
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xDDAD9C", Offset = "0xDDAD9C", VA = "0xDDAD9C")]
	public AngleAtPointDebug()
	{
	}
}
[Token(Token = "0x200007C")]
public class CustomSlider : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200030D")]
	public class CustomUnityEvent : UnityEvent<float>
	{
		[Token(Token = "0x600170F")]
		[Address(RVA = "0xDDE074", Offset = "0xDDE074", VA = "0xDDE074")]
		public CustomUnityEvent()
		{
		}
	}

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float lastValue;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _value;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CustomUnityEvent OnValueChanged;

	[Token(Token = "0x17000035")]
	public float Value
	{
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xDDDFEC", Offset = "0xDDDFEC", VA = "0xDDDFEC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xDDDFF4", Offset = "0xDDDFF4", VA = "0xDDDFF4")]
		set
		{
		}
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xDDE06C", Offset = "0xDDE06C", VA = "0xDDE06C")]
	public CustomSlider()
	{
	}
}
[Token(Token = "0x200007D")]
public class CustomTwoAxisSlider : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200030E")]
	public class CustomUnityEvent : UnityEvent<Vector2>
	{
		[Token(Token = "0x6001710")]
		[Address(RVA = "0xDDE1A0", Offset = "0xDDE1A0", VA = "0xDDE1A0")]
		public CustomUnityEvent()
		{
		}
	}

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector2 lastValue;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 _value;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CustomUnityEvent OnValueChanged;

	[Token(Token = "0x17000036")]
	public Vector2 Value
	{
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xDDE0C4", Offset = "0xDDE0C4", VA = "0xDDE0C4")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xDDE0CC", Offset = "0xDDE0CC", VA = "0xDDE0CC")]
		set
		{
		}
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xDDE198", Offset = "0xDDE198", VA = "0xDDE198")]
	public CustomTwoAxisSlider()
	{
	}
}
[Token(Token = "0x200007E")]
public class MultiAxisSlider : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200030F")]
	public class CustomUnityEvent : UnityEvent<MultiAxisEventData>
	{
		[Token(Token = "0x6001711")]
		[Address(RVA = "0xBFF768", Offset = "0xBFF768", VA = "0xBFF768")]
		public CustomUnityEvent()
		{
		}
	}

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MultiAxisEventData lastValue;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MultiAxisEventData _value;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CustomUnityEvent OnValueChanged;

	[Token(Token = "0x17000037")]
	public MultiAxisEventData Value
	{
		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xBFF6C4", Offset = "0xBFF6C4", VA = "0xBFF6C4")]
		get
		{
			return default(MultiAxisEventData);
		}
		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xBFF6D0", Offset = "0xBFF6D0", VA = "0xBFF6D0")]
		set
		{
		}
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xBFF760", Offset = "0xBFF760", VA = "0xBFF760")]
	public MultiAxisSlider()
	{
	}
}
[Serializable]
[Token(Token = "0x200007F")]
public struct MultiAxisEventData
{
	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EF868", Offset = "0x7EF868")]
	private Vector3 <Value>k__BackingField;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EF878", Offset = "0x7EF878")]
	private Axis <Axis>k__BackingField;

	[Token(Token = "0x17000038")]
	public Vector3 Value
	{
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x88A244", Offset = "0x88A244", VA = "0x88A244")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8AD8", Offset = "0x7F8AD8")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x88A250", Offset = "0x88A250", VA = "0x88A250")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8AE8", Offset = "0x7F8AE8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public Axis Axis
	{
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x88A25C", Offset = "0x88A25C", VA = "0x88A25C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8AF8", Offset = "0x7F8AF8")]
		get
		{
			return default(Axis);
		}
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x88A264", Offset = "0x88A264", VA = "0x88A264")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F8B08", Offset = "0x7F8B08")]
		private set
		{
		}
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x88A26C", Offset = "0x88A26C", VA = "0x88A26C")]
	public MultiAxisEventData(Vector3 value, Axis axis)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x88A27C", Offset = "0x88A27C", VA = "0x88A27C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xBFF580", Offset = "0xBFF580", VA = "0xBFF580")]
	public static bool operator ==(MultiAxisEventData c1, MultiAxisEventData c2)
	{
		return default(bool);
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xBFF600", Offset = "0xBFF600", VA = "0xBFF600")]
	public static bool operator !=(MultiAxisEventData c1, MultiAxisEventData c2)
	{
		return default(bool);
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x88A284", Offset = "0x88A284", VA = "0x88A284", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x2000080")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED1D8", Offset = "0x7ED1D8")]
public class HolographicSlider : HolographicInteractableElement
{
	[Token(Token = "0x2000310")]
	public enum MyAxis
	{
		[Token(Token = "0x4001310")]
		x = 2,
		[Token(Token = "0x4001311")]
		y = 4,
		[Token(Token = "0x4001312")]
		z = 8
	}

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MultiAxisSlider _slider;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Axis _axisToMove;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 positiveLimits;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 negitiveLimits;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform child;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 worldPositionTarget;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 worldPositionStart;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 childInitalPosition;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool isTracking;

	[Token(Token = "0x1700003A")]
	private MultiAxisSlider Slider
	{
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xAA4C40", Offset = "0xAA4C40", VA = "0xAA4C40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003B")]
	[SerializeField]
	public Axis AxisToMove
	{
		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xAA4CD8", Offset = "0xAA4CD8", VA = "0xAA4CD8")]
		get
		{
			return default(Axis);
		}
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xAA4CE0", Offset = "0xAA4CE0", VA = "0xAA4CE0")]
		set
		{
		}
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xAA49EC", Offset = "0xAA49EC", VA = "0xAA49EC")]
	public void StartMoving(Vector3 initalPoint)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xAA4C28", Offset = "0xAA4C28", VA = "0xAA4C28")]
	public void MoveChildToOffset(Vector3 newTarget)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xAA4DE0", Offset = "0xAA4DE0", VA = "0xAA4DE0")]
	public void MoveChildToOffset(Vector3 newTarget, bool triggerValue)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xAA505C", Offset = "0xAA505C", VA = "0xAA505C")]
	public void SetChildPositionByValue(float value)
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xAA50AC", Offset = "0xAA50AC", VA = "0xAA50AC")]
	public void SetChildPositionByValue(Vector3 value)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xAA5048", Offset = "0xAA5048", VA = "0xAA5048")]
	public void SetChildPositionByValue(MultiAxisEventData data)
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xAA523C", Offset = "0xAA523C", VA = "0xAA523C")]
	public Axis GetAxisTarget()
	{
		return default(Axis);
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xAA471C", Offset = "0xAA471C", VA = "0xAA471C")]
	public Vector3 GetPlanePivot()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xAA4740", Offset = "0xAA4740", VA = "0xAA4740")]
	public Vector3 GetPlaneNormal(Vector3 positionToOffsetFrom)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xAA5254", Offset = "0xAA5254", VA = "0xAA5254")]
	public float GetAxisOffset(Vector3 positionToOffsetFrom, out Axis bestAxis)
	{
		return default(float);
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xAA561C", Offset = "0xAA561C", VA = "0xAA561C")]
	public HolographicSlider()
	{
	}
}
[Token(Token = "0x2000081")]
public class HolographicSliderDefaultTarget : MonoBehaviour
{
	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HolographicSlider slider;

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xAA5624", Offset = "0xAA5624", VA = "0xAA5624")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xAA5660", Offset = "0xAA5660", VA = "0xAA5660")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xAA56A0", Offset = "0xAA56A0", VA = "0xAA56A0")]
	public HolographicSliderDefaultTarget()
	{
	}
}
[Token(Token = "0x2000082")]
public class SyncHolograpicSliderManager : MonoBehaviour
{
	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HolographicSlider lengthSlider;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HolographicSlider widthRightSlider;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HolographicSlider widthLeftSlider;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HolographicSlider offsetSlider;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HolographicSlider rotationLeft;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HolographicSlider rotationRight;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform widthPivot;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform rotationPivot;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject DebugCube;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7EF898", Offset = "0x7EF898")]
	public float DistanceAlongPlank;

	[Token(Token = "0x1700003C")]
	private PlankProfile MyProfile
	{
		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xC2BC90", Offset = "0xC2BC90", VA = "0xC2BC90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xC2BCB4", Offset = "0xC2BCB4", VA = "0xC2BCB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xC2C104", Offset = "0xC2C104", VA = "0xC2C104")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xC2C410", Offset = "0xC2C410", VA = "0xC2C410")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xC2C2DC", Offset = "0xC2C2DC", VA = "0xC2C2DC")]
	private void OnPositionChange(Vector3 value)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xC2C36C", Offset = "0xC2C36C", VA = "0xC2C36C")]
	private void OnRotationChange(float value)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xC2CB68", Offset = "0xC2CB68", VA = "0xC2CB68")]
	private void OnLengthChange(float value)
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xC2CB08", Offset = "0xC2CB08", VA = "0xC2CB08")]
	private void SetRotation(Transform transformToMove, float value)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xC2C580", Offset = "0xC2C580", VA = "0xC2C580")]
	private void SetPosition(Transform transformToMove, Vector3 value, Axis mask)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xC2C8B8", Offset = "0xC2C8B8", VA = "0xC2C8B8")]
	private void SetNormalizedPositionAlongPlank(Transform transformToMove, float normalizedDistanceAlongPlank, Axis mask)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xC2C644", Offset = "0xC2C644", VA = "0xC2C644")]
	private void SetNormalizedPositionAlongPlankRotation(Transform transformToMove, float normalizedDistanceAlongPlank, Axis mask)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xC2CBAC", Offset = "0xC2CBAC", VA = "0xC2CBAC")]
	private Vector3 MaskedVector3(Vector3 newValue, Vector3 oldValue, Axis mask)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xC2C0C8", Offset = "0xC2C0C8", VA = "0xC2C0C8")]
	private Vector3 ConsistantVector3(float value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xC2CBF8", Offset = "0xC2CBF8", VA = "0xC2CBF8")]
	public SyncHolograpicSliderManager()
	{
	}
}
[Token(Token = "0x2000083")]
public class BakeTexturesAtRuntime : MonoBehaviour
{
	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float elapsedTime;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_TextureBaker.CreateAtlasesCoroutineResult result;

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xDDB6B0", Offset = "0xDDB6B0", VA = "0xDDB6B0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xDDBC04", Offset = "0xDDBC04", VA = "0xDDBC04")]
	private void OnBuiltAtlasesSuccess()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xDDBDDC", Offset = "0xDDBDDC", VA = "0xDDBDDC")]
	public BakeTexturesAtRuntime()
	{
	}
}
[Token(Token = "0x2000084")]
public class MB_BatchPrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xBF7080", Offset = "0xBF7080", VA = "0xBF7080")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xBF7158", Offset = "0xBF7158", VA = "0xBF7158")]
	public MB_BatchPrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000085")]
public class MB_SwapShirts : MonoBehaviour
{
	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] clothingAndBodyPartsBareTorso;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer[] clothingAndBodyPartsBareTorsoDamagedArm;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] clothingAndBodyPartsHoodie;

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xBF8F90", Offset = "0xBF8F90", VA = "0xBF8F90")]
	private void Start()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xBF90DC", Offset = "0xBF90DC", VA = "0xBF90DC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xBF9330", Offset = "0xBF9330", VA = "0xBF9330")]
	private void ChangeOutfit(Renderer[] outfit)
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xBF97BC", Offset = "0xBF97BC", VA = "0xBF97BC")]
	public MB_SwapShirts()
	{
	}
}
[Token(Token = "0x2000086")]
public class MB_PrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xBF7F68", Offset = "0xBF7F68", VA = "0xBF7F68")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xBF8040", Offset = "0xBF8040", VA = "0xBF8040")]
	public MB_PrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000087")]
public class MB_DynamicAddDeleteExample : MonoBehaviour
{
	[Token(Token = "0x2000311")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE1E4", Offset = "0x7EE1E4")]
	private sealed class <largeNumber>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MB_DynamicAddDeleteExample <>4__this;

		[Token(Token = "0x17000249")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001715")]
			[Address(RVA = "0xBF79C0", Offset = "0xBF79C0", VA = "0xBF79C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001717")]
			[Address(RVA = "0xBF7A28", Offset = "0xBF7A28", VA = "0xBF7A28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xBF76E4", Offset = "0xBF76E4", VA = "0xBF76E4")]
		[DebuggerHidden]
		public <largeNumber>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xBF7858", Offset = "0xBF7858", VA = "0xBF7858", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xBF785C", Offset = "0xBF785C", VA = "0xBF785C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xBF79C8", Offset = "0xBF79C8", VA = "0xBF79C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> objsInCombined;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_MeshBaker mbd;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject[] objs;

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xBF7160", Offset = "0xBF7160", VA = "0xBF7160")]
	private float GaussianValue()
	{
		return default(float);
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xBF7244", Offset = "0xBF7244", VA = "0xBF7244")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xBF7674", Offset = "0xBF7674", VA = "0xBF7674")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8B18", Offset = "0x7F8B18")]
	private IEnumerator largeNumber()
	{
		return null;
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xBF7710", Offset = "0xBF7710", VA = "0xBF7710")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xBF77E8", Offset = "0xBF77E8", VA = "0xBF77E8")]
	public MB_DynamicAddDeleteExample()
	{
	}
}
[Token(Token = "0x2000088")]
public class MB_Example : MonoBehaviour
{
	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshbaker;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objsToCombine;

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xBF7A30", Offset = "0xBF7A30", VA = "0xBF7A30")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xBF7A8C", Offset = "0xBF7A8C", VA = "0xBF7A8C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xBF7B40", Offset = "0xBF7B40", VA = "0xBF7B40")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xBF7C18", Offset = "0xBF7C18", VA = "0xBF7C18")]
	public MB_Example()
	{
	}
}
[Token(Token = "0x2000089")]
public class MB_ExampleMover : MonoBehaviour
{
	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int axis;

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xBF7C20", Offset = "0xBF7C20", VA = "0xBF7C20")]
	private void Update()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xBF7D14", Offset = "0xBF7D14", VA = "0xBF7D14")]
	public MB_ExampleMover()
	{
	}
}
[Token(Token = "0x200008A")]
public class MB_ExampleSkinnedMeshDescription : MonoBehaviour
{
	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xBF7D1C", Offset = "0xBF7D1C", VA = "0xBF7D1C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xBF7DF4", Offset = "0xBF7DF4", VA = "0xBF7DF4")]
	public MB_ExampleSkinnedMeshDescription()
	{
	}
}
[Token(Token = "0x200008B")]
public class MB_SkinnedMeshSceneController : MonoBehaviour
{
	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject swordPrefab;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject hatPrefab;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject glassesPrefab;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject workerPrefab;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject targetCharacter;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MB3_MeshBaker skinnedMeshBaker;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject swordInstance;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject glassesInstance;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject hatInstance;

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xBF8048", Offset = "0xBF8048", VA = "0xBF8048")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xBF8234", Offset = "0xBF8234", VA = "0xBF8234")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xBF8E6C", Offset = "0xBF8E6C", VA = "0xBF8E6C")]
	public Transform SearchHierarchyForBone(Transform current, string name)
	{
		return null;
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xBF8F88", Offset = "0xBF8F88", VA = "0xBF8F88")]
	public MB_SkinnedMeshSceneController()
	{
	}
}
[Serializable]
[Token(Token = "0x200008C")]
public class MB_AtlasesAndRects
{
	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture2D[] atlases;

	[NonSerialized]
	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<MB_MaterialAndUVRect> mat2rect_map;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] texPropertyNames;

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xBF6B60", Offset = "0xBF6B60", VA = "0xBF6B60")]
	public MB_AtlasesAndRects()
	{
	}
}
[Serializable]
[Token(Token = "0x200008D")]
public class MB_MultiMaterial
{
	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material combinedMaterial;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Material> sourceMaterials;

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xBEBF64", Offset = "0xBEBF64", VA = "0xBEBF64")]
	public MB_MultiMaterial()
	{
	}
}
[Serializable]
[Token(Token = "0x200008E")]
public class MB_MaterialAndUVRect
{
	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material material;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rect atlasRect;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string srcObjName;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Rect samplingRectMatAndUVTiling;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rect sourceMaterialTiling;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Rect samplingEncapsulatinRect;

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xBEBEB0", Offset = "0xBEBEB0", VA = "0xBEBEB0")]
	public MB_MaterialAndUVRect(Material m, Rect destRect, Rect samplingRectMatAndUVTiling, Rect sourceMaterialTiling, Rect samplingEncapsulatinRect, string objName)
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xBF7DFC", Offset = "0xBF7DFC", VA = "0xBF7DFC", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xBF7E40", Offset = "0xBF7E40", VA = "0xBF7E40", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}
}
[Token(Token = "0x200008F")]
public class MB2_TextureBakeResults : ScriptableObject
{
	[Token(Token = "0x2000312")]
	public class Material2AtlasRectangleMapper
	{
		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MB2_TextureBakeResults tbr;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] numTimesMatAppearsInAtlas;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MB_MaterialAndUVRect[] matsAndSrcUVRect;

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xBEC618", Offset = "0xBEC618", VA = "0xBEC618")]
		public Material2AtlasRectangleMapper(MB2_TextureBakeResults res)
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0xBECA48", Offset = "0xBECA48", VA = "0xBECA48")]
		public bool TryMapMaterialToUVRect(Material mat, Mesh m, int submeshIdx, MB3_MeshCombinerSingle.MeshChannelsCache meshChannelCache, Dictionary<int, MB_Utility.MeshAnalysisResult[]> meshAnalysisCache, out Rect rectInAtlas, out Rect encapsulatingRect, out Rect sourceMaterialTilingOut, ref string errorMsg, MB2_LogLevel logLevel)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB_AtlasesAndRects[] combinedMaterialInfo;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rect[] prefabUVRects;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MB_MaterialAndUVRect[] materialsAndUVRects;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material resultMaterial;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MB_MultiMaterial[] resultMaterials;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool doMultiMaterial;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool fixOutOfBoundsUVs;

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xBEB5DC", Offset = "0xBEB5DC", VA = "0xBEB5DC")]
	public static MB2_TextureBakeResults CreateForMaterialsOnRenderer(GameObject[] gos, List<Material> matsOnTargetRenderer)
	{
		return null;
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xBEBFD4", Offset = "0xBEBFD4", VA = "0xBEBFD4")]
	public bool ContainsMaterial(Material m)
	{
		return default(bool);
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xBEC27C", Offset = "0xBEC27C", VA = "0xBEC27C")]
	public string GetDescription()
	{
		return null;
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xBEC610", Offset = "0xBEC610", VA = "0xBEC610")]
	public MB2_TextureBakeResults()
	{
	}
}
[Token(Token = "0x2000090")]
public class MB2_UpdateSkinnedMeshBoundsFromBones : MonoBehaviour
{
	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform[] bones;

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xBED564", Offset = "0xBED564", VA = "0xBED564")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xBED688", Offset = "0xBED688", VA = "0xBED688")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xBED714", Offset = "0xBED714", VA = "0xBED714")]
	public MB2_UpdateSkinnedMeshBoundsFromBones()
	{
	}
}
[Token(Token = "0x2000091")]
public class MB2_UpdateSkinnedMeshBoundsFromBounds : MonoBehaviour
{
	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> objects;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xBED71C", Offset = "0xBED71C", VA = "0xBED71C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xBED9F8", Offset = "0xBED9F8", VA = "0xBED9F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xBEDA8C", Offset = "0xBEDA8C", VA = "0xBEDA8C")]
	public MB2_UpdateSkinnedMeshBoundsFromBounds()
	{
	}
}
[Token(Token = "0x2000092")]
public class MB3_BatchPrefabBaker : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000313")]
	public class MB3_PrefabBakerRow
	{
		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject sourcePrefab;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject resultPrefab;

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xBEEBA0", Offset = "0xBEEBA0", VA = "0xBEEBA0")]
		public MB3_PrefabBakerRow()
		{
		}
	}

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_PrefabBakerRow[] prefabRows;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string outputPrefabFolder;

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xBEEB98", Offset = "0xBEEB98", VA = "0xBEEB98")]
	public MB3_BatchPrefabBaker()
	{
	}
}
[Token(Token = "0x2000093")]
public class MB3_BoneWeightCopier : MonoBehaviour
{
	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject inputGameObject;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject outputPrefab;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float radius;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SkinnedMeshRenderer seamMesh;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string outputFolder;

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xBEEBA8", Offset = "0xBEEBA8", VA = "0xBEEBA8")]
	public MB3_BoneWeightCopier()
	{
	}
}
[Token(Token = "0x2000094")]
public class MB3_DisableHiddenAnimations : MonoBehaviour
{
	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Animation> animationsToCull;

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xBEEBBC", Offset = "0xBEEBBC", VA = "0xBEEBBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xBEECBC", Offset = "0xBEECBC", VA = "0xBEECBC")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xBEEDBC", Offset = "0xBEEDBC", VA = "0xBEEDBC")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xBEEEBC", Offset = "0xBEEEBC", VA = "0xBEEEBC")]
	public MB3_DisableHiddenAnimations()
	{
	}
}
[Token(Token = "0x2000095")]
public class MB3_MeshBaker : MB3_MeshBakerCommon
{
	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected MB3_MeshCombinerSingle _meshCombiner;

	[Token(Token = "0x1700003D")]
	public override MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x6000307")]
		[Address(RVA = "0xBEFE64", Offset = "0xBEFE64", VA = "0xBEFE64", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xBEFE6C", Offset = "0xBEFE6C", VA = "0xBEFE6C")]
	public void BuildSceneMeshObject()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xBEFE90", Offset = "0xBEFE90", VA = "0xBEFE90", Slot = "23")]
	public virtual bool ShowHide(GameObject[] gos, GameObject[] deleteGOs)
	{
		return default(bool);
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xBEFEAC", Offset = "0xBEFEAC", VA = "0xBEFEAC", Slot = "24")]
	public virtual void ApplyShowHide()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xBEFED0", Offset = "0xBEFED0", VA = "0xBEFED0", Slot = "13")]
	public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xBEFF7C", Offset = "0xBEFF7C", VA = "0xBEFF7C", Slot = "14")]
	public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xBF0028", Offset = "0xBF0028", VA = "0xBF0028")]
	public MB3_MeshBaker()
	{
	}
}
[Token(Token = "0x2000096")]
public abstract class MB3_MeshBakerCommon : MB3_MeshBakerRoot
{
	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> objsToMesh;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useObjsToMeshFromTexBaker;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool clearBuffersAfterBake;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string bakeAssetsInPlaceFolderPath;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public GameObject resultPrefab;

	[Token(Token = "0x1700003E")]
	public abstract MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x600030E")]
		get;
	}

	[Token(Token = "0x1700003F")]
	public override MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x600030F")]
		[Address(RVA = "0xBF00A8", Offset = "0xBF00A8", VA = "0xBF00A8", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000310")]
		[Address(RVA = "0xBF00D4", Offset = "0xBF00D4", VA = "0xBF00D4", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xBF0114", Offset = "0xBF0114", VA = "0xBF0114", Slot = "6")]
	public override List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xBF02DC", Offset = "0xBF02DC", VA = "0xBF02DC")]
	public void EnableDisableSourceObjectRenderers(bool show)
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xBF0588", Offset = "0xBF0588", VA = "0xBF0588", Slot = "8")]
	public virtual void ClearMesh()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xBF05B8", Offset = "0xBF05B8", VA = "0xBF05B8", Slot = "9")]
	public virtual void DestroyMesh()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xBF05E8", Offset = "0xBF05E8", VA = "0xBF05E8", Slot = "10")]
	public virtual void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xBF062C", Offset = "0xBF062C", VA = "0xBF062C", Slot = "11")]
	public virtual int GetNumObjectsInCombined()
	{
		return default(int);
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xBF065C", Offset = "0xBF065C", VA = "0xBF065C", Slot = "12")]
	public virtual int GetNumVerticesFor(GameObject go)
	{
		return default(int);
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xBF06A0", Offset = "0xBF06A0", VA = "0xBF06A0")]
	public MB3_TextureBaker GetTextureBaker()
	{
		return null;
	}

	[Token(Token = "0x6000319")]
	public abstract bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true);

	[Token(Token = "0x600031A")]
	public abstract bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource = true);

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xBF07B8", Offset = "0xBF07B8", VA = "0xBF07B8", Slot = "15")]
	public virtual void Apply([Optional] MB3_MeshCombiner.GenerateUV2Delegate uv2GenerationMethod)
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xBF0868", Offset = "0xBF0868", VA = "0xBF0868", Slot = "16")]
	public virtual void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] MB3_MeshCombiner.GenerateUV2Delegate uv2GenerationMethod)
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xBF09B0", Offset = "0xBF09B0", VA = "0xBF09B0", Slot = "17")]
	public virtual bool CombinedMeshContains(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xBF09F4", Offset = "0xBF09F4", VA = "0xBF09F4", Slot = "18")]
	public virtual void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV1 = false, bool updateUV2 = false, bool updateColors = false, bool updateSkinningInfo = false)
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xBF0B24", Offset = "0xBF0B24", VA = "0xBF0B24", Slot = "19")]
	public virtual void UpdateSkinnedMeshApproximateBounds()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xBF0B84", Offset = "0xBF0B84", VA = "0xBF0B84", Slot = "20")]
	public virtual void UpdateSkinnedMeshApproximateBoundsFromBones()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xBF0BE4", Offset = "0xBF0BE4", VA = "0xBF0BE4", Slot = "21")]
	public virtual void UpdateSkinnedMeshApproximateBoundsFromBounds()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xBF0C44", Offset = "0xBF0C44", VA = "0xBF0C44", Slot = "22")]
	protected virtual bool _ValidateForUpdateSkinnedMeshBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xBF0098", Offset = "0xBF0098", VA = "0xBF0098")]
	protected MB3_MeshBakerCommon()
	{
	}
}
[Token(Token = "0x2000097")]
public class MB3_MeshBakerGrouper : MonoBehaviour
{
	[Token(Token = "0x2000314")]
	public enum ClusterType
	{
		[Token(Token = "0x400131C")]
		none,
		[Token(Token = "0x400131D")]
		grid,
		[Token(Token = "0x400131E")]
		pie,
		[Token(Token = "0x400131F")]
		agglomerative
	}

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBakerGrouperCore grouper;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ClusterType clusterType;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GrouperData data;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool includeCellsWithOnlyOneRenderer;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public Bounds sourceObjectBounds;

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xBF0E20", Offset = "0xBF0E20", VA = "0xBF0E20")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xBF0ED0", Offset = "0xBF0ED0", VA = "0xBF0ED0")]
	public MB3_MeshBakerGrouperCore CreateGrouper(ClusterType t, GrouperData data)
	{
		return null;
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xBF1074", Offset = "0xBF1074", VA = "0xBF1074")]
	public MB3_MeshBakerGrouper()
	{
	}
}
[Token(Token = "0x2000098")]
public abstract class MB3_MeshBakerRoot : MonoBehaviour
{
	[Token(Token = "0x2000315")]
	public class ZSortObjects
	{
		[Token(Token = "0x2000472")]
		public class Item
		{
			[Token(Token = "0x40018F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x40018F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 point;

			[Token(Token = "0x6001CB2")]
			[Address(RVA = "0xBF1E98", Offset = "0xBF1E98", VA = "0xBF1E98")]
			public Item()
			{
			}
		}

		[Token(Token = "0x2000473")]
		public class ItemComparer : IComparer<Item>
		{
			[Token(Token = "0x6001CB3")]
			[Address(RVA = "0xBF1EB0", Offset = "0xBF1EB0", VA = "0xBF1EB0", Slot = "4")]
			public int Compare(Item a, Item b)
			{
				return default(int);
			}

			[Token(Token = "0x6001CB4")]
			[Address(RVA = "0xBF1EA0", Offset = "0xBF1EA0", VA = "0xBF1EA0")]
			public ItemComparer()
			{
			}
		}

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 sortAxis;

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xBF1A40", Offset = "0xBF1A40", VA = "0xBF1A40")]
		public void SortByDistanceAlongAxis(List<GameObject> gos)
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xBF1EA8", Offset = "0xBF1EA8", VA = "0xBF1EA8")]
		public ZSortObjects()
		{
		}
	}

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 sortAxis;

	[Token(Token = "0x17000040")]
	[HideInInspector]
	public abstract MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x6000327")]
		get;
		[Token(Token = "0x6000328")]
		set;
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xBF1178", Offset = "0xBF1178", VA = "0xBF1178", Slot = "6")]
	public virtual List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xBF1180", Offset = "0xBF1180", VA = "0xBF1180")]
	public static bool DoCombinedValidate(MB3_MeshBakerRoot mom, MB_ObjsToCombineTypes objToCombineType, MB2_EditorMethodsInterface editorMethods, MB2_ValidationLevel validationLevel)
	{
		return default(bool);
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xBF0E18", Offset = "0xBF0E18", VA = "0xBF0E18")]
	protected MB3_MeshBakerRoot()
	{
	}
}
[Token(Token = "0x2000099")]
public class MB3_MultiMeshBaker : MB3_MeshBakerCommon
{
	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected MB3_MultiMeshCombiner _meshCombiner;

	[Token(Token = "0x17000041")]
	public override MB3_MeshCombiner meshCombiner
	{
		[Token(Token = "0x600032C")]
		[Address(RVA = "0xBF1F48", Offset = "0xBF1F48", VA = "0xBF1F48", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xBF1F50", Offset = "0xBF1F50", VA = "0xBF1F50", Slot = "13")]
	public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xBF20D0", Offset = "0xBF20D0", VA = "0xBF20D0", Slot = "14")]
	public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOs, bool disableRendererInSource)
	{
		return default(bool);
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xBF2250", Offset = "0xBF2250", VA = "0xBF2250")]
	public MB3_MultiMeshBaker()
	{
	}
}
[Token(Token = "0x200009A")]
public class MB3_TextureBaker : MB3_MeshBakerRoot
{
	[Token(Token = "0x2000316")]
	public delegate void OnCombinedTexturesCoroutineSuccess();

	[Token(Token = "0x2000317")]
	public delegate void OnCombinedTexturesCoroutineFail();

	[Token(Token = "0x2000318")]
	public class CreateAtlasesCoroutineResult
	{
		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool success;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isFinished;

		[Token(Token = "0x6001725")]
		[Address(RVA = "0xBF52D8", Offset = "0xBF52D8", VA = "0xBF52D8")]
		public CreateAtlasesCoroutineResult()
		{
		}
	}

	[Token(Token = "0x2000319")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE1F4", Offset = "0x7EE1F4")]
	private sealed class <CreateAtlasesCoroutine>d__75 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CreateAtlasesCoroutineResult coroutineResult;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MB3_TextureBaker <>4__this;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxTimePerFrame;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool saveAtlasesAsAssets;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ProgressUpdateDelegate progressInfo;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MB2_EditorMethodsInterface editorMethods;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MB3_TextureCombiner <combiner>5__2;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <i>5__3;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MB3_TextureCombiner.CombineTexturesIntoAtlasesCoroutineResult <coroutineResult2>5__4;

		[Token(Token = "0x1700024B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001729")]
			[Address(RVA = "0xBF6F80", Offset = "0xBF6F80", VA = "0xBF6F80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600172B")]
			[Address(RVA = "0xBF6FE8", Offset = "0xBF6FE8", VA = "0xBF6FE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0xBF52AC", Offset = "0xBF52AC", VA = "0xBF52AC")]
		[DebuggerHidden]
		public <CreateAtlasesCoroutine>d__75(int <>1__state)
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0xBF6250", Offset = "0xBF6250", VA = "0xBF6250", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xBF6254", Offset = "0xBF6254", VA = "0xBF6254", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0xBF6F88", Offset = "0xBF6F88", VA = "0xBF6F88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected MB2_TextureBakeResults _textureBakeResults;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected int _atlasPadding;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected int _maxAtlasSize;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected bool _resizePowerOfTwoTextures;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	protected bool _fixOutOfBoundsUVs;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	protected int _maxTilingBakeSize;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected MB2_PackingAlgorithmEnum _packingAlgorithm;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	protected bool _meshBakerTexturePackerForcePowerOfTwo;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected List<ShaderTextureProperty> _customShaderProperties;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected List<string> _customShaderPropNames_Depricated;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected bool _doMultiMaterial;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[SerializeField]
	protected bool _doMultiMaterialSplitAtlasesIfTooBig;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	[SerializeField]
	protected bool _doMultiMaterialSplitAtlasesIfOBUVs;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected Material _resultMaterial;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected bool _considerNonTextureProperties;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	protected bool _doSuggestTreatment;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public MB_MultiMaterial[] resultMaterials;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<GameObject> objsToMesh;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public OnCombinedTexturesCoroutineSuccess onBuiltAtlasesSuccess;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public OnCombinedTexturesCoroutineFail onBuiltAtlasesFail;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MB_AtlasesAndRects[] OnCombinedTexturesCoroutineAtlasesAndRects;

	[Token(Token = "0x17000042")]
	public override MB2_TextureBakeResults textureBakeResults
	{
		[Token(Token = "0x6000330")]
		[Address(RVA = "0xBF4CE0", Offset = "0xBF4CE0", VA = "0xBF4CE0", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000331")]
		[Address(RVA = "0xBF4CE8", Offset = "0xBF4CE8", VA = "0xBF4CE8", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public virtual int atlasPadding
	{
		[Token(Token = "0x6000332")]
		[Address(RVA = "0xBF4CF0", Offset = "0xBF4CF0", VA = "0xBF4CF0", Slot = "7")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000333")]
		[Address(RVA = "0xBF4CF8", Offset = "0xBF4CF8", VA = "0xBF4CF8", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public virtual int maxAtlasSize
	{
		[Token(Token = "0x6000334")]
		[Address(RVA = "0xBF4D00", Offset = "0xBF4D00", VA = "0xBF4D00", Slot = "9")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000335")]
		[Address(RVA = "0xBF4D08", Offset = "0xBF4D08", VA = "0xBF4D08", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x17000045")]
	public virtual bool resizePowerOfTwoTextures
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0xBF4D10", Offset = "0xBF4D10", VA = "0xBF4D10", Slot = "11")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000337")]
		[Address(RVA = "0xBF4D18", Offset = "0xBF4D18", VA = "0xBF4D18", Slot = "12")]
		set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public virtual bool fixOutOfBoundsUVs
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0xBF4D24", Offset = "0xBF4D24", VA = "0xBF4D24", Slot = "13")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000339")]
		[Address(RVA = "0xBF4D2C", Offset = "0xBF4D2C", VA = "0xBF4D2C", Slot = "14")]
		set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public virtual int maxTilingBakeSize
	{
		[Token(Token = "0x600033A")]
		[Address(RVA = "0xBF4D38", Offset = "0xBF4D38", VA = "0xBF4D38", Slot = "15")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600033B")]
		[Address(RVA = "0xBF4D40", Offset = "0xBF4D40", VA = "0xBF4D40", Slot = "16")]
		set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public virtual MB2_PackingAlgorithmEnum packingAlgorithm
	{
		[Token(Token = "0x600033C")]
		[Address(RVA = "0xBF4D48", Offset = "0xBF4D48", VA = "0xBF4D48", Slot = "17")]
		get
		{
			return default(MB2_PackingAlgorithmEnum);
		}
		[Token(Token = "0x600033D")]
		[Address(RVA = "0xBF4D50", Offset = "0xBF4D50", VA = "0xBF4D50", Slot = "18")]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public bool meshBakerTexturePackerForcePowerOfTwo
	{
		[Token(Token = "0x600033E")]
		[Address(RVA = "0xBF4D58", Offset = "0xBF4D58", VA = "0xBF4D58")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600033F")]
		[Address(RVA = "0xBF4D60", Offset = "0xBF4D60", VA = "0xBF4D60")]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public virtual List<ShaderTextureProperty> customShaderProperties
	{
		[Token(Token = "0x6000340")]
		[Address(RVA = "0xBF4D6C", Offset = "0xBF4D6C", VA = "0xBF4D6C", Slot = "19")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000341")]
		[Address(RVA = "0xBF4D74", Offset = "0xBF4D74", VA = "0xBF4D74", Slot = "20")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public virtual List<string> customShaderPropNames
	{
		[Token(Token = "0x6000342")]
		[Address(RVA = "0xBF4D7C", Offset = "0xBF4D7C", VA = "0xBF4D7C", Slot = "21")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000343")]
		[Address(RVA = "0xBF4D84", Offset = "0xBF4D84", VA = "0xBF4D84", Slot = "22")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public virtual bool doMultiMaterial
	{
		[Token(Token = "0x6000344")]
		[Address(RVA = "0xBF4D8C", Offset = "0xBF4D8C", VA = "0xBF4D8C", Slot = "23")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000345")]
		[Address(RVA = "0xBF4D94", Offset = "0xBF4D94", VA = "0xBF4D94", Slot = "24")]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public virtual bool doMultiMaterialSplitAtlasesIfTooBig
	{
		[Token(Token = "0x6000346")]
		[Address(RVA = "0xBF4DA0", Offset = "0xBF4DA0", VA = "0xBF4DA0", Slot = "25")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000347")]
		[Address(RVA = "0xBF4DA8", Offset = "0xBF4DA8", VA = "0xBF4DA8", Slot = "26")]
		set
		{
		}
	}

	[Token(Token = "0x1700004E")]
	public virtual bool doMultiMaterialSplitAtlasesIfOBUVs
	{
		[Token(Token = "0x6000348")]
		[Address(RVA = "0xBF4DB4", Offset = "0xBF4DB4", VA = "0xBF4DB4", Slot = "27")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000349")]
		[Address(RVA = "0xBF4DBC", Offset = "0xBF4DBC", VA = "0xBF4DBC", Slot = "28")]
		set
		{
		}
	}

	[Token(Token = "0x1700004F")]
	public virtual Material resultMaterial
	{
		[Token(Token = "0x600034A")]
		[Address(RVA = "0xBF4DC8", Offset = "0xBF4DC8", VA = "0xBF4DC8", Slot = "29")]
		get
		{
			return null;
		}
		[Token(Token = "0x600034B")]
		[Address(RVA = "0xBF4DD0", Offset = "0xBF4DD0", VA = "0xBF4DD0", Slot = "30")]
		set
		{
		}
	}

	[Token(Token = "0x17000050")]
	public bool considerNonTextureProperties
	{
		[Token(Token = "0x600034C")]
		[Address(RVA = "0xBF4DD8", Offset = "0xBF4DD8", VA = "0xBF4DD8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600034D")]
		[Address(RVA = "0xBF4DE0", Offset = "0xBF4DE0", VA = "0xBF4DE0")]
		set
		{
		}
	}

	[Token(Token = "0x17000051")]
	public bool doSuggestTreatment
	{
		[Token(Token = "0x600034E")]
		[Address(RVA = "0xBF4DEC", Offset = "0xBF4DEC", VA = "0xBF4DEC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600034F")]
		[Address(RVA = "0xBF4DF4", Offset = "0xBF4DF4", VA = "0xBF4DF4")]
		set
		{
		}
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xBF4E00", Offset = "0xBF4E00", VA = "0xBF4E00", Slot = "6")]
	public override List<GameObject> GetObjectsToCombine()
	{
		return null;
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xBF4E74", Offset = "0xBF4E74", VA = "0xBF4E74")]
	public MB_AtlasesAndRects[] CreateAtlases()
	{
		return null;
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xBF5200", Offset = "0xBF5200", VA = "0xBF5200")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8B7C", Offset = "0x7F8B7C")]
	public IEnumerator CreateAtlasesCoroutine(ProgressUpdateDelegate progressInfo, CreateAtlasesCoroutineResult coroutineResult, bool saveAtlasesAsAssets = false, [Optional] MB2_EditorMethodsInterface editorMethods, float maxTimePerFrame = 0.01f)
	{
		return null;
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xBF4E84", Offset = "0xBF4E84", VA = "0xBF4E84")]
	public MB_AtlasesAndRects[] CreateAtlases(ProgressUpdateDelegate progressInfo, bool saveAtlasesAsAssets = false, [Optional] MB2_EditorMethodsInterface editorMethods)
	{
		return null;
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xBF52E8", Offset = "0xBF52E8", VA = "0xBF52E8")]
	private void unpackMat2RectMap(MB2_TextureBakeResults tbr)
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xBF5524", Offset = "0xBF5524", VA = "0xBF5524")]
	public MB3_TextureCombiner CreateAndConfigureTextureCombiner()
	{
		return null;
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xBF55DC", Offset = "0xBF55DC", VA = "0xBF55DC")]
	public static void ConfigureNewMaterialToMatchOld(Material newMat, Material original)
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xBF5914", Offset = "0xBF5914", VA = "0xBF5914")]
	private string PrintSet(HashSet<Material> s)
	{
		return null;
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xBF5A60", Offset = "0xBF5A60", VA = "0xBF5A60")]
	private bool _ValidateResultMaterials()
	{
		return default(bool);
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xBF6164", Offset = "0xBF6164", VA = "0xBF6164")]
	public MB3_TextureBaker()
	{
	}
}
[Token(Token = "0x200009B")]
public class MB2_TestShowHide : MonoBehaviour
{
	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker mb;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objs;

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xBEADD4", Offset = "0xBEADD4", VA = "0xBEADD4")]
	private void Update()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xBEAF18", Offset = "0xBEAF18", VA = "0xBEAF18")]
	public MB2_TestShowHide()
	{
	}
}
[Token(Token = "0x200009C")]
public class MB2_TestUpdate : MonoBehaviour
{
	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshbaker;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MB3_MultiMeshBaker multiMeshBaker;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] objsToMove;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject objWithChangingUVs;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2[] uvs;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Mesh m;

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xBEAF20", Offset = "0xBEAF20", VA = "0xBEAF20")]
	private void Start()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xBEB148", Offset = "0xBEB148", VA = "0xBEB148")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xBEB5D4", Offset = "0xBEB5D4", VA = "0xBEB5D4")]
	public MB2_TestUpdate()
	{
	}
}
[Token(Token = "0x200009D")]
public class MB3_TestAddingRemovingSkinnedMeshes : MonoBehaviour
{
	[Token(Token = "0x200031A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE204", Offset = "0x7EE204")]
	private sealed class <TestScript>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MB3_TestAddingRemovingSkinnedMeshes <>4__this;

		[Token(Token = "0x1700024D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600172F")]
			[Address(RVA = "0xBF2C8C", Offset = "0xBF2C8C", VA = "0xBF2C8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001731")]
			[Address(RVA = "0xBF2CF4", Offset = "0xBF2CF4", VA = "0xBF2CF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0xBF235C", Offset = "0xBF235C", VA = "0xBF235C")]
		[DebuggerHidden]
		public <TestScript>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0xBF2390", Offset = "0xBF2390", VA = "0xBF2390", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xBF2394", Offset = "0xBF2394", VA = "0xBF2394", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xBF2C94", Offset = "0xBF2C94", VA = "0xBF2C94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] g;

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xBF22C0", Offset = "0xBF22C0", VA = "0xBF22C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xBF22EC", Offset = "0xBF22EC", VA = "0xBF22EC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8BE0", Offset = "0x7F8BE0")]
	private IEnumerator TestScript()
	{
		return null;
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xBF2388", Offset = "0xBF2388", VA = "0xBF2388")]
	public MB3_TestAddingRemovingSkinnedMeshes()
	{
	}
}
[Token(Token = "0x200009E")]
public class MB3_TestBakeAllWithSameMaterial : MonoBehaviour
{
	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] listOfObjsToCombineGood;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] listOfObjsToCombineBad;

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xBF2CFC", Offset = "0xBF2CFC", VA = "0xBF2CFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xBF2D00", Offset = "0xBF2D00", VA = "0xBF2D00")]
	private void testCombine()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xBF3044", Offset = "0xBF3044", VA = "0xBF3044")]
	public MB3_TestBakeAllWithSameMaterial()
	{
	}
}
[Token(Token = "0x200009F")]
public class MB3_TestRenderTextureTestHarness : MonoBehaviour
{
	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D input;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool doColor;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color32 color;

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xBF304C", Offset = "0xBF304C", VA = "0xBF304C")]
	public Texture2D Create3x3Tex()
	{
		return null;
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xBF316C", Offset = "0xBF316C", VA = "0xBF316C")]
	public Texture2D Create3x3Clone()
	{
		return null;
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xBF33FC", Offset = "0xBF33FC", VA = "0xBF33FC")]
	public static void TestRender(Texture2D input, Texture2D output)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xBF3B48", Offset = "0xBF3B48", VA = "0xBF3B48")]
	public MB3_TestRenderTextureTestHarness()
	{
	}
}
[Token(Token = "0x20000A0")]
public class MB3_TestTexturePacker : MonoBehaviour
{
	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MB2_TexturePacker texturePacker;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numTex;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int min;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int max;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float xMult;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMult;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool imgsMustBePowerOfTwo;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Vector2> imgsToAdd;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int padding;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int maxDim;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool doPowerOfTwoTextures;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool doMultiAtlas;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public MB2_LogLevel logLevel;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string res;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AtlasPackingResult[] rs;

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xBF3B50", Offset = "0xBF3B50", VA = "0xBF3B50")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7F8C44", Offset = "0x7F8C44")]
	public void GenerateListOfImagesToAdd()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xBF3CD8", Offset = "0xBF3CD8", VA = "0xBF3CD8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7F8C7C", Offset = "0x7F8C7C")]
	public void RunTestHarness()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xBF4184", Offset = "0xBF4184", VA = "0xBF4184")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xBF4598", Offset = "0xBF4598", VA = "0xBF4598")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7F8CB4", Offset = "0x7F8CB4")]
	private void Test1()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xBF4744", Offset = "0xBF4744", VA = "0xBF4744")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7F8CEC", Offset = "0x7F8CEC")]
	private void Test2()
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xBF48F0", Offset = "0xBF48F0", VA = "0xBF48F0")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7F8D24", Offset = "0x7F8D24")]
	private void Test3()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xBF4A98", Offset = "0xBF4A98", VA = "0xBF4A98")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x7F8D5C", Offset = "0x7F8D5C")]
	private void Test4()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xBF4C40", Offset = "0xBF4C40", VA = "0xBF4C40")]
	public MB3_TestTexturePacker()
	{
	}
}
[Token(Token = "0x20000A1")]
public class MB_TextureCombinerRenderTexture
{
	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material mat;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RenderTexture _destinationTexture;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera myCamera;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int _padding;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool _isNormalMap;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool _fixOutOfBoundsUVs;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	private bool _doRenderAtlas;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rect[] rs;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<MB3_TextureCombiner.MB_TexSet> textureSets;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int indexOfTexSetToRender;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ShaderTextureProperty _texPropertyName;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TextureBlender _resultMaterialTextureBlender;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Texture2D targTex;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private MB3_TextureCombiner combiner;

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xBEDB88", Offset = "0xBEDB88", VA = "0xBEDB88")]
	public Texture2D DoRenderAtlas(GameObject gameObject, int width, int height, int padding, Rect[] rss, List<MB3_TextureCombiner.MB_TexSet> textureSetss, int indexOfTexSetToRenders, ShaderTextureProperty texPropertyname, TextureBlender resultMaterialTextureBlender, bool isNormalMap, bool fixOutOfBoundsUVs, bool considerNonTextureProperties, MB3_TextureCombiner texCombiner, MB2_LogLevel LOG_LEV)
	{
		return null;
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xBEDFF8", Offset = "0xBEDFF8", VA = "0xBEDFF8")]
	public void OnRenderObject()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xBFAC04", Offset = "0xBFAC04", VA = "0xBFAC04")]
	private Color32 ConvertNormalFormatFromUnity_ToStandard(Color32 c)
	{
		return default(Color32);
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xBFABA8", Offset = "0xBFABA8", VA = "0xBFABA8")]
	private bool IsOpenGL()
	{
		return default(bool);
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xBF9AAC", Offset = "0xBF9AAC", VA = "0xBF9AAC")]
	private void CopyScaledAndTiledToAtlas(MB3_TextureCombiner.MB_TexSet texSet, MB3_TextureCombiner.MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale, Rect rec, ShaderTextureProperty texturePropertyName, TextureBlender resultMatTexBlender)
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xBF97C4", Offset = "0xBF97C4", VA = "0xBF97C4")]
	private void _printTexture(Texture2D t)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xBEDB78", Offset = "0xBEDB78", VA = "0xBEDB78")]
	public MB_TextureCombinerRenderTexture()
	{
	}
}
[Token(Token = "0x20000A2")]
[ExecuteInEditMode]
public class MB3_AtlasPackerRenderTexture : MonoBehaviour
{
	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MB_TextureCombinerRenderTexture fastRenderer;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _doRenderAtlas;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int width;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int height;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int padding;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isNormalMap;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool fixOutOfBoundsUVs;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool considerNonTextureProperties;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextureBlender resultMaterialTextureBlender;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rect[] rects;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D tex1;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<MB3_TextureCombiner.MB_TexSet> textureSets;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int indexOfTexSetToRender;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ShaderTextureProperty texPropertyName;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MB2_LogLevel LOG_LEVEL;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture2D testTex;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material testMat;

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xBEDA94", Offset = "0xBEDA94", VA = "0xBEDA94")]
	public Texture2D OnRenderAtlas(MB3_TextureCombiner combiner)
	{
		return null;
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xBEDFC0", Offset = "0xBEDFC0", VA = "0xBEDFC0")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xBEEB88", Offset = "0xBEEB88", VA = "0xBEEB88")]
	public MB3_AtlasPackerRenderTexture()
	{
	}
}
[Token(Token = "0x20000A3")]
public class MB3_KMeansClustering
{
	[Token(Token = "0x200031B")]
	private class DataPoint
	{
		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 center;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject gameObject;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Cluster;

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xBEF1E0", Offset = "0xBEF1E0", VA = "0xBEF1E0")]
		public DataPoint(GameObject go)
		{
		}
	}

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<DataPoint> _normalizedDataToCluster;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3[] _clusters;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _numberOfClusters;

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xBEEF2C", Offset = "0xBEEF2C", VA = "0xBEEF2C")]
	public MB3_KMeansClustering(List<GameObject> gos, int numClusters)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xBEF30C", Offset = "0xBEF30C", VA = "0xBEF30C")]
	private void InitializeCentroids()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xBEF404", Offset = "0xBEF404", VA = "0xBEF404")]
	private bool UpdateDataPointMeans(bool force)
	{
		return default(bool);
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xBEF6A8", Offset = "0xBEF6A8", VA = "0xBEF6A8")]
	private bool AnyAreEmpty(List<DataPoint> data)
	{
		return default(bool);
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xBEF7C0", Offset = "0xBEF7C0", VA = "0xBEF7C0")]
	private bool UpdateClusterMembership()
	{
		return default(bool);
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xBEF988", Offset = "0xBEF988", VA = "0xBEF988")]
	private float ElucidanDistance(DataPoint dataPoint, Vector3 mean)
	{
		return default(float);
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xBEFA38", Offset = "0xBEFA38", VA = "0xBEFA38")]
	private int MinIndex(float[] distances)
	{
		return default(int);
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xBEFAA8", Offset = "0xBEFAA8", VA = "0xBEFAA8")]
	public List<Renderer> GetCluster(int idx, out Vector3 mean, out float size)
	{
		return null;
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xBEFDC4", Offset = "0xBEFDC4", VA = "0xBEFDC4")]
	public void Cluster()
	{
	}
}
[Token(Token = "0x20000A4")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7ED24C", Offset = "0x7ED24C")]
public class FastList<T>
{
	[Token(Token = "0x200031C")]
	public delegate int CompareFunc(T left, T right);

	[Token(Token = "0x200031D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE214", Offset = "0x7EE214")]
	private sealed class <GetEnumerator>d__25 : IEnumerator<T>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T <>2__current;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastList<T> <>4__this;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <i>5__2;

		[Token(Token = "0x1700024F")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x600173A")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000250")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600173C")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001737")]
		[DebuggerHidden]
		public <GetEnumerator>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6001738")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001739")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600173B")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T[] array;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int size;

	[Token(Token = "0x17000052")]
	public int Count
	{
		[Token(Token = "0x6000386")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000387")]
		set
		{
		}
	}

	[Token(Token = "0x17000053")]
	public T Item
	{
		[Token(Token = "0x6000388")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x6000389")]
		set
		{
		}
	}

	[Token(Token = "0x6000384")]
	public FastList()
	{
	}

	[Token(Token = "0x6000385")]
	public FastList(int size)
	{
	}

	[Token(Token = "0x600038A")]
	public void Add(T item)
	{
	}

	[Token(Token = "0x600038B")]
	public void AddUnique(T item)
	{
	}

	[Token(Token = "0x600038C")]
	public void AddRange(IEnumerable<T> items)
	{
	}

	[Token(Token = "0x600038D")]
	public void Insert(int index, T item)
	{
	}

	[Token(Token = "0x600038E")]
	public bool Remove(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x600038F")]
	public void RemoveAt(int index)
	{
	}

	[Token(Token = "0x6000390")]
	public bool RemoveFast(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000391")]
	public void RemoveAtFast(int index)
	{
	}

	[Token(Token = "0x6000392")]
	public bool Contains(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000393")]
	public int IndexOf(T item)
	{
		return default(int);
	}

	[Token(Token = "0x6000394")]
	public T Pop()
	{
		return (T)null;
	}

	[Token(Token = "0x6000395")]
	public T[] ToArray()
	{
		return null;
	}

	[Token(Token = "0x6000396")]
	public void Sort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x6000397")]
	public void InsertionSort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x6000398")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8D94", Offset = "0x7F8D94")]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000399")]
	public T Find(Predicate<T> match)
	{
		return (T)null;
	}

	[Token(Token = "0x600039A")]
	private void Allocate()
	{
	}

	[Token(Token = "0x600039B")]
	private void Trim()
	{
	}

	[Token(Token = "0x600039C")]
	public void Clear()
	{
	}

	[Token(Token = "0x600039D")]
	public void Release()
	{
	}
}
[Token(Token = "0x20000A5")]
public class InspectorNoteAttribute : PropertyAttribute
{
	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string header;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string message;

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xAA66C4", Offset = "0xAA66C4", VA = "0xAA66C4")]
	public InspectorNoteAttribute(string header, string message = "")
	{
	}
}
[Token(Token = "0x20000A6")]
public class InspectorCommentAttribute : PropertyAttribute
{
	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string message;

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xAA6698", Offset = "0xAA6698", VA = "0xAA6698")]
	public InspectorCommentAttribute(string message = "")
	{
	}
}
[Token(Token = "0x20000A7")]
public class OvrAvatarTestDriver : OvrAvatarDriver
{
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 headPos;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion headRot;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xB79B24", Offset = "0xB79B24", VA = "0xB79B24")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xB79C90", Offset = "0xB79C90", VA = "0xB79C90")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xB7A034", Offset = "0xB7A034", VA = "0xB7A034")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xB7A1DC", Offset = "0xB7A1DC", VA = "0xB7A1DC", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xB7A208", Offset = "0xB7A208", VA = "0xB7A208")]
	public OvrAvatarTestDriver()
	{
	}
}
[Token(Token = "0x20000A8")]
public class PoseEditHelper : MonoBehaviour
{
	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform poseRoot;

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xB7FD4C", Offset = "0xB7FD4C", VA = "0xB7FD4C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xB7FDD8", Offset = "0xB7FDD8", VA = "0xB7FDD8")]
	private void DrawJoints(Transform joint)
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xB7FF44", Offset = "0xB7FF44", VA = "0xB7FF44")]
	public PoseEditHelper()
	{
	}
}
[Token(Token = "0x20000A9")]
public class GazeTargetSpawner : MonoBehaviour
{
	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GazeTargetPrefab;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfDummyTargets;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RadiusMultiplier;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isVisible;

	[Token(Token = "0x17000054")]
	public bool IsVisible
	{
		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xAA2EBC", Offset = "0xAA2EBC", VA = "0xAA2EBC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xAA2EC4", Offset = "0xAA2EC4", VA = "0xAA2EC4")]
		set
		{
		}
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xAA2FEC", Offset = "0xAA2FEC", VA = "0xAA2FEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xAA3208", Offset = "0xAA3208", VA = "0xAA3208")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xAA3210", Offset = "0xAA3210", VA = "0xAA3210")]
	public GazeTargetSpawner()
	{
	}
}
[Token(Token = "0x20000AA")]
public class RemoteLoopbackManager : MonoBehaviour
{
	[Token(Token = "0x200031E")]
	private class PacketLatencyPair
	{
		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] PacketData;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FakeLatency;

		[Token(Token = "0x600173D")]
		[Address(RVA = "0xD547CC", Offset = "0xD547CC", VA = "0xD547CC")]
		public PacketLatencyPair()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200031F")]
	public class SimulatedLatencySettings
	{
		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F7474", Offset = "0x7F7474")]
		public float FakeLatencyMax;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F748C", Offset = "0x7F748C")]
		public float FakeLatencyMin;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F74A4", Offset = "0x7F74A4")]
		public float LatencyWeight;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F74BC", Offset = "0x7F74BC")]
		public int MaxSamples;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float AverageWindow;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float LatencySum;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LinkedList<float> LatencyValues;

		[Token(Token = "0x600173E")]
		[Address(RVA = "0xD547D4", Offset = "0xD547D4", VA = "0xD547D4")]
		public float NextValue()
		{
			return default(float);
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0xD5496C", Offset = "0xD5496C", VA = "0xD5496C")]
		public SimulatedLatencySettings()
		{
		}
	}

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatar LocalAvatar;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar LoopbackAvatar;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimulatedLatencySettings LatencySettings;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int PacketSequence;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LinkedList<PacketLatencyPair> packetQueue;

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xD53E4C", Offset = "0xD53E4C", VA = "0xD53E4C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xD53F70", Offset = "0xD53F70", VA = "0xD53F70")]
	private void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xD542E4", Offset = "0xD542E4", VA = "0xD542E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xD54248", Offset = "0xD54248", VA = "0xD54248")]
	private void SendPacketData(byte[] data)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xD54540", Offset = "0xD54540", VA = "0xD54540")]
	private void ReceivePacketData(byte[] data)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xD548E0", Offset = "0xD548E0", VA = "0xD548E0")]
	public RemoteLoopbackManager()
	{
	}
}
[Token(Token = "0x20000AB")]
public class P2PManager
{
	[Token(Token = "0x2000320")]
	private enum MessageType : byte
	{
		[Token(Token = "0x4001342")]
		Update = 1
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xB7B188", Offset = "0xB7B188", VA = "0xB7B188")]
	public P2PManager()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xB7B248", Offset = "0xB7B248", VA = "0xB7B248")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xB7B32C", Offset = "0xB7B32C", VA = "0xB7B32C")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xB7B3B0", Offset = "0xB7B3B0", VA = "0xB7B3B0")]
	private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xB7B50C", Offset = "0xB7B50C", VA = "0xB7B50C")]
	private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xB7B7BC", Offset = "0xB7B7BC", VA = "0xB7B7BC")]
	public void SendAvatarUpdate(ulong userID, Transform rootTransform, uint sequence, byte[] avatarPacket)
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xB7BBB0", Offset = "0xB7BBB0", VA = "0xB7BBB0")]
	public void GetRemotePackets()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xB7BE54", Offset = "0xB7BE54", VA = "0xB7BE54")]
	public void processAvatarPacket(RemotePlayer remote, ref byte[] packet, ref int offset)
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xB7B980", Offset = "0xB7B980", VA = "0xB7B980")]
	private void PackByte(byte b, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xB7BD84", Offset = "0xB7BD84", VA = "0xB7BD84")]
	private byte ReadByte(byte[] buf, ref int offset)
	{
		return default(byte);
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xB7BA68", Offset = "0xB7BA68", VA = "0xB7BA68")]
	private void PackFloat(float f, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xB7C06C", Offset = "0xB7C06C", VA = "0xB7C06C")]
	private float ReadFloat(byte[] buf, ref int offset)
	{
		return default(float);
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xB7B9C8", Offset = "0xB7B9C8", VA = "0xB7B9C8")]
	private void PackULong(ulong u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xB7BDC8", Offset = "0xB7BDC8", VA = "0xB7BDC8")]
	private ulong ReadULong(byte[] buf, ref int offset)
	{
		return default(ulong);
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xB7BB10", Offset = "0xB7BB10", VA = "0xB7BB10")]
	private void PackUInt32(uint u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xB7C0F8", Offset = "0xB7C0F8", VA = "0xB7C0F8")]
	private uint ReadUInt32(byte[] buf, ref int offset)
	{
		return default(uint);
	}
}
[Token(Token = "0x20000AC")]
public class PlayerController : SocialPlatformManager
{
	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Camera spyCamera;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject cameraRig;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool showUI;

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xB7F8AC", Offset = "0xB7F8AC", VA = "0xB7F8AC", Slot = "5")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xB7F8E8", Offset = "0xB7F8E8", VA = "0xB7F8E8", Slot = "6")]
	public override void Start()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xB7F920", Offset = "0xB7F920", VA = "0xB7F920", Slot = "4")]
	public override void Update()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xB7F948", Offset = "0xB7F948", VA = "0xB7F948")]
	private void checkInput()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xB7FAE8", Offset = "0xB7FAE8", VA = "0xB7FAE8")]
	private void ToggleCamera()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xB7FB68", Offset = "0xB7FB68", VA = "0xB7FB68")]
	private void ToggleUI()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xB7FBBC", Offset = "0xB7FBBC", VA = "0xB7FBBC")]
	public PlayerController()
	{
	}
}
[Token(Token = "0x20000AD")]
public class RemotePlayer
{
	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong remoteUserID;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool stillInRoom;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PeerConnectionState p2pConnectionState;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PeerConnectionState voipConnectionState;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar RemoteAvatar;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 receivedRootPosition;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 receivedRootPositionPrior;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Quaternion receivedRootRotation;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Quaternion receivedRootRotationPrior;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoipAudioSourceHiLevel voipSource;

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xD549F4", Offset = "0xD549F4", VA = "0xD549F4")]
	public RemotePlayer()
	{
	}
}
[Token(Token = "0x20000AE")]
public class RoomManager
{
	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong roomID;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong invitedRoomID;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool amIServer;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool startupDone;

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xD557EC", Offset = "0xD557EC", VA = "0xD557EC")]
	public RoomManager()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xD558B8", Offset = "0xD558B8", VA = "0xD558B8")]
	private void AcceptingInviteCallback(Message<string> msg)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xD55B7C", Offset = "0xD55B7C", VA = "0xD55B7C")]
	public bool CheckForInvite()
	{
		return default(bool);
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xD55C88", Offset = "0xD55C88", VA = "0xD55C88")]
	public void CreateRoom()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xD55D3C", Offset = "0xD55D3C", VA = "0xD55D3C")]
	private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xD56348", Offset = "0xD56348", VA = "0xD56348")]
	private void OnLaunchInviteWorkflowComplete(Message msg)
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xD55BAC", Offset = "0xD55BAC", VA = "0xD55BAC")]
	public void JoinExistingRoom(ulong roomID)
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xD563D0", Offset = "0xD563D0", VA = "0xD563D0")]
	private void JoinRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xD56A54", Offset = "0xD56A54", VA = "0xD56A54")]
	private void RoomUpdateCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xD56D1C", Offset = "0xD56D1C", VA = "0xD56D1C")]
	public void LeaveCurrentRoom()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xD5666C", Offset = "0xD5666C", VA = "0xD5666C")]
	private void ProcessRoomData(Message<Room> msg)
	{
	}
}
[Token(Token = "0x20000AF")]
public class SocialPlatformManager : MonoBehaviour
{
	[Token(Token = "0x2000321")]
	public enum State
	{
		[Token(Token = "0x4001344")]
		INITIALIZING,
		[Token(Token = "0x4001345")]
		CHECKING_LAUNCH_STATE,
		[Token(Token = "0x4001346")]
		CREATING_A_ROOM,
		[Token(Token = "0x4001347")]
		WAITING_IN_A_ROOM,
		[Token(Token = "0x4001348")]
		JOINING_A_ROOM,
		[Token(Token = "0x4001349")]
		CONNECTED_IN_A_ROOM,
		[Token(Token = "0x400134A")]
		LEAVING_A_ROOM,
		[Token(Token = "0x400134B")]
		SHUTDOWN
	}

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 START_ROTATION_ONE;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly Vector3 START_POSITION_ONE;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 START_ROTATION_TWO;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly Vector3 START_POSITION_TWO;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly Vector3 START_ROTATION_THREE;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly Vector3 START_POSITION_THREE;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly Vector3 START_ROTATION_FOUR;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static readonly Vector3 START_POSITION_FOUR;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Color BLACK;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly Color WHITE;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly Color CYAN;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static readonly Color BLUE;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static readonly Color GREEN;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float voiceCurrent;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private uint packetSequence;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar localAvatarPrefab;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar remoteAvatarPrefab;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject helpPanel;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MeshRenderer helpMesh;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material riftMaterial;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material gearMaterial;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected OvrAvatar localAvatar;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected GameObject localTrackingSpace;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected GameObject localPlayerHead;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<ulong, RemotePlayer> remoteUsers;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject roomSphere;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected MeshRenderer sphereMesh;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject roomFloor;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MeshRenderer floorMesh;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected State currentState;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected static SocialPlatformManager s_instance;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected RoomManager roomManager;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected P2PManager p2pManager;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected VoipManager voipManager;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ulong myID;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected string myOculusID;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly float VOIP_SCALE;

	[Token(Token = "0x17000055")]
	public static State CurrentState
	{
		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xD68534", Offset = "0xD68534", VA = "0xD68534")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x17000056")]
	public static ulong MyID
	{
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xD55E60", Offset = "0xD55E60", VA = "0xD55E60")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x17000057")]
	public static string MyOculusID
	{
		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xD685A8", Offset = "0xD685A8", VA = "0xD685A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xD66C58", Offset = "0xD66C58", VA = "0xD66C58", Slot = "4")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xD66FE4", Offset = "0xD66FE4", VA = "0xD66FE4", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xD67394", Offset = "0xD67394", VA = "0xD67394")]
	private void InitCallback(Message<PlatformInitialize> msg)
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xD674F0", Offset = "0xD674F0", VA = "0xD674F0", Slot = "6")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xD674F4", Offset = "0xD674F4", VA = "0xD674F4")]
	private void IsEntitledCallback(Message msg)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xD675E8", Offset = "0xD675E8", VA = "0xD675E8")]
	private void GetLoggedInUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xD67CE8", Offset = "0xD67CE8", VA = "0xD67CE8")]
	private void GetLoggedInUserFriendsAndRoomsCallback(Message<UserAndRoomList> msg)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xD681AC", Offset = "0xD681AC", VA = "0xD681AC")]
	public void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xD68378", Offset = "0xD68378", VA = "0xD68378")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xD684C4", Offset = "0xD684C4", VA = "0xD684C4")]
	public void AddUser(ulong userID, ref RemotePlayer remoteUser)
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xD672E0", Offset = "0xD672E0", VA = "0xD672E0")]
	public void LogOutputLine(string line)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xD55A10", Offset = "0xD55A10", VA = "0xD55A10")]
	public static void TerminateWithError(Message msg)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xD55F38", Offset = "0xD55F38", VA = "0xD55F38")]
	public static void TransitionToState(State newState)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xD686BC", Offset = "0xD686BC", VA = "0xD686BC")]
	private static void SetSphereColorForState()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xD56260", Offset = "0xD56260", VA = "0xD56260")]
	public static void SetFloorColorForState(bool host)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xD56D94", Offset = "0xD56D94", VA = "0xD56D94")]
	public static void MarkAllRemoteUsersAsNotInRoom()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xD57118", Offset = "0xD57118", VA = "0xD57118")]
	public static void MarkRemoteUserInRoom(ulong userID)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xD571E8", Offset = "0xD571E8", VA = "0xD571E8")]
	public static void ForgetRemoteUsersNotInRoom()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xD55AC0", Offset = "0xD55AC0", VA = "0xD55AC0")]
	public static void LogOutput(string line)
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xD56EB8", Offset = "0xD56EB8", VA = "0xD56EB8")]
	public static bool IsUserInRoom(ulong userID)
	{
		return default(bool);
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xD56F44", Offset = "0xD56F44", VA = "0xD56F44")]
	public static void AddRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xD6883C", Offset = "0xD6883C", VA = "0xD6883C")]
	public static void RemoveRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xD68A18", Offset = "0xD68A18", VA = "0xD68A18")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xD66BD0", Offset = "0xD66BD0", VA = "0xD66BD0")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7F8DF8", Offset = "0x7F8DF8")]
	public static void MicFilter(short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels)
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xD68B54", Offset = "0xD68B54", VA = "0xD68B54")]
	public static RemotePlayer GetRemoteUser(ulong userID)
	{
		return null;
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xD68C1C", Offset = "0xD68C1C", VA = "0xD68C1C")]
	public SocialPlatformManager()
	{
	}
}
[Token(Token = "0x20000B0")]
public class VoipManager
{
	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x1464610", Offset = "0x1464610", VA = "0x1464610")]
	public VoipManager()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x14646D0", Offset = "0x14646D0", VA = "0x14646D0")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x14647B4", Offset = "0x14647B4", VA = "0x14647B4")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x1464838", Offset = "0x1464838", VA = "0x1464838")]
	private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x1464994", Offset = "0x1464994", VA = "0x1464994")]
	private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}
}
[Token(Token = "0x20000B1")]
public class GazeTarget : MonoBehaviour
{
	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xAA2B48", Offset = "0xAA2B48", VA = "0xAA2B48")]
	static GazeTarget()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xAA2BB8", Offset = "0xAA2BB8", VA = "0xAA2BB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xAA2D34", Offset = "0xAA2D34", VA = "0xAA2D34")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xAA2D98", Offset = "0xAA2D98", VA = "0xAA2D98")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xAA2BF4", Offset = "0xAA2BF4", VA = "0xAA2BF4")]
	private void UpdateGazeTarget()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xAA2E54", Offset = "0xAA2E54", VA = "0xAA2E54")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xAA2EB4", Offset = "0xAA2EB4", VA = "0xAA2EB4")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B2")]
public class AvatarLayer
{
	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xDDB584", Offset = "0xDDB584", VA = "0xDDB584")]
	public AvatarLayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B3")]
public class PacketRecordSettings
{
	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xB7D54C", Offset = "0xB7D54C", VA = "0xB7D54C")]
	public PacketRecordSettings()
	{
	}
}
[Token(Token = "0x20000B4")]
public class OvrAvatar : MonoBehaviour
{
	[Token(Token = "0x2000322")]
	public class PacketEventArgs : EventArgs
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xB97D14", Offset = "0xB97D14", VA = "0xB97D14")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	[Token(Token = "0x2000323")]
	public enum HandType
	{
		[Token(Token = "0x400134E")]
		Right,
		[Token(Token = "0x400134F")]
		Left,
		[Token(Token = "0x4001350")]
		Max
	}

	[Token(Token = "0x2000324")]
	public enum HandJoint
	{
		[Token(Token = "0x4001352")]
		HandBase,
		[Token(Token = "0x4001353")]
		IndexBase,
		[Token(Token = "0x4001354")]
		IndexTip,
		[Token(Token = "0x4001355")]
		ThumbBase,
		[Token(Token = "0x4001356")]
		ThumbTip,
		[Token(Token = "0x4001357")]
		Max
	}

	[Token(Token = "0x2000325")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE224", Offset = "0x7EE224")]
	private sealed class <WaitForMouthAudioSource>d__137 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		[Token(Token = "0x17000251")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001744")]
			[Address(RVA = "0xB9A014", Offset = "0xB9A014", VA = "0xB9A014", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000252")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001746")]
			[Address(RVA = "0xB9A07C", Offset = "0xB9A07C", VA = "0xB9A07C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0xB99A48", Offset = "0xB99A48", VA = "0xB99A48")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__137(int <>1__state)
		{
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0xB99E84", Offset = "0xB99E84", VA = "0xB99E84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0xB99E88", Offset = "0xB99E88", VA = "0xB99E88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0xB9A01C", Offset = "0xB9A01C", VA = "0xB9A01C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EFA00", Offset = "0x7EFA00")]
	public IntPtr sdkAvatar;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string oculusUserID;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EFA38", Offset = "0x7EFA38")]
	public bool EnableBody;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool EnableHands;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool EnableBase;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool EnableExpressive;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EFA70", Offset = "0x7EFA70")]
	public bool RecordPackets;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseSDKPackets;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PacketRecordSettings PacketSettings;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EFAA8", Offset = "0x7EFAA8")]
	public bool StartWithControllers;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AvatarLayer FirstPersonLayer;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarLayer ThirdPersonLayer;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShowFirstPerson;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ShowThirdPerson;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal ovrAvatarCapabilities Capabilities;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EFAE0", Offset = "0x7EFAE0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFAE0", Offset = "0x7EFAE0")]
	[SerializeField]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFB50", Offset = "0x7EFB50")]
	private bool CombineMeshes;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFB88", Offset = "0x7EFB88")]
	public bool UseTransparentRenderQueue;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EFBC0", Offset = "0x7EFBC0")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader EyeLens;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader ControllerShader;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7EFBF8", Offset = "0x7EFBF8")]
	public bool CanOwnMicrophone;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFC30", Offset = "0x7EFC30")]
	public bool EnableLaughter;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject MouthAnchor;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform LeftHandCustomPose;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform RightHandCustomPose;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<ulong> assetLoadingIds;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool assetsFinishedLoading;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OvrAvatarMaterialManager materialManager;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool waitingForCombinedMesh;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool doneExpressiveGlobalInit;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector4 clothingAlphaOffset;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ulong clothingAlphaTexture;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private OVRLipSyncMicInput micInput;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private OVRLipSyncContext lipsyncContext;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private OVRLipSync.Frame currentFrame;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float[] visemes;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private AudioSource audioSource;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private ONSPAudioSource spatializedSource;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<float[]> voiceUpdates;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform cachedLeftHandCustomPose;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform[] cachedCustomLeftHandJoints;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Transform cachedRightHandCustomPose;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform[] cachedCustomRightHandJoints;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool showLeftController;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool showRightController;

	[Token(Token = "0x4000410")]
	private const bool USE_MOBILE_TEXTURE_FORMAT = true;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 MOUTH_HEAD_OFFSET;

	[Token(Token = "0x4000412")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Token(Token = "0x4000413")]
	private const int VISEME_COUNT = 16;

	[Token(Token = "0x4000414")]
	private const float ACTION_UNIT_ONSET_SPEED = 30f;

	[Token(Token = "0x4000415")]
	private const float ACTION_UNIT_FALLOFF_SPEED = 20f;

	[Token(Token = "0x4000416")]
	private const float VISEME_LEVEL_MULTIPLIER = 1.5f;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal ulong oculusUserIDInternal;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal OvrAvatarBase Base;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal OvrAvatarTouchController ControllerLeft;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal OvrAvatarTouchController ControllerRight;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	internal OvrAvatarBody Body;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	internal OvrAvatarHand HandLeft;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	internal OvrAvatarHand HandRight;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string[,] HandJoints;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector3 MOUTH_POSITION_OFFSET;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string VOICE_PROPERTY;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_POSITION_PROPERTY;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static string MOUTH_SCALE_PROPERTY;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float MOUTH_SCALE_GLOBAL;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float MOUTH_MAX_GLOBAL;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static string NECK_JONT;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public float VoiceAmplitude;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public bool EnableMouthVertexAnimation;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static ovrAvatarLights ovrLights;

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xB94C78", Offset = "0xB94C78", VA = "0xB94C78")]
	static OvrAvatar()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xB94FE0", Offset = "0xB94FE0", VA = "0xB94FE0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xB9506C", Offset = "0xB9506C", VA = "0xB9506C")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xB950D8", Offset = "0xB950D8", VA = "0xB950D8")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xB95200", Offset = "0xB95200", VA = "0xB95200")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xB952E4", Offset = "0xB952E4", VA = "0xB952E4")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xB953C4", Offset = "0xB953C4", VA = "0xB953C4")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel)
	{
		return null;
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xB955AC", Offset = "0xB955AC", VA = "0xB955AC")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xB95674", Offset = "0xB95674", VA = "0xB95674")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xB956F8", Offset = "0xB956F8", VA = "0xB956F8")]
	internal static void ConvertTransform(float[] transform, ref ovrAvatarTransform target)
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xB957E0", Offset = "0xB957E0", VA = "0xB957E0")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xB9586C", Offset = "0xB9586C", VA = "0xB9586C")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(Vector3 position, Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xB95988", Offset = "0xB95988", VA = "0xB95988")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xB959E8", Offset = "0xB959E8", VA = "0xB959E8")]
	private void BuildRenderComponents()
	{
	}

	[Token(Token = "0x6000410")]
	private void AddAvatarComponent<T>(ref T root, ovrAvatarComponent nativeComponent) where T : OvrAvatarComponent
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xB95E6C", Offset = "0xB95E6C", VA = "0xB95E6C")]
	private void UpdateCustomPoses()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xB961CC", Offset = "0xB961CC", VA = "0xB961CC")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xB96330", Offset = "0xB96330", VA = "0xB96330")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xB965F8", Offset = "0xB965F8", VA = "0xB965F8")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xB966E4", Offset = "0xB966E4", VA = "0xB966E4")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xB96A98", Offset = "0xB96A98", VA = "0xB96A98")]
	private void Start()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xB96D98", Offset = "0xB96D98", VA = "0xB96D98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xB977B0", Offset = "0xB977B0", VA = "0xB977B0")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xB97804", Offset = "0xB97804", VA = "0xB97804")]
	public void ShowControllers(bool show)
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xB96960", Offset = "0xB96960", VA = "0xB96960")]
	public void ShowLeftController(bool show)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xB969FC", Offset = "0xB969FC", VA = "0xB969FC")]
	public void ShowRightController(bool show)
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xB97834", Offset = "0xB97834", VA = "0xB97834")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xB9710C", Offset = "0xB9710C", VA = "0xB9710C")]
	private void RecordFrame()
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xB97A7C", Offset = "0xB97A7C", VA = "0xB97A7C")]
	private void RecordUnityFrame()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xB9789C", Offset = "0xB9789C", VA = "0xB9789C")]
	private void RecordSDKFrame()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xB97D90", Offset = "0xB97D90", VA = "0xB97D90")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xB98194", Offset = "0xB98194", VA = "0xB98194")]
	public void RefreshBodyParts()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xB9851C", Offset = "0xB9851C", VA = "0xB9851C")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xB9865C", Offset = "0xB9865C", VA = "0xB9865C")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xB98814", Offset = "0xB98814", VA = "0xB98814")]
	public void GetPointingDirection(HandType hand, ref Vector3 forward, ref Vector3 up)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xB972AC", Offset = "0xB972AC", VA = "0xB972AC")]
	private void UpdateVoiceBehavior()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xB988EC", Offset = "0xB988EC", VA = "0xB988EC")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xB9711C", Offset = "0xB9711C", VA = "0xB9711C")]
	private void InitPostLoad()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xB989E0", Offset = "0xB989E0", VA = "0xB989E0")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xB98F8C", Offset = "0xB98F8C", VA = "0xB98F8C")]
	private static void InitializeLights()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xB9944C", Offset = "0xB9944C", VA = "0xB9944C")]
	private static ovrAvatarLight CreateLightDirectional(uint id, Vector3 direction, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xB994C4", Offset = "0xB994C4", VA = "0xB994C4")]
	private static ovrAvatarLight CreateLightPoint(uint id, Vector3 position, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xB99540", Offset = "0xB99540", VA = "0xB99540")]
	private static ovrAvatarLight CreateLightSpot(uint id, Vector3 position, Vector3 direction, float spotAngleDeg, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xB97644", Offset = "0xB97644", VA = "0xB97644")]
	private void UpdateExpressive()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xB98A9C", Offset = "0xB98A9C", VA = "0xB98A9C")]
	private void ConfigureHelpers()
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xB999D8", Offset = "0xB999D8", VA = "0xB999D8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8E5C", Offset = "0x7F8E5C")]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xB99A74", Offset = "0xB99A74", VA = "0xB99A74")]
	public void DestroyHelperObjects()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xB9987C", Offset = "0xB9987C", VA = "0xB9987C")]
	public GameObject CreateHelperObject(Transform parent, Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xB99B3C", Offset = "0xB99B3C", VA = "0xB99B3C")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xB99C28", Offset = "0xB99C28", VA = "0xB99C28")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xB99610", Offset = "0xB99610", VA = "0xB99610")]
	private void UpdateFacewave()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xB99D14", Offset = "0xB99D14", VA = "0xB99D14")]
	public OvrAvatar()
	{
	}
}
[Token(Token = "0x20000B5")]
public class OvrAvatarAsset
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xB9A084", Offset = "0xB9A084", VA = "0xB9A084")]
	public OvrAvatarAsset()
	{
	}
}
[Token(Token = "0x20000B6")]
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xB9A134", Offset = "0xB9A134", VA = "0xB9A134")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xB9B414", Offset = "0xB9B414", VA = "0xB9B414")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xB9AFB8", Offset = "0xB9AFB8", VA = "0xB9AFB8")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xB9AD5C", Offset = "0xB9AD5C", VA = "0xB9AD5C")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xB9AE2C", Offset = "0xB9AE2C", VA = "0xB9AE2C")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xB9B678", Offset = "0xB9B678", VA = "0xB9B678")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(GameObject target)
	{
		return null;
	}
}
[Token(Token = "0x20000B7")]
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Token(Token = "0x4000433")]
	private const int ASTCHeaderSize = 16;

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xB9BBF8", Offset = "0xB9BBF8", VA = "0xB9BBF8")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
[Token(Token = "0x20000B8")]
public class OvrAvatarBase : OvrAvatarComponent
{
	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ovrAvatarBaseComponent component;

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xB9BE60", Offset = "0xB9BE60", VA = "0xB9BE60")]
	private void Update()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xB9C268", Offset = "0xB9C268", VA = "0xB9C268")]
	public OvrAvatarBase()
	{
	}
}
[Token(Token = "0x20000B9")]
public class OvrAvatarBody : OvrAvatarComponent
{
	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ovrAvatarBodyComponent component;

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xB983C0", Offset = "0xB983C0", VA = "0xB983C0")]
	public ovrAvatarComponent? GetNativeAvatarComponent()
	{
		return null;
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xB9C364", Offset = "0xB9C364", VA = "0xB9C364")]
	private void Update()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xB9C480", Offset = "0xB9C480", VA = "0xB9C480")]
	public OvrAvatarBody()
	{
	}
}
[Token(Token = "0x20000BA")]
public class OvrAvatarComponent : MonoBehaviour
{
	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected OvrAvatar owner;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ovrAvatarComponent nativeAvatarComponent;

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xB9C4E4", Offset = "0xB9C4E4", VA = "0xB9C4E4")]
	public void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xB9BF7C", Offset = "0xB9BF7C", VA = "0xB9BF7C")]
	public void UpdateAvatar(IntPtr nativeComponent)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xB9C4EC", Offset = "0xB9C4EC", VA = "0xB9C4EC")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xB9C54C", Offset = "0xB9C54C", VA = "0xB9C54C")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xB9CD30", Offset = "0xB9CD30", VA = "0xB9CD30")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xB9C2CC", Offset = "0xB9C2CC", VA = "0xB9C2CC")]
	public OvrAvatarComponent()
	{
	}
}
[Token(Token = "0x20000BB")]
public abstract class OvrAvatarDriver : MonoBehaviour
{
	[Token(Token = "0x2000326")]
	public enum PacketMode
	{
		[Token(Token = "0x400135C")]
		SDK,
		[Token(Token = "0x400135D")]
		Unity
	}

	[Token(Token = "0x2000327")]
	public struct ControllerPose
	{
		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 joystickPosition;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xB71538", Offset = "0xB71538", VA = "0xB71538")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	[Token(Token = "0x2000328")]
	public struct PoseFrame
	{
		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 headPosition;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion headRotation;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 handLeftPosition;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion handLeftRotation;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 handRightPosition;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion handRightRotation;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xB71694", Offset = "0xB71694", VA = "0xB71694")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private ovrAvatarControllerType ControllerType;

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xB7120C", Offset = "0xB7120C", VA = "0xB7120C")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	[Token(Token = "0x600044B")]
	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xB7121C", Offset = "0xB7121C", VA = "0xB7121C")]
	private void Start()
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xB712A8", Offset = "0xB712A8", VA = "0xB712A8")]
	public void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xB71520", Offset = "0xB71520", VA = "0xB71520")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xB71528", Offset = "0xB71528", VA = "0xB71528")]
	protected OvrAvatarDriver()
	{
	}
}
[Token(Token = "0x20000BC")]
public class OvrAvatarHand : OvrAvatarComponent
{
	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarHandComponent component;

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xB71A4C", Offset = "0xB71A4C", VA = "0xB71A4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xB71BAC", Offset = "0xB71BAC", VA = "0xB71BAC")]
	public OvrAvatarHand()
	{
	}
}
[Token(Token = "0x20000BD")]
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 centerEyePosition;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion centerEyeRotation;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xB71C1C", Offset = "0xB71C1C", VA = "0xB71C1C")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xB71D88", Offset = "0xB71D88", VA = "0xB71D88")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xB7212C", Offset = "0xB7212C", VA = "0xB7212C")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xB72348", Offset = "0xB72348", VA = "0xB72348", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xB72374", Offset = "0xB72374", VA = "0xB72374")]
	public OvrAvatarLocalDriver()
	{
	}
}
[Token(Token = "0x20000BE")]
public class OvrAvatarMaterialManager : MonoBehaviour
{
	[Token(Token = "0x2000329")]
	public enum TextureType
	{
		[Token(Token = "0x400136E")]
		DiffuseTextures,
		[Token(Token = "0x400136F")]
		NormalMaps,
		[Token(Token = "0x4001370")]
		RoughnessMaps,
		[Token(Token = "0x4001371")]
		Count
	}

	[Token(Token = "0x200032A")]
	public struct AvatarComponentMaterialProperties
	{
		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color Color;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DiffuseIntensity;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RimIntensity;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReflectionIntensity;
	}

	[Token(Token = "0x200032B")]
	public struct AvatarTextureArrayProperties
	{
		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Token(Token = "0x200032C")]
	public struct AvatarMaterialPropertyBlock
	{
		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4[] Colors;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	[Token(Token = "0x200032D")]
	public class AvatarMaterialConfig
	{
		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xB74724", Offset = "0xB74724", VA = "0xB74724")]
		public AvatarMaterialConfig()
		{
		}
	}

	[Token(Token = "0x200032E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE234", Offset = "0x7EE234")]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callBack;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <srcBlend>5__2;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dstBlend>5__3;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <lightModeTag>5__4;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <renderTypeTag>5__5;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string <renderQueueTag>5__6;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string <ignoreProjectorTag>5__7;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <renderQueue>5__8;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool <transparentQueue>5__9;

		[Token(Token = "0x17000253")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600174D")]
			[Address(RVA = "0xB75034", Offset = "0xB75034", VA = "0xB75034", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000254")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600174F")]
			[Address(RVA = "0xB7509C", Offset = "0xB7509C", VA = "0xB7509C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xB7458C", Offset = "0xB7458C", VA = "0xB7458C")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xB749BC", Offset = "0xB749BC", VA = "0xB749BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xB749C0", Offset = "0xB749C0", VA = "0xB749C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xB7503C", Offset = "0xB7503C", VA = "0xB7503C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer TargetRenderer;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] TextureTypeToShaderProperties;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader CombinedShader;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static float[] DiffuseIntensities;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static float[] RimIntensities;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static float[] ReflectionIntensities;

	[Token(Token = "0x4000467")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Token(Token = "0x4000468")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Token(Token = "0x4000469")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Token(Token = "0x400046A")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xB72424", Offset = "0xB72424", VA = "0xB72424")]
	public void CreateTextureArrays()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xB72584", Offset = "0xB72584", VA = "0xB72584")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xB725AC", Offset = "0xB725AC", VA = "0xB725AC")]
	public void OnCombinedMeshReady()
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xB72CC4", Offset = "0xB72CC4", VA = "0xB72CC4")]
	public void AddTextureIDToTextureManager(ulong assetID, bool isSingleComponent)
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xB730D4", Offset = "0xB730D4", VA = "0xB730D4")]
	private void DeleteTextureSet()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xB72640", Offset = "0xB72640", VA = "0xB72640")]
	public void InitTextureArrays()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xB731C4", Offset = "0xB731C4", VA = "0xB731C4")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xB72A40", Offset = "0xB72A40", VA = "0xB72A40")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xB7342C", Offset = "0xB7342C", VA = "0xB7342C")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xB736A4", Offset = "0xB736A4", VA = "0xB736A4")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xB737A0", Offset = "0xB737A0", VA = "0xB737A0")]
	private ulong GetTextureIDForType(ovrAvatarPBSMaterialState materialState, TextureType type)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xB737D8", Offset = "0xB737D8", VA = "0xB737D8")]
	public void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xB72C48", Offset = "0xB72C48", VA = "0xB72C48")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8EC0", Offset = "0x7F8EC0")]
	private IEnumerator RunLoadingAnimation(Action callBack)
	{
		return null;
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xB745B8", Offset = "0xB745B8", VA = "0xB745B8")]
	public OvrAvatarMaterialManager()
	{
	}
}
[Token(Token = "0x20000BF")]
public class OvrAvatarPacket
{
	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	[Token(Token = "0x17000058")]
	public float Duration
	{
		[Token(Token = "0x6000466")]
		[Address(RVA = "0xB750A4", Offset = "0xB750A4", VA = "0xB750A4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000059")]
	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Token(Token = "0x6000467")]
		[Address(RVA = "0xB75110", Offset = "0xB75110", VA = "0xB75110")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xB75194", Offset = "0xB75194", VA = "0xB75194")]
	public OvrAvatarPacket()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xB75258", Offset = "0xB75258", VA = "0xB75258")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xB75398", Offset = "0xB75398", VA = "0xB75398")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xB75474", Offset = "0xB75474", VA = "0xB75474")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xB75544", Offset = "0xB75544", VA = "0xB75544")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xB7574C", Offset = "0xB7574C", VA = "0xB7574C")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xB759A4", Offset = "0xB759A4", VA = "0xB759A4")]
	public void Write(Stream stream)
	{
	}
}
[Token(Token = "0x20000C0")]
internal static class BinaryWriterExtensions
{
	[Token(Token = "0x600046F")]
	[Address(RVA = "0xDDC2E0", Offset = "0xDDC2E0", VA = "0xDDC2E0")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xDDC3F4", Offset = "0xDDC3F4", VA = "0xDDC3F4")]
	public static void Write(this BinaryWriter writer, Vector3 vec3)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xDDC5A0", Offset = "0xDDC5A0", VA = "0xDDC5A0")]
	public static void Write(this BinaryWriter writer, Vector2 vec2)
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xDDC464", Offset = "0xDDC464", VA = "0xDDC464")]
	public static void Write(this BinaryWriter writer, Quaternion quat)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xDDC4F8", Offset = "0xDDC4F8", VA = "0xDDC4F8")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
[Token(Token = "0x20000C1")]
internal static class BinaryReaderExtensions
{
	[Token(Token = "0x6000474")]
	[Address(RVA = "0xDDBEE0", Offset = "0xDDBEE0", VA = "0xDDBEE0")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xDDC284", Offset = "0xDDC284", VA = "0xDDC284")]
	public static Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xDDC080", Offset = "0xDDC080", VA = "0xDDC080")]
	public static Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xDDC0F8", Offset = "0xDDC0F8", VA = "0xDDC0F8")]
	public static Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xDDC194", Offset = "0xDDC194", VA = "0xDDC194")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
[Token(Token = "0x20000C2")]
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Token(Token = "0x4000472")]
	private const int MinPacketQueue = 1;

	[Token(Token = "0x4000473")]
	private const int MaxPacketQueue = 4;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xB75B94", Offset = "0xB75B94", VA = "0xB75B94")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xB75C20", Offset = "0xB75C20", VA = "0xB75C20", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xB75C3C", Offset = "0xB75C3C", VA = "0xB75C3C")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xB75DE8", Offset = "0xB75DE8", VA = "0xB75DE8")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xB75F90", Offset = "0xB75F90", VA = "0xB75F90")]
	public OvrAvatarRemoteDriver()
	{
	}
}
[Token(Token = "0x20000C3")]
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isBodyComponent;

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xB76010", Offset = "0xB76010", VA = "0xB76010")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xB760F4", Offset = "0xB760F4", VA = "0xB760F4")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer)
	{
		return null;
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xB7636C", Offset = "0xB7636C", VA = "0xB7636C")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xB76700", Offset = "0xB76700", VA = "0xB76700")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xB767F8", Offset = "0xB767F8", VA = "0xB767F8")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Token(Token = "0x20000C4")]
[Flags]
public enum ovrAvatarCapabilities
{
	[Token(Token = "0x400047C")]
	Body = 1,
	[Token(Token = "0x400047D")]
	Hands = 2,
	[Token(Token = "0x400047E")]
	Base = 4,
	[Token(Token = "0x400047F")]
	BodyTilt = 0x10,
	[Token(Token = "0x4000480")]
	Expressive = 0x20,
	[Token(Token = "0x4000481")]
	All = -1
}
[Token(Token = "0x20000C5")]
public enum ovrAvatarMessageType
{
	[Token(Token = "0x4000483")]
	AvatarSpecification,
	[Token(Token = "0x4000484")]
	AssetLoaded,
	[Token(Token = "0x4000485")]
	Count
}
[Token(Token = "0x20000C6")]
public struct ovrAvatarMessage_AvatarSpecification
{
	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
[Token(Token = "0x20000C7")]
public struct ovrAvatarMessage_AssetLoaded
{
	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
[Token(Token = "0x20000C8")]
public enum ovrAvatarAssetType
{
	[Token(Token = "0x400048B")]
	Mesh,
	[Token(Token = "0x400048C")]
	Texture,
	[Token(Token = "0x400048D")]
	Pose,
	[Token(Token = "0x400048E")]
	Material,
	[Token(Token = "0x400048F")]
	CombinedMesh,
	[Token(Token = "0x4000490")]
	PBSMaterial,
	[Token(Token = "0x4000491")]
	FailedLoad,
	[Token(Token = "0x4000492")]
	Count
}
[Token(Token = "0x20000C9")]
public struct ovrAvatarMeshVertex
{
	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
[Token(Token = "0x20000CA")]
public struct ovrAvatarMeshVertexV2
{
	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
[Token(Token = "0x20000CB")]
public struct ovrAvatarBlendVertex
{
	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
[Token(Token = "0x20000CC")]
public struct ovrAvatarMeshAssetData
{
	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x20000CD")]
public struct ovrAvatarMeshAssetDataV2
{
	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x20000CE")]
public enum ovrAvatarTextureFormat
{
	[Token(Token = "0x40004C7")]
	RGB24,
	[Token(Token = "0x40004C8")]
	DXT1,
	[Token(Token = "0x40004C9")]
	DXT5,
	[Token(Token = "0x40004CA")]
	ASTC_RGB_6x6,
	[Token(Token = "0x40004CB")]
	ASTC_RGB_6x6_MIPMAPS,
	[Token(Token = "0x40004CC")]
	Count
}
[Token(Token = "0x20000CF")]
public struct ovrAvatarTextureAssetData
{
	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
[Token(Token = "0x20000D0")]
public enum ovrAvatarRenderPartType
{
	[Token(Token = "0x40004D4")]
	SkinnedMeshRender,
	[Token(Token = "0x40004D5")]
	SkinnedMeshRenderPBS,
	[Token(Token = "0x40004D6")]
	ProjectorRender,
	[Token(Token = "0x40004D7")]
	SkinnedMeshRenderPBS_V2,
	[Token(Token = "0x40004D8")]
	Count
}
[Token(Token = "0x20000D1")]
public enum ovrAvatarLogLevel
{
	[Token(Token = "0x40004DA")]
	Unknown,
	[Token(Token = "0x40004DB")]
	Default,
	[Token(Token = "0x40004DC")]
	Verbose,
	[Token(Token = "0x40004DD")]
	Debug,
	[Token(Token = "0x40004DE")]
	Info,
	[Token(Token = "0x40004DF")]
	Warn,
	[Token(Token = "0x40004E0")]
	Error,
	[Token(Token = "0x40004E1")]
	Fatal,
	[Token(Token = "0x40004E2")]
	Silent
}
[Token(Token = "0x20000D2")]
public struct ovrAvatarTransform
{
	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 position;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 scale;
}
[Token(Token = "0x20000D3")]
[Flags]
public enum ovrAvatarButton
{
	[Token(Token = "0x40004E7")]
	One = 1,
	[Token(Token = "0x40004E8")]
	Two = 2,
	[Token(Token = "0x40004E9")]
	Three = 4,
	[Token(Token = "0x40004EA")]
	Joystick = 8
}
[Token(Token = "0x20000D4")]
[Flags]
public enum ovrAvatarTouch
{
	[Token(Token = "0x40004EC")]
	One = 1,
	[Token(Token = "0x40004ED")]
	Two = 2,
	[Token(Token = "0x40004EE")]
	Joystick = 4,
	[Token(Token = "0x40004EF")]
	ThumbRest = 8,
	[Token(Token = "0x40004F0")]
	Index = 0x10,
	[Token(Token = "0x40004F1")]
	Pointing = 0x40,
	[Token(Token = "0x40004F2")]
	ThumbUp = 0x80
}
[Token(Token = "0x20000D5")]
public struct ovrAvatarHandInputState
{
	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
[Token(Token = "0x20000D6")]
public struct ovrAvatarComponent
{
	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
[Token(Token = "0x20000D7")]
internal struct ovrAvatarComponent_Offsets
{
	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long transform;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderPartCount;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int renderParts;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int name;
}
[Token(Token = "0x20000D8")]
public struct ovrAvatarBaseComponent
{
	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 basePosition;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000D9")]
public struct ovrAvatarBodyComponent
{
	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000DA")]
public struct ovrAvatarBodyComponent_Offsets
{
	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long leftEyeTransform;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long rightEyeTransform;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long centerEyeTransform;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long renderComponent;
}
[Token(Token = "0x20000DB")]
public struct ovrAvatarControllerComponent
{
	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000DC")]
public struct ovrAvatarHandComponent
{
	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000DD")]
public enum ovrAvatarMaterialLayerBlendMode
{
	[Token(Token = "0x4000512")]
	Add,
	[Token(Token = "0x4000513")]
	Multiply,
	[Token(Token = "0x4000514")]
	Count
}
[Token(Token = "0x20000DE")]
public enum ovrAvatarMaterialLayerSampleMode
{
	[Token(Token = "0x4000516")]
	Color,
	[Token(Token = "0x4000517")]
	Texture,
	[Token(Token = "0x4000518")]
	TextureSingleChannel,
	[Token(Token = "0x4000519")]
	Parallax,
	[Token(Token = "0x400051A")]
	Count
}
[Token(Token = "0x20000DF")]
public enum ovrAvatarMaterialMaskType
{
	[Token(Token = "0x400051C")]
	None,
	[Token(Token = "0x400051D")]
	Positional,
	[Token(Token = "0x400051E")]
	ViewReflection,
	[Token(Token = "0x400051F")]
	Fresnel,
	[Token(Token = "0x4000520")]
	Pulse,
	[Token(Token = "0x4000521")]
	Count
}
[Token(Token = "0x20000E0")]
public enum ovrAvatarControllerType
{
	[Token(Token = "0x4000523")]
	Touch,
	[Token(Token = "0x4000524")]
	Malibu,
	[Token(Token = "0x4000525")]
	Go,
	[Token(Token = "0x4000526")]
	Quest,
	[Token(Token = "0x4000527")]
	Count
}
[Token(Token = "0x20000E1")]
public enum ovrAvatarAssetLevelOfDetail
{
	[Token(Token = "0x4000529")]
	Lowest = 1,
	[Token(Token = "0x400052A")]
	Medium = 3,
	[Token(Token = "0x400052B")]
	Highest = 5
}
[Token(Token = "0x20000E2")]
public enum ovrAvatarLookAndFeelVersion
{
	[Token(Token = "0x400052D")]
	Unknown = -1,
	[Token(Token = "0x400052E")]
	One,
	[Token(Token = "0x400052F")]
	Two
}
[Token(Token = "0x20000E3")]
public struct ovrAvatarMaterialLayerState
{
	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector4 layerColor;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector4 sampleParameters;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 sampleScaleOffset;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector4 maskParameters;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 maskAxis;

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x1466B14", Offset = "0x1466B14", VA = "0x1466B14")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x8A75C4", Offset = "0x8A75C4", VA = "0x8A75C4", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x8A75CC", Offset = "0x8A75CC", VA = "0x8A75CC", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000E4")]
public struct ovrAvatarMaterialState
{
	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector4 baseMaskParameters;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector4 baseMaskAxis;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 alphaMaskScaleOffset;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 normalMapScaleOffset;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector4 parallaxMapScaleOffset;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector4 roughnessMapScaleOffset;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x1466E48", Offset = "0x1466E48", VA = "0x1466E48")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x8A7804", Offset = "0x8A7804", VA = "0x8A7804", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x8A780C", Offset = "0x8A780C", VA = "0x8A780C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000E5")]
public struct ovrAvatarExpressiveParameters
{
	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 irisColor;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector4 scleraColor;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 lashColor;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 browColor;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 lipColor;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 teethColor;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 gumColor;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x14661BC", Offset = "0x14661BC", VA = "0x14661BC")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x8A730C", Offset = "0x8A730C", VA = "0x8A730C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x8A7314", Offset = "0x8A7314", VA = "0x8A7314", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000E6")]
public struct ovrAvatarPBSMaterialState
{
	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector4 albedoMultiplier;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 emissionMultiplier;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x1467374", Offset = "0x1467374", VA = "0x1467374")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x8A808C", Offset = "0x8A808C", VA = "0x8A808C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x8A8094", Offset = "0x8A8094", VA = "0x8A8094", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000E7")]
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xB9A08C", Offset = "0xB9A08C", VA = "0xB9A08C")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
[Token(Token = "0x20000E8")]
public struct ovrAvatarSkinnedMeshPose
{
	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Token(Token = "0x20000E9")]
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Token(Token = "0x4000564")]
	FirstPerson = 1,
	[Token(Token = "0x4000565")]
	ThirdPerson = 2,
	[Token(Token = "0x4000566")]
	SelfOccluding = 4
}
[Token(Token = "0x20000EA")]
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000EB")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000EC")]
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
[Token(Token = "0x20000ED")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000EE")]
public enum ovrAvatarHandGesture
{
	[Token(Token = "0x400057C")]
	Default,
	[Token(Token = "0x400057D")]
	GripSphere,
	[Token(Token = "0x400057E")]
	GripCube,
	[Token(Token = "0x400057F")]
	Count
}
[Token(Token = "0x20000EF")]
public enum ovrAvatarBodyPartType
{
	[Token(Token = "0x4000581")]
	Body,
	[Token(Token = "0x4000582")]
	Clothing,
	[Token(Token = "0x4000583")]
	Eyewear,
	[Token(Token = "0x4000584")]
	Hair,
	[Token(Token = "0x4000585")]
	Beard,
	[Token(Token = "0x4000586")]
	Count
}
[Token(Token = "0x20000F0")]
public struct ovrAvatarBlendShapeParams
{
	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
[Token(Token = "0x20000F1")]
internal struct ovrAvatarBlendShapeParams_Offsets
{
	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int blendShapeParamCount;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long blendShapeParams;
}
[Token(Token = "0x20000F2")]
public struct ovrAvatarVisemes
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
[Token(Token = "0x20000F3")]
internal struct ovrAvatarVisemes_Offsets
{
	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int visemeParamCount;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long visemeParams;
}
[Token(Token = "0x20000F4")]
public enum ovrAvatarGazeTargetType
{
	[Token(Token = "0x4000590")]
	AvatarHead,
	[Token(Token = "0x4000591")]
	AvatarHand,
	[Token(Token = "0x4000592")]
	Object,
	[Token(Token = "0x4000593")]
	ObjectStatic,
	[Token(Token = "0x4000594")]
	Count
}
[Token(Token = "0x20000F5")]
public struct ovrAvatarGazeTarget
{
	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 worldPosition;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
[Token(Token = "0x20000F6")]
internal struct ovrAvatarGazeTarget_Offsets
{
	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int id;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int worldPosition;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int type;
}
[Token(Token = "0x20000F7")]
public struct ovrAvatarGazeTargets
{
	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
[Token(Token = "0x20000F8")]
internal struct ovrAvatarGazeTargets_Offsets
{
	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int targetCount;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long targets;
}
[Token(Token = "0x20000F9")]
public enum ovrAvatarLightType
{
	[Token(Token = "0x40005A0")]
	Point,
	[Token(Token = "0x40005A1")]
	Direction,
	[Token(Token = "0x40005A2")]
	Spot,
	[Token(Token = "0x40005A3")]
	Count
}
[Token(Token = "0x20000FA")]
public struct ovrAvatarLight
{
	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 worldDirection;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 worldPosition;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
[Token(Token = "0x20000FB")]
internal struct ovrAvatarLight_Offsets
{
	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long id;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long type;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long intensity;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long worldDirection;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static long worldPosition;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static long range;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static long spotAngleDeg;
}
[Token(Token = "0x20000FC")]
public struct ovrAvatarLights
{
	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
[Token(Token = "0x20000FD")]
internal struct ovrAvatarLights_Offsets
{
	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long ambientIntensity;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long lightCount;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long lights;
}
[Token(Token = "0x20000FE")]
[Flags]
public enum ovrAvatarDebugContext : uint
{
	[Token(Token = "0x40005B9")]
	None = 0u,
	[Token(Token = "0x40005BA")]
	GazeTarget = 1u,
	[Token(Token = "0x40005BB")]
	Any = uint.MaxValue
}
[Token(Token = "0x20000FF")]
public struct ovrAvatarDebugLine
{
	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 startPoint;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 endPoint;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 color;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IntPtr text;
}
[Token(Token = "0x2000100")]
public struct ovrAvatarDebugTransform
{
	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr text;
}
[Token(Token = "0x2000101")]
public delegate void specificationCallback(IntPtr specification);
[Token(Token = "0x2000102")]
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
[Token(Token = "0x2000103")]
public delegate void combinedMeshLoadedCallback(IntPtr asset);
[Token(Token = "0x2000104")]
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Token(Token = "0x200032F")]
	public struct AvatarSpecRequestParams
	{
		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _userId;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public specificationCallback _callback;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _useCombinedMesh;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ovrAvatarAssetLevelOfDetail _lod;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _forceMobileTextureFormat;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ovrAvatarLookAndFeelVersion _lookVersion;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ovrAvatarLookAndFeelVersion _fallbackVersion;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool _enableExpressive;

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x889EC4", Offset = "0x889EC4", VA = "0x889EC4")]
		public AvatarSpecRequestParams(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
		{
		}
	}

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OvrAvatarTextureCopyManager textureCopyManager;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarLogLevel LoggingLevel;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Queue<AvatarSpecRequestParams> avatarSpecificationQueue;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> loadingAvatars;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool avatarSpecRequestAvailable;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastDispatchedAvatarSpecRequestTime;

	[Token(Token = "0x40005D0")]
	private const float AVATAR_SPEC_REQUEST_TIMEOUT = 5f;

	[Token(Token = "0x1700005A")]
	public static OvrAvatarSDKManager Instance
	{
		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xB72D24", Offset = "0xB72D24", VA = "0xB72D24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xB76808", Offset = "0xB76808", VA = "0xB76808")]
	private bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xB76A54", Offset = "0xB76A54", VA = "0xB76A54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xB76AC8", Offset = "0xB76AC8", VA = "0xB76AC8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xB7731C", Offset = "0xB7731C", VA = "0xB7731C")]
	public bool IsAvatarSpecWaiting()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xB77374", Offset = "0xB77374", VA = "0xB77374")]
	public bool IsAvatarLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xB773CC", Offset = "0xB773CC", VA = "0xB773CC")]
	public void AddLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xB77434", Offset = "0xB77434", VA = "0xB77434")]
	public void RemoveLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xB7749C", Offset = "0xB7749C", VA = "0xB7749C")]
	public void RequestAvatarSpecification(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xB77154", Offset = "0xB77154", VA = "0xB77154")]
	private void DispatchAvatarSpecificationRequest(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xB7757C", Offset = "0xB7757C", VA = "0xB7757C")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xB77698", Offset = "0xB77698", VA = "0xB77698")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xB762EC", Offset = "0xB762EC", VA = "0xB762EC")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xB77778", Offset = "0xB77778", VA = "0xB77778")]
	public void DeleteAssetFromCache(ulong assetId)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xB76A08", Offset = "0xB76A08", VA = "0xB76A08")]
	public string GetAppId()
	{
		return null;
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xB72EB4", Offset = "0xB72EB4", VA = "0xB72EB4")]
	public OvrAvatarTextureCopyManager GetTextureCopyManager()
	{
		return null;
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xB77850", Offset = "0xB77850", VA = "0xB77850")]
	public OvrAvatarSDKManager()
	{
	}
}
[Token(Token = "0x2000105")]
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	[Token(Token = "0x1700005B")]
	public static string AppID
	{
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xB77810", Offset = "0xB77810", VA = "0xB77810")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xB779A8", Offset = "0xB779A8", VA = "0xB779A8")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public static string MobileAppID
	{
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xB77830", Offset = "0xB77830", VA = "0xB77830")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xB779D4", Offset = "0xB779D4", VA = "0xB779D4")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public static OvrAvatarSettings Instance
	{
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xB77894", Offset = "0xB77894", VA = "0xB77894")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xB77A00", Offset = "0xB77A00", VA = "0xB77A00")]
		set
		{
		}
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xB77A54", Offset = "0xB77A54", VA = "0xB77A54")]
	public OvrAvatarSettings()
	{
	}
}
[Token(Token = "0x2000106")]
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surface;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader surfaceSelfOccluding;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool previouslyActive;

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xB79364", Offset = "0xB79364", VA = "0xB79364")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xB79608", Offset = "0xB79608", VA = "0xB79608")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xB794A8", Offset = "0xB794A8", VA = "0xB794A8")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xB79834", Offset = "0xB79834", VA = "0xB79834")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
[Token(Token = "0x2000107")]
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isMaterialInitilized;

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xB79844", Offset = "0xB79844", VA = "0xB79844")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xB79974", Offset = "0xB79974", VA = "0xB79974")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xB79B14", Offset = "0xB79B14", VA = "0xB79B14")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
[Token(Token = "0x2000108")]
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarMaterialManager avatarMaterialManager;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isCombinedMaterial;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool EnableExpressive;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int blendShapeCount;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ovrAvatarBlendShapeParams blendShapeParams;

	[Token(Token = "0x40005DF")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Token(Token = "0x40005E0")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Token(Token = "0x40005E1")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xB77AAC", Offset = "0xB77AAC", VA = "0xB77AAC")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, bool combinedMesh, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar, bool isControllerModel)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xB788F8", Offset = "0xB788F8", VA = "0xB788F8")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xB78B14", Offset = "0xB78B14", VA = "0xB78B14")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xB78080", Offset = "0xB78080", VA = "0xB78080")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xB77E50", Offset = "0xB77E50", VA = "0xB77E50")]
	private void SetMaterialTransparent(Material mat)
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xB77F64", Offset = "0xB77F64", VA = "0xB77F64")]
	private void SetMaterialOpaque(Material mat)
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xB79354", Offset = "0xB79354", VA = "0xB79354")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
[Token(Token = "0x2000109")]
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000330")]
	public struct FallbackTextureSet
	{
		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Initialized;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2D DiffuseRoughness;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D Normal;
	}

	[Token(Token = "0x2000331")]
	private struct CopyTextureParams
	{
		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x889F2C", Offset = "0x889F2C", VA = "0x889F2C")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[Token(Token = "0x2000332")]
	public struct TextureSet
	{
		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<ulong, bool> TextureIDSingleMeshPair;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsProcessed;

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x889FB4", Offset = "0x889FB4", VA = "0x889FB4")]
		public TextureSet(Dictionary<ulong, bool> textureIDSingleMeshPair, bool isProcessed)
		{
		}
	}

	[Token(Token = "0x2000333")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE244", Offset = "0x7EE244")]
	private sealed class <DeleteTextureSetCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureSet textureSetToDelete;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OvrAvatarTextureCopyManager <>4__this;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int gameobjectID;

		[Token(Token = "0x17000255")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001756")]
			[Address(RVA = "0xB7AF48", Offset = "0xB7AF48", VA = "0xB7AF48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000256")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001758")]
			[Address(RVA = "0xB7AFB0", Offset = "0xB7AFB0", VA = "0xB7AFB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xB7A8E0", Offset = "0xB7A8E0", VA = "0xB7A8E0")]
		[DebuggerHidden]
		public <DeleteTextureSetCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xB7AA48", Offset = "0xB7AA48", VA = "0xB7AA48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xB7AA4C", Offset = "0xB7AA4C", VA = "0xB7AA4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xB7AF50", Offset = "0xB7AF50", VA = "0xB7AF50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FallbackTextureSet[] FallbackTextureSets;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, TextureSet> textureSets;

	[Token(Token = "0x40005E5")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Token(Token = "0x40005E6")]
	private const int COPIES_PER_FRAME = 8;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_DIFFUSE_ROUGHNESS;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_NORMAL;

	[Token(Token = "0x40005E9")]
	private const string PATH_HIGHEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_2048";

	[Token(Token = "0x40005EA")]
	private const string PATH_MEDIUM_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_1024";

	[Token(Token = "0x40005EB")]
	private const string PATH_LOWEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_256";

	[Token(Token = "0x40005EC")]
	private const string PATH_HIGHEST_NORMAL = "FallbackTextures/fallback_normal_2048";

	[Token(Token = "0x40005ED")]
	private const string PATH_MEDIUM_NORMAL = "FallbackTextures/fallback_normal_1024";

	[Token(Token = "0x40005EE")]
	private const string PATH_LOWEST_NORMAL = "FallbackTextures/fallback_normal_256";

	[Token(Token = "0x40005EF")]
	private const int GPU_TEXTURE_COPY_WAIT_TIME = 10;

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xB7A2C8", Offset = "0xB7A2C8", VA = "0xB7A2C8")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xB7A624", Offset = "0xB7A624", VA = "0xB7A624")]
	public void Update()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xB74FE4", Offset = "0xB74FE4", VA = "0xB74FE4")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xB732A8", Offset = "0xB732A8", VA = "0xB732A8")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xB7A79C", Offset = "0xB7A79C", VA = "0xB7A79C")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xB72F38", Offset = "0xB72F38", VA = "0xB72F38")]
	public void AddTextureIDToTextureSet(int gameobjectID, ulong textureID, bool isSingleMesh)
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xB7311C", Offset = "0xB7311C", VA = "0xB7311C")]
	public void DeleteTextureSet(int gameobjectID)
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xB7A84C", Offset = "0xB7A84C", VA = "0xB7A84C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7F8FC4", Offset = "0x7F8FC4")]
	private IEnumerator DeleteTextureSetCoroutine(TextureSet textureSetToDelete, int gameobjectID)
	{
		return null;
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xB77530", Offset = "0xB77530", VA = "0xB77530")]
	public void CheckFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xB7A90C", Offset = "0xB7A90C", VA = "0xB7A90C")]
	private void InitFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}
}
[Token(Token = "0x200010A")]
public class OvrAvatarTouchController : OvrAvatarComponent
{
	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarControllerComponent component;

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xB7AFB8", Offset = "0xB7AFB8", VA = "0xB7AFB8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xB7B118", Offset = "0xB7B118", VA = "0xB7B118")]
	public OvrAvatarTouchController()
	{
	}
}
[Token(Token = "0x200010B")]
public class EnableSwitch : MonoBehaviour
{
	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] SwitchTargets;

	[Token(Token = "0x60004D6")]
	public bool SetActive<T>(int target) where T : MonoBehaviour
	{
		return default(bool);
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xA9AAD8", Offset = "0xA9AAD8", VA = "0xA9AAD8")]
	public EnableSwitch()
	{
	}
}
[Token(Token = "0x200010C")]
public class LipSyncDemo_Control : MonoBehaviour
{
	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFC88", Offset = "0x7EFC88")]
	public KeyCode rotateLeftKey;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFCC0", Offset = "0x7EFCC0")]
	public KeyCode rotateRightKey;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFCF8", Offset = "0x7EFCF8")]
	public KeyCode resetRotationKey;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float resetRotation;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationAmount;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rotationMax;

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xAAC8B0", Offset = "0xAAC8B0", VA = "0xAAC8B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xAAC8B4", Offset = "0xAAC8B4", VA = "0xAAC8B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xAAC934", Offset = "0xAAC934", VA = "0xAAC934")]
	private void RotateObject(float amountDegrees, bool absolute = false)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xAACB20", Offset = "0xAACB20", VA = "0xAACB20")]
	public LipSyncDemo_Control()
	{
	}
}
[Token(Token = "0x200010D")]
public class LipSyncDemo_SetCurrentTarget : MonoBehaviour
{
	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnableSwitch[] SwitchTargets;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int targetSet;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int maxTarget;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool XRButtonBeingPressed;

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xAACB50", Offset = "0xAACB50", VA = "0xAACB50")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xAACC54", Offset = "0xAACC54", VA = "0xAACC54")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xAACF68", Offset = "0xAACF68", VA = "0xAACF68")]
	private void SetCurrentTarget()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xAAD1F4", Offset = "0xAAD1F4", VA = "0xAAD1F4")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xAAD244", Offset = "0xAAD244", VA = "0xAAD244")]
	public LipSyncDemo_SetCurrentTarget()
	{
	}
}
[Token(Token = "0x200010E")]
public class OVRLipSyncDebugConsole : MonoBehaviour
{
	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArrayList messages;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxMessages;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text textMsg;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OVRLipSyncDebugConsole s_Instance;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool clearTimeoutOn;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float clearTimeout;

	[Token(Token = "0x1700005E")]
	public static OVRLipSyncDebugConsole instance
	{
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xBBDDC4", Offset = "0xBBDDC4", VA = "0xBBDDC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xBBE07C", Offset = "0xBBE07C", VA = "0xBBE07C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xBBE1B8", Offset = "0xBBE1B8", VA = "0xBBE1B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xBBE0EC", Offset = "0xBBE0EC", VA = "0xBBE0EC")]
	public void Init()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xBBBFDC", Offset = "0xBBBFDC", VA = "0xBBBFDC")]
	public static void Log(string message)
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xBBE340", Offset = "0xBBE340", VA = "0xBBE340")]
	public static void Log(string message, Color color)
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xBBBF74", Offset = "0xBBBF74", VA = "0xBBBF74")]
	public static void Clear()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xBBC05C", Offset = "0xBBC05C", VA = "0xBBC05C")]
	public static void ClearTimeout(float timeToClear)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xBBE250", Offset = "0xBBE250", VA = "0xBBE250")]
	public void AddMessage(string message, Color color)
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xBBE3E0", Offset = "0xBBE3E0", VA = "0xBBE3E0")]
	public void ClearMessages()
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xBBE41C", Offset = "0xBBE41C", VA = "0xBBE41C")]
	public void SetClearTimeout(float timeout)
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xBBE610", Offset = "0xBBE610", VA = "0xBBE610")]
	private void Prune()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xBBE42C", Offset = "0xBBE42C", VA = "0xBBE42C")]
	private void Display()
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xBBE6C0", Offset = "0xBBE6C0", VA = "0xBBE6C0")]
	public OVRLipSyncDebugConsole()
	{
	}
}
[Token(Token = "0x200010F")]
public class OVRNamedArrayAttribute : PropertyAttribute
{
	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string[] names;

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xBBF184", Offset = "0xBBF184", VA = "0xBBF184")]
	public OVRNamedArrayAttribute(string[] names)
	{
	}
}
[Token(Token = "0x2000110")]
public static class OVRTouchpad
{
	[Token(Token = "0x2000334")]
	public enum TouchEvent
	{
		[Token(Token = "0x40013A4")]
		SingleTap,
		[Token(Token = "0x40013A5")]
		DoubleTap,
		[Token(Token = "0x40013A6")]
		Left,
		[Token(Token = "0x40013A7")]
		Right,
		[Token(Token = "0x40013A8")]
		Up,
		[Token(Token = "0x40013A9")]
		Down
	}

	[Token(Token = "0x2000335")]
	public delegate void OVRTouchpadCallback<TouchEvent>(TouchEvent arg);

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 moveAmountMouse;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float minMovMagnitudeMouse;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Delegate touchPadCallbacks;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static OVRTouchpadHelper touchpadHelper;

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xBBABF0", Offset = "0xBBABF0", VA = "0xBBABF0")]
	public static void Create()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xBC1B68", Offset = "0xBC1B68", VA = "0xBC1B68")]
	public static void Update()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xBC1E88", Offset = "0xBC1E88", VA = "0xBC1E88")]
	public static void OnDisable()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xBC1CD8", Offset = "0xBC1CD8", VA = "0xBC1CD8")]
	private static void HandleInputMouse(ref Vector3 move)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xBBBAD0", Offset = "0xBBBAD0", VA = "0xBBBAD0")]
	public static void AddListener(OVRTouchpadCallback<TouchEvent> handler)
	{
	}
}
[Token(Token = "0x2000111")]
public sealed class OVRTouchpadHelper : MonoBehaviour
{
	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xBC1F38", Offset = "0xBC1F38", VA = "0xBC1F38")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xBC1FB4", Offset = "0xBC1FB4", VA = "0xBC1FB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xBC204C", Offset = "0xBC204C", VA = "0xBC204C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xBC20A8", Offset = "0xBC20A8", VA = "0xBC20A8")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xBC210C", Offset = "0xBC210C", VA = "0xBC210C")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xBC2110", Offset = "0xBC2110", VA = "0xBC2110")]
	public OVRTouchpadHelper()
	{
	}
}
[Token(Token = "0x2000112")]
public class OVRLipSync : MonoBehaviour
{
	[Token(Token = "0x2000336")]
	public enum Result
	{
		[Token(Token = "0x40013AB")]
		Success = 0,
		[Token(Token = "0x40013AC")]
		Unknown = -2200,
		[Token(Token = "0x40013AD")]
		CannotCreateContext = -2201,
		[Token(Token = "0x40013AE")]
		InvalidParam = -2202,
		[Token(Token = "0x40013AF")]
		BadSampleRate = -2203,
		[Token(Token = "0x40013B0")]
		MissingDLL = -2204,
		[Token(Token = "0x40013B1")]
		BadVersion = -2205,
		[Token(Token = "0x40013B2")]
		UndefinedFunction = -2206
	}

	[Token(Token = "0x2000337")]
	public enum AudioDataType
	{
		[Token(Token = "0x40013B4")]
		S16_Mono,
		[Token(Token = "0x40013B5")]
		S16_Stereo,
		[Token(Token = "0x40013B6")]
		F32_Mono,
		[Token(Token = "0x40013B7")]
		F32_Stereo
	}

	[Token(Token = "0x2000338")]
	public enum Viseme
	{
		[Token(Token = "0x40013B9")]
		sil,
		[Token(Token = "0x40013BA")]
		PP,
		[Token(Token = "0x40013BB")]
		FF,
		[Token(Token = "0x40013BC")]
		TH,
		[Token(Token = "0x40013BD")]
		DD,
		[Token(Token = "0x40013BE")]
		kk,
		[Token(Token = "0x40013BF")]
		CH,
		[Token(Token = "0x40013C0")]
		SS,
		[Token(Token = "0x40013C1")]
		nn,
		[Token(Token = "0x40013C2")]
		RR,
		[Token(Token = "0x40013C3")]
		aa,
		[Token(Token = "0x40013C4")]
		E,
		[Token(Token = "0x40013C5")]
		ih,
		[Token(Token = "0x40013C6")]
		oh,
		[Token(Token = "0x40013C7")]
		ou
	}

	[Token(Token = "0x2000339")]
	public enum Signals
	{
		[Token(Token = "0x40013C9")]
		VisemeOn,
		[Token(Token = "0x40013CA")]
		VisemeOff,
		[Token(Token = "0x40013CB")]
		VisemeAmount,
		[Token(Token = "0x40013CC")]
		VisemeSmoothing,
		[Token(Token = "0x40013CD")]
		LaughterAmount
	}

	[Token(Token = "0x200033A")]
	public enum ContextProviders
	{
		[Token(Token = "0x40013CF")]
		Original,
		[Token(Token = "0x40013D0")]
		Enhanced,
		[Token(Token = "0x40013D1")]
		Enhanced_with_Laughter
	}

	[Serializable]
	[Token(Token = "0x200033B")]
	public class Frame
	{
		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameNumber;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int frameDelay;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] Visemes;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float laughterScore;

		[Token(Token = "0x600175D")]
		[Address(RVA = "0xBBB838", Offset = "0xBBB838", VA = "0xBBB838")]
		public void CopyInput(Frame input)
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xBBB890", Offset = "0xBBB890", VA = "0xBBB890")]
		public void Reset()
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xBBB920", Offset = "0xBBB920", VA = "0xBBB920")]
		public Frame()
		{
		}
	}

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int VisemeCount;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int SignalCount;

	[Token(Token = "0x400060A")]
	public const string strOVRLS = "OVRLipSync";

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Result sInitialized;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static OVRLipSync sInstance;

	[PreserveSig]
	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xBBA1C0", Offset = "0xBBA1C0", VA = "0xBBA1C0")]
	private static extern int ovrLipSyncDll_Initialize(int samplerate, int buffersize);

	[PreserveSig]
	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xBBA250", Offset = "0xBBA250", VA = "0xBBA250")]
	private static extern void ovrLipSyncDll_Shutdown();

	[PreserveSig]
	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xBBA2C0", Offset = "0xBBA2C0", VA = "0xBBA2C0")]
	private static extern IntPtr ovrLipSyncDll_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[PreserveSig]
	[Token(Token = "0x6000500")]
	[Address(RVA = "0xBBA354", Offset = "0xBBA354", VA = "0xBBA354")]
	private static extern int ovrLipSyncDll_CreateContextEx(ref uint context, ContextProviders provider, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Token(Token = "0x6000501")]
	[Address(RVA = "0xBBA3FC", Offset = "0xBBA3FC", VA = "0xBBA3FC")]
	private static extern int ovrLipSyncDll_CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate, bool enableAcceleration);

	[PreserveSig]
	[Token(Token = "0x6000502")]
	[Address(RVA = "0xBBA4C8", Offset = "0xBBA4C8", VA = "0xBBA4C8")]
	private static extern int ovrLipSyncDll_DestroyContext(uint context);

	[PreserveSig]
	[Token(Token = "0x6000503")]
	[Address(RVA = "0xBBA548", Offset = "0xBBA548", VA = "0xBBA548")]
	private static extern int ovrLipSyncDll_ResetContext(uint context);

	[PreserveSig]
	[Token(Token = "0x6000504")]
	[Address(RVA = "0xBBA5C8", Offset = "0xBBA5C8", VA = "0xBBA5C8")]
	private static extern int ovrLipSyncDll_SendSignal(uint context, Signals signal, int arg1, int arg2);

	[PreserveSig]
	[Token(Token = "0x6000505")]
	[Address(RVA = "0xBBA670", Offset = "0xBBA670", VA = "0xBBA670")]
	private static extern int ovrLipSyncDll_ProcessFrameEx(uint context, IntPtr audioBuffer, uint bufferSize, AudioDataType dataType, ref int frameNumber, ref int frameDelay, float[] visemes, int visemeCount, ref float laughterScore, float[] laughterCategories, int laughterCategoriesLength);

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xBBA778", Offset = "0xBBA778", VA = "0xBBA778")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xBBABF4", Offset = "0xBBABF4", VA = "0xBBABF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xBBAAB8", Offset = "0xBBAAB8", VA = "0xBBAAB8")]
	public static Result Initialize()
	{
		return default(Result);
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xBBACD4", Offset = "0xBBACD4", VA = "0xBBACD4")]
	public static Result Initialize(int sampleRate, int bufferSize)
	{
		return default(Result);
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xBBADE8", Offset = "0xBBADE8", VA = "0xBBADE8")]
	public static void Shutdown()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xBBAE58", Offset = "0xBBAE58", VA = "0xBBAE58")]
	public static Result IsInitialized()
	{
		return default(Result);
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xBBAEC0", Offset = "0xBBAEC0", VA = "0xBBAEC0")]
	public static Result CreateContext(ref uint context, ContextProviders provider, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xBBAFE4", Offset = "0xBBAFE4", VA = "0xBBAFE4")]
	public static Result CreateContextWithModelFile(ref uint context, ContextProviders provider, string modelPath, int sampleRate = 0, bool enableAcceleration = false)
	{
		return default(Result);
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xBBB11C", Offset = "0xBBB11C", VA = "0xBBB11C")]
	public static Result DestroyContext(uint context)
	{
		return default(Result);
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xBBB1FC", Offset = "0xBBB1FC", VA = "0xBBB1FC")]
	public static Result ResetContext(uint context)
	{
		return default(Result);
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xBBB2DC", Offset = "0xBBB2DC", VA = "0xBBB2DC")]
	public static Result SendSignal(uint context, Signals signal, int arg1, int arg2)
	{
		return default(Result);
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xBBB3E0", Offset = "0xBBB3E0", VA = "0xBBB3E0")]
	public static Result ProcessFrame(uint context, float[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xBBB584", Offset = "0xBBB584", VA = "0xBBB584")]
	public static Result ProcessFrame(uint context, short[] audioBuffer, Frame frame, bool stereo = true)
	{
		return default(Result);
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xBBB720", Offset = "0xBBB720", VA = "0xBBB720")]
	public OVRLipSync()
	{
	}
}
[Token(Token = "0x2000113")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED2F4", Offset = "0x7ED2F4")]
public class OVRLipSyncContext : OVRLipSyncContextBase
{
	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFD30", Offset = "0x7EFD30")]
	public bool enableKeyboardInput;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFD68", Offset = "0x7EFD68")]
	public bool enableTouchInput;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFDA0", Offset = "0x7EFDA0")]
	public bool audioLoopback;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFDD8", Offset = "0x7EFDD8")]
	public KeyCode loopbackKey;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFE10", Offset = "0x7EFE10")]
	public bool showVisemes;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFE48", Offset = "0x7EFE48")]
	public KeyCode debugVisemesKey;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFE80", Offset = "0x7EFE80")]
	public bool skipAudioSource;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFEB8", Offset = "0x7EFEB8")]
	public float gain;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool hasDebugConsole;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public KeyCode debugLaughterKey;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool showLaughter;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float laughterScore;

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xBBB9A8", Offset = "0xBBB9A8", VA = "0xBBB9A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xBBBB90", Offset = "0xBBBB90", VA = "0xBBBB90")]
	private void HandleKeyboard()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xBBC0DC", Offset = "0xBBC0DC", VA = "0xBBC0DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xBBC388", Offset = "0xBBC388", VA = "0xBBC388")]
	public void PreprocessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xBBC3EC", Offset = "0xBBC3EC", VA = "0xBBC3EC")]
	public void PostprocessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xBBC458", Offset = "0xBBC458", VA = "0xBBC458")]
	public void ProcessAudioSamplesRaw(float[] data, int channels)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xBBC5FC", Offset = "0xBBC5FC", VA = "0xBBC5FC")]
	public void ProcessAudioSamplesRaw(short[] data, int channels)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xBBC7A0", Offset = "0xBBC7A0", VA = "0xBBC7A0")]
	public void ProcessAudioSamples(float[] data, int channels)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xBBC8D4", Offset = "0xBBC8D4", VA = "0xBBC8D4")]
	private void OnAudioFilterRead(float[] data, int channels)
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xBBC120", Offset = "0xBBC120", VA = "0xBBC120")]
	private void DebugShowVisemesAndLaughter()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xBBBEA0", Offset = "0xBBBEA0", VA = "0xBBBEA0")]
	private void ToggleAudioLoopback()
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xBBC8E4", Offset = "0xBBC8E4", VA = "0xBBC8E4")]
	private void LocalTouchEventCallback(OVRTouchpad.TouchEvent touchEvent)
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xBBCA10", Offset = "0xBBCA10", VA = "0xBBCA10")]
	public OVRLipSyncContext()
	{
	}
}
[Token(Token = "0x2000114")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED358", Offset = "0x7ED358")]
public class OVRLipSyncContextBase : MonoBehaviour
{
	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioSource;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFEF0", Offset = "0x7EFEF0")]
	public OVRLipSync.ContextProviders provider;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFF28", Offset = "0x7EFF28")]
	public bool enableAcceleration;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRLipSync.Frame frame;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private uint context;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int _smoothing;

	[Token(Token = "0x1700005F")]
	public int Smoothing
	{
		[Token(Token = "0x6000523")]
		[Address(RVA = "0xBBCB90", Offset = "0xBBCB90", VA = "0xBBCB90")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000522")]
		[Address(RVA = "0xBBCAA4", Offset = "0xBBCAA4", VA = "0xBBCAA4")]
		set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public uint Context
	{
		[Token(Token = "0x6000524")]
		[Address(RVA = "0xBBCB98", Offset = "0xBBCB98", VA = "0xBBCB98")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000061")]
	protected OVRLipSync.Frame Frame
	{
		[Token(Token = "0x6000525")]
		[Address(RVA = "0xBBCBA0", Offset = "0xBBCBA0", VA = "0xBBCBA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xBBCBA8", Offset = "0xBBCBA8", VA = "0xBBCBA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xBBCD40", Offset = "0xBBCD40", VA = "0xBBCD40")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xBBCE64", Offset = "0xBBCE64", VA = "0xBBCE64")]
	public OVRLipSync.Frame GetCurrentPhonemeFrame()
	{
		return null;
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xBBCE6C", Offset = "0xBBCE6C", VA = "0xBBCE6C")]
	public void SetVisemeBlend(int viseme, int amount)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xBBCF60", Offset = "0xBBCF60", VA = "0xBBCF60")]
	public void SetLaughterBlend(int amount)
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xBBD028", Offset = "0xBBD028", VA = "0xBBD028")]
	public OVRLipSync.Result ResetContext()
	{
		return default(OVRLipSync.Result);
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xBBCA34", Offset = "0xBBCA34", VA = "0xBBCA34")]
	public OVRLipSyncContextBase()
	{
	}
}
[Token(Token = "0x2000115")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED3BC", Offset = "0x7ED3BC")]
public class OVRLipSyncContextCanned : OVRLipSyncContextBase
{
	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFF60", Offset = "0x7EFF60")]
	public OVRLipSyncSequence currentSequence;

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xBBD0A0", Offset = "0xBBD0A0", VA = "0xBBD0A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xBBD210", Offset = "0xBBD210", VA = "0xBBD210")]
	public OVRLipSyncContextCanned()
	{
	}
}
[Token(Token = "0x2000116")]
public class OVRLipSyncContextMorphTarget : MonoBehaviour
{
	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFF98", Offset = "0x7EFF98")]
	public SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7EFFD0", Offset = "0x7EFFD0")]
	public int[] visemeToBlendTargets;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0008", Offset = "0x7F0008")]
	public bool enableVisemeTestKeys;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0040", Offset = "0x7F0040")]
	public KeyCode[] visemeTestKeys;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0078", Offset = "0x7F0078")]
	public KeyCode laughterKey;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F00B0", Offset = "0x7F00B0")]
	public int laughterBlendTarget;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F00E8", Offset = "0x7F00E8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F00E8", Offset = "0x7F00E8")]
	public float laughterThreshold;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F013C", Offset = "0x7F013C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F013C", Offset = "0x7F013C")]
	public float laughterMultiplier;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F0190", Offset = "0x7F0190")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0190", Offset = "0x7F0190")]
	public int smoothAmount;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OVRLipSyncContextBase lipsyncContext;

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xBBD214", Offset = "0xBBD214", VA = "0xBBD214")]
	private void Start()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xBBD358", Offset = "0xBBD358", VA = "0xBBD358")]
	private void Update()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xBBD608", Offset = "0xBBD608", VA = "0xBBD608")]
	private void CheckForKeys()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xBBD464", Offset = "0xBBD464", VA = "0xBBD464")]
	private void SetVisemeToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xBBD518", Offset = "0xBBD518", VA = "0xBBD518")]
	private void SetLaughterToMorphTarget(OVRLipSync.Frame frame)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xBBD6D8", Offset = "0xBBD6D8", VA = "0xBBD6D8")]
	private void CheckVisemeKey(KeyCode key, int viseme, int amount)
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xBBD79C", Offset = "0xBBD79C", VA = "0xBBD79C")]
	private void CheckLaughterKey()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xBBD804", Offset = "0xBBD804", VA = "0xBBD804")]
	public OVRLipSyncContextMorphTarget()
	{
	}
}
[Token(Token = "0x2000117")]
public class OVRLipSyncContextTextureFlip : MonoBehaviour
{
	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material material;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F01E8", Offset = "0x7F01E8")]
	[AttributeAttribute(Name = "OVRNamedArrayAttribute", RVA = "0x7F01E8", Offset = "0x7F01E8")]
	public Texture[] Textures;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F0364", Offset = "0x7F0364")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0364", Offset = "0x7F0364")]
	public int smoothAmount;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRLipSyncContextBase lipsyncContext;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OVRLipSync.Frame oldFrame;

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xBBD8FC", Offset = "0xBBD8FC", VA = "0xBBD8FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xBBDA50", Offset = "0xBBDA50", VA = "0xBBDA50")]
	private void Update()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xBBDBF4", Offset = "0xBBDBF4", VA = "0xBBDBF4")]
	private void SetVisemeToTexture()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xBBDD18", Offset = "0xBBDD18", VA = "0xBBDD18")]
	public OVRLipSyncContextTextureFlip()
	{
	}
}
[Token(Token = "0x2000118")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED420", Offset = "0x7ED420")]
public class OVRLipSyncMicInput : MonoBehaviour
{
	[Token(Token = "0x200033C")]
	public enum micActivation
	{
		[Token(Token = "0x40013D7")]
		HoldToSpeak,
		[Token(Token = "0x40013D8")]
		PushToSpeak,
		[Token(Token = "0x40013D9")]
		ConstantSpeak
	}

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F03BC", Offset = "0x7F03BC")]
	public AudioSource audioSource;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F03F4", Offset = "0x7F03F4")]
	public bool enableMicSelectionGUI;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F042C", Offset = "0x7F042C")]
	public KeyCode micSelectionGUIKey;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F0464", Offset = "0x7F0464")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0464", Offset = "0x7F0464")]
	private float micInputVolume;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F04CC", Offset = "0x7F04CC")]
	private int micFrequency;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0518", Offset = "0x7F0518")]
	public micActivation micControl;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0550", Offset = "0x7F0550")]
	public KeyCode micActivationKey;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0588", Offset = "0x7F0588")]
	public string selectedDevice;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool micSelected;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int minFreq;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int maxFreq;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool focused;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool initialized;

	[Token(Token = "0x17000062")]
	public float MicFrequency
	{
		[Token(Token = "0x600053B")]
		[Address(RVA = "0xBBE734", Offset = "0xBBE734", VA = "0xBBE734")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600053C")]
		[Address(RVA = "0xBBE740", Offset = "0xBBE740", VA = "0xBBE740")]
		set
		{
		}
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xBBE7CC", Offset = "0xBBE7CC", VA = "0xBBE7CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xBBE88C", Offset = "0xBBE88C", VA = "0xBBE88C")]
	private void Start()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xBBE8D8", Offset = "0xBBE8D8", VA = "0xBBE8D8")]
	private void InitializeMicrophone()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xBBEA1C", Offset = "0xBBEA1C", VA = "0xBBEA1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xBBEE54", Offset = "0xBBEE54", VA = "0xBBEE54")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xBBEE68", Offset = "0xBBEE68", VA = "0xBBEE68")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xBBEE80", Offset = "0xBBEE80", VA = "0xBBEE80")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xBBEE84", Offset = "0xBBEE84", VA = "0xBBEE84")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xBBEEFC", Offset = "0xBBEEFC", VA = "0xBBEEFC")]
	public void MicDeviceGUI(float left, float top, float width, float height, float buttonSpaceTop, float buttonSpaceLeft)
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xBBE960", Offset = "0xBBE960", VA = "0xBBE960")]
	public void GetMicCaps()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xBBECC0", Offset = "0xBBECC0", VA = "0xBBECC0")]
	public void StartMicrophone()
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xBBEB78", Offset = "0xBBEB78", VA = "0xBBEB78")]
	public void StopMicrophone()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xBBF0DC", Offset = "0xBBF0DC", VA = "0xBBF0DC")]
	private float GetAveragedVolume()
	{
		return default(float);
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xBBF0E4", Offset = "0xBBF0E4", VA = "0xBBF0E4")]
	public OVRLipSyncMicInput()
	{
	}
}
[Serializable]
[Token(Token = "0x2000119")]
public class OVRLipSyncSequence : ScriptableObject
{
	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OVRLipSync.Frame> entries;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float length;

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xBBD16C", Offset = "0xBBD16C", VA = "0xBBD16C")]
	public OVRLipSync.Frame GetFrameAtTime(float time)
	{
		return null;
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xBBF114", Offset = "0xBBF114", VA = "0xBBF114")]
	public OVRLipSyncSequence()
	{
	}
}
[Token(Token = "0x200011A")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x200033D")]
	public delegate void OnClick();

	[Token(Token = "0x200033E")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x200033F")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x2000340")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x2000341")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE254", Offset = "0x7EE254")]
	private sealed class <>c__DisplayClass35_0
	{
		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnClick handler;

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xDDF518", Offset = "0xDDF518", VA = "0xDDF518")]
		public <>c__DisplayClass35_0()
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xDDFEB8", Offset = "0xDDFEB8", VA = "0xDDFEB8")]
		internal void <AddButton>b__0()
		{
		}
	}

	[Token(Token = "0x2000342")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE264", Offset = "0x7EE264")]
	private sealed class <>c__DisplayClass37_0
	{
		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnSlider onValueChanged;

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xDDF78C", Offset = "0xDDF78C", VA = "0xDDF78C")]
		public <>c__DisplayClass37_0()
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xDE00DC", Offset = "0xDE00DC", VA = "0xDE00DC")]
		internal void <AddSlider>b__0(float f)
		{
		}
	}

	[Token(Token = "0x2000343")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE274", Offset = "0x7EE274")]
	private sealed class <>c__DisplayClass39_0
	{
		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xDDF9A4", Offset = "0xDDF9A4", VA = "0xDDF9A4")]
		public <>c__DisplayClass39_0()
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xDE0360", Offset = "0xDE0360", VA = "0xDE0360")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x2000344")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE284", Offset = "0x7EE284")]
	private sealed class <>c__DisplayClass40_0
	{
		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xDDFB38", Offset = "0xDDFB38", VA = "0xDDFB38")]
		public <>c__DisplayClass40_0()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xDE0738", Offset = "0xDE0738", VA = "0xDE0738")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x2000345")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE294", Offset = "0x7EE294")]
	private sealed class <>c__DisplayClass41_0
	{
		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange handler;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle tb;

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xDDFD90", Offset = "0xDDFD90", VA = "0xDDFD90")]
		public <>c__DisplayClass41_0()
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xDE0758", Offset = "0xDE0758", VA = "0xDE0758")]
		internal void <AddRadio>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x400063E")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x400063F")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x4000640")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool[] reEnable;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x400064D")]
	private const float elementSpacing = 16f;

	[Token(Token = "0x400064E")]
	private const float marginH = 16f;

	[Token(Token = "0x400064F")]
	private const float marginV = 16f;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2[] insertPositions;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 menuOffset;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LaserPointer lp;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private LineRenderer lr;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xDDE4C4", Offset = "0xDDE4C4", VA = "0xDDE4C4")]
	public void Awake()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xDDE8C8", Offset = "0xDDE8C8", VA = "0xDDE8C8")]
	public void Show()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xDDEE94", Offset = "0xDDEE94", VA = "0xDDEE94")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xDDEC40", Offset = "0xDDEC40", VA = "0xDDEC40")]
	private void Relayout()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xDDF03C", Offset = "0xDDF03C", VA = "0xDDF03C")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xDDF2F0", Offset = "0xDDF2F0", VA = "0xDDF2F0")]
	public RectTransform AddButton(string label, OnClick handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xDDF520", Offset = "0xDDF520", VA = "0xDDF520")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xDDF604", Offset = "0xDDF604", VA = "0xDDF604")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xDDF794", Offset = "0xDDF794", VA = "0xDDF794")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xDDF830", Offset = "0xDDF830", VA = "0xDDF830")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xDDF9AC", Offset = "0xDDF9AC", VA = "0xDDF9AC")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xDDFB40", Offset = "0xDDFB40", VA = "0xDDFB40")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xDDFD98", Offset = "0xDDFD98", VA = "0xDDFD98")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xDDFE48", Offset = "0xDDFE48", VA = "0xDDFE48")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x200011B")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xAA3804", Offset = "0xAA3804", VA = "0xAA3804")]
	private void Start()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xAA388C", Offset = "0xAA388C", VA = "0xAA388C")]
	private void Update()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xAA3954", Offset = "0xAA3954", VA = "0xAA3954")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xAA3990", Offset = "0xAA3990", VA = "0xAA3990")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x200011C")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x2000346")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x40013E3")]
		On,
		[Token(Token = "0x40013E4")]
		Off,
		[Token(Token = "0x40013E5")]
		OnWhenHitTarget
	}

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000063")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x6000560")]
		[Address(RVA = "0xAAC060", Offset = "0xAAC060", VA = "0xAAC060")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x600055F")]
		[Address(RVA = "0xAAC01C", Offset = "0xAAC01C", VA = "0xAAC01C")]
		set
		{
		}
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xAAC068", Offset = "0xAAC068", VA = "0xAAC068")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xAAC0C0", Offset = "0xAAC0C0", VA = "0xAAC0C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xAAC1D8", Offset = "0xAAC1D8", VA = "0xAAC1D8", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xAAC1F4", Offset = "0xAAC1F4", VA = "0xAAC1F4", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xAAC248", Offset = "0xAAC248", VA = "0xAAC248")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xAAC4A4", Offset = "0xAAC4A4", VA = "0xAAC4A4")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xAAC5B8", Offset = "0xAAC5B8", VA = "0xAAC5B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xAAC64C", Offset = "0xAAC64C", VA = "0xAAC64C")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xAAC71C", Offset = "0xAAC71C", VA = "0xAAC71C")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xAAC7D4", Offset = "0xAAC7D4", VA = "0xAAC7D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xAAC8A0", Offset = "0xAAC8A0", VA = "0xAAC8A0")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x200011D")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0660", Offset = "0x7F0660")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0698", Offset = "0x7F0698")]
	public bool EnableCollision;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask CollideLayers;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F06D0", Offset = "0x7F06D0")]
	public float MaxFade;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0708", Offset = "0x7F0708")]
	public float FadeMinDistance;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float PreferredHeight;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0740", Offset = "0x7F0740")]
	public float FadeMaxDistance;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _cameraUpdateAction;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action _preCharacterMovementAction;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CapsuleCollider _character;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xDDCC34", Offset = "0xDDCC34", VA = "0xDDCC34")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xDDCCBC", Offset = "0xDDCCBC", VA = "0xDDCCBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xDDCD2C", Offset = "0xDDCD2C", VA = "0xDDCD2C")]
	private void Start()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xDDCD30", Offset = "0xDDCD30", VA = "0xDDCD30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xDDCD54", Offset = "0xDDCD54", VA = "0xDDCD54")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xDDCD78", Offset = "0xDDCD78", VA = "0xDDCD78")]
	private void CameraUpdate()
	{
	}
}
[Token(Token = "0x200011E")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xAAD748", Offset = "0xAAD748", VA = "0xAAD748")]
	private void Start()
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xAAD7F4", Offset = "0xAAD7F4", VA = "0xAAD7F4")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x200011F")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x2000347")]
	public enum States
	{
		[Token(Token = "0x40013E7")]
		Ready,
		[Token(Token = "0x40013E8")]
		Aim,
		[Token(Token = "0x40013E9")]
		CancelAim,
		[Token(Token = "0x40013EA")]
		PreTeleport,
		[Token(Token = "0x40013EB")]
		CancelTeleport,
		[Token(Token = "0x40013EC")]
		Teleporting,
		[Token(Token = "0x40013ED")]
		PostTeleport
	}

	[Token(Token = "0x2000348")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40013EF")]
		None,
		[Token(Token = "0x40013F0")]
		Aim,
		[Token(Token = "0x40013F1")]
		PreTeleport,
		[Token(Token = "0x40013F2")]
		Teleport
	}

	[Token(Token = "0x2000349")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x40013F4")]
		Point,
		[Token(Token = "0x40013F5")]
		Sphere,
		[Token(Token = "0x40013F6")]
		Capsule
	}

	[Token(Token = "0x200034A")]
	public class AimData
	{
		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F74D4", Offset = "0x7F74D4")]
		private List<Vector3> <Points>k__BackingField;

		[Token(Token = "0x17000257")]
		public List<Vector3> Points
		{
			[Token(Token = "0x600177B")]
			[Address(RVA = "0xBE9C5C", Offset = "0xBE9C5C", VA = "0xBE9C5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FE34C", Offset = "0x7FE34C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177C")]
			[Address(RVA = "0xBE9C64", Offset = "0xBE9C64", VA = "0xBE9C64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FE35C", Offset = "0x7FE35C")]
			private set
			{
			}
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xBE9BE8", Offset = "0xBE9BE8", VA = "0xBE9BE8")]
		public AimData()
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xBE9C6C", Offset = "0xBE9C6C", VA = "0xBE9C6C")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200034B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE2A4", Offset = "0x7EE2A4")]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000258")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001781")]
			[Address(RVA = "0xBE9A00", Offset = "0xBE9A00", VA = "0xBE9A00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000259")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001783")]
			[Address(RVA = "0xBE9A68", Offset = "0xBE9A68", VA = "0xBE9A68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xBE98E4", Offset = "0xBE98E4", VA = "0xBE98E4")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xBE9910", Offset = "0xBE9910", VA = "0xBE9910", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xBE9914", Offset = "0xBE9914", VA = "0xBE9914", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xBE9A08", Offset = "0xBE9A08", VA = "0xBE9A08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200034C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE2B4", Offset = "0x7EE2B4")]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700025A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001787")]
			[Address(RVA = "0xBE92EC", Offset = "0xBE92EC", VA = "0xBE92EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001789")]
			[Address(RVA = "0xBE9354", Offset = "0xBE9354", VA = "0xBE9354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xBE917C", Offset = "0xBE917C", VA = "0xBE917C")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xBE91A8", Offset = "0xBE91A8", VA = "0xBE91A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xBE91AC", Offset = "0xBE91AC", VA = "0xBE91AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xBE92F4", Offset = "0xBE92F4", VA = "0xBE92F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200034D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE2C4", Offset = "0x7EE2C4")]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700025C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600178D")]
			[Address(RVA = "0xBE942C", Offset = "0xBE942C", VA = "0xBE942C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600178F")]
			[Address(RVA = "0xBE9494", Offset = "0xBE9494", VA = "0xBE9494", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0xBE935C", Offset = "0xBE935C", VA = "0xBE935C")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0xBE9388", Offset = "0xBE9388", VA = "0xBE9388", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0xBE938C", Offset = "0xBE938C", VA = "0xBE938C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0xBE9434", Offset = "0xBE9434", VA = "0xBE9434", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200034E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE2D4", Offset = "0x7EE2D4")]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700025E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001793")]
			[Address(RVA = "0xBE9874", Offset = "0xBE9874", VA = "0xBE9874", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001795")]
			[Address(RVA = "0xBE98DC", Offset = "0xBE98DC", VA = "0xBE98DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xBE9764", Offset = "0xBE9764", VA = "0xBE9764")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xBE9790", Offset = "0xBE9790", VA = "0xBE9790", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xBE9794", Offset = "0xBE9794", VA = "0xBE9794", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xBE987C", Offset = "0xBE987C", VA = "0xBE987C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200034F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE2E4", Offset = "0x7EE2E4")]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000260")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001799")]
			[Address(RVA = "0xBE956C", Offset = "0xBE956C", VA = "0xBE956C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000261")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600179B")]
			[Address(RVA = "0xBE95D4", Offset = "0xBE95D4", VA = "0xBE95D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xBE949C", Offset = "0xBE949C", VA = "0xBE949C")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xBE94C8", Offset = "0xBE94C8", VA = "0xBE94C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xBE94CC", Offset = "0xBE94CC", VA = "0xBE94CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xBE9574", Offset = "0xBE9574", VA = "0xBE9574", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000350")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE2F4", Offset = "0x7EE2F4")]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000262")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600179F")]
			[Address(RVA = "0xBE9B78", Offset = "0xBE9B78", VA = "0xBE9B78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000263")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017A1")]
			[Address(RVA = "0xBE9BE0", Offset = "0xBE9BE0", VA = "0xBE9BE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xBE9A70", Offset = "0xBE9A70", VA = "0xBE9A70")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xBE9A9C", Offset = "0xBE9A9C", VA = "0xBE9A9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xBE9AA0", Offset = "0xBE9AA0", VA = "0xBE9AA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xBE9B80", Offset = "0xBE9B80", VA = "0xBE9B80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000351")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE304", Offset = "0x7EE304")]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000264")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017A5")]
			[Address(RVA = "0xBE96F4", Offset = "0xBE96F4", VA = "0xBE96F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000265")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017A7")]
			[Address(RVA = "0xBE975C", Offset = "0xBE975C", VA = "0xBE975C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xBE95DC", Offset = "0xBE95DC", VA = "0xBE95DC")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0xBE9608", Offset = "0xBE9608", VA = "0xBE9608", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0xBE960C", Offset = "0xBE960C", VA = "0xBE960C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xBE96FC", Offset = "0xBE96FC", VA = "0xBE96FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0778", Offset = "0x7F0778")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F07B0", Offset = "0x7F07B0")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F07E8", Offset = "0x7F07E8")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0820", Offset = "0x7F0820")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0858", Offset = "0x7F0858")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0890", Offset = "0x7F0890")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F08C8", Offset = "0x7F08C8")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0900", Offset = "0x7F0900")]
	public bool EnableRotationDuringPostTeleport;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F0938", Offset = "0x7F0938")]
	private States <CurrentState>k__BackingField;

	[NonSerialized]
	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0948", Offset = "0x7F0948")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0980", Offset = "0x7F0980")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F09C8", Offset = "0x7F09C8")]
	private LocomotionController <LocomotionController>k__BackingField;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F09D8", Offset = "0x7F09D8")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0A10", Offset = "0x7F0A10")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0A48", Offset = "0x7F0A48")]
	public float AimCollisionRadius;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0A80", Offset = "0x7F0A80")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000064")]
	public States CurrentState
	{
		[Token(Token = "0x6000576")]
		[Address(RVA = "0xAAE1D8", Offset = "0xAAE1D8", VA = "0xAAE1D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA028", Offset = "0x7FA028")]
		get
		{
			return default(States);
		}
		[Token(Token = "0x6000577")]
		[Address(RVA = "0xAAE1E0", Offset = "0xAAE1E0", VA = "0xAAE1E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA038", Offset = "0x7FA038")]
		private set
		{
		}
	}

	[Token(Token = "0x17000065")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x600057B")]
		[Address(RVA = "0xAAE410", Offset = "0xAAE410", VA = "0xAAE410")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000066")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x600057C")]
		[Address(RVA = "0xAAE438", Offset = "0xAAE438", VA = "0xAAE438")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA068", Offset = "0x7FA068")]
		get
		{
			return null;
		}
		[Token(Token = "0x600057D")]
		[Address(RVA = "0xAAE440", Offset = "0xAAE440", VA = "0xAAE440")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA078", Offset = "0x7FA078")]
		private set
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x6000578")]
		[Address(RVA = "0xAAE1E8", Offset = "0xAAE1E8", VA = "0xAAE1E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA048", Offset = "0x7FA048")]
		add
		{
		}
		[Token(Token = "0x6000579")]
		[Address(RVA = "0xAAE28C", Offset = "0xAAE28C", VA = "0xAAE28C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA058", Offset = "0x7FA058")]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x6000587")]
		[Address(RVA = "0xAAEB4C", Offset = "0xAAEB4C", VA = "0xAAEB4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA0C0", Offset = "0x7FA0C0")]
		add
		{
		}
		[Token(Token = "0x6000588")]
		[Address(RVA = "0xAAEBF0", Offset = "0xAAEBF0", VA = "0xAAEBF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA0D0", Offset = "0x7FA0D0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x600058A")]
		[Address(RVA = "0xAAEC94", Offset = "0xAAEC94", VA = "0xAAEC94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA144", Offset = "0x7FA144")]
		add
		{
		}
		[Token(Token = "0x600058B")]
		[Address(RVA = "0xAAED38", Offset = "0xAAED38", VA = "0xAAED38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA154", Offset = "0x7FA154")]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x600058C")]
		[Address(RVA = "0xAAEDDC", Offset = "0xAAEDDC", VA = "0xAAEDDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA164", Offset = "0x7FA164")]
		add
		{
		}
		[Token(Token = "0x600058D")]
		[Address(RVA = "0xAAEE80", Offset = "0xAAEE80", VA = "0xAAEE80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA174", Offset = "0x7FA174")]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x600058F")]
		[Address(RVA = "0xAAEF98", Offset = "0xAAEF98", VA = "0xAAEF98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA184", Offset = "0x7FA184")]
		add
		{
		}
		[Token(Token = "0x6000590")]
		[Address(RVA = "0xAAF03C", Offset = "0xAAF03C", VA = "0xAAF03C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA194", Offset = "0x7FA194")]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x6000592")]
		[Address(RVA = "0xAAF150", Offset = "0xAAF150", VA = "0xAAF150")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA208", Offset = "0x7FA208")]
		add
		{
		}
		[Token(Token = "0x6000593")]
		[Address(RVA = "0xAAF1F4", Offset = "0xAAF1F4", VA = "0xAAF1F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA218", Offset = "0x7FA218")]
		remove
		{
		}
	}

	[Token(Token = "0x14000017")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x6000595")]
		[Address(RVA = "0xAAF308", Offset = "0xAAF308", VA = "0xAAF308")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA28C", Offset = "0x7FA28C")]
		add
		{
		}
		[Token(Token = "0x6000596")]
		[Address(RVA = "0xAAF3AC", Offset = "0xAAF3AC", VA = "0xAAF3AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA29C", Offset = "0x7FA29C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000018")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x6000598")]
		[Address(RVA = "0xAAF4C0", Offset = "0xAAF4C0", VA = "0xAAF4C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA310", Offset = "0x7FA310")]
		add
		{
		}
		[Token(Token = "0x6000599")]
		[Address(RVA = "0xAAF564", Offset = "0xAAF564", VA = "0xAAF564")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA320", Offset = "0x7FA320")]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x600059B")]
		[Address(RVA = "0xAAF678", Offset = "0xAAF678", VA = "0xAAF678")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA394", Offset = "0x7FA394")]
		add
		{
		}
		[Token(Token = "0x600059C")]
		[Address(RVA = "0xAAF71C", Offset = "0xAAF71C", VA = "0xAAF71C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA3A4", Offset = "0x7FA3A4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x600059E")]
		[Address(RVA = "0xAAF830", Offset = "0xAAF830", VA = "0xAAF830")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA418", Offset = "0x7FA418")]
		add
		{
		}
		[Token(Token = "0x600059F")]
		[Address(RVA = "0xAAF8D4", Offset = "0xAAF8D4", VA = "0xAAF8D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA428", Offset = "0x7FA428")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xAAF9E8", Offset = "0xAAF9E8", VA = "0xAAF9E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA49C", Offset = "0x7FA49C")]
		add
		{
		}
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0xAAFA8C", Offset = "0xAAFA8C", VA = "0xAAFA8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA4AC", Offset = "0x7FA4AC")]
		remove
		{
		}
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xAADEA8", Offset = "0xAADEA8", VA = "0xAADEA8")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xAADECC", Offset = "0xAADECC", VA = "0xAADECC")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xAAE330", Offset = "0xAAE330", VA = "0xAAE330")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xAAE448", Offset = "0xAAE448", VA = "0xAAE448")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xAAE7A0", Offset = "0xAAE7A0", VA = "0xAAE7A0")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FA088", Offset = "0x7FA088")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xAAE858", Offset = "0xAAE858", VA = "0xAAE858")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xAAE920", Offset = "0xAAE920", VA = "0xAAE920")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xAAE93C", Offset = "0xAAE93C", VA = "0xAAE93C")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xAAEA04", Offset = "0xAAEA04", VA = "0xAAEA04")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xAAEA48", Offset = "0xAAEA48", VA = "0xAAEA48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xAAEAA4", Offset = "0xAAEAA4", VA = "0xAAEAA4", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xAAEB44", Offset = "0xAAEB44", VA = "0xAAEB44", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xAAEAD4", Offset = "0xAAEAD4", VA = "0xAAEAD4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA0E0", Offset = "0x7FA0E0")]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xAAEF24", Offset = "0xAAEF24", VA = "0xAAEF24")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xAAF0E0", Offset = "0xAAF0E0", VA = "0xAAF0E0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA1A4", Offset = "0x7FA1A4")]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xAAF298", Offset = "0xAAF298", VA = "0xAAF298")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA228", Offset = "0x7FA228")]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xAAF450", Offset = "0xAAF450", VA = "0xAAF450")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA2AC", Offset = "0x7FA2AC")]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xAAF608", Offset = "0xAAF608", VA = "0xAAF608")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA330", Offset = "0x7FA330")]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xAAF7C0", Offset = "0xAAF7C0", VA = "0xAAF7C0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA3B4", Offset = "0x7FA3B4")]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xAAF978", Offset = "0xAAF978", VA = "0xAAF978")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA438", Offset = "0x7FA438")]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xAAFB30", Offset = "0xAAFB30", VA = "0xAAFB30")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xAAFC74", Offset = "0xAAFC74", VA = "0xAAFC74")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xAAFCA8", Offset = "0xAAFCA8", VA = "0xAAFCA8")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xAAFDC8", Offset = "0xAAFDC8", VA = "0xAAFDC8")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xAAFEF4", Offset = "0xAAFEF4", VA = "0xAAFEF4")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x2000120")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400001C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xD59758", Offset = "0xD59758", VA = "0xD59758")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA4BC", Offset = "0x7FA4BC")]
		add
		{
		}
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xD597FC", Offset = "0xD597FC", VA = "0xD597FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA4CC", Offset = "0x7FA4CC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xD598A0", Offset = "0xD598A0", VA = "0xD598A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA4DC", Offset = "0x7FA4DC")]
		add
		{
		}
		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xD59944", Offset = "0xD59944", VA = "0xD59944")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA4EC", Offset = "0x7FA4EC")]
		remove
		{
		}
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xD599E8", Offset = "0xD599E8", VA = "0xD599E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xD59A90", Offset = "0xD59A90", VA = "0xD59A90")]
	private void Start()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xD59A94", Offset = "0xD59A94", VA = "0xD59A94")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xD59B08", Offset = "0xD59B08", VA = "0xD59B08")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xD59C78", Offset = "0xD59C78", VA = "0xD59C78")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xD59F5C", Offset = "0xD59F5C", VA = "0xD59F5C")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xD5A14C", Offset = "0xD5A14C", VA = "0xD5A14C")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x2000121")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xC2E2EC", Offset = "0xC2E2EC", VA = "0xC2E2EC", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xC2E380", Offset = "0xC2E380", VA = "0xC2E380", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60005B5")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xC2E450", Offset = "0xC2E450", VA = "0xC2E450")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x2000122")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0B78", Offset = "0x7F0B78")]
	public float Range;

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xC2E460", Offset = "0xC2E460", VA = "0xC2E460", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xC2E5BC", Offset = "0xC2E5BC", VA = "0xC2E5BC")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x2000123")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0BB0", Offset = "0x7F0BB0")]
	public float Range;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0BE8", Offset = "0x7F0BE8")]
	public float MinimumElevation;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0C20", Offset = "0x7F0C20")]
	public float Gravity;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0C58", Offset = "0x7F0C58")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F0C58", Offset = "0x7F0C58")]
	public float AimVelocity;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0CB4", Offset = "0x7F0CB4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F0CB4", Offset = "0x7F0CB4")]
	public float AimStep;

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xC2E5CC", Offset = "0xC2E5CC", VA = "0xC2E5CC", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xC2E818", Offset = "0xC2E818", VA = "0xC2E818")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x2000124")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0D0C", Offset = "0x7F0D0C")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xC2E82C", Offset = "0xC2E82C", VA = "0xC2E82C")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xC2E910", Offset = "0xC2E910", VA = "0xC2E910")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xC2E940", Offset = "0xC2E940", VA = "0xC2E940")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xC2E970", Offset = "0xC2E970", VA = "0xC2E970")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xC2EA10", Offset = "0xC2EA10", VA = "0xC2EA10", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xC2EA7C", Offset = "0xC2EA7C", VA = "0xC2EA7C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xC2EAE4", Offset = "0xC2EAE4", VA = "0xC2EAE4")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x2000125")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F0D44", Offset = "0x7F0D44")]
	private bool <IsValidDestination>k__BackingField;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0D54", Offset = "0x7F0D54")]
	public Transform PositionIndicator;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0D8C", Offset = "0x7F0D8C")]
	public Transform OrientationIndicator;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0DC4", Offset = "0x7F0DC4")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x17000067")]
	public bool IsValidDestination
	{
		[Token(Token = "0x60005C2")]
		[Address(RVA = "0xC2EC00", Offset = "0xC2EC00", VA = "0xC2EC00")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA4FC", Offset = "0x7FA4FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0xC2EC08", Offset = "0xC2EC08", VA = "0xC2EC08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA50C", Offset = "0x7FA50C")]
		private set
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xC2EDB8", Offset = "0xC2EDB8", VA = "0xC2EDB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA51C", Offset = "0x7FA51C")]
		add
		{
		}
		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xC2EE5C", Offset = "0xC2EE5C", VA = "0xC2EE5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA52C", Offset = "0x7FA52C")]
		remove
		{
		}
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xC2EC14", Offset = "0xC2EC14", VA = "0xC2EC14")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xC2EC9C", Offset = "0xC2EC9C", VA = "0xC2EC9C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xC2ED74", Offset = "0xC2ED74", VA = "0xC2ED74")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xC2EDB4", Offset = "0xC2EDB4", VA = "0xC2EDB4")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xC2EF00", Offset = "0xC2EF00", VA = "0xC2EF00")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xC2EF68", Offset = "0xC2EF68", VA = "0xC2EF68")]
	public void Recycle()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xC2EF88", Offset = "0xC2EF88", VA = "0xC2EF88", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x2000126")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x2000352")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE314", Offset = "0x7EE314")]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000266")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0xC2F64C", Offset = "0xC2F64C", VA = "0xC2F64C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000267")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0xC2F6B4", Offset = "0xC2F6B4", VA = "0xC2F6B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xC2F398", Offset = "0xC2F398", VA = "0xC2F398")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xC2F5BC", Offset = "0xC2F5BC", VA = "0xC2F5BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xC2F5C0", Offset = "0xC2F5C0", VA = "0xC2F5C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xC2F654", Offset = "0xC2F654", VA = "0xC2F654", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000353")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE324", Offset = "0x7EE324")]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000268")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017B1")]
			[Address(RVA = "0xC2F54C", Offset = "0xC2F54C", VA = "0xC2F54C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000269")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017B3")]
			[Address(RVA = "0xC2F5B4", Offset = "0xC2F5B4", VA = "0xC2F5B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xC2F434", Offset = "0xC2F434", VA = "0xC2F434")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xC2F4B8", Offset = "0xC2F4B8", VA = "0xC2F4B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xC2F4BC", Offset = "0xC2F4BC", VA = "0xC2F4BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xC2F554", Offset = "0xC2F554", VA = "0xC2F554", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xC2F168", Offset = "0xC2F168", VA = "0xC2F168")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xC2F214", Offset = "0xC2F214", VA = "0xC2F214", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xC2F26C", Offset = "0xC2F26C", VA = "0xC2F26C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xC2F328", Offset = "0xC2F328", VA = "0xC2F328")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA53C", Offset = "0x7FA53C")]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xC2F3C4", Offset = "0xC2F3C4", VA = "0xC2F3C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA5A0", Offset = "0x7FA5A0")]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005D2")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x60005D3")]
	public abstract void GetAimData(out Ray aimRay);

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xC2F460", Offset = "0xC2F460", VA = "0xC2F460")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA604", Offset = "0x7FA604")]
	private void <.ctor>b__2_0()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xC2F48C", Offset = "0xC2F48C", VA = "0xC2F48C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA614", Offset = "0x7FA614")]
	private void <.ctor>b__2_1()
	{
	}
}
[Token(Token = "0x2000127")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F0E0C", Offset = "0x7F0E0C")]
	private Transform <Pointer>k__BackingField;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0E1C", Offset = "0x7F0E1C")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0E54", Offset = "0x7F0E54")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0E8C", Offset = "0x7F0E8C")]
	public bool FastTeleport;

	[Token(Token = "0x17000068")]
	public Transform Pointer
	{
		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xC2F6BC", Offset = "0xC2F6BC", VA = "0xC2F6BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA624", Offset = "0x7FA624")]
		get
		{
			return null;
		}
		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xC2F6C4", Offset = "0xC2F6C4", VA = "0xC2F6C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA634", Offset = "0x7FA634")]
		private set
		{
		}
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xC2F6CC", Offset = "0xC2F6CC", VA = "0xC2F6CC", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xC2F828", Offset = "0xC2F828", VA = "0xC2F828", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xC2F8E0", Offset = "0xC2F8E0", VA = "0xC2F8E0")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x2000128")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x2000354")]
	public enum InputModes
	{
		[Token(Token = "0x4001418")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x4001419")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x400141A")]
		ThumbstickTeleport,
		[Token(Token = "0x400141B")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x2000355")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x400141D")]
		A,
		[Token(Token = "0x400141E")]
		B,
		[Token(Token = "0x400141F")]
		LeftTrigger,
		[Token(Token = "0x4001420")]
		LeftThumbstick,
		[Token(Token = "0x4001421")]
		RightTrigger,
		[Token(Token = "0x4001422")]
		RightThumbstick,
		[Token(Token = "0x4001423")]
		X,
		[Token(Token = "0x4001424")]
		Y
	}

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0EC4", Offset = "0x7F0EC4")]
	public InputModes InputMode;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0EFC", Offset = "0x7F0EFC")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0F34", Offset = "0x7F0F34")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0F6C", Offset = "0x7F0F6C")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xC2F8E4", Offset = "0xC2F8E4", VA = "0xC2F8E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xC2F8E8", Offset = "0xC2F8E8", VA = "0xC2F8E8", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xC2FD30", Offset = "0xC2FD30", VA = "0xC2FD30", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xC2FDF0", Offset = "0xC2FDF0", VA = "0xC2FDF0")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x2000129")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x2000356")]
	public enum OrientationModes
	{
		[Token(Token = "0x4001426")]
		HeadRelative,
		[Token(Token = "0x4001427")]
		ForwardFacing
	}

	[Token(Token = "0x2000357")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE334", Offset = "0x7EE334")]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x1700026A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017B7")]
			[Address(RVA = "0xC30280", Offset = "0xC30280", VA = "0xC30280", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017B9")]
			[Address(RVA = "0xC302E8", Offset = "0xC302E8", VA = "0xC302E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xC3005C", Offset = "0xC3005C", VA = "0xC3005C")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xC301D8", Offset = "0xC301D8", VA = "0xC301D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xC301DC", Offset = "0xC301DC", VA = "0xC301DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xC30288", Offset = "0xC30288", VA = "0xC30288", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xC2FE9C", Offset = "0xC2FE9C", VA = "0xC2FE9C")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xC2FF50", Offset = "0xC2FF50", VA = "0xC2FF50")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xC2FF58", Offset = "0xC2FF58", VA = "0xC2FF58", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xC2FFA4", Offset = "0xC2FFA4", VA = "0xC2FFA4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xC2FFEC", Offset = "0xC2FFEC", VA = "0xC2FFEC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA644", Offset = "0x7FA644")]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005E4")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x60005E5")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xC30088", Offset = "0xC30088", VA = "0xC30088")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xC301AC", Offset = "0xC301AC", VA = "0xC301AC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA6A8", Offset = "0x7FA6A8")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x200012A")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xC302F0", Offset = "0xC302F0", VA = "0xC302F0", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xC302F4", Offset = "0xC302F4", VA = "0xC302F4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xC30370", Offset = "0xC30370", VA = "0xC30370")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x200012B")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0FA4", Offset = "0x7F0FA4")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F0FDC", Offset = "0x7F0FDC")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F1014", Offset = "0x7F1014")]
	public float AimDistanceThreshold;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F104C", Offset = "0x7F104C")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xC30374", Offset = "0xC30374", VA = "0xC30374", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xC303E4", Offset = "0xC303E4", VA = "0xC303E4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xC3085C", Offset = "0xC3085C", VA = "0xC3085C")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x200012C")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F1084", Offset = "0x7F1084")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F10BC", Offset = "0x7F10BC")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F10F4", Offset = "0x7F10F4")]
	public float RotateStickThreshold;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xC30860", Offset = "0xC30860", VA = "0xC30860", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xC308A4", Offset = "0xC308A4", VA = "0xC308A4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xC30D14", Offset = "0xC30D14", VA = "0xC30D14")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x200012D")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xC30D24", Offset = "0xC30D24", VA = "0xC30D24")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xC30D28", Offset = "0xC30D28", VA = "0xC30D28")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xC30D30", Offset = "0xC30D30", VA = "0xC30D30")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xC30E18", Offset = "0xC30E18", VA = "0xC30E18")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xC30E40", Offset = "0xC30E40", VA = "0xC30E40")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x200012E")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F112C", Offset = "0x7F112C")]
	private LocomotionTeleport <LocomotionTeleport>k__BackingField;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000069")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xC30E58", Offset = "0xC30E58", VA = "0xC30E58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA6B8", Offset = "0x7FA6B8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xC30E60", Offset = "0xC30E60", VA = "0xC30E60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA6C8", Offset = "0x7FA6C8")]
		private set
		{
		}
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xC2E31C", Offset = "0xC2E31C", VA = "0xC2E31C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xC2E424", Offset = "0xC2E424", VA = "0xC2E424", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xC30E68", Offset = "0xC30E68", VA = "0xC30E68")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FA6D8", Offset = "0x7FA6D8")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xC2EA70", Offset = "0xC2EA70", VA = "0xC2EA70", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xC2EADC", Offset = "0xC2EADC", VA = "0xC2EADC", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xC2E458", Offset = "0xC2E458", VA = "0xC2E458")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x200012F")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x2000358")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE344", Offset = "0x7EE344")]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x1700026C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017BD")]
			[Address(RVA = "0xC314BC", Offset = "0xC314BC", VA = "0xC314BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017BF")]
			[Address(RVA = "0xC31524", Offset = "0xC31524", VA = "0xC31524", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xC310B8", Offset = "0xC310B8", VA = "0xC310B8")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xC31250", Offset = "0xC31250", VA = "0xC31250", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xC31254", Offset = "0xC31254", VA = "0xC31254", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xC314C4", Offset = "0xC314C4", VA = "0xC314C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F113C", Offset = "0x7F113C")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x40006DB")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xC30F30", Offset = "0xC30F30", VA = "0xC30F30")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xC30FF4", Offset = "0xC30FF4", VA = "0xC30FF4", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xC31020", Offset = "0xC31020", VA = "0xC31020", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xC31048", Offset = "0xC31048", VA = "0xC31048")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA710", Offset = "0x7FA710")]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xC310E4", Offset = "0xC310E4", VA = "0xC310E4", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x6000603")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xC31100", Offset = "0xC31100", VA = "0xC31100", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xC31224", Offset = "0xC31224", VA = "0xC31224")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA774", Offset = "0x7FA774")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x2000130")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xC3152C", Offset = "0xC3152C", VA = "0xC3152C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xC3158C", Offset = "0xC3158C", VA = "0xC3158C", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xC31710", Offset = "0xC31710", VA = "0xC31710", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xC31800", Offset = "0xC31800", VA = "0xC31800")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FA784", Offset = "0x7FA784")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xC31804", Offset = "0xC31804", VA = "0xC31804")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x2000131")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F1174", Offset = "0x7F1174")]
	public float LOSOffset;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F11AC", Offset = "0x7F11AC")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xC31810", Offset = "0xC31810", VA = "0xC31810", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xC31A40", Offset = "0xC31A40", VA = "0xC31A40")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x2000132")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x600060D")]
	[Address(RVA = "0xC31A4C", Offset = "0xC31A4C", VA = "0xC31A4C", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xC31BD0", Offset = "0xC31BD0", VA = "0xC31BD0")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x2000133")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x600060F")]
	[Address(RVA = "0xC31BD4", Offset = "0xC31BD4", VA = "0xC31BD4", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xC31C6C", Offset = "0xC31C6C", VA = "0xC31C6C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000611")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xC31D00", Offset = "0xC31D00", VA = "0xC31D00")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x2000134")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x2000359")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE354", Offset = "0x7EE354")]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x1700026E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017C3")]
			[Address(RVA = "0xC32068", Offset = "0xC32068", VA = "0xC32068", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017C5")]
			[Address(RVA = "0xC320D0", Offset = "0xC320D0", VA = "0xC320D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xC31DA4", Offset = "0xC31DA4", VA = "0xC31DA4")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xC31F68", Offset = "0xC31F68", VA = "0xC31F68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xC31F6C", Offset = "0xC31F6C", VA = "0xC31F6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xC32070", Offset = "0xC32070", VA = "0xC32070", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F11E4", Offset = "0x7F11E4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F11E4", Offset = "0x7F11E4")]
	public float TransitionDuration;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F123C", Offset = "0x7F123C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F123C", Offset = "0x7F123C")]
	public float TeleportDelay;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F1290", Offset = "0x7F1290")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xC31D08", Offset = "0xC31D08", VA = "0xC31D08", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xC31D34", Offset = "0xC31D34", VA = "0xC31D34")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA7BC", Offset = "0x7FA7BC")]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xC31DD0", Offset = "0xC31DD0", VA = "0xC31DD0")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x2000135")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x6000616")]
	[Address(RVA = "0xC320D8", Offset = "0xC320D8", VA = "0xC320D8", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xC320F4", Offset = "0xC320F4", VA = "0xC320F4")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x2000136")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x200035A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE364", Offset = "0x7EE364")]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000270")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017C9")]
			[Address(RVA = "0xC32340", Offset = "0xC32340", VA = "0xC32340", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000271")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017CB")]
			[Address(RVA = "0xC323A8", Offset = "0xC323A8", VA = "0xC323A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xC32198", Offset = "0xC32198", VA = "0xC32198")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xC3220C", Offset = "0xC3220C", VA = "0xC3220C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xC32210", Offset = "0xC32210", VA = "0xC32210", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xC32348", Offset = "0xC32348", VA = "0xC32348", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F12C8", Offset = "0x7F12C8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F12C8", Offset = "0x7F12C8")]
	public float TransitionDuration;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xC320FC", Offset = "0xC320FC", VA = "0xC320FC", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xC32128", Offset = "0xC32128", VA = "0xC32128")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA820", Offset = "0x7FA820")]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xC321C4", Offset = "0xC321C4", VA = "0xC321C4")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x2000137")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x200035B")]
	public enum PlabackState
	{
		[Token(Token = "0x400143A")]
		Idle = 1,
		[Token(Token = "0x400143B")]
		Preparing,
		[Token(Token = "0x400143C")]
		Buffering,
		[Token(Token = "0x400143D")]
		Ready,
		[Token(Token = "0x400143E")]
		Ended
	}

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x1700006A")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x600061B")]
		[Address(RVA = "0xBFF7B8", Offset = "0xBFF7B8", VA = "0xBFF7B8")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700006B")]
	private static IntPtr Activity
	{
		[Token(Token = "0x600061C")]
		[Address(RVA = "0xBFFA74", Offset = "0xBFFA74", VA = "0xBFFA74")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700006C")]
	public static bool IsAvailable
	{
		[Token(Token = "0x600061D")]
		[Address(RVA = "0xBFC86C", Offset = "0xBFC86C", VA = "0xBFC86C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700006D")]
	public static bool IsPlaying
	{
		[Token(Token = "0x600061E")]
		[Address(RVA = "0xBFDAD4", Offset = "0xBFDAD4", VA = "0xBFDAD4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700006E")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x600061F")]
		[Address(RVA = "0xBFFCB8", Offset = "0xBFFCB8", VA = "0xBFFCB8")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700006F")]
	public static long Duration
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0xBFDCB8", Offset = "0xBFDCB8", VA = "0xBFDCB8")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000070")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x6000621")]
		[Address(RVA = "0xBFDBC4", Offset = "0xBFDBC4", VA = "0xBFDBC4")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000622")]
		[Address(RVA = "0xBFD298", Offset = "0xBFD298", VA = "0xBFD298")]
		set
		{
		}
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xBFE318", Offset = "0xBFE318", VA = "0xBFE318")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xBFE05C", Offset = "0xBFE05C", VA = "0xBFE05C")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xBFCF28", Offset = "0xBFCF28", VA = "0xBFCF28")]
	public static void Play()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xBFD0AC", Offset = "0xBFD0AC", VA = "0xBFD0AC")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xBFDE84", Offset = "0xBFDE84", VA = "0xBFDE84")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xBFE50C", Offset = "0xBFE50C", VA = "0xBFE50C")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xBFD918", Offset = "0xBFD918", VA = "0xBFD918")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x2000138")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400001F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x600062B")]
		[Address(RVA = "0xDDC7CC", Offset = "0xDDC7CC", VA = "0xDDC7CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA884", Offset = "0x7FA884")]
		add
		{
		}
		[Token(Token = "0x600062C")]
		[Address(RVA = "0xDDC870", Offset = "0xDDC870", VA = "0xDDC870")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA894", Offset = "0x7FA894")]
		remove
		{
		}
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xDDC914", Offset = "0xDDC914", VA = "0xDDC914", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xDDC928", Offset = "0xDDC928", VA = "0xDDC928")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x2000139")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x200035C")]
	public enum ButtonType
	{
		[Token(Token = "0x4001440")]
		Play,
		[Token(Token = "0x4001441")]
		Pause,
		[Token(Token = "0x4001442")]
		FastForward,
		[Token(Token = "0x4001443")]
		Rewind,
		[Token(Token = "0x4001444")]
		SkipForward,
		[Token(Token = "0x4001445")]
		SkipBack,
		[Token(Token = "0x4001446")]
		Stop
	}

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000071")]
	public ButtonType buttonType
	{
		[Token(Token = "0x600062F")]
		[Address(RVA = "0xBFAD40", Offset = "0xBFAD40", VA = "0xBFAD40")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x6000630")]
		[Address(RVA = "0xBFAD48", Offset = "0xBFAD48", VA = "0xBFAD48")]
		set
		{
		}
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xBFAD6C", Offset = "0xBFAD6C", VA = "0xBFAD6C", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xBFC238", Offset = "0xBFC238", VA = "0xBFC238")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x200013A")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x200035D")]
	public enum VideoShape
	{
		[Token(Token = "0x4001448")]
		_360,
		[Token(Token = "0x4001449")]
		_180,
		[Token(Token = "0x400144A")]
		Quad
	}

	[Token(Token = "0x200035E")]
	public enum VideoStereo
	{
		[Token(Token = "0x400144C")]
		Mono,
		[Token(Token = "0x400144D")]
		TopBottom,
		[Token(Token = "0x400144E")]
		LeftRight,
		[Token(Token = "0x400144F")]
		BottomTop
	}

	[Token(Token = "0x200035F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE374", Offset = "0x7EE374")]
	private sealed class <Start>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000272")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017CF")]
			[Address(RVA = "0xBFE7D4", Offset = "0xBFE7D4", VA = "0xBFE7D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000273")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017D1")]
			[Address(RVA = "0xBFE83C", Offset = "0xBFE83C", VA = "0xBFE83C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xBFCC24", Offset = "0xBFCC24", VA = "0xBFCC24")]
		[DebuggerHidden]
		public <Start>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xBFE650", Offset = "0xBFE650", VA = "0xBFE650", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xBFE654", Offset = "0xBFE654", VA = "0xBFE654", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xBFE7DC", Offset = "0xBFE7DC", VA = "0xBFE7DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000360")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE384", Offset = "0x7EE384")]
	private sealed class <>c__DisplayClass33_0
	{
		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string moviePath;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string drmLicencesUrl;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xBFCE8C", Offset = "0xBFCE8C", VA = "0xBFCE8C")]
		public <>c__DisplayClass33_0()
		{
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xBFE244", Offset = "0xBFE244", VA = "0xBFE244")]
		internal void <Play>b__0()
		{
		}
	}

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1350", Offset = "0x7F1350")]
	private bool <IsPlaying>k__BackingField;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1360", Offset = "0x7F1360")]
	private long <Duration>k__BackingField;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1370", Offset = "0x7F1370")]
	private long <PlaybackPosition>k__BackingField;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool DisplayMono;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000072")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000633")]
		[Address(RVA = "0xBFC620", Offset = "0xBFC620", VA = "0xBFC620")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA8A4", Offset = "0x7FA8A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000634")]
		[Address(RVA = "0xBFC628", Offset = "0xBFC628", VA = "0xBFC628")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA8B4", Offset = "0x7FA8B4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000073")]
	public long Duration
	{
		[Token(Token = "0x6000635")]
		[Address(RVA = "0xBFC634", Offset = "0xBFC634", VA = "0xBFC634")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA8C4", Offset = "0x7FA8C4")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000636")]
		[Address(RVA = "0xBFC63C", Offset = "0xBFC63C", VA = "0xBFC63C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA8D4", Offset = "0x7FA8D4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000074")]
	public long PlaybackPosition
	{
		[Token(Token = "0x6000637")]
		[Address(RVA = "0xBFC644", Offset = "0xBFC644", VA = "0xBFC644")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA8E4", Offset = "0x7FA8E4")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000638")]
		[Address(RVA = "0xBFC64C", Offset = "0xBFC64C", VA = "0xBFC64C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA8F4", Offset = "0x7FA8F4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xBFC654", Offset = "0xBFC654", VA = "0xBFC654")]
	private void Awake()
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xBFC8D4", Offset = "0xBFC8D4", VA = "0xBFC8D4")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xBFC93C", Offset = "0xBFC93C", VA = "0xBFC93C")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xBFCBB4", Offset = "0xBFCBB4", VA = "0xBFCBB4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA904", Offset = "0x7FA904")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xBFCC50", Offset = "0xBFCC50", VA = "0xBFCC50")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xBFCE94", Offset = "0xBFCE94", VA = "0xBFCE94")]
	public void Play()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xBFD01C", Offset = "0xBFD01C", VA = "0xBFD01C")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xBFD1A0", Offset = "0xBFD1A0", VA = "0xBFD1A0")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xBFD3D8", Offset = "0xBFD3D8", VA = "0xBFD3D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xBFDDAC", Offset = "0xBFDDAC", VA = "0xBFDDAC")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xBFDFCC", Offset = "0xBFDFCC", VA = "0xBFDFCC")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xBFE150", Offset = "0xBFE150", VA = "0xBFE150")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xBFE234", Offset = "0xBFE234", VA = "0xBFE234")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x200013B")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x2000361")]
	private enum PlaybackState
	{
		[Token(Token = "0x4001457")]
		Playing,
		[Token(Token = "0x4001458")]
		Paused,
		[Token(Token = "0x4001459")]
		Rewinding,
		[Token(Token = "0x400145A")]
		FastForwarding
	}

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider ProgressBar;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xBFE844", Offset = "0xBFE844", VA = "0xBFE844")]
	private void Start()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xBFEB40", Offset = "0xBFEB40", VA = "0xBFEB40")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xBFED1C", Offset = "0xBFED1C", VA = "0xBFED1C")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xBFEE50", Offset = "0xBFEE50", VA = "0xBFEE50")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xBFEF58", Offset = "0xBFEF58", VA = "0xBFEF58")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xBFEE24", Offset = "0xBFEE24", VA = "0xBFEE24")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xBFF020", Offset = "0xBFF020", VA = "0xBFF020")]
	private void Update()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xBFEA34", Offset = "0xBFEA34", VA = "0xBFEA34")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xBFF3B4", Offset = "0xBFF3B4", VA = "0xBFF3B4")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x200013C")]
public static class VectorUtil
{
	[Token(Token = "0x600064F")]
	[Address(RVA = "0x145A648", Offset = "0x145A648", VA = "0x145A648")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x200013D")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xDE0B28", Offset = "0xDE0B28", VA = "0xDE0B28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xDE0EF8", Offset = "0xDE0EF8", VA = "0xDE0EF8")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xDE0FB0", Offset = "0xDE0FB0", VA = "0xDE0FB0")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xDE11B0", Offset = "0xDE11B0", VA = "0xDE11B0")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xDE1298", Offset = "0xDE1298", VA = "0xDE1298")]
	private void Update()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xDE1374", Offset = "0xDE1374", VA = "0xDE1374")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xDE13E0", Offset = "0xDE13E0", VA = "0xDE13E0")]
	public DebugUISample()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xDE13E8", Offset = "0xDE13E8", VA = "0xDE13E8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA978", Offset = "0x7FA978")]
	private void <Start>b__2_0(Toggle t)
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xDE1444", Offset = "0xDE1444", VA = "0xDE1444")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA988", Offset = "0x7FA988")]
	private void <Start>b__2_1(Toggle t)
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xDE14A0", Offset = "0xDE14A0", VA = "0xDE14A0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA998", Offset = "0x7FA998")]
	private void <Start>b__2_2(Toggle t)
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xDE14FC", Offset = "0xDE14FC", VA = "0xDE14FC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FA9A8", Offset = "0x7FA9A8")]
	private void <Start>b__2_3(Toggle t)
	{
	}
}
[Token(Token = "0x200013E")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x2000362")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE394", Offset = "0x7EE394")]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x17000274")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017D7")]
			[Address(RVA = "0xAA3DE4", Offset = "0xAA3DE4", VA = "0xAA3DE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000275")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017D9")]
			[Address(RVA = "0xAA3E4C", Offset = "0xAA3E4C", VA = "0xAA3E4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xAA3C94", Offset = "0xAA3C94", VA = "0xAA3C94")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xAA3CC8", Offset = "0xAA3CC8", VA = "0xAA3CC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xAA3CCC", Offset = "0xAA3CCC", VA = "0xAA3CCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xAA3DEC", Offset = "0xAA3DEC", VA = "0xAA3DEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xAA3998", Offset = "0xAA3998", VA = "0xAA3998")]
	private void Awake()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xAA3A98", Offset = "0xAA3A98", VA = "0xAA3A98")]
	private void Update()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xAA3A28", Offset = "0xAA3A28", VA = "0xAA3A28")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FA9B8", Offset = "0x7FA9B8")]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xAA3CC0", Offset = "0xAA3CC0", VA = "0xAA3CC0")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x200013F")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F1390", Offset = "0x7F1390")]
	public int SubdivisionsU;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F13AC", Offset = "0x7F13AC")]
	public int SubdivisionsV;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xDDD024", Offset = "0xDDD024", VA = "0xDDD024")]
	private void Update()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xDDDADC", Offset = "0xDDDADC", VA = "0xDDDADC")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x2000140")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x17000075")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x6000661")]
		[Address(RVA = "0xAAD7FC", Offset = "0xAAD7FC", VA = "0xAAD7FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xAAD854", Offset = "0xAAD854", VA = "0xAAD854")]
	public void Start()
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xAADB98", Offset = "0xAADB98", VA = "0xAADB98")]
	public void Update()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xAADC7C", Offset = "0xAADC7C", VA = "0xAADC7C")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FAA1C", Offset = "0x7FAA1C")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x6000665")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000666")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x6000667")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x6000668")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x6000669")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x600066A")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x600066B")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x600066C")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xAADCE4", Offset = "0xAADCE4", VA = "0xAADCE4")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xAADD20", Offset = "0xAADD20", VA = "0xAADD20")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xAADD94", Offset = "0xAADD94", VA = "0xAADD94")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xAADEF0", Offset = "0xAADEF0", VA = "0xAADEF0")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xAADFC4", Offset = "0xAADFC4", VA = "0xAADFC4")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xAADAA4", Offset = "0xAADAA4", VA = "0xAADAA4")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xAAE084", Offset = "0xAAE084", VA = "0xAAE084")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xAAE0EC", Offset = "0xAAE0EC", VA = "0xAAE0EC")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xAAE1D0", Offset = "0xAAE1D0", VA = "0xAAE1D0")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x2000141")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED4A4", Offset = "0x7ED4A4")]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x2000363")]
	public enum DrawMode
	{
		[Token(Token = "0x400145F")]
		Opaque,
		[Token(Token = "0x4001460")]
		OpaqueWithClip,
		[Token(Token = "0x4001461")]
		TransparentDefaultAlpha,
		[Token(Token = "0x4001462")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x17000076")]
	public bool overlayEnabled
	{
		[Token(Token = "0x600067C")]
		[Address(RVA = "0xBC0820", Offset = "0xBC0820", VA = "0xBC0820")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600067D")]
		[Address(RVA = "0xBC08B4", Offset = "0xBC08B4", VA = "0xBC08B4")]
		set
		{
		}
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xBBF1B0", Offset = "0xBBF1B0", VA = "0xBBF1B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xBBFE20", Offset = "0xBBFE20", VA = "0xBBFE20")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xBBFEA4", Offset = "0xBBFEA4", VA = "0xBBFEA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xBBFF98", Offset = "0xBBFF98", VA = "0xBBFF98")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xBC008C", Offset = "0xBC008C", VA = "0xBC008C", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xBC0290", Offset = "0xBC0290", VA = "0xBC0290")]
	private void Update()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xBC0984", Offset = "0xBC0984", VA = "0xBC0984")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x2000142")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x2000364")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE3A4", Offset = "0x7EE3A4")]
	private sealed class <>c__DisplayClass3_0
	{
		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int sceneIndex;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StartMenu <>4__this;

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xC2A15C", Offset = "0xC2A15C", VA = "0xC2A15C")]
		public <>c__DisplayClass3_0()
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xC2A24C", Offset = "0xC2A24C", VA = "0xC2A24C")]
		internal void <Start>b__0()
		{
		}
	}

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xC29FBC", Offset = "0xC29FBC", VA = "0xC29FBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xC2A164", Offset = "0xC2A164", VA = "0xC2A164")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xC2A244", Offset = "0xC2A244", VA = "0xC2A244")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x2000143")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED508", Offset = "0x7ED508")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x2000365")]
	public enum RotationAxes
	{
		[Token(Token = "0x4001466")]
		MouseXAndY,
		[Token(Token = "0x4001467")]
		MouseX,
		[Token(Token = "0x4001468")]
		MouseY
	}

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xBFC2E0", Offset = "0xBFC2E0", VA = "0xBFC2E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xBFC540", Offset = "0xBFC540", VA = "0xBFC540")]
	private void Start()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xBFC600", Offset = "0xBFC600", VA = "0xBFC600")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x2000144")]
public class ONSPAmbisonicsNative : MonoBehaviour
{
	[Token(Token = "0x2000366")]
	public enum ovrAmbisonicsNativeStatus
	{
		[Token(Token = "0x400146A")]
		Uninitialized = -1,
		[Token(Token = "0x400146B")]
		NotEnabled,
		[Token(Token = "0x400146C")]
		Success,
		[Token(Token = "0x400146D")]
		StreamError,
		[Token(Token = "0x400146E")]
		ProcessError,
		[Token(Token = "0x400146F")]
		MaxStatValue
	}

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource source;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramVSpeakerMode;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int paramAmbiStat;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool useVirtualSpeakers;

	[Token(Token = "0x17000077")]
	public bool UseVirtualSpeakers
	{
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x141C910", Offset = "0x141C910", VA = "0x141C910")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x141C918", Offset = "0x141C918", VA = "0x141C918")]
		set
		{
		}
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x141C924", Offset = "0x141C924", VA = "0x141C924")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x141CB58", Offset = "0x141CB58", VA = "0x141CB58")]
	private void Update()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x141CDA8", Offset = "0x141CDA8", VA = "0x141CDA8")]
	public ONSPAmbisonicsNative()
	{
	}
}
[Token(Token = "0x2000145")]
public class ONSPAudioSource : MonoBehaviour
{
	[Token(Token = "0x2000367")]
	private enum Parameters
	{
		[Token(Token = "0x4001471")]
		P_GAIN,
		[Token(Token = "0x4001472")]
		P_USEINVSQR,
		[Token(Token = "0x4001473")]
		P_NEAR,
		[Token(Token = "0x4001474")]
		P_FAR,
		[Token(Token = "0x4001475")]
		P_RADIUS,
		[Token(Token = "0x4001476")]
		P_DISABLE_RFL,
		[Token(Token = "0x4001477")]
		P_VSPEAKERMODE,
		[Token(Token = "0x4001478")]
		P_AMBISTAT,
		[Token(Token = "0x4001479")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Token(Token = "0x400147A")]
		P_READONLY_NUM_VOICES,
		[Token(Token = "0x400147B")]
		P_SENDLEVEL,
		[Token(Token = "0x400147C")]
		P_NUM
	}

	[Token(Token = "0x4000759")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool enableSpatialization;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float gain;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool useInvSqr;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float near;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float far;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float volumetricRadius;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float reverbSend;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool enableRfl;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	[Token(Token = "0x17000078")]
	public bool EnableSpatialization
	{
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x141D114", Offset = "0x141D114", VA = "0x141D114")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x141D11C", Offset = "0x141D11C", VA = "0x141D11C")]
		set
		{
		}
	}

	[Token(Token = "0x17000079")]
	public float Gain
	{
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x141D128", Offset = "0x141D128", VA = "0x141D128")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x141D130", Offset = "0x141D130", VA = "0x141D130")]
		set
		{
		}
	}

	[Token(Token = "0x1700007A")]
	public bool UseInvSqr
	{
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x141D1B4", Offset = "0x141D1B4", VA = "0x141D1B4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x141D1BC", Offset = "0x141D1BC", VA = "0x141D1BC")]
		set
		{
		}
	}

	[Token(Token = "0x1700007B")]
	public float Near
	{
		[Token(Token = "0x6000694")]
		[Address(RVA = "0x141D1C8", Offset = "0x141D1C8", VA = "0x141D1C8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x141D1D0", Offset = "0x141D1D0", VA = "0x141D1D0")]
		set
		{
		}
	}

	[Token(Token = "0x1700007C")]
	public float Far
	{
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x141D258", Offset = "0x141D258", VA = "0x141D258")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x141D260", Offset = "0x141D260", VA = "0x141D260")]
		set
		{
		}
	}

	[Token(Token = "0x1700007D")]
	public float VolumetricRadius
	{
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x141D2E8", Offset = "0x141D2E8", VA = "0x141D2E8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x141D2F0", Offset = "0x141D2F0", VA = "0x141D2F0")]
		set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	public float ReverbSend
	{
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x141D378", Offset = "0x141D378", VA = "0x141D378")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x141D380", Offset = "0x141D380", VA = "0x141D380")]
		set
		{
		}
	}

	[Token(Token = "0x1700007F")]
	public bool EnableRfl
	{
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x141D408", Offset = "0x141D408", VA = "0x141D408")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x141D410", Offset = "0x141D410", VA = "0x141D410")]
		set
		{
		}
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x141CE2C", Offset = "0x141CE2C", VA = "0x141CE2C")]
	[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x7FAA54", Offset = "0x7FAA54")]
	private static void OnBeforeSceneLoadRuntimeMethod()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600068D")]
	[Address(RVA = "0x141D034", Offset = "0x141D034", VA = "0x141D034")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x141D41C", Offset = "0x141D41C", VA = "0x141D41C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x141D590", Offset = "0x141D590", VA = "0x141D590")]
	private void Start()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x141D594", Offset = "0x141D594", VA = "0x141D594")]
	private void Update()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0x141D488", Offset = "0x141D488", VA = "0x141D488")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0x141D65C", Offset = "0x141D65C", VA = "0x141D65C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x141DABC", Offset = "0x141DABC", VA = "0x141DABC")]
	private void OnDestroy()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x141CFB4", Offset = "0x141CFB4", VA = "0x141CFB4")]
	private static extern int OSP_SetGlobalVoiceLimit(int VoiceLimit);

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x141DB8C", Offset = "0x141DB8C", VA = "0x141DB8C")]
	public ONSPAudioSource()
	{
	}
}
[Token(Token = "0x2000146")]
public class ONSPProfiler : MonoBehaviour
{
	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool profilerEnabled;

	[Token(Token = "0x4000764")]
	private const int DEFAULT_PORT = 2121;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int port;

	[Token(Token = "0x4000766")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x141DBAC", Offset = "0x141DBAC", VA = "0x141DBAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x141DBB8", Offset = "0x141DBB8", VA = "0x141DBB8")]
	private void Update()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x141DC70", Offset = "0x141DC70", VA = "0x141DC70")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x141DBF0", Offset = "0x141DBF0", VA = "0x141DBF0")]
	private static extern int ONSP_SetProfilerPort(int port);

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x141DCF0", Offset = "0x141DCF0", VA = "0x141DCF0")]
	public ONSPProfiler()
	{
	}
}
[Token(Token = "0x2000147")]
public class ONSPPropagationGeometry : MonoBehaviour
{
	[Token(Token = "0x2000368")]
	private struct MeshMaterial
	{
		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x2000369")]
	private struct TerrainMaterial
	{
		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh[] treePrototypeMeshes;
	}

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string GeometryAssetDirectory;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string filePathRelative;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fileEnabled;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool includeChildMeshes;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr geometryHandle;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int OSPSuccess;

	[Token(Token = "0x400076D")]
	public const string GEOMETRY_FILE_EXTENSION = "ovramesh";

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int terrainDecimation;

	[Token(Token = "0x17000080")]
	public static string GeometryAssetPath
	{
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x142076C", Offset = "0x142076C", VA = "0x142076C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000081")]
	public string filePath
	{
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x14207F8", Offset = "0x14207F8", VA = "0x14207F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x1420870", Offset = "0x1420870", VA = "0x1420870")]
	private static string GetPath(Transform current)
	{
		return null;
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x14209B8", Offset = "0x14209B8", VA = "0x14209B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x14209BC", Offset = "0x14209BC", VA = "0x14209BC")]
	private void CreatePropagationGeometry()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x1420F1C", Offset = "0x1420F1C", VA = "0x1420F1C")]
	private void Update()
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x14212B4", Offset = "0x14212B4", VA = "0x14212B4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x1421410", Offset = "0x1421410", VA = "0x1421410")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic, ref int ignoredMeshCount)
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x1421AF8", Offset = "0x1421AF8", VA = "0x1421AF8")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal)
	{
		return default(int);
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x1421B34", Offset = "0x1421B34", VA = "0x1421B34")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic, ref int ignoredMeshCount)
	{
		return default(int);
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x1423350", Offset = "0x1423350", VA = "0x1423350")]
	private static void uploadMeshFilter(List<Vector3> tempVertices, List<int> tempIndices, MeshGroup[] groups, float[] vertices, int[] indices, ref int vertexOffset, ref int indexOffset, ref int groupOffset, Mesh mesh, ONSPPropagationMaterial[] materials, Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x1423228", Offset = "0x1423228", VA = "0x1423228")]
	private static void updateCountsForMesh(ref int totalVertexCount, ref uint totalIndexCount, ref int totalFaceCount, ref int totalMaterialCount, Mesh mesh)
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x1420D54", Offset = "0x1420D54", VA = "0x1420D54")]
	public void UploadGeometry()
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x1420B88", Offset = "0x1420B88", VA = "0x1420B88")]
	public bool ReadFile()
	{
		return default(bool);
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x1423964", Offset = "0x1423964", VA = "0x1423964")]
	public bool WriteToObj()
	{
		return default(bool);
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x1423DA0", Offset = "0x1423DA0", VA = "0x1423DA0")]
	public ONSPPropagationGeometry()
	{
	}
}
[Token(Token = "0x2000148")]
internal class ONSPPropagation
{
	[Token(Token = "0x200036A")]
	public enum ovrAudioScalarType : uint
	{
		[Token(Token = "0x4001483")]
		Int8,
		[Token(Token = "0x4001484")]
		UInt8,
		[Token(Token = "0x4001485")]
		Int16,
		[Token(Token = "0x4001486")]
		UInt16,
		[Token(Token = "0x4001487")]
		Int32,
		[Token(Token = "0x4001488")]
		UInt32,
		[Token(Token = "0x4001489")]
		Int64,
		[Token(Token = "0x400148A")]
		UInt64,
		[Token(Token = "0x400148B")]
		Float16,
		[Token(Token = "0x400148C")]
		Float32,
		[Token(Token = "0x400148D")]
		Float64
	}

	[Token(Token = "0x200036B")]
	public class ClientType
	{
		[Token(Token = "0x400148E")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Token(Token = "0x400148F")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Token(Token = "0x4001490")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Token(Token = "0x4001491")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Token(Token = "0x4001492")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Token(Token = "0x4001493")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Token(Token = "0x4001494")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Token(Token = "0x4001495")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Token(Token = "0x4001496")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Token(Token = "0x4001497")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Token(Token = "0x4001498")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Token(Token = "0x4001499")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Token(Token = "0x400149A")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Token(Token = "0x400149B")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_1 = 13u;

		[Token(Token = "0x400149C")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_2 = 14u;

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x141E1A4", Offset = "0x141E1A4", VA = "0x141E1A4")]
		public ClientType()
		{
		}
	}

	[Token(Token = "0x200036C")]
	public interface PropagationInterface
	{
		[Token(Token = "0x60017DD")]
		int SetPropagationQuality(float quality);

		[Token(Token = "0x60017DE")]
		int SetPropagationThreadAffinity(ulong cpuMask);

		[Token(Token = "0x60017DF")]
		int CreateAudioGeometry(out IntPtr geometry);

		[Token(Token = "0x60017E0")]
		int DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60017E1")]
		int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount);

		[Token(Token = "0x60017E2")]
		int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60017E3")]
		int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60017E4")]
		int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60017E5")]
		int AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60017E6")]
		int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x60017E7")]
		int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60017E8")]
		int CreateAudioMaterial(out IntPtr material);

		[Token(Token = "0x60017E9")]
		int DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60017EA")]
		int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60017EB")]
		int AudioMaterialReset(IntPtr material, MaterialProperty property);
	}

	[Token(Token = "0x200036D")]
	public class UnityNativeInterface : PropagationInterface
	{
		[Token(Token = "0x400149D")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x17000276")]
		private IntPtr context
		{
			[Token(Token = "0x60017EC")]
			[Address(RVA = "0x141EE14", Offset = "0x141EE14", VA = "0x141EE14")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x141EE78", Offset = "0x141EE78", VA = "0x141EE78")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x141EF08", Offset = "0x141EF08", VA = "0x141EF08")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x141EF98", Offset = "0x141EF98", VA = "0x141EF98", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x141EFBC", Offset = "0x141EFBC", VA = "0x141EFBC")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x141F04C", Offset = "0x141F04C", VA = "0x141F04C", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x141F070", Offset = "0x141F070", VA = "0x141F070")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x141F0FC", Offset = "0x141F0FC", VA = "0x141F0FC", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x141F120", Offset = "0x141F120", VA = "0x141F120")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x141F1A0", Offset = "0x141F1A0", VA = "0x141F1A0", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x141F1A8", Offset = "0x141F1A8", VA = "0x141F1A8")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x141F2C8", Offset = "0x141F2C8", VA = "0x141F2C8", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x141F3C0", Offset = "0x141F3C0", VA = "0x141F3C0")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x141F458", Offset = "0x141F458", VA = "0x141F458", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x141F464", Offset = "0x141F464", VA = "0x141F464")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x141F590", Offset = "0x141F590", VA = "0x141F590", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x141F59C", Offset = "0x141F59C", VA = "0x141F59C")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x141F648", Offset = "0x141F648", VA = "0x141F648", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x141F654", Offset = "0x141F654", VA = "0x141F654")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x141F700", Offset = "0x141F700", VA = "0x141F700", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001800")]
		[Address(RVA = "0x141F70C", Offset = "0x141F70C", VA = "0x141F70C")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x141F7B8", Offset = "0x141F7B8", VA = "0x141F7B8", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001802")]
		[Address(RVA = "0x141F7C4", Offset = "0x141F7C4", VA = "0x141F7C4")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x141F850", Offset = "0x141F850", VA = "0x141F850", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001804")]
		[Address(RVA = "0x141F874", Offset = "0x141F874", VA = "0x141F874")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x141F8F4", Offset = "0x141F8F4", VA = "0x141F8F4", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001806")]
		[Address(RVA = "0x141F8FC", Offset = "0x141F8FC", VA = "0x141F8FC")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x141F9A4", Offset = "0x141F9A4", VA = "0x141F9A4", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001808")]
		[Address(RVA = "0x141F9B0", Offset = "0x141F9B0", VA = "0x141F9B0")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x141FA58", Offset = "0x141FA58", VA = "0x141FA58", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600180A")]
		[Address(RVA = "0x141FA68", Offset = "0x141FA68", VA = "0x141FA68")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x141FAF8", Offset = "0x141FAF8", VA = "0x141FAF8", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x141E150", Offset = "0x141E150", VA = "0x141E150")]
		public UnityNativeInterface()
		{
		}
	}

	[Token(Token = "0x200036E")]
	public class WwisePluginInterface : PropagationInterface
	{
		[Token(Token = "0x400149F")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x17000277")]
		private IntPtr context
		{
			[Token(Token = "0x600180D")]
			[Address(RVA = "0x141FB04", Offset = "0x141FB04", VA = "0x141FB04")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x600180E")]
		[Address(RVA = "0x141DF98", Offset = "0x141DF98", VA = "0x141DF98")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x600180F")]
		[Address(RVA = "0x141FB68", Offset = "0x141FB68", VA = "0x141FB68")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x141FBF8", Offset = "0x141FBF8", VA = "0x141FBF8", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001811")]
		[Address(RVA = "0x141FC1C", Offset = "0x141FC1C", VA = "0x141FC1C")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6001812")]
		[Address(RVA = "0x141FCAC", Offset = "0x141FCAC", VA = "0x141FCAC", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001813")]
		[Address(RVA = "0x141FCD0", Offset = "0x141FCD0", VA = "0x141FCD0")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x141FD60", Offset = "0x141FD60", VA = "0x141FD60", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001815")]
		[Address(RVA = "0x141FD84", Offset = "0x141FD84", VA = "0x141FD84")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x141FE04", Offset = "0x141FE04", VA = "0x141FE04", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001817")]
		[Address(RVA = "0x141FE0C", Offset = "0x141FE0C", VA = "0x141FE0C")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6001818")]
		[Address(RVA = "0x141FF2C", Offset = "0x141FF2C", VA = "0x141FF2C", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001819")]
		[Address(RVA = "0x1420024", Offset = "0x1420024", VA = "0x1420024")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x14200BC", Offset = "0x14200BC", VA = "0x14200BC", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600181B")]
		[Address(RVA = "0x14200C8", Offset = "0x14200C8", VA = "0x14200C8")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x600181C")]
		[Address(RVA = "0x14201F4", Offset = "0x14201F4", VA = "0x14201F4", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600181D")]
		[Address(RVA = "0x1420200", Offset = "0x1420200", VA = "0x1420200")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x14202AC", Offset = "0x14202AC", VA = "0x14202AC", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600181F")]
		[Address(RVA = "0x14202B8", Offset = "0x14202B8", VA = "0x14202B8")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x1420364", Offset = "0x1420364", VA = "0x1420364", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001821")]
		[Address(RVA = "0x1420370", Offset = "0x1420370", VA = "0x1420370")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x142041C", Offset = "0x142041C", VA = "0x142041C", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001823")]
		[Address(RVA = "0x1420428", Offset = "0x1420428", VA = "0x1420428")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x14204B8", Offset = "0x14204B8", VA = "0x14204B8", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001825")]
		[Address(RVA = "0x14204DC", Offset = "0x14204DC", VA = "0x14204DC")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001826")]
		[Address(RVA = "0x142055C", Offset = "0x142055C", VA = "0x142055C", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001827")]
		[Address(RVA = "0x1420564", Offset = "0x1420564", VA = "0x1420564")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001828")]
		[Address(RVA = "0x142060C", Offset = "0x142060C", VA = "0x142060C", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001829")]
		[Address(RVA = "0x1420618", Offset = "0x1420618", VA = "0x1420618")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x14206C0", Offset = "0x14206C0", VA = "0x14206C0", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600182B")]
		[Address(RVA = "0x14206D0", Offset = "0x14206D0", VA = "0x14206D0")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x1420760", Offset = "0x1420760", VA = "0x1420760", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x141E028", Offset = "0x141E028", VA = "0x141E028")]
		public WwisePluginInterface()
		{
		}
	}

	[Token(Token = "0x200036F")]
	public class FMODPluginInterface : PropagationInterface
	{
		[Token(Token = "0x40014A1")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x17000278")]
		private IntPtr context
		{
			[Token(Token = "0x600182E")]
			[Address(RVA = "0x141E1AC", Offset = "0x141E1AC", VA = "0x141E1AC")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x600182F")]
		[Address(RVA = "0x141E074", Offset = "0x141E074", VA = "0x141E074")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6001830")]
		[Address(RVA = "0x141E210", Offset = "0x141E210", VA = "0x141E210")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x141E2A0", Offset = "0x141E2A0", VA = "0x141E2A0", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001832")]
		[Address(RVA = "0x141E2C4", Offset = "0x141E2C4", VA = "0x141E2C4")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x141E354", Offset = "0x141E354", VA = "0x141E354", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001834")]
		[Address(RVA = "0x141E378", Offset = "0x141E378", VA = "0x141E378")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6001835")]
		[Address(RVA = "0x141E408", Offset = "0x141E408", VA = "0x141E408", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001836")]
		[Address(RVA = "0x141E42C", Offset = "0x141E42C", VA = "0x141E42C")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x141E4AC", Offset = "0x141E4AC", VA = "0x141E4AC", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001838")]
		[Address(RVA = "0x141E4B4", Offset = "0x141E4B4", VA = "0x141E4B4")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6001839")]
		[Address(RVA = "0x141E5D4", Offset = "0x141E5D4", VA = "0x141E5D4", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600183A")]
		[Address(RVA = "0x141E6CC", Offset = "0x141E6CC", VA = "0x141E6CC")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x600183B")]
		[Address(RVA = "0x141E764", Offset = "0x141E764", VA = "0x141E764", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600183C")]
		[Address(RVA = "0x141E770", Offset = "0x141E770", VA = "0x141E770")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x141E89C", Offset = "0x141E89C", VA = "0x141E89C", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600183E")]
		[Address(RVA = "0x141E8A8", Offset = "0x141E8A8", VA = "0x141E8A8")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x600183F")]
		[Address(RVA = "0x141E954", Offset = "0x141E954", VA = "0x141E954", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001840")]
		[Address(RVA = "0x141E960", Offset = "0x141E960", VA = "0x141E960")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001841")]
		[Address(RVA = "0x141EA0C", Offset = "0x141EA0C", VA = "0x141EA0C", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001842")]
		[Address(RVA = "0x141EA18", Offset = "0x141EA18", VA = "0x141EA18")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x141EAC4", Offset = "0x141EAC4", VA = "0x141EAC4", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001844")]
		[Address(RVA = "0x141EAD0", Offset = "0x141EAD0", VA = "0x141EAD0")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x141EB60", Offset = "0x141EB60", VA = "0x141EB60", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001846")]
		[Address(RVA = "0x141EB84", Offset = "0x141EB84", VA = "0x141EB84")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x141EC04", Offset = "0x141EC04", VA = "0x141EC04", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001848")]
		[Address(RVA = "0x141EC0C", Offset = "0x141EC0C", VA = "0x141EC0C")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x141ECB4", Offset = "0x141ECB4", VA = "0x141ECB4", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600184A")]
		[Address(RVA = "0x141ECC0", Offset = "0x141ECC0", VA = "0x141ECC0")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x141ED68", Offset = "0x141ED68", VA = "0x141ED68", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600184C")]
		[Address(RVA = "0x141ED78", Offset = "0x141ED78", VA = "0x141ED78")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x141EE08", Offset = "0x141EE08", VA = "0x141EE08", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0x141E104", Offset = "0x141E104", VA = "0x141E104")]
		public FMODPluginInterface()
		{
		}
	}

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropagationInterface CachedInterface;

	[Token(Token = "0x17000082")]
	public static PropagationInterface Interface
	{
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x141DD00", Offset = "0x141DD00", VA = "0x141DD00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x141DD70", Offset = "0x141DD70", VA = "0x141DD70")]
	private static PropagationInterface FindInterface()
	{
		return null;
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x141E19C", Offset = "0x141E19C", VA = "0x141E19C")]
	public ONSPPropagation()
	{
	}
}
[Token(Token = "0x2000149")]
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	[Token(Token = "0x2000370")]
	public enum Preset
	{
		[Token(Token = "0x40014A4")]
		Custom,
		[Token(Token = "0x40014A5")]
		AcousticTile,
		[Token(Token = "0x40014A6")]
		Brick,
		[Token(Token = "0x40014A7")]
		BrickPainted,
		[Token(Token = "0x40014A8")]
		Carpet,
		[Token(Token = "0x40014A9")]
		CarpetHeavy,
		[Token(Token = "0x40014AA")]
		CarpetHeavyPadded,
		[Token(Token = "0x40014AB")]
		CeramicTile,
		[Token(Token = "0x40014AC")]
		Concrete,
		[Token(Token = "0x40014AD")]
		ConcreteRough,
		[Token(Token = "0x40014AE")]
		ConcreteBlock,
		[Token(Token = "0x40014AF")]
		ConcreteBlockPainted,
		[Token(Token = "0x40014B0")]
		Curtain,
		[Token(Token = "0x40014B1")]
		Foliage,
		[Token(Token = "0x40014B2")]
		Glass,
		[Token(Token = "0x40014B3")]
		GlassHeavy,
		[Token(Token = "0x40014B4")]
		Grass,
		[Token(Token = "0x40014B5")]
		Gravel,
		[Token(Token = "0x40014B6")]
		GypsumBoard,
		[Token(Token = "0x40014B7")]
		PlasterOnBrick,
		[Token(Token = "0x40014B8")]
		PlasterOnConcreteBlock,
		[Token(Token = "0x40014B9")]
		Soil,
		[Token(Token = "0x40014BA")]
		SoundProof,
		[Token(Token = "0x40014BB")]
		Snow,
		[Token(Token = "0x40014BC")]
		Steel,
		[Token(Token = "0x40014BD")]
		Water,
		[Token(Token = "0x40014BE")]
		WoodThin,
		[Token(Token = "0x40014BF")]
		WoodThick,
		[Token(Token = "0x40014C0")]
		WoodFloor,
		[Token(Token = "0x40014C1")]
		WoodOnConcrete
	}

	[Serializable]
	[Token(Token = "0x2000371")]
	public sealed class Point
	{
		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float frequency;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float data;

		[Token(Token = "0x600184F")]
		[Address(RVA = "0x142BCA8", Offset = "0x142BCA8", VA = "0x142BCA8")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x142BDF0", Offset = "0x142BDF0", VA = "0x142BDF0")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x142BE60", Offset = "0x142BE60", VA = "0x142BE60")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[Token(Token = "0x2000372")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x7EE3B4", Offset = "0x7EE3B4")]
	public sealed class Spectrum
	{
		[Serializable]
		[Token(Token = "0x2000474")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEBBC", Offset = "0x7EEBBC")]
		private sealed class <>c
		{
			[Token(Token = "0x40018F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40018F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Point, float> <>9__3_0;

			[Token(Token = "0x40018F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Point, float> <>9__3_1;

			[Token(Token = "0x6001CB6")]
			[Address(RVA = "0x142C2B8", Offset = "0x142C2B8", VA = "0x142C2B8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001CB7")]
			[Address(RVA = "0x142C2C0", Offset = "0x142C2C0", VA = "0x142C2C0")]
			internal float <get_Item>b__3_0(Point p)
			{
				return default(float);
			}

			[Token(Token = "0x6001CB8")]
			[Address(RVA = "0x142C2D8", Offset = "0x142C2D8", VA = "0x142C2D8")]
			internal float <get_Item>b__3_1(Point p)
			{
				return default(float);
			}
		}

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int selection;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Point> points;

		[Token(Token = "0x17000279")]
		public float Item
		{
			[Token(Token = "0x6001852")]
			[Address(RVA = "0x142BE98", Offset = "0x142BE98", VA = "0x142BE98")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x142BD78", Offset = "0x142BD78", VA = "0x142BD78")]
		public Spectrum()
		{
		}
	}

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr materialHandle;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F14C8", Offset = "0x7F14C8")]
	public Spectrum absorption;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F1500", Offset = "0x7F1500")]
	public Spectrum transmission;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F1538", Offset = "0x7F1538")]
	public Spectrum scattering;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Preset preset_;

	[Token(Token = "0x17000083")]
	public Preset preset
	{
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x1423E78", Offset = "0x1423E78", VA = "0x1423E78")]
		get
		{
			return default(Preset);
		}
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x1423E80", Offset = "0x1423E80", VA = "0x1423E80")]
		set
		{
		}
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x1423EA8", Offset = "0x1423EA8", VA = "0x1423EA8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x14237F8", Offset = "0x14237F8", VA = "0x14237F8")]
	public void StartInternal()
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x142448C", Offset = "0x142448C", VA = "0x142448C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x1424490", Offset = "0x1424490", VA = "0x1424490")]
	public void DestroyInternal()
	{
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0x1423EAC", Offset = "0x1423EAC", VA = "0x1423EAC")]
	public void UploadMaterial()
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x1423094", Offset = "0x1423094", VA = "0x1423094")]
	public void SetPreset(Preset preset)
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0x1424574", Offset = "0x1424574", VA = "0x1424574")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x14249D4", Offset = "0x14249D4", VA = "0x14249D4")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x1424E34", Offset = "0x1424E34", VA = "0x1424E34")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x1425294", Offset = "0x1425294", VA = "0x1425294")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x14256F4", Offset = "0x14256F4", VA = "0x14256F4")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x1425B54", Offset = "0x1425B54", VA = "0x1425B54")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x1425FB4", Offset = "0x1425FB4", VA = "0x1425FB4")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x1426414", Offset = "0x1426414", VA = "0x1426414")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x1426874", Offset = "0x1426874", VA = "0x1426874")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x1426CD4", Offset = "0x1426CD4", VA = "0x1426CD4")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x1427134", Offset = "0x1427134", VA = "0x1427134")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x1427594", Offset = "0x1427594", VA = "0x1427594")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x14279F4", Offset = "0x14279F4", VA = "0x14279F4")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x1427E54", Offset = "0x1427E54", VA = "0x1427E54")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x14282AC", Offset = "0x14282AC", VA = "0x14282AC")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x142870C", Offset = "0x142870C", VA = "0x142870C")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x1428A48", Offset = "0x1428A48", VA = "0x1428A48")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x1428D84", Offset = "0x1428D84", VA = "0x1428D84")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x14291E4", Offset = "0x14291E4", VA = "0x14291E4")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x1429644", Offset = "0x1429644", VA = "0x1429644")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x1429AA4", Offset = "0x1429AA4", VA = "0x1429AA4")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x1429DE0", Offset = "0x1429DE0", VA = "0x1429DE0")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x1429F3C", Offset = "0x1429F3C", VA = "0x1429F3C")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x142A278", Offset = "0x142A278", VA = "0x142A278")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x142A6D0", Offset = "0x142A6D0", VA = "0x142A6D0")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x142AB30", Offset = "0x142AB30", VA = "0x142AB30")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x142AF88", Offset = "0x142AF88", VA = "0x142AF88")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x142B3E8", Offset = "0x142B3E8", VA = "0x142B3E8")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x142B848", Offset = "0x142B848", VA = "0x142B848")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x142BCE0", Offset = "0x142BCE0", VA = "0x142BCE0")]
	public ONSPPropagationMaterial()
	{
	}
}
[Token(Token = "0x200014A")]
public class ONSPPropagationSettings : MonoBehaviour
{
	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float quality;

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x142C2F0", Offset = "0x142C2F0", VA = "0x142C2F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x142C3C0", Offset = "0x142C3C0", VA = "0x142C3C0")]
	public ONSPPropagationSettings()
	{
	}
}
[Token(Token = "0x200014B")]
public sealed class ONSPSettings : ScriptableObject
{
	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public int voiceLimit;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPSettings instance;

	[Token(Token = "0x17000084")]
	public static ONSPSettings Instance
	{
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x141CEA0", Offset = "0x141CEA0", VA = "0x141CEA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x142C97C", Offset = "0x142C97C", VA = "0x142C97C")]
	public ONSPSettings()
	{
	}
}
[Token(Token = "0x200014C")]
public class ONSPVersion : MonoBehaviour
{
	[Token(Token = "0x4000778")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[PreserveSig]
	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x142C98C", Offset = "0x142C98C", VA = "0x142C98C")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x142CA24", Offset = "0x142CA24", VA = "0x142CA24")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x142CB30", Offset = "0x142CB30", VA = "0x142CB30")]
	private void Start()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x142CB34", Offset = "0x142CB34", VA = "0x142CB34")]
	private void Update()
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x142CB38", Offset = "0x142CB38", VA = "0x142CB38")]
	public ONSPVersion()
	{
	}
}
[Token(Token = "0x200014D")]
public class OculusSpatializerUnity : MonoBehaviour
{
	[Token(Token = "0x2000373")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float particleSize;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float particleOffset;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject room;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] dims;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] coefs;

	[Token(Token = "0x4000787")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] points;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] normals;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem sys;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x400078D")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xB92A28", Offset = "0xB92A28", VA = "0xB92A28")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xB92858", Offset = "0xB92858", VA = "0xB92858")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7FAA68", Offset = "0x7FAA68")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xB92A60", Offset = "0xB92A60", VA = "0xB92A60")]
	private void Start()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xB92B94", Offset = "0xB92B94", VA = "0xB92B94")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xB92C88", Offset = "0xB92C88", VA = "0xB92C88")]
	private void Update()
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xB93640", Offset = "0xB93640", VA = "0xB93640")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xB92B00", Offset = "0xB92B00", VA = "0xB92B00")]
	private static extern int OSP_Unity_AssignRaycastCallback(AudioRaycastCallback callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xB92BF8", Offset = "0xB92BF8", VA = "0xB92BF8")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xB933A8", Offset = "0xB933A8", VA = "0xB933A8")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xB93428", Offset = "0xB93428", VA = "0xB93428")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xB934B0", Offset = "0xB934B0", VA = "0xB934B0")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xB93538", Offset = "0xB93538", VA = "0xB93538")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xB935B8", Offset = "0xB935B8", VA = "0xB935B8")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xB94478", Offset = "0xB94478", VA = "0xB94478")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xB94520", Offset = "0xB94520", VA = "0xB94520")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xB945C8", Offset = "0xB945C8", VA = "0xB945C8")]
	public OculusSpatializerUnity()
	{
	}
}
[Token(Token = "0x200014E")]
public struct ReflectionSnapshot
{
	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float fadeTime;
}
[Token(Token = "0x200014F")]
public class ONSPReflectionZone : MonoBehaviour
{
	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ReflectionSnapshot currentSnapshot;

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x142C3D0", Offset = "0x142C3D0", VA = "0x142C3D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x142C3D4", Offset = "0x142C3D4", VA = "0x142C3D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0x142C3D8", Offset = "0x142C3D8", VA = "0x142C3D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0x142C540", Offset = "0x142C540", VA = "0x142C540")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0x142C424", Offset = "0x142C424", VA = "0x142C424")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0x142C4B4", Offset = "0x142C4B4", VA = "0x142C4B4")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0x142C58C", Offset = "0x142C58C", VA = "0x142C58C")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0x142C624", Offset = "0x142C624", VA = "0x142C624")]
	private void SetReflectionValues()
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0x142C78C", Offset = "0x142C78C", VA = "0x142C78C")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0x142C8F4", Offset = "0x142C8F4", VA = "0x142C8F4")]
	public ONSPReflectionZone()
	{
	}
}
[Serializable]
[Token(Token = "0x2000150")]
public class SceneReference : ISerializationCallbackReceiver
{
	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private string scenePath;

	[Token(Token = "0x17000085")]
	public string ScenePath
	{
		[Token(Token = "0x600070B")]
		[Address(RVA = "0xD58AE4", Offset = "0xD58AE4", VA = "0xD58AE4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600070C")]
		[Address(RVA = "0xD58AEC", Offset = "0xD58AEC", VA = "0xD58AEC")]
		set
		{
		}
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xD58AF4", Offset = "0xD58AF4", VA = "0xD58AF4")]
	public static implicit operator string(SceneReference sceneReference)
	{
		return null;
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xD58B0C", Offset = "0xD58B0C", VA = "0xD58B0C", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xD58B10", Offset = "0xD58B10", VA = "0xD58B10", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xD58B14", Offset = "0xD58B14", VA = "0xD58B14")]
	public SceneReference()
	{
	}
}
[Token(Token = "0x2000151")]
public class SceneReferenceTest : MonoBehaviour
{
	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneReference exampleNull;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SceneReference exampleMissing;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SceneReference exampleDisabled;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SceneReference exampleEnabled;

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xD58B74", Offset = "0xD58B74", VA = "0xD58B74")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xD58BAC", Offset = "0xD58BAC", VA = "0xD58BAC")]
	public void DisplayLevel(SceneReference scene)
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xD58DA8", Offset = "0xD58DA8", VA = "0xD58DA8")]
	public SceneReferenceTest()
	{
	}
}
[Token(Token = "0x2000152")]
public class CoroutineSlave : MonoBehaviour
{
	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CoroutineSlave _instance;

	[Token(Token = "0x17000086")]
	public static CoroutineSlave Instance
	{
		[Token(Token = "0x6000714")]
		[Address(RVA = "0xDDDE2C", Offset = "0xDDDE2C", VA = "0xDDDE2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xDDDF4C", Offset = "0xDDDF4C", VA = "0xDDDF4C")]
	public CoroutineSlave()
	{
	}
}
[Token(Token = "0x2000153")]
public class SceneController : MonoBehaviour
{
	[Token(Token = "0x2000374")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE3EC", Offset = "0x7EE3EC")]
	private sealed class <LoadSceneAsycAdditive>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string path;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x1700027A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600185B")]
			[Address(RVA = "0xD58638", Offset = "0xD58638", VA = "0xD58638", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600185D")]
			[Address(RVA = "0xD586A0", Offset = "0xD586A0", VA = "0xD586A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xD57CC8", Offset = "0xD57CC8", VA = "0xD57CC8")]
		[DebuggerHidden]
		public <LoadSceneAsycAdditive>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xD58454", Offset = "0xD58454", VA = "0xD58454", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xD58458", Offset = "0xD58458", VA = "0xD58458", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xD58640", Offset = "0xD58640", VA = "0xD58640", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000375")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE3FC", Offset = "0x7EE3FC")]
	private sealed class <UnloadSceneAsycAdditive>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string path;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x1700027C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001861")]
			[Address(RVA = "0xD589A0", Offset = "0xD589A0", VA = "0xD589A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001863")]
			[Address(RVA = "0xD58A08", Offset = "0xD58A08", VA = "0xD58A08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xD57F14", Offset = "0xD57F14", VA = "0xD57F14")]
		[DebuggerHidden]
		public <UnloadSceneAsycAdditive>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xD58824", Offset = "0xD58824", VA = "0xD58824", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xD58828", Offset = "0xD58828", VA = "0xD58828", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xD589A8", Offset = "0xD589A8", VA = "0xD589A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000376")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE40C", Offset = "0x7EE40C")]
	private sealed class <SetSceneContentActiveWhenFinishedLoading>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string path;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isActive;

		[Token(Token = "0x1700027E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001867")]
			[Address(RVA = "0xD587B4", Offset = "0xD587B4", VA = "0xD587B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001869")]
			[Address(RVA = "0xD5881C", Offset = "0xD5881C", VA = "0xD5881C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xD58208", Offset = "0xD58208", VA = "0xD58208")]
		[DebuggerHidden]
		public <SetSceneContentActiveWhenFinishedLoading>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xD586A8", Offset = "0xD586A8", VA = "0xD586A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xD586AC", Offset = "0xD586AC", VA = "0xD586AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xD587BC", Offset = "0xD587BC", VA = "0xD587BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneReference scene;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool _sceneEnabled;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, SceneController> sceneDictionary;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<string> scenesBeingLoaded;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static List<string> scenesBeingUnloaded;

	[Token(Token = "0x17000087")]
	public bool SceneEnabled
	{
		[Token(Token = "0x6000716")]
		[Address(RVA = "0xD57674", Offset = "0xD57674", VA = "0xD57674")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000717")]
		[Address(RVA = "0xD5767C", Offset = "0xD5767C", VA = "0xD5767C")]
		set
		{
		}
	}

	[Token(Token = "0x17000088")]
	public static List<string> ScenesBeingLoaded
	{
		[Token(Token = "0x600071B")]
		[Address(RVA = "0xD579D8", Offset = "0xD579D8", VA = "0xD579D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000089")]
	public static List<string> ScenesBeingUnloaded
	{
		[Token(Token = "0x600071C")]
		[Address(RVA = "0xD57A40", Offset = "0xD57A40", VA = "0xD57A40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xD576FC", Offset = "0xD576FC", VA = "0xD576FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xD578F8", Offset = "0xD578F8", VA = "0xD578F8")]
	private void OnDestory()
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xD576BC", Offset = "0xD576BC", VA = "0xD576BC")]
	private void OnSceneEnabledChanged(bool newValue)
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xD57AA8", Offset = "0xD57AA8", VA = "0xD57AA8")]
	public static void LoadScene(string path)
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xD57C58", Offset = "0xD57C58", VA = "0xD57C58")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FAACC", Offset = "0x7FAACC")]
	private static IEnumerator LoadSceneAsycAdditive(string path)
	{
		return null;
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xD57CF4", Offset = "0xD57CF4", VA = "0xD57CF4")]
	public static void UnloadScene(string path)
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xD57EA4", Offset = "0xD57EA4", VA = "0xD57EA4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FAB30", Offset = "0x7FAB30")]
	private static IEnumerator UnloadSceneAsycAdditive(string path)
	{
		return null;
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xD57F40", Offset = "0xD57F40", VA = "0xD57F40")]
	public static void SetSceneContentActive(string path, bool isActive)
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xD58184", Offset = "0xD58184", VA = "0xD58184")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FAB94", Offset = "0x7FAB94")]
	private static IEnumerator SetSceneContentActiveWhenFinishedLoading(string path, bool isActive)
	{
		return null;
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xD58234", Offset = "0xD58234", VA = "0xD58234")]
	public static bool IsSceneLoaded(string path)
	{
		return default(bool);
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xD58380", Offset = "0xD58380", VA = "0xD58380")]
	public SceneController()
	{
	}
}
[Token(Token = "0x2000154")]
public class SceneLoadTest : MonoBehaviour
{
	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneReference sceneToLoad;

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xD58A10", Offset = "0xD58A10", VA = "0xD58A10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xD58AD8", Offset = "0xD58AD8", VA = "0xD58AD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xD58ADC", Offset = "0xD58ADC", VA = "0xD58ADC")]
	public SceneLoadTest()
	{
	}
}
[Token(Token = "0x2000155")]
public class SceneStateManager : MonoBehaviour
{
	[Token(Token = "0x2000377")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE41C", Offset = "0x7EE41C")]
	private sealed class <SetupSequence>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneStateManager <>4__this;

		[Token(Token = "0x17000280")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600186D")]
			[Address(RVA = "0xD590C0", Offset = "0xD590C0", VA = "0xD590C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000281")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600186F")]
			[Address(RVA = "0xD59128", Offset = "0xD59128", VA = "0xD59128", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xD58E4C", Offset = "0xD58E4C", VA = "0xD58E4C")]
		[DebuggerHidden]
		public <SetupSequence>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xD58E80", Offset = "0xD58E80", VA = "0xD58E80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xD58E84", Offset = "0xD58E84", VA = "0xD58E84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xD590C8", Offset = "0xD590C8", VA = "0xD590C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SceneReference cityScene;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SceneReference hmdSetupScene;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SceneReference inputSetupScene;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SceneReference nextScene;

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xD58DB0", Offset = "0xD58DB0", VA = "0xD58DB0")]
	private void Start()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xD58DDC", Offset = "0xD58DDC", VA = "0xD58DDC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FABF8", Offset = "0x7FABF8")]
	private IEnumerator SetupSequence()
	{
		return null;
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xD58E78", Offset = "0xD58E78", VA = "0xD58E78")]
	public SceneStateManager()
	{
	}
}
[Token(Token = "0x2000156")]
public static class StringExtensions
{
	[Token(Token = "0x600072C")]
	[Address(RVA = "0xC2BC18", Offset = "0xC2BC18", VA = "0xC2BC18")]
	public static string Localize(this string key)
	{
		return null;
	}
}
[Token(Token = "0x2000157")]
public class SpiderForTheSlice : MonoBehaviour
{
	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform spawnPoint;

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xC28AE0", Offset = "0xC28AE0", VA = "0xC28AE0")]
	private void Start()
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xC28AE4", Offset = "0xC28AE4", VA = "0xC28AE4")]
	public void Update()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xC28C00", Offset = "0xC28C00", VA = "0xC28C00")]
	public SpiderForTheSlice()
	{
	}
}
[Token(Token = "0x2000158")]
public class GamemodeSetup : MonoBehaviour
{
	[Token(Token = "0x6000730")]
	[Address(RVA = "0xAA2974", Offset = "0xAA2974", VA = "0xAA2974")]
	public void SetGameModeToStanding()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xAA2994", Offset = "0xAA2994", VA = "0xAA2994")]
	public void SetGameModeToSitting()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xAA29B4", Offset = "0xAA29B4", VA = "0xAA29B4")]
	public void ConfirmSetting()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xAA2A38", Offset = "0xAA2A38", VA = "0xAA2A38")]
	public GamemodeSetup()
	{
	}
}
[Token(Token = "0x2000159")]
public class GameModeManager
{
	[Token(Token = "0x2000378")]
	public delegate void currentGameModeChanged(GameMode newMode);

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameModeManager _instance;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameMode _currentGameMode;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public currentGameModeChanged OnCurrentGameModeChanged;

	[Token(Token = "0x1700008A")]
	public static GameModeManager Instance
	{
		[Token(Token = "0x6000734")]
		[Address(RVA = "0xAA24D4", Offset = "0xAA24D4", VA = "0xAA24D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008B")]
	public GameMode CurrentGameMode
	{
		[Token(Token = "0x6000735")]
		[Address(RVA = "0xAA2580", Offset = "0xAA2580", VA = "0xAA2580")]
		get
		{
			return default(GameMode);
		}
		[Token(Token = "0x6000736")]
		[Address(RVA = "0xAA2588", Offset = "0xAA2588", VA = "0xAA2588")]
		set
		{
		}
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xAA2558", Offset = "0xAA2558", VA = "0xAA2558")]
	public GameModeManager()
	{
	}
}
[Token(Token = "0x200015A")]
public enum GameMode
{
	[Token(Token = "0x40007A9")]
	undefined,
	[Token(Token = "0x40007AA")]
	standing,
	[Token(Token = "0x40007AB")]
	sitting
}
[Token(Token = "0x200015B")]
public class PSVRCameraRig : MonoBehaviour
{
	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PSVRCameraRig _instance;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static PSVRCameraRig Instance;

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xB7C184", Offset = "0xB7C184", VA = "0xB7C184")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xB7C2B0", Offset = "0xB7C2B0", VA = "0xB7C2B0")]
	public void SetActive(bool onOff)
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xB7C2B4", Offset = "0xB7C2B4", VA = "0xB7C2B4")]
	public void SetPosition(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xB7C354", Offset = "0xB7C354", VA = "0xB7C354")]
	public PSVRCameraRig()
	{
	}
}
[Token(Token = "0x200015C")]
public class PSVRCameraRigTigger : MonoBehaviour
{
	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public State myState;

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xB7C35C", Offset = "0xB7C35C", VA = "0xB7C35C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xB7C4A8", Offset = "0xB7C4A8", VA = "0xB7C4A8")]
	private void OnStateEnable()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xB7C5B4", Offset = "0xB7C5B4", VA = "0xB7C5B4")]
	private void OnStateDisable()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xB7C640", Offset = "0xB7C640", VA = "0xB7C640")]
	public PSVRCameraRigTigger()
	{
	}
}
[Token(Token = "0x200015D")]
public class StateController : MonoBehaviour
{
	[Token(Token = "0x2000379")]
	public delegate void StateEnabledChanged();

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public State stateID;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool _stateEnabled;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StateEnabledChanged OnStateEnabled;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StateEnabledChanged OnStateDisabled;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<State, StateController> stateDictionary;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static StateController _currentFocusState;

	[Token(Token = "0x1700008C")]
	public bool StateEnabled
	{
		[Token(Token = "0x6000740")]
		[Address(RVA = "0xC2A268", Offset = "0xC2A268", VA = "0xC2A268")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000741")]
		[Address(RVA = "0xC2A270", Offset = "0xC2A270", VA = "0xC2A270")]
		set
		{
		}
	}

	[Token(Token = "0x1700008D")]
	public static StateController CurrentFocusState
	{
		[Token(Token = "0x6000744")]
		[Address(RVA = "0xC2A684", Offset = "0xC2A684", VA = "0xC2A684")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000745")]
		[Address(RVA = "0xC2A6EC", Offset = "0xC2A6EC", VA = "0xC2A6EC")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xC2A318", Offset = "0xC2A318", VA = "0xC2A318")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xC2A2B0", Offset = "0xC2A2B0", VA = "0xC2A2B0")]
	private void OnStateEnabledChanged(bool newValue)
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xC2A758", Offset = "0xC2A758", VA = "0xC2A758")]
	public static void LoadState(State id)
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xC2A9A0", Offset = "0xC2A9A0", VA = "0xC2A9A0")]
	public static void LoadState(State id, bool setFocus)
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xC2AC10", Offset = "0xC2AC10", VA = "0xC2AC10")]
	public static void UnloadState(State id)
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xC2AF2C", Offset = "0xC2AF2C", VA = "0xC2AF2C")]
	public static bool IsStateLoaded(State id)
	{
		return default(bool);
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xC2B074", Offset = "0xC2B074", VA = "0xC2B074")]
	public static StateEnabledChanged GetOnStateEnabled(State id)
	{
		return null;
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xC2B1B4", Offset = "0xC2B1B4", VA = "0xC2B1B4")]
	public static StateEnabledChanged GetOnStateDisabled(State id)
	{
		return null;
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xC2B2F4", Offset = "0xC2B2F4", VA = "0xC2B2F4")]
	public static StateController GetState(State id)
	{
		return null;
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xC2B378", Offset = "0xC2B378", VA = "0xC2B378")]
	public StateController()
	{
	}
}
[Token(Token = "0x200015E")]
public enum State
{
	[Token(Token = "0x40007B6")]
	Bootstrap,
	[Token(Token = "0x40007B7")]
	HMDErrorHandling,
	[Token(Token = "0x40007B8")]
	InputMethodSelection,
	[Token(Token = "0x40007B9")]
	PlankModeSelection,
	[Token(Token = "0x40007BA")]
	PlayerHeightSetting,
	[Token(Token = "0x40007BB")]
	PlankSizeSetting,
	[Token(Token = "0x40007BC")]
	City
}
[Token(Token = "0x200015F")]
public class StateManager : MonoBehaviour
{
	[Token(Token = "0x200037A")]
	public enum ErrorState
	{
		[Token(Token = "0x40014D6")]
		none = 0,
		[Token(Token = "0x40014D7")]
		hmd = 2,
		[Token(Token = "0x40014D8")]
		input = 4,
		[Token(Token = "0x40014D9")]
		hmdAndInput = 6
	}

	[Token(Token = "0x200037B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE42C", Offset = "0x7EE42C")]
	private sealed class <Initialize>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StateManager <>4__this;

		[Token(Token = "0x17000282")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600187B")]
			[Address(RVA = "0xC2BA08", Offset = "0xC2BA08", VA = "0xC2BA08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000283")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600187D")]
			[Address(RVA = "0xC2BA70", Offset = "0xC2BA70", VA = "0xC2BA70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xC2B7B0", Offset = "0xC2B7B0", VA = "0xC2B7B0")]
		[DebuggerHidden]
		public <Initialize>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xC2B820", Offset = "0xC2B820", VA = "0xC2B820", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xC2B824", Offset = "0xC2B824", VA = "0xC2B824", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xC2BA10", Offset = "0xC2BA10", VA = "0xC2BA10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200037C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE43C", Offset = "0x7EE43C")]
	private sealed class <MaintainCurrentGoalScene>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StateManager <>4__this;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private State <loadedState>5__2;

		[Token(Token = "0x17000284")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001881")]
			[Address(RVA = "0xC2BBA8", Offset = "0xC2BBA8", VA = "0xC2BBA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000285")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001883")]
			[Address(RVA = "0xC2BC10", Offset = "0xC2BC10", VA = "0xC2BC10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xC2B7DC", Offset = "0xC2B7DC", VA = "0xC2B7DC")]
		[DebuggerHidden]
		public <MaintainCurrentGoalScene>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xC2BA78", Offset = "0xC2BA78", VA = "0xC2BA78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xC2BA7C", Offset = "0xC2BA7C", VA = "0xC2BA7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xC2BBB0", Offset = "0xC2BBB0", VA = "0xC2BBB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static StateManager Instance;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public State CurrentGoalState;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isInitiazing;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ErrorState _currentErrorState;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public State preErrorState;

	[Token(Token = "0x1700008E")]
	public ErrorState CurrentErrorState
	{
		[Token(Token = "0x600074F")]
		[Address(RVA = "0xC2B43C", Offset = "0xC2B43C", VA = "0xC2B43C")]
		get
		{
			return default(ErrorState);
		}
		[Token(Token = "0x6000750")]
		[Address(RVA = "0xC2B444", Offset = "0xC2B444", VA = "0xC2B444")]
		set
		{
		}
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xC2B4D0", Offset = "0xC2B4D0", VA = "0xC2B4D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xC2B624", Offset = "0xC2B624", VA = "0xC2B624")]
	private void Start()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xC2B740", Offset = "0xC2B740", VA = "0xC2B740")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FAC6C", Offset = "0x7FAC6C")]
	private IEnumerator Initialize()
	{
		return null;
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xC2B480", Offset = "0xC2B480", VA = "0xC2B480")]
	private void CheckForNewErrorState(ErrorState value)
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xC2B6D0", Offset = "0xC2B6D0", VA = "0xC2B6D0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FACD0", Offset = "0x7FACD0")]
	private IEnumerator MaintainCurrentGoalScene()
	{
		return null;
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0xC2B808", Offset = "0xC2B808", VA = "0xC2B808")]
	public StateManager()
	{
	}
}
namespace SmartLocalization
{
	[Token(Token = "0x2000160")]
	public class LoadAllLanguages : MonoBehaviour
	{
		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<string> currentLanguageKeys;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SmartCultureInfo> availableLanguages;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LanguageManager languageManager;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 valuesScrollPosition;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 languagesScrollPosition;

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xD5EBD0", Offset = "0xD5EBD0", VA = "0xD5EBD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xD5ED90", Offset = "0xD5ED90", VA = "0xD5ED90")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xD5EE80", Offset = "0xD5EE80", VA = "0xD5EE80")]
		private void OnLanguageChanged(LanguageManager languageManager)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0xD5EEB4", Offset = "0xD5EEB4", VA = "0xD5EEB4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xD5F6AC", Offset = "0xD5F6AC", VA = "0xD5F6AC")]
		public LoadAllLanguages()
		{
		}
	}
	[Token(Token = "0x2000161")]
	internal static class ApplicationExtensions
	{
		[Token(Token = "0x600075C")]
		[Address(RVA = "0xD5A774", Offset = "0xD5A774", VA = "0xD5A774")]
		internal static string GetSystemLanguage()
		{
			return null;
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xD5A78C", Offset = "0xD5A78C", VA = "0xD5A78C")]
		internal static string GetStringValueOfSystemLanguage(SystemLanguage systemLanguage)
		{
			return null;
		}
	}
	[Token(Token = "0x2000162")]
	internal interface ILocalizedAssetLoader
	{
		[Token(Token = "0x600075E")]
		T LoadAsset<T>(string assetKey, string languageCode) where T : UnityEngine.Object;
	}
	[Token(Token = "0x2000163")]
	internal class LanguageDataHandler
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SortedDictionary<string, LocalizedObject> loadedValuesDictionary;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool verboseLogging;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SmartCultureInfo loadedCultureInfo;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ILocalizedAssetLoader assetLoader;

		[Token(Token = "0x1700008F")]
		internal SmartCultureInfo LoadedCulture
		{
			[Token(Token = "0x600075F")]
			[Address(RVA = "0xD5B23C", Offset = "0xD5B23C", VA = "0xD5B23C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000760")]
			[Address(RVA = "0xD5B244", Offset = "0xD5B244", VA = "0xD5B244")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		internal bool VerboseLogging
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0xD5B24C", Offset = "0xD5B24C", VA = "0xD5B24C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000762")]
			[Address(RVA = "0xD5B254", Offset = "0xD5B254", VA = "0xD5B254")]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		internal SortedDictionary<string, LocalizedObject> LoadedValuesDictionary
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0xD5B260", Offset = "0xD5B260", VA = "0xD5B260")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000764")]
			[Address(RVA = "0xD5B268", Offset = "0xD5B268", VA = "0xD5B268")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		internal ILocalizedAssetLoader AssetLoader
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0xD5B270", Offset = "0xD5B270", VA = "0xD5B270")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000766")]
			[Address(RVA = "0xD5B2E4", Offset = "0xD5B2E4", VA = "0xD5B2E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xD5B2EC", Offset = "0xD5B2EC", VA = "0xD5B2EC")]
		internal LanguageDataHandler()
		{
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xD5B360", Offset = "0xD5B360", VA = "0xD5B360")]
		internal bool Load(string resxData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xD5B4A4", Offset = "0xD5B4A4", VA = "0xD5B4A4")]
		internal bool Append(string resxData)
		{
			return default(bool);
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xD5B718", Offset = "0xD5B718", VA = "0xD5B718")]
		internal List<string> GetKeysWithinCategory(string category)
		{
			return null;
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xD5B8DC", Offset = "0xD5B8DC", VA = "0xD5B8DC")]
		internal List<string> GetAllKeys()
		{
			return null;
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xD5B96C", Offset = "0xD5B96C", VA = "0xD5B96C")]
		internal LocalizedObject GetLocalizedObject(string key)
		{
			return null;
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xD5B9E4", Offset = "0xD5B9E4", VA = "0xD5B9E4")]
		internal string GetTextValue(string key)
		{
			return null;
		}

		[Token(Token = "0x600076E")]
		internal T GetAsset<T>(string key) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xD5BAAC", Offset = "0xD5BAAC", VA = "0xD5BAAC")]
		internal bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xD5B420", Offset = "0xD5B420", VA = "0xD5B420")]
		private SortedDictionary<string, LocalizedObject> LoadLanguageDictionary(string resxData)
		{
			return null;
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xD5BDE4", Offset = "0xD5BDE4", VA = "0xD5BDE4")]
		private string CheckLanguageOverrideCode(LocalizedObject localizedObject)
		{
			return null;
		}
	}
	[Token(Token = "0x2000164")]
	public delegate void ChangeLanguageEventHandler(LanguageManager thisLanguageManager);
	[Token(Token = "0x2000165")]
	public class LanguageManager : MonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x200037D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE44C", Offset = "0x7EE44C")]
		private sealed class <>c__DisplayClass45_0
		{
			[Token(Token = "0x40014E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string englishName;

			[Token(Token = "0x6001884")]
			[Address(RVA = "0xD5D1AC", Offset = "0xD5D1AC", VA = "0xD5D1AC")]
			public <>c__DisplayClass45_0()
			{
			}

			[Token(Token = "0x6001885")]
			[Address(RVA = "0xD5DF18", Offset = "0xD5DF18", VA = "0xD5DF18")]
			internal bool <GetDeviceCultureIfSupported>b__0(SmartCultureInfo info)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200037E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE45C", Offset = "0x7EE45C")]
		private sealed class <>c__DisplayClass46_0
		{
			[Token(Token = "0x40014E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string languageCode;

			[Token(Token = "0x6001886")]
			[Address(RVA = "0xD5D1CC", Offset = "0xD5D1CC", VA = "0xD5D1CC")]
			public <>c__DisplayClass46_0()
			{
			}

			[Token(Token = "0x6001887")]
			[Address(RVA = "0xD5DF70", Offset = "0xD5DF70", VA = "0xD5DF70")]
			internal bool <IsCultureSupported>b__0(SmartCultureInfo info)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200037F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE46C", Offset = "0x7EE46C")]
		private sealed class <>c__DisplayClass48_0
		{
			[Token(Token = "0x40014E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string englishName;

			[Token(Token = "0x6001888")]
			[Address(RVA = "0xD5D300", Offset = "0xD5D300", VA = "0xD5D300")]
			public <>c__DisplayClass48_0()
			{
			}

			[Token(Token = "0x6001889")]
			[Address(RVA = "0xD5DF94", Offset = "0xD5DF94", VA = "0xD5DF94")]
			internal bool <IsLanguageSupportedEnglishName>b__0(SmartCultureInfo info)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000380")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE47C", Offset = "0x7EE47C")]
		private sealed class <>c__DisplayClass49_0
		{
			[Token(Token = "0x40014E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string languageCode;

			[Token(Token = "0x600188A")]
			[Address(RVA = "0xD5D308", Offset = "0xD5D308", VA = "0xD5D308")]
			public <>c__DisplayClass49_0()
			{
			}

			[Token(Token = "0x600188B")]
			[Address(RVA = "0xD5DFEC", Offset = "0xD5DFEC", VA = "0xD5DFEC")]
			internal bool <GetCultureInfo>b__0(SmartCultureInfo info)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LanguageManager instance;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool IsQuitting;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private static bool DontDestroyOnLoadToggle;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		private static bool DidSetDontDestroyOnLoad;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private List<string> serializedKeys;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private List<LocalizedObject> serializedValues;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private SmartCultureInfo serializedCulture;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ChangeLanguageEventHandler OnChangeLanguage;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string defaultLanguage;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SmartCultureInfoCollection availableLanguages;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LanguageDataHandler languageDataHandler;

		[Token(Token = "0x17000093")]
		public static LanguageManager Instance
		{
			[Token(Token = "0x6000776")]
			[Address(RVA = "0xD5ACD4", Offset = "0xD5ACD4", VA = "0xD5ACD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		public static bool HasInstance
		{
			[Token(Token = "0x6000778")]
			[Address(RVA = "0xD5B134", Offset = "0xD5B134", VA = "0xD5B134")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000095")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x80055C", Offset = "0x80055C")]
		public SortedDictionary<string, LocalizedObject> LanguageDatabase
		{
			[Token(Token = "0x600077B")]
			[Address(RVA = "0xD5C308", Offset = "0xD5C308", VA = "0xD5C308")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x800594", Offset = "0x800594")]
		public Dictionary<string, string> RawTextDatabase
		{
			[Token(Token = "0x600077C")]
			[Address(RVA = "0xD5C324", Offset = "0xD5C324", VA = "0xD5C324")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public int NumberOfSupportedLanguages
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0xD5C4A8", Offset = "0xD5C4A8", VA = "0xD5C4A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000098")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8005CC", Offset = "0x8005CC")]
		public string LoadedLanguage
		{
			[Token(Token = "0x600077E")]
			[Address(RVA = "0xD5C508", Offset = "0xD5C508", VA = "0xD5C508")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public SmartCultureInfo CurrentlyLoadedCulture
		{
			[Token(Token = "0x600077F")]
			[Address(RVA = "0xD5C2EC", Offset = "0xD5C2EC", VA = "0xD5C2EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public bool VerboseLogging
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xD5C530", Offset = "0xD5C530", VA = "0xD5C530")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000781")]
			[Address(RVA = "0xD5C54C", Offset = "0xD5C54C", VA = "0xD5C54C")]
			set
			{
			}
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xD5BE48", Offset = "0xD5BE48", VA = "0xD5BE48")]
		public static void SetDontDestroyOnLoad()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xD5BF78", Offset = "0xD5BF78", VA = "0xD5BF78", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xD5C0E0", Offset = "0xD5C0E0", VA = "0xD5C0E0", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xD5C56C", Offset = "0xD5C56C", VA = "0xD5C56C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xD5CA44", Offset = "0xD5CA44", VA = "0xD5CA44")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xD5CA4C", Offset = "0xD5CA4C", VA = "0xD5CA4C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xD5C8B4", Offset = "0xD5C8B4", VA = "0xD5C8B4")]
		private bool LoadAvailableCultures()
		{
			return default(bool);
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xD5CABC", Offset = "0xD5CABC", VA = "0xD5CABC")]
		public List<string> GetAllKeys()
		{
			return null;
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xD5CA2C", Offset = "0xD5CA2C", VA = "0xD5CA2C")]
		public void ChangeLanguage(SmartCultureInfo cultureInfo)
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xD5CAD4", Offset = "0xD5CAD4", VA = "0xD5CAD4")]
		public void ChangeLanguage(string languageCode)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xD5CE08", Offset = "0xD5CE08", VA = "0xD5CE08")]
		public void ChangeLanguageWithData(string languageDataInResX, string languageCode)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xD5CE44", Offset = "0xD5CE44", VA = "0xD5CE44")]
		public bool AppendLanguageWithTextData(string languageDataInResX)
		{
			return default(bool);
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xD5CCDC", Offset = "0xD5CCDC", VA = "0xD5CCDC")]
		private bool LoadLanguage(string languageData, string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xD5CF28", Offset = "0xD5CF28", VA = "0xD5CF28")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7FAD34", Offset = "0x7FAD34")]
		public bool IsLanguageSupported(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xD5D040", Offset = "0xD5D040", VA = "0xD5D040")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7FAD6C", Offset = "0x7FAD6C")]
		public bool IsLanguageSupported(SmartCultureInfo cultureInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xD5D058", Offset = "0xD5D058", VA = "0xD5D058")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7FADA4", Offset = "0x7FADA4")]
		public SmartCultureInfo GetSupportedSystemLanguage()
		{
			return null;
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xD5D144", Offset = "0xD5D144", VA = "0xD5D144")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7FADDC", Offset = "0x7FADDC")]
		public string GetSupportedSystemLanguageCode()
		{
			return null;
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xD5D05C", Offset = "0xD5D05C", VA = "0xD5D05C")]
		public SmartCultureInfo GetDeviceCultureIfSupported()
		{
			return null;
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xD5CF2C", Offset = "0xD5CF2C", VA = "0xD5CF2C")]
		public bool IsCultureSupported(string languageCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xD5D1D4", Offset = "0xD5D1D4", VA = "0xD5D1D4")]
		public bool IsCultureSupported(SmartCultureInfo cultureInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xD5D1EC", Offset = "0xD5D1EC", VA = "0xD5D1EC")]
		public bool IsLanguageSupportedEnglishName(string englishName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xD5CE5C", Offset = "0xD5CE5C", VA = "0xD5CE5C")]
		public SmartCultureInfo GetCultureInfo(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xD5D1B4", Offset = "0xD5D1B4", VA = "0xD5D1B4")]
		public string GetSystemLanguageEnglishName()
		{
			return null;
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xD5D310", Offset = "0xD5D310", VA = "0xD5D310")]
		public List<SmartCultureInfo> GetSupportedLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xD5D398", Offset = "0xD5D398", VA = "0xD5D398")]
		public List<string> GetKeysWithinCategory(string category)
		{
			return null;
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xD5B1CC", Offset = "0xD5B1CC", VA = "0xD5B1CC")]
		public string GetTextValue(string key)
		{
			return null;
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xD5D3B0", Offset = "0xD5D3B0", VA = "0xD5D3B0")]
		public string GetTextValue(string key, int count)
		{
			return null;
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xD5D588", Offset = "0xD5D588", VA = "0xD5D588")]
		public TextAsset GetTextAsset(string key, int count)
		{
			return null;
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xD5D690", Offset = "0xD5D690", VA = "0xD5D690")]
		public AudioClip GetAudioClip(string key, int count)
		{
			return null;
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xD5D798", Offset = "0xD5D798", VA = "0xD5D798")]
		public GameObject GetPrefab(string key, int count)
		{
			return null;
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xD5D8A0", Offset = "0xD5D8A0", VA = "0xD5D8A0")]
		public Texture GetTexture(string key, int count)
		{
			return null;
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xD5D9A8", Offset = "0xD5D9A8", VA = "0xD5D9A8")]
		public string GetTextValue(string key, int count, Func<int, int> pluralForm)
		{
			return null;
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xD5DAF0", Offset = "0xD5DAF0", VA = "0xD5DAF0")]
		public TextAsset GetTextAsset(string key, int count, Func<int, int> pluralForm)
		{
			return null;
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xD5DB84", Offset = "0xD5DB84", VA = "0xD5DB84")]
		public Font GetFont(string key, int count, Func<int, int> pluralForm)
		{
			return null;
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xD5DC80", Offset = "0xD5DC80", VA = "0xD5DC80")]
		public AudioClip GetAudioClip(string key, int count, Func<int, int> pluralForm)
		{
			return null;
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xD5DD14", Offset = "0xD5DD14", VA = "0xD5DD14")]
		public GameObject GetPrefab(string key, int count, Func<int, int> pluralForm)
		{
			return null;
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xD5DDA8", Offset = "0xD5DDA8", VA = "0xD5DDA8")]
		public Texture GetTexture(string key, int count, Func<int, int> pluralForm)
		{
			return null;
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xD5D628", Offset = "0xD5D628", VA = "0xD5D628")]
		public TextAsset GetTextAsset(string key)
		{
			return null;
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xD5DC18", Offset = "0xD5DC18", VA = "0xD5DC18")]
		public Font GetFont(string key)
		{
			return null;
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xD5D730", Offset = "0xD5D730", VA = "0xD5D730")]
		public AudioClip GetAudioClip(string key)
		{
			return null;
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xD5D838", Offset = "0xD5D838", VA = "0xD5D838")]
		public GameObject GetPrefab(string key)
		{
			return null;
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xD5D940", Offset = "0xD5D940", VA = "0xD5D940")]
		public Texture GetTexture(string key)
		{
			return null;
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xD5DE3C", Offset = "0xD5DE3C", VA = "0xD5DE3C")]
		public bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xD5DE64", Offset = "0xD5DE64", VA = "0xD5DE64")]
		private LocalizedObject GetLocalizedObject(string key)
		{
			return null;
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xD5DE7C", Offset = "0xD5DE7C", VA = "0xD5DE7C")]
		public LanguageManager()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xD5DEF4", Offset = "0xD5DEF4", VA = "0xD5DEF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FADEC", Offset = "0x7FADEC")]
		private bool <Awake>b__31_0(SmartCultureInfo info)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000166")]
	public static class LanguageParser
	{
		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string xmlHeader;

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xD5BAC8", Offset = "0xD5BAC8", VA = "0xD5BAC8")]
		public static SortedDictionary<string, LocalizedObject> LoadLanguage(string languageDataInResX)
		{
			return null;
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xD5E010", Offset = "0xD5E010", VA = "0xD5E010")]
		private static void ReadElements(XmlReader reader, SortedDictionary<string, LocalizedObject> loadedLanguageDictionary)
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xD5E100", Offset = "0xD5E100", VA = "0xD5E100")]
		private static void ReadData(XmlReader reader, SortedDictionary<string, LocalizedObject> loadedLanguageDictionary)
		{
		}
	}
	[Token(Token = "0x2000167")]
	public static class LanguageRuntimeData
	{
		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string AvailableCulturesFileName;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string rootLanguageName;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string AudioFileFolderName;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string TexturesFolderName;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static string PrefabsFolderName;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static string TextAssetsFolderName;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string FontsFolderName;

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xD5CC5C", Offset = "0xD5CC5C", VA = "0xD5CC5C")]
		public static string LanguageFilePath(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xD5E810", Offset = "0xD5E810", VA = "0xD5E810")]
		public static string AvailableCulturesFilePath()
		{
			return null;
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xD5E878", Offset = "0xD5E878", VA = "0xD5E878")]
		public static string AudioFilesFolderPath(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xD5E8F8", Offset = "0xD5E8F8", VA = "0xD5E8F8")]
		public static string TexturesFolderPath(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xD5E978", Offset = "0xD5E978", VA = "0xD5E978")]
		public static string TextAssetsFolderPath(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xD5E9F8", Offset = "0xD5E9F8", VA = "0xD5E9F8")]
		public static string FontsFolderPath(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xD5EA78", Offset = "0xD5EA78", VA = "0xD5EA78")]
		public static string PrefabsFolderPath(string languageCode)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000168")]
	[AttributeAttribute(Name = "XmlRootAttribute", RVA = "0x7ED550", Offset = "0x7ED550")]
	public class SmartCultureInfoCollection
	{
		[Token(Token = "0x2000381")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE48C", Offset = "0x7EE48C")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40014E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SmartCultureInfo cultureInfo;

			[Token(Token = "0x600188C")]
			[Address(RVA = "0xD655E0", Offset = "0xD655E0", VA = "0xD655E0")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x600188D")]
			[Address(RVA = "0xD6575C", Offset = "0xD6575C", VA = "0xD6575C")]
			internal bool <FindCulture>b__0(SmartCultureInfo c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000382")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE49C", Offset = "0x7EE49C")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x40014E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string languageCode;

			[Token(Token = "0x600188E")]
			[Address(RVA = "0xD656C8", Offset = "0xD656C8", VA = "0xD656C8")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x600188F")]
			[Address(RVA = "0xD65818", Offset = "0xD65818", VA = "0xD65818")]
			internal bool <FindCulture>b__0(SmartCultureInfo c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40007DE")]
		public const int LatestVersion = 4;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "XmlElementAttribute", RVA = "0x7F1688", Offset = "0x7F1688")]
		public int version;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "XmlArrayAttribute", RVA = "0x7F16C4", Offset = "0x7F16C4")]
		[AttributeAttribute(Name = "XmlArrayItemAttribute", RVA = "0x7F16C4", Offset = "0x7F16C4")]
		public List<SmartCultureInfo> cultureInfos;

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xD65100", Offset = "0xD65100", VA = "0xD65100")]
		public void RemoveCultureInfo(SmartCultureInfo cultureInfo)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xD651E0", Offset = "0xD651E0", VA = "0xD651E0")]
		public void AddCultureInfo(SmartCultureInfo cultureInfo)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xD5CAB8", Offset = "0xD5CAB8", VA = "0xD5CAB8")]
		public static SmartCultureInfoCollection Deserialize(TextAsset xmlFile)
		{
			return null;
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xD6550C", Offset = "0xD6550C", VA = "0xD6550C")]
		public SmartCultureInfo FindCulture(SmartCultureInfo cultureInfo)
		{
			return null;
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xD655E8", Offset = "0xD655E8", VA = "0xD655E8")]
		public SmartCultureInfo FindCulture(string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xD656D0", Offset = "0xD656D0", VA = "0xD656D0")]
		public bool IsCultureInCollection(SmartCultureInfo cultureInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xD656EC", Offset = "0xD656EC", VA = "0xD656EC")]
		public SmartCultureInfoCollection()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000169")]
	public class SmartCultureInfo
	{
		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string languageCode;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string englishName;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string nativeName;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isRightToLeft;

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xD64F58", Offset = "0xD64F58", VA = "0xD64F58")]
		public SmartCultureInfo()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xD64F60", Offset = "0xD64F60", VA = "0xD64F60")]
		public SmartCultureInfo(string languageCode, string englishName, string nativeName, bool isRightToLeft)
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xD64FB4", Offset = "0xD64FB4", VA = "0xD64FB4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200016A")]
	internal static class SmartCultureInfoCollectionDeserializer
	{
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xD6528C", Offset = "0xD6528C", VA = "0xD6528C")]
		public static SmartCultureInfoCollection Deserialize(TextAsset xmlFile)
		{
			return null;
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xD65870", Offset = "0xD65870", VA = "0xD65870")]
		private static void ReadElements(XmlReader reader, SmartCultureInfoCollection newCollection)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xD65940", Offset = "0xD65940", VA = "0xD65940")]
		private static void ReadData(XmlReader reader, SmartCultureInfoCollection newCollection)
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class LocalizedAudioSource : MonoBehaviour
	{
		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localizedKey;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip audioClip;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioSource audioSource;

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xD5F72C", Offset = "0xD5F72C", VA = "0xD5F72C")]
		private void Start()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xD5F8D8", Offset = "0xD5F8D8", VA = "0xD5F8D8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xD5F81C", Offset = "0xD5F81C", VA = "0xD5F81C")]
		private void OnChangeLanguage(LanguageManager languageManager)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xD5F9C8", Offset = "0xD5F9C8", VA = "0xD5F9C8")]
		public LocalizedAudioSource()
		{
		}
	}
	[Token(Token = "0x200016C")]
	public class LocalizedGUIText : MonoBehaviour
	{
		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localizedKey;

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xD5FA20", Offset = "0xD5FA20", VA = "0xD5FA20")]
		private void Start()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xD5FBA4", Offset = "0xD5FBA4", VA = "0xD5FBA4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xD5FAF4", Offset = "0xD5FAF4", VA = "0xD5FAF4")]
		private void OnChangeLanguage(LanguageManager languageManager)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xD5FC94", Offset = "0xD5FC94", VA = "0xD5FC94")]
		public LocalizedGUIText()
		{
		}
	}
	[Token(Token = "0x200016D")]
	public class LocalizedGUITexture : MonoBehaviour
	{
		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localizedKey;

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xD5FCEC", Offset = "0xD5FCEC", VA = "0xD5FCEC")]
		private void Start()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xD5FE74", Offset = "0xD5FE74", VA = "0xD5FE74")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xD5FDC0", Offset = "0xD5FDC0", VA = "0xD5FDC0")]
		private void OnChangeLanguage(LanguageManager languageManager)
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xD5FF64", Offset = "0xD5FF64", VA = "0xD5FF64")]
		public LocalizedGUITexture()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public enum LocalizedObjectType
	{
		[Token(Token = "0x40007EB")]
		STRING,
		[Token(Token = "0x40007EC")]
		GAME_OBJECT,
		[Token(Token = "0x40007ED")]
		AUDIO,
		[Token(Token = "0x40007EE")]
		TEXTURE,
		[Token(Token = "0x40007EF")]
		TEXT_ASSET,
		[Token(Token = "0x40007F0")]
		FONT,
		[Token(Token = "0x40007F1")]
		INVALID
	}
	[Serializable]
	[Token(Token = "0x200016F")]
	public class LocalizedObject
	{
		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string keyTypeIdentifier;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string endBracket;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private LocalizedObjectType objectType;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string textValue;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject thisGameObject;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip thisAudioClip;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Texture thisTexture;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextAsset thisTextAsset;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Font font;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool overrideLocalizedObject;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private string overrideObjectLanguageCode;

		[Token(Token = "0x1700009B")]
		public LocalizedObjectType ObjectType
		{
			[Token(Token = "0x60007D3")]
			[Address(RVA = "0xD5FFBC", Offset = "0xD5FFBC", VA = "0xD5FFBC")]
			get
			{
				return default(LocalizedObjectType);
			}
			[Token(Token = "0x60007D4")]
			[Address(RVA = "0xD5FFC4", Offset = "0xD5FFC4", VA = "0xD5FFC4")]
			set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public string TextValue
		{
			[Token(Token = "0x60007D5")]
			[Address(RVA = "0xD5FFCC", Offset = "0xD5FFCC", VA = "0xD5FFCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D6")]
			[Address(RVA = "0xD5FFD4", Offset = "0xD5FFD4", VA = "0xD5FFD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700009D")]
		public GameObject ThisGameObject
		{
			[Token(Token = "0x60007D7")]
			[Address(RVA = "0xD5FFDC", Offset = "0xD5FFDC", VA = "0xD5FFDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D8")]
			[Address(RVA = "0xD5FFE4", Offset = "0xD5FFE4", VA = "0xD5FFE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public AudioClip ThisAudioClip
		{
			[Token(Token = "0x60007D9")]
			[Address(RVA = "0xD5FFEC", Offset = "0xD5FFEC", VA = "0xD5FFEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007DA")]
			[Address(RVA = "0xD5FFF4", Offset = "0xD5FFF4", VA = "0xD5FFF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public Texture ThisTexture
		{
			[Token(Token = "0x60007DB")]
			[Address(RVA = "0xD5FFFC", Offset = "0xD5FFFC", VA = "0xD5FFFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007DC")]
			[Address(RVA = "0xD60004", Offset = "0xD60004", VA = "0xD60004")]
			set
			{
			}
		}

		[Token(Token = "0x170000A0")]
		public bool OverrideLocalizedObject
		{
			[Token(Token = "0x60007DD")]
			[Address(RVA = "0xD6000C", Offset = "0xD6000C", VA = "0xD6000C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007DE")]
			[Address(RVA = "0xD5E5C4", Offset = "0xD5E5C4", VA = "0xD5E5C4")]
			set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public string OverrideObjectLanguageCode
		{
			[Token(Token = "0x60007DF")]
			[Address(RVA = "0xD60014", Offset = "0xD60014", VA = "0xD60014")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007E0")]
			[Address(RVA = "0xD5E5E8", Offset = "0xD5E5E8", VA = "0xD5E5E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public TextAsset ThisTextAsset
		{
			[Token(Token = "0x60007E1")]
			[Address(RVA = "0xD6001C", Offset = "0xD6001C", VA = "0xD6001C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007E2")]
			[Address(RVA = "0xD60024", Offset = "0xD60024", VA = "0xD60024")]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public Font Font
		{
			[Token(Token = "0x60007E3")]
			[Address(RVA = "0xD6002C", Offset = "0xD6002C", VA = "0xD6002C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007E4")]
			[Address(RVA = "0xD60034", Offset = "0xD60034", VA = "0xD60034")]
			set
			{
			}
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xD5E338", Offset = "0xD5E338", VA = "0xD5E338")]
		public LocalizedObject()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xD6003C", Offset = "0xD6003C", VA = "0xD6003C")]
		public LocalizedObject(LocalizedObject other)
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xD5E340", Offset = "0xD5E340", VA = "0xD5E340")]
		public static LocalizedObjectType GetLocalizedObjectType(string key)
		{
			return default(LocalizedObjectType);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xD5E65C", Offset = "0xD5E65C", VA = "0xD5E65C")]
		public static string GetCleanKey(string key, LocalizedObjectType objectType)
		{
			return null;
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xD600E4", Offset = "0xD600E4", VA = "0xD600E4")]
		public static string GetCleanKey(string key)
		{
			return null;
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xD60154", Offset = "0xD60154", VA = "0xD60154")]
		public string GetFullKey(string parsedKey)
		{
			return null;
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xD60210", Offset = "0xD60210", VA = "0xD60210")]
		public static string GetFullKey(string parsedKey, LocalizedObjectType objectType)
		{
			return null;
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xD60080", Offset = "0xD60080", VA = "0xD60080")]
		public static string GetLocalizedObjectTypeStringValue(LocalizedObjectType objectType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000170")]
	internal class PluralForms
	{
		[Serializable]
		[Token(Token = "0x2000383")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE4AC", Offset = "0x7EE4AC")]
		private sealed class <>c
		{
			[Token(Token = "0x40014E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x6001891")]
			[Address(RVA = "0xD63650", Offset = "0xD63650", VA = "0xD63650")]
			public <>c()
			{
			}

			[Token(Token = "0x6001892")]
			[Address(RVA = "0xD63658", Offset = "0xD63658", VA = "0xD63658")]
			internal int <.cctor>b__4_0(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001893")]
			[Address(RVA = "0xD636A8", Offset = "0xD636A8", VA = "0xD636A8")]
			internal int <.cctor>b__4_1(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001894")]
			[Address(RVA = "0xD636B4", Offset = "0xD636B4", VA = "0xD636B4")]
			internal int <.cctor>b__4_2(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001895")]
			[Address(RVA = "0xD636C0", Offset = "0xD636C0", VA = "0xD636C0")]
			internal int <.cctor>b__4_3(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001896")]
			[Address(RVA = "0xD636C8", Offset = "0xD636C8", VA = "0xD636C8")]
			internal int <.cctor>b__4_4(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001897")]
			[Address(RVA = "0xD636F8", Offset = "0xD636F8", VA = "0xD636F8")]
			internal int <.cctor>b__4_5(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001898")]
			[Address(RVA = "0xD63704", Offset = "0xD63704", VA = "0xD63704")]
			internal int <.cctor>b__4_6(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001899")]
			[Address(RVA = "0xD63710", Offset = "0xD63710", VA = "0xD63710")]
			internal int <.cctor>b__4_7(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600189A")]
			[Address(RVA = "0xD6371C", Offset = "0xD6371C", VA = "0xD6371C")]
			internal int <.cctor>b__4_8(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600189B")]
			[Address(RVA = "0xD63728", Offset = "0xD63728", VA = "0xD63728")]
			internal int <.cctor>b__4_9(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600189C")]
			[Address(RVA = "0xD63734", Offset = "0xD63734", VA = "0xD63734")]
			internal int <.cctor>b__4_10(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600189D")]
			[Address(RVA = "0xD63740", Offset = "0xD63740", VA = "0xD63740")]
			internal int <.cctor>b__4_11(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600189E")]
			[Address(RVA = "0xD6374C", Offset = "0xD6374C", VA = "0xD6374C")]
			internal int <.cctor>b__4_12(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600189F")]
			[Address(RVA = "0xD63758", Offset = "0xD63758", VA = "0xD63758")]
			internal int <.cctor>b__4_13(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A0")]
			[Address(RVA = "0xD63764", Offset = "0xD63764", VA = "0xD63764")]
			internal int <.cctor>b__4_14(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A1")]
			[Address(RVA = "0xD637BC", Offset = "0xD637BC", VA = "0xD637BC")]
			internal int <.cctor>b__4_15(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A2")]
			[Address(RVA = "0xD637C8", Offset = "0xD637C8", VA = "0xD637C8")]
			internal int <.cctor>b__4_16(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A3")]
			[Address(RVA = "0xD637D0", Offset = "0xD637D0", VA = "0xD637D0")]
			internal int <.cctor>b__4_17(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A4")]
			[Address(RVA = "0xD637D8", Offset = "0xD637D8", VA = "0xD637D8")]
			internal int <.cctor>b__4_18(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A5")]
			[Address(RVA = "0xD637E4", Offset = "0xD637E4", VA = "0xD637E4")]
			internal int <.cctor>b__4_19(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A6")]
			[Address(RVA = "0xD637F0", Offset = "0xD637F0", VA = "0xD637F0")]
			internal int <.cctor>b__4_20(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A7")]
			[Address(RVA = "0xD63868", Offset = "0xD63868", VA = "0xD63868")]
			internal int <.cctor>b__4_21(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A8")]
			[Address(RVA = "0xD63874", Offset = "0xD63874", VA = "0xD63874")]
			internal int <.cctor>b__4_22(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018A9")]
			[Address(RVA = "0xD638C4", Offset = "0xD638C4", VA = "0xD638C4")]
			internal int <.cctor>b__4_23(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018AA")]
			[Address(RVA = "0xD63944", Offset = "0xD63944", VA = "0xD63944")]
			internal int <.cctor>b__4_24(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018AB")]
			[Address(RVA = "0xD639C4", Offset = "0xD639C4", VA = "0xD639C4")]
			internal int <.cctor>b__4_25(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018AC")]
			[Address(RVA = "0xD639F4", Offset = "0xD639F4", VA = "0xD639F4")]
			internal int <.cctor>b__4_26(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018AD")]
			[Address(RVA = "0xD63A00", Offset = "0xD63A00", VA = "0xD63A00")]
			internal int <.cctor>b__4_27(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018AE")]
			[Address(RVA = "0xD63A0C", Offset = "0xD63A0C", VA = "0xD63A0C")]
			internal int <.cctor>b__4_28(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018AF")]
			[Address(RVA = "0xD63A14", Offset = "0xD63A14", VA = "0xD63A14")]
			internal int <.cctor>b__4_29(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B0")]
			[Address(RVA = "0xD63A20", Offset = "0xD63A20", VA = "0xD63A20")]
			internal int <.cctor>b__4_30(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B1")]
			[Address(RVA = "0xD63A28", Offset = "0xD63A28", VA = "0xD63A28")]
			internal int <.cctor>b__4_31(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B2")]
			[Address(RVA = "0xD63AA8", Offset = "0xD63AA8", VA = "0xD63AA8")]
			internal int <.cctor>b__4_32(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B3")]
			[Address(RVA = "0xD63B28", Offset = "0xD63B28", VA = "0xD63B28")]
			internal int <.cctor>b__4_33(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B4")]
			[Address(RVA = "0xD63B70", Offset = "0xD63B70", VA = "0xD63B70")]
			internal int <.cctor>b__4_34(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B5")]
			[Address(RVA = "0xD63B7C", Offset = "0xD63B7C", VA = "0xD63B7C")]
			internal int <.cctor>b__4_35(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B6")]
			[Address(RVA = "0xD63BE4", Offset = "0xD63BE4", VA = "0xD63BE4")]
			internal int <.cctor>b__4_36(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B7")]
			[Address(RVA = "0xD63C60", Offset = "0xD63C60", VA = "0xD63C60")]
			internal int <.cctor>b__4_37(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B8")]
			[Address(RVA = "0xD63C68", Offset = "0xD63C68", VA = "0xD63C68")]
			internal int <.cctor>b__4_38(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018B9")]
			[Address(RVA = "0xD63C70", Offset = "0xD63C70", VA = "0xD63C70")]
			internal int <.cctor>b__4_39(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018BA")]
			[Address(RVA = "0xD63C7C", Offset = "0xD63C7C", VA = "0xD63C7C")]
			internal int <.cctor>b__4_40(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018BB")]
			[Address(RVA = "0xD63C88", Offset = "0xD63C88", VA = "0xD63C88")]
			internal int <.cctor>b__4_41(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018BC")]
			[Address(RVA = "0xD63CD4", Offset = "0xD63CD4", VA = "0xD63CD4")]
			internal int <.cctor>b__4_42(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018BD")]
			[Address(RVA = "0xD63CE0", Offset = "0xD63CE0", VA = "0xD63CE0")]
			internal int <.cctor>b__4_43(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018BE")]
			[Address(RVA = "0xD63CE8", Offset = "0xD63CE8", VA = "0xD63CE8")]
			internal int <.cctor>b__4_44(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018BF")]
			[Address(RVA = "0xD63CF4", Offset = "0xD63CF4", VA = "0xD63CF4")]
			internal int <.cctor>b__4_45(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C0")]
			[Address(RVA = "0xD63D00", Offset = "0xD63D00", VA = "0xD63D00")]
			internal int <.cctor>b__4_46(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C1")]
			[Address(RVA = "0xD63D0C", Offset = "0xD63D0C", VA = "0xD63D0C")]
			internal int <.cctor>b__4_47(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C2")]
			[Address(RVA = "0xD63D18", Offset = "0xD63D18", VA = "0xD63D18")]
			internal int <.cctor>b__4_48(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C3")]
			[Address(RVA = "0xD63D24", Offset = "0xD63D24", VA = "0xD63D24")]
			internal int <.cctor>b__4_49(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C4")]
			[Address(RVA = "0xD63D30", Offset = "0xD63D30", VA = "0xD63D30")]
			internal int <.cctor>b__4_50(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C5")]
			[Address(RVA = "0xD63D3C", Offset = "0xD63D3C", VA = "0xD63D3C")]
			internal int <.cctor>b__4_51(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C6")]
			[Address(RVA = "0xD63D48", Offset = "0xD63D48", VA = "0xD63D48")]
			internal int <.cctor>b__4_52(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C7")]
			[Address(RVA = "0xD63D54", Offset = "0xD63D54", VA = "0xD63D54")]
			internal int <.cctor>b__4_53(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C8")]
			[Address(RVA = "0xD63D60", Offset = "0xD63D60", VA = "0xD63D60")]
			internal int <.cctor>b__4_54(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018C9")]
			[Address(RVA = "0xD63DB0", Offset = "0xD63DB0", VA = "0xD63DB0")]
			internal int <.cctor>b__4_55(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018CA")]
			[Address(RVA = "0xD63DBC", Offset = "0xD63DBC", VA = "0xD63DBC")]
			internal int <.cctor>b__4_56(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018CB")]
			[Address(RVA = "0xD63DC8", Offset = "0xD63DC8", VA = "0xD63DC8")]
			internal int <.cctor>b__4_57(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018CC")]
			[Address(RVA = "0xD63DD0", Offset = "0xD63DD0", VA = "0xD63DD0")]
			internal int <.cctor>b__4_58(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018CD")]
			[Address(RVA = "0xD63E00", Offset = "0xD63E00", VA = "0xD63E00")]
			internal int <.cctor>b__4_59(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018CE")]
			[Address(RVA = "0xD63E0C", Offset = "0xD63E0C", VA = "0xD63E0C")]
			internal int <.cctor>b__4_60(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018CF")]
			[Address(RVA = "0xD63E18", Offset = "0xD63E18", VA = "0xD63E18")]
			internal int <.cctor>b__4_61(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D0")]
			[Address(RVA = "0xD63E24", Offset = "0xD63E24", VA = "0xD63E24")]
			internal int <.cctor>b__4_62(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D1")]
			[Address(RVA = "0xD63E30", Offset = "0xD63E30", VA = "0xD63E30")]
			internal int <.cctor>b__4_63(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D2")]
			[Address(RVA = "0xD63E3C", Offset = "0xD63E3C", VA = "0xD63E3C")]
			internal int <.cctor>b__4_64(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D3")]
			[Address(RVA = "0xD63E48", Offset = "0xD63E48", VA = "0xD63E48")]
			internal int <.cctor>b__4_65(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D4")]
			[Address(RVA = "0xD63E54", Offset = "0xD63E54", VA = "0xD63E54")]
			internal int <.cctor>b__4_66(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D5")]
			[Address(RVA = "0xD63E60", Offset = "0xD63E60", VA = "0xD63E60")]
			internal int <.cctor>b__4_67(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D6")]
			[Address(RVA = "0xD63EB8", Offset = "0xD63EB8", VA = "0xD63EB8")]
			internal int <.cctor>b__4_68(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D7")]
			[Address(RVA = "0xD63EC4", Offset = "0xD63EC4", VA = "0xD63EC4")]
			internal int <.cctor>b__4_69(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D8")]
			[Address(RVA = "0xD63ECC", Offset = "0xD63ECC", VA = "0xD63ECC")]
			internal int <.cctor>b__4_70(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018D9")]
			[Address(RVA = "0xD63ED4", Offset = "0xD63ED4", VA = "0xD63ED4")]
			internal int <.cctor>b__4_71(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018DA")]
			[Address(RVA = "0xD63EE0", Offset = "0xD63EE0", VA = "0xD63EE0")]
			internal int <.cctor>b__4_72(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018DB")]
			[Address(RVA = "0xD63EEC", Offset = "0xD63EEC", VA = "0xD63EEC")]
			internal int <.cctor>b__4_73(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018DC")]
			[Address(RVA = "0xD63F64", Offset = "0xD63F64", VA = "0xD63F64")]
			internal int <.cctor>b__4_74(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018DD")]
			[Address(RVA = "0xD63F70", Offset = "0xD63F70", VA = "0xD63F70")]
			internal int <.cctor>b__4_75(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018DE")]
			[Address(RVA = "0xD63FC0", Offset = "0xD63FC0", VA = "0xD63FC0")]
			internal int <.cctor>b__4_76(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xD64040", Offset = "0xD64040", VA = "0xD64040")]
			internal int <.cctor>b__4_77(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E0")]
			[Address(RVA = "0xD640C0", Offset = "0xD640C0", VA = "0xD640C0")]
			internal int <.cctor>b__4_78(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E1")]
			[Address(RVA = "0xD640F0", Offset = "0xD640F0", VA = "0xD640F0")]
			internal int <.cctor>b__4_79(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xD640FC", Offset = "0xD640FC", VA = "0xD640FC")]
			internal int <.cctor>b__4_80(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E3")]
			[Address(RVA = "0xD64108", Offset = "0xD64108", VA = "0xD64108")]
			internal int <.cctor>b__4_81(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E4")]
			[Address(RVA = "0xD64110", Offset = "0xD64110", VA = "0xD64110")]
			internal int <.cctor>b__4_82(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E5")]
			[Address(RVA = "0xD6411C", Offset = "0xD6411C", VA = "0xD6411C")]
			internal int <.cctor>b__4_83(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E6")]
			[Address(RVA = "0xD64124", Offset = "0xD64124", VA = "0xD64124")]
			internal int <.cctor>b__4_84(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E7")]
			[Address(RVA = "0xD641A4", Offset = "0xD641A4", VA = "0xD641A4")]
			internal int <.cctor>b__4_85(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E8")]
			[Address(RVA = "0xD64224", Offset = "0xD64224", VA = "0xD64224")]
			internal int <.cctor>b__4_86(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018E9")]
			[Address(RVA = "0xD6426C", Offset = "0xD6426C", VA = "0xD6426C")]
			internal int <.cctor>b__4_87(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018EA")]
			[Address(RVA = "0xD64278", Offset = "0xD64278", VA = "0xD64278")]
			internal int <.cctor>b__4_88(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018EB")]
			[Address(RVA = "0xD642E0", Offset = "0xD642E0", VA = "0xD642E0")]
			internal int <.cctor>b__4_89(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018EC")]
			[Address(RVA = "0xD6435C", Offset = "0xD6435C", VA = "0xD6435C")]
			internal int <.cctor>b__4_90(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018ED")]
			[Address(RVA = "0xD64364", Offset = "0xD64364", VA = "0xD64364")]
			internal int <.cctor>b__4_91(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018EE")]
			[Address(RVA = "0xD6436C", Offset = "0xD6436C", VA = "0xD6436C")]
			internal int <.cctor>b__4_92(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018EF")]
			[Address(RVA = "0xD64378", Offset = "0xD64378", VA = "0xD64378")]
			internal int <.cctor>b__4_93(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F0")]
			[Address(RVA = "0xD64384", Offset = "0xD64384", VA = "0xD64384")]
			internal int <.cctor>b__4_94(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F1")]
			[Address(RVA = "0xD643D0", Offset = "0xD643D0", VA = "0xD643D0")]
			internal int <.cctor>b__4_95(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F2")]
			[Address(RVA = "0xD643DC", Offset = "0xD643DC", VA = "0xD643DC")]
			internal int <.cctor>b__4_96(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F3")]
			[Address(RVA = "0xD643E4", Offset = "0xD643E4", VA = "0xD643E4")]
			internal int <.cctor>b__4_97(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F4")]
			[Address(RVA = "0xD643F0", Offset = "0xD643F0", VA = "0xD643F0")]
			internal int <.cctor>b__4_98(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F5")]
			[Address(RVA = "0xD643FC", Offset = "0xD643FC", VA = "0xD643FC")]
			internal int <.cctor>b__4_99(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F6")]
			[Address(RVA = "0xD64408", Offset = "0xD64408", VA = "0xD64408")]
			internal int <.cctor>b__4_100(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F7")]
			[Address(RVA = "0xD64414", Offset = "0xD64414", VA = "0xD64414")]
			internal int <.cctor>b__4_101(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F8")]
			[Address(RVA = "0xD64420", Offset = "0xD64420", VA = "0xD64420")]
			internal int <.cctor>b__4_102(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018F9")]
			[Address(RVA = "0xD6442C", Offset = "0xD6442C", VA = "0xD6442C")]
			internal int <.cctor>b__4_103(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018FA")]
			[Address(RVA = "0xD64438", Offset = "0xD64438", VA = "0xD64438")]
			internal int <.cctor>b__4_104(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018FB")]
			[Address(RVA = "0xD64444", Offset = "0xD64444", VA = "0xD64444")]
			internal int <.cctor>b__4_105(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018FC")]
			[Address(RVA = "0xD64450", Offset = "0xD64450", VA = "0xD64450")]
			internal int <.cctor>b__4_106(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018FD")]
			[Address(RVA = "0xD6445C", Offset = "0xD6445C", VA = "0xD6445C")]
			internal int <.cctor>b__4_107(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018FE")]
			[Address(RVA = "0xD644AC", Offset = "0xD644AC", VA = "0xD644AC")]
			internal int <.cctor>b__4_108(int n)
			{
				return default(int);
			}

			[Token(Token = "0x60018FF")]
			[Address(RVA = "0xD644B4", Offset = "0xD644B4", VA = "0xD644B4")]
			internal int <.cctor>b__4_109(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001900")]
			[Address(RVA = "0xD644C0", Offset = "0xD644C0", VA = "0xD644C0")]
			internal int <.cctor>b__4_110(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001901")]
			[Address(RVA = "0xD644CC", Offset = "0xD644CC", VA = "0xD644CC")]
			internal int <.cctor>b__4_111(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001902")]
			[Address(RVA = "0xD644D8", Offset = "0xD644D8", VA = "0xD644D8")]
			internal int <.cctor>b__4_112(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001903")]
			[Address(RVA = "0xD644E4", Offset = "0xD644E4", VA = "0xD644E4")]
			internal int <.cctor>b__4_113(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001904")]
			[Address(RVA = "0xD644F0", Offset = "0xD644F0", VA = "0xD644F0")]
			internal int <.cctor>b__4_114(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001905")]
			[Address(RVA = "0xD644FC", Offset = "0xD644FC", VA = "0xD644FC")]
			internal int <.cctor>b__4_115(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001906")]
			[Address(RVA = "0xD64508", Offset = "0xD64508", VA = "0xD64508")]
			internal int <.cctor>b__4_116(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001907")]
			[Address(RVA = "0xD64514", Offset = "0xD64514", VA = "0xD64514")]
			internal int <.cctor>b__4_117(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001908")]
			[Address(RVA = "0xD64520", Offset = "0xD64520", VA = "0xD64520")]
			internal int <.cctor>b__4_118(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001909")]
			[Address(RVA = "0xD64570", Offset = "0xD64570", VA = "0xD64570")]
			internal int <.cctor>b__4_119(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600190A")]
			[Address(RVA = "0xD64578", Offset = "0xD64578", VA = "0xD64578")]
			internal int <.cctor>b__4_120(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600190B")]
			[Address(RVA = "0xD64584", Offset = "0xD64584", VA = "0xD64584")]
			internal int <.cctor>b__4_121(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600190C")]
			[Address(RVA = "0xD64590", Offset = "0xD64590", VA = "0xD64590")]
			internal int <.cctor>b__4_122(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600190D")]
			[Address(RVA = "0xD6459C", Offset = "0xD6459C", VA = "0xD6459C")]
			internal int <.cctor>b__4_123(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600190E")]
			[Address(RVA = "0xD645A8", Offset = "0xD645A8", VA = "0xD645A8")]
			internal int <.cctor>b__4_124(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600190F")]
			[Address(RVA = "0xD645F8", Offset = "0xD645F8", VA = "0xD645F8")]
			internal int <.cctor>b__4_125(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001910")]
			[Address(RVA = "0xD64600", Offset = "0xD64600", VA = "0xD64600")]
			internal int <.cctor>b__4_126(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001911")]
			[Address(RVA = "0xD6460C", Offset = "0xD6460C", VA = "0xD6460C")]
			internal int <.cctor>b__4_127(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001912")]
			[Address(RVA = "0xD64618", Offset = "0xD64618", VA = "0xD64618")]
			internal int <.cctor>b__4_128(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001913")]
			[Address(RVA = "0xD64624", Offset = "0xD64624", VA = "0xD64624")]
			internal int <.cctor>b__4_129(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001914")]
			[Address(RVA = "0xD64630", Offset = "0xD64630", VA = "0xD64630")]
			internal int <.cctor>b__4_130(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001915")]
			[Address(RVA = "0xD64680", Offset = "0xD64680", VA = "0xD64680")]
			internal int <.cctor>b__4_131(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001916")]
			[Address(RVA = "0xD64688", Offset = "0xD64688", VA = "0xD64688")]
			internal int <.cctor>b__4_132(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001917")]
			[Address(RVA = "0xD64694", Offset = "0xD64694", VA = "0xD64694")]
			internal int <.cctor>b__4_133(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001918")]
			[Address(RVA = "0xD646A0", Offset = "0xD646A0", VA = "0xD646A0")]
			internal int <.cctor>b__4_134(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001919")]
			[Address(RVA = "0xD646AC", Offset = "0xD646AC", VA = "0xD646AC")]
			internal int <.cctor>b__4_135(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600191A")]
			[Address(RVA = "0xD646FC", Offset = "0xD646FC", VA = "0xD646FC")]
			internal int <.cctor>b__4_136(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600191B")]
			[Address(RVA = "0xD64708", Offset = "0xD64708", VA = "0xD64708")]
			internal int <.cctor>b__4_137(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600191C")]
			[Address(RVA = "0xD64714", Offset = "0xD64714", VA = "0xD64714")]
			internal int <.cctor>b__4_138(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600191D")]
			[Address(RVA = "0xD64764", Offset = "0xD64764", VA = "0xD64764")]
			internal int <.cctor>b__4_139(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600191E")]
			[Address(RVA = "0xD64770", Offset = "0xD64770", VA = "0xD64770")]
			internal int <.cctor>b__4_140(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600191F")]
			[Address(RVA = "0xD6477C", Offset = "0xD6477C", VA = "0xD6477C")]
			internal int <.cctor>b__4_141(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001920")]
			[Address(RVA = "0xD647CC", Offset = "0xD647CC", VA = "0xD647CC")]
			internal int <.cctor>b__4_142(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001921")]
			[Address(RVA = "0xD647D8", Offset = "0xD647D8", VA = "0xD647D8")]
			internal int <.cctor>b__4_143(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001922")]
			[Address(RVA = "0xD64828", Offset = "0xD64828", VA = "0xD64828")]
			internal int <.cctor>b__4_144(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001923")]
			[Address(RVA = "0xD64834", Offset = "0xD64834", VA = "0xD64834")]
			internal int <.cctor>b__4_145(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001924")]
			[Address(RVA = "0xD64884", Offset = "0xD64884", VA = "0xD64884")]
			internal int <.cctor>b__4_146(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001925")]
			[Address(RVA = "0xD64890", Offset = "0xD64890", VA = "0xD64890")]
			internal int <.cctor>b__4_147(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001926")]
			[Address(RVA = "0xD648E0", Offset = "0xD648E0", VA = "0xD648E0")]
			internal int <.cctor>b__4_148(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001927")]
			[Address(RVA = "0xD648EC", Offset = "0xD648EC", VA = "0xD648EC")]
			internal int <.cctor>b__4_149(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001928")]
			[Address(RVA = "0xD648F8", Offset = "0xD648F8", VA = "0xD648F8")]
			internal int <.cctor>b__4_150(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001929")]
			[Address(RVA = "0xD64948", Offset = "0xD64948", VA = "0xD64948")]
			internal int <.cctor>b__4_151(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600192A")]
			[Address(RVA = "0xD64954", Offset = "0xD64954", VA = "0xD64954")]
			internal int <.cctor>b__4_152(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600192B")]
			[Address(RVA = "0xD64960", Offset = "0xD64960", VA = "0xD64960")]
			internal int <.cctor>b__4_153(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600192C")]
			[Address(RVA = "0xD649B0", Offset = "0xD649B0", VA = "0xD649B0")]
			internal int <.cctor>b__4_154(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600192D")]
			[Address(RVA = "0xD649BC", Offset = "0xD649BC", VA = "0xD649BC")]
			internal int <.cctor>b__4_155(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600192E")]
			[Address(RVA = "0xD649C8", Offset = "0xD649C8", VA = "0xD649C8")]
			internal int <.cctor>b__4_156(int n)
			{
				return default(int);
			}

			[Token(Token = "0x600192F")]
			[Address(RVA = "0xD64A18", Offset = "0xD64A18", VA = "0xD64A18")]
			internal int <.cctor>b__4_157(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001930")]
			[Address(RVA = "0xD64A24", Offset = "0xD64A24", VA = "0xD64A24")]
			internal int <.cctor>b__4_158(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001931")]
			[Address(RVA = "0xD64A74", Offset = "0xD64A74", VA = "0xD64A74")]
			internal int <.cctor>b__4_159(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001932")]
			[Address(RVA = "0xD64A80", Offset = "0xD64A80", VA = "0xD64A80")]
			internal int <.cctor>b__4_160(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001933")]
			[Address(RVA = "0xD64AD0", Offset = "0xD64AD0", VA = "0xD64AD0")]
			internal int <.cctor>b__4_161(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001934")]
			[Address(RVA = "0xD64ADC", Offset = "0xD64ADC", VA = "0xD64ADC")]
			internal int <.cctor>b__4_162(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001935")]
			[Address(RVA = "0xD64AE8", Offset = "0xD64AE8", VA = "0xD64AE8")]
			internal int <.cctor>b__4_163(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001936")]
			[Address(RVA = "0xD64AF4", Offset = "0xD64AF4", VA = "0xD64AF4")]
			internal int <.cctor>b__4_164(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001937")]
			[Address(RVA = "0xD64B00", Offset = "0xD64B00", VA = "0xD64B00")]
			internal int <.cctor>b__4_165(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001938")]
			[Address(RVA = "0xD64B0C", Offset = "0xD64B0C", VA = "0xD64B0C")]
			internal int <.cctor>b__4_166(int n)
			{
				return default(int);
			}

			[Token(Token = "0x6001939")]
			[Address(RVA = "0xD64B14", Offset = "0xD64B14", VA = "0xD64B14")]
			internal int <.cctor>b__4_167(int n)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, Func<int, int>> Languages;

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xD5D458", Offset = "0xD5D458", VA = "0xD5D458")]
		public static string GetPluralKey(string languageCode, string baseKey, int count)
		{
			return null;
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xD5DA48", Offset = "0xD5DA48", VA = "0xD5DA48")]
		public static string GetPluralKey(string baseKey, int count, Func<int, int> pluralForm)
		{
			return null;
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xD60338", Offset = "0xD60338", VA = "0xD60338")]
		public PluralForms()
		{
		}
	}
	[Token(Token = "0x2000171")]
	internal class RuntimeLocalizedAssetLoader : ILocalizedAssetLoader
	{
		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Type GameObjectType;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Type AudioClipType;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Type TextureType;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Type TextAssetType;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly Type FontType;

		[Token(Token = "0x60007F2")]
		public T LoadAsset<T>(string assetKey, string languageCode) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xD64B1C", Offset = "0xD64B1C", VA = "0xD64B1C")]
		private string GetAssetFolderPath(Type assetType, string languageCode)
		{
			return null;
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xD5B2DC", Offset = "0xD5B2DC", VA = "0xD5B2DC")]
		public RuntimeLocalizedAssetLoader()
		{
		}
	}
}
namespace SmartLocalization.Editor
{
	[Token(Token = "0x2000172")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED588", Offset = "0x7ED588")]
	public class LocalizedText : MonoBehaviour
	{
		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localizedKey;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text textObject;

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xD5ABE8", Offset = "0xD5ABE8", VA = "0xD5ABE8")]
		private void Start()
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xD5B044", Offset = "0xD5B044", VA = "0xD5B044")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xD5AFAC", Offset = "0xD5AFAC", VA = "0xD5AFAC")]
		private void OnChangeLanguage(LanguageManager languageManager)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xD5B1E4", Offset = "0xD5B1E4", VA = "0xD5B1E4")]
		public LocalizedText()
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000173")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Color m_color;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_highlight;

		[Token(Token = "0x170000A4")]
		public bool Highlight
		{
			[Token(Token = "0x60007FA")]
			[Address(RVA = "0xBCB3C8", Offset = "0xBCB3C8", VA = "0xBCB3C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007FB")]
			[Address(RVA = "0xBCB3D0", Offset = "0xBCB3D0", VA = "0xBCB3D0")]
			set
			{
			}
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xBCB3DC", Offset = "0xBCB3DC", VA = "0xBCB3DC")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0xBCB5A8", Offset = "0xBCB5A8", VA = "0xBCB5A8", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xBCB5D0", Offset = "0xBCB5D0", VA = "0xBCB5D0", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xBCB5F8", Offset = "0xBCB5F8", VA = "0xBCB5F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xBCB4A8", Offset = "0xBCB4A8", VA = "0xBCB4A8")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xBCB84C", Offset = "0xBCB84C", VA = "0xBCB84C")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x2000174")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_materialColorField;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Renderer m_renderer;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool m_inRange;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool m_targeted;

		[Token(Token = "0x170000A5")]
		public bool InRange
		{
			[Token(Token = "0x6000803")]
			[Address(RVA = "0xBCBCAC", Offset = "0xBCBCAC", VA = "0xBCBCAC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000804")]
			[Address(RVA = "0xBCBCB4", Offset = "0xBCBCB4", VA = "0xBCBCB4")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public bool Targeted
		{
			[Token(Token = "0x6000805")]
			[Address(RVA = "0xBCBE30", Offset = "0xBCBE30", VA = "0xBCBE30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000806")]
			[Address(RVA = "0xBCBE38", Offset = "0xBCBE38", VA = "0xBCBE38")]
			set
			{
			}
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xBCBE44", Offset = "0xBCBE44", VA = "0xBCBE44", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xBCBCC0", Offset = "0xBCBCC0", VA = "0xBCBCC0")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0xBCBFE4", Offset = "0xBCBFE4", VA = "0xBCBFE4")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x2000175")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED5EC", Offset = "0x7ED5EC")]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected Collider m_targetCollider;

		[Token(Token = "0x170000A7")]
		public bool UseSpherecast
		{
			[Token(Token = "0x600080A")]
			[Address(RVA = "0xBCBFEC", Offset = "0xBCBFEC", VA = "0xBCBFEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600080B")]
			[Address(RVA = "0xBCBFF4", Offset = "0xBCBFF4", VA = "0xBCBFF4")]
			set
			{
			}
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0xBCC010", Offset = "0xBCC010", VA = "0xBCC010", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xBCC218", Offset = "0xBCC218", VA = "0xBCC218", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xBCCB34", Offset = "0xBCCB34", VA = "0xBCCB34", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xBCD0F0", Offset = "0xBCD0F0", VA = "0xBCD0F0", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xBCD4D0", Offset = "0xBCD4D0", VA = "0xBCD4D0")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xBCC464", Offset = "0xBCC464", VA = "0xBCC464")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xBCD5AC", Offset = "0xBCD5AC", VA = "0xBCD5AC")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xBCD9E8", Offset = "0xBCD9E8", VA = "0xBCD9E8", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xBCDA00", Offset = "0xBCDA00", VA = "0xBCDA00", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0xBCDA08", Offset = "0xBCDA08", VA = "0xBCDA08")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xBCF200", Offset = "0xBCF200", VA = "0xBCF200")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xBCF2B0", Offset = "0xBCF2B0", VA = "0xBCF2B0")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xBCF35C", Offset = "0xBCF35C", VA = "0xBCF35C")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x2000384")]
		public enum CrosshairState
		{
			[Token(Token = "0x40014E9")]
			Disabled,
			[Token(Token = "0x40014EA")]
			Enabled,
			[Token(Token = "0x40014EB")]
			Targeted
		}

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xBCF364", Offset = "0xBCF364", VA = "0xBCF364")]
		private void Start()
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xBCBF48", Offset = "0xBCBF48", VA = "0xBCBF48")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xBCF3CC", Offset = "0xBCF3CC", VA = "0xBCF3CC")]
		private void Update()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xBCF414", Offset = "0xBCF414", VA = "0xBCF414")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x600081D")]
		[Address(RVA = "0xB8B634", Offset = "0xB8B634", VA = "0xB8B634")]
		private void Start()
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xB8B700", Offset = "0xB8B700", VA = "0xB8B700")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xB8B70C", Offset = "0xB8B70C", VA = "0xB8B70C")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xB8B718", Offset = "0xB8B718", VA = "0xB8B718")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xBCA0F8", Offset = "0xBCA0F8", VA = "0xBCA0F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xBCA150", Offset = "0xBCA150", VA = "0xBCA150")]
		private void Update()
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xBCA3F4", Offset = "0xBCA3F4", VA = "0xBCA3F4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xBCA4E4", Offset = "0xBCA4E4", VA = "0xBCA4E4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xBCA154", Offset = "0xBCA154", VA = "0xBCA154")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0xBCA5D4", Offset = "0xBCA5D4", VA = "0xBCA5D4")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x2000385")]
		public enum ContactTest
		{
			[Token(Token = "0x40014ED")]
			PerpenTest,
			[Token(Token = "0x40014EE")]
			BackwardsPress
		}

		[Token(Token = "0x4000829")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x400082A")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private InteractableState _currentButtonState;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x170000A8")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6000827")]
			[Address(RVA = "0xBCA66C", Offset = "0xBCA66C", VA = "0xBCA66C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A9")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6000828")]
			[Address(RVA = "0xBCA674", Offset = "0xBCA674", VA = "0xBCA674")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0xBCA680", Offset = "0xBCA680", VA = "0xBCA680", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0xBCA7D4", Offset = "0xBCA7D4", VA = "0xBCA7D4")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0xBCA9DC", Offset = "0xBCA9DC", VA = "0xBCA9DC", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0xBCAF24", Offset = "0xBCAF24", VA = "0xBCAF24")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xBCAE3C", Offset = "0xBCAE3C", VA = "0xBCAE3C")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xBCAFD0", Offset = "0xBCAFD0", VA = "0xBCAFD0")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xBCB0C4", Offset = "0xBCB0C4", VA = "0xBCB0C4")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xBCB1E8", Offset = "0xBCB1E8", VA = "0xBCB1E8")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x200017B")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F18E4", Offset = "0x7F18E4")]
		private Collider <Collider>k__BackingField;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F18F4", Offset = "0x7F18F4")]
		private Interactable <ParentInteractable>k__BackingField;

		[Token(Token = "0x170000AA")]
		public Collider Collider
		{
			[Token(Token = "0x6000831")]
			[Address(RVA = "0xBCB2D4", Offset = "0xBCB2D4", VA = "0xBCB2D4", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FADFC", Offset = "0x7FADFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000832")]
			[Address(RVA = "0xBCB2DC", Offset = "0xBCB2DC", VA = "0xBCB2DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAE0C", Offset = "0x7FAE0C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000AB")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6000833")]
			[Address(RVA = "0xBCB2E4", Offset = "0xBCB2E4", VA = "0xBCB2E4", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAE1C", Offset = "0x7FAE1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000834")]
			[Address(RVA = "0xBCB2EC", Offset = "0xBCB2EC", VA = "0xBCB2EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAE2C", Offset = "0x7FAE2C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000835")]
			[Address(RVA = "0xBCB2F4", Offset = "0xBCB2F4", VA = "0xBCB2F4", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xBCB344", Offset = "0xBCB344", VA = "0xBCB344")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xBCB3C0", Offset = "0xBCB3C0", VA = "0xBCB3C0")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public interface ColliderZone
	{
		[Token(Token = "0x170000AD")]
		Collider Collider
		{
			[Token(Token = "0x6000838")]
			get;
		}

		[Token(Token = "0x170000AE")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6000839")]
			get;
		}

		[Token(Token = "0x170000AF")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x600083A")]
			get;
		}
	}
	[Token(Token = "0x200017D")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xBCA938", Offset = "0xBCA938", VA = "0xBCA938")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x200017E")]
	public enum InteractionType
	{
		[Token(Token = "0x400083E")]
		Enter,
		[Token(Token = "0x400083F")]
		Stay,
		[Token(Token = "0x4000840")]
		Exit
	}
	[Token(Token = "0x200017F")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000386")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x40014F0")]
			Mesh,
			[Token(Token = "0x40014F1")]
			Skeleton,
			[Token(Token = "0x40014F2")]
			Both
		}

		[Token(Token = "0x2000387")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE4BC", Offset = "0x7EE4BC")]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000286")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600193D")]
				[Address(RVA = "0xBD0308", Offset = "0xBD0308", VA = "0xBD0308", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000287")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600193F")]
				[Address(RVA = "0xBD0370", Offset = "0xBD0370", VA = "0xBD0370", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600193A")]
			[Address(RVA = "0xBCFDFC", Offset = "0xBCFDFC", VA = "0xBCFDFC")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x600193B")]
			[Address(RVA = "0xBD00E8", Offset = "0xBD00E8", VA = "0xBD00E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600193C")]
			[Address(RVA = "0xBD00EC", Offset = "0xBD00EC", VA = "0xBD00EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600193E")]
			[Address(RVA = "0xBD0310", Offset = "0xBD0310", VA = "0xBD0310", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000841")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1924", Offset = "0x7F1924")]
		private static HandsManager <Instance>k__BackingField;

		[Token(Token = "0x170000B0")]
		public OVRHand RightHand
		{
			[Token(Token = "0x600083C")]
			[Address(RVA = "0xBCE450", Offset = "0xBCE450", VA = "0xBCE450")]
			get
			{
				return null;
			}
			[Token(Token = "0x600083D")]
			[Address(RVA = "0xBCF41C", Offset = "0xBCF41C", VA = "0xBCF41C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x600083E")]
			[Address(RVA = "0xBCEE84", Offset = "0xBCEE84", VA = "0xBCEE84")]
			get
			{
				return null;
			}
			[Token(Token = "0x600083F")]
			[Address(RVA = "0xBCF484", Offset = "0xBCF484", VA = "0xBCF484")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x6000840")]
			[Address(RVA = "0xBCF4EC", Offset = "0xBCF4EC", VA = "0xBCF4EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000841")]
			[Address(RVA = "0xBCF524", Offset = "0xBCF524", VA = "0xBCF524")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x6000842")]
			[Address(RVA = "0xBCF58C", Offset = "0xBCF58C", VA = "0xBCF58C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000843")]
			[Address(RVA = "0xBCF5C4", Offset = "0xBCF5C4", VA = "0xBCF5C4")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6000844")]
			[Address(RVA = "0xBCF62C", Offset = "0xBCF62C", VA = "0xBCF62C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000845")]
			[Address(RVA = "0xBCF664", Offset = "0xBCF664", VA = "0xBCF664")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6000846")]
			[Address(RVA = "0xBCE41C", Offset = "0xBCE41C", VA = "0xBCE41C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000847")]
			[Address(RVA = "0xBCF6CC", Offset = "0xBCF6CC", VA = "0xBCF6CC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6000848")]
			[Address(RVA = "0xBCEE50", Offset = "0xBCEE50", VA = "0xBCEE50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000849")]
			[Address(RVA = "0xBCF730", Offset = "0xBCF730", VA = "0xBCF730")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x600084A")]
			[Address(RVA = "0xBCF794", Offset = "0xBCF794", VA = "0xBCF794")]
			get
			{
				return null;
			}
			[Token(Token = "0x600084B")]
			[Address(RVA = "0xBCF7C8", Offset = "0xBCF7C8", VA = "0xBCF7C8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x600084C")]
			[Address(RVA = "0xBCF82C", Offset = "0xBCF82C", VA = "0xBCF82C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600084D")]
			[Address(RVA = "0xBCF860", Offset = "0xBCF860", VA = "0xBCF860")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x600084E")]
			[Address(RVA = "0xBCF8C4", Offset = "0xBCF8C4", VA = "0xBCF8C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600084F")]
			[Address(RVA = "0xBCF8F8", Offset = "0xBCF8F8", VA = "0xBCF8F8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6000850")]
			[Address(RVA = "0xBCF95C", Offset = "0xBCF95C", VA = "0xBCF95C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAE3C", Offset = "0x7FAE3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000851")]
			[Address(RVA = "0xBCF9AC", Offset = "0xBCF9AC", VA = "0xBCF9AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAE4C", Offset = "0x7FAE4C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xBCFA00", Offset = "0xBCFA00", VA = "0xBCFA00")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xBCFD74", Offset = "0xBCFD74", VA = "0xBCFD74")]
		private void Update()
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xBCFD04", Offset = "0xBCFD04", VA = "0xBCFD04")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FAE5C", Offset = "0x7FAE5C")]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xBCBB00", Offset = "0xBCBB00", VA = "0xBCBB00")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xBCFE28", Offset = "0xBCFE28", VA = "0xBCFE28")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xBCEEBC", Offset = "0xBCEEBC", VA = "0xBCEEBC")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xBCE28C", Offset = "0xBCE28C", VA = "0xBCE28C")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xBD0008", Offset = "0xBD0008", VA = "0xBD0008")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000388")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6001940")]
			[Address(RVA = "0xB87978", Offset = "0xB87978", VA = "0xB87978")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x170000BB")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x600085A")]
			[Address(RVA = "0xBD0378", Offset = "0xBD0378", VA = "0xBD0378")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x600085B")]
			[Address(RVA = "0xBD0380", Offset = "0xBD0380", VA = "0xBD0380")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x600085C")]
			[Address(RVA = "0xBD0388", Offset = "0xBD0388", VA = "0xBD0388")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x600085D")]
			[Address(RVA = "0xBD0390", Offset = "0xBD0390", VA = "0xBD0390", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000020")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x600085E")]
			[Address(RVA = "0xBD0398", Offset = "0xBD0398", VA = "0xBD0398")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAEC0", Offset = "0x7FAEC0")]
			add
			{
			}
			[Token(Token = "0x600085F")]
			[Address(RVA = "0xBD043C", Offset = "0xBD043C", VA = "0xBD043C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAED0", Offset = "0x7FAED0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000021")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6000861")]
			[Address(RVA = "0xBD0554", Offset = "0xBD0554", VA = "0xBD0554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAEE0", Offset = "0x7FAEE0")]
			add
			{
			}
			[Token(Token = "0x6000862")]
			[Address(RVA = "0xBD05F8", Offset = "0xBD05F8", VA = "0xBD05F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAEF0", Offset = "0x7FAEF0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6000864")]
			[Address(RVA = "0xBD0710", Offset = "0xBD0710", VA = "0xBD0710")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAF00", Offset = "0x7FAF00")]
			add
			{
			}
			[Token(Token = "0x6000865")]
			[Address(RVA = "0xBD07B4", Offset = "0xBD07B4", VA = "0xBD07B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAF10", Offset = "0x7FAF10")]
			remove
			{
			}
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xBD04E0", Offset = "0xBD04E0", VA = "0xBD04E0", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xBD069C", Offset = "0xBD069C", VA = "0xBD069C", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xBD0858", Offset = "0xBD0858", VA = "0xBD0858", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000867")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xBCA76C", Offset = "0xBCA76C", VA = "0xBCA76C", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xBD08CC", Offset = "0xBD08CC", VA = "0xBD08CC", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xBCB2CC", Offset = "0xBCB2CC", VA = "0xBCB2CC")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4000859")]
		None,
		[Token(Token = "0x400085A")]
		Proximity,
		[Token(Token = "0x400085B")]
		Contact,
		[Token(Token = "0x400085C")]
		Action
	}
	[Token(Token = "0x2000182")]
	public enum InteractableState
	{
		[Token(Token = "0x400085E")]
		Default,
		[Token(Token = "0x400085F")]
		ProximityState,
		[Token(Token = "0x4000860")]
		ContactState,
		[Token(Token = "0x4000861")]
		ActionState
	}
	[Token(Token = "0x2000183")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x600086B")]
		[Address(RVA = "0xB87C80", Offset = "0xB87C80", VA = "0xB87C80")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x170000BF")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x600086C")]
			[Address(RVA = "0xB87A0C", Offset = "0xB87A0C", VA = "0xB87A0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xB87A74", Offset = "0xB87A74", VA = "0xB87A74")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xB87B3C", Offset = "0xB87B3C", VA = "0xB87B3C")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0xB87C04", Offset = "0xB87C04", VA = "0xB87C04")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x2000389")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE4CC", Offset = "0x7EE4CC")]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x40014F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x40014FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x40014FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x40014FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x40014FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x40014FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000288")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001945")]
				[Address(RVA = "0xB88DCC", Offset = "0xB88DCC", VA = "0xB88DCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000289")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001947")]
				[Address(RVA = "0xB88E34", Offset = "0xB88E34", VA = "0xB88E34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001941")]
			[Address(RVA = "0xB88884", Offset = "0xB88884", VA = "0xB88884")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001942")]
			[Address(RVA = "0xB889B0", Offset = "0xB889B0", VA = "0xB889B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001943")]
			[Address(RVA = "0xB88A24", Offset = "0xB88A24", VA = "0xB88A24", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001944")]
			[Address(RVA = "0xB889CC", Offset = "0xB889CC", VA = "0xB889CC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001946")]
			[Address(RVA = "0xB88DD4", Offset = "0xB88DD4", VA = "0xB88DD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xB8877C", Offset = "0xB8877C", VA = "0xB8877C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0xB887F8", Offset = "0xB887F8", VA = "0xB887F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FAF20", Offset = "0x7FAF20")]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xB888B0", Offset = "0xB888B0", VA = "0xB888B0")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xB889A8", Offset = "0xB889A8", VA = "0xB889A8")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x170000C0")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0xB88E3C", Offset = "0xB88E3C", VA = "0xB88E3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xB88FA4", Offset = "0xB88FA4", VA = "0xB88FA4")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0xB89050", Offset = "0xB89050", VA = "0xB89050")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0xB890FC", Offset = "0xB890FC", VA = "0xB890FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xB893E0", Offset = "0xB893E0", VA = "0xB893E0")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xB89428", Offset = "0xB89428", VA = "0xB89428")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xB89678", Offset = "0xB89678", VA = "0xB89678")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xB897A4", Offset = "0xB897A4", VA = "0xB897A4")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x200038A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE4DC", Offset = "0x7EE4DC")]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001500")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001501")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x1700028A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600194B")]
				[Address(RVA = "0xBCF0CC", Offset = "0xBCF0CC", VA = "0xBCF0CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700028B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600194D")]
				[Address(RVA = "0xBCF134", Offset = "0xBCF134", VA = "0xBCF134", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001948")]
			[Address(RVA = "0xBCDF4C", Offset = "0xBCDF4C", VA = "0xBCDF4C")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6001949")]
			[Address(RVA = "0xBCEAE8", Offset = "0xBCEAE8", VA = "0xBCEAE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600194A")]
			[Address(RVA = "0xBCEAEC", Offset = "0xBCEAEC", VA = "0xBCEAEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600194C")]
			[Address(RVA = "0xBCF0D4", Offset = "0xBCF0D4", VA = "0xBCF0D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000871")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x170000C1")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x600087D")]
			[Address(RVA = "0xBCDDB8", Offset = "0xBCDDB8", VA = "0xBCDDB8", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x170000C2")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x600087E")]
			[Address(RVA = "0xBCDDC0", Offset = "0xBCDDC0", VA = "0xBCDDC0", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x170000C3")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0xBCDDC8", Offset = "0xBCDDC8", VA = "0xBCDDC8", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C4")]
		public override bool EnableState
		{
			[Token(Token = "0x6000880")]
			[Address(RVA = "0xBCDDD0", Offset = "0xBCDDD0", VA = "0xBCDDD0", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000881")]
			[Address(RVA = "0xBCDDFC", Offset = "0xBCDDFC", VA = "0xBCDDFC", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xBCDE38", Offset = "0xBCDE38", VA = "0xBCDE38", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xBCDEDC", Offset = "0xBCDEDC", VA = "0xBCDEDC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FAF84", Offset = "0x7FAF84")]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xBCDF78", Offset = "0xBCDF78", VA = "0xBCDF78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xBCE488", Offset = "0xBCE488", VA = "0xBCE488")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xBCE700", Offset = "0xBCE700", VA = "0xBCE700")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xBCE840", Offset = "0xBCE840", VA = "0xBCE840", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xBCEAC8", Offset = "0xBCEAC8", VA = "0xBCEAC8", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xBCEACC", Offset = "0xBCEACC", VA = "0xBCEACC", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xBCEAD0", Offset = "0xBCEAD0", VA = "0xBCEAD0")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000188")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F19B4", Offset = "0x7F19B4")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F19C4", Offset = "0x7F19C4")]
		private bool <ToolActivateState>k__BackingField;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F19D4", Offset = "0x7F19D4")]
		private float <SphereRadius>k__BackingField;

		[Token(Token = "0x170000C5")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x600088B")]
			[Address(RVA = "0xBCF13C", Offset = "0xBCF13C", VA = "0xBCF13C", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAFE8", Offset = "0x7FAFE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600088C")]
			[Address(RVA = "0xBCF144", Offset = "0xBCF144", VA = "0xBCF144")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FAFF8", Offset = "0x7FAFF8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public bool EnableState
		{
			[Token(Token = "0x600088D")]
			[Address(RVA = "0xBCF14C", Offset = "0xBCF14C", VA = "0xBCF14C", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600088E")]
			[Address(RVA = "0xBCF168", Offset = "0xBCF168", VA = "0xBCF168", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public bool ToolActivateState
		{
			[Token(Token = "0x600088F")]
			[Address(RVA = "0xBCF188", Offset = "0xBCF188", VA = "0xBCF188", Slot = "8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB008", Offset = "0x7FB008")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000890")]
			[Address(RVA = "0xBCF190", Offset = "0xBCF190", VA = "0xBCF190", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB018", Offset = "0x7FB018")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public float SphereRadius
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0xBCF19C", Offset = "0xBCF19C", VA = "0xBCF19C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB028", Offset = "0x7FB028")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000892")]
			[Address(RVA = "0xBCF1A4", Offset = "0xBCF1A4", VA = "0xBCF1A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB038", Offset = "0x7FB038")]
			private set
			{
			}
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xBCF1AC", Offset = "0xBCF1AC", VA = "0xBCF1AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xBCF1F4", Offset = "0xBCF1F4", VA = "0xBCF1F4", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xBCF1F8", Offset = "0xBCF1F8", VA = "0xBCF1F8")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000189")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4000881")]
		None = 0,
		[Token(Token = "0x4000882")]
		Ray = 1,
		[Token(Token = "0x4000883")]
		Poke = 4,
		[Token(Token = "0x4000884")]
		All = -1
	}
	[Token(Token = "0x200018A")]
	public enum ToolInputState
	{
		[Token(Token = "0x4000886")]
		Inactive,
		[Token(Token = "0x4000887")]
		PrimaryInputDown,
		[Token(Token = "0x4000888")]
		PrimaryInputDownStay,
		[Token(Token = "0x4000889")]
		PrimaryInputUp
	}
	[Token(Token = "0x200018B")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xB879C8", Offset = "0xB879C8", VA = "0xB879C8")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x200018C")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F19E4", Offset = "0x7F19E4")]
		private bool <IsRightHandedTool>k__BackingField;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F19F4", Offset = "0x7F19F4")]
		private Vector3 <Velocity>k__BackingField;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1A04", Offset = "0x7F1A04")]
		private Vector3 <InteractionPosition>k__BackingField;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x170000C9")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6000897")]
			[Address(RVA = "0xB87D24", Offset = "0xB87D24", VA = "0xB87D24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CA")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6000898")]
			[Address(RVA = "0xB87D2C", Offset = "0xB87D2C", VA = "0xB87D2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB048", Offset = "0x7FB048")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000899")]
			[Address(RVA = "0xB87D34", Offset = "0xB87D34", VA = "0xB87D34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB058", Offset = "0x7FB058")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x600089A")]
			get;
		}

		[Token(Token = "0x170000CC")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x600089B")]
			get;
		}

		[Token(Token = "0x170000CD")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x600089C")]
			get;
		}

		[Token(Token = "0x170000CE")]
		public Vector3 Velocity
		{
			[Token(Token = "0x600089D")]
			[Address(RVA = "0xB87D40", Offset = "0xB87D40", VA = "0xB87D40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB068", Offset = "0x7FB068")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600089E")]
			[Address(RVA = "0xB87D4C", Offset = "0xB87D4C", VA = "0xB87D4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB078", Offset = "0x7FB078")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x600089F")]
			[Address(RVA = "0xB87D58", Offset = "0xB87D58", VA = "0xB87D58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB088", Offset = "0x7FB088")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60008A0")]
			[Address(RVA = "0xB87D64", Offset = "0xB87D64", VA = "0xB87D64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB098", Offset = "0x7FB098")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public abstract bool EnableState
		{
			[Token(Token = "0x60008A5")]
			get;
			[Token(Token = "0x60008A6")]
			set;
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xB87D70", Offset = "0xB87D70", VA = "0xB87D70")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x60008A3")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x60008A4")]
		public abstract void DeFocus();

		[Token(Token = "0x60008A7")]
		public abstract void Initialize();

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xB87D78", Offset = "0xB87D78", VA = "0xB87D78")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xB87DC8", Offset = "0xB87DC8", VA = "0xB87DC8")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xB87E20", Offset = "0xB87E20", VA = "0xB87E20", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0xB88064", Offset = "0xB88064", VA = "0xB88064", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xB8866C", Offset = "0xB8866C", VA = "0xB8866C")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public interface InteractableToolView
	{
		[Token(Token = "0x170000D1")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x60008AD")]
			get;
		}

		[Token(Token = "0x170000D2")]
		bool EnableState
		{
			[Token(Token = "0x60008AF")]
			get;
			[Token(Token = "0x60008B0")]
			set;
		}

		[Token(Token = "0x170000D3")]
		bool ToolActivateState
		{
			[Token(Token = "0x60008B1")]
			get;
			[Token(Token = "0x60008B2")]
			set;
		}

		[Token(Token = "0x60008AE")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x200018E")]
	public class PinchStateModule
	{
		[Token(Token = "0x200038B")]
		private enum PinchState
		{
			[Token(Token = "0x4001503")]
			None,
			[Token(Token = "0x4001504")]
			PinchDown,
			[Token(Token = "0x4001505")]
			PinchStay,
			[Token(Token = "0x4001506")]
			PinchUp
		}

		[Token(Token = "0x4000896")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x170000D4")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x60008B3")]
			[Address(RVA = "0xB8B720", Offset = "0xB8B720", VA = "0xB8B720")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D5")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xB8B7AC", Offset = "0xB8B7AC", VA = "0xB8B7AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D6")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xB8B838", Offset = "0xB8B838", VA = "0xB8B838")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xB8B8C4", Offset = "0xB8B8C4", VA = "0xB8B8C4")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xB8B8F0", Offset = "0xB8B8F0", VA = "0xB8B8F0")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200018F")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4000899")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x400089A")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x400089B")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x400089C")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x400089D")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F1A24", Offset = "0x7F1A24")]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x170000D7")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x60008B8")]
			[Address(RVA = "0xB8BB90", Offset = "0xB8BB90", VA = "0xB8BB90", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x170000D8")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x60008B9")]
			[Address(RVA = "0xB8BB98", Offset = "0xB8BB98", VA = "0xB8BB98", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x170000D9")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x60008BA")]
			[Address(RVA = "0xB8BC00", Offset = "0xB8BC00", VA = "0xB8BC00", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DA")]
		public override bool EnableState
		{
			[Token(Token = "0x60008BB")]
			[Address(RVA = "0xB8BC08", Offset = "0xB8BC08", VA = "0xB8BC08", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008BC")]
			[Address(RVA = "0xB8BC4C", Offset = "0xB8BC4C", VA = "0xB8BC4C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xB8BCC0", Offset = "0xB8BCC0", VA = "0xB8BCC0", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xB8BD18", Offset = "0xB8BD18", VA = "0xB8BD18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xB8BDB4", Offset = "0xB8BDB4", VA = "0xB8BDB4")]
		private void Update()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xB8C0BC", Offset = "0xB8C0BC", VA = "0xB8C0BC")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xB8C1B8", Offset = "0xB8C1B8", VA = "0xB8C1B8", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xB8C51C", Offset = "0xB8C51C", VA = "0xB8C51C")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xB8C6C0", Offset = "0xB8C6C0", VA = "0xB8C6C0")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xB8C7E8", Offset = "0xB8C7E8", VA = "0xB8C7E8")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xB8CB20", Offset = "0xB8CB20", VA = "0xB8CB20")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xB8CF30", Offset = "0xB8CF30", VA = "0xB8CF30", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xB8D004", Offset = "0xB8D004", VA = "0xB8D004", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xB8D038", Offset = "0xB8D038", VA = "0xB8D038")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x2000190")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x40008A9")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x40008AA")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1A98", Offset = "0x7F1A98")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x170000DB")]
		public bool EnableState
		{
			[Token(Token = "0x60008C9")]
			[Address(RVA = "0xB8BC30", Offset = "0xB8BC30", VA = "0xB8BC30", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008CA")]
			[Address(RVA = "0xB8BC68", Offset = "0xB8BC68", VA = "0xB8BC68", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public bool ToolActivateState
		{
			[Token(Token = "0x60008CB")]
			[Address(RVA = "0xB8D0F0", Offset = "0xB8D0F0", VA = "0xB8D0F0", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008CC")]
			[Address(RVA = "0xB8C080", Offset = "0xB8C080", VA = "0xB8C080", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0xB8D320", Offset = "0xB8D320", VA = "0xB8D320", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB0A8", Offset = "0x7FB0A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008CF")]
			[Address(RVA = "0xB8D328", Offset = "0xB8D328", VA = "0xB8D328")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB0B8", Offset = "0x7FB0B8")]
			set
			{
			}
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xB8D0F8", Offset = "0xB8D0F8", VA = "0xB8D0F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xB8CF64", Offset = "0xB8CF64", VA = "0xB8CF64", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xB8D330", Offset = "0xB8D330", VA = "0xB8D330")]
		private void Update()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xB8D65C", Offset = "0xB8D65C", VA = "0xB8D65C")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xB8D84C", Offset = "0xB8D84C", VA = "0xB8D84C")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x2000191")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x170000DE")]
		public bool UseSpherecast
		{
			[Token(Token = "0x60008D4")]
			[Address(RVA = "0xBCDA28", Offset = "0xBCDA28", VA = "0xBCDA28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008D5")]
			[Address(RVA = "0xBCDA30", Offset = "0xBCDA30", VA = "0xBCDA30")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x60008D6")]
			[Address(RVA = "0xBCDAB8", Offset = "0xBCDAB8", VA = "0xBCDAB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008D7")]
			[Address(RVA = "0xBCDAC0", Offset = "0xBCDAC0", VA = "0xBCDAC0")]
			set
			{
			}
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xBCDB2C", Offset = "0xBCDB2C", VA = "0xBCDB2C")]
		private void Start()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xBCDD90", Offset = "0xBCDD90", VA = "0xBCDD90")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xBCDDA0", Offset = "0xBCDDA0", VA = "0xBCDDA0")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xBCDDB0", Offset = "0xBCDDB0", VA = "0xBCDDB0")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x2000192")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xBCB938", Offset = "0xBCB938", VA = "0xBCB938")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xBCB93C", Offset = "0xBCB93C", VA = "0xBCB93C")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xBCB974", Offset = "0xBCB974", VA = "0xBCB974")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xBCB9AC", Offset = "0xBCB9AC", VA = "0xBCB9AC")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xBCB9E4", Offset = "0xBCB9E4", VA = "0xBCB9E4")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xBCBA1C", Offset = "0xBCBA1C", VA = "0xBCBA1C")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xBCBA54", Offset = "0xBCBA54", VA = "0xBCBA54")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xBCBA8C", Offset = "0xBCBA8C", VA = "0xBCBA8C")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xBCBBE8", Offset = "0xBCBBE8", VA = "0xBCBBE8")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xBCBC58", Offset = "0xBCBC58", VA = "0xBCBC58")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x2000193")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xBCBC60", Offset = "0xBCBC60", VA = "0xBCBC60")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xBCBC64", Offset = "0xBCBC64", VA = "0xBCBC64")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xBCBC1C", Offset = "0xBCBC1C", VA = "0xBCBC1C")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xBCBCA4", Offset = "0xBCBCA4", VA = "0xBCBCA4")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x2000194")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x200038C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE4EC", Offset = "0x7EE4EC")]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001507")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001508")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001509")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x400150A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x400150B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x400150C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x1700028C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001951")]
				[Address(RVA = "0xB8B5C4", Offset = "0xB8B5C4", VA = "0xB8B5C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700028D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001953")]
				[Address(RVA = "0xB8B62C", Offset = "0xB8B62C", VA = "0xB8B62C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600194E")]
			[Address(RVA = "0xB8B2F8", Offset = "0xB8B2F8", VA = "0xB8B2F8")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600194F")]
			[Address(RVA = "0xB8B3D4", Offset = "0xB8B3D4", VA = "0xB8B3D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001950")]
			[Address(RVA = "0xB8B3D8", Offset = "0xB8B3D8", VA = "0xB8B3D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001952")]
			[Address(RVA = "0xB8B5CC", Offset = "0xB8B5CC", VA = "0xB8B5CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008BA")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x40008BB")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xB8AF10", Offset = "0xB8AF10", VA = "0xB8AF10")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xB8AFA8", Offset = "0xB8AFA8", VA = "0xB8AFA8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xB8B234", Offset = "0xB8B234", VA = "0xB8B234")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xB8B1C4", Offset = "0xB8B1C4", VA = "0xB8B1C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB0C8", Offset = "0x7FB0C8")]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xB8B324", Offset = "0xB8B324", VA = "0xB8B324")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x200038D")]
		public enum SelectionState
		{
			[Token(Token = "0x400150E")]
			Off,
			[Token(Token = "0x400150F")]
			Selected,
			[Token(Token = "0x4001510")]
			Highlighted
		}

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x170000E0")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x60008EF")]
			[Address(RVA = "0xB8D8AC", Offset = "0xB8D8AC", VA = "0xB8D8AC")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x60008F0")]
			[Address(RVA = "0xB8D8B4", Offset = "0xB8D8B4", VA = "0xB8D8B4")]
			set
			{
			}
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xB8DA3C", Offset = "0xB8DA3C", VA = "0xB8DA3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xB8DBFC", Offset = "0xB8DBFC", VA = "0xB8DBFC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xB8D93C", Offset = "0xB8D93C", VA = "0xB8D93C")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xB8DCEC", Offset = "0xB8DCEC", VA = "0xB8DCEC")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x200038E")]
		public enum SegmentType
		{
			[Token(Token = "0x4001512")]
			Straight,
			[Token(Token = "0x4001513")]
			LeftTurn,
			[Token(Token = "0x4001514")]
			RightTurn,
			[Token(Token = "0x4001515")]
			Switch
		}

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x40008D0")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x40008D1")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1B78", Offset = "0x7F1B78")]
		private float <StartDistance>k__BackingField;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x170000E1")]
		public float StartDistance
		{
			[Token(Token = "0x60008F6")]
			[Address(RVA = "0xB8DD58", Offset = "0xB8DD58", VA = "0xB8DD58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB12C", Offset = "0x7FB12C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008F7")]
			[Address(RVA = "0xB8DD60", Offset = "0xB8DD60", VA = "0xB8DD60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB13C", Offset = "0x7FB13C")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public float GridSize
		{
			[Token(Token = "0x60008F8")]
			[Address(RVA = "0xB8DD68", Offset = "0xB8DD68", VA = "0xB8DD68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008F9")]
			[Address(RVA = "0xB8DD70", Offset = "0xB8DD70", VA = "0xB8DD70")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public int SubDivCount
		{
			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xB8DD78", Offset = "0xB8DD78", VA = "0xB8DD78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xB8DD80", Offset = "0xB8DD80", VA = "0xB8DD80")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public SegmentType Type
		{
			[Token(Token = "0x60008FC")]
			[Address(RVA = "0xB8DD88", Offset = "0xB8DD88", VA = "0xB8DD88")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x170000E5")]
		public Pose EndPose
		{
			[Token(Token = "0x60008FD")]
			[Address(RVA = "0xB8DD90", Offset = "0xB8DD90", VA = "0xB8DD90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E6")]
		public float Radius
		{
			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xB8E224", Offset = "0xB8E224", VA = "0xB8E224")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E7")]
		public float SegmentLength
		{
			[Token(Token = "0x6000900")]
			[Address(RVA = "0xB8DDF8", Offset = "0xB8DDF8", VA = "0xB8DDF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xB8E234", Offset = "0xB8E234", VA = "0xB8E234")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xB8E24C", Offset = "0xB8E24C", VA = "0xB8E24C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xB8DE38", Offset = "0xB8DE38", VA = "0xB8DE38")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0xB8E250", Offset = "0xB8E250", VA = "0xB8E250")]
		private void Update()
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0xB8E254", Offset = "0xB8E254", VA = "0xB8E254")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xB8E2C0", Offset = "0xB8E2C0", VA = "0xB8E2C0")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xB8EE48", Offset = "0xB8EE48", VA = "0xB8EE48")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xB8F154", Offset = "0xB8F154", VA = "0xB8F154")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x200038F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE4FC", Offset = "0x7EE4FC")]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001517")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4001519")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x400151A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x1700028E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001957")]
				[Address(RVA = "0xB8FD6C", Offset = "0xB8FD6C", VA = "0xB8FD6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700028F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001959")]
				[Address(RVA = "0xB8FDD4", Offset = "0xB8FDD4", VA = "0xB8FDD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001954")]
			[Address(RVA = "0xB8FAE4", Offset = "0xB8FAE4", VA = "0xB8FAE4")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001955")]
			[Address(RVA = "0xB8FBC0", Offset = "0xB8FBC0", VA = "0xB8FBC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001956")]
			[Address(RVA = "0xB8FBC4", Offset = "0xB8FBC4", VA = "0xB8FBC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001958")]
			[Address(RVA = "0xB8FD74", Offset = "0xB8FD74", VA = "0xB8FD74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008D7")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x40008D8")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xB8F1F8", Offset = "0xB8F1F8", VA = "0xB8F1F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xB8F2A4", Offset = "0xB8F2A4", VA = "0xB8F2A4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xB8F358", Offset = "0xB8F358", VA = "0xB8F358")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xB8F48C", Offset = "0xB8F48C", VA = "0xB8F48C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xB8F604", Offset = "0xB8F604", VA = "0xB8F604")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xB8F7A0", Offset = "0xB8F7A0", VA = "0xB8F7A0")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xB8FA1C", Offset = "0xB8FA1C", VA = "0xB8FA1C")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xB8F8B4", Offset = "0xB8F8B4", VA = "0xB8F8B4")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xB8F8C8", Offset = "0xB8F8C8", VA = "0xB8F8C8")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xB8FA74", Offset = "0xB8FA74", VA = "0xB8FA74")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB14C", Offset = "0x7FB14C")]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xB8FB10", Offset = "0xB8FB10", VA = "0xB8FB10")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000198")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x170000E8")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6000913")]
			[Address(RVA = "0xB8FDDC", Offset = "0xB8FDDC", VA = "0xB8FDDC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xB8FDEC", Offset = "0xB8FDEC", VA = "0xB8FDEC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xB8FDF4", Offset = "0xB8FDF4", VA = "0xB8FDF4", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xB90260", Offset = "0xB90260", VA = "0xB90260")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x40008EB")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x40008EC")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1C78", Offset = "0x7F1C78")]
		private float <Distance>k__BackingField;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x170000E9")]
		public float Distance
		{
			[Token(Token = "0x6000917")]
			[Address(RVA = "0xB90358", Offset = "0xB90358", VA = "0xB90358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB1B0", Offset = "0x7FB1B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000918")]
			[Address(RVA = "0xB90360", Offset = "0xB90360", VA = "0xB90360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB1C0", Offset = "0x7FB1C0")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public float Scale
		{
			[Token(Token = "0x6000919")]
			[Address(RVA = "0xB90368", Offset = "0xB90368", VA = "0xB90368")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600091A")]
			[Address(RVA = "0xB90370", Offset = "0xB90370", VA = "0xB90370")]
			set
			{
			}
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xB8FDF0", Offset = "0xB8FDF0", VA = "0xB8FDF0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xB90378", Offset = "0xB90378", VA = "0xB90378")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xB8FE3C", Offset = "0xB8FE3C", VA = "0xB8FE3C")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xB90114", Offset = "0xB90114", VA = "0xB90114")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x600091F")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xB902D0", Offset = "0xB902D0", VA = "0xB902D0")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x2000390")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE50C", Offset = "0x7EE50C")]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400151B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400151C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400151D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x400151E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x400151F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4001520")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4001521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x4001522")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x4001523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x4001524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x4001525")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x4001526")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x17000290")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600195D")]
				[Address(RVA = "0xB90D00", Offset = "0xB90D00", VA = "0xB90D00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000291")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600195F")]
				[Address(RVA = "0xB90D68", Offset = "0xB90D68", VA = "0xB90D68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600195A")]
			[Address(RVA = "0xB90944", Offset = "0xB90944", VA = "0xB90944")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x600195B")]
			[Address(RVA = "0xB90ADC", Offset = "0xB90ADC", VA = "0xB90ADC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600195C")]
			[Address(RVA = "0xB90AE0", Offset = "0xB90AE0", VA = "0xB90AE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600195E")]
			[Address(RVA = "0xB90D08", Offset = "0xB90D08", VA = "0xB90D08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xB90548", Offset = "0xB90548", VA = "0xB90548")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xB90594", Offset = "0xB90594", VA = "0xB90594")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xB906A0", Offset = "0xB906A0", VA = "0xB906A0")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xB907E8", Offset = "0xB907E8", VA = "0xB907E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xB906FC", Offset = "0xB906FC", VA = "0xB906FC")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xB908C4", Offset = "0xB908C4", VA = "0xB908C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB1D0", Offset = "0x7FB1D0")]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xB90970", Offset = "0xB90970", VA = "0xB90970")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xB90A1C", Offset = "0xB90A1C", VA = "0xB90A1C")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xB90A7C", Offset = "0xB90A7C", VA = "0xB90A7C")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200019B")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x2000391")]
		private enum EngineSoundState
		{
			[Token(Token = "0x4001528")]
			Start,
			[Token(Token = "0x4001529")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x400152A")]
			Stop
		}

		[Token(Token = "0x2000392")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE51C", Offset = "0x7EE51C")]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400152B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400152C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400152D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x400152E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x400152F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4001530")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4001531")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4001532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4001533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x17000292")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001963")]
				[Address(RVA = "0xB919A8", Offset = "0xB919A8", VA = "0xB919A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000293")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001965")]
				[Address(RVA = "0xB91A10", Offset = "0xB91A10", VA = "0xB91A10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001960")]
			[Address(RVA = "0xB91074", Offset = "0xB91074", VA = "0xB91074")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6001961")]
			[Address(RVA = "0xB91788", Offset = "0xB91788", VA = "0xB91788", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001962")]
			[Address(RVA = "0xB9178C", Offset = "0xB9178C", VA = "0xB9178C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001964")]
			[Address(RVA = "0xB919B0", Offset = "0xB919B0", VA = "0xB919B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008FF")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4000900")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4000901")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4000902")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F1CD8", Offset = "0x7F1CD8")]
		protected float _initialSpeed;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xB90D70", Offset = "0xB90D70", VA = "0xB90D70")]
		private void Start()
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xB90EC8", Offset = "0xB90EC8", VA = "0xB90EC8")]
		private void Update()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xB90ED4", Offset = "0xB90ED4", VA = "0xB90ED4", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xB91028", Offset = "0xB91028", VA = "0xB91028")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xB90E44", Offset = "0xB90E44", VA = "0xB90E44")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB234", Offset = "0x7FB234")]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xB910A0", Offset = "0xB910A0", VA = "0xB910A0")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xB90FC4", Offset = "0xB90FC4", VA = "0xB90FC4")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xB912D4", Offset = "0xB912D4", VA = "0xB912D4")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xB91480", Offset = "0xB91480", VA = "0xB91480")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xB91390", Offset = "0xB91390", VA = "0xB91390")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xB9153C", Offset = "0xB9153C", VA = "0xB9153C")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xB915C4", Offset = "0xB915C4", VA = "0xB915C4")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xB91650", Offset = "0xB91650", VA = "0xB91650")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xB9170C", Offset = "0xB9170C", VA = "0xB9170C")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xB9171C", Offset = "0xB9171C", VA = "0xB9171C")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x170000EB")]
		public float TrackLength
		{
			[Token(Token = "0x600093A")]
			[Address(RVA = "0xB91A18", Offset = "0xB91A18", VA = "0xB91A18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600093B")]
			[Address(RVA = "0xB91A20", Offset = "0xB91A20", VA = "0xB91A20")]
			private set
			{
			}
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xB91A28", Offset = "0xB91A28", VA = "0xB91A28")]
		private void Awake()
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xB903F8", Offset = "0xB903F8", VA = "0xB903F8")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xB91A2C", Offset = "0xB91A2C", VA = "0xB91A2C")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xB91C24", Offset = "0xB91C24", VA = "0xB91C24")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xB91D40", Offset = "0xB91D40", VA = "0xB91D40")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class Pose
	{
		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xB8BA74", Offset = "0xB8BA74", VA = "0xB8BA74")]
		public Pose()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xB8BB20", Offset = "0xB8BB20", VA = "0xB8BB20")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000393")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE52C", Offset = "0x7EE52C")]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001535")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001536")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001537")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4001538")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4001539")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x17000294")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001969")]
				[Address(RVA = "0xB92324", Offset = "0xB92324", VA = "0xB92324", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000295")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600196B")]
				[Address(RVA = "0xB9238C", Offset = "0xB9238C", VA = "0xB9238C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001966")]
			[Address(RVA = "0xB91FE8", Offset = "0xB91FE8", VA = "0xB91FE8")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001967")]
			[Address(RVA = "0xB92148", Offset = "0xB92148", VA = "0xB92148", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001968")]
			[Address(RVA = "0xB9214C", Offset = "0xB9214C", VA = "0xB9214C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600196A")]
			[Address(RVA = "0xB9232C", Offset = "0xB9232C", VA = "0xB9232C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000394")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE53C", Offset = "0x7EE53C")]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400153A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400153B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400153C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x400153D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x400153E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x400153F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x17000296")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600196F")]
				[Address(RVA = "0xB92460", Offset = "0xB92460", VA = "0xB92460", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000297")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001971")]
				[Address(RVA = "0xB924C8", Offset = "0xB924C8", VA = "0xB924C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600196C")]
			[Address(RVA = "0xB920A8", Offset = "0xB920A8", VA = "0xB920A8")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600196D")]
			[Address(RVA = "0xB92394", Offset = "0xB92394", VA = "0xB92394", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600196E")]
			[Address(RVA = "0xB92398", Offset = "0xB92398", VA = "0xB92398", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001970")]
			[Address(RVA = "0xB92468", Offset = "0xB92468", VA = "0xB92468", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000925")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F1EC0", Offset = "0x7F1EC0")]
		private bool <IsMoving>k__BackingField;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x170000EC")]
		public bool IsMoving
		{
			[Token(Token = "0x6000943")]
			[Address(RVA = "0xB91D5C", Offset = "0xB91D5C", VA = "0xB91D5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB298", Offset = "0x7FB298")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000944")]
			[Address(RVA = "0xB91D64", Offset = "0xB91D64", VA = "0xB91D64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB2A8", Offset = "0x7FB2A8")]
			private set
			{
			}
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xB91D70", Offset = "0xB91D70", VA = "0xB91D70")]
		private void Start()
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xB91DAC", Offset = "0xB91DAC", VA = "0xB91DAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xB91F00", Offset = "0xB91F00", VA = "0xB91F00")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xB91F68", Offset = "0xB91F68", VA = "0xB91F68")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB2B8", Offset = "0x7FB2B8")]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xB92014", Offset = "0xB92014", VA = "0xB92014")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB31C", Offset = "0x7FB31C")]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xB920D4", Offset = "0xB920D4", VA = "0xB920D4")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xB92140", Offset = "0xB92140", VA = "0xB92140")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xB924D0", Offset = "0xB924D0", VA = "0xB924D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xB92538", Offset = "0xB92538", VA = "0xB92538")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xB925F0", Offset = "0xB925F0", VA = "0xB925F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xB926F0", Offset = "0xB926F0", VA = "0xB926F0")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xB9276C", Offset = "0xB9276C", VA = "0xB9276C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xB92848", Offset = "0xB92848", VA = "0xB92848")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4000936")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4000937")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4000938")]
		EUDT_None,
		[Token(Token = "0x4000939")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x20001A1")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000395")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE54C", Offset = "0x7EE54C")]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001540")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001541")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001542")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x17000298")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001975")]
				[Address(RVA = "0xB8AEA0", Offset = "0xB8AEA0", VA = "0xB8AEA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000299")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001977")]
				[Address(RVA = "0xB8AF08", Offset = "0xB8AF08", VA = "0xB8AF08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001972")]
			[Address(RVA = "0xB8A51C", Offset = "0xB8A51C", VA = "0xB8A51C")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001973")]
			[Address(RVA = "0xB8AC54", Offset = "0xB8AC54", VA = "0xB8AC54", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001974")]
			[Address(RVA = "0xB8AC58", Offset = "0xB8AC58", VA = "0xB8AC58", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001976")]
			[Address(RVA = "0xB8AEA8", Offset = "0xB8AEA8", VA = "0xB8AEA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x400093B")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x400093C")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x400093D")]
		private const string noneID = "NoneID";

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F1F00", Offset = "0x7F1F00")]
		public GameObject mainCamera;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F1F38", Offset = "0x7F1F38")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xB89864", Offset = "0xB89864", VA = "0xB89864")]
		private void Start()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xB8A044", Offset = "0xB8A044", VA = "0xB8A044")]
		private void Update()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xB8A184", Offset = "0xB8A184", VA = "0xB8A184")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xB8A2AC", Offset = "0xB8A2AC", VA = "0xB8A2AC")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xB8A3D4", Offset = "0xB8A3D4", VA = "0xB8A3D4")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xB8A158", Offset = "0xB8A158", VA = "0xB8A158")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xB8A4AC", Offset = "0xB8A4AC", VA = "0xB8A4AC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB380", Offset = "0x7FB380")]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xB8A548", Offset = "0xB8A548", VA = "0xB8A548")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xB89BD0", Offset = "0xB89BD0", VA = "0xB89BD0")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xB8A670", Offset = "0xB8A670", VA = "0xB8A670")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xB8A57C", Offset = "0xB8A57C", VA = "0xB8A57C")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xB8AA0C", Offset = "0xB8AA0C", VA = "0xB8AA0C")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xB8AAE8", Offset = "0xB8AAE8", VA = "0xB8AAE8")]
		public OVROverlaySample()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xB8AB64", Offset = "0xB8AB64", VA = "0xB8AB64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB3E4", Offset = "0x7FB3E4")]
		private void <Start>b__24_0(Toggle t)
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xB8ABB4", Offset = "0xB8ABB4", VA = "0xB8ABB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB3F4", Offset = "0x7FB3F4")]
		private void <Start>b__24_1(Toggle t)
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xB8AC04", Offset = "0xB8AC04", VA = "0xB8AC04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB404", Offset = "0x7FB404")]
		private void <Start>b__24_2(Toggle t)
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x20001A2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED660", Offset = "0x7ED660")]
	public class Hand : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000396")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE55C", Offset = "0x7EE55C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Collider, bool> <>9__28_0;

			[Token(Token = "0x6001979")]
			[Address(RVA = "0xBC17F8", Offset = "0xBC17F8", VA = "0xBC17F8")]
			public <>c()
			{
			}

			[Token(Token = "0x600197A")]
			[Address(RVA = "0xBC1800", Offset = "0xBC1800", VA = "0xBC1800")]
			internal bool <Start>b__28_0(Collider childCollider)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000952")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4000953")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4000954")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4000955")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4000956")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4000957")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4000958")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4000959")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x400095A")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x400095B")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x400095C")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xBC0A3C", Offset = "0xBC0A3C", VA = "0xBC0A3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xBC0A94", Offset = "0xBC0A94", VA = "0xBC0A94")]
		private void Start()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xBC0E9C", Offset = "0xBC0E9C", VA = "0xBC0E9C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xBC0F68", Offset = "0xBC0F68", VA = "0xBC0F68")]
		private void Update()
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xBC1074", Offset = "0xBC1074", VA = "0xBC1074")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xBC13AC", Offset = "0xBC13AC", VA = "0xBC13AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xBC1514", Offset = "0xBC1514", VA = "0xBC1514")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xBC1660", Offset = "0xBC1660", VA = "0xBC1660")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xBC1110", Offset = "0xBC1110", VA = "0xBC1110")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xBC11B0", Offset = "0xBC11B0", VA = "0xBC11B0")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xBC0CF0", Offset = "0xBC0CF0", VA = "0xBC0CF0")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xBC177C", Offset = "0xBC177C", VA = "0xBC177C")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public enum HandPoseId
	{
		[Token(Token = "0x400096F")]
		Default,
		[Token(Token = "0x4000970")]
		Generic,
		[Token(Token = "0x4000971")]
		PingPongBall,
		[Token(Token = "0x4000972")]
		Controller
	}
	[Token(Token = "0x20001A4")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x170000ED")]
		public bool AllowPointing
		{
			[Token(Token = "0x600096E")]
			[Address(RVA = "0xBC182C", Offset = "0xBC182C", VA = "0xBC182C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EE")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x600096F")]
			[Address(RVA = "0xBC1834", Offset = "0xBC1834", VA = "0xBC1834")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EF")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6000970")]
			[Address(RVA = "0xBC183C", Offset = "0xBC183C", VA = "0xBC183C")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xBC1844", Offset = "0xBC1844", VA = "0xBC1844")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xBC184C", Offset = "0xBC184C", VA = "0xBC184C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xBC1AC0", Offset = "0xBC1AC0", VA = "0xBC1AC0")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xBC1B1C", Offset = "0xBC1B1C", VA = "0xBC1B1C")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xBC1B60", Offset = "0xBC1B60", VA = "0xBC1B60")]
		public TouchController()
		{
		}
	}
}
namespace Oculus.Spatializer.Propagation
{
	[Token(Token = "0x20001A6")]
	public enum FaceType : uint
	{
		[Token(Token = "0x400097A")]
		TRIANGLES,
		[Token(Token = "0x400097B")]
		QUADS
	}
	[Token(Token = "0x20001A7")]
	public enum MaterialProperty : uint
	{
		[Token(Token = "0x400097D")]
		ABSORPTION,
		[Token(Token = "0x400097E")]
		TRANSMISSION,
		[Token(Token = "0x400097F")]
		SCATTERING
	}
	[Token(Token = "0x20001A8")]
	public struct MeshGroup
	{
		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UIntPtr faceCount;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaceType faceType;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr material;
	}
}
namespace Oculus.Avatar
{
	[Token(Token = "0x20001A9")]
	public static class AvatarLogger
	{
		[Token(Token = "0x4000984")]
		public const string LogAvatar = "[Avatars] - ";

		[Token(Token = "0x4000985")]
		public const string Tab = "    ";

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xBC2118", Offset = "0xBC2118", VA = "0xBC2118")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB414", Offset = "0x7FB414")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB414", Offset = "0x7FB414")]
		public static void Log(string logMsg)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xBC21A0", Offset = "0xBC21A0", VA = "0xBC21A0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB474", Offset = "0x7FB474")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB474", Offset = "0x7FB474")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xBC2238", Offset = "0xBC2238", VA = "0xBC2238")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB4D4", Offset = "0x7FB4D4")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB4D4", Offset = "0x7FB4D4")]
		public static void LogWarning(string logMsg)
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xBC22C0", Offset = "0xBC22C0", VA = "0xBC22C0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB534", Offset = "0x7FB534")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB534", Offset = "0x7FB534")]
		public static void LogError(string logMsg)
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xBC2348", Offset = "0xBC2348", VA = "0xBC2348")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB594", Offset = "0x7FB594")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x7FB594", Offset = "0x7FB594")]
		public static void LogError(string logMsg, UnityEngine.Object context)
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class CAPI
	{
		[Token(Token = "0x2000397")]
		public delegate void LoggingDelegate(IntPtr str);

		[Token(Token = "0x2000398")]
		public enum Result
		{
			[Token(Token = "0x4001546")]
			Success = 0,
			[Token(Token = "0x4001547")]
			Failure = -1000,
			[Token(Token = "0x4001548")]
			Failure_InvalidParameter = -1001,
			[Token(Token = "0x4001549")]
			Failure_NotInitialized = -1002,
			[Token(Token = "0x400154A")]
			Failure_InvalidOperation = -1003,
			[Token(Token = "0x400154B")]
			Failure_Unsupported = -1004,
			[Token(Token = "0x400154C")]
			Failure_NotYetImplemented = -1005,
			[Token(Token = "0x400154D")]
			Failure_OperationFailed = -1006,
			[Token(Token = "0x400154E")]
			Failure_InsufficientSize = -1007
		}

		[Token(Token = "0x2000399")]
		private static class OVRP_1_30_0
		{
			[Token(Token = "0x400154F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Token(Token = "0x600197F")]
			[Address(RVA = "0xBC9B80", Offset = "0xBC9B80", VA = "0xBC9B80")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Token(Token = "0x4000986")]
		private const string LibFile = "ovravatarloader";

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr nativeVisemeData;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr nativeGazeTargetsData;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr nativeAvatarLightsData;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr DebugLineCountData;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] scratchBufferFloat;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject debugLineGo;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string SDKRuntimePrefix;

		[Token(Token = "0x400098E")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Token(Token = "0x600097B")]
		[Address(RVA = "0xBC2448", Offset = "0xBC2448", VA = "0xBC2448")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xBC24D8", Offset = "0xBC24D8", VA = "0xBC24D8")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xBC2694", Offset = "0xBC2694", VA = "0xBC2694")]
		public static void Shutdown()
		{
		}

		[PreserveSig]
		[Token(Token = "0x600097E")]
		[Address(RVA = "0xBC2774", Offset = "0xBC2774", VA = "0xBC2774")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600097F")]
		[Address(RVA = "0xBC27E4", Offset = "0xBC27E4", VA = "0xBC27E4")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Token(Token = "0x6000980")]
		[Address(RVA = "0xBC2858", Offset = "0xBC2858", VA = "0xBC2858")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xBC28D8", Offset = "0xBC28D8", VA = "0xBC28D8")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Token(Token = "0x6000982")]
		[Address(RVA = "0xBC29F0", Offset = "0xBC29F0", VA = "0xBC29F0")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xBC2A70", Offset = "0xBC2A70", VA = "0xBC2A70")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Token(Token = "0x6000984")]
		[Address(RVA = "0xBC2B88", Offset = "0xBC2B88", VA = "0xBC2B88")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000985")]
		[Address(RVA = "0xBC2C08", Offset = "0xBC2C08", VA = "0xBC2C08")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000986")]
		[Address(RVA = "0xBC2C88", Offset = "0xBC2C88", VA = "0xBC2C88")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000987")]
		[Address(RVA = "0xBC2D08", Offset = "0xBC2D08", VA = "0xBC2D08")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6000988")]
		[Address(RVA = "0xBC2D88", Offset = "0xBC2D88", VA = "0xBC2D88")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Token(Token = "0x6000989")]
		[Address(RVA = "0xBC2E18", Offset = "0xBC2E18", VA = "0xBC2E18")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x600098A")]
		[Address(RVA = "0xBC2EA8", Offset = "0xBC2EA8", VA = "0xBC2EA8")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x600098B")]
		[Address(RVA = "0xBC2F38", Offset = "0xBC2F38", VA = "0xBC2F38")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600098C")]
		[Address(RVA = "0xBC2FB8", Offset = "0xBC2FB8", VA = "0xBC2FB8")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x600098D")]
		[Address(RVA = "0xBC3038", Offset = "0xBC3038", VA = "0xBC3038")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x600098E")]
		[Address(RVA = "0xBC30C8", Offset = "0xBC30C8", VA = "0xBC30C8")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Token(Token = "0x600098F")]
		[Address(RVA = "0xBC3158", Offset = "0xBC3158", VA = "0xBC3158")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Token(Token = "0x6000990")]
		[Address(RVA = "0xBC31E8", Offset = "0xBC31E8", VA = "0xBC31E8")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000991")]
		[Address(RVA = "0xBC3268", Offset = "0xBC3268", VA = "0xBC3268")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xBC3308", Offset = "0xBC3308", VA = "0xBC3308")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000993")]
		[Address(RVA = "0xBC3388", Offset = "0xBC3388", VA = "0xBC3388")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Token(Token = "0x6000994")]
		[Address(RVA = "0xBC3428", Offset = "0xBC3428", VA = "0xBC3428")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Token(Token = "0x6000995")]
		[Address(RVA = "0xBC34E8", Offset = "0xBC34E8", VA = "0xBC34E8")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Token(Token = "0x6000996")]
		[Address(RVA = "0xBC35B8", Offset = "0xBC35B8", VA = "0xBC35B8")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Token(Token = "0x6000997")]
		[Address(RVA = "0xBC3648", Offset = "0xBC3648", VA = "0xBC3648")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000998")]
		[Address(RVA = "0xBC36D8", Offset = "0xBC36D8", VA = "0xBC36D8")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000999")]
		[Address(RVA = "0xBC3768", Offset = "0xBC3768", VA = "0xBC3768")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x600099A")]
		[Address(RVA = "0xBC37F8", Offset = "0xBC37F8", VA = "0xBC37F8")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x600099B")]
		[Address(RVA = "0xBC3888", Offset = "0xBC3888", VA = "0xBC3888")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xBC3908", Offset = "0xBC3908", VA = "0xBC3908")]
		public static void ovrAvatarComponent_Get(IntPtr avatar, uint index, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xBC3A28", Offset = "0xBC3A28", VA = "0xBC3A28")]
		public static void ovrAvatarComponent_Get(IntPtr componentPtr, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600099E")]
		[Address(RVA = "0xBC3998", Offset = "0xBC3998", VA = "0xBC3998")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xBC3C1C", Offset = "0xBC3C1C", VA = "0xBC3C1C")]
		public static bool ovrAvatarPose_GetBaseComponent(IntPtr avatar, ref ovrAvatarBaseComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xBC3D54", Offset = "0xBC3D54", VA = "0xBC3D54")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Token(Token = "0x60009A1")]
		public static IntPtr MarshalRenderComponent<T>(IntPtr ptr) where T : struct
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xBC3DD4", Offset = "0xBC3DD4", VA = "0xBC3DD4")]
		public static bool ovrAvatarPose_GetBodyComponent(IntPtr avatar, ref ovrAvatarBodyComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xBC4044", Offset = "0xBC4044", VA = "0xBC4044")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xBC40C4", Offset = "0xBC40C4", VA = "0xBC40C4")]
		public static bool ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xBC41FC", Offset = "0xBC41FC", VA = "0xBC41FC")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xBC427C", Offset = "0xBC427C", VA = "0xBC427C")]
		public static bool ovrAvatarPose_GetRightControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xBC43B4", Offset = "0xBC43B4", VA = "0xBC43B4")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xBC4434", Offset = "0xBC4434", VA = "0xBC4434")]
		public static bool ovrAvatarPose_GetLeftHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xBC456C", Offset = "0xBC456C", VA = "0xBC456C")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xBC45EC", Offset = "0xBC45EC", VA = "0xBC45EC")]
		public static bool ovrAvatarPose_GetRightHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xBC4724", Offset = "0xBC4724", VA = "0xBC4724")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xBC47A4", Offset = "0xBC47A4", VA = "0xBC47A4")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xBC4824", Offset = "0xBC4824", VA = "0xBC4824")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xBC48BC", Offset = "0xBC48BC", VA = "0xBC48BC")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xBC493C", Offset = "0xBC493C", VA = "0xBC493C")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xBC4AE8", Offset = "0xBC4AE8", VA = "0xBC4AE8")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xBC4C14", Offset = "0xBC4C14", VA = "0xBC4C14")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xBC4A68", Offset = "0xBC4A68", VA = "0xBC4A68")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xBC4C94", Offset = "0xBC4C94", VA = "0xBC4C94")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xBC4D14", Offset = "0xBC4D14", VA = "0xBC4D14")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xBC4DA4", Offset = "0xBC4DA4", VA = "0xBC4DA4")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xBC4E24", Offset = "0xBC4E24", VA = "0xBC4E24")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xBC4EB4", Offset = "0xBC4EB4", VA = "0xBC4EB4")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xBC4F34", Offset = "0xBC4F34", VA = "0xBC4F34")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xBC4FB4", Offset = "0xBC4FB4", VA = "0xBC4FB4")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xBC51F0", Offset = "0xBC51F0", VA = "0xBC51F0")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xBC5280", Offset = "0xBC5280", VA = "0xBC5280")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref Vector4 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xBC546C", Offset = "0xBC546C", VA = "0xBC546C")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xBC5504", Offset = "0xBC5504", VA = "0xBC5504")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xBC5628", Offset = "0xBC5628", VA = "0xBC5628")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xBC56A8", Offset = "0xBC56A8", VA = "0xBC56A8")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xBC5728", Offset = "0xBC5728", VA = "0xBC5728")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xBC5850", Offset = "0xBC5850", VA = "0xBC5850")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xBC58D0", Offset = "0xBC58D0", VA = "0xBC58D0")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xBC59F8", Offset = "0xBC59F8", VA = "0xBC59F8")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xBC5A78", Offset = "0xBC5A78", VA = "0xBC5A78")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xBC5B08", Offset = "0xBC5B08", VA = "0xBC5B08")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xBC5B98", Offset = "0xBC5B98", VA = "0xBC5B98")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xBC5C28", Offset = "0xBC5C28", VA = "0xBC5C28")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xBC5CA8", Offset = "0xBC5CA8", VA = "0xBC5CA8")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xBC5D30", Offset = "0xBC5D30", VA = "0xBC5D30")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xBC5DB8", Offset = "0xBC5DB8", VA = "0xBC5DB8")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xBC5E38", Offset = "0xBC5E38", VA = "0xBC5E38")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xBC5EB8", Offset = "0xBC5EB8", VA = "0xBC5EB8")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xBC5F6C", Offset = "0xBC5F6C", VA = "0xBC5F6C")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xBC5FFC", Offset = "0xBC5FFC", VA = "0xBC5FFC")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xBC608C", Offset = "0xBC608C", VA = "0xBC608C")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xBC610C", Offset = "0xBC610C", VA = "0xBC610C")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xBC618C", Offset = "0xBC618C", VA = "0xBC618C")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xBC620C", Offset = "0xBC620C", VA = "0xBC620C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xBC62A4", Offset = "0xBC62A4", VA = "0xBC62A4")]
		public static extern void ovrAvatar_SetActionUnitOnsetSpeed(IntPtr avatar, float onsetSpeed);

		[PreserveSig]
		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xBC6334", Offset = "0xBC6334", VA = "0xBC6334")]
		public static extern void ovrAvatar_SetActionUnitFalloffSpeed(IntPtr avatar, float falloffSpeed);

		[PreserveSig]
		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xBC63C4", Offset = "0xBC63C4", VA = "0xBC63C4")]
		public static extern void ovrAvatar_SetVisemeMultiplier(IntPtr avatar, float visemeMultiplier);

		[PreserveSig]
		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xBC6454", Offset = "0xBC6454", VA = "0xBC6454")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xBC64EC", Offset = "0xBC64EC", VA = "0xBC64EC")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xBC6584", Offset = "0xBC6584", VA = "0xBC6584")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xBC6604", Offset = "0xBC6604", VA = "0xBC6604")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xBC6684", Offset = "0xBC6684", VA = "0xBC6684")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xBC67AC", Offset = "0xBC67AC", VA = "0xBC67AC")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xBC682C", Offset = "0xBC682C", VA = "0xBC682C")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xBC6954", Offset = "0xBC6954", VA = "0xBC6954")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xBC69D4", Offset = "0xBC69D4", VA = "0xBC69D4")]
		public static void ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart, ref ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xBC6AFC", Offset = "0xBC6AFC", VA = "0xBC6AFC")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xBC6B7C", Offset = "0xBC6B7C", VA = "0xBC6B7C")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xBC6D24", Offset = "0xBC6D24", VA = "0xBC6D24")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xBC6FC0", Offset = "0xBC6FC0", VA = "0xBC6FC0")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xBC6CA4", Offset = "0xBC6CA4", VA = "0xBC6CA4")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xBC7050", Offset = "0xBC7050", VA = "0xBC7050")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xBC70D0", Offset = "0xBC70D0", VA = "0xBC70D0")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xBC7160", Offset = "0xBC7160", VA = "0xBC7160")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xBC71F0", Offset = "0xBC71F0", VA = "0xBC71F0")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xBC7280", Offset = "0xBC7280", VA = "0xBC7280")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xBC7320", Offset = "0xBC7320", VA = "0xBC7320")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xBC73C0", Offset = "0xBC73C0", VA = "0xBC73C0")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xBC7460", Offset = "0xBC7460", VA = "0xBC7460")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xBC74E0", Offset = "0xBC74E0", VA = "0xBC74E0")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xBC7560", Offset = "0xBC7560", VA = "0xBC7560")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xBC75E0", Offset = "0xBC75E0", VA = "0xBC75E0")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xBC7660", Offset = "0xBC7660", VA = "0xBC7660")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xBC76E0", Offset = "0xBC76E0", VA = "0xBC76E0")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xBC7808", Offset = "0xBC7808", VA = "0xBC7808")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xBC78A0", Offset = "0xBC78A0", VA = "0xBC78A0")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xBC7920", Offset = "0xBC7920", VA = "0xBC7920")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xBC7984", Offset = "0xBC7984", VA = "0xBC7984")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xBC7AA0", Offset = "0xBC7AA0", VA = "0xBC7AA0")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xBC7B30", Offset = "0xBC7B30", VA = "0xBC7B30")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xBC7C74", Offset = "0xBC7C74", VA = "0xBC7C74")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xBC7D04", Offset = "0xBC7D04", VA = "0xBC7D04")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xBC7DA4", Offset = "0xBC7DA4", VA = "0xBC7DA4")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xBC813C", Offset = "0xBC813C", VA = "0xBC813C")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xBC81BC", Offset = "0xBC81BC", VA = "0xBC81BC")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xBC8254", Offset = "0xBC8254", VA = "0xBC8254")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xBC8A1C", Offset = "0xBC8A1C", VA = "0xBC8A1C")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xBC8A9C", Offset = "0xBC8A9C", VA = "0xBC8A9C")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xBC23E0", Offset = "0xBC23E0", VA = "0xBC23E0")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x7FB5F4", Offset = "0x7FB5F4")]
		public static void LoggingCallback(IntPtr str)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xBC8B34", Offset = "0xBC8B34", VA = "0xBC8B34")]
		public static extern void ovrAvatar_RegisterLoggingCallback(LoggingDelegate callback);

		[PreserveSig]
		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xBC8BB8", Offset = "0xBC8BB8", VA = "0xBC8BB8")]
		public static extern void ovrAvatar_SetLoggingLevel(ovrAvatarLogLevel level);

		[PreserveSig]
		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xBC8C38", Offset = "0xBC8C38", VA = "0xBC8C38")]
		public static extern IntPtr ovrAvatar_GetDebugTransforms_Native(IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xBC8CB8", Offset = "0xBC8CB8", VA = "0xBC8CB8")]
		public static extern IntPtr ovrAvatar_GetDebugLines_Native(IntPtr count);

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xBC8D38", Offset = "0xBC8D38", VA = "0xBC8D38")]
		public static void ovrAvatar_DrawDebugLines()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xBC9718", Offset = "0xBC9718", VA = "0xBC9718")]
		public static extern void ovrAvatar_SetDebugDrawContext(uint context);

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xBC9798", Offset = "0xBC9798", VA = "0xBC9798")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xBC9C5C", Offset = "0xBC9C5C", VA = "0xBC9C5C")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xBC9AF0", Offset = "0xBC9AF0", VA = "0xBC9AF0")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xBC9CD0", Offset = "0xBC9CD0", VA = "0xBC9CD0")]
		public CAPI()
		{
		}
	}
}
namespace OVR
{
	[Token(Token = "0x20001AB")]
	public class TestScript : MonoBehaviour
	{
		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "InspectorNoteAttribute", RVA = "0x7F1FF0", Offset = "0x7F1FF0")]
		public SoundFXRef testSound1;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundFXRef testSound2;

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xBBA0F4", Offset = "0xBBA0F4", VA = "0xBBA0F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xBBA0F8", Offset = "0xBBA0F8", VA = "0xBBA0F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xBBA1B8", Offset = "0xBBA1B8", VA = "0xBBA1B8")]
		public TestScript()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class AmbienceEmitter : MonoBehaviour
	{
		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SoundFXRef[] ambientSounds;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoActivate;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F203C", Offset = "0x7F203C")]
		public bool autoRetrigger;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x7F2074", Offset = "0x7F2074")]
		public Vector2 randomRetriggerDelaySecs;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2098", Offset = "0x7F2098")]
		public Transform[] playPositions;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool activated;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int playingIdx;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float nextPlayTime;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float fadeTime;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastPosIdx;

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x142CB40", Offset = "0x142CB40", VA = "0x142CB40")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x142CCC4", Offset = "0x142CCC4", VA = "0x142CCC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x142CEA4", Offset = "0x142CEA4", VA = "0x142CEA4")]
		public void OnTriggerEnter(Collider col)
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x142CD24", Offset = "0x142CD24", VA = "0x142CD24")]
		public void Play()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x142CF64", Offset = "0x142CF64", VA = "0x142CF64")]
		public void EnableEmitter(bool enable)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x142D0D8", Offset = "0x142D0D8", VA = "0x142D0D8")]
		public AmbienceEmitter()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	public enum PreloadSounds
	{
		[Token(Token = "0x400099D")]
		Default,
		[Token(Token = "0x400099E")]
		Preload,
		[Token(Token = "0x400099F")]
		ManualPreload
	}
	[Token(Token = "0x20001AE")]
	public enum Fade
	{
		[Token(Token = "0x40009A1")]
		In,
		[Token(Token = "0x40009A2")]
		Out
	}
	[Serializable]
	[Token(Token = "0x20001AF")]
	public class SoundGroup
	{
		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SoundFX[] soundList;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerGroup mixerGroup;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F20D0", Offset = "0x7F20D0")]
		public int maxPlayingSounds;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PreloadSounds preloadAudio;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float volumeOverride;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public int playingSoundCount;

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xBB9EB4", Offset = "0xBB9EB4", VA = "0xBB9EB4")]
		public SoundGroup(string name)
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xBB9F48", Offset = "0xBB9F48", VA = "0xBB9F48")]
		public SoundGroup()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xBB9FD4", Offset = "0xBB9FD4", VA = "0xBB9FD4")]
		public void IncrementPlayCount()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xBBA064", Offset = "0xBBA064", VA = "0xBBA064")]
		public void DecrementPlayCount()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xBB9468", Offset = "0xBB9468", VA = "0xBB9468")]
		public bool CanPlaySound()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001B0")]
	public class AudioManager : MonoBehaviour
	{
		[Token(Token = "0x200039A")]
		public enum Fade
		{
			[Token(Token = "0x4001551")]
			In,
			[Token(Token = "0x4001552")]
			Out
		}

		[Token(Token = "0x200039B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE56C", Offset = "0x7EE56C")]
		private sealed class <>c__DisplayClass75_0
		{
			[Token(Token = "0x4001553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SoundPriority priority;

			[Token(Token = "0x6001981")]
			[Address(RVA = "0x14311F0", Offset = "0x14311F0", VA = "0x14311F0")]
			public <>c__DisplayClass75_0()
			{
			}

			[Token(Token = "0x6001982")]
			[Address(RVA = "0x14334D8", Offset = "0x14334D8", VA = "0x14334D8")]
			internal bool <FindFreeEmitter>b__0(SoundEmitter item)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x200039C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE57C", Offset = "0x7EE57C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<SoundEmitter> <>9__75_1;

			[Token(Token = "0x6001984")]
			[Address(RVA = "0x1433440", Offset = "0x1433440", VA = "0x1433440")]
			public <>c()
			{
			}

			[Token(Token = "0x6001985")]
			[Address(RVA = "0x1433448", Offset = "0x1433448", VA = "0x1433448")]
			internal bool <FindFreeEmitter>b__75_1(SoundEmitter item)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F20FC", Offset = "0x7F20FC")]
		public bool makePersistent;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2134", Offset = "0x7F2134")]
		public bool enableSpatializedAudio;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F216C", Offset = "0x7F216C")]
		public bool enableSpatializedFastOverride;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F21A4", Offset = "0x7F21A4")]
		public AudioMixer audioMixer;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F21DC", Offset = "0x7F21DC")]
		public AudioMixerGroup defaultMixerGroup;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2214", Offset = "0x7F2214")]
		public AudioMixerGroup reservedMixerGroup;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F224C", Offset = "0x7F224C")]
		public AudioMixerGroup voiceChatMixerGroup;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2284", Offset = "0x7F2284")]
		public bool verboseLogging;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F22BC", Offset = "0x7F22BC")]
		public int maxSoundEmitters;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F22F4", Offset = "0x7F22F4")]
		public float volumeSoundFX;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F232C", Offset = "0x7F232C")]
		public float soundFxFadeSecs;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float audioMinFallOffDistance;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float audioMaxFallOffDistance;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SoundGroup[] soundGroupings;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<string, SoundFX> soundFXCache;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager theAudioManager;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static FastList<string> names;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string[] defaultSound;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static SoundFX nullSound;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool hideWarnings;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float audioMaxFallOffDistanceSqr;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SoundEmitter[] soundEmitters;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FastList<SoundEmitter> playingEmitters;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FastList<SoundEmitter> nextFreeEmitters;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MixerSnapshot currentSnapshot;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject soundEmitterParent;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Transform staticListenerPosition;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static bool showPlayingEmitterCount;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private static bool forceShowEmitterCount;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private static bool soundEnabled;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly AnimationCurve defaultReverbZoneMix;

		[Token(Token = "0x170000F0")]
		public static bool enableSpatialization
		{
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0x142D198", Offset = "0x142D198", VA = "0x142D198")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F1")]
		public static AudioManager Instance
		{
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0x142D278", Offset = "0x142D278", VA = "0x142D278")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F2")]
		public static float NearFallOff
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0x142D2E0", Offset = "0x142D2E0", VA = "0x142D2E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000F3")]
		public static float FarFallOff
		{
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0x142D354", Offset = "0x142D354", VA = "0x142D354")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000F4")]
		public static AudioMixerGroup EmitterGroup
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0x142D3C8", Offset = "0x142D3C8", VA = "0x142D3C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		public static AudioMixerGroup ReservedGroup
		{
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0x142D43C", Offset = "0x142D43C", VA = "0x142D43C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		public static AudioMixerGroup VoipGroup
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0x142D4B0", Offset = "0x142D4B0", VA = "0x142D4B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F7")]
		public static bool SoundEnabled
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0x142F200", Offset = "0x142F200", VA = "0x142F200")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x142D524", Offset = "0x142D524", VA = "0x142D524")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x142D74C", Offset = "0x142D74C", VA = "0x142D74C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x142D528", Offset = "0x142D528", VA = "0x142D528")]
		private void Init()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x142E378", Offset = "0x142E378", VA = "0x142E378")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x142D8A4", Offset = "0x142D8A4", VA = "0x142D8A4")]
		private void RebuildSoundFXCache()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x142E99C", Offset = "0x142E99C", VA = "0x142E99C")]
		public static SoundFX FindSoundFX(string name, bool rebuildCache = false)
		{
			return null;
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x142EB1C", Offset = "0x142EB1C", VA = "0x142EB1C")]
		private static bool FindAudioManager()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x142ECB8", Offset = "0x142ECB8", VA = "0x142ECB8")]
		public static GameObject GetGameObject()
		{
			return null;
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x142EDB8", Offset = "0x142EDB8", VA = "0x142EDB8")]
		public static string NameMinusGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x142EE48", Offset = "0x142EE48", VA = "0x142EE48")]
		public static string[] GetSoundFXNames(string currentValue, out int currentIdx)
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x142DCF0", Offset = "0x142DCF0", VA = "0x142DCF0")]
		private void InitializeSoundSystem()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x142E37C", Offset = "0x142E37C", VA = "0x142E37C")]
		private void UpdateFreeEmitters()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x142F484", Offset = "0x142F484", VA = "0x142F484")]
		private string Fmt(int count)
		{
			return null;
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x142F588", Offset = "0x142F588", VA = "0x142F588")]
		private string FmtFree(int count)
		{
			return null;
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x142F690", Offset = "0x142F690", VA = "0x142F690")]
		private void OnPreSceneLoad()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x142F34C", Offset = "0x142F34C", VA = "0x142F34C")]
		private void ResetFreeEmitters()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x142F7FC", Offset = "0x142F7FC", VA = "0x142F7FC")]
		public static void FadeOutSoundChannel(int channel, float delaySecs, float fadeTime)
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x142F950", Offset = "0x142F950", VA = "0x142F950")]
		public static bool StopSound(int idx, bool fadeOut = true, bool stopReserved = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x142FB00", Offset = "0x142FB00", VA = "0x142FB00")]
		public static void FadeInSound(int idx, float fadeTime, float volume)
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x142CEB4", Offset = "0x142CEB4", VA = "0x142CEB4")]
		public static void FadeInSound(int idx, float fadeTime)
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x142D028", Offset = "0x142D028", VA = "0x142D028")]
		public static void FadeOutSound(int idx, float fadeTime)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x142FCAC", Offset = "0x142FCAC", VA = "0x142FCAC")]
		public static void StopAllSounds(bool fadeOut, bool stopReserved = false)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x142FD78", Offset = "0x142FD78", VA = "0x142FD78")]
		public void MuteAllSounds(bool mute, bool muteReserved = false)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x142FE0C", Offset = "0x142FE0C", VA = "0x142FE0C")]
		public void UnMuteAllSounds(bool unmute, bool unmuteReserved = false)
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x142FED0", Offset = "0x142FED0", VA = "0x142FED0")]
		public static float GetEmitterEndTime(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x142FF74", Offset = "0x142FF74", VA = "0x142FF74")]
		public static float SetEmitterTime(int idx, float time)
		{
			return default(float);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x1430054", Offset = "0x1430054", VA = "0x1430054")]
		public static int PlaySound(AudioClip clip, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitchVariance = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x1430B38", Offset = "0x1430B38", VA = "0x1430B38")]
		private static int FindFreeEmitter(EmitterChannel src, SoundPriority priority)
		{
			return default(int);
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x14311F8", Offset = "0x14311F8", VA = "0x14311F8")]
		public static int PlaySound(SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x14313D8", Offset = "0x14313D8", VA = "0x14313D8")]
		public static int PlaySoundAt(Vector3 position, SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x1431F4C", Offset = "0x1431F4C", VA = "0x1431F4C")]
		public static int PlayRandomSoundAt(Vector3 position, AudioClip[] clips, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x143025C", Offset = "0x143025C", VA = "0x143025C")]
		public static int PlaySoundAt(Vector3 position, AudioClip clip, float volume = 1f, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x143206C", Offset = "0x143206C", VA = "0x143206C")]
		public static void SetOnFinished(int emitterIdx, Action onFinished)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x1432150", Offset = "0x1432150", VA = "0x1432150")]
		public static void SetOnFinished(int emitterIdx, Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x1432240", Offset = "0x1432240", VA = "0x1432240")]
		public static void AttachSoundToParent(int idx, Transform parent)
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x14325F8", Offset = "0x14325F8", VA = "0x14325F8")]
		public static void DetachSoundFromParent(int idx)
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x14327F4", Offset = "0x14327F4", VA = "0x14327F4")]
		public static void DetachSoundsFromParent(SoundEmitter[] emitters, bool stopSounds = true)
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x1432910", Offset = "0x1432910", VA = "0x1432910")]
		public static void SetEmitterMixerGroup(int idx, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x1432AD8", Offset = "0x1432AD8", VA = "0x1432AD8")]
		public static MixerSnapshot GetActiveSnapshot()
		{
			return null;
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x1432BB0", Offset = "0x1432BB0", VA = "0x1432BB0")]
		public static void SetCurrentSnapshot(MixerSnapshot mixerSnapshot)
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x1432CE4", Offset = "0x1432CE4", VA = "0x1432CE4")]
		public static void BlendWithCurrentSnapshot(MixerSnapshot blendSnapshot, float weight, float blendTime = 0f)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x14330D0", Offset = "0x14330D0", VA = "0x14330D0")]
		public AudioManager()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public enum EmitterChannel
	{
		[Token(Token = "0x40009CA")]
		None = -1,
		[Token(Token = "0x40009CB")]
		Reserved,
		[Token(Token = "0x40009CC")]
		Any
	}
	[Serializable]
	[Token(Token = "0x20001B2")]
	public class MixerSnapshot
	{
		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioMixerSnapshot snapshot;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float transitionTime;

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x14335D4", Offset = "0x14335D4", VA = "0x14335D4")]
		public MixerSnapshot()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class MinMaxAttribute : PropertyAttribute
	{
		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minDefaultVal;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxDefaultVal;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float min;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float max;

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x1433578", Offset = "0x1433578", VA = "0x1433578")]
		public MinMaxAttribute(float minDefaultVal, float maxDefaultVal, float min, float max)
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class SoundEmitter : MonoBehaviour
	{
		[Token(Token = "0x200039D")]
		public enum FadeState
		{
			[Token(Token = "0x4001557")]
			Null,
			[Token(Token = "0x4001558")]
			FadingIn,
			[Token(Token = "0x4001559")]
			FadingOut,
			[Token(Token = "0x400155A")]
			Ducking
		}

		[Token(Token = "0x200039E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE58C", Offset = "0x7EE58C")]
		private sealed class <DelayedSyncTo>d__57 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400155B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400155C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400155D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundEmitter <>4__this;

			[Token(Token = "0x400155E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundEmitter other;

			[Token(Token = "0x400155F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float fadeTime;

			[Token(Token = "0x4001560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float toVolume;

			[Token(Token = "0x1700029A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001989")]
				[Address(RVA = "0xBB876C", Offset = "0xBB876C", VA = "0xBB876C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600198B")]
				[Address(RVA = "0xBB87D4", Offset = "0xBB87D4", VA = "0xBB87D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001986")]
			[Address(RVA = "0xBB8654", Offset = "0xBB8654", VA = "0xBB8654")]
			[DebuggerHidden]
			public <DelayedSyncTo>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x6001987")]
			[Address(RVA = "0xBB8680", Offset = "0xBB8680", VA = "0xBB8680", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001988")]
			[Address(RVA = "0xBB8684", Offset = "0xBB8684", VA = "0xBB8684", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600198A")]
			[Address(RVA = "0xBB8774", Offset = "0xBB8774", VA = "0xBB8774", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200039F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE59C", Offset = "0x7EE59C")]
		private sealed class <FadeSoundChannelTo>d__63 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001561")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundEmitter <>4__this;

			[Token(Token = "0x4001564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float toVolume;

			[Token(Token = "0x4001565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float fadeTime;

			[Token(Token = "0x4001566")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <start>5__2;

			[Token(Token = "0x4001567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <end>5__3;

			[Token(Token = "0x4001568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4001569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__5;

			[Token(Token = "0x1700029C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600198F")]
				[Address(RVA = "0xBB8C7C", Offset = "0xBB8C7C", VA = "0xBB8C7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001991")]
				[Address(RVA = "0xBB8CE4", Offset = "0xBB8CE4", VA = "0xBB8CE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600198C")]
			[Address(RVA = "0xBB8AE4", Offset = "0xBB8AE4", VA = "0xBB8AE4")]
			[DebuggerHidden]
			public <FadeSoundChannelTo>d__63(int <>1__state)
			{
			}

			[Token(Token = "0x600198D")]
			[Address(RVA = "0xBB8B10", Offset = "0xBB8B10", VA = "0xBB8B10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600198E")]
			[Address(RVA = "0xBB8B14", Offset = "0xBB8B14", VA = "0xBB8B14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001990")]
			[Address(RVA = "0xBB8C84", Offset = "0xBB8C84", VA = "0xBB8C84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE5AC", Offset = "0x7EE5AC")]
		private sealed class <FadeSoundChannel>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400156A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400156B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400156C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySecs;

			[Token(Token = "0x400156D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Fade fadeType;

			[Token(Token = "0x400156E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float defaultVolume;

			[Token(Token = "0x400156F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SoundEmitter <>4__this;

			[Token(Token = "0x4001570")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float fadeTime;

			[Token(Token = "0x4001571")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <start>5__2;

			[Token(Token = "0x4001572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <end>5__3;

			[Token(Token = "0x4001573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private bool <restartPlay>5__4;

			[Token(Token = "0x4001574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <startTime>5__5;

			[Token(Token = "0x4001575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <elapsedTime>5__6;

			[Token(Token = "0x1700029E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001995")]
				[Address(RVA = "0xBB8A74", Offset = "0xBB8A74", VA = "0xBB8A74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001997")]
				[Address(RVA = "0xBB8ADC", Offset = "0xBB8ADC", VA = "0xBB8ADC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001992")]
			[Address(RVA = "0xBB87DC", Offset = "0xBB87DC", VA = "0xBB87DC")]
			[DebuggerHidden]
			public <FadeSoundChannel>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x6001993")]
			[Address(RVA = "0xBB8808", Offset = "0xBB8808", VA = "0xBB8808", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001994")]
			[Address(RVA = "0xBB880C", Offset = "0xBB880C", VA = "0xBB880C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001996")]
			[Address(RVA = "0xBB8A7C", Offset = "0xBB8A7C", VA = "0xBB8A7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EmitterChannel channel;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disableSpatialization;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FadeState state;

		[NonSerialized]
		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public AudioSource audioSource;

		[NonSerialized]
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public SoundPriority priority;

		[NonSerialized]
		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public ONSPAudioSource osp;

		[NonSerialized]
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public float endPlayTime;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lastParentTransform;

		[NonSerialized]
		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float defaultVolume;

		[NonSerialized]
		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Transform defaultParent;

		[NonSerialized]
		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public int originalIdx;

		[NonSerialized]
		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public Action onFinished;

		[NonSerialized]
		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Action<object> onFinishedObject;

		[NonSerialized]
		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public object onFinishedParam;

		[NonSerialized]
		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public SoundGroup playingSoundGroup;

		[Token(Token = "0x170000F8")]
		public float volume
		{
			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0x1431F30", Offset = "0x1431F30", VA = "0x1431F30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0x1433674", Offset = "0x1433674", VA = "0x1433674")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public float pitch
		{
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0x1433690", Offset = "0x1433690", VA = "0x1433690")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0x14336AC", Offset = "0x14336AC", VA = "0x14336AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public AudioClip clip
		{
			[Token(Token = "0x6000A52")]
			[Address(RVA = "0x14336C8", Offset = "0x14336C8", VA = "0x14336C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0x14336E4", Offset = "0x14336E4", VA = "0x14336E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public float time
		{
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0x1433700", Offset = "0x1433700", VA = "0x1433700")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A55")]
			[Address(RVA = "0x1430038", Offset = "0x1430038", VA = "0x1430038")]
			set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public float length
		{
			[Token(Token = "0x6000A56")]
			[Address(RVA = "0x143371C", Offset = "0x143371C", VA = "0x143371C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FD")]
		public bool loop
		{
			[Token(Token = "0x6000A57")]
			[Address(RVA = "0x14337D4", Offset = "0x14337D4", VA = "0x14337D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A58")]
			[Address(RVA = "0x14337F0", Offset = "0x14337F0", VA = "0x14337F0")]
			set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public bool mute
		{
			[Token(Token = "0x6000A59")]
			[Address(RVA = "0x1433810", Offset = "0x1433810", VA = "0x1433810")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A5A")]
			[Address(RVA = "0x143382C", Offset = "0x143382C", VA = "0x143382C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public AudioVelocityUpdateMode velocityUpdateMode
		{
			[Token(Token = "0x6000A5B")]
			[Address(RVA = "0x143384C", Offset = "0x143384C", VA = "0x143384C")]
			get
			{
				return default(AudioVelocityUpdateMode);
			}
			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0x1433868", Offset = "0x1433868", VA = "0x1433868")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public bool isPlaying
		{
			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0x1433884", Offset = "0x1433884", VA = "0x1433884")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x14338A0", Offset = "0x14338A0", VA = "0x14338A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x1431F18", Offset = "0x1431F18", VA = "0x1431F18")]
		public void SetPlayingSoundGroup(SoundGroup soundGroup)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x1433A1C", Offset = "0x1433A1C", VA = "0x1433A1C")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x1432238", Offset = "0x1432238", VA = "0x1432238")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x1433A24", Offset = "0x1433A24", VA = "0x1433A24")]
		public void SetChannel(int _channel)
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x1433A2C", Offset = "0x1433A2C", VA = "0x1433A2C")]
		public void SetDefaultParent(Transform parent)
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x1432A30", Offset = "0x1432A30", VA = "0x1432A30")]
		public void SetAudioMixer(AudioMixerGroup _mixer)
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x142F418", Offset = "0x142F418", VA = "0x142F418")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x1433A34", Offset = "0x1433A34", VA = "0x1433A34")]
		public void Play()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x1433A94", Offset = "0x1433A94", VA = "0x1433A94")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x142F268", Offset = "0x142F268", VA = "0x142F268")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x1433ACC", Offset = "0x1433ACC", VA = "0x1433ACC")]
		private int GetSampleTime()
		{
			return default(int);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x14324FC", Offset = "0x14324FC", VA = "0x14324FC")]
		public void ParentTo(Transform parent)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x143273C", Offset = "0x143273C", VA = "0x143273C")]
		public void DetachFromParent()
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x142F7BC", Offset = "0x142F7BC", VA = "0x142F7BC")]
		public void ResetParent(Transform parent)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x1433B24", Offset = "0x1433B24", VA = "0x1433B24")]
		public void SyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x1433B50", Offset = "0x1433B50", VA = "0x1433B50")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB658", Offset = "0x7FB658")]
		private IEnumerator DelayedSyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
			return null;
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x1433BE0", Offset = "0x1433BE0", VA = "0x1433BE0")]
		public void FadeTo(float fadeTime, float toVolume)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x142FBB8", Offset = "0x142FBB8", VA = "0x142FBB8")]
		public void FadeIn(float fadeTime, float defaultVolume)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x142FC34", Offset = "0x142FC34", VA = "0x142FC34")]
		public void FadeIn(float fadeTime)
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x142FA68", Offset = "0x142FA68", VA = "0x142FA68")]
		public void FadeOut(float fadeTime)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x142F8B4", Offset = "0x142F8B4", VA = "0x142F8B4")]
		public void FadeOutDelayed(float delayedSecs, float fadeTime)
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x1433C48", Offset = "0x1433C48", VA = "0x1433C48")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB6BC", Offset = "0x7FB6BC")]
		private IEnumerator FadeSoundChannelTo(float fadeTime, float toVolume)
		{
			return null;
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x1433CCC", Offset = "0x1433CCC", VA = "0x1433CCC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB720", Offset = "0x7FB720")]
		private IEnumerator FadeSoundChannel(float delaySecs, float fadeTime, Fade fadeType, float defaultVolume)
		{
			return null;
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x1433D74", Offset = "0x1433D74", VA = "0x1433D74")]
		public SoundEmitter()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public enum SoundFXNext
	{
		[Token(Token = "0x40009E3")]
		Random,
		[Token(Token = "0x40009E4")]
		Sequential
	}
	[Token(Token = "0x20001B6")]
	public enum FreqHint
	{
		[Token(Token = "0x40009E6")]
		None,
		[Token(Token = "0x40009E7")]
		Wide,
		[Token(Token = "0x40009E8")]
		Narrow
	}
	[Token(Token = "0x20001B7")]
	public enum SoundPriority
	{
		[Token(Token = "0x40009EA")]
		VeryLow = -2,
		[Token(Token = "0x40009EB")]
		Low,
		[Token(Token = "0x40009EC")]
		Default,
		[Token(Token = "0x40009ED")]
		High,
		[Token(Token = "0x40009EE")]
		VeryHigh
	}
	[Serializable]
	[Token(Token = "0x20001B8")]
	public class OSPProps
	{
		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2414", Offset = "0x7F2414")]
		public bool enableSpatialization;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F244C", Offset = "0x7F244C")]
		public bool useFastOverride;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2484", Offset = "0x7F2484")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F2484", Offset = "0x7F2484")]
		public float gain;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F24D8", Offset = "0x7F24D8")]
		public bool enableInvSquare;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2510", Offset = "0x7F2510")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F2510", Offset = "0x7F2510")]
		public float volumetric;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2568", Offset = "0x7F2568")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x7F2568", Offset = "0x7F2568")]
		public Vector2 invSquareFalloff;

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x14335E4", Offset = "0x14335E4", VA = "0x14335E4")]
		public OSPProps()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B9")]
	public class SoundFX
	{
		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F25C8", Offset = "0x7F25C8")]
		public string name;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2600", Offset = "0x7F2600")]
		public SoundFXNext playback;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2638", Offset = "0x7F2638")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F2638", Offset = "0x7F2638")]
		public float volume;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F268C", Offset = "0x7F268C")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x7F268C", Offset = "0x7F268C")]
		public Vector2 pitchVariance;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F26E8", Offset = "0x7F26E8")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x7F26E8", Offset = "0x7F26E8")]
		public Vector2 falloffDistance;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2748", Offset = "0x7F2748")]
		public AudioRolloffMode falloffCurve;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2780", Offset = "0x7F2780")]
		public AnimationCurve volumeFalloffCurve;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F27B8", Offset = "0x7F27B8")]
		public AnimationCurve reverbZoneMix;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F27F0", Offset = "0x7F27F0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F27F0", Offset = "0x7F27F0")]
		public float spread;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2848", Offset = "0x7F2848")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F2848", Offset = "0x7F2848")]
		public float pctChanceToPlay;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F289C", Offset = "0x7F289C")]
		public SoundPriority priority;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F28D4", Offset = "0x7F28D4")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0x7F28D4", Offset = "0x7F28D4")]
		public Vector2 delay;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2930", Offset = "0x7F2930")]
		public bool looping;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OSPProps ospProps;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F2968", Offset = "0x7F2968")]
		public AudioClip[] soundClips;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool visibilityToggle;

		[NonSerialized]
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SoundGroup soundGroup;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int lastIdx;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int playingIdx;

		[Token(Token = "0x17000101")]
		public int Length
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0xBB91DC", Offset = "0xBB91DC", VA = "0xBB91DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000102")]
		public bool IsValid
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xBB91F8", Offset = "0xBB91F8", VA = "0xBB91F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000103")]
		public SoundGroup Group
		{
			[Token(Token = "0x6000A7B")]
			[Address(RVA = "0xBB929C", Offset = "0xBB929C", VA = "0xBB929C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0xBB92A4", Offset = "0xBB92A4", VA = "0xBB92A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public float MaxFalloffDistSquared
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0xBB92AC", Offset = "0xBB92AC", VA = "0xBB92AC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000105")]
		public float GroupVolumeOverride
		{
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0xBB92B8", Offset = "0xBB92B8", VA = "0xBB92B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xBB8CEC", Offset = "0xBB8CEC", VA = "0xBB8CEC")]
		public SoundFX()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xBB92D0", Offset = "0xBB92D0", VA = "0xBB92D0")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xBB93A0", Offset = "0xBB93A0", VA = "0xBB93A0")]
		public AudioMixerGroup GetMixerGroup(AudioMixerGroup defaultMixerGroup)
		{
			return null;
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xBB9440", Offset = "0xBB9440", VA = "0xBB9440")]
		public bool ReachedGroupPlayLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xBB9488", Offset = "0xBB9488", VA = "0xBB9488")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xBB9584", Offset = "0xBB9584", VA = "0xBB9584")]
		public float GetPitch()
		{
			return default(float);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xBB9590", Offset = "0xBB9590", VA = "0xBB9590")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xBB9670", Offset = "0xBB9670", VA = "0xBB9670")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xBB9788", Offset = "0xBB9788", VA = "0xBB9788")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xBB9818", Offset = "0xBB9818", VA = "0xBB9818")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xBB98B0", Offset = "0xBB98B0", VA = "0xBB98B0")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xBB9940", Offset = "0xBB9940", VA = "0xBB9940")]
		public void AttachToParent(Transform parent)
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xBB99D0", Offset = "0xBB99D0", VA = "0xBB99D0")]
		public void DetachFromParent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BA")]
	public class SoundFXRef
	{
		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string soundFXName;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool initialized;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SoundFX soundFXCached;

		[Token(Token = "0x17000106")]
		public SoundFX soundFX
		{
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xBB9A4C", Offset = "0xBB9A4C", VA = "0xBB9A4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000107")]
		public string name
		{
			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0xBB9B48", Offset = "0xBB9B48", VA = "0xBB9B48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xBB9B50", Offset = "0xBB9B50", VA = "0xBB9B50")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public int Length
		{
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0xBB9B58", Offset = "0xBB9B58", VA = "0xBB9B58")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000109")]
		public bool IsValid
		{
			[Token(Token = "0x6000A90")]
			[Address(RVA = "0xBB9B9C", Offset = "0xBB9B9C", VA = "0xBB9B9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xBB9A7C", Offset = "0xBB9A7C", VA = "0xBB9A7C")]
		private void Init()
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xBB9BD4", Offset = "0xBB9BD4", VA = "0xBB9BD4")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xBB9C0C", Offset = "0xBB9C0C", VA = "0xBB9C0C")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xBB9C4C", Offset = "0xBB9C4C", VA = "0xBB9C4C")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xBB9C94", Offset = "0xBB9C94", VA = "0xBB9C94")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volume = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xBB9D14", Offset = "0xBB9D14", VA = "0xBB9D14")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xBB9D54", Offset = "0xBB9D54", VA = "0xBB9D54")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xBB9DA4", Offset = "0xBB9DA4", VA = "0xBB9DA4")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xBB9DDC", Offset = "0xBB9DDC", VA = "0xBB9DDC")]
		public void AttachToParent(Transform parent)
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xBB9E1C", Offset = "0xBB9E1C", VA = "0xBB9E1C")]
		public void DetachFromParent()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xBB9E54", Offset = "0xBB9E54", VA = "0xBB9E54")]
		public SoundFXRef()
		{
		}
	}
}
namespace UnityIME
{
	[Token(Token = "0x20001BB")]
	public class EventButton : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerClickHandler
	{
		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xC359B0", Offset = "0xC359B0", VA = "0xC359B0", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xC35AA0", Offset = "0xC35AA0", VA = "0xC35AA0", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xC35B90", Offset = "0xC35B90", VA = "0xC35B90", Slot = "6")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xC35CE8", Offset = "0xC35CE8", VA = "0xC35CE8")]
		public EventButton()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public static class EnumUtil
	{
		[Token(Token = "0x6000A9F")]
		public static IEnumerable<T> GetValues<T>()
		{
			return null;
		}
	}
	[Token(Token = "0x20001BD")]
	public enum KeyboardLanguage
	{
		[Token(Token = "0x4000A0C")]
		English,
		[Token(Token = "0x4000A0D")]
		TraditionalChinese,
		[Token(Token = "0x4000A0E")]
		Symbol
	}
	[Token(Token = "0x20001BE")]
	public class KeyboardManager
	{
		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string LOG_TAG;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Hashtable KeyboardsTable;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static KeyboardManager instance;

		[Token(Token = "0x1700010A")]
		public static KeyboardManager Instance
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xC36548", Offset = "0xC36548", VA = "0xC36548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xC3724C", Offset = "0xC3724C", VA = "0xC3724C")]
		private KeyboardManager()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xC3757C", Offset = "0xC3757C", VA = "0xC3757C", Slot = "1")]
		~KeyboardManager()
		{
		}

		[Token(Token = "0x6000AA3")]
		public void RegisterKeyboard<TEnum>(KeyboardLanguage lang, TEnum type, GameObject keyboard) where TEnum : struct, IComparable, IFormattable, IConvertible
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xC36604", Offset = "0xC36604", VA = "0xC36604")]
		public bool IsLocaleRegistered(KeyboardLanguage lang)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA5")]
		public GameObject GetKeyboard<TEnum>(KeyboardLanguage lang, TEnum type) where TEnum : struct, IComparable, IFormattable, IConvertible
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		public List<CKeyboard<TEnum>> GetLocaleKeyboards<TEnum>(KeyboardLanguage lang) where TEnum : struct, IComparable, IFormattable, IConvertible
		{
			return null;
		}

		[Token(Token = "0x6000AA7")]
		public bool IsKeyboardActive<TEnum>(KeyboardLanguage lang, TEnum type) where TEnum : struct, IComparable, IFormattable, IConvertible
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA8")]
		public void ActivateKeyboard<TEnum>(KeyboardLanguage lang, TEnum type, bool active) where TEnum : struct, IComparable, IFormattable, IConvertible
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xC36188", Offset = "0xC36188", VA = "0xC36188")]
		public void DeactivateAllKeyboards()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BF")]
	public class KeyboardScript : MonoBehaviour
	{
		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyboardLanguage KBLan;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Type_ENG EngType;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Type_CHT ChtType;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Type_SYM SymType;

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xC3792C", Offset = "0xC3792C", VA = "0xC3792C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xC37A5C", Offset = "0xC37A5C", VA = "0xC37A5C")]
		public KeyboardScript()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class CKeyboard<T>
	{
		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T Type;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject Keyboard;

		[Token(Token = "0x6000AAD")]
		public CKeyboard(T type, GameObject go)
		{
		}

		[Token(Token = "0x6000AAE")]
		~CKeyboard()
		{
		}

		[Token(Token = "0x6000AAF")]
		public static bool ValidateKeyboard(CKeyboard<T> kb)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C1")]
	public abstract class AbstractKeyboard<TEnum> where TEnum : struct, IComparable, IFormattable, IConvertible
	{
		[Token(Token = "0x6000AB0")]
		protected AbstractKeyboard()
		{
		}

		[Token(Token = "0x6000AB1")]
		public abstract void RegisterKeyboard(TEnum type, GameObject keyboard);

		[Token(Token = "0x6000AB2")]
		public abstract GameObject GetKeyboard(TEnum type);

		[Token(Token = "0x6000AB3")]
		public abstract List<CKeyboard<TEnum>> GetKeyboardList();

		[Token(Token = "0x6000AB4")]
		public abstract void ActivateKeyboard(TEnum type, bool active);

		[Token(Token = "0x6000AB5")]
		public abstract bool IsKeyboardActive(TEnum type);
	}
	[Token(Token = "0x20001C2")]
	public enum Type_ENG
	{
		[Token(Token = "0x4000A19")]
		AlphabetKeyboard,
		[Token(Token = "0x4000A1A")]
		AlphabetKeyboardCapital
	}
	[Token(Token = "0x20001C3")]
	public sealed class EnglishKeyboard : AbstractKeyboard<Type_ENG>
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<CKeyboard<Type_ENG>> KeyboardList;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static EnglishKeyboard instance;

		[Token(Token = "0x1700010B")]
		public static EnglishKeyboard Instance
		{
			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0xC35404", Offset = "0xC35404", VA = "0xC35404")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xC3537C", Offset = "0xC3537C", VA = "0xC3537C")]
		public EnglishKeyboard()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xC353F8", Offset = "0xC353F8", VA = "0xC353F8", Slot = "1")]
		~EnglishKeyboard()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xC354C4", Offset = "0xC354C4", VA = "0xC354C4", Slot = "4")]
		public override void RegisterKeyboard(Type_ENG type, GameObject keyboard)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xC3555C", Offset = "0xC3555C", VA = "0xC3555C", Slot = "5")]
		public override GameObject GetKeyboard(Type_ENG type)
		{
			return null;
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xC3566C", Offset = "0xC3566C", VA = "0xC3566C", Slot = "6")]
		public override List<CKeyboard<Type_ENG>> GetKeyboardList()
		{
			return null;
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xC356C4", Offset = "0xC356C4", VA = "0xC356C4", Slot = "7")]
		public override void ActivateKeyboard(Type_ENG type, bool active)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xC35788", Offset = "0xC35788", VA = "0xC35788", Slot = "8")]
		public override bool IsKeyboardActive(Type_ENG type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xC35848", Offset = "0xC35848", VA = "0xC35848")]
		public bool HasKeyboardRegistered()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xC358A0", Offset = "0xC358A0", VA = "0xC358A0")]
		public void DeactivateAllKeyboard()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public enum Type_SYM
	{
		[Token(Token = "0x4000A1E")]
		PunctuationKeyboard,
		[Token(Token = "0x4000A1F")]
		PunctuationKeyboardShift
	}
	[Token(Token = "0x20001C5")]
	public sealed class SymbolKeyboard : AbstractKeyboard<Type_SYM>
	{
		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<CKeyboard<Type_SYM>> KeyboardList;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SymbolKeyboard instance;

		[Token(Token = "0x1700010C")]
		public static SymbolKeyboard Instance
		{
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0xC374BC", Offset = "0xC374BC", VA = "0xC374BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xC38DF0", Offset = "0xC38DF0", VA = "0xC38DF0")]
		public SymbolKeyboard()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xC38E6C", Offset = "0xC38E6C", VA = "0xC38E6C", Slot = "1")]
		~SymbolKeyboard()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xC38E78", Offset = "0xC38E78", VA = "0xC38E78", Slot = "4")]
		public override void RegisterKeyboard(Type_SYM type, GameObject keyboard)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xC38F10", Offset = "0xC38F10", VA = "0xC38F10", Slot = "5")]
		public override GameObject GetKeyboard(Type_SYM type)
		{
			return null;
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xC39020", Offset = "0xC39020", VA = "0xC39020", Slot = "6")]
		public override List<CKeyboard<Type_SYM>> GetKeyboardList()
		{
			return null;
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xC39078", Offset = "0xC39078", VA = "0xC39078", Slot = "7")]
		public override void ActivateKeyboard(Type_SYM type, bool active)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xC3913C", Offset = "0xC3913C", VA = "0xC3913C", Slot = "8")]
		public override bool IsKeyboardActive(Type_SYM type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xC37654", Offset = "0xC37654", VA = "0xC37654")]
		public bool HasKeyboardRegistered()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xC377B8", Offset = "0xC377B8", VA = "0xC377B8")]
		public void DeactivateAllKeyboard()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public enum Type_CHT
	{
		[Token(Token = "0x4000A23")]
		PhoneticKeyboard
	}
	[Token(Token = "0x20001C7")]
	public sealed class TraditionalChineseKeyboard : AbstractKeyboard<Type_CHT>
	{
		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<CKeyboard<Type_CHT>> KeyboardList;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TraditionalChineseKeyboard instance;

		[Token(Token = "0x1700010D")]
		public static TraditionalChineseKeyboard Instance
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0xC373FC", Offset = "0xC373FC", VA = "0xC373FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xC39200", Offset = "0xC39200", VA = "0xC39200")]
		public TraditionalChineseKeyboard()
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xC3927C", Offset = "0xC3927C", VA = "0xC3927C", Slot = "1")]
		~TraditionalChineseKeyboard()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xC39288", Offset = "0xC39288", VA = "0xC39288", Slot = "4")]
		public override void RegisterKeyboard(Type_CHT type, GameObject keyboard)
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xC39320", Offset = "0xC39320", VA = "0xC39320", Slot = "5")]
		public override GameObject GetKeyboard(Type_CHT type)
		{
			return null;
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xC39430", Offset = "0xC39430", VA = "0xC39430", Slot = "6")]
		public override List<CKeyboard<Type_CHT>> GetKeyboardList()
		{
			return null;
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xC39488", Offset = "0xC39488", VA = "0xC39488", Slot = "7")]
		public override void ActivateKeyboard(Type_CHT type, bool active)
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xC3954C", Offset = "0xC3954C", VA = "0xC3954C", Slot = "8")]
		public override bool IsKeyboardActive(Type_CHT type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xC375FC", Offset = "0xC375FC", VA = "0xC375FC")]
		public bool HasKeyboardRegistered()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xC376AC", Offset = "0xC376AC", VA = "0xC376AC")]
		public void DeactivateAllKeyboard()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public sealed class English : Locale
	{
		[Token(Token = "0x20003A1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE5BC", Offset = "0x7EE5BC")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4001576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string s;

			[Token(Token = "0x4001577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public English <>4__this;

			[Token(Token = "0x6001998")]
			[Address(RVA = "0xC34FAC", Offset = "0xC34FAC", VA = "0xC34FAC")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001999")]
			[Address(RVA = "0xC3532C", Offset = "0xC3532C", VA = "0xC3532C")]
			internal void <SetAlphabetKeyboard>b__1()
			{
			}
		}

		[Token(Token = "0x20003A2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE5CC", Offset = "0x7EE5CC")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x4001578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string s;

			[Token(Token = "0x4001579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public English <>4__this;

			[Token(Token = "0x600199A")]
			[Address(RVA = "0xC34FB4", Offset = "0xC34FB4", VA = "0xC34FB4")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x600199B")]
			[Address(RVA = "0xC35354", Offset = "0xC35354", VA = "0xC35354")]
			internal void <SetCapitalAlphabetKeyboard>b__1()
			{
			}
		}

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string LOG_TAG;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<CKeyboard<Type_ENG>> Locale_Keyboards;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Type_ENG curKeyboard;

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xC340F4", Offset = "0xC340F4", VA = "0xC340F4")]
		public English(InputFieldManager ifm, bool ispw)
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xC345E8", Offset = "0xC345E8", VA = "0xC345E8", Slot = "1")]
		~English()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xC34608", Offset = "0xC34608", VA = "0xC34608", Slot = "7")]
		public override void SetupKeyboards()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xC34724", Offset = "0xC34724", VA = "0xC34724")]
		private void SetAlphabetKeyboard(GameObject keyboard)
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xC34B68", Offset = "0xC34B68", VA = "0xC34B68")]
		private void SetCapitalAlphabetKeyboard(GameObject keyboard)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xC34FBC", Offset = "0xC34FBC", VA = "0xC34FBC")]
		private void ActivateKeyboard(Type_ENG kb)
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xC35034", Offset = "0xC35034", VA = "0xC35034")]
		private void DeactivateKeyboard(Type_ENG kb)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xC350A4", Offset = "0xC350A4", VA = "0xC350A4", Slot = "6")]
		public override void ActivateCurrentKeyboard()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xC350B8", Offset = "0xC350B8", VA = "0xC350B8", Slot = "5")]
		public override void OnShiftKeyboard()
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xC3527C", Offset = "0xC3527C", VA = "0xC3527C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB784", Offset = "0x7FB784")]
		private void <SetAlphabetKeyboard>b__6_0()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xC352D4", Offset = "0xC352D4", VA = "0xC352D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB794", Offset = "0x7FB794")]
		private void <SetCapitalAlphabetKeyboard>b__7_0()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	public class InputFieldManager : MonoBehaviour, ISubmitHandler, IEventSystemHandler, IPointerClickHandler
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string LOG_TAG;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyboardLanguage[] LocaleArray;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsPassword;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Target;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public string storedPasswd;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private KeyboardManager KMInstance;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MyInputField myIF;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Hashtable htLocaleArray;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool initialized;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private KeyboardLanguage curLocale;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private KeyboardLanguage originLocale;

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xC35CF0", Offset = "0xC35CF0", VA = "0xC35CF0")]
		public void UpdateTargetText(string str)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xC35D74", Offset = "0xC35D74", VA = "0xC35D74")]
		private bool ValidateInputField()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xC35E18", Offset = "0xC35E18", VA = "0xC35E18")]
		private void EnableLocale(KeyboardLanguage kl)
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xC35EE8", Offset = "0xC35EE8", VA = "0xC35EE8")]
		public void AlterKeyboard()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xC36248", Offset = "0xC36248", VA = "0xC36248")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xC3624C", Offset = "0xC3624C", VA = "0xC3624C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xC36250", Offset = "0xC36250", VA = "0xC36250")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xC36254", Offset = "0xC36254", VA = "0xC36254")]
		private void SetupKeyboards()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xC3639C", Offset = "0xC3639C", VA = "0xC3639C")]
		private void InitializeKeyboards()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xC36B10", Offset = "0xC36B10", VA = "0xC36B10", Slot = "4")]
		public void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xC36E4C", Offset = "0xC36E4C", VA = "0xC36E4C", Slot = "5")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xC37188", Offset = "0xC37188", VA = "0xC37188")]
		public InputFieldManager()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class Locale
	{
		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string LOG_TAG;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected KeyboardManager KMInstance;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected InputFieldManager Parent;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool isPassword;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected MyInputField myInputField;

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xC34508", Offset = "0xC34508", VA = "0xC34508")]
		public Locale(InputFieldManager ifm, bool ispw)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xC345F8", Offset = "0xC345F8", VA = "0xC345F8", Slot = "1")]
		~Locale()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xC37A64", Offset = "0xC37A64", VA = "0xC37A64")]
		private void FocusOnInputField()
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xC37B44", Offset = "0xC37B44", VA = "0xC37B44", Slot = "4")]
		public virtual void OnInputText(string s)
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xC37C40", Offset = "0xC37C40", VA = "0xC37C40")]
		public void OnBackspaceText()
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xC37D38", Offset = "0xC37D38", VA = "0xC37D38")]
		public void OnClearText()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xC37DF8", Offset = "0xC37DF8", VA = "0xC37DF8")]
		public void OnSubmitText()
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xC37EB4", Offset = "0xC37EB4", VA = "0xC37EB4")]
		public void OnAlterKeyboard()
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xC37F44", Offset = "0xC37F44", VA = "0xC37F44")]
		public void OnCloseKeyboard()
		{
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xC37F5C", Offset = "0xC37F5C", VA = "0xC37F5C", Slot = "5")]
		public virtual void OnShiftKeyboard()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xC37F60", Offset = "0xC37F60", VA = "0xC37F60", Slot = "6")]
		public virtual void ActivateCurrentKeyboard()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xC37F64", Offset = "0xC37F64", VA = "0xC37F64", Slot = "7")]
		public virtual void SetupKeyboards()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public sealed class Symbol : Locale
	{
		[Token(Token = "0x20003A3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE5DC", Offset = "0x7EE5DC")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x400157A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string s;

			[Token(Token = "0x400157B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Symbol <>4__this;

			[Token(Token = "0x600199C")]
			[Address(RVA = "0xC38A20", Offset = "0xC38A20", VA = "0xC38A20")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x600199D")]
			[Address(RVA = "0xC38DA0", Offset = "0xC38DA0", VA = "0xC38DA0")]
			internal void <SetAlphabetKeyboard>b__1()
			{
			}
		}

		[Token(Token = "0x20003A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE5EC", Offset = "0x7EE5EC")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x400157C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string s;

			[Token(Token = "0x400157D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Symbol <>4__this;

			[Token(Token = "0x600199E")]
			[Address(RVA = "0xC38A28", Offset = "0xC38A28", VA = "0xC38A28")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x600199F")]
			[Address(RVA = "0xC38DC8", Offset = "0xC38DC8", VA = "0xC38DC8")]
			internal void <SetCapitalAlphabetKeyboard>b__1()
			{
			}
		}

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string LOG_TAG;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<CKeyboard<Type_SYM>> Locale_Keyboards;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Type_SYM curKeyboard;

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xC366FC", Offset = "0xC366FC", VA = "0xC366FC")]
		public Symbol(InputFieldManager ifm, bool ispw)
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xC3806C", Offset = "0xC3806C", VA = "0xC3806C", Slot = "1")]
		~Symbol()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xC3807C", Offset = "0xC3807C", VA = "0xC3807C", Slot = "7")]
		public override void SetupKeyboards()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xC38198", Offset = "0xC38198", VA = "0xC38198")]
		private void SetAlphabetKeyboard(GameObject keyboard)
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xC385DC", Offset = "0xC385DC", VA = "0xC385DC")]
		private void SetCapitalAlphabetKeyboard(GameObject keyboard)
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xC38A30", Offset = "0xC38A30", VA = "0xC38A30")]
		private void ActivateKeyboard(Type_SYM kb)
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xC38AA8", Offset = "0xC38AA8", VA = "0xC38AA8")]
		private void DeactivateKeyboard(Type_SYM kb)
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xC38B18", Offset = "0xC38B18", VA = "0xC38B18", Slot = "6")]
		public override void ActivateCurrentKeyboard()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xC38B2C", Offset = "0xC38B2C", VA = "0xC38B2C", Slot = "5")]
		public override void OnShiftKeyboard()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xC38CF0", Offset = "0xC38CF0", VA = "0xC38CF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB7A4", Offset = "0x7FB7A4")]
		private void <SetAlphabetKeyboard>b__6_0()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xC38D48", Offset = "0xC38D48", VA = "0xC38D48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FB7B4", Offset = "0x7FB7B4")]
		private void <SetCapitalAlphabetKeyboard>b__7_0()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class MyInputField : InputField
	{
		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public bool Activated;

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xC37B34", Offset = "0xC37B34", VA = "0xC37B34")]
		public new void ActivateInputField()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xC37FC4", Offset = "0xC37FC4", VA = "0xC37FC4", Slot = "59")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xC38004", Offset = "0xC38004", VA = "0xC38004")]
		public MyInputField()
		{
		}
	}
}
namespace DigitalOpus.MB.Core
{
	[Token(Token = "0x20001CD")]
	public class MBVersionConcrete : MBVersionInterface
	{
		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 _HALF_UV;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x12D4014", Offset = "0x12D4014", VA = "0x12D4014", Slot = "4")]
		public string version()
		{
			return null;
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x12D405C", Offset = "0x12D405C", VA = "0x12D405C", Slot = "5")]
		public int GetMajorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x12D4108", Offset = "0x12D4108", VA = "0x12D4108", Slot = "6")]
		public int GetMinorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x12D41B8", Offset = "0x12D41B8", VA = "0x12D41B8", Slot = "7")]
		public bool GetActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x12D41D4", Offset = "0x12D41D4", VA = "0x12D41D4", Slot = "8")]
		public void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x12D41F4", Offset = "0x12D41F4", VA = "0x12D41F4", Slot = "9")]
		public void SetActiveRecursively(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x12D4214", Offset = "0x12D4214", VA = "0x12D4214", Slot = "10")]
		public UnityEngine.Object[] FindSceneObjectsOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x12D427C", Offset = "0x12D427C", VA = "0x12D427C", Slot = "18")]
		public void OptimizeMesh(Mesh m)
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x12D4280", Offset = "0x12D4280", VA = "0x12D4280", Slot = "11")]
		public bool IsRunningAndMeshNotReadWriteable(Mesh m)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x12D42CC", Offset = "0x12D42CC", VA = "0x12D42CC")]
		public Vector2[] GetMeshUV1s(Mesh m, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x12D4580", Offset = "0x12D4580", VA = "0x12D4580", Slot = "12")]
		public Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x12D4850", Offset = "0x12D4850", VA = "0x12D4850", Slot = "13")]
		public void MeshClear(Mesh m, bool t)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x12D4870", Offset = "0x12D4870", VA = "0x12D4870", Slot = "14")]
		public void MeshAssignUV3(Mesh m, Vector2[] uv3s)
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x12D4890", Offset = "0x12D4890", VA = "0x12D4890", Slot = "15")]
		public void MeshAssignUV4(Mesh m, Vector2[] uv4s)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x12D48B0", Offset = "0x12D48B0", VA = "0x12D48B0", Slot = "16")]
		public Vector4 GetLightmapTilingOffset(Renderer r)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x12D48CC", Offset = "0x12D48CC", VA = "0x12D48CC", Slot = "17")]
		public Transform[] GetBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x12D4A30", Offset = "0x12D4A30", VA = "0x12D4A30", Slot = "19")]
		public int GetBlendShapeFrameCount(Mesh m, int shapeIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x12D4A50", Offset = "0x12D4A50", VA = "0x12D4A50", Slot = "20")]
		public float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x12D4A74", Offset = "0x12D4A74", VA = "0x12D4A74", Slot = "21")]
		public void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x12D4AA4", Offset = "0x12D4AA4", VA = "0x12D4AA4", Slot = "22")]
		public void ClearBlendShapes(Mesh m)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x12D4AC0", Offset = "0x12D4AC0", VA = "0x12D4AC0", Slot = "23")]
		public void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x12D4AEC", Offset = "0x12D4AEC", VA = "0x12D4AEC")]
		public MBVersionConcrete()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001CE")]
	public class GrouperData
	{
		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool clusterOnLMIndex;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool clusterByLODLevel;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 origin;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 cellSize;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int pieNumSegments;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 pieAxis;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int height;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxDistBetweenClusters;

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xDE1B84", Offset = "0xDE1B84", VA = "0xDE1B84")]
		public GrouperData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001CF")]
	public abstract class MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x20003A5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE5FC", Offset = "0x7EE5FC")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x400157E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Renderer r;

			[Token(Token = "0x400157F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Predicate<Renderer> <>9__0;

			[Token(Token = "0x60019A0")]
			[Address(RVA = "0x137656C", Offset = "0x137656C", VA = "0x137656C")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60019A1")]
			[Address(RVA = "0x1376574", Offset = "0x1376574", VA = "0x1376574")]
			internal bool <DoClustering>b__0(Renderer x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrouperData d;

		[Token(Token = "0x6000B23")]
		public abstract Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection);

		[Token(Token = "0x6000B24")]
		public abstract void DrawGizmos(Bounds sourceObjectBounds);

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xDEA4D8", Offset = "0xDEA4D8", VA = "0xDEA4D8")]
		public void DoClustering(MB3_TextureBaker tb, MB3_MeshBakerGrouper grouper)
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xDEB180", Offset = "0xDEB180", VA = "0xDEB180")]
		private Dictionary<int, List<Renderer>> GroupByLightmapIndex(List<Renderer> gaws)
		{
			return null;
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xDEB36C", Offset = "0xDEB36C", VA = "0xDEB36C")]
		private void AddMeshBaker(MB3_TextureBaker tb, string key, List<Renderer> gaws)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xDE9678", Offset = "0xDE9678", VA = "0xDE9678")]
		protected MB3_MeshBakerGrouperCore()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D0")]
	public class MB3_MeshBakerGrouperNone : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x137758C", Offset = "0x137758C", VA = "0x137758C")]
		public MB3_MeshBakerGrouperNone(GrouperData d)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x13775B8", Offset = "0x13775B8", VA = "0x13775B8", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x1377788", Offset = "0x1377788", VA = "0x1377788", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class MB3_MeshBakerGrouperGrid : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x13765F0", Offset = "0x13765F0", VA = "0x13765F0")]
		public MB3_MeshBakerGrouperGrid(GrouperData d)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x137661C", Offset = "0x137661C", VA = "0x137661C", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x1376A94", Offset = "0x1376A94", VA = "0x1376A94", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public class MB3_MeshBakerGrouperPie : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x137778C", Offset = "0x137778C", VA = "0x137778C")]
		public MB3_MeshBakerGrouperPie(GrouperData data)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x13777B8", Offset = "0x13777B8", VA = "0x13777B8", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1377EAC", Offset = "0x1377EAC", VA = "0x1377EAC", Slot = "5")]
		public override void DrawGizmos(Bounds sourceObjectBounds)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x13781EC", Offset = "0x13781EC", VA = "0x13781EC")]
		public static void DrawCircle(Vector3 axis, Vector3 center, float radius, int subdiv)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class MB3_MeshBakerGrouperKMeans : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numClusters;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] clusterCenters;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] clusterSizes;

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x13770A8", Offset = "0x13770A8", VA = "0x13770A8")]
		public MB3_MeshBakerGrouperKMeans(GrouperData data)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x137713C", Offset = "0x137713C", VA = "0x137713C", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x13774D0", Offset = "0x13774D0", VA = "0x13774D0", Slot = "5")]
		public override void DrawGizmos(Bounds sceneObjectBounds)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public class MB3_MeshBakerGrouperCluster : MB3_MeshBakerGrouperCore
	{
		[Token(Token = "0x20003A6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE60C", Offset = "0x7EE60C")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4001580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<GameObject> gos;

			[Token(Token = "0x60019A2")]
			[Address(RVA = "0xDE9D3C", Offset = "0xDE9D3C", VA = "0xDE9D3C")]
			public <>c__DisplayClass8_0()
			{
			}
		}

		[Token(Token = "0x20003A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE61C", Offset = "0x7EE61C")]
		private sealed class <>c__DisplayClass8_1
		{
			[Token(Token = "0x4001581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int i;

			[Token(Token = "0x4001582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass8_0 CS$<>8__locals1;

			[Token(Token = "0x60019A3")]
			[Address(RVA = "0xDE9D44", Offset = "0xDE9D44", VA = "0xDE9D44")]
			public <>c__DisplayClass8_1()
			{
			}

			[Token(Token = "0x60019A4")]
			[Address(RVA = "0xDEA420", Offset = "0xDEA420", VA = "0xDEA420")]
			internal bool <BuildClusters>b__0(MB3_AgglomerativeClustering.item_s x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MB3_AgglomerativeClustering cluster;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _lastMaxDistBetweenClusters;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float _ObjsExtents;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float _minDistBetweenClusters;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<MB3_AgglomerativeClustering.ClusterNode> _clustersToDraw;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float[] _radii;

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xDE95E8", Offset = "0xDE95E8", VA = "0xDE95E8")]
		public MB3_MeshBakerGrouperCluster(GrouperData data, List<GameObject> gos)
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xDE9680", Offset = "0xDE9680", VA = "0xDE9680", Slot = "4")]
		public override Dictionary<string, List<Renderer>> FilterIntoGroups(List<GameObject> selection)
		{
			return null;
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xDE98EC", Offset = "0xDE98EC", VA = "0xDE98EC")]
		public void BuildClusters(List<GameObject> gos, ProgressUpdateCancelableDelegate progFunc)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xDE9D4C", Offset = "0xDE9D4C", VA = "0xDE9D4C")]
		private void _BuildListOfClustersToDraw(ProgressUpdateCancelableDelegate progFunc, out float smallest, out float largest)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xDEA2EC", Offset = "0xDEA2EC", VA = "0xDEA2EC", Slot = "5")]
		public override void DrawGizmos(Bounds sceneObjectBounds)
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public interface TextureBlender
	{
		[Token(Token = "0x6000B3B")]
		bool DoesShaderNameMatch(string shaderName);

		[Token(Token = "0x6000B3C")]
		void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName);

		[Token(Token = "0x6000B3D")]
		Color OnBlendTexturePixel(string shaderPropertyName, Color pixelColor);

		[Token(Token = "0x6000B3E")]
		bool NonTexturePropertiesAreEqual(Material a, Material b);

		[Token(Token = "0x6000B3F")]
		void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial);

		[Token(Token = "0x6000B40")]
		Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName);
	}
	[Token(Token = "0x20001D6")]
	public class TextureBlenderFallback : TextureBlender
	{
		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_doTintColor;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultColor;

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x120FEC4", Offset = "0x120FEC4", VA = "0x120FEC4", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x120FECC", Offset = "0x120FECC", VA = "0x120FECC", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x120FF98", Offset = "0x120FF98", VA = "0x120FF98", Slot = "6")]
		public Color OnBlendTexturePixel(string shaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x120FFF4", Offset = "0x120FFF4", VA = "0x120FFF4", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x121016C", Offset = "0x121016C", VA = "0x121016C", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x1210200", Offset = "0x1210200", VA = "0x1210200", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x1210060", Offset = "0x1210060", VA = "0x1210060")]
		public static bool _compareColor(Material a, Material b, Color defaultVal, string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1210B00", Offset = "0x1210B00", VA = "0x1210B00")]
		public static bool _compareFloat(Material a, Material b, float defaultVal, string propertyName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x1210B9C", Offset = "0x1210B9C", VA = "0x1210B9C")]
		public TextureBlenderFallback()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class TextureBlenderLegacyBumpDiffuse : TextureBlender
	{
		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool doColor;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultTintColor;

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x1210BD0", Offset = "0x1210BD0", VA = "0x1210BD0", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x1210C58", Offset = "0x1210C58", VA = "0x1210C58", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x1210D00", Offset = "0x1210D00", VA = "0x1210D00", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x1210D5C", Offset = "0x1210D5C", VA = "0x1210D5C", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x1210DC8", Offset = "0x1210DC8", VA = "0x1210DC8", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x1210E2C", Offset = "0x1210E2C", VA = "0x1210E2C", Slot = "9")]
		public Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x1210FEC", Offset = "0x1210FEC", VA = "0x1210FEC")]
		public TextureBlenderLegacyBumpDiffuse()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class TextureBlenderLegacyDiffuse : TextureBlender
	{
		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool doColor;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color m_tintColor;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_defaultTintColor;

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x1211020", Offset = "0x1211020", VA = "0x1211020", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x12110A8", Offset = "0x12110A8", VA = "0x12110A8", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x1211150", Offset = "0x1211150", VA = "0x1211150", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x12111AC", Offset = "0x12111AC", VA = "0x12111AC", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x1211218", Offset = "0x1211218", VA = "0x1211218", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x121127C", Offset = "0x121127C", VA = "0x121127C", Slot = "9")]
		public Color GetColorIfNoTexture(Material m, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x12113FC", Offset = "0x12113FC", VA = "0x12113FC")]
		public TextureBlenderLegacyDiffuse()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public class TextureBlenderStandardMetallic : TextureBlender
	{
		[Token(Token = "0x20003A8")]
		private enum Prop
		{
			[Token(Token = "0x4001584")]
			doColor,
			[Token(Token = "0x4001585")]
			doMetallic,
			[Token(Token = "0x4001586")]
			doEmission,
			[Token(Token = "0x4001587")]
			doNone
		}

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Color m_tintColor;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color m_emission;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Prop propertyToDo;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Color m_defaultColor;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_defaultMetallic;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_defaultGlossiness;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Color m_defaultEmission;

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x1211430", Offset = "0x1211430", VA = "0x1211430", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x121148C", Offset = "0x121148C", VA = "0x121148C", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x12115E4", Offset = "0x12115E4", VA = "0x12115E4", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x121165C", Offset = "0x121165C", VA = "0x121165C", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x1211740", Offset = "0x1211740", VA = "0x1211740", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1211868", Offset = "0x1211868", VA = "0x1211868", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x1211D98", Offset = "0x1211D98", VA = "0x1211D98")]
		public TextureBlenderStandardMetallic()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class TextureBlenderStandardSpecular : TextureBlender
	{
		[Token(Token = "0x20003A9")]
		private enum Prop
		{
			[Token(Token = "0x4001589")]
			doColor,
			[Token(Token = "0x400158A")]
			doSpecular,
			[Token(Token = "0x400158B")]
			doEmission,
			[Token(Token = "0x400158C")]
			doNone
		}

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Color m_tintColor;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color m_emission;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Prop propertyToDo;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Color m_defaultColor;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color m_defaultSpecular;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float m_defaultGlossiness;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Color m_defaultEmission;

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x1211DEC", Offset = "0x1211DEC", VA = "0x1211DEC", Slot = "4")]
		public bool DoesShaderNameMatch(string shaderName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1211E48", Offset = "0x1211E48", VA = "0x1211E48", Slot = "5")]
		public void OnBeforeTintTexture(Material sourceMat, string shaderTexturePropertyName)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x1211FA0", Offset = "0x1211FA0", VA = "0x1211FA0", Slot = "6")]
		public Color OnBlendTexturePixel(string propertyToDoshaderPropertyName, Color pixelColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x1212018", Offset = "0x1212018", VA = "0x1212018", Slot = "7")]
		public bool NonTexturePropertiesAreEqual(Material a, Material b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x1212100", Offset = "0x1212100", VA = "0x1212100", Slot = "8")]
		public void SetNonTexturePropertyValuesOnResultMaterial(Material resultMaterial)
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x121222C", Offset = "0x121222C", VA = "0x121222C", Slot = "9")]
		public Color GetColorIfNoTexture(Material mat, ShaderTextureProperty texPropertyName)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x12127E8", Offset = "0x12127E8", VA = "0x12127E8")]
		public TextureBlenderStandardSpecular()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public delegate void ProgressUpdateDelegate(string msg, float progress);
	[Token(Token = "0x20001DC")]
	public delegate bool ProgressUpdateCancelableDelegate(string msg, float progress);
	[Token(Token = "0x20001DD")]
	public enum MB_ObjsToCombineTypes
	{
		[Token(Token = "0x4000A68")]
		prefabOnly,
		[Token(Token = "0x4000A69")]
		sceneObjOnly,
		[Token(Token = "0x4000A6A")]
		dontCare
	}
	[Token(Token = "0x20001DE")]
	public enum MB_OutputOptions
	{
		[Token(Token = "0x4000A6C")]
		bakeIntoPrefab,
		[Token(Token = "0x4000A6D")]
		bakeMeshsInPlace,
		[Token(Token = "0x4000A6E")]
		bakeTextureAtlasesOnly,
		[Token(Token = "0x4000A6F")]
		bakeIntoSceneObject
	}
	[Token(Token = "0x20001DF")]
	public enum MB_RenderType
	{
		[Token(Token = "0x4000A71")]
		meshRenderer,
		[Token(Token = "0x4000A72")]
		skinnedMeshRenderer
	}
	[Token(Token = "0x20001E0")]
	public enum MB2_OutputOptions
	{
		[Token(Token = "0x4000A74")]
		bakeIntoSceneObject,
		[Token(Token = "0x4000A75")]
		bakeMeshAssetsInPlace,
		[Token(Token = "0x4000A76")]
		bakeIntoPrefab
	}
	[Token(Token = "0x20001E1")]
	public enum MB2_LightmapOptions
	{
		[Token(Token = "0x4000A78")]
		preserve_current_lightmapping,
		[Token(Token = "0x4000A79")]
		ignore_UV2,
		[Token(Token = "0x4000A7A")]
		copy_UV2_unchanged,
		[Token(Token = "0x4000A7B")]
		generate_new_UV2_layout,
		[Token(Token = "0x4000A7C")]
		copy_UV2_unchanged_to_separate_rects
	}
	[Token(Token = "0x20001E2")]
	public enum MB2_PackingAlgorithmEnum
	{
		[Token(Token = "0x4000A7E")]
		UnitysPackTextures,
		[Token(Token = "0x4000A7F")]
		MeshBakerTexturePacker,
		[Token(Token = "0x4000A80")]
		MeshBakerTexturePacker_Fast
	}
	[Token(Token = "0x20001E3")]
	public enum MB2_ValidationLevel
	{
		[Token(Token = "0x4000A82")]
		none,
		[Token(Token = "0x4000A83")]
		quick,
		[Token(Token = "0x4000A84")]
		robust
	}
	[Token(Token = "0x20001E4")]
	public interface MB2_EditorMethodsInterface
	{
		[Token(Token = "0x6000B6E")]
		void Clear();

		[Token(Token = "0x6000B6F")]
		void RestoreReadFlagsAndFormats(ProgressUpdateDelegate progressInfo);

		[Token(Token = "0x6000B70")]
		void SetReadWriteFlag(Texture2D tx, bool isReadable, bool addToList);

		[Token(Token = "0x6000B71")]
		void AddTextureFormat(Texture2D tx, bool isNormalMap);

		[Token(Token = "0x6000B72")]
		void SaveAtlasToAssetDatabase(Texture2D atlas, ShaderTextureProperty texPropertyName, int atlasNum, Material resMat);

		[Token(Token = "0x6000B73")]
		void SetMaterialTextureProperty(Material target, ShaderTextureProperty texPropName, string texturePath);

		[Token(Token = "0x6000B74")]
		void SetNormalMap(Texture2D tx);

		[Token(Token = "0x6000B75")]
		bool IsNormalMap(Texture2D tx);

		[Token(Token = "0x6000B76")]
		string GetPlatformString();

		[Token(Token = "0x6000B77")]
		void SetTextureSize(Texture2D tx, int size);

		[Token(Token = "0x6000B78")]
		bool IsCompressed(Texture2D tx);

		[Token(Token = "0x6000B79")]
		void CheckBuildSettings(long estimatedAtlasSize);

		[Token(Token = "0x6000B7A")]
		bool CheckPrefabTypes(MB_ObjsToCombineTypes prefabType, List<GameObject> gos);

		[Token(Token = "0x6000B7B")]
		bool ValidateSkinnedMeshes(List<GameObject> mom);

		[Token(Token = "0x6000B7C")]
		void CommitChangesToAssets();

		[Token(Token = "0x6000B7D")]
		void Destroy(UnityEngine.Object o);
	}
	[Token(Token = "0x20001E5")]
	public enum MB2_LogLevel
	{
		[Token(Token = "0x4000A86")]
		none,
		[Token(Token = "0x4000A87")]
		error,
		[Token(Token = "0x4000A88")]
		warn,
		[Token(Token = "0x4000A89")]
		info,
		[Token(Token = "0x4000A8A")]
		debug,
		[Token(Token = "0x4000A8B")]
		trace
	}
	[Token(Token = "0x20001E6")]
	public class MB2_Log
	{
		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xDE1C10", Offset = "0xDE1C10", VA = "0xDE1C10")]
		public static void Log(MB2_LogLevel l, string msg, MB2_LogLevel currentThreshold)
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xDE1E20", Offset = "0xDE1E20", VA = "0xDE1E20")]
		public static string Error(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xDE1EFC", Offset = "0xDE1EFC", VA = "0xDE1EFC")]
		public static string Warn(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xDE1FD8", Offset = "0xDE1FD8", VA = "0xDE1FD8")]
		public static string Info(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xDE20B4", Offset = "0xDE20B4", VA = "0xDE20B4")]
		public static string LogDebug(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xDE2190", Offset = "0xDE2190", VA = "0xDE2190")]
		public static string Trace(string msg, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xDE226C", Offset = "0xDE226C", VA = "0xDE226C")]
		public MB2_Log()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class ObjectLog
	{
		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int pos;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] logMessages;

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x120F048", Offset = "0x120F048", VA = "0x120F048")]
		private void _CacheLogMessage(string msg)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x120F0F0", Offset = "0x120F0F0", VA = "0x120F0F0")]
		public ObjectLog(short bufferSize)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x120F160", Offset = "0x120F160", VA = "0x120F160")]
		public void Log(MB2_LogLevel l, string msg, MB2_LogLevel currentThreshold)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x120F19C", Offset = "0x120F19C", VA = "0x120F19C")]
		public void Error(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x120F1D0", Offset = "0x120F1D0", VA = "0x120F1D0")]
		public void Warn(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x120F204", Offset = "0x120F204", VA = "0x120F204")]
		public void Info(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x120F238", Offset = "0x120F238", VA = "0x120F238")]
		public void LogDebug(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x120F26C", Offset = "0x120F26C", VA = "0x120F26C")]
		public void Trace(string msg, params object[] args)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x120F2A0", Offset = "0x120F2A0", VA = "0x120F2A0")]
		public string Dump()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E8")]
	public interface MBVersionInterface
	{
		[Token(Token = "0x6000B8E")]
		string version();

		[Token(Token = "0x6000B8F")]
		int GetMajorVersion();

		[Token(Token = "0x6000B90")]
		int GetMinorVersion();

		[Token(Token = "0x6000B91")]
		bool GetActive(GameObject go);

		[Token(Token = "0x6000B92")]
		void SetActive(GameObject go, bool isActive);

		[Token(Token = "0x6000B93")]
		void SetActiveRecursively(GameObject go, bool isActive);

		[Token(Token = "0x6000B94")]
		UnityEngine.Object[] FindSceneObjectsOfType(Type t);

		[Token(Token = "0x6000B95")]
		bool IsRunningAndMeshNotReadWriteable(Mesh m);

		[Token(Token = "0x6000B96")]
		Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL);

		[Token(Token = "0x6000B97")]
		void MeshClear(Mesh m, bool t);

		[Token(Token = "0x6000B98")]
		void MeshAssignUV3(Mesh m, Vector2[] uv3s);

		[Token(Token = "0x6000B99")]
		void MeshAssignUV4(Mesh m, Vector2[] uv4s);

		[Token(Token = "0x6000B9A")]
		Vector4 GetLightmapTilingOffset(Renderer r);

		[Token(Token = "0x6000B9B")]
		Transform[] GetBones(Renderer r);

		[Token(Token = "0x6000B9C")]
		void OptimizeMesh(Mesh m);

		[Token(Token = "0x6000B9D")]
		int GetBlendShapeFrameCount(Mesh m, int shapeIndex);

		[Token(Token = "0x6000B9E")]
		float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex);

		[Token(Token = "0x6000B9F")]
		void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts);

		[Token(Token = "0x6000BA0")]
		void ClearBlendShapes(Mesh m);

		[Token(Token = "0x6000BA1")]
		void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts);
	}
	[Token(Token = "0x20001E9")]
	public class MBVersion
	{
		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MBVersionInterface _MBVersion;

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x12D2DC0", Offset = "0x12D2DC0", VA = "0x12D2DC0")]
		private static MBVersionInterface _CreateMBVersionConcrete()
		{
			return null;
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x12D2E68", Offset = "0x12D2E68", VA = "0x12D2E68")]
		public static string version()
		{
			return null;
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x12CA14C", Offset = "0x12CA14C", VA = "0x12CA14C")]
		public static int GetMajorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x12CA22C", Offset = "0x12CA22C", VA = "0x12CA22C")]
		public static int GetMinorVersion()
		{
			return default(int);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x12D2F44", Offset = "0x12D2F44", VA = "0x12D2F44")]
		public static bool GetActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x12D3034", Offset = "0x12D3034", VA = "0x12D3034")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x12D312C", Offset = "0x12D312C", VA = "0x12D312C")]
		public static void SetActiveRecursively(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x12D3224", Offset = "0x12D3224", VA = "0x12D3224")]
		public static UnityEngine.Object[] FindSceneObjectsOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x12D3314", Offset = "0x12D3314", VA = "0x12D3314")]
		public static bool IsRunningAndMeshNotReadWriteable(Mesh m)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x12D3404", Offset = "0x12D3404", VA = "0x12D3404")]
		public static Vector2[] GetMeshUV3orUV4(Mesh m, bool get3, MB2_LogLevel LOG_LEVEL)
		{
			return null;
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x12D350C", Offset = "0x12D350C", VA = "0x12D350C")]
		public static void MeshClear(Mesh m, bool t)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x12D3604", Offset = "0x12D3604", VA = "0x12D3604")]
		public static void MeshAssignUV3(Mesh m, Vector2[] uv3s)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x12D36FC", Offset = "0x12D36FC", VA = "0x12D36FC")]
		public static void MeshAssignUV4(Mesh m, Vector2[] uv4s)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x12D37F4", Offset = "0x12D37F4", VA = "0x12D37F4")]
		public static Vector4 GetLightmapTilingOffset(Renderer r)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x12D38E4", Offset = "0x12D38E4", VA = "0x12D38E4")]
		public static Transform[] GetBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x12D39D4", Offset = "0x12D39D4", VA = "0x12D39D4")]
		public static void OptimizeMesh(Mesh m)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x12D3AC4", Offset = "0x12D3AC4", VA = "0x12D3AC4")]
		public static int GetBlendShapeFrameCount(Mesh m, int shapeIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x12D3BBC", Offset = "0x12D3BBC", VA = "0x12D3BBC")]
		public static float GetBlendShapeFrameWeight(Mesh m, int shapeIndex, int frameIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x12D3CC4", Offset = "0x12D3CC4", VA = "0x12D3CC4")]
		public static void GetBlendShapeFrameVertices(Mesh m, int shapeIndex, int frameIndex, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x12D3DEC", Offset = "0x12D3DEC", VA = "0x12D3DEC")]
		public static void ClearBlendShapes(Mesh m)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x12D3EDC", Offset = "0x12D3EDC", VA = "0x12D3EDC")]
		public static void AddBlendShapeFrame(Mesh m, string nm, float wt, Vector3[] vs, Vector3[] ns, Vector3[] ts)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x12D400C", Offset = "0x12D400C", VA = "0x12D400C")]
		public MBVersion()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class MB2_TexturePacker
	{
		[Token(Token = "0x20003AA")]
		private enum NodeType
		{
			[Token(Token = "0x400158E")]
			Container,
			[Token(Token = "0x400158F")]
			maxDim,
			[Token(Token = "0x4001590")]
			regular
		}

		[Token(Token = "0x20003AB")]
		private class PixRect
		{
			[Token(Token = "0x4001591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int x;

			[Token(Token = "0x4001592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int y;

			[Token(Token = "0x4001593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int w;

			[Token(Token = "0x4001594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int h;

			[Token(Token = "0x60019A5")]
			[Address(RVA = "0xDE70C8", Offset = "0xDE70C8", VA = "0xDE70C8")]
			public PixRect()
			{
			}

			[Token(Token = "0x60019A6")]
			[Address(RVA = "0xDE3070", Offset = "0xDE3070", VA = "0xDE3070")]
			public PixRect(int xx, int yy, int ww, int hh)
			{
			}

			[Token(Token = "0x60019A7")]
			[Address(RVA = "0xDE70D0", Offset = "0xDE70D0", VA = "0xDE70D0", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x20003AC")]
		private class Image
		{
			[Token(Token = "0x4001595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int imgId;

			[Token(Token = "0x4001596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int w;

			[Token(Token = "0x4001597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int h;

			[Token(Token = "0x4001598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int x;

			[Token(Token = "0x4001599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int y;

			[Token(Token = "0x60019A8")]
			[Address(RVA = "0xDE61CC", Offset = "0xDE61CC", VA = "0xDE61CC")]
			public Image(int id, int tw, int th, int padding, int minImageSizeX, int minImageSizeY)
			{
			}

			[Token(Token = "0x60019A9")]
			[Address(RVA = "0xDE6F20", Offset = "0xDE6F20", VA = "0xDE6F20")]
			public Image(Image im)
			{
			}
		}

		[Token(Token = "0x20003AD")]
		private class ImgIDComparer : IComparer<Image>
		{
			[Token(Token = "0x60019AA")]
			[Address(RVA = "0xDE7034", Offset = "0xDE7034", VA = "0xDE7034", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x60019AB")]
			[Address(RVA = "0xDE62EC", Offset = "0xDE62EC", VA = "0xDE62EC")]
			public ImgIDComparer()
			{
			}
		}

		[Token(Token = "0x20003AE")]
		private class ImageHeightComparer : IComparer<Image>
		{
			[Token(Token = "0x60019AC")]
			[Address(RVA = "0xDE6FBC", Offset = "0xDE6FBC", VA = "0xDE6FBC", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x60019AD")]
			[Address(RVA = "0xDE6294", Offset = "0xDE6294", VA = "0xDE6294")]
			public ImageHeightComparer()
			{
			}
		}

		[Token(Token = "0x20003AF")]
		private class ImageWidthComparer : IComparer<Image>
		{
			[Token(Token = "0x60019AE")]
			[Address(RVA = "0xDE6FF8", Offset = "0xDE6FF8", VA = "0xDE6FF8", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x60019AF")]
			[Address(RVA = "0xDE629C", Offset = "0xDE629C", VA = "0xDE629C")]
			public ImageWidthComparer()
			{
			}
		}

		[Token(Token = "0x20003B0")]
		private class ImageAreaComparer : IComparer<Image>
		{
			[Token(Token = "0x60019B0")]
			[Address(RVA = "0xDE6F78", Offset = "0xDE6F78", VA = "0xDE6F78", Slot = "4")]
			public int Compare(Image x, Image y)
			{
				return default(int);
			}

			[Token(Token = "0x60019B1")]
			[Address(RVA = "0xDE62A4", Offset = "0xDE62A4", VA = "0xDE62A4")]
			public ImageAreaComparer()
			{
			}
		}

		[Token(Token = "0x20003B1")]
		private class ProbeResult
		{
			[Token(Token = "0x400159A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int w;

			[Token(Token = "0x400159B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int h;

			[Token(Token = "0x400159C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int outW;

			[Token(Token = "0x400159D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int outH;

			[Token(Token = "0x400159E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Node root;

			[Token(Token = "0x400159F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool largerOrEqualToMaxDim;

			[Token(Token = "0x40015A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float efficiency;

			[Token(Token = "0x40015A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float squareness;

			[Token(Token = "0x40015A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float totalAtlasArea;

			[Token(Token = "0x40015A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int numAtlases;

			[Token(Token = "0x60019B2")]
			[Address(RVA = "0xDE35B0", Offset = "0xDE35B0", VA = "0xDE35B0")]
			public void Set(int ww, int hh, int outw, int outh, Node r, bool fits, float e, float sq)
			{
			}

			[Token(Token = "0x60019B3")]
			[Address(RVA = "0xDE62B4", Offset = "0xDE62B4", VA = "0xDE62B4")]
			public float GetScore(bool doPowerOfTwoScore)
			{
				return default(float);
			}

			[Token(Token = "0x60019B4")]
			[Address(RVA = "0xDE7274", Offset = "0xDE7274", VA = "0xDE7274")]
			public void PrintTree()
			{
			}

			[Token(Token = "0x60019B5")]
			[Address(RVA = "0xDE62AC", Offset = "0xDE62AC", VA = "0xDE62AC")]
			public ProbeResult()
			{
			}
		}

		[Token(Token = "0x20003B2")]
		private class Node
		{
			[Token(Token = "0x40015A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NodeType isFullAtlas;

			[Token(Token = "0x40015A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Node[] child;

			[Token(Token = "0x40015A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PixRect r;

			[Token(Token = "0x40015A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Image img;

			[Token(Token = "0x60019B6")]
			[Address(RVA = "0xDE2FFC", Offset = "0xDE2FFC", VA = "0xDE2FFC")]
			public Node(NodeType rootType)
			{
			}

			[Token(Token = "0x60019B7")]
			[Address(RVA = "0xDE7070", Offset = "0xDE7070", VA = "0xDE7070")]
			private bool isLeaf()
			{
				return default(bool);
			}

			[Token(Token = "0x60019B8")]
			[Address(RVA = "0xDE30BC", Offset = "0xDE30BC", VA = "0xDE30BC")]
			public Node Insert(Image im, bool handed)
			{
				return null;
			}
		}

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ProbeResult bestRoot;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int atlasY;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool doPowerOfTwoTextures;

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xDE2274", Offset = "0xDE2274", VA = "0xDE2274")]
		private static void printTree(Node r, string spc)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xDE24C4", Offset = "0xDE24C4", VA = "0xDE24C4")]
		private static void flattenTree(Node r, List<Image> putHere)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xDE25B8", Offset = "0xDE25B8", VA = "0xDE25B8")]
		private static void drawGizmosNode(Node r)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xDE2800", Offset = "0xDE2800", VA = "0xDE2800")]
		private static Texture2D createFilledTex(Color c, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xDE2908", Offset = "0xDE2908", VA = "0xDE2908")]
		public void DrawGizmos()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xDE29C4", Offset = "0xDE29C4", VA = "0xDE29C4")]
		private bool ProbeSingleAtlas(Image[] imgsToAdd, int idealAtlasW, int idealAtlasH, float imgArea, int maxAtlasDim, ProbeResult pr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xDE35CC", Offset = "0xDE35CC", VA = "0xDE35CC")]
		private bool ProbeMultiAtlas(Image[] imgsToAdd, int idealAtlasW, int idealAtlasH, float imgArea, int maxAtlasDim, ProbeResult pr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xDE3444", Offset = "0xDE3444", VA = "0xDE3444")]
		private void GetExtent(Node r, ref int x, ref int y)
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xDE3A54", Offset = "0xDE3A54", VA = "0xDE3A54")]
		private int StepWidthHeight(int oldVal, int step, int maxDim)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xDE3A84", Offset = "0xDE3A84", VA = "0xDE3A84")]
		public static int RoundToNearestPositivePowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xDE3524", Offset = "0xDE3524", VA = "0xDE3524")]
		public static int CeilToNearestPowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xDE3B18", Offset = "0xDE3B18", VA = "0xDE3B18")]
		public AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimension, int padding)
		{
			return null;
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xDE3B20", Offset = "0xDE3B20", VA = "0xDE3B20")]
		public AtlasPackingResult[] GetRects(List<Vector2> imgWidthHeights, int maxDimension, int padding, bool doMultiAtlas)
		{
			return null;
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xDE4C68", Offset = "0xDE4C68", VA = "0xDE4C68")]
		private AtlasPackingResult _GetRectsSingleAtlas(List<Vector2> imgWidthHeights, int maxDimension, int padding, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, int recursionDepth)
		{
			return null;
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xDE62F4", Offset = "0xDE62F4", VA = "0xDE62F4")]
		private AtlasPackingResult ScaleAtlasToFitMaxDim(ProbeResult root, List<Vector2> imgWidthHeights, List<Image> images, int maxDimension, int padding, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, int outW, int outH, int recursionDepth)
		{
			return null;
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xDE3C48", Offset = "0xDE3C48", VA = "0xDE3C48")]
		private AtlasPackingResult[] _GetRectsMultiAtlas(List<Vector2> imgWidthHeights, int maxDimensionPassed, int padding, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY)
		{
			return null;
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xDE6D64", Offset = "0xDE6D64", VA = "0xDE6D64")]
		private void normalizeRects(AtlasPackingResult rr, int padding)
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xDE6F08", Offset = "0xDE6F08", VA = "0xDE6F08")]
		public MB2_TexturePacker()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class AtlasPackingResult
	{
		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int atlasX;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int atlasY;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int usedW;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int usedH;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rect[] rects;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] srcImgIdxs;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public object data;

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xDE1558", Offset = "0xDE1558", VA = "0xDE1558")]
		public AtlasPackingResult()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EC")]
	public class MB3_AgglomerativeClustering
	{
		[Serializable]
		[Token(Token = "0x20003B3")]
		public class ClusterNode
		{
			[Token(Token = "0x40015A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public item_s leaf;

			[Token(Token = "0x40015A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ClusterNode cha;

			[Token(Token = "0x40015AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ClusterNode chb;

			[Token(Token = "0x40015AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int height;

			[Token(Token = "0x40015AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float distToMergedCentroid;

			[Token(Token = "0x40015AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 centroid;

			[Token(Token = "0x40015AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int[] leafs;

			[Token(Token = "0x40015AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int idx;

			[Token(Token = "0x40015B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isUnclustered;

			[Token(Token = "0x60019B9")]
			[Address(RVA = "0xDE8274", Offset = "0xDE8274", VA = "0xDE8274")]
			public ClusterNode(item_s ii, int index)
			{
			}

			[Token(Token = "0x60019BA")]
			[Address(RVA = "0xDE871C", Offset = "0xDE871C", VA = "0xDE871C")]
			public ClusterNode(ClusterNode a, ClusterNode b, int index, int h, float dist, ClusterNode[] clusters)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003B4")]
		public class item_s
		{
			[Token(Token = "0x40015B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x40015B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 coord;

			[Token(Token = "0x60019BB")]
			[Address(RVA = "0xDE8B08", Offset = "0xDE8B08", VA = "0xDE8B08")]
			public item_s()
			{
			}
		}

		[Token(Token = "0x20003B5")]
		public class ClusterDistance
		{
			[Token(Token = "0x40015B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ClusterNode a;

			[Token(Token = "0x40015B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ClusterNode b;

			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xDE8960", Offset = "0xDE8960", VA = "0xDE8960")]
			public ClusterDistance(ClusterNode aa, ClusterNode bb)
			{
			}
		}

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<item_s> items;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ClusterNode[] clusters;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool wasCanceled;

		[Token(Token = "0x4000A9D")]
		private const int MAX_PRIORITY_Q_SIZE = 2048;

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xDE72C4", Offset = "0xDE72C4", VA = "0xDE72C4")]
		private float euclidean_distance(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xDE736C", Offset = "0xDE736C", VA = "0xDE736C")]
		public bool agglomerate(ProgressUpdateCancelableDelegate progFunc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xDE8330", Offset = "0xDE8330", VA = "0xDE8330")]
		private float _RefillPriorityQWithSome(PriorityQueue<float, ClusterDistance> pq, List<ClusterNode> unclustered, ClusterNode[] clusters, ProgressUpdateCancelableDelegate progFunc)
		{
			return default(float);
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xDE8998", Offset = "0xDE8998", VA = "0xDE8998")]
		public int TestRun(List<GameObject> gos)
		{
			return default(int);
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xDE8B10", Offset = "0xDE8B10", VA = "0xDE8B10")]
		public static void Main()
		{
		}

		[Token(Token = "0x6000BD0")]
		public static T NthSmallestElement<T>(List<T> array, int n) where T : IComparable<T>
		{
			return (T)null;
		}

		[Token(Token = "0x6000BD1")]
		private static List<T> QuickSelectSmallest<T>(List<T> input, int n) where T : IComparable<T>
		{
			return null;
		}

		[Token(Token = "0x6000BD2")]
		private static int QuickSelectPartition<T>(List<T> array, int startIndex, int endIndex, int pivotIndex) where T : IComparable<T>
		{
			return default(int);
		}

		[Token(Token = "0x6000BD3")]
		private static void Swap<T>(List<T> array, int index1, int index2)
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xDE8C30", Offset = "0xDE8C30", VA = "0xDE8C30")]
		public MB3_AgglomerativeClustering()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public class MB3_CopyBoneWeights
	{
		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xDE8CA0", Offset = "0xDE8CA0", VA = "0xDE8CA0")]
		public static void CopyBoneWeightsFromSeamMeshToOtherMeshes(float radius, Mesh seamMesh, Mesh[] targetMeshes)
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xDE95E0", Offset = "0xDE95E0", VA = "0xDE95E0")]
		public MB3_CopyBoneWeights()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EE")]
	public abstract class MB3_MeshCombiner
	{
		[Token(Token = "0x20003B6")]
		public delegate void GenerateUV2Delegate(Mesh m, float hardAngle, float packMargin);

		[Token(Token = "0x20003B7")]
		public class MBBlendShapeKey
		{
			[Token(Token = "0x40015B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int gameObjecID;

			[Token(Token = "0x40015B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int blendShapeIndexInSrc;

			[Token(Token = "0x60019C1")]
			[Address(RVA = "0x137916C", Offset = "0x137916C", VA = "0x137916C")]
			public MBBlendShapeKey(int srcSkinnedMeshRenderGameObjectID, int blendShapeIndexInSource)
			{
			}

			[Token(Token = "0x60019C2")]
			[Address(RVA = "0x13791A4", Offset = "0x13791A4", VA = "0x13791A4", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60019C3")]
			[Address(RVA = "0x1379250", Offset = "0x1379250", VA = "0x1379250", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x20003B8")]
		public class MBBlendShapeValue
		{
			[Token(Token = "0x40015B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject combinedMeshGameObject;

			[Token(Token = "0x40015B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int blendShapeIndex;

			[Token(Token = "0x60019C4")]
			[Address(RVA = "0x137926C", Offset = "0x137926C", VA = "0x137926C")]
			public MBBlendShapeValue()
			{
			}
		}

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected MB2_LogLevel _LOG_LEVEL;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		protected MB2_ValidationLevel _validationLevel;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected string _name;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected MB2_TextureBakeResults _textureBakeResults;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected GameObject _resultSceneObject;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Renderer _targetRenderer;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected MB_RenderType _renderType;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected MB2_OutputOptions _outputOption;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected MB2_LightmapOptions _lightmapOption;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		protected bool _doNorm;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[SerializeField]
		protected bool _doTan;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[SerializeField]
		protected bool _doCol;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		[SerializeField]
		protected bool _doUV;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected bool _doUV3;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[SerializeField]
		protected bool _doUV4;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[SerializeField]
		protected bool _doBlendShapes;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		[SerializeField]
		protected bool _recenterVertsToBoundsCenter;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		public bool _optimizeAfterBake;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public float uv2UnwrappingParamsHardAngle;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		public float uv2UnwrappingParamsPackMargin;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool _usingTemporaryTextureBakeResult;

		[Token(Token = "0x1700010E")]
		public static bool EVAL_VERSION
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0x1378430", Offset = "0x1378430", VA = "0x1378430")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010F")]
		public virtual MB2_LogLevel LOG_LEVEL
		{
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x1378438", Offset = "0x1378438", VA = "0x1378438", Slot = "4")]
			get
			{
				return default(MB2_LogLevel);
			}
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0x1378440", Offset = "0x1378440", VA = "0x1378440", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public virtual MB2_ValidationLevel validationLevel
		{
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x1378448", Offset = "0x1378448", VA = "0x1378448", Slot = "6")]
			get
			{
				return default(MB2_ValidationLevel);
			}
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0x1378450", Offset = "0x1378450", VA = "0x1378450", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public string name
		{
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x1378458", Offset = "0x1378458", VA = "0x1378458")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x1378460", Offset = "0x1378460", VA = "0x1378460")]
			set
			{
			}
		}

		[Token(Token = "0x17000112")]
		public virtual MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x1378468", Offset = "0x1378468", VA = "0x1378468", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x1378470", Offset = "0x1378470", VA = "0x1378470", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public virtual GameObject resultSceneObject
		{
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x1378478", Offset = "0x1378478", VA = "0x1378478", Slot = "10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0x1378480", Offset = "0x1378480", VA = "0x1378480", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public virtual Renderer targetRenderer
		{
			[Token(Token = "0x6000BE2")]
			[Address(RVA = "0x1378488", Offset = "0x1378488", VA = "0x1378488", Slot = "12")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BE3")]
			[Address(RVA = "0x1378490", Offset = "0x1378490", VA = "0x1378490", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public virtual MB_RenderType renderType
		{
			[Token(Token = "0x6000BE4")]
			[Address(RVA = "0x137857C", Offset = "0x137857C", VA = "0x137857C", Slot = "14")]
			get
			{
				return default(MB_RenderType);
			}
			[Token(Token = "0x6000BE5")]
			[Address(RVA = "0x1378584", Offset = "0x1378584", VA = "0x1378584", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public virtual MB2_OutputOptions outputOption
		{
			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0x137858C", Offset = "0x137858C", VA = "0x137858C", Slot = "16")]
			get
			{
				return default(MB2_OutputOptions);
			}
			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0x1378594", Offset = "0x1378594", VA = "0x1378594", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public virtual MB2_LightmapOptions lightmapOption
		{
			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0x137859C", Offset = "0x137859C", VA = "0x137859C", Slot = "18")]
			get
			{
				return default(MB2_LightmapOptions);
			}
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0x13785A4", Offset = "0x13785A4", VA = "0x13785A4", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public virtual bool doNorm
		{
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0x13785AC", Offset = "0x13785AC", VA = "0x13785AC", Slot = "20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0x13785B4", Offset = "0x13785B4", VA = "0x13785B4", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public virtual bool doTan
		{
			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0x13785C0", Offset = "0x13785C0", VA = "0x13785C0", Slot = "22")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BED")]
			[Address(RVA = "0x13785C8", Offset = "0x13785C8", VA = "0x13785C8", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public virtual bool doCol
		{
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0x13785D4", Offset = "0x13785D4", VA = "0x13785D4", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0x13785DC", Offset = "0x13785DC", VA = "0x13785DC", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public virtual bool doUV
		{
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0x13785E8", Offset = "0x13785E8", VA = "0x13785E8", Slot = "26")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0x13785F0", Offset = "0x13785F0", VA = "0x13785F0", Slot = "27")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public virtual bool doUV1
		{
			[Token(Token = "0x6000BF2")]
			[Address(RVA = "0x13785FC", Offset = "0x13785FC", VA = "0x13785FC", Slot = "28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0x1378604", Offset = "0x1378604", VA = "0x1378604", Slot = "29")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public virtual bool doUV3
		{
			[Token(Token = "0x6000BF5")]
			[Address(RVA = "0x137862C", Offset = "0x137862C", VA = "0x137862C", Slot = "31")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BF6")]
			[Address(RVA = "0x1378634", Offset = "0x1378634", VA = "0x1378634", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public virtual bool doUV4
		{
			[Token(Token = "0x6000BF7")]
			[Address(RVA = "0x1378640", Offset = "0x1378640", VA = "0x1378640", Slot = "33")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BF8")]
			[Address(RVA = "0x1378648", Offset = "0x1378648", VA = "0x1378648", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public virtual bool doBlendShapes
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x1378654", Offset = "0x1378654", VA = "0x1378654", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0x137865C", Offset = "0x137865C", VA = "0x137865C", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public virtual bool recenterVertsToBoundsCenter
		{
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0x1378668", Offset = "0x1378668", VA = "0x1378668", Slot = "37")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BFC")]
			[Address(RVA = "0x1378670", Offset = "0x1378670", VA = "0x1378670", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public bool optimizeAfterBake
		{
			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0x137867C", Offset = "0x137867C", VA = "0x137867C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BFE")]
			[Address(RVA = "0x1378684", Offset = "0x1378684", VA = "0x1378684")]
			set
			{
			}
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1378608", Offset = "0x1378608", VA = "0x1378608", Slot = "30")]
		public virtual bool doUV2()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFF")]
		public abstract int GetLightmapIndex();

		[Token(Token = "0x6000C00")]
		public abstract void ClearBuffers();

		[Token(Token = "0x6000C01")]
		public abstract void ClearMesh();

		[Token(Token = "0x6000C02")]
		public abstract void DestroyMesh();

		[Token(Token = "0x6000C03")]
		public abstract void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods);

		[Token(Token = "0x6000C04")]
		public abstract List<GameObject> GetObjectsInCombined();

		[Token(Token = "0x6000C05")]
		public abstract int GetNumObjectsInCombined();

		[Token(Token = "0x6000C06")]
		public abstract int GetNumVerticesFor(GameObject go);

		[Token(Token = "0x6000C07")]
		public abstract int GetNumVerticesFor(int instanceID);

		[Token(Token = "0x6000C08")]
		public abstract Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap();

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x1378690", Offset = "0x1378690", VA = "0x1378690", Slot = "49")]
		public virtual void Apply()
		{
		}

		[Token(Token = "0x6000C0A")]
		public abstract void Apply(GenerateUV2Delegate uv2GenerationMethod);

		[Token(Token = "0x6000C0B")]
		public abstract void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapeFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod);

		[Token(Token = "0x6000C0C")]
		public abstract void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false);

		[Token(Token = "0x6000C0D")]
		public abstract bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true);

		[Token(Token = "0x6000C0E")]
		public abstract bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource);

		[Token(Token = "0x6000C0F")]
		public abstract bool CombinedMeshContains(GameObject go);

		[Token(Token = "0x6000C10")]
		public abstract void UpdateSkinnedMeshApproximateBounds();

		[Token(Token = "0x6000C11")]
		public abstract void UpdateSkinnedMeshApproximateBoundsFromBones();

		[Token(Token = "0x6000C12")]
		public abstract void CheckIntegrity();

		[Token(Token = "0x6000C13")]
		public abstract void UpdateSkinnedMeshApproximateBoundsFromBounds();

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x13786A4", Offset = "0x13786A4", VA = "0x13786A4")]
		public static void UpdateSkinnedMeshApproximateBoundsFromBonesStatic(Transform[] bs, SkinnedMeshRenderer smr)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x13789DC", Offset = "0x13789DC", VA = "0x13789DC")]
		public static void UpdateSkinnedMeshApproximateBoundsFromBoundsStatic(List<GameObject> objectsInCombined, SkinnedMeshRenderer smr)
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x1378B5C", Offset = "0x1378B5C", VA = "0x1378B5C", Slot = "60")]
		protected virtual bool _CreateTemporaryTextrueBakeResult(GameObject[] gos, List<Material> matsOnTargetRenderer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C17")]
		public abstract List<Material> GetMaterialsOnTargetRenderer();

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x1378C24", Offset = "0x1378C24", VA = "0x1378C24")]
		protected MB3_MeshCombiner()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EF")]
	public class MB3_MeshCombinerSingle : MB3_MeshCombiner
	{
		[Serializable]
		[Token(Token = "0x20003B9")]
		public class MB_DynamicGameObject : IComparable<MB_DynamicGameObject>
		{
			[Token(Token = "0x40015B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int instanceID;

			[Token(Token = "0x40015BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x40015BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int vertIdx;

			[Token(Token = "0x40015BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int blendShapeIdx;

			[Token(Token = "0x40015BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int numVerts;

			[Token(Token = "0x40015BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int numBlendShapes;

			[Token(Token = "0x40015BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int[] indexesOfBonesUsed;

			[Token(Token = "0x40015C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int lightmapIndex;

			[Token(Token = "0x40015C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector4 lightmapTilingOffset;

			[Token(Token = "0x40015C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Vector3 meshSize;

			[Token(Token = "0x40015C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool show;

			[Token(Token = "0x40015C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
			public bool invertTriangles;

			[Token(Token = "0x40015C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public int[] submeshTriIdxs;

			[Token(Token = "0x40015C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int[] submeshNumTris;

			[Token(Token = "0x40015C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int[] targetSubmeshIdxs;

			[Token(Token = "0x40015C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Rect[] uvRects;

			[Token(Token = "0x40015C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Rect[] encapsulatingRect;

			[Token(Token = "0x40015CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Rect[] sourceMaterialTiling;

			[Token(Token = "0x40015CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Rect[] obUVRects;

			[Token(Token = "0x40015CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public int[][] _submeshTris;

			[Token(Token = "0x40015CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public bool _beingDeleted;

			[Token(Token = "0x40015CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			public int _triangleIdxAdjustment;

			[Token(Token = "0x40015CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Transform[] _tmpCachedBones;

			[Token(Token = "0x40015D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Matrix4x4[] _tmpCachedBindposes;

			[Token(Token = "0x40015D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public BoneWeight[] _tmpCachedBoneWeights;

			[Token(Token = "0x40015D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public int[] _tmpIndexesOfSourceBonesUsed;

			[Token(Token = "0x60019C5")]
			[Address(RVA = "0x1387E08", Offset = "0x1387E08", VA = "0x1387E08", Slot = "4")]
			public int CompareTo(MB_DynamicGameObject b)
			{
				return default(int);
			}

			[Token(Token = "0x60019C6")]
			[Address(RVA = "0x137FA70", Offset = "0x137FA70", VA = "0x137FA70")]
			public MB_DynamicGameObject()
			{
			}
		}

		[Token(Token = "0x20003BA")]
		public class MeshChannels
		{
			[Token(Token = "0x40015D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x40015D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x40015D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x40015D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2[] uv0raw;

			[Token(Token = "0x40015D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv0modified;

			[Token(Token = "0x40015D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector2[] uv2;

			[Token(Token = "0x40015D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector2[] uv3;

			[Token(Token = "0x40015DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector2[] uv4;

			[Token(Token = "0x40015DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Color[] colors;

			[Token(Token = "0x40015DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public BoneWeight[] boneWeights;

			[Token(Token = "0x40015DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Matrix4x4[] bindPoses;

			[Token(Token = "0x40015DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int[] triangles;

			[Token(Token = "0x40015DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public MBBlendShape[] blendShapes;

			[Token(Token = "0x60019C7")]
			[Address(RVA = "0x1387E28", Offset = "0x1387E28", VA = "0x1387E28")]
			public MeshChannels()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003BB")]
		public class MBBlendShapeFrame
		{
			[Token(Token = "0x40015E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float frameWeight;

			[Token(Token = "0x40015E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] vertices;

			[Token(Token = "0x40015E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3[] normals;

			[Token(Token = "0x40015E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3[] tangents;

			[Token(Token = "0x60019C8")]
			[Address(RVA = "0x1387E00", Offset = "0x1387E00", VA = "0x1387E00")]
			public MBBlendShapeFrame()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003BC")]
		public class MBBlendShape
		{
			[Token(Token = "0x40015E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int gameObjectID;

			[Token(Token = "0x40015E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x40015E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int indexInSource;

			[Token(Token = "0x40015E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MBBlendShapeFrame[] frames;

			[Token(Token = "0x60019C9")]
			[Address(RVA = "0x1387DF8", Offset = "0x1387DF8", VA = "0x1387DF8")]
			public MBBlendShape()
			{
			}
		}

		[Token(Token = "0x20003BD")]
		public class MeshChannelsCache
		{
			[Token(Token = "0x40015E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MB3_MeshCombinerSingle mc;

			[Token(Token = "0x40015E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			protected Dictionary<int, MeshChannels> meshID2MeshChannels;

			[Token(Token = "0x40015EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector2 _HALF_UV;

			[Token(Token = "0x60019CA")]
			[Address(RVA = "0x137F9C4", Offset = "0x137F9C4", VA = "0x137F9C4")]
			internal MeshChannelsCache(MB3_MeshCombinerSingle mcs)
			{
			}

			[Token(Token = "0x60019CB")]
			[Address(RVA = "0x138060C", Offset = "0x138060C", VA = "0x138060C")]
			internal Vector3[] GetVertices(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019CC")]
			[Address(RVA = "0x1380714", Offset = "0x1380714", VA = "0x1380714")]
			internal Vector3[] GetNormals(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019CD")]
			[Address(RVA = "0x138081C", Offset = "0x138081C", VA = "0x138081C")]
			internal Vector4[] GetTangents(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019CE")]
			[Address(RVA = "0x137AC24", Offset = "0x137AC24", VA = "0x137AC24")]
			internal Vector2[] GetUv0Raw(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019CF")]
			[Address(RVA = "0x1388504", Offset = "0x1388504", VA = "0x1388504")]
			internal Vector2[] GetUv0Modified(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019D0")]
			[Address(RVA = "0x1382368", Offset = "0x1382368", VA = "0x1382368")]
			internal Vector2[] GetUv2(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019D1")]
			[Address(RVA = "0x1381210", Offset = "0x1381210", VA = "0x1381210")]
			internal Vector2[] GetUv3(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019D2")]
			[Address(RVA = "0x1381334", Offset = "0x1381334", VA = "0x1381334")]
			internal Vector2[] GetUv4(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019D3")]
			[Address(RVA = "0x1381458", Offset = "0x1381458", VA = "0x1381458")]
			internal Color[] GetColors(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019D4")]
			[Address(RVA = "0x1387744", Offset = "0x1387744", VA = "0x1387744")]
			internal Matrix4x4[] GetBindposes(Renderer r)
			{
				return null;
			}

			[Token(Token = "0x60019D5")]
			[Address(RVA = "0x138545C", Offset = "0x138545C", VA = "0x138545C")]
			internal BoneWeight[] GetBoneWeights(Renderer r, int numVertsInMeshBeingAdded)
			{
				return null;
			}

			[Token(Token = "0x60019D6")]
			[Address(RVA = "0x1388E90", Offset = "0x1388E90", VA = "0x1388E90")]
			internal int[] GetTriangles(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019D7")]
			[Address(RVA = "0x1381560", Offset = "0x1381560", VA = "0x1381560")]
			internal MBBlendShape[] GetBlendShapes(Mesh m, int gameObjectID)
			{
				return null;
			}

			[Token(Token = "0x60019D8")]
			[Address(RVA = "0x1388890", Offset = "0x1388890", VA = "0x1388890")]
			private Color[] _getMeshColors(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019D9")]
			[Address(RVA = "0x1387E30", Offset = "0x1387E30", VA = "0x1387E30")]
			private Vector3[] _getMeshNormals(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019DA")]
			[Address(RVA = "0x1388058", Offset = "0x1388058", VA = "0x1388058")]
			private Vector4[] _getMeshTangents(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019DB")]
			[Address(RVA = "0x13882D4", Offset = "0x13882D4", VA = "0x13882D4")]
			private Vector2[] _getMeshUVs(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019DC")]
			[Address(RVA = "0x13885F4", Offset = "0x13885F4", VA = "0x13885F4")]
			private Vector2[] _getMeshUV2s(Mesh m)
			{
				return null;
			}

			[Token(Token = "0x60019DD")]
			[Address(RVA = "0x1388AD4", Offset = "0x1388AD4", VA = "0x1388AD4")]
			public static Matrix4x4[] _getBindPoses(Renderer r)
			{
				return null;
			}

			[Token(Token = "0x60019DE")]
			[Address(RVA = "0x1388C88", Offset = "0x1388C88", VA = "0x1388C88")]
			public static BoneWeight[] _getBoneWeights(Renderer r, int numVertsInMeshBeingAdded)
			{
				return null;
			}

			[Token(Token = "0x60019DF")]
			[Address(RVA = "0x1388F98", Offset = "0x1388F98", VA = "0x1388F98")]
			private void _generateTangents(int[] triangles, Vector3[] verts, Vector2[] uvs, Vector3[] normals, Vector4[] outTangents)
			{
			}
		}

		[Token(Token = "0x20003BE")]
		public struct BoneAndBindpose
		{
			[Token(Token = "0x40015EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform bone;

			[Token(Token = "0x40015EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Matrix4x4 bindPose;

			[Token(Token = "0x60019E0")]
			[Address(RVA = "0x8A56A8", Offset = "0x8A56A8", VA = "0x8A56A8")]
			public BoneAndBindpose(Transform t, Matrix4x4 bp)
			{
			}

			[Token(Token = "0x60019E1")]
			[Address(RVA = "0x8A56DC", Offset = "0x8A56DC", VA = "0x8A56DC", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60019E2")]
			[Address(RVA = "0x8A56E4", Offset = "0x8A56E4", VA = "0x8A56E4", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x20003BF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE62C", Offset = "0x7EE62C")]
		private sealed class <>c__DisplayClass54_0
		{
			[Token(Token = "0x40015ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject[] _goToAdd;

			[Token(Token = "0x60019E3")]
			[Address(RVA = "0x137F470", Offset = "0x137F470", VA = "0x137F470")]
			public <>c__DisplayClass54_0()
			{
			}
		}

		[Token(Token = "0x20003C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE63C", Offset = "0x7EE63C")]
		private sealed class <>c__DisplayClass54_1
		{
			[Token(Token = "0x40015EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int i;

			[Token(Token = "0x40015EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass54_0 CS$<>8__locals1;

			[Token(Token = "0x60019E4")]
			[Address(RVA = "0x137FA68", Offset = "0x137FA68", VA = "0x137FA68")]
			public <>c__DisplayClass54_1()
			{
			}

			[Token(Token = "0x60019E5")]
			[Address(RVA = "0x1387BB0", Offset = "0x1387BB0", VA = "0x1387BB0")]
			internal bool <_addToCombined>b__0(int o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected List<GameObject> objectsInCombinedMesh;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private int lightmapIndex;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private List<MB_DynamicGameObject> mbDynamicObjectsInCombinedMesh;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<int, MB_DynamicGameObject> _instance2combined_map;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3[] verts;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Vector3[] normals;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Vector4[] tangents;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Vector2[] uvs;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Vector2[] uv2s;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Vector2[] uv3s;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Vector2[] uv4s;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private Color[] colors;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Matrix4x4[] bindPoses;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Transform[] bones;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		internal MBBlendShape[] blendShapes;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		internal MBBlendShape[] blendShapesInCombined;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Mesh _mesh;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[][] submeshTris;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private BoneWeight[] boneWeights;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private GameObject[] empty;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int[] emptyIDs;

		[Token(Token = "0x17000122")]
		public override MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x1379274", Offset = "0x1379274", VA = "0x1379274", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public override MB_RenderType renderType
		{
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0x1379390", Offset = "0x1379390", VA = "0x1379390", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public override GameObject resultSceneObject
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x1379448", Offset = "0x1379448", VA = "0x1379448", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x1379544", Offset = "0x1379544", VA = "0x1379544")]
		private MB_DynamicGameObject instance2Combined_MapGet(int gameObjectID)
		{
			return null;
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x13795AC", Offset = "0x13795AC", VA = "0x13795AC")]
		private void instance2Combined_MapAdd(int gameObjectID, MB_DynamicGameObject dgo)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x137961C", Offset = "0x137961C", VA = "0x137961C")]
		private void instance2Combined_MapRemove(int gameObjectID)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x1379684", Offset = "0x1379684", VA = "0x1379684")]
		private bool instance2Combined_MapTryGetValue(int gameObjectID, out MB_DynamicGameObject dgo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x13796F4", Offset = "0x13796F4", VA = "0x13796F4")]
		private int instance2Combined_MapCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x137974C", Offset = "0x137974C", VA = "0x137974C")]
		private void instance2Combined_MapClear()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x13797A4", Offset = "0x13797A4", VA = "0x13797A4")]
		private bool instance2Combined_MapContainsKey(int gameObjectID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x137980C", Offset = "0x137980C", VA = "0x137980C", Slot = "45")]
		public override int GetNumObjectsInCombined()
		{
			return default(int);
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x137985C", Offset = "0x137985C", VA = "0x137985C", Slot = "44")]
		public override List<GameObject> GetObjectsInCombined()
		{
			return null;
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x13798E4", Offset = "0x13798E4", VA = "0x13798E4")]
		public Mesh GetMesh()
		{
			return null;
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x1379988", Offset = "0x1379988", VA = "0x1379988")]
		public Transform[] GetBones()
		{
			return null;
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1379990", Offset = "0x1379990", VA = "0x1379990", Slot = "39")]
		public override int GetLightmapIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x13799E8", Offset = "0x13799E8", VA = "0x13799E8", Slot = "46")]
		public override int GetNumVerticesFor(GameObject go)
		{
			return default(int);
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x1379A2C", Offset = "0x1379A2C", VA = "0x1379A2C", Slot = "47")]
		public override int GetNumVerticesFor(int instanceID)
		{
			return default(int);
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x1379A6C", Offset = "0x1379A6C", VA = "0x1379A6C", Slot = "48")]
		public override Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap()
		{
			return null;
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1379BC8", Offset = "0x1379BC8", VA = "0x1379BC8")]
		private void _initialize(int numResultMats)
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x137A30C", Offset = "0x137A30C", VA = "0x137A30C")]
		private bool _collectMaterialTriangles(Mesh m, MB_DynamicGameObject dgo, Material[] sharedMaterials, OrderedDictionary sourceMats2submeshIdx_map)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x137A954", Offset = "0x137A954", VA = "0x137A954")]
		private bool _collectOutOfBoundsUVRects2(Mesh m, MB_DynamicGameObject dgo, Material[] sharedMaterials, OrderedDictionary sourceMats2submeshIdx_map, Dictionary<int, MB_Utility.MeshAnalysisResult[]> meshAnalysisResults, MeshChannelsCache meshChannelCache)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x137AD2C", Offset = "0x137AD2C", VA = "0x137AD2C")]
		private bool _validateTextureBakeResults()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x137AF98", Offset = "0x137AF98", VA = "0x137AF98")]
		private bool _validateMeshFlags()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x137B198", Offset = "0x137B198", VA = "0x137B198")]
		private bool _showHide(GameObject[] goToShow, GameObject[] goToHide)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x137B4A0", Offset = "0x137B4A0", VA = "0x137B4A0")]
		private bool _addToCombined(GameObject[] goToAdd, int[] goToDelete, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x1380924", Offset = "0x1380924", VA = "0x1380924")]
		private void _copyAndAdjustUVsFromMesh(MB_DynamicGameObject dgo, Mesh mesh, int vertsIdx, MeshChannelsCache meshChannelsCache)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x1380F90", Offset = "0x1380F90", VA = "0x1380F90")]
		private void _copyAndAdjustUV2FromMesh(MB_DynamicGameObject dgo, Mesh mesh, int vertsIdx, MeshChannelsCache meshChannelsCache)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x1382470", Offset = "0x1382470", VA = "0x1382470", Slot = "56")]
		public override void UpdateSkinnedMeshApproximateBounds()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x1382480", Offset = "0x1382480", VA = "0x1382480", Slot = "57")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBones()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x1382744", Offset = "0x1382744", VA = "0x1382744", Slot = "59")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBounds()
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x1382A08", Offset = "0x1382A08", VA = "0x1382A08")]
		private int _getNumBones(Renderer r)
		{
			return default(int);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x1382B30", Offset = "0x1382B30", VA = "0x1382B30")]
		private Transform[] _getBones(Renderer r)
		{
			return null;
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x1382B3C", Offset = "0x1382B3C", VA = "0x1382B3C", Slot = "50")]
		public override void Apply(GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x1382C44", Offset = "0x1382C44", VA = "0x1382C44", Slot = "62")]
		public virtual void ApplyShowHide()
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x13831E8", Offset = "0x13831E8", VA = "0x13831E8", Slot = "51")]
		public override void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x1382E64", Offset = "0x1382E64", VA = "0x1382E64")]
		public int[][] GetSubmeshTrisWithShowHideApplied()
		{
			return null;
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x13847E4", Offset = "0x13847E4", VA = "0x13847E4", Slot = "52")]
		public override void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false)
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x1384830", Offset = "0x1384830", VA = "0x1384830")]
		private void _updateGameObjects(GameObject[] gos, bool recalcBounds, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo)
		{
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x1384B04", Offset = "0x1384B04", VA = "0x1384B04")]
		private void _updateGameObject(GameObject go, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x1385588", Offset = "0x1385588", VA = "0x1385588")]
		public bool ShowHideGameObjects(GameObject[] toShow, GameObject[] toHide)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x138558C", Offset = "0x138558C", VA = "0x138558C", Slot = "53")]
		public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x1385784", Offset = "0x1385784", VA = "0x1385784", Slot = "54")]
		public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x1385DAC", Offset = "0x1385DAC", VA = "0x1385DAC", Slot = "55")]
		public override bool CombinedMeshContains(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x1385E14", Offset = "0x1385E14", VA = "0x1385E14", Slot = "40")]
		public override void ClearBuffers()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x13860FC", Offset = "0x13860FC", VA = "0x13860FC", Slot = "41")]
		public override void ClearMesh()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x13861B8", Offset = "0x13861B8", VA = "0x13861B8", Slot = "42")]
		public override void DestroyMesh()
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x138632C", Offset = "0x138632C", VA = "0x138632C", Slot = "43")]
		public override void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x137F478", Offset = "0x137F478", VA = "0x137F478")]
		public bool ValidateTargRendererAndMeshAndResultSceneObj()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x1386514", Offset = "0x1386514", VA = "0x1386514")]
		public static Renderer BuildSceneHierarch(MB3_MeshCombinerSingle mom, GameObject root, Mesh m, bool createNewChild = false, [Optional] GameObject[] objsToBeAdded)
		{
			return null;
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x1385CAC", Offset = "0x1385CAC", VA = "0x1385CAC")]
		public void BuildSceneMeshObject([Optional] GameObject[] gos, bool createNewChild = false)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x137FFC8", Offset = "0x137FFC8", VA = "0x137FFC8")]
		private bool IsMirrored(Matrix4x4 tm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x138721C", Offset = "0x138721C", VA = "0x138721C", Slot = "58")]
		public override void CheckIntegrity()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x1384710", Offset = "0x1384710", VA = "0x1384710")]
		private void _ZeroArray(Vector3[] arr, int idx, int length)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x137F818", Offset = "0x137F818", VA = "0x137F818")]
		private List<MB_DynamicGameObject>[] _buildBoneIdx2dgoMap()
		{
			return null;
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x137FB44", Offset = "0x137FB44", VA = "0x137FB44")]
		private void _CollectBonesToAddForDGO(MB_DynamicGameObject dgo, Dictionary<Transform, int> bone2idx, HashSet<int> boneIdxsToDelete, HashSet<BoneAndBindpose> bonesToAdd, Renderer r, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x138016C", Offset = "0x138016C", VA = "0x138016C")]
		private void _CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes(HashSet<int> boneIdxsToDeleteHS, HashSet<BoneAndBindpose> bonesToAdd, Transform[] nbones, Matrix4x4[] nbindPoses, BoneWeight[] nboneWeights, int totalDeleteVerts)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1381A18", Offset = "0x1381A18", VA = "0x1381A18")]
		private void _AddBonesToNewBonesArrayAndAdjustBWIndexes(MB_DynamicGameObject dgo, Renderer r, int vertsIdx, Transform[] nbones, BoneWeight[] nboneWeights, MeshChannelsCache meshChannelCache)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1381F2C", Offset = "0x1381F2C", VA = "0x1381F2C")]
		private void _copyUV2unchangedToSeparateRects()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x1387888", Offset = "0x1387888", VA = "0x1387888", Slot = "61")]
		public override List<Material> GetMaterialsOnTargetRenderer()
		{
			return null;
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1387960", Offset = "0x1387960", VA = "0x1387960")]
		public MB3_MeshCombinerSingle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F0")]
	public class MB3_MultiMeshCombiner : MB3_MeshCombiner
	{
		[Serializable]
		[Token(Token = "0x20003C1")]
		public class CombinedMesh
		{
			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MB3_MeshCombinerSingle combinedMesh;

			[Token(Token = "0x40015F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int extraSpace;

			[Token(Token = "0x40015F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int numVertsInListToDelete;

			[Token(Token = "0x40015F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numVertsInListToAdd;

			[Token(Token = "0x40015F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<GameObject> gosToAdd;

			[Token(Token = "0x40015F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> gosToDelete;

			[Token(Token = "0x40015F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<GameObject> gosToUpdate;

			[Token(Token = "0x40015F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool isDirty;

			[Token(Token = "0x60019E6")]
			[Address(RVA = "0x12BDB04", Offset = "0x12BDB04", VA = "0x12BDB04")]
			public CombinedMesh(int maxNumVertsInMesh, GameObject resultSceneObject, MB2_LogLevel ll)
			{
			}

			[Token(Token = "0x60019E7")]
			[Address(RVA = "0x12BDC38", Offset = "0x12BDC38", VA = "0x12BDC38")]
			public bool isEmpty()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameObject[] empty;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int[] emptyIDs;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dictionary<int, CombinedMesh> obj2MeshCombinerMap;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public List<CombinedMesh> meshCombiners;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private int _maxVertsInMesh;

		[Token(Token = "0x17000125")]
		public override MB2_LogLevel LOG_LEVEL
		{
			[Token(Token = "0x6000C55")]
			[Address(RVA = "0x13895A8", Offset = "0x13895A8", VA = "0x13895A8", Slot = "4")]
			get
			{
				return default(MB2_LogLevel);
			}
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0x13895B0", Offset = "0x13895B0", VA = "0x13895B0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000126")]
		public override MB2_ValidationLevel validationLevel
		{
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0x1389710", Offset = "0x1389710", VA = "0x1389710", Slot = "6")]
			get
			{
				return default(MB2_ValidationLevel);
			}
			[Token(Token = "0x6000C57")]
			[Address(RVA = "0x1389660", Offset = "0x1389660", VA = "0x1389660", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000127")]
		public int maxVertsInMesh
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x1389718", Offset = "0x1389718", VA = "0x1389718")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x1389720", Offset = "0x1389720", VA = "0x1389720")]
			set
			{
			}
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x1389814", Offset = "0x1389814", VA = "0x1389814", Slot = "45")]
		public override int GetNumObjectsInCombined()
		{
			return default(int);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x138986C", Offset = "0x138986C", VA = "0x138986C", Slot = "46")]
		public override int GetNumVerticesFor(GameObject go)
		{
			return default(int);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x1389924", Offset = "0x1389924", VA = "0x1389924", Slot = "47")]
		public override int GetNumVerticesFor(int gameObjectID)
		{
			return default(int);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x13899C8", Offset = "0x13899C8", VA = "0x13899C8", Slot = "44")]
		public override List<GameObject> GetObjectsInCombined()
		{
			return null;
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x1389ABC", Offset = "0x1389ABC", VA = "0x1389ABC", Slot = "39")]
		public override int GetLightmapIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x1389B44", Offset = "0x1389B44", VA = "0x1389B44", Slot = "55")]
		public override bool CombinedMeshContains(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1389BC0", Offset = "0x1389BC0", VA = "0x1389BC0")]
		private bool _validateTextureBakeResults()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x1389DEC", Offset = "0x1389DEC", VA = "0x1389DEC", Slot = "50")]
		public override void Apply(GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x1389F00", Offset = "0x1389F00", VA = "0x1389F00", Slot = "51")]
		public override void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones = false, bool blendShapesFlag = false, [Optional] GenerateUV2Delegate uv2GenerationMethod)
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x138A0C4", Offset = "0x138A0C4", VA = "0x138A0C4", Slot = "56")]
		public override void UpdateSkinnedMeshApproximateBounds()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x138A16C", Offset = "0x138A16C", VA = "0x138A16C", Slot = "57")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBones()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x138A214", Offset = "0x138A214", VA = "0x138A214", Slot = "59")]
		public override void UpdateSkinnedMeshApproximateBoundsFromBounds()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x138A2BC", Offset = "0x138A2BC", VA = "0x138A2BC", Slot = "52")]
		public override void UpdateGameObjects(GameObject[] gos, bool recalcBounds = true, bool updateVertices = true, bool updateNormals = true, bool updateTangents = true, bool updateUV = false, bool updateUV2 = false, bool updateUV3 = false, bool updateUV4 = false, bool updateColors = false, bool updateSkinningInfo = false)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x138A6C4", Offset = "0x138A6C4", VA = "0x138A6C4", Slot = "53")]
		public override bool AddDeleteGameObjects(GameObject[] gos, GameObject[] deleteGOs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x138A8BC", Offset = "0x138A8BC", VA = "0x138A8BC", Slot = "54")]
		public override bool AddDeleteGameObjectsByID(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x138AD50", Offset = "0x138AD50", VA = "0x138AD50")]
		private bool _validate(GameObject[] gos, int[] deleteGOinstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x138B348", Offset = "0x138B348", VA = "0x138B348")]
		private void _distributeAmongBakers(GameObject[] gos, int[] deleteGOinstanceIDs)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x138BD18", Offset = "0x138BD18", VA = "0x138BD18")]
		private bool _bakeStep1(GameObject[] gos, int[] deleteGOinstanceIDs, bool disableRendererInSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x138CB80", Offset = "0x138CB80", VA = "0x138CB80", Slot = "48")]
		public override Dictionary<MBBlendShapeKey, MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap()
		{
			return null;
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x138CDA4", Offset = "0x138CDA4", VA = "0x138CDA4", Slot = "40")]
		public override void ClearBuffers()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x138CE4C", Offset = "0x138CE4C", VA = "0x138CE4C", Slot = "41")]
		public override void ClearMesh()
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x138CE5C", Offset = "0x138CE5C", VA = "0x138CE5C", Slot = "42")]
		public override void DestroyMesh()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x138D004", Offset = "0x138D004", VA = "0x138D004", Slot = "43")]
		public override void DestroyMeshEditor(MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x138C938", Offset = "0x138C938", VA = "0x138C938")]
		private void _setMBValues(MB3_MeshCombinerSingle targ)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x138D234", Offset = "0x138D234", VA = "0x138D234", Slot = "61")]
		public override List<Material> GetMaterialsOnTargetRenderer()
		{
			return null;
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x138D350", Offset = "0x138D350", VA = "0x138D350", Slot = "58")]
		public override void CheckIntegrity()
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x138D3F8", Offset = "0x138D3F8", VA = "0x138D3F8")]
		public MB3_MultiMeshCombiner()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class PriorityQueue<TPriority, TValue> : ICollection<KeyValuePair<TPriority, TValue>>, IEnumerable<KeyValuePair<TPriority, TValue>>, IEnumerable
	{
		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<KeyValuePair<TPriority, TValue>> _baseHeap;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IComparer<TPriority> _comparer;

		[Token(Token = "0x17000128")]
		public bool IsEmpty
		{
			[Token(Token = "0x6000C84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000129")]
		public int Count
		{
			[Token(Token = "0x6000C8E")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012A")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000C90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C77")]
		public PriorityQueue()
		{
		}

		[Token(Token = "0x6000C78")]
		public PriorityQueue(int capacity)
		{
		}

		[Token(Token = "0x6000C79")]
		public PriorityQueue(int capacity, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000C7A")]
		public PriorityQueue(IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000C7B")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data)
		{
		}

		[Token(Token = "0x6000C7C")]
		public PriorityQueue(IEnumerable<KeyValuePair<TPriority, TValue>> data, IComparer<TPriority> comparer)
		{
		}

		[Token(Token = "0x6000C7D")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2)
		{
			return null;
		}

		[Token(Token = "0x6000C7E")]
		public static PriorityQueue<TPriority, TValue> MergeQueues(PriorityQueue<TPriority, TValue> pq1, PriorityQueue<TPriority, TValue> pq2, IComparer<TPriority> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000C7F")]
		public void Enqueue(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x6000C80")]
		public KeyValuePair<TPriority, TValue> Dequeue()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000C81")]
		public TValue DequeueValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000C82")]
		public KeyValuePair<TPriority, TValue> Peek()
		{
			return default(KeyValuePair<TPriority, TValue>);
		}

		[Token(Token = "0x6000C83")]
		public TValue PeekValue()
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000C85")]
		private void ExchangeElements(int pos1, int pos2)
		{
		}

		[Token(Token = "0x6000C86")]
		private void Insert(TPriority priority, TValue value)
		{
		}

		[Token(Token = "0x6000C87")]
		private int HeapifyFromEndToBeginning(int pos)
		{
			return default(int);
		}

		[Token(Token = "0x6000C88")]
		private void DeleteRoot()
		{
		}

		[Token(Token = "0x6000C89")]
		private void HeapifyFromBeginningToEnd(int pos)
		{
		}

		[Token(Token = "0x6000C8A")]
		public void Add(KeyValuePair<TPriority, TValue> item)
		{
		}

		[Token(Token = "0x6000C8B")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C8C")]
		public bool Contains(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8D")]
		public bool TryFindValue(TPriority item, out TValue foundVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8F")]
		public void CopyTo(KeyValuePair<TPriority, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000C91")]
		public bool Remove(KeyValuePair<TPriority, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C92")]
		public IEnumerator<KeyValuePair<TPriority, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000C93")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001F2")]
	public class ShaderTextureProperty
	{
		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isNormalMap;

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x120FD84", Offset = "0x120FD84", VA = "0x120FD84")]
		public ShaderTextureProperty(string n, bool norm)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x120FDC4", Offset = "0x120FDC4", VA = "0x120FDC4")]
		public static string[] GetNames(List<ShaderTextureProperty> props)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001F3")]
	public class MB3_TextureCombiner
	{
		[Token(Token = "0x20003C2")]
		public class MeshBakerMaterialTexture
		{
			[Token(Token = "0x40015F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D t;

			[Token(Token = "0x40015F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float texelDensity;

			[Token(Token = "0x40015FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DRect encapsulatingSamplingRect;

			[Token(Token = "0x40015FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public DRect matTilingRect;

			[Token(Token = "0x60019E8")]
			[Address(RVA = "0x12D25EC", Offset = "0x12D25EC", VA = "0x12D25EC")]
			public MeshBakerMaterialTexture()
			{
			}

			[Token(Token = "0x60019E9")]
			[Address(RVA = "0x12D25F4", Offset = "0x12D25F4", VA = "0x12D25F4")]
			public MeshBakerMaterialTexture(Texture2D tx)
			{
			}

			[Token(Token = "0x60019EA")]
			[Address(RVA = "0x12CF140", Offset = "0x12CF140", VA = "0x12CF140")]
			public MeshBakerMaterialTexture(Texture2D tx, Vector2 o, Vector2 s, float texelDens)
			{
			}
		}

		[Token(Token = "0x20003C3")]
		public class MatAndTransformToMerged
		{
			[Token(Token = "0x40015FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material mat;

			[Token(Token = "0x40015FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DRect obUVRectIfTilingSame;

			[Token(Token = "0x40015FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public DRect samplingRectMatAndUVTiling;

			[Token(Token = "0x40015FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public DRect materialTiling;

			[Token(Token = "0x4001600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public string objName;

			[Token(Token = "0x60019EB")]
			[Address(RVA = "0x12CF320", Offset = "0x12CF320", VA = "0x12CF320")]
			public MatAndTransformToMerged(Material m)
			{
			}

			[Token(Token = "0x60019EC")]
			[Address(RVA = "0x12D24A0", Offset = "0x12D24A0", VA = "0x12D24A0", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60019ED")]
			[Address(RVA = "0x12D2588", Offset = "0x12D2588", VA = "0x12D2588", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x20003C4")]
		public class SamplingRectEnclosesComparer : IComparer<MatAndTransformToMerged>
		{
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0x12D2620", Offset = "0x12D2620", VA = "0x12D2620", Slot = "4")]
			public int Compare(MatAndTransformToMerged x, MatAndTransformToMerged y)
			{
				return default(int);
			}

			[Token(Token = "0x60019EF")]
			[Address(RVA = "0x12C5B14", Offset = "0x12C5B14", VA = "0x12C5B14")]
			public SamplingRectEnclosesComparer()
			{
			}
		}

		[Token(Token = "0x20003C5")]
		public class MatsAndGOs
		{
			[Token(Token = "0x4001601")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<MatAndTransformToMerged> mats;

			[Token(Token = "0x4001602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<GameObject> gos;

			[Token(Token = "0x60019F0")]
			[Address(RVA = "0x12D2328", Offset = "0x12D2328", VA = "0x12D2328")]
			public MatsAndGOs()
			{
			}
		}

		[Token(Token = "0x20003C6")]
		public class MB_TexSet
		{
			[Token(Token = "0x4001603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MeshBakerMaterialTexture[] ts;

			[Token(Token = "0x4001604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MatsAndGOs matsAndGOs;

			[Token(Token = "0x4001605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool allTexturesUseSameMatTiling;

			[Token(Token = "0x4001606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector2 obUVoffset;

			[Token(Token = "0x4001607")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector2 obUVscale;

			[Token(Token = "0x4001608")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int idealWidth;

			[Token(Token = "0x4001609")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int idealHeight;

			[Token(Token = "0x170002A0")]
			public DRect obUVrect
			{
				[Token(Token = "0x60019F1")]
				[Address(RVA = "0x12D0BD0", Offset = "0x12D0BD0", VA = "0x12D0BD0")]
				get
				{
					return default(DRect);
				}
			}

			[Token(Token = "0x60019F2")]
			[Address(RVA = "0x12CF1D0", Offset = "0x12CF1D0", VA = "0x12CF1D0")]
			public MB_TexSet(MeshBakerMaterialTexture[] tss, Vector2 uvOffset, Vector2 uvScale)
			{
			}

			[Token(Token = "0x60019F3")]
			[Address(RVA = "0x12C9C5C", Offset = "0x12C9C5C", VA = "0x12C9C5C")]
			public bool IsEqual(object obj, bool fixOutOfBoundsUVs, bool considerNonTextureProperties, TextureBlender resultMaterialTextureBlender)
			{
				return default(bool);
			}

			[Token(Token = "0x60019F4")]
			[Address(RVA = "0x12C52A4", Offset = "0x12C52A4", VA = "0x12C52A4")]
			public void CalcInitialFullSamplingRects(bool fixOutOfBoundsUVs)
			{
			}

			[Token(Token = "0x60019F5")]
			[Address(RVA = "0x12C54F8", Offset = "0x12C54F8", VA = "0x12C54F8")]
			public void CalcMatAndUVSamplingRectsIfAllMatTilingSame()
			{
			}

			[Token(Token = "0x60019F6")]
			[Address(RVA = "0x12C5720", Offset = "0x12C5720", VA = "0x12C5720")]
			public bool AllTexturesAreSameForMerge(MB_TexSet other, bool considerNonTextureProperties, TextureBlender resultMaterialTextureBlender)
			{
				return default(bool);
			}

			[Token(Token = "0x60019F7")]
			[Address(RVA = "0x12C4FE8", Offset = "0x12C4FE8", VA = "0x12C4FE8")]
			internal string GetDescription()
			{
				return null;
			}

			[Token(Token = "0x60019F8")]
			[Address(RVA = "0x12D2330", Offset = "0x12D2330", VA = "0x12D2330")]
			internal string GetMatSubrectDescriptions()
			{
				return null;
			}
		}

		[Token(Token = "0x20003C7")]
		public class CombineTexturesIntoAtlasesCoroutineResult
		{
			[Token(Token = "0x400160A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool success;

			[Token(Token = "0x400160B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool isFinished;

			[Token(Token = "0x60019F9")]
			[Address(RVA = "0x12BE294", Offset = "0x12BE294", VA = "0x12BE294")]
			public CombineTexturesIntoAtlasesCoroutineResult()
			{
			}
		}

		[Token(Token = "0x20003C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE64C", Offset = "0x7EE64C")]
		private sealed class <CombineTexturesIntoAtlasesCoroutine>d__60 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400160C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400160D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400160E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CombineTexturesIntoAtlasesCoroutineResult coroutineResult;

			[Token(Token = "0x400160F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float maxTimePerFrame;

			[Token(Token = "0x4001610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001612")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001613")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Material resultMaterial;

			[Token(Token = "0x4001614")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<GameObject> objsToMesh;

			[Token(Token = "0x4001615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001616")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001617")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public List<AtlasPackingResult> packingResults;

			[Token(Token = "0x4001618")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public bool onlyPackRects;

			[Token(Token = "0x170002A1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019FD")]
				[Address(RVA = "0x12CA30C", Offset = "0x12CA30C", VA = "0x12CA30C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019FF")]
				[Address(RVA = "0x12CA374", Offset = "0x12CA374", VA = "0x12CA374", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019FA")]
			[Address(RVA = "0x12BE44C", Offset = "0x12BE44C", VA = "0x12BE44C")]
			[DebuggerHidden]
			public <CombineTexturesIntoAtlasesCoroutine>d__60(int <>1__state)
			{
			}

			[Token(Token = "0x60019FB")]
			[Address(RVA = "0x12C9F64", Offset = "0x12C9F64", VA = "0x12C9F64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019FC")]
			[Address(RVA = "0x12C9F68", Offset = "0x12C9F68", VA = "0x12C9F68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019FE")]
			[Address(RVA = "0x12CA314", Offset = "0x12CA314", VA = "0x12CA314", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE65C", Offset = "0x7EE65C")]
		private sealed class <>c__DisplayClass63_0
		{
			[Token(Token = "0x4001619")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x6001A00")]
			[Address(RVA = "0x12BF1D4", Offset = "0x12BF1D4", VA = "0x12BF1D4")]
			public <>c__DisplayClass63_0()
			{
			}
		}

		[Token(Token = "0x20003CA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE66C", Offset = "0x7EE66C")]
		private sealed class <>c__DisplayClass63_1
		{
			[Token(Token = "0x400161A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int i;

			[Token(Token = "0x400161B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass63_0 CS$<>8__locals1;

			[Token(Token = "0x6001A01")]
			[Address(RVA = "0x12BF1DC", Offset = "0x12BF1DC", VA = "0x12BF1DC")]
			public <>c__DisplayClass63_1()
			{
			}

			[Token(Token = "0x6001A02")]
			[Address(RVA = "0x12C9B7C", Offset = "0x12C9B7C", VA = "0x12C9B7C")]
			internal bool <_CollectPropertyNames>b__0(ShaderTextureProperty x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20003CB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE67C", Offset = "0x7EE67C")]
		private sealed class <_CombineTexturesIntoAtlases>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400161C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400161D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400161E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x400161F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<GameObject> objsToMesh;

			[Token(Token = "0x4001621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Material resultMaterial;

			[Token(Token = "0x4001624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool onlyPackRects;

			[Token(Token = "0x4001625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<AtlasPackingResult> atlasPackingResult;

			[Token(Token = "0x4001627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private Stopwatch <sw>5__2;

			[Token(Token = "0x170002A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A07")]
				[Address(RVA = "0x12CB90C", Offset = "0x12CB90C", VA = "0x12CB90C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A09")]
				[Address(RVA = "0x12CB974", Offset = "0x12CB974", VA = "0x12CB974", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A03")]
			[Address(RVA = "0x12BF1E4", Offset = "0x12BF1E4", VA = "0x12BF1E4")]
			[DebuggerHidden]
			public <_CombineTexturesIntoAtlases>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x6001A04")]
			[Address(RVA = "0x12CB000", Offset = "0x12CB000", VA = "0x12CB000", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A05")]
			[Address(RVA = "0x12CB274", Offset = "0x12CB274", VA = "0x12CB274", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A06")]
			[Address(RVA = "0x12CB02C", Offset = "0x12CB02C", VA = "0x12CB02C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001A08")]
			[Address(RVA = "0x12CB914", Offset = "0x12CB914", VA = "0x12CB914", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE68C", Offset = "0x7EE68C")]
		private sealed class <__CombineTexturesIntoAtlases>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400162A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400162B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x400162C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x400162D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<GameObject> objsToMesh;

			[Token(Token = "0x400162E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x400162F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001632")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001633")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Material resultMaterial;

			[Token(Token = "0x4001634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private List<MB_TexSet> <distinctMaterialTextures>5__2;

			[Token(Token = "0x4001635")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool[] <allTexturesAreNullAndSameColor>5__3;

			[Token(Token = "0x170002A5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A0D")]
				[Address(RVA = "0x12CC090", Offset = "0x12CC090", VA = "0x12CC090", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A0F")]
				[Address(RVA = "0x12CC0F8", Offset = "0x12CC0F8", VA = "0x12CC0F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A0A")]
			[Address(RVA = "0x12BF2D0", Offset = "0x12BF2D0", VA = "0x12BF2D0")]
			[DebuggerHidden]
			public <__CombineTexturesIntoAtlases>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6001A0B")]
			[Address(RVA = "0x12CB97C", Offset = "0x12CB97C", VA = "0x12CB97C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A0C")]
			[Address(RVA = "0x12CB980", Offset = "0x12CB980", VA = "0x12CB980", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0x12CC098", Offset = "0x12CC098", VA = "0x12CC098", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE69C", Offset = "0x7EE69C")]
		private sealed class <__RunTexturePacker>d__66 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001636")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001637")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001638")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001639")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x400163A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<GameObject> objsToMesh;

			[Token(Token = "0x400163B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x400163C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<Material> allowedMaterialsFilter;

			[Token(Token = "0x400163D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x400163E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<AtlasPackingResult> packingResult;

			[Token(Token = "0x400163F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private List<MB_TexSet> <distinctMaterialTextures>5__2;

			[Token(Token = "0x170002A7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A13")]
				[Address(RVA = "0x12CDB14", Offset = "0x12CDB14", VA = "0x12CDB14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A15")]
				[Address(RVA = "0x12CDB7C", Offset = "0x12CDB7C", VA = "0x12CDB7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A10")]
			[Address(RVA = "0x12BF3A8", Offset = "0x12BF3A8", VA = "0x12BF3A8")]
			[DebuggerHidden]
			public <__RunTexturePacker>d__66(int <>1__state)
			{
			}

			[Token(Token = "0x6001A11")]
			[Address(RVA = "0x12CD73C", Offset = "0x12CD73C", VA = "0x12CD73C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A12")]
			[Address(RVA = "0x12CD740", Offset = "0x12CD740", VA = "0x12CD740", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A14")]
			[Address(RVA = "0x12CDB1C", Offset = "0x12CDB1C", VA = "0x12CDB1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003CE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE6AC", Offset = "0x7EE6AC")]
		private sealed class <>c__DisplayClass67_0
		{
			[Token(Token = "0x4001640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MB_TexSet setOfTexs;

			[Token(Token = "0x4001641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x6001A16")]
			[Address(RVA = "0x12C9C1C", Offset = "0x12C9C1C", VA = "0x12C9C1C")]
			public <>c__DisplayClass67_0()
			{
			}

			[Token(Token = "0x6001A17")]
			[Address(RVA = "0x12C9C24", Offset = "0x12C9C24", VA = "0x12C9C24")]
			internal bool <__Step1_CollectDistinctMatTexturesAndUsedObjects>b__0(MB_TexSet x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20003CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE6BC", Offset = "0x7EE6BC")]
		private sealed class <__Step1_CollectDistinctMatTexturesAndUsedObjects>d__67 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001644")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<GameObject> allObjsToMesh;

			[Token(Token = "0x4001645")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001646")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001647")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CombineTexturesIntoAtlasesCoroutineResult result;

			[Token(Token = "0x4001648")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<Material> allowedMaterialsFilter;

			[Token(Token = "0x4001649")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x400164A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x400164B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public List<MB_TexSet> distinctMaterialTextures;

			[Token(Token = "0x400164C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<GameObject> usedObjsToMesh;

			[Token(Token = "0x170002A9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A1B")]
				[Address(RVA = "0x12CF388", Offset = "0x12CF388", VA = "0x12CF388", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A1D")]
				[Address(RVA = "0x12CF3F0", Offset = "0x12CF3F0", VA = "0x12CF3F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A18")]
			[Address(RVA = "0x12BF494", Offset = "0x12BF494", VA = "0x12BF494")]
			[DebuggerHidden]
			public <__Step1_CollectDistinctMatTexturesAndUsedObjects>d__67(int <>1__state)
			{
			}

			[Token(Token = "0x6001A19")]
			[Address(RVA = "0x12CDB84", Offset = "0x12CDB84", VA = "0x12CDB84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0x12CDB88", Offset = "0x12CDB88", VA = "0x12CDB88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x12CF390", Offset = "0x12CF390", VA = "0x12CF390", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE6CC", Offset = "0x7EE6CC")]
		private sealed class <__Step2_CalculateIdealSizesForTexturesInAtlasAndPadding>d__69 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400164D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400164E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400164F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<MB_TexSet> distinctMaterialTextures;

			[Token(Token = "0x4001650")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001651")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x4001652")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool[] allTexturesAreNullAndSameColor;

			[Token(Token = "0x4001653")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001654")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x170002AB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A21")]
				[Address(RVA = "0x12D0C0C", Offset = "0x12D0C0C", VA = "0x12D0C0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A23")]
				[Address(RVA = "0x12D0C74", Offset = "0x12D0C74", VA = "0x12D0C74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A1E")]
			[Address(RVA = "0x12BF564", Offset = "0x12BF564", VA = "0x12BF564")]
			[DebuggerHidden]
			public <__Step2_CalculateIdealSizesForTexturesInAtlasAndPadding>d__69(int <>1__state)
			{
			}

			[Token(Token = "0x6001A1F")]
			[Address(RVA = "0x12CF3F8", Offset = "0x12CF3F8", VA = "0x12CF3F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A20")]
			[Address(RVA = "0x12CF3FC", Offset = "0x12CF3FC", VA = "0x12CF3FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A22")]
			[Address(RVA = "0x12D0C14", Offset = "0x12D0C14", VA = "0x12D0C14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE6DC", Offset = "0x7EE6DC")]
		private sealed class <__Step3_BuildAndSaveAtlasesAndStoreResults>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001655")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001656")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001657")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x4001658")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<MB_TexSet> distinctMaterialTextures;

			[Token(Token = "0x4001659")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool[] allTexturesAreNullAndSameColor;

			[Token(Token = "0x400165A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x400165B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x400165C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Material resultMaterial;

			[Token(Token = "0x400165D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x400165E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public int _padding;

			[Token(Token = "0x400165F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public MB_AtlasesAndRects resultAtlasesAndRects;

			[Token(Token = "0x4001660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Stopwatch <sw>5__2;

			[Token(Token = "0x4001661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private int <numAtlases>5__3;

			[Token(Token = "0x4001662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private StringBuilder <report>5__4;

			[Token(Token = "0x4001663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private Texture2D[] <atlases>5__5;

			[Token(Token = "0x170002AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A27")]
				[Address(RVA = "0x12D22B8", Offset = "0x12D22B8", VA = "0x12D22B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A29")]
				[Address(RVA = "0x12D2320", Offset = "0x12D2320", VA = "0x12D2320", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A24")]
			[Address(RVA = "0x12BFCB4", Offset = "0x12BFCB4", VA = "0x12BFCB4")]
			[DebuggerHidden]
			public <__Step3_BuildAndSaveAtlasesAndStoreResults>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x6001A25")]
			[Address(RVA = "0x12D0C7C", Offset = "0x12D0C7C", VA = "0x12D0C7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A26")]
			[Address(RVA = "0x12D0C80", Offset = "0x12D0C80", VA = "0x12D0C80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A28")]
			[Address(RVA = "0x12D22C0", Offset = "0x12D22C0", VA = "0x12D22C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE6EC", Offset = "0x7EE6EC")]
		private sealed class <__CreateAtlasesMBTexturePacker>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<MB_TexSet> distinctMaterialTextures;

			[Token(Token = "0x4001667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x4001668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Texture2D[] atlases;

			[Token(Token = "0x4001669")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Material resultMaterial;

			[Token(Token = "0x400166A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<ShaderTextureProperty> texPropertyNames;

			[Token(Token = "0x400166B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int numAtlases;

			[Token(Token = "0x400166C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public int _padding;

			[Token(Token = "0x400166D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool[] allTexturesAreNullAndSameColor;

			[Token(Token = "0x400166E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x400166F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public MB2_EditorMethodsInterface textureEditorMethods;

			[Token(Token = "0x4001670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Rect[] <uvRects>5__2;

			[Token(Token = "0x4001671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private int <atlasSizeX>5__3;

			[Token(Token = "0x4001672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private int <atlasSizeY>5__4;

			[Token(Token = "0x4001673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private int <propIdx>5__5;

			[Token(Token = "0x4001674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private Color[][] <atlasPixels>5__6;

			[Token(Token = "0x4001675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private bool <isNormalMap>5__7;

			[Token(Token = "0x4001676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private int <texSetIdx>5__8;

			[Token(Token = "0x170002AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A2D")]
				[Address(RVA = "0x12CD6CC", Offset = "0x12CD6CC", VA = "0x12CD6CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A2F")]
				[Address(RVA = "0x12CD734", Offset = "0x12CD734", VA = "0x12CD734", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0x12BFDA8", Offset = "0x12BFDA8", VA = "0x12BFDA8")]
			[DebuggerHidden]
			public <__CreateAtlasesMBTexturePacker>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6001A2B")]
			[Address(RVA = "0x12CC100", Offset = "0x12CC100", VA = "0x12CC100", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0x12CC104", Offset = "0x12CC104", VA = "0x12CC104", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A2E")]
			[Address(RVA = "0x12CD6D4", Offset = "0x12CD6D4", VA = "0x12CD6D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE6FC", Offset = "0x7EE6FC")]
		private sealed class <CopyScaledAndTiledToAtlas>d__86 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MB3_TextureCombiner <>4__this;

			[Token(Token = "0x400167A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MeshBakerMaterialTexture source;

			[Token(Token = "0x400167B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int targX;

			[Token(Token = "0x400167C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int targY;

			[Token(Token = "0x400167D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int targW;

			[Token(Token = "0x400167E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int targH;

			[Token(Token = "0x400167F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public DRect srcSamplingRect;

			[Token(Token = "0x4001680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public MB_TexSet sourceMaterial;

			[Token(Token = "0x4001681")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public ShaderTextureProperty shaderPropertyName;

			[Token(Token = "0x4001682")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public ProgressUpdateDelegate progressInfo;

			[Token(Token = "0x4001683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Color[][] atlasPixels;

			[Token(Token = "0x4001684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private int <w>5__2;

			[Token(Token = "0x4001685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private int <h>5__3;

			[Token(Token = "0x4001686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private int <i>5__4;

			[Token(Token = "0x4001687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private int <j>5__5;

			[Token(Token = "0x170002B1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A33")]
				[Address(RVA = "0x12CAF90", Offset = "0x12CAF90", VA = "0x12CAF90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A35")]
				[Address(RVA = "0x12CAFF8", Offset = "0x12CAFF8", VA = "0x12CAFF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A30")]
			[Address(RVA = "0x12C63B8", Offset = "0x12C63B8", VA = "0x12C63B8")]
			[DebuggerHidden]
			public <CopyScaledAndTiledToAtlas>d__86(int <>1__state)
			{
			}

			[Token(Token = "0x6001A31")]
			[Address(RVA = "0x12CA37C", Offset = "0x12CA37C", VA = "0x12CA37C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A32")]
			[Address(RVA = "0x12CA380", Offset = "0x12CA380", VA = "0x12CA380", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A34")]
			[Address(RVA = "0x12CAF98", Offset = "0x12CAF98", VA = "0x12CAF98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DO_INTEGRITY_CHECKS;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MB2_LogLevel LOG_LEVEL;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ShaderTextureProperty[] shaderTexPropertyNames;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected MB2_TextureBakeResults _textureBakeResults;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected int _atlasPadding;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected int _maxAtlasSize;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected bool _resizePowerOfTwoTextures;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		protected bool _fixOutOfBoundsUVs;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		protected int _maxTilingBakeSize;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected bool _saveAtlasesAsAssets;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		protected MB2_PackingAlgorithmEnum _packingAlgorithm;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected bool _meshBakerTexturePackerForcePowerOfTwo;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected List<ShaderTextureProperty> _customShaderPropNames;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected bool _normalizeTexelDensity;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[SerializeField]
		protected bool _considerNonTextureProperties;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected TextureBlender resultMaterialTextureBlender;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected TextureBlender[] textureBlenders;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected List<Texture2D> _temporaryTextures;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static bool _RunCorutineWithoutPauseIsRunning;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int __step2_CalculateIdealSizesForTexturesInAtlasAndPadding;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rect[] __createAtlasesMBTexturePacker;

		[Token(Token = "0x1700012B")]
		public MB2_TextureBakeResults textureBakeResults
		{
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0x12BDDB0", Offset = "0x12BDDB0", VA = "0x12BDDB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0x12BDDB8", Offset = "0x12BDDB8", VA = "0x12BDDB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public int atlasPadding
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0x12BDDC0", Offset = "0x12BDDC0", VA = "0x12BDDC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0x12BDDC8", Offset = "0x12BDDC8", VA = "0x12BDDC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public int maxAtlasSize
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0x12BDDD0", Offset = "0x12BDDD0", VA = "0x12BDDD0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0x12BDDD8", Offset = "0x12BDDD8", VA = "0x12BDDD8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public bool resizePowerOfTwoTextures
		{
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0x12BDDE0", Offset = "0x12BDDE0", VA = "0x12BDDE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0x12BDDE8", Offset = "0x12BDDE8", VA = "0x12BDDE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public bool fixOutOfBoundsUVs
		{
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0x12BDDF4", Offset = "0x12BDDF4", VA = "0x12BDDF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x12BDDFC", Offset = "0x12BDDFC", VA = "0x12BDDFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000130")]
		public int maxTilingBakeSize
		{
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0x12BDE08", Offset = "0x12BDE08", VA = "0x12BDE08")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0x12BDE10", Offset = "0x12BDE10", VA = "0x12BDE10")]
			set
			{
			}
		}

		[Token(Token = "0x17000131")]
		public bool saveAtlasesAsAssets
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x12BDE18", Offset = "0x12BDE18", VA = "0x12BDE18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x12BDE20", Offset = "0x12BDE20", VA = "0x12BDE20")]
			set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public MB2_PackingAlgorithmEnum packingAlgorithm
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x12BDE2C", Offset = "0x12BDE2C", VA = "0x12BDE2C")]
			get
			{
				return default(MB2_PackingAlgorithmEnum);
			}
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x12BDE34", Offset = "0x12BDE34", VA = "0x12BDE34")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public bool meshBakerTexturePackerForcePowerOfTwo
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x12BDE3C", Offset = "0x12BDE3C", VA = "0x12BDE3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x12BDE44", Offset = "0x12BDE44", VA = "0x12BDE44")]
			set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public List<ShaderTextureProperty> customShaderPropNames
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x12BDE50", Offset = "0x12BDE50", VA = "0x12BDE50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x12BDE58", Offset = "0x12BDE58", VA = "0x12BDE58")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public bool considerNonTextureProperties
		{
			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0x12BDE60", Offset = "0x12BDE60", VA = "0x12BDE60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x12BDE68", Offset = "0x12BDE68", VA = "0x12BDE68")]
			set
			{
			}
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x12BDE74", Offset = "0x12BDE74", VA = "0x12BDE74")]
		public static void RunCorutineWithoutPause(IEnumerator cor, int recursionDepth)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x12BE178", Offset = "0x12BE178", VA = "0x12BE178")]
		public bool CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, [Optional] MB2_EditorMethodsInterface textureEditorMethods, [Optional] List<AtlasPackingResult> packingResults, bool onlyPackRects = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x12BE370", Offset = "0x12BE370", VA = "0x12BE370")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB7C4", Offset = "0x7FB7C4")]
		public IEnumerator CombineTexturesIntoAtlasesCoroutine(ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, [Optional] MB2_EditorMethodsInterface textureEditorMethods, [Optional] CombineTexturesIntoAtlasesCoroutineResult coroutineResult, float maxTimePerFrame = 0.01f, [Optional] List<AtlasPackingResult> packingResults, bool onlyPackRects = false)
		{
			return null;
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x12BE478", Offset = "0x12BE478", VA = "0x12BE478")]
		private static bool InterfaceFilter(Type typeObj, object criteriaObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x12BE4CC", Offset = "0x12BE4CC", VA = "0x12BE4CC")]
		private void _LoadTextureBlenders()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x12BE94C", Offset = "0x12BE94C", VA = "0x12BE94C")]
		private bool _CollectPropertyNames(Material resultMaterial, List<ShaderTextureProperty> texPropertyNames)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x12BE2A4", Offset = "0x12BE2A4", VA = "0x12BE2A4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB828", Offset = "0x7FB828")]
		private IEnumerator _CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, MB2_EditorMethodsInterface textureEditorMethods, List<AtlasPackingResult> atlasPackingResult, bool onlyPackRects)
		{
			return null;
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x12BF210", Offset = "0x12BF210", VA = "0x12BF210")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB88C", Offset = "0x7FB88C")]
		private IEnumerator __CombineTexturesIntoAtlases(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial, List<ShaderTextureProperty> texPropertyNames, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, MB2_EditorMethodsInterface textureEditorMethods)
		{
			return null;
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x12BF2FC", Offset = "0x12BF2FC", VA = "0x12BF2FC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB8F0", Offset = "0x7FB8F0")]
		private IEnumerator __RunTexturePacker(CombineTexturesIntoAtlasesCoroutineResult result, List<ShaderTextureProperty> texPropertyNames, List<GameObject> objsToMesh, List<Material> allowedMaterialsFilter, MB2_EditorMethodsInterface textureEditorMethods, List<AtlasPackingResult> packingResult)
		{
			return null;
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x12BF3D4", Offset = "0x12BF3D4", VA = "0x12BF3D4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB954", Offset = "0x7FB954")]
		private IEnumerator __Step1_CollectDistinctMatTexturesAndUsedObjects(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, List<GameObject> allObjsToMesh, List<Material> allowedMaterialsFilter, List<ShaderTextureProperty> texPropertyNames, MB2_EditorMethodsInterface textureEditorMethods, List<MB_TexSet> distinctMaterialTextures, List<GameObject> usedObjsToMesh)
		{
			return null;
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x12BF4C0", Offset = "0x12BF4C0", VA = "0x12BF4C0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FB9B8", Offset = "0x7FB9B8")]
		private IEnumerator __Step2_CalculateIdealSizesForTexturesInAtlasAndPadding(ProgressUpdateDelegate progressInfo, CombineTexturesIntoAtlasesCoroutineResult result, List<MB_TexSet> distinctMaterialTextures, List<ShaderTextureProperty> texPropertyNames, bool[] allTexturesAreNullAndSameColor, MB2_EditorMethodsInterface textureEditorMethods)
		{
			return null;
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x12BF590", Offset = "0x12BF590", VA = "0x12BF590")]
		private AtlasPackingResult[] __Step3_RunTexturePacker(List<MB_TexSet> distinctMaterialTextures, int _padding)
		{
			return null;
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x12BFBFC", Offset = "0x12BFBFC", VA = "0x12BFBFC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBA1C", Offset = "0x7FBA1C")]
		private IEnumerator __Step3_BuildAndSaveAtlasesAndStoreResults(CombineTexturesIntoAtlasesCoroutineResult result, ProgressUpdateDelegate progressInfo, List<MB_TexSet> distinctMaterialTextures, List<ShaderTextureProperty> texPropertyNames, bool[] allTexturesAreNullAndSameColor, int _padding, MB2_EditorMethodsInterface textureEditorMethods, MB_AtlasesAndRects resultAtlasesAndRects, Material resultMaterial)
		{
			return null;
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x12BF714", Offset = "0x12BF714", VA = "0x12BF714")]
		private AtlasPackingResult[] __RuntTexturePackerOnly(List<MB_TexSet> distinctMaterialTextures, int _padding)
		{
			return null;
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x12BFCE0", Offset = "0x12BFCE0", VA = "0x12BFCE0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBA80", Offset = "0x7FBA80")]
		private IEnumerator __CreateAtlasesMBTexturePacker(ProgressUpdateDelegate progressInfo, int numAtlases, List<MB_TexSet> distinctMaterialTextures, List<ShaderTextureProperty> texPropertyNames, bool[] allTexturesAreNullAndSameColor, Material resultMaterial, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, int _padding)
		{
			return null;
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x12BFDD4", Offset = "0x12BFDD4", VA = "0x12BFDD4")]
		private Rect[] __CreateAtlasesMBTexturePackerFast(ProgressUpdateDelegate progressInfo, int numAtlases, List<MB_TexSet> distinctMaterialTextures, List<ShaderTextureProperty> texPropertyNames, bool[] allTexturesAreNullAndSameColor, Material resultMaterial, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, int _padding)
		{
			return null;
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x12C1258", Offset = "0x12C1258", VA = "0x12C1258")]
		private Rect[] __CreateAtlasesUnityTexturePacker(ProgressUpdateDelegate progressInfo, int numAtlases, List<MB_TexSet> distinctMaterialTextures, List<ShaderTextureProperty> texPropertyNames, bool[] allTexturesAreNullAndSameColor, Material resultMaterial, Texture2D[] atlases, MB2_EditorMethodsInterface textureEditorMethods, int _padding)
		{
			return null;
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x12C3360", Offset = "0x12C3360", VA = "0x12C3360")]
		private void _addWatermark(Texture2D[] texToPack)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x12C35E0", Offset = "0x12C35E0", VA = "0x12C35E0")]
		private Texture2D _addWatermark(Texture2D texToPack)
		{
			return null;
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x12C3364", Offset = "0x12C3364", VA = "0x12C3364")]
		private Texture2D _copyTexturesIntoAtlas(Texture2D[] texToPack, int padding, Rect[] rs, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x12C376C", Offset = "0x12C376C", VA = "0x12C376C")]
		private bool IsPowerOfTwo(int x)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x12C377C", Offset = "0x12C377C", VA = "0x12C377C")]
		private void MergeOverlappingDistinctMaterialTexturesAndCalcMaterialSubrects(List<MB_TexSet> distinctMaterialTextures, bool fixOutOfBoundsUVs)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x12C5E88", Offset = "0x12C5E88", VA = "0x12C5E88")]
		private Vector2 GetAdjustedForScaleAndOffset2Dimensions(MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x12C2AFC", Offset = "0x12C2AFC", VA = "0x12C2AFC")]
		public Texture2D GetAdjustedForScaleAndOffset2(MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale)
		{
			return null;
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x12C6200", Offset = "0x12C6200", VA = "0x12C6200")]
		internal static DRect GetSourceSamplingRect(MeshBakerMaterialTexture source, Vector2 obUVoffset, Vector2 obUVscale)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x12C2FA4", Offset = "0x12C2FA4", VA = "0x12C2FA4")]
		private Texture2D TintTextureWithTextureCombiner(Texture2D t, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName)
		{
			return null;
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x12C62CC", Offset = "0x12C62CC", VA = "0x12C62CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBAE4", Offset = "0x7FBAE4")]
		public IEnumerator CopyScaledAndTiledToAtlas(MeshBakerMaterialTexture source, MB_TexSet sourceMaterial, ShaderTextureProperty shaderPropertyName, DRect srcSamplingRect, int targX, int targY, int targW, int targH, bool _fixOutOfBoundsUVs, int maxSize, Color[][] atlasPixels, int atlasWidth, bool isNormalMap, [Optional] ProgressUpdateDelegate progressInfo)
		{
			return null;
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x12C2834", Offset = "0x12C2834", VA = "0x12C2834")]
		public Texture2D _createTemporaryTexture(int w, int h, TextureFormat texFormat, bool mipMaps)
		{
			return null;
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x12C624C", Offset = "0x12C624C", VA = "0x12C624C")]
		internal Texture2D _createTextureCopy(Texture2D t)
		{
			return null;
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x12C2F0C", Offset = "0x12C2F0C", VA = "0x12C2F0C")]
		private Texture2D _resizeTexture(Texture2D t, int w, int h)
		{
			return null;
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x12C1080", Offset = "0x12C1080", VA = "0x12C1080")]
		private void _destroyTemporaryTextures()
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x12C64B0", Offset = "0x12C64B0", VA = "0x12C64B0")]
		public void SuggestTreatment(List<GameObject> objsToMesh, Material[] resultMaterials, List<ShaderTextureProperty> _customShaderPropNames)
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x12C8714", Offset = "0x12C8714", VA = "0x12C8714")]
		private TextureBlender FindMatchingTextureBlender(string shaderName)
		{
			return null;
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x12C8848", Offset = "0x12C8848", VA = "0x12C8848")]
		private void AdjustNonTextureProperties(Material mat, List<ShaderTextureProperty> texPropertyNames, List<MB_TexSet> distinctMaterialTextures, bool considerTintColor, MB2_EditorMethodsInterface editorMethods)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x12C29A4", Offset = "0x12C29A4", VA = "0x12C29A4")]
		public static Color GetColorIfNoTexture(ShaderTextureProperty texProperty)
		{
			return default(Color);
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x12C90D4", Offset = "0x12C90D4", VA = "0x12C90D4")]
		private Color32 ConvertNormalFormatFromUnity_ToStandard(Color32 c)
		{
			return default(Color32);
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x12C9210", Offset = "0x12C9210", VA = "0x12C9210")]
		private float GetSubmeshArea(Mesh m, int submeshIdx)
		{
			return default(float);
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x12C8634", Offset = "0x12C8634", VA = "0x12C8634")]
		private string PrintList(List<GameObject> gos)
		{
			return null;
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x12C945C", Offset = "0x12C945C", VA = "0x12C945C")]
		public MB3_TextureCombiner()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public struct DRect
	{
		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double width;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double height;

		[Token(Token = "0x17000136")]
		public Vector2 min
		{
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0x890CB0", Offset = "0x890CB0", VA = "0x890CB0")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000137")]
		public Vector2 max
		{
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0x890CE8", Offset = "0x890CE8", VA = "0x890CE8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000138")]
		public Vector2 size
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0x890CF0", Offset = "0x890CF0", VA = "0x890CF0")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x890C5C", Offset = "0x890C5C", VA = "0x890C5C")]
		public DRect(Rect r)
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x890C64", Offset = "0x890C64", VA = "0x890C64")]
		public DRect(Vector2 o, Vector2 s)
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x890C80", Offset = "0x890C80", VA = "0x890C80")]
		public DRect(float xx, float yy, float w, float h)
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x890C9C", Offset = "0x890C9C", VA = "0x890C9C")]
		public DRect(double xx, double yy, double w, double h)
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x890CA8", Offset = "0x890CA8", VA = "0x890CA8")]
		public Rect GetRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x890D28", Offset = "0x890D28", VA = "0x890D28", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xDE17E8", Offset = "0xDE17E8", VA = "0xDE17E8")]
		public static bool operator ==(DRect a, DRect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xDE1884", Offset = "0xDE1884", VA = "0xDE1884")]
		public static bool operator !=(DRect a, DRect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x890D30", Offset = "0x890D30", VA = "0x890D30", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x890D38", Offset = "0x890D38", VA = "0x890D38")]
		public bool Encloses(DRect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x890D40", Offset = "0x890D40", VA = "0x890D40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001F5")]
	public class MB3_UVTransformUtility
	{
		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x12D26E4", Offset = "0x12D26E4", VA = "0x12D26E4")]
		public static void Test()
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x12D2A60", Offset = "0x12D2A60", VA = "0x12D2A60")]
		public static float TransformX(DRect r, double x)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x12C5C54", Offset = "0x12C5C54", VA = "0x12C5C54")]
		public static DRect CombineTransforms(ref DRect r1, ref DRect r2)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x12D2A70", Offset = "0x12D2A70", VA = "0x12D2A70")]
		public static Rect CombineTransforms(ref Rect r1, ref Rect r2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x12C5B1C", Offset = "0x12C5B1C", VA = "0x12C5B1C")]
		public static void Canonicalize(ref DRect r, double minX, double minY)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x12C5CB0", Offset = "0x12C5CB0", VA = "0x12C5CB0")]
		public static void Canonicalize(ref Rect r, float minX, float minY)
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x12D29E4", Offset = "0x12D29E4", VA = "0x12D29E4")]
		public static DRect InverseTransform(ref DRect t)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x12C5A78", Offset = "0x12C5A78", VA = "0x12C5A78")]
		public static DRect GetEncapsulatingRect(ref DRect uvRect1, ref DRect uvRect2)
		{
			return default(DRect);
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x12D2B88", Offset = "0x12D2B88", VA = "0x12D2B88")]
		public static bool RectContains(ref DRect bigRect, ref DRect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x12D2C28", Offset = "0x12D2C28", VA = "0x12D2C28")]
		public static bool RectContains(ref Rect bigRect, ref Rect smallToTestIfFits)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x12D2A0C", Offset = "0x12D2A0C", VA = "0x12D2A0C")]
		internal static Vector2 TransformPoint(ref DRect r, Vector2 p)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x12D2DB8", Offset = "0x12D2DB8", VA = "0x12D2DB8")]
		public MB3_UVTransformUtility()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class MB_Utility
	{
		[Token(Token = "0x20003D4")]
		public struct MeshAnalysisResult
		{
			[Token(Token = "0x4001688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Rect uvRect;

			[Token(Token = "0x4001689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool hasOutOfBoundsUVs;

			[Token(Token = "0x400168A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool hasOverlappingSubmeshVerts;

			[Token(Token = "0x400168B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool hasOverlappingSubmeshTris;

			[Token(Token = "0x400168C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			public bool hasUVs;

			[Token(Token = "0x400168D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float submeshArea;
		}

		[Token(Token = "0x20003D5")]
		private class MB_Triangle
		{
			[Token(Token = "0x400168E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int submeshIdx;

			[Token(Token = "0x400168F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int[] vs;

			[Token(Token = "0x6001A36")]
			[Address(RVA = "0x120EC80", Offset = "0x120EC80", VA = "0x120EC80")]
			public bool isSame(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A37")]
			[Address(RVA = "0x120EDAC", Offset = "0x120EDAC", VA = "0x120EDAC")]
			public bool sharesVerts(MB_Triangle obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A38")]
			[Address(RVA = "0x120EEDC", Offset = "0x120EEDC", VA = "0x120EEDC")]
			public void Initialize(int[] ts, int idx, int sIdx)
			{
			}

			[Token(Token = "0x6001A39")]
			[Address(RVA = "0x120EFE8", Offset = "0x120EFE8", VA = "0x120EFE8")]
			public MB_Triangle()
			{
			}
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x12C63E4", Offset = "0x12C63E4", VA = "0x12C63E4")]
		public static Texture2D createTextureCopy(Texture2D source)
		{
			return null;
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x12D4B34", Offset = "0x12D4B34", VA = "0x12D4B34")]
		public static bool ArrayBIsSubsetOfA(object[] a, object[] b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x12C7B00", Offset = "0x12C7B00", VA = "0x12C7B00")]
		public static Material[] GetGOMaterials(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x12C8058", Offset = "0x12C8058", VA = "0x12C8058")]
		public static Mesh GetMesh(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x12D4BD8", Offset = "0x12D4BD8", VA = "0x12D4BD8")]
		public static void SetMesh(GameObject go, Mesh m)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x12D4D30", Offset = "0x12D4D30", VA = "0x12D4D30")]
		public static Renderer GetRenderer(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x12D4E54", Offset = "0x12D4E54", VA = "0x12D4E54")]
		public static void DisableRendererInSource(GameObject go)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x12D4F94", Offset = "0x12D4F94", VA = "0x12D4F94")]
		public static bool hasOutOfBoundsUVs(Mesh m, ref Rect uvBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x12C8518", Offset = "0x12C8518", VA = "0x12C8518")]
		public static bool hasOutOfBoundsUVs(Mesh m, ref MeshAnalysisResult putResultHere, int submeshIndex = -1, int uvChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x12D4FDC", Offset = "0x12D4FDC", VA = "0x12D4FDC")]
		public static bool hasOutOfBoundsUVs(Vector2[] uvs, Mesh m, ref MeshAnalysisResult putResultHere, int submeshIndex = -1)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x12C28F4", Offset = "0x12C28F4", VA = "0x12C28F4")]
		public static void setSolidColor(Texture2D t, Color c)
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x12C35E8", Offset = "0x12C35E8", VA = "0x12C35E8")]
		public static Texture2D resampleTexture(Texture2D source, int newWidth, int newHeight)
		{
			return null;
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x12CF018", Offset = "0x12CF018", VA = "0x12CF018")]
		public static bool AreAllSharedMaterialsDistinct(Material[] sharedMaterials)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x12C8214", Offset = "0x12C8214", VA = "0x12C8214")]
		public static int doSubmeshesShareVertsOrTris(Mesh m, ref MeshAnalysisResult mar)
		{
			return default(int);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x12D5200", Offset = "0x12D5200", VA = "0x12D5200")]
		public static bool GetBounds(GameObject go, out Bounds b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x12C11B4", Offset = "0x12C11B4", VA = "0x12C11B4")]
		public static void Destroy(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x12D5460", Offset = "0x12D5460", VA = "0x12D5460")]
		public MB_Utility()
		{
		}
	}
}
namespace Dreamteck
{
	[Token(Token = "0x20001F7")]
	public static class DMath
	{
		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x121284C", Offset = "0x121284C", VA = "0x121284C")]
		public static double Sin(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x12128B8", Offset = "0x12128B8", VA = "0x12128B8")]
		public static double Cos(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x1212924", Offset = "0x1212924", VA = "0x1212924")]
		public static double Tan(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x1212990", Offset = "0x1212990", VA = "0x1212990")]
		public static double Pow(double x, double y)
		{
			return default(double);
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x1212A08", Offset = "0x1212A08", VA = "0x1212A08")]
		public static double Log(double a, double newBase)
		{
			return default(double);
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x1212A80", Offset = "0x1212A80", VA = "0x1212A80")]
		public static double Log10(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x1212AEC", Offset = "0x1212AEC", VA = "0x1212AEC")]
		public static double Clamp01(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x1212B0C", Offset = "0x1212B0C", VA = "0x1212B0C")]
		public static double Clamp(double a, double min, double max)
		{
			return default(double);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x1212B28", Offset = "0x1212B28", VA = "0x1212B28")]
		public static double Lerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x1212B4C", Offset = "0x1212B4C", VA = "0x1212B4C")]
		public static double InverseLerp(double a, double b, double t)
		{
			return default(double);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x1212B80", Offset = "0x1212B80", VA = "0x1212B80")]
		public static Vector3 LerpVector3(Vector3 a, Vector3 b, double t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x1212CAC", Offset = "0x1212CAC", VA = "0x1212CAC")]
		public static double Round(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x1212D84", Offset = "0x1212D84", VA = "0x1212D84")]
		public static int RoundInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x1212E60", Offset = "0x1212E60", VA = "0x1212E60")]
		public static double Ceil(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x1212ECC", Offset = "0x1212ECC", VA = "0x1212ECC")]
		public static int CeilInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x1212F38", Offset = "0x1212F38", VA = "0x1212F38")]
		public static double Floor(double a)
		{
			return default(double);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x1212FA4", Offset = "0x1212FA4", VA = "0x1212FA4")]
		public static int FloorInt(double a)
		{
			return default(int);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x1213010", Offset = "0x1213010", VA = "0x1213010")]
		public static double Move(double current, double target, double amount)
		{
			return default(double);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x1213040", Offset = "0x1213040", VA = "0x1213040")]
		public static double Abs(double a)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20001F8")]
	public static class LinearAlgebraUtility
	{
		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x1213050", Offset = "0x1213050", VA = "0x1213050")]
		public static Vector3 ProjectOnLine(Vector3 fromPoint, Vector3 toPoint, Vector3 project)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x1213264", Offset = "0x1213264", VA = "0x1213264")]
		public static float InverseLerp(Vector3 a, Vector3 b, Vector3 value)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001F9")]
	public class MeshUtility
	{
		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] tan1;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] tan2;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector4[] meshTangents;

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x1213394", Offset = "0x1213394", VA = "0x1213394")]
		public static int[] GeneratePlaneTriangles(int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0)
		{
			return null;
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x1213458", Offset = "0x1213458", VA = "0x1213458")]
		public static int[] GeneratePlaneTriangles(ref int[] triangles, int x, int z, bool flip, int startTriangleIndex = 0, int startVertex = 0, bool reallocateArray = false)
		{
			return null;
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x1213758", Offset = "0x1213758", VA = "0x1213758")]
		public static void CalculateTangents(TS_Mesh mesh)
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x1213F00", Offset = "0x1213F00", VA = "0x1213F00")]
		public static void MakeDoublesided(Mesh input)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x1214974", Offset = "0x1214974", VA = "0x1214974")]
		public static void MakeDoublesided(TS_Mesh input)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x12152C8", Offset = "0x12152C8", VA = "0x12152C8")]
		public static void MakeDoublesidedHalf(TS_Mesh input)
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x12158D8", Offset = "0x12158D8", VA = "0x12158D8")]
		public static void InverseTransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x12159C8", Offset = "0x12159C8", VA = "0x12159C8")]
		public static void TransformMesh(TS_Mesh input, TS_Transform transform)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x1215AB8", Offset = "0x1215AB8", VA = "0x1215AB8")]
		public static void InverseTransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x1215BA8", Offset = "0x1215BA8", VA = "0x1215BA8")]
		public static void TransformMesh(TS_Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x1215C98", Offset = "0x1215C98", VA = "0x1215C98")]
		public static void InverseTransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x1215DEC", Offset = "0x1215DEC", VA = "0x1215DEC")]
		public static void TransformMesh(Mesh input, Transform transform)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x1215F84", Offset = "0x1215F84", VA = "0x1215F84")]
		public static void TransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x1216018", Offset = "0x1216018", VA = "0x1216018")]
		public static void InverseTransformVertices(Vector3[] vertices, Transform transform)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x12160AC", Offset = "0x12160AC", VA = "0x12160AC")]
		public static void TransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x1216140", Offset = "0x1216140", VA = "0x1216140")]
		public static void InverseTransformNormals(Vector3[] normals, Transform transform)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x12161D4", Offset = "0x12161D4", VA = "0x12161D4")]
		public static string ToOBJString(Mesh mesh, Material[] materials)
		{
			return null;
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x1216B0C", Offset = "0x1216B0C", VA = "0x1216B0C")]
		public static Mesh Copy(Mesh input)
		{
			return null;
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x1216D08", Offset = "0x1216D08", VA = "0x1216D08")]
		public static void Triangulate(Vector2[] points, ref int[] output)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x1217358", Offset = "0x1217358", VA = "0x1217358")]
		public static void FlipTriangles(ref int[] triangles)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x12173E0", Offset = "0x12173E0", VA = "0x12173E0")]
		public static void FlipFaces(TS_Mesh input)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x1217578", Offset = "0x1217578", VA = "0x1217578")]
		public static void BreakMesh(Mesh input, bool keepNormals = true)
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x12170A0", Offset = "0x12170A0", VA = "0x12170A0")]
		private static float Area(Vector2[] points, int maxCount)
		{
			return default(float);
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x1217138", Offset = "0x1217138", VA = "0x1217138")]
		private static bool Snip(Vector2[] points, int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x1217F60", Offset = "0x1217F60", VA = "0x1217F60")]
		private static bool InsideTriangle(Vector2 A, Vector2 B, Vector2 C, Vector2 P)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x1217FDC", Offset = "0x1217FDC", VA = "0x1217FDC")]
		public MeshUtility()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public static class ResourceUtility
	{
		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x1218080", Offset = "0x1218080", VA = "0x1218080")]
		public static string FindFolder(string dir, string folderPattern)
		{
			return null;
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x1218488", Offset = "0x1218488", VA = "0x1218488")]
		public static Texture2D LoadTexture(string dreamteckPath, string textureFileName)
		{
			return null;
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x12185EC", Offset = "0x12185EC", VA = "0x12185EC")]
		public static Texture2D LoadTexture(string path)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	public static class SceneUtility
	{
		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x12186E0", Offset = "0x12186E0", VA = "0x12186E0")]
		public static void GetChildrenRecursively(Transform current, ref List<Transform> transformList)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001FC")]
	public class TS_Bounds
	{
		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 center;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 extents;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 max;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 min;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 size;

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x1567E18", Offset = "0x1567E18", VA = "0x1567E18")]
		public TS_Bounds()
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x1567ED0", Offset = "0x1567ED0", VA = "0x1567ED0")]
		public TS_Bounds(Bounds bounds)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x1567FFC", Offset = "0x1567FFC", VA = "0x1567FFC")]
		public TS_Bounds(Vector3 c, Vector3 s)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x1568164", Offset = "0x1568164", VA = "0x1568164")]
		public TS_Bounds(Vector3 min, Vector3 max, Vector3 center)
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x15682C4", Offset = "0x15682C4", VA = "0x15682C4")]
		public void CreateFromMinMax(Vector3 min, Vector3 max)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x15683D4", Offset = "0x15683D4", VA = "0x15683D4")]
		public bool Contains(Vector3 point)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FD")]
	public class TS_Mesh
	{
		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] vertices;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] normals;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector4[] tangents;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color[] colors;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2[] uv;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2[] uv2;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2[] uv3;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2[] uv4;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] triangles;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<int[]> subMeshes;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TS_Bounds bounds;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool hasUpdate;

		[Token(Token = "0x17000139")]
		public int vertexCount
		{
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0x1568428", Offset = "0x1568428", VA = "0x1568428")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0x1568444", Offset = "0x1568444", VA = "0x1568444")]
			set
			{
			}
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x1568448", Offset = "0x1568448", VA = "0x1568448")]
		public TS_Mesh()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x1568604", Offset = "0x1568604", VA = "0x1568604")]
		public TS_Mesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x156896C", Offset = "0x156896C", VA = "0x156896C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x15687D8", Offset = "0x15687D8", VA = "0x15687D8")]
		public void CreateFromMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x1568B20", Offset = "0x1568B20", VA = "0x1568B20")]
		public void Combine(List<TS_Mesh> newMeshes, bool overwrite = false)
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x1569F84", Offset = "0x1569F84", VA = "0x1569F84")]
		public void Combine(TS_Mesh newMesh)
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x156A66C", Offset = "0x156A66C", VA = "0x156A66C")]
		public static TS_Mesh Copy(TS_Mesh input)
		{
			return null;
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x156AA20", Offset = "0x156AA20", VA = "0x156AA20")]
		public void Absorb(TS_Mesh input)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x156B010", Offset = "0x156B010", VA = "0x156B010")]
		public void WriteMesh(ref Mesh input)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001FE")]
	public class TS_Transform
	{
		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool setPosition;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool setRotation;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool setScale;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool setLocalPosition;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool setLocalRotation;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private Transform _transform;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private float posX;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private float posY;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private float posZ;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[HideInInspector]
		private float scaleX;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private float scaleY;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[HideInInspector]
		private float scaleZ;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleX;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleY;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private float lossyScaleZ;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[HideInInspector]
		private float rotX;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private float rotY;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[HideInInspector]
		private float rotZ;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private float rotW;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		[HideInInspector]
		private float lposX;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private float lposY;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[HideInInspector]
		private float lposZ;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private float lrotX;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[HideInInspector]
		private float lrotY;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		private float lrotZ;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private float lrotW;

		[Token(Token = "0x1700013A")]
		public Vector3 position
		{
			[Token(Token = "0x6000D44")]
			[Address(RVA = "0xA99564", Offset = "0xA99564", VA = "0xA99564")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D45")]
			[Address(RVA = "0xA995D8", Offset = "0xA995D8", VA = "0xA995D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public Quaternion rotation
		{
			[Token(Token = "0x6000D46")]
			[Address(RVA = "0xA99634", Offset = "0xA99634", VA = "0xA99634")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000D47")]
			[Address(RVA = "0xA996B0", Offset = "0xA996B0", VA = "0xA996B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public Vector3 scale
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0xA99718", Offset = "0xA99718", VA = "0xA99718")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0xA9978C", Offset = "0xA9978C", VA = "0xA9978C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public Vector3 lossyScale
		{
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0xA997E4", Offset = "0xA997E4", VA = "0xA997E4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0xA99858", Offset = "0xA99858", VA = "0xA99858")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public Vector3 localPosition
		{
			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0xA998B0", Offset = "0xA998B0", VA = "0xA998B0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0xA99924", Offset = "0xA99924", VA = "0xA99924")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public Quaternion localRotation
		{
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0xA99980", Offset = "0xA99980", VA = "0xA99980")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0xA999FC", Offset = "0xA999FC", VA = "0xA999FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public Transform transform
		{
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0xA99A64", Offset = "0xA99A64", VA = "0xA99A64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xA99A6C", Offset = "0xA99A6C", VA = "0xA99A6C")]
		public TS_Transform(Transform input)
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xA99AF4", Offset = "0xA99AF4", VA = "0xA99AF4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xA99AE4", Offset = "0xA99AE4", VA = "0xA99AE4")]
		public void SetTransform(Transform input)
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xA99CD0", Offset = "0xA99CD0", VA = "0xA99CD0")]
		public bool HasChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xA99D14", Offset = "0xA99D14", VA = "0xA99D14")]
		public bool HasPositionChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xA99DA4", Offset = "0xA99DA4", VA = "0xA99DA4")]
		public bool HasRotationChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xA99E54", Offset = "0xA99E54", VA = "0xA99E54")]
		public bool HasScaleChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xA99EE4", Offset = "0xA99EE4", VA = "0xA99EE4")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xA9A054", Offset = "0xA9A054", VA = "0xA9A054")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xA9A128", Offset = "0xA9A128", VA = "0xA9A128")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xA9A1E4", Offset = "0xA9A1E4", VA = "0xA9A1E4")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D5C")]
		public T GetComponent<T>()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20001FF")]
	public static class TransformUtility
	{
		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xA9A308", Offset = "0xA9A308", VA = "0xA9A308")]
		public static Vector3 GetPosition(ref Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xA9A3AC", Offset = "0xA9A3AC", VA = "0xA9A3AC")]
		public static Quaternion GetRotation(ref Matrix4x4 m)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xA9A4C8", Offset = "0xA9A4C8", VA = "0xA9A4C8")]
		public static Vector3 GetScale(ref Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xA9A58C", Offset = "0xA9A58C", VA = "0xA9A58C")]
		public static void SetPosition(ref Matrix4x4 m, ref Vector3 p)
		{
		}
	}
}
namespace Dreamteck.Splines
{
	[Token(Token = "0x2000200")]
	public class BlankUser : SplineUser
	{
		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x121894C", Offset = "0x121894C", VA = "0x121894C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x1218950", Offset = "0x1218950", VA = "0x1218950", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x1218958", Offset = "0x1218958", VA = "0x1218958", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x1218960", Offset = "0x1218960", VA = "0x1218960", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x1218968", Offset = "0x1218968", VA = "0x1218968")]
		public BlankUser()
		{
		}
	}
	[Token(Token = "0x2000201")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED6C4", Offset = "0x7ED6C4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED6C4", Offset = "0x7ED6C4")]
	public class EdgeColliderGenerator : SplineUser
	{
		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private float _offset;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		protected EdgeCollider2D edgeCollider;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		protected Vector2[] vertices;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		protected float lastUpdateTime;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool updateCollider;

		[Token(Token = "0x17000141")]
		public float offset
		{
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0x1219D68", Offset = "0x1219D68", VA = "0x1219D68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D67")]
			[Address(RVA = "0x1219D70", Offset = "0x1219D70", VA = "0x1219D70")]
			set
			{
			}
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x1219D94", Offset = "0x1219D94", VA = "0x1219D94", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x1219DF8", Offset = "0x1219DF8", VA = "0x1219DF8", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x1219E00", Offset = "0x1219E00", VA = "0x1219E00", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x1219E08", Offset = "0x1219E08", VA = "0x1219E08", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x1219E10", Offset = "0x1219E10", VA = "0x1219E10", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x1219E18", Offset = "0x1219E18", VA = "0x1219E18", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x1219EEC", Offset = "0x1219EEC", VA = "0x1219EEC", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x121A1BC", Offset = "0x121A1BC", VA = "0x121A1BC", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x121A35C", Offset = "0x121A35C", VA = "0x121A35C")]
		public EdgeColliderGenerator()
		{
		}
	}
	[Token(Token = "0x2000202")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED74C", Offset = "0x7ED74C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED74C", Offset = "0x7ED74C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED74C", Offset = "0x7ED74C")]
	public class ExtrudeMesh : MeshGenerator
	{
		[Token(Token = "0x20003D6")]
		public enum Axis
		{
			[Token(Token = "0x4001691")]
			X,
			[Token(Token = "0x4001692")]
			Y,
			[Token(Token = "0x4001693")]
			Z
		}

		[Token(Token = "0x20003D7")]
		public enum Iteration
		{
			[Token(Token = "0x4001695")]
			Ordered,
			[Token(Token = "0x4001696")]
			Random
		}

		[Token(Token = "0x20003D8")]
		public enum MirrorMethod
		{
			[Token(Token = "0x4001698")]
			None,
			[Token(Token = "0x4001699")]
			X,
			[Token(Token = "0x400169A")]
			Y,
			[Token(Token = "0x400169B")]
			Z
		}

		[Token(Token = "0x20003D9")]
		public enum TileUVs
		{
			[Token(Token = "0x400169D")]
			None,
			[Token(Token = "0x400169E")]
			U,
			[Token(Token = "0x400169F")]
			V,
			[Token(Token = "0x40016A0")]
			UniformU,
			[Token(Token = "0x40016A1")]
			UniformV
		}

		[Serializable]
		[Token(Token = "0x20003DA")]
		internal class ExtrudableMesh
		{
			[Serializable]
			[Token(Token = "0x2000475")]
			public class VertexGroup
			{
				[Token(Token = "0x40018FA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public float value;

				[Token(Token = "0x40018FB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public int[] ids;

				[Token(Token = "0x6001CB9")]
				[Address(RVA = "0x121F240", Offset = "0x121F240", VA = "0x121F240")]
				public VertexGroup(float val, int[] vertIds)
				{
				}

				[Token(Token = "0x6001CBA")]
				[Address(RVA = "0x121F27C", Offset = "0x121F27C", VA = "0x121F27C")]
				public void AddId(int id)
				{
				}
			}

			[Serializable]
			[Token(Token = "0x2000476")]
			public class Submesh
			{
				[Token(Token = "0x40018FC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public int[] triangles;

				[Token(Token = "0x6001CBB")]
				[Address(RVA = "0x121F338", Offset = "0x121F338", VA = "0x121F338")]
				public Submesh()
				{
				}

				[Token(Token = "0x6001CBC")]
				[Address(RVA = "0x121E614", Offset = "0x121E614", VA = "0x121E614")]
				public Submesh(int[] input)
				{
				}
			}

			[Token(Token = "0x40016A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x40016A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x40016A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x40016A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color[] colors;

			[Token(Token = "0x40016A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv;

			[Token(Token = "0x40016A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<Submesh> subMeshes;

			[Token(Token = "0x40016A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public TS_Bounds bounds;

			[Token(Token = "0x40016A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<VertexGroup> vertexGroups;

			[Token(Token = "0x40016AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[SerializeField]
			private MirrorMethod _mirror;

			[Token(Token = "0x40016AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[SerializeField]
			private Axis _axis;

			[Token(Token = "0x170002B3")]
			public MirrorMethod mirror
			{
				[Token(Token = "0x6001A3A")]
				[Address(RVA = "0x121DBC8", Offset = "0x121DBC8", VA = "0x121DBC8")]
				get
				{
					return default(MirrorMethod);
				}
				[Token(Token = "0x6001A3B")]
				[Address(RVA = "0x121B2D8", Offset = "0x121B2D8", VA = "0x121B2D8")]
				set
				{
				}
			}

			[Token(Token = "0x6001A3C")]
			[Address(RVA = "0x121E368", Offset = "0x121E368", VA = "0x121E368")]
			public ExtrudableMesh()
			{
			}

			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0x121B61C", Offset = "0x121B61C", VA = "0x121B61C")]
			public ExtrudableMesh(Mesh inputMesh, Axis axis)
			{
			}

			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0x121D600", Offset = "0x121D600", VA = "0x121D600")]
			public void Update(Mesh inputMesh, Axis axis)
			{
			}

			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0x121DBD0", Offset = "0x121DBD0", VA = "0x121DBD0")]
			private void Mirror(MirrorMethod method)
			{
			}

			[Token(Token = "0x6001A40")]
			[Address(RVA = "0x121E6AC", Offset = "0x121E6AC", VA = "0x121E6AC")]
			private void GroupVertices(Axis axis)
			{
			}

			[Token(Token = "0x6001A41")]
			[Address(RVA = "0x121F124", Offset = "0x121F124", VA = "0x121F124")]
			private int FindInsertIndex(Vector3 pos, float value)
			{
				return default(int);
			}

			[Token(Token = "0x6001A42")]
			[Address(RVA = "0x121EA10", Offset = "0x121EA10", VA = "0x121EA10")]
			private void CalculateTangents()
			{
			}
		}

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private Mesh _startMesh;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private Mesh _endMesh;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private bool _dontStretchCaps;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[SerializeField]
		[HideInInspector]
		private TileUVs _tileUVs;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[HideInInspector]
		private Mesh[] _middleMeshes;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		[HideInInspector]
		private List<ExtrudableMesh> extrudableMeshes;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[SerializeField]
		[HideInInspector]
		private Iteration _iteration;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[SerializeField]
		[HideInInspector]
		private int _repeat;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		private double _spacing;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _scale;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private SplineResult lastResult;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool useLastResult;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private List<TS_Mesh> combineMeshes;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private System.Random random;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private int iterations;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private bool _hasAnyMesh;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19D")]
		private bool _hasStartMesh;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19E")]
		private bool _hasEndMesh;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Matrix4x4 vertexMatrix;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x17000142")]
		public Axis axis
		{
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0x121A61C", Offset = "0x121A61C", VA = "0x121A61C")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6000D72")]
			[Address(RVA = "0x121A624", Offset = "0x121A624", VA = "0x121A624")]
			set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public Iteration iteration
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0x121A998", Offset = "0x121A998", VA = "0x121A998")]
			get
			{
				return default(Iteration);
			}
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x121A9A0", Offset = "0x121A9A0", VA = "0x121A9A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public int randomSeed
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x121A9E4", Offset = "0x121A9E4", VA = "0x121A9E4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x121A9EC", Offset = "0x121A9EC", VA = "0x121A9EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public int repeat
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x121AA48", Offset = "0x121AA48", VA = "0x121AA48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x121AA50", Offset = "0x121AA50", VA = "0x121AA50")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public bool dontStretchCaps
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x121ADE0", Offset = "0x121ADE0", VA = "0x121ADE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x121ADE8", Offset = "0x121ADE8", VA = "0x121ADE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public TileUVs tileUVs
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x121AE18", Offset = "0x121AE18", VA = "0x121AE18")]
			get
			{
				return default(TileUVs);
			}
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x121AE20", Offset = "0x121AE20", VA = "0x121AE20")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public double spacing
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x121AE44", Offset = "0x121AE44", VA = "0x121AE44")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x121AE4C", Offset = "0x121AE4C", VA = "0x121AE4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public Vector2 scale
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x121AEC0", Offset = "0x121AEC0", VA = "0x121AEC0")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x121AECC", Offset = "0x121AECC", VA = "0x121AECC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public bool hasAnyMesh
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x121AF94", Offset = "0x121AF94", VA = "0x121AF94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x121AF9C", Offset = "0x121AF9C", VA = "0x121AF9C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x121B150", Offset = "0x121B150", VA = "0x121B150")]
		public Mesh GetStartMesh()
		{
			return null;
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x121B158", Offset = "0x121B158", VA = "0x121B158")]
		public Mesh GetEndMesh()
		{
			return null;
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x121B160", Offset = "0x121B160", VA = "0x121B160")]
		public MirrorMethod GetStartMeshMirror()
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x121B1CC", Offset = "0x121B1CC", VA = "0x121B1CC")]
		public MirrorMethod GetEndMeshMirror()
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x121B23C", Offset = "0x121B23C", VA = "0x121B23C")]
		public void SetStartMeshMirror(MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x121B31C", Offset = "0x121B31C", VA = "0x121B31C")]
		public void SetEndMeshMirror(MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x121B3BC", Offset = "0x121B3BC", VA = "0x121B3BC")]
		public void SetMeshMirror(int index, MirrorMethod mirror)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x121B4A4", Offset = "0x121B4A4", VA = "0x121B4A4")]
		public void SetStartMesh(Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x121B7E4", Offset = "0x121B7E4", VA = "0x121B7E4")]
		public void SetEndMesh(Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x121B980", Offset = "0x121B980", VA = "0x121B980")]
		public Mesh GetMesh(int index)
		{
			return null;
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x121B9BC", Offset = "0x121B9BC", VA = "0x121B9BC")]
		public MirrorMethod GetMeshMirror(int index)
		{
			return default(MirrorMethod);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x121BA78", Offset = "0x121BA78", VA = "0x121BA78")]
		public void SetMesh(int index, Mesh inputMesh, MirrorMethod mirror = MirrorMethod.None)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x121BBCC", Offset = "0x121BBCC", VA = "0x121BBCC")]
		public void RemoveMesh(int index)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x121BD58", Offset = "0x121BD58", VA = "0x121BD58")]
		public void AddMesh(Mesh inputMesh)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x121B00C", Offset = "0x121B00C", VA = "0x121B00C")]
		private void CheckMeshes()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x121BE9C", Offset = "0x121BE9C", VA = "0x121BE9C")]
		public int GetMeshCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x121BEB8", Offset = "0x121BEB8", VA = "0x121BEB8", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x121BF34", Offset = "0x121BF34", VA = "0x121BF34")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x121C2D0", Offset = "0x121C2D0", VA = "0x121C2D0")]
		private int GetMeshIndex(int repeatIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x121CD74", Offset = "0x121CD74", VA = "0x121CD74")]
		private void TRS(ExtrudableMesh source, TS_Mesh target, double percent)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x121D2B0", Offset = "0x121D2B0", VA = "0x121D2B0")]
		private void CreateTSFromExtrudableMesh(ExtrudableMesh source, ref TS_Mesh target)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x121C3B0", Offset = "0x121C3B0", VA = "0x121C3B0")]
		private void Stretch(ExtrudableMesh source, TS_Mesh target, double from, double to)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x121A668", Offset = "0x121A668", VA = "0x121A668")]
		private void UpdateExtrudableMeshes()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x121D850", Offset = "0x121D850", VA = "0x121D850")]
		private void UpdateStartExtrudeMesh()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x121AA9C", Offset = "0x121AA9C", VA = "0x121AA9C")]
		private void UpdateEndExtrudeMesh()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x121DA98", Offset = "0x121DA98", VA = "0x121DA98")]
		public ExtrudeMesh()
		{
		}
	}
	[Token(Token = "0x2000203")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED7FC", Offset = "0x7ED7FC")]
	public class LengthCalculator : SplineUser
	{
		[Serializable]
		[Token(Token = "0x20003DB")]
		public class LengthEvent
		{
			[Token(Token = "0x2000477")]
			public enum Type
			{
				[Token(Token = "0x40018FE")]
				Growing,
				[Token(Token = "0x40018FF")]
				Shrinking,
				[Token(Token = "0x4001900")]
				Both
			}

			[Token(Token = "0x40016AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40016AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float targetLength;

			[Token(Token = "0x40016AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SplineAction action;

			[Token(Token = "0x40016AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Type type;

			[Token(Token = "0x6001A43")]
			[Address(RVA = "0x1332830", Offset = "0x1332830", VA = "0x1332830")]
			public LengthEvent()
			{
			}

			[Token(Token = "0x6001A44")]
			[Address(RVA = "0x13328A8", Offset = "0x13328A8", VA = "0x13328A8")]
			public LengthEvent(Type t)
			{
			}

			[Token(Token = "0x6001A45")]
			[Address(RVA = "0x13321BC", Offset = "0x13321BC", VA = "0x13321BC")]
			public LengthEvent(Type t, SplineAction a)
			{
			}

			[Token(Token = "0x6001A46")]
			[Address(RVA = "0x1331F9C", Offset = "0x1331F9C", VA = "0x1331F9C")]
			public void Check(float fromLength, float toLength)
			{
			}
		}

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public LengthEvent[] lengthEvents;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public float idealLength;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _length;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float lastLength;

		[Token(Token = "0x1700014B")]
		public float length
		{
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x1331E4C", Offset = "0x1331E4C", VA = "0x1331E4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x1331E54", Offset = "0x1331E54", VA = "0x1331E54", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x1331EF8", Offset = "0x1331EF8", VA = "0x1331EF8", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x133201C", Offset = "0x133201C", VA = "0x133201C")]
		private void AddEvent(LengthEvent lengthEvent)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x13320FC", Offset = "0x13320FC", VA = "0x13320FC")]
		public void AddEvent(LengthEvent.Type t, UnityAction call, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x1332250", Offset = "0x1332250", VA = "0x1332250")]
		public void AddEvent(LengthEvent.Type t, UnityAction<int> call, int value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x1332318", Offset = "0x1332318", VA = "0x1332318")]
		public void AddEvent(LengthEvent.Type t, UnityAction<float> call, float value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x13323E0", Offset = "0x13323E0", VA = "0x13323E0")]
		public void AddEvent(LengthEvent.Type t, UnityAction<double> call, double value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x13324A8", Offset = "0x13324A8", VA = "0x13324A8")]
		public void AddTrigger(LengthEvent.Type t, UnityAction<string> call, string value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x1332570", Offset = "0x1332570", VA = "0x1332570")]
		public void AddEvent(LengthEvent.Type t, UnityAction<bool> call, bool value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x1332638", Offset = "0x1332638", VA = "0x1332638")]
		public void AddEvent(LengthEvent.Type t, UnityAction<GameObject> call, GameObject value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1332700", Offset = "0x1332700", VA = "0x1332700")]
		public void AddEvent(LengthEvent.Type t, UnityAction<Transform> call, Transform value, float targetLength = 0f, LengthEvent.Type type = LengthEvent.Type.Both)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x13327C8", Offset = "0x13327C8", VA = "0x13327C8")]
		public LengthCalculator()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class MeshGenerator : SplineUser
	{
		[Token(Token = "0x20003DC")]
		public enum UVMode
		{
			[Token(Token = "0x40016B1")]
			Clip,
			[Token(Token = "0x40016B2")]
			UniformClip,
			[Token(Token = "0x40016B3")]
			Clamp,
			[Token(Token = "0x40016B4")]
			UniformClamp
		}

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private bool _baked;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[HideInInspector]
		private float _size;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private Color _color;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _offset;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[HideInInspector]
		private int _normalMethod;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private bool _tangents;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[HideInInspector]
		private float _rotation;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		private bool _flipFaces;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		[SerializeField]
		[HideInInspector]
		private bool _doubleSided;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		[HideInInspector]
		private UVMode _uvMode;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _uvScale;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _uvOffset;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[HideInInspector]
		private float _uvRotation;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[HideInInspector]
		protected MeshCollider meshCollider;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[HideInInspector]
		protected MeshFilter filter;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[HideInInspector]
		protected MeshRenderer meshRenderer;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[HideInInspector]
		protected TS_Mesh tsMesh;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		protected Mesh mesh;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		public float colliderUpdateRate;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected bool updateCollider;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected float lastUpdateTime;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float vDist;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Vector2 uvs;

		[Token(Token = "0x1700014C")]
		public float size
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x1332934", Offset = "0x1332934", VA = "0x1332934")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x133293C", Offset = "0x133293C", VA = "0x133293C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public Color color
		{
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0x1332960", Offset = "0x1332960", VA = "0x1332960")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0x133296C", Offset = "0x133296C", VA = "0x133296C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public Vector3 offset
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0x13329E8", Offset = "0x13329E8", VA = "0x13329E8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0x13329F4", Offset = "0x13329F4", VA = "0x13329F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public int normalMethod
		{
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x1332AD4", Offset = "0x1332AD4", VA = "0x1332AD4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x1332ADC", Offset = "0x1332ADC", VA = "0x1332ADC")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public bool calculateTangents
		{
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0x1332B00", Offset = "0x1332B00", VA = "0x1332B00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0x1332B08", Offset = "0x1332B08", VA = "0x1332B08")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public float rotation
		{
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x1332B38", Offset = "0x1332B38", VA = "0x1332B38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x1332B40", Offset = "0x1332B40", VA = "0x1332B40")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public bool flipFaces
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0x1332B64", Offset = "0x1332B64", VA = "0x1332B64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0x1332B6C", Offset = "0x1332B6C", VA = "0x1332B6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public bool doubleSided
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x1332B9C", Offset = "0x1332B9C", VA = "0x1332B9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x1332BA4", Offset = "0x1332BA4", VA = "0x1332BA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public UVMode uvMode
		{
			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0x1332BD4", Offset = "0x1332BD4", VA = "0x1332BD4")]
			get
			{
				return default(UVMode);
			}
			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0x1332BDC", Offset = "0x1332BDC", VA = "0x1332BDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public Vector2 uvScale
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x1332C00", Offset = "0x1332C00", VA = "0x1332C00")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x1332C08", Offset = "0x1332C08", VA = "0x1332C08")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public Vector2 uvOffset
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x1332CC8", Offset = "0x1332CC8", VA = "0x1332CC8")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0x1332CD0", Offset = "0x1332CD0", VA = "0x1332CD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public float uvRotation
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x1332D90", Offset = "0x1332D90", VA = "0x1332D90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x1332D98", Offset = "0x1332D98", VA = "0x1332D98")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public bool baked
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x1332DBC", Offset = "0x1332DBC", VA = "0x1332DBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x1332DC4", Offset = "0x1332DC4", VA = "0x1332DC4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x1332EB0", Offset = "0x1332EB0", VA = "0x1332EB0", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x1332FD4", Offset = "0x1332FD4", VA = "0x1332FD4")]
		public void CloneMesh()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x13330E4", Offset = "0x13330E4", VA = "0x13330E4", Slot = "11")]
		public override void Rebuild(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x13330FC", Offset = "0x13330FC", VA = "0x13330FC", Slot = "12")]
		public override void RebuildImmediate(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x1333114", Offset = "0x1333114", VA = "0x1333114", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x133311C", Offset = "0x133311C", VA = "0x133311C", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x1333124", Offset = "0x1333124", VA = "0x1333124", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x1333244", Offset = "0x1333244", VA = "0x1333244")]
		public void UpdateCollider()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x1333328", Offset = "0x1333328", VA = "0x1333328", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x133341C", Offset = "0x133341C", VA = "0x133341C", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x1333478", Offset = "0x1333478", VA = "0x1333478", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x13334AC", Offset = "0x13334AC", VA = "0x13334AC", Slot = "29")]
		protected virtual void BuildMesh()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x13334B0", Offset = "0x13334B0", VA = "0x13334B0", Slot = "30")]
		protected virtual void WriteMesh()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x133365C", Offset = "0x133365C", VA = "0x133365C", Slot = "31")]
		protected virtual void AllocateMesh(int vertexCount, int trisCount)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x1333784", Offset = "0x1333784", VA = "0x1333784")]
		protected void ResetUVDistance()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x13337FC", Offset = "0x13337FC", VA = "0x13337FC")]
		protected void AddUVDistance(int sampleIndex)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x133392C", Offset = "0x133392C", VA = "0x133392C")]
		protected void CalculateUVs(double percent, float u)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x1333AD0", Offset = "0x1333AD0", VA = "0x1333AD0")]
		public MeshGenerator()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class Node : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003DD")]
		public class Connection
		{
			[Token(Token = "0x40016B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool invertTangents;

			[Token(Token = "0x40016B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			private int _pointIndex;

			[Token(Token = "0x40016B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private SplineComputer _computer;

			[Token(Token = "0x40016B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			internal SplinePoint point;

			[Token(Token = "0x170002B4")]
			public SplineComputer computer
			{
				[Token(Token = "0x6001A47")]
				[Address(RVA = "0x1335700", Offset = "0x1335700", VA = "0x1335700")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B5")]
			public int pointIndex
			{
				[Token(Token = "0x6001A48")]
				[Address(RVA = "0x1335708", Offset = "0x1335708", VA = "0x1335708")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170002B6")]
			internal bool isValid
			{
				[Token(Token = "0x6001A49")]
				[Address(RVA = "0x1334C50", Offset = "0x1334C50", VA = "0x1334C50")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A4A")]
			[Address(RVA = "0x1335364", Offset = "0x1335364", VA = "0x1335364")]
			internal Connection(SplineComputer comp, int index, SplinePoint inputPoint)
			{
			}
		}

		[Token(Token = "0x20003DE")]
		public enum Type
		{
			[Token(Token = "0x40016BA")]
			Smooth,
			[Token(Token = "0x40016BB")]
			Free
		}

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Connection[] connections;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _transformSize;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool _transformNormals;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[SerializeField]
		private bool _transformTangents;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TS_Transform tsTransform;

		[Token(Token = "0x17000159")]
		public bool transformNormals
		{
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0x1333C48", Offset = "0x1333C48", VA = "0x1333C48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x1333C50", Offset = "0x1333C50", VA = "0x1333C50")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public bool transformSize
		{
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0x1333DAC", Offset = "0x1333DAC", VA = "0x1333DAC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0x1333DB4", Offset = "0x1333DB4", VA = "0x1333DB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public bool transformTangents
		{
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0x1333DD8", Offset = "0x1333DD8", VA = "0x1333DD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x1333DE0", Offset = "0x1333DE0", VA = "0x1333DE0")]
			set
			{
			}
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x1333E04", Offset = "0x1333E04", VA = "0x1333E04")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x1333E84", Offset = "0x1333E84", VA = "0x1333E84")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x1333EE0", Offset = "0x1333EE0", VA = "0x1333EE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x1333E88", Offset = "0x1333E88", VA = "0x1333E88")]
		private void Run()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x1334280", Offset = "0x1334280", VA = "0x1334280")]
		public SplinePoint GetPoint(int connectionIndex, bool swapTangents)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x13344F0", Offset = "0x13344F0", VA = "0x13344F0")]
		public void SetPoint(int connectionIndex, SplinePoint worldPoint, bool swappedTangents)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x1334B34", Offset = "0x1334B34", VA = "0x1334B34")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x1334B38", Offset = "0x1334B38", VA = "0x1334B38")]
		public void ClearConnections()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x1333EE4", Offset = "0x1333EE4", VA = "0x1333EE4")]
		public void UpdateConnectedComputers([Optional] SplineComputer excludeComputer)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x1334ED8", Offset = "0x1334ED8", VA = "0x1334ED8")]
		public void UpdatePoint(SplineComputer computer, int pointIndex, SplinePoint point, bool updatePosition = true)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x1333C74", Offset = "0x1333C74", VA = "0x1333C74")]
		private void UpdatePoints()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x1335038", Offset = "0x1335038", VA = "0x1335038")]
		protected void RemoveInvalidConnections()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x13350C8", Offset = "0x13350C8", VA = "0x13350C8", Slot = "4")]
		public virtual void AddConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x13349B0", Offset = "0x13349B0", VA = "0x13349B0")]
		protected SplinePoint PointToLocal(SplinePoint worldPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x13343A4", Offset = "0x13343A4", VA = "0x13343A4")]
		protected SplinePoint PointToWorld(SplinePoint localPoint)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x13353B4", Offset = "0x13353B4", VA = "0x13353B4", Slot = "5")]
		public virtual void RemoveConnection(SplineComputer computer, int pointIndex)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x1334CF0", Offset = "0x1334CF0", VA = "0x1334CF0")]
		private void RemoveConnection(int index)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x1335534", Offset = "0x1335534", VA = "0x1335534", Slot = "6")]
		public virtual bool HasConnection(SplineComputer computer, int pointIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x1335688", Offset = "0x1335688", VA = "0x1335688")]
		public Connection[] GetConnections()
		{
			return null;
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x1335690", Offset = "0x1335690", VA = "0x1335690")]
		public Node()
		{
		}
	}
	[Token(Token = "0x2000206")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED834", Offset = "0x7ED834")]
	public class ObjectBender : SplineUser
	{
		[Token(Token = "0x20003DF")]
		public enum Axis
		{
			[Token(Token = "0x40016BD")]
			X,
			[Token(Token = "0x40016BE")]
			Y,
			[Token(Token = "0x40016BF")]
			Z
		}

		[Token(Token = "0x20003E0")]
		public enum NormalMode
		{
			[Token(Token = "0x40016C1")]
			Spline,
			[Token(Token = "0x40016C2")]
			Auto,
			[Token(Token = "0x40016C3")]
			Custom
		}

		[Token(Token = "0x20003E1")]
		public enum ForwardMode
		{
			[Token(Token = "0x40016C5")]
			Spline,
			[Token(Token = "0x40016C6")]
			Custom
		}

		[Serializable]
		[Token(Token = "0x20003E2")]
		public class BendProperty
		{
			[Token(Token = "0x40016C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40016C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TS_Transform transform;

			[Token(Token = "0x40016C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool applyRotation;

			[Token(Token = "0x40016CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool applyScale;

			[Token(Token = "0x40016CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
			public bool generateLightmapUVs;

			[Token(Token = "0x40016CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
			[SerializeField]
			[HideInInspector]
			private bool _bendMesh;

			[Token(Token = "0x40016CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[HideInInspector]
			private bool _bendSpline;

			[Token(Token = "0x40016CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			[SerializeField]
			[HideInInspector]
			private bool _bendCollider;

			[Token(Token = "0x40016CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float colliderUpdateDue;

			[Token(Token = "0x40016D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float colliderUpdateRate;

			[Token(Token = "0x40016D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool updateCollider;

			[Token(Token = "0x40016D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 originalPosition;

			[Token(Token = "0x40016D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 originalScale;

			[Token(Token = "0x40016D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Quaternion originalRotation;

			[Token(Token = "0x40016D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Quaternion parentRotation;

			[Token(Token = "0x40016D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Vector3 positionPercent;

			[Token(Token = "0x40016D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Vector3[] vertexPercents;

			[Token(Token = "0x40016D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Vector3[] normals;

			[Token(Token = "0x40016D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Vector3[] colliderVertexPercents;

			[Token(Token = "0x40016DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Vector3[] colliderNormals;

			[Token(Token = "0x40016DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalMesh;

			[Token(Token = "0x40016DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[SerializeField]
			[HideInInspector]
			private Mesh originalColliderMesh;

			[Token(Token = "0x40016DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Spline _originalSpline;

			[Token(Token = "0x40016DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[SerializeField]
			[HideInInspector]
			private Mesh destinationMesh;

			[Token(Token = "0x40016DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[SerializeField]
			[HideInInspector]
			private Mesh destinationColliderMesh;

			[Token(Token = "0x40016E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public Spline destinationSpline;

			[Token(Token = "0x40016E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public TS_Mesh _editMesh;

			[Token(Token = "0x40016E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public TS_Mesh _editColliderMesh;

			[Token(Token = "0x40016E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public MeshFilter filter;

			[Token(Token = "0x40016E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			public MeshCollider collider;

			[Token(Token = "0x40016E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			public SplineComputer splineComputer;

			[Token(Token = "0x40016E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			public Vector3[] splinePointPercents;

			[Token(Token = "0x40016E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			public Vector3[] primaryTangentPercents;

			[Token(Token = "0x40016E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			public Vector3[] secondaryTangentPercents;

			[Token(Token = "0x40016E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[SerializeField]
			[HideInInspector]
			private bool parent;

			[Token(Token = "0x170002B7")]
			public bool isValid
			{
				[Token(Token = "0x6001A4B")]
				[Address(RVA = "0x13396A4", Offset = "0x13396A4", VA = "0x13396A4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170002B8")]
			public bool bendMesh
			{
				[Token(Token = "0x6001A4C")]
				[Address(RVA = "0x133972C", Offset = "0x133972C", VA = "0x133972C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A4D")]
				[Address(RVA = "0x1336CE0", Offset = "0x1336CE0", VA = "0x1336CE0")]
				set
				{
				}
			}

			[Token(Token = "0x170002B9")]
			public bool bendCollider
			{
				[Token(Token = "0x6001A4E")]
				[Address(RVA = "0x13397C8", Offset = "0x13397C8", VA = "0x13397C8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A4F")]
				[Address(RVA = "0x1336E78", Offset = "0x1336E78", VA = "0x1336E78")]
				set
				{
				}
			}

			[Token(Token = "0x170002BA")]
			public bool bendSpline
			{
				[Token(Token = "0x6001A50")]
				[Address(RVA = "0x1339864", Offset = "0x1339864", VA = "0x1339864")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A51")]
				[Address(RVA = "0x133986C", Offset = "0x133986C", VA = "0x133986C")]
				set
				{
				}
			}

			[Token(Token = "0x170002BB")]
			public TS_Mesh editMesh
			{
				[Token(Token = "0x6001A52")]
				[Address(RVA = "0x1337C40", Offset = "0x1337C40", VA = "0x1337C40")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BC")]
			public TS_Mesh editColliderMesh
			{
				[Token(Token = "0x6001A53")]
				[Address(RVA = "0x1337D40", Offset = "0x1337D40", VA = "0x1337D40")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BD")]
			public Spline originalSpline
			{
				[Token(Token = "0x6001A54")]
				[Address(RVA = "0x1337E6C", Offset = "0x1337E6C", VA = "0x1337E6C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A55")]
			[Address(RVA = "0x13366B4", Offset = "0x13366B4", VA = "0x13366B4")]
			public BendProperty(Transform t, bool isParent = false)
			{
			}

			[Token(Token = "0x6001A56")]
			[Address(RVA = "0x1338090", Offset = "0x1338090", VA = "0x1338090")]
			public void Revert()
			{
			}

			[Token(Token = "0x6001A57")]
			[Address(RVA = "0x1339734", Offset = "0x1339734", VA = "0x1339734")]
			private void RevertMesh()
			{
			}

			[Token(Token = "0x6001A58")]
			[Address(RVA = "0x1339878", Offset = "0x1339878", VA = "0x1339878")]
			private void RevertTransform()
			{
			}

			[Token(Token = "0x6001A59")]
			[Address(RVA = "0x13397D0", Offset = "0x13397D0", VA = "0x13397D0")]
			private void RevertCollider()
			{
			}

			[Token(Token = "0x6001A5A")]
			[Address(RVA = "0x13381E8", Offset = "0x13381E8", VA = "0x13381E8")]
			public void Apply(bool applyTransform)
			{
			}

			[Token(Token = "0x6001A5B")]
			[Address(RVA = "0x1338374", Offset = "0x1338374", VA = "0x1338374")]
			public void Update()
			{
			}

			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x13398FC", Offset = "0x13398FC", VA = "0x13398FC")]
			private void ApplyMesh()
			{
			}

			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0x1339AAC", Offset = "0x1339AAC", VA = "0x1339AAC")]
			private void ApplyCollider()
			{
			}

			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0x1339A7C", Offset = "0x1339A7C", VA = "0x1339A7C")]
			private void ApplySpline()
			{
			}
		}

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private bool _bend;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public BendProperty[] bendProperties;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		private TS_Bounds bounds;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[HideInInspector]
		private NormalMode _normalMode;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[HideInInspector]
		private ForwardMode _forwardMode;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7F3A48", Offset = "0x7F3A48")]
		private Vector3 _customNormal;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _customForward;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SplineResult bendResult;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Quaternion bendRotation;

		[Token(Token = "0x1700015C")]
		public bool bend
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x1335710", Offset = "0x1335710", VA = "0x1335710")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x1335718", Offset = "0x1335718", VA = "0x1335718")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public Axis axis
		{
			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0x13359A8", Offset = "0x13359A8", VA = "0x13359A8")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0x13359B0", Offset = "0x13359B0", VA = "0x13359B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public NormalMode upMode
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x1335A80", Offset = "0x1335A80", VA = "0x1335A80")]
			get
			{
				return default(NormalMode);
			}
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x1335A88", Offset = "0x1335A88", VA = "0x1335A88")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public Vector3 customNormal
		{
			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0x1335B50", Offset = "0x1335B50", VA = "0x1335B50")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0x1335B5C", Offset = "0x1335B5C", VA = "0x1335B5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public ForwardMode forwardMode
		{
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0x1335C8C", Offset = "0x1335C8C", VA = "0x1335C8C")]
			get
			{
				return default(ForwardMode);
			}
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x1335C94", Offset = "0x1335C94", VA = "0x1335C94")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public Vector3 customForward
		{
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x1335D5C", Offset = "0x1335D5C", VA = "0x1335D5C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x1335D68", Offset = "0x1335D68", VA = "0x1335D68")]
			set
			{
			}
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x1335E98", Offset = "0x1335E98", VA = "0x1335E98")]
		private void GetTransformsRecursively(Transform current, ref List<Transform> transformList)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x1336120", Offset = "0x1336120", VA = "0x1336120")]
		private void GetObjects()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x13365EC", Offset = "0x13365EC", VA = "0x13365EC")]
		public TS_Bounds GetBounds()
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x1336244", Offset = "0x1336244", VA = "0x1336244")]
		private void CreateProperty(ref BendProperty property, Transform t)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x1336FD4", Offset = "0x1336FD4", VA = "0x1336FD4")]
		private void CalculateBounds()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x1337188", Offset = "0x1337188", VA = "0x1337188")]
		private void CalculatePropertyBounds(ref BendProperty property)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x1337750", Offset = "0x1337750", VA = "0x1337750")]
		public void CalculatePercents(BendProperty property)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x1335940", Offset = "0x1335940", VA = "0x1335940")]
		private void Revert()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x1335788", Offset = "0x1335788", VA = "0x1335788")]
		public void UpdateReferences()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x13383C0", Offset = "0x13383C0", VA = "0x13383C0")]
		private void GetBendResult(Vector3 percentage)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x1337F98", Offset = "0x1337F98", VA = "0x1337F98")]
		private Vector3 GetPercentage(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x1338AF8", Offset = "0x1338AF8", VA = "0x1338AF8", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x1338158", Offset = "0x1338158", VA = "0x1338158")]
		private void Bend()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x1338B34", Offset = "0x1338B34", VA = "0x1338B34")]
		public void BendObject(BendProperty p)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x13391E4", Offset = "0x13391E4", VA = "0x13391E4")]
		private void BendMesh(Vector3[] vertexPercents, Vector3[] originalNormals, TS_Mesh mesh, Matrix4x4 worldToLocalMatrix)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x13393DC", Offset = "0x13393DC", VA = "0x13393DC", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x1339530", Offset = "0x1339530", VA = "0x1339530", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x13395A0", Offset = "0x13395A0", VA = "0x13395A0")]
		public ObjectBender()
		{
		}
	}
	[Token(Token = "0x2000207")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED86C", Offset = "0x7ED86C")]
	public class ObjectController : SplineUser
	{
		[Serializable]
		[Token(Token = "0x20003E3")]
		internal class ObjectControl
		{
			[Token(Token = "0x40016EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x40016EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 position;

			[Token(Token = "0x40016EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion rotation;

			[Token(Token = "0x40016ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 scale;

			[Token(Token = "0x40016EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool active;

			[Token(Token = "0x40016EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Vector3 baseScale;

			[Token(Token = "0x170002BE")]
			public bool isNull
			{
				[Token(Token = "0x6001A5F")]
				[Address(RVA = "0x133C808", Offset = "0x133C808", VA = "0x133C808")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170002BF")]
			public Transform transform
			{
				[Token(Token = "0x6001A60")]
				[Address(RVA = "0x133ABD8", Offset = "0x133ABD8", VA = "0x133ABD8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x133B308", Offset = "0x133B308", VA = "0x133B308")]
			public ObjectControl(GameObject input)
			{
			}

			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x133AC70", Offset = "0x133AC70", VA = "0x133AC70")]
			public void Destroy()
			{
			}

			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x133AD24", Offset = "0x133AD24", VA = "0x133AD24")]
			public void DestroyImmediate()
			{
			}

			[Token(Token = "0x6001A64")]
			[Address(RVA = "0x133C3D8", Offset = "0x133C3D8", VA = "0x133C3D8")]
			public void Apply()
			{
			}
		}

		[Token(Token = "0x20003E4")]
		public enum ObjectMethod
		{
			[Token(Token = "0x40016F1")]
			Instantiate,
			[Token(Token = "0x40016F2")]
			GetChildren
		}

		[Token(Token = "0x20003E5")]
		public enum Positioning
		{
			[Token(Token = "0x40016F4")]
			Stretch,
			[Token(Token = "0x40016F5")]
			Clip
		}

		[Token(Token = "0x20003E6")]
		public enum Iteration
		{
			[Token(Token = "0x40016F7")]
			Ordered,
			[Token(Token = "0x40016F8")]
			Random
		}

		[Token(Token = "0x20003E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE70C", Offset = "0x7EE70C")]
		private sealed class <InstantiateAllWithDelay>d__97 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObjectController <>4__this;

			[Token(Token = "0x40016FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170002C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A68")]
				[Address(RVA = "0x133C798", Offset = "0x133C798", VA = "0x133C798", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A6A")]
				[Address(RVA = "0x133C800", Offset = "0x133C800", VA = "0x133C800", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A65")]
			[Address(RVA = "0x133B5CC", Offset = "0x133B5CC", VA = "0x133B5CC")]
			[DebuggerHidden]
			public <InstantiateAllWithDelay>d__97(int <>1__state)
			{
			}

			[Token(Token = "0x6001A66")]
			[Address(RVA = "0x133C650", Offset = "0x133C650", VA = "0x133C650", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A67")]
			[Address(RVA = "0x133C654", Offset = "0x133C654", VA = "0x133C654", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A69")]
			[Address(RVA = "0x133C7A0", Offset = "0x133C7A0", VA = "0x133C7A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		public GameObject[] objects;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private float _positionOffset;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[HideInInspector]
		private int _spawnCount;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		private Positioning _objectPositioning;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		private Iteration _iteration;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _randomSize;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _offset;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minRotationOffset;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxRotationOffset;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _minScaleMultiplier;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[HideInInspector]
		private Vector3 _maxScaleMultiplier;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		[HideInInspector]
		private bool _randomizeOffset;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		[SerializeField]
		[HideInInspector]
		private bool _useRandomOffsetRotation;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x106")]
		[SerializeField]
		[HideInInspector]
		private bool _shellOffset;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x107")]
		[SerializeField]
		[HideInInspector]
		private bool _randomOffset;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[HideInInspector]
		private bool _applyRotation;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		[SerializeField]
		[HideInInspector]
		private bool _applyScale;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		[HideInInspector]
		private ObjectMethod _objectMethod;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public bool delayedSpawn;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[HideInInspector]
		public float spawnDelay;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private int lastChildCount;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private ObjectControl[] spawned;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SplineResult evaluateResult;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private System.Random randomizer;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private System.Random randomizer2;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private System.Random rotationRandomizer;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private System.Random scaleRandomizer;

		[Token(Token = "0x17000162")]
		public ObjectMethod objectMethod
		{
			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x1339C80", Offset = "0x1339C80", VA = "0x1339C80")]
			get
			{
				return default(ObjectMethod);
			}
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x1339C88", Offset = "0x1339C88", VA = "0x1339C88")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public int spawnCount
		{
			[Token(Token = "0x6000E11")]
			[Address(RVA = "0x1339D5C", Offset = "0x1339D5C", VA = "0x1339D5C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x1339D64", Offset = "0x1339D64", VA = "0x1339D64")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public Positioning objectPositioning
		{
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x1339FD0", Offset = "0x1339FD0", VA = "0x1339FD0")]
			get
			{
				return default(Positioning);
			}
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x1339FD8", Offset = "0x1339FD8", VA = "0x1339FD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public Iteration iteration
		{
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x1339FFC", Offset = "0x1339FFC", VA = "0x1339FFC")]
			get
			{
				return default(Iteration);
			}
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x133A004", Offset = "0x133A004", VA = "0x133A004")]
			set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public int randomSeed
		{
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x133A028", Offset = "0x133A028", VA = "0x133A028")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0x133A030", Offset = "0x133A030", VA = "0x133A030")]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public Vector2 offset
		{
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0x133A054", Offset = "0x133A054", VA = "0x133A054")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x133A05C", Offset = "0x133A05C", VA = "0x133A05C")]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public Vector3 minRotationOffset
		{
			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0x133A11C", Offset = "0x133A11C", VA = "0x133A11C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x133A128", Offset = "0x133A128", VA = "0x133A128")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public Vector3 maxRotationOffset
		{
			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0x133A208", Offset = "0x133A208", VA = "0x133A208")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0x133A214", Offset = "0x133A214", VA = "0x133A214")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0x133A2F4", Offset = "0x133A2F4", VA = "0x133A2F4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E20")]
			[Address(RVA = "0x133A3A0", Offset = "0x133A3A0", VA = "0x133A3A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public Vector3 minScaleMultiplier
		{
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0x133A4C8", Offset = "0x133A4C8", VA = "0x133A4C8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0x133A4D4", Offset = "0x133A4D4", VA = "0x133A4D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public Vector3 maxScaleMultiplier
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x133A5B4", Offset = "0x133A5B4", VA = "0x133A5B4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x133A5C0", Offset = "0x133A5C0", VA = "0x133A5C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700016D")]
		public Vector3 scaleMultiplier
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x133A6A0", Offset = "0x133A6A0", VA = "0x133A6A0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0x133A74C", Offset = "0x133A74C", VA = "0x133A74C")]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public bool randomizeOffset
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x133A874", Offset = "0x133A874", VA = "0x133A874")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x133A87C", Offset = "0x133A87C", VA = "0x133A87C")]
			set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public bool useRandomOffsetRotation
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0x133A8AC", Offset = "0x133A8AC", VA = "0x133A8AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0x133A8B4", Offset = "0x133A8B4", VA = "0x133A8B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public bool shellOffset
		{
			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0x133A8E4", Offset = "0x133A8E4", VA = "0x133A8E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0x133A8EC", Offset = "0x133A8EC", VA = "0x133A8EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public bool randomOffset
		{
			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0x133A91C", Offset = "0x133A91C", VA = "0x133A91C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0x133A924", Offset = "0x133A924", VA = "0x133A924")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public bool applyRotation
		{
			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0x133A954", Offset = "0x133A954", VA = "0x133A954")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x133A95C", Offset = "0x133A95C", VA = "0x133A95C")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public bool applyScale
		{
			[Token(Token = "0x6000E31")]
			[Address(RVA = "0x133A98C", Offset = "0x133A98C", VA = "0x133A98C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x133A994", Offset = "0x133A994", VA = "0x133A994")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public Vector2 randomSize
		{
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0x133A9C4", Offset = "0x133A9C4", VA = "0x133A9C4")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0x133A9CC", Offset = "0x133A9CC", VA = "0x133A9CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public float positionOffset
		{
			[Token(Token = "0x6000E35")]
			[Address(RVA = "0x133AA8C", Offset = "0x133AA8C", VA = "0x133AA8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E36")]
			[Address(RVA = "0x133AA94", Offset = "0x133AA94", VA = "0x133AA94")]
			set
			{
			}
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x133AAB8", Offset = "0x133AAB8", VA = "0x133AAB8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x1339D98", Offset = "0x1339D98", VA = "0x1339D98")]
		private void Remove()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x133ADD8", Offset = "0x133ADD8", VA = "0x133ADD8")]
		public void GetAll()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x1339CA8", Offset = "0x1339CA8", VA = "0x1339CA8")]
		public void Spawn()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x133B550", Offset = "0x133B550", VA = "0x133B550", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x133B414", Offset = "0x133B414", VA = "0x133B414")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBB48", Offset = "0x7FBB48")]
		private IEnumerator InstantiateAllWithDelay()
		{
			return null;
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x133B484", Offset = "0x133B484", VA = "0x133B484")]
		private void InstantiateAll()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x133B5F8", Offset = "0x133B5F8", VA = "0x133B5F8")]
		private void InstantiateSingle()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x133B8DC", Offset = "0x133B8DC", VA = "0x133B8DC", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x133C368", Offset = "0x133C368", VA = "0x133C368", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x133C4C4", Offset = "0x133C4C4", VA = "0x133C4C4", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x133C500", Offset = "0x133C500", VA = "0x133C500")]
		public ObjectController()
		{
		}
	}
	[Token(Token = "0x2000208")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED8A4", Offset = "0x7ED8A4")]
	public class ParticleController : SplineUser
	{
		[Token(Token = "0x20003E8")]
		public enum EmitPoint
		{
			[Token(Token = "0x40016FE")]
			Beginning,
			[Token(Token = "0x40016FF")]
			Ending,
			[Token(Token = "0x4001700")]
			Random,
			[Token(Token = "0x4001701")]
			Ordered
		}

		[Token(Token = "0x20003E9")]
		public enum MotionType
		{
			[Token(Token = "0x4001703")]
			None,
			[Token(Token = "0x4001704")]
			UseParticleSystem,
			[Token(Token = "0x4001705")]
			FollowForward,
			[Token(Token = "0x4001706")]
			FollowBackward,
			[Token(Token = "0x4001707")]
			ByNormal,
			[Token(Token = "0x4001708")]
			ByNormalRandomized
		}

		[Token(Token = "0x20003EA")]
		public enum Wrap
		{
			[Token(Token = "0x400170A")]
			Default,
			[Token(Token = "0x400170B")]
			Loop
		}

		[Token(Token = "0x20003EB")]
		public class Particle
		{
			[Token(Token = "0x400170C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector2 startOffset;

			[Token(Token = "0x400170D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vector2 endOffset;

			[Token(Token = "0x400170E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal float cycleSpeed;

			[Token(Token = "0x400170F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal float startLifetime;

			[Token(Token = "0x4001710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Color startColor;

			[Token(Token = "0x4001711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float remainingLifetime;

			[Token(Token = "0x4001712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal double startPercent;

			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x133E2E0", Offset = "0x133E2E0", VA = "0x133E2E0")]
			internal double GetSplinePercent(Wrap wrap)
			{
				return default(double);
			}

			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x133E3EC", Offset = "0x133E3EC", VA = "0x133E3EC")]
			public Particle()
			{
			}
		}

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public ParticleSystem _particleSystem;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public bool volumetric;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		[HideInInspector]
		public bool emitFromShell;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public Vector2 scale;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		public EmitPoint emitPoint;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public MotionType motionType;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public float minCycles;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[HideInInspector]
		public float maxCycles;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Particle[] controllers;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float[] lifetimes;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int particleCount;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private int birthIndex;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private SplineResult evaluateResult;

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x133C878", Offset = "0x133C878", VA = "0x133C878", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x133C8A4", Offset = "0x133C8A4", VA = "0x133C8A4", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x133E244", Offset = "0x133E244", VA = "0x133E244", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x133DD84", Offset = "0x133DD84", VA = "0x133DD84")]
		private void HandleParticle(int index)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x133E3E8", Offset = "0x133E3E8", VA = "0x133E3E8")]
		private void OnParticleDie(int index)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x133CE14", Offset = "0x133CE14", VA = "0x133CE14")]
		private void OnParticleBorn(int index)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x133E47C", Offset = "0x133E47C", VA = "0x133E47C")]
		public ParticleController()
		{
		}
	}
	[Token(Token = "0x2000209")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED8F0", Offset = "0x7ED8F0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED8F0", Offset = "0x7ED8F0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED8F0", Offset = "0x7ED8F0")]
	public class PathGenerator : MeshGenerator
	{
		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private bool _useShapeCurve;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private AnimationCurve _shape;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private AnimationCurve _lastShape;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[HideInInspector]
		private float _shapeExposure;

		[Token(Token = "0x17000176")]
		public int slices
		{
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x133E56C", Offset = "0x133E56C", VA = "0x133E56C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0x133E574", Offset = "0x133E574", VA = "0x133E574")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public bool useShapeCurve
		{
			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0x133E5A0", Offset = "0x133E5A0", VA = "0x133E5A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0x133E5A8", Offset = "0x133E5A8", VA = "0x133E5A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public float shapeExposure
		{
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0x133E6E8", Offset = "0x133E6E8", VA = "0x133E6E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0x133E6F0", Offset = "0x133E6F0", VA = "0x133E6F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public AnimationCurve shape
		{
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0x133E7B4", Offset = "0x133E7B4", VA = "0x133E7B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E51")]
			[Address(RVA = "0x133E7BC", Offset = "0x133E7BC", VA = "0x133E7BC")]
			set
			{
			}
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x133EB1C", Offset = "0x133EB1C", VA = "0x133EB1C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x133EB80", Offset = "0x133EB80", VA = "0x133EB80", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x133EB84", Offset = "0x133EB84", VA = "0x133EB84", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x133EC64", Offset = "0x133EC64", VA = "0x133EC64")]
		private void GenerateVertices()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x133FC10", Offset = "0x133FC10", VA = "0x133FC10")]
		public PathGenerator()
		{
		}
	}
	[Token(Token = "0x200020A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7ED9A0", Offset = "0x7ED9A0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7ED9A0", Offset = "0x7ED9A0")]
	public class PolygonColliderGenerator : SplineUser
	{
		[Token(Token = "0x20003EC")]
		public enum Type
		{
			[Token(Token = "0x4001714")]
			Path,
			[Token(Token = "0x4001715")]
			Shape
		}

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private Type _type;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[HideInInspector]
		private float _size;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[HideInInspector]
		private float _offset;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		protected PolygonCollider2D polygonCollider;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		protected Vector2[] vertices;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public float updateRate;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected float lastUpdateTime;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool updateCollider;

		[Token(Token = "0x1700017A")]
		public Type type
		{
			[Token(Token = "0x6000E57")]
			[Address(RVA = "0x133FC84", Offset = "0x133FC84", VA = "0x133FC84")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0x133FC8C", Offset = "0x133FC8C", VA = "0x133FC8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public float size
		{
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0x133FCB0", Offset = "0x133FCB0", VA = "0x133FCB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x133FCB8", Offset = "0x133FCB8", VA = "0x133FCB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public float offset
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x133FCDC", Offset = "0x133FCDC", VA = "0x133FCDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x133FCE4", Offset = "0x133FCE4", VA = "0x133FCE4")]
			set
			{
			}
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x133FD08", Offset = "0x133FD08", VA = "0x133FD08", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x133FD6C", Offset = "0x133FD6C", VA = "0x133FD6C", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x133FD74", Offset = "0x133FD74", VA = "0x133FD74", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x133FD7C", Offset = "0x133FD7C", VA = "0x133FD7C", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x133FD84", Offset = "0x133FD84", VA = "0x133FD84", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x133FD8C", Offset = "0x133FD8C", VA = "0x133FD8C", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x133FE64", Offset = "0x133FE64", VA = "0x133FE64", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x13405AC", Offset = "0x13405AC", VA = "0x13405AC", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x133FED4", Offset = "0x133FED4", VA = "0x133FED4")]
		private void GeneratePath()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x1340300", Offset = "0x1340300", VA = "0x1340300")]
		private void GenerateShape()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x1340750", Offset = "0x1340750", VA = "0x1340750")]
		public PolygonColliderGenerator()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public delegate void EmptySplineHandler();
	[Token(Token = "0x200020C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDA28", Offset = "0x7EDA28")]
	public class SplineComputer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003ED")]
		public class NodeLink
		{
			[Token(Token = "0x4001716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Node node;

			[Token(Token = "0x4001717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int pointIndex;

			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0x13BED08", Offset = "0x13BED08", VA = "0x13BED08")]
			public NodeLink()
			{
			}
		}

		[Token(Token = "0x20003EE")]
		public enum Space
		{
			[Token(Token = "0x4001719")]
			World,
			[Token(Token = "0x400171A")]
			Local
		}

		[Serializable]
		[Token(Token = "0x20003EF")]
		public class Morph
		{
			[Serializable]
			[Token(Token = "0x2000478")]
			internal class SplineMorphState
			{
				[Token(Token = "0x4001901")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public SplinePoint[] points;

				[Token(Token = "0x4001902")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public float percent;

				[Token(Token = "0x4001903")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public string name;

				[Token(Token = "0x6001CBD")]
				[Address(RVA = "0x13C40C8", Offset = "0x13C40C8", VA = "0x13C40C8")]
				public SplineMorphState()
				{
				}
			}

			[Token(Token = "0x400171B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private SplineComputer computer;

			[Token(Token = "0x400171C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private SplineMorphState[] morphStates;

			[Token(Token = "0x400171D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			internal bool initialized;

			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0x13BDC2C", Offset = "0x13BDC2C", VA = "0x13BDC2C")]
			public Morph(SplineComputer input)
			{
			}

			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0x13C28D4", Offset = "0x13C28D4", VA = "0x13C28D4")]
			public void SetWeight(int index, float weight)
			{
			}

			[Token(Token = "0x6001A70")]
			[Address(RVA = "0x13C3A3C", Offset = "0x13C3A3C", VA = "0x13C3A3C")]
			public void SetWeight(string name, float weight)
			{
			}

			[Token(Token = "0x6001A71")]
			[Address(RVA = "0x13C3C04", Offset = "0x13C3C04", VA = "0x13C3C04")]
			public void CaptureSnapshot(int index)
			{
			}

			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x13C3D74", Offset = "0x13C3D74", VA = "0x13C3D74")]
			public void CaptureSnapshot(string name)
			{
			}

			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x13C3D9C", Offset = "0x13C3D9C", VA = "0x13C3D9C")]
			public void Clear()
			{
			}

			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x13C3DF4", Offset = "0x13C3DF4", VA = "0x13C3DF4")]
			public SplinePoint[] GetSnapshot(int index)
			{
				return null;
			}

			[Token(Token = "0x6001A75")]
			[Address(RVA = "0x13C3E38", Offset = "0x13C3E38", VA = "0x13C3E38")]
			public SplinePoint[] GetSnapshot(string name)
			{
				return null;
			}

			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x13C2D3C", Offset = "0x13C2D3C", VA = "0x13C2D3C")]
			public float GetWeight(int index)
			{
				return default(float);
			}

			[Token(Token = "0x6001A77")]
			[Address(RVA = "0x13C3E8C", Offset = "0x13C3E8C", VA = "0x13C3E8C")]
			public float GetWeight(string name)
			{
				return default(float);
			}

			[Token(Token = "0x6001A78")]
			[Address(RVA = "0x13C3EE0", Offset = "0x13C3EE0", VA = "0x13C3EE0")]
			public void AddChannel(string name)
			{
			}

			[Token(Token = "0x6001A79")]
			[Address(RVA = "0x13C4140", Offset = "0x13C4140", VA = "0x13C4140")]
			public void RemoveChannel(string name)
			{
			}

			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0x13C4168", Offset = "0x13C4168", VA = "0x13C4168")]
			public void RemoveChannel(int index)
			{
			}

			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0x13C33E0", Offset = "0x13C33E0", VA = "0x13C33E0")]
			private void Update()
			{
			}

			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0x13C3B08", Offset = "0x13C3B08", VA = "0x13C3B08")]
			private int GetChannelIndex(string name)
			{
				return default(int);
			}

			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0x13BDCD8", Offset = "0x13BDCD8", VA = "0x13BDCD8")]
			public int GetChannelCount()
			{
				return default(int);
			}

			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x13C2AE4", Offset = "0x13C2AE4", VA = "0x13C2AE4")]
			public string[] GetChannelNames()
			{
				return null;
			}
		}

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private Spline spline;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		private Morph _morph;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private Space _space;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private SplineUser[] subscribers;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private NodeLink[] _nodeLinks;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool rebuildPending;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TS_Transform tsTransform;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool updateRebuild;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool lateUpdateRebuild;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private SplineUser.UpdateMethod method;

		[Token(Token = "0x1700017D")]
		public Space space
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0x13BDA1C", Offset = "0x13BDA1C", VA = "0x13BDA1C")]
			get
			{
				return default(Space);
			}
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0x13BDA24", Offset = "0x13BDA24", VA = "0x13BDA24")]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public Spline.Type type
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0x13BDA4C", Offset = "0x13BDA4C", VA = "0x13BDA4C")]
			get
			{
				return default(Spline.Type);
			}
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0x13BDA68", Offset = "0x13BDA68", VA = "0x13BDA68")]
			set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public double precision
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0x13BDA98", Offset = "0x13BDA98", VA = "0x13BDA98")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0x13BDAB4", Offset = "0x13BDAB4", VA = "0x13BDAB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public AnimationCurve customValueInterpolation
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0x13BDB00", Offset = "0x13BDB00", VA = "0x13BDB00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0x13BDB1C", Offset = "0x13BDB1C", VA = "0x13BDB1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public AnimationCurve customNormalInterpolation
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0x13BDB40", Offset = "0x13BDB40", VA = "0x13BDB40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0x13BDB5C", Offset = "0x13BDB5C", VA = "0x13BDB5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public int iterations
		{
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0x13BDB80", Offset = "0x13BDB80", VA = "0x13BDB80")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000183")]
		public double moveStep
		{
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0x13BB2B0", Offset = "0x13BB2B0", VA = "0x13BB2B0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000184")]
		public bool isClosed
		{
			[Token(Token = "0x6000E78")]
			[Address(RVA = "0x13BDB9C", Offset = "0x13BDB9C", VA = "0x13BDB9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000185")]
		public int pointCount
		{
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0x13BB164", Offset = "0x13BB164", VA = "0x13BB164")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000186")]
		public Morph morph
		{
			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0x13BDBB8", Offset = "0x13BDBB8", VA = "0x13BDBB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000187")]
		public NodeLink[] nodeLinks
		{
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0x13BDCA8", Offset = "0x13BDCA8", VA = "0x13BDCA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		public bool hasMorph
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0x13BDCB0", Offset = "0x13BDCB0", VA = "0x13BDCB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000189")]
		public Vector3 position
		{
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0x13BDCF0", Offset = "0x13BDCF0", VA = "0x13BDCF0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700018A")]
		public Quaternion rotation
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0x13BDD2C", Offset = "0x13BDD2C", VA = "0x13BDD2C")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700018B")]
		public Vector3 scale
		{
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0x13BDD68", Offset = "0x13BDD68", VA = "0x13BDD68")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700018C")]
		public int subscriberCount
		{
			[Token(Token = "0x6000E80")]
			[Address(RVA = "0x13BDDA4", Offset = "0x13BDDA4", VA = "0x13BDDA4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000023")]
		public event EmptySplineHandler onRebuild
		{
			[Token(Token = "0x6000E81")]
			[Address(RVA = "0x13BDDC0", Offset = "0x13BDDC0", VA = "0x13BDDC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBBAC", Offset = "0x7FBBAC")]
			add
			{
			}
			[Token(Token = "0x6000E82")]
			[Address(RVA = "0x13BDE64", Offset = "0x13BDE64", VA = "0x13BDE64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBBBC", Offset = "0x7FBBBC")]
			remove
			{
			}
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x13BDF08", Offset = "0x13BDF08", VA = "0x13BDF08")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x13BDF88", Offset = "0x13BDF88", VA = "0x13BDF88")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x13BE1F0", Offset = "0x13BE1F0", VA = "0x13BE1F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x13BDFC4", Offset = "0x13BDFC4", VA = "0x13BDFC4")]
		private void Run()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x13BE3E4", Offset = "0x13BE3E4", VA = "0x13BE3E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x13BE3C8", Offset = "0x13BE3C8", VA = "0x13BE3C8")]
		public void ResampleTransform()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x13BE3FC", Offset = "0x13BE3FC", VA = "0x13BE3FC")]
		public void Subscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x13BE5D8", Offset = "0x13BE5D8", VA = "0x13BE5D8")]
		public void Unsubscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x13BE790", Offset = "0x13BE790", VA = "0x13BE790")]
		public bool IsSubscribed(SplineUser user)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x13BE868", Offset = "0x13BE868", VA = "0x13BE868")]
		public SplineUser[] GetSubscribers()
		{
			return null;
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x13BE870", Offset = "0x13BE870", VA = "0x13BE870")]
		public void AddNodeLink(Node node, int pointIndex)
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x13BED10", Offset = "0x13BED10", VA = "0x13BED10")]
		public void RemoveNodeLink(int pointIndex)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x13BF224", Offset = "0x13BF224", VA = "0x13BF224")]
		public SplinePoint[] GetPoints(Space getSpace = Space.World)
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x13BF5D4", Offset = "0x13BF5D4", VA = "0x13BF5D4")]
		public SplinePoint GetPoint(int index, Space getSpace = Space.World)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x13BF780", Offset = "0x13BF780", VA = "0x13BF780")]
		public Vector3 GetPointPosition(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x13BF80C", Offset = "0x13BF80C", VA = "0x13BF80C")]
		public Vector3 GetPointNormal(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x13BF89C", Offset = "0x13BF89C", VA = "0x13BF89C")]
		public Vector3 GetPointTangent(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x13BF928", Offset = "0x13BF928", VA = "0x13BF928")]
		public Vector3 GetPointTangent2(int index, Space getSpace = Space.World)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x13BF9B4", Offset = "0x13BF9B4", VA = "0x13BF9B4")]
		public float GetPointSize(int index, Space getSpace = Space.World)
		{
			return default(float);
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x13BF9FC", Offset = "0x13BF9FC", VA = "0x13BF9FC")]
		public Color GetPointColor(int index, Space getSpace = Space.World)
		{
			return default(Color);
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x13BFA48", Offset = "0x13BFA48", VA = "0x13BFA48")]
		public void SetPoints(SplinePoint[] points, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x13C0408", Offset = "0x13C0408", VA = "0x13C0408")]
		public void SetPointPosition(int index, Vector3 pos, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x13C0740", Offset = "0x13C0740", VA = "0x13C0740")]
		public void SetPointTangents(int index, Vector3 tan1, Vector3 tan2, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x13C0A64", Offset = "0x13C0A64", VA = "0x13C0A64")]
		public void SetPointNormal(int index, Vector3 nrm, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x13C0C1C", Offset = "0x13C0C1C", VA = "0x13C0C1C")]
		public void SetPointSize(int index, float size)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x13C0CF0", Offset = "0x13C0CF0", VA = "0x13C0CF0")]
		public void SetPointColor(int index, Color color)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x13C0E24", Offset = "0x13C0E24", VA = "0x13C0E24")]
		public void SetPoint(int index, SplinePoint point, Space setSpace = Space.World)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x13C05C0", Offset = "0x13C05C0", VA = "0x13C05C0")]
		private void AppendPoints(int count)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x13C12A4", Offset = "0x13C12A4", VA = "0x13C12A4")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x13BBC44", Offset = "0x13BBC44", VA = "0x13BBC44")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x13C12D8", Offset = "0x13C12D8", VA = "0x13C12D8")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x13C1354", Offset = "0x13C1354", VA = "0x13C1354")]
		public SplineResult Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x13C13EC", Offset = "0x13C13EC", VA = "0x13C13EC")]
		public void Evaluate(SplineResult result, int pointIndex)
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x13BB948", Offset = "0x13BB948", VA = "0x13BB948")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x13C14C0", Offset = "0x13C14C0", VA = "0x13C14C0")]
		public void Evaluate(ref SplineResult[] samples, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x13C1550", Offset = "0x13C1550", VA = "0x13C1550")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x13C1608", Offset = "0x13C1608", VA = "0x13C1608")]
		public double Travel(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x13C143C", Offset = "0x13C143C", VA = "0x13C143C")]
		private void TransformResult(SplineResult result)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x13BDA40", Offset = "0x13BDA40", VA = "0x13BDA40")]
		public void Rebuild()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x13C1880", Offset = "0x13C1880", VA = "0x13C1880")]
		public void RebuildImmediate()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x13C1A5C", Offset = "0x13C1A5C", VA = "0x13C1A5C")]
		private void RemoveSubscriber(int index)
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x13BE030", Offset = "0x13BE030", VA = "0x13BE030")]
		private void RebuildOnUpdate()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x13C1B88", Offset = "0x13C1B88", VA = "0x13C1B88")]
		public void RebuildConnectedUsers()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x13C1B8C", Offset = "0x13C1B8C", VA = "0x13C1B8C")]
		private void RebuildUser(int index)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x13BC240", Offset = "0x13BC240", VA = "0x13BC240")]
		public double Project(Vector3 point, int subdivide = 3, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x13BFFCC", Offset = "0x13BFFCC", VA = "0x13BFFCC")]
		public void Break()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x13C1CB4", Offset = "0x13C1CB4", VA = "0x13C1CB4")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x13C1D08", Offset = "0x13C1D08", VA = "0x13C1D08")]
		public void Close()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x13C1D54", Offset = "0x13C1D54", VA = "0x13C1D54")]
		public void ConvertToBezier()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x13BC5D4", Offset = "0x13BC5D4", VA = "0x13BC5D4")]
		public float CalculateLength(double from = 0.0, double to = 1.0, double resolution = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x13C1D70", Offset = "0x13C1D70", VA = "0x13C1D70")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x13C1FCC", Offset = "0x13C1FCC", VA = "0x13C1FCC")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x13C23BC", Offset = "0x13C23BC", VA = "0x13C23BC")]
		public int[] GetAvailableNodeLinksAtPosition(double percent, Spline.Direction direction)
		{
			return null;
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x13C24F0", Offset = "0x13C24F0", VA = "0x13C24F0")]
		public void GetConnectedComputers(List<SplineComputer> computers, List<int> connectionIndices, List<int> connectedIndices, double percent, Spline.Direction direction, bool includeEqual)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x13C2838", Offset = "0x13C2838", VA = "0x13C2838")]
		public void SetMorphState(int index)
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x13C2990", Offset = "0x13C2990", VA = "0x13C2990")]
		public void SetMorphState(string morphName)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x13C2BFC", Offset = "0x13C2BFC", VA = "0x13C2BFC")]
		public void SetMorphState(int index, float percent)
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x13C2D80", Offset = "0x13C2D80", VA = "0x13C2D80")]
		public void SetMorphState(string morphName, float percent)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x13C2EEC", Offset = "0x13C2EEC", VA = "0x13C2EEC")]
		public void SetMorphState(float percent)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x13C2FE0", Offset = "0x13C2FE0", VA = "0x13C2FE0")]
		public List<SplineComputer> GetConnectedComputers()
		{
			return null;
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x13C3090", Offset = "0x13C3090", VA = "0x13C3090")]
		private void GetConnectedComputers(ref List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x13BEE94", Offset = "0x13BEE94", VA = "0x13BEE94")]
		private void RemoveNodeLinkAt(int index)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x13C0670", Offset = "0x13C0670", VA = "0x13C0670")]
		private void SetNodeForPoint(int index, SplinePoint worldPoint)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x13C01AC", Offset = "0x13C01AC", VA = "0x13C01AC")]
		private void UpdateConnectedNodes(SplinePoint[] worldPoints)
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x13BE228", Offset = "0x13BE228", VA = "0x13BE228")]
		private void UpdateConnectedNodes()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x13BF3FC", Offset = "0x13BF3FC", VA = "0x13BF3FC")]
		public Vector3 TransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x13BFFD4", Offset = "0x13BFFD4", VA = "0x13BFFD4")]
		public Vector3 InverseTransformPoint(Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x13BF4E8", Offset = "0x13BF4E8", VA = "0x13BF4E8")]
		public Vector3 TransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x13C00C0", Offset = "0x13C00C0", VA = "0x13C00C0")]
		public Vector3 InverseTransformDirection(Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x13C333C", Offset = "0x13C333C", VA = "0x13C333C")]
		public SplineComputer()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public delegate void SplineReachHandler();
	[Token(Token = "0x200020E")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDA60", Offset = "0x7EDA60")]
	public class SplineFollower : SplineTracer
	{
		[Token(Token = "0x20003F0")]
		public enum FollowMode
		{
			[Token(Token = "0x400171F")]
			Uniform,
			[Token(Token = "0x4001720")]
			Time
		}

		[Token(Token = "0x20003F1")]
		public enum Wrap
		{
			[Token(Token = "0x4001722")]
			Default,
			[Token(Token = "0x4001723")]
			Loop,
			[Token(Token = "0x4001724")]
			PingPong
		}

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public Wrap wrapMode;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		public FollowMode followMode;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		public bool autoStartPosition;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		[HideInInspector]
		public bool autoFollow;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private float _followSpeed;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		[HideInInspector]
		private float _followDuration;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private double lastClippedPercent;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private SplineResult from;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private SplineResult to;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool followStarted;

		[Token(Token = "0x1700018D")]
		public float followSpeed
		{
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0x13C42B0", Offset = "0x13C42B0", VA = "0x13C42B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0x13C42B8", Offset = "0x13C42B8", VA = "0x13C42B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public float followDuration
		{
			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0x13C42D4", Offset = "0x13C42D4", VA = "0x13C42D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0x13C42DC", Offset = "0x13C42DC", VA = "0x13C42DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x800604", Offset = "0x800604")]
		public SplineResult followResult
		{
			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0x13C42F8", Offset = "0x13C42F8", VA = "0x13C42F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x80063C", Offset = "0x80063C")]
		public SplineResult offsettedFollowResult
		{
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0x13C4300", Offset = "0x13C4300", VA = "0x13C4300")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000024")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0x13C4308", Offset = "0x13C4308", VA = "0x13C4308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBBCC", Offset = "0x7FBBCC")]
			add
			{
			}
			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0x13C43B0", Offset = "0x13C43B0", VA = "0x13C43B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBBDC", Offset = "0x7FBBDC")]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0x13C4458", Offset = "0x13C4458", VA = "0x13C4458")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBBEC", Offset = "0x7FBBEC")]
			add
			{
			}
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0x13C4500", Offset = "0x13C4500", VA = "0x13C4500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBBFC", Offset = "0x7FBBFC")]
			remove
			{
			}
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x13C45A8", Offset = "0x13C45A8", VA = "0x13C45A8", Slot = "29")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x13C4644", Offset = "0x13C4644", VA = "0x13C4644", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x13C4778", Offset = "0x13C4778", VA = "0x13C4778", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x13C4680", Offset = "0x13C4680", VA = "0x13C4680")]
		private void AutoFollow()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x13C5698", Offset = "0x13C5698", VA = "0x13C5698")]
		public void Restart(double startPosition = 0.0)
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x13C56E4", Offset = "0x13C56E4", VA = "0x13C56E4", Slot = "30")]
		public override void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x13C574C", Offset = "0x13C574C", VA = "0x13C574C", Slot = "31")]
		public override void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x13C52EC", Offset = "0x13C52EC", VA = "0x13C52EC")]
		public void Move(double percent)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x13C4804", Offset = "0x13C4804", VA = "0x13C4804")]
		public void Move(float distance)
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x13C57D8", Offset = "0x13C57D8", VA = "0x13C57D8")]
		public SplineFollower()
		{
		}
	}
	[Token(Token = "0x200020F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDA98", Offset = "0x7EDA98")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDA98", Offset = "0x7EDA98")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDA98", Offset = "0x7EDA98")]
	public class SplineMesh : MeshGenerator
	{
		[Serializable]
		[Token(Token = "0x20003F2")]
		public class Channel
		{
			[Token(Token = "0x2000479")]
			public delegate float FloatHandler(double percent);

			[Token(Token = "0x200047A")]
			public delegate Vector2 Vector2Handler(double percent);

			[Token(Token = "0x200047B")]
			public delegate Vector3 Vector3Handler(double percent);

			[Token(Token = "0x200047C")]
			public delegate Quaternion QuaternionHandler(double percent);

			[Token(Token = "0x200047D")]
			public enum Type
			{
				[Token(Token = "0x4001905")]
				Extrude,
				[Token(Token = "0x4001906")]
				Place
			}

			[Token(Token = "0x200047E")]
			public enum UVOverride
			{
				[Token(Token = "0x4001908")]
				None,
				[Token(Token = "0x4001909")]
				ClampU,
				[Token(Token = "0x400190A")]
				ClampV,
				[Token(Token = "0x400190B")]
				UniformU,
				[Token(Token = "0x400190C")]
				UniformV
			}

			[Serializable]
			[Token(Token = "0x200047F")]
			public class MeshDefinition
			{
				[Token(Token = "0x2000482")]
				public enum MirrorMethod
				{
					[Token(Token = "0x4001930")]
					None,
					[Token(Token = "0x4001931")]
					X,
					[Token(Token = "0x4001932")]
					Y,
					[Token(Token = "0x4001933")]
					Z
				}

				[Serializable]
				[Token(Token = "0x2000483")]
				public class Submesh
				{
					[Token(Token = "0x4001934")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public int[] triangles;

					[Token(Token = "0x6001CF2")]
					[Address(RVA = "0x13CD3D4", Offset = "0x13CD3D4", VA = "0x13CD3D4")]
					public Submesh()
					{
					}

					[Token(Token = "0x6001CF3")]
					[Address(RVA = "0x13CB994", Offset = "0x13CB994", VA = "0x13CB994")]
					public Submesh(int[] input)
					{
					}
				}

				[Serializable]
				[Token(Token = "0x2000484")]
				public class VertexGroup
				{
					[Token(Token = "0x4001935")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public float value;

					[Token(Token = "0x4001936")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
					public double percent;

					[Token(Token = "0x4001937")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
					public int[] ids;

					[Token(Token = "0x6001CF4")]
					[Address(RVA = "0x13CD2D4", Offset = "0x13CD2D4", VA = "0x13CD2D4")]
					public VertexGroup(float val, double perc, int[] vertIds)
					{
					}

					[Token(Token = "0x6001CF5")]
					[Address(RVA = "0x13CD318", Offset = "0x13CD318", VA = "0x13CD318")]
					public void AddId(int id)
					{
					}
				}

				[Token(Token = "0x400190D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] vertices;

				[Token(Token = "0x400190E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[SerializeField]
				[HideInInspector]
				internal Vector3[] normals;

				[Token(Token = "0x400190F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				[SerializeField]
				[HideInInspector]
				internal Vector4[] tangents;

				[Token(Token = "0x4001910")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				[SerializeField]
				[HideInInspector]
				internal Color[] colors;

				[Token(Token = "0x4001911")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv;

				[Token(Token = "0x4001912")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv2;

				[Token(Token = "0x4001913")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv3;

				[Token(Token = "0x4001914")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
				[SerializeField]
				[HideInInspector]
				internal Vector2[] uv4;

				[Token(Token = "0x4001915")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
				[SerializeField]
				[HideInInspector]
				internal int[] triangles;

				[Token(Token = "0x4001916")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
				[SerializeField]
				[HideInInspector]
				internal List<Submesh> subMeshes;

				[Token(Token = "0x4001917")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
				[SerializeField]
				[HideInInspector]
				internal TS_Bounds bounds;

				[Token(Token = "0x4001918")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
				[SerializeField]
				[HideInInspector]
				internal List<VertexGroup> vertexGroups;

				[Token(Token = "0x4001919")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
				[SerializeField]
				[HideInInspector]
				private Mesh _mesh;

				[Token(Token = "0x400191A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _rotation;

				[Token(Token = "0x400191B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _offset;

				[Token(Token = "0x400191C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
				[SerializeField]
				[HideInInspector]
				private Vector3 _scale;

				[Token(Token = "0x400191D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _uvScale;

				[Token(Token = "0x400191E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
				[SerializeField]
				[HideInInspector]
				private Vector2 _uvOffset;

				[Token(Token = "0x400191F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
				[SerializeField]
				[HideInInspector]
				private float _uvRotation;

				[Token(Token = "0x4001920")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
				[SerializeField]
				[HideInInspector]
				private MirrorMethod _mirror;

				[Token(Token = "0x4001921")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
				[SerializeField]
				[HideInInspector]
				private bool _flipFaces;

				[Token(Token = "0x4001922")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
				[SerializeField]
				[HideInInspector]
				private bool _doubleSided;

				[Token(Token = "0x17000374")]
				public Mesh mesh
				{
					[Token(Token = "0x6001CCE")]
					[Address(RVA = "0x13CB464", Offset = "0x13CB464", VA = "0x13CB464")]
					get
					{
						return null;
					}
					[Token(Token = "0x6001CCF")]
					[Address(RVA = "0x13CB46C", Offset = "0x13CB46C", VA = "0x13CB46C")]
					set
					{
					}
				}

				[Token(Token = "0x17000375")]
				public Vector3 rotation
				{
					[Token(Token = "0x6001CD0")]
					[Address(RVA = "0x13CB508", Offset = "0x13CB508", VA = "0x13CB508")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6001CD1")]
					[Address(RVA = "0x13CB514", Offset = "0x13CB514", VA = "0x13CB514")]
					set
					{
					}
				}

				[Token(Token = "0x17000376")]
				public Vector2 offset
				{
					[Token(Token = "0x6001CD2")]
					[Address(RVA = "0x13CB5E8", Offset = "0x13CB5E8", VA = "0x13CB5E8")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001CD3")]
					[Address(RVA = "0x13CB5F0", Offset = "0x13CB5F0", VA = "0x13CB5F0")]
					set
					{
					}
				}

				[Token(Token = "0x17000377")]
				public Vector3 scale
				{
					[Token(Token = "0x6001CD4")]
					[Address(RVA = "0x13CB6A4", Offset = "0x13CB6A4", VA = "0x13CB6A4")]
					get
					{
						return default(Vector3);
					}
					[Token(Token = "0x6001CD5")]
					[Address(RVA = "0x13CB6B0", Offset = "0x13CB6B0", VA = "0x13CB6B0")]
					set
					{
					}
				}

				[Token(Token = "0x17000378")]
				public Vector2 uvScale
				{
					[Token(Token = "0x6001CD6")]
					[Address(RVA = "0x13CB784", Offset = "0x13CB784", VA = "0x13CB784")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001CD7")]
					[Address(RVA = "0x13CB78C", Offset = "0x13CB78C", VA = "0x13CB78C")]
					set
					{
					}
				}

				[Token(Token = "0x17000379")]
				public Vector2 uvOffset
				{
					[Token(Token = "0x6001CD8")]
					[Address(RVA = "0x13CB840", Offset = "0x13CB840", VA = "0x13CB840")]
					get
					{
						return default(Vector2);
					}
					[Token(Token = "0x6001CD9")]
					[Address(RVA = "0x13CB848", Offset = "0x13CB848", VA = "0x13CB848")]
					set
					{
					}
				}

				[Token(Token = "0x1700037A")]
				public float uvRotation
				{
					[Token(Token = "0x6001CDA")]
					[Address(RVA = "0x13CB8FC", Offset = "0x13CB8FC", VA = "0x13CB8FC")]
					get
					{
						return default(float);
					}
					[Token(Token = "0x6001CDB")]
					[Address(RVA = "0x13CB904", Offset = "0x13CB904", VA = "0x13CB904")]
					set
					{
					}
				}

				[Token(Token = "0x1700037B")]
				public MirrorMethod mirror
				{
					[Token(Token = "0x6001CDC")]
					[Address(RVA = "0x13CB91C", Offset = "0x13CB91C", VA = "0x13CB91C")]
					get
					{
						return default(MirrorMethod);
					}
					[Token(Token = "0x6001CDD")]
					[Address(RVA = "0x13CB924", Offset = "0x13CB924", VA = "0x13CB924")]
					set
					{
					}
				}

				[Token(Token = "0x1700037C")]
				public bool flipFaces
				{
					[Token(Token = "0x6001CDE")]
					[Address(RVA = "0x13CB93C", Offset = "0x13CB93C", VA = "0x13CB93C")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6001CDF")]
					[Address(RVA = "0x13CB944", Offset = "0x13CB944", VA = "0x13CB944")]
					set
					{
					}
				}

				[Token(Token = "0x1700037D")]
				public bool doubleSided
				{
					[Token(Token = "0x6001CE0")]
					[Address(RVA = "0x13CB968", Offset = "0x13CB968", VA = "0x13CB968")]
					get
					{
						return default(bool);
					}
					[Token(Token = "0x6001CE1")]
					[Address(RVA = "0x13CB970", Offset = "0x13CB970", VA = "0x13CB970")]
					set
					{
					}
				}

				[Token(Token = "0x6001CE2")]
				[Address(RVA = "0x13C99BC", Offset = "0x13C99BC", VA = "0x13C99BC")]
				internal MeshDefinition Copy()
				{
					return null;
				}

				[Token(Token = "0x6001CE3")]
				[Address(RVA = "0x13C9574", Offset = "0x13C9574", VA = "0x13C9574")]
				public MeshDefinition(Mesh input)
				{
				}

				[Token(Token = "0x6001CE4")]
				[Address(RVA = "0x13CABCC", Offset = "0x13CABCC", VA = "0x13CABCC")]
				public void Refresh()
				{
				}

				[Token(Token = "0x6001CE5")]
				[Address(RVA = "0x13CC014", Offset = "0x13CC014", VA = "0x13CC014")]
				private void FlipFaces()
				{
				}

				[Token(Token = "0x6001CE6")]
				[Address(RVA = "0x13CBE10", Offset = "0x13CBE10", VA = "0x13CBE10")]
				private void DoubleSided()
				{
				}

				[Token(Token = "0x6001CE7")]
				[Address(RVA = "0x13C7934", Offset = "0x13C7934", VA = "0x13C7934")]
				public void Write(TS_Mesh target, int forceMaterialId = -1)
				{
				}

				[Token(Token = "0x6001CE8")]
				[Address(RVA = "0x13CC5F0", Offset = "0x13CC5F0", VA = "0x13CC5F0")]
				private void CalculateBounds()
				{
				}

				[Token(Token = "0x6001CE9")]
				[Address(RVA = "0x13CBA2C", Offset = "0x13CBA2C", VA = "0x13CBA2C")]
				private void Mirror()
				{
				}

				[Token(Token = "0x6001CEA")]
				[Address(RVA = "0x13CC12C", Offset = "0x13CC12C", VA = "0x13CC12C")]
				private void TransformVertices()
				{
				}

				[Token(Token = "0x6001CEB")]
				[Address(RVA = "0x13CC74C", Offset = "0x13CC74C", VA = "0x13CC74C")]
				private void GroupVertices()
				{
				}

				[Token(Token = "0x6001CEC")]
				[Address(RVA = "0x13CD1B8", Offset = "0x13CD1B8", VA = "0x13CD1B8")]
				private int FindInsertIndex(Vector3 pos, float value)
				{
					return default(int);
				}

				[Token(Token = "0x6001CED")]
				[Address(RVA = "0x13CCAA4", Offset = "0x13CCAA4", VA = "0x13CCAA4")]
				private void CalculateTangents()
				{
				}
			}

			[Token(Token = "0x4001725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x4001726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private System.Random iterationRandom;

			[Token(Token = "0x4001727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[HideInInspector]
			private int _iterationSeed;

			[Token(Token = "0x4001728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[HideInInspector]
			private int _offsetSeed;

			[Token(Token = "0x4001729")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private System.Random offsetRandom;

			[Token(Token = "0x400172A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector2Handler _offsetHandler;

			[Token(Token = "0x400172B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			[HideInInspector]
			private int _rotationSeed;

			[Token(Token = "0x400172C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private System.Random rotationRandom;

			[Token(Token = "0x400172D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private QuaternionHandler _placeRotationHandler;

			[Token(Token = "0x400172E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private FloatHandler _extrudeRotationHandler;

			[Token(Token = "0x400172F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[SerializeField]
			[HideInInspector]
			private int _scaleSeed;

			[Token(Token = "0x4001730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private System.Random scaleRandom;

			[Token(Token = "0x4001731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3Handler _scaleHandler;

			[Token(Token = "0x4001732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[SerializeField]
			internal SplineMesh owner;

			[Token(Token = "0x4001733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[SerializeField]
			[HideInInspector]
			private List<MeshDefinition> meshes;

			[Token(Token = "0x4001734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[SerializeField]
			[HideInInspector]
			private double _clipFrom;

			[Token(Token = "0x4001735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[SerializeField]
			[HideInInspector]
			private double _clipTo;

			[Token(Token = "0x4001736")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[SerializeField]
			[HideInInspector]
			private bool _randomOrder;

			[Token(Token = "0x4001737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[SerializeField]
			[HideInInspector]
			private UVOverride _overrideUVs;

			[Token(Token = "0x4001738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _uvScale;

			[Token(Token = "0x4001739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _uvOffset;

			[Token(Token = "0x400173A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[SerializeField]
			[HideInInspector]
			private bool _overrideNormal;

			[Token(Token = "0x400173B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _customNormal;

			[Token(Token = "0x400173C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[SerializeField]
			[HideInInspector]
			private Type _type;

			[Token(Token = "0x400173D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[SerializeField]
			[HideInInspector]
			private int _count;

			[Token(Token = "0x400173E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[SerializeField]
			[HideInInspector]
			private double _spacing;

			[Token(Token = "0x400173F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[SerializeField]
			[HideInInspector]
			private bool _randomRotation;

			[Token(Token = "0x4001740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _minRotation;

			[Token(Token = "0x4001741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _maxRotation;

			[Token(Token = "0x4001742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[SerializeField]
			[HideInInspector]
			private bool _randomOffset;

			[Token(Token = "0x4001743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _minOffset;

			[Token(Token = "0x4001744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[SerializeField]
			[HideInInspector]
			private Vector2 _maxOffset;

			[Token(Token = "0x4001745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[SerializeField]
			[HideInInspector]
			private bool _randomScale;

			[Token(Token = "0x4001746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
			[SerializeField]
			[HideInInspector]
			private bool _uniformRandomScale;

			[Token(Token = "0x4001747")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _minScale;

			[Token(Token = "0x4001748")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[SerializeField]
			[HideInInspector]
			private Vector3 _maxScale;

			[Token(Token = "0x4001749")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private int iterator;

			[Token(Token = "0x400174A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[SerializeField]
			[HideInInspector]
			private bool _overrideMaterialID;

			[Token(Token = "0x400174B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[SerializeField]
			[HideInInspector]
			private int _targetMaterialID;

			[Token(Token = "0x170002C2")]
			public double clipFrom
			{
				[Token(Token = "0x6001A7F")]
				[Address(RVA = "0x13C8898", Offset = "0x13C8898", VA = "0x13C8898")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001A80")]
				[Address(RVA = "0x13C88A0", Offset = "0x13C88A0", VA = "0x13C88A0")]
				set
				{
				}
			}

			[Token(Token = "0x170002C3")]
			public double clipTo
			{
				[Token(Token = "0x6001A81")]
				[Address(RVA = "0x13C8954", Offset = "0x13C8954", VA = "0x13C8954")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001A82")]
				[Address(RVA = "0x13C895C", Offset = "0x13C895C", VA = "0x13C895C")]
				set
				{
				}
			}

			[Token(Token = "0x170002C4")]
			public bool randomOffset
			{
				[Token(Token = "0x6001A83")]
				[Address(RVA = "0x13C8974", Offset = "0x13C8974", VA = "0x13C8974")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A84")]
				[Address(RVA = "0x13C897C", Offset = "0x13C897C", VA = "0x13C897C")]
				set
				{
				}
			}

			[Token(Token = "0x170002C5")]
			public Vector2Handler offsetHandler
			{
				[Token(Token = "0x6001A85")]
				[Address(RVA = "0x13C89A0", Offset = "0x13C89A0", VA = "0x13C89A0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001A86")]
				[Address(RVA = "0x13C89A8", Offset = "0x13C89A8", VA = "0x13C89A8")]
				set
				{
				}
			}

			[Token(Token = "0x170002C6")]
			public bool overrideMaterialID
			{
				[Token(Token = "0x6001A87")]
				[Address(RVA = "0x13C89F4", Offset = "0x13C89F4", VA = "0x13C89F4")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A88")]
				[Address(RVA = "0x13C89FC", Offset = "0x13C89FC", VA = "0x13C89FC")]
				set
				{
				}
			}

			[Token(Token = "0x170002C7")]
			public int targetMaterialID
			{
				[Token(Token = "0x6001A89")]
				[Address(RVA = "0x13C8A20", Offset = "0x13C8A20", VA = "0x13C8A20")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001A8A")]
				[Address(RVA = "0x13C8A28", Offset = "0x13C8A28", VA = "0x13C8A28")]
				set
				{
				}
			}

			[Token(Token = "0x170002C8")]
			public bool randomRotation
			{
				[Token(Token = "0x6001A8B")]
				[Address(RVA = "0x13C8A40", Offset = "0x13C8A40", VA = "0x13C8A40")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A8C")]
				[Address(RVA = "0x13C8A48", Offset = "0x13C8A48", VA = "0x13C8A48")]
				set
				{
				}
			}

			[Token(Token = "0x170002C9")]
			public QuaternionHandler placeRotationHandler
			{
				[Token(Token = "0x6001A8D")]
				[Address(RVA = "0x13C8A6C", Offset = "0x13C8A6C", VA = "0x13C8A6C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001A8E")]
				[Address(RVA = "0x13C8A74", Offset = "0x13C8A74", VA = "0x13C8A74")]
				set
				{
				}
			}

			[Token(Token = "0x170002CA")]
			public FloatHandler extrudeRotationHandler
			{
				[Token(Token = "0x6001A8F")]
				[Address(RVA = "0x13C8AC0", Offset = "0x13C8AC0", VA = "0x13C8AC0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001A90")]
				[Address(RVA = "0x13C8AC8", Offset = "0x13C8AC8", VA = "0x13C8AC8")]
				set
				{
				}
			}

			[Token(Token = "0x170002CB")]
			public bool randomScale
			{
				[Token(Token = "0x6001A91")]
				[Address(RVA = "0x13C8B14", Offset = "0x13C8B14", VA = "0x13C8B14")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A92")]
				[Address(RVA = "0x13C8B1C", Offset = "0x13C8B1C", VA = "0x13C8B1C")]
				set
				{
				}
			}

			[Token(Token = "0x170002CC")]
			public Vector3Handler scaleHandler
			{
				[Token(Token = "0x6001A93")]
				[Address(RVA = "0x13C8B40", Offset = "0x13C8B40", VA = "0x13C8B40")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001A94")]
				[Address(RVA = "0x13C8B48", Offset = "0x13C8B48", VA = "0x13C8B48")]
				set
				{
				}
			}

			[Token(Token = "0x170002CD")]
			public bool uniformRandomScale
			{
				[Token(Token = "0x6001A95")]
				[Address(RVA = "0x13C8B94", Offset = "0x13C8B94", VA = "0x13C8B94")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001A96")]
				[Address(RVA = "0x13C8B9C", Offset = "0x13C8B9C", VA = "0x13C8B9C")]
				set
				{
				}
			}

			[Token(Token = "0x170002CE")]
			public int offsetSeed
			{
				[Token(Token = "0x6001A97")]
				[Address(RVA = "0x13C8BC0", Offset = "0x13C8BC0", VA = "0x13C8BC0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001A98")]
				[Address(RVA = "0x13C8BC8", Offset = "0x13C8BC8", VA = "0x13C8BC8")]
				set
				{
				}
			}

			[Token(Token = "0x170002CF")]
			public int rotationSeed
			{
				[Token(Token = "0x6001A99")]
				[Address(RVA = "0x13C8BE0", Offset = "0x13C8BE0", VA = "0x13C8BE0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001A9A")]
				[Address(RVA = "0x13C8BE8", Offset = "0x13C8BE8", VA = "0x13C8BE8")]
				set
				{
				}
			}

			[Token(Token = "0x170002D0")]
			public int scaleSeed
			{
				[Token(Token = "0x6001A9B")]
				[Address(RVA = "0x13C8C00", Offset = "0x13C8C00", VA = "0x13C8C00")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001A9C")]
				[Address(RVA = "0x13C8C08", Offset = "0x13C8C08", VA = "0x13C8C08")]
				set
				{
				}
			}

			[Token(Token = "0x170002D1")]
			public double spacing
			{
				[Token(Token = "0x6001A9D")]
				[Address(RVA = "0x13C8C20", Offset = "0x13C8C20", VA = "0x13C8C20")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001A9E")]
				[Address(RVA = "0x13C8C28", Offset = "0x13C8C28", VA = "0x13C8C28")]
				set
				{
				}
			}

			[Token(Token = "0x170002D2")]
			public Vector2 minOffset
			{
				[Token(Token = "0x6001A9F")]
				[Address(RVA = "0x13C8C40", Offset = "0x13C8C40", VA = "0x13C8C40")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001AA0")]
				[Address(RVA = "0x13C8C48", Offset = "0x13C8C48", VA = "0x13C8C48")]
				set
				{
				}
			}

			[Token(Token = "0x170002D3")]
			public Vector2 maxOffset
			{
				[Token(Token = "0x6001AA1")]
				[Address(RVA = "0x13C8CFC", Offset = "0x13C8CFC", VA = "0x13C8CFC")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001AA2")]
				[Address(RVA = "0x13C8D04", Offset = "0x13C8D04", VA = "0x13C8D04")]
				set
				{
				}
			}

			[Token(Token = "0x170002D4")]
			public Vector3 minRotation
			{
				[Token(Token = "0x6001AA3")]
				[Address(RVA = "0x13C8DB8", Offset = "0x13C8DB8", VA = "0x13C8DB8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001AA4")]
				[Address(RVA = "0x13C8DC4", Offset = "0x13C8DC4", VA = "0x13C8DC4")]
				set
				{
				}
			}

			[Token(Token = "0x170002D5")]
			public Vector3 maxRotation
			{
				[Token(Token = "0x6001AA5")]
				[Address(RVA = "0x13C8E98", Offset = "0x13C8E98", VA = "0x13C8E98")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001AA6")]
				[Address(RVA = "0x13C8EA4", Offset = "0x13C8EA4", VA = "0x13C8EA4")]
				set
				{
				}
			}

			[Token(Token = "0x170002D6")]
			public Vector3 minScale
			{
				[Token(Token = "0x6001AA7")]
				[Address(RVA = "0x13C8F78", Offset = "0x13C8F78", VA = "0x13C8F78")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001AA8")]
				[Address(RVA = "0x13C8F84", Offset = "0x13C8F84", VA = "0x13C8F84")]
				set
				{
				}
			}

			[Token(Token = "0x170002D7")]
			public Vector3 maxScale
			{
				[Token(Token = "0x6001AA9")]
				[Address(RVA = "0x13C9058", Offset = "0x13C9058", VA = "0x13C9058")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001AAA")]
				[Address(RVA = "0x13C9068", Offset = "0x13C9068", VA = "0x13C9068")]
				set
				{
				}
			}

			[Token(Token = "0x170002D8")]
			public Type type
			{
				[Token(Token = "0x6001AAB")]
				[Address(RVA = "0x13C9144", Offset = "0x13C9144", VA = "0x13C9144")]
				get
				{
					return default(Type);
				}
				[Token(Token = "0x6001AAC")]
				[Address(RVA = "0x13C914C", Offset = "0x13C914C", VA = "0x13C914C")]
				set
				{
				}
			}

			[Token(Token = "0x170002D9")]
			public bool randomOrder
			{
				[Token(Token = "0x6001AAD")]
				[Address(RVA = "0x13C9164", Offset = "0x13C9164", VA = "0x13C9164")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001AAE")]
				[Address(RVA = "0x13C916C", Offset = "0x13C916C", VA = "0x13C916C")]
				set
				{
				}
			}

			[Token(Token = "0x170002DA")]
			public int randomSeed
			{
				[Token(Token = "0x6001AAF")]
				[Address(RVA = "0x13C9190", Offset = "0x13C9190", VA = "0x13C9190")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001AB0")]
				[Address(RVA = "0x13C9198", Offset = "0x13C9198", VA = "0x13C9198")]
				set
				{
				}
			}

			[Token(Token = "0x170002DB")]
			public int count
			{
				[Token(Token = "0x6001AB1")]
				[Address(RVA = "0x13C91B8", Offset = "0x13C91B8", VA = "0x13C91B8")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001AB2")]
				[Address(RVA = "0x13C91C0", Offset = "0x13C91C0", VA = "0x13C91C0")]
				set
				{
				}
			}

			[Token(Token = "0x170002DC")]
			public UVOverride overrideUVs
			{
				[Token(Token = "0x6001AB3")]
				[Address(RVA = "0x13C91E0", Offset = "0x13C91E0", VA = "0x13C91E0")]
				get
				{
					return default(UVOverride);
				}
				[Token(Token = "0x6001AB4")]
				[Address(RVA = "0x13C91E8", Offset = "0x13C91E8", VA = "0x13C91E8")]
				set
				{
				}
			}

			[Token(Token = "0x170002DD")]
			public Vector2 uvOffset
			{
				[Token(Token = "0x6001AB5")]
				[Address(RVA = "0x13C9200", Offset = "0x13C9200", VA = "0x13C9200")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001AB6")]
				[Address(RVA = "0x13C9208", Offset = "0x13C9208", VA = "0x13C9208")]
				set
				{
				}
			}

			[Token(Token = "0x170002DE")]
			public Vector2 uvScale
			{
				[Token(Token = "0x6001AB7")]
				[Address(RVA = "0x13C92BC", Offset = "0x13C92BC", VA = "0x13C92BC")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001AB8")]
				[Address(RVA = "0x13C92C4", Offset = "0x13C92C4", VA = "0x13C92C4")]
				set
				{
				}
			}

			[Token(Token = "0x170002DF")]
			public bool overrideNormal
			{
				[Token(Token = "0x6001AB9")]
				[Address(RVA = "0x13C9378", Offset = "0x13C9378", VA = "0x13C9378")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001ABA")]
				[Address(RVA = "0x13C9380", Offset = "0x13C9380", VA = "0x13C9380")]
				set
				{
				}
			}

			[Token(Token = "0x170002E0")]
			public Vector3 customNormal
			{
				[Token(Token = "0x6001ABB")]
				[Address(RVA = "0x13C93A4", Offset = "0x13C93A4", VA = "0x13C93A4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001ABC")]
				[Address(RVA = "0x13C93B0", Offset = "0x13C93B0", VA = "0x13C93B0")]
				set
				{
				}
			}

			[Token(Token = "0x6001ABD")]
			[Address(RVA = "0x13C5DD4", Offset = "0x13C5DD4", VA = "0x13C5DD4")]
			public Channel(string n, SplineMesh parent)
			{
			}

			[Token(Token = "0x6001ABE")]
			[Address(RVA = "0x13C5C0C", Offset = "0x13C5C0C", VA = "0x13C5C0C")]
			public Channel(string n, Mesh inputMesh, SplineMesh parent)
			{
			}

			[Token(Token = "0x6001ABF")]
			[Address(RVA = "0x13C9484", Offset = "0x13C9484", VA = "0x13C9484")]
			private void Init()
			{
			}

			[Token(Token = "0x6001AC0")]
			[Address(RVA = "0x13C97D8", Offset = "0x13C97D8", VA = "0x13C97D8")]
			public void CopyTo(Channel target)
			{
			}

			[Token(Token = "0x6001AC1")]
			[Address(RVA = "0x13C67D0", Offset = "0x13C67D0", VA = "0x13C67D0")]
			public int GetMeshCount()
			{
				return default(int);
			}

			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0x13C9E10", Offset = "0x13C9E10", VA = "0x13C9E10")]
			public void SwapMeshes(int a, int b)
			{
			}

			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0x13C9F30", Offset = "0x13C9F30", VA = "0x13C9F30")]
			public void DuplicateMesh(int index)
			{
			}

			[Token(Token = "0x6001AC4")]
			[Address(RVA = "0x13C9FE4", Offset = "0x13C9FE4", VA = "0x13C9FE4")]
			public MeshDefinition GetMesh(int index)
			{
				return null;
			}

			[Token(Token = "0x6001AC5")]
			[Address(RVA = "0x13CA05C", Offset = "0x13CA05C", VA = "0x13CA05C")]
			public void AddMesh(Mesh input)
			{
			}

			[Token(Token = "0x6001AC6")]
			[Address(RVA = "0x13CA0EC", Offset = "0x13CA0EC", VA = "0x13CA0EC")]
			public void RemoveMesh(int index)
			{
			}

			[Token(Token = "0x6001AC7")]
			[Address(RVA = "0x13C6820", Offset = "0x13C6820", VA = "0x13C6820")]
			public void ResetIteration()
			{
			}

			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0x13C8000", Offset = "0x13C8000", VA = "0x13C8000")]
			public Vector2 NextOffset(double percent)
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001AC9")]
			[Address(RVA = "0x13C8130", Offset = "0x13C8130", VA = "0x13C8130")]
			public Quaternion NextPlaceRotation(double percent)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001ACA")]
			[Address(RVA = "0x13C86D8", Offset = "0x13C86D8", VA = "0x13C86D8")]
			public float NextExtrudeRotation(double percent)
			{
				return default(float);
			}

			[Token(Token = "0x6001ACB")]
			[Address(RVA = "0x13C84E8", Offset = "0x13C84E8", VA = "0x13C84E8")]
			public Vector3 NextExtrudeScale(double percent)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0x13C82EC", Offset = "0x13C82EC", VA = "0x13C82EC")]
			public Vector3 NextPlaceScale()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001ACD")]
			[Address(RVA = "0x13C7864", Offset = "0x13C7864", VA = "0x13C7864")]
			public MeshDefinition NextMesh()
			{
				return null;
			}

			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0x13C88B8", Offset = "0x13C88B8", VA = "0x13C88B8")]
			internal void Rebuild()
			{
			}

			[Token(Token = "0x6001ACF")]
			[Address(RVA = "0x13CAB34", Offset = "0x13CAB34", VA = "0x13CAB34")]
			private void Refresh()
			{
			}
		}

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private List<Channel> channels;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private SplineResult lastResult;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool useLastResult;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private List<TS_Mesh> combineMeshes;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int meshCount;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Matrix4x4 vertexMatrix;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private Matrix4x4 normalMatrix;

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x13C5878", Offset = "0x13C5878", VA = "0x13C5878", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x13C58E0", Offset = "0x13C58E0", VA = "0x13C58E0", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x13C59CC", Offset = "0x13C59CC", VA = "0x13C59CC")]
		public void RemoveChannel(int index)
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x13C5A48", Offset = "0x13C5A48", VA = "0x13C5A48")]
		public void SwapChannels(int a, int b)
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x13C5B74", Offset = "0x13C5B74", VA = "0x13C5B74")]
		public Channel AddChannel(Mesh inputMesh, string name)
		{
			return null;
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x13C593C", Offset = "0x13C593C", VA = "0x13C593C")]
		public Channel AddChannel(string name)
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x13C5F48", Offset = "0x13C5F48", VA = "0x13C5F48")]
		public int GetChannelCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x13C5F98", Offset = "0x13C5F98", VA = "0x13C5F98")]
		public Channel GetChannel(int index)
		{
			return null;
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x13C6010", Offset = "0x13C6010", VA = "0x13C6010", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x13C6060", Offset = "0x13C6060", VA = "0x13C6060")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x13C7218", Offset = "0x13C7218", VA = "0x13C7218")]
		private void Place(Channel channel, TS_Mesh target, double percent)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x13C692C", Offset = "0x13C692C", VA = "0x13C692C")]
		private void Stretch(Channel channel, TS_Mesh target, double from, double to)
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x13C87C0", Offset = "0x13C87C0", VA = "0x13C87C0")]
		public SplineMesh()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDB48", Offset = "0x7EDB48")]
	public class SplinePositioner : SplineTracer
	{
		[Token(Token = "0x20003F3")]
		public enum Mode
		{
			[Token(Token = "0x400174D")]
			Percent,
			[Token(Token = "0x400174E")]
			Distance
		}

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private Transform _applyTransform;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private GameObject _targetObject;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private double _position;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private float animPosition;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private Mode _mode;

		[Token(Token = "0x17000191")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x800674", Offset = "0x800674")]
		public Transform applyTransform
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x13CE4D4", Offset = "0x13CE4D4", VA = "0x13CE4D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0x13CE5DC", Offset = "0x13CE5DC", VA = "0x13CE5DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public GameObject targetObject
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x13CE4F4", Offset = "0x13CE4F4", VA = "0x13CE4F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0x13CE684", Offset = "0x13CE684", VA = "0x13CE684")]
			set
			{
			}
		}

		[Token(Token = "0x17000193")]
		public double position
		{
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0x13CE738", Offset = "0x13CE738", VA = "0x13CE738")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0x13CE740", Offset = "0x13CE740", VA = "0x13CE740")]
			set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public Mode mode
		{
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0x13CE790", Offset = "0x13CE790", VA = "0x13CE790")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x13CE798", Offset = "0x13CE798", VA = "0x13CE798")]
			set
			{
			}
		}

		[Token(Token = "0x17000195")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8006AC", Offset = "0x8006AC")]
		public SplineResult positionResult
		{
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x13CE7BC", Offset = "0x13CE7BC", VA = "0x13CE7BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8006E4", Offset = "0x8006E4")]
		public SplineResult offsettedPositionResult
		{
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x13CE7C4", Offset = "0x13CE7C4", VA = "0x13CE7C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x13CE7CC", Offset = "0x13CE7CC", VA = "0x13CE7CC", Slot = "10")]
		protected override void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x13CE80C", Offset = "0x13CE80C", VA = "0x13CE80C", Slot = "34")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x13CE82C", Offset = "0x13CE82C", VA = "0x13CE82C", Slot = "32")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x13CE888", Offset = "0x13CE888", VA = "0x13CE888", Slot = "33")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x13CE8E4", Offset = "0x13CE8E4", VA = "0x13CE8E4", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x13CE950", Offset = "0x13CE950", VA = "0x13CE950", Slot = "30")]
		public override void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x13CE988", Offset = "0x13CE988", VA = "0x13CE988", Slot = "31")]
		public override void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x13CE9C4", Offset = "0x13CE9C4", VA = "0x13CE9C4")]
		public SplinePositioner()
		{
		}
	}
	[Token(Token = "0x2000211")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDB80", Offset = "0x7EDB80")]
	public class SplineProjector : SplineTracer
	{
		[Token(Token = "0x20003F4")]
		public enum Mode
		{
			[Token(Token = "0x4001750")]
			Accurate,
			[Token(Token = "0x4001751")]
			Cached
		}

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[HideInInspector]
		private Mode _mode;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[HideInInspector]
		private bool _autoProject;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[HideInInspector]
		private int _subdivide;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[HideInInspector]
		private Transform _projectTarget;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private Transform applyTarget;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private GameObject _targetObject;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private TS_Transform finalTarget;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private double traceFromA;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private double traceToA;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private double traceFromB;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		public Vector2 _offset;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		public Vector3 _rotationOffset;

		[Token(Token = "0x17000197")]
		public Mode mode
		{
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x13CE9CC", Offset = "0x13CE9CC", VA = "0x13CE9CC")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0x13CE9D4", Offset = "0x13CE9D4", VA = "0x13CE9D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public bool autoProject
		{
			[Token(Token = "0x6000F02")]
			[Address(RVA = "0x13CE9F8", Offset = "0x13CE9F8", VA = "0x13CE9F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F03")]
			[Address(RVA = "0x13CEA00", Offset = "0x13CEA00", VA = "0x13CEA00")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public int subdivide
		{
			[Token(Token = "0x6000F04")]
			[Address(RVA = "0x13CEA34", Offset = "0x13CEA34", VA = "0x13CEA34")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F05")]
			[Address(RVA = "0x13CEA3C", Offset = "0x13CEA3C", VA = "0x13CEA3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public Transform projectTarget
		{
			[Token(Token = "0x6000F06")]
			[Address(RVA = "0x13CEA68", Offset = "0x13CEA68", VA = "0x13CEA68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0x13CEAF8", Offset = "0x13CEAF8", VA = "0x13CEAF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x80071C", Offset = "0x80071C")]
		public Transform target
		{
			[Token(Token = "0x6000F08")]
			[Address(RVA = "0x13CEBC4", Offset = "0x13CEBC4", VA = "0x13CEBC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F09")]
			[Address(RVA = "0x13CECB4", Offset = "0x13CECB4", VA = "0x13CECB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public GameObject targetObject
		{
			[Token(Token = "0x6000F0A")]
			[Address(RVA = "0x13CEBE4", Offset = "0x13CEBE4", VA = "0x13CEBE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0x13CED5C", Offset = "0x13CED5C", VA = "0x13CED5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x800754", Offset = "0x800754")]
		public SplineResult projectResult
		{
			[Token(Token = "0x6000F0C")]
			[Address(RVA = "0x13CEE10", Offset = "0x13CEE10", VA = "0x13CEE10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000026")]
		public event SplineReachHandler onEndReached
		{
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0x13CEE18", Offset = "0x13CEE18", VA = "0x13CEE18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBC0C", Offset = "0x7FBC0C")]
			add
			{
			}
			[Token(Token = "0x6000F0E")]
			[Address(RVA = "0x13CEEC0", Offset = "0x13CEEC0", VA = "0x13CEEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBC1C", Offset = "0x7FBC1C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event SplineReachHandler onBeginningReached
		{
			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0x13CEF68", Offset = "0x13CEF68", VA = "0x13CEF68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBC2C", Offset = "0x7FBC2C")]
			add
			{
			}
			[Token(Token = "0x6000F10")]
			[Address(RVA = "0x13CF010", Offset = "0x13CF010", VA = "0x13CF010")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBC3C", Offset = "0x7FBC3C")]
			remove
			{
			}
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x13CF0B8", Offset = "0x13CF0B8", VA = "0x13CF0B8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x13CF1AC", Offset = "0x13CF1AC", VA = "0x13CF1AC", Slot = "34")]
		protected override Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x13CF254", Offset = "0x13CF254", VA = "0x13CF254", Slot = "32")]
		protected override Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x13CF300", Offset = "0x13CF300", VA = "0x13CF300", Slot = "33")]
		protected override Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x13CF0E0", Offset = "0x13CF0E0", VA = "0x13CF0E0")]
		private void GetProjectTarget()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x13CF3AC", Offset = "0x13CF3AC", VA = "0x13CF3AC", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x13CF48C", Offset = "0x13CF48C", VA = "0x13CF48C", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x13CF764", Offset = "0x13CF764", VA = "0x13CF764")]
		private void CheckTriggers()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x13CF878", Offset = "0x13CF878", VA = "0x13CF878")]
		public void CalculateProjection()
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x13CF540", Offset = "0x13CF540", VA = "0x13CF540")]
		private void InternalCalculateProjection()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x13CF8B8", Offset = "0x13CF8B8", VA = "0x13CF8B8")]
		public SplineProjector()
		{
		}
	}
	[Token(Token = "0x2000212")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDBB8", Offset = "0x7EDBB8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDBB8", Offset = "0x7EDBB8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDBB8", Offset = "0x7EDBB8")]
	[ExecuteInEditMode]
	public class SplineRenderer : MeshGenerator
	{
		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		public bool autoOrient;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[HideInInspector]
		public int updateFrameInterval;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int currentFrame;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private Vector3 vertexDirection;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private bool orthographic;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		private bool init;

		[Token(Token = "0x1700019E")]
		public int slices
		{
			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0x155609C", Offset = "0x155609C", VA = "0x155609C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F1D")]
			[Address(RVA = "0x15560A4", Offset = "0x15560A4", VA = "0x15560A4")]
			set
			{
			}
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x15560D0", Offset = "0x15560D0", VA = "0x15560D0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x1556138", Offset = "0x1556138", VA = "0x1556138")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x15561DC", Offset = "0x15561DC", VA = "0x15561DC", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x1556200", Offset = "0x1556200", VA = "0x1556200", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x1556BA0", Offset = "0x1556BA0", VA = "0x1556BA0")]
		public void RenderWithCamera(Camera cam)
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x1556D58", Offset = "0x1556D58", VA = "0x1556D58")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x15562D0", Offset = "0x15562D0", VA = "0x15562D0")]
		public void GenerateVertices(Vector3 vertexDirection, bool orthoGraphic)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x1556DD8", Offset = "0x1556DD8", VA = "0x1556DD8")]
		public SplineRenderer()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class SplineTracer : SplineUser
	{
		[Token(Token = "0x20003F5")]
		public enum PhysicsMode
		{
			[Token(Token = "0x4001753")]
			Transform,
			[Token(Token = "0x4001754")]
			Rigidbody,
			[Token(Token = "0x4001755")]
			Rigidbody2D
		}

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Trigger[] triggerInvokeQueue;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int addTriggerIndex;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public bool applyDirectionRotation;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[HideInInspector]
		protected Spline.Direction _direction;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		protected PhysicsMode _physicsMode;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		protected TransformModule _motion;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7F490C", Offset = "0x7F490C")]
		protected SplineTrigger[] triggers_old;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Trigger[] triggers;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		protected CustomRotationModule _customRotations;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		protected CustomOffsetModule _customOffsets;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		protected Rigidbody targetRigidbody;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[HideInInspector]
		protected Rigidbody2D targetRigidbody2D;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[HideInInspector]
		protected Transform targetTransform;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[HideInInspector]
		protected SplineResult _result;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool setPercentOnRebuild;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private double targetPercentOnRebuild;

		[Token(Token = "0x1700019F")]
		public PhysicsMode physicsMode
		{
			[Token(Token = "0x6000F26")]
			[Address(RVA = "0x15579C8", Offset = "0x15579C8", VA = "0x15579C8")]
			get
			{
				return default(PhysicsMode);
			}
			[Token(Token = "0x6000F27")]
			[Address(RVA = "0x15579D0", Offset = "0x15579D0", VA = "0x15579D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public TransformModule motion
		{
			[Token(Token = "0x6000F28")]
			[Address(RVA = "0x1557A5C", Offset = "0x1557A5C", VA = "0x1557A5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		public CustomRotationModule customRotations
		{
			[Token(Token = "0x6000F29")]
			[Address(RVA = "0x1557B68", Offset = "0x1557B68", VA = "0x1557B68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A2")]
		public CustomOffsetModule customOffsets
		{
			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0x1557BD4", Offset = "0x1557BD4", VA = "0x1557BD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A3")]
		public SplineResult result
		{
			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0x1557C40", Offset = "0x1557C40", VA = "0x1557C40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A4")]
		public SplineResult offsettedResult
		{
			[Token(Token = "0x6000F2C")]
			[Address(RVA = "0x1557C48", Offset = "0x1557C48", VA = "0x1557C48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A5")]
		public Spline.Direction direction
		{
			[Token(Token = "0x6000F2D")]
			[Address(RVA = "0x1557FD8", Offset = "0x1557FD8", VA = "0x1557FD8")]
			get
			{
				return default(Spline.Direction);
			}
			[Token(Token = "0x6000F2E")]
			[Address(RVA = "0x1557FE0", Offset = "0x1557FE0", VA = "0x1557FE0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public double clampedPercent
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0x1558308", Offset = "0x1558308", VA = "0x1558308")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170001A7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x80078C", Offset = "0x80078C")]
		public bool applyPosition
		{
			[Token(Token = "0x6000F30")]
			[Address(RVA = "0x1558368", Offset = "0x1558368", VA = "0x1558368")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F31")]
			[Address(RVA = "0x15583D0", Offset = "0x15583D0", VA = "0x15583D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8007C4", Offset = "0x8007C4")]
		public bool applyRotation
		{
			[Token(Token = "0x6000F32")]
			[Address(RVA = "0x155841C", Offset = "0x155841C", VA = "0x155841C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F33")]
			[Address(RVA = "0x1558484", Offset = "0x1558484", VA = "0x1558484")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x8007FC", Offset = "0x8007FC")]
		public bool applyScale
		{
			[Token(Token = "0x6000F34")]
			[Address(RVA = "0x15584D0", Offset = "0x15584D0", VA = "0x15584D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0x1558538", Offset = "0x1558538", VA = "0x1558538")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x800834", Offset = "0x800834")]
		public Vector2 offset
		{
			[Token(Token = "0x6000F36")]
			[Address(RVA = "0x1558584", Offset = "0x1558584", VA = "0x1558584")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x15585A4", Offset = "0x15585A4", VA = "0x15585A4")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x80086C", Offset = "0x80086C")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x6000F38")]
			[Address(RVA = "0x15586D8", Offset = "0x15586D8", VA = "0x15586D8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0x15586FC", Offset = "0x15586FC", VA = "0x15586FC")]
			set
			{
			}
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x1558860", Offset = "0x1558860", VA = "0x1558860", Slot = "29")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x1558864", Offset = "0x1558864", VA = "0x1558864")]
		public Node GetNextNode()
		{
			return null;
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x1558A50", Offset = "0x1558A50", VA = "0x1558A50")]
		public void GetCurrentComputer(out SplineComputer comp, out double percent, out Spline.Direction dir)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x1558A7C", Offset = "0x1558A7C", VA = "0x1558A7C")]
		public void ResetTriggers()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x1558AE0", Offset = "0x1558AE0", VA = "0x1558AE0", Slot = "30")]
		public virtual void SetPercent(double percent, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x1558E10", Offset = "0x1558E10", VA = "0x1558E10", Slot = "31")]
		public virtual void SetDistance(float distance, bool checkTriggers = false)
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x155920C", Offset = "0x155920C", VA = "0x155920C", Slot = "21")]
		protected override void PostBuild()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x155924C", Offset = "0x155924C", VA = "0x155924C", Slot = "13")]
		public override void EnterAddress(Node node, int pointIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x15593C0", Offset = "0x15593C0", VA = "0x15593C0", Slot = "14")]
		public override void AddComputer(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x1559544", Offset = "0x1559544", VA = "0x1559544", Slot = "17")]
		public override void ExitAddress(int depth)
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x1559684", Offset = "0x1559684", VA = "0x1559684", Slot = "32")]
		protected virtual Rigidbody GetRigidbody()
		{
			return null;
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x15596D4", Offset = "0x15596D4", VA = "0x15596D4", Slot = "33")]
		protected virtual Rigidbody2D GetRigidbody2D()
		{
			return null;
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x1559724", Offset = "0x1559724", VA = "0x1559724", Slot = "34")]
		protected virtual Transform GetTransform()
		{
			return null;
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x1557FF8", Offset = "0x1557FF8", VA = "0x1557FF8")]
		protected void ApplyMotion()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x1558CF0", Offset = "0x1558CF0", VA = "0x1558CF0")]
		protected void CheckTriggers(double from, double to)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1559CB4", Offset = "0x1559CB4", VA = "0x1559CB4")]
		protected void CheckTriggersClipped(double from, double to)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1558D9C", Offset = "0x1558D9C", VA = "0x1558D9C")]
		protected void InvokeTriggers()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1559D90", Offset = "0x1559D90", VA = "0x1559D90")]
		private bool MigrateTriggers()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x15579D8", Offset = "0x15579D8", VA = "0x15579D8")]
		protected void RefreshTargets()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x1559BB0", Offset = "0x1559BB0", VA = "0x1559BB0")]
		private void AddTriggerToQueue(Trigger trigger)
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x155A0E8", Offset = "0x155A0E8", VA = "0x155A0E8")]
		private void AddTrigger(Trigger trigger)
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x155A1C8", Offset = "0x155A1C8", VA = "0x155A1C8")]
		public void AddTrigger(UnityAction call, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x155A2E8", Offset = "0x155A2E8", VA = "0x155A2E8")]
		public void AddTrigger(UnityAction<int> call, int value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x155A40C", Offset = "0x155A40C", VA = "0x155A40C")]
		public void AddTrigger(UnityAction<float> call, float value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x155A530", Offset = "0x155A530", VA = "0x155A530")]
		public void AddTrigger(UnityAction<double> call, double value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x155A654", Offset = "0x155A654", VA = "0x155A654")]
		public void AddTrigger(UnityAction<string> call, string value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x155A778", Offset = "0x155A778", VA = "0x155A778")]
		public void AddTrigger(UnityAction<bool> call, bool value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x155A89C", Offset = "0x155A89C", VA = "0x155A89C")]
		public void AddTrigger(UnityAction<GameObject> call, GameObject value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x155A9C0", Offset = "0x155A9C0", VA = "0x155A9C0")]
		public void AddTrigger(UnityAction<Transform> call, Transform value, double position = 0.0, Trigger.Type type = Trigger.Type.Double)
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x15591C0", Offset = "0x15591C0", VA = "0x15591C0")]
		public void EvaluateClipped(SplineResult result, double clippedPercent)
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x155AB0C", Offset = "0x155AB0C", VA = "0x155AB0C")]
		public Vector3 EvaluatePositionClipped(double clippedPercent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x1558EE0", Offset = "0x1558EE0", VA = "0x1558EE0")]
		public double TravelClipped(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x155AB4C", Offset = "0x155AB4C", VA = "0x155AB4C")]
		public SplineResult ProjectClipped(Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x155AB60", Offset = "0x155AB60", VA = "0x155AB60")]
		public SplineTracer()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class SplineUser : MonoBehaviour
	{
		[Token(Token = "0x20003F6")]
		public enum UpdateMethod
		{
			[Token(Token = "0x4001757")]
			Update,
			[Token(Token = "0x4001758")]
			FixedUpdate,
			[Token(Token = "0x4001759")]
			LateUpdate
		}

		[Token(Token = "0x20003F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE71C", Offset = "0x7EE71C")]
		private sealed class <UpdateSubscribersRoutine>d__82 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400175A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400175B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400175C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SplineUser <>4__this;

			[Token(Token = "0x170002E1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AD3")]
				[Address(RVA = "0x15605E8", Offset = "0x15605E8", VA = "0x15605E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AD5")]
				[Address(RVA = "0x1560650", Offset = "0x1560650", VA = "0x1560650", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AD0")]
			[Address(RVA = "0x155CC8C", Offset = "0x155CC8C", VA = "0x155CC8C")]
			[DebuggerHidden]
			public <UpdateSubscribersRoutine>d__82(int <>1__state)
			{
			}

			[Token(Token = "0x6001AD1")]
			[Address(RVA = "0x156058C", Offset = "0x156058C", VA = "0x156058C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AD2")]
			[Address(RVA = "0x1560590", Offset = "0x1560590", VA = "0x1560590", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AD4")]
			[Address(RVA = "0x15605F0", Offset = "0x15605F0", VA = "0x15605F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public SplineAddress _address;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private SplineUser[] subscribers;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public UpdateMethod updateMethod;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private SplineUser _user;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private double _resolution;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private double _clipTo;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private double _clipFrom;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private bool _autoUpdate;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		[HideInInspector]
		private bool _loopSamples;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformSample;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformPreserveClipRange;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[HideInInspector]
		private SplineResult[] _samples;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private SplineResult[] _clippedSamples;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		private float animClipFrom;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[HideInInspector]
		private float animClipTo;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[HideInInspector]
		private double animResolution;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[HideInInspector]
		protected bool sampleUser;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool rebuild;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		private bool sample;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		private bool getClippedSamples;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Transform trs;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public bool multithreaded;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[HideInInspector]
		public bool buildOnAwake;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		[HideInInspector]
		public bool buildOnEnable;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Thread buildThread;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool postThread;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool threadSample;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool threadWork;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		private bool _threadWorking;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private object locker;

		[Token(Token = "0x170001AC")]
		public SplineUser user
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0x155AD94", Offset = "0x155AD94", VA = "0x155AD94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x155AD9C", Offset = "0x155AD9C", VA = "0x155AD9C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public SplineUser rootUser
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0x155B03C", Offset = "0x155B03C", VA = "0x155B03C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AE")]
		public SplineComputer computer
		{
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0x155B154", Offset = "0x155B154", VA = "0x155B154")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x155B174", Offset = "0x155B174", VA = "0x155B174")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public double resolution
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0x155B820", Offset = "0x155B820", VA = "0x155B820")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x155B828", Offset = "0x155B828", VA = "0x155B828")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public double clipFrom
		{
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x155B860", Offset = "0x155B860", VA = "0x155B860")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x155B868", Offset = "0x155B868", VA = "0x155B868")]
			set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public double clipTo
		{
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0x155B904", Offset = "0x155B904", VA = "0x155B904")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000F66")]
			[Address(RVA = "0x155B90C", Offset = "0x155B90C", VA = "0x155B90C")]
			set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public bool autoUpdate
		{
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0x155B9A8", Offset = "0x155B9A8", VA = "0x155B9A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F68")]
			[Address(RVA = "0x155B9B0", Offset = "0x155B9B0", VA = "0x155B9B0")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public bool loopSamples
		{
			[Token(Token = "0x6000F69")]
			[Address(RVA = "0x155B9E4", Offset = "0x155B9E4", VA = "0x155B9E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0x155B9EC", Offset = "0x155B9EC", VA = "0x155B9EC")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public bool uniformSample
		{
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0x155BA20", Offset = "0x155BA20", VA = "0x155BA20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0x155BA28", Offset = "0x155BA28", VA = "0x155BA28")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		public bool uniformPreserveClipRange
		{
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0x155BA58", Offset = "0x155BA58", VA = "0x155BA58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0x155BA60", Offset = "0x155BA60", VA = "0x155BA60")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public double span
		{
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0x155BA90", Offset = "0x155BA90", VA = "0x155BA90")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170001B7")]
		public SplineAddress address
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0x155B7B0", Offset = "0x155B7B0", VA = "0x155B7B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B8")]
		public bool samplesAreLooped
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0x155BAD0", Offset = "0x155BAD0", VA = "0x155BAD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B9")]
		public SplineResult[] samples
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0x1556D34", Offset = "0x1556D34", VA = "0x1556D34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BA")]
		public SplineResult[] clippedSamples
		{
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0x1556B54", Offset = "0x1556B54", VA = "0x1556B54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		protected bool willRebuild
		{
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0x155C6D4", Offset = "0x155C6D4", VA = "0x155C6D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BC")]
		public bool threadWorking
		{
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0x155C6DC", Offset = "0x155C6DC", VA = "0x155C6DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x155C6E4", Offset = "0x155C6E4", VA = "0x155C6E4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x155C900", Offset = "0x155C900", VA = "0x155C900", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x155C904", Offset = "0x155C904", VA = "0x155C904", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x155C9C8", Offset = "0x155C9C8", VA = "0x155C9C8", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x155CA70", Offset = "0x155CA70", VA = "0x155CA70", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x155CAB8", Offset = "0x155CAB8", VA = "0x155CAB8", Slot = "9")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x155CB00", Offset = "0x155CB00", VA = "0x155CB00", Slot = "10")]
		protected virtual void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x155CBA8", Offset = "0x155CBA8", VA = "0x155CBA8", Slot = "11")]
		public virtual void Rebuild(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x155CC1C", Offset = "0x155CC1C", VA = "0x155CC1C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBC4C", Offset = "0x7FBC4C")]
		private IEnumerator UpdateSubscribersRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x155CCB8", Offset = "0x155CCB8", VA = "0x155CCB8", Slot = "12")]
		public virtual void RebuildImmediate(bool sampleComputer)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x155D52C", Offset = "0x155D52C", VA = "0x155D52C")]
		public void GetClippedSamplesImmediate()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x155930C", Offset = "0x155930C", VA = "0x155930C", Slot = "13")]
		public virtual void EnterAddress(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x1559488", Offset = "0x1559488", VA = "0x1559488", Slot = "14")]
		public virtual void AddComputer(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x155D560", Offset = "0x155D560", VA = "0x155D560", Slot = "15")]
		public virtual void CollapseAddress()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x155D5B4", Offset = "0x155D5B4", VA = "0x155D5B4", Slot = "16")]
		public virtual void ClearAddress()
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x15595EC", Offset = "0x15595EC", VA = "0x15595EC", Slot = "17")]
		public virtual void ExitAddress(int depth)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x155D638", Offset = "0x155D638", VA = "0x155D638")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x155D88C", Offset = "0x155D88C", VA = "0x155D88C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x155D8A0", Offset = "0x155D8A0", VA = "0x155D8A0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x155D410", Offset = "0x155D410", VA = "0x155D410")]
		private void UpdateSubscribers()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x155D648", Offset = "0x155D648", VA = "0x155D648")]
		private void RunMain()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x155D9E0", Offset = "0x155D9E0", VA = "0x155D9E0")]
		private void RunThread()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x155DC60", Offset = "0x155DC60", VA = "0x155DC60", Slot = "18")]
		protected virtual void Run()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x155DC64", Offset = "0x155DC64", VA = "0x155DC64", Slot = "19")]
		protected virtual void LateRun()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x155DC68", Offset = "0x155DC68", VA = "0x155DC68", Slot = "20")]
		protected virtual void Build()
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x155DC6C", Offset = "0x155DC6C", VA = "0x155DC6C", Slot = "21")]
		protected virtual void PostBuild()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x155DC70", Offset = "0x155DC70", VA = "0x155DC70")]
		public void SetClipRange(double from, double to)
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x155CDA4", Offset = "0x155CDA4", VA = "0x155CDA4")]
		private void SampleComputer()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x155BB9C", Offset = "0x155BB9C", VA = "0x155BB9C")]
		private void GetClippedSamples()
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x155DD00", Offset = "0x155DD00", VA = "0x155DD00", Slot = "22")]
		public virtual SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x155E2A8", Offset = "0x155E2A8", VA = "0x155E2A8", Slot = "23")]
		public virtual void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x155E828", Offset = "0x155E828", VA = "0x155E828", Slot = "24")]
		public virtual Vector3 EvaluatePosition(double percent, bool overrideUniformClipRange = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x1558340", Offset = "0x1558340", VA = "0x1558340")]
		public double ClipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x155EE34", Offset = "0x155EE34", VA = "0x155EE34")]
		public void ClipPercent(ref double percent)
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x155AAE4", Offset = "0x155AAE4", VA = "0x155AAE4")]
		public double UnclipPercent(double percent)
		{
			return default(double);
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x1558BA8", Offset = "0x1558BA8", VA = "0x1558BA8")]
		public void UnclipPercent(ref double percent)
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x155E268", Offset = "0x155E268", VA = "0x155E268")]
		public int GetSampleIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x155EF80", Offset = "0x155EF80", VA = "0x155EF80")]
		public int GetClippedSampleIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x155EFBC", Offset = "0x155EFBC", VA = "0x155EFBC", Slot = "25")]
		public virtual SplineResult Project(Vector3 point, double from = 0.0, double to = 1.0)
		{
			return null;
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x155F070", Offset = "0x155F070", VA = "0x155F070", Slot = "26")]
		public virtual void Project(SplineResult result, Vector3 point, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x155FFD8", Offset = "0x155FFD8", VA = "0x155FFD8", Slot = "27")]
		public virtual double Travel(double start, float distance, Spline.Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x155B5A8", Offset = "0x155B5A8", VA = "0x155B5A8")]
		private void Subscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x155B3D0", Offset = "0x155B3D0", VA = "0x155B3D0")]
		private void Unsubscribe(SplineUser input)
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x1560340", Offset = "0x1560340", VA = "0x1560340", Slot = "28")]
		public virtual float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x155D8B4", Offset = "0x155D8B4", VA = "0x155D8B4")]
		private void RemoveSubscriber(int index)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x155C828", Offset = "0x155C828", VA = "0x155C828")]
		private bool IsSubscribed(SplineUser user)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x155AC4C", Offset = "0x155AC4C", VA = "0x155AC4C")]
		public SplineUser()
		{
		}
	}
	[Token(Token = "0x2000215")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDC78", Offset = "0x7EDC78")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDC78", Offset = "0x7EDC78")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDC78", Offset = "0x7EDC78")]
	public class SurfaceGenerator : MeshGenerator
	{
		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private float _expand;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private float _extrude;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvScale;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private Vector2 _sideUvOffset;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[HideInInspector]
		private SplineComputer _extrudeComputer;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		[HideInInspector]
		private SplineResult[] extrudeResults;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] identityVertices;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[HideInInspector]
		private Vector3[] identityNormals;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[HideInInspector]
		private Vector2[] projectedVerts;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		[HideInInspector]
		private int[] capTris;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		[HideInInspector]
		private int[] wallTris;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		[HideInInspector]
		private double _extrudeFrom;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		[HideInInspector]
		private double _extrudeTo;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		[HideInInspector]
		private bool _uniformUvs;

		[Token(Token = "0x170001BD")]
		public float expand
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0x1560658", Offset = "0x1560658", VA = "0x1560658")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0x1560660", Offset = "0x1560660", VA = "0x1560660")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public float extrude
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0x1560684", Offset = "0x1560684", VA = "0x1560684")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0x156068C", Offset = "0x156068C", VA = "0x156068C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public double extrudeClipFrom
		{
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0x15606B0", Offset = "0x15606B0", VA = "0x15606B0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0x15606B8", Offset = "0x15606B8", VA = "0x15606B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public double extrudeClipTo
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0x15606DC", Offset = "0x15606DC", VA = "0x15606DC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0x15606E4", Offset = "0x15606E4", VA = "0x15606E4")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public Vector2 sideUvScale
		{
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0x1560708", Offset = "0x1560708", VA = "0x1560708")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x1560714", Offset = "0x1560714", VA = "0x1560714")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public Vector2 sideUvOffset
		{
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0x15607DC", Offset = "0x15607DC", VA = "0x15607DC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0x15607E8", Offset = "0x15607E8", VA = "0x15607E8")]
			set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public SplineComputer extrudeComputer
		{
			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0x15608B0", Offset = "0x15608B0", VA = "0x15608B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0x15608B8", Offset = "0x15608B8", VA = "0x15608B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public bool uniformUvs
		{
			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0x15609E8", Offset = "0x15609E8", VA = "0x15609E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x15609F0", Offset = "0x15609F0", VA = "0x15609F0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x1560A20", Offset = "0x1560A20", VA = "0x1560A20", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x1560A88", Offset = "0x1560A88", VA = "0x1560A88", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x1560AD8", Offset = "0x1560AD8", VA = "0x1560AD8")]
		public void Generate()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x1562D80", Offset = "0x1562D80", VA = "0x1562D80")]
		private void GenerateCapTris(bool flip)
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x1563248", Offset = "0x1563248", VA = "0x1563248")]
		private int WriteTris(ref int[] tris, ref int[] target, int vertexOffset, int trisOffset, bool flip)
		{
			return default(int);
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x1562CB4", Offset = "0x1562CB4", VA = "0x1562CB4")]
		private bool IsClockwise(Vector2[] points2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x1562E38", Offset = "0x1562E38", VA = "0x1562E38")]
		private void GetIdentityVerts(Vector3 center, Vector3 normal, bool clockwise)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x1562934", Offset = "0x1562934", VA = "0x1562934")]
		private void GetProjectedVertices(Vector3[] points, Vector3 normal, Vector3 center, int count = 0)
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x156341C", Offset = "0x156341C", VA = "0x156341C")]
		public SurfaceGenerator()
		{
		}
	}
	[Token(Token = "0x2000216")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDD28", Offset = "0x7EDD28")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDD28", Offset = "0x7EDD28")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDD28", Offset = "0x7EDD28")]
	public class TubeGenerator : MeshGenerator
	{
		[Token(Token = "0x20003F8")]
		public enum CapMethod
		{
			[Token(Token = "0x400175E")]
			None,
			[Token(Token = "0x400175F")]
			Flat,
			[Token(Token = "0x4001760")]
			Round
		}

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private int _sides;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private int _roundCapLatitude;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private CapMethod _capMode;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		[HideInInspector]
		private float _integrity;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[HideInInspector]
		private float _capUVScale;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private int bodyVertexCount;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private int bodyTrisCount;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private int capVertexCount;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int capTrisCount;

		[Token(Token = "0x170001C5")]
		public int sides
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0x1564E90", Offset = "0x1564E90", VA = "0x1564E90")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x1564E98", Offset = "0x1564E98", VA = "0x1564E98")]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public CapMethod capMode
		{
			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0x1564EC8", Offset = "0x1564EC8", VA = "0x1564EC8")]
			get
			{
				return default(CapMethod);
			}
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0x1564ED0", Offset = "0x1564ED0", VA = "0x1564ED0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public int roundCapLatitude
		{
			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0x1564EF4", Offset = "0x1564EF4", VA = "0x1564EF4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0x1564EFC", Offset = "0x1564EFC", VA = "0x1564EFC")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public float integrity
		{
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0x1564F34", Offset = "0x1564F34", VA = "0x1564F34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0x1564F3C", Offset = "0x1564F3C", VA = "0x1564F3C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public float capUVScale
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0x1564F60", Offset = "0x1564F60", VA = "0x1564F60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0x1564F68", Offset = "0x1564F68", VA = "0x1564F68")]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		private bool useCap
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0x1564F8C", Offset = "0x1564F8C", VA = "0x1564F8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x1565130", Offset = "0x1565130", VA = "0x1565130", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x1565138", Offset = "0x1565138", VA = "0x1565138", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x15651A0", Offset = "0x15651A0", VA = "0x15651A0", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x1565328", Offset = "0x1565328", VA = "0x1565328")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x1565A7C", Offset = "0x1565A7C", VA = "0x1565A7C")]
		private void GenerateFlatCaps()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x1566250", Offset = "0x1566250", VA = "0x1566250")]
		private void GenerateRoundCaps()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x1567294", Offset = "0x1567294", VA = "0x1567294")]
		public TubeGenerator()
		{
		}
	}
	[Token(Token = "0x2000217")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDDD8", Offset = "0x7EDDD8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDDD8", Offset = "0x7EDDD8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDDD8", Offset = "0x7EDDD8")]
	public class WaveformGenerator : MeshGenerator
	{
		[Token(Token = "0x20003F9")]
		public enum Axis
		{
			[Token(Token = "0x4001762")]
			X,
			[Token(Token = "0x4001763")]
			Y,
			[Token(Token = "0x4001764")]
			Z
		}

		[Token(Token = "0x20003FA")]
		public enum Space
		{
			[Token(Token = "0x4001766")]
			World,
			[Token(Token = "0x4001767")]
			Local
		}

		[Token(Token = "0x20003FB")]
		public enum UVWrapMode
		{
			[Token(Token = "0x4001769")]
			Clamp,
			[Token(Token = "0x400176A")]
			UniformX,
			[Token(Token = "0x400176B")]
			UniformY,
			[Token(Token = "0x400176C")]
			Uniform
		}

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[HideInInspector]
		private Axis _axis;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[HideInInspector]
		private bool _symmetry;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[HideInInspector]
		private UVWrapMode _uvWrapMode;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		[HideInInspector]
		private int _slices;

		[Token(Token = "0x170001CB")]
		public Axis axis
		{
			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0x1567318", Offset = "0x1567318", VA = "0x1567318")]
			get
			{
				return default(Axis);
			}
			[Token(Token = "0x6000FD1")]
			[Address(RVA = "0x1567320", Offset = "0x1567320", VA = "0x1567320")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public bool symmetry
		{
			[Token(Token = "0x6000FD2")]
			[Address(RVA = "0x1567344", Offset = "0x1567344", VA = "0x1567344")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FD3")]
			[Address(RVA = "0x156734C", Offset = "0x156734C", VA = "0x156734C")]
			set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public UVWrapMode uvWrapMode
		{
			[Token(Token = "0x6000FD4")]
			[Address(RVA = "0x156737C", Offset = "0x156737C", VA = "0x156737C")]
			get
			{
				return default(UVWrapMode);
			}
			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0x1567384", Offset = "0x1567384", VA = "0x1567384")]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public int slices
		{
			[Token(Token = "0x6000FD6")]
			[Address(RVA = "0x15673A8", Offset = "0x15673A8", VA = "0x15673A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0x15673B0", Offset = "0x15673B0", VA = "0x15673B0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x15673DC", Offset = "0x15673DC", VA = "0x15673DC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x1567444", Offset = "0x1567444", VA = "0x1567444", Slot = "29")]
		protected override void BuildMesh()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x1567D94", Offset = "0x1567D94", VA = "0x1567D94", Slot = "20")]
		protected override void Build()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x1567D9C", Offset = "0x1567D9C", VA = "0x1567D9C", Slot = "19")]
		protected override void LateRun()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x156746C", Offset = "0x156746C", VA = "0x156746C")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x1567DA4", Offset = "0x1567DA4", VA = "0x1567DA4")]
		public WaveformGenerator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000218")]
	public class CustomOffsetModule
	{
		[Serializable]
		[Token(Token = "0x20003FC")]
		public class Key
		{
			[Token(Token = "0x400176D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private Vector2 _offset;

			[Token(Token = "0x400176E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private double _from;

			[Token(Token = "0x400176F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private double _to;

			[Token(Token = "0x4001770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private double _center;

			[Token(Token = "0x4001771")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private bool _loop;

			[Token(Token = "0x4001772")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AnimationCurve interpolation;

			[Token(Token = "0x170002E3")]
			public Vector2 offset
			{
				[Token(Token = "0x6001AD6")]
				[Address(RVA = "0x12191C8", Offset = "0x12191C8", VA = "0x12191C8")]
				get
				{
					return default(Vector2);
				}
				[Token(Token = "0x6001AD7")]
				[Address(RVA = "0x12191D0", Offset = "0x12191D0", VA = "0x12191D0")]
				set
				{
				}
			}

			[Token(Token = "0x170002E4")]
			public double center
			{
				[Token(Token = "0x6001AD8")]
				[Address(RVA = "0x12191D8", Offset = "0x12191D8", VA = "0x12191D8")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001AD9")]
				[Address(RVA = "0x12191E0", Offset = "0x12191E0", VA = "0x12191E0")]
				set
				{
				}
			}

			[Token(Token = "0x170002E5")]
			public double from
			{
				[Token(Token = "0x6001ADA")]
				[Address(RVA = "0x12191FC", Offset = "0x12191FC", VA = "0x12191FC")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001ADB")]
				[Address(RVA = "0x1219204", Offset = "0x1219204", VA = "0x1219204")]
				set
				{
				}
			}

			[Token(Token = "0x170002E6")]
			public double to
			{
				[Token(Token = "0x6001ADC")]
				[Address(RVA = "0x1219220", Offset = "0x1219220", VA = "0x1219220")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001ADD")]
				[Address(RVA = "0x1219228", Offset = "0x1219228", VA = "0x1219228")]
				set
				{
				}
			}

			[Token(Token = "0x170002E7")]
			public bool loop
			{
				[Token(Token = "0x6001ADE")]
				[Address(RVA = "0x1219244", Offset = "0x1219244", VA = "0x1219244")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001ADF")]
				[Address(RVA = "0x121924C", Offset = "0x121924C", VA = "0x121924C")]
				set
				{
				}
			}

			[Token(Token = "0x170002E8")]
			public double position
			{
				[Token(Token = "0x6001AE0")]
				[Address(RVA = "0x1219158", Offset = "0x1219158", VA = "0x1219158")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001AE1")]
				[Address(RVA = "0x1219258", Offset = "0x1219258", VA = "0x1219258")]
				set
				{
				}
			}

			[Token(Token = "0x6001AE2")]
			[Address(RVA = "0x1218B48", Offset = "0x1218B48", VA = "0x1218B48")]
			public Key(Vector2 o, double f, double t, double c)
			{
			}

			[Token(Token = "0x6001AE3")]
			[Address(RVA = "0x12191AC", Offset = "0x12191AC", VA = "0x12191AC")]
			public float Evaluate(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Key> keys;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _blend;

		[Token(Token = "0x170001CF")]
		public float blend
		{
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0x1218970", Offset = "0x1218970", VA = "0x1218970")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0x1218978", Offset = "0x1218978", VA = "0x1218978")]
			set
			{
			}
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x12189F4", Offset = "0x12189F4", VA = "0x12189F4")]
		public CustomOffsetModule()
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x1218A90", Offset = "0x1218A90", VA = "0x1218A90")]
		public void AddKey(Vector2 offset, double f, double t, double c)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x1218C40", Offset = "0x1218C40", VA = "0x1218C40")]
		public Vector2 Evaluate(double time)
		{
			return default(Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x2000219")]
	public class CustomRotationModule
	{
		[Serializable]
		[Token(Token = "0x20003FD")]
		public class Key
		{
			[Token(Token = "0x4001773")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private Vector3 _rotation;

			[Token(Token = "0x4001774")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private double _from;

			[Token(Token = "0x4001775")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private double _to;

			[Token(Token = "0x4001776")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private double _center;

			[Token(Token = "0x4001777")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[SerializeField]
			private bool _loop;

			[Token(Token = "0x4001778")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public AnimationCurve interpolation;

			[Token(Token = "0x170002E9")]
			public Vector3 rotation
			{
				[Token(Token = "0x6001AE4")]
				[Address(RVA = "0x1219C40", Offset = "0x1219C40", VA = "0x1219C40")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001AE5")]
				[Address(RVA = "0x1219C4C", Offset = "0x1219C4C", VA = "0x1219C4C")]
				set
				{
				}
			}

			[Token(Token = "0x170002EA")]
			public double center
			{
				[Token(Token = "0x6001AE6")]
				[Address(RVA = "0x1219C58", Offset = "0x1219C58", VA = "0x1219C58")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001AE7")]
				[Address(RVA = "0x1219C60", Offset = "0x1219C60", VA = "0x1219C60")]
				set
				{
				}
			}

			[Token(Token = "0x170002EB")]
			public double from
			{
				[Token(Token = "0x6001AE8")]
				[Address(RVA = "0x1219C7C", Offset = "0x1219C7C", VA = "0x1219C7C")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001AE9")]
				[Address(RVA = "0x1219C84", Offset = "0x1219C84", VA = "0x1219C84")]
				set
				{
				}
			}

			[Token(Token = "0x170002EC")]
			public double to
			{
				[Token(Token = "0x6001AEA")]
				[Address(RVA = "0x1219CA0", Offset = "0x1219CA0", VA = "0x1219CA0")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001AEB")]
				[Address(RVA = "0x1219CA8", Offset = "0x1219CA8", VA = "0x1219CA8")]
				set
				{
				}
			}

			[Token(Token = "0x170002ED")]
			public bool loop
			{
				[Token(Token = "0x6001AEC")]
				[Address(RVA = "0x1219CC4", Offset = "0x1219CC4", VA = "0x1219CC4")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001AED")]
				[Address(RVA = "0x1219CCC", Offset = "0x1219CCC", VA = "0x1219CCC")]
				set
				{
				}
			}

			[Token(Token = "0x170002EE")]
			public double position
			{
				[Token(Token = "0x6001AEE")]
				[Address(RVA = "0x1219BD0", Offset = "0x1219BD0", VA = "0x1219BD0")]
				get
				{
					return default(double);
				}
				[Token(Token = "0x6001AEF")]
				[Address(RVA = "0x1219CD8", Offset = "0x1219CD8", VA = "0x1219CD8")]
				set
				{
				}
			}

			[Token(Token = "0x6001AF0")]
			[Address(RVA = "0x12194C8", Offset = "0x12194C8", VA = "0x12194C8")]
			public Key(Vector3 r, double f, double t, double c)
			{
			}

			[Token(Token = "0x6001AF1")]
			[Address(RVA = "0x1219C24", Offset = "0x1219C24", VA = "0x1219C24")]
			public float Evaluate(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Key> keys;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _blend;

		[Token(Token = "0x170001D0")]
		public float blend
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0x12192E8", Offset = "0x12192E8", VA = "0x12192E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0x12192F0", Offset = "0x12192F0", VA = "0x12192F0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x121936C", Offset = "0x121936C", VA = "0x121936C")]
		public CustomRotationModule()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x1219408", Offset = "0x1219408", VA = "0x1219408")]
		public void AddKey(Vector3 rotation, double f, double t, double c)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x12195CC", Offset = "0x12195CC", VA = "0x12195CC")]
		public Quaternion Evaluate(Quaternion baseRotation, double time)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x200021A")]
	public class ObjectSequence<T>
	{
		[Token(Token = "0x20003FE")]
		public enum Iteration
		{
			[Token(Token = "0x400177A")]
			Ordered,
			[Token(Token = "0x400177B")]
			Random
		}

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T startObject;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T endObject;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] objects;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Iteration iteration;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private int _randomSeed;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private int index;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private System.Random randomizer;

		[Token(Token = "0x170001D1")]
		public int randomSeed
		{
			[Token(Token = "0x6000FE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FE9")]
			set
			{
			}
		}

		[Token(Token = "0x6000FEA")]
		public ObjectSequence()
		{
		}

		[Token(Token = "0x6000FEB")]
		public T GetFirst()
		{
			return (T)null;
		}

		[Token(Token = "0x6000FEC")]
		public T GetLast()
		{
			return (T)null;
		}

		[Token(Token = "0x6000FED")]
		public T Next()
		{
			return (T)null;
		}
	}
	[Serializable]
	[Token(Token = "0x200021B")]
	public class Spline
	{
		[Token(Token = "0x20003FF")]
		public enum Direction
		{
			[Token(Token = "0x400177D")]
			Forward = 1,
			[Token(Token = "0x400177E")]
			Backward = -1
		}

		[Token(Token = "0x2000400")]
		public enum Type
		{
			[Token(Token = "0x4001780")]
			Hermite,
			[Token(Token = "0x4001781")]
			BSpline,
			[Token(Token = "0x4001782")]
			Bezier,
			[Token(Token = "0x4001783")]
			Linear
		}

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SplinePoint[] points;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool closed;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Type type;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve customValueInterpolation;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve customNormalInterpolation;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F5440", Offset = "0x7F5440")]
		public double precision;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] hermitePoints;

		[Token(Token = "0x170001D2")]
		public bool isClosed
		{
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0x1330CF8", Offset = "0x1330CF8", VA = "0x1330CF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0x1343918", Offset = "0x1343918", VA = "0x1343918")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public double moveStep
		{
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0x134391C", Offset = "0x134391C", VA = "0x134391C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0x13439C4", Offset = "0x13439C4", VA = "0x13439C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		public int iterations
		{
			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0x1343964", Offset = "0x1343964", VA = "0x1343964")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0x13439C8", Offset = "0x13439C8", VA = "0x13439C8")]
			set
			{
			}
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x13314DC", Offset = "0x13314DC", VA = "0x13314DC")]
		public Spline(Type t)
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x13439CC", Offset = "0x13439CC", VA = "0x13439CC")]
		public Spline(Type t, double p)
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x1343A90", Offset = "0x1343A90", VA = "0x1343A90")]
		public float CalculateLength(double from = 0.0, double to = 1.0, double resolution = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x1343CEC", Offset = "0x1343CEC", VA = "0x1343CEC")]
		public double Project(Vector3 point, int subdivide = 3, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x1344254", Offset = "0x1344254", VA = "0x1344254")]
		public bool Raycast(out RaycastHit hit, out double hitPercent, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x13444E0", Offset = "0x13444E0", VA = "0x13444E0")]
		public bool RaycastAll(out RaycastHit[] hits, out double[] hitPercents, LayerMask layerMask, double resolution = 1.0, double from = 0.0, double to = 1.0, QueryTriggerInteraction hitTriggers = QueryTriggerInteraction.UseGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x134490C", Offset = "0x134490C", VA = "0x134490C")]
		public double GetPointPercent(int pointIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x1343C30", Offset = "0x1343C30", VA = "0x1343C30")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x1344A30", Offset = "0x1344A30", VA = "0x1344A30")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x13451FC", Offset = "0x13451FC", VA = "0x13451FC")]
		public SplineResult Evaluate(int pointIndex)
		{
			return null;
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x1345280", Offset = "0x1345280", VA = "0x1345280")]
		public void Evaluate(SplineResult result, int pointIndex)
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x1344AAC", Offset = "0x1344AAC", VA = "0x1344AAC")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x13453A4", Offset = "0x13453A4", VA = "0x13453A4")]
		public void Evaluate(ref SplineResult[] samples, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x13455A8", Offset = "0x13455A8", VA = "0x13455A8")]
		public void EvaluatePositions(ref Vector3[] positions, double from = 0.0, double to = 1.0)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x1345768", Offset = "0x1345768", VA = "0x1345768")]
		public double Travel(double start, float distance, Direction direction)
		{
			return default(double);
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x134493C", Offset = "0x134493C", VA = "0x134493C")]
		private void EvaluatePosition(ref Vector3 point, double percent)
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x13452B0", Offset = "0x13452B0", VA = "0x13452B0")]
		private void EvaluateTangent(ref Vector3 tangent, double percent)
		{
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x1343FB4", Offset = "0x1343FB4", VA = "0x1343FB4")]
		private double GetClosestPoint(int iterations, Vector3 point, double start, double end, int slices)
		{
			return default(double);
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x134332C", Offset = "0x134332C", VA = "0x134332C")]
		public void Break()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x1345B58", Offset = "0x1345B58", VA = "0x1345B58")]
		public void Break(int at)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x1331590", Offset = "0x1331590", VA = "0x1331590")]
		public void Close()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x1345DAC", Offset = "0x1345DAC", VA = "0x1345DAC")]
		public void ConvertToBezier()
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x13459B0", Offset = "0x13459B0", VA = "0x13459B0")]
		private void GetPoint(ref Vector3 point, double percent, int pointIndex)
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x1345B30", Offset = "0x1345B30", VA = "0x1345B30")]
		private void GetTangent(ref Vector3 tangent, double percent, int pointIndex)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x1347234", Offset = "0x1347234", VA = "0x1347234")]
		private void LinearGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x1347A5C", Offset = "0x1347A5C", VA = "0x1347A5C")]
		private void LinearGetTangent(ref Vector3 tangent, double t, int i)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x1346D68", Offset = "0x1346D68", VA = "0x1346D68")]
		private void BSPGetPoint(ref Vector3 point, double time, int i)
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x1346AB0", Offset = "0x1346AB0", VA = "0x1346AB0")]
		private void BezierGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x13476D8", Offset = "0x13476D8", VA = "0x13476D8")]
		private void BezierGetTangent(ref Vector3 tangent, double t, int i)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x134668C", Offset = "0x134668C", VA = "0x134668C")]
		private void HermiteGetPoint(ref Vector3 point, double t, int i)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x13473FC", Offset = "0x13473FC", VA = "0x13473FC")]
		private void GetHermiteTangent(ref Vector3 direction, double t, int i)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x1346250", Offset = "0x1346250", VA = "0x1346250")]
		private void GetHermitePoints(int i)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021C")]
	public class SplineAddress
	{
		[Serializable]
		[Token(Token = "0x2000401")]
		public class Element
		{
			[Token(Token = "0x4001784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SplineComputer computer;

			[Token(Token = "0x4001785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private int _startPoint;

			[Token(Token = "0x4001786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private int _endPoint;

			[Token(Token = "0x170002EF")]
			public int startPoint
			{
				[Token(Token = "0x6001AF2")]
				[Address(RVA = "0x13BDA14", Offset = "0x13BDA14", VA = "0x13BDA14")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001AF3")]
				[Address(RVA = "0x13BD114", Offset = "0x13BD114", VA = "0x13BD114")]
				set
				{
				}
			}

			[Token(Token = "0x170002F0")]
			public int endPoint
			{
				[Token(Token = "0x6001AF4")]
				[Address(RVA = "0x13BD0E4", Offset = "0x13BD0E4", VA = "0x13BD0E4")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001AF5")]
				[Address(RVA = "0x13BAE30", Offset = "0x13BAE30", VA = "0x13BAE30")]
				set
				{
				}
			}

			[Token(Token = "0x170002F1")]
			public double startPercent
			{
				[Token(Token = "0x6001AF6")]
				[Address(RVA = "0x13BBD38", Offset = "0x13BBD38", VA = "0x13BBD38")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002F2")]
			public double endPercent
			{
				[Token(Token = "0x6001AF7")]
				[Address(RVA = "0x13BBD78", Offset = "0x13BBD78", VA = "0x13BBD78")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002F3")]
			public int span
			{
				[Token(Token = "0x6001AF8")]
				[Address(RVA = "0x13BBC88", Offset = "0x13BBC88", VA = "0x13BBC88")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001AF9")]
			[Address(RVA = "0x13BAE20", Offset = "0x13BAE20", VA = "0x13BAE20")]
			public Element()
			{
			}
		}

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Element[] _elements;

		[Token(Token = "0x170001D5")]
		public int depth
		{
			[Token(Token = "0x6001014")]
			[Address(RVA = "0x13BACC0", Offset = "0x13BACC0", VA = "0x13BACC0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D6")]
		public SplineComputer root
		{
			[Token(Token = "0x6001015")]
			[Address(RVA = "0x13BACD8", Offset = "0x13BACD8", VA = "0x13BACD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001016")]
			[Address(RVA = "0x13BAD18", Offset = "0x13BAD18", VA = "0x13BAD18")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public Element[] elements
		{
			[Token(Token = "0x6001017")]
			[Address(RVA = "0x13BB050", Offset = "0x13BB050", VA = "0x13BB050")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D8")]
		public double moveStep
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0x13BB058", Offset = "0x13BB058", VA = "0x13BB058")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x13BB2CC", Offset = "0x13BB2CC", VA = "0x13BB2CC")]
		public SplineAddress(SplineComputer rootComp)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x13BB3D8", Offset = "0x13BB3D8", VA = "0x13BB3D8")]
		public SplineAddress(SplineAddress copy)
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x13BB58C", Offset = "0x13BB58C", VA = "0x13BB58C")]
		public SplineResult Evaluate(double percent)
		{
			return null;
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x13BB608", Offset = "0x13BB608", VA = "0x13BB608")]
		public void Evaluate(SplineResult result, double percent)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x13BB99C", Offset = "0x13BB99C", VA = "0x13BB99C")]
		public Vector3 EvaluatePosition(double percent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x13BBDC0", Offset = "0x13BBDC0", VA = "0x13BBDC0")]
		public double Project(Vector3 point, int subdivide = 4, double from = 0.0, double to = 1.0)
		{
			return default(double);
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x13BC48C", Offset = "0x13BC48C", VA = "0x13BC48C")]
		public float CalculateLength(double from = 0.0, double to = 1.0)
		{
			return default(float);
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x13BC778", Offset = "0x13BC778", VA = "0x13BC778")]
		public double Travel(double start, float distance, Spline.Direction direction, int iterations)
		{
			return default(double);
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x13BC980", Offset = "0x13BC980", VA = "0x13BC980")]
		public int GetElementIndex(double percent)
		{
			return default(int);
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x13BC030", Offset = "0x13BC030", VA = "0x13BC030")]
		public double PathToLocalPercent(double pathPercent, int elementIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x13BC2A0", Offset = "0x13BC2A0", VA = "0x13BC2A0")]
		public double LocalToPathPercent(double localPercent, int elementIndex)
		{
			return default(double);
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x13BB18C", Offset = "0x13BB18C", VA = "0x13BB18C")]
		public int GetTotalPointCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x13BB724", Offset = "0x13BB724", VA = "0x13BB724")]
		public void GetEvaluationValues(double inputPercent, out SplineComputer computer, out double percent, out Spline.Direction direction)
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x13BCB18", Offset = "0x13BCB18", VA = "0x13BCB18")]
		private int LocalToPathPoint(int point, int elementIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x13BCC20", Offset = "0x13BCC20", VA = "0x13BCC20")]
		private void PathToLocalPoint(int point, out int computerIndex, out int localPoint)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x13BCD2C", Offset = "0x13BCD2C", VA = "0x13BCD2C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x7FBCB0", Offset = "0x7FBCB0")]
		public void Enter(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x13BCD30", Offset = "0x13BCD30", VA = "0x13BCD30")]
		public void AddSpline(Node node, int connectionIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x13BD2F4", Offset = "0x13BD2F4", VA = "0x13BD2F4")]
		public void AddSpline(SplineComputer computer, int connectionIndex, int connectedIndex, Spline.Direction direction = Spline.Direction.Forward)
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x13BD664", Offset = "0x13BD664", VA = "0x13BD664")]
		public void Exit(int exitDepth)
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x13BD7D8", Offset = "0x13BD7D8", VA = "0x13BD7D8")]
		public void Collapse()
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x13BD93C", Offset = "0x13BD93C", VA = "0x13BD93C")]
		public void Clear()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x13BB4AC", Offset = "0x13BB4AC", VA = "0x13BB4AC")]
		private void AddElement(Element element)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021D")]
	public struct SplinePoint
	{
		[Token(Token = "0x2000402")]
		public enum Type
		{
			[Token(Token = "0x4001788")]
			SmoothMirrored,
			[Token(Token = "0x4001789")]
			Broken,
			[Token(Token = "0x400178A")]
			SmoothFree
		}

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7F545C", Offset = "0x7F545C")]
		public Type _type;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 position;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 normal;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float size;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 tangent;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 tangent2;

		[Token(Token = "0x170001D9")]
		public Type type
		{
			[Token(Token = "0x600102F")]
			[Address(RVA = "0x8A5DFC", Offset = "0x8A5DFC", VA = "0x8A5DFC")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6001030")]
			[Address(RVA = "0x8A5E04", Offset = "0x8A5E04", VA = "0x8A5E04")]
			set
			{
			}
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x13CD76C", Offset = "0x13CD76C", VA = "0x13CD76C")]
		public static SplinePoint Lerp(SplinePoint a, SplinePoint b, float t)
		{
			return default(SplinePoint);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x13CD978", Offset = "0x13CD978", VA = "0x13CD978")]
		private static void GetInterpolatedTangents(SplinePoint a, SplinePoint b, float t, out Vector3 t1, out Vector3 t2)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x8A5E14", Offset = "0x8A5E14", VA = "0x8A5E14")]
		public void SetPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x8A5E1C", Offset = "0x8A5E1C", VA = "0x8A5E1C")]
		public void SetTangentPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x8A5E24", Offset = "0x8A5E24", VA = "0x8A5E24")]
		public void SetTangent2Position(Vector3 pos)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x8A5E2C", Offset = "0x8A5E2C", VA = "0x8A5E2C")]
		public SplinePoint(Vector3 p)
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x8A5E34", Offset = "0x8A5E34", VA = "0x8A5E34")]
		public SplinePoint(Vector3 p, Vector3 t)
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x8A5E3C", Offset = "0x8A5E3C", VA = "0x8A5E3C")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x8A5E64", Offset = "0x8A5E64", VA = "0x8A5E64")]
		public SplinePoint(Vector3 pos, Vector3 tan, Vector3 tan2, Vector3 nor, float s, Color col)
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x8A5EA4", Offset = "0x8A5EA4", VA = "0x8A5EA4")]
		public SplinePoint(SplinePoint source)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x8A5EE0", Offset = "0x8A5EE0", VA = "0x8A5EE0")]
		private void SmoothMirrorTangent2()
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x8A5EE8", Offset = "0x8A5EE8", VA = "0x8A5EE8")]
		private void SmoothMirrorTangent()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x8A5EF0", Offset = "0x8A5EF0", VA = "0x8A5EF0")]
		private void SmoothFreeTangent2()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x8A5EF8", Offset = "0x8A5EF8", VA = "0x8A5EF8")]
		private void SmoothFreeTangent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021E")]
	public class SplineResult
	{
		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 direction;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color color;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float size;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public double percent;

		[Token(Token = "0x170001DA")]
		public Quaternion rotation
		{
			[Token(Token = "0x600103F")]
			[Address(RVA = "0x1556E80", Offset = "0x1556E80", VA = "0x1556E80")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x170001DB")]
		public Vector3 right
		{
			[Token(Token = "0x6001040")]
			[Address(RVA = "0x1557034", Offset = "0x1557034", VA = "0x1557034")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x15571DC", Offset = "0x15571DC", VA = "0x15571DC")]
		public static SplineResult Lerp(SplineResult a, SplineResult b, float t)
		{
			return null;
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x15574C4", Offset = "0x15574C4", VA = "0x15574C4")]
		public static SplineResult Lerp(SplineResult a, SplineResult b, double t)
		{
			return null;
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x155754C", Offset = "0x155754C", VA = "0x155754C")]
		public static void Lerp(SplineResult a, SplineResult b, double t, SplineResult target)
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x1557314", Offset = "0x1557314", VA = "0x1557314")]
		public static void Lerp(SplineResult a, SplineResult b, float t, SplineResult target)
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x15576FC", Offset = "0x15576FC", VA = "0x15576FC")]
		public void Lerp(SplineResult b, double t)
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x1557704", Offset = "0x1557704", VA = "0x1557704")]
		public void Lerp(SplineResult b, float t)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x155770C", Offset = "0x155770C", VA = "0x155770C")]
		public void CopyFrom(SplineResult input)
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x1557264", Offset = "0x1557264", VA = "0x1557264")]
		public SplineResult()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x1557768", Offset = "0x1557768", VA = "0x1557768")]
		public SplineResult(Vector3 p, Vector3 n, Vector3 d, Color c, float s, double t)
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x15578B8", Offset = "0x15578B8", VA = "0x15578B8")]
		public SplineResult(SplineResult input)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021F")]
	public class SplineAction
	{
		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public UnityEngine.Object target;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int intValue;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float floatValue;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double doubleValue;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string stringValue;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool boolValue;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject goValue;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform transformValue;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityAction action;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityAction<int> intAction;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityAction<float> floatAction;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityAction<double> doubleAction;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityAction<string> stringAction;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UnityAction<bool> boolAction;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityAction<GameObject> goAction;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityAction<Transform> transformAction;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MethodInfo methodInfo;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private string methodName;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private int paramType;

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x13B9BB4", Offset = "0x13B9BB4", VA = "0x13B9BB4")]
		public SplineAction()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x13B9C0C", Offset = "0x13B9C0C", VA = "0x13B9C0C")]
		public SplineAction(UnityAction call)
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x13B9C7C", Offset = "0x13B9C7C", VA = "0x13B9C7C")]
		public SplineAction(UnityAction<int> call, int value)
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x13B9CF8", Offset = "0x13B9CF8", VA = "0x13B9CF8")]
		public SplineAction(UnityAction<float> call, float value)
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x13B9D7C", Offset = "0x13B9D7C", VA = "0x13B9D7C")]
		public SplineAction(UnityAction<double> call, double value)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x13B9E00", Offset = "0x13B9E00", VA = "0x13B9E00")]
		public SplineAction(UnityAction<string> call, string value)
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x13B9E7C", Offset = "0x13B9E7C", VA = "0x13B9E7C")]
		public SplineAction(UnityAction<bool> call, bool value)
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x13B9EFC", Offset = "0x13B9EFC", VA = "0x13B9EFC")]
		public SplineAction(UnityAction<GameObject> call, GameObject value)
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x13B9F78", Offset = "0x13B9F78", VA = "0x13B9F78")]
		public SplineAction(UnityAction<Transform> call, Transform value)
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x13B9FF4", Offset = "0x13B9FF4", VA = "0x13B9FF4")]
		public void SetMethod(MethodInfo newMethod)
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x13BA7EC", Offset = "0x13BA7EC", VA = "0x13BA7EC")]
		private Type GetParamType()
		{
			return null;
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x13BA924", Offset = "0x13BA924", VA = "0x13BA924")]
		public MethodInfo GetMethod()
		{
			return null;
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x13BA400", Offset = "0x13BA400", VA = "0x13BA400")]
		private void ConstructUnityAction()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x13BAAE0", Offset = "0x13BAAE0", VA = "0x13BAAE0")]
		public void Invoke()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000220")]
	public class SplineTrigger : ScriptableObject
	{
		[Token(Token = "0x2000403")]
		public enum Type
		{
			[Token(Token = "0x400178C")]
			Double,
			[Token(Token = "0x400178D")]
			Forward,
			[Token(Token = "0x400178E")]
			Backward
		}

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Type type;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F54D4", Offset = "0x7F54D4")]
		public double position;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public Color color;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public SplineAction[] actions;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] gameObjects;

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x155AD14", Offset = "0x155AD14", VA = "0x155AD14")]
		public SplineTrigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000221")]
	public class Trigger
	{
		[Token(Token = "0x2000404")]
		public enum Type
		{
			[Token(Token = "0x4001790")]
			Double,
			[Token(Token = "0x4001791")]
			Forward,
			[Token(Token = "0x4001792")]
			Backward
		}

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Type type;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool workOnce;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool worked;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F5554", Offset = "0x7F5554")]
		public double position;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public Color color;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public SplineAction[] actions;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] gameObjects;

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x155A264", Offset = "0x155A264", VA = "0x155A264")]
		public void Create(Type t, UnityAction call)
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x155A390", Offset = "0x155A390", VA = "0x155A390")]
		public void Create(Type t, UnityAction<int> call, int value)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x155A4AC", Offset = "0x155A4AC", VA = "0x155A4AC")]
		public void Create(Type t, UnityAction<float> call, float value)
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x155A5D0", Offset = "0x155A5D0", VA = "0x155A5D0")]
		public void Create(Type t, UnityAction<double> call, double value)
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x155A6FC", Offset = "0x155A6FC", VA = "0x155A6FC")]
		public void Create(Type t, UnityAction<string> call, string value)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x155A820", Offset = "0x155A820", VA = "0x155A820")]
		public void Create(Type t, UnityAction<bool> call, bool value)
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x155AA68", Offset = "0x155AA68", VA = "0x155AA68")]
		public void Create(Type t, UnityAction<Transform> call, Transform value)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x155A944", Offset = "0x155A944", VA = "0x155A944")]
		public void Create(Type t, UnityAction<GameObject> call, GameObject value)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x15641B4", Offset = "0x15641B4", VA = "0x15641B4")]
		public void Create(Type t)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x1558AD8", Offset = "0x1558AD8", VA = "0x1558AD8")]
		public void ResetWorkOnce()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x1559B1C", Offset = "0x1559B1C", VA = "0x1559B1C")]
		public bool Check(double previousPercent, double currentPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x1559D24", Offset = "0x1559D24", VA = "0x1559D24")]
		public void Invoke()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x1564290", Offset = "0x1564290", VA = "0x1564290")]
		private void AddAction()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x1564388", Offset = "0x1564388", VA = "0x1564388")]
		public void AddListener(MonoBehaviour behavior, string method, object arg)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x1564218", Offset = "0x1564218", VA = "0x1564218")]
		public void AddAction(SplineAction action)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x155A058", Offset = "0x155A058", VA = "0x155A058")]
		public Trigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000222")]
	public class TransformModule
	{
		[Token(Token = "0x2000405")]
		public enum VelocityHandleMode
		{
			[Token(Token = "0x4001794")]
			Zero,
			[Token(Token = "0x4001795")]
			Preserve,
			[Token(Token = "0x4001796")]
			Align,
			[Token(Token = "0x4001797")]
			AlignRealistic
		}

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7F55C4", Offset = "0x7F55C4")]
		private Vector2 _offset;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7F5620", Offset = "0x7F5620")]
		private Vector3 _rotationOffset;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x7F567C", Offset = "0x7F567C")]
		private Vector3 _baseScale;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VelocityHandleMode velocityHandleMode;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SplineResult _splineResult;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CustomRotationModule customRotation;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CustomOffsetModule customOffset;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool applyPositionX;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool applyPositionY;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool applyPositionZ;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Spline.Direction direction;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool applyRotationX;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool applyRotationY;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool applyRotationZ;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public bool applyScaleX;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool applyScaleY;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool applyScaleZ;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public SplineUser targetUser;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 position;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Quaternion rotation;

		[Token(Token = "0x170001DC")]
		public Vector2 offset
		{
			[Token(Token = "0x600106A")]
			[Address(RVA = "0x156354C", Offset = "0x156354C", VA = "0x156354C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x600106B")]
			[Address(RVA = "0x15585D8", Offset = "0x15585D8", VA = "0x15585D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public Vector3 rotationOffset
		{
			[Token(Token = "0x600106C")]
			[Address(RVA = "0x1563554", Offset = "0x1563554", VA = "0x1563554")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600106D")]
			[Address(RVA = "0x1558740", Offset = "0x1558740", VA = "0x1558740")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public Vector3 baseScale
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0x1563560", Offset = "0x1563560", VA = "0x1563560")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600106F")]
			[Address(RVA = "0x156356C", Offset = "0x156356C", VA = "0x156356C")]
			set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public SplineResult splineResult
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x156368C", Offset = "0x156368C", VA = "0x156368C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x155972C", Offset = "0x155972C", VA = "0x155972C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public bool applyPosition
		{
			[Token(Token = "0x6001072")]
			[Address(RVA = "0x15583A8", Offset = "0x15583A8", VA = "0x15583A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001073")]
			[Address(RVA = "0x1558408", Offset = "0x1558408", VA = "0x1558408")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public bool applyRotation
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x155845C", Offset = "0x155845C", VA = "0x155845C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001075")]
			[Address(RVA = "0x15584BC", Offset = "0x15584BC", VA = "0x15584BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public bool applyScale
		{
			[Token(Token = "0x6001076")]
			[Address(RVA = "0x1558510", Offset = "0x1558510", VA = "0x1558510")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001077")]
			[Address(RVA = "0x1558570", Offset = "0x1558570", VA = "0x1558570")]
			set
			{
			}
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x15597B4", Offset = "0x15597B4", VA = "0x15597B4")]
		public void ApplyTransform(Transform input)
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x1559838", Offset = "0x1559838", VA = "0x1559838")]
		public void ApplyRigidbody(Rigidbody input)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x155995C", Offset = "0x155995C", VA = "0x155995C")]
		public void ApplyRigidbody2D(Rigidbody2D input)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x1563E08", Offset = "0x1563E08", VA = "0x1563E08")]
		private Vector3 HandleVelocity(Vector3 velocity)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x15636F4", Offset = "0x15636F4", VA = "0x15636F4")]
		private Vector3 GetPosition(Vector3 inputPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x1563A1C", Offset = "0x1563A1C", VA = "0x1563A1C")]
		private Quaternion GetRotation(Quaternion inputRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x1563DA0", Offset = "0x1563DA0", VA = "0x1563DA0")]
		private Vector3 GetScale(Vector3 inputScale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x1557AC4", Offset = "0x1557AC4", VA = "0x1557AC4")]
		public TransformModule()
		{
		}
	}
}
namespace Dreamteck.Splines.Primitives
{
	[Token(Token = "0x2000223")]
	public class Capsule : SplinePrimitive
	{
		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x13407C4", Offset = "0x13407C4", VA = "0x13407C4", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x13410DC", Offset = "0x13410DC", VA = "0x13410DC")]
		public Capsule()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class Ellipse : SplinePrimitive
	{
		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float xRadius;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yRadius;

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x1341198", Offset = "0x1341198", VA = "0x1341198", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x13415AC", Offset = "0x13415AC", VA = "0x13415AC")]
		public Ellipse()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class Line : SplinePrimitive
	{
		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool mirror;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float length;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int segments;

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x13415B8", Offset = "0x13415B8", VA = "0x13415B8", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x1341818", Offset = "0x1341818", VA = "0x1341818")]
		public Line()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class Ngon : SplinePrimitive
	{
		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int sides;

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x1341830", Offset = "0x1341830", VA = "0x1341830", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x1341A0C", Offset = "0x1341A0C", VA = "0x1341A0C")]
		public Ngon()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class Rectangle : SplinePrimitive
	{
		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 size;

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x1341A1C", Offset = "0x1341A1C", VA = "0x1341A1C", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x1341D4C", Offset = "0x1341D4C", VA = "0x1341D4C")]
		public Rectangle()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class RoundedRectangle : SplinePrimitive
	{
		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 size;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float xRadius;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float yRadius;

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x1341DBC", Offset = "0x1341DBC", VA = "0x1341DBC", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x1342714", Offset = "0x1342714", VA = "0x1342714")]
		public RoundedRectangle()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class Spiral : SplinePrimitive
	{
		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float startRadius;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float endRadius;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float stretch;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int iterations;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve curve;

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x134278C", Offset = "0x134278C", VA = "0x134278C", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x1342DA0", Offset = "0x1342DA0", VA = "0x1342DA0")]
		public Spiral()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class SplinePrimitive
	{
		[Token(Token = "0x2000406")]
		public enum Axis
		{
			[Token(Token = "0x4001799")]
			X,
			[Token(Token = "0x400179A")]
			Y,
			[Token(Token = "0x400179B")]
			Z,
			[Token(Token = "0x400179C")]
			nX,
			[Token(Token = "0x400179D")]
			nY,
			[Token(Token = "0x400179E")]
			nZ
		}

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool closed;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected SplinePoint[] points;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Spline.Type type;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Axis axis;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 rotation;

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x1340F70", Offset = "0x1340F70", VA = "0x1340F70", Slot = "4")]
		protected virtual void Generate()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x1342E18", Offset = "0x1342E18", VA = "0x1342E18")]
		public Spline GetSpline()
		{
			return null;
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x1343298", Offset = "0x1343298", VA = "0x1343298")]
		public void UpdateSpline(Spline spline)
		{
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x1343334", Offset = "0x1343334", VA = "0x1343334")]
		public SplineComputer CreateSplineComputer(string name, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x134349C", Offset = "0x134349C", VA = "0x134349C")]
		public void UpdateSplineComputer(SplineComputer comp)
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x1342EBC", Offset = "0x1342EBC", VA = "0x1342EBC")]
		private void ApplyOffset()
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x1340F74", Offset = "0x1340F74", VA = "0x1340F74")]
		protected void CreatePoints(int count, SplinePoint.Type type)
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x1343540", Offset = "0x1343540", VA = "0x1343540")]
		protected Vector3 GetNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x13410EC", Offset = "0x13410EC", VA = "0x13410EC")]
		public SplinePrimitive()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class Star : SplinePrimitive
	{
		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float radius;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float depth;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int sides;

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x13436B4", Offset = "0x13436B4", VA = "0x13436B4", Slot = "4")]
		protected override void Generate()
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x1343900", Offset = "0x1343900", VA = "0x1343900")]
		public Star()
		{
		}
	}
}
namespace Dreamteck.Splines.IO
{
	[Token(Token = "0x200022C")]
	public class CSV : SplineParser
	{
		[Token(Token = "0x2000407")]
		public enum ColumnType
		{
			[Token(Token = "0x40017A0")]
			Position,
			[Token(Token = "0x40017A1")]
			Tangent,
			[Token(Token = "0x40017A2")]
			Tangent2,
			[Token(Token = "0x40017A3")]
			Normal,
			[Token(Token = "0x40017A4")]
			Size,
			[Token(Token = "0x40017A5")]
			Color
		}

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ColumnType> columns;

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x121F398", Offset = "0x121F398", VA = "0x121F398")]
		public CSV(SplineComputer computer)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x121F554", Offset = "0x121F554", VA = "0x121F554")]
		public CSV(string filePath, [Optional] List<ColumnType> customColumns)
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x121F7A4", Offset = "0x121F7A4", VA = "0x121F7A4")]
		private void Read(string[] lines)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x1220224", Offset = "0x1220224", VA = "0x1220224")]
		public SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x1220240", Offset = "0x1220240", VA = "0x1220240")]
		public Spline CreateSpline()
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x122025C", Offset = "0x122025C", VA = "0x122025C")]
		public void FlatX()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x12203E0", Offset = "0x12203E0", VA = "0x12203E0")]
		public void FlatY()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x1220568", Offset = "0x1220568", VA = "0x1220568")]
		public void FlatZ()
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x1220730", Offset = "0x1220730", VA = "0x1220730")]
		private void AddTitle(ref string[] content, string title)
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x12207FC", Offset = "0x12207FC", VA = "0x12207FC")]
		private void AddVector3Title(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x12209A4", Offset = "0x12209A4", VA = "0x12209A4")]
		private void AddColorTitle(ref string[] content, string prefix)
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x1220BA8", Offset = "0x1220BA8", VA = "0x1220BA8")]
		private void AddVector3(ref string[] content, int index, Vector3 vector)
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x1220CFC", Offset = "0x1220CFC", VA = "0x1220CFC")]
		private void AddColor(ref string[] content, int index, Color color)
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x1220BF8", Offset = "0x1220BF8", VA = "0x1220BF8")]
		private void AddFloat(ref string[] content, int index, float value)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x1220D68", Offset = "0x1220D68", VA = "0x1220D68")]
		public void Write(string filePath)
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class SVG : SplineParser
	{
		[Token(Token = "0x2000408")]
		public enum Axis
		{
			[Token(Token = "0x40017A7")]
			X,
			[Token(Token = "0x40017A8")]
			Y,
			[Token(Token = "0x40017A9")]
			Z
		}

		[Token(Token = "0x2000409")]
		internal class PathSegment
		{
			[Token(Token = "0x2000480")]
			internal enum Type
			{
				[Token(Token = "0x4001924")]
				Cubic,
				[Token(Token = "0x4001925")]
				CubicShort,
				[Token(Token = "0x4001926")]
				Quadratic,
				[Token(Token = "0x4001927")]
				QuadraticShort
			}

			[Token(Token = "0x40017AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vector3 startTangent;

			[Token(Token = "0x40017AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Vector3 endTangent;

			[Token(Token = "0x40017AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vector3 endPoint;

			[Token(Token = "0x6001AFA")]
			[Address(RVA = "0x132F5B0", Offset = "0x132F5B0", VA = "0x132F5B0")]
			internal PathSegment(Vector2 s, Vector2 e, Vector2 c)
			{
			}

			[Token(Token = "0x6001AFB")]
			[Address(RVA = "0x132F6E4", Offset = "0x132F6E4", VA = "0x132F6E4")]
			internal PathSegment()
			{
			}
		}

		[Token(Token = "0x200040A")]
		public enum Element
		{
			[Token(Token = "0x40017AE")]
			All,
			[Token(Token = "0x40017AF")]
			Path,
			[Token(Token = "0x40017B0")]
			Polygon,
			[Token(Token = "0x40017B1")]
			Ellipse,
			[Token(Token = "0x40017B2")]
			Rectangle,
			[Token(Token = "0x40017B3")]
			Line
		}

		[Serializable]
		[Token(Token = "0x200040B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE72C", Offset = "0x7EE72C")]
		private sealed class <>c
		{
			[Token(Token = "0x40017B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40017B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, bool> <>9__23_0;

			[Token(Token = "0x6001AFD")]
			[Address(RVA = "0x132F584", Offset = "0x132F584", VA = "0x132F584")]
			public <>c()
			{
			}

			[Token(Token = "0x6001AFE")]
			[Address(RVA = "0x132F58C", Offset = "0x132F58C", VA = "0x132F58C")]
			internal bool <ReadPath>b__23_0(string t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SplineDefinition> paths;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<SplineDefinition> polygons;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<SplineDefinition> ellipses;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<SplineDefinition> rectangles;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<SplineDefinition> lines;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Transformation> transformBuffer;

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x1221234", Offset = "0x1221234", VA = "0x1221234")]
		public SVG(string filePath)
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x12215C0", Offset = "0x12215C0", VA = "0x12215C0")]
		public SVG(List<SplineComputer> computers)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x1221904", Offset = "0x1221904", VA = "0x1221904")]
		public void Write(string filePath, Axis ax = Axis.Z)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x1222708", Offset = "0x1222708", VA = "0x1222708")]
		private Vector2 MapPoint(Vector3 original, Axis ax)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x122153C", Offset = "0x122153C", VA = "0x122153C")]
		private void Read(XmlDocument doc)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x12227F0", Offset = "0x12227F0", VA = "0x12227F0")]
		private void Traverse(XmlNodeList nodes)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x12242C0", Offset = "0x12242C0", VA = "0x12242C0")]
		public List<SplineComputer> CreateSplineComputers(Vector3 position, Quaternion rotation, Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x12248CC", Offset = "0x12248CC", VA = "0x12248CC")]
		public List<Spline> CreateSplines(Element elements = Element.All)
		{
			return null;
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x1223E38", Offset = "0x1223E38", VA = "0x1223E38")]
		private int ReadRectangle(XmlNode rectNode)
		{
			return default(int);
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x1223B74", Offset = "0x1223B74", VA = "0x1223B74")]
		private int ReadLine(XmlNode lineNode)
		{
			return default(int);
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x1223794", Offset = "0x1223794", VA = "0x1223794")]
		private int ReadEllipse(XmlNode ellipseNode)
		{
			return default(int);
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x12234BC", Offset = "0x12234BC", VA = "0x12234BC")]
		private int ReadPolygon(XmlNode polyNode, bool closed)
		{
			return default(int);
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x1222D2C", Offset = "0x1222D2C", VA = "0x1222D2C")]
		private int ParseTransformation(XmlNode node)
		{
			return default(int);
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x1224FCC", Offset = "0x1224FCC", VA = "0x1224FCC")]
		private List<Transformation> ParseTransformations(string transformContent)
		{
			return null;
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x1222DE8", Offset = "0x1222DE8", VA = "0x1222DE8")]
		private int ReadPath(XmlNode pathNode)
		{
			return default(int);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x1225A24", Offset = "0x1225A24", VA = "0x1225A24")]
		private void PathStart(string name, string coords, bool relative)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x1225BF0", Offset = "0x1225BF0", VA = "0x1225BF0")]
		private void PathClose()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x1225C10", Offset = "0x1225C10", VA = "0x1225C10")]
		private void PathLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x1225D9C", Offset = "0x1225D9C", VA = "0x1225D9C")]
		private void PathHorizontalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x1225E48", Offset = "0x1225E48", VA = "0x1225E48")]
		private void PathVerticalLineTo(string coords, bool relative)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x1225EFC", Offset = "0x1225EFC", VA = "0x1225EFC")]
		private void PathCurveTo(string coords, PathSegment.Type type, bool relative)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x1224F48", Offset = "0x1224F48", VA = "0x1224F48")]
		private void WriteBufferTo(List<SplineDefinition> list)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x12264E8", Offset = "0x12264E8", VA = "0x12264E8")]
		private PathSegment[] ParsePathSegment(string coord, PathSegment.Type type)
		{
			return null;
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x1222120", Offset = "0x1222120", VA = "0x1222120")]
		private string EncodePath(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x1221EA4", Offset = "0x1221EA4", VA = "0x1221EA4")]
		private string EncodePolygon(SplineDefinition definition, Axis ax)
		{
			return null;
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x1224E10", Offset = "0x1224E10", VA = "0x1224E10")]
		private string GetAttributeContent(XmlNode node, string attributeName)
		{
			return null;
		}
	}
	[Token(Token = "0x200022E")]
	public class SplineParser
	{
		[Token(Token = "0x200040C")]
		internal class Transformation
		{
			[Token(Token = "0x40017B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected static Matrix4x4 matrix;

			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0x13318A0", Offset = "0x13318A0", VA = "0x13318A0")]
			internal static void ResetMatrix()
			{
			}

			[Token(Token = "0x6001B00")]
			[Address(RVA = "0x1331B7C", Offset = "0x1331B7C", VA = "0x1331B7C", Slot = "4")]
			internal virtual void Push()
			{
			}

			[Token(Token = "0x6001B01")]
			[Address(RVA = "0x13319CC", Offset = "0x13319CC", VA = "0x13319CC")]
			internal static void Apply(SplinePoint[] points)
			{
			}

			[Token(Token = "0x6001B02")]
			[Address(RVA = "0x132FF34", Offset = "0x132FF34", VA = "0x132FF34")]
			public Transformation()
			{
			}
		}

		[Token(Token = "0x200040D")]
		internal class Translate : Transformation
		{
			[Token(Token = "0x40017B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 offset;

			[Token(Token = "0x6001B04")]
			[Address(RVA = "0x1331B84", Offset = "0x1331B84", VA = "0x1331B84")]
			public Translate(Vector2 o)
			{
			}

			[Token(Token = "0x6001B05")]
			[Address(RVA = "0x1331C30", Offset = "0x1331C30", VA = "0x1331C30", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200040E")]
		internal class Rotate : Transformation
		{
			[Token(Token = "0x40017B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float angle;

			[Token(Token = "0x6001B06")]
			[Address(RVA = "0x1330040", Offset = "0x1330040", VA = "0x1330040")]
			public Rotate(float a)
			{
			}

			[Token(Token = "0x6001B07")]
			[Address(RVA = "0x13300BC", Offset = "0x13300BC", VA = "0x13300BC", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x200040F")]
		internal class Scale : Transformation
		{
			[Token(Token = "0x40017B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Vector2 multiplier;

			[Token(Token = "0x6001B08")]
			[Address(RVA = "0x13302C4", Offset = "0x13302C4", VA = "0x13302C4")]
			public Scale(Vector2 s)
			{
			}

			[Token(Token = "0x6001B09")]
			[Address(RVA = "0x1330370", Offset = "0x1330370", VA = "0x1330370", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000410")]
		internal class SkewX : Transformation
		{
			[Token(Token = "0x40017BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x6001B0A")]
			[Address(RVA = "0x133057C", Offset = "0x133057C", VA = "0x133057C")]
			public SkewX(float a)
			{
			}

			[Token(Token = "0x6001B0B")]
			[Address(RVA = "0x13305F8", Offset = "0x13305F8", VA = "0x13305F8", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000411")]
		internal class SkewY : Transformation
		{
			[Token(Token = "0x40017BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float amount;

			[Token(Token = "0x6001B0C")]
			[Address(RVA = "0x13307C8", Offset = "0x13307C8", VA = "0x13307C8")]
			public SkewY(float a)
			{
			}

			[Token(Token = "0x6001B0D")]
			[Address(RVA = "0x1330844", Offset = "0x1330844", VA = "0x1330844", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000412")]
		internal class MatrixTransform : Transformation
		{
			[Token(Token = "0x40017BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Matrix4x4 transformMatrix;

			[Token(Token = "0x6001B0E")]
			[Address(RVA = "0x132FDA8", Offset = "0x132FDA8", VA = "0x132FDA8")]
			public MatrixTransform(float a, float b, float c, float d, float e, float f)
			{
			}

			[Token(Token = "0x6001B0F")]
			[Address(RVA = "0x132FF3C", Offset = "0x132FF3C", VA = "0x132FF3C", Slot = "4")]
			internal override void Push()
			{
			}
		}

		[Token(Token = "0x2000413")]
		internal class SplineDefinition
		{
			[Token(Token = "0x40017BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string name;

			[Token(Token = "0x40017BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Spline.Type type;

			[Token(Token = "0x40017BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal List<SplinePoint> points;

			[Token(Token = "0x40017C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool closed;

			[Token(Token = "0x40017C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal Vector3 position;

			[Token(Token = "0x40017C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Vector3 tangent;

			[Token(Token = "0x40017C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal Vector3 tangent2;

			[Token(Token = "0x40017C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Vector3 normal;

			[Token(Token = "0x40017C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal float size;

			[Token(Token = "0x40017C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal Color color;

			[Token(Token = "0x170002F4")]
			internal int pointCount
			{
				[Token(Token = "0x6001B10")]
				[Address(RVA = "0x1330A14", Offset = "0x1330A14", VA = "0x1330A14")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001B11")]
			[Address(RVA = "0x1330A64", Offset = "0x1330A64", VA = "0x1330A64")]
			internal SplineDefinition(string n, Spline.Type t)
			{
			}

			[Token(Token = "0x6001B12")]
			[Address(RVA = "0x1330B80", Offset = "0x1330B80", VA = "0x1330B80")]
			internal SplineDefinition(string n, Spline spline)
			{
			}

			[Token(Token = "0x6001B13")]
			[Address(RVA = "0x1330D2C", Offset = "0x1330D2C", VA = "0x1330D2C")]
			internal SplinePoint GetLastPoint()
			{
				return default(SplinePoint);
			}

			[Token(Token = "0x6001B14")]
			[Address(RVA = "0x1330DC8", Offset = "0x1330DC8", VA = "0x1330DC8")]
			internal void SetLastPoint(SplinePoint point)
			{
			}

			[Token(Token = "0x6001B15")]
			[Address(RVA = "0x1330E74", Offset = "0x1330E74", VA = "0x1330E74")]
			internal void CreateClosingPoint()
			{
			}

			[Token(Token = "0x6001B16")]
			[Address(RVA = "0x1330F58", Offset = "0x1330F58", VA = "0x1330F58")]
			internal void CreateSmooth()
			{
			}

			[Token(Token = "0x6001B17")]
			[Address(RVA = "0x133107C", Offset = "0x133107C", VA = "0x133107C")]
			internal void CreateBroken()
			{
			}

			[Token(Token = "0x6001B18")]
			[Address(RVA = "0x133121C", Offset = "0x133121C", VA = "0x133121C")]
			internal void CreateLinear()
			{
			}

			[Token(Token = "0x6001B19")]
			[Address(RVA = "0x1331230", Offset = "0x1331230", VA = "0x1331230")]
			internal SplineComputer CreateSplineComputer(Vector3 position, Quaternion rotation)
			{
				return null;
			}

			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0x133143C", Offset = "0x133143C", VA = "0x133143C")]
			internal Spline CreateSpline()
			{
				return null;
			}

			[Token(Token = "0x6001B1B")]
			[Address(RVA = "0x133162C", Offset = "0x133162C", VA = "0x133162C")]
			internal void Transform(List<Transformation> trs)
			{
			}
		}

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string fileName;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal SplineDefinition buffer;

		[Token(Token = "0x170001E3")]
		public string name
		{
			[Token(Token = "0x60010C3")]
			[Address(RVA = "0x132F77C", Offset = "0x132F77C", VA = "0x132F77C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x132F784", Offset = "0x132F784", VA = "0x132F784")]
		internal Vector2[] ParseVector2(string coord)
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x132FB94", Offset = "0x132FB94", VA = "0x132FB94")]
		internal float[] ParseFloat(string coord)
		{
			return null;
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x132F990", Offset = "0x132F990", VA = "0x132F990")]
		internal List<float> ParseFloatArray(string content)
		{
			return null;
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x132FC8C", Offset = "0x132FC8C", VA = "0x132FC8C")]
		public bool IsWHiteSpace(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x132FD50", Offset = "0x132FD50", VA = "0x132FD50")]
		public SplineParser()
		{
		}
	}
}
namespace TFHC_Shader_Samples
{
	[Token(Token = "0x200022F")]
	public class highlightAnimated : MonoBehaviour
	{
		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material mat;

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xC2DFD0", Offset = "0xC2DFD0", VA = "0xC2DFD0")]
		private void Start()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xC2E038", Offset = "0xC2E038", VA = "0xC2E038")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xC2E0B8", Offset = "0xC2E0B8", VA = "0xC2E0B8")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xC2E040", Offset = "0xC2E040", VA = "0xC2E040")]
		private void switchhighlighted(bool highlighted)
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xC2E0C0", Offset = "0xC2E0C0", VA = "0xC2E0C0")]
		public highlightAnimated()
		{
		}
	}
}
namespace TFHC_ForceShield_Shader_Sample
{
	[Token(Token = "0x2000230")]
	public class ForceShieldDestroyBall : MonoBehaviour
	{
		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float lifetime;

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xC2DA44", Offset = "0xC2DA44", VA = "0xC2DA44")]
		private void Start()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xC2DAD0", Offset = "0xC2DAD0", VA = "0xC2DAD0")]
		public ForceShieldDestroyBall()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class ForceShieldImpactDetection : MonoBehaviour
	{
		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float hitTime;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material mat;

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xC2DAE0", Offset = "0xC2DAE0", VA = "0xC2DAE0")]
		private void Start()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xC2DB48", Offset = "0xC2DB48", VA = "0xC2DB48")]
		private void Update()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xC2DBEC", Offset = "0xC2DBEC", VA = "0xC2DBEC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xC2DD9C", Offset = "0xC2DD9C", VA = "0xC2DD9C")]
		public ForceShieldImpactDetection()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class ForceShieldShootBall : MonoBehaviour
	{
		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody bullet;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform origshoot;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float distance;

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xC2DDA4", Offset = "0xC2DDA4", VA = "0xC2DDA4")]
		private void Update()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xC2DFBC", Offset = "0xC2DFBC", VA = "0xC2DFBC")]
		public ForceShieldShootBall()
		{
		}
	}
}
namespace AmplifyImpostors
{
	[Token(Token = "0x2000233")]
	public enum LODReplacement
	{
		[Token(Token = "0x4000C9C")]
		DoNothing,
		[Token(Token = "0x4000C9D")]
		ReplaceCulled,
		[Token(Token = "0x4000C9E")]
		ReplaceLast,
		[Token(Token = "0x4000C9F")]
		ReplaceAllExceptFirst,
		[Token(Token = "0x4000CA0")]
		ReplaceSpecific,
		[Token(Token = "0x4000CA1")]
		ReplaceAfterSpecific,
		[Token(Token = "0x4000CA2")]
		InsertAfter
	}
	[Token(Token = "0x2000234")]
	public enum CutMode
	{
		[Token(Token = "0x4000CA4")]
		Automatic,
		[Token(Token = "0x4000CA5")]
		Manual
	}
	[Token(Token = "0x2000235")]
	public enum FolderMode
	{
		[Token(Token = "0x4000CA7")]
		RelativeToPrefab,
		[Token(Token = "0x4000CA8")]
		Global
	}
	[Token(Token = "0x2000236")]
	public class AmplifyImpostor : MonoBehaviour
	{
		[Token(Token = "0x4000CA9")]
		private const string ShaderGUID = "e82933f4c0eb9ba42aab0739f48efe21";

		[Token(Token = "0x4000CAA")]
		private const string DilateGUID = "57c23892d43bc9f458360024c5985405";

		[Token(Token = "0x4000CAB")]
		private const string PackerGUID = "31bd3cd74692f384a916d9d7ea87710d";

		[Token(Token = "0x4000CAC")]
		private const string ShaderOctaGUID = "572f9be5706148142b8da6e9de53acdb";

		[Token(Token = "0x4000CAD")]
		private const string StandardPreset = "e4786beb7716da54dbb02a632681cc37";

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AmplifyImpostorAsset m_data;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_rootTransform;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LODGroup m_lodGroup;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Renderer[] m_renderers;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LODReplacement m_lodReplacement;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_insertIndex;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public GameObject m_lastImpostor;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public string m_folderPath;

		[NonSerialized]
		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_impostorName;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public CutMode m_cutMode;

		[NonSerialized]
		[Token(Token = "0x4000CB8")]
		private const float StartXRotation = -90f;

		[NonSerialized]
		[Token(Token = "0x4000CB9")]
		private const float StartYRotation = 90f;

		[NonSerialized]
		[Token(Token = "0x4000CBA")]
		private const int MinAlphaResolution = 256;

		[NonSerialized]
		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture[] m_rtGBuffers;

		[NonSerialized]
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture[] m_alphaGBuffers;

		[NonSerialized]
		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RenderTexture m_trueDepth;

		[NonSerialized]
		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture2D m_alphaTex;

		[NonSerialized]
		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float m_trueFitsize;

		[NonSerialized]
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float m_depthFitsize;

		[NonSerialized]
		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Bounds m_originalBound;

		[NonSerialized]
		[Token(Token = "0x4000CC2")]
		private const int BlockSize = 65536;

		[Token(Token = "0x170001E4")]
		public AmplifyImpostorAsset Data
		{
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0xDD595C", Offset = "0xDD595C", VA = "0xDD595C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D7")]
			[Address(RVA = "0xDD5964", Offset = "0xDD5964", VA = "0xDD5964")]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public Transform RootTransform
		{
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0xDD596C", Offset = "0xDD596C", VA = "0xDD596C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xDD5974", Offset = "0xDD5974", VA = "0xDD5974")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public LODGroup LodGroup
		{
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0xDD597C", Offset = "0xDD597C", VA = "0xDD597C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xDD5984", Offset = "0xDD5984", VA = "0xDD5984")]
			set
			{
			}
		}

		[Token(Token = "0x170001E7")]
		public Renderer[] Renderers
		{
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0xDD598C", Offset = "0xDD598C", VA = "0xDD598C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0xDD5994", Offset = "0xDD5994", VA = "0xDD5994")]
			set
			{
			}
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xDD599C", Offset = "0xDD599C", VA = "0xDD599C")]
		private void GenerateTextures(List<TextureOutput> outputList)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xDD5B60", Offset = "0xDD5B60", VA = "0xDD5B60")]
		private void GenerateAlphaTextures(List<TextureOutput> outputList)
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xDD5CC4", Offset = "0xDD5CC4", VA = "0xDD5CC4")]
		private void ClearBuffers()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xDD5D4C", Offset = "0xDD5D4C", VA = "0xDD5D4C")]
		private void ClearAlphaBuffers()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xDD5DD4", Offset = "0xDD5DD4", VA = "0xDD5DD4")]
		public void RenderImpostor(ImpostorType impostorType, int targetAmount, bool impostorMaps = true, bool combinedAlphas = false, bool useMinResolution = false, [Optional] Shader customShader)
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xDD75B4", Offset = "0xDD75B4", VA = "0xDD75B4")]
		private Vector3 OctahedronToVector(Vector2 oct)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xDD7184", Offset = "0xDD7184", VA = "0xDD7184")]
		private Vector3 OctahedronToVector(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xDD72B0", Offset = "0xDD72B0", VA = "0xDD72B0")]
		private Vector3 HemiOctahedronToVector(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xDD76E0", Offset = "0xDD76E0", VA = "0xDD76E0")]
		public Mesh GenerateMesh(Vector2[] points, Vector3 offset, float width = 1f, float height = 1f, bool invertY = true)
		{
			return null;
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xDD7DB4", Offset = "0xDD7DB4", VA = "0xDD7DB4")]
		public AmplifyImpostor()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public static class BoundsEx
	{
		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xDD73A0", Offset = "0xDD73A0", VA = "0xDD73A0")]
		public static Bounds Transform(this Bounds bounds, Matrix4x4 matrix)
		{
			return default(Bounds);
		}
	}
	[Token(Token = "0x2000238")]
	public static class Texture2DEx
	{
		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] Footer;

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xDD8470", Offset = "0xDD8470", VA = "0xDD8470")]
		public static byte[] EncodeToTGA(this Texture2D tex, bool withAlpha = true)
		{
			return null;
		}
	}
	[Token(Token = "0x2000239")]
	public static class SpriteUtilityEx
	{
		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Type type;

		[Token(Token = "0x170001E8")]
		public static Type Type
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xDD8024", Offset = "0xDD8024", VA = "0xDD8024")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xDD8168", Offset = "0xDD8168", VA = "0xDD8168")]
		public static void GenerateOutline(Texture2D texture, Rect rect, float detail, byte alphaTolerance, bool holeDetection, out Vector2[][] paths)
		{
		}
	}
	[Token(Token = "0x200023A")]
	public static class Vector2Ex
	{
		[Serializable]
		[Token(Token = "0x2000414")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE73C", Offset = "0x7EE73C")]
		private sealed class <>c
		{
			[Token(Token = "0x40017C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40017C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<Vector2> <>9__3_0;

			[Token(Token = "0x6001B1D")]
			[Address(RVA = "0xDD96A8", Offset = "0xDD96A8", VA = "0xDD96A8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001B1E")]
			[Address(RVA = "0xDD96B0", Offset = "0xDD96B0", VA = "0xDD96B0")]
			internal int <ConvexHull>b__3_0(Vector2 a, Vector2 b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xDD8C84", Offset = "0xDD8C84", VA = "0xDD8C84")]
		public static float Cross(this Vector2 O, Vector2 A, Vector2 B)
		{
			return default(float);
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xDD8CA4", Offset = "0xDD8CA4", VA = "0xDD8CA4")]
		public static float TriangleArea(this Vector2 O, Vector2 A, Vector2 B)
		{
			return default(float);
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xDD8D54", Offset = "0xDD8D54", VA = "0xDD8D54")]
		public static float TriangleArea(this Vector3 O, Vector3 A, Vector3 B)
		{
			return default(float);
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xDD8E00", Offset = "0xDD8E00", VA = "0xDD8E00")]
		public static Vector2[] ConvexHull(Vector2[] P)
		{
			return null;
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xDD9114", Offset = "0xDD9114", VA = "0xDD9114")]
		public static Vector2[] ScaleAlongNormals(Vector2[] P, float scaleAmount)
		{
			return null;
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xDD93B0", Offset = "0xDD93B0", VA = "0xDD93B0")]
		private static Vector2 GetIntersectionPointCoordinates(Vector2 A1, Vector2 A2, Vector2 B1, Vector2 B2)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xDD9550", Offset = "0xDD9550", VA = "0xDD9550")]
		private static float OutsideBounds(Vector2 P)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200023B")]
	public static class ImpostorBakingTools
	{
		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string PrefGlobalFolder;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string PrefGlobalRelativeFolder;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string PrefGlobalDefault;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string PrefGlobalTexImport;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string PrefGlobalCreateLodGroup;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string PrefGlobalGBuffer0Name;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string PrefGlobalGBuffer1Name;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string PrefGlobalGBuffer2Name;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string PrefGlobalGBuffer3Name;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string PrefGlobalBakingOptions;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string PrefDataImpType;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string PrefDataTexSizeLocked;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string PrefDataTexSizeSelected;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly string PrefDataTexSizeX;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string PrefDataTexSizeY;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly string PrefDataDecoupledFrames;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string PrefDataXFrames;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly string PrefDataYFrames;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string PrefDataPixelBleeding;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly string PrefDataTolerance;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly string PrefDataNormalScale;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly string PrefDataMaxVertices;
	}
	[Token(Token = "0x200023C")]
	public class Triangulator
	{
		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vector2> m_points;

		[Token(Token = "0x170001E9")]
		public List<Vector2> Points
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xDD8740", Offset = "0xDD8740", VA = "0xDD8740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xDD7A84", Offset = "0xDD7A84", VA = "0xDD7A84")]
		public Triangulator(Vector2[] points)
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xDD8748", Offset = "0xDD8748", VA = "0xDD8748")]
		public Triangulator(Vector2[] points, bool invertY = true)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xDD7B28", Offset = "0xDD7B28", VA = "0xDD7B28")]
		public int[] Triangulate()
		{
			return null;
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xDD88A0", Offset = "0xDD88A0", VA = "0xDD88A0")]
		private float Area()
		{
			return default(float);
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xDD89BC", Offset = "0xDD89BC", VA = "0xDD89BC")]
		private bool Snip(int u, int v, int w, int n, int[] V)
		{
			return default(bool);
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xDD8C10", Offset = "0xDD8C10", VA = "0xDD8C10")]
		private bool InsideTriangle(Vector2 pt, Vector2 v1, Vector2 v2, Vector2 v3)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x200023D")]
	public class VersionInfo
	{
		[Token(Token = "0x4000CDC")]
		public const byte Major = 0;

		[Token(Token = "0x4000CDD")]
		public const byte Minor = 9;

		[Token(Token = "0x4000CDE")]
		public const byte Release = 1;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static byte Revision;

		[Token(Token = "0x170001EA")]
		public static int FullNumber
		{
			[Token(Token = "0x60010FE")]
			[Address(RVA = "0xDD9848", Offset = "0xDD9848", VA = "0xDD9848")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EB")]
		public static string FullLabel
		{
			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xDD98B8", Offset = "0xDD98B8", VA = "0xDD98B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xDD96F4", Offset = "0xDD96F4", VA = "0xDD96F4")]
		public static string StaticToString()
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xDD9950", Offset = "0xDD9950", VA = "0xDD9950")]
		public VersionInfo()
		{
		}
	}
}
namespace Interaction.VR
{
	[Token(Token = "0x200023E")]
	[SelectionBase]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EDEB8", Offset = "0x7EDEB8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x7EDEB8", Offset = "0x7EDEB8")]
	public class XRGrabInteractable : XRBaseInteractable
	{
		[Token(Token = "0x4000CE0")]
		private const float k_DefaultTighteningAmount = 0.5f;

		[Token(Token = "0x4000CE1")]
		private const float k_DefaultSmoothingAmount = 5f;

		[Token(Token = "0x4000CE2")]
		private const float k_VelocityPredictionFactor = 0.6f;

		[Token(Token = "0x4000CE3")]
		private const float k_AngularVelocityDamping = 0.95f;

		[Token(Token = "0x4000CE4")]
		private const int k_ThrowSmoothingFrameCount = 20;

		[Token(Token = "0x4000CE5")]
		private const float k_DefaultAttachEaseInTime = 0.15f;

		[Token(Token = "0x4000CE6")]
		private const float k_DefaultThrowSmoothingDuration = 0.25f;

		[Token(Token = "0x4000CE7")]
		private const float k_DefaultThrowVelocityScale = 1.5f;

		[Token(Token = "0x4000CE8")]
		private const float k_DefaultThrowAngularVelocityScale = 0.25f;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Transform m_AttachTransform;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private float m_AttachEaseInTime;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private MovementType m_MovementType;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private bool m_TrackPosition;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		[SerializeField]
		private bool m_SmoothPosition;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F57A8", Offset = "0x7F57A8")]
		private float m_SmoothPositionAmount;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F57E8", Offset = "0x7F57E8")]
		private float m_TightenPosition;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private bool m_TrackRotation;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		[SerializeField]
		private bool m_SmoothRotation;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F5848", Offset = "0x7F5848")]
		private float m_SmoothRotationAmount;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F5888", Offset = "0x7F5888")]
		private float m_TightenRotation;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private bool m_ThrowOnDetach;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_ThrowSmoothingDuration;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F58E8", Offset = "0x7F58E8")]
		private AnimationCurve m_ThrowSmoothingCurve;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_ThrowVelocityScale;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private float m_ThrowAngularVelocityScale;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private bool m_GravityOnDetach;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		[SerializeField]
		private bool m_RetainTransformParent;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7F5974", Offset = "0x7F5974")]
		private Transform <RigTransform>k__BackingField;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool m_WasKinematic;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool m_UsedGravity;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Transform m_OriginalSceneParent;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private XRBaseInteractor m_SelectingInteractor;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 m_InteractorLocalPosition;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Quaternion m_InteractorLocalRotation;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 m_TargetWorldPosition;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Quaternion m_TargetWorldRotation;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float m_CurrentAttachEaseTime;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private MovementType m_CurrentMovementType;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool m_DetachInLateUpdate;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Vector3 m_DetachVelocity;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3 m_DetachAngularVelocity;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private int m_ThrowSmoothingCurrentFrame;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float[] m_ThrowSmoothingFrameTimes;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector3[] m_ThrowSmoothingVelocityFrames;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3[] m_ThrowSmoothingAngularVelocityFrames;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Rigidbody m_RigidBody;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 m_LastPosition;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Quaternion m_LastRotation;

		[Token(Token = "0x170001EC")]
		public Transform attachTransform
		{
			[Token(Token = "0x6001102")]
			[Address(RVA = "0xAA67A4", Offset = "0xAA67A4", VA = "0xAA67A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001103")]
			[Address(RVA = "0xAA67AC", Offset = "0xAA67AC", VA = "0xAA67AC")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public float attachEaseInTime
		{
			[Token(Token = "0x6001104")]
			[Address(RVA = "0xAA67B4", Offset = "0xAA67B4", VA = "0xAA67B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001105")]
			[Address(RVA = "0xAA67BC", Offset = "0xAA67BC", VA = "0xAA67BC")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public MovementType movementType
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xAA67C4", Offset = "0xAA67C4", VA = "0xAA67C4")]
			get
			{
				return default(MovementType);
			}
			[Token(Token = "0x6001107")]
			[Address(RVA = "0xAA67CC", Offset = "0xAA67CC", VA = "0xAA67CC")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public bool trackPosition
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0xAA67D4", Offset = "0xAA67D4", VA = "0xAA67D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001109")]
			[Address(RVA = "0xAA67DC", Offset = "0xAA67DC", VA = "0xAA67DC")]
			set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public bool smoothPosition
		{
			[Token(Token = "0x600110A")]
			[Address(RVA = "0xAA67E8", Offset = "0xAA67E8", VA = "0xAA67E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600110B")]
			[Address(RVA = "0xAA67F0", Offset = "0xAA67F0", VA = "0xAA67F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001F1")]
		public float smoothPositionAmount
		{
			[Token(Token = "0x600110C")]
			[Address(RVA = "0xAA67FC", Offset = "0xAA67FC", VA = "0xAA67FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600110D")]
			[Address(RVA = "0xAA6804", Offset = "0xAA6804", VA = "0xAA6804")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public float tightenPosition
		{
			[Token(Token = "0x600110E")]
			[Address(RVA = "0xAA680C", Offset = "0xAA680C", VA = "0xAA680C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600110F")]
			[Address(RVA = "0xAA6814", Offset = "0xAA6814", VA = "0xAA6814")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public bool trackRotation
		{
			[Token(Token = "0x6001110")]
			[Address(RVA = "0xAA681C", Offset = "0xAA681C", VA = "0xAA681C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001111")]
			[Address(RVA = "0xAA6824", Offset = "0xAA6824", VA = "0xAA6824")]
			set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		public bool smoothRotation
		{
			[Token(Token = "0x6001112")]
			[Address(RVA = "0xAA6830", Offset = "0xAA6830", VA = "0xAA6830")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001113")]
			[Address(RVA = "0xAA6838", Offset = "0xAA6838", VA = "0xAA6838")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public float smoothRotationAmount
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0xAA6844", Offset = "0xAA6844", VA = "0xAA6844")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001115")]
			[Address(RVA = "0xAA684C", Offset = "0xAA684C", VA = "0xAA684C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public float tightenRotation
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0xAA6854", Offset = "0xAA6854", VA = "0xAA6854")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001117")]
			[Address(RVA = "0xAA685C", Offset = "0xAA685C", VA = "0xAA685C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public bool throwOnDetach
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0xAA6864", Offset = "0xAA6864", VA = "0xAA6864")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001119")]
			[Address(RVA = "0xAA686C", Offset = "0xAA686C", VA = "0xAA686C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public float throwSmoothingDuration
		{
			[Token(Token = "0x600111A")]
			[Address(RVA = "0xAA6878", Offset = "0xAA6878", VA = "0xAA6878")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600111B")]
			[Address(RVA = "0xAA6880", Offset = "0xAA6880", VA = "0xAA6880")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public float throwVelocityScale
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0xAA6888", Offset = "0xAA6888", VA = "0xAA6888")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600111D")]
			[Address(RVA = "0xAA6890", Offset = "0xAA6890", VA = "0xAA6890")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public float throwAngularVelocityScale
		{
			[Token(Token = "0x600111E")]
			[Address(RVA = "0xAA6898", Offset = "0xAA6898", VA = "0xAA6898")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600111F")]
			[Address(RVA = "0xAA68A0", Offset = "0xAA68A0", VA = "0xAA68A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public bool gravityOnDetach
		{
			[Token(Token = "0x6001120")]
			[Address(RVA = "0xAA68A8", Offset = "0xAA68A8", VA = "0xAA68A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001121")]
			[Address(RVA = "0xAA68B0", Offset = "0xAA68B0", VA = "0xAA68B0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public bool retainTransformParent
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0xAA68BC", Offset = "0xAA68BC", VA = "0xAA68BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001123")]
			[Address(RVA = "0xAA68C4", Offset = "0xAA68C4", VA = "0xAA68C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public Transform RigTransform
		{
			[Token(Token = "0x6001124")]
			[Address(RVA = "0xAA68D0", Offset = "0xAA68D0", VA = "0xAA68D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBD38", Offset = "0x7FBD38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001125")]
			[Address(RVA = "0xAA68D8", Offset = "0xAA68D8", VA = "0xAA68D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBD48", Offset = "0x7FBD48")]
			private set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public XRBaseInteractor selectingInteractor
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0xAA68E0", Offset = "0xAA68E0", VA = "0xAA68E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xAA68E8", Offset = "0xAA68E8", VA = "0xAA68E8", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xAA6A10", Offset = "0xAA6A10", VA = "0xAA6A10", Slot = "16")]
		public override void ProcessInteractable(XRInteractionUpdateOrder.UpdatePhase updatePhase)
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xAA7AD4", Offset = "0xAA7AD4", VA = "0xAA7AD4")]
		private Vector3 GetWorldAttachPosition(XRBaseInteractor interactor)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xAA7C14", Offset = "0xAA7C14", VA = "0xAA7C14")]
		private Quaternion GetWorldAttachRotation(XRBaseInteractor interactor)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xAA718C", Offset = "0xAA718C", VA = "0xAA718C")]
		private void UpdateTarget(float timeDelta)
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xAA79DC", Offset = "0xAA79DC", VA = "0xAA79DC")]
		private void PerformInstantaneousUpdate(float timeDelta, XRInteractionUpdateOrder.UpdatePhase updatePhase)
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xAA6BA0", Offset = "0xAA6BA0", VA = "0xAA6BA0")]
		private void PerformKinematicUpdate(float timeDelta, XRInteractionUpdateOrder.UpdatePhase updatePhase)
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xAA6D54", Offset = "0xAA6D54", VA = "0xAA6D54")]
		private void PerformVelocityTrackingUpdate(float timeDelta, XRInteractionUpdateOrder.UpdatePhase updatePhase)
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xAA7CFC", Offset = "0xAA7CFC", VA = "0xAA7CFC")]
		private void Teleport(Transform teleportTransform)
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xAA7A6C", Offset = "0xAA7A6C", VA = "0xAA7A6C")]
		private void Detach()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xAA7EC4", Offset = "0xAA7EC4", VA = "0xAA7EC4")]
		private void UpdateInteractorLocalPose(XRBaseInteractor interactor)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xAA8190", Offset = "0xAA8190", VA = "0xAA8190", Slot = "10")]
		protected override void OnSelectEnter(XRBaseInteractor interactor)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xAA8688", Offset = "0xAA8688", VA = "0xAA8688", Slot = "11")]
		protected override void OnSelectExit(XRBaseInteractor interactor)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xAA882C", Offset = "0xAA882C", VA = "0xAA882C", Slot = "6")]
		public override bool IsHoverableBy(XRBaseInteractor interactor)
		{
			return default(bool);
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xAA8460", Offset = "0xAA8460", VA = "0xAA8460")]
		private void SmoothVelocityStart()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xAA8728", Offset = "0xAA8728", VA = "0xAA8728")]
		private void SmoothVelocityEnd()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xAA7514", Offset = "0xAA7514", VA = "0xAA7514")]
		private void SmoothVelocityUpdate()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xAA8834", Offset = "0xAA8834", VA = "0xAA8834")]
		private Vector3 getSmoothedVelocityValue(Vector3[] velocityFrames)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xAA8B04", Offset = "0xAA8B04", VA = "0xAA8B04")]
		public XRGrabInteractable()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class XROffsetGrabbable : XRGrabInteractable
	{
		[Token(Token = "0x2000415")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE74C", Offset = "0x7EE74C")]
		private sealed class <WaitAndRecover>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XROffsetGrabbable <>4__this;

			[Token(Token = "0x170002F5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B22")]
				[Address(RVA = "0xAA9510", Offset = "0xAA9510", VA = "0xAA9510", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B24")]
				[Address(RVA = "0xAA9578", Offset = "0xAA9578", VA = "0xAA9578", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B1F")]
			[Address(RVA = "0xAA92C4", Offset = "0xAA92C4", VA = "0xAA92C4")]
			[DebuggerHidden]
			public <WaitAndRecover>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001B20")]
			[Address(RVA = "0xAA94B4", Offset = "0xAA94B4", VA = "0xAA94B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B21")]
			[Address(RVA = "0xAA94B8", Offset = "0xAA94B8", VA = "0xAA94B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B23")]
			[Address(RVA = "0xAA9518", Offset = "0xAA9518", VA = "0xAA9518", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000416")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE75C", Offset = "0x7EE75C")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x40017CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Collider[] toggleCollidersBackOn;

			[Token(Token = "0x40017CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public XROffsetGrabbable <>4__this;

			[Token(Token = "0x6001B25")]
			[Address(RVA = "0xAA93B8", Offset = "0xAA93B8", VA = "0xAA93B8")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x6001B26")]
			[Address(RVA = "0xAA9454", Offset = "0xAA9454", VA = "0xAA9454")]
			internal void <TransitionToInitialState>b__0()
			{
			}

			[Token(Token = "0x6001B27")]
			[Address(RVA = "0xAA93C0", Offset = "0xAA93C0", VA = "0xAA93C0")]
			internal Collider[] <TransitionToInitialState>g__ToggleCollidersOff|1()
			{
				return null;
			}

			[Token(Token = "0x6001B28")]
			[Address(RVA = "0xAA9458", Offset = "0xAA9458", VA = "0xAA9458")]
			internal void <TransitionToInitialState>g__ToggleCollidersOn|2(Collider[] colliders)
			{
			}
		}

		[Token(Token = "0x4000D10")]
		private const float InitialStateLerpDuration = 0.25f;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F5984", Offset = "0x7F5984")]
		[SerializeField]
		private bool returnToInitialOnRelease;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Transform initialParent;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Vector3 initialLocalPosition;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private Quaternion initialLocalRotation;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected InteractorData savedInteractor;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected Rigidbody rigidbody;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		private bool canBeGrabbed;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F59E0", Offset = "0x7F59E0")]
		[SerializeField]
		protected bool ignoreReset;

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xAA8BF0", Offset = "0xAA8BF0", VA = "0xAA8BF0", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xAA8CBC", Offset = "0xAA8CBC", VA = "0xAA8CBC", Slot = "7")]
		public override bool IsSelectableBy(XRBaseInteractor selectInteractor)
		{
			return default(bool);
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xAA8CD4", Offset = "0xAA8CD4", VA = "0xAA8CD4", Slot = "6")]
		public override bool IsHoverableBy(XRBaseInteractor interactor)
		{
			return default(bool);
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xAA8CDC", Offset = "0xAA8CDC", VA = "0xAA8CDC", Slot = "10")]
		protected override void OnSelectEnter(XRBaseInteractor args)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xAA8D14", Offset = "0xAA8D14", VA = "0xAA8D14", Slot = "11")]
		protected override void OnSelectExit(XRBaseInteractor args)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xAA8E60", Offset = "0xAA8E60", VA = "0xAA8E60", Slot = "17")]
		protected virtual void Grab(XRBaseInteractor interactor)
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xAA9014", Offset = "0xAA9014", VA = "0xAA9014", Slot = "18")]
		protected virtual void Drop(XRBaseInteractor interactor)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xAA8D54", Offset = "0xAA8D54", VA = "0xAA8D54")]
		private void TrySendToInitialState(XRBaseInteractor interactor)
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xAA9254", Offset = "0xAA9254", VA = "0xAA9254")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBD58", Offset = "0x7FBD58")]
		private IEnumerator WaitAndRecover()
		{
			return null;
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xAA92F0", Offset = "0xAA92F0", VA = "0xAA92F0")]
		public void SendHapticPulse()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xAA9388", Offset = "0xAA9388", VA = "0xAA9388")]
		private void ResetGrabbable()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xAA90FC", Offset = "0xAA90FC", VA = "0xAA90FC")]
		private void TransitionToInitialState()
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xAA9448", Offset = "0xAA9448", VA = "0xAA9448")]
		public XROffsetGrabbable()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class InteractorData
	{
		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public XRBaseInteractor interactor;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SavedTransform savedTransform;

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xAA66FC", Offset = "0xAA66FC", VA = "0xAA66FC")]
		public InteractorData(XRBaseInteractor interactor, SavedTransform savedTransform)
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class SavedTransform
	{
		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 OriginalPosition;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion OriginalRotation;

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xAA6734", Offset = "0xAA6734", VA = "0xAA6734")]
		public SavedTransform(Vector3 originalPosition, Quaternion originalRotation)
		{
		}
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x2000242")]
	public class ParticleSystemDestroyer : MonoBehaviour
	{
		[Token(Token = "0x2000417")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE76C", Offset = "0x7EE76C")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ParticleSystemDestroyer <>4__this;

			[Token(Token = "0x40017D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ParticleSystem[] <systems>5__2;

			[Token(Token = "0x40017D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <stopTime>5__3;

			[Token(Token = "0x170002F7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B2C")]
				[Address(RVA = "0xC399C0", Offset = "0xC399C0", VA = "0xC399C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B2E")]
				[Address(RVA = "0xC39A28", Offset = "0xC39A28", VA = "0xC39A28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B29")]
			[Address(RVA = "0xC39680", Offset = "0xC39680", VA = "0xC39680")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001B2A")]
			[Address(RVA = "0xC396CC", Offset = "0xC396CC", VA = "0xC396CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B2B")]
			[Address(RVA = "0xC396D0", Offset = "0xC396D0", VA = "0xC396D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B2D")]
			[Address(RVA = "0xC399C8", Offset = "0xC399C8", VA = "0xC399C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDuration;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxDuration;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_MaxLifetime;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool m_EarlyStop;

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xC39610", Offset = "0xC39610", VA = "0xC39610")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBDBC", Offset = "0x7FBDBC")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xC396AC", Offset = "0xC396AC", VA = "0xC396AC")]
		public void Stop()
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xC396B8", Offset = "0xC396B8", VA = "0xC396B8")]
		public ParticleSystemDestroyer()
		{
		}
	}
}
namespace System
{
	[Token(Token = "0x2000243")]
	public static class ObjectExtensions
	{
		[Token(Token = "0x2000418")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE77C", Offset = "0x7EE77C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x40017D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IDictionary<object, object> visited;

			[Token(Token = "0x6001B2F")]
			[Address(RVA = "0xC2D474", Offset = "0xC2D474", VA = "0xC2D474")]
			public <>c__DisplayClass3_0()
			{
			}
		}

		[Token(Token = "0x2000419")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE78C", Offset = "0x7EE78C")]
		private sealed class <>c__DisplayClass3_1
		{
			[Token(Token = "0x40017D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Array clonedArray;

			[Token(Token = "0x40017D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass3_0 CS$<>8__locals1;

			[Token(Token = "0x6001B30")]
			[Address(RVA = "0xC2D47C", Offset = "0xC2D47C", VA = "0xC2D47C")]
			public <>c__DisplayClass3_1()
			{
			}

			[Token(Token = "0x6001B31")]
			[Address(RVA = "0xC2D960", Offset = "0xC2D960", VA = "0xC2D960")]
			internal void <InternalCopy>b__0(Array array, int[] indices)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200041A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE79C", Offset = "0x7EE79C")]
		private sealed class <>c
		{
			[Token(Token = "0x40017D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40017D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<FieldInfo, bool> <>9__4_0;

			[Token(Token = "0x6001B33")]
			[Address(RVA = "0xC2D93C", Offset = "0xC2D93C", VA = "0xC2D93C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001B34")]
			[Address(RVA = "0xC2D944", Offset = "0xC2D944", VA = "0xC2D944")]
			internal bool <RecursiveCopyBaseTypePrivateFields>b__4_0(FieldInfo info)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly MethodInfo CloneMethod;

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xC2CE90", Offset = "0xC2CE90", VA = "0xC2CE90")]
		public static bool IsPrimitive(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xC2CF50", Offset = "0xC2CF50", VA = "0xC2CF50")]
		public static object Copy(this object originalObject)
		{
			return null;
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xC2D050", Offset = "0xC2D050", VA = "0xC2D050")]
		private static object InternalCopy(object originalObject, IDictionary<object, object> visited)
		{
			return null;
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xC2D62C", Offset = "0xC2D62C", VA = "0xC2D62C")]
		private static void RecursiveCopyBaseTypePrivateFields(object originalObject, IDictionary<object, object> visited, object cloneObject, Type typeToReflect)
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xC2D484", Offset = "0xC2D484", VA = "0xC2D484")]
		private static void CopyFields(object originalObject, IDictionary<object, object> visited, object cloneObject, Type typeToReflect, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy, [Optional] Func<FieldInfo, bool> filter)
		{
		}

		[Token(Token = "0x6001151")]
		public static T Copy<T>(this T original)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000244")]
	public class ReferenceEqualityComparer : EqualityComparer<object>
	{
		[Token(Token = "0x6001153")]
		[Address(RVA = "0xC2DA18", Offset = "0xC2DA18", VA = "0xC2DA18", Slot = "8")]
		public override bool Equals(object x, object y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xC2DA24", Offset = "0xC2DA24", VA = "0xC2DA24", Slot = "9")]
		public override int GetHashCode(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xC2D000", Offset = "0xC2D000", VA = "0xC2D000")]
		public ReferenceEqualityComparer()
		{
		}
	}
}
namespace System.ArrayExtensions
{
	[Token(Token = "0x2000245")]
	public static class ArrayExtensions
	{
		[Token(Token = "0x6001156")]
		[Address(RVA = "0xC2CC00", Offset = "0xC2CC00", VA = "0xC2CC00")]
		public static void ForEach(this Array array, Action<Array, int[]> action)
		{
		}
	}
	[Token(Token = "0x2000246")]
	internal class ArrayTraverse
	{
		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] Position;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] maxLengths;

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xC2CCB0", Offset = "0xC2CCB0", VA = "0xC2CCB0")]
		public ArrayTraverse(Array array)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xC2CDCC", Offset = "0xC2CDCC", VA = "0xC2CDCC")]
		public bool Step()
		{
			return default(bool);
		}
	}
}
namespace Virtence.VText
{
	[Token(Token = "0x2000247")]
	public class VFontHash
	{
		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static Hashtable fonts;

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x145E1A0", Offset = "0x145E1A0", VA = "0x145E1A0")]
		static VFontHash()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x145E20C", Offset = "0x145E20C", VA = "0x145E20C")]
		public static VFontInfo GetFontInfo(string fontname)
		{
			return null;
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x145E8CC", Offset = "0x145E8CC", VA = "0x145E8CC")]
		public VFontHash()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public struct FontBounds
	{
		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float minX;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float maxX;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float minY;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float maxY;
	}
	[Token(Token = "0x2000249")]
	public class VFontInfo
	{
		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Hashtable m_glyphs;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_fontHandle;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FontBounds m_bounds;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected string m_fontName;

		[Token(Token = "0x170001FF")]
		public float glyphMinX
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0x145E8D4", Offset = "0x145E8D4", VA = "0x145E8D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000200")]
		public float glyphMaxX
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0x145E8DC", Offset = "0x145E8DC", VA = "0x145E8DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000201")]
		public float glyphMinY
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0x145E8E4", Offset = "0x145E8E4", VA = "0x145E8E4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000202")]
		public float glyphMaxY
		{
			[Token(Token = "0x600115F")]
			[Address(RVA = "0x145E8EC", Offset = "0x145E8EC", VA = "0x145E8EC")]
			get
			{
				return default(float);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6001160")]
		[Address(RVA = "0x145E8F4", Offset = "0x145E8F4", VA = "0x145E8F4")]
		private static extern IntPtr OpenFont([In] IntPtr fontFilename);

		[PreserveSig]
		[Token(Token = "0x6001161")]
		[Address(RVA = "0x145E970", Offset = "0x145E970", VA = "0x145E970")]
		private static extern void CloseFont([In] IntPtr fontHandle);

		[PreserveSig]
		[Token(Token = "0x6001162")]
		[Address(RVA = "0x145E9F0", Offset = "0x145E9F0", VA = "0x145E9F0")]
		private static extern float GetAscender([In] IntPtr fontHandle);

		[PreserveSig]
		[Token(Token = "0x6001163")]
		[Address(RVA = "0x145EA70", Offset = "0x145EA70", VA = "0x145EA70")]
		private static extern float GetDescender([In] IntPtr fontHandle);

		[PreserveSig]
		[Token(Token = "0x6001164")]
		[Address(RVA = "0x145EAF0", Offset = "0x145EAF0", VA = "0x145EAF0")]
		private static extern bool GetFontBounds([Out] IntPtr b, [In] IntPtr fontHandle);

		[PreserveSig]
		[Token(Token = "0x6001165")]
		[Address(RVA = "0x145EB88", Offset = "0x145EB88", VA = "0x145EB88")]
		private static extern bool GetKerning2(ref float kx, ref float ky, [In] IntPtr fontHandle, uint first, uint second);

		[PreserveSig]
		[Token(Token = "0x6001166")]
		[Address(RVA = "0x145EC40", Offset = "0x145EC40", VA = "0x145EC40")]
		private static extern void SetQuality([In] IntPtr fontHandle, int percent);

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x145ECD0", Offset = "0x145ECD0", VA = "0x145ECD0")]
		private void SafeOpenFont(string fn)
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x145E5B0", Offset = "0x145E5B0", VA = "0x145E5B0")]
		public VFontInfo(string fontname)
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x145EFE4", Offset = "0x145EFE4", VA = "0x145EFE4", Slot = "1")]
		~VFontInfo()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x145F04C", Offset = "0x145F04C", VA = "0x145F04C")]
		public void Shutdown()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x145F0B0", Offset = "0x145F0B0", VA = "0x145F0B0")]
		public void SetQuality(int percent)
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x145F128", Offset = "0x145F128", VA = "0x145F128")]
		protected VGlyphInfo FetchGlyphInfo(Hashtable glyphs, char c)
		{
			return null;
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x145F528", Offset = "0x145F528", VA = "0x145F528")]
		protected Vector2 Kerning(char a, char b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x145F5D8", Offset = "0x145F5D8", VA = "0x145F5D8")]
		public Vector2 LineSize(VTextInterface vtext, string str)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x145F7E8", Offset = "0x145F7E8", VA = "0x145F7E8")]
		public Bounds GetBounds(VTextInterface vtext, string str)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0x145FAFC", Offset = "0x145FAFC", VA = "0x145FAFC")]
		public void LayoutText3D(VTextInterface vtext, string str)
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x14610CC", Offset = "0x14610CC", VA = "0x14610CC")]
		public void CreateText3D(VTextInterface vtext, string str)
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x145FB04", Offset = "0x145FB04", VA = "0x145FB04")]
		protected void CreateText(VTextInterface vtext, string str, bool layoutOnly)
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class VGlyphInfo
	{
		[Token(Token = "0x200041B")]
		public struct GlyphInfo
		{
			[Token(Token = "0x40017D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float sizeX;

			[Token(Token = "0x40017D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float sizeY;

			[Token(Token = "0x40017DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float advanceX;

			[Token(Token = "0x40017DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float advanceY;

			[Token(Token = "0x40017DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float horizBearingX;

			[Token(Token = "0x40017DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float horizBearingY;

			[Token(Token = "0x40017DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float vertBearingX;

			[Token(Token = "0x40017DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float vertBearingY;

			[Token(Token = "0x40017E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numContours;
		}

		[Token(Token = "0x200041C")]
		protected class BaseAttributes
		{
			[Token(Token = "0x40017E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 _v;

			[Token(Token = "0x40017E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 _bv;

			[Token(Token = "0x40017E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 _n;

			[Token(Token = "0x40017E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector2 _uv;

			[Token(Token = "0x6001B35")]
			[Address(RVA = "0x14644E8", Offset = "0x14644E8", VA = "0x14644E8")]
			public BaseAttributes(Vector3 v, Vector3 bv, Vector3 n, float dist)
			{
			}
		}

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 size;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 advance;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 horizontalBearing;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 verticalBearing;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected char _id;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Mesh _mesh;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IntPtr _fh;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _numContours;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[][] _contours;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected int[] sideIndices;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected int[] bevelIndices;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 zVector;

		[PreserveSig]
		[Token(Token = "0x6001173")]
		[Address(RVA = "0x1461D3C", Offset = "0x1461D3C", VA = "0x1461D3C")]
		private static extern bool GetGlyphInfo([Out] IntPtr gi, [In] IntPtr fontHandle, [In] uint id);

		[PreserveSig]
		[Token(Token = "0x6001174")]
		[Address(RVA = "0x1461DDC", Offset = "0x1461DDC", VA = "0x1461DDC")]
		private static extern int GetGlyphVertices(ref IntPtr buffer, [In] IntPtr fontHandle, [In] uint id);

		[PreserveSig]
		[Token(Token = "0x6001175")]
		[Address(RVA = "0x1461E74", Offset = "0x1461E74", VA = "0x1461E74")]
		private static extern int GetGlyphTriangleIndices(ref IntPtr buffer, [In] IntPtr fontHandle, [In] uint id);

		[PreserveSig]
		[Token(Token = "0x6001176")]
		[Address(RVA = "0x1461F0C", Offset = "0x1461F0C", VA = "0x1461F0C")]
		private static extern void ClearGlyphData([In] IntPtr fontHandle, [In] uint id);

		[PreserveSig]
		[Token(Token = "0x6001177")]
		[Address(RVA = "0x1461F9C", Offset = "0x1461F9C", VA = "0x1461F9C")]
		private static extern int GetGlyphContour(ref IntPtr buffer, [In] IntPtr fontHandle, [In] uint id, [In] int index, ref bool odd, ref bool reverse);

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x146208C", Offset = "0x146208C", VA = "0x146208C")]
		private VGlyphInfo()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x14620EC", Offset = "0x14620EC", VA = "0x14620EC", Slot = "1")]
		~VGlyphInfo()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x145F2B4", Offset = "0x145F2B4", VA = "0x145F2B4")]
		public VGlyphInfo(IntPtr fontHandle, char id)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x14620F8", Offset = "0x14620F8", VA = "0x14620F8")]
		protected bool fetchNext(ref Vector3 v, Vector3[] contour, int startIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x1462248", Offset = "0x1462248", VA = "0x1462248")]
		protected void CreateSides(VTextParameter p)
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x14610D4", Offset = "0x14610D4", VA = "0x14610D4")]
		public Mesh GetMesh(Vector2 shift, Vector2 size, VTextInterface vtext, float ascender)
		{
			return null;
		}
	}
}
namespace Virtence.VText.Demo
{
	[Token(Token = "0x200024B")]
	public class ColorChangeScript : MonoBehaviour
	{
		[Token(Token = "0x200041D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE7AC", Offset = "0x7EE7AC")]
		private sealed class <ChangeColor>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ColorChangeScript <>4__this;

			[Token(Token = "0x170002F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B39")]
				[Address(RVA = "0x145B308", Offset = "0x145B308", VA = "0x145B308", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B3B")]
				[Address(RVA = "0x145B370", Offset = "0x145B370", VA = "0x145B370", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B36")]
			[Address(RVA = "0x145B198", Offset = "0x145B198", VA = "0x145B198")]
			[DebuggerHidden]
			public <ChangeColor>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001B37")]
			[Address(RVA = "0x145B1D4", Offset = "0x145B1D4", VA = "0x145B1D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0x145B1D8", Offset = "0x145B1D8", VA = "0x145B1D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B3A")]
			[Address(RVA = "0x145B310", Offset = "0x145B310", VA = "0x145B310", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5A2C", Offset = "0x7F5A2C")]
		public float ColorDuration;

		[Token(Token = "0x4000D3A")]
		private const string COLOR_CHANGE_COROUTINE = "ChangeColor";

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x145B078", Offset = "0x145B078", VA = "0x145B078")]
		private void Start()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x145B128", Offset = "0x145B128", VA = "0x145B128")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBE60", Offset = "0x7FBE60")]
		private IEnumerator ChangeColor()
		{
			return null;
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x145B1C4", Offset = "0x145B1C4", VA = "0x145B1C4")]
		public ColorChangeScript()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class HighlightGlyph : MonoBehaviour
	{
		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5A64", Offset = "0x7F5A64")]
		public Color HighlightColor;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer _renderer;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color _defaultColor;

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x145B378", Offset = "0x145B378", VA = "0x145B378")]
		private void Start()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x145B430", Offset = "0x145B430", VA = "0x145B430")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x145B470", Offset = "0x145B470", VA = "0x145B470")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x145B4B0", Offset = "0x145B4B0", VA = "0x145B4B0")]
		public HighlightGlyph()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class RotateGlyphs : MonoBehaviour
	{
		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5A9C", Offset = "0x7F5A9C")]
		public float RotationSpeed;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool Clockwise;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _transform;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer _renderer;

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x145B7DC", Offset = "0x145B7DC", VA = "0x145B7DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x145B844", Offset = "0x145B844", VA = "0x145B844")]
		private void Update()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x145B9A4", Offset = "0x145B9A4", VA = "0x145B9A4")]
		public RotateGlyphs()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class AudioVisualizer : MonoBehaviour
	{
		[Token(Token = "0x200041E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE7BC", Offset = "0x7EE7BC")]
		private sealed class <Animate>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioVisualizer <>4__this;

			[Token(Token = "0x40017EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170002FB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B3F")]
				[Address(RVA = "0x145B008", Offset = "0x145B008", VA = "0x145B008", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B41")]
				[Address(RVA = "0x145B070", Offset = "0x145B070", VA = "0x145B070", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B3C")]
			[Address(RVA = "0x145ACF0", Offset = "0x145ACF0", VA = "0x145ACF0")]
			[DebuggerHidden]
			public <Animate>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001B3D")]
			[Address(RVA = "0x145AD88", Offset = "0x145AD88", VA = "0x145AD88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B3E")]
			[Address(RVA = "0x145AD8C", Offset = "0x145AD8C", VA = "0x145AD8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B40")]
			[Address(RVA = "0x145B010", Offset = "0x145B010", VA = "0x145B010", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5AD4", Offset = "0x7F5AD4")]
		public VTextInterface DancingText;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5B0C", Offset = "0x7F5B0C")]
		public float Amplitude;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5B44", Offset = "0x7F5B44")]
		public float LerpDuration;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5B7C", Offset = "0x7F5B7C")]
		public float MaxAmplitude;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5BB4", Offset = "0x7F5BB4")]
		public float AmplitudeToReact;

		[Token(Token = "0x4000D48")]
		private const string EQUALIZER_ANIMATION = "Animate";

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource _audioSource;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float[] _samples;

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x145AAE0", Offset = "0x145AAE0", VA = "0x145AAE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x145AC54", Offset = "0x145AC54", VA = "0x145AC54")]
		private void Update()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x145AC80", Offset = "0x145AC80", VA = "0x145AC80")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBEC4", Offset = "0x7FBEC4")]
		private IEnumerator Animate()
		{
			return null;
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x145AD1C", Offset = "0x145AD1C", VA = "0x145AD1C")]
		public AudioVisualizer()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class Player : MonoBehaviour
	{
		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5BEC", Offset = "0x7F5BEC")]
		public GameObject BallPrefab;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5C24", Offset = "0x7F5C24")]
		public float BallSpawnOffset;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5C5C", Offset = "0x7F5C5C")]
		public float BallSpeed;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5C94", Offset = "0x7F5C94")]
		public float BallLifeTime;

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x145B4E4", Offset = "0x145B4E4", VA = "0x145B4E4")]
		private void Start()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x145B4E8", Offset = "0x145B4E8", VA = "0x145B4E8")]
		private void Update()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x145B7C0", Offset = "0x145B7C0", VA = "0x145B7C0")]
		public Player()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class SceneManager : MonoBehaviour
	{
		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5CCC", Offset = "0x7F5CCC")]
		public List<VTextInterface> VTexts;

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x145B9B4", Offset = "0x145B9B4", VA = "0x145B9B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x145B9B8", Offset = "0x145B9B8", VA = "0x145B9B8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x145BAB4", Offset = "0x145BAB4", VA = "0x145BAB4")]
		public SceneManager()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class SunController : MonoBehaviour
	{
		[Token(Token = "0x200041F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE7CC", Offset = "0x7EE7CC")]
		private sealed class <ChangeColor>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SunController <>4__this;

			[Token(Token = "0x170002FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B45")]
				[Address(RVA = "0x145BE90", Offset = "0x145BE90", VA = "0x145BE90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B47")]
				[Address(RVA = "0x145BEF8", Offset = "0x145BEF8", VA = "0x145BEF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B42")]
			[Address(RVA = "0x145BCA0", Offset = "0x145BCA0", VA = "0x145BCA0")]
			[DebuggerHidden]
			public <ChangeColor>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001B43")]
			[Address(RVA = "0x145BCDC", Offset = "0x145BCDC", VA = "0x145BCDC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B44")]
			[Address(RVA = "0x145BCE0", Offset = "0x145BCE0", VA = "0x145BCE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B46")]
			[Address(RVA = "0x145BE98", Offset = "0x145BE98", VA = "0x145BE98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5D04", Offset = "0x7F5D04")]
		public GameObject Shout;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5D3C", Offset = "0x7F5D3C")]
		public Color HitColor;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5D74", Offset = "0x7F5D74")]
		public float HitDuration;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5DAC", Offset = "0x7F5DAC")]
		public float ShoutDuration;

		[Token(Token = "0x4000D54")]
		private const string CHANGE_COLOR_COROUTINE = "ChangeColor";

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color _defaultColor;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Renderer _renderer;

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x145BABC", Offset = "0x145BABC", VA = "0x145BABC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x145BBCC", Offset = "0x145BBCC", VA = "0x145BBCC")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x145BC30", Offset = "0x145BC30", VA = "0x145BC30")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FBF28", Offset = "0x7FBF28")]
		private IEnumerator ChangeColor()
		{
			return null;
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x145BCCC", Offset = "0x145BCCC", VA = "0x145BCCC")]
		public SunController()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class AnimGlyphs : MonoBehaviour
	{
		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Amplitude;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FrequencyFactor;

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x145A948", Offset = "0x145A948", VA = "0x145A948")]
		private void Update()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x145AACC", Offset = "0x145AACC", VA = "0x145AACC")]
		public AnimGlyphs()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class TimeTexter : MonoBehaviour
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VTextInterface vti;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string timeString;

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x145BF00", Offset = "0x145BF00", VA = "0x145BF00")]
		private void Start()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x145BF58", Offset = "0x145BF58", VA = "0x145BF58")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x145BFEC", Offset = "0x145BFEC", VA = "0x145BFEC")]
		public TimeTexter()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x145C044", Offset = "0x145C044", VA = "0x145C044")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBF8C", Offset = "0x7FBF8C")]
		private void <LateUpdate>b__3_0()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public class UIController : MonoBehaviour
	{
		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5DE4", Offset = "0x7F5DE4")]
		public VtextHandler VTextController;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F5E1C", Offset = "0x7F5E1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5E1C", Offset = "0x7F5E1C")]
		public Text FontNameLabel;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5E7C", Offset = "0x7F5E7C")]
		public Slider SizeSlider;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5EB4", Offset = "0x7F5EB4")]
		public Slider DepthSlider;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5EEC", Offset = "0x7F5EEC")]
		public Slider BevelSlider;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F5F24", Offset = "0x7F5F24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5F24", Offset = "0x7F5F24")]
		public Toggle MajorModeLeftToggle;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5F84", Offset = "0x7F5F84")]
		public Toggle MajorModeCenterToggle;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5FBC", Offset = "0x7F5FBC")]
		public Toggle MajorModeRightToggle;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F5FF4", Offset = "0x7F5FF4")]
		public Toggle MajorModeBlockToggle;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F602C", Offset = "0x7F602C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7F602C", Offset = "0x7F602C")]
		public Toggle UseLightProbesToggle;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _currentFontIndex;

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x145C128", Offset = "0x145C128", VA = "0x145C128")]
		private void Awake()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x145C5F4", Offset = "0x145C5F4", VA = "0x145C5F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x145C5F8", Offset = "0x145C5F8", VA = "0x145C5F8")]
		public void SelectNextFont()
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x145C6C4", Offset = "0x145C6C4", VA = "0x145C6C4")]
		public void SelectPreviousFont()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x145C6D0", Offset = "0x145C6D0", VA = "0x145C6D0")]
		public void SetSize(float value)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x145C814", Offset = "0x145C814", VA = "0x145C814")]
		public void SetDepth(float value)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x145C958", Offset = "0x145C958", VA = "0x145C958")]
		public void SetBevel(float value)
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x145CA9C", Offset = "0x145CA9C", VA = "0x145CA9C")]
		public void SetMajorLayoutLeft(bool enabled)
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x145CB04", Offset = "0x145CB04", VA = "0x145CB04")]
		public void SetMajorLayoutCenter(bool enabled)
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x145CB28", Offset = "0x145CB28", VA = "0x145CB28")]
		public void SetMajorLayoutRight(bool enabled)
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x145CB4C", Offset = "0x145CB4C", VA = "0x145CB4C")]
		public void SetMajorLayoutBlock(bool enabled)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x145C604", Offset = "0x145C604", VA = "0x145C604")]
		private void SetFontByIndex(int index)
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x145CB98", Offset = "0x145CB98", VA = "0x145CB98")]
		public void EnableLightProbes(bool enable)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x145CC70", Offset = "0x145CC70", VA = "0x145CC70")]
		private void OnFontNameChanged(object sender, GenericEventArgs<string> e)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x145CD7C", Offset = "0x145CD7C", VA = "0x145CD7C")]
		private void OnSizeChanged(object sender, GenericEventArgs<float> e)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x145CDE8", Offset = "0x145CDE8", VA = "0x145CDE8")]
		private void OnDepthChanged(object sender, GenericEventArgs<float> e)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x145CEA8", Offset = "0x145CEA8", VA = "0x145CEA8")]
		private void OnBevelChanged(object sender, GenericEventArgs<float> e)
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x145CF14", Offset = "0x145CF14", VA = "0x145CF14")]
		private void OnMajorLayoutChanged(object sender, GenericEventArgs<VTextLayout.align> e)
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x145CFC8", Offset = "0x145CFC8", VA = "0x145CFC8")]
		public UIController()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class VtextHandler : MonoBehaviour
	{
		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VTextInterface[] vti_time;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VTextInterface vti_textOptions;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VTextInterface vti_textured;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int old_headingValue;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _minSize;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _maxSize;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _minDepth;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _maxDepth;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _minBevel;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _maxBevel;

		[Token(Token = "0x14000028")]
		public event EventHandler<GenericEventArgs<string>> FontNameChanged
		{
			[Token(Token = "0x60011AF")]
			[Address(RVA = "0x145C2C0", Offset = "0x145C2C0", VA = "0x145C2C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBF9C", Offset = "0x7FBF9C")]
			add
			{
			}
			[Token(Token = "0x60011B0")]
			[Address(RVA = "0x145CFD0", Offset = "0x145CFD0", VA = "0x145CFD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBFAC", Offset = "0x7FBFAC")]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event EventHandler<GenericEventArgs<float>> SizeValueChanged
		{
			[Token(Token = "0x60011B1")]
			[Address(RVA = "0x145C364", Offset = "0x145C364", VA = "0x145C364")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBFBC", Offset = "0x7FBFBC")]
			add
			{
			}
			[Token(Token = "0x60011B2")]
			[Address(RVA = "0x145D074", Offset = "0x145D074", VA = "0x145D074")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBFCC", Offset = "0x7FBFCC")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public event EventHandler<GenericEventArgs<float>> DepthValueChanged
		{
			[Token(Token = "0x60011B3")]
			[Address(RVA = "0x145C408", Offset = "0x145C408", VA = "0x145C408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBFDC", Offset = "0x7FBFDC")]
			add
			{
			}
			[Token(Token = "0x60011B4")]
			[Address(RVA = "0x145D118", Offset = "0x145D118", VA = "0x145D118")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBFEC", Offset = "0x7FBFEC")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002B")]
		public event EventHandler<GenericEventArgs<float>> BevelValueChanged
		{
			[Token(Token = "0x60011B5")]
			[Address(RVA = "0x145C4AC", Offset = "0x145C4AC", VA = "0x145C4AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FBFFC", Offset = "0x7FBFFC")]
			add
			{
			}
			[Token(Token = "0x60011B6")]
			[Address(RVA = "0x145D1BC", Offset = "0x145D1BC", VA = "0x145D1BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC00C", Offset = "0x7FC00C")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public event EventHandler<GenericEventArgs<VTextLayout.align>> MajorValueChanged
		{
			[Token(Token = "0x60011B7")]
			[Address(RVA = "0x145C550", Offset = "0x145C550", VA = "0x145C550")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC01C", Offset = "0x7FC01C")]
			add
			{
			}
			[Token(Token = "0x60011B8")]
			[Address(RVA = "0x145D260", Offset = "0x145D260", VA = "0x145D260")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC02C", Offset = "0x7FC02C")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002D")]
		public event EventHandler<GenericEventArgs<bool>> UseLightProbesChanged
		{
			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x145D304", Offset = "0x145D304", VA = "0x145D304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC03C", Offset = "0x7FC03C")]
			add
			{
			}
			[Token(Token = "0x60011BA")]
			[Address(RVA = "0x145D3A8", Offset = "0x145D3A8", VA = "0x145D3A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC04C", Offset = "0x7FC04C")]
			remove
			{
			}
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x145D44C", Offset = "0x145D44C", VA = "0x145D44C")]
		private void Start()
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x145D860", Offset = "0x145D860", VA = "0x145D860")]
		private void MessageLightprobes(bool lp)
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x145CBB4", Offset = "0x145CBB4", VA = "0x145CBB4")]
		public void SetLightProbes(bool enableLightProbes)
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x145CB70", Offset = "0x145CB70", VA = "0x145CB70")]
		public void SetFont(string fontName)
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x145C758", Offset = "0x145C758", VA = "0x145C758")]
		public void SetSize(float sizeValue)
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x145C89C", Offset = "0x145C89C", VA = "0x145C89C")]
		public void SetDepth(float depthValue)
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x145C9E0", Offset = "0x145C9E0", VA = "0x145C9E0")]
		public void SetBevel(float bevelValue)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x145CAC0", Offset = "0x145CAC0", VA = "0x145CAC0")]
		public void SetAlignment(VTextLayout.align alignment)
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x145D938", Offset = "0x145D938", VA = "0x145D938")]
		private void TransformTxt(VTextLayout.align alignment)
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x145DB30", Offset = "0x145DB30", VA = "0x145DB30")]
		private void OnSizeChanged(object sender, GenericEventArgs<float> e)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x145DBFC", Offset = "0x145DBFC", VA = "0x145DBFC")]
		private void OnDepthChanged(object sender, GenericEventArgs<float> e)
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x145DCC8", Offset = "0x145DCC8", VA = "0x145DCC8")]
		private void OnBevelChanged(object sender, GenericEventArgs<float> e)
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x145DD94", Offset = "0x145DD94", VA = "0x145DD94")]
		private void OnMajorLayoutChanged(object sender, GenericEventArgs<VTextLayout.align> e)
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x145DE0C", Offset = "0x145DE0C", VA = "0x145DE0C")]
		private void OnUseLightProbesChanged(object sender, GenericEventArgs<bool> e)
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x145DE84", Offset = "0x145DE84", VA = "0x145DE84")]
		private void OnFontNameChanged(object sender, GenericEventArgs<string> e)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x145DEFC", Offset = "0x145DEFC", VA = "0x145DEFC")]
		public VtextHandler()
		{
		}
	}
}
namespace Virtence.VText.Extensions
{
	[Token(Token = "0x2000256")]
	public static class ComponentExtensions
	{
		[Token(Token = "0x60011CB")]
		public static T GetCopyOf<T>(this Component comp, T other) where T : Component
		{
			return null;
		}
	}
	[Token(Token = "0x2000257")]
	public static class GameObjectExtensions
	{
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x145DF24", Offset = "0x145DF24", VA = "0x145DF24")]
		public static Component AddComponentClone(this GameObject go, Component toAdd)
		{
			return null;
		}
	}
}
namespace QUESTRPE
{
	[Serializable]
	[Token(Token = "0x2000258")]
	public class StateMachine
	{
		[Token(Token = "0x2000420")]
		public class StateData
		{
			[Token(Token = "0x40017EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action enter;

			[Token(Token = "0x40017F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<int> tick;

			[Token(Token = "0x40017F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action exit;

			[Token(Token = "0x40017F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float elapsed;

			[Token(Token = "0x6001B48")]
			[Address(RVA = "0xA8A740", Offset = "0xA8A740", VA = "0xA8A740")]
			public StateData()
			{
			}
		}

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private StateData[] states;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int current;

		[Token(Token = "0x17000203")]
		public int State
		{
			[Token(Token = "0x60011CD")]
			[Address(RVA = "0xA8A4B4", Offset = "0xA8A4B4", VA = "0xA8A4B4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011CE")]
			[Address(RVA = "0xA8A4BC", Offset = "0xA8A4BC", VA = "0xA8A4BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public float Elapsed
		{
			[Token(Token = "0x60011CF")]
			[Address(RVA = "0xA8A5AC", Offset = "0xA8A5AC", VA = "0xA8A5AC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xA8A5F4", Offset = "0xA8A5F4", VA = "0xA8A5F4")]
		public StateMachine(int numberOfStates)
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xA8A66C", Offset = "0xA8A66C", VA = "0xA8A66C")]
		public void Add(int index, [Optional] Action enter, [Optional] Func<int> tick, [Optional] Action exit)
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xA8A748", Offset = "0xA8A748", VA = "0xA8A748")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class Unused_LocalBobbingMotion : MonoBehaviour
	{
		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float amplitude;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float period;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 localStartPos;

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xA8B7C0", Offset = "0xA8B7C0", VA = "0xA8B7C0")]
		private void Start()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xA8B7FC", Offset = "0xA8B7FC", VA = "0xA8B7FC")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xA8B940", Offset = "0xA8B940", VA = "0xA8B940")]
		public Unused_LocalBobbingMotion()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class XmasBell : MonoBehaviour
	{
		[Token(Token = "0x2000421")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE7DC", Offset = "0x7EE7DC")]
		private sealed class <DelayedInvokation>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasBell <>4__this;

			[Token(Token = "0x170002FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B4C")]
				[Address(RVA = "0xA8D3F0", Offset = "0xA8D3F0", VA = "0xA8D3F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000300")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B4E")]
				[Address(RVA = "0xA8D458", Offset = "0xA8D458", VA = "0xA8D458", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B49")]
			[Address(RVA = "0xA8D248", Offset = "0xA8D248", VA = "0xA8D248")]
			[DebuggerHidden]
			public <DelayedInvokation>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0xA8D32C", Offset = "0xA8D32C", VA = "0xA8D32C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0xA8D330", Offset = "0xA8D330", VA = "0xA8D330", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B4D")]
			[Address(RVA = "0xA8D3F8", Offset = "0xA8D3F8", VA = "0xA8D3F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int dingsRequired;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float timeBetweenDings;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent dinged;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float delay;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 originalLocalPos;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion originalLocalRot;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRot;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly string bellSound;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float timeOfLastPlay;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool dingInvoked;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int dingsDone;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine delayedInvokeCoroutine;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody body;

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xA8CD20", Offset = "0xA8CD20", VA = "0xA8CD20")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xA8CDDC", Offset = "0xA8CDDC", VA = "0xA8CDDC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xA8CF50", Offset = "0xA8CF50", VA = "0xA8CF50")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xA8D17C", Offset = "0xA8D17C", VA = "0xA8D17C")]
		public void ResetDings()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xA8D07C", Offset = "0xA8D07C", VA = "0xA8D07C")]
		private void Ding()
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xA8D188", Offset = "0xA8D188", VA = "0xA8D188")]
		private void StartDelayedInvocation()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xA8CE14", Offset = "0xA8CE14", VA = "0xA8CE14")]
		private void StopDelayedInvokation()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xA8D1D8", Offset = "0xA8D1D8", VA = "0xA8D1D8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC07C", Offset = "0x7FC07C")]
		private IEnumerator DelayedInvokation()
		{
			return null;
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xA8D274", Offset = "0xA8D274", VA = "0xA8D274")]
		public void Show()
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xA8CE44", Offset = "0xA8CE44", VA = "0xA8CE44")]
		private void ResetPose()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xA8D2CC", Offset = "0xA8D2CC", VA = "0xA8D2CC")]
		public XmasBell()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class XmasButton : MonoBehaviour
	{
		[Token(Token = "0x2000422")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE7EC", Offset = "0x7EE7EC")]
		private sealed class <CooldownDelay>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x40017F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public XmasButton <>4__this;

			[Token(Token = "0x17000301")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B52")]
				[Address(RVA = "0xA8DD9C", Offset = "0xA8DD9C", VA = "0xA8DD9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000302")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B54")]
				[Address(RVA = "0xA8DE04", Offset = "0xA8DE04", VA = "0xA8DE04", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B4F")]
			[Address(RVA = "0xA8DC28", Offset = "0xA8DC28", VA = "0xA8DC28")]
			[DebuggerHidden]
			public <CooldownDelay>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6001B50")]
			[Address(RVA = "0xA8DCE0", Offset = "0xA8DCE0", VA = "0xA8DCE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B51")]
			[Address(RVA = "0xA8DCE4", Offset = "0xA8DCE4", VA = "0xA8DCE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B53")]
			[Address(RVA = "0xA8DDA4", Offset = "0xA8DDA4", VA = "0xA8DDA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D88")]
		private const int HAPTIC_DURATION = 100;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent PressEvent;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer myRenderer;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float emissionIntensity;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator anim;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Pressed;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Released;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color32 highlightColor;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float pressCooldownDuration;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool onCooldown;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Coroutine pressCooldownCoroutine;

		[Token(Token = "0x17000205")]
		public float PressCooldownDuration
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0xA8D460", Offset = "0xA8D460", VA = "0xA8D460")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xA8D468", Offset = "0xA8D468", VA = "0xA8D468")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xA8D510", Offset = "0xA8D510", VA = "0xA8D510")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xA8D540", Offset = "0xA8D540", VA = "0xA8D540")]
		public void OnPointerDown()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xA8D5C0", Offset = "0xA8D5C0", VA = "0xA8D5C0")]
		public void OnPointerUp()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xA8D640", Offset = "0xA8D640", VA = "0xA8D640")]
		public void OnPress()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xA8D7F8", Offset = "0xA8D7F8", VA = "0xA8D7F8")]
		public void OnRelease()
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xA8D878", Offset = "0xA8D878", VA = "0xA8D878")]
		public void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xA8D988", Offset = "0xA8D988", VA = "0xA8D988")]
		public void OnBeamEnter()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xA8DA3C", Offset = "0xA8DA3C", VA = "0xA8DA3C")]
		public void OnBeamExit()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xA8DAE4", Offset = "0xA8DAE4", VA = "0xA8DAE4")]
		public void ResetPressed()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xA8D7C0", Offset = "0xA8D7C0", VA = "0xA8D7C0")]
		private void StartCooldown()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xA8D528", Offset = "0xA8D528", VA = "0xA8D528")]
		private void StopCooldown()
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xA8DB64", Offset = "0xA8DB64", VA = "0xA8DB64")]
		private void StartCooldownCoroutine()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xA8DB94", Offset = "0xA8DB94", VA = "0xA8DB94")]
		private void KillCooldownCoroutine()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xA8DBA8", Offset = "0xA8DBA8", VA = "0xA8DBA8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC0E0", Offset = "0x7FC0E0")]
		private IEnumerator CooldownDelay(float duration)
		{
			return null;
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xA8DC54", Offset = "0xA8DC54", VA = "0xA8DC54")]
		public XmasButton()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class XmasChimneyUI : MonoBehaviour
	{
		[Token(Token = "0x2000423")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE7FC", Offset = "0x7EE7FC")]
		private sealed class <Life>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40017FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40017FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40017FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasChimneyUI <>4__this;

			[Token(Token = "0x40017FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <elapsed>5__2;

			[Token(Token = "0x40017FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <percent>5__3;

			[Token(Token = "0x40017FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <timeFactor>5__4;

			[Token(Token = "0x17000303")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B58")]
				[Address(RVA = "0xA8E540", Offset = "0xA8E540", VA = "0xA8E540", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000304")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B5A")]
				[Address(RVA = "0xA8E5A8", Offset = "0xA8E5A8", VA = "0xA8E5A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B55")]
			[Address(RVA = "0xA8E29C", Offset = "0xA8E29C", VA = "0xA8E29C")]
			[DebuggerHidden]
			public <Life>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001B56")]
			[Address(RVA = "0xA8E348", Offset = "0xA8E348", VA = "0xA8E348", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B57")]
			[Address(RVA = "0xA8E34C", Offset = "0xA8E34C", VA = "0xA8E34C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B59")]
			[Address(RVA = "0xA8E548", Offset = "0xA8E548", VA = "0xA8E548", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject scorePopup;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lifeDuration;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float popupDuration;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float yPopupDistance;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private XmasSound sound;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float minPitch;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float maxPitch;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int scoresUntilMaxPitch;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine lifeCoroutine;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 startLocalPos;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int timesShown;

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xA8DE0C", Offset = "0xA8DE0C", VA = "0xA8DE0C")]
		private void Start()
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xA8DE80", Offset = "0xA8DE80", VA = "0xA8DE80")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xA8DEE0", Offset = "0xA8DEE0", VA = "0xA8DEE0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC144", Offset = "0x7FC144")]
		public void ShowUI()
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xA8E1E4", Offset = "0xA8E1E4", VA = "0xA8E1E4")]
		public void ResetSound()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xA8E20C", Offset = "0xA8E20C", VA = "0xA8E20C")]
		public void HideUI()
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xA8E0A8", Offset = "0xA8E0A8", VA = "0xA8E0A8")]
		private void StartLifeCoroutine()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xA8DEB0", Offset = "0xA8DEB0", VA = "0xA8DEB0")]
		private void StopLifeCoroutine()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xA8E22C", Offset = "0xA8E22C", VA = "0xA8E22C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC17C", Offset = "0x7FC17C")]
		private IEnumerator Life()
		{
			return null;
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xA8DE60", Offset = "0xA8DE60", VA = "0xA8DE60")]
		private void SetUIVisible(bool visible)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xA8E0F8", Offset = "0xA8E0F8", VA = "0xA8E0F8")]
		public void PlaySound()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xA8E2C8", Offset = "0xA8E2C8", VA = "0xA8E2C8")]
		public void StopSound()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xA8E2EC", Offset = "0xA8E2EC", VA = "0xA8E2EC")]
		public XmasChimneyUI()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xA8E2F4", Offset = "0xA8E2F4", VA = "0xA8E2F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC1E0", Offset = "0x7FC1E0")]
		private void <ShowUI>b__13_0(Vector3 value)
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class XmasDeerAnimation : MonoBehaviour
	{
		[Token(Token = "0x2000424")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE80C", Offset = "0x7EE80C")]
		private sealed class <ChangeIdleRoutine>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasDeerAnimation <>4__this;

			[Token(Token = "0x17000305")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B5E")]
				[Address(RVA = "0xA8F000", Offset = "0xA8F000", VA = "0xA8F000", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000306")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B60")]
				[Address(RVA = "0xA8F068", Offset = "0xA8F068", VA = "0xA8F068", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B5B")]
			[Address(RVA = "0xA8ED48", Offset = "0xA8ED48", VA = "0xA8ED48")]
			[DebuggerHidden]
			public <ChangeIdleRoutine>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6001B5C")]
			[Address(RVA = "0xA8EF34", Offset = "0xA8EF34", VA = "0xA8EF34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B5D")]
			[Address(RVA = "0xA8EF38", Offset = "0xA8EF38", VA = "0xA8EF38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0xA8F008", Offset = "0xA8F008", VA = "0xA8F008", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000425")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE81C", Offset = "0x7EE81C")]
		private sealed class <ToggleBreathingRoutine>d__35 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasDeerAnimation <>4__this;

			[Token(Token = "0x17000307")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B64")]
				[Address(RVA = "0xA8F13C", Offset = "0xA8F13C", VA = "0xA8F13C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000308")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B66")]
				[Address(RVA = "0xA8F1A4", Offset = "0xA8F1A4", VA = "0xA8F1A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B61")]
			[Address(RVA = "0xA8EE1C", Offset = "0xA8EE1C", VA = "0xA8EE1C")]
			[DebuggerHidden]
			public <ToggleBreathingRoutine>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x6001B62")]
			[Address(RVA = "0xA8F070", Offset = "0xA8F070", VA = "0xA8F070", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B63")]
			[Address(RVA = "0xA8F074", Offset = "0xA8F074", VA = "0xA8F074", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B65")]
			[Address(RVA = "0xA8F144", Offset = "0xA8F144", VA = "0xA8F144", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasSplineFollower follower;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float minBreathingDuration;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float maxBreathingDuration;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float idleMinDuration;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float idleMaxDuration;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F623C", Offset = "0x7F623C")]
		private float runCycleOffsetAmount;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int idleStates;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		private Animator animator;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private XmasMessage resetSceneMsg;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool debugSpeedOverride;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float debugSpeedValue;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int stopBreathingHash;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int idleStateHash;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int speedHash;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int runCycleOffset;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int interruptAnyToMoveHash;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int interruptAnyToIdleHash;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Coroutine changeIdleRoutine;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine toggleBreathingRoutine;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool moving;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool breathing;

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xA8E5B0", Offset = "0xA8E5B0", VA = "0xA8E5B0")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xA8E608", Offset = "0xA8E608", VA = "0xA8E608")]
		private void Start()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xA8E888", Offset = "0xA8E888", VA = "0xA8E888")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xA8EA24", Offset = "0xA8EA24", VA = "0xA8EA24")]
		private void Update()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xA8EC78", Offset = "0xA8EC78", VA = "0xA8EC78")]
		private void OnResetScene()
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xA8E7CC", Offset = "0xA8E7CC", VA = "0xA8E7CC")]
		private void Setup()
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xA8EBB4", Offset = "0xA8EBB4", VA = "0xA8EBB4")]
		private void SetSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xA8EC7C", Offset = "0xA8EC7C", VA = "0xA8EC7C")]
		private void ChangeIdleAnimation()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xA8EBD8", Offset = "0xA8EBD8", VA = "0xA8EBD8")]
		private void StartIdleRoutine()
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xA8E9C4", Offset = "0xA8E9C4", VA = "0xA8E9C4")]
		private void StopIdleRoutine()
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xA8ECD8", Offset = "0xA8ECD8", VA = "0xA8ECD8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC1F0", Offset = "0x7FC1F0")]
		private IEnumerator ChangeIdleRoutine()
		{
			return null;
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xA8ED74", Offset = "0xA8ED74", VA = "0xA8ED74")]
		private void ToggleBreathing()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xA8EC28", Offset = "0xA8EC28", VA = "0xA8EC28")]
		private void StartToggleBreathingRoutine()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xA8E9F4", Offset = "0xA8E9F4", VA = "0xA8E9F4")]
		private void StopToggleBreathingRoutine()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xA8EDAC", Offset = "0xA8EDAC", VA = "0xA8EDAC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC254", Offset = "0x7FC254")]
		private IEnumerator ToggleBreathingRoutine()
		{
			return null;
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xA8EE48", Offset = "0xA8EE48", VA = "0xA8EE48")]
		public XmasDeerAnimation()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class XmasDeerEffects : MonoBehaviour
	{
		[Token(Token = "0x2000426")]
		private enum State
		{
			[Token(Token = "0x4001807")]
			Idle,
			[Token(Token = "0x4001808")]
			Walking,
			[Token(Token = "0x4001809")]
			Running
		}

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasSplineFollower follower;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float walkMinSpeed;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float runMinSpeed;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private XmasSound walkSound;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private XmasSound runSound;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private XmasSound startMovingSound;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform footPoints;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private State state;

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xA8F1AC", Offset = "0xA8F1AC", VA = "0xA8F1AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xA8F260", Offset = "0xA8F260", VA = "0xA8F260")]
		private void Update()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xA8F1B4", Offset = "0xA8F1B4", VA = "0xA8F1B4")]
		private void GoToState(State newState, bool initial = false)
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xA8F360", Offset = "0xA8F360", VA = "0xA8F360")]
		private void StartIdle()
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xA8F314", Offset = "0xA8F314", VA = "0xA8F314")]
		private void StopIdle()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xA8F364", Offset = "0xA8F364", VA = "0xA8F364")]
		private void StartWalking()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xA8F318", Offset = "0xA8F318", VA = "0xA8F318")]
		private void StopWalking()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xA8F390", Offset = "0xA8F390", VA = "0xA8F390")]
		private void StartRunning()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xA8F33C", Offset = "0xA8F33C", VA = "0xA8F33C")]
		private void StopRunning()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xA8F3BC", Offset = "0xA8F3BC", VA = "0xA8F3BC")]
		public XmasDeerEffects()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class XmasFade : MonoBehaviour
	{
		[Token(Token = "0x2000427")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE82C", Offset = "0x7EE82C")]
		private sealed class <Fade>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400180A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400180B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400180C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasFade <>4__this;

			[Token(Token = "0x400180D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool toBlack;

			[Token(Token = "0x400180E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float initialDelay;

			[Token(Token = "0x400180F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <direction>5__2;

			[Token(Token = "0x4001810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <fadeValue>5__3;

			[Token(Token = "0x4001811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <speed>5__4;

			[Token(Token = "0x17000309")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B6A")]
				[Address(RVA = "0xA8F8B4", Offset = "0xA8F8B4", VA = "0xA8F8B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B6C")]
				[Address(RVA = "0xA8F91C", Offset = "0xA8F91C", VA = "0xA8F91C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B67")]
			[Address(RVA = "0xA8F674", Offset = "0xA8F674", VA = "0xA8F674")]
			[DebuggerHidden]
			public <Fade>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001B68")]
			[Address(RVA = "0xA8F6A8", Offset = "0xA8F6A8", VA = "0xA8F6A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B69")]
			[Address(RVA = "0xA8F6AC", Offset = "0xA8F6AC", VA = "0xA8F6AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B6B")]
			[Address(RVA = "0xA8F8BC", Offset = "0xA8F8BC", VA = "0xA8F8BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float duration;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool fading;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool fadeDone;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine fadeCoroutine;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Action onComplete;

		[Token(Token = "0x17000206")]
		public float Duration
		{
			[Token(Token = "0x600121A")]
			[Address(RVA = "0xA8F3C4", Offset = "0xA8F3C4", VA = "0xA8F3C4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xA8F3CC", Offset = "0xA8F3CC", VA = "0xA8F3CC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xA8F42C", Offset = "0xA8F42C", VA = "0xA8F42C")]
		public void FadeBlack(float duration, [Optional] Action onComplete, float initialDelay = 0f)
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xA8F53C", Offset = "0xA8F53C", VA = "0xA8F53C")]
		public void FadeNormal(float duration, [Optional] Action onComplete, float initialDelay = 0f)
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xA8F4D0", Offset = "0xA8F4D0", VA = "0xA8F4D0")]
		private void StartFade(bool toBlack, float initialDelay = 0f)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xA8F3FC", Offset = "0xA8F3FC", VA = "0xA8F3FC")]
		private void StopFade()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xA8F5E0", Offset = "0xA8F5E0", VA = "0xA8F5E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC2B8", Offset = "0x7FC2B8")]
		private IEnumerator Fade(bool toBlack, float initialDelay = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xA8F6A0", Offset = "0xA8F6A0", VA = "0xA8F6A0")]
		public XmasFade()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class XmasFinishUI : MonoBehaviour
	{
		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasMessage resetSceneMsg;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private XmasMessage finalStopMsg;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject uiContainer;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private XmasSound popupSound;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private XmasSound popupSound2;

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xA8F924", Offset = "0xA8F924", VA = "0xA8F924")]
		private void Start()
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xA8FA0C", Offset = "0xA8FA0C", VA = "0xA8FA0C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xA8FACC", Offset = "0xA8FACC", VA = "0xA8FACC")]
		private void OnFinalStop()
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xA8FB60", Offset = "0xA8FB60", VA = "0xA8FB60")]
		private void OnResetScene()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xA8FAD0", Offset = "0xA8FAD0", VA = "0xA8FAD0")]
		private void ShowContainer()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xA8F9EC", Offset = "0xA8F9EC", VA = "0xA8F9EC")]
		private void HideContainer()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xA8FB64", Offset = "0xA8FB64", VA = "0xA8FB64")]
		public XmasFinishUI()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class XmasGift : MonoBehaviour
	{
		[Token(Token = "0x2000428")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE83C", Offset = "0x7EE83C")]
		private sealed class <ResetDelay>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasGift <>4__this;

			[Token(Token = "0x1700030B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B70")]
				[Address(RVA = "0xA911AC", Offset = "0xA911AC", VA = "0xA911AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B72")]
				[Address(RVA = "0xA91214", Offset = "0xA91214", VA = "0xA91214", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0xA90570", Offset = "0xA90570", VA = "0xA90570")]
			[DebuggerHidden]
			public <ResetDelay>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001B6E")]
			[Address(RVA = "0xA910E0", Offset = "0xA910E0", VA = "0xA910E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0xA910E4", Offset = "0xA910E4", VA = "0xA910E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B71")]
			[Address(RVA = "0xA911B4", Offset = "0xA911B4", VA = "0xA911B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasGiftManager controller;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Interaction.VR.XRGrabInteractable grabbable;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Rigidbody body;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float releasedLifetime;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float throwIntentMinVelocity;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEvent triggerEnter;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ParticleSystem popParticle;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private XmasMessage finalStopMsg;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private XmasMessage resetScene;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float respawnYOffset;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 originalLocalPosition;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool hasTriggered;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float timeOfRelease;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Transform originalTransform;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 sleighLastPos;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 sleighVelocity;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPos;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 velocity;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool doNotActivate;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private StateMachine stateMachine;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int StResting;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int StGrabbed;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int StReleased;

		[Token(Token = "0x17000207")]
		public Vector3 RespawnPosition
		{
			[Token(Token = "0x6001229")]
			[Address(RVA = "0xA8FB6C", Offset = "0xA8FB6C", VA = "0xA8FB6C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xA8FC3C", Offset = "0xA8FC3C", VA = "0xA8FC3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xA90068", Offset = "0xA90068", VA = "0xA90068")]
		private void Start()
		{
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xA900C4", Offset = "0xA900C4", VA = "0xA900C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xA901CC", Offset = "0xA901CC", VA = "0xA901CC")]
		private void Update()
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xA9037C", Offset = "0xA9037C", VA = "0xA9037C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xA9045C", Offset = "0xA9045C", VA = "0xA9045C")]
		private void OnFinalStop()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xA9049C", Offset = "0xA9049C", VA = "0xA9049C")]
		private void OnResetScene()
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xA90500", Offset = "0xA90500", VA = "0xA90500")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC31C", Offset = "0x7FC31C")]
		private IEnumerator ResetDelay()
		{
			return null;
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xA9059C", Offset = "0xA9059C", VA = "0xA9059C")]
		private void StoreOriginalTransform()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xA906F0", Offset = "0xA906F0", VA = "0xA906F0")]
		public void RespawnAt(Vector3 position, Quaternion rotation, bool playAppearParticle = true)
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xA90904", Offset = "0xA90904", VA = "0xA90904")]
		public bool TryEnterTrigger(XmasGiftTrigger trigger)
		{
			return default(bool);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xA8FF84", Offset = "0xA8FF84", VA = "0xA8FF84")]
		private void Activate()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xA9040C", Offset = "0xA9040C", VA = "0xA9040C")]
		private void Deactivate()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xA90890", Offset = "0xA90890", VA = "0xA90890")]
		private void MoveAndPlayPopParticle()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xA909EC", Offset = "0xA909EC", VA = "0xA909EC")]
		private void StartResting()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xA90A28", Offset = "0xA90A28", VA = "0xA90A28")]
		private int TickResting()
		{
			return default(int);
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xA90AC8", Offset = "0xA90AC8", VA = "0xA90AC8")]
		private void StopResting()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xA90ACC", Offset = "0xA90ACC", VA = "0xA90ACC")]
		private void StartGrabbed()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xA90AD0", Offset = "0xA90AD0", VA = "0xA90AD0")]
		private int TickGrabbed()
		{
			return default(int);
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xA90B74", Offset = "0xA90B74", VA = "0xA90B74")]
		private void StopGrabbed()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xA90B78", Offset = "0xA90B78", VA = "0xA90B78")]
		public void OnRelease()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xA90BF4", Offset = "0xA90BF4", VA = "0xA90BF4")]
		private void StartReleased()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xA90F04", Offset = "0xA90F04", VA = "0xA90F04")]
		private int TickReleased()
		{
			return default(int);
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xA90FDC", Offset = "0xA90FDC", VA = "0xA90FDC")]
		private void StopReleased()
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xA90D18", Offset = "0xA90D18", VA = "0xA90D18")]
		public bool ThrowIntent()
		{
			return default(bool);
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xA90D50", Offset = "0xA90D50", VA = "0xA90D50")]
		private bool IsInSleighStayCollider()
		{
			return default(bool);
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xA90FE0", Offset = "0xA90FE0", VA = "0xA90FE0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xA91068", Offset = "0xA91068", VA = "0xA91068")]
		public XmasGift()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class XmasGiftManager : MonoBehaviour
	{
		[Token(Token = "0x2000429")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE84C", Offset = "0x7EE84C")]
		private sealed class <GiftRespawnTimer>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasGiftManager <>4__this;

			[Token(Token = "0x1700030D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B76")]
				[Address(RVA = "0xA915D8", Offset = "0xA915D8", VA = "0xA915D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700030E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B78")]
				[Address(RVA = "0xA91640", Offset = "0xA91640", VA = "0xA91640", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B73")]
			[Address(RVA = "0xA913C0", Offset = "0xA913C0", VA = "0xA913C0")]
			[DebuggerHidden]
			public <GiftRespawnTimer>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001B74")]
			[Address(RVA = "0xA91518", Offset = "0xA91518", VA = "0xA91518", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B75")]
			[Address(RVA = "0xA9151C", Offset = "0xA9151C", VA = "0xA9151C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B77")]
			[Address(RVA = "0xA915E0", Offset = "0xA915E0", VA = "0xA915E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform restingParent;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float respawnInterval;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SphereCollider stayInSleighCollider;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LayerMask giftLayer;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<XmasGift> inactiveGifts;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine respawnCoroutine;

		[Token(Token = "0x17000208")]
		public Transform RestingParent
		{
			[Token(Token = "0x6001247")]
			[Address(RVA = "0xA9121C", Offset = "0xA9121C", VA = "0xA9121C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000209")]
		public SphereCollider StayInSleighCollider
		{
			[Token(Token = "0x6001248")]
			[Address(RVA = "0xA91224", Offset = "0xA91224", VA = "0xA91224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		public LayerMask GiftLayer
		{
			[Token(Token = "0x6001249")]
			[Address(RVA = "0xA9122C", Offset = "0xA9122C", VA = "0xA9122C")]
			get
			{
				return default(LayerMask);
			}
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xA91234", Offset = "0xA91234", VA = "0xA91234")]
		private void Start()
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xA912F0", Offset = "0xA912F0", VA = "0xA912F0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xA912A0", Offset = "0xA912A0", VA = "0xA912A0")]
		private void StartRespawnCoroutine()
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xA91320", Offset = "0xA91320", VA = "0xA91320")]
		private void StopRespawnCoroutine()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xA91350", Offset = "0xA91350", VA = "0xA91350")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC380", Offset = "0x7FC380")]
		private IEnumerator GiftRespawnTimer()
		{
			return null;
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xA90954", Offset = "0xA90954", VA = "0xA90954")]
		public void AddToInactiveGifts(XmasGift gift)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xA913EC", Offset = "0xA913EC", VA = "0xA913EC")]
		private bool TryRespawn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xA91510", Offset = "0xA91510", VA = "0xA91510")]
		public XmasGiftManager()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class XmasGiftTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float debugThrowDistance;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent triggerEnter;

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xA91648", Offset = "0xA91648", VA = "0xA91648")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xA916C8", Offset = "0xA916C8", VA = "0xA916C8")]
		private void OnGiftEnter(XmasGift gift)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xA91710", Offset = "0xA91710", VA = "0xA91710")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xA91760", Offset = "0xA91760", VA = "0xA91760")]
		public XmasGiftTrigger()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class XmasGrabbable : MonoBehaviour
	{
		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject grabbedIndicator;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Interaction.VR.XRGrabInteractable grabbable;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private XmasSound grabSound;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool grabbed;

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xA91768", Offset = "0xA91768", VA = "0xA91768")]
		public void Update()
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xA9181C", Offset = "0xA9181C", VA = "0xA9181C")]
		public XmasGrabbable()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class XmasGrabberHintUI : MonoBehaviour
	{
		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject uiObject;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshPro textMesh;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float nearbyDistance;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float hoverDistance;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float focusMinDuration;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float certaintyDecay;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float certaintyOnRelease;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float certaintyMax;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber[] grabbers;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRGrabbable[] grabbables;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRGrabber focusedGrabber;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private OVRGrabber nearestGrabber;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private OVRGrabbable nearestGrabbable;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private StateMachine stateMachine;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int StNoGrabbableNearby;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int StGrabbableNearby;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int StGrabbableHovered;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int StGrabbableHeld;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int StGrabbableReleased;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float timeOfFocusedGrabber;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float certainty;

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xA91824", Offset = "0xA91824", VA = "0xA91824")]
		private void Start()
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xA91B7C", Offset = "0xA91B7C", VA = "0xA91B7C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xA91C34", Offset = "0xA91C34", VA = "0xA91C34")]
		private void UpdateFocusedGrabber()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xA92150", Offset = "0xA92150", VA = "0xA92150")]
		private bool GrabbableWithinRange(float range)
		{
			return default(bool);
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xA9233C", Offset = "0xA9233C", VA = "0xA9233C")]
		public int CheckTransitions()
		{
			return default(int);
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xA92534", Offset = "0xA92534", VA = "0xA92534")]
		private void StartNoGrabbableNearby()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xA925AC", Offset = "0xA925AC", VA = "0xA925AC")]
		private int TickNoGrabbableNearby()
		{
			return default(int);
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xA92670", Offset = "0xA92670", VA = "0xA92670")]
		private void StartGrabbableNearby()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xA926CC", Offset = "0xA926CC", VA = "0xA926CC")]
		private int TickGrabbableNearby()
		{
			return default(int);
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xA92758", Offset = "0xA92758", VA = "0xA92758")]
		private void StartGrabbableHovered()
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xA927B4", Offset = "0xA927B4", VA = "0xA927B4")]
		private int TickGrabbableHovered()
		{
			return default(int);
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xA9245C", Offset = "0xA9245C", VA = "0xA9245C")]
		private bool CheckIfHasGrabbed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xA92840", Offset = "0xA92840", VA = "0xA92840")]
		private void StartGrabbableHeld()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xA9289C", Offset = "0xA9289C", VA = "0xA9289C")]
		private int TickGrabbableHeld()
		{
			return default(int);
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xA92940", Offset = "0xA92940", VA = "0xA92940")]
		private void StartGrabbableReleased()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xA9299C", Offset = "0xA9299C", VA = "0xA9299C")]
		private int TickGrabbableReleased()
		{
			return default(int);
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xA91ED0", Offset = "0xA91ED0", VA = "0xA91ED0")]
		private void TransformUI()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xA92590", Offset = "0xA92590", VA = "0xA92590")]
		private void SetText(string text)
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xA92A58", Offset = "0xA92A58", VA = "0xA92A58")]
		public XmasGrabberHintUI()
		{
		}
	}
	[Token(Token = "0x2000266")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7EDFA0", Offset = "0x7EDFA0")]
	public class XmasInt : ScriptableObject
	{
		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int val;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action<int> changed;

		[Token(Token = "0x1700020B")]
		public int Val
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0xA92AE8", Offset = "0xA92AE8", VA = "0xA92AE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600126D")]
			[Address(RVA = "0xA92AF0", Offset = "0xA92AF0", VA = "0xA92AF0")]
			set
			{
			}
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xA92B68", Offset = "0xA92B68", VA = "0xA92B68")]
		public void Subscribe(Action<int> callback)
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xA92BE8", Offset = "0xA92BE8", VA = "0xA92BE8")]
		public void Unsubscribe(Action<int> callback)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xA92C68", Offset = "0xA92C68", VA = "0xA92C68")]
		public XmasInt()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class XmasLaser : MonoBehaviour
	{
		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject cursor;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject cursorNoTarget;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject cursorHasTarget;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LayerMask layerMask;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float maxDistance;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float tilt;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Vector3 offset;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private XmasRig.Hand followHand;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private XmasRig.Hand otherHand;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool flipOriginX;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private XmasLaserTarget currentTarget;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private LineRenderer line;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 origin;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 direction;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 cursorPosition;

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xA92C70", Offset = "0xA92C70", VA = "0xA92C70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xA92CD8", Offset = "0xA92CD8", VA = "0xA92CD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xA9320C", Offset = "0xA9320C", VA = "0xA9320C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xA93368", Offset = "0xA93368", VA = "0xA93368")]
		private void Update()
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xA9336C", Offset = "0xA9336C", VA = "0xA9336C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xA92D64", Offset = "0xA92D64", VA = "0xA92D64")]
		private void CheckForSwappedHands()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xA93398", Offset = "0xA93398", VA = "0xA93398")]
		private void UpdateOriginAndDirection()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xA9357C", Offset = "0xA9357C", VA = "0xA9357C")]
		private void RaycastForTargets()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xA937E0", Offset = "0xA937E0", VA = "0xA937E0")]
		private void EnterTarget(XmasLaserTarget target)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xA93298", Offset = "0xA93298", VA = "0xA93298")]
		private void ExitTarget(XmasLaserTarget target)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xA93164", Offset = "0xA93164", VA = "0xA93164")]
		private void UpdateCursorState()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xA93908", Offset = "0xA93908", VA = "0xA93908")]
		private void ProcessInput()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xA92F5C", Offset = "0xA92F5C", VA = "0xA92F5C")]
		private void UpdateVisuals()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xA93A78", Offset = "0xA93A78", VA = "0xA93A78")]
		public XmasLaser()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class XmasLaserTarget : MonoBehaviour
	{
		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEvent select;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent enter;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEvent exit;

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xA93AEC", Offset = "0xA93AEC", VA = "0xA93AEC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xA93998", Offset = "0xA93998", VA = "0xA93998")]
		public void Select()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xA93814", Offset = "0xA93814", VA = "0xA93814")]
		public void Enter()
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xA938F4", Offset = "0xA938F4", VA = "0xA938F4")]
		public void Exit()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xA93B00", Offset = "0xA93B00", VA = "0xA93B00")]
		public XmasLaserTarget()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class XmasLoader : MonoBehaviour
	{
		[Token(Token = "0x200042A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE85C", Offset = "0x7EE85C")]
		private sealed class <LoadSceneLoop>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001819")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400181A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public XmasLoader <>4__this;

			[Token(Token = "0x400181B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AsyncOperation <loadOp>5__2;

			[Token(Token = "0x1700030F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B7C")]
				[Address(RVA = "0xA943EC", Offset = "0xA943EC", VA = "0xA943EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000310")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B7E")]
				[Address(RVA = "0xA94454", Offset = "0xA94454", VA = "0xA94454", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B79")]
			[Address(RVA = "0xA94194", Offset = "0xA94194", VA = "0xA94194")]
			[DebuggerHidden]
			public <LoadSceneLoop>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6001B7A")]
			[Address(RVA = "0xA941C8", Offset = "0xA941C8", VA = "0xA941C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B7B")]
			[Address(RVA = "0xA941CC", Offset = "0xA941CC", VA = "0xA941CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B7D")]
			[Address(RVA = "0xA943F4", Offset = "0xA943F4", VA = "0xA943F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F6624", Offset = "0x7F6624")]
		[SerializeField]
		private string xmasScene;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string rpeScene;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private XmasFade fade;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private XmasMessage loadSceneMsg;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private XmasMessage unloadSceneMsg;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float initialDelay;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float loadFadeDuration;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float unloadFadeDuration;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float fadeToNormalDelay;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private XmasSound loadInvokeSound;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool skipCalibrationOnRPEStart;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static XmasLoader instance;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Coroutine loadCoroutine;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string sceneToLoad;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool unloading;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion rigRotation;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 rigLocalPosition;

		[Token(Token = "0x1700020C")]
		public XmasFade Fade
		{
			[Token(Token = "0x6001284")]
			[Address(RVA = "0xA93B08", Offset = "0xA93B08", VA = "0xA93B08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020D")]
		public static XmasLoader Instance
		{
			[Token(Token = "0x6001285")]
			[Address(RVA = "0xA93B10", Offset = "0xA93B10", VA = "0xA93B10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020E")]
		public Quaternion RigRotation
		{
			[Token(Token = "0x6001286")]
			[Address(RVA = "0xA93B60", Offset = "0xA93B60", VA = "0xA93B60")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700020F")]
		public Vector3 RigLocalPosition
		{
			[Token(Token = "0x6001287")]
			[Address(RVA = "0xA93B6C", Offset = "0xA93B6C", VA = "0xA93B6C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xA93B78", Offset = "0xA93B78", VA = "0xA93B78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xA93C8C", Offset = "0xA93C8C", VA = "0xA93C8C")]
		private void Start()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xA93D50", Offset = "0xA93D50", VA = "0xA93D50")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xA93C90", Offset = "0xA93C90", VA = "0xA93C90")]
		private void Subscribe()
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xA93D54", Offset = "0xA93D54", VA = "0xA93D54")]
		private void Unsubscribe()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xA93E14", Offset = "0xA93E14", VA = "0xA93E14")]
		private void OnLoadScene()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xA93FB4", Offset = "0xA93FB4", VA = "0xA93FB4")]
		private void OnUnloadScene()
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xA940A4", Offset = "0xA940A4", VA = "0xA940A4")]
		private void StartLoadCoroutine()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xA940F4", Offset = "0xA940F4", VA = "0xA940F4")]
		private void StopLoadCoroutine()
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xA94124", Offset = "0xA94124", VA = "0xA94124")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC3E4", Offset = "0x7FC3E4")]
		private IEnumerator LoadSceneLoop()
		{
			return null;
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xA941C0", Offset = "0xA941C0", VA = "0xA941C0")]
		public XmasLoader()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class XmasLookAtHead : MonoBehaviour
	{
		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float rotSpeed;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool reverse;

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xA9445C", Offset = "0xA9445C", VA = "0xA9445C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xA94778", Offset = "0xA94778", VA = "0xA94778")]
		private void Update()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xA94464", Offset = "0xA94464", VA = "0xA94464")]
		private void Rotate(bool immediate = false)
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xA94780", Offset = "0xA94780", VA = "0xA94780")]
		public XmasLookAtHead()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class XmasManager : MonoBehaviour
	{
		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasMessage retryInputMsg;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private XmasMessage resetSceneMsg;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform rigParent;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float retryFadeBlackDelay;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float retryFadeBlackDuration;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float retryFadeNormalDelay;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float retryFadeNormalDuration;

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xA94788", Offset = "0xA94788", VA = "0xA94788")]
		private void Start()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xA94A00", Offset = "0xA94A00", VA = "0xA94A00")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xA947EC", Offset = "0xA947EC", VA = "0xA947EC")]
		private void Subscribe()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xA94A04", Offset = "0xA94A04", VA = "0xA94A04")]
		private void Unsubscribe()
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xA94A8C", Offset = "0xA94A8C", VA = "0xA94A8C")]
		private void OnRetryInput()
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xA94B64", Offset = "0xA94B64", VA = "0xA94B64")]
		private void OnRetryFadedBlackComplete()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xA94BFC", Offset = "0xA94BFC", VA = "0xA94BFC")]
		public XmasManager()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class XmasMenu : MonoBehaviour
	{
		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float menuForward;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float menuMoveSpeed;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float menuRotSpeed;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float menuStartMoveThreshold;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float menuStopMoveThreshold;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool moving;

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xA94C04", Offset = "0xA94C04", VA = "0xA94C04")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xA95128", Offset = "0xA95128", VA = "0xA95128")]
		private void Update()
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xA94CE0", Offset = "0xA94CE0", VA = "0xA94CE0")]
		private void MenuTransformUpdate(bool immediate = false)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xA95130", Offset = "0xA95130", VA = "0xA95130")]
		public XmasMenu()
		{
		}
	}
	[Token(Token = "0x200026D")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7EDFDC", Offset = "0x7EDFDC")]
	public class XmasMessage : ScriptableObject
	{
		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action action;

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xA94BE8", Offset = "0xA94BE8", VA = "0xA94BE8")]
		public void Raise()
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xA8E74C", Offset = "0xA8E74C", VA = "0xA8E74C")]
		public void Subscribe(Action method)
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xA8E944", Offset = "0xA8E944", VA = "0xA8E944")]
		public void Unsubscribe(Action method)
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xA95138", Offset = "0xA95138", VA = "0xA95138")]
		public XmasMessage()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public class XmasMessageListener : MonoBehaviour
	{
		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasMessage message;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent execute;

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xA95140", Offset = "0xA95140", VA = "0xA95140")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xA951C8", Offset = "0xA951C8", VA = "0xA951C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xA95250", Offset = "0xA95250", VA = "0xA95250")]
		private void OnMessageRaised()
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xA95264", Offset = "0xA95264", VA = "0xA95264")]
		public XmasMessageListener()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class XmasMessageSender : MonoBehaviour
	{
		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasMessage message;

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xA9526C", Offset = "0xA9526C", VA = "0xA9526C")]
		public void Raise()
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xA95308", Offset = "0xA95308", VA = "0xA95308")]
		public XmasMessageSender()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class XmasPause : MonoBehaviour
	{
		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject menu;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject laser;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private XmasMessage pauseMsg;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private XmasMessage resumeMsg;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private XmasMessage unloadScene;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private XmasMessage retryInputMsg;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private XmasMessage resetSceneMsg;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private LayerMask normalCameraMask;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private LayerMask pausedCameraMask;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Camera cam;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool resettingPaused;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hardwarePaused;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool userPaused;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool vrFocus;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool inputFocus;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool hmdPresent;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool hmdMounted;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool appFocus;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool appPaused;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool initialized;

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xA95310", Offset = "0xA95310", VA = "0xA95310")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xA95394", Offset = "0xA95394", VA = "0xA95394")]
		private void Start()
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xA9586C", Offset = "0xA9586C", VA = "0xA9586C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xA95680", Offset = "0xA95680", VA = "0xA95680")]
		private void SubscribeToOVR()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xA95AE0", Offset = "0xA95AE0", VA = "0xA95AE0")]
		private void UnsubscribeFromOVR()
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xA95CCC", Offset = "0xA95CCC", VA = "0xA95CCC")]
		private void OnRetryInput()
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xA95D6C", Offset = "0xA95D6C", VA = "0xA95D6C")]
		private void OnResetScene()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xA95DDC", Offset = "0xA95DDC", VA = "0xA95DDC")]
		private void EvaluateHardwarePaused()
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xA9613C", Offset = "0xA9613C", VA = "0xA9613C")]
		private void OnMenuButtonDown()
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xA95FD4", Offset = "0xA95FD4", VA = "0xA95FD4")]
		private void PauseFromHardware()
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xA96088", Offset = "0xA96088", VA = "0xA96088")]
		private void ResumeFromHardware()
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xA96200", Offset = "0xA96200", VA = "0xA96200")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC448", Offset = "0x7FC448")]
		private void OnHMDMounted()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xA9620C", Offset = "0xA9620C", VA = "0xA9620C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC480", Offset = "0x7FC480")]
		private void OnHMDUnmounted()
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xA96214", Offset = "0xA96214", VA = "0xA96214")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC4B8", Offset = "0x7FC4B8")]
		private void OnHMDAcquired()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xA96220", Offset = "0xA96220", VA = "0xA96220")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC4F0", Offset = "0x7FC4F0")]
		private void OnHMDLost()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xA96228", Offset = "0xA96228", VA = "0xA96228")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC528", Offset = "0x7FC528")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xA96234", Offset = "0xA96234", VA = "0xA96234")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC560", Offset = "0x7FC560")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xA9623C", Offset = "0xA9623C", VA = "0xA9623C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC598", Offset = "0x7FC598")]
		private void OnVrFocusAcquired()
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xA96248", Offset = "0xA96248", VA = "0xA96248")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC5D0", Offset = "0x7FC5D0")]
		private void OnVrFocusLost()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xA96250", Offset = "0xA96250", VA = "0xA96250")]
		private void OnApplicationFocus(bool focus)
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xA9625C", Offset = "0xA9625C", VA = "0xA9625C")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xA961A4", Offset = "0xA961A4", VA = "0xA961A4")]
		public void UserPause()
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xA9614C", Offset = "0xA9614C", VA = "0xA9614C")]
		public void UserResume()
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xA9612C", Offset = "0xA9612C", VA = "0xA9612C")]
		private void ShowMenuIfUserPaused()
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xA96268", Offset = "0xA96268", VA = "0xA96268")]
		private void ShowMenu()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xA95EB8", Offset = "0xA95EB8", VA = "0xA95EB8")]
		private void HideMenu()
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xA9534C", Offset = "0xA9534C", VA = "0xA9534C")]
		private void SetElementsActive(bool active)
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xA95D40", Offset = "0xA95D40", VA = "0xA95D40")]
		private void SetAppropriateTimeScale()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xA963A0", Offset = "0xA963A0", VA = "0xA963A0")]
		private void OnUnloadScene()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xA963A8", Offset = "0xA963A8", VA = "0xA963A8")]
		public XmasPause()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class XmasRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200042B")]
		public class Hand
		{
			[Serializable]
			[Token(Token = "0x2000481")]
			public class Button
			{
				[Token(Token = "0x4001928")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private InputFeatureUsage<bool> button;

				[Token(Token = "0x4001929")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private InputDevice side;

				[Token(Token = "0x400192A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public bool isPressed;

				[Token(Token = "0x400192B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
				public bool wasPressed;

				[Token(Token = "0x400192C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public Action onDown;

				[Token(Token = "0x400192D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				public Action onHold;

				[Token(Token = "0x400192E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
				public Action onUp;

				[Token(Token = "0x6001CEE")]
				[Address(RVA = "0xA969AC", Offset = "0xA969AC", VA = "0xA969AC")]
				public Button(InputFeatureUsage<bool> button, InputDevice side)
				{
				}

				[Token(Token = "0x6001CEF")]
				[Address(RVA = "0xA969EC", Offset = "0xA969EC", VA = "0xA969EC")]
				public void UpdateButton()
				{
				}

				[Token(Token = "0x6001CF0")]
				[Address(RVA = "0xA96B64", Offset = "0xA96B64", VA = "0xA96B64")]
				public void Subscribe([Optional] Action toDown, [Optional] Action toHold, [Optional] Action toUp)
				{
				}

				[Token(Token = "0x6001CF1")]
				[Address(RVA = "0xA96C60", Offset = "0xA96C60", VA = "0xA96C60")]
				public void Unsubscribe([Optional] Action toDown, [Optional] Action toHold, [Optional] Action toUp)
				{
				}
			}

			[Token(Token = "0x400181C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private Button a;

			[Token(Token = "0x400181D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Button b;

			[Token(Token = "0x400181E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Button trigger;

			[Token(Token = "0x400181F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private Button grip;

			[Token(Token = "0x4001820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private Button menu;

			[Token(Token = "0x4001821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool any;

			[Token(Token = "0x4001822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 position;

			[Token(Token = "0x4001823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion rotation;

			[Token(Token = "0x4001824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform tf;

			[Token(Token = "0x17000311")]
			public Button A
			{
				[Token(Token = "0x6001B7F")]
				[Address(RVA = "0xA96984", Offset = "0xA96984", VA = "0xA96984")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000312")]
			public Button B
			{
				[Token(Token = "0x6001B80")]
				[Address(RVA = "0xA9698C", Offset = "0xA9698C", VA = "0xA9698C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000313")]
			public Button Trigger
			{
				[Token(Token = "0x6001B81")]
				[Address(RVA = "0xA96994", Offset = "0xA96994", VA = "0xA96994")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000314")]
			public Button Grip
			{
				[Token(Token = "0x6001B82")]
				[Address(RVA = "0xA9699C", Offset = "0xA9699C", VA = "0xA9699C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000315")]
			public Button Menu
			{
				[Token(Token = "0x6001B83")]
				[Address(RVA = "0xA969A4", Offset = "0xA969A4", VA = "0xA969A4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B84")]
			[Address(RVA = "0xA9656C", Offset = "0xA9656C", VA = "0xA9656C")]
			public Hand(Transform handTf, InputDevice side)
			{
			}

			[Token(Token = "0x6001B85")]
			[Address(RVA = "0xA96718", Offset = "0xA96718", VA = "0xA96718")]
			public void UpdateHand()
			{
			}
		}

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static XmasRig instance;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform root;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform head;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform leftTf;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform rightTf;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Hand left;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Hand right;

		[Token(Token = "0x17000210")]
		public static XmasRig Instance
		{
			[Token(Token = "0x60012CA")]
			[Address(RVA = "0xA963B0", Offset = "0xA963B0", VA = "0xA963B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000211")]
		public Transform Head
		{
			[Token(Token = "0x60012CB")]
			[Address(RVA = "0xA96400", Offset = "0xA96400", VA = "0xA96400")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000212")]
		public Transform Root
		{
			[Token(Token = "0x60012CC")]
			[Address(RVA = "0xA96408", Offset = "0xA96408", VA = "0xA96408")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000213")]
		public Hand Left
		{
			[Token(Token = "0x60012CD")]
			[Address(RVA = "0xA96410", Offset = "0xA96410", VA = "0xA96410")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000214")]
		public Hand Right
		{
			[Token(Token = "0x60012CE")]
			[Address(RVA = "0xA96418", Offset = "0xA96418", VA = "0xA96418")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xA96420", Offset = "0xA96420", VA = "0xA96420")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xA966E4", Offset = "0xA966E4", VA = "0xA966E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xA967FC", Offset = "0xA967FC", VA = "0xA967FC")]
		public void SetRootPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xA9686C", Offset = "0xA9686C", VA = "0xA9686C")]
		public void SetRootRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xA94874", Offset = "0xA94874", VA = "0xA94874")]
		public void SetRootParent(Transform parent)
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xA9697C", Offset = "0xA9697C", VA = "0xA9697C")]
		public XmasRig()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public class XmasScoreUI : MonoBehaviour
	{
		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasInt score;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshPro textMesh;

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xA96D5C", Offset = "0xA96D5C", VA = "0xA96D5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xA96DEC", Offset = "0xA96DEC", VA = "0xA96DEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xA96E7C", Offset = "0xA96E7C", VA = "0xA96E7C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xA96ED4", Offset = "0xA96ED4", VA = "0xA96ED4")]
		private void OnScoreChanged(int value)
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xA96E80", Offset = "0xA96E80", VA = "0xA96E80")]
		private void UpdateText()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xA96ED8", Offset = "0xA96ED8", VA = "0xA96ED8")]
		public XmasScoreUI()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class XmasScorer : MonoBehaviour
	{
		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasInt score;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int value;

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xA96EE0", Offset = "0xA96EE0", VA = "0xA96EE0")]
		public void AddToScore()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xA96F08", Offset = "0xA96F08", VA = "0xA96F08")]
		public XmasScorer()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class XmasScoring : MonoBehaviour
	{
		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasInt score;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private XmasMessage resetSceneMsg;

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xA96F10", Offset = "0xA96F10", VA = "0xA96F10")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xA96FD8", Offset = "0xA96FD8", VA = "0xA96FD8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xA96F50", Offset = "0xA96F50", VA = "0xA96F50")]
		private void Subscribe()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xA96FDC", Offset = "0xA96FDC", VA = "0xA96FDC")]
		private void Unsubscribe()
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xA97064", Offset = "0xA97064", VA = "0xA97064")]
		private void OnResetScene()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xA96F34", Offset = "0xA96F34", VA = "0xA96F34")]
		private void ResetScore()
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xA97068", Offset = "0xA97068", VA = "0xA97068")]
		public XmasScoring()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class XmasSleighManager : MonoBehaviour
	{
		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasMessage startMsg;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private XmasMessage finalStopMsg;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private XmasMessage resetSceneMsg;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private XmasMessage pauseMsg;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private XmasMessage resumeMsg;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform sleigh;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private XmasBell startBell;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private XmasBell retryBell;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private XmasSplineFollower[] followers;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private bool playMusicInEditor;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private XmasSound setupSound;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private XmasSound movingMusic;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool shouldPlayMusic;

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xA97070", Offset = "0xA97070", VA = "0xA97070")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xA971F8", Offset = "0xA971F8", VA = "0xA971F8")]
		private void Start()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xA9725C", Offset = "0xA9725C", VA = "0xA9725C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xA971FC", Offset = "0xA971FC", VA = "0xA971FC")]
		private void Setup()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xA973C4", Offset = "0xA973C4", VA = "0xA973C4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x7FC608", Offset = "0x7FC608")]
		private void OnStartSleigh()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xA97494", Offset = "0xA97494", VA = "0xA97494")]
		private void OnFinalStop()
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xA97500", Offset = "0xA97500", VA = "0xA97500")]
		private void OnResetScene()
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xA975D8", Offset = "0xA975D8", VA = "0xA975D8")]
		private void OnPause()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xA97644", Offset = "0xA97644", VA = "0xA97644")]
		private void OnResume()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xA976A8", Offset = "0xA976A8", VA = "0xA976A8")]
		public XmasSleighManager()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public class XmasSoundPlayer : MonoBehaviour
	{
		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasSound sound;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool followTransform;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool fade;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[SerializeField]
		private bool stopCurrent;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float fadeDuration;

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xA976B0", Offset = "0xA976B0", VA = "0xA976B0")]
		public void Play()
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xA976F4", Offset = "0xA976F4", VA = "0xA976F4")]
		public void Stop()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xA9771C", Offset = "0xA9771C", VA = "0xA9771C")]
		public XmasSoundPlayer()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class XmasSpline : MonoBehaviour
	{
		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float gizmoRadius;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int gizmoSegments;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CRSpline spline;

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xA97724", Offset = "0xA97724", VA = "0xA97724")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xA97740", Offset = "0xA97740", VA = "0xA97740")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xA977D8", Offset = "0xA977D8", VA = "0xA977D8")]
		private Vector3[] Positions()
		{
			return null;
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xA97744", Offset = "0xA97744", VA = "0xA97744")]
		private bool TryGenerateSpline()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xA97960", Offset = "0xA97960", VA = "0xA97960")]
		public XmasSpline()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public class XmasSplineFollower : MonoBehaviour
	{
		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private XmasSpline spline;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float speed;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float arrivedThreshold;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotSpeed;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float rollAmount;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int startPoint;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int pointCount;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int rotateAhead;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool startOnAwake;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool flatRotation;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[SerializeField]
		private bool roll;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private XmasSplineFollower[] slaves;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private XmasSplineSignal initialSignal;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool running;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool paused;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3[] points;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int targetPointIndex;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool finished;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool inSignal;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private XmasSplineSignal signal;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float signalElapsed;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float signalMultiplier;

		[Token(Token = "0x17000215")]
		public float ActualSpeed
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0xA8F2E4", Offset = "0xA8F2E4", VA = "0xA8F2E4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000216")]
		public float SpeedAsPercentOfMax
		{
			[Token(Token = "0x60012F7")]
			[Address(RVA = "0xA8EB8C", Offset = "0xA8EB8C", VA = "0xA8EB8C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xA97968", Offset = "0xA97968", VA = "0xA97968")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xA97AE8", Offset = "0xA97AE8", VA = "0xA97AE8")]
		private void Update()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xA981D4", Offset = "0xA981D4", VA = "0xA981D4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xA97AA8", Offset = "0xA97AA8", VA = "0xA97AA8")]
		private void Setup()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xA97488", Offset = "0xA97488", VA = "0xA97488")]
		public void StartFollowing()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xA974F8", Offset = "0xA974F8", VA = "0xA974F8")]
		public void StopFollowing()
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xA97584", Offset = "0xA97584", VA = "0xA97584")]
		public void ResetScene()
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xA97638", Offset = "0xA97638", VA = "0xA97638")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xA976A0", Offset = "0xA976A0", VA = "0xA976A0")]
		public void Resume()
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xA979C0", Offset = "0xA979C0", VA = "0xA979C0")]
		private void CachePoints()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xA97B70", Offset = "0xA97B70", VA = "0xA97B70")]
		private bool HasArrived()
		{
			return default(bool);
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xA982EC", Offset = "0xA982EC", VA = "0xA982EC")]
		private bool IsUsingLastPoint()
		{
			return default(bool);
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xA97C98", Offset = "0xA97C98", VA = "0xA97C98")]
		private bool TryUseNextPoint()
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xA97CC4", Offset = "0xA97CC4", VA = "0xA97CC4")]
		private void MoveTowardsPoint(bool immediate = false)
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xA983E8", Offset = "0xA983E8", VA = "0xA983E8")]
		private void SetSlavesSignalMultiplier()
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xA97E30", Offset = "0xA97E30", VA = "0xA97E30")]
		private void RotateTowardsPoint(bool immediate = false)
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xA981C8", Offset = "0xA981C8", VA = "0xA981C8")]
		private void FinishedSpline()
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xA98254", Offset = "0xA98254", VA = "0xA98254")]
		private void StartSignal(XmasSplineSignal signal)
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xA98304", Offset = "0xA98304", VA = "0xA98304")]
		private float SignalMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xA98448", Offset = "0xA98448", VA = "0xA98448")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xA984E4", Offset = "0xA984E4", VA = "0xA984E4")]
		public XmasSplineFollower()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public class AnimatedTextureUVs : MonoBehaviour
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int uvAnimationTileX;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int uvAnimationTileY;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int framesPerSecond;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer thisrenderer;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int index;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int uIndex;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int vIndex;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector2 size;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 offset;

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xB80130", Offset = "0xB80130", VA = "0xB80130")]
		private void Start()
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xB80188", Offset = "0xB80188", VA = "0xB80188")]
		private void Update()
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xB80284", Offset = "0xB80284", VA = "0xB80284")]
		public AnimatedTextureUVs()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class ButtonLinker : MonoBehaviour
	{
		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xB80734", Offset = "0xB80734", VA = "0xB80734")]
		public void SetMaterial(Material mat)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xB80750", Offset = "0xB80750", VA = "0xB80750")]
		public ButtonLinker()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class CalibrationManager : MonoBehaviour
	{
		[Token(Token = "0x200042C")]
		public enum ProgressStage
		{
			[Token(Token = "0x4001826")]
			Setup = -1,
			[Token(Token = "0x4001827")]
			Acknowledgement = 0,
			[Token(Token = "0x4001828")]
			SafetyNotice = 1,
			[Token(Token = "0x4001829")]
			SetPlankDimension = 2,
			[Token(Token = "0x400182A")]
			StandBeforePlank = 3,
			[Token(Token = "0x400182B")]
			EnteringCity = 4,
			[Token(Token = "0x400182C")]
			SpotAndFace = 7,
			[Token(Token = "0x400182D")]
			Start = 8,
			[Token(Token = "0x400182E")]
			PlaceRealPlank = 9,
			[Token(Token = "0x400182F")]
			Done = 10,
			[Token(Token = "0x4001830")]
			Walk = 13,
			[Token(Token = "0x4001831")]
			PlayerHeight = 14,
			[Token(Token = "0x4001832")]
			ReEntry = 15
		}

		[Token(Token = "0x200042D")]
		public enum CalibrationMode
		{
			[Token(Token = "0x4001834")]
			Full,
			[Token(Token = "0x4001835")]
			PlayerSwitch,
			[Token(Token = "0x4001836")]
			RepositionPlank,
			[Token(Token = "0x4001837")]
			ResizePlank,
			[Token(Token = "0x4001838")]
			SetPlayerHeight
		}

		[Token(Token = "0x200042E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE86C", Offset = "0x7EE86C")]
		private sealed class <PrintGuardianPoints>d__98 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400183A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400183B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3[] points;

			[Token(Token = "0x17000316")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B89")]
				[Address(RVA = "0xBD1E28", Offset = "0xBD1E28", VA = "0xBD1E28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000317")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B8B")]
				[Address(RVA = "0xBD1E90", Offset = "0xBD1E90", VA = "0xBD1E90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B86")]
			[Address(RVA = "0xBD1B88", Offset = "0xBD1B88", VA = "0xBD1B88")]
			[DebuggerHidden]
			public <PrintGuardianPoints>d__98(int <>1__state)
			{
			}

			[Token(Token = "0x6001B87")]
			[Address(RVA = "0xBD1BB4", Offset = "0xBD1BB4", VA = "0xBD1BB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B88")]
			[Address(RVA = "0xBD1BB8", Offset = "0xBD1BB8", VA = "0xBD1BB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0xBD1E30", Offset = "0xBD1E30", VA = "0xBD1E30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200042F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE87C", Offset = "0x7EE87C")]
		private sealed class <PlayPlankFlyOut>d__105 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400183C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400183D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400183E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibrationManager <>4__this;

			[Token(Token = "0x17000318")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B8F")]
				[Address(RVA = "0xBD1B18", Offset = "0xBD1B18", VA = "0xBD1B18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000319")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B91")]
				[Address(RVA = "0xBD1B80", Offset = "0xBD1B80", VA = "0xBD1B80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B8C")]
			[Address(RVA = "0xBD1A7C", Offset = "0xBD1A7C", VA = "0xBD1A7C")]
			[DebuggerHidden]
			public <PlayPlankFlyOut>d__105(int <>1__state)
			{
			}

			[Token(Token = "0x6001B8D")]
			[Address(RVA = "0xBD1AA8", Offset = "0xBD1AA8", VA = "0xBD1AA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B8E")]
			[Address(RVA = "0xBD1AAC", Offset = "0xBD1AAC", VA = "0xBD1AAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B90")]
			[Address(RVA = "0xBD1B20", Offset = "0xBD1B20", VA = "0xBD1B20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000430")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE88C", Offset = "0x7EE88C")]
		private sealed class <EnterCity>d__149 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400183F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001840")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibrationManager <>4__this;

			[Token(Token = "0x1700031A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B95")]
				[Address(RVA = "0xBD1A0C", Offset = "0xBD1A0C", VA = "0xBD1A0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B97")]
				[Address(RVA = "0xBD1A74", Offset = "0xBD1A74", VA = "0xBD1A74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B92")]
			[Address(RVA = "0xBD1934", Offset = "0xBD1934", VA = "0xBD1934")]
			[DebuggerHidden]
			public <EnterCity>d__149(int <>1__state)
			{
			}

			[Token(Token = "0x6001B93")]
			[Address(RVA = "0xBD1960", Offset = "0xBD1960", VA = "0xBD1960", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B94")]
			[Address(RVA = "0xBD1964", Offset = "0xBD1964", VA = "0xBD1964", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B96")]
			[Address(RVA = "0xBD1A14", Offset = "0xBD1A14", VA = "0xBD1A14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CalibrationManager _instance;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string LOG_TAG;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ProgressStage progressStage;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ProgressStage nextStage;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ProgressStage prevStage;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ProgressStage[] playerSwitchSequence;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressStage[] repositionPlankSequence;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ProgressStage[] resizePlankSequence;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ProgressStage[] heightSetSequence;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CalibrationMode mode;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] stageComplete;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isDone;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Animator m_StateMachine;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int UISetup;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int UIStart;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int UISetDimension;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int UISetStandPoint;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int UIWalk;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int UIIntro;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int UIPlayerHeight;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int UISafetyNotice;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int UISpotAndFace;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int UIPlaceRealPlank;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int UIEnteringCity;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int DroppedToGround;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ControllerInputHandler inputHandler;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2 touchPadAxis;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2 prevAxis;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool isSwiping;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float scrollSpeed;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public PlankScale calibPlank;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform plankHandle;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float plankMaxLength;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float plankMinLength;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float plankMaxWidth;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float plankMinWidth;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float plankFinalLength;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float plankFinalWidth;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 plankForward;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject head;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Transform cameraRig;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 standPosition;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Text lengthText;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Text widthText;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Transform walkProgress;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int checkWalkInterval;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int checkTextInterval;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 unitVectorSum;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private int walkDataIndex;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool isAddingLength;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		private bool isReducingLength;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12A")]
		private bool isAddingWidth;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12B")]
		private bool isReducingWidth;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float currLength;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float currWidth;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private bool isWalking;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
		private bool isPlacingRealPlank;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float minWalkDistance;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool hasRealPlank;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Text height;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float currHeight;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public VisionController visionController;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool isHolding;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float holdProgress;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject sizeNextButton;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public GameObject gradientBox;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool takingHeight;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float startPressTimeStamp;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public GameObject markerStart;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public GameObject markerEnd;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject plankRaiser;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool isMarking;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private Vector3 plankLookDot;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private float plankHeight;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Transform cityPlank;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Vector3 cityPlankStartPos;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private float addSpeed;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float currAddSpeed;

		[Token(Token = "0x17000217")]
		public static CalibrationManager Instance
		{
			[Token(Token = "0x6001312")]
			[Address(RVA = "0xB80758", Offset = "0xB80758", VA = "0xB80758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000218")]
		public ProgressStage[] PlayerSwitchSequence
		{
			[Token(Token = "0x6001313")]
			[Address(RVA = "0xB807C0", Offset = "0xB807C0", VA = "0xB807C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		public CalibrationMode Mode
		{
			[Token(Token = "0x6001314")]
			[Address(RVA = "0xB807C8", Offset = "0xB807C8", VA = "0xB807C8")]
			get
			{
				return default(CalibrationMode);
			}
			[Token(Token = "0x6001315")]
			[Address(RVA = "0xB807D0", Offset = "0xB807D0", VA = "0xB807D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public bool[] StageComplete
		{
			[Token(Token = "0x6001316")]
			[Address(RVA = "0xB807D8", Offset = "0xB807D8", VA = "0xB807D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021B")]
		public bool HasRealPlank
		{
			[Token(Token = "0x600131B")]
			[Address(RVA = "0xB80A70", Offset = "0xB80A70", VA = "0xB80A70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600131C")]
			[Address(RVA = "0xB80A78", Offset = "0xB80A78", VA = "0xB80A78")]
			set
			{
			}
		}

		[Token(Token = "0x1400002E")]
		public event EventHandler<CalibrationProgressEventArgs> CalibrationProgress
		{
			[Token(Token = "0x6001317")]
			[Address(RVA = "0xB807E0", Offset = "0xB807E0", VA = "0xB807E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC640", Offset = "0x7FC640")]
			add
			{
			}
			[Token(Token = "0x6001318")]
			[Address(RVA = "0xB80884", Offset = "0xB80884", VA = "0xB80884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC650", Offset = "0x7FC650")]
			remove
			{
			}
		}

		[Token(Token = "0x1400002F")]
		public event EventHandler<CalibrationProgressEventArgs> StageCancel
		{
			[Token(Token = "0x6001319")]
			[Address(RVA = "0xB80928", Offset = "0xB80928", VA = "0xB80928")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC660", Offset = "0x7FC660")]
			add
			{
			}
			[Token(Token = "0x600131A")]
			[Address(RVA = "0xB809CC", Offset = "0xB809CC", VA = "0xB809CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC670", Offset = "0x7FC670")]
			remove
			{
			}
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xB80A84", Offset = "0xB80A84", VA = "0xB80A84")]
		private void Awake()
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xB81700", Offset = "0xB81700", VA = "0xB81700")]
		private void Start()
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xB81834", Offset = "0xB81834", VA = "0xB81834")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC680", Offset = "0x7FC680")]
		private IEnumerator PrintGuardianPoints(Vector3[] points)
		{
			return null;
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xB818A4", Offset = "0xB818A4", VA = "0xB818A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xB81B60", Offset = "0xB81B60", VA = "0xB81B60")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xB81E1C", Offset = "0xB81E1C", VA = "0xB81E1C")]
		public void InvokeCalibrationProgress(CalibrationProgressEventArgs e)
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xB81E94", Offset = "0xB81E94", VA = "0xB81E94")]
		public void InvokeStageCancel(CalibrationProgressEventArgs e)
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xB81F0C", Offset = "0xB81F0C", VA = "0xB81F0C")]
		public void OnStageFinish(object sender, CalibrationProgressEventArgs e)
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xB80D34", Offset = "0xB80D34", VA = "0xB80D34")]
		public void StartNextStage(CalibrationProgressEventArgs e)
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xB82AD8", Offset = "0xB82AD8", VA = "0xB82AD8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC6E4", Offset = "0x7FC6E4")]
		private IEnumerator PlayPlankFlyOut()
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xB82BB8", Offset = "0xB82BB8", VA = "0xB82BB8")]
		public void OnStageCancel(object sender, CalibrationProgressEventArgs e)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xB830F0", Offset = "0xB830F0", VA = "0xB830F0")]
		public void StartPrevStage(CalibrationProgressEventArgs e)
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xB82660", Offset = "0xB82660", VA = "0xB82660")]
		public void SetPlankLength(float length)
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xB82784", Offset = "0xB82784", VA = "0xB82784")]
		public void SetPlankWidth(float width)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xB83CB8", Offset = "0xB83CB8", VA = "0xB83CB8")]
		public void SetStandPosition(Vector3 point)
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xB83CC4", Offset = "0xB83CC4", VA = "0xB83CC4")]
		public Vector3 GetPlankForward()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xB83CE0", Offset = "0xB83CE0", VA = "0xB83CE0")]
		public void OnControllerButtonDown(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xB84118", Offset = "0xB84118", VA = "0xB84118")]
		public void OnControllerButtonUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xB84148", Offset = "0xB84148", VA = "0xB84148")]
		public void OnHasRealPlank(bool value)
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xB841D8", Offset = "0xB841D8", VA = "0xB841D8")]
		public void OnControllerAxis(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xB84418", Offset = "0xB84418", VA = "0xB84418")]
		private void AddPlankLength(bool addPositive)
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xB845C0", Offset = "0xB845C0", VA = "0xB845C0")]
		private void AddPlankLength(float amount)
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xB84264", Offset = "0xB84264", VA = "0xB84264")]
		private void AddPlankWidth(bool addPositive)
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xB84740", Offset = "0xB84740", VA = "0xB84740")]
		private void AddPlankWidth(float amount)
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xB848CC", Offset = "0xB848CC", VA = "0xB848CC")]
		public void ChangeLengthOn(bool adding)
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xB84928", Offset = "0xB84928", VA = "0xB84928")]
		public void ChangeWidthOn(bool adding)
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xB84984", Offset = "0xB84984", VA = "0xB84984")]
		public void ChangeLengthOff(bool adding)
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xB849A0", Offset = "0xB849A0", VA = "0xB849A0")]
		public void ChangeWidthOff(bool adding)
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xB849BC", Offset = "0xB849BC", VA = "0xB849BC")]
		public void OnControllerTouchUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xB849C4", Offset = "0xB849C4", VA = "0xB849C4")]
		public void OnControllerTouch(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xB84B48", Offset = "0xB84B48", VA = "0xB84B48")]
		public void SetNextStage(ProgressStage stage)
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xB84B50", Offset = "0xB84B50", VA = "0xB84B50")]
		public void JumpToStage(ProgressStage stage)
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xB84BCC", Offset = "0xB84BCC", VA = "0xB84BCC")]
		private void DeriveStartStage()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xB84C28", Offset = "0xB84C28", VA = "0xB84C28")]
		private void SetStartStage(ProgressStage stage)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xB82814", Offset = "0xB82814", VA = "0xB82814")]
		private void DeriveNextStage(ProgressStage currStage)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xB82950", Offset = "0xB82950", VA = "0xB82950")]
		private void DerivePrevStage(ProgressStage currStage)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xB84C30", Offset = "0xB84C30", VA = "0xB84C30")]
		public void HandleCalibrationMode()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xB84DE4", Offset = "0xB84DE4", VA = "0xB84DE4")]
		public bool CheckAllStageSet()
		{
			return default(bool);
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xB84E48", Offset = "0xB84E48", VA = "0xB84E48")]
		public void OnPause()
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xB84EE0", Offset = "0xB84EE0", VA = "0xB84EE0")]
		public void OnResume()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xB84F74", Offset = "0xB84F74", VA = "0xB84F74")]
		public void SetPlankScale(PlankScale newScale)
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xB82A74", Offset = "0xB82A74", VA = "0xB82A74")]
		public void SetPlankScale(PlankScale newScale, float length, float width)
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xB85078", Offset = "0xB85078", VA = "0xB85078")]
		public Vector3 GetPlankOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xB850A0", Offset = "0xB850A0", VA = "0xB850A0")]
		public void GeneratePlank()
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xB85370", Offset = "0xB85370", VA = "0xB85370")]
		private void Update()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xB85FA4", Offset = "0xB85FA4", VA = "0xB85FA4")]
		public void StartTakingHeight()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xB82A3C", Offset = "0xB82A3C", VA = "0xB82A3C")]
		public void StartTakingSpot()
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xB83A28", Offset = "0xB83A28", VA = "0xB83A28")]
		private void ResetDataPoints()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xB83D30", Offset = "0xB83D30", VA = "0xB83D30")]
		public float CalculatePlayerHeight()
		{
			return default(float);
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xB83AA4", Offset = "0xB83AA4", VA = "0xB83AA4")]
		public void OnDone()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xB85FB0", Offset = "0xB85FB0", VA = "0xB85FB0")]
		public void SavePlank()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xB82B48", Offset = "0xB82B48", VA = "0xB82B48")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC748", Offset = "0x7FC748")]
		private IEnumerator EnterCity()
		{
			return null;
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xB86150", Offset = "0xB86150", VA = "0xB86150")]
		private void ToggleInvisible(bool toInvis, Transform trans)
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xB84160", Offset = "0xB84160", VA = "0xB84160")]
		public void ProceedProgressStage()
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xB86238", Offset = "0xB86238", VA = "0xB86238")]
		public void SkipCalibration()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xB862B8", Offset = "0xB862B8", VA = "0xB862B8")]
		public void OnFullBlack(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xB864D8", Offset = "0xB864D8", VA = "0xB864D8")]
		public void BackTrackProgressStage()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xB86554", Offset = "0xB86554", VA = "0xB86554")]
		public ProgressStage GetProgressStage()
		{
			return default(ProgressStage);
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xB86424", Offset = "0xB86424", VA = "0xB86424")]
		public void loadRPEScene()
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xB8655C", Offset = "0xB8655C", VA = "0xB8655C")]
		public void SetPlankLookDot(bool isMarkerStart)
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xB865B4", Offset = "0xB865B4", VA = "0xB865B4")]
		public void ReleaseBothMarkers()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xB85EA8", Offset = "0xB85EA8", VA = "0xB85EA8")]
		public string MetricToImperial(float metricInMetres)
		{
			return null;
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xB8673C", Offset = "0xB8673C", VA = "0xB8673C")]
		public CalibrationManager()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class CalibrationProgressEventArgs : EventArgs
	{
		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CalibrationManager.ProgressStage currStage;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CalibrationManager.ProgressStage nextStage;

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xBD1E98", Offset = "0xBD1E98", VA = "0xBD1E98")]
		public CalibrationProgressEventArgs(CalibrationManager.ProgressStage currStage, CalibrationManager.ProgressStage nextStage)
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class HeightHoldBar : MonoBehaviour
	{
		[Token(Token = "0x600135E")]
		[Address(RVA = "0xACBB68", Offset = "0xACBB68", VA = "0xACBB68")]
		private void Update()
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xACBD30", Offset = "0xACBD30", VA = "0xACBD30")]
		public HeightHoldBar()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class Marker : MonoBehaviour
	{
		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isTouching;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rb;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider handCollider;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Pico_ControllerType controllerType;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ControllerInputHandler inputHandler;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform originalParent;

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xADB108", Offset = "0xADB108", VA = "0xADB108")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xADB1E4", Offset = "0xADB1E4", VA = "0xADB1E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xADB2BC", Offset = "0xADB2BC", VA = "0xADB2BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xADB394", Offset = "0xADB394", VA = "0xADB394")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xADB484", Offset = "0xADB484", VA = "0xADB484")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xADB518", Offset = "0xADB518", VA = "0xADB518")]
		public void OnControllerButtonDown(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xADB5B4", Offset = "0xADB5B4", VA = "0xADB5B4")]
		public void OnControllerButtonUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xADB6FC", Offset = "0xADB6FC", VA = "0xADB6FC")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x200027F")]
	public class PlayerHeightSprite : MonoBehaviour
	{
		[Token(Token = "0x6001368")]
		[Address(RVA = "0xA87D40", Offset = "0xA87D40", VA = "0xA87D40")]
		public PlayerHeightSprite()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class PlayerPositionZone : MonoBehaviour
	{
		[Token(Token = "0x6001369")]
		[Address(RVA = "0xA87D48", Offset = "0xA87D48", VA = "0xA87D48")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xA87EB0", Offset = "0xA87EB0", VA = "0xA87EB0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xA88018", Offset = "0xA88018", VA = "0xA88018")]
		public PlayerPositionZone()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class UserStartChoice : MonoBehaviour
	{
		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isSettingUp;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material UIButtonSelected;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material UIButtonDeselected;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material UIButtonPressed;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LoadRPEScene sceneLoader;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static UserStartChoice Instance;

		[Token(Token = "0x1700021C")]
		public bool IsSettingUp
		{
			[Token(Token = "0x600136C")]
			[Address(RVA = "0xA8B948", Offset = "0xA8B948", VA = "0xA8B948")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xA8B950", Offset = "0xA8B950", VA = "0xA8B950")]
		public void Awake()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xA8B9E0", Offset = "0xA8B9E0", VA = "0xA8B9E0")]
		public void SelectSetup()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xA8BA08", Offset = "0xA8BA08", VA = "0xA8BA08")]
		public void SelectPlay()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xA8BA2C", Offset = "0xA8BA2C", VA = "0xA8BA2C")]
		public UserStartChoice()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public class CheckPoint : MonoBehaviour
	{
		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent OnCheckpoint;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem psConfetti;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SoundGroup]
		public string soundCheckPointReached;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RaceManager raceManager;

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xBD1F18", Offset = "0xBD1F18", VA = "0xBD1F18")]
		private void Start()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xBD1FD8", Offset = "0xBD1FD8", VA = "0xBD1FD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xBD1FDC", Offset = "0xBD1FDC", VA = "0xBD1FDC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xBD215C", Offset = "0xBD215C", VA = "0xBD215C")]
		public CheckPoint()
		{
		}
	}
	[Token(Token = "0x2000283")]
	public class HeroAcademy : MonoBehaviour
	{
		[Token(Token = "0x2000431")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE89C", Offset = "0x7EE89C")]
		private sealed class <>c__DisplayClass48_0
		{
			[Token(Token = "0x4001842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x6001B98")]
			[Address(RVA = "0xACCD94", Offset = "0xACCD94", VA = "0xACCD94")]
			public <>c__DisplayClass48_0()
			{
			}

			[Token(Token = "0x6001B99")]
			[Address(RVA = "0xACF28C", Offset = "0xACF28C", VA = "0xACF28C")]
			internal void <HidePanel>b__0()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000432")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE8AC", Offset = "0x7EE8AC")]
		private sealed class <>c
		{
			[Token(Token = "0x4001843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001844")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__50_0;

			[Token(Token = "0x4001845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action <>9__58_0;

			[Token(Token = "0x6001B9B")]
			[Address(RVA = "0xACF27C", Offset = "0xACF27C", VA = "0xACF27C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001B9C")]
			[Address(RVA = "0xACF284", Offset = "0xACF284", VA = "0xACF284")]
			internal void <ShowPanel>b__50_0()
			{
			}

			[Token(Token = "0x6001B9D")]
			[Address(RVA = "0xACF288", Offset = "0xACF288", VA = "0xACF288")]
			internal void <SetMessage>b__58_0()
			{
			}
		}

		[Token(Token = "0x2000433")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE8BC", Offset = "0x7EE8BC")]
		private sealed class <IStopHeroAcademy>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001848")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HeroAcademy <>4__this;

			[Token(Token = "0x1700031C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BA1")]
				[Address(RVA = "0xAD0240", Offset = "0xAD0240", VA = "0xAD0240", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BA3")]
				[Address(RVA = "0xAD02A8", Offset = "0xAD02A8", VA = "0xAD02A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B9E")]
			[Address(RVA = "0xACD180", Offset = "0xACD180", VA = "0xACD180")]
			[DebuggerHidden]
			public <IStopHeroAcademy>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0xAD013C", Offset = "0xAD013C", VA = "0xAD013C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0xAD0140", Offset = "0xAD0140", VA = "0xAD0140", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BA2")]
			[Address(RVA = "0xAD0248", Offset = "0xAD0248", VA = "0xAD0248", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000434")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE8CC", Offset = "0x7EE8CC")]
		private sealed class <AnimateSetStars>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400184A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400184B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int number;

			[Token(Token = "0x400184C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HeroAcademy <>4__this;

			[Token(Token = "0x1700031E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BA7")]
				[Address(RVA = "0xACF7D4", Offset = "0xACF7D4", VA = "0xACF7D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700031F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BA9")]
				[Address(RVA = "0xACF83C", Offset = "0xACF83C", VA = "0xACF83C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0xACDF84", Offset = "0xACDF84", VA = "0xACDF84")]
			[DebuggerHidden]
			public <AnimateSetStars>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x6001BA5")]
			[Address(RVA = "0xACF444", Offset = "0xACF444", VA = "0xACF444", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BA6")]
			[Address(RVA = "0xACF448", Offset = "0xACF448", VA = "0xACF448", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BA8")]
			[Address(RVA = "0xACF7DC", Offset = "0xACF7DC", VA = "0xACF7DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000435")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE8DC", Offset = "0x7EE8DC")]
		private sealed class <AnimateStarsFast>d__63 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400184D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400184E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400184F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int number;

			[Token(Token = "0x4001850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HeroAcademy <>4__this;

			[Token(Token = "0x17000320")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BAD")]
				[Address(RVA = "0xACFB74", Offset = "0xACFB74", VA = "0xACFB74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000321")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BAF")]
				[Address(RVA = "0xACFBDC", Offset = "0xACFBDC", VA = "0xACFBDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BAA")]
			[Address(RVA = "0xACE0A8", Offset = "0xACE0A8", VA = "0xACE0A8")]
			[DebuggerHidden]
			public <AnimateStarsFast>d__63(int <>1__state)
			{
			}

			[Token(Token = "0x6001BAB")]
			[Address(RVA = "0xACF844", Offset = "0xACF844", VA = "0xACF844", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BAC")]
			[Address(RVA = "0xACF848", Offset = "0xACF848", VA = "0xACF848", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BAE")]
			[Address(RVA = "0xACFB7C", Offset = "0xACFB7C", VA = "0xACFB7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000436")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE8EC", Offset = "0x7EE8EC")]
		private sealed class <>c__DisplayClass65_0
		{
			[Token(Token = "0x4001851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject gameObject;

			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0xACE2E8", Offset = "0xACE2E8", VA = "0xACE2E8")]
			public <>c__DisplayClass65_0()
			{
			}

			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0xACF358", Offset = "0xACF358", VA = "0xACF358")]
			internal void <Reveal>b__0()
			{
			}
		}

		[Token(Token = "0x2000437")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE8FC", Offset = "0x7EE8FC")]
		private sealed class <>c__DisplayClass68_0
		{
			[Token(Token = "0x4001852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HeroAcademy <>4__this;

			[Token(Token = "0x4001853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject cutout;

			[Token(Token = "0x6001BB2")]
			[Address(RVA = "0xACE4C0", Offset = "0xACE4C0", VA = "0xACE4C0")]
			public <>c__DisplayClass68_0()
			{
			}

			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0xACF378", Offset = "0xACF378", VA = "0xACF378")]
			internal void <PopupCutout>b__0()
			{
			}
		}

		[Token(Token = "0x2000438")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE90C", Offset = "0x7EE90C")]
		private sealed class <>c__DisplayClass69_0
		{
			[Token(Token = "0x4001854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject cutout;

			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0xACE4C8", Offset = "0xACE4C8", VA = "0xACE4C8")]
			public <>c__DisplayClass69_0()
			{
			}

			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0xACF424", Offset = "0xACF424", VA = "0xACF424")]
			internal void <CloseCutout>b__0()
			{
			}
		}

		[Token(Token = "0x2000439")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE91C", Offset = "0x7EE91C")]
		private sealed class <EnablePerformanceObjects>d__81 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001856")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001857")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HeroAcademy <>4__this;

			[Token(Token = "0x4001858")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject[] <>7__wrap1;

			[Token(Token = "0x4001859")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <>7__wrap2;

			[Token(Token = "0x17000322")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BB9")]
				[Address(RVA = "0xAD00CC", Offset = "0xAD00CC", VA = "0xAD00CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000323")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BBB")]
				[Address(RVA = "0xAD0134", Offset = "0xAD0134", VA = "0xAD0134", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0xACEE44", Offset = "0xACEE44", VA = "0xACEE44")]
			[DebuggerHidden]
			public <EnablePerformanceObjects>d__81(int <>1__state)
			{
			}

			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0xACFE98", Offset = "0xACFE98", VA = "0xACFE98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BB8")]
			[Address(RVA = "0xACFE9C", Offset = "0xACFE9C", VA = "0xACFE9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0xAD00D4", Offset = "0xAD00D4", VA = "0xAD00D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200043A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE92C", Offset = "0x7EE92C")]
		private sealed class <DisablePerformanceObjects>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400185A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400185B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400185C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HeroAcademy <>4__this;

			[Token(Token = "0x400185D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject[] <>7__wrap1;

			[Token(Token = "0x400185E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <>7__wrap2;

			[Token(Token = "0x17000324")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BBF")]
				[Address(RVA = "0xACFE28", Offset = "0xACFE28", VA = "0xACFE28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000325")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BC1")]
				[Address(RVA = "0xACFE90", Offset = "0xACFE90", VA = "0xACFE90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0xACEF60", Offset = "0xACEF60", VA = "0xACEF60")]
			[DebuggerHidden]
			public <DisablePerformanceObjects>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x6001BBD")]
			[Address(RVA = "0xACFBE4", Offset = "0xACFBE4", VA = "0xACFBE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BBE")]
			[Address(RVA = "0xACFBE8", Offset = "0xACFBE8", VA = "0xACFBE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BC0")]
			[Address(RVA = "0xACFE30", Offset = "0xACFE30", VA = "0xACFE30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform deckStartPosition;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FireDeck fireDeck;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MissileMission missileMission;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RaceManager Race;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FlyingManager flyingManager;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RocketInputManager LeftRIM;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RocketInputManager RightRIM;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FlyingRocketController LeftFlyingRocket;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FlyingRocketController RightFlyingRocket;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject swapZone;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject[] PerformanceObjects;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject[] PerformanceObjectsTurnOn;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ContentLoader contentLoader;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject panels;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject firePanel;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject racePanel;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject missilePanel;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public TextMeshPro txtMessage;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject messageBoard;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject messageplatform;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject heroLogo;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject freeFlightRocket;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject[] activeButtons;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject[] activeButtonsDisabled;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public VRButton[] podiumButtons;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject star1;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject star2;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject star3;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SoundGroup]
		public string soundPopup;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SoundGroup]
		public string soundFinish;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SoundGroup]
		public string soundReveal;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private HeroAcademyMode mode;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[HideInInspector]
		public int starsLastSession;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public bool hapticBlocked;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[HideInInspector]
		public Pico_ControllerType freeFlightController;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int hidePanelMoveID;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private int showPanelMoveID;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private string tempmsg;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 podiumHeight;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 tempscale;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Vector3 tempV;

		[Token(Token = "0x1700021D")]
		public HeroAcademyMode Mode
		{
			[Token(Token = "0x6001375")]
			[Address(RVA = "0xACBD38", Offset = "0xACBD38", VA = "0xACBD38")]
			get
			{
				return default(HeroAcademyMode);
			}
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xACBD40", Offset = "0xACBD40", VA = "0xACBD40")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xACBF40", Offset = "0xACBF40", VA = "0xACBF40")]
		public void StartFireDeck()
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xACC324", Offset = "0xACC324", VA = "0xACC324")]
		public void StartMissileMission()
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xACC584", Offset = "0xACC584", VA = "0xACC584")]
		public void StartFreeFlightMission()
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xACAEB0", Offset = "0xACAEB0", VA = "0xACAEB0")]
		public void TogglePodiumButtonPressable(bool isActive)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xACC9BC", Offset = "0xACC9BC", VA = "0xACC9BC")]
		public void StartRace()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xACCB58", Offset = "0xACCB58", VA = "0xACCB58")]
		public void StartRaceDelayed()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xACC778", Offset = "0xACC778", VA = "0xACC778")]
		public void Go()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xACC19C", Offset = "0xACC19C", VA = "0xACC19C")]
		private void PrepareMission()
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xACCCB0", Offset = "0xACCCB0", VA = "0xACCCB0")]
		public void PreserveCameraRigPosition()
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xACC1E8", Offset = "0xACC1E8", VA = "0xACC1E8")]
		public void HidePanel(GameObject gameObject, float delay, float speed)
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xACCD9C", Offset = "0xACCD9C", VA = "0xACCD9C")]
		public void ShowPanel(GameObject gameObject, float delay, float speed)
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xACCFBC", Offset = "0xACCFBC", VA = "0xACCFBC")]
		public void StopHeroAcademy()
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xACD110", Offset = "0xACD110", VA = "0xACD110")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC7AC", Offset = "0x7FC7AC")]
		public IEnumerator IStopHeroAcademy()
		{
			return null;
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xACD1AC", Offset = "0xACD1AC", VA = "0xACD1AC")]
		public void TurnOffWeapons()
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xACD21C", Offset = "0xACD21C", VA = "0xACD21C")]
		public void StartHeroAcademy()
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xACD800", Offset = "0xACD800", VA = "0xACD800")]
		private void SetMessageHack()
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xACD808", Offset = "0xACD808", VA = "0xACD808")]
		public void SetMessage(string msg)
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xACDE70", Offset = "0xACDE70", VA = "0xACDE70")]
		public void SetRewardText(string msg)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xACDE8C", Offset = "0xACDE8C", VA = "0xACDE8C")]
		public void SetStars(int number)
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xACDF04", Offset = "0xACDF04", VA = "0xACDF04")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC810", Offset = "0x7FC810")]
		private IEnumerator AnimateSetStars(int number)
		{
			return null;
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xACDFB0", Offset = "0xACDFB0", VA = "0xACDFB0")]
		public void SetStarsFast(int number)
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xACE028", Offset = "0xACE028", VA = "0xACE028")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC874", Offset = "0x7FC874")]
		private IEnumerator AnimateStarsFast(int number)
		{
			return null;
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xACE0D4", Offset = "0xACE0D4", VA = "0xACE0D4")]
		private void Reveal(GameObject gameObject, float pitch = 1f)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xACE2F0", Offset = "0xACE2F0", VA = "0xACE2F0")]
		public void ResetCutOut(GameObject cutout)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xACE370", Offset = "0xACE370", VA = "0xACE370")]
		public void PopupCutout(GameObject cutout, float delay = 0f)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xACCBA4", Offset = "0xACCBA4", VA = "0xACCBA4")]
		public void CloseCutout(GameObject cutout, float delay = 0f, float speed = 2f)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xACD3A4", Offset = "0xACD3A4", VA = "0xACD3A4")]
		public void ResetHeroAcademy(bool shouldPanelsRise)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xACAF70", Offset = "0xACAF70", VA = "0xACAF70")]
		public void RaisePanels()
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xACAF10", Offset = "0xACAF10", VA = "0xACAF10")]
		public void SinkPanels()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xACE56C", Offset = "0xACE56C", VA = "0xACE56C")]
		public void OnDoorsOpen()
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xACE6D4", Offset = "0xACE6D4", VA = "0xACE6D4")]
		public void MissionComplete()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xACE780", Offset = "0xACE780", VA = "0xACE780")]
		public void ResetPlayer()
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xACE8EC", Offset = "0xACE8EC", VA = "0xACE8EC")]
		public void FadeAndResetSoon()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xACE960", Offset = "0xACE960", VA = "0xACE960")]
		private void FadeNow()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xACEA14", Offset = "0xACEA14", VA = "0xACEA14")]
		public void ResetPlayerNow()
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xACEC50", Offset = "0xACEC50", VA = "0xACEC50")]
		public Vector3 DeckStartPositionXZ()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xACEC78", Offset = "0xACEC78", VA = "0xACEC78")]
		public void RecenterCorrection()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xACEDD4", Offset = "0xACEDD4", VA = "0xACEDD4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC8D8", Offset = "0x7FC8D8")]
		private IEnumerator EnablePerformanceObjects()
		{
			return null;
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xACEE70", Offset = "0xACEE70", VA = "0xACEE70")]
		public void EnablePerformanceObjectsFast()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xACD790", Offset = "0xACD790", VA = "0xACD790")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC93C", Offset = "0x7FC93C")]
		private IEnumerator DisablePerformanceObjects()
		{
			return null;
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xACEF8C", Offset = "0xACEF8C", VA = "0xACEF8C")]
		public void SetMode(HeroAcademyMode newMode)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xACEF94", Offset = "0xACEF94", VA = "0xACEF94")]
		public void ButtonsHighlightsOn()
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xACC840", Offset = "0xACC840", VA = "0xACC840")]
		public void ButtonsHighlightsOff()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xACF110", Offset = "0xACF110", VA = "0xACF110")]
		public HeroAcademy()
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xACF1B4", Offset = "0xACF1B4", VA = "0xACF1B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC9A0", Offset = "0x7FC9A0")]
		private void <ResetHeroAcademy>b__70_0()
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xACF1F8", Offset = "0xACF1F8", VA = "0xACF1F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC9B0", Offset = "0x7FC9B0")]
		private void <ResetPlayer>b__75_0()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public enum HeroAcademyMode
	{
		[Token(Token = "0x4000F18")]
		Selecting,
		[Token(Token = "0x4000F19")]
		Race,
		[Token(Token = "0x4000F1A")]
		FireFight,
		[Token(Token = "0x4000F1B")]
		Missile,
		[Token(Token = "0x4000F1C")]
		Finished,
		[Token(Token = "0x4000F1D")]
		Inactive,
		[Token(Token = "0x4000F1E")]
		FreeFlight
	}
	[Token(Token = "0x2000285")]
	public class HeroTimer : MonoBehaviour
	{
		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timer;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float totaltime;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ContentLoader contentLoader;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bStarted;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshPro time;

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xAD02B0", Offset = "0xAD02B0", VA = "0xAD02B0")]
		public void Start()
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xAD02B4", Offset = "0xAD02B4", VA = "0xAD02B4")]
		public void StartTimer()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xAD02C4", Offset = "0xAD02C4", VA = "0xAD02C4")]
		public void StopTimer()
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xAD02CC", Offset = "0xAD02CC", VA = "0xAD02CC")]
		public void ResetTimer()
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xAD02D8", Offset = "0xAD02D8", VA = "0xAD02D8")]
		public void Update()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xAD0318", Offset = "0xAD0318", VA = "0xAD0318")]
		public void Completed()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xAD0324", Offset = "0xAD0324", VA = "0xAD0324")]
		public string FormatTime(float time)
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xAD0424", Offset = "0xAD0424", VA = "0xAD0424")]
		public HeroTimer()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class Missile : MonoBehaviour
	{
		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool bExploded;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool bPlayerInfluence;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem psThrust;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem psDamaged;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double dStartposition;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem psExplosion;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject model;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool bFollow;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform followThis;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float smoothFollowTime;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float smoothRotateTime;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MissileMission missileMission;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Collider collider;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public OculusHaptics oculusHapticsL;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public OculusHaptics oculusHapticsR;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F6BE0", Offset = "0x7F6BE0")]
		[SoundGroup]
		public string soundRocket;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private PlaySoundResult srRocket;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SoundGroup]
		public string soundExplosion;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SoundGroup]
		public string soundHit;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SoundGroup]
		public string soundDowner;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SoundGroup]
		public string soundBeep;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 gravityFake;

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xADB704", Offset = "0xADB704", VA = "0xADB704")]
		private void Start()
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xADB80C", Offset = "0xADB80C", VA = "0xADB80C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xADB91C", Offset = "0xADB91C", VA = "0xADB91C")]
		public void Launch()
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xADBAB0", Offset = "0xADBAB0", VA = "0xADBAB0")]
		private void AddForceNext()
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xADBAB4", Offset = "0xADBAB4", VA = "0xADBAB4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xADBBC0", Offset = "0xADBBC0", VA = "0xADBBC0")]
		private void OnTriggerEnter(Collider collision)
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xADC008", Offset = "0xADC008", VA = "0xADC008")]
		private void Explode()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xADC160", Offset = "0xADC160", VA = "0xADC160")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xADC4B8", Offset = "0xADC4B8", VA = "0xADC4B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xADC524", Offset = "0xADC524", VA = "0xADC524")]
		private void ReLaunch()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xADC528", Offset = "0xADC528", VA = "0xADC528")]
		public Missile()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class MissileMission : MonoBehaviour
	{
		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ready;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject set;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject go;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject instruction;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject star1;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject star2;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject star3;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public HeroTimer timer;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HeroAcademy heroAcademy;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SoundGroup]
		public string soundReady;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SoundGroup]
		public string soundGo;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SoundGroup]
		public string soundFinish;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Missile m1;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Missile m2;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Missile m3;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int iScore;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int iRequiredscore;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public FlyingManager flyingManager;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 tempV;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float fMaxDrag;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private SplineFollower[] splineFollowerMissiles;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int i;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private string txtMsg;

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xADC5E8", Offset = "0xADC5E8", VA = "0xADC5E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xADC708", Offset = "0xADC708", VA = "0xADC708")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xADC70C", Offset = "0xADC70C", VA = "0xADC70C")]
		public void Ready()
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xADC8B8", Offset = "0xADC8B8", VA = "0xADC8B8")]
		public void Ready2()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xADC9D0", Offset = "0xADC9D0", VA = "0xADC9D0")]
		public void Set()
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xADCAE8", Offset = "0xADCAE8", VA = "0xADCAE8")]
		public void Go()
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xADCC5C", Offset = "0xADCC5C", VA = "0xADCC5C")]
		public void CheckForGoneLoop()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xADCD10", Offset = "0xADCD10", VA = "0xADCD10")]
		public void Gone()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xADBF54", Offset = "0xADBF54", VA = "0xADBF54")]
		public void MissileDestroyed()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xADD2C0", Offset = "0xADD2C0", VA = "0xADD2C0")]
		public void LockPlayer()
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xACE4D0", Offset = "0xACE4D0", VA = "0xACE4D0")]
		public void StopMissileMission()
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xADCDD4", Offset = "0xADCDD4", VA = "0xADCDD4")]
		public void Finish()
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xADD37C", Offset = "0xADD37C", VA = "0xADD37C")]
		private void SetRewardText()
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xADD55C", Offset = "0xADD55C", VA = "0xADD55C")]
		public void OnLanguageChange(int inputLanguage)
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xACC504", Offset = "0xACC504", VA = "0xACC504")]
		public void StartMission()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xACBD90", Offset = "0xACBD90", VA = "0xACBD90")]
		public void SetPodiumStars()
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xADD560", Offset = "0xADD560", VA = "0xADD560")]
		public MissileMission()
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xADD5C0", Offset = "0xADD5C0", VA = "0xADD5C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FC9C0", Offset = "0x7FC9C0")]
		private void <Finish>b__34_0(float value)
		{
		}
	}
	[Token(Token = "0x2000288")]
	public enum VibrationForce
	{
		[Token(Token = "0x4000F54")]
		Light,
		[Token(Token = "0x4000F55")]
		Medium,
		[Token(Token = "0x4000F56")]
		Hard,
		[Token(Token = "0x4000F57")]
		Nuclear
	}
	[Token(Token = "0x2000289")]
	public class OculusHaptics : MonoBehaviour
	{
		[Token(Token = "0x200043B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE93C", Offset = "0x7EE93C")]
		private sealed class <VibrateTime>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400185F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VibrationForce force;

			[Token(Token = "0x4001862")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OculusHaptics <>4__this;

			[Token(Token = "0x4001863")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x17000326")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BC5")]
				[Address(RVA = "0xA83E60", Offset = "0xA83E60", VA = "0xA83E60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000327")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BC7")]
				[Address(RVA = "0xA83EC8", Offset = "0xA83EC8", VA = "0xA83EC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BC2")]
			[Address(RVA = "0xA83CB0", Offset = "0xA83CB0", VA = "0xA83CB0")]
			[DebuggerHidden]
			public <VibrateTime>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0xA83CE4", Offset = "0xA83CE4", VA = "0xA83CE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BC4")]
			[Address(RVA = "0xA83CE8", Offset = "0xA83CE8", VA = "0xA83CE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BC6")]
			[Address(RVA = "0xA83E68", Offset = "0xA83E68", VA = "0xA83E68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public OVRInput.Controller controllerMask;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OVRHapticsClip clipLight;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRHapticsClip clipMedium;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHapticsClip clipHard;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRHapticsClip clipNuclear;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRHaptics.OVRHapticsChannel channel;

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xA837B0", Offset = "0xA837B0", VA = "0xA837B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xA837B4", Offset = "0xA837B4", VA = "0xA837B4")]
		private void InitializeOVRHaptics()
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xA83A1C", Offset = "0xA83A1C", VA = "0xA83A1C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xA83ADC", Offset = "0xA83ADC", VA = "0xA83ADC")]
		public void Vibrate(VibrationForce vibrationForce)
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xA83C04", Offset = "0xA83C04", VA = "0xA83C04")]
		public void Stop()
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xA83C20", Offset = "0xA83C20", VA = "0xA83C20")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FC9D0", Offset = "0x7FC9D0")]
		public IEnumerator VibrateTime(VibrationForce force, float time)
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xA83CDC", Offset = "0xA83CDC", VA = "0xA83CDC")]
		public OculusHaptics()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class OculusQuestPerformance : MonoBehaviour
	{
		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bLogEnabled;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F6CAC", Offset = "0x7F6CAC")]
		public OVRPlugin.TiledMultiResLevel FFRDefault;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fEyeTextureResolutionScaleDefault;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int minGPULevelDefault;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Lift lift;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F6CE4", Offset = "0x7F6CE4")]
		public GameObject[] OculusQuest1Only;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject[] OculusQuest2Only;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F6D1C", Offset = "0x7F6D1C")]
		public GameObject[] disableWhenOnGround;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OVRPlugin.TiledMultiResLevel FFRGround;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float fEyeTextureResolutionScaleGround;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int minGPULevelGround;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F6D54", Offset = "0x7F6D54")]
		public GameObject[] disableWhenOnPlank;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OVRPlugin.TiledMultiResLevel FFRPlank;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float fEyeTextureResolutionScalePlank;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float fEyeTextureResolutionScalePlankLookingDown;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int minGPULevelPlank;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7F6D8C", Offset = "0x7F6D8C")]
		public GameObject[] disableWhenFlying;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVRPlugin.TiledMultiResLevel FFRFlying;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float fEyeTextureResolutionScaleFlying;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int minGPULevelFlying;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float gpuTime;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float gpuTimeCompositor;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float gpuTimeHighest;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float gpuTimeCompositorHighest;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int previousSkippedFrames;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int skippedFrames;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private OVRDisplay.LatencyData latency;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int fFrameCounter;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Material shinyMaterial;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float fTimer;

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xA83ED0", Offset = "0xA83ED0", VA = "0xA83ED0")]
		private void Start()
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xA8410C", Offset = "0xA8410C", VA = "0xA8410C")]
		public void OnGround()
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xA8420C", Offset = "0xA8420C", VA = "0xA8420C")]
		public void OnPlank()
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xA8430C", Offset = "0xA8430C", VA = "0xA8430C")]
		public void OnFlying()
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xA84410", Offset = "0xA84410", VA = "0xA84410")]
		public void LeaveGround()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xA844F0", Offset = "0xA844F0", VA = "0xA844F0")]
		public void LeavePlank()
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xA845D0", Offset = "0xA845D0", VA = "0xA845D0")]
		public void LeaveFlying()
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xA846D4", Offset = "0xA846D4", VA = "0xA846D4")]
		public void RestartHighest()
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xA846DC", Offset = "0xA846DC", VA = "0xA846DC")]
		public void StaticCarRendered()
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xA84708", Offset = "0xA84708", VA = "0xA84708")]
		public void StaticCarNotRendered()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xA84734", Offset = "0xA84734", VA = "0xA84734")]
		public OculusQuestPerformance()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class RaceCheckpointPass : MonoBehaviour
	{
		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider finishCollider;

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xA8826C", Offset = "0xA8826C", VA = "0xA8826C")]
		public void ColliderOff()
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xA8828C", Offset = "0xA8828C", VA = "0xA8828C")]
		public void ColliderOn()
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xA882AC", Offset = "0xA882AC", VA = "0xA882AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xA882B0", Offset = "0xA882B0", VA = "0xA882B0")]
		public RaceCheckpointPass()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class RaceFinishCollision : MonoBehaviour
	{
		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider finishCollider;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject finishWall;

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xA882B8", Offset = "0xA882B8", VA = "0xA882B8")]
		public void ColliderOff()
		{
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xA882FC", Offset = "0xA882FC", VA = "0xA882FC")]
		public void ColliderOn()
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xA8831C", Offset = "0xA8831C", VA = "0xA8831C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xA88320", Offset = "0xA88320", VA = "0xA88320")]
		public RaceFinishCollision()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class RaceManager : MonoBehaviour
	{
		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ready;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject set;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject go;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject instruction;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject star1;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject star2;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject star3;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public HeroTimer timer;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HeroAcademy heroAcademy;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int numberOfCheckpoints;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int numberOfCheckpointsReached;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SoundGroup]
		public string soundReady;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SoundGroup]
		public string soundGo;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SoundGroup]
		public string soundFinish;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FlyingManager flyingManager;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 tempV;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float fMaxDrag;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string txtMsg;

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xA88328", Offset = "0xA88328", VA = "0xA88328")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xA8843C", Offset = "0xA8843C", VA = "0xA8843C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xA88440", Offset = "0xA88440", VA = "0xA88440")]
		public void Ready()
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xA8858C", Offset = "0xA8858C", VA = "0xA8858C")]
		public void Ready2()
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xA886E4", Offset = "0xA886E4", VA = "0xA886E4")]
		public void Set()
		{
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xA8883C", Offset = "0xA8883C", VA = "0xA8883C")]
		public void Go()
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xA88980", Offset = "0xA88980", VA = "0xA88980")]
		public void CheckForGoneLoop()
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xA88A34", Offset = "0xA88A34", VA = "0xA88A34")]
		public void Gone()
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xA88AF8", Offset = "0xA88AF8", VA = "0xA88AF8")]
		public void Checkpoint()
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xA88AFC", Offset = "0xA88AFC", VA = "0xA88AFC")]
		public void LockPlayer()
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xA88B28", Offset = "0xA88B28", VA = "0xA88B28")]
		public void StopRace()
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xA88B68", Offset = "0xA88B68", VA = "0xA88B68")]
		public void Finish()
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xA890EC", Offset = "0xA890EC", VA = "0xA890EC")]
		private void SetRewardText()
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xA893E0", Offset = "0xA893E0", VA = "0xA893E0")]
		public void OnLanguageChange(int inputLanguage)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xA893E4", Offset = "0xA893E4", VA = "0xA893E4")]
		public void SetPodiumStars()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xA89594", Offset = "0xA89594", VA = "0xA89594")]
		public RaceManager()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class DebugTimeAccelerator : MonoBehaviour
	{
		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Pico_InputID buttonToTrigger;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ControllerInputHandler inputHandler;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float targetTimeScale;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool isOn;

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xBE01F0", Offset = "0xBE01F0", VA = "0xBE01F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xBE0264", Offset = "0xBE0264", VA = "0xBE0264")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xBE02F4", Offset = "0xBE02F4", VA = "0xBE02F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xBE0384", Offset = "0xBE0384", VA = "0xBE0384")]
		public void OnControllerButtonUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xBE04C4", Offset = "0xBE04C4", VA = "0xBE04C4")]
		public DebugTimeAccelerator()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public class DebugToggleObject : MonoBehaviour
	{
		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Pico_InputID buttonToTrigger;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] objectsToToggle;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ControllerInputHandler inputHandler;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isOn;

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xBE04CC", Offset = "0xBE04CC", VA = "0xBE04CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xBE0540", Offset = "0xBE0540", VA = "0xBE0540")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xBE05D0", Offset = "0xBE05D0", VA = "0xBE05D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xBE0660", Offset = "0xBE0660", VA = "0xBE0660")]
		public void OnControllerButtonUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xBE06F0", Offset = "0xBE06F0", VA = "0xBE06F0")]
		public DebugToggleObject()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public class Whiteroom3 : MonoBehaviour
	{
		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xA8C188", Offset = "0xA8C188", VA = "0xA8C188")]
		public Whiteroom3()
		{
		}
	}
	[Token(Token = "0x2000291")]
	public class GestureDetector : MonoBehaviour
	{
		[Token(Token = "0x200043C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE94C", Offset = "0x7EE94C")]
		private sealed class <RegisterBones>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001864")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GestureDetector <>4__this;

			[Token(Token = "0x17000328")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BCB")]
				[Address(RVA = "0xBE426C", Offset = "0xBE426C", VA = "0xBE426C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000329")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BCD")]
				[Address(RVA = "0xBE42D4", Offset = "0xBE42D4", VA = "0xBE42D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BC8")]
			[Address(RVA = "0xBE3A50", Offset = "0xBE3A50", VA = "0xBE3A50")]
			[DebuggerHidden]
			public <RegisterBones>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001BC9")]
			[Address(RVA = "0xBE419C", Offset = "0xBE419C", VA = "0xBE419C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BCA")]
			[Address(RVA = "0xBE41A0", Offset = "0xBE41A0", VA = "0xBE41A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BCC")]
			[Address(RVA = "0xBE4274", Offset = "0xBE4274", VA = "0xBE4274", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OVRSkeleton skeleton;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Gesture> gestures;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<OVRBone> fingerBones;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool debugMode;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float threshold;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Gesture previousGesture;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool initialised;

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xBE39A8", Offset = "0xBE39A8", VA = "0xBE39A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xBE39E0", Offset = "0xBE39E0", VA = "0xBE39E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCA34", Offset = "0x7FCA34")]
		private IEnumerator RegisterBones()
		{
			return null;
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xBE3A7C", Offset = "0xBE3A7C", VA = "0xBE3A7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xBE3CA4", Offset = "0xBE3CA4", VA = "0xBE3CA4")]
		private void Save()
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xBE3E94", Offset = "0xBE3E94", VA = "0xBE3E94")]
		private Gesture Recognize()
		{
			return default(Gesture);
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xBE4188", Offset = "0xBE4188", VA = "0xBE4188")]
		public GestureDetector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000292")]
	public struct Gesture
	{
		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<Vector3> fingerDatas;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEvent onRecognized;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onQuitGesture;
	}
	[Token(Token = "0x2000293")]
	public class GrabberHand : Grabber
	{
		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public HandInit handInit;

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xBE6024", Offset = "0xBE6024", VA = "0xBE6024", Slot = "4")]
		public override void OnControllerAxis(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xBE6028", Offset = "0xBE6028", VA = "0xBE6028")]
		public void JudgeGrab(float pinchStrength)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xBE695C", Offset = "0xBE695C", VA = "0xBE695C", Slot = "5")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xBE69A0", Offset = "0xBE69A0", VA = "0xBE69A0", Slot = "6")]
		public override void Release()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xBE6A8C", Offset = "0xBE6A8C", VA = "0xBE6A8C")]
		public void GripGrab()
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xBE6FA8", Offset = "0xBE6FA8", VA = "0xBE6FA8")]
		public GrabberHand()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class HandGripSphere : MonoBehaviour
	{
		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform hand;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabberHand grabber;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int fingertipsInSphere;

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xBE7F14", Offset = "0xBE7F14", VA = "0xBE7F14")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xBE8040", Offset = "0xBE8040", VA = "0xBE8040")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xBE8174", Offset = "0xBE8174", VA = "0xBE8174")]
		public HandGripSphere()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class HandInit : MonoBehaviour
	{
		[Token(Token = "0x200043D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE95C", Offset = "0x7EE95C")]
		private sealed class <RegisterBones>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandInit <>4__this;

			[Token(Token = "0x1700032A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BD1")]
				[Address(RVA = "0xAC8E80", Offset = "0xAC8E80", VA = "0xAC8E80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BD3")]
				[Address(RVA = "0xAC8EE8", Offset = "0xAC8EE8", VA = "0xAC8EE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0xAC8414", Offset = "0xAC8414", VA = "0xAC8414")]
			[DebuggerHidden]
			public <RegisterBones>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001BCF")]
			[Address(RVA = "0xAC8E1C", Offset = "0xAC8E1C", VA = "0xAC8E1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0xAC8E20", Offset = "0xAC8E20", VA = "0xAC8E20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BD2")]
			[Address(RVA = "0xAC8E88", Offset = "0xAC8E88", VA = "0xAC8E88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200043E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE96C", Offset = "0x7EE96C")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x400186A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int i;

			[Token(Token = "0x400186B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HandInit <>4__this;

			[Token(Token = "0x6001BD4")]
			[Address(RVA = "0xAC8B28", Offset = "0xAC8B28", VA = "0xAC8B28")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6001BD5")]
			[Address(RVA = "0xAC8CB8", Offset = "0xAC8CB8", VA = "0xAC8CB8")]
			internal bool <AdaptHandCapsules>b__0(OVRSkeleton.BoneId element)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public OVRSkeleton ovrSkeleton;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public OVRHand ovrHand;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material colliderMaterial;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isDebug;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton.BoneId[] fingerTips;

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xAC82EC", Offset = "0xAC82EC", VA = "0xAC82EC")]
		private void Start()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xAC83A4", Offset = "0xAC83A4", VA = "0xAC83A4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCA98", Offset = "0x7FCA98")]
		private IEnumerator RegisterBones()
		{
			return null;
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xAC8440", Offset = "0xAC8440", VA = "0xAC8440")]
		private void AddFingerTips()
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xAC8830", Offset = "0xAC8830", VA = "0xAC8830")]
		private void AdaptHandCapsules()
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xAC8B30", Offset = "0xAC8B30", VA = "0xAC8B30")]
		public void SetHandCapsulesAsTrigger(bool input)
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xAC8CB0", Offset = "0xAC8CB0", VA = "0xAC8CB0")]
		public HandInit()
		{
		}
	}
	[Token(Token = "0x2000296")]
	public class HandInputHandler : MonoBehaviour
	{
		[Token(Token = "0x200043F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE97C", Offset = "0x7EE97C")]
		private sealed class <HandMenuCooldown>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400186C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400186D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400186E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandInputHandler <>4__this;

			[Token(Token = "0x1700032C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BD9")]
				[Address(RVA = "0xACA3F0", Offset = "0xACA3F0", VA = "0xACA3F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BDB")]
				[Address(RVA = "0xACA458", Offset = "0xACA458", VA = "0xACA458", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BD6")]
			[Address(RVA = "0xAC9D78", Offset = "0xAC9D78", VA = "0xAC9D78")]
			[DebuggerHidden]
			public <HandMenuCooldown>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001BD7")]
			[Address(RVA = "0xACA340", Offset = "0xACA340", VA = "0xACA340", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BD8")]
			[Address(RVA = "0xACA344", Offset = "0xACA344", VA = "0xACA344", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BDA")]
			[Address(RVA = "0xACA3F8", Offset = "0xACA3F8", VA = "0xACA3F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HandInputHandler Instance;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OVRHand LHand;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OVRHand RHand;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public OVRSkeleton.BoneId[] colliderBoneIDs;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public OVRHand.HandFinger[] pinchFingers;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] prevLHandPinchStrength;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float[] prevRHandPinchStrength;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F6E74", Offset = "0x7F6E74")]
		private float pinchThreshold;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F6E8C", Offset = "0x7F6E8C")]
		private float pinchReleaseThreshold;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject controllerL;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject controllerR;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool prevLHandConfidence;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool prevRHandConfidence;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool handMenuCooling;

		[Token(Token = "0x1700021E")]
		public float LPinch
		{
			[Token(Token = "0x600141C")]
			[Address(RVA = "0xAC9410", Offset = "0xAC9410", VA = "0xAC9410")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700021F")]
		public float RPinch
		{
			[Token(Token = "0x600141D")]
			[Address(RVA = "0xAC9444", Offset = "0xAC9444", VA = "0xAC9444")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x14000030")]
		public event EventHandler<HandEventArgs> Pinch
		{
			[Token(Token = "0x6001414")]
			[Address(RVA = "0xAC8EF0", Offset = "0xAC8EF0", VA = "0xAC8EF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCAFC", Offset = "0x7FCAFC")]
			add
			{
			}
			[Token(Token = "0x6001415")]
			[Address(RVA = "0xAC8F94", Offset = "0xAC8F94", VA = "0xAC8F94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCB0C", Offset = "0x7FCB0C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000031")]
		public event EventHandler<HandEventArgs> ReleasePinch
		{
			[Token(Token = "0x6001416")]
			[Address(RVA = "0xAC9038", Offset = "0xAC9038", VA = "0xAC9038")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCB1C", Offset = "0x7FCB1C")]
			add
			{
			}
			[Token(Token = "0x6001417")]
			[Address(RVA = "0xAC90DC", Offset = "0xAC90DC", VA = "0xAC90DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCB2C", Offset = "0x7FCB2C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public event EventHandler<HandEventArgs> GainTracking
		{
			[Token(Token = "0x6001418")]
			[Address(RVA = "0xAC9180", Offset = "0xAC9180", VA = "0xAC9180")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCB3C", Offset = "0x7FCB3C")]
			add
			{
			}
			[Token(Token = "0x6001419")]
			[Address(RVA = "0xAC9224", Offset = "0xAC9224", VA = "0xAC9224")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCB4C", Offset = "0x7FCB4C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000033")]
		public event EventHandler<HandEventArgs> LoseTracking
		{
			[Token(Token = "0x600141A")]
			[Address(RVA = "0xAC92C8", Offset = "0xAC92C8", VA = "0xAC92C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCB5C", Offset = "0x7FCB5C")]
			add
			{
			}
			[Token(Token = "0x600141B")]
			[Address(RVA = "0xAC936C", Offset = "0xAC936C", VA = "0xAC936C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCB6C", Offset = "0x7FCB6C")]
			remove
			{
			}
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xAC9478", Offset = "0xAC9478", VA = "0xAC9478")]
		private void Awake()
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xAC9554", Offset = "0xAC9554", VA = "0xAC9554")]
		private void Update()
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xAC9D08", Offset = "0xAC9D08", VA = "0xAC9D08")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCB7C", Offset = "0x7FCB7C")]
		private IEnumerator HandMenuCooldown()
		{
			return null;
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xAC9DA4", Offset = "0xAC9DA4", VA = "0xAC9DA4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xAC9878", Offset = "0xAC9878", VA = "0xAC9878")]
		private void CheckHandInput(OVRHand ovrHand, OVRInput.Controller hand)
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xAC9FC8", Offset = "0xAC9FC8", VA = "0xAC9FC8")]
		public void InvokePinch(OVRInput.Controller inputControllerType, OVRHand.HandFinger inputFinger)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xACA078", Offset = "0xACA078", VA = "0xACA078")]
		public void InvokeReleasePinch(OVRInput.Controller inputControllerType, OVRHand.HandFinger inputFinger)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xAC9DD8", Offset = "0xAC9DD8", VA = "0xAC9DD8")]
		private float GetPrevPinchStrength(OVRInput.Controller hand, OVRHand.HandFinger finger)
		{
			return default(float);
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xACA128", Offset = "0xACA128", VA = "0xACA128")]
		private void SetPrevPinchStrength(OVRInput.Controller hand, OVRHand.HandFinger finger, float pinchStrength)
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xAC99F4", Offset = "0xAC99F4", VA = "0xAC99F4")]
		private void SetLayerRecursively(GameObject obj, int newLayer)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xACA32C", Offset = "0xACA32C", VA = "0xACA32C")]
		public HandInputHandler()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class HandEventArgs : EventArgs
	{
		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OVRInput.Controller controllerType;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public OVRHand.HandFinger finger;

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xBE7E94", Offset = "0xBE7E94", VA = "0xBE7E94")]
		public HandEventArgs(OVRInput.Controller inputControllerType, OVRHand.HandFinger inputFinger)
		{
		}
	}
	[Token(Token = "0x2000298")]
	public class HandTrackingNotice : MonoBehaviour
	{
		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ControllerInputHandler controllerHandler;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlyingManager flyingManager;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform palette;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject noticeBoard;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer[] paletteRenderers;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Renderer[] lControllerRenderers;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer[] rControllerRenderers;

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xACA460", Offset = "0xACA460", VA = "0xACA460")]
		private void Start()
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xACA4EC", Offset = "0xACA4EC", VA = "0xACA4EC")]
		private void Update()
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xACA954", Offset = "0xACA954", VA = "0xACA954")]
		private void Show()
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xACA6A8", Offset = "0xACA6A8", VA = "0xACA6A8")]
		private void Hide()
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xACAE34", Offset = "0xACAE34", VA = "0xACAE34")]
		private void ToggleRenderers(Renderer[] renderers, bool isTurningOn)
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xACAFEC", Offset = "0xACAFEC", VA = "0xACAFEC")]
		public HandTrackingNotice()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class HandTrackingToggleBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Behaviour target;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isShowingWithHands;

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xACAFF4", Offset = "0xACAFF4", VA = "0xACAFF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xACB45C", Offset = "0xACB45C", VA = "0xACB45C")]
		public HandTrackingToggleBehaviour()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class HandTrackingToggleCollider : MonoBehaviour
	{
		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider target;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isShowingWithHands;

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xACB464", Offset = "0xACB464", VA = "0xACB464")]
		private void Update()
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xACB8CC", Offset = "0xACB8CC", VA = "0xACB8CC")]
		public HandTrackingToggleCollider()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public class HandTrackingWIP : MonoBehaviour
	{
		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject child;

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xACB8D4", Offset = "0xACB8D4", VA = "0xACB8D4", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xACBA70", Offset = "0xACBA70", VA = "0xACBA70")]
		public HandTrackingWIP()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public class HandTrackingWIPButton6 : HandTrackingWIP
	{
		[Token(Token = "0x6001436")]
		[Address(RVA = "0xACBA78", Offset = "0xACBA78", VA = "0xACBA78", Slot = "4")]
		public override void Update()
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xACBB58", Offset = "0xACBB58", VA = "0xACBB58")]
		public HandTrackingWIPButton6()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class MainMenu : MonoBehaviour
	{
		[Token(Token = "0x2000440")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE98C", Offset = "0x7EE98C")]
		private sealed class <Init>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400186F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001871")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainMenu <>4__this;

			[Token(Token = "0x1700032E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BDF")]
				[Address(RVA = "0xADABF8", Offset = "0xADABF8", VA = "0xADABF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BE1")]
				[Address(RVA = "0xADAC60", Offset = "0xADAC60", VA = "0xADAC60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BDC")]
			[Address(RVA = "0xAD8EF4", Offset = "0xAD8EF4", VA = "0xAD8EF4")]
			[DebuggerHidden]
			public <Init>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001BDD")]
			[Address(RVA = "0xADAAA0", Offset = "0xADAAA0", VA = "0xADAAA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BDE")]
			[Address(RVA = "0xADAAA4", Offset = "0xADAAA4", VA = "0xADAAA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BE0")]
			[Address(RVA = "0xADAC00", Offset = "0xADAC00", VA = "0xADAC00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000441")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE99C", Offset = "0x7EE99C")]
		private sealed class <SubscribeEvents>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001872")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001873")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001874")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainMenu <>4__this;

			[Token(Token = "0x17000330")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BE5")]
				[Address(RVA = "0xADB098", Offset = "0xADB098", VA = "0xADB098", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000331")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BE7")]
				[Address(RVA = "0xADB100", Offset = "0xADB100", VA = "0xADB100", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BE2")]
			[Address(RVA = "0xAD8FBC", Offset = "0xAD8FBC", VA = "0xAD8FBC")]
			[DebuggerHidden]
			public <SubscribeEvents>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001BE3")]
			[Address(RVA = "0xADAE00", Offset = "0xADAE00", VA = "0xADAE00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BE4")]
			[Address(RVA = "0xADAE04", Offset = "0xADAE04", VA = "0xADAE04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BE6")]
			[Address(RVA = "0xADB0A0", Offset = "0xADB0A0", VA = "0xADB0A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000442")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE9AC", Offset = "0x7EE9AC")]
		private sealed class <RecenterAction>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001875")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001876")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MainMenu <>4__this;

			[Token(Token = "0x17000332")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BEB")]
				[Address(RVA = "0xADAD90", Offset = "0xADAD90", VA = "0xADAD90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000333")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BED")]
				[Address(RVA = "0xADADF8", Offset = "0xADADF8", VA = "0xADADF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BE8")]
			[Address(RVA = "0xADA4F4", Offset = "0xADA4F4", VA = "0xADA4F4")]
			[DebuggerHidden]
			public <RecenterAction>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001BE9")]
			[Address(RVA = "0xADAC68", Offset = "0xADAC68", VA = "0xADAC68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BEA")]
			[Address(RVA = "0xADAC6C", Offset = "0xADAC6C", VA = "0xADAC6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BEC")]
			[Address(RVA = "0xADAD98", Offset = "0xADAD98", VA = "0xADAD98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator anim;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int intro;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int mainMenu;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int credits;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text fallingOptionText;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text nightmareText;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ControllerInputHandler inputHandler;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool menuDownFired;

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xAD8E58", Offset = "0xAD8E58", VA = "0xAD8E58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xAD8E84", Offset = "0xAD8E84", VA = "0xAD8E84")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCBE0", Offset = "0x7FCBE0")]
		private IEnumerator Init()
		{
			return null;
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xAD8F20", Offset = "0xAD8F20", VA = "0xAD8F20")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xAD8F4C", Offset = "0xAD8F4C", VA = "0xAD8F4C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCC44", Offset = "0x7FCC44")]
		private IEnumerator SubscribeEvents()
		{
			return null;
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xAD8FE8", Offset = "0xAD8FE8", VA = "0xAD8FE8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xAD91A8", Offset = "0xAD91A8", VA = "0xAD91A8")]
		public void OnWarpToGround()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xAD989C", Offset = "0xAD989C", VA = "0xAD989C")]
		public void OnRepositionPlank()
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xAD99D4", Offset = "0xAD99D4", VA = "0xAD99D4")]
		public void OnResizePlank()
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xAD9B0C", Offset = "0xAD9B0C", VA = "0xAD9B0C")]
		public void OnSetPlayerHeight()
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xAD9C10", Offset = "0xAD9C10", VA = "0xAD9C10")]
		public void OnToggleFalling()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xAD9D94", Offset = "0xAD9D94", VA = "0xAD9D94")]
		public void UpdateFallingOption(bool currValue)
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xAD9EE0", Offset = "0xAD9EE0", VA = "0xAD9EE0")]
		public void UpdateNightmareOption(bool currValue)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xADA02C", Offset = "0xADA02C", VA = "0xADA02C")]
		public void OnToggleNightmare()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xADA37C", Offset = "0xADA37C", VA = "0xADA37C")]
		public void OnRecenter()
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xADA484", Offset = "0xADA484", VA = "0xADA484")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCCA8", Offset = "0x7FCCA8")]
		private IEnumerator RecenterAction()
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xADA520", Offset = "0xADA520", VA = "0xADA520")]
		public void OnCredits()
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xADA5D4", Offset = "0xADA5D4", VA = "0xADA5D4")]
		public void OnMenuUp(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xADA678", Offset = "0xADA678", VA = "0xADA678")]
		public void OnMenuDown(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xADA728", Offset = "0xADA728", VA = "0xADA728")]
		public void OnControllerButtonDown(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xADA890", Offset = "0xADA890", VA = "0xADA890")]
		public void SwitchToMainMenu()
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xADA910", Offset = "0xADA910", VA = "0xADA910")]
		public void QuitMenu()
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xADA9F4", Offset = "0xADA9F4", VA = "0xADA9F4")]
		public MainMenu()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class LoadEntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x600144F")]
		[Address(RVA = "0xAD5AA4", Offset = "0xAD5AA4", VA = "0xAD5AA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xAD5AA8", Offset = "0xAD5AA8", VA = "0xAD5AA8")]
		private void LoadRPEScene()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xAD5AF4", Offset = "0xAD5AF4", VA = "0xAD5AF4")]
		public LoadEntitlementCheck()
		{
		}
	}
	[Token(Token = "0x200029F")]
	public class LoadRPEScene : MonoBehaviour
	{
		[Token(Token = "0x2000443")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE9BC", Offset = "0x7EE9BC")]
		private sealed class <VideoInit>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400187A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LoadRPEScene <>4__this;

			[Token(Token = "0x17000334")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BF1")]
				[Address(RVA = "0xAD6294", Offset = "0xAD6294", VA = "0xAD6294", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000335")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BF3")]
				[Address(RVA = "0xAD62FC", Offset = "0xAD62FC", VA = "0xAD62FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BEE")]
			[Address(RVA = "0xAD5BEC", Offset = "0xAD5BEC", VA = "0xAD5BEC")]
			[DebuggerHidden]
			public <VideoInit>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001BEF")]
			[Address(RVA = "0xAD60EC", Offset = "0xAD60EC", VA = "0xAD60EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BF0")]
			[Address(RVA = "0xAD60F0", Offset = "0xAD60F0", VA = "0xAD60F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BF2")]
			[Address(RVA = "0xAD629C", Offset = "0xAD629C", VA = "0xAD629C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000444")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE9CC", Offset = "0x7EE9CC")]
		private sealed class <LoadInit>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400187B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400187C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400187D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LoadRPEScene <>4__this;

			[Token(Token = "0x17000336")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BF7")]
				[Address(RVA = "0xAD607C", Offset = "0xAD607C", VA = "0xAD607C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000337")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BF9")]
				[Address(RVA = "0xAD60E4", Offset = "0xAD60E4", VA = "0xAD60E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BF4")]
			[Address(RVA = "0xAD5C88", Offset = "0xAD5C88", VA = "0xAD5C88")]
			[DebuggerHidden]
			public <LoadInit>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001BF5")]
			[Address(RVA = "0xAD5EC8", Offset = "0xAD5EC8", VA = "0xAD5EC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BF6")]
			[Address(RVA = "0xAD5ECC", Offset = "0xAD5ECC", VA = "0xAD5ECC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BF8")]
			[Address(RVA = "0xAD6084", Offset = "0xAD6084", VA = "0xAD6084", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int UIVideoDipToBlack;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string sceneName1;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AsyncOperation asyncLoad;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doneWaiting;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool asyncStarted;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator anim;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject busySpinner;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VideoPlayer videoPlayer;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RectTransform progressBarFill;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject progressBar;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject buttons;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float currProgress;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool userSelected;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float rollingSpeed;

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xAD5AFC", Offset = "0xAD5AFC", VA = "0xAD5AFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xAD5B7C", Offset = "0xAD5B7C", VA = "0xAD5B7C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCD0C", Offset = "0x7FCD0C")]
		private IEnumerator VideoInit()
		{
			return null;
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xAD5C18", Offset = "0xAD5C18", VA = "0xAD5C18")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCD70", Offset = "0x7FCD70")]
		private IEnumerator LoadInit()
		{
			return null;
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xAD5CB4", Offset = "0xAD5CB4", VA = "0xAD5CB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xAD5D88", Offset = "0xAD5D88", VA = "0xAD5D88")]
		private void DoneWaiting()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xAD5D94", Offset = "0xAD5D94", VA = "0xAD5D94")]
		private void VideoDipToBlack()
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xAD5E28", Offset = "0xAD5E28", VA = "0xAD5E28")]
		public void DoneSelecting()
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xAD5E50", Offset = "0xAD5E50", VA = "0xAD5E50")]
		public LoadRPEScene()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class Localizable : MonoBehaviour
	{
		[Token(Token = "0x2000445")]
		public enum LocalizableType
		{
			[Token(Token = "0x400187F")]
			Text,
			[Token(Token = "0x4001880")]
			TextMeshPro,
			[Token(Token = "0x4001881")]
			Texture,
			[Token(Token = "0x4001882")]
			TextMeshProUGUI
		}

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizableType localizableType;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string itemID;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Component textComponent;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool albedoSwap;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string albedoID;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool diffuseSwap;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string diffuseID;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool metalicSwap;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string metalicID;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool normalSwap;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string normalID;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool emissiveSwap;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string emissiveID;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool standardAlbedoSwap;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string standardAlbedoID;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool standardEmissiveSwap;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string standardEmissiveID;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool standardMetalicSwap;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string standardMetalicID;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool meshSwap;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string meshID;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Mesh meshEN;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Mesh meshFR;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Mesh meshDE;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Mesh meshJA;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Mesh meshKR;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Mesh meshES;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Mesh meshCN;

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xAD74EC", Offset = "0xAD74EC", VA = "0xAD74EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xAD78C4", Offset = "0xAD78C4", VA = "0xAD78C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xAD7608", Offset = "0xAD7608", VA = "0xAD7608")]
		public void OnLanguageChange(int inputLanguage)
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xAD799C", Offset = "0xAD799C", VA = "0xAD799C")]
		private void TextureSwap(string languageCode)
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xAD814C", Offset = "0xAD814C", VA = "0xAD814C")]
		public Localizable()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class Localization : MonoBehaviour
	{
		[Token(Token = "0x2000446")]
		public enum SupportedLanguage
		{
			[Token(Token = "0x4001884")]
			English,
			[Token(Token = "0x4001885")]
			French,
			[Token(Token = "0x4001886")]
			German,
			[Token(Token = "0x4001887")]
			Japanese,
			[Token(Token = "0x4001888")]
			Korean,
			[Token(Token = "0x4001889")]
			Spanish,
			[Token(Token = "0x400188A")]
			Chinese
		}

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LanguageChangeEvent LanguageChange;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Localization _instance;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SupportedLanguage currLanguage;

		[Token(Token = "0x17000220")]
		public static Localization Instance
		{
			[Token(Token = "0x6001460")]
			[Address(RVA = "0xAD8154", Offset = "0xAD8154", VA = "0xAD8154")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		public SupportedLanguage CurrentLanguage
		{
			[Token(Token = "0x6001461")]
			[Address(RVA = "0xAD81A4", Offset = "0xAD81A4", VA = "0xAD81A4")]
			get
			{
				return default(SupportedLanguage);
			}
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xAD81AC", Offset = "0xAD81AC", VA = "0xAD81AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xAD821C", Offset = "0xAD821C", VA = "0xAD821C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xAD8220", Offset = "0xAD8220", VA = "0xAD8220")]
		private void InitLanguage()
		{
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xAD8424", Offset = "0xAD8424", VA = "0xAD8424")]
		public void RotateLanguage()
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xAD8398", Offset = "0xAD8398", VA = "0xAD8398")]
		private void SetLanguage(SupportedLanguage inputLanguage)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xAD8500", Offset = "0xAD8500", VA = "0xAD8500")]
		public Localization()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class LanguageChangeEvent : UnityEvent<int>
	{
		[Token(Token = "0x6001468")]
		[Address(RVA = "0xAD0558", Offset = "0xAD0558", VA = "0xAD0558")]
		public LanguageChangeEvent()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class BusLookTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator busAnim;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int BusStartTrigger;

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xB802A0", Offset = "0xB802A0", VA = "0xB802A0")]
		public void OnBecameVisible()
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xB80320", Offset = "0xB80320", VA = "0xB80320")]
		public BusLookTrigger()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class BusManager : MonoBehaviour
	{
		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform rightBus;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string soundUserHit;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SoundGroup]
		public string soundBusHorn;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SoundGroup]
		public string soundBrake;

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xB8038C", Offset = "0xB8038C", VA = "0xB8038C")]
		public void UserHit()
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xB80578", Offset = "0xB80578", VA = "0xB80578")]
		public void BusStart()
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xB8065C", Offset = "0xB8065C", VA = "0xB8065C")]
		public void Brake()
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xB806FC", Offset = "0xB806FC", VA = "0xB806FC")]
		public BusManager()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class Button6 : MonoBehaviour
	{
		[Token(Token = "0x6001470")]
		[Address(RVA = "0xB80704", Offset = "0xB80704", VA = "0xB80704")]
		private void Start()
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xB8072C", Offset = "0xB8072C", VA = "0xB8072C")]
		public Button6()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public class DentistAnimationScript : MonoBehaviour
	{
		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator anim;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject player;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastVal;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 targetPoint;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion targetRotation;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float distanceToPlayer;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftShoulder;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float timeDrillingDuration;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float distanceTrigger;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool bDrillingStarted;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FullBodyBipedIK fbikDrill;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float timeToDrillEase;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float timeDrillDuration;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float timeDrillSoundDelay;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform drill;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SoundGroup]
		public string soundDrill;

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xBE06F8", Offset = "0xBE06F8", VA = "0xBE06F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xBE0750", Offset = "0xBE0750", VA = "0xBE0750")]
		private void Update()
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xBE0ADC", Offset = "0xBE0ADC", VA = "0xBE0ADC")]
		public void StartDrilling()
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xBE0C2C", Offset = "0xBE0C2C", VA = "0xBE0C2C")]
		private void DrillSound()
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xBE0C30", Offset = "0xBE0C30", VA = "0xBE0C30")]
		private void FinishDrilling()
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xBE0C34", Offset = "0xBE0C34", VA = "0xBE0C34")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xBE0CA0", Offset = "0xBE0CA0", VA = "0xBE0CA0")]
		public DentistAnimationScript()
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xBE0D24", Offset = "0xBE0D24", VA = "0xBE0D24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FCDD4", Offset = "0x7FCDD4")]
		private void <StartDrilling>b__18_0(float val)
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public class Drill : MonoBehaviour
	{
		[Token(Token = "0x600147A")]
		[Address(RVA = "0xBE0D4C", Offset = "0xBE0D4C", VA = "0xBE0D4C")]
		public Drill()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public class DrillPathCube : MonoBehaviour
	{
		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float smoothTime;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothTimeRotate;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bFixedUpdate;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 velocity;

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xBE0D54", Offset = "0xBE0D54", VA = "0xBE0D54")]
		private void Update()
		{
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xBE1068", Offset = "0xBE1068", VA = "0xBE1068")]
		public DrillPathCube()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public class NightmareManager : MonoBehaviour
	{
		[Token(Token = "0x2000447")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE9DC", Offset = "0x7EE9DC")]
		private sealed class <PushPlayer>d__94 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400188B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400188C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400188D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float waitTime;

			[Token(Token = "0x400188E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public NightmareManager <>4__this;

			[Token(Token = "0x17000338")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BFD")]
				[Address(RVA = "0xA82234", Offset = "0xA82234", VA = "0xA82234", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000339")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BFF")]
				[Address(RVA = "0xA8229C", Offset = "0xA8229C", VA = "0xA8229C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BFA")]
			[Address(RVA = "0xA81E98", Offset = "0xA81E98", VA = "0xA81E98")]
			[DebuggerHidden]
			public <PushPlayer>d__94(int <>1__state)
			{
			}

			[Token(Token = "0x6001BFB")]
			[Address(RVA = "0xA81EC4", Offset = "0xA81EC4", VA = "0xA81EC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BFC")]
			[Address(RVA = "0xA81EC8", Offset = "0xA81EC8", VA = "0xA81EC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BFE")]
			[Address(RVA = "0xA8223C", Offset = "0xA8223C", VA = "0xA8223C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000448")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE9EC", Offset = "0x7EE9EC")]
		private sealed class <FadeBlackDentistStart>d__96 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400188F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareManager <>4__this;

			[Token(Token = "0x1700033A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C03")]
				[Address(RVA = "0xAE0E4C", Offset = "0xAE0E4C", VA = "0xAE0E4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C05")]
				[Address(RVA = "0xAE0EB4", Offset = "0xAE0EB4", VA = "0xAE0EB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C00")]
			[Address(RVA = "0xADFD90", Offset = "0xADFD90", VA = "0xADFD90")]
			[DebuggerHidden]
			public <FadeBlackDentistStart>d__96(int <>1__state)
			{
			}

			[Token(Token = "0x6001C01")]
			[Address(RVA = "0xAE0B9C", Offset = "0xAE0B9C", VA = "0xAE0B9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C02")]
			[Address(RVA = "0xAE0BA0", Offset = "0xAE0BA0", VA = "0xAE0BA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C04")]
			[Address(RVA = "0xAE0E54", Offset = "0xAE0E54", VA = "0xAE0E54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000449")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EE9FC", Offset = "0x7EE9FC")]
		private sealed class <HalfFadeDentistRunning>d__97 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareManager <>4__this;

			[Token(Token = "0x1700033C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C09")]
				[Address(RVA = "0xA81E28", Offset = "0xA81E28", VA = "0xA81E28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C0B")]
				[Address(RVA = "0xA81E90", Offset = "0xA81E90", VA = "0xA81E90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C06")]
			[Address(RVA = "0xA81D18", Offset = "0xA81D18", VA = "0xA81D18")]
			[DebuggerHidden]
			public <HalfFadeDentistRunning>d__97(int <>1__state)
			{
			}

			[Token(Token = "0x6001C07")]
			[Address(RVA = "0xA81D44", Offset = "0xA81D44", VA = "0xA81D44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C08")]
			[Address(RVA = "0xA81D48", Offset = "0xA81D48", VA = "0xA81D48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C0A")]
			[Address(RVA = "0xA81E30", Offset = "0xA81E30", VA = "0xA81E30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200044A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA0C", Offset = "0x7EEA0C")]
		private sealed class <FullBlackBusAccidentFinish>d__98 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareManager <>4__this;

			[Token(Token = "0x1700033E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C0F")]
				[Address(RVA = "0xAE0FFC", Offset = "0xAE0FFC", VA = "0xAE0FFC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C11")]
				[Address(RVA = "0xAE1064", Offset = "0xAE1064", VA = "0xAE1064", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C0C")]
			[Address(RVA = "0xADFDBC", Offset = "0xADFDBC", VA = "0xADFDBC")]
			[DebuggerHidden]
			public <FullBlackBusAccidentFinish>d__98(int <>1__state)
			{
			}

			[Token(Token = "0x6001C0D")]
			[Address(RVA = "0xAE0EBC", Offset = "0xAE0EBC", VA = "0xAE0EBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C0E")]
			[Address(RVA = "0xAE0EC0", Offset = "0xAE0EC0", VA = "0xAE0EC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C10")]
			[Address(RVA = "0xAE1004", Offset = "0xAE1004", VA = "0xAE1004", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200044B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA1C", Offset = "0x7EEA1C")]
		private sealed class <TriggerLogoFinish>d__99 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400189A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareManager <>4__this;

			[Token(Token = "0x17000340")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C15")]
				[Address(RVA = "0xA826EC", Offset = "0xA826EC", VA = "0xA826EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000341")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C17")]
				[Address(RVA = "0xA82754", Offset = "0xA82754", VA = "0xA82754", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C12")]
			[Address(RVA = "0xA82458", Offset = "0xA82458", VA = "0xA82458")]
			[DebuggerHidden]
			public <TriggerLogoFinish>d__99(int <>1__state)
			{
			}

			[Token(Token = "0x6001C13")]
			[Address(RVA = "0xA82484", Offset = "0xA82484", VA = "0xA82484", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C14")]
			[Address(RVA = "0xA82488", Offset = "0xA82488", VA = "0xA82488", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C16")]
			[Address(RVA = "0xA826F4", Offset = "0xA826F4", VA = "0xA826F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200044C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA2C", Offset = "0x7EEA2C")]
		private sealed class <UnloadLogoScene>d__100 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400189B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400189C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400189D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareManager <>4__this;

			[Token(Token = "0x17000342")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C1B")]
				[Address(RVA = "0xA82BB8", Offset = "0xA82BB8", VA = "0xA82BB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000343")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C1D")]
				[Address(RVA = "0xA82C20", Offset = "0xA82C20", VA = "0xA82C20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C18")]
			[Address(RVA = "0xA82A14", Offset = "0xA82A14", VA = "0xA82A14")]
			[DebuggerHidden]
			public <UnloadLogoScene>d__100(int <>1__state)
			{
			}

			[Token(Token = "0x6001C19")]
			[Address(RVA = "0xA82A40", Offset = "0xA82A40", VA = "0xA82A40", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C1A")]
			[Address(RVA = "0xA82A44", Offset = "0xA82A44", VA = "0xA82A44", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C1C")]
			[Address(RVA = "0xA82BC0", Offset = "0xA82BC0", VA = "0xA82BC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200044D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA3C", Offset = "0x7EEA3C")]
		private sealed class <FullBlackDentistFinish>d__101 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400189E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400189F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareManager <>4__this;

			[Token(Token = "0x17000344")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C21")]
				[Address(RVA = "0xA81CA8", Offset = "0xA81CA8", VA = "0xA81CA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000345")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C23")]
				[Address(RVA = "0xA81D10", Offset = "0xA81D10", VA = "0xA81D10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C1E")]
			[Address(RVA = "0xA81BD0", Offset = "0xA81BD0", VA = "0xA81BD0")]
			[DebuggerHidden]
			public <FullBlackDentistFinish>d__101(int <>1__state)
			{
			}

			[Token(Token = "0x6001C1F")]
			[Address(RVA = "0xA81BFC", Offset = "0xA81BFC", VA = "0xA81BFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C20")]
			[Address(RVA = "0xA81C00", Offset = "0xA81C00", VA = "0xA81C00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C22")]
			[Address(RVA = "0xA81CB0", Offset = "0xA81CB0", VA = "0xA81CB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200044E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA4C", Offset = "0x7EEA4C")]
		private sealed class <RingPhone>d__102 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareManager <>4__this;

			[Token(Token = "0x17000346")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C27")]
				[Address(RVA = "0xA823E8", Offset = "0xA823E8", VA = "0xA823E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000347")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C29")]
				[Address(RVA = "0xA82450", Offset = "0xA82450", VA = "0xA82450", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C24")]
			[Address(RVA = "0xA822A4", Offset = "0xA822A4", VA = "0xA822A4")]
			[DebuggerHidden]
			public <RingPhone>d__102(int <>1__state)
			{
			}

			[Token(Token = "0x6001C25")]
			[Address(RVA = "0xA822D0", Offset = "0xA822D0", VA = "0xA822D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C26")]
			[Address(RVA = "0xA822D4", Offset = "0xA822D4", VA = "0xA822D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C28")]
			[Address(RVA = "0xA823F0", Offset = "0xA823F0", VA = "0xA823F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200044F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA5C", Offset = "0x7EEA5C")]
		private sealed class <UnloadDentistExitPoint>d__109 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000348")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C2D")]
				[Address(RVA = "0xA82840", Offset = "0xA82840", VA = "0xA82840", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000349")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C2F")]
				[Address(RVA = "0xA828A8", Offset = "0xA828A8", VA = "0xA828A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C2A")]
			[Address(RVA = "0xA8275C", Offset = "0xA8275C", VA = "0xA8275C")]
			[DebuggerHidden]
			public <UnloadDentistExitPoint>d__109(int <>1__state)
			{
			}

			[Token(Token = "0x6001C2B")]
			[Address(RVA = "0xA82788", Offset = "0xA82788", VA = "0xA82788", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C2C")]
			[Address(RVA = "0xA8278C", Offset = "0xA8278C", VA = "0xA8278C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0xA82848", Offset = "0xA82848", VA = "0xA82848", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000450")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA6C", Offset = "0x7EEA6C")]
		private sealed class <UnloadLogoExitPoint>d__110 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700034A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C33")]
				[Address(RVA = "0xA829A4", Offset = "0xA829A4", VA = "0xA829A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C35")]
				[Address(RVA = "0xA82A0C", Offset = "0xA82A0C", VA = "0xA82A0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C30")]
			[Address(RVA = "0xA828B0", Offset = "0xA828B0", VA = "0xA828B0")]
			[DebuggerHidden]
			public <UnloadLogoExitPoint>d__110(int <>1__state)
			{
			}

			[Token(Token = "0x6001C31")]
			[Address(RVA = "0xA828DC", Offset = "0xA828DC", VA = "0xA828DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C32")]
			[Address(RVA = "0xA828E0", Offset = "0xA828E0", VA = "0xA828E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C34")]
			[Address(RVA = "0xA829AC", Offset = "0xA829AC", VA = "0xA829AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator nightmareStateMachine;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject button6;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] rooftops;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] traffics;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject[] clouds;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject[] birds;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] windmills;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject[] farmhouses;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LiftButton[] otherLiftButtons;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject spiders;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isSpiderStart;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform spiderSlitherSound;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int LiftDoorOpenOnPlankTrigger;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int LiftDoorCloseOnGroundTrigger;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int UserAnswersPhoneTrigger;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int OnDeathByFallingTrigger;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int DentistDrillCompleteTrigger;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int DentistFinishTrigger;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int UserHitByBusTrigger;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int BusAccidentFinishTrigger;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int LogoDisplayCompleteTrigger;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int LogoFinishTrigger;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int SpiderAnimationDoneTrigger;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int UserInLiftTrigger;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly int DentistDrillStartTrigger;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int ExitPointTrigger;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject phoneManager;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool plankIsCut;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody rb;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject plankModel;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject phone;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Rigidbody phoneBaseRB;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Rigidbody phoneEarPieceRB;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject phonePiece;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject phoneStand;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 plankPos;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Rigidbody playerRb;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Transform outThere;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Rigidbody tableRB;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Transform phonePieceAnchor;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform phoneBaseAnchor;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform phoneStandAnchor;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform plankAnchor;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Transform dentistStartPoint;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public GameObject busAccident;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Transform busAccidentStartPoint;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Transform logoStartPoint;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SoundGroup]
		public string soundLogoStart;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SoundGroup]
		public string soundNightmareStart;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SoundGroup]
		public string soundSpiderSlither;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SoundGroup]
		public string soundPhoneRing;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SoundGroup]
		public string soundDrill;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SoundGroup]
		public string bellDing;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SoundGroup]
		public string panelOpen;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private AnimatorStateInfo pauseStateInfoBaseLayer;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private AnimatorStateInfo pauseStateInfoPhoneLayer;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[HideInInspector]
		public bool isOn;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		private bool fallOnBeforePause;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public GameObject nightmareOptionInMenu;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private bool playerPushed;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public NightmarePanelGlow panelGlow;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private bool isFromExitPoint;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public PhoneEarPiece earPiece;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Coroutine pushCoroutine;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GameObject buildingColliderToDisable;

		[Token(Token = "0x17000222")]
		public bool PlankIsCut
		{
			[Token(Token = "0x600147D")]
			[Address(RVA = "0xADD5E8", Offset = "0xADD5E8", VA = "0xADD5E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xADD5F0", Offset = "0xADD5F0", VA = "0xADD5F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xADD5F8", Offset = "0xADD5F8", VA = "0xADD5F8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xADD6C8", Offset = "0xADD6C8", VA = "0xADD6C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xADD6E0", Offset = "0xADD6E0", VA = "0xADD6E0")]
		public void NightmareStartStart()
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xADD9FC", Offset = "0xADD9FC", VA = "0xADD9FC")]
		public void SpiderStart()
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xADDAF0", Offset = "0xADDAF0", VA = "0xADDAF0")]
		public void SpiderRunning()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xADDC20", Offset = "0xADDC20", VA = "0xADDC20")]
		public void SpiderFinish()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xADDCE4", Offset = "0xADDCE4", VA = "0xADDCE4")]
		public void PhoneStart()
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xADDD60", Offset = "0xADDD60", VA = "0xADDD60")]
		public void PhoneRunningStage1()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xADE060", Offset = "0xADE060", VA = "0xADE060")]
		private void StopPushCoroutine()
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xADE004", Offset = "0xADE004", VA = "0xADE004")]
		public void StartPushCoroutine(float delay)
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xADE0F4", Offset = "0xADE0F4", VA = "0xADE0F4")]
		public void PhoneRunningStage2()
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xADE4DC", Offset = "0xADE4DC", VA = "0xADE4DC")]
		public void PhoneFinish()
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xADEA00", Offset = "0xADEA00", VA = "0xADEA00")]
		public void DentistStart()
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xADEC2C", Offset = "0xADEC2C", VA = "0xADEC2C")]
		public void DentistRunning()
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xADED24", Offset = "0xADED24", VA = "0xADED24")]
		public void DentistFinish()
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xADEED4", Offset = "0xADEED4", VA = "0xADEED4")]
		public void BusAccidentStart()
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xADF31C", Offset = "0xADF31C", VA = "0xADF31C")]
		public void BusAccidentFinish()
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xADF498", Offset = "0xADF498", VA = "0xADF498")]
		public void LogoStart()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xADF634", Offset = "0xADF634", VA = "0xADF634")]
		public void LogoFinish()
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xADF7D8", Offset = "0xADF7D8", VA = "0xADF7D8")]
		public void ResetAndEndNightmareStart()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xADFBD8", Offset = "0xADFBD8", VA = "0xADFBD8")]
		public void ResetAndEndNightmareFinish()
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xADD920", Offset = "0xADD920", VA = "0xADD920")]
		private void ToggleArray(GameObject[] array, bool turnOn)
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xADD99C", Offset = "0xADD99C", VA = "0xADD99C")]
		private void ToggleButtonFunctions(bool turnOn)
		{
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xADFC44", Offset = "0xADFC44", VA = "0xADFC44")]
		private void Update()
		{
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xADE178", Offset = "0xADE178", VA = "0xADE178")]
		private void CutPlank()
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xADE6C0", Offset = "0xADE6C0", VA = "0xADE6C0")]
		private void ResetPhone()
		{
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xADE074", Offset = "0xADE074", VA = "0xADE074")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCDE4", Offset = "0x7FCDE4")]
		private IEnumerator PushPlayer(float waitTime)
		{
			return null;
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xADEFF4", Offset = "0xADEFF4", VA = "0xADEFF4")]
		private void MoveHead(Transform target)
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xADEBBC", Offset = "0xADEBBC", VA = "0xADEBBC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCE48", Offset = "0x7FCE48")]
		private IEnumerator FadeBlackDentistStart()
		{
			return null;
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xADECB4", Offset = "0xADECB4", VA = "0xADECB4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCEAC", Offset = "0x7FCEAC")]
		private IEnumerator HalfFadeDentistRunning()
		{
			return null;
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xADF428", Offset = "0xADF428", VA = "0xADF428")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCF10", Offset = "0x7FCF10")]
		private IEnumerator FullBlackBusAccidentFinish()
		{
			return null;
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xADF5C4", Offset = "0xADF5C4", VA = "0xADF5C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCF74", Offset = "0x7FCF74")]
		private IEnumerator TriggerLogoFinish()
		{
			return null;
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xADF768", Offset = "0xADF768", VA = "0xADF768")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FCFD8", Offset = "0x7FCFD8")]
		private IEnumerator UnloadLogoScene()
		{
			return null;
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xADEE64", Offset = "0xADEE64", VA = "0xADEE64")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD03C", Offset = "0x7FD03C")]
		private IEnumerator FullBlackDentistFinish()
		{
			return null;
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xADDF94", Offset = "0xADDF94", VA = "0xADDF94")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD0A0", Offset = "0x7FD0A0")]
		private IEnumerator RingPhone()
		{
			return null;
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xADFDE8", Offset = "0xADFDE8", VA = "0xADFDE8")]
		public void UnloadDentistScene()
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xADFEFC", Offset = "0xADFEFC", VA = "0xADFEFC")]
		public void Pause()
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xAE048C", Offset = "0xAE048C", VA = "0xAE048C")]
		public void Resume()
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xAE0148", Offset = "0xAE0148", VA = "0xAE0148")]
		private void ToggleObjectByLayer(Transform objectToHide, bool turnOn)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xAD93B8", Offset = "0xAD93B8", VA = "0xAD93B8")]
		public void ExitPoint()
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xAE0748", Offset = "0xAE0748", VA = "0xAE0748")]
		public void OpenPanel()
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xAE0930", Offset = "0xAE0930", VA = "0xAE0930")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD104", Offset = "0x7FD104")]
		private IEnumerator UnloadDentistExitPoint()
		{
			return null;
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xAE06E8", Offset = "0xAE06E8", VA = "0xAE06E8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD168", Offset = "0x7FD168")]
		private IEnumerator UnloadLogoExitPoint()
		{
			return null;
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xAE0990", Offset = "0xAE0990", VA = "0xAE0990")]
		public NightmareManager()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class NightmarePanelGlow : MonoBehaviour
	{
		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer renderer;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material glowMat;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material normalMat;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SoundGroup]
		public string glowSound;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isGlowing;

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xA82C28", Offset = "0xA82C28", VA = "0xA82C28")]
		private void Start()
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xA82C90", Offset = "0xA82C90", VA = "0xA82C90")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xA82E04", Offset = "0xA82E04", VA = "0xA82E04")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xA82EA8", Offset = "0xA82EA8", VA = "0xA82EA8")]
		public void StopGlow()
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xA82D34", Offset = "0xA82D34", VA = "0xA82D34")]
		public void StartGlow()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xA82EE0", Offset = "0xA82EE0", VA = "0xA82EE0")]
		public NightmarePanelGlow()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public class NightmareSpider : MonoBehaviour
	{
		[Token(Token = "0x2000451")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA7C", Offset = "0x7EEA7C")]
		private sealed class <StartWalking>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareSpider <>4__this;

			[Token(Token = "0x1700034C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C39")]
				[Address(RVA = "0xA83740", Offset = "0xA83740", VA = "0xA83740", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C3B")]
				[Address(RVA = "0xA837A8", Offset = "0xA837A8", VA = "0xA837A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C36")]
			[Address(RVA = "0xA83400", Offset = "0xA83400", VA = "0xA83400")]
			[DebuggerHidden]
			public <StartWalking>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001C37")]
			[Address(RVA = "0xA83670", Offset = "0xA83670", VA = "0xA83670", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C38")]
			[Address(RVA = "0xA83674", Offset = "0xA83674", VA = "0xA83674", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C3A")]
			[Address(RVA = "0xA83748", Offset = "0xA83748", VA = "0xA83748", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000452")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA8C", Offset = "0x7EEA8C")]
		private sealed class <SpiderGrowl>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NightmareSpider <>4__this;

			[Token(Token = "0x1700034E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C3F")]
				[Address(RVA = "0xA83600", Offset = "0xA83600", VA = "0xA83600", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C41")]
				[Address(RVA = "0xA83668", Offset = "0xA83668", VA = "0xA83668", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C3C")]
			[Address(RVA = "0xA8342C", Offset = "0xA8342C", VA = "0xA8342C")]
			[DebuggerHidden]
			public <SpiderGrowl>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6001C3D")]
			[Address(RVA = "0xA834F0", Offset = "0xA834F0", VA = "0xA834F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C3E")]
			[Address(RVA = "0xA834F4", Offset = "0xA834F4", VA = "0xA834F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C40")]
			[Address(RVA = "0xA83608", Offset = "0xA83608", VA = "0xA83608", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve speedCurve;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float currSpeed;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SplineFollower splineFollower;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isWalking;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator spiderAnim;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float userSetSpeed;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float waitTimeAtStart;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float animSpeedMultiplier;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int speedAnimParam;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int attackAnimParam;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool isGiantSpider;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool spiderTriggerSet;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		private bool spiderAttacked;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SoundGroup]
		public string soundAttack;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string soundGrowl;

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xA82EE8", Offset = "0xA82EE8", VA = "0xA82EE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xA82F58", Offset = "0xA82F58", VA = "0xA82F58")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xA8300C", Offset = "0xA8300C", VA = "0xA8300C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xA83070", Offset = "0xA83070", VA = "0xA83070")]
		private void Update()
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xA82F9C", Offset = "0xA82F9C", VA = "0xA82F9C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD1CC", Offset = "0x7FD1CC")]
		private IEnumerator StartWalking()
		{
			return null;
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xA83390", Offset = "0xA83390", VA = "0xA83390")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD230", Offset = "0x7FD230")]
		private IEnumerator SpiderGrowl()
		{
			return null;
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xA83458", Offset = "0xA83458", VA = "0xA83458")]
		public NightmareSpider()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class PhoneEarPiece : MonoBehaviour
	{
		[Token(Token = "0x2000453")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEA9C", Offset = "0x7EEA9C")]
		private sealed class <AnswerCall>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PhoneEarPiece <>4__this;

			[Token(Token = "0x17000350")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C45")]
				[Address(RVA = "0xA86AF8", Offset = "0xA86AF8", VA = "0xA86AF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000351")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C47")]
				[Address(RVA = "0xA86B60", Offset = "0xA86B60", VA = "0xA86B60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C42")]
			[Address(RVA = "0xA86820", Offset = "0xA86820", VA = "0xA86820")]
			[DebuggerHidden]
			public <AnswerCall>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001C43")]
			[Address(RVA = "0xA8692C", Offset = "0xA8692C", VA = "0xA8692C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C44")]
			[Address(RVA = "0xA86930", Offset = "0xA86930", VA = "0xA86930", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C46")]
			[Address(RVA = "0xA86B00", Offset = "0xA86B00", VA = "0xA86B00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LTouchAnchor;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RTouchAnchor;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform LHandAnchor;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform RHandAnchor;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject LTouchMesh;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RTouchMesh;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pico_ControllerType pickedUpBy;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool isPickedUp;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject picker;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string soundPhonePickup;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SoundGroup]
		public string soundClownLaugh;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SoundGroup]
		public string soundPhoneRing;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float postPickupDelay;

		[Token(Token = "0x17000223")]
		public bool IsPickedUp
		{
			[Token(Token = "0x60014BA")]
			[Address(RVA = "0xA86054", Offset = "0xA86054", VA = "0xA86054")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xA8605C", Offset = "0xA8605C", VA = "0xA8605C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xA864A8", Offset = "0xA864A8", VA = "0xA864A8")]
		private void PickUp(GameObject mesh, Pico_ControllerType pickUpController)
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xA86684", Offset = "0xA86684", VA = "0xA86684")]
		private void Update()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xA86614", Offset = "0xA86614", VA = "0xA86614")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD294", Offset = "0x7FD294")]
		private IEnumerator AnswerCall()
		{
			return null;
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xA8684C", Offset = "0xA8684C", VA = "0xA8684C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xA86914", Offset = "0xA86914", VA = "0xA86914")]
		public PhoneEarPiece()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	public class PhoneManager : MonoBehaviour
	{
		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform endOfPlank;

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xA86B68", Offset = "0xA86B68", VA = "0xA86B68")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xA86BB4", Offset = "0xA86BB4", VA = "0xA86BB4")]
		public PhoneManager()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public class RPECameraInitFade : MonoBehaviour
	{
		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xA88134", Offset = "0xA88134", VA = "0xA88134")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xA88264", Offset = "0xA88264", VA = "0xA88264")]
		public RPECameraInitFade()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class City : MonoBehaviour
	{
		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LoadScenesAdditively whiteRoom;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OVRManager.FixedFoveatedRenderingLevel prevFFR;

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xBD2164", Offset = "0xBD2164", VA = "0xBD2164")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xBD21F0", Offset = "0xBD21F0", VA = "0xBD21F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xBD225C", Offset = "0xBD225C", VA = "0xBD225C")]
		public City()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	public class ColorPalette : MonoBehaviour
	{
		[Token(Token = "0x2000454")]
		public enum PaletteTurn
		{
			[Token(Token = "0x40018B2")]
			Stationary,
			[Token(Token = "0x40018B3")]
			Left,
			[Token(Token = "0x40018B4")]
			Right
		}

		[Token(Token = "0x4001082")]
		private const int HAPTIC_DURATION = 20;

		[Token(Token = "0x4001083")]
		private const float HAPTIC_STENGTH = 0.39f;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ColorPalette _instance;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PaletteTurn paletteTurn;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Quaternion spinTarget;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ControllerInputHandler inputHandler;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool shouldSpin;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float spinIncrementAngle;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color currColor;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Color _selectedColor;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SoundGroup]
		public string colorSwitchSound;

		[Token(Token = "0x17000224")]
		public static ColorPalette Instance
		{
			[Token(Token = "0x60014C8")]
			[Address(RVA = "0xBD226C", Offset = "0xBD226C", VA = "0xBD226C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000225")]
		public Color SelectedColor
		{
			[Token(Token = "0x60014CB")]
			[Address(RVA = "0xBD2404", Offset = "0xBD2404", VA = "0xBD2404")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x14000034")]
		public event EventHandler<TrailEventArgs> trailColorChange
		{
			[Token(Token = "0x60014C9")]
			[Address(RVA = "0xBD22BC", Offset = "0xBD22BC", VA = "0xBD22BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD2F8", Offset = "0x7FD2F8")]
			add
			{
			}
			[Token(Token = "0x60014CA")]
			[Address(RVA = "0xBD2360", Offset = "0xBD2360", VA = "0xBD2360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD308", Offset = "0x7FD308")]
			remove
			{
			}
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xBD2410", Offset = "0xBD2410", VA = "0xBD2410")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xBD249C", Offset = "0xBD249C", VA = "0xBD249C")]
		public void InvokeTrailColorChange(TrailEventArgs e)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xBD2514", Offset = "0xBD2514", VA = "0xBD2514")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xBD26F0", Offset = "0xBD26F0", VA = "0xBD26F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xBD28CC", Offset = "0xBD28CC", VA = "0xBD28CC")]
		public void OnControllerAxis(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xBD2930", Offset = "0xBD2930", VA = "0xBD2930")]
		private void Update()
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xBD2A8C", Offset = "0xBD2A8C", VA = "0xBD2A8C")]
		private void Spin()
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xBD2E98", Offset = "0xBD2E98", VA = "0xBD2E98")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xBD2DD4", Offset = "0xBD2DD4", VA = "0xBD2DD4")]
		public void ColorSwitchFeedback()
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xBD2EA4", Offset = "0xBD2EA4", VA = "0xBD2EA4")]
		public ColorPalette()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public class TrailEventArgs : EventArgs
	{
		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xA8AE28", Offset = "0xA8AE28", VA = "0xA8AE28")]
		public TrailEventArgs(Color inputColor)
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public class ColorPaletteBlock : MonoBehaviour
	{
		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrailColors trailColor;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public Color color;

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xBD2EB4", Offset = "0xBD2EB4", VA = "0xBD2EB4")]
		private void Start()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xBD2FC8", Offset = "0xBD2FC8", VA = "0xBD2FC8")]
		public ColorPaletteBlock()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public class ColorPaletteSelector : MonoBehaviour
	{
		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xBD2FD0", Offset = "0xBD2FD0", VA = "0xBD2FD0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xBD30EC", Offset = "0xBD30EC", VA = "0xBD30EC")]
		public ColorPaletteSelector()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public enum DipToBlackTrigger
	{
		[Token(Token = "0x4001092")]
		CityLoad,
		[Token(Token = "0x4001093")]
		LiftDoorPassThrough,
		[Token(Token = "0x4001094")]
		FlyingColliderPassThrough,
		[Token(Token = "0x4001095")]
		QuitMenu,
		[Token(Token = "0x4001096")]
		OutOfPlayArea,
		[Token(Token = "0x4001097")]
		QuitFireDeck,
		[Token(Token = "0x4001098")]
		TeleportPlayer,
		[Token(Token = "0x4001099")]
		NightmareDentistStart,
		[Token(Token = "0x400109A")]
		NightmareDentistHalfFade,
		[Token(Token = "0x400109B")]
		NightmareDentistFinish,
		[Token(Token = "0x400109C")]
		NightmareBusHit,
		[Token(Token = "0x400109D")]
		NightmareFinish
	}
	[Token(Token = "0x20002B5")]
	public class ContentLoader : MonoBehaviour
	{
		[Token(Token = "0x2000455")]
		public enum GameStage
		{
			[Token(Token = "0x40018B6")]
			Start,
			[Token(Token = "0x40018B7")]
			Calibration,
			[Token(Token = "0x40018B8")]
			RPE
		}

		[Token(Token = "0x2000456")]
		public enum TipTargetType
		{
			[Token(Token = "0x40018BA")]
			Lift,
			[Token(Token = "0x40018BB")]
			LiftButtonPanel,
			[Token(Token = "0x40018BC")]
			NextFire
		}

		[Token(Token = "0x2000457")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEAAC", Offset = "0x7EEAAC")]
		private sealed class <StartFadeBlack>d__156 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x40018C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float waitTime;

			[Token(Token = "0x17000352")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C4B")]
				[Address(RVA = "0xBDE034", Offset = "0xBDE034", VA = "0xBDE034", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000353")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C4D")]
				[Address(RVA = "0xBDE09C", Offset = "0xBDE09C", VA = "0xBDE09C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C48")]
			[Address(RVA = "0xBD54C0", Offset = "0xBD54C0", VA = "0xBD54C0")]
			[DebuggerHidden]
			public <StartFadeBlack>d__156(int <>1__state)
			{
			}

			[Token(Token = "0x6001C49")]
			[Address(RVA = "0xBDDF7C", Offset = "0xBDDF7C", VA = "0xBDDF7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C4A")]
			[Address(RVA = "0xBDDF80", Offset = "0xBDDF80", VA = "0xBDDF80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C4C")]
			[Address(RVA = "0xBDE03C", Offset = "0xBDE03C", VA = "0xBDE03C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000458")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEABC", Offset = "0x7EEABC")]
		private sealed class <HeavenDelayed>d__159 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x17000354")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C51")]
				[Address(RVA = "0xBDD998", Offset = "0xBDD998", VA = "0xBDD998", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000355")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C53")]
				[Address(RVA = "0xBDDA00", Offset = "0xBDDA00", VA = "0xBDDA00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C4E")]
			[Address(RVA = "0xBD5D40", Offset = "0xBD5D40", VA = "0xBD5D40")]
			[DebuggerHidden]
			public <HeavenDelayed>d__159(int <>1__state)
			{
			}

			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0xBDD80C", Offset = "0xBDD80C", VA = "0xBDD80C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C50")]
			[Address(RVA = "0xBDD810", Offset = "0xBDD810", VA = "0xBDD810", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C52")]
			[Address(RVA = "0xBDD9A0", Offset = "0xBDD9A0", VA = "0xBDD9A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000459")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEACC", Offset = "0x7EEACC")]
		private sealed class <FadeOutHeaven>d__160 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x17000356")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C57")]
				[Address(RVA = "0xBDD79C", Offset = "0xBDD79C", VA = "0xBDD79C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000357")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C59")]
				[Address(RVA = "0xBDD804", Offset = "0xBDD804", VA = "0xBDD804", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C54")]
			[Address(RVA = "0xBD5D6C", Offset = "0xBD5D6C", VA = "0xBD5D6C")]
			[DebuggerHidden]
			public <FadeOutHeaven>d__160(int <>1__state)
			{
			}

			[Token(Token = "0x6001C55")]
			[Address(RVA = "0xBDD694", Offset = "0xBDD694", VA = "0xBDD694", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C56")]
			[Address(RVA = "0xBDD698", Offset = "0xBDD698", VA = "0xBDD698", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C58")]
			[Address(RVA = "0xBDD7A4", Offset = "0xBDD7A4", VA = "0xBDD7A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200045A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEADC", Offset = "0x7EEADC")]
		private sealed class <UnloadWhiteroom>d__169 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x17000358")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C5D")]
				[Address(RVA = "0xBDE618", Offset = "0xBDE618", VA = "0xBDE618", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000359")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C5F")]
				[Address(RVA = "0xBDE680", Offset = "0xBDE680", VA = "0xBDE680", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C5A")]
			[Address(RVA = "0xBD8328", Offset = "0xBD8328", VA = "0xBD8328")]
			[DebuggerHidden]
			public <UnloadWhiteroom>d__169(int <>1__state)
			{
			}

			[Token(Token = "0x6001C5B")]
			[Address(RVA = "0xBDE524", Offset = "0xBDE524", VA = "0xBDE524", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C5C")]
			[Address(RVA = "0xBDE528", Offset = "0xBDE528", VA = "0xBDE528", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C5E")]
			[Address(RVA = "0xBDE620", Offset = "0xBDE620", VA = "0xBDE620", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200045B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEAEC", Offset = "0x7EEAEC")]
		private sealed class <LoadWhiteRoom>d__170 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x1700035A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C63")]
				[Address(RVA = "0xBDDB98", Offset = "0xBDDB98", VA = "0xBDDB98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C65")]
				[Address(RVA = "0xBDDC00", Offset = "0xBDDC00", VA = "0xBDDC00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C60")]
			[Address(RVA = "0xBD8354", Offset = "0xBD8354", VA = "0xBD8354")]
			[DebuggerHidden]
			public <LoadWhiteRoom>d__170(int <>1__state)
			{
			}

			[Token(Token = "0x6001C61")]
			[Address(RVA = "0xBDDB30", Offset = "0xBDDB30", VA = "0xBDDB30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C62")]
			[Address(RVA = "0xBDDB34", Offset = "0xBDDB34", VA = "0xBDDB34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C64")]
			[Address(RVA = "0xBDDBA0", Offset = "0xBDDBA0", VA = "0xBDDBA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200045C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEAFC", Offset = "0x7EEAFC")]
		private sealed class <RealignPlank>d__171 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700035C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C69")]
				[Address(RVA = "0xBDDD70", Offset = "0xBDDD70", VA = "0xBDDD70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C6B")]
				[Address(RVA = "0xBDDDD8", Offset = "0xBDDDD8", VA = "0xBDDDD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C66")]
			[Address(RVA = "0xBD83E0", Offset = "0xBD83E0", VA = "0xBD83E0")]
			[DebuggerHidden]
			public <RealignPlank>d__171(int <>1__state)
			{
			}

			[Token(Token = "0x6001C67")]
			[Address(RVA = "0xBDDD38", Offset = "0xBDDD38", VA = "0xBDDD38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C68")]
			[Address(RVA = "0xBDDD3C", Offset = "0xBDDD3C", VA = "0xBDDD3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C6A")]
			[Address(RVA = "0xBDDD78", Offset = "0xBDDD78", VA = "0xBDDD78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200045D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB0C", Offset = "0x7EEB0C")]
		private sealed class <InitialRealign>d__172 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x1700035E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C6F")]
				[Address(RVA = "0xBDDAC0", Offset = "0xBDDAC0", VA = "0xBDDAC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C71")]
				[Address(RVA = "0xBDDB28", Offset = "0xBDDB28", VA = "0xBDDB28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C6C")]
			[Address(RVA = "0xBD840C", Offset = "0xBD840C", VA = "0xBD840C")]
			[DebuggerHidden]
			public <InitialRealign>d__172(int <>1__state)
			{
			}

			[Token(Token = "0x6001C6D")]
			[Address(RVA = "0xBDDA08", Offset = "0xBDDA08", VA = "0xBDDA08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0xBDDA0C", Offset = "0xBDDA0C", VA = "0xBDDA0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C70")]
			[Address(RVA = "0xBDDAC8", Offset = "0xBDDAC8", VA = "0xBDDAC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200045E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB1C", Offset = "0x7EEB1C")]
		private sealed class <ReconnectHoseAndRocket>d__215 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000360")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C75")]
				[Address(RVA = "0xBDDF0C", Offset = "0xBDDF0C", VA = "0xBDDF0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000361")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C77")]
				[Address(RVA = "0xBDDF74", Offset = "0xBDDF74", VA = "0xBDDF74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C72")]
			[Address(RVA = "0xBDB614", Offset = "0xBDB614", VA = "0xBDB614")]
			[DebuggerHidden]
			public <ReconnectHoseAndRocket>d__215(int <>1__state)
			{
			}

			[Token(Token = "0x6001C73")]
			[Address(RVA = "0xBDDDE0", Offset = "0xBDDDE0", VA = "0xBDDDE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C74")]
			[Address(RVA = "0xBDDDE4", Offset = "0xBDDDE4", VA = "0xBDDDE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C76")]
			[Address(RVA = "0xBDDF14", Offset = "0xBDDF14", VA = "0xBDDF14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200045F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB2C", Offset = "0x7EEB2C")]
		private sealed class <TipStartCoroutine>d__221 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x17000362")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C7B")]
				[Address(RVA = "0xBDE4B4", Offset = "0xBDE4B4", VA = "0xBDE4B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000363")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C7D")]
				[Address(RVA = "0xBDE51C", Offset = "0xBDE51C", VA = "0xBDE51C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C78")]
			[Address(RVA = "0xBDB96C", Offset = "0xBDB96C", VA = "0xBDB96C")]
			[DebuggerHidden]
			public <TipStartCoroutine>d__221(int <>1__state)
			{
			}

			[Token(Token = "0x6001C79")]
			[Address(RVA = "0xBDE0A4", Offset = "0xBDE0A4", VA = "0xBDE0A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0xBDE0A8", Offset = "0xBDE0A8", VA = "0xBDE0A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C7C")]
			[Address(RVA = "0xBDE4BC", Offset = "0xBDE4BC", VA = "0xBDE4BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000460")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB3C", Offset = "0x7EEB3C")]
		private sealed class <NightmareButton6Reset>d__250 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x17000364")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C81")]
				[Address(RVA = "0xBDDCC8", Offset = "0xBDDCC8", VA = "0xBDDCC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000365")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C83")]
				[Address(RVA = "0xBDDD30", Offset = "0xBDDD30", VA = "0xBDDD30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C7E")]
			[Address(RVA = "0xBDCE84", Offset = "0xBDCE84", VA = "0xBDCE84")]
			[DebuggerHidden]
			public <NightmareButton6Reset>d__250(int <>1__state)
			{
			}

			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0xBDDC08", Offset = "0xBDDC08", VA = "0xBDDC08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C80")]
			[Address(RVA = "0xBDDC0C", Offset = "0xBDDC0C", VA = "0xBDDC0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C82")]
			[Address(RVA = "0xBDDCD0", Offset = "0xBDDCD0", VA = "0xBDDCD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000461")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB4C", Offset = "0x7EEB4C")]
		private sealed class <CollidersWhileFlyingDelay>d__263 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ContentLoader <>4__this;

			[Token(Token = "0x40018DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool active;

			[Token(Token = "0x17000366")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C87")]
				[Address(RVA = "0xBDD624", Offset = "0xBDD624", VA = "0xBDD624", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000367")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C89")]
				[Address(RVA = "0xBDD68C", Offset = "0xBDD68C", VA = "0xBDD68C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C84")]
			[Address(RVA = "0xBDD31C", Offset = "0xBDD31C", VA = "0xBDD31C")]
			[DebuggerHidden]
			public <CollidersWhileFlyingDelay>d__263(int <>1__state)
			{
			}

			[Token(Token = "0x6001C85")]
			[Address(RVA = "0xBDD56C", Offset = "0xBDD56C", VA = "0xBDD56C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C86")]
			[Address(RVA = "0xBDD570", Offset = "0xBDD570", VA = "0xBDD570", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C88")]
			[Address(RVA = "0xBDD62C", Offset = "0xBDD62C", VA = "0xBDD62C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ContentLoader _instance;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool hasRealPlank;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Lift lift;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FallDetection fallDetection;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject calibration;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject RPE;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RPEPlank;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject player;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject head;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Camera mainCamera;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int recenterCount;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FireDeck fireDeck;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HeroAcademy heroAcademy;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Animator heavenAnim;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private VisionController visionController;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int heavenTrigger;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int HASHDipToBlack;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int HASHFadeBlack;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int HeavenSpeed;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int TipEnd;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int TipShow;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int DipSpeed;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly int FadeSpeed;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int NightmarePanelOpen;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly int NightmarePanelClose;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject[] liftControllerTips;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public PS4HeadBeam[] lasers;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool shouldHaveLasers;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool playerWantsFalling;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool playerWantsNightmare;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 calibratedCameraRigPosition;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion calibratedCameraRigRotation;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private FlyingManager flyingManager;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameStage gameStage;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool menuUp;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject inGameMenu;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool isClosingMenu;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject[] optionsForRealPlank;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public ControllerInputHandler controllerInputHandler;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public float playerHeight;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject feet;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public GameObject fireDeckPlatform;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 cameraRigPositionWhenMenu;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Quaternion cameraRigRotationWhenMenu;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public LoadScenesAdditively whiteRoom;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[HideInInspector]
		public bool onLift;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		private bool prevOnLift;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public GameObject[] reticles;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool isResettingCameraRigPose;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
		private bool isResettingCameraRigRot;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15A")]
		[HideInInspector]
		public bool goingToSetHeight;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15B")]
		[HideInInspector]
		public bool goingToResize;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[HideInInspector]
		public bool goingToReposition;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject locoMotion;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public GameObject[] locoMotionTips;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public GameObject putOnHMD;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int mainCamCullingMask;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform recenterPoint;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private bool optionPressedTooLong;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		private bool isDismounting;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
		private bool isMounting;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Text[] tipTexts;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Transform[] tipTargets;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private string[] tips;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Animator[] tipAnims;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public Material UIButtonSelectedMat;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public Material UIButtonGreyMat;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public Material UIButtonPressMat;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public TipTargetType tipTargetType;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private bool tipUp;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		[HideInInspector]
		public bool liftTipDone;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		[HideInInspector]
		public bool liftButtonTipDone;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public RocketInputManager[] rocketInputManagers;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SoundGroup]
		public string calibMusic;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GameObject[] DS4FireTuts;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public GameObject[] moveFireTuts;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private bool[] dipToBlackHandles;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public GameObject LTouchController;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public GameObject RTouchController;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public GameObject cylindricalShaft;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public Collider swapZone;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public bool menuReady;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public Transform spawnPoint;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public GameObject cakePrefab;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public GameObject donutPrefab;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public GameObject spiderCakePrefab;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public GameObject pumpkinPrefab;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public GameObject umbrellaPrefab;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public GameObject CustomVersionObject;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public List<GameObject> plankObjects;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public GameObject plankOptionsPanel;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public Transform setupUI;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public Transform menu;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public MainMenu mainMenu;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public float menuMoveThreshold;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private bool finishedRotating;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private Quaternion rotTarget;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private float currUISpeed;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public GameObject trailPrefab;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private List<GameObject> trails;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private TrailRenderer currentTrailRenderer;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public GameObject colorPalette;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		[HideInInspector]
		public Color trailColor;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private bool isTeleportingPlayer;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public Transform trailStart;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private float fTempDrag;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private bool hasInk;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public GameObject spiderObject;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public Mesh yellowButton;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public Mesh greyButton;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		[HideInInspector]
		public bool markerStartGrabbed;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x301")]
		[HideInInspector]
		public bool markerEndGrabbed;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x302")]
		[HideInInspector]
		public bool plankRaiserGrabbed;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public Grabber[] grabbers;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private Vector3 cachedHeadLocalPos;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private Vector3 currGuardianSize;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		[HideInInspector]
		public Vector3[] guardianPoints;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		[HideInInspector]
		public Vector3 centerPoint;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public InitBlack initBlack;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private bool willSetupFirst;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public GameObject pauseChecker;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private int resumeRecenter;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		private float resumeTime;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public GameObject skyBrushTipPalette;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public GameObject skyBrushTipOn;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public GameObject skyBrushTipOff;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public int nightmareButtonPresses;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public NightmareManager nightmare;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public GameObject rewardBoard;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		public RecenterPopupMenu recenterPopup;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private bool popupActive;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
		private float button6ResetTime;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public bool hasLostFocus;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public GameObject collidersEnabledWhileFlying;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private OculusQuestPerformance oqp;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private LiftButtonType tempCurrFloor;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		private AnimatorStateInfo savedLiftState;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private AnimatorStateInfo savedLiftDoorState;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
		private AnimatorStateInfo savedSecondPanelState;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		private GameObject currPlankObject;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		public Text textRecenterCount;

		[Token(Token = "0x17000226")]
		public static ContentLoader Instance
		{
			[Token(Token = "0x60014DB")]
			[Address(RVA = "0xBD30F4", Offset = "0xBD30F4", VA = "0xBD30F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000035")]
		public event EventHandler MenuUp
		{
			[Token(Token = "0x60014DC")]
			[Address(RVA = "0xBD315C", Offset = "0xBD315C", VA = "0xBD315C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD318", Offset = "0x7FD318")]
			add
			{
			}
			[Token(Token = "0x60014DD")]
			[Address(RVA = "0xBD3200", Offset = "0xBD3200", VA = "0xBD3200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD328", Offset = "0x7FD328")]
			remove
			{
			}
		}

		[Token(Token = "0x14000036")]
		public event EventHandler MenuDown
		{
			[Token(Token = "0x60014DE")]
			[Address(RVA = "0xBD32A4", Offset = "0xBD32A4", VA = "0xBD32A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD338", Offset = "0x7FD338")]
			add
			{
			}
			[Token(Token = "0x60014DF")]
			[Address(RVA = "0xBD3348", Offset = "0xBD3348", VA = "0xBD3348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD348", Offset = "0x7FD348")]
			remove
			{
			}
		}

		[Token(Token = "0x14000037")]
		public event EventHandler LiftEnter
		{
			[Token(Token = "0x60014E0")]
			[Address(RVA = "0xBD33EC", Offset = "0xBD33EC", VA = "0xBD33EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD358", Offset = "0x7FD358")]
			add
			{
			}
			[Token(Token = "0x60014E1")]
			[Address(RVA = "0xBD3494", Offset = "0xBD3494", VA = "0xBD3494")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD368", Offset = "0x7FD368")]
			remove
			{
			}
		}

		[Token(Token = "0x14000038")]
		public event EventHandler LiftExit
		{
			[Token(Token = "0x60014E2")]
			[Address(RVA = "0xBD353C", Offset = "0xBD353C", VA = "0xBD353C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD378", Offset = "0x7FD378")]
			add
			{
			}
			[Token(Token = "0x60014E3")]
			[Address(RVA = "0xBD35E4", Offset = "0xBD35E4", VA = "0xBD35E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD388", Offset = "0x7FD388")]
			remove
			{
			}
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xBD368C", Offset = "0xBD368C", VA = "0xBD368C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xBD3F64", Offset = "0xBD3F64", VA = "0xBD3F64")]
		private void Start()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xBD43D8", Offset = "0xBD43D8", VA = "0xBD43D8")]
		public void OnGameStageChange(GameStage newStage)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xBD4DAC", Offset = "0xBD4DAC", VA = "0xBD4DAC")]
		private void ShowCalibration()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xBD4E58", Offset = "0xBD4E58", VA = "0xBD4E58")]
		private void HideCalibration()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xBD4FFC", Offset = "0xBD4FFC", VA = "0xBD4FFC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD398", Offset = "0x7FD398")]
		public IEnumerator StartFadeBlack(float waitTime)
		{
			return null;
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xBD54EC", Offset = "0xBD54EC", VA = "0xBD54EC")]
		public void Heaven()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xBD5770", Offset = "0xBD5770", VA = "0xBD5770")]
		public void OnHeaven(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xBD5C60", Offset = "0xBD5C60", VA = "0xBD5C60")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD3FC", Offset = "0x7FD3FC")]
		private IEnumerator HeavenDelayed()
		{
			return null;
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xBD5CD0", Offset = "0xBD5CD0", VA = "0xBD5CD0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD460", Offset = "0x7FD460")]
		private IEnumerator FadeOutHeaven()
		{
			return null;
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xBD5D98", Offset = "0xBD5D98", VA = "0xBD5D98")]
		public void ResetGame()
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xBD6914", Offset = "0xBD6914", VA = "0xBD6914")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xBD6F90", Offset = "0xBD6F90", VA = "0xBD6F90")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xBD6234", Offset = "0xBD6234", VA = "0xBD6234")]
		public void OnLoadContent(object sender, LoadContentEventArgs e)
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xBD7800", Offset = "0xBD7800", VA = "0xBD7800")]
		private void SetPerformance()
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xBD652C", Offset = "0xBD652C", VA = "0xBD652C")]
		public void OnLoadContentOpenDoor(object sender, LoadContentEventArgs e)
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xBD80DC", Offset = "0xBD80DC", VA = "0xBD80DC")]
		public void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xBD82B8", Offset = "0xBD82B8", VA = "0xBD82B8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD4C4", Offset = "0x7FD4C4")]
		private IEnumerator UnloadWhiteroom()
		{
			return null;
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xBD4DE8", Offset = "0xBD4DE8", VA = "0xBD4DE8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD528", Offset = "0x7FD528")]
		private IEnumerator LoadWhiteRoom()
		{
			return null;
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xBD8380", Offset = "0xBD8380", VA = "0xBD8380")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD58C", Offset = "0x7FD58C")]
		private IEnumerator RealignPlank()
		{
			return null;
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xBD81B0", Offset = "0xBD81B0", VA = "0xBD81B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD5F0", Offset = "0x7FD5F0")]
		private IEnumerator InitialRealign()
		{
			return null;
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xBD4A40", Offset = "0xBD4A40", VA = "0xBD4A40")]
		public void SetRPEPlank()
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xBD8438", Offset = "0xBD8438", VA = "0xBD8438")]
		public void OnRepositionPlank()
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xBD86A8", Offset = "0xBD86A8", VA = "0xBD86A8")]
		public void OnResizePlank()
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xBD8A1C", Offset = "0xBD8A1C", VA = "0xBD8A1C")]
		public void OnSetPlayerHeight()
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xBD8C50", Offset = "0xBD8C50", VA = "0xBD8C50")]
		public void SetFalling(bool value)
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xBD8C70", Offset = "0xBD8C70", VA = "0xBD8C70")]
		public void OnControllerButtonDown(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xBD8E04", Offset = "0xBD8E04", VA = "0xBD8E04")]
		public void OnControllerButtonUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xBD9534", Offset = "0xBD9534", VA = "0xBD9534")]
		public void OnPinch(object sender, HandEventArgs e)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xBD9660", Offset = "0xBD9660", VA = "0xBD9660")]
		public void InvokeMenuUp()
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xBD96F8", Offset = "0xBD96F8", VA = "0xBD96F8")]
		public void InvokeMenuDown()
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xBD4B64", Offset = "0xBD4B64", VA = "0xBD4B64")]
		public void ToggleLiftControllerTips(bool value)
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xBD4F3C", Offset = "0xBD4F3C", VA = "0xBD4F3C")]
		public void ToggleLasers(bool value)
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xBD496C", Offset = "0xBD496C", VA = "0xBD496C")]
		public void ToggleLasers(bool value, bool leftHand)
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xBD8FC8", Offset = "0xBD8FC8", VA = "0xBD8FC8")]
		public void OpenMenu()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xBD9420", Offset = "0xBD9420", VA = "0xBD9420")]
		public void CloseMenu()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xBD58D4", Offset = "0xBD58D4", VA = "0xBD58D4")]
		public void CloseMenuFast()
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xBDA058", Offset = "0xBDA058", VA = "0xBDA058")]
		public void SetPlayerHeight(float currentHeadHeight)
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xBD9AA0", Offset = "0xBD9AA0", VA = "0xBD9AA0")]
		public void ToggleOptionsForRealPlank()
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xBD9EA0", Offset = "0xBD9EA0", VA = "0xBD9EA0")]
		public void DipToBlack(DipToBlackTrigger trigger)
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xBD6054", Offset = "0xBD6054", VA = "0xBD6054")]
		public void FadeBlack(DipToBlackTrigger trigger)
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xBDA18C", Offset = "0xBDA18C", VA = "0xBDA18C")]
		public void DipToBlack()
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xBD8978", Offset = "0xBD8978", VA = "0xBD8978")]
		public void FadeBlack()
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xBDA230", Offset = "0xBDA230", VA = "0xBDA230")]
		public bool CheckInView(Camera camera, Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xBDA2A0", Offset = "0xBDA2A0", VA = "0xBDA2A0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xBDA2A4", Offset = "0xBDA2A4", VA = "0xBDA2A4")]
		public void InvokeLiftEnter()
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xBDA33C", Offset = "0xBDA33C", VA = "0xBDA33C")]
		public void InvokeLiftExit()
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xBDA3D4", Offset = "0xBDA3D4", VA = "0xBDA3D4")]
		private void OnLiftEnter(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xBDA568", Offset = "0xBDA568", VA = "0xBDA568")]
		private void OnLiftExit(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xBD7F48", Offset = "0xBD7F48", VA = "0xBD7F48")]
		public bool CheckOnLift()
		{
			return default(bool);
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xBDA870", Offset = "0xBDA870", VA = "0xBDA870")]
		private void Update()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xBDAADC", Offset = "0xBDAADC", VA = "0xBDAADC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xBD50B8", Offset = "0xBD50B8", VA = "0xBD50B8")]
		private void SetupMenuTransformUpdate(bool immediate = false)
		{
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xBD9AAC", Offset = "0xBD9AAC", VA = "0xBD9AAC")]
		private void MenuTransformUpdate(bool immediate = false)
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xBDAB24", Offset = "0xBDAB24", VA = "0xBDAB24")]
		public void ResetCameraRigPose(bool hasDipToBlack)
		{
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xBDABA4", Offset = "0xBDABA4", VA = "0xBDABA4")]
		public void ResetCameraRigRot(bool hasDipToBlack)
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xBD4D10", Offset = "0xBD4D10", VA = "0xBD4D10")]
		public void ToggleReticle(bool value)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xBDAD60", Offset = "0xBDAD60", VA = "0xBDAD60")]
		public void OnFullBlack(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xBDB4FC", Offset = "0xBDB4FC", VA = "0xBDB4FC")]
		private void TeleportRPE(Vector3 position)
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xBDB550", Offset = "0xBDB550", VA = "0xBDB550")]
		public void OnControllerConnect(object sender, ControllerConnectEventArgs e)
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xBDB5B4", Offset = "0xBDB5B4", VA = "0xBDB5B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD654", Offset = "0x7FD654")]
		private IEnumerator ReconnectHoseAndRocket()
		{
			return null;
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xBD4D0C", Offset = "0xBD4D0C", VA = "0xBD4D0C")]
		public void ToggleLocoMotionTips(bool value)
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xBDB640", Offset = "0xBDB640", VA = "0xBDB640")]
		public void ShowPutOnHMD()
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xBDB69C", Offset = "0xBDB69C", VA = "0xBDB69C")]
		public void HidePutOnHMD()
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xBDB6DC", Offset = "0xBDB6DC", VA = "0xBDB6DC")]
		public void Recenter()
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xBD507C", Offset = "0xBD507C", VA = "0xBD507C")]
		public void TipStart(int targetType)
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xBDB8FC", Offset = "0xBDB8FC", VA = "0xBDB8FC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD6B8", Offset = "0x7FD6B8")]
		private IEnumerator TipStartCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xBDA434", Offset = "0xBDA434", VA = "0xBDA434")]
		public void TipStop()
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xBD7A58", Offset = "0xBD7A58", VA = "0xBD7A58")]
		public void SpawnPlankObject(PlankObject plankObject)
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xBD760C", Offset = "0xBD760C", VA = "0xBD760C")]
		public void ClearPlankObject()
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xBDB998", Offset = "0xBDB998", VA = "0xBDB998")]
		public void ShowPlankOptionsPanel()
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xBDB9B8", Offset = "0xBDB9B8", VA = "0xBDB9B8")]
		public void HidePlankOptionsPanel()
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xBD77A0", Offset = "0xBD77A0", VA = "0xBD77A0")]
		public void PreStartSkyBrush()
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xBD7BEC", Offset = "0xBD7BEC", VA = "0xBD7BEC")]
		public void StartSkyBrush()
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xBD5E78", Offset = "0xBD5E78", VA = "0xBD5E78")]
		public void StopSkyBrush()
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xBD9930", Offset = "0xBD9930", VA = "0xBD9930")]
		public void PauseSkyBrush()
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xBDB320", Offset = "0xBDB320", VA = "0xBDB320")]
		public void ResumeSkyBrush()
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xBDA600", Offset = "0xBDA600", VA = "0xBDA600")]
		public void SpawnTrail()
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xBD9790", Offset = "0xBD9790", VA = "0xBD9790")]
		public void DetachTrail()
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xBD78E8", Offset = "0xBD78E8", VA = "0xBD78E8")]
		public void ClearTrail()
		{
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xBDB9D8", Offset = "0xBDB9D8", VA = "0xBDB9D8")]
		public void OnTrailColorChange(object sender, TrailEventArgs e)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xBD8D84", Offset = "0xBD8D84", VA = "0xBD8D84")]
		public void ToggleSkyBrushInk()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xBDBA00", Offset = "0xBDBA00", VA = "0xBDBA00")]
		public void OnGrab(Grabbable grabbable)
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xBDBC24", Offset = "0xBDBC24", VA = "0xBDBC24")]
		public void OnRelease(Grabbable grabbable)
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xBDA93C", Offset = "0xBDA93C", VA = "0xBDA93C")]
		private void OnRecenter()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xBDBCA4", Offset = "0xBDBCA4", VA = "0xBDBCA4")]
		public void RecenterPopup()
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xBDBCAC", Offset = "0xBDBCAC", VA = "0xBDBCAC")]
		public void RecenterPopup(float inputLifeTime)
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xBDC18C", Offset = "0xBDC18C", VA = "0xBDC18C")]
		public void CloseRecenterPopup()
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xBDC5C8", Offset = "0xBDC5C8", VA = "0xBDC5C8")]
		public void MovePlayerBackRecenter()
		{
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xBD3940", Offset = "0xBD3940", VA = "0xBD3940")]
		public void CheckGuardian()
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xBDC99C", Offset = "0xBDC99C", VA = "0xBDC99C")]
		public Vector3 LoadPlankPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xBDCB18", Offset = "0xBDCB18", VA = "0xBDCB18")]
		public Quaternion LoadPlankRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0xBDCD00", Offset = "0xBDCD00", VA = "0xBDCD00")]
		public void CheckNightmarePresses()
		{
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0xBDCDE4", Offset = "0xBDCDE4", VA = "0xBDCDE4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD71C", Offset = "0x7FD71C")]
		private IEnumerator NightmareButton6Reset()
		{
			return null;
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0xBDCE54", Offset = "0xBDCE54", VA = "0xBDCE54")]
		public void StartNightmare()
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0xBDCEB0", Offset = "0xBDCEB0", VA = "0xBDCEB0")]
		private void OnVrFocusAcquired()
		{
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0xBDCEB4", Offset = "0xBDCEB4", VA = "0xBDCEB4")]
		private void OnVrFocusLost()
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xBDCEB8", Offset = "0xBDCEB8", VA = "0xBDCEB8")]
		public void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xBDCF50", Offset = "0xBDCF50", VA = "0xBDCF50")]
		public void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0xBD8220", Offset = "0xBD8220", VA = "0xBD8220")]
		public void OnHMDMounted()
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xBDCFE4", Offset = "0xBDCFE4", VA = "0xBDCFE4")]
		private void OnHMDUnmounted()
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0xBDCFE8", Offset = "0xBDCFE8", VA = "0xBDCFE8")]
		public void OnLanguageChange(int inputLanguage)
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0xBD4E78", Offset = "0xBD4E78", VA = "0xBD4E78")]
		private void SetWhiteRoomActive(bool active)
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xBDD278", Offset = "0xBDD278", VA = "0xBDD278")]
		public void SetCalibrationActive(bool active)
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xBD9AA4", Offset = "0xBD9AA4", VA = "0xBD9AA4")]
		public static void SetTimeScale(float value)
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xBD7770", Offset = "0xBD7770", VA = "0xBD7770")]
		public void SetCollidersWhileFlyingActive(bool active)
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xBDD298", Offset = "0xBDD298", VA = "0xBDD298")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD780", Offset = "0x7FD780")]
		public IEnumerator CollidersWhileFlyingDelay(bool active)
		{
			return null;
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xBD4D8C", Offset = "0xBD4D8C", VA = "0xBD4D8C")]
		public void SetCityActive(bool active)
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xBDD348", Offset = "0xBDD348", VA = "0xBDD348")]
		public ContentLoader()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public enum PlankObject
	{
		[Token(Token = "0x4001130")]
		Cake,
		[Token(Token = "0x4001131")]
		Donut,
		[Token(Token = "0x4001132")]
		Pumpkin,
		[Token(Token = "0x4001133")]
		Umbrella,
		[Token(Token = "0x4001134")]
		SpiderCake,
		[Token(Token = "0x4001135")]
		CustomVersionObject
	}
	[Token(Token = "0x20002B7")]
	public enum TrailColors
	{
		[Token(Token = "0x4001137")]
		White,
		[Token(Token = "0x4001138")]
		Yellow,
		[Token(Token = "0x4001139")]
		Orange,
		[Token(Token = "0x400113A")]
		Red,
		[Token(Token = "0x400113B")]
		Purple,
		[Token(Token = "0x400113C")]
		Blue,
		[Token(Token = "0x400113D")]
		Green,
		[Token(Token = "0x400113E")]
		Black
	}
	[Token(Token = "0x20002B8")]
	public class CrossHairHandSwitcher : MonoBehaviour
	{
		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpriteRenderer sprite;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite triggerSprite;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite pinchSprite;

		[Token(Token = "0x6001552")]
		[Address(RVA = "0xBDFBA4", Offset = "0xBDFBA4", VA = "0xBDFBA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xBDFBFC", Offset = "0xBDFBFC", VA = "0xBDFBFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xBDFEE0", Offset = "0xBDFEE0", VA = "0xBDFEE0")]
		public CrossHairHandSwitcher()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class Edible : MonoBehaviour
	{
		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string eatenSound;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject eatenParticlePrefab;

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xBE10F0", Offset = "0xBE10F0", VA = "0xBE10F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xBE1140", Offset = "0xBE1140", VA = "0xBE1140")]
		public void Eaten()
		{
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0xBE12C8", Offset = "0xBE12C8", VA = "0xBE12C8")]
		public Edible()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class ElevatorPanel : MonoBehaviour
	{
		[Token(Token = "0x2000462")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB5C", Offset = "0x7EEB5C")]
		private sealed class <ToggleLiftButtonColliders>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ElevatorPanel <>4__this;

			[Token(Token = "0x17000368")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C8D")]
				[Address(RVA = "0xBE17D4", Offset = "0xBE17D4", VA = "0xBE17D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000369")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C8F")]
				[Address(RVA = "0xBE183C", Offset = "0xBE183C", VA = "0xBE183C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0xBE1660", Offset = "0xBE1660", VA = "0xBE1660")]
			[DebuggerHidden]
			public <ToggleLiftButtonColliders>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001C8B")]
			[Address(RVA = "0xBE1694", Offset = "0xBE1694", VA = "0xBE1694", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C8C")]
			[Address(RVA = "0xBE1698", Offset = "0xBE1698", VA = "0xBE1698", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C8E")]
			[Address(RVA = "0xBE17DC", Offset = "0xBE17DC", VA = "0xBE17DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LiftButton[] liftButtons;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform lIndexFingerTip;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform rIndexFingerTip;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform lWrist;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rWrist;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 prevLHandPos;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 prevRHandPos;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool lInTouchZone;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool rInTouchZone;

		[Token(Token = "0x6001558")]
		[Address(RVA = "0xBE12D0", Offset = "0xBE12D0", VA = "0xBE12D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xBE12D8", Offset = "0xBE12D8", VA = "0xBE12D8")]
		public void OnLossOfHandTracking(object sender, HandEventArgs e)
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xBE12DC", Offset = "0xBE12DC", VA = "0xBE12DC")]
		private void CheckPress(OVRInput.Controller controllerType)
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xBE13E8", Offset = "0xBE13E8", VA = "0xBE13E8")]
		private LiftButton FindClosestLiftButton(Transform fingerTip, out float dist)
		{
			return null;
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xBE15F0", Offset = "0xBE15F0", VA = "0xBE15F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD7E4", Offset = "0x7FD7E4")]
		private IEnumerator ToggleLiftButtonColliders()
		{
			return null;
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xBE168C", Offset = "0xBE168C", VA = "0xBE168C")]
		public ElevatorPanel()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class FallDetection : MonoBehaviour
	{
		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody rb;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 boxCastHalfExtent;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float boxCastHalfLength;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float protectInterval;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float protectStartTime;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool timerRunning;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool isOnGround;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fallLethalThreshold;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float prevFrameSpeed;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask detectLayerMask;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool fallOn;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool bIsFlying;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Collider flyingCollider;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject feet;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public bool isFalling;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Collider[] shaftColliders;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rayStart;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 rayHit;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private EventHandler handler;

		[Token(Token = "0x14000039")]
		private event EventHandler timerFire
		{
			[Token(Token = "0x600155E")]
			[Address(RVA = "0xBE1844", Offset = "0xBE1844", VA = "0xBE1844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD848", Offset = "0x7FD848")]
			add
			{
			}
			[Token(Token = "0x600155F")]
			[Address(RVA = "0xBE18E8", Offset = "0xBE18E8", VA = "0xBE18E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD858", Offset = "0x7FD858")]
			remove
			{
			}
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xBE198C", Offset = "0xBE198C", VA = "0xBE198C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xBE1AD0", Offset = "0xBE1AD0", VA = "0xBE1AD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xBE1B44", Offset = "0xBE1B44", VA = "0xBE1B44")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xBE1BC8", Offset = "0xBE1BC8", VA = "0xBE1BC8")]
		private void OnElapseTime(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xBE1D14", Offset = "0xBE1D14", VA = "0xBE1D14")]
		private void UpdateSlow()
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xBE1F04", Offset = "0xBE1F04", VA = "0xBE1F04")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xBE25C0", Offset = "0xBE25C0", VA = "0xBE25C0")]
		private void InvokeFireTimer()
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xBE1BDC", Offset = "0xBE1BDC", VA = "0xBE1BDC")]
		private void StartFalling()
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xBD58C4", Offset = "0xBD58C4", VA = "0xBD58C4")]
		public void ExitPoint()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xBE265C", Offset = "0xBE265C", VA = "0xBE265C")]
		public void ResetPrevSpeed()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xBE2664", Offset = "0xBE2664", VA = "0xBE2664")]
		public FallDetection()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public class FireDeckKickStart : MonoBehaviour
	{
		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objectsOnDeck;

		[Token(Token = "0x600156B")]
		[Address(RVA = "0xBE266C", Offset = "0xBE266C", VA = "0xBE266C")]
		public void TurnOnObjectsOnDeck()
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xBE277C", Offset = "0xBE277C", VA = "0xBE277C")]
		public void TurnOffObjectsOnDeck()
		{
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xBE27EC", Offset = "0xBE27EC", VA = "0xBE27EC")]
		public FireDeckKickStart()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class FlyButton : GOEventHandler
	{
		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer myRenderer;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float emissionIntensity;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator anim;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color32 highlightColor;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Pressed;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Released;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject buttonSprite;

		[Token(Token = "0x1400003A")]
		public event EventHandler FlyButtonPressed
		{
			[Token(Token = "0x600156E")]
			[Address(RVA = "0xBE27F4", Offset = "0xBE27F4", VA = "0xBE27F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD868", Offset = "0x7FD868")]
			add
			{
			}
			[Token(Token = "0x600156F")]
			[Address(RVA = "0xBE2898", Offset = "0xBE2898", VA = "0xBE2898")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD878", Offset = "0x7FD878")]
			remove
			{
			}
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xBE293C", Offset = "0xBE293C", VA = "0xBE293C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xBE29E4", Offset = "0xBE29E4", VA = "0xBE29E4")]
		public void InvokeFlyButtonPress()
		{
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xBE2A7C", Offset = "0xBE2A7C", VA = "0xBE2A7C", Slot = "14")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xBE2A80", Offset = "0xBE2A80", VA = "0xBE2A80", Slot = "15")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xBE2A84", Offset = "0xBE2A84", VA = "0xBE2A84", Slot = "13")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xBE2B14", Offset = "0xBE2B14", VA = "0xBE2B14", Slot = "12")]
		public override void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xBE2B94", Offset = "0xBE2B94", VA = "0xBE2B94")]
		public void OnPress()
		{
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xBE2DB4", Offset = "0xBE2DB4", VA = "0xBE2DB4")]
		public void OnRelease()
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xBE2E34", Offset = "0xBE2E34", VA = "0xBE2E34")]
		public void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xBE2F44", Offset = "0xBE2F44", VA = "0xBE2F44")]
		public void OnBeamEnter()
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xBE3148", Offset = "0xBE3148", VA = "0xBE3148")]
		public void OnBeamExit()
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xBE3204", Offset = "0xBE3204", VA = "0xBE3204")]
		public void SetSprite()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xBE3208", Offset = "0xBE3208", VA = "0xBE3208")]
		public FlyButton()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public class FlyColliderLeash : MonoBehaviour
	{
		[Token(Token = "0x600157E")]
		[Address(RVA = "0xBE3294", Offset = "0xBE3294", VA = "0xBE3294")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xBE3464", Offset = "0xBE3464", VA = "0xBE3464")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xBE35CC", Offset = "0xBE35CC", VA = "0xBE35CC")]
		public FlyColliderLeash()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class FlyColliderLeashLevel2 : MonoBehaviour
	{
		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ProjectorMove projectorMove;

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xBE35D4", Offset = "0xBE35D4", VA = "0xBE35D4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xBE376C", Offset = "0xBE376C", VA = "0xBE376C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xBE3904", Offset = "0xBE3904", VA = "0xBE3904")]
		public FlyColliderLeashLevel2()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	public class GroundButton : GOEventHandler
	{
		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer myRenderer;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float emissionIntensity;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator anim;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color32 highlightColor;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int pressedTrigger;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int releasedTrigger;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject buttonSprite;

		[Token(Token = "0x1400003B")]
		public event EventHandler GroundButtonPressed
		{
			[Token(Token = "0x6001584")]
			[Address(RVA = "0xBE6FBC", Offset = "0xBE6FBC", VA = "0xBE6FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD888", Offset = "0x7FD888")]
			add
			{
			}
			[Token(Token = "0x6001585")]
			[Address(RVA = "0xBE7060", Offset = "0xBE7060", VA = "0xBE7060")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD898", Offset = "0x7FD898")]
			remove
			{
			}
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0xBE7104", Offset = "0xBE7104", VA = "0xBE7104")]
		private void Start()
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xBE71AC", Offset = "0xBE71AC", VA = "0xBE71AC")]
		public void InvokeGroundButtonPress()
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xBE7244", Offset = "0xBE7244", VA = "0xBE7244", Slot = "14")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xBE7248", Offset = "0xBE7248", VA = "0xBE7248", Slot = "15")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xBE724C", Offset = "0xBE724C", VA = "0xBE724C", Slot = "13")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xBE72DC", Offset = "0xBE72DC", VA = "0xBE72DC", Slot = "12")]
		public override void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xBE735C", Offset = "0xBE735C", VA = "0xBE735C")]
		public void OnPress()
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xBE757C", Offset = "0xBE757C", VA = "0xBE757C")]
		public void OnRelease()
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xBE75FC", Offset = "0xBE75FC", VA = "0xBE75FC")]
		public void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xBE770C", Offset = "0xBE770C", VA = "0xBE770C")]
		public void OnBeamEnter()
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xBE7910", Offset = "0xBE7910", VA = "0xBE7910")]
		public void OnBeamExit()
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xBE79CC", Offset = "0xBE79CC", VA = "0xBE79CC")]
		public void SetSprite()
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xBE79D0", Offset = "0xBE79D0", VA = "0xBE79D0")]
		public GroundButton()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public enum LiftHeight
	{
		[Token(Token = "0x4001174")]
		Ground,
		[Token(Token = "0x4001175")]
		FireDeck,
		[Token(Token = "0x4001176")]
		Plank
	}
	[Token(Token = "0x20002C2")]
	public class Lift : MonoBehaviour
	{
		[Token(Token = "0x2000463")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB6C", Offset = "0x7EEB6C")]
		private sealed class <PlankObjectOpenDoor>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Lift <>4__this;

			[Token(Token = "0x1700036A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C93")]
				[Address(RVA = "0xAD41E8", Offset = "0xAD41E8", VA = "0xAD41E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C95")]
				[Address(RVA = "0xAD4250", Offset = "0xAD4250", VA = "0xAD4250", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C90")]
			[Address(RVA = "0xAD2DF8", Offset = "0xAD2DF8", VA = "0xAD2DF8")]
			[DebuggerHidden]
			public <PlankObjectOpenDoor>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6001C91")]
			[Address(RVA = "0xAD4134", Offset = "0xAD4134", VA = "0xAD4134", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C92")]
			[Address(RVA = "0xAD4138", Offset = "0xAD4138", VA = "0xAD4138", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C94")]
			[Address(RVA = "0xAD41F0", Offset = "0xAD41F0", VA = "0xAD41F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LiftButton[] liftButtons;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Animator anim;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int DoorCloseMultiplier;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int CloseDoor;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int OpenDoor;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int GoingUp;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int StartLightShaft;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int StopLightShaft;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int Ground2Fire;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int Ground2Plank;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int Fire2Plank;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int Fire2Ground;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int Plank2Fire;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int Plank2Ground;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int ButtonCover_Open;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int ButtonCover_Close;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform groundFloor;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform plankFloor;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform fireDeckFloor;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject lightShaft;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject player;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int Deploy;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static readonly int Withdraw;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool prevOnLift;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public LiftButtonType currLiftFloor;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public LiftButtonType targetLiftFloor;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideInInspector]
		public LiftHeight currLiftHeight;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public LiftHeight targetLiftHeight;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool doorClosed;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SoundGroup]
		public string soundDoorOpen;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SoundGroup]
		public string soundDoorClose;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SoundGroup]
		public string soundLiftMusic;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SoundGroup]
		public string soundLiftMusicNightmare;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SoundGroup]
		public string soundLiftBreaking;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SoundGroup]
		public string soundLiftEnd;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SoundGroup]
		public string soundLiftDuring;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SoundGroup]
		public string soundBell;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SoundGroup]
		public string soundWind;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SoundGroup]
		public string soundWind2;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform VRUtil;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool liftReady;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform savedParent;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AnimatorStateInfo savedPlankState;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private AnimatorStateInfo savedFireDeckState;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private LiftButton prevPressedObjectButton;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public LiftButton plankOnly;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Collider[] plankOptionButtons;

		[Token(Token = "0x17000227")]
		public bool DoorClosed
		{
			[Token(Token = "0x6001598")]
			[Address(RVA = "0xAD0838", Offset = "0xAD0838", VA = "0xAD0838")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400003C")]
		public event EventHandler<LoadContentEventArgs> LoadContent
		{
			[Token(Token = "0x6001594")]
			[Address(RVA = "0xAD05A8", Offset = "0xAD05A8", VA = "0xAD05A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD8A8", Offset = "0x7FD8A8")]
			add
			{
			}
			[Token(Token = "0x6001595")]
			[Address(RVA = "0xAD064C", Offset = "0xAD064C", VA = "0xAD064C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD8B8", Offset = "0x7FD8B8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400003D")]
		public event EventHandler<LoadContentEventArgs> LoadContentOpenDoor
		{
			[Token(Token = "0x6001596")]
			[Address(RVA = "0xAD06F0", Offset = "0xAD06F0", VA = "0xAD06F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD8C8", Offset = "0x7FD8C8")]
			add
			{
			}
			[Token(Token = "0x6001597")]
			[Address(RVA = "0xAD0794", Offset = "0xAD0794", VA = "0xAD0794")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD8D8", Offset = "0x7FD8D8")]
			remove
			{
			}
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xAD0840", Offset = "0xAD0840", VA = "0xAD0840")]
		private void Awake()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xAD0968", Offset = "0xAD0968", VA = "0xAD0968")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xAD0AEC", Offset = "0xAD0AEC", VA = "0xAD0AEC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xAD0C70", Offset = "0xAD0C70", VA = "0xAD0C70")]
		public void InvokeLoadContent(LoadContentEventArgs e)
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xAD0CE8", Offset = "0xAD0CE8", VA = "0xAD0CE8")]
		private void ToggleButtonFunctions(bool turnOn)
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xAD0D48", Offset = "0xAD0D48", VA = "0xAD0D48")]
		public void OnPlankButtonPress(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xAD0FC8", Offset = "0xAD0FC8", VA = "0xAD0FC8")]
		public void OnGroundButtonPress(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xAD1248", Offset = "0xAD1248", VA = "0xAD1248")]
		public void OnFlyingButtonPress(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xAD143C", Offset = "0xAD143C", VA = "0xAD143C")]
		public void OnLiftButtonPress(object sender, LiftButtonPressEventArgs e)
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xAD2348", Offset = "0xAD2348", VA = "0xAD2348")]
		public void OnDoorClose()
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xAD2D0C", Offset = "0xAD2D0C", VA = "0xAD2D0C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD8E8", Offset = "0x7FD8E8")]
		public IEnumerator PlankObjectOpenDoor()
		{
			return null;
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xAD2E24", Offset = "0xAD2E24", VA = "0xAD2E24")]
		public void ReturnToGround()
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xAD3084", Offset = "0xAD3084", VA = "0xAD3084")]
		public void OnDoorOpen()
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xAD34D0", Offset = "0xAD34D0", VA = "0xAD34D0")]
		public void InvokeLoadContentOpenDoor(LoadContentEventArgs e)
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xAD3548", Offset = "0xAD3548", VA = "0xAD3548")]
		private void Update()
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xAD3708", Offset = "0xAD3708", VA = "0xAD3708")]
		public void OpenLiftDoor()
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xAD3788", Offset = "0xAD3788", VA = "0xAD3788")]
		public void ResetPlayerParent()
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xAD385C", Offset = "0xAD385C", VA = "0xAD385C")]
		public void LoadPlayerParent()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xAD3960", Offset = "0xAD3960", VA = "0xAD3960")]
		public void PauseLiftMusic()
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xAD39DC", Offset = "0xAD39DC", VA = "0xAD39DC")]
		public void ResumeLiftMusic()
		{
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xAD3B08", Offset = "0xAD3B08", VA = "0xAD3B08")]
		public void SaveAnimStates()
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xAD3B0C", Offset = "0xAD3B0C", VA = "0xAD3B0C")]
		public void LoadAnimStates()
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xAD3B10", Offset = "0xAD3B10", VA = "0xAD3B10")]
		public void ResetAnimators()
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xAD2308", Offset = "0xAD2308", VA = "0xAD2308")]
		public void ResetPlankOptionsPanel()
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xAD2C9C", Offset = "0xAD2C9C", VA = "0xAD2C9C")]
		private void EnablePlankObjectButtons()
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xAD08F8", Offset = "0xAD08F8", VA = "0xAD08F8")]
		private void DisablePlankObjectButtons()
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xAD3C6C", Offset = "0xAD3C6C", VA = "0xAD3C6C")]
		public void GoToNightmare()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xAD3EE8", Offset = "0xAD3EE8", VA = "0xAD3EE8")]
		public Lift()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class LoadContentEventArgs : EventArgs
	{
		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LiftButtonType targetFloor;

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xAD2D7C", Offset = "0xAD2D7C", VA = "0xAD2D7C")]
		public LoadContentEventArgs(LiftButtonType floor)
		{
		}
	}
	[Token(Token = "0x20002C4")]
	public enum LiftButtonType
	{
		[Token(Token = "0x40011AA")]
		Plank,
		[Token(Token = "0x40011AB")]
		Cake,
		[Token(Token = "0x40011AC")]
		Donut,
		[Token(Token = "0x40011AD")]
		Pumpkin,
		[Token(Token = "0x40011AE")]
		SpiderCake,
		[Token(Token = "0x40011AF")]
		Umbrella,
		[Token(Token = "0x40011B0")]
		HeroAcademy,
		[Token(Token = "0x40011B1")]
		SkyBrush,
		[Token(Token = "0x40011B2")]
		Santa,
		[Token(Token = "0x40011B3")]
		Ground,
		[Token(Token = "0x40011B4")]
		NightmareMode,
		[Token(Token = "0x40011B5")]
		PlankOnly,
		[Token(Token = "0x40011B6")]
		CustomVersionObject
	}
	[Token(Token = "0x20002C5")]
	public class LiftButtonPressEventArgs : EventArgs
	{
		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LiftButtonType liftButtonType;

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xAD4830", Offset = "0xAD4830", VA = "0xAD4830")]
		public LiftButtonPressEventArgs(LiftButtonType buttonType)
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class LiftButton : GOEventHandler
	{
		[Token(Token = "0x2000464")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB7C", Offset = "0x7EEB7C")]
		private sealed class <CooldownDelay>d__50 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x40018E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LiftButton <>4__this;

			[Token(Token = "0x1700036C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C99")]
				[Address(RVA = "0xAD5A34", Offset = "0xAD5A34", VA = "0xAD5A34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C9B")]
				[Address(RVA = "0xAD5A9C", Offset = "0xAD5A9C", VA = "0xAD5A9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C96")]
			[Address(RVA = "0xAD5874", Offset = "0xAD5874", VA = "0xAD5874")]
			[DebuggerHidden]
			public <CooldownDelay>d__50(int <>1__state)
			{
			}

			[Token(Token = "0x6001C97")]
			[Address(RVA = "0xAD5978", Offset = "0xAD5978", VA = "0xAD5978", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C98")]
			[Address(RVA = "0xAD597C", Offset = "0xAD597C", VA = "0xAD597C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C9A")]
			[Address(RVA = "0xAD5A3C", Offset = "0xAD5A3C", VA = "0xAD5A3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011B8")]
		private const int HAPTIC_DURATION = 100;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent ExtraActionsOnPress;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer myRenderer;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float emissionIntensity;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator anim;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Light light;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float fLightIntensityStart;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Pressed;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Released;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Color32 highlightColor;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LiftButtonType liftButtonType;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshFilter meshFilter;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool isSecondPanel;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[HideInInspector]
		public bool isActive;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool respondToHands;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float pressCooldownDuration;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool onCooldown;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Coroutine pressCooldownCoroutine;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ContentLoader contentLoader;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool active;

		[Token(Token = "0x17000228")]
		public float PressCooldownDuration
		{
			[Token(Token = "0x60015BA")]
			[Address(RVA = "0xAD4258", Offset = "0xAD4258", VA = "0xAD4258")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1400003E")]
		public event EventHandler<LiftButtonPressEventArgs> LiftButtonPressed
		{
			[Token(Token = "0x60015B8")]
			[Address(RVA = "0xAD0A48", Offset = "0xAD0A48", VA = "0xAD0A48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD94C", Offset = "0x7FD94C")]
			add
			{
			}
			[Token(Token = "0x60015B9")]
			[Address(RVA = "0xAD0BCC", Offset = "0xAD0BCC", VA = "0xAD0BCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD95C", Offset = "0x7FD95C")]
			remove
			{
			}
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xAD4260", Offset = "0xAD4260", VA = "0xAD4260")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xAD43A0", Offset = "0xAD43A0", VA = "0xAD43A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xAD4454", Offset = "0xAD4454", VA = "0xAD4454")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xAD4528", Offset = "0xAD4528", VA = "0xAD4528")]
		private void Update()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xAD4704", Offset = "0xAD4704", VA = "0xAD4704")]
		public void DisableLight()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xAD4798", Offset = "0xAD4798", VA = "0xAD4798")]
		public void InvokeLiftButtonPress()
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xAD48AC", Offset = "0xAD48AC", VA = "0xAD48AC", Slot = "14")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xAD48B0", Offset = "0xAD48B0", VA = "0xAD48B0", Slot = "15")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xAD48B4", Offset = "0xAD48B4", VA = "0xAD48B4", Slot = "13")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xAD4944", Offset = "0xAD4944", VA = "0xAD4944", Slot = "12")]
		public override void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xAD49C4", Offset = "0xAD49C4", VA = "0xAD49C4")]
		public void OnPress()
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xAD50DC", Offset = "0xAD50DC", VA = "0xAD50DC")]
		public void OnRelease()
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xAD452C", Offset = "0xAD452C", VA = "0xAD452C")]
		private void CheckIfInFieldOfView()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xAD515C", Offset = "0xAD515C", VA = "0xAD515C")]
		public void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xAD5284", Offset = "0xAD5284", VA = "0xAD5284")]
		private bool ControllerIsMovingAwayFromHead(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xAD5444", Offset = "0xAD5444", VA = "0xAD5444")]
		public void OnBeamEnter()
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xAD5684", Offset = "0xAD5684", VA = "0xAD5684")]
		public void OnBeamExit()
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xAD572C", Offset = "0xAD572C", VA = "0xAD572C")]
		public void SetSprite()
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xAD21B0", Offset = "0xAD21B0", VA = "0xAD21B0")]
		public void ChangeToGrey()
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xAD3B14", Offset = "0xAD3B14", VA = "0xAD3B14")]
		public void ChangeToYellow()
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xAD5730", Offset = "0xAD5730", VA = "0xAD5730")]
		public void ResetPressed()
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xAD50A4", Offset = "0xAD50A4", VA = "0xAD50A4")]
		private void StartCooldown()
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xAD4510", Offset = "0xAD4510", VA = "0xAD4510")]
		private void StopCooldown()
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xAD57B0", Offset = "0xAD57B0", VA = "0xAD57B0")]
		private void StartCooldownCoroutine()
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xAD57E0", Offset = "0xAD57E0", VA = "0xAD57E0")]
		private void KillCooldownCoroutine()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xAD57F4", Offset = "0xAD57F4", VA = "0xAD57F4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FD96C", Offset = "0x7FD96C")]
		private IEnumerator CooldownDelay(float duration)
		{
			return null;
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xAD58A0", Offset = "0xAD58A0", VA = "0xAD58A0")]
		public LiftButton()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xAD593C", Offset = "0xAD593C", VA = "0xAD593C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD9D0", Offset = "0x7FD9D0")]
		private void <OnPress>b__35_0(float val)
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xAD5958", Offset = "0xAD5958", VA = "0xAD5958")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD9E0", Offset = "0x7FD9E0")]
		private void <OnPress>b__35_1()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class PinchIcon : MonoBehaviour
	{
		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpriteRenderer sprite;

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xA86F1C", Offset = "0xA86F1C", VA = "0xA86F1C")]
		private void Update()
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xA87280", Offset = "0xA87280", VA = "0xA87280")]
		public PinchIcon()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class PlankButton : GOEventHandler
	{
		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent ExtraActionsOnPress;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer myRenderer;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float emissionIntensity;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator anim;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Pressed;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Released;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject buttonSprite;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color32 highlightColor;

		[Token(Token = "0x1400003F")]
		public event EventHandler PlankButtonPressed
		{
			[Token(Token = "0x60015DB")]
			[Address(RVA = "0xA87288", Offset = "0xA87288", VA = "0xA87288")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FD9F0", Offset = "0x7FD9F0")]
			add
			{
			}
			[Token(Token = "0x60015DC")]
			[Address(RVA = "0xA8732C", Offset = "0xA8732C", VA = "0xA8732C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDA00", Offset = "0x7FDA00")]
			remove
			{
			}
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xA873D0", Offset = "0xA873D0", VA = "0xA873D0")]
		private void Start()
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xA87478", Offset = "0xA87478", VA = "0xA87478")]
		public void InvokePlankButtonPress()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xA87510", Offset = "0xA87510", VA = "0xA87510", Slot = "14")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xA87514", Offset = "0xA87514", VA = "0xA87514", Slot = "15")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xA87518", Offset = "0xA87518", VA = "0xA87518", Slot = "13")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xA875A8", Offset = "0xA875A8", VA = "0xA875A8", Slot = "12")]
		public override void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xA87628", Offset = "0xA87628", VA = "0xA87628")]
		public void OnPress()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xA8785C", Offset = "0xA8785C", VA = "0xA8785C")]
		public void OnRelease()
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xA878DC", Offset = "0xA878DC", VA = "0xA878DC")]
		public void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xA879EC", Offset = "0xA879EC", VA = "0xA879EC")]
		public void OnBeamEnter()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xA87BF4", Offset = "0xA87BF4", VA = "0xA87BF4")]
		public void OnBeamExit()
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xA87CB0", Offset = "0xA87CB0", VA = "0xA87CB0")]
		public void SetSprite()
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xA87CB4", Offset = "0xA87CB4", VA = "0xA87CB4")]
		public PlankButton()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class RecenterPopupMenu : MonoBehaviour
	{
		[Token(Token = "0x2000465")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB8C", Offset = "0x7EEB8C")]
		private sealed class <ClosePopup>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700036E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C9F")]
				[Address(RVA = "0xA8A238", Offset = "0xA8A238", VA = "0xA8A238", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CA1")]
				[Address(RVA = "0xA8A2A0", Offset = "0xA8A2A0", VA = "0xA8A2A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C9C")]
			[Address(RVA = "0xA89FB4", Offset = "0xA89FB4", VA = "0xA89FB4")]
			[DebuggerHidden]
			public <ClosePopup>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6001C9D")]
			[Address(RVA = "0xA8A0D8", Offset = "0xA8A0D8", VA = "0xA8A0D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C9E")]
			[Address(RVA = "0xA8A0DC", Offset = "0xA8A0DC", VA = "0xA8A0DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CA0")]
			[Address(RVA = "0xA8A240", Offset = "0xA8A240", VA = "0xA8A240", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool finishedRotating;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Quaternion rotTarget;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float currUISpeed;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float lifeTime;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float currLife;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject recenterPanel;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject resumePanel;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Image recenterRadial;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Text recenterCurrLifeText;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image resumeRadial;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Text resumeCurrLifeText;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject recenterAfterText;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject recenterButton;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject resumeButtons;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool closingOnCountDown;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SoundGroup]
		public string afterTextSound;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SoundGroup]
		public string beep;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SoundGroup]
		public string lastBeep;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool beepedThisSecond;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float currBlockTime;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xA895EC", Offset = "0xA895EC", VA = "0xA895EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xA89858", Offset = "0xA89858", VA = "0xA89858")]
		private void Update()
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xA89704", Offset = "0xA89704", VA = "0xA89704")]
		private void UpdateRadial()
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xA89E54", Offset = "0xA89E54", VA = "0xA89E54")]
		public void Recenter()
		{
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xA89F54", Offset = "0xA89F54", VA = "0xA89F54")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FDA10", Offset = "0x7FDA10")]
		public IEnumerator ClosePopup()
		{
			return null;
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xA89FE0", Offset = "0xA89FE0", VA = "0xA89FE0")]
		public void ResumeReady()
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xA8A0BC", Offset = "0xA8A0BC", VA = "0xA8A0BC")]
		public RecenterPopupMenu()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public class SkyBrushMaterial : MonoBehaviour
	{
		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer[] controllers;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color32 skyBrushColor;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color32 blackColor;

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xA8A2A8", Offset = "0xA8A2A8", VA = "0xA8A2A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xA8A31C", Offset = "0xA8A31C", VA = "0xA8A31C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xA8A3E4", Offset = "0xA8A3E4", VA = "0xA8A3E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xA8A4AC", Offset = "0xA8A4AC", VA = "0xA8A4AC")]
		public SkyBrushMaterial()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class TipArrow : MonoBehaviour
	{
		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 lookTarget;

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xA8AC38", Offset = "0xA8AC38", VA = "0xA8AC38")]
		private void Update()
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xA8AC70", Offset = "0xA8AC70", VA = "0xA8AC70")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xA8ADB0", Offset = "0xA8ADB0", VA = "0xA8ADB0")]
		public TipArrow()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class VisionController : MonoBehaviour
	{
		[Token(Token = "0x2000466")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEB9C", Offset = "0x7EEB9C")]
		private sealed class <Init>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float wait;

			[Token(Token = "0x40018ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VisionController <>4__this;

			[Token(Token = "0x17000370")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CA5")]
				[Address(RVA = "0xA8C118", Offset = "0xA8C118", VA = "0xA8C118", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000371")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CA7")]
				[Address(RVA = "0xA8C180", Offset = "0xA8C180", VA = "0xA8C180", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CA2")]
			[Address(RVA = "0xA8BE80", Offset = "0xA8BE80", VA = "0xA8BE80")]
			[DebuggerHidden]
			public <Init>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0xA8C04C", Offset = "0xA8C04C", VA = "0xA8C04C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CA4")]
			[Address(RVA = "0xA8C050", Offset = "0xA8C050", VA = "0xA8C050", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0xA8C120", Offset = "0xA8C120", VA = "0xA8C120", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static VisionController Instance;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Animator anim;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool prevOutOfPlayArea;

		[Token(Token = "0x14000040")]
		public event EventHandler FullBlack
		{
			[Token(Token = "0x60015F9")]
			[Address(RVA = "0xA8BA34", Offset = "0xA8BA34", VA = "0xA8BA34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDA74", Offset = "0x7FDA74")]
			add
			{
			}
			[Token(Token = "0x60015FA")]
			[Address(RVA = "0xA8BAD8", Offset = "0xA8BAD8", VA = "0xA8BAD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDA84", Offset = "0x7FDA84")]
			remove
			{
			}
		}

		[Token(Token = "0x14000041")]
		public event EventHandler Heaven
		{
			[Token(Token = "0x60015FB")]
			[Address(RVA = "0xA8BB7C", Offset = "0xA8BB7C", VA = "0xA8BB7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDA94", Offset = "0x7FDA94")]
			add
			{
			}
			[Token(Token = "0x60015FC")]
			[Address(RVA = "0xA8BC20", Offset = "0xA8BC20", VA = "0xA8BC20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDAA4", Offset = "0x7FDAA4")]
			remove
			{
			}
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xA8BCC4", Offset = "0xA8BCC4", VA = "0xA8BCC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xA8BE00", Offset = "0xA8BE00", VA = "0xA8BE00")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FDAB4", Offset = "0x7FDAB4")]
		private IEnumerator Init(float wait)
		{
			return null;
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xA8BEAC", Offset = "0xA8BEAC", VA = "0xA8BEAC")]
		public void InvokeFullBlack()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xA8BF78", Offset = "0xA8BF78", VA = "0xA8BF78")]
		public void InvokeHeaven()
		{
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xA8C044", Offset = "0xA8C044", VA = "0xA8C044")]
		public VisionController()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public enum Pico_ConnectEventType
	{
		[Token(Token = "0x40011F6")]
		LTouchConnected,
		[Token(Token = "0x40011F7")]
		LTouchDisconnected,
		[Token(Token = "0x40011F8")]
		RTouchConnected,
		[Token(Token = "0x40011F9")]
		RTouchDisconnected
	}
	[Token(Token = "0x20002CE")]
	public enum Pico_ControllerType
	{
		[Token(Token = "0x40011FB")]
		LTouch = 0,
		[Token(Token = "0x40011FC")]
		RTouch = 1,
		[Token(Token = "0x40011FD")]
		Generic = 3,
		[Token(Token = "0x40011FE")]
		LHand = 4,
		[Token(Token = "0x40011FF")]
		RHand = 5
	}
	[Token(Token = "0x20002CF")]
	public class ControllerInputHandler : MonoBehaviour
	{
		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool hasLTouch;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool hasRTouch;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pico_InputID[] buttonIDs;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<XRButtonBinding> buttonBinds;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Pico_InputID[] axisIDs;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<XRAxisBinding> axisBinds;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool[] axisZero;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool moveAxisZero;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject controllerL;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject controllerR;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private InputDevice leftController;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InputDevice rightController;

		[Token(Token = "0x17000229")]
		public bool HasLTouch
		{
			[Token(Token = "0x6001610")]
			[Address(RVA = "0xBDECFC", Offset = "0xBDECFC", VA = "0xBDECFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022A")]
		public bool HasRTouch
		{
			[Token(Token = "0x6001611")]
			[Address(RVA = "0xBDED04", Offset = "0xBDED04", VA = "0xBDED04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000042")]
		public event EventHandler<ControllerEventArgs> ControllerButtonDown
		{
			[Token(Token = "0x6001602")]
			[Address(RVA = "0xBD6DA4", Offset = "0xBD6DA4", VA = "0xBD6DA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB18", Offset = "0x7FDB18")]
			add
			{
			}
			[Token(Token = "0x6001603")]
			[Address(RVA = "0xBD7420", Offset = "0xBD7420", VA = "0xBD7420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB28", Offset = "0x7FDB28")]
			remove
			{
			}
		}

		[Token(Token = "0x14000043")]
		public event EventHandler<ControllerEventArgs> ControllerButtonUp
		{
			[Token(Token = "0x6001604")]
			[Address(RVA = "0xBD6E48", Offset = "0xBD6E48", VA = "0xBD6E48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB38", Offset = "0x7FDB38")]
			add
			{
			}
			[Token(Token = "0x6001605")]
			[Address(RVA = "0xBD74C4", Offset = "0xBD74C4", VA = "0xBD74C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB48", Offset = "0x7FDB48")]
			remove
			{
			}
		}

		[Token(Token = "0x14000044")]
		public event EventHandler<ControllerEventArgs> ControllerTouchDown
		{
			[Token(Token = "0x6001606")]
			[Address(RVA = "0xBDE924", Offset = "0xBDE924", VA = "0xBDE924")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB58", Offset = "0x7FDB58")]
			add
			{
			}
			[Token(Token = "0x6001607")]
			[Address(RVA = "0xBDE9C8", Offset = "0xBDE9C8", VA = "0xBDE9C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB68", Offset = "0x7FDB68")]
			remove
			{
			}
		}

		[Token(Token = "0x14000045")]
		public event EventHandler<ControllerEventArgs> ControllerTouch
		{
			[Token(Token = "0x6001608")]
			[Address(RVA = "0xBDEA6C", Offset = "0xBDEA6C", VA = "0xBDEA6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB78", Offset = "0x7FDB78")]
			add
			{
			}
			[Token(Token = "0x6001609")]
			[Address(RVA = "0xBDEB10", Offset = "0xBDEB10", VA = "0xBDEB10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB88", Offset = "0x7FDB88")]
			remove
			{
			}
		}

		[Token(Token = "0x14000046")]
		public event EventHandler<ControllerEventArgs> ControllerTouchUp
		{
			[Token(Token = "0x600160A")]
			[Address(RVA = "0xBDEBB4", Offset = "0xBDEBB4", VA = "0xBDEBB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDB98", Offset = "0x7FDB98")]
			add
			{
			}
			[Token(Token = "0x600160B")]
			[Address(RVA = "0xBDEC58", Offset = "0xBDEC58", VA = "0xBDEC58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDBA8", Offset = "0x7FDBA8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000047")]
		public event EventHandler<ControllerEventArgs> ControllerAxis
		{
			[Token(Token = "0x600160C")]
			[Address(RVA = "0xBD264C", Offset = "0xBD264C", VA = "0xBD264C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDBB8", Offset = "0x7FDBB8")]
			add
			{
			}
			[Token(Token = "0x600160D")]
			[Address(RVA = "0xBD2828", Offset = "0xBD2828", VA = "0xBD2828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDBC8", Offset = "0x7FDBC8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000048")]
		public event EventHandler<ControllerConnectEventArgs> ControllerConnect
		{
			[Token(Token = "0x600160E")]
			[Address(RVA = "0xBD6EEC", Offset = "0xBD6EEC", VA = "0xBD6EEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDBD8", Offset = "0x7FDBD8")]
			add
			{
			}
			[Token(Token = "0x600160F")]
			[Address(RVA = "0xBD7568", Offset = "0xBD7568", VA = "0xBD7568")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDBE8", Offset = "0x7FDBE8")]
			remove
			{
			}
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xBDED0C", Offset = "0xBDED0C", VA = "0xBDED0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xBDEDB8", Offset = "0xBDEDB8", VA = "0xBDEDB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xBDEE98", Offset = "0xBDEE98", VA = "0xBDEE98")]
		private void InvokeButtonDown(Pico_InputID buttonInput, InputDevice device)
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xBDEF68", Offset = "0xBDEF68", VA = "0xBDEF68")]
		private void InvokeButtonUp(Pico_InputID buttonInput, InputDevice device)
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xBDF038", Offset = "0xBDF038", VA = "0xBDF038")]
		private void InvokeAxis(Pico_InputID buttonInput, InputDevice device, float axisValue)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xBDF120", Offset = "0xBDF120", VA = "0xBDF120")]
		private void InvokeControllerConnect(Pico_ConnectEventType type)
		{
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xBDF1B8", Offset = "0xBDF1B8", VA = "0xBDF1B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xBDF224", Offset = "0xBDF224", VA = "0xBDF224")]
		private void ControllerCheck()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xBDEDBC", Offset = "0xBDEDBC", VA = "0xBDEDBC")]
		private void SetInputBinds()
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xBDF258", Offset = "0xBDF258", VA = "0xBDF258")]
		private void HandleControllerInput(bool isLeft)
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xBDF78C", Offset = "0xBDF78C", VA = "0xBDF78C")]
		public void FireHandMenu()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xBDF798", Offset = "0xBDF798", VA = "0xBDF798")]
		private void SetLayerRecursively(GameObject obj, int newLayer)
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xBDFAAC", Offset = "0xBDFAAC", VA = "0xBDFAAC")]
		public ControllerInputHandler()
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xBDF450", Offset = "0xBDF450", VA = "0xBDF450")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDBF8", Offset = "0x7FDBF8")]
		private void <ControllerCheck>g__CheckControllerConnected|44_0(bool isLeft, ref bool cachedConnected)
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xBDF5D0", Offset = "0xBDF5D0", VA = "0xBDF5D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDC08", Offset = "0x7FDC08")]
		private void <SetInputBinds>g__SetButtonBinds|45_0(Pico_InputID input)
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xBDF6C8", Offset = "0xBDF6C8", VA = "0xBDF6C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDC18", Offset = "0x7FDC18")]
		private void <SetInputBinds>g__SetAxisBinds|45_1(Pico_InputID input)
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class ControllerEventArgs : EventArgs
	{
		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pico_InputID buttonID;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float axis;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 touchPos;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pico_InputType inputType;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Pico_ControllerType controllerType;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 vectorZero;

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xBDE704", Offset = "0xBDE704", VA = "0xBDE704")]
		public ControllerEventArgs(Pico_InputID buttonPressed, Pico_ControllerType controllerType)
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xBDE808", Offset = "0xBDE808", VA = "0xBDE808")]
		public ControllerEventArgs(Pico_InputID axisID, Pico_InputType inputType, float axis, Pico_ControllerType controllerType)
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class ControllerConnectEventArgs : EventArgs
	{
		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pico_ConnectEventType connectEventType;

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xBDE688", Offset = "0xBDE688", VA = "0xBDE688")]
		public ControllerConnectEventArgs(Pico_ConnectEventType type)
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class CrossHairSprite : MonoBehaviour
	{
		[Token(Token = "0x2000467")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7EEBAC", Offset = "0x7EEBAC")]
		private sealed class <SetSpriteWithDelay>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CrossHairSprite <>4__this;

			[Token(Token = "0x17000372")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CAB")]
				[Address(RVA = "0xBE0180", Offset = "0xBE0180", VA = "0xBE0180", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000373")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CAD")]
				[Address(RVA = "0xBE01E8", Offset = "0xBE01E8", VA = "0xBE01E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CA8")]
			[Address(RVA = "0xBE0100", Offset = "0xBE0100", VA = "0xBE0100")]
			[DebuggerHidden]
			public <SetSpriteWithDelay>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0xBE0134", Offset = "0xBE0134", VA = "0xBE0134", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CAA")]
			[Address(RVA = "0xBE0138", Offset = "0xBE0138", VA = "0xBE0138", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CAC")]
			[Address(RVA = "0xBE0188", Offset = "0xBE0188", VA = "0xBE0188", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerInputHandler inputHandler;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite DS4Sprite;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite moveSprite;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Sprite noControllerSprite;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xBDFEE8", Offset = "0xBDFEE8", VA = "0xBDFEE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xBDFF40", Offset = "0xBDFF40", VA = "0xBDFF40")]
		public void SetSprite()
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xBDFF44", Offset = "0xBDFF44", VA = "0xBDFF44")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xBDFFD4", Offset = "0xBDFFD4", VA = "0xBDFFD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xBE0064", Offset = "0xBE0064", VA = "0xBE0064")]
		public void OnControllerConnect(object sender, ControllerConnectEventArgs e)
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xBE0090", Offset = "0xBE0090", VA = "0xBE0090")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7FDC28", Offset = "0x7FDC28")]
		private IEnumerator SetSpriteWithDelay()
		{
			return null;
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xBE012C", Offset = "0xBE012C", VA = "0xBE012C")]
		public CrossHairSprite()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class Follower : MonoBehaviour
	{
		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leader;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isFollowing;

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xBE390C", Offset = "0xBE390C", VA = "0xBE390C")]
		private void Update()
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xBE39A0", Offset = "0xBE39A0", VA = "0xBE39A0")]
		public Follower()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool isGrabbed;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GrabbableType type;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer myRenderer;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent OnGrabbed;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent OnUnGrabbed;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color32 highlightColor;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float emissionIntensity;

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xBE42DC", Offset = "0xBE42DC", VA = "0xBE42DC")]
		private void Start()
		{
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xBDBC08", Offset = "0xBDBC08", VA = "0xBDBC08")]
		public void Grabbed()
		{
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xBDBC88", Offset = "0xBDBC88", VA = "0xBDBC88")]
		public void UnGrabbed()
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xBE4324", Offset = "0xBE4324", VA = "0xBE4324")]
		public void OnTelegrabEnter()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xBE4450", Offset = "0xBE4450", VA = "0xBE4450")]
		public void OnTelegrabExit()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xBE4570", Offset = "0xBE4570", VA = "0xBE4570")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public enum GrabbableType
	{
		[Token(Token = "0x4001229")]
		MarkerStart,
		[Token(Token = "0x400122A")]
		MarkerEnd,
		[Token(Token = "0x400122B")]
		PlankObject,
		[Token(Token = "0x400122C")]
		PlankRaiser,
		[Token(Token = "0x400122D")]
		NightmarePanel,
		[Token(Token = "0x400122E")]
		FreeFlightRocket
	}
	[Token(Token = "0x20002D6")]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x400122F")]
		private const int HAPTIC_DURATION = 19;

		[Token(Token = "0x4001230")]
		private const float HAPTIC_STRENGTH = 0.71f;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7F73B4", Offset = "0x7F73B4")]
		public float grabRadius;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Pico_ControllerType handedness;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ControllerInputHandler inputHandler;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool isGrabbing;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float grabThreshold;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float releaseThreshold;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float prevIndexTrigger;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected float prevHandTrigger;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Rigidbody grabbedObject;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Vector3 prevPos;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 currVelocity;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Grabbable grabbable;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3 grabPoint;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector3 prevHandPos;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Quaternion prevHandRot;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SoundGroup]
		public string pickupFlags;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SoundGroup]
		public string releaseFlags;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SoundGroup]
		public string plankObjectSound;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform grabHandle;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected bool isUsingIndexTrigger;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected Vector3 teleGrabOffset;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected bool isTeleGrabbing;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform laser;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool laserOn;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float moveDistanceCounter;

		[Token(Token = "0x1700022B")]
		public bool IsGrabbing
		{
			[Token(Token = "0x6001634")]
			[Address(RVA = "0xBE4578", Offset = "0xBE4578", VA = "0xBE4578")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xBE4580", Offset = "0xBE4580", VA = "0xBE4580")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xBE464C", Offset = "0xBE464C", VA = "0xBE464C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xBE46DC", Offset = "0xBE46DC", VA = "0xBE46DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xBE476C", Offset = "0xBE476C", VA = "0xBE476C", Slot = "4")]
		public virtual void OnControllerAxis(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xBE5788", Offset = "0xBE5788", VA = "0xBE5788", Slot = "5")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xBE5D58", Offset = "0xBE5D58", VA = "0xBE5D58", Slot = "6")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xBE6010", Offset = "0xBE6010", VA = "0xBE6010")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class GuardianOri : MonoBehaviour
	{
		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool m_AllowRecenter;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OVRCameraRig m_mainCamera;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion m_originalTrackerOrientation;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_framecount;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion m_orientToOriginalForward;

		[Token(Token = "0x1700022C")]
		public Quaternion OrientToOriginalForward
		{
			[Token(Token = "0x600163E")]
			[Address(RVA = "0xBE7BA4", Offset = "0xBE7BA4", VA = "0xBE7BA4")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x14000049")]
		public event Action TrackingChanged
		{
			[Token(Token = "0x600163C")]
			[Address(RVA = "0xBE7A5C", Offset = "0xBE7A5C", VA = "0xBE7A5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDC8C", Offset = "0x7FDC8C")]
			add
			{
			}
			[Token(Token = "0x600163D")]
			[Address(RVA = "0xBE7B00", Offset = "0xBE7B00", VA = "0xBE7B00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDC9C", Offset = "0x7FDC9C")]
			remove
			{
			}
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xBE7BB0", Offset = "0xBE7BB0", VA = "0xBE7BB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xBE7D08", Offset = "0xBE7D08", VA = "0xBE7D08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xBE7E7C", Offset = "0xBE7E7C", VA = "0xBE7E7C")]
		private void Recentered()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xBE7E84", Offset = "0xBE7E84", VA = "0xBE7E84")]
		public GuardianOri()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public class Handedness : MonoBehaviour
	{
		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Pico_ControllerType handedness;

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xACBB60", Offset = "0xACBB60", VA = "0xACBB60")]
		public Handedness()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class Interactable : MonoBehaviour
	{
		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Pico_ControllerType currBeam;

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xAD0434", Offset = "0xAD0434", VA = "0xAD0434", Slot = "4")]
		public virtual void OnBeamEnter()
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xAD0544", Offset = "0xAD0544", VA = "0xAD0544", Slot = "5")]
		public virtual void OnBeamExit()
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xAD0548", Offset = "0xAD0548", VA = "0xAD0548", Slot = "6")]
		public virtual void OnBeamDown()
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xAD054C", Offset = "0xAD054C", VA = "0xAD054C", Slot = "7")]
		public virtual void OnBeamUp()
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xAD0550", Offset = "0xAD0550", VA = "0xAD0550")]
		public Interactable()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class LoadingBeam : PS4HeadBeam
	{
		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LoadingBeam otherLoadingBeam;

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xAD6304", Offset = "0xAD6304", VA = "0xAD6304", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xAD6430", Offset = "0xAD6430", VA = "0xAD6430", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xAD6D64", Offset = "0xAD6D64", VA = "0xAD6D64", Slot = "6")]
		public override void OnControllerButtonDown(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xAD6FB4", Offset = "0xAD6FB4", VA = "0xAD6FB4")]
		public LoadingBeam()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class LoadingUIInteractable : UIInteractable
	{
		[Token(Token = "0x600164D")]
		[Address(RVA = "0xAD6FBC", Offset = "0xAD6FBC", VA = "0xAD6FBC", Slot = "4")]
		public override void OnBeamEnter()
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xAD7190", Offset = "0xAD7190", VA = "0xAD7190", Slot = "5")]
		public override void OnBeamExit()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xAD72C8", Offset = "0xAD72C8", VA = "0xAD72C8", Slot = "6")]
		public override void OnBeamDown()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xAD7404", Offset = "0xAD7404", VA = "0xAD7404", Slot = "7")]
		public override void OnBeamUp()
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xAD74E4", Offset = "0xAD74E4", VA = "0xAD74E4")]
		public LoadingUIInteractable()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class Locomotion : MonoBehaviour
	{
		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform cameraRig;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform head;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ControllerInputHandler inputHandler;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float speed;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float minZ;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float maxZ;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool isGoingBack;

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xAD85D0", Offset = "0xAD85D0", VA = "0xAD85D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xAD8650", Offset = "0xAD8650", VA = "0xAD8650")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xAD8764", Offset = "0xAD8764", VA = "0xAD8764")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xAD8878", Offset = "0xAD8878", VA = "0xAD8878")]
		public void OnControllerButtonDown(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xAD8960", Offset = "0xAD8960", VA = "0xAD8960")]
		public void OnControllerButtonUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xAD8A44", Offset = "0xAD8A44", VA = "0xAD8A44")]
		public void OnControllerAxis(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xAD8BC8", Offset = "0xAD8BC8", VA = "0xAD8BC8")]
		public void MoveBack(float axisInput)
		{
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xAD8C98", Offset = "0xAD8C98", VA = "0xAD8C98")]
		public void MoveForward(float axisInput)
		{
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xAD8D68", Offset = "0xAD8D68", VA = "0xAD8D68")]
		public void SpeedUp()
		{
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xAD8D78", Offset = "0xAD8D78", VA = "0xAD8D78")]
		public void SpeedDown()
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xAD8D88", Offset = "0xAD8D88", VA = "0xAD8D88")]
		private void Update()
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xAD8E44", Offset = "0xAD8E44", VA = "0xAD8E44")]
		public Locomotion()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class PS4HeadBeam : MonoBehaviour
	{
		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public GameObject selectedGO;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject prevGO;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected RaycastHit m_Hit;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected ControllerInputHandler inputHandler;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float prevAxis;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject crossHairEmpty;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject crossHairAimed;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Pico_ControllerType beamOwner;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private LineRenderer line;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public PS4HeadBeam otherBeam;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightLocalPos;

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xA84778", Offset = "0xA84778", VA = "0xA84778")]
		protected void Awake()
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xA84804", Offset = "0xA84804", VA = "0xA84804", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xA84930", Offset = "0xA84930", VA = "0xA84930")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xA84AB0", Offset = "0xA84AB0", VA = "0xA84AB0", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xA85A48", Offset = "0xA85A48", VA = "0xA85A48", Slot = "6")]
		public virtual void OnControllerButtonDown(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xA85C6C", Offset = "0xA85C6C", VA = "0xA85C6C")]
		public void OnControllerButtonUp(object sender, ControllerEventArgs e)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xA85DF4", Offset = "0xA85DF4", VA = "0xA85DF4")]
		public void OnHandPinch(object sender, HandEventArgs e)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xA85F20", Offset = "0xA85F20", VA = "0xA85F20")]
		public void OnHandReleasePinch(object sender, HandEventArgs e)
		{
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xA8604C", Offset = "0xA8604C", VA = "0xA8604C")]
		public PS4HeadBeam()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class PhysicalInteractable : Interactable
	{
		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent BeamUp;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent BeamDown;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent BeamEnter;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent BeamExit;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ContentLoader contentLoader;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool active;

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xA86BBC", Offset = "0xA86BBC", VA = "0xA86BBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0xA86C70", Offset = "0xA86C70", VA = "0xA86C70")]
		private void Update()
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xA86C74", Offset = "0xA86C74", VA = "0xA86C74")]
		private void CheckIfInFieldOfView()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xA86E4C", Offset = "0xA86E4C", VA = "0xA86E4C", Slot = "4")]
		public override void OnBeamEnter()
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xA86E94", Offset = "0xA86E94", VA = "0xA86E94", Slot = "5")]
		public override void OnBeamExit()
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xA86EBC", Offset = "0xA86EBC", VA = "0xA86EBC", Slot = "6")]
		public override void OnBeamDown()
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xA86EE4", Offset = "0xA86EE4", VA = "0xA86EE4", Slot = "7")]
		public override void OnBeamUp()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xA86F0C", Offset = "0xA86F0C", VA = "0xA86F0C")]
		public PhysicalInteractable()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class QuestControllerSwapper : MonoBehaviour
	{
		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Q2Controller;

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xA88020", Offset = "0xA88020", VA = "0xA88020")]
		private void Start()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xA8812C", Offset = "0xA8812C", VA = "0xA8812C")]
		public QuestControllerSwapper()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public class SwapZone : MonoBehaviour
	{
		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 tempVector;

		[Token(Token = "0x1400004A")]
		public event EventHandler<SwapEventArgs> Swap
		{
			[Token(Token = "0x6001671")]
			[Address(RVA = "0xA8A8B8", Offset = "0xA8A8B8", VA = "0xA8A8B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDCAC", Offset = "0x7FDCAC")]
			add
			{
			}
			[Token(Token = "0x6001672")]
			[Address(RVA = "0xA8A95C", Offset = "0xA8A95C", VA = "0xA8A95C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDCBC", Offset = "0x7FDCBC")]
			remove
			{
			}
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xA8AA00", Offset = "0xA8AA00", VA = "0xA8AA00")]
		public void InvokeSwap(Transform controllerTransform)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xA8AA98", Offset = "0xA8AA98", VA = "0xA8AA98")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xA8AC2C", Offset = "0xA8AC2C", VA = "0xA8AC2C")]
		private void UpdateNo()
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xA8AC30", Offset = "0xA8AC30", VA = "0xA8AC30")]
		public SwapZone()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	public class SwapEventArgs : EventArgs
	{
		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform controllerTransform;

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xA8A83C", Offset = "0xA8A83C", VA = "0xA8A83C")]
		public SwapEventArgs(Transform inputTransform)
		{
		}
	}
	[Token(Token = "0x20002E2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EE018", Offset = "0x7EE018")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7EE018", Offset = "0x7EE018")]
	public class UIInteractable : Interactable
	{
		[Token(Token = "0x400126F")]
		private const int HOVER_HAPTIC_DURATION = 20;

		[Token(Token = "0x4001270")]
		private const float HAPTIC_STRENGTH = 0.71f;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Image image;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Button button;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Color normalColor;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Color highlightedColor;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Color pressedColor;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float fillTime;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected bool isFilling;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform slider;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected float currFill;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected ButtonLinker linker;

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xA8AEBC", Offset = "0xA8AEBC", VA = "0xA8AEBC")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xA8AF84", Offset = "0xA8AF84", VA = "0xA8AF84", Slot = "4")]
		public override void OnBeamEnter()
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xA8B238", Offset = "0xA8B238", VA = "0xA8B238", Slot = "5")]
		public override void OnBeamExit()
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xA8B3D4", Offset = "0xA8B3D4", VA = "0xA8B3D4", Slot = "6")]
		public override void OnBeamDown()
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xA8B5B0", Offset = "0xA8B5B0", VA = "0xA8B5B0", Slot = "7")]
		public override void OnBeamUp()
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xA8B71C", Offset = "0xA8B71C", VA = "0xA8B71C", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xA8B720", Offset = "0xA8B720", VA = "0xA8B720")]
		public UIInteractable()
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class UILaserTwoStateButton : UIInteractable
	{
		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent beamDown;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent beamUp;

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xA8B730", Offset = "0xA8B730", VA = "0xA8B730", Slot = "6")]
		public override void OnBeamDown()
		{
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xA8B760", Offset = "0xA8B760", VA = "0xA8B760", Slot = "7")]
		public override void OnBeamUp()
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xA8B7AC", Offset = "0xA8B7AC", VA = "0xA8B7AC", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xA8B7B0", Offset = "0xA8B7B0", VA = "0xA8B7B0")]
		public UILaserTwoStateButton()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public enum Pico_InputID
	{
		[Token(Token = "0x400127E")]
		One = 0,
		[Token(Token = "0x400127F")]
		Two = 1,
		[Token(Token = "0x4001280")]
		StickButton = 4,
		[Token(Token = "0x4001281")]
		RightStickHorz = 5,
		[Token(Token = "0x4001282")]
		RightStickVert = 6,
		[Token(Token = "0x4001283")]
		LeftStickHorz = 7,
		[Token(Token = "0x4001284")]
		LeftStickVert = 8,
		[Token(Token = "0x4001285")]
		IndexTrigger = 9,
		[Token(Token = "0x4001286")]
		IndexTriggerButton = 10,
		[Token(Token = "0x4001287")]
		HandTrigger = 11,
		[Token(Token = "0x4001288")]
		Menu = 12,
		[Token(Token = "0x4001289")]
		TouchpadButton = 13
	}
	[Token(Token = "0x20002E5")]
	public enum Pico_InputType
	{
		[Token(Token = "0x400128B")]
		Button,
		[Token(Token = "0x400128C")]
		Axis,
		[Token(Token = "0x400128D")]
		Touch
	}
	[Token(Token = "0x20002E6")]
	public abstract class XRBinding
	{
		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Pico_InputID inputID;

		[Token(Token = "0x6001683")]
		public abstract void Update(InputDevice device);

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xA8C7BC", Offset = "0xA8C7BC", VA = "0xA8C7BC")]
		protected XRBinding(Pico_InputID inputID)
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class XRButtonBinding : XRBinding
	{
		[Token(Token = "0x2000468")]
		public enum ButtonPhase
		{
			[Token(Token = "0x40018F2")]
			Down,
			[Token(Token = "0x40018F3")]
			Up,
			[Token(Token = "0x40018F4")]
			Stay
		}

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<ButtonPhase, Action<Pico_InputID, InputDevice>> buttonBinds;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<InputDevice, bool> previousDeviceStates;

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xA8C7E8", Offset = "0xA8C7E8", VA = "0xA8C7E8", Slot = "4")]
		public override void Update(InputDevice device)
		{
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xA8CC10", Offset = "0xA8CC10", VA = "0xA8CC10")]
		public XRButtonBinding(Pico_InputID inputID, [Optional] Action<Pico_InputID, InputDevice> onDown, [Optional] Action<Pico_InputID, InputDevice> onUp, [Optional] Action<Pico_InputID, InputDevice> onStay)
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class XRAxisBinding : XRBinding
	{
		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<InputDevice, float> previousDeviceStates;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float axis;

		[Token(Token = "0x1400004B")]
		public event Action<Pico_InputID, InputDevice, float> axisUpdated
		{
			[Token(Token = "0x6001687")]
			[Address(RVA = "0xA8C190", Offset = "0xA8C190", VA = "0xA8C190")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDCCC", Offset = "0x7FDCCC")]
			add
			{
			}
			[Token(Token = "0x6001688")]
			[Address(RVA = "0xA8C234", Offset = "0xA8C234", VA = "0xA8C234")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7FDCDC", Offset = "0x7FDCDC")]
			remove
			{
			}
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xA8C2D8", Offset = "0xA8C2D8", VA = "0xA8C2D8", Slot = "4")]
		public override void Update(InputDevice device)
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xA8C730", Offset = "0xA8C730", VA = "0xA8C730")]
		public XRAxisBinding(Pico_InputID inputID, Action<Pico_InputID, InputDevice, float> axisUpdated)
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public static class XRStatics
	{
		[Token(Token = "0x600168B")]
		[Address(RVA = "0xA8CA48", Offset = "0xA8CA48", VA = "0xA8CA48")]
		public static InputFeatureUsage<bool> GetBinaryFeatureFromPico(Pico_InputID buttonID)
		{
			return default(InputFeatureUsage<bool>);
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xA8C648", Offset = "0xA8C648", VA = "0xA8C648")]
		public static InputFeatureUsage<Vector2> Get2AxisFeatureFromPico(Pico_InputID axisID)
		{
			return default(InputFeatureUsage<Vector2>);
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0xA8C52C", Offset = "0xA8C52C", VA = "0xA8C52C")]
		public static InputFeatureUsage<float> GetAxisFeatureFromPico(Pico_InputID axisID)
		{
			return default(InputFeatureUsage<float>);
		}
	}
	[Token(Token = "0x20002EA")]
	public class LocalizationTest : MonoBehaviour
	{
		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text text;

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xAD8508", Offset = "0xAD8508", VA = "0xAD8508")]
		private void Start()
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xAD85C8", Offset = "0xAD85C8", VA = "0xAD85C8")]
		public LocalizationTest()
		{
		}
	}
}
namespace Splines
{
	[Token(Token = "0x20002EB")]
	public class QuadBez
	{
		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 st;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 en;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 ctrl;

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xC29B74", Offset = "0xC29B74", VA = "0xC29B74")]
		public QuadBez(Vector3 st, Vector3 en, Vector3 ctrl)
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xC29BEC", Offset = "0xC29BEC", VA = "0xC29BEC")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xC29D10", Offset = "0xC29D10", VA = "0xC29D10")]
		public Vector3 Velocity(float t)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002EC")]
	public class CubicBez
	{
		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 st;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 en;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 ctrl1;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 ctrl2;

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xC2967C", Offset = "0xC2967C", VA = "0xC2967C")]
		public CubicBez(Vector3 st, Vector3 en, Vector3 ctrl1, Vector3 ctrl2)
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xC2970C", Offset = "0xC2970C", VA = "0xC2970C")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xC29884", Offset = "0xC29884", VA = "0xC29884")]
		public Vector3 Velocity(float t)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002ED")]
	public class CRSpline
	{
		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] pts;

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xC28DBC", Offset = "0xC28DBC", VA = "0xC28DBC")]
		public CRSpline(params Vector3[] pts)
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xC28E44", Offset = "0xC28E44", VA = "0xC28E44")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xC2927C", Offset = "0xC2927C", VA = "0xC2927C")]
		public Vector3 Velocity(float t)
		{
			return default(Vector3);
		}
	}
}
